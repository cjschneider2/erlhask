module 'hipe_icode_fp' ['cfg'/1,
			'module_info'/0,
			'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','state'},[{'typed_record_field',{'record_field',36,{'atom',36,'edge_map'},{'call',36,{'remote',36,{'atom',36,'gb_trees'},{'atom',36,'empty'}},[]}},{'remote_type',36,[{'atom',36,'gb_trees'}|[{'atom',36,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'fp_ebb_map'},{'call',37,{'remote',37,{'atom',37,'gb_trees'},{'atom',37,'empty'}},[]}},{'remote_type',37,[{'atom',37,'gb_trees'}|[{'atom',37,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'cfg'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'record',[{'atom',38,'cfg'}]}]]}}]]],[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'cfg',1},[{'type',42,'fun',[{'type',42,'product',[{'type',42,'record',[{'atom',42,'cfg'}]}]}|[{'type',42,'record',[{'atom',42,'cfg'}]}]]}]}]]
'cfg'/1 =
    %% Line 44
    fun (_cor0) ->
	let <NewCfg> =
	    %% Line 46
	    apply 'annotate_fclearerror'/1
		(_cor0)
	in  let <State> =
		%% Line 47
		apply 'new_state'/1
		    (NewCfg)
	    in  let <NewState> =
		    %% Line 48
		    apply 'place_fp_blocks'/1
			(State)
		in  let <NewState2> =
			%% Line 50
			apply 'finalize'/1
			    (NewState)
		    in  let <NewCfg1> =
			    %% Line 51
			    apply 'state__cfg'/1
				(NewState2)
			in  %% Line 53
			    apply 'unannotate_fclearerror'/1
				(NewCfg1)
'annotate_fclearerror'/1 =
    %% Line 61
    fun (_cor0) ->
	let <Labels> =
	    %% Line 62
	    call 'hipe_icode_cfg':'reverse_postorder'
		(_cor0)
	in  %% Line 63
	    apply 'annotate_fclearerror'/2
		(Labels, _cor0)
'annotate_fclearerror'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],Cfg> when 'true' ->
	      let <BB> =
		  %% Line 66
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Label)
	      in  let <Code> =
		      %% Line 67
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <NewCode> =
			  %% Line 68
			  apply 'annotate_fclearerror1'/4
			      (Code, Label, Cfg, [])
		      in  let <NewBB> =
			      %% Line 69
			      call 'hipe_bb':'code_update'
				  (BB, NewCode)
			  in  let <NewCfg> =
				  %% Line 70
				  call 'hipe_icode_cfg':'bb_add'
				      (Cfg, Label, NewBB)
			      in  %% Line 71
				  apply 'annotate_fclearerror'/2
				      (Left, NewCfg)
	  %% Line 72
	  <[],Cfg> when 'true' ->
	      %% Line 73
	      Cfg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'annotate_fclearerror',2}}] )
	    -| ['compiler_generated'] )
	end
'annotate_fclearerror1'/4 =
    %% Line 75
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Left],Label,Cfg,Acc> when 'true' ->
	      %% Line 76
	      case I of
		%% Line 77
		<{'icode_call',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
		    %% Line 78
		    case call 'hipe_icode':'call_fun'
			     (I) of
		      %% Line 79
		      <'fclearerror'> when 'true' ->
			  let <Fail> =
			      %% Line 80
			      apply 'lookahead_for_fcheckerror'/3
				  (Left, Label, Cfg)
			  in  let <NewI> =
				  %% Line 81
				  call 'hipe_icode':'call_fun_update'
				      (I, {'fclearerror',Fail})
			      in  %% Line 82
				  apply 'annotate_fclearerror1'/4
				      (Left, Label, Cfg, [NewI|Acc])
		      %% Line 83
		      <_cor19> when 'true' ->
			  %% Line 84
			  apply 'annotate_fclearerror1'/4
			      (Left, Label, Cfg, [I|Acc])
		    end
		%% Line 86
		<_cor20> when 'true' ->
		    %% Line 87
		    apply 'annotate_fclearerror1'/4
			(Left, Label, Cfg, [I|Acc])
	      end
	  %% Line 89
	  <[],_X_Label,_X_Cfg,Acc> when 'true' ->
	      %% Line 90
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'annotate_fclearerror1',4}}] )
	    -| ['compiler_generated'] )
	end
'lookahead_for_fcheckerror'/3 =
    %% Line 92
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Left],Label,Cfg> when 'true' ->
	      %% Line 93
	      case I of
		%% Line 94
		<{'icode_call',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
		    %% Line 95
		    case call 'hipe_icode':'call_fun'
			     (I) of
		      %% Line 96
		      <'fcheckerror'> when 'true' ->
			  %% Line 97
			  call 'hipe_icode':'call_fail_label'
			      (I)
		      %% Line 98
		      <_cor19> when 'true' ->
			  %% Line 99
			  apply 'lookahead_for_fcheckerror'/3
			      (Left, Label, Cfg)
		    end
		%% Line 101
		<_cor20> when 'true' ->
		    %% Line 102
		    apply 'lookahead_for_fcheckerror'/3
			(Left, Label, Cfg)
	      end
	  %% Line 104
	  <[],Label,Cfg> when 'true' ->
	      %% Line 105
	      case call 'hipe_icode_cfg':'succ'
		       (Cfg, Label) of
		%% Line 106
		<[]> when 'true' ->
		    call 'erlang':'exit'
			([85|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[102|[112|[32|[101|[98|[98]]]]]]]]]]]]]]]]]]])
		%% Line 107
		<SuccList> when 'true' ->
		    let <Succ> =
			%% Line 108
			call 'erlang':'hd'
			    (SuccList)
		    in  let <_cor6> =
			    %% Line 109
			    call 'hipe_icode_cfg':'bb'
				(Cfg, Label)
			in  let <Code> =
				%% Line 109
				call 'hipe_bb':'code'
				    (_cor6)
			    in  %% Line 110
				apply 'lookahead_for_fcheckerror'/3
				    (Code, Succ, Cfg)
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'lookahead_for_fcheckerror',3}}] )
	    -| ['compiler_generated'] )
	end
'unannotate_fclearerror'/1 =
    %% Line 113
    fun (_cor0) ->
	let <Labels> =
	    %% Line 114
	    call 'hipe_icode_cfg':'reverse_postorder'
		(_cor0)
	in  %% Line 115
	    apply 'unannotate_fclearerror'/2
		(Labels, _cor0)
'unannotate_fclearerror'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],Cfg> when 'true' ->
	      let <BB> =
		  %% Line 118
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Label)
	      in  let <Code> =
		      %% Line 119
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <NewCode> =
			  %% Line 120
			  apply 'unannotate_fclearerror1'/2
			      (Code, [])
		      in  let <NewBB> =
			      %% Line 121
			      call 'hipe_bb':'code_update'
				  (BB, NewCode)
			  in  let <NewCfg> =
				  %% Line 122
				  call 'hipe_icode_cfg':'bb_add'
				      (Cfg, Label, NewBB)
			      in  %% Line 123
				  apply 'unannotate_fclearerror'/2
				      (Left, NewCfg)
	  %% Line 124
	  <[],Cfg> when 'true' ->
	      %% Line 125
	      Cfg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'unannotate_fclearerror',2}}] )
	    -| ['compiler_generated'] )
	end
'unannotate_fclearerror1'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Left],Acc> when 'true' ->
	      %% Line 128
	      case I of
		%% Line 129
		<{'icode_call',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
		    %% Line 130
		    case call 'hipe_icode':'call_fun'
			     (I) of
		      %% Line 131
		      <{'fclearerror',_X_Fail}> when 'true' ->
			  let <NewI> =
			      %% Line 132
			      call 'hipe_icode':'call_fun_update'
				  (I, 'fclearerror')
			  in  %% Line 133
			      apply 'unannotate_fclearerror1'/2
				  (Left, [NewI|Acc])
		      %% Line 134
		      <_cor14> when 'true' ->
			  %% Line 135
			  apply 'unannotate_fclearerror1'/2
			      (Left, [I|Acc])
		    end
		%% Line 137
		<_cor15> when 'true' ->
		    %% Line 138
		    apply 'unannotate_fclearerror1'/2
			(Left, [I|Acc])
	      end
	  %% Line 140
	  <[],Acc> when 'true' ->
	      %% Line 141
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'unannotate_fclearerror1',2}}] )
	    -| ['compiler_generated'] )
	end
'place_fp_blocks'/1 =
    %% Line 147
    fun (_cor0) ->
	let <WorkList> =
	    %% Line 148
	    apply 'new_worklist'/1
		(_cor0)
	in  %% Line 149
	    apply 'transform_block'/2
		(WorkList, _cor0)
'transform_block'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	%% Line 152
	case apply 'get_work'/1
		 (_cor1) of
	  %% Line 153
	  <'none'> when 'true' ->
	      _cor0
	  %% Line 155
	  <{Label,NewWorkList}> when 'true' ->
	      let <BB> =
		  %% Line 157
		  apply 'state__bb'/2
		      (_cor0, Label)
	      in  let <Code1> =
		      %% Line 158
		      call 'hipe_bb':'butlast'
			  (BB)
		  in  let <Last> =
			  %% Line 159
			  call 'hipe_bb':'last'
			      (BB)
		      in  let <_cor5> =
			      %% Line 160
			      apply 'state__pred'/2
				  (_cor0, Label)
			  in  let <NofPreds> =
				  %% Line 160
				  call 'erlang':'length'
				      (_cor5)
			      in  let <Map> =
				      %% Line 161
				      apply 'state__map'/2
					  (_cor0, Label)
				  in  let <FilteredMap> =
					  %% Line 162
					  apply 'filter_map'/2
					      (Map, NofPreds)
				      in  %% Line 163
					  case apply 'do_prelude'/1
						   (FilteredMap) of
					    <{Prelude,NewFilteredMap}> when 'true' ->
						%% Line 167
						case apply 'transform_instrs'/4
							 (Code1, Map, NewFilteredMap, []) of
						  <{FailMap,NewCode1}> when 'true' ->
						      %% Line 168
						      case apply 'transform_instrs'/4
							       ([Last|[]], Map, FailMap, []) of
							<{NewMap,NewCode2}> when 'true' ->
							    let <_cor12> =
								%% Line 169
								call 'hipe_icode':'successors'
								    (Last)
							    in  let <SuccSet0> =
								    %% Line 169
								    call 'ordsets':'from_list'
									(_cor12)
								in  let <_cor14> =
									%% Line 170
									call 'hipe_icode':'fails_to'
									    (Last)
								    in  let <FailSet> =
									    %% Line 170
									    call 'ordsets':'from_list'
										(_cor14)
									in  let <SuccSet> =
										%% Line 171
										call 'ordsets':'subtract'
										    (SuccSet0, FailSet)
									    in  let <NewCode> =
										    %% Line 172
										    call 'erlang':'++'
											(NewCode1, NewCode2)
										in  let <_cor18> =
											%% Line 173
											call 'erlang':'++'
											    (Prelude, NewCode)
										    in  let <NewBB> =
											    %% Line 173
											    call 'hipe_bb':'code_update'
												(BB, _cor18)
											in  let <NewState> =
												%% Line 174
												apply 'state__bb_add'/3
												    (_cor0, Label, NewBB)
											    in  %% Line 175
												case apply 'update_maps'/6
													 (NewState, Label, SuccSet, NewMap, FailSet, FailMap) of
												  %% Line 176
												  <'fixpoint'> when 'true' ->
												      %% Line 177
												      apply 'transform_block'/2
													  (NewWorkList, NewState)
												  %% Line 178
												  <{NewState1,AddBlocks}> when 'true' ->
												      let <NewWorkList1> =
													  %% Line 179
													  apply 'add_work'/2
													      (NewWorkList, AddBlocks)
												      in  %% Line 180
													  apply 'transform_block'/2
													      (NewWorkList1, NewState1)
												  ( <_cor22> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor22})
												    -| ['compiler_generated'] )
												end
							( <_cor11> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor11})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor23> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor23})
	    -| ['compiler_generated'] )
	end
'update_maps'/6 =
    %% Line 184
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 185
	case apply 'update_maps'/5
		 (_cor5, _cor4, _cor3, _cor2, []) of
	  <{NewState,Add1}> when 'true' ->
	      %% Line 186
	      case apply 'update_maps'/5
		       (NewState, _cor4, _cor1, _cor0, Add1) of
		%% Line 187
		<{_X_NewState1,[]}> when 'true' ->
		    'fixpoint'
		%% Line 188
		<Ret = {_X_NewState1,_X_Add}> when 'true' ->
		    Ret
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'update_maps'/5 =
    %% Line 191
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State,From,[To|Left],Map,Acc> when 'true' ->
	      %% Line 192
	      case apply 'state__map_update'/4
		       (State, From, To, Map) of
		%% Line 193
		<'fixpoint'> when 'true' ->
		    %% Line 194
		    apply 'update_maps'/5
			(State, From, Left, Map, Acc)
		%% Line 195
		<NewState> when 'true' ->
		    %% Line 196
		    apply 'update_maps'/5
			(NewState, From, Left, Map, [To|Acc])
	      end
	  %% Line 198
	  <State,_X_From,[],_X_Map,Acc> when 'true' ->
	      %% Line 199
	      {State,Acc}
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update_maps',5}}] )
	    -| ['compiler_generated'] )
	end
'transform_instrs'/4 =
    %% Line 201
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Left],PhiMap,Map,Acc> when 'true' ->
	      let <Defines> =
		  %% Line 202
		  call 'hipe_icode':'defines'
		      (I)
	      in  let <NewMap> =
		      %% Line 203
		      apply 'delete_all'/2
			  (Defines, Map)
		  in  let <NewPhiMap> =
			  %% Line 204
			  apply 'delete_all'/2
			      (Defines, PhiMap)
		      in  %% Line 205
			  case I of
			    %% Line 206
			    <{'icode_phi',_cor45,_cor46,_cor47}> when 'true' ->
				let <Uses> =
				    %% Line 207
				    call 'hipe_icode':'uses'
					(I)
				in  let <_cor14> =
					%% Line 208
					( letrec
					      'lc$^0'/1 =
						  fun (_cor11) ->
						      case _cor11 of
							<[X|_cor9]> when 'true' ->
							    let <_cor10> =
								apply 'lookup'/2
								    (X, PhiMap)
							    in  ( case <> of
								    <>
									when call 'erlang':'=/='
									      (_cor10,
									       'none') ->
									let <_cor12> =
									    apply 'lc$^0'/1
										(_cor9)
									in  ( [X|_cor12]
									      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  apply 'lc$^0'/1
									      (_cor9)
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
							<[]> when 'true' ->
							    []
							( <_cor11> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor11})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (Uses)
					  -| ['list_comprehension'] )
				    in  %% Line 208
					case _cor14 of
					  %% Line 209
					  <[]> when 'true' ->
					      %% Line 211
					      apply 'transform_instrs'/4
						  (Left, NewPhiMap, NewMap, [I|Acc])
					  %% Line 212
					  <_cor48>
					      when call 'erlang':'=:='
						    (_cor14,
						     Uses) ->
					      let <Dst> =
						  %% Line 214
						  call 'hipe_icode':'phi_dst'
						      (I)
					      in  let <NewDst> =
						      %% Line 215
						      call 'hipe_icode':'mk_new_fvar'
							  ()
						  in  let <NewMap1> =
							  %% Line 216
							  call 'gb_trees':'enter'
							      (Dst, NewDst, NewMap)
						      in  let <NewI> =
							      %% Line 217
							      apply 'subst_phi_uncond'/3
								  (I, NewDst, PhiMap)
							  in  %% Line 218
							      apply 'transform_instrs'/4
								  (Left, NewPhiMap, NewMap1, [NewI|Acc])
					  %% Line 219
					  <_cor49> when 'true' ->
					      let <Dst> =
						  %% Line 221
						  call 'hipe_icode':'phi_dst'
						      (I)
					      in  let <NewI> =
						      %% Line 222
						      apply 'subst_phi'/3
							  (I, Dst, PhiMap)
						  in  %% Line 223
						      apply 'transform_instrs'/4
							  (Left, NewPhiMap, NewMap, [NewI|Acc])
					end
			    %% Line 225
			    <{'icode_call',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
				%% Line 226
				case call 'hipe_icode':'call_fun'
					 (I) of
				  %% Line 227
				  <X>
				      when try
					    ( case <> of
						( <>
						      when call 'erlang':'=:='
							    (X,
							     'unsafe_untag_float') ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      call 'erlang':'=:='
							  (X, 'conv_to_float')
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 228
				      case call 'hipe_icode':'defines'
					       (I) of
					<[Dst|[]]> when 'true' ->
					    %% Line 229
					    case call 'hipe_icode':'uses'
						     (I) of
					      %% Line 230
					      <[]> when 'true' ->
						  %% Line 231
						  apply 'transform_instrs'/4
						      (Left, NewPhiMap, NewMap, [I|Acc])
					      %% Line 232
					      <[Src|[]]> when 'true' ->
						  %% Line 233
						  case apply 'lookup'/2
							   (Src, Map) of
						    %% Line 234
						    <'none'> when 'true' ->
							let <NewMap1> =
							    %% Line 235
							    call 'gb_trees':'enter'
								(Src, {'assigned',Dst}, NewMap)
							in  %% Line 236
							    apply 'transform_instrs'/4
								(Left, NewPhiMap, NewMap1, [I|Acc])
						    %% Line 237
						    <_cor57>
							when call 'erlang':'=:='
							      (_cor57,
							       Dst) ->
							%% Line 240
							apply 'transform_instrs'/4
							    (Left, NewPhiMap, Map, [I|Acc])
						    %% Line 241
						    <FVar> when 'true' ->
							let <NewI> =
							    %% Line 244
							    call 'hipe_icode':'mk_move'
								(Dst, FVar)
							in  %% Line 245
							    case call 'hipe_icode':'call_continuation'
								     (I) of
							      %% Line 246
							      <[]> when 'true' ->
								  %% Line 247
								  apply 'transform_instrs'/4
								      (Left, NewPhiMap, NewMap, [NewI|Acc])
							      %% Line 248
							      <ContLbl> when 'true' ->
								  let <Goto> =
								      %% Line 249
								      call 'hipe_icode':'mk_goto'
									  (ContLbl)
								  in  %% Line 250
								      apply 'transform_instrs'/4
									  (Left, NewPhiMap, NewMap, %% Line 251
												    [Goto|[NewI|Acc]])
							    end
						  end
					      ( <_cor31> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor31})
						-| ['compiler_generated'] )
					    end
					( <_cor25> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor25})
					  -| ['compiler_generated'] )
				      end
				  %% Line 255
				  <'unsafe_tag_float'> when 'true' ->
				      %% Line 256
				      case call 'hipe_icode':'defines'
					       (I) of
					<[Dst|[]]> when 'true' ->
					    %% Line 257
					    case call 'hipe_icode':'uses'
						     (I) of
					      <[Src|[]]> when 'true' ->
						  let <NewMap1> =
						      %% Line 258
						      call 'gb_trees':'enter'
							  (Dst, {'assigned',Src}, NewMap)
						  in  %% Line 259
						      apply 'transform_instrs'/4
							  (Left, NewPhiMap, NewMap1, [I|Acc])
					      ( <_cor33> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor33})
						-| ['compiler_generated'] )
					    end
					( <_cor32> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor32})
					  -| ['compiler_generated'] )
				      end
				  %% Line 260
				  <_cor58> when 'true' ->
				      %% Line 261
				      case apply 'check_for_fop_candidates'/3
					       (I, NewMap, Acc) of
					<{NewMap1,NewAcc}> when 'true' ->
					    %% Line 262
					    apply 'transform_instrs'/4
						(Left, NewPhiMap, NewMap1, NewAcc)
					( <_cor35> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor35})
					  -| ['compiler_generated'] )
				      end
				end
			    %% Line 264
			    <_cor59> when 'true' ->
				let <NewIns> =
				    %% Line 265
				    apply 'handle_untagged_arguments'/2
					(I, NewMap)
				in  let <_cor38> =
					%% Line 266
					call 'erlang':'++'
					    (NewIns, Acc)
				    in  %% Line 266
					apply 'transform_instrs'/4
					    (Left, NewPhiMap, NewMap, _cor38)
			  end
	  %% Line 268
	  <[],_X_PhiMap,Map,Acc> when 'true' ->
	      let <_cor40> =
		  %% Line 269
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 269
		  {Map,_cor40}
	  ( <_cor44,_cor43,_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor44,_cor43,_cor42,_cor41})
		  -| [{'function_name',{'transform_instrs',4}}] )
	    -| ['compiler_generated'] )
	end
'check_for_fop_candidates'/3 =
    %% Line 271
    fun (_cor2,_cor1,_cor0) ->
	%% Line 272
	case apply 'is_fop_cand'/1
		 (_cor2) of
	  %% Line 273
	  <'false'> when 'true' ->
	      let <NewIs> =
		  %% Line 274
		  apply 'handle_untagged_arguments'/2
		      (_cor2, _cor1)
	      in  let <_cor4> =
		      %% Line 275
		      call 'erlang':'++'
			  (NewIs, _cor0)
		  in  %% Line 275
		      {_cor1,_cor4}
	  %% Line 276
	  <'true'> when 'true' ->
	      let <Fail> =
		  %% Line 277
		  call 'hipe_icode':'call_fail_label'
		      (_cor2)
	      in  let <Cont> =
		      %% Line 278
		      call 'hipe_icode':'call_continuation'
			  (_cor2)
		  in  let <_cor7> =
			  %% Line 279
			  call 'hipe_icode':'call_fun'
			      (_cor2)
		      in  let <Op> =
			      %% Line 279
			      apply 'fun_to_fop'/1
				  (_cor7)
			  in  %% Line 280
			      case Fail of
				%% Line 281
				<[]> when 'true' ->
				    let <Args> =
					%% Line 282
					call 'hipe_icode':'args'
					    (_cor2)
				    in  let <_cor15> =
					    %% Line 283
					    ( letrec
						  'lc$^0'/1 =
						      fun (_cor12) ->
							  case _cor12 of
							    <[X|_cor11]> when 'true' ->
								( case call 'hipe_icode':'is_const'
									   (X) of
								    <'true'> when 'true' ->
									let <_cor13> =
									    apply 'lc$^0'/1
										(_cor11)
									in  ( [X|_cor13]
									      -| ['compiler_generated'] )
								    ( <'false'> when 'true' ->
									  apply 'lc$^0'/1
									      (_cor11)
								      -| ['compiler_generated'] )
								    ( <_cor14> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor14})
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor12> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor12})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^0'/1
						      (Args)
					      -| ['list_comprehension'] )
					in  %% Line 284
					    try
						let <_cor20> =
						    ( fun (_cor18) ->
							  let <_cor17> =
							      call 'hipe_icode':'const_value'
								  (_cor18)
							  in  call 'erlang':'float'
								  (_cor17)
						      -| [{'id',{0,0,'-check_for_fop_candidates/3-fun-0-'}}] )
						in  call 'lists':'foreach'
							(_cor20, _cor15)
					    of <_cor21> ->
						case _cor21 of
						  %% Line 286
						  <'ok'> when 'true' ->
						      let <Uses> =
							  %% Line 288
							  call 'hipe_icode':'uses'
							      (_cor2)
						      in  let <Defines> =
							      %% Line 289
							      call 'hipe_icode':'defines'
								  (_cor2)
							  in  let <_cor31> =
								  %% Line 290
								  ( letrec
									'lc$^1'/1 =
									    fun (_cor28) ->
										case _cor28 of
										  <[X|_cor25]> when 'true' ->
										      let <_cor27> =
											  apply 'lookup'/2
											      (X, _cor1)
										      in  ( case <> of
											      <>
												  when call 'erlang':'=:='
													(_cor27,
													 'none') ->
												  let <_cor29> =
												      apply 'lc$^1'/1
													  (_cor25)
												  in  ( [X|_cor29]
													-| ['compiler_generated'] )
											      ( <> when 'true' ->
												    apply 'lc$^1'/1
													(_cor25)
												-| ['compiler_generated'] )
											    end
											    -| ['list_comprehension'] )
										  <[]> when 'true' ->
										      []
										  ( <_cor28> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor28})
											  -| [{'function_name',{'lc$^1',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  let <_cor26> =
									    apply 'remove_duplicates'/1
										(Uses)
									in  apply 'lc$^1'/1
										(_cor26)
								    -| ['list_comprehension'] )
							      in  let <NewMap0> =
								      %% Line 291
								      apply 'add_new_bindings_assigned'/2
									  (_cor31, _cor1)
								  in  let <NewMap> =
									  %% Line 292
									  apply 'add_new_bindings_unassigned'/2
									      (Defines, NewMap0)
								      in  let <ConvIns> =
									      %% Line 293
									      apply 'get_conv_instrs'/2
										  (_cor31, NewMap)
									  in  let <_cor37> =
										  %% Line 294
										  apply 'lookup_list'/2
										      (Defines, NewMap)
									      in  let <_cor36> =
										      %% Line 295
										      apply 'lookup_list_keep_consts'/2
											  (Args, NewMap)
										  in  let <NewI> =
											  %% Line 294
											  call 'hipe_icode':'mk_primop'
											      (_cor37, Op, _cor36, %% Line 296
														   Cont, %% Line 296
															 Fail)
										      in  let <NewI2> =
											      %% Line 297
											      apply 'conv_consts'/2
												  (_cor15, NewI)
											  in  let <_cor40> =
												  %% Line 298
												  [NewI2|call 'erlang':'++'
													     (ConvIns, _cor0)]
											      in  %% Line 298
												  {NewMap,_cor40}
						  ( <_cor41> when 'true' ->
							primop 'match_fail'
							    ({'try_clause',_cor41})
						    -| ['compiler_generated'] )
						end
					    catch <_cor44,_cor43,_cor42> ->
						case <_cor44,_cor43,_cor42> of
						  %% Line 300
						  <'error','badarg',_cor54> when 'true' ->
						      let <NewIs> =
							  %% Line 303
							  apply 'handle_untagged_arguments'/2
							      (_cor2, _cor1)
						      in  let <_cor46> =
							      %% Line 304
							      call 'erlang':'++'
								  (NewIs, _cor0)
							  in  %% Line 304
							      {_cor1,_cor46}
						  ( <_cor44,_cor43,_cor42> when 'true' ->
							primop 'raise'
							    (_cor42, _cor43)
						    -| ['compiler_generated'] )
						end
				%% Line 306
				<_cor55> when 'true' ->
				    let <NewIs> =
					%% Line 307
					apply 'handle_untagged_arguments'/2
					    (_cor2, _cor1)
				    in  let <_cor48> =
					    %% Line 308
					    call 'erlang':'++'
						(NewIs, _cor0)
					in  %% Line 308
					    {_cor1,_cor48}
			      end
	  ( <_cor50> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor50})
	    -| ['compiler_generated'] )
	end
'handle_untagged_arguments'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 318
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[X|_cor3]> when 'true' ->
				( case apply 'must_be_tagged'/2
					   (X, _cor0) of
				    <'true'> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [X|_cor6]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      call 'hipe_icode':'uses'
			  (_cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 318
	    case _cor8 of
	      %% Line 319
	      <[]> when 'true' ->
		  %% Line 320
		  [_cor1|[]]
	      %% Line 321
	      <Tag> when 'true' ->
		  let <_cor15> =
		      %% Line 323
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[%% Line 324
					Dst|_cor10]> when 'true' ->
					  let <_cor12> =
					      %% Line 324
					      call 'gb_trees':'get'
						  (Dst, _cor0)
					  in  let <_cor13> =
						  call 'hipe_icode':'mk_primop'
						      ([Dst|[]], 'unsafe_tag_float', %% Line 324
										     [_cor12|[]])
					      in  let <_cor14> =
						      %% Line 324
						      apply 'lc$^1'/1
							  (_cor10)
						  in  ( [_cor13|_cor14]
							-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(%% Line 324
				 Tag)
			-| ['list_comprehension'] )
		  in  %% Line 325
		      [_cor1|_cor15]
	    end
'do_prelude'/1 =
    %% Line 330
    fun (_cor0) ->
	%% Line 331
	case call 'gb_trees':'lookup'
		 ('phi', _cor0) of
	  %% Line 332
	  <'none'> when 'true' ->
	      %% Line 333
	      {[],_cor0}
	  %% Line 334
	  <{'value',List}> when 'true' ->
	      let <Fun> =
		  %% Line 336
		  ( fun (_cor3,_cor2) ->
			case <_cor3,_cor2> of
			  <{FVar,Bindings},Acc> when 'true' ->
			      let <_cor1> =
				  %% Line 337
				  call 'hipe_icode':'mk_phi'
				      (FVar, Bindings)
			      in  %% Line 337
				  [_cor1|Acc]
			  ( <_cor5,_cor4> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5,_cor4})
				  -| [{'function_name',{'-do_prelude/1-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-do_prelude/1-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 339
		      call 'lists':'foldl'
			  (Fun, [], List)
		  in  let <_cor7> =
			  %% Line 339
			  call 'gb_trees':'delete'
			      ('phi', _cor0)
		      in  %% Line 339
			  {_cor8,_cor7}
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'split_code'/1 =
    %% Line 342
    fun (_cor0) ->
	%% Line 343
	apply 'split_code'/2
	    (_cor0, [])
'split_code'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|[]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 346
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 346
		  {_cor2,I}
	  %% Line 347
	  <[I|Left],Acc> when 'true' ->
	      %% Line 348
	      apply 'split_code'/2
		  (Left, [I|Acc])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'split_code',2}}] )
	    -| ['compiler_generated'] )
	end
'finalize'/1 =
    %% Line 356
    fun (_cor0) ->
	let <Worklist> =
	    %% Line 357
	    apply 'new_worklist'/1
		(_cor0)
	in  let <NewState> =
		%% Line 358
		apply 'place_error_handling'/2
		    (Worklist, _cor0)
	    in  let <Edges> =
		    %% Line 359
		    apply 'needs_fcheckerror'/1
			(NewState)
		in  %% Line 360
		    apply 'finalize'/2
			(Edges, NewState)
'finalize'/2 =
    %% Line 362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{From,To}|Left],State> when 'true' ->
	      let <NewState> =
		  %% Line 363
		  apply 'add_fp_ebb_fixup'/3
		      (From, To, State)
	      in  %% Line 364
		  apply 'finalize'/2
		      (Left, NewState)
	  %% Line 365
	  <[],State> when 'true' ->
	      %% Line 366
	      State
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'finalize',2}}] )
	    -| ['compiler_generated'] )
	end
'needs_fcheckerror'/1 =
    %% Line 368
    fun (_cor0) ->
	let <Cfg> =
	    %% Line 369
	    apply 'state__cfg'/1
		(_cor0)
	in  let <Labels> =
		%% Line 370
		call 'hipe_icode_cfg':'labels'
		    (Cfg)
	    in  %% Line 371
		apply 'needs_fcheckerror'/3
		    (Labels, _cor0, [])
'needs_fcheckerror'/3 =
    %% Line 373
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Left],State,Acc> when 'true' ->
	      %% Line 374
	      case apply 'state__get_in_block_in'/2
		       (State, Label) of
		%% Line 375
		<{'true',_cor26}> when 'true' ->
		    %% Line 376
		    apply 'needs_fcheckerror'/3
			(Left, State, Acc)
		%% Line 377
		<'false'> when 'true' ->
		    let <Pred> =
			%% Line 378
			apply 'state__pred'/2
			    (State, Label)
		    in  let <_cor10> =
			    %% Line 379
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor7) ->
					  case _cor7 of
					    <[X|_cor5]> when 'true' ->
						let <_cor6> =
						    apply 'state__get_in_block_out'/2
							(State, X)
						in  ( case <> of
							<>
							    when call 'erlang':'=/='
								  (_cor6,
								   'false') ->
							    let <_cor8> =
								apply 'lc$^0'/1
								    (_cor5)
							    in  ( [X|_cor8]
								  -| ['compiler_generated'] )
							( <> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor5)
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor7> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Pred)
			      -| ['list_comprehension'] )
			in  %% Line 379
			    case _cor10 of
			      %% Line 380
			      <[]> when 'true' ->
				  %% Line 381
				  apply 'needs_fcheckerror'/3
				      (Left, State, Acc)
			      %% Line 382
			      <NeedsFcheck> when 'true' ->
				  let <_cor12> =
				      %% Line 383
				      call 'erlang':'length'
					  (Pred)
				  in  let <_cor11> =
					  %% Line 383
					  call 'erlang':'length'
					      (NeedsFcheck)
				      in  %% Line 383
					  case <> of
					    %% Line 384
					    <>
						when call 'erlang':'=:='
						      (_cor12,
						       _cor11) ->
						%% Line 387
						apply 'needs_fcheckerror'/3
						    (Left, State, [{'none',Label}|Acc])
					    %% Line 388
					    <> when 'true' ->
						let <_cor17> =
						    %% Line 389
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor15) ->
								  case _cor15 of
								    <[X|_cor14]> when 'true' ->
									let <_cor16> =
									    apply 'lc$^1'/1
										(_cor14)
									in  ( [{X,Label}|_cor16]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor15> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor15})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (NeedsFcheck)
						      -| ['list_comprehension'] )
						in  let <_cor19> =
							%% Line 390
							call 'erlang':'++'
							    (_cor17, Acc)
						    in  %% Line 390
							apply 'needs_fcheckerror'/3
							    (Left, State, _cor19)
					  end
			    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 394
	  <[],_X_State,Acc> when 'true' ->
	      %% Line 395
	      Acc
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'needs_fcheckerror',3}}] )
	    -| ['compiler_generated'] )
	end
'add_fp_ebb_fixup'/3 =
    %% Line 397
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',To,State> when 'true' ->
	      let <BB> =
		  %% Line 399
		  apply 'state__bb'/2
		      (State, To)
	      in  let <Code> =
		      %% Line 400
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <_cor7> =
			  %% Line 401
			  ( fun (_cor5) ->
				call 'hipe_icode':'is_phi'
				    (_cor5)
			    -| [{'id',{0,0,'-add_fp_ebb_fixup/3-fun-0-'}}] )
		      in  let <Phis> =
			      %% Line 401
			      call 'lists':'takewhile'
				  (_cor7, Code)
			  in  let <_cor11> =
				  %% Line 402
				  ( fun (_cor9) ->
					call 'hipe_icode':'is_phi'
					    (_cor9)
				    -| [{'id',{0,0,'-add_fp_ebb_fixup/3-fun-1-'}}] )
			      in  let <TailCode> =
				      %% Line 402
				      call 'lists':'dropwhile'
					  (_cor11, Code)
				  in  let <FC> =
					  %% Line 403
					  call 'hipe_icode':'mk_primop'
					      ([], 'fcheckerror', [])
				      in  let <NewCode> =
					      %% Line 404
					      call 'erlang':'++'
						  (Phis, [FC|TailCode])
					  in  let <_cor15> =
						  %% Line 405
						  call 'hipe_bb':'code_update'
						      (BB, NewCode)
					      in  %% Line 405
						  apply 'state__bb_add'/3
						      (State, To, _cor15)
	  %% Line 406
	  <From,To,State> when 'true' ->
	      let <_cor16> =
		  %% Line 407
		  call 'hipe_icode':'mk_primop'
		      ([], 'fcheckerror', [], To, [])
	      in  let <FCCode> =
		      %% Line 407
		      [_cor16|[]]
		  in  let <FCBB> =
			  %% Line 408
			  call 'hipe_bb':'mk_bb'
			      (FCCode)
		      in  let <_cor19> =
			      %% Line 409
			      call 'hipe_icode':'mk_new_label'
				  ()
			  in  let <FCLabel> =
				  %% Line 409
				  call 'hipe_icode':'label_name'
				      (_cor19)
			      in  let <NewState> =
				      %% Line 410
				      apply 'state__bb_add'/3
					  (State, FCLabel, FCBB)
				  in  let <NewState1> =
					  %% Line 411
					  apply 'state__redirect'/4
					      (NewState, From, To, FCLabel)
				      in  let <ToBB> =
					      %% Line 412
					      apply 'state__bb'/2
						  (NewState, To)
					  in  let <ToCode> =
						  %% Line 413
						  call 'hipe_bb':'code'
						      (ToBB)
					      in  let <NewToCode> =
						      %% Line 414
						      apply 'redirect_phis'/3
							  (ToCode, From, FCLabel)
						  in  let <NewToBB> =
							  %% Line 415
							  call 'hipe_bb':'code_update'
							      (ToBB, NewToCode)
						      in  %% Line 416
							  apply 'state__bb_add'/3
							      (NewState1, To, NewToBB)
	end
'redirect_phis'/3 =
    %% Line 418
    fun (_cor2,_cor1,_cor0) ->
	%% Line 419
	apply 'redirect_phis'/4
	    (_cor2, _cor1, _cor0, [])
'redirect_phis'/4 =
    %% Line 421
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Code = [I|Is],OldFrom,NewFrom,Acc> when 'true' ->
	      %% Line 422
	      case I of
		%% Line 423
		<{'icode_phi',_cor10,_cor11,_cor12}> when 'true' ->
		    let <NewI> =
			%% Line 424
			call 'hipe_icode':'phi_redirect_pred'
			    (I, OldFrom, NewFrom)
		    in  %% Line 425
			apply 'redirect_phis'/4
			    (Is, OldFrom, NewFrom, [NewI|Acc])
		%% Line 426
		<_cor13> when 'true' ->
		    %% Line 427
		    call 'lists':'reverse'
			(Acc, Code)
	      end
	  %% Line 429
	  <[],_X_OldFrom,_X_NewFrom,Acc> when 'true' ->
	      %% Line 430
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'redirect_phis',4}}] )
	    -| ['compiler_generated'] )
	end
'subst_phi'/3 =
    %% Line 432
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 433
	    call 'hipe_icode':'phi_arglist'
		(_cor2)
	in  let <ArgList> =
		%% Line 433
		apply 'subst_phi_uses0'/3
		    (_cor3, _cor0, [])
	    in  %% Line 434
		call 'hipe_icode':'mk_phi'
		    (_cor1, ArgList)
'subst_phi_uses0'/3 =
    %% Line 436
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Pred,Var}|Left],Map,Acc> when 'true' ->
	      %% Line 437
	      case call 'gb_trees':'lookup'
		       (Var, Map) of
		%% Line 438
		<{'value',List}> when 'true' ->
		    %% Line 439
		    case call 'lists':'keyfind'
			     (Pred, 1, List) of
		      %% Line 440
		      <{_cor8,{'assigned',_X_NewVar}}>
			  when call 'erlang':'=:='
				(_cor8,
				 Pred) ->
			  %% Line 442
			  apply 'subst_phi_uses0'/3
			      (Left, Map, [{Pred,Var}|Acc])
		      %% Line 443
		      <PredNV = {_cor9,_X_NewVar}>
			  when call 'erlang':'=:='
				(_cor9,
				 Pred) ->
			  %% Line 445
			  apply 'subst_phi_uses0'/3
			      (Left, Map, [PredNV|Acc])
		      %% Line 446
		      <'false'> when 'true' ->
			  %% Line 448
			  apply 'subst_phi_uses0'/3
			      (Left, Map, [{Pred,Var}|Acc])
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 450
		<'none'> when 'true' ->
		    %% Line 452
		    apply 'subst_phi_uses0'/3
			(Left, Map, [{Pred,Var}|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 454
	  <[],_X_Map,Acc> when 'true' ->
	      %% Line 455
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'subst_phi_uses0',3}}] )
	    -| ['compiler_generated'] )
	end
'subst_phi_uncond'/3 =
    %% Line 457
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 458
	    call 'hipe_icode':'phi_arglist'
		(_cor2)
	in  let <ArgList> =
		%% Line 458
		apply 'subst_phi_uses_uncond0'/3
		    (_cor3, _cor0, [])
	    in  %% Line 459
		call 'hipe_icode':'mk_phi'
		    (_cor1, ArgList)
'subst_phi_uses_uncond0'/3 =
    %% Line 461
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Pred,Var}|Left],Map,Acc> when 'true' ->
	      %% Line 462
	      case call 'gb_trees':'lookup'
		       (Var, Map) of
		%% Line 463
		<{'value',List}> when 'true' ->
		    %% Line 464
		    case call 'lists':'keyfind'
			     (Pred, 1, List) of
		      %% Line 465
		      <{_cor8,{'assigned',NewVar}}>
			  when call 'erlang':'=:='
				(_cor8,
				 Pred) ->
			  %% Line 467
			  apply 'subst_phi_uses_uncond0'/3
			      (Left, Map, [{Pred,NewVar}|Acc])
		      %% Line 468
		      <PredNV = {_cor9,_X_NewVar}>
			  when call 'erlang':'=:='
				(_cor9,
				 Pred) ->
			  %% Line 470
			  apply 'subst_phi_uses_uncond0'/3
			      (Left, Map, [PredNV|Acc])
		      %% Line 471
		      <'false'> when 'true' ->
			  %% Line 473
			  apply 'subst_phi_uses_uncond0'/3
			      (Left, Map, [{Pred,Var}|Acc])
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 475
		<'none'> when 'true' ->
		    %% Line 477
		    apply 'subst_phi_uses_uncond0'/3
			(Left, Map, [{Pred,Var}|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 479
	  <[],_X_Map,Acc> when 'true' ->
	      %% Line 480
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'subst_phi_uses_uncond0',3}}] )
	    -| ['compiler_generated'] )
	end
'place_error_handling'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	%% Line 483
	case apply 'get_work'/1
		 (_cor1) of
	  %% Line 484
	  <'none'> when 'true' ->
	      _cor0
	  %% Line 486
	  <{Label,NewWorkList}> when 'true' ->
	      let <BB> =
		  %% Line 487
		  apply 'state__bb'/2
		      (_cor0, Label)
	      in  let <Code> =
		      %% Line 488
		      call 'hipe_bb':'code'
			  (BB)
		  in  %% Line 489
		      case apply 'state__join_in_block'/2
			       (_cor0, Label) of
			%% Line 490
			<'fixpoint'> when 'true' ->
			    %% Line 491
			    apply 'place_error_handling'/2
				(NewWorkList, _cor0)
			%% Line 492
			<{NewState,NewInBlock}> when 'true' ->
			    %% Line 493
			    case apply 'place_error'/3
				     (Code, NewInBlock, []) of
			      <{NewCode1,InBlockOut}> when 'true' ->
				  let <Succ> =
				      %% Line 494
				      apply 'state__succ'/2
					  (NewState, Label)
				  in  let <NewCode2> =
					  %% Line 495
					  apply 'handle_unchecked_end'/3
					      (Succ, NewCode1, InBlockOut)
				      in  let <NewBB> =
					      %% Line 496
					      call 'hipe_bb':'code_update'
						  (BB, NewCode2)
					  in  let <NewState1> =
						  %% Line 497
						  apply 'state__bb_add'/3
						      (NewState, Label, NewBB)
					      in  let <NewState2> =
						      %% Line 498
						      apply 'state__in_block_out_update'/3
							  (NewState1, Label, InBlockOut)
						  in  let <NewWorkList1> =
							  %% Line 499
							  apply 'add_work'/2
							      (NewWorkList, Succ)
						      in  %% Line 500
							  apply 'place_error_handling'/2
							      (NewWorkList1, NewState2)
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'place_error'/3 =
    %% Line 504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Left],InBlock,Acc> when 'true' ->
	      %% Line 505
	      case I of
		%% Line 506
		<{'icode_call',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
		    %% Line 507
		    case call 'hipe_icode':'call_fun'
			     (I) of
		      %% Line 508
		      <X>
			  when let <_cor3> =
				call 'erlang':'=:='
				    (X, 'fp_add')
			    in  let <_cor4> =
				    call 'erlang':'=:='
					(X, 'fp_sub')
				in  let <_cor5> =
					%% Line 509
					call 'erlang':'=:='
					    (X, 'fp_mul')
				    in  let <_cor6> =
					    %% Line 509
					    call 'erlang':'=:='
						(X, 'fp_div')
					in  let <_cor7> =
						%% Line 509
						call 'erlang':'=:='
						    (X, 'fnegate')
					    in  let <_cor8> =
						    %% Line 509
						    call 'erlang':'or'
							(_cor6, _cor7)
						in  let <_cor9> =
							%% Line 509
							call 'erlang':'or'
							    (_cor5, _cor8)
						    in  let <_cor10> =
							    call 'erlang':'or'
								(_cor4, _cor9)
							in  call 'erlang':'or'
								(_cor3, _cor10) ->
			  %% Line 510
			  case InBlock of
			    %% Line 511
			    <'false'> when 'true' ->
				let <Clear> =
				    %% Line 512
				    call 'hipe_icode':'mk_primop'
					([], {'fclearerror',[]}, [])
				in  %% Line 513
				    apply 'place_error'/3
					(Left, {'true',[]}, [I|[Clear|Acc]])
			    %% Line 514
			    <{'true',_cor42}> when 'true' ->
				%% Line 515
				apply 'place_error'/3
				    (Left, InBlock, [I|Acc])
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 517
		      <'unsafe_tag_float'> when 'true' ->
			  %% Line 518
			  case InBlock of
			    %% Line 519
			    <{'true',Fail}> when 'true' ->
				let <Check> =
				    %% Line 520
				    call 'hipe_icode':'mk_primop'
					([], 'fcheckerror', [], [], Fail)
				in  %% Line 521
				    apply 'place_error'/3
					(Left, 'false', [I|[Check|Acc]])
			    %% Line 522
			    <'false'> when 'true' ->
				%% Line 523
				apply 'place_error'/3
				    (Left, InBlock, [I|Acc])
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
		      %% Line 525
		      <{'fclearerror',Fail}> when 'true' ->
			  %% Line 526
			  case InBlock of
			    %% Line 527
			    <{'true',_cor43}>
				when call 'erlang':'=:='
				      (_cor43,
				       Fail) ->
				%% Line 529
				case call 'hipe_icode':'call_continuation'
					 (I) of
				  %% Line 530
				  <[]> when 'true' ->
				      %% Line 531
				      apply 'place_error'/3
					  (Left, InBlock, Acc)
				  %% Line 532
				  <Cont> when 'true' ->
				      let <_cor15> =
					  %% Line 533
					  call 'hipe_icode':'mk_goto'
					      (Cont)
				      in  %% Line 533
					  apply 'place_error'/3
					      (Left, InBlock, [_cor15|Acc])
				end
			    %% Line 535
			    <{'true',_X_OtherFail}> when 'true' ->
				%% Line 538
				call 'erlang':'exit'
				    ([83|[116|[97|[114|[116|[105|[110|[103|[32|[102|[112|[32|[101|[98|[98|[32|[119|[105|[116|[104|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[102|[97|[105|[108|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 539
			    <'false'> when 'true' ->
				%% Line 540
				apply 'place_error'/3
				    (Left, {'true',Fail}, [I|Acc])
			    ( <_cor17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor17})
			      -| ['compiler_generated'] )
			  end
		      %% Line 542
		      <'fcheckerror'> when 'true' ->
			  let <_cor18> =
			      %% Line 543
			      call 'hipe_icode':'call_fail_label'
				  (I)
			  in  %% Line 543
			      case _cor18 of
				%% Line 544
				<_fol36>
				    when let <_cor44> = {'true',_cor18}
				      in  call 'erlang':'=:='
					      (_cor44, InBlock) ->
				    %% Line 546
				    apply 'place_error'/3
					(Left, 'false', [I|Acc])
				%% Line 547
				<_fol38> when 'true' ->
				    %% Line 548
				    let <NewInblock> = {'true',_fol38}
				    in  call 'erlang':'exit'
					    ({[70|[99|[104|[101|[99|[107|[101|[114|[114|[111|[114|[32|[104|[97|[115|[32|[116|[104|[101|[32|[119|[114|[111|[110|[103|[32|[102|[97|[105|[108|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 549
																															  InBlock,%% Line 549
																																  NewInblock})
			      end
		      %% Line 551
		      <X>
			  when let <_cor20> =
				call 'erlang':'=:='
				    (X, 'conv_to_float')
			    in  let <_cor21> =
				    call 'erlang':'=:='
					(X, 'unsafe_untag_float')
				in  call 'erlang':'or'
					(_cor20, _cor21) ->
			  %% Line 552
			  apply 'place_error'/3
			      (Left, InBlock, [I|Acc])
		      %% Line 553
		      <_X_Other> when 'true' ->
			  let <_cor22> =
			      %% Line 554
			      call 'hipe_icode':'call_fun'
				  (I)
			  in  %% Line 554
			      case call 'hipe_icode_primops':'fails'
				       (_cor22) of
				%% Line 555
				<'false'> when 'true' ->
				    %% Line 556
				    apply 'place_error'/3
					(Left, InBlock, [I|Acc])
				%% Line 557
				<'true'> when 'true' ->
				    %% Line 558
				    case InBlock of
				      %% Line 559
				      <{'true',Fail}> when 'true' ->
					  let <Check> =
					      %% Line 560
					      call 'hipe_icode':'mk_primop'
						  ([], 'fcheckerror', [], [], Fail)
					  in  %% Line 561
					      apply 'place_error'/3
						  (Left, 'false', [I|[Check|Acc]])
				      %% Line 562
				      <'false'> when 'true' ->
					  %% Line 563
					  apply 'place_error'/3
					      (Left, InBlock, [I|Acc])
				      ( <_cor24> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor24})
					-| ['compiler_generated'] )
				    end
				( <_cor25> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor25})
				  -| ['compiler_generated'] )
			      end
		    end
		%% Line 567
		<{'icode_fail',_cor45,_cor46,_cor47}> when 'true' ->
		    %% Line 568
		    apply 'place_error_1'/4
			(I, Left, InBlock, Acc)
		%% Line 569
		<{'icode_return',_cor48}> when 'true' ->
		    %% Line 570
		    apply 'place_error_1'/4
			(I, Left, InBlock, Acc)
		%% Line 571
		<{'icode_enter',_cor49,_cor50,_cor51}> when 'true' ->
		    %% Line 572
		    apply 'place_error_1'/4
			(I, Left, InBlock, Acc)
		%% Line 573
		<Other> when 'true' ->
		    %% Line 574
		    case apply 'instr_allowed_in_fp_ebb'/1
			     (Other) of
		      %% Line 575
		      <'true'> when 'true' ->
			  %% Line 576
			  apply 'place_error'/3
			      (Left, InBlock, [I|Acc])
		      %% Line 577
		      <'false'> when 'true' ->
			  %% Line 578
			  case InBlock of
			    %% Line 579
			    <{'true',[]}> when 'true' ->
				let <Check> =
				    %% Line 580
				    call 'hipe_icode':'mk_primop'
					([], 'fcheckerror', [])
				in  %% Line 581
				    apply 'place_error'/3
					(Left, 'false', [I|[Check|Acc]])
			    %% Line 582
			    <{'true',_cor52}> when 'true' ->
				%% Line 583
				call 'erlang':'exit'
				    ({[73|[108|[108|[101|[103|[97|[108|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[105|[110|[32|[99|[97|[117|[103|[104|[116|[32|[102|[112|[32|[101|[98|[98]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],I})
			    %% Line 584
			    <'false'> when 'true' ->
				%% Line 585
				apply 'place_error'/3
				    (Left, InBlock, [I|Acc])
			    ( <_cor28> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor28})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 589
	  <[],InBlock,Acc> when 'true' ->
	      let <_cor31> =
		  %% Line 590
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 590
		  {_cor31,InBlock}
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'place_error',3}}] )
	    -| ['compiler_generated'] )
	end
'place_error_1'/4 =
    %% Line 592
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 593
	case _cor1 of
	  %% Line 594
	  <{'true',[]}> when 'true' ->
	      let <Check> =
		  %% Line 595
		  call 'hipe_icode':'mk_primop'
		      ([], 'fcheckerror', [])
	      in  %% Line 596
		  apply 'place_error'/3
		      (_cor2, 'false', [_cor3|[Check|_cor0]])
	  %% Line 597
	  <{'true',_cor10}> when 'true' ->
	      %% Line 598
	      call 'erlang':'exit'
		  ({[69|[110|[100|[32|[111|[102|[32|[99|[111|[110|[116|[114|[111|[108|[32|[102|[108|[111|[119|[32|[105|[110|[32|[99|[97|[117|[103|[104|[116|[32|[102|[112|[32|[101|[98|[98]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor3})
	  %% Line 599
	  <'false'> when 'true' ->
	      %% Line 600
	      apply 'place_error'/3
		  (_cor2, _cor1, [_cor3|_cor0])
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'handle_unchecked_end'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	%% Line 607
	case _cor2 of
	  %% Line 608
	  <[]> when 'true' ->
	      %% Line 609
	      case _cor0 of
		%% Line 610
		<{'true',[]}> when 'true' ->
		    %% Line 611
		    case apply 'split_code'/1
			     (_cor1) of
		      <{TopCode,Last}> when 'true' ->
			  let <NewI> =
			      %% Line 612
			      call 'hipe_icode':'mk_primop'
				  ([], 'fcheckerror', [])
			  in  %% Line 613
			      call 'erlang':'++'
				  (TopCode, [NewI|[Last|[]]])
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 614
		<'false'> when 'true' ->
		    _cor1
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 617
	  <_cor10> when 'true' ->
	      _cor1
	end
'instr_allowed_in_fp_ebb'/1 =
    %% Line 621
    fun (_cor0) ->
	%% Line 622
	case _cor0 of
	  %% Line 623
	  <{'icode_comment',_cor3}> when 'true' ->
	      'true'
	  %% Line 624
	  <{'icode_goto',_cor4}> when 'true' ->
	      'true'
	  %% Line 625
	  <{'icode_if',_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      'true'
	  %% Line 626
	  <{'icode_move',_cor10,_cor11}> when 'true' ->
	      'true'
	  %% Line 627
	  <{'icode_phi',_cor12,_cor13,_cor14}> when 'true' ->
	      'true'
	  %% Line 628
	  <{'icode_begin_handler',_cor15}> when 'true' ->
	      'true'
	  %% Line 629
	  <{'icode_switch_tuple_arity',_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      'true'
	  %% Line 630
	  <{'icode_switch_val',_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      'true'
	  %% Line 631
	  <{'icode_type',_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      'true'
	  %% Line 632
	  <_cor29> when 'true' ->
	      'false'
	end
'delete_all'/2 =
    %% Line 642
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|Left],Tree> when 'true' ->
	      let <_cor2> =
		  %% Line 643
		  call 'gb_trees':'delete_any'
		      (Key, Tree)
	      in  %% Line 643
		  apply 'delete_all'/2
		      (Left, _cor2)
	  %% Line 644
	  <[],Tree> when 'true' ->
	      %% Line 645
	      Tree
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete_all',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_list'/2 =
    %% Line 647
    fun (_cor1,_cor0) ->
	%% Line 648
	apply 'lookup_list'/4
	    (_cor1, ( 'lookup'/2
		      -| [{'id',{0,0,'-lookup_list/2-fun-0-'}}] ), _cor0, [])
'lookup_list'/4 =
    %% Line 650
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[H|T],Fun,Info,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 651
		  apply Fun
		      (H, Info)
	      in  %% Line 651
		  apply 'lookup_list'/4
		      (T, Fun, Info, [_cor4|Acc])
	  %% Line 652
	  <[],_cor9,_cor10,Acc> when 'true' ->
	      %% Line 653
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'lookup_list',4}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	%% Line 656
	case call 'hipe_icode':'is_const'
		 (_cor1) of
	  %% Line 659
	  <'true'> when 'true' ->
	      'none'
	  %% Line 660
	  <'false'> when 'true' ->
	      %% Line 661
	      case call 'gb_trees':'lookup'
		       (_cor1, _cor0) of
		%% Line 662
		<'none'> when 'true' ->
		    'none'
		%% Line 663
		<{'value',{'assigned',Val}}> when 'true' ->
		    Val
		%% Line 664
		<{'value',Val}> when 'true' ->
		    Val
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'lookup_list_keep_consts'/2 =
    %% Line 668
    fun (_cor1,_cor0) ->
	%% Line 669
	apply 'lookup_list'/4
	    (_cor1, ( 'lookup_keep_consts'/2
		      -| [{'id',{0,0,'-lookup_list_keep_consts/2-fun-0-'}}] ), _cor0, [])
'lookup_keep_consts'/2 =
    %% Line 671
    fun (_cor1,_cor0) ->
	%% Line 672
	case call 'hipe_icode':'is_const'
		 (_cor1) of
	  %% Line 673
	  <'true'> when 'true' ->
	      _cor1
	  %% Line 674
	  <'false'> when 'true' ->
	      %% Line 675
	      case call 'gb_trees':'lookup'
		       (_cor1, _cor0) of
		%% Line 676
		<'none'> when 'true' ->
		    'none'
		%% Line 677
		<{'value',{'assigned',Val}}> when 'true' ->
		    Val
		%% Line 678
		<{'value',Val}> when 'true' ->
		    Val
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_type'/1 =
    %% Line 682
    fun (_cor0) ->
	%% Line 683
	case call 'hipe_icode':'is_const'
		 (_cor0) of
	  %% Line 684
	  <'true'> when 'true' ->
	      let <_cor1> =
		  call 'hipe_icode':'const_value'
		      (_cor0)
	      in  call 'erl_types':'t_from_term'
		      (_cor1)
	  %% Line 685
	  <'false'> when 'true' ->
	      %% Line 686
	      case call 'hipe_icode':'is_annotated_variable'
		       (_cor0) of
		%% Line 687
		<'true'> when 'true' ->
		    %% Line 688
		    case call 'hipe_icode':'variable_annotation'
			     (_cor0) of
		      <{'type_anno',Type,_cor6}> when 'true' ->
			  %% Line 689
			  Type
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'join_maps'/2 =
    %% Line 697
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 698
	    call 'gb_trees':'empty'
		()
	in  %% Line 698
	    apply 'join_maps'/3
		(_cor1, _cor0, _cor2)
'join_maps'/3 =
    %% Line 700
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Edge = {Pred,_cor9}|Left],EdgeMap,Map> when 'true' ->
	      %% Line 701
	      case call 'gb_trees':'lookup'
		       (Edge, EdgeMap) of
		%% Line 702
		<'none'> when 'true' ->
		    %% Line 704
		    call 'gb_trees':'empty'
			()
		%% Line 705
		<{'value',OldMap}> when 'true' ->
		    let <_cor3> =
			%% Line 706
			call 'gb_trees':'to_list'
			    (OldMap)
		    in  let <NewMap> =
			    %% Line 706
			    apply 'join_maps0'/3
				(_cor3, Pred, Map)
			in  %% Line 707
			    apply 'join_maps'/3
				(Left, EdgeMap, NewMap)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 709
	  <[],_cor10,Map> when 'true' ->
	      %% Line 710
	      Map
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'join_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'join_maps0'/3 =
    %% Line 712
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'phi',_cor10}|Tail],Pred,Map> when 'true' ->
	      %% Line 713
	      apply 'join_maps0'/3
		  (Tail, Pred, Map)
	  %% Line 714
	  <[{Var,FVar}|Tail],Pred,Map> when 'true' ->
	      %% Line 715
	      case call 'gb_trees':'lookup'
		       (Var, Map) of
		%% Line 716
		<'none'> when 'true' ->
		    let <_cor3> =
			%% Line 717
			call 'gb_trees':'enter'
			    (Var, [{Pred,FVar}|[]], Map)
		    in  %% Line 717
			apply 'join_maps0'/3
			    (Tail, Pred, _cor3)
		%% Line 718
		<{'value',List}> when 'true' ->
		    %% Line 719
		    case call 'lists':'keyfind'
			     (Pred, 1, List) of
		      %% Line 720
		      <'false'> when 'true' ->
			  let <_cor4> =
			      %% Line 721
			      call 'gb_trees':'update'
				  (Var, [{Pred,FVar}|List], Map)
			  in  %% Line 721
			      apply 'join_maps0'/3
				  (Tail, Pred, _cor4)
		      %% Line 722
		      <{_cor11,_cor12}>
			  when let <_cor13> =
				call 'erlang':'=:='
				    (_cor11, Pred)
			    in  let <_cor14> =
				    call 'erlang':'=:='
					(_cor12, FVar)
				in  call 'erlang':'and'
					(_cor13, _cor14) ->
			  %% Line 724
			  apply 'join_maps0'/3
			      (Tail, Pred, Map)
		      %% Line 725
		      <_cor15> when 'true' ->
			  %% Line 726
			  call 'erlang':'exit'
			      ('New binding to same variable')
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 729
	  <[],_cor16,Map> when 'true' ->
	      %% Line 730
	      Map
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'join_maps0',3}}] )
	    -| ['compiler_generated'] )
	end
'filter_map'/2 =
    %% Line 732
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 733
	    call 'gb_trees':'to_list'
		(_cor1)
	in  %% Line 733
	    apply 'filter_map'/3
		(_cor2, _cor0, _cor1)
'filter_map'/3 =
    %% Line 735
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Var,Bindings}|Left],NofPreds,Map> when 'true' ->
	      let <_cor3> =
		  %% Line 736
		  call 'erlang':'length'
		      (Bindings)
	      in  %% Line 736
		  case <> of
		    %% Line 737
		    <>
			when call 'erlang':'=:='
			      (_cor3,
			       NofPreds) ->
			%% Line 738
			case apply 'all_args_equal'/1
				 (Bindings) of
			  %% Line 739
			  <'true'> when 'true' ->
			      %% Line 740
			      case call 'erlang':'hd'
				       (Bindings) of
				<{_cor21,FVar}> when 'true' ->
				    let <_cor5> =
					%% Line 741
					call 'gb_trees':'update'
					    (Var, FVar, Map)
				    in  %% Line 741
					apply 'filter_map'/3
					    (Left, NofPreds, _cor5)
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 742
			  <'false'> when 'true' ->
			      let <PhiDst> =
				  %% Line 743
				  call 'hipe_icode':'mk_new_fvar'
				      ()
			      in  let <PhiArgs> =
				      %% Line 744
				      apply 'strip_of_assigned'/1
					  (Bindings)
				  in  let <_cor9> =
					  %% Line 746
					  case call 'gb_trees':'lookup'
						   ('phi', Map) of
					    %% Line 747
					    <'none'> when 'true' ->
						%% Line 748
						call 'gb_trees':'insert'
						    ('phi', [{PhiDst,PhiArgs}|[]], Map)
					    %% Line 749
					    <{'value',Val}> when 'true' ->
						%% Line 750
						call 'gb_trees':'update'
						    ('phi', [{PhiDst,PhiArgs}|Val], Map)
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor8})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor12> =
					      %% Line 753
					      case apply 'bindings_are_assigned'/1
						       (Bindings) of
						%% Line 754
						<'true'> when 'true' ->
						    {'assigned',PhiDst}
						%% Line 755
						<'false'> when 'true' ->
						    PhiDst
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor11})
						  -| ['compiler_generated'] )
					      end
					  in  let <_cor14> =
						  %% Line 757
						  call 'gb_trees':'update'
						      (Var, _cor12, _cor9)
					      in  %% Line 757
						  apply 'filter_map'/3
						      (Left, NofPreds, _cor14)
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		    %% Line 759
		    <> when 'true' ->
			let <_cor16> =
			    %% Line 760
			    call 'gb_trees':'delete'
				(Var, Map)
			in  %% Line 760
			    apply 'filter_map'/3
				(Left, NofPreds, _cor16)
		  end
	  %% Line 762
	  <[],_X_NofPreds,Map> when 'true' ->
	      %% Line 763
	      Map
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'filter_map',3}}] )
	    -| ['compiler_generated'] )
	end
'bindings_are_assigned'/1 =
    %% Line 765
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,{'assigned',_cor3}}|Left]> when 'true' ->
	      do  %% Line 766
		  apply 'assert_assigned'/1
		      (Left)
		  %% Line 767
		  'true'
	  %% Line 768
	  <Bindings> when 'true' ->
	      do  %% Line 769
		  apply 'assert_not_assigned'/1
		      (Bindings)
		  %% Line 770
		  'false'
	end
'assert_assigned'/1 =
    %% Line 772
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,{'assigned',_cor3}}|Left]> when 'true' ->
	      %% Line 773
	      apply 'assert_assigned'/1
		  (Left)
	  %% Line 774
	  <[]> when 'true' ->
	      %% Line 775
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'assert_assigned',1}}] )
	    -| ['compiler_generated'] )
	end
'assert_not_assigned'/1 =
    %% Line 777
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor3,FVar}|Left]> when 'true' ->
	      %% Line 778
	      case call 'hipe_icode':'is_fvar'
		       (FVar) of
		<'true'> when 'true' ->
		    %% Line 779
		    apply 'assert_not_assigned'/1
			(Left)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 780
	  <[]> when 'true' ->
	      %% Line 781
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'assert_not_assigned',1}}] )
	    -| ['compiler_generated'] )
	end
'all_args_equal'/1 =
    %% Line 786
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,FVar}|Left]> when 'true' ->
	      %% Line 787
	      apply 'all_args_equal'/2
		  (Left, FVar)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'all_args_equal',1}}] )
	    -| ['compiler_generated'] )
	end
'all_args_equal'/2 =
    %% Line 789
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor4,FVar1}|Left],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     FVar1) ->
	      %% Line 790
	      apply 'all_args_equal'/2
		  (Left, FVar1)
	  %% Line 791
	  <[],_cor6> when 'true' ->
	      %% Line 792
	      'true'
	  %% Line 793
	  <_cor7,_cor8> when 'true' ->
	      %% Line 794
	      'false'
	end
'add_new_bindings_unassigned'/2 =
    %% Line 800
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Var|Left],Map> when 'true' ->
	      let <FVar> =
		  %% Line 801
		  call 'hipe_icode':'mk_new_fvar'
		      ()
	      in  let <_cor3> =
		      %% Line 802
		      call 'gb_trees':'insert'
			  (Var, FVar, Map)
		  in  %% Line 802
		      apply 'add_new_bindings_unassigned'/2
			  (Left, _cor3)
	  %% Line 803
	  <[],Map> when 'true' ->
	      %% Line 804
	      Map
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_new_bindings_unassigned',2}}] )
	    -| ['compiler_generated'] )
	end
'add_new_bindings_assigned'/2 =
    %% Line 806
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Var|Left],Map> when 'true' ->
	      %% Line 807
	      case apply 'lookup'/2
		       (Var, Map) of
		%% Line 808
		<'none'> when 'true' ->
		    let <FVar> =
			%% Line 809
			call 'hipe_icode':'mk_new_fvar'
			    ()
		    in  let <NewMap> =
			    %% Line 810
			    call 'gb_trees':'insert'
				(Var, {'assigned',FVar}, Map)
			in  %% Line 811
			    apply 'add_new_bindings_assigned'/2
				(Left, NewMap)
		%% Line 812
		<_cor7> when 'true' ->
		    %% Line 813
		    apply 'add_new_bindings_assigned'/2
			(Left, Map)
	      end
	  %% Line 815
	  <[],Map> when 'true' ->
	      %% Line 816
	      Map
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_new_bindings_assigned',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_of_assigned'/1 =
    %% Line 818
    fun (_cor0) ->
	%% Line 819
	apply 'strip_of_assigned'/2
	    (_cor0, [])
'strip_of_assigned'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Pred,{'assigned',Val}}|Left],Acc> when 'true' ->
	      %% Line 822
	      apply 'strip_of_assigned'/2
		  (Left, [{Pred,Val}|Acc])
	  %% Line 823
	  <[Tuple|Left],Acc> when 'true' ->
	      %% Line 824
	      apply 'strip_of_assigned'/2
		  (Left, [Tuple|Acc])
	  %% Line 825
	  <[],Acc> when 'true' ->
	      %% Line 826
	      Acc
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'strip_of_assigned',2}}] )
	    -| ['compiler_generated'] )
	end
'is_fop_cand'/1 =
    %% Line 832
    fun (_cor0) ->
	%% Line 833
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 834
	  <'/'> when 'true' ->
	      'true'
	  %% Line 835
	  <Fun> when 'true' ->
	      %% Line 836
	      case apply 'fun_to_fop'/1
		       (Fun) of
		%% Line 837
		<'false'> when 'true' ->
		    'false'
		%% Line 838
		<_cor5> when 'true' ->
		    let <_cor1> =
			call 'hipe_icode':'args'
			    (_cor0)
		    in  apply 'any_is_float'/1
			    (_cor1)
	      end
	end
'any_is_float'/1 =
    %% Line 842
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 843
	    ( fun (_cor2) ->
		  let <_cor1> =
		      apply 'get_type'/1
			  (_cor2)
		  in  call 'erl_types':'t_is_float'
			  (_cor1)
	      -| [{'id',{0,0,'-any_is_float/1-fun-0-'}}] )
	in  %% Line 843
	    call 'lists':'any'
		(_cor4, _cor0)
'remove_duplicates'/1 =
    %% Line 845
    fun (_cor0) ->
	%% Line 846
	apply 'remove_duplicates'/2
	    (_cor0, [])
'remove_duplicates'/2 =
    %% Line 848
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Left],Acc> when 'true' ->
	      %% Line 849
	      case call 'lists':'member'
		       (X, Acc) of
		%% Line 850
		<'true'> when 'true' ->
		    %% Line 851
		    apply 'remove_duplicates'/2
			(Left, Acc)
		%% Line 852
		<'false'> when 'true' ->
		    %% Line 853
		    apply 'remove_duplicates'/2
			(Left, [X|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 855
	  <[],Acc> when 'true' ->
	      %% Line 856
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'remove_duplicates',2}}] )
	    -| ['compiler_generated'] )
	end
'fun_to_fop'/1 =
    %% Line 858
    fun (_cor0) ->
	%% Line 859
	case _cor0 of
	  %% Line 860
	  <'+'> when 'true' ->
	      'fp_add'
	  %% Line 861
	  <'-'> when 'true' ->
	      'fp_sub'
	  %% Line 862
	  <'*'> when 'true' ->
	      'fp_mul'
	  %% Line 863
	  <'/'> when 'true' ->
	      'fp_div'
	  %% Line 864
	  <_cor3> when 'true' ->
	      'false'
	end
'must_be_tagged'/2 =
    %% Line 871
    fun (_cor1,_cor0) ->
	%% Line 872
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 873
	  <'none'> when 'true' ->
	      'false'
	  %% Line 874
	  <{'value',{'assigned',_cor5}}> when 'true' ->
	      'false'
	  %% Line 875
	  <{'value',Val}> when 'true' ->
	      call 'hipe_icode':'is_fvar'
		  (Val)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_conv_instrs'/2 =
    %% Line 881
    fun (_cor1,_cor0) ->
	%% Line 882
	apply 'get_conv_instrs'/3
	    (_cor1, _cor0, [])
'get_conv_instrs'/3 =
    %% Line 884
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Var|Left],Map,Acc> when 'true' ->
	      %% Line 885
	      case call 'gb_trees':'get'
		       (Var, Map) of
		<{_cor14,Dst}> when 'true' ->
		    let <_cor4> =
			%% Line 887
			apply 'get_type'/1
			    (Var)
		    in  let <_cor8> =
			    %% Line 887
			    case call 'erl_types':'t_is_float'
				     (_cor4) of
			      %% Line 888
			      <'true'> when 'true' ->
				  let <_cor5> =
				      %% Line 889
				      call 'hipe_icode':'mk_primop'
					  ([Dst|[]], 'unsafe_untag_float', [Var|[]])
				  in  %% Line 889
				      [_cor5|[]]
			      %% Line 890
			      <'false'> when 'true' ->
				  let <_cor6> =
				      %% Line 891
				      call 'hipe_icode':'mk_primop'
					  ([Dst|[]], 'conv_to_float', [Var|[]])
				  in  %% Line 891
				      [_cor6|[]]
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
			in  let <_cor10> =
				%% Line 893
				call 'erlang':'++'
				    (_cor8, Acc)
			    in  %% Line 893
				apply 'get_conv_instrs'/3
				    (Left, Map, _cor10)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 894
	  <[],_cor15,Acc> when 'true' ->
	      %% Line 895
	      Acc
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'get_conv_instrs',3}}] )
	    -| ['compiler_generated'] )
	end
'conv_consts'/2 =
    %% Line 898
    fun (_cor1,_cor0) ->
	%% Line 899
	apply 'conv_consts'/3
	    (_cor1, _cor0, [])
'conv_consts'/3 =
    %% Line 901
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Const|Left],I,Subst> when 'true' ->
	      let <_cor3> =
		  %% Line 902
		  call 'hipe_icode':'const_value'
		      (Const)
	      in  let <_cor4> =
		      %% Line 902
		      call 'erlang':'float'
			  (_cor3)
		  in  let <NewConst> =
			  %% Line 902
			  call 'hipe_icode':'mk_const'
			      (_cor4)
		      in  %% Line 903
			  apply 'conv_consts'/3
			      (Left, I, [{Const,NewConst}|Subst])
	  %% Line 904
	  <[],I,Subst> when 'true' ->
	      %% Line 905
	      call 'hipe_icode':'subst_uses'
		  (Subst, I)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'conv_consts',3}}] )
	    -| ['compiler_generated'] )
	end
'new_state'/1 =
    %% Line 913
    fun (_cor0) ->
	let <_cor2> =
	    call 'gb_trees':'empty'
		()
	in  let <_cor1> =
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 914
		{'state',_cor2,_cor1,_cor0}
'state__cfg'/1 =
    %% Line 916
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,Cfg}> when 'true' ->
	      %% Line 917
	      Cfg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__cfg',1}}] )
	    -| ['compiler_generated'] )
	end
'state__succ'/2 =
    %% Line 919
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,_cor5,Cfg},Label> when 'true' ->
	      %% Line 920
	      call 'hipe_icode_cfg':'succ'
		  (Cfg, Label)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__succ',2}}] )
	    -| ['compiler_generated'] )
	end
'state__pred'/2 =
    %% Line 922
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,_cor5,Cfg},Label> when 'true' ->
	      %% Line 923
	      call 'hipe_icode_cfg':'pred'
		  (Cfg, Label)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__pred',2}}] )
	    -| ['compiler_generated'] )
	end
'state__redirect'/4 =
    %% Line 925
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <S = {'state',_cor11,_cor12,Cfg},From,ToOld,ToNew> when 'true' ->
	      let <NewCfg> =
		  %% Line 926
		  call 'hipe_icode_cfg':'redirect'
		      (Cfg, From, ToOld, ToNew)
	      in  %% Line 927
		  call 'erlang':'setelement'
		      (4, S, NewCfg)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'state__redirect',4}}] )
	    -| ['compiler_generated'] )
	end
'state__bb'/2 =
    %% Line 929
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,_cor5,Cfg},Label> when 'true' ->
	      %% Line 930
	      call 'hipe_icode_cfg':'bb'
		  (Cfg, Label)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__bb',2}}] )
	    -| ['compiler_generated'] )
	end
'state__bb_add'/3 =
    %% Line 932
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',_cor9,_cor10,Cfg},Label,BB> when 'true' ->
	      let <NewCfg> =
		  %% Line 933
		  call 'hipe_icode_cfg':'bb_add'
		      (Cfg, Label, BB)
	      in  %% Line 934
		  call 'erlang':'setelement'
		      (4, S, NewCfg)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__bb_add',3}}] )
	    -| ['compiler_generated'] )
	end
'state__map'/2 =
    %% Line 936
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'state',EM,_cor10,_cor11},To> when 'true' ->
	      let <_cor7> =
		  %% Line 937
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[From|_cor3]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [{From,To}|_cor6]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    apply 'state__pred'/2
				(S, To)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  %% Line 937
		  apply 'join_maps'/2
		      (_cor7, EM)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'state__map',2}}] )
	    -| ['compiler_generated'] )
	end
'state__map_update'/4 =
    %% Line 939
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <S = {'state',EM,_cor17,_cor18},From,To,Map> when 'true' ->
	      let <FromTo> = {%% Line 940
		   From,%% Line 940
			To}
	      in  let <_cor7> =
		      %% Line 942
		      case call 'gb_trees':'lookup'
			       (FromTo, EM) of
			%% Line 943
			<{'value',Map1}> when 'true' ->
			    let <_cor5> =
				apply 'match'/2
				    (Map1, Map)
			    in  call 'erlang':'not'
				    (_cor5)
			%% Line 944
			<'none'> when 'true' ->
			    'true'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 946
		      case _cor7 of
			%% Line 947
			<'true'> when 'true' ->
			    let <NewEM> =
				%% Line 948
				call 'gb_trees':'enter'
				    (FromTo, Map, EM)
			    in  %% Line 949
				call 'erlang':'setelement'
				    (2, S, NewEM)
			%% Line 950
			<'false'> when 'true' ->
			    %% Line 951
			    'fixpoint'
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'state__map_update',4}}] )
	    -| ['compiler_generated'] )
	end
'state__join_in_block'/2 =
    %% Line 954
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'state',_cor28,Map,_cor29},Label> when 'true' ->
	      let <Pred> =
		  %% Line 955
		  apply 'state__pred'/2
		      (S, Label)
	      in  let <_cor7> =
		      %% Line 956
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[X|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{X,Label}|_cor6]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Pred)
			-| ['list_comprehension'] )
		  in  let <_cor14> =
			  %% Line 957
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor11) ->
					case _cor11 of
					  <[X|_cor10]> when 'true' ->
					      let <_cor12> =
						  call 'gb_trees':'lookup'
						      (X, Map)
					      in  let <_cor13> =
						      apply 'lc$^1'/1
							  (_cor10)
						  in  ( [_cor12|_cor13]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor11})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (_cor7)
			    -| ['list_comprehension'] )
		      in  let <NewInBlock> =
			      %% Line 957
			      apply 'join_in_block'/1
				  (_cor14)
			  in  let <InBlockLabel> = {%% Line 958
				   'inblock_in',%% Line 958
						Label}
			      in  %% Line 959
				  case call 'gb_trees':'lookup'
					   (InBlockLabel, Map) of
				    %% Line 960
				    <'none'> when 'true' ->
					let <NewMap> =
					    %% Line 961
					    call 'gb_trees':'insert'
						(InBlockLabel, NewInBlock, Map)
					in  let <_cor20> =
						%% Line 962
						call 'erlang':'setelement'
						    (3, S, NewMap)
					    in  %% Line 962
						{_cor20,NewInBlock}
				    %% Line 963
				    <{'value',_cor34}>
					when call 'erlang':'=:='
					      (_cor34,
					       NewInBlock) ->
					%% Line 964
					'fixpoint'
				    %% Line 965
				    <_X_Other> when 'true' ->
					let <NewMap> =
					    %% Line 966
					    call 'gb_trees':'update'
						(InBlockLabel, NewInBlock, Map)
					in  let <_cor24> =
						%% Line 967
						call 'erlang':'setelement'
						    (3, S, NewMap)
					    in  %% Line 967
						{_cor24,NewInBlock}
				  end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'state__join_in_block',2}}] )
	    -| ['compiler_generated'] )
	end
'state__in_block_out_update'/3 =
    %% Line 970
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',_cor17,Map,_cor18},Label,NewInBlock> when 'true' ->
	      let <Succ> =
		  %% Line 971
		  apply 'state__succ'/2
		      (S, Label)
	      in  let <_cor8> =
		      %% Line 972
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[X|_cor5]> when 'true' ->
					  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [{Label,X}|_cor7]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Succ)
			-| ['list_comprehension'] )
		  in  let <NewMap> =
			  %% Line 973
			  apply 'update_edges'/3
			      (_cor8, NewInBlock, Map)
		      in  let <NewMap1> =
			      %% Line 974
			      call 'gb_trees':'enter'
				  ({'inblock_out',Label}, NewInBlock, NewMap)
			  in  %% Line 975
			      call 'erlang':'setelement'
				  (3, S, NewMap1)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'state__in_block_out_update',3}}] )
	    -| ['compiler_generated'] )
	end
'update_edges'/3 =
    %% Line 977
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Edge|Left],NewInBlock,Map> when 'true' ->
	      let <NewMap> =
		  %% Line 978
		  call 'gb_trees':'enter'
		      (Edge, NewInBlock, Map)
	      in  %% Line 979
		  apply 'update_edges'/3
		      (Left, NewInBlock, NewMap)
	  %% Line 980
	  <[],_X_NewInBlock,NewMap> when 'true' ->
	      %% Line 981
	      NewMap
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'update_edges',3}}] )
	    -| ['compiler_generated'] )
	end
'join_in_block'/1 =
    %% Line 983
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 984
	      'false'
	  %% Line 985
	  <['none'|_cor2]> when 'true' ->
	      %% Line 986
	      'false'
	  %% Line 987
	  <[{'value',InBlock}|Left]> when 'true' ->
	      %% Line 988
	      apply 'join_in_block'/2
		  (Left, InBlock)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'join_in_block',1}}] )
	    -| ['compiler_generated'] )
	end
'join_in_block'/2 =
    %% Line 990
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['none'|_cor4],_X_Current> when 'true' ->
	      %% Line 991
	      'false'
	  %% Line 992
	  <[{'value',InBlock}|Left],Current> when 'true' ->
	      %% Line 993
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Current,
			   InBlock) ->
		    apply 'join_in_block'/2
			(Left, Current)
		%% Line 994
		<>
		    when call 'erlang':'=:='
			  (Current,
			   'false') ->
		    'false'
		%% Line 995
		<>
		    when call 'erlang':'=:='
			  (InBlock,
			   'false') ->
		    'false'
		%% Line 996
		<> when 'true' ->
		    call 'erlang':'exit'
			([66|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[105|[115|[32|[105|[110|[32|[116|[119|[111|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[102|[112|[32|[101|[98|[98|[58|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      end
	  %% Line 998
	  <[],Current> when 'true' ->
	      %% Line 999
	      Current
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'join_in_block',2}}] )
	    -| ['compiler_generated'] )
	end
'state__get_in_block_in'/2 =
    %% Line 1002
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,Map,_cor5},Label> when 'true' ->
	      %% Line 1003
	      call 'gb_trees':'get'
		  ({'inblock_in',Label}, Map)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__get_in_block_in',2}}] )
	    -| ['compiler_generated'] )
	end
'state__get_in_block_out'/2 =
    %% Line 1005
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,Map,_cor5},Label> when 'true' ->
	      %% Line 1006
	      call 'gb_trees':'get'
		  ({'inblock_out',Label}, Map)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__get_in_block_out',2}}] )
	    -| ['compiler_generated'] )
	end
'new_worklist'/1 =
    %% Line 1009
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor5,_cor6,Cfg}> when 'true' ->
	      let <Start> =
		  %% Line 1010
		  call 'hipe_icode_cfg':'start_label'
		      (Cfg)
	      in  let <_cor2> =
		      %% Line 1011
		      call 'gb_sets':'empty'
			  ()
		  in  let <_cor3> =
			  %% Line 1011
			  call 'gb_sets':'insert'
			      (Start, _cor2)
		      in  %% Line 1011
			  {[Start|[]],[],_cor3}
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'new_worklist',1}}] )
	    -| ['compiler_generated'] )
	end
'get_work'/1 =
    %% Line 1013
    fun (_cor0) ->
	case _cor0 of
	  <{[Label|Left],List,Set}> when 'true' ->
	      let <_cor1> =
		  %% Line 1014
		  call 'gb_sets':'delete'
		      (Label, Set)
	      in  %% Line 1014
		  {Label,{Left,List,_cor1}}
	  %% Line 1015
	  <{[],[],_X_Set}> when 'true' ->
	      %% Line 1016
	      'none'
	  %% Line 1017
	  <{[],List,Set}> when 'true' ->
	      let <_cor2> =
		  %% Line 1018
		  call 'lists':'reverse'
		      (List)
	      in  %% Line 1018
		  apply 'get_work'/1
		      ({_cor2,[],Set})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_work',1}}] )
	    -| ['compiler_generated'] )
	end
'add_work'/2 =
    %% Line 1020
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Work = {List1,List2,Set},[Label|Left]> when 'true' ->
	      %% Line 1021
	      case call 'gb_sets':'is_member'
		       (Label, Set) of
		%% Line 1022
		<'true'> when 'true' ->
		    %% Line 1023
		    apply 'add_work'/2
			(Work, Left)
		%% Line 1024
		<'false'> when 'true' ->
		    let <NewSet> =
			%% Line 1026
			call 'gb_sets':'insert'
			    (Label, Set)
		    in  %% Line 1027
			apply 'add_work'/2
			    ({List1,[Label|List2],NewSet}, Left)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1029
	  <WorkList,[]> when 'true' ->
	      %% Line 1030
	      WorkList
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_work',2}}] )
	    -| ['compiler_generated'] )
	end
'match'/2 =
    %% Line 1032
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1033
	    call 'gb_trees':'to_list'
		(_cor1)
	in  %% Line 1033
	    ( case apply 'match_1'/2
		       (_cor3, _cor0) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor4> =
			  %% Line 1034
			  call 'gb_trees':'to_list'
			      (_cor0)
		      in  %% Line 1034
			  apply 'match_1'/2
			      (_cor4, _cor1)
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor2> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor2}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'match_1'/2 =
    %% Line 1036
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Key,Val}|Left],Tree2> when 'true' ->
	      %% Line 1037
	      case call 'gb_trees':'lookup'
		       (Key, Tree2) of
		%% Line 1038
		<{'value',_cor5}>
		    when call 'erlang':'=:='
			  (_cor5,
			   Val) ->
		    %% Line 1039
		    apply 'match_1'/2
			(Left, Tree2)
		%% Line 1040
		<_cor6> when 'true' ->
		    'false'
	      end
	  %% Line 1042
	  <[],_cor7> when 'true' ->
	      %% Line 1043
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'match_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_fp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_fp', _cor0)
end