module 'hipe_ppc_ra_finalise' ['finalise'/3,
			       'module_info'/0,
			       'module_info'/1]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','ppc_mfa'},[{'typed_record_field',{'record_field',39,{'atom',39,'m'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'f'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'a'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'arity',[]}]]}}]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','ppc_prim'},[{'record_field',40,{'atom',40,'prim'}}],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','ppc_sdesc'},[{'record_field',41,{'atom',41,'exnlab'}}|[{'record_field',41,{'atom',41,'fsize'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'arity'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'arity',[]}]]}}|[{'record_field',41,{'atom',41,'live'}}]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ppc_simm16'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ppc_temp'},[{'record_field',43,{'atom',43,'reg'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'allocatable'}}]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','ppc_uimm16'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','alu'},[{'record_field',76,{'atom',76,'aluop'}}|[{'record_field',76,{'atom',76,'dst'}}|[{'record_field',76,{'atom',76,'src1'}}|[{'record_field',76,{'atom',76,'src2'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','b_fun'},[{'record_field',77,{'atom',77,'fun'}}|[{'record_field',77,{'atom',77,'linkage'}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','b_label'},[{'record_field',78,{'atom',78,'label'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','bc'},[{'record_field',79,{'atom',79,'bcond'}}|[{'record_field',79,{'atom',79,'label'}}|[{'record_field',79,{'atom',79,'pred'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bctr'},[{'record_field',80,{'atom',80,'labels'}}],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','bctrl'},[{'record_field',81,{'atom',81,'sdesc'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','bl'},[{'record_field',82,{'atom',82,'fun'}}|[{'record_field',82,{'atom',82,'sdesc'}}|[{'record_field',82,{'atom',82,'linkage'}}]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','blr'},[],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','cmp'},[{'record_field',84,{'atom',84,'cmpop'}}|[{'record_field',84,{'atom',84,'src1'}}|[{'record_field',84,{'atom',84,'src2'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'term'}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','label'},[{'record_field',86,{'atom',86,'label'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','load'},[{'record_field',87,{'atom',87,'ldop'}}|[{'record_field',87,{'atom',87,'dst'}}|[{'record_field',87,{'atom',87,'disp'}}|[{'record_field',87,{'atom',87,'base'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','loadx'},[{'record_field',88,{'atom',88,'ldxop'}}|[{'record_field',88,{'atom',88,'dst'}}|[{'record_field',88,{'atom',88,'base1'}}|[{'record_field',88,{'atom',88,'base2'}}]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','mfspr'},[{'record_field',89,{'atom',89,'dst'}}|[{'record_field',89,{'atom',89,'spr'}}]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','mtcr'},[{'record_field',90,{'atom',90,'src'}}],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','mtspr'},[{'record_field',91,{'atom',91,'spr'}}|[{'record_field',91,{'atom',91,'src'}}]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_bc'},[{'record_field',92,{'atom',92,'bcond'}}|[{'record_field',92,{'atom',92,'true_label'}}|[{'record_field',92,{'atom',92,'false_label'}}|[{'record_field',92,{'atom',92,'pred'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call'},[{'record_field',93,{'atom',93,'func'}}|[{'record_field',93,{'atom',93,'sdesc'}}|[{'record_field',93,{'atom',93,'contlab'}}|[{'record_field',93,{'atom',93,'linkage'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_call_prepare'},[{'record_field',94,{'atom',94,'nrstkargs'}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_li'},[{'record_field',95,{'atom',95,'dst'}}|[{'record_field',95,{'atom',95,'imm'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_move'},[{'record_field',96,{'atom',96,'dst'}}|[{'record_field',96,{'atom',96,'src'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'func'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','store'},[{'record_field',99,{'atom',99,'stop'}}|[{'record_field',99,{'atom',99,'src'}}|[{'record_field',99,{'atom',99,'disp'}}|[{'record_field',99,{'atom',99,'base'}}]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','storex'},[{'record_field',100,{'atom',100,'stxop'}}|[{'record_field',100,{'atom',100,'src'}}|[{'record_field',100,{'atom',100,'base1'}}|[{'record_field',100,{'atom',100,'base2'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','unary'},[{'record_field',101,{'atom',101,'unop'}}|[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'src'}}]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','lfd'},[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'disp'}}|[{'record_field',102,{'atom',102,'base'}}]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','lfdx'},[{'record_field',103,{'atom',103,'dst'}}|[{'record_field',103,{'atom',103,'base1'}}|[{'record_field',103,{'atom',103,'base2'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','stfd'},[{'record_field',104,{'atom',104,'src'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'base'}}]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','stfdx'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'base1'}}|[{'record_field',105,{'atom',105,'base2'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','fp_binary'},[{'record_field',106,{'atom',106,'fp_binop'}}|[{'record_field',106,{'atom',106,'dst'}}|[{'record_field',106,{'atom',106,'src1'}}|[{'record_field',106,{'atom',106,'src2'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','fp_unary'},[{'record_field',107,{'atom',107,'fp_unop'}}|[{'record_field',107,{'atom',107,'dst'}}|[{'record_field',107,{'atom',107,'src'}}]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_fmove'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'src'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','defun'},[{'typed_record_field',{'record_field',114,{'atom',114,'mfa'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'mfa',[]}]]}}|[{'record_field',114,{'atom',114,'formals'}}|[{'record_field',114,{'atom',114,'code'}}|[{'typed_record_field',{'record_field',115,{'atom',115,'data'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'isclosure'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'isleaf'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'boolean',[]}]]}}|[{'record_field',118,{'atom',118,'var_range'}}|[{'record_field',118,{'atom',118,'label_range'}}]]]]]]]],[]}]]
'finalise'/3 =
    %% Line 25
    fun (_cor2,_cor1,_cor0) ->
	let <Code> =
	    %% Line 26
	    call 'hipe_ppc':'defun_code'
		(_cor2)
	in  %% Line 27
	    case call 'hipe_ppc':'defun_var_range'
		     (_cor2) of
	      <{_cor13,SpillLimit}> when 'true' ->
		  let <Map> =
		      %% Line 28
		      apply 'mk_ra_map'/2
			  (_cor1, SpillLimit)
		  in  let <FPMap1> =
			  %% Line 29
			  apply 'mk_ra_map_fp'/2
			      (_cor0, SpillLimit)
		      in  let <NewCode> =
			      %% Line 30
			      apply 'ra_code'/4
				  (Code, Map, FPMap1, [])
			  in  %% Line 31
			      case _cor2 of
				<{'defun',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
				    call 'erlang':'setelement'
					(4, _cor2, NewCode)
				( <_cor22> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','defun'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'ra_code'/4 =
    %% Line 33
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Map,FPMap,Accum> when 'true' ->
	      let <_cor4> =
		  %% Line 34
		  apply 'ra_insn'/3
		      (I, Map, FPMap)
	      in  %% Line 34
		  apply 'ra_code'/4
		      (Insns, Map, FPMap, [_cor4|Accum])
	  %% Line 35
	  <[],_X_Map,_X_FPMap,Accum> when 'true' ->
	      %% Line 36
	      call 'lists':'reverse'
		  (Accum)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ra_code',4}}] )
	    -| ['compiler_generated'] )
	end
'ra_insn'/3 =
    %% Line 38
    fun (_cor2,_cor1,_cor0) ->
	%% Line 39
	case _cor2 of
	  %% Line 40
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'ra_alu'/2
		  (_cor2, _cor1)
	  %% Line 41
	  <{'cmp',_cor11,_cor12,_cor13}> when 'true' ->
	      apply 'ra_cmp'/2
		  (_cor2, _cor1)
	  %% Line 42
	  <{'load',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      apply 'ra_load'/2
		  (_cor2, _cor1)
	  %% Line 43
	  <{'loadx',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      apply 'ra_loadx'/2
		  (_cor2, _cor1)
	  %% Line 44
	  <{'mfspr',_cor22,_cor23}> when 'true' ->
	      apply 'ra_mfspr'/2
		  (_cor2, _cor1)
	  %% Line 45
	  <{'mtcr',_cor24}> when 'true' ->
	      apply 'ra_mtcr'/2
		  (_cor2, _cor1)
	  %% Line 46
	  <{'mtspr',_cor25,_cor26}> when 'true' ->
	      apply 'ra_mtspr'/2
		  (_cor2, _cor1)
	  %% Line 47
	  <{'pseudo_li',_cor27,_cor28}> when 'true' ->
	      apply 'ra_pseudo_li'/2
		  (_cor2, _cor1)
	  %% Line 48
	  <{'pseudo_move',_cor29,_cor30}> when 'true' ->
	      apply 'ra_pseudo_move'/2
		  (_cor2, _cor1)
	  %% Line 49
	  <{'pseudo_tailcall',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      apply 'ra_pseudo_tailcall'/2
		  (_cor2, _cor1)
	  %% Line 50
	  <{'store',_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      apply 'ra_store'/2
		  (_cor2, _cor1)
	  %% Line 51
	  <{'storex',_cor39,_cor40,_cor41,_cor42}> when 'true' ->
	      apply 'ra_storex'/2
		  (_cor2, _cor1)
	  %% Line 52
	  <{'unary',_cor43,_cor44,_cor45}> when 'true' ->
	      apply 'ra_unary'/2
		  (_cor2, _cor1)
	  %% Line 53
	  <{'lfd',_cor46,_cor47,_cor48}> when 'true' ->
	      apply 'ra_lfd'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 54
	  <{'lfdx',_cor49,_cor50,_cor51}> when 'true' ->
	      apply 'ra_lfdx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 55
	  <{'stfd',_cor52,_cor53,_cor54}> when 'true' ->
	      apply 'ra_stfd'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 56
	  <{'stfdx',_cor55,_cor56,_cor57}> when 'true' ->
	      apply 'ra_stfdx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 57
	  <{'fp_binary',_cor58,_cor59,_cor60,_cor61}> when 'true' ->
	      apply 'ra_fp_binary'/2
		  (_cor2, _cor0)
	  %% Line 58
	  <{'fp_unary',_cor62,_cor63,_cor64}> when 'true' ->
	      apply 'ra_fp_unary'/2
		  (_cor2, _cor0)
	  %% Line 59
	  <{'pseudo_fmove',_cor65,_cor66}> when 'true' ->
	      apply 'ra_pseudo_fmove'/2
		  (_cor2, _cor0)
	  %% Line 60
	  <_cor67> when 'true' ->
	      _cor2
	end
'ra_alu'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'alu',_cor9,Dst,Src1,Src2},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 64
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewSrc1> =
		      %% Line 65
		      apply 'ra_temp'/2
			  (Src1, Map)
		  in  let <NewSrc2> =
			  %% Line 66
			  apply 'ra_temp_or_imm'/2
			      (Src2, Map)
		      in  %% Line 67
			  {'alu',_cor9,NewDst,NewSrc1,NewSrc2}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_alu',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_cmp'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'cmp',_cor8,Src1,Src2},Map> when 'true' ->
	      let <NewSrc1> =
		  %% Line 70
		  apply 'ra_temp'/2
		      (Src1, Map)
	      in  let <NewSrc2> =
		      %% Line 71
		      apply 'ra_temp_or_imm'/2
			  (Src2, Map)
		  in  %% Line 72
		      {'cmp',_cor8,NewSrc1,NewSrc2}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_cmp',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_load'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'load',_cor9,Dst,_cor10,Base},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 75
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewBase> =
		      %% Line 76
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  let <_cor5> =
			  %% Line 77
			  call 'erlang':'setelement'
			      (5, I, NewBase)
		      in  %% Line 77
			  call 'erlang':'setelement'
			      (3, _cor5, NewDst)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_load',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_loadx'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'loadx',_cor9,Dst,Base1,Base2},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 80
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewBase1> =
		      %% Line 81
		      apply 'ra_temp'/2
			  (Base1, Map)
		  in  let <NewBase2> =
			  %% Line 82
			  apply 'ra_temp'/2
			      (Base2, Map)
		      in  %% Line 83
			  {'loadx',_cor9,NewDst,NewBase1,NewBase2}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_loadx',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_mfspr'/2 =
    %% Line 85
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'mfspr',Dst,_cor7},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 86
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 87
		  call 'erlang':'setelement'
		      (2, I, NewDst)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_mfspr',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_mtcr'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'mtcr',Src},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 90
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  %% Line 91
		  {'mtcr',NewSrc}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_mtcr',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_mtspr'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'mtspr',_cor7,Src},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 94
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  %% Line 95
		  call 'erlang':'setelement'
		      (3, I, NewSrc)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_mtspr',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_li'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_li',Dst,_cor7},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 98
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 99
		  call 'erlang':'setelement'
		      (2, I, NewDst)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_li',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_move'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_move',Dst,Src},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 102
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewSrc> =
		      %% Line 103
		      apply 'ra_temp'/2
			  (Src, Map)
		  in  %% Line 104
		      {'pseudo_move',NewDst,NewSrc}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_move',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_tailcall'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_tailcall',_cor7,_cor8,StkArgs,_cor9},Map> when 'true' ->
	      let <NewStkArgs> =
		  %% Line 107
		  apply 'ra_args'/2
		      (StkArgs, Map)
	      in  %% Line 108
		  call 'erlang':'setelement'
		      (4, I, NewStkArgs)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_tailcall',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_store'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'store',_cor9,Src,_cor10,Base},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 111
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewBase> =
		      %% Line 112
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  let <_cor5> =
			  %% Line 113
			  call 'erlang':'setelement'
			      (5, I, NewBase)
		      in  %% Line 113
			  call 'erlang':'setelement'
			      (3, _cor5, NewSrc)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_store',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_storex'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'storex',_cor9,Src,Base1,Base2},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 116
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewBase1> =
		      %% Line 117
		      apply 'ra_temp'/2
			  (Base1, Map)
		  in  let <NewBase2> =
			  %% Line 118
			  apply 'ra_temp'/2
			      (Base2, Map)
		      in  %% Line 119
			  {'storex',_cor9,NewSrc,NewBase1,NewBase2}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_storex',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_unary'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'unary',_cor8,Dst,Src},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 122
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewSrc> =
		      %% Line 123
		      apply 'ra_temp'/2
			  (Src, Map)
		  in  %% Line 124
		      {'unary',_cor8,NewDst,NewSrc}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_unary',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_lfd'/3 =
    %% Line 126
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'lfd',Dst,_cor10,Base},Map,FPMap> when 'true' ->
	      let <NewDst> =
		  %% Line 127
		  apply 'ra_temp_fp'/2
		      (Dst, FPMap)
	      in  let <NewBase> =
		      %% Line 128
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  %% Line 129
		      {'lfd',NewDst,_cor10,NewBase}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ra_lfd',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_lfdx'/3 =
    %% Line 131
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'lfdx',Dst,Base1,Base2},Map,FPMap> when 'true' ->
	      let <NewDst> =
		  %% Line 132
		  apply 'ra_temp_fp'/2
		      (Dst, FPMap)
	      in  let <NewBase1> =
		      %% Line 133
		      apply 'ra_temp'/2
			  (Base1, Map)
		  in  let <NewBase2> =
			  %% Line 134
			  apply 'ra_temp'/2
			      (Base2, Map)
		      in  %% Line 135
			  {'lfdx',NewDst,NewBase1,NewBase2}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ra_lfdx',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_stfd'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'stfd',Src,_cor10,Base},Map,FPMap> when 'true' ->
	      let <NewSrc> =
		  %% Line 138
		  apply 'ra_temp_fp'/2
		      (Src, FPMap)
	      in  let <NewBase> =
		      %% Line 139
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  %% Line 140
		      {'stfd',NewSrc,_cor10,NewBase}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ra_stfd',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_stfdx'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'stfdx',Src,Base1,Base2},Map,FPMap> when 'true' ->
	      let <NewSrc> =
		  %% Line 143
		  apply 'ra_temp_fp'/2
		      (Src, FPMap)
	      in  let <NewBase1> =
		      %% Line 144
		      apply 'ra_temp'/2
			  (Base1, Map)
		  in  let <NewBase2> =
			  %% Line 145
			  apply 'ra_temp'/2
			      (Base2, Map)
		      in  %% Line 146
			  {'stfdx',NewSrc,NewBase1,NewBase2}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ra_stfdx',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_fp_binary'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_binary',_cor9,Dst,Src1,Src2},FPMap> when 'true' ->
	      let <NewDst> =
		  %% Line 149
		  apply 'ra_temp_fp'/2
		      (Dst, FPMap)
	      in  let <NewSrc1> =
		      %% Line 150
		      apply 'ra_temp_fp'/2
			  (Src1, FPMap)
		  in  let <NewSrc2> =
			  %% Line 151
			  apply 'ra_temp_fp'/2
			      (Src2, FPMap)
		      in  %% Line 152
			  {'fp_binary',_cor9,NewDst,NewSrc1,NewSrc2}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_fp_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_fp_unary'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_unary',_cor8,Dst,Src},FPMap> when 'true' ->
	      let <NewDst> =
		  %% Line 155
		  apply 'ra_temp_fp'/2
		      (Dst, FPMap)
	      in  let <NewSrc> =
		      %% Line 156
		      apply 'ra_temp_fp'/2
			  (Src, FPMap)
		  in  %% Line 157
		      {'fp_unary',_cor8,NewDst,NewSrc}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_fp_unary',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_fmove'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_fmove',Dst,Src},FPMap> when 'true' ->
	      let <NewDst> =
		  %% Line 160
		  apply 'ra_temp_fp'/2
		      (Dst, FPMap)
	      in  let <NewSrc> =
		      %% Line 161
		      apply 'ra_temp_fp'/2
			  (Src, FPMap)
		  in  %% Line 162
		      {'pseudo_fmove',NewDst,NewSrc}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_fmove',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_args'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Arg|Args],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 165
		  apply 'ra_temp_or_imm'/2
		      (Arg, Map)
	      in  let <_cor3> =
		      %% Line 165
		      apply 'ra_args'/2
			  (Args, Map)
		  in  %% Line 165
		      [_cor2|_cor3]
	  %% Line 166
	  <[],_cor6> when 'true' ->
	      %% Line 167
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'ra_args',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_temp_or_imm'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	%% Line 170
	case call 'hipe_ppc':'is_temp'
		 (_cor1) of
	  %% Line 171
	  <'true'> when 'true' ->
	      %% Line 172
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 173
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'ra_temp_fp'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	let <Reg> =
	    %% Line 178
	    call 'hipe_ppc':'temp_reg'
		(_cor1)
	in  %% Line 179
	    case call 'hipe_ppc':'temp_type'
		     (_cor1) of
	      %% Line 180
	      <'double'> when 'true' ->
		  %% Line 181
		  case call 'hipe_ppc_registers':'is_precoloured_fpr'
			   (Reg) of
		    %% Line 182
		    <'true'> when 'true' ->
			_cor1
		    %% Line 183
		    <_cor7> when 'true' ->
			apply 'ra_temp_common'/3
			    (Reg, _cor1, _cor0)
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'ra_temp'/2 =
    %% Line 187
    fun (_cor1,_cor0) ->
	let <Reg> =
	    %% Line 188
	    call 'hipe_ppc':'temp_reg'
		(_cor1)
	in  %% Line 189
	    case call 'hipe_ppc':'temp_type'
		     (_cor1) of
	      %% Line 190
	      <'double'> when 'true' ->
		  %% Line 191
		  call 'erlang':'exit'
		      ({'hipe_ppc_ra_finalise','ra_temp',_cor1})
	      %% Line 192
	      <_cor7> when 'true' ->
		  %% Line 193
		  case call 'hipe_ppc_registers':'is_precoloured_gpr'
			   (Reg) of
		    %% Line 194
		    <'true'> when 'true' ->
			_cor1
		    %% Line 195
		    <_cor8> when 'true' ->
			apply 'ra_temp_common'/3
			    (Reg, _cor1, _cor0)
		  end
	    end
'ra_temp_common'/3 =
    %% Line 199
    fun (_cor2,_cor1,_cor0) ->
	%% Line 200
	case call 'gb_trees':'lookup'
		 (_cor2, _cor0) of
	  %% Line 201
	  <{'value',NewReg}> when 'true' ->
	      case _cor1 of
		<{'ppc_temp',_cor9,_cor10,_cor11}> when 'true' ->
		    call 'erlang':'setelement'
			(2, _cor1, NewReg)
		( <_cor12> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ppc_temp'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 202
	  <_cor13> when 'true' ->
	      _cor1
	end
'mk_ra_map'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 212
	    ( fun (_cor5,_cor4) ->
		  %% Line 213
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, 'is_precoloured_gpr') of
		    <{Key,Val}> when 'true' ->
			%% Line 214
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 216
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 212
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'conv_ra_maplet'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MapLet = {From,To},SpillLimit,IsPrecoloured> when 'true' ->
	      do  %% Line 221
		  case <> of
		    <>
			when let <_cor3> =
			      call 'erlang':'is_integer'
				  (From)
			  in  let <_cor4> =
				  call 'erlang':'=<'
				      (From, SpillLimit)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			%% Line 222
			case call 'hipe_ppc_registers':IsPrecoloured
				 (From) of
			  %% Line 223
			  <'false'> when 'true' ->
			      []
			  %% Line 224
			  <_cor17> when 'true' ->
			      %% Line 225
			      case To of
				%% Line 226
				<{'reg',_cor18}>
				    when call 'erlang':'=:='
					  (_cor18,
					   From) ->
				    []
				%% Line 227
				<_cor19> when 'true' ->
				    call 'erlang':'exit'
					({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
			      end
			end
		    %% Line 230
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
		  end
		  %% Line 233
		  case To of
		    %% Line 234
		    <{'reg',NewReg}> when 'true' ->
			do  %% Line 237
			    case <> of
			      <>
				  when call 'erlang':'is_integer'
					(NewReg) ->
				  %% Line 238
				  case call 'hipe_ppc_registers':IsPrecoloured
					   (NewReg) of
				    %% Line 239
				    <'true'> when 'true' ->
					[]
				    %% Line 240
				    <_cor20> when 'true' ->
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (From,
						     NewReg) ->
					      []
					  %% Line 241
					  <> when 'true' ->
					      %% Line 242
					      call 'erlang':'exit'
						  ({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
					end
				  end
			      %% Line 245
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    %% Line 248
			    {From,NewReg}
		    %% Line 249
		    <{'spill',SpillIndex}> when 'true' ->
			do  %% Line 251
			    case <> of
			      <>
				  when let <_cor8> =
					call 'erlang':'is_integer'
					    (SpillIndex)
				    in  let <_cor9> =
					    call 'erlang':'>='
						(SpillIndex, 0)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
				  []
			      %% Line 252
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    let <_cor10> =
				%% Line 255
				call 'erlang':'+'
				    (SpillLimit, SpillIndex)
			    in  let <ToTempNum> =
				    %% Line 255
				    call 'erlang':'+'
					(_cor10, 1)
				in  let <MaxTempNum> =
					%% Line 256
					call 'hipe_gensym':'get_var'
					    ('ppc')
				    in  do  %% Line 257
					    case <> of
					      <>
						  when call 'erlang':'>='
							(MaxTempNum,
							 ToTempNum) ->
						  'ok'
					      %% Line 258
					      <> when 'true' ->
						  call 'hipe_gensym':'set_var'
						      ('ppc', ToTempNum)
					    end
					    %% Line 260
					    {From,ToTempNum}
		    %% Line 261
		    <_cor21> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_ppc_ra_finalise','conv_ra_maplet',MapLet})
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'conv_ra_maplet',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_ra_map_fp'/2 =
    %% Line 264
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 265
	    ( fun (_cor5,_cor4) ->
		  %% Line 266
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, %% Line 267
					  'is_precoloured_fpr') of
		    <{Key,Val}> when 'true' ->
			%% Line 268
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map_fp/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 270
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 265
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_ra_finalise')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_ra_finalise', _cor0)
end