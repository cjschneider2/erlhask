module 'hipe_amd64_frame' ['frame'/2,
			   'module_info'/0,
			   'module_info'/1]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 426
		'type' =
		    %% Line 426
		    [{{'record','context'},[{'record_field',426,{'atom',426,'liveness'}}|[{'record_field',426,{'atom',426,'framesize'}}|[{'record_field',426,{'atom',426,'arity'}}|[{'record_field',426,{'atom',426,'map'}}|[{'record_field',426,{'atom',426,'ra'}}|[{'record_field',426,{'atom',426,'ref_maxstack'}}]]]]]],[]}]]
'frame'/2 =
    %% Line 48
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 49
	    call 'hipe_x86':'defun_formals'
		(_cor1)
	in  let <Formals> =
		%% Line 49
		apply 'fix_formals'/1
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 50
		    call 'hipe_x86':'defun_code'
			(_cor1)
		in  let <Temps0> =
			%% Line 50
			apply 'all_temps'/2
			    (_cor4, Formals)
		    in  let <MinFrame> =
			    %% Line 51
			    apply 'defun_minframe'/1
				(_cor1)
			in  let <Temps> =
				%% Line 52
				apply 'ensure_minframe'/2
				    (MinFrame, Temps0)
			    in  let <CFG0> =
				    %% Line 53
				    call 'hipe_x86_cfg':'init'
					(_cor1)
				in  let <Liveness> =
					%% Line 54
					call 'hipe_amd64_liveness':'analyse'
					    (CFG0)
				    in  let <CFG1> =
					    %% Line 55
					    apply 'do_body'/4
						(CFG0, Liveness, Formals, Temps)
					in  %% Line 56
					    call 'hipe_x86_cfg':'linearise'
						(CFG1)
'fix_formals'/1 =
    %% Line 58
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 59
	    call 'hipe_amd64_registers':'nr_args'
		()
	in  %% Line 59
	    apply 'fix_formals'/2
		(_cor1, _cor0)
'fix_formals'/2 =
    %% Line 61
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Rest> when 'true' ->
	      Rest
	  %% Line 62
	  <N,[_cor5|Rest]> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'fix_formals'/2
		      (_cor2, Rest)
	  %% Line 63
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fix_formals',2}}] )
	    -| ['compiler_generated'] )
	end
'do_body'/4 =
    %% Line 65
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Context> =
	    %% Line 66
	    apply 'mk_context'/3
		(_cor2, _cor1, _cor0)
	in  let <CFG1> =
		%% Line 67
		apply 'do_blocks'/2
		    (_cor3, Context)
	    in  %% Line 68
		apply 'do_prologue'/2
		    (CFG1, Context)
'do_blocks'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	let <Labels> =
	    %% Line 71
	    call 'hipe_x86_cfg':'labels'
		(_cor1)
	in  %% Line 72
	    apply 'do_blocks'/3
		(Labels, _cor1, _cor0)
'do_blocks'/3 =
    %% Line 74
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Labels],CFG,Context> when 'true' ->
	      let <Liveness> =
		  %% Line 75
		  apply 'context_liveness'/1
		      (Context)
	      in  let <LiveOut> =
		      %% Line 76
		      call 'hipe_amd64_liveness':'liveout'
			  (Liveness, Label)
		  in  let <Block> =
			  %% Line 77
			  call 'hipe_x86_cfg':'bb'
			      (CFG, Label)
		      in  let <Code> =
			      %% Line 78
			      call 'hipe_bb':'code'
				  (Block)
			  in  let <NewCode> =
				  %% Line 79
				  apply 'do_block'/3
				      (Code, LiveOut, Context)
			      in  let <NewBlock> =
				      %% Line 80
				      call 'hipe_bb':'code_update'
					  (Block, NewCode)
				  in  let <NewCFG> =
					  %% Line 81
					  call 'hipe_x86_cfg':'bb_add'
					      (CFG, Label, NewBlock)
				      in  %% Line 82
					  apply 'do_blocks'/3
					      (Labels, NewCFG, Context)
	  %% Line 83
	  <[],CFG,_cor13> when 'true' ->
	      %% Line 84
	      CFG
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'do_block'/3 =
    %% Line 86
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 87
	    apply 'context_framesize'/1
		(_cor0)
	in  %% Line 87
	    apply 'do_block'/5
		(_cor2, _cor1, _cor0, _cor3, [])
'do_block'/5 =
    %% Line 89
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],LiveOut,Context,FPoff0,RevCode> when 'true' ->
	      %% Line 90
	      case apply 'do_insn'/4
		       (I, LiveOut, Context, FPoff0) of
		<{NewIs,FPoff1}> when 'true' ->
		    let <_cor6> =
			%% Line 91
			call 'lists':'reverse'
			    (NewIs, RevCode)
		    in  %% Line 91
			apply 'do_block'/5
			    (Insns, LiveOut, Context, FPoff1, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 92
	  <[],_cor13,Context,FPoff,RevCode> when 'true' ->
	      let <FPoff0> =
		  %% Line 93
		  apply 'context_framesize'/1
		      (Context)
	      in  do  %% Line 94
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (FPoff,
				   FPoff0) ->
			    []
			%% Line 95
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_amd64_frame','do_block',FPoff})
		      end
		      %% Line 97
		      call 'lists':'reverse'
			  (RevCode, [])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_block',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/4 =
    %% Line 99
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 100
	case _cor3 of
	  %% Line 101
	  <{'alu',_cor26,_cor27,_cor28}> when 'true' ->
	      let <_cor4> =
		  %% Line 102
		  apply 'do_alu'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 102
		  {[_cor4|[]],_cor0}
	  %% Line 103
	  <{'cmp',_cor29,_cor30}> when 'true' ->
	      let <_cor5> =
		  %% Line 104
		  apply 'do_cmp'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 104
		  {[_cor5|[]],_cor0}
	  %% Line 105
	  <{'fp_unop',_cor31,_cor32}> when 'true' ->
	      let <_cor6> =
		  %% Line 106
		  apply 'do_fp_unop'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 106
		  {_cor6,_cor0}
	  %% Line 107
	  <{'fp_binop',_cor33,_cor34,_cor35}> when 'true' ->
	      let <_cor7> =
		  %% Line 108
		  apply 'do_fp_binop'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 108
		  {_cor7,_cor0}
	  %% Line 109
	  <{'fmove',_cor36,_cor37}> when 'true' ->
	      let <_cor8> =
		  %% Line 110
		  apply 'do_fmove'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 110
		  {[_cor8|[]],_cor0}
	  %% Line 111
	  <{'imul',_cor38,_cor39,_cor40}> when 'true' ->
	      let <_cor9> =
		  %% Line 112
		  apply 'do_imul'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 112
		  {[_cor9|[]],_cor0}
	  %% Line 113
	  <{'move',_cor41,_cor42}> when 'true' ->
	      let <_cor10> =
		  %% Line 114
		  apply 'do_move'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 114
		  {[_cor10|[]],_cor0}
	  %% Line 115
	  <{'movsx',_cor43,_cor44}> when 'true' ->
	      let <_cor11> =
		  %% Line 116
		  apply 'do_movsx'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 116
		  {[_cor11|[]],_cor0}
	  %% Line 117
	  <{'movzx',_cor45,_cor46}> when 'true' ->
	      let <_cor12> =
		  %% Line 118
		  apply 'do_movzx'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 118
		  {[_cor12|[]],_cor0}
	  %% Line 119
	  <{'pseudo_call',_cor47,_cor48,_cor49,_cor50}> when 'true' ->
	      %% Line 120
	      apply 'do_pseudo_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 121
	  <{'pseudo_tailcall',_cor51,_cor52,_cor53,_cor54}> when 'true' ->
	      let <_cor14> =
		  %% Line 122
		  apply 'do_pseudo_tailcall'/2
		      (_cor3, _cor1)
	      in  let <_cor13> =
		      %% Line 122
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 122
		      {_cor14,_cor13}
	  %% Line 123
	  <{'push',_cor55}> when 'true' ->
	      let <_cor17> =
		  %% Line 124
		  apply 'do_push'/3
		      (_cor3, _cor1, _cor0)
	      in  let <_cor15> =
		      %% Line 124
		      apply 'word_size'/0
			  ()
		  in  let <_cor16> =
			  %% Line 124
			  call 'erlang':'+'
			      (_cor0, _cor15)
		      in  %% Line 124
			  {[_cor17|[]],_cor16}
	  %% Line 125
	  <{'ret',_cor56}> when 'true' ->
	      let <_cor19> =
		  %% Line 126
		  apply 'do_ret'/3
		      (_cor3, _cor1, _cor0)
	      in  let <_cor18> =
		      %% Line 126
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 126
		      {_cor19,_cor18}
	  %% Line 127
	  <{'shift',_cor57,_cor58,_cor59}> when 'true' ->
	      let <_cor20> =
		  %% Line 128
		  apply 'do_shift'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 128
		  {[_cor20|[]],_cor0}
	  %% Line 129
	  <_cor60> when 'true' ->
	      %% Line 130
	      {[_cor3|[]],_cor0}
	end
'do_alu'/3 =
    %% Line 138
    fun (_cor2,_cor1,_cor0) ->
	%% Line 139
	case _cor2 of
	  <{'alu',_cor11,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 140
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 141
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 142
		      {'alu',_cor11,Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_cmp'/3 =
    %% Line 144
    fun (_cor2,_cor1,_cor0) ->
	%% Line 145
	case _cor2 of
	  <{'cmp',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 146
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 147
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 148
		      {'cmp',Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_fp_unop'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	%% Line 151
	case _cor2 of
	  <{'fp_unop',_cor11,Arg0}> when 'true' ->
	      let <Arg> =
		  %% Line 152
		  apply 'conv_opnd'/3
		      (Arg0, _cor0, _cor1)
	      in  let <_cor7> =
		      %% Line 153
		      call 'erlang':'setelement'
			  (3, _cor2, Arg)
		  in  %% Line 153
		      [_cor7|[]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_fp_binop'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	%% Line 156
	case _cor2 of
	  <{'fp_binop',_cor12,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 157
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 158
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  let <_cor8> =
			  %% Line 159
			  {'fp_binop',_cor12,Src,Dst}
		      in  %% Line 159
			  [_cor8|[]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_fmove'/3 =
    %% Line 161
    fun (_cor2,_cor1,_cor0) ->
	%% Line 162
	case _cor2 of
	  <{'fmove',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 163
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 164
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 165
		      {'fmove',Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_imul'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	%% Line 168
	case _cor2 of
	  <{'imul',_cor10,Src0,_cor11}> when 'true' ->
	      let <Src> =
		  %% Line 169
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  %% Line 170
		  call 'erlang':'setelement'
		      (3, _cor2, Src)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_move'/3 =
    %% Line 172
    fun (_cor2,_cor1,_cor0) ->
	%% Line 173
	case _cor2 of
	  <{'move',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 174
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 175
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 176
		      {'move',Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_movsx'/3 =
    %% Line 178
    fun (_cor2,_cor1,_cor0) ->
	%% Line 179
	case _cor2 of
	  <{'movsx',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 180
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 181
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 182
		      {'movsx',Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_movzx'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	%% Line 185
	case _cor2 of
	  <{'movzx',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 186
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 187
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 188
		      {'movzx',Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_push'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	%% Line 191
	case _cor2 of
	  <{'push',Src0}> when 'true' ->
	      let <Src> =
		  %% Line 192
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  %% Line 193
		  {'push',Src}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_shift'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	%% Line 196
	case _cor2 of
	  <{'shift',_cor11,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 197
		  apply 'conv_opnd'/3
		      (Src0, _cor0, _cor1)
	      in  let <Dst> =
		      %% Line 198
		      apply 'conv_opnd'/3
			  (Dst0, _cor0, _cor1)
		  in  %% Line 199
		      {'shift',_cor11,Src,Dst}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'conv_opnd'/3 =
    %% Line 201
    fun (_cor2,_cor1,_cor0) ->
	%% Line 202
	case apply 'opnd_is_pseudo'/1
		 (_cor2) of
	  %% Line 203
	  <'false'> when 'true' ->
	      _cor2
	  %% Line 205
	  <'true'> when 'true' ->
	      %% Line 206
	      apply 'conv_pseudo'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'conv_pseudo'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 210
	    apply 'context_offset'/2
		(_cor0, _cor2)
	in  let <Off> =
		%% Line 210
		call 'erlang':'+'
		    (_cor1, _cor3)
	    in  %% Line 211
		apply 'conv_pseudo'/2
		    (_cor2, Off)
'conv_pseudo'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 214
	    apply 'mk_sp'/0
		()
	in  let <_cor3> =
		%% Line 214
		call 'hipe_x86':'mk_imm'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 214
		    call 'hipe_x86':'temp_type'
			(_cor1)
		in  %% Line 214
		    call 'hipe_x86':'mk_mem'
			(_cor4, _cor3, _cor2)
'do_ret'/3 =
    %% Line 220
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 222
	    apply 'word_size'/0
		()
	in  let <_cor3> =
		%% Line 222
		apply 'context_arity'/1
		    (_cor1)
	    in  let <_cor5> =
		    %% Line 222
		    call 'erlang':'*'
			(_cor4, _cor3)
		in  let <_cor6> =
			%% Line 222
			call 'hipe_x86':'mk_ret'
			    (_cor5)
		    in  %% Line 222
			apply 'adjust_sp'/2
			    (_cor0, [_cor6|[]])
'adjust_sp'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	%% Line 225
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor1,
		     0) ->
	      _cor0
	  %% Line 227
	  <> when 'true' ->
	      let <_cor3> =
		  %% Line 228
		  call 'hipe_x86':'mk_imm'
		      (_cor1)
	      in  let <_cor2> =
		      %% Line 228
		      apply 'mk_sp'/0
			  ()
		  in  let <_cor4> =
			  %% Line 228
			  call 'hipe_x86':'mk_alu'
			      ('add', _cor3, _cor2)
		      in  %% Line 228
			  [_cor4|_cor0]
	end
'do_pseudo_call'/4 =
    %% Line 235
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 236
	case call 'hipe_x86':'pseudo_call_sdesc'
		 (_cor3) of
	  <{'x86_sdesc',ExnLab,_cor33,OrigArity,_cor34}> when 'true' ->
	      let <Fun0> =
		  %% Line 237
		  call 'hipe_x86':'pseudo_call_fun'
		      (_cor3)
	      in  let <Fun1> =
		      %% Line 238
		      apply 'conv_opnd'/3
			  (Fun0, _cor0, _cor1)
		  in  let <_cor12> =
			  %% Line 239
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor9) ->
					case _cor9 of
					  <[Temp|_cor8]> when 'true' ->
					      ( case apply 'temp_is_pseudo'/1
							 (Temp) of
						  <'true'> when 'true' ->
						      let <_cor10> =
							  apply 'lc$^0'/1
							      (_cor8)
						      in  ( [Temp|_cor10]
							    -| ['compiler_generated'] )
						  ( <'false'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor8)
						    -| ['compiler_generated'] )
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor11})
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor9> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor9})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor2)
			    -| ['list_comprehension'] )
		      in  let <SDesc> =
			      %% Line 240
			      apply 'mk_sdesc'/3
				  (ExnLab, _cor1, _cor12)
			  in  let <ContLab> =
				  %% Line 241
				  call 'hipe_x86':'pseudo_call_contlab'
				      (_cor3)
			      in  let <Linkage> =
				      %% Line 242
				      call 'hipe_x86':'pseudo_call_linkage'
					  (_cor3)
				  in  let <_cor17> =
					  %% Line 243
					  call 'hipe_x86':'mk_pseudo_call'
					      (Fun1, SDesc, ContLab, Linkage)
				      in  let <CallCode> =
					      %% Line 243
					      [_cor17|[]]
					  in  let <_cor19> =
						  %% Line 246
						  call 'hipe_amd64_registers':'nr_args'
						      ()
					      in  let <_cor20> =
						      %% Line 246
						      call 'erlang':'-'
							  (OrigArity, _cor19)
						  in  let <StkArity> =
							  %% Line 246
							  call 'erlang':'max'
							      (0, _cor20)
						      in  let <_cor22> =
							      %% Line 247
							      apply 'word_size'/0
								  ()
							  in  let <_cor23> =
								  %% Line 247
								  call 'erlang':'*'
								      (2, _cor22)
							      in  let <_cor24> =
								      %% Line 247
								      call 'erlang':'+'
									  (_cor0, _cor23)
								  in  let <_cor25> =
									  %% Line 247
									  apply 'stack_need'/3
									      (_cor24, StkArity, Fun1)
								      in  do  %% Line 247
									      apply 'context_need_stack'/2
										  (_cor1, _cor25)
									      let <_cor26> =
										  %% Line 248
										  apply 'word_size'/0
										      ()
									      in  let <ArgsBytes> =
										      %% Line 248
										      call 'erlang':'*'
											  (_cor26, StkArity)
										  in  let <_cor28> =
											  %% Line 249
											  call 'erlang':'-'
											      (_cor0, ArgsBytes)
										      in  %% Line 249
											  {CallCode,_cor28}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'stack_need'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	%% Line 252
	case _cor0 of
	  %% Line 253
	  <{'x86_prim',_cor8}> when 'true' ->
	      _cor2
	  %% Line 254
	  <{'x86_mfa',M,F,A}> when 'true' ->
	      %% Line 255
	      case call 'erlang':'is_builtin'
		       (M, F, A) of
		%% Line 256
		<'true'> when 'true' ->
		    _cor2
		%% Line 257
		<'false'> when 'true' ->
		    apply 'stack_need_general'/2
			(_cor2, _cor1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 259
	  <{'x86_temp',_cor9,_cor10,_cor11}> when 'true' ->
	      apply 'stack_need_general'/2
		  (_cor2, _cor1)
	  %% Line 260
	  <{'x86_mem',_cor12,_cor13,_cor14}> when 'true' ->
	      apply 'stack_need_general'/2
		  (_cor2, _cor1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'stack_need_general'/2 =
    %% Line 263
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 264
	    call 'erlang':'-'
		(22, _cor0)
	in  let <_cor2> =
		%% Line 264
		apply 'word_size'/0
		    ()
	    in  let <_cor5> =
		    %% Line 264
		    call 'erlang':'*'
			(_cor4, _cor2)
		in  let <_cor6> =
			%% Line 264
			call 'erlang':'+'
			    (_cor1, _cor5)
		    in  %% Line 264
			call 'erlang':'max'
			    (_cor1, _cor6)
'mk_sdesc'/3 =
    %% Line 270
    fun (_cor2,_cor1,_cor0) ->
	let <Temps0> =
	    %% Line 271
	    apply 'only_tagged'/1
		(_cor0)
	in  let <Live> =
		%% Line 272
		apply 'mk_live'/2
		    (_cor1, Temps0)
	    in  let <Arity> =
		    %% Line 273
		    apply 'context_arity'/1
			(_cor1)
		in  let <FSize> =
			%% Line 274
			apply 'context_framesize'/1
			    (_cor1)
		    in  let <_cor8> =
			    %% Line 275
			    apply 'word_size'/0
				()
			in  let <_cor9> =
				%% Line 275
				call 'erlang':'div'
				    (FSize, _cor8)
			    in  let <_cor7> =
				    %% Line 276
				    call 'erlang':'list_to_tuple'
					(Live)
				in  %% Line 275
				    call 'hipe_x86':'mk_sdesc'
					(_cor2, _cor9, Arity, _cor7)
'only_tagged'/1 =
    %% Line 278
    fun (_cor0) ->
	%% Line 279
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor2]> when 'true' ->
			    let <_cor3> =
				call 'hipe_x86':'temp_type'
				    (X)
			    in  ( case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor3,
					       'tagged') ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [X|_cor5]
					      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'mk_live'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 282
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Temp|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'temp_to_slot'/2
					(_cor1, Temp)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 282
	    call 'lists':'sort'
		(_cor7)
'temp_to_slot'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 285
	    apply 'context_framesize'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 285
		apply 'context_offset'/2
		    (_cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 285
		    call 'erlang':'+'
			(_cor4, _cor3)
		in  let <_cor2> =
			%% Line 286
			apply 'word_size'/0
			    ()
		    in  %% Line 286
			call 'erlang':'div'
			    (_cor5, _cor2)
'mk_minimal_sdesc'/1 =
    %% Line 288
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 289
	    apply 'context_arity'/1
		(_cor0)
	in  %% Line 289
	    call 'hipe_x86':'mk_sdesc'
		([], 0, _cor1, {})
'do_pseudo_tailcall'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	let <Arity> =
	    %% Line 296
	    apply 'context_arity'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 297
		call 'hipe_x86':'pseudo_tailcall_stkargs'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 297
		    apply 'context_ra'/1
			(_cor0)
		in  let <Args> =
			%% Line 297
			call 'erlang':'++'
			    (_cor4, [_cor3|[]])
		    in  let <Fun0> =
			    %% Line 298
			    call 'hipe_x86':'pseudo_tailcall_fun'
				(_cor1)
			in  %% Line 299
			    case apply 'do_tailcall_args'/3
				     (Args, _cor0, Fun0) of
			      <{Insns,FPoff1,Fun1}> when 'true' ->
				  do  %% Line 300
				      apply 'context_need_stack'/2
					  (_cor0, FPoff1)
				      let <_cor13> =
					  %% Line 301
					  apply 'word_size'/0
					      ()
				      in  let <_cor14> =
					      %% Line 301
					      call 'erlang':'+'
						  (FPoff1, _cor13)
					  in  let <_cor11> =
						  %% Line 301
						  apply 'word_size'/0
						      ()
					      in  let <_cor12> =
						      %% Line 301
						      call 'erlang':'*'
							  (_cor11, Arity)
						  in  let <_cor15> =
							  %% Line 301
							  call 'erlang':'+'
							      (_cor14, _cor12)
						      in  let <_cor9> =
							      %% Line 301
							      apply 'word_size'/0
								  ()
							  in  let <_cor8> =
								  %% Line 301
								  call 'erlang':'length'
								      (Args)
							      in  let <_cor10> =
								      %% Line 301
								      call 'erlang':'*'
									  (_cor9, _cor8)
								  in  let <FPoff2> =
									  %% Line 301
									  call 'erlang':'-'
									      (_cor15, _cor10)
								      in  let <_cor17> =
									      %% Line 303
									      call 'hipe_x86':'pseudo_tailcall_stkargs'
										  (_cor1)
									  in  let <StkArity> =
										  %% Line 303
										  call 'erlang':'length'
										      (_cor17)
									      in  let <_cor19> =
										      %% Line 304
										      apply 'word_size'/0
											  ()
										  in  let <_cor20> =
											  %% Line 304
											  call 'erlang':'+'
											      (FPoff2, _cor19)
										      in  let <_cor21> =
											      %% Line 304
											      apply 'stack_need'/3
												  (_cor20, StkArity, Fun1)
											  in  do  %% Line 304
												  apply 'context_need_stack'/2
												      (_cor0, _cor21)
												  let <_cor22> =
												      %% Line 305
												      call 'hipe_x86':'pseudo_tailcall_linkage'
													  (_cor1)
												  in  let <I2> =
													  %% Line 305
													  call 'hipe_x86':'mk_jmp_fun'
													      (Fun1, _cor22)
												      in  let <_cor24> =
													      %% Line 306
													      apply 'adjust_sp'/2
														  (FPoff2, [I2|[]])
													  in  %% Line 306
													      call 'erlang':'++'
														  (Insns, _cor24)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
'do_tailcall_args'/3 =
    %% Line 308
    fun (_cor2,_cor1,_cor0) ->
	let <FPoff0> =
	    %% Line 309
	    apply 'context_framesize'/1
		(_cor1)
	in  let <Arity> =
		%% Line 310
		apply 'context_arity'/1
		    (_cor1)
	    in  let <_cor7> =
		    %% Line 311
		    apply 'word_size'/0
			()
		in  let <_cor5> =
			%% Line 311
			apply 'word_size'/0
			    ()
		    in  let <_cor6> =
			    %% Line 311
			    call 'erlang':'*'
				(_cor5, Arity)
			in  let <FrameTop> =
				%% Line 311
				call 'erlang':'+'
				    (_cor7, _cor6)
			    in  let <_cor10> =
				    %% Line 312
				    apply 'word_size'/0
					()
				in  let <_cor9> =
					%% Line 312
					call 'erlang':'length'
					    (_cor2)
				    in  let <_cor11> =
					    %% Line 312
					    call 'erlang':'*'
						(_cor10, _cor9)
					in  let <DangerOff> =
						%% Line 312
						call 'erlang':'-'
						    (FrameTop, _cor11)
					    in  let <Moves> =
						    %% Line 313
						    apply 'mk_moves'/3
							(_cor2, FrameTop, [])
						in  %% Line 314
						    case %% Line 315
							 apply 'split_moves'/6
							     (Moves, _cor1, DangerOff, [], [], []) of
						      <{Stores,Simple,Conflict}> when 'true' ->
							  do  %% Line 317
							      case <> of
								<>
								    when try
									  let <_cor15> =
									      call 'erlang':'-'
										  (FPoff0)
									  in  call 'erlang':'<'
										  (DangerOff, _cor15)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_cor16> =
									%% Line 318
									call 'erlang':'-'
									    (FPoff0)
								    in  %% Line 318
									call 'erlang':'exit'
									    ({'hipe_amd64_frame','do_tailcall_args',DangerOff,_cor16})
								%% Line 319
								<> when 'true' ->
								    []
							      end
							      %% Line 323
							      case apply 'split_conflict'/4
								       (Conflict, FPoff0, [], []) of
								<{Pushes,MoreSimple,FPoff2}> when 'true' ->
								    let <PushFun0,FPoff3,LoadFun1,Fun1> =
									%% Line 326
									case apply 'opnd_is_pseudo'/1
										 (_cor0) of
									  %% Line 327
									  <'false'> when 'true' ->
									      %% Line 328
									      <[],FPoff2,[],_cor0>
									  %% Line 329
									  <'true'> when 'true' ->
									      let <Type> =
										  %% Line 330
										  call 'hipe_x86':'temp_type'
										      (_cor0)
									      in  let <Temp1> =
										      %% Line 331
										      apply 'mk_temp1'/1
											  (Type)
										  in  let <Fun0Off> =
											  %% Line 332
											  apply 'context_offset'/2
											      (_cor1, _cor0)
										      in  let <_cor22> =
											      %% Line 333
											      call 'erlang':'+'
												  (FPoff2, Fun0Off)
											  in  let <MEM0> =
												  %% Line 333
												  apply 'conv_pseudo'/2
												      (_cor0, _cor22)
											      in  %% Line 334
												  case <> of
												    <>
													when call 'erlang':'>='
													      (Fun0Off,
													       DangerOff) ->
													let <Fun1Off> =
													    %% Line 335
													    call 'hipe_x86':'mk_imm'
														(0)
													in  let <_cor25> =
														%% Line 336
														apply 'mk_sp'/0
														    ()
													    in  let <MEM1> =
														    %% Line 336
														    call 'hipe_x86':'mk_mem'
															(_cor25, Fun1Off, Type)
														in  let <_cor30> =
															%% Line 337
															call 'hipe_x86':'mk_push'
															    (MEM0)
														    in  let <_cor28> =
															    %% Line 338
															    apply 'word_size'/0
																()
															in  let <_cor29> =
																%% Line 338
																call 'erlang':'+'
																    (FPoff2, _cor28)
															    in  let <_cor27> =
																    %% Line 339
																    call 'hipe_x86':'mk_move'
																	(MEM1, Temp1)
																in  %% Line 337
																    <[_cor30|[]],_cor29,%% Line 339
																			[_cor27|[]],%% Line 340
																				    Temp1>
												    %% Line 341
												    <> when 'true' ->
													let <_cor31> =
													    %% Line 342
													    call 'hipe_x86':'mk_move'
														(MEM0, Temp1)
													in  %% Line 342
													    <[],FPoff2,[_cor31|[]],Temp1>
												  end
									  ( <_cor32> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor32})
									    -| ['compiler_generated'] )
									end
								    in  let <RegTemp0> =
									    %% Line 346
									    call 'hipe_amd64_registers':'temp0'
										()
									in  let <_cor38> =
										%% Line 348
										case call 'hipe_x86':'is_temp'
											 (Fun1) of
										  %% Line 349
										  <'true'> when 'true' ->
										      let <RegFun1> =
											  %% Line 350
											  call 'hipe_x86':'temp_reg'
											      (Fun1)
										      in  %% Line 351
											  case <> of
											    <>
												when call 'erlang':'=/='
												      (RegFun1,
												       RegTemp0) ->
												RegTemp0
											    %% Line 352
											    <> when 'true' ->
												call 'hipe_amd64_registers':'temp1'
												    ()
											  end
										  %% Line 354
										  <'false'> when 'true' ->
										      %% Line 355
										      RegTemp0
										  ( <_cor37> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor37})
										    -| ['compiler_generated'] )
										end
									    in  let <_cor40> =
										    %% Line 361
										    apply 'simple_moves'/4
											(MoreSimple, FPoff3, _cor38, %% Line 362
														     [])
										in  let <_cor41> =
											%% Line 360
											apply 'simple_moves'/4
											    (Simple, FPoff3, _cor38, _cor40)
										    in  let <_cor42> =
											    %% Line 359
											    call 'erlang':'++'
												(LoadFun1, _cor41)
											in  let <_cor43> =
												%% Line 359
												apply 'store_moves'/3
												    (Stores, FPoff3, _cor42)
											    in  let <_cor44> =
												    %% Line 358
												    call 'erlang':'++'
													(PushFun0, _cor43)
												in  let <_cor45> =
													%% Line 358
													call 'erlang':'++'
													    (Pushes, _cor44)
												    in  %% Line 358
													{_cor45,%% Line 363
														FPoff3,%% Line 363
														       Fun1}
								( <_cor18> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor18})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor14> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor14})
							-| ['compiler_generated'] )
						    end
'mk_moves'/3 =
    %% Line 365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|Args],Off,Moves> when 'true' ->
	      let <_cor3> =
		  %% Line 366
		  apply 'word_size'/0
		      ()
	      in  let <Off1> =
		      %% Line 366
		      call 'erlang':'-'
			  (Off, _cor3)
		  in  %% Line 367
		      apply 'mk_moves'/3
			  (Args, Off1, [{Arg,Off1}|Moves])
	  %% Line 368
	  <[],_cor8,Moves> when 'true' ->
	      %% Line 369
	      Moves
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mk_moves',3}}] )
	    -| ['compiler_generated'] )
	end
'split_moves'/6 =
    %% Line 371
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Move|Moves],Context,DangerOff,Stores,Simple,Conflict> when 'true' ->
	      %% Line 372
	      case Move of
		<{Src,DstOff}> when 'true' ->
		    %% Line 373
		    case apply 'src_is_pseudo'/1
			     (Src) of
		      %% Line 374
		      <'false'> when 'true' ->
			  %% Line 375
			  apply 'split_moves'/6
			      (Moves, Context, DangerOff, [Move|Stores], %% Line 376
									 Simple, %% Line 376
										 Conflict)
		      %% Line 377
		      <'true'> when 'true' ->
			  let <SrcOff> =
			      %% Line 378
			      apply 'context_offset'/2
				  (Context, Src)
			  in  let <Type> =
				  %% Line 379
				  apply 'typeof_src'/1
				      (Src)
			      in  %% Line 380
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (SrcOff,
					       DstOff) ->
					%% Line 381
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 382
										Simple, %% Line 382
											Conflict)
				    %% Line 383
				    <>
					when call 'erlang':'>='
					      (SrcOff,
					       DangerOff) ->
					%% Line 384
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 385
										Simple, %% Line 385
											[{SrcOff,DstOff,Type}|Conflict])
				    %% Line 386
				    <> when 'true' ->
					%% Line 387
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 388
										[{SrcOff,DstOff,Type}|Simple], %% Line 388
													       Conflict)
				  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 391
	  <[],_cor16,_cor17,Stores,Simple,Conflict> when 'true' ->
	      %% Line 392
	      {Stores,Simple,Conflict}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'split_moves',6}}] )
	    -| ['compiler_generated'] )
	end
'split_conflict'/4 =
    %% Line 394
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Conflict],FPoff,Pushes,Simple> when 'true' ->
	      let <_cor6> =
		  %% Line 396
		  apply 'mk_sp'/0
		      ()
	      in  let <_cor4> =
		      %% Line 396
		      call 'erlang':'+'
			  (FPoff, SrcOff)
		  in  let <_cor5> =
			  %% Line 396
			  call 'hipe_x86':'mk_imm'
			      (_cor4)
		      in  let <_cor7> =
			      %% Line 396
			      call 'hipe_x86':'mk_mem'
				  (_cor6, _cor5, Type)
			  in  let <Push> =
				  %% Line 395
				  call 'hipe_x86':'mk_push'
				      (_cor7)
			      in  let <_cor12> =
				      %% Line 397
				      apply 'word_size'/0
					  ()
				  in  let <_cor13> =
					  %% Line 397
					  call 'erlang':'+'
					      (FPoff, _cor12)
				      in  let <_cor9> =
					      %% Line 398
					      apply 'word_size'/0
						  ()
					  in  let <_cor10> =
						  %% Line 398
						  call 'erlang':'+'
						      (FPoff, _cor9)
					      in  let <_cor11> =
						      %% Line 398
						      call 'erlang':'-'
							  (_cor10)
						  in  %% Line 397
						      apply 'split_conflict'/4
							  (Conflict, _cor13, [Push|Pushes], %% Line 398
											    [{_cor11,DstOff,Type}|Simple])
	  %% Line 399
	  <[],FPoff,Pushes,Simple> when 'true' ->
	      let <_cor14> =
		  %% Line 400
		  call 'lists':'reverse'
		      (Pushes)
	      in  %% Line 400
		  {_cor14,Simple,FPoff}
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'split_conflict',4}}] )
	    -| ['compiler_generated'] )
	end
'simple_moves'/4 =
    %% Line 402
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Moves],FPoff,TempReg,Rest> when 'true' ->
	      let <Temp> =
		  %% Line 403
		  call 'hipe_x86':'mk_temp'
		      (TempReg, Type)
	      in  let <SP> =
		      %% Line 404
		      apply 'mk_sp'/0
			  ()
		  in  let <_cor6> =
			  %% Line 405
			  call 'erlang':'+'
			      (FPoff, SrcOff)
		      in  let <LoadOff> =
			      %% Line 405
			      call 'hipe_x86':'mk_imm'
				  (_cor6)
			  in  let <_cor8> =
				  %% Line 406
				  call 'hipe_x86':'mk_mem'
				      (SP, LoadOff, Type)
			      in  let <LD> =
				      %% Line 406
				      call 'hipe_x86':'mk_move'
					  (_cor8, Temp)
				  in  let <_cor10> =
					  %% Line 407
					  call 'erlang':'+'
					      (FPoff, DstOff)
				      in  let <StoreOff> =
					      %% Line 407
					      call 'hipe_x86':'mk_imm'
						  (_cor10)
					  in  let <_cor12> =
						  %% Line 408
						  call 'hipe_x86':'mk_mem'
						      (SP, StoreOff, Type)
					      in  let <ST> =
						      %% Line 408
						      call 'hipe_x86':'mk_move'
							  (Temp, _cor12)
						  in  %% Line 409
						      apply 'simple_moves'/4
							  (Moves, FPoff, TempReg, [LD|[ST|Rest]])
	  %% Line 410
	  <[],_cor18,_cor19,Rest> when 'true' ->
	      %% Line 411
	      Rest
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'simple_moves',4}}] )
	    -| ['compiler_generated'] )
	end
'store_moves'/3 =
    %% Line 413
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Src,DstOff}|Moves],FPoff,Rest> when 'true' ->
	      let <Type> =
		  %% Line 414
		  apply 'typeof_src'/1
		      (Src)
	      in  let <SP> =
		      %% Line 415
		      apply 'mk_sp'/0
			  ()
		  in  let <_cor5> =
			  %% Line 416
			  call 'erlang':'+'
			      (FPoff, DstOff)
		      in  let <StoreOff> =
			      %% Line 416
			      call 'hipe_x86':'mk_imm'
				  (_cor5)
			  in  let <_cor7> =
				  %% Line 417
				  call 'hipe_x86':'mk_mem'
				      (SP, StoreOff, Type)
			      in  let <ST> =
				      %% Line 417
				      call 'hipe_x86':'mk_move'
					  (Src, _cor7)
				  in  %% Line 418
				      apply 'store_moves'/3
					  (Moves, FPoff, [ST|Rest])
	  %% Line 419
	  <[],_cor12,Rest> when 'true' ->
	      %% Line 420
	      Rest
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'store_moves',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_context'/3 =
    %% Line 428
    fun (_cor2,_cor1,_cor0) ->
	let <RA> =
	    %% Line 429
	    call 'hipe_x86':'mk_new_temp'
		('untagged')
	in  %% Line 430
	    case apply 'mk_temp_map'/3
		     (_cor1, RA, _cor0) of
	      <{Map,MinOff}> when 'true' ->
		  let <FrameSize> =
		      %% Line 431
		      call 'erlang':'-'
			  (MinOff)
		  in  let <RefMaxStack> =
			  %% Line 432
			  call 'hipe_bifs':'ref'
			      (FrameSize)
		      in  let <_cor7> =
			      %% Line 434
			      call 'erlang':'length'
				  (_cor1)
			  in  %% Line 433
			      {'context',_cor2,%% Line 434
					       FrameSize,_cor7,%% Line 435
							       Map,%% Line 435
								   RA,%% Line 435
								      RefMaxStack}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'context_need_stack'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor5,_cor6,_cor7,_cor8,_cor9,RM},N> when 'true' ->
	      let <M> =
		  %% Line 439
		  call 'hipe_bifs':'ref_get'
		      (RM)
	      in  %% Line 440
		  case <> of
		    <>
			when call 'erlang':'>'
			      (N,
			       M) ->
			call 'hipe_bifs':'ref_set'
			    (RM, N)
		    %% Line 441
		    <> when 'true' ->
			[]
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'context_need_stack',2}}] )
	    -| ['compiler_generated'] )
	end
'context_maxstack'/1 =
    %% Line 444
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,_cor6,RM}> when 'true' ->
	      %% Line 445
	      call 'hipe_bifs':'ref_get'
		  (RM)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_maxstack',1}}] )
	    -| ['compiler_generated'] )
	end
'context_arity'/1 =
    %% Line 447
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,Arity,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 448
	      Arity
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'context_framesize'/1 =
    %% Line 450
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,FrameSize,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 451
	      FrameSize
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_framesize',1}}] )
	    -| ['compiler_generated'] )
	end
'context_liveness'/1 =
    %% Line 453
    fun (_cor0) ->
	case _cor0 of
	  <{'context',Liveness,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 454
	      Liveness
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_liveness',1}}] )
	    -| ['compiler_generated'] )
	end
'context_offset'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor4,_cor5,_cor6,Map,_cor7,_cor8},Temp> when 'true' ->
	      %% Line 457
	      apply 'tmap_lookup'/2
		  (Map, Temp)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'context_offset',2}}] )
	    -| ['compiler_generated'] )
	end
'context_ra'/1 =
    %% Line 459
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,RA,_cor6}> when 'true' ->
	      %% Line 460
	      RA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_ra',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_temp_map'/3 =
    %% Line 462
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 463
	    apply 'word_size'/0
		()
	in  let <_cor5> =
		%% Line 463
		call 'erlang':'length'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 463
		    call 'erlang':'+'
			(_cor5, 1)
		in  let <_cor8> =
			%% Line 463
			call 'erlang':'*'
			    (_cor7, _cor6)
		    in  let <_cor3> =
			    %% Line 464
			    apply 'tmap_empty'/0
				()
			in  let <_cor4> =
				%% Line 464
				apply 'tmap_bind'/3
				    (_cor3, _cor1, 0)
			    in  %% Line 463
				case apply 'enter_vars'/3
					 (_cor2, _cor8, _cor4) of
				  <{Map,_cor14}> when 'true' ->
				      let <_cor10> =
					  %% Line 465
					  apply 'tset_to_list'/1
					      (_cor0)
				      in  %% Line 465
					  apply 'enter_vars'/3
					      (_cor10, 0, Map)
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor9})
				    -| ['compiler_generated'] )
				end
'enter_vars'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[V|Vs],PrevOff,Map> when 'true' ->
	      let <_cor6> =
		  %% Line 469
		  case call 'hipe_x86':'temp_type'
			   (V) of
		    %% Line 470
		    <'double'> when 'true' ->
			let <_cor3> =
			    apply 'float_size'/0
				()
			in  call 'erlang':'-'
				(PrevOff, _cor3)
		    %% Line 471
		    <_cor12> when 'true' ->
			let <_cor4> =
			    apply 'word_size'/0
				()
			in  call 'erlang':'-'
				(PrevOff, _cor4)
		  end
	      in  let <_cor8> =
		      %% Line 473
		      apply 'tmap_bind'/3
			  (Map, V, _cor6)
		  in  %% Line 473
		      apply 'enter_vars'/3
			  (Vs, _cor6, _cor8)
	  %% Line 474
	  <[],Off,Map> when 'true' ->
	      %% Line 475
	      {Map,Off}
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'enter_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'tmap_empty'/0 =
    %% Line 477
    fun () ->
	%% Line 478
	call 'gb_trees':'empty'
	    ()
'tmap_bind'/3 =
    %% Line 480
    fun (_cor2,_cor1,_cor0) ->
	%% Line 481
	call 'gb_trees':'insert'
	    (_cor1, _cor0, _cor2)
'tmap_lookup'/2 =
    %% Line 483
    fun (_cor1,_cor0) ->
	%% Line 484
	call 'gb_trees':'get'
	    (_cor0, _cor1)
'do_prologue'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 502
	    apply 'do_alloc_frame'/2
		(_cor1, _cor0)
	in  %% Line 502
	    apply 'do_check_stack'/2
		(_cor2, _cor0)
'do_alloc_frame'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	%% Line 505
	case apply 'context_framesize'/1
		 (_cor0) of
	  %% Line 506
	  <0> when 'true' ->
	      _cor1
	  %% Line 508
	  <FrameSize> when 'true' ->
	      let <OldStartLab> =
		  %% Line 509
		  call 'hipe_x86_cfg':'start_label'
		      (_cor1)
	      in  let <AllocFrameLab> =
		      %% Line 510
		      call 'hipe_gensym':'get_next_label'
			  ('x86')
		  in  let <SP> =
			  %% Line 511
			  apply 'mk_sp'/0
			      ()
		      in  let <_cor5> =
			      %% Line 513
			      call 'hipe_x86':'mk_imm'
				  (FrameSize)
			  in  let <_cor6> =
				  %% Line 513
				  call 'hipe_x86':'mk_alu'
				      ('sub', _cor5, SP)
			      in  let <_cor7> =
				      %% Line 514
				      call 'hipe_x86':'mk_jmp_label'
					  (OldStartLab)
				  in  let <AllocFrameCode> =
					  %% Line 513
					  [_cor6|%% Line 514
						 [_cor7|[]]]
				      in  let <_cor9> =
					      %% Line 516
					      call 'hipe_bb':'mk_bb'
						  (AllocFrameCode)
					  in  let <CFG1> =
						  %% Line 515
						  call 'hipe_x86_cfg':'bb_add'
						      (_cor1, AllocFrameLab, _cor9)
					      in  %% Line 517
						  call 'hipe_x86_cfg':'start_label_update'
						      (CFG1, AllocFrameLab)
	end
'do_check_stack'/2 =
    %% Line 520
    fun (_cor1,_cor0) ->
	let <MaxStack> =
	    %% Line 521
	    apply 'context_maxstack'/1
		(_cor0)
	in  let <Arity> =
		%% Line 522
		apply 'context_arity'/1
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 523
		    call 'erlang':'-'
			(23, Arity)
		in  let <_cor4> =
			%% Line 523
			apply 'word_size'/0
			    ()
		    in  let <_cor7> =
			    %% Line 523
			    call 'erlang':'*'
				(_cor6, _cor4)
			in  let <Guaranteed> =
				%% Line 523
				call 'erlang':'max'
				    (0, _cor7)
			    in  %% Line 524
				case <> of
				  <>
				      when call 'erlang':'=<'
					    (MaxStack,
					     Guaranteed) ->
				      _cor1
				  %% Line 527
				  <> when 'true' ->
				      let <AllocFrameLab> =
					  %% Line 529
					  call 'hipe_x86_cfg':'start_label'
					      (_cor1)
				      in  let <NewStartLab> =
					      %% Line 530
					      call 'hipe_gensym':'get_next_label'
						  ('x86')
					  in  let <IncStackLab> =
						  %% Line 531
						  call 'hipe_gensym':'get_next_label'
						      ('x86')
					      in  let <Preg> =
						      %% Line 534
						      call 'hipe_amd64_registers':'proc_pointer'
							  ()
						  in  let <Pbase> =
							  %% Line 535
							  call 'hipe_x86':'mk_temp'
							      (Preg, 'untagged')
						      in  let <_cor15> =
							      %% Line 537
							      call 'hipe_amd64_registers':'sp_limit_offset'
								  ()
							  in  let <SP_LIMIT_OFF> =
								  %% Line 536
								  call 'hipe_x86':'mk_imm'
								      (_cor15)
							      in  let <Temp0> =
								      %% Line 538
								      apply 'mk_temp0'/1
									  ('untagged')
								  in  let <SP> =
									  %% Line 539
									  apply 'mk_sp'/0
									      ()
								      in  let <_cor19> =
									      %% Line 543
									      call 'erlang':'-'
										  (MaxStack)
									  in  let <_cor20> =
										  %% Line 543
										  call 'hipe_x86':'mk_imm'
										      (_cor19)
									      in  let <_cor21> =
										      %% Line 543
										      call 'hipe_x86':'mk_mem'
											  (SP, _cor20, 'untagged')
										  in  let <_cor22> =
											  %% Line 542
											  call 'hipe_x86':'mk_lea'
											      (_cor21, %% Line 544
												       Temp0)
										      in  let <_cor23> =
											      %% Line 546
											      call 'hipe_x86':'mk_mem'
												  (Pbase, SP_LIMIT_OFF, 'untagged')
											  in  let <_cor24> =
												  %% Line 545
												  call 'hipe_x86':'mk_cmp'
												      (_cor23, %% Line 546
													       Temp0)
											      in  let <_cor25> =
												      %% Line 547
												      call 'hipe_x86':'mk_pseudo_jcc'
													  ('b', IncStackLab, AllocFrameLab, 1.00000000000000002082e-02)
												  in  let <NewStartCode> =
													  %% Line 542
													  [_cor22|%% Line 545
														  [_cor24|%% Line 547
															  [_cor25|[]]]]
												      in  let <_cor28> =
													      %% Line 549
													      call 'hipe_x86':'mk_prim'
														  ('inc_stack_0')
													  in  let <_cor27> =
														  %% Line 550
														  apply 'mk_minimal_sdesc'/1
														      (_cor0)
													      in  let <_cor29> =
														      %% Line 549
														      call 'hipe_x86':'mk_call'
															  (_cor28, _cor27, %% Line 550
																	   'not_remote')
														  in  let <_cor30> =
															  %% Line 551
															  call 'hipe_x86':'mk_jmp_label'
															      (NewStartLab)
														      in  let <IncStackCode> =
															      %% Line 549
															      [_cor29|%% Line 551
																      [_cor30|[]]]
															  in  let <_cor32> =
																  %% Line 554
																  call 'hipe_bb':'mk_bb'
																      (NewStartCode)
															      in  let <CFG1> =
																      %% Line 553
																      call 'hipe_x86_cfg':'bb_add'
																	  (_cor1, NewStartLab, _cor32)
																  in  let <_cor34> =
																	  %% Line 556
																	  call 'hipe_bb':'mk_bb'
																	      (IncStackCode)
																      in  let <CFG2> =
																	      %% Line 555
																	      call 'hipe_x86_cfg':'bb_add'
																		  (CFG1, IncStackLab, _cor34)
																	  in  %% Line 557
																	      call 'hipe_x86_cfg':'start_label_update'
																		  (CFG2, NewStartLab)
				end
'typeof_src'/1 =
    %% Line 562
    fun (_cor0) ->
	%% Line 563
	case _cor0 of
	  %% Line 564
	  <{'x86_imm',_cor3}> when 'true' ->
	      %% Line 565
	      'untagged'
	  %% Line 566
	  <{'x86_temp',_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 567
	      call 'hipe_x86':'temp_type'
		  (_cor0)
	  %% Line 568
	  <{'x86_mem',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 569
	      call 'hipe_x86':'mem_type'
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_sp'/0 =
    %% Line 574
    fun () ->
	let <_cor0> =
	    %% Line 575
	    call 'hipe_amd64_registers':'sp'
		()
	in  %% Line 575
	    call 'hipe_x86':'mk_temp'
		(_cor0, 'untagged')
'mk_temp0'/1 =
    %% Line 579
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 580
	    call 'hipe_amd64_registers':'temp0'
		()
	in  %% Line 580
	    call 'hipe_x86':'mk_temp'
		(_cor1, _cor0)
'mk_temp1'/1 =
    %% Line 584
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 585
	    call 'hipe_amd64_registers':'temp1'
		()
	in  %% Line 585
	    call 'hipe_x86':'mk_temp'
		(_cor1, _cor0)
'src_is_pseudo'/1 =
    %% Line 589
    fun (_cor0) ->
	%% Line 590
	apply 'opnd_is_pseudo'/1
	    (_cor0)
'opnd_is_pseudo'/1 =
    %% Line 592
    fun (_cor0) ->
	%% Line 593
	case call 'hipe_x86':'is_temp'
		 (_cor0) of
	  %% Line 594
	  <'true'> when 'true' ->
	      apply 'temp_is_pseudo'/1
		  (_cor0)
	  %% Line 595
	  <'false'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'temp_is_pseudo'/1 =
    %% Line 598
    fun (_cor0) ->
	%% Line 599
	case call 'hipe_x86':'is_temp'
		 (_cor0) of
	  %% Line 600
	  <'true'> when 'true' ->
	      let <_cor1> =
		  %% Line 601
		  call 'hipe_x86':'temp_reg'
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 601
		      call 'hipe_amd64_registers':'is_precoloured'
			  (_cor1)
		  in  %% Line 601
		      call 'erlang':'not'
			  (_cor2)
	  %% Line 602
	  <'false'> when 'true' ->
	      %% Line 603
	      'false'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'all_temps'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 612
	    apply 'tset_empty'/0
		()
	in  let <S0> =
		%% Line 612
		apply 'find_temps'/2
		    (_cor1, _cor2)
	    in  let <S1> =
		    %% Line 613
		    apply 'tset_del_list'/2
			(S0, _cor0)
		in  let <_cor7> =
			%% Line 614
			( fun (_cor5) ->
			      apply 'temp_is_pseudo'/1
				  (_cor5)
			  -| [{'id',{0,0,'-all_temps/2-fun-0-'}}] )
		    in  %% Line 614
			apply 'tset_filter'/2
			    (S1, _cor7)
'find_temps'/2 =
    %% Line 617
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Insns],S0> when 'true' ->
	      let <_cor2> =
		  %% Line 618
		  call 'hipe_x86_defuse':'insn_def'
		      (I)
	      in  let <S1> =
		      %% Line 618
		      apply 'tset_add_list'/2
			  (S0, _cor2)
		  in  let <_cor4> =
			  %% Line 619
			  call 'hipe_x86_defuse':'insn_use'
			      (I)
		      in  let <S2> =
			      %% Line 619
			      apply 'tset_add_list'/2
				  (S1, _cor4)
			  in  %% Line 620
			      apply 'find_temps'/2
				  (Insns, S2)
	  %% Line 621
	  <[],S> when 'true' ->
	      %% Line 622
	      S
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'find_temps',2}}] )
	    -| ['compiler_generated'] )
	end
'tset_empty'/0 =
    %% Line 624
    fun () ->
	%% Line 625
	call 'gb_sets':'new'
	    ()
'tset_size'/1 =
    %% Line 627
    fun (_cor0) ->
	%% Line 628
	call 'gb_sets':'size'
	    (_cor0)
'tset_insert'/2 =
    %% Line 630
    fun (_cor1,_cor0) ->
	%% Line 631
	call 'gb_sets':'add_element'
	    (_cor0, _cor1)
'tset_add_list'/2 =
    %% Line 633
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 634
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 634
	    call 'gb_sets':'union'
		(_cor1, _cor2)
'tset_del_list'/2 =
    %% Line 636
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 637
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 637
	    call 'gb_sets':'subtract'
		(_cor1, _cor2)
'tset_filter'/2 =
    %% Line 639
    fun (_cor1,_cor0) ->
	%% Line 640
	call 'gb_sets':'filter'
	    (_cor0, _cor1)
'tset_to_list'/1 =
    %% Line 642
    fun (_cor0) ->
	%% Line 643
	call 'gb_sets':'to_list'
	    (_cor0)
'defun_minframe'/1 =
    %% Line 651
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 652
	    call 'hipe_x86':'defun_code'
		(_cor0)
	in  let <MaxTailArity> =
		%% Line 652
		apply 'body_mta'/2
		    (_cor1, 0)
	    in  let <_cor3> =
		    %% Line 653
		    call 'hipe_x86':'defun_formals'
			(_cor0)
		in  let <_cor4> =
			%% Line 653
			apply 'fix_formals'/1
			    (_cor3)
		    in  let <MyArity> =
			    %% Line 653
			    call 'erlang':'length'
				(_cor4)
			in  let <_cor6> =
				%% Line 654
				call 'erlang':'-'
				    (MaxTailArity, MyArity)
			    in  %% Line 654
				call 'erlang':'max'
				    (_cor6, 0)
'body_mta'/2 =
    %% Line 656
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Code],MTA> when 'true' ->
	      let <_cor2> =
		  %% Line 657
		  apply 'insn_mta'/2
		      (I, MTA)
	      in  %% Line 657
		  apply 'body_mta'/2
		      (Code, _cor2)
	  %% Line 658
	  <[],MTA> when 'true' ->
	      %% Line 659
	      MTA
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'body_mta',2}}] )
	    -| ['compiler_generated'] )
	end
'insn_mta'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	%% Line 662
	case _cor1 of
	  %% Line 663
	  <{'pseudo_tailcall',_cor7,Arity,_cor8,_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 664
		  call 'hipe_amd64_registers':'nr_args'
		      ()
	      in  let <_cor3> =
		      %% Line 664
		      call 'erlang':'-'
			  (Arity, _cor2)
		  in  %% Line 664
		      call 'erlang':'max'
			  (_cor0, _cor3)
	  %% Line 665
	  <_cor10> when 'true' ->
	      _cor0
	end
'ensure_minframe'/2 =
    %% Line 673
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 674
	    apply 'tset_size'/1
		(_cor0)
	in  %% Line 674
	    apply 'ensure_minframe'/3
		(_cor1, _cor2, _cor0)
'ensure_minframe'/3 =
    %% Line 676
    fun (_cor2,_cor1,_cor0) ->
	%% Line 677
	case <> of
	  <>
	      when call 'erlang':'>'
		    (_cor2,
		     _cor1) ->
	      let <Temp> =
		  %% Line 678
		  call 'hipe_x86':'mk_new_temp'
		      ('untagged')
	      in  let <_cor5> =
		      %% Line 679
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  let <_cor4> =
			  %% Line 679
			  apply 'tset_insert'/2
			      (_cor0, Temp)
		      in  %% Line 679
			  apply 'ensure_minframe'/3
			      (_cor2, _cor5, _cor4)
	  %% Line 680
	  <> when 'true' ->
	      _cor0
	end
'word_size'/0 =
    %% Line 683
    fun () ->
	%% Line 684
	call 'hipe_amd64_registers':'wordsize'
	    ()
'float_size'/0 =
    %% Line 686
    fun () ->
	%% Line 687
	call 'hipe_amd64_registers':'float_size'
	    ()
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_frame')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_frame', _cor0)
end