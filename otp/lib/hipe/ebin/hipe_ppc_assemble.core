module 'hipe_ppc_assemble' ['assemble'/4,
			    'module_info'/0,
			    'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','ppc_mfa'},[{'typed_record_field',{'record_field',39,{'atom',39,'m'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'f'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'a'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'arity',[]}]]}}]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','ppc_prim'},[{'record_field',40,{'atom',40,'prim'}}],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','ppc_sdesc'},[{'record_field',41,{'atom',41,'exnlab'}}|[{'record_field',41,{'atom',41,'fsize'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'arity'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'arity',[]}]]}}|[{'record_field',41,{'atom',41,'live'}}]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ppc_simm16'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ppc_temp'},[{'record_field',43,{'atom',43,'reg'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'allocatable'}}]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','ppc_uimm16'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','alu'},[{'record_field',76,{'atom',76,'aluop'}}|[{'record_field',76,{'atom',76,'dst'}}|[{'record_field',76,{'atom',76,'src1'}}|[{'record_field',76,{'atom',76,'src2'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','b_fun'},[{'record_field',77,{'atom',77,'fun'}}|[{'record_field',77,{'atom',77,'linkage'}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','b_label'},[{'record_field',78,{'atom',78,'label'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','bc'},[{'record_field',79,{'atom',79,'bcond'}}|[{'record_field',79,{'atom',79,'label'}}|[{'record_field',79,{'atom',79,'pred'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bctr'},[{'record_field',80,{'atom',80,'labels'}}],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','bctrl'},[{'record_field',81,{'atom',81,'sdesc'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','bl'},[{'record_field',82,{'atom',82,'fun'}}|[{'record_field',82,{'atom',82,'sdesc'}}|[{'record_field',82,{'atom',82,'linkage'}}]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','blr'},[],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','cmp'},[{'record_field',84,{'atom',84,'cmpop'}}|[{'record_field',84,{'atom',84,'src1'}}|[{'record_field',84,{'atom',84,'src2'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'term'}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','label'},[{'record_field',86,{'atom',86,'label'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','load'},[{'record_field',87,{'atom',87,'ldop'}}|[{'record_field',87,{'atom',87,'dst'}}|[{'record_field',87,{'atom',87,'disp'}}|[{'record_field',87,{'atom',87,'base'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','loadx'},[{'record_field',88,{'atom',88,'ldxop'}}|[{'record_field',88,{'atom',88,'dst'}}|[{'record_field',88,{'atom',88,'base1'}}|[{'record_field',88,{'atom',88,'base2'}}]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','mfspr'},[{'record_field',89,{'atom',89,'dst'}}|[{'record_field',89,{'atom',89,'spr'}}]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','mtcr'},[{'record_field',90,{'atom',90,'src'}}],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','mtspr'},[{'record_field',91,{'atom',91,'spr'}}|[{'record_field',91,{'atom',91,'src'}}]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_bc'},[{'record_field',92,{'atom',92,'bcond'}}|[{'record_field',92,{'atom',92,'true_label'}}|[{'record_field',92,{'atom',92,'false_label'}}|[{'record_field',92,{'atom',92,'pred'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call'},[{'record_field',93,{'atom',93,'func'}}|[{'record_field',93,{'atom',93,'sdesc'}}|[{'record_field',93,{'atom',93,'contlab'}}|[{'record_field',93,{'atom',93,'linkage'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_call_prepare'},[{'record_field',94,{'atom',94,'nrstkargs'}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_li'},[{'record_field',95,{'atom',95,'dst'}}|[{'record_field',95,{'atom',95,'imm'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_move'},[{'record_field',96,{'atom',96,'dst'}}|[{'record_field',96,{'atom',96,'src'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'func'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','store'},[{'record_field',99,{'atom',99,'stop'}}|[{'record_field',99,{'atom',99,'src'}}|[{'record_field',99,{'atom',99,'disp'}}|[{'record_field',99,{'atom',99,'base'}}]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','storex'},[{'record_field',100,{'atom',100,'stxop'}}|[{'record_field',100,{'atom',100,'src'}}|[{'record_field',100,{'atom',100,'base1'}}|[{'record_field',100,{'atom',100,'base2'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','unary'},[{'record_field',101,{'atom',101,'unop'}}|[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'src'}}]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','lfd'},[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'disp'}}|[{'record_field',102,{'atom',102,'base'}}]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','lfdx'},[{'record_field',103,{'atom',103,'dst'}}|[{'record_field',103,{'atom',103,'base1'}}|[{'record_field',103,{'atom',103,'base2'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','stfd'},[{'record_field',104,{'atom',104,'src'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'base'}}]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','stfdx'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'base1'}}|[{'record_field',105,{'atom',105,'base2'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','fp_binary'},[{'record_field',106,{'atom',106,'fp_binop'}}|[{'record_field',106,{'atom',106,'dst'}}|[{'record_field',106,{'atom',106,'src1'}}|[{'record_field',106,{'atom',106,'src2'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','fp_unary'},[{'record_field',107,{'atom',107,'fp_unop'}}|[{'record_field',107,{'atom',107,'dst'}}|[{'record_field',107,{'atom',107,'src'}}]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_fmove'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'src'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','defun'},[{'typed_record_field',{'record_field',114,{'atom',114,'mfa'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'mfa',[]}]]}}|[{'record_field',114,{'atom',114,'formals'}}|[{'record_field',114,{'atom',114,'code'}}|[{'typed_record_field',{'record_field',115,{'atom',115,'data'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'isclosure'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'isleaf'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'boolean',[]}]]}}|[{'record_field',118,{'atom',118,'var_range'}}|[{'record_field',118,{'atom',118,'label_range'}}]]]]]]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','sdi_info'},[{'typed_record_field',{'record_field',23,{'atom',23,'lb'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'integer',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'ub'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'incr'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'byte',[]}]]}}]]],[]}]]
'assemble'/4 =
    %% Line 33
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 34
	    apply 'print'/3
		([42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[65|[115|[115|[101|[109|[98|[108|[105|[110|[103|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], _cor0)
	    let <_cor10> =
		%% Line 36
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[%% Line 39
				  {MFA,Defun}|_cor5]> when 'true' ->
				    let <_cor8> =
					%% Line 37
					call 'hipe_ppc':'defun_code'
					    (Defun)
				    in  let <_cor7> =
					    %% Line 38
					    call 'hipe_ppc':'defun_data'
						(Defun)
					in  let <_cor9> =
						%% Line 39
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{MFA,_cor8,_cor7}|_cor9]
						  -| ['compiler_generated'] )
				( <[_cor4|_cor5]> when 'true' ->
				      %% Line 39
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
	    in  let <_cor12> =
		    %% Line 42
		    call 'hipe_rtl_arch':'word_size'
			()
		in  %% Line 41
		    case %% Line 42
			 call 'hipe_pack_constants':'pack_constants'
			     (_cor10, _cor12) of
		      <{ConstAlign,ConstSize,ConstMap,RefsFromConsts}> when 'true' ->
			  let <_cor14> =
			      %% Line 45
			      apply 'translate'/2
				  (_cor10, ConstMap)
			  in  %% Line 44
			      case %% Line 45
				   apply 'encode'/2
				       (_cor14, _cor0) of
				<{CodeSize,CodeBinary,AccRefs,LabelMap,ExportMap}> when 'true' ->
				    do  %% Line 46
					apply 'print'/3
					    ([84|[111|[116|[97|[108|[32|[110|[117|[109|[32|[98|[121|[116|[101|[115|[61|[126|[119|[10]]]]]]]]]]]]]]]]]]], [CodeSize|[]], _cor0)
					let <SC> =
					    %% Line 48
					    call 'hipe_pack_constants':'slim_constmap'
						(ConstMap)
					in  let <DataRelocs> =
						%% Line 49
						call 'hipe_pack_constants':'mk_data_relocs'
						    (RefsFromConsts, LabelMap)
					    in  let <SSE> =
						    %% Line 50
						    call 'hipe_pack_constants':'slim_sorted_exportmap'
							(ExportMap, _cor2, _cor1)
						in  let <SlimRefs> =
							%% Line 51
							call 'hipe_pack_constants':'slim_refs'
							    (AccRefs)
						    in  let <_cor20> =
							    %% Line 52
							    call 'hipe_bifs':'system_crc'
								(13615612)
							in  %% Line 52
							    call 'erlang':'term_to_binary'
								([{[51|[46|[49|[49]]]],_cor20}|%% Line 53
											       [ConstAlign|[ConstSize|%% Line 54
														      [SC|%% Line 55
															  [DataRelocs|%% Line 56
																      [SSE|%% Line 57
																	   [CodeSize|[CodeBinary|[SlimRefs|%% Line 58
																					   [0|[[]]]]]]]]]]]])
				( <_cor15> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor15})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
'translate'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	%% Line 75
	apply 'translate_mfas'/3
	    (_cor1, _cor0, [])
'translate_mfas'/3 =
    %% Line 77
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,_X_Data}|Code],ConstMap,NewCode> when 'true' ->
	      let <_cor3> =
		  %% Line 79
		  call 'hipe_sdi':'pass1_init'
		      ()
	      in  %% Line 78
		  case %% Line 79
		       apply 'translate_insns'/6
			   (Insns, MFA, ConstMap, _cor3, 0, []) of
		    <{NewInsns,CodeSize,LabelMap}> when 'true' ->
			%% Line 80
			apply 'translate_mfas'/3
			    (Code, ConstMap, [{MFA,NewInsns,CodeSize,LabelMap}|NewCode])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 81
	  <[],_X_ConstMap,NewCode> when 'true' ->
	      %% Line 82
	      call 'lists':'reverse'
		  (NewCode)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'translate_mfas',3}}] )
	    -| ['compiler_generated'] )
	end
'translate_insns'/6 =
    %% Line 84
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      let <NewIs> =
		  %% Line 85
		  apply 'translate_insn'/3
		      (I, MFA, ConstMap)
	      in  %% Line 86
		  apply 'add_insns'/7
		      (NewIs, Insns, MFA, ConstMap, SdiPass1, Address, NewInsns)
	  %% Line 87
	  <[],_X_MFA,_X_ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      %% Line 88
	      case call 'hipe_sdi':'pass2'
		       (SdiPass1) of
		<{LabelMap,CodeSizeIncr}> when 'true' ->
		    let <_cor9> =
			%% Line 89
			call 'lists':'reverse'
			    (NewInsns)
		    in  let <_cor8> =
			    %% Line 89
			    call 'erlang':'+'
				(Address, CodeSizeIncr)
			in  %% Line 89
			    {_cor9,_cor8,LabelMap}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'translate_insns',6}}] )
	    -| ['compiler_generated'] )
	end
'add_insns'/7 =
    %% Line 91
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],Insns,MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      let <_cor13> =
		  %% Line 93
		  case I of
		    %% Line 94
		    <{'.label',L,_cor24}> when 'true' ->
			%% Line 95
			call 'hipe_sdi':'pass1_add_label'
			    (SdiPass1, Address, L)
		    %% Line 96
		    <{'bc_sdi',{_cor25,{'label',L},_cor26},_cor27}> when 'true' ->
			%% Line 98
			call 'hipe_sdi':'pass1_add_sdi'
			    (SdiPass1, Address, L, {'sdi_info',-32768,32764,4})
		    %% Line 99
		    <_cor28> when 'true' ->
			%% Line 100
			SdiPass1
		  end
	      in  let <_cor15> =
		      %% Line 102
		      apply 'insn_size'/1
			  (I)
		  in  let <Address1> =
			  %% Line 102
			  call 'erlang':'+'
			      (Address, _cor15)
		      in  %% Line 103
			  apply 'add_insns'/7
			      (Is, Insns, MFA, ConstMap, _cor13, Address1, [I|NewInsns])
	  %% Line 104
	  <[],Insns,MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      %% Line 105
	      apply 'translate_insns'/6
		  (Insns, MFA, ConstMap, SdiPass1, Address, NewInsns)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'add_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'insn_size'/1 =
    %% Line 107
    fun (_cor0) ->
	%% Line 108
	case _cor0 of
	  %% Line 109
	  <{'.label',_cor3,_cor4}> when 'true' ->
	      0
	  %% Line 110
	  <{'.reloc',_cor5,_cor6}> when 'true' ->
	      0
	  %% Line 111
	  <_cor7> when 'true' ->
	      4
	end
'translate_insn'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	%% Line 115
	case _cor2 of
	  %% Line 116
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'do_alu'/1
		  (_cor2)
	  %% Line 117
	  <{'b_fun',_cor11,_cor12}> when 'true' ->
	      apply 'do_b_fun'/1
		  (_cor2)
	  %% Line 118
	  <{'b_label',_cor13}> when 'true' ->
	      apply 'do_b_label'/1
		  (_cor2)
	  %% Line 119
	  <{'bc',_cor14,_cor15,_cor16}> when 'true' ->
	      apply 'do_bc'/1
		  (_cor2)
	  %% Line 120
	  <{'bctr',_cor17}> when 'true' ->
	      apply 'do_bctr'/1
		  (_cor2)
	  %% Line 121
	  <{'bctrl',_cor18}> when 'true' ->
	      apply 'do_bctrl'/1
		  (_cor2)
	  %% Line 122
	  <{'bl',_cor19,_cor20,_cor21}> when 'true' ->
	      apply 'do_bl'/1
		  (_cor2)
	  %% Line 123
	  <{'blr'}> when 'true' ->
	      apply 'do_blr'/1
		  (_cor2)
	  %% Line 124
	  <{'comment',_cor22}> when 'true' ->
	      []
	  %% Line 125
	  <{'cmp',_cor23,_cor24,_cor25}> when 'true' ->
	      apply 'do_cmp'/1
		  (_cor2)
	  %% Line 126
	  <{'label',_cor26}> when 'true' ->
	      apply 'do_label'/1
		  (_cor2)
	  %% Line 127
	  <{'load',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      apply 'do_load'/1
		  (_cor2)
	  %% Line 128
	  <{'loadx',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      apply 'do_loadx'/1
		  (_cor2)
	  %% Line 129
	  <{'mfspr',_cor35,_cor36}> when 'true' ->
	      apply 'do_mfspr'/1
		  (_cor2)
	  %% Line 130
	  <{'mtcr',_cor37}> when 'true' ->
	      apply 'do_mtcr'/1
		  (_cor2)
	  %% Line 131
	  <{'mtspr',_cor38,_cor39}> when 'true' ->
	      apply 'do_mtspr'/1
		  (_cor2)
	  %% Line 135
	  <{'pseudo_li',_cor40,_cor41}> when 'true' ->
	      apply 'do_pseudo_li'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 139
	  <{'store',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      apply 'do_store'/1
		  (_cor2)
	  %% Line 140
	  <{'storex',_cor46,_cor47,_cor48,_cor49}> when 'true' ->
	      apply 'do_storex'/1
		  (_cor2)
	  %% Line 141
	  <{'unary',_cor50,_cor51,_cor52}> when 'true' ->
	      apply 'do_unary'/1
		  (_cor2)
	  %% Line 142
	  <{'lfd',_cor53,_cor54,_cor55}> when 'true' ->
	      apply 'do_lfd'/1
		  (_cor2)
	  %% Line 143
	  <{'stfd',_cor56,_cor57,_cor58}> when 'true' ->
	      apply 'do_stfd'/1
		  (_cor2)
	  %% Line 144
	  <{'fp_binary',_cor59,_cor60,_cor61,_cor62}> when 'true' ->
	      apply 'do_fp_binary'/1
		  (_cor2)
	  %% Line 145
	  <{'fp_unary',_cor63,_cor64,_cor65}> when 'true' ->
	      apply 'do_fp_unary'/1
		  (_cor2)
	  %% Line 146
	  <_cor66> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_ppc_assemble','translate_insn',_cor2})
	end
'do_alu'/1 =
    %% Line 149
    fun (_cor0) ->
	%% Line 150
	case _cor0 of
	  <{'alu',AluOp,Dst,Src1,Src2}> when 'true' ->
	      let <NewDst> =
		  %% Line 151
		  apply 'do_reg'/1
		      (Dst)
	      in  let <NewSrc1> =
		      %% Line 152
		      apply 'do_reg'/1
			  (Src1)
		  in  let <NewSrc2> =
			  %% Line 153
			  apply 'do_reg_or_imm'/1
			      (Src2)
		      in  let <NewI,NewOpnds> =
			      %% Line 155
			      case AluOp of
				%% Line 156
				<'slwi'> when 'true' ->
				    let <_cor5> =
					apply 'do_slwi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rlwinm',_cor5>
				%% Line 157
				<'slwi.'> when 'true' ->
				    let <_cor6> =
					apply 'do_slwi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rlwinm.',_cor6>
				%% Line 158
				<'srwi'> when 'true' ->
				    let <_cor7> =
					apply 'do_srwi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rlwinm',_cor7>
				%% Line 159
				<'srwi.'> when 'true' ->
				    let <_cor8> =
					apply 'do_srwi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rlwinm.',_cor8>
				%% Line 160
				<'srawi'> when 'true' ->
				    let <_cor9> =
					apply 'do_srawi_src2'/1
					    (NewSrc2)
				    in  <'srawi',{NewDst,NewSrc1,_cor9}>
				%% Line 161
				<'srawi.'> when 'true' ->
				    let <_cor10> =
					apply 'do_srawi_src2'/1
					    (NewSrc2)
				    in  <'srawi.',{NewDst,NewSrc1,_cor10}>
				%% Line 163
				<'sldi'> when 'true' ->
				    let <_cor11> =
					apply 'do_sldi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rldicr',_cor11>
				%% Line 164
				<'sldi.'> when 'true' ->
				    let <_cor12> =
					apply 'do_sldi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rldicr.',_cor12>
				%% Line 165
				<'srdi'> when 'true' ->
				    let <_cor13> =
					apply 'do_srdi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rldicl',_cor13>
				%% Line 166
				<'srdi.'> when 'true' ->
				    let <_cor14> =
					apply 'do_srdi_opnds'/3
					    (NewDst, NewSrc1, NewSrc2)
				    in  <'rldicl.',_cor14>
				%% Line 167
				<'sradi'> when 'true' ->
				    let <_cor15> =
					apply 'do_sradi_src2'/1
					    (NewSrc2)
				    in  <'sradi',{NewDst,NewSrc1,_cor15}>
				%% Line 168
				<'sradi.'> when 'true' ->
				    let <_cor16> =
					apply 'do_sradi_src2'/1
					    (NewSrc2)
				    in  <'sradi.',{NewDst,NewSrc1,_cor16}>
				%% Line 169
				<_cor21> when 'true' ->
				    <AluOp,{NewDst,NewSrc1,NewSrc2}>
			      end
			  in  %% Line 171
			      [{NewI,NewOpnds,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_slwi_opnds'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dst,Src1,{'uimm',N}>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor5> =
				call 'erlang':'<'
				    (N, 32)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 174
		  call 'erlang':'-'
		      (31, N)
	      in  %% Line 174
		  {Dst,Src1,{'sh',N},{'mb',0},{'me',_cor7}}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_slwi_opnds',3}}] )
	    -| ['compiler_generated'] )
	end
'do_srwi_opnds'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dst,Src1,{'uimm',N}>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor5> =
				call 'erlang':'<'
				    (N, 32)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 177
		  call 'erlang':'-'
		      (32, N)
	      in  %% Line 177
		  {Dst,Src1,{'sh',_cor7},{'mb',N},{'me',31}}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_srwi_opnds',3}}] )
	    -| ['compiler_generated'] )
	end
'do_srawi_src2'/1 =
    %% Line 179
    fun (_cor0) ->
	case _cor0 of
	  <{'uimm',N}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor3> =
				call 'erlang':'<'
				    (N, 32)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      {'sh',N}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'do_srawi_src2',1}}] )
	    -| ['compiler_generated'] )
	end
'do_sldi_opnds'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dst,Src1,{'uimm',N}>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor5> =
				call 'erlang':'<'
				    (N, 64)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 183
		  call 'erlang':'-'
		      (63, N)
	      in  %% Line 183
		  {Dst,Src1,{'sh6',N},{'me6',_cor7}}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_sldi_opnds',3}}] )
	    -| ['compiler_generated'] )
	end
'do_srdi_opnds'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dst,Src1,{'uimm',N}>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor5> =
				call 'erlang':'<'
				    (N, 64)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 186
		  call 'erlang':'-'
		      (64, N)
	      in  %% Line 186
		  {Dst,Src1,{'sh6',_cor7},{'mb6',N}}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_srdi_opnds',3}}] )
	    -| ['compiler_generated'] )
	end
'do_sradi_src2'/1 =
    %% Line 188
    fun (_cor0) ->
	case _cor0 of
	  <{'uimm',N}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (N)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, N)
			in  let <_cor3> =
				call 'erlang':'<'
				    (N, 64)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      {'sh6',N}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'do_sradi_src2',1}}] )
	    -| ['compiler_generated'] )
	end
'do_b_fun'/1 =
    %% Line 190
    fun (_cor0) ->
	%% Line 191
	case _cor0 of
	  <{'b_fun',Fun,Linkage}> when 'true' ->
	      %% Line 192
	      [{'.reloc',{'b_fun',Fun,Linkage},{'comment','fun'}}|%% Line 193
								  [{'b',{{'li',0}},_cor0}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_b_label'/1 =
    %% Line 195
    fun (_cor0) ->
	%% Line 196
	case _cor0 of
	  <{'b_label',Label}> when 'true' ->
	      let <_cor2> =
		  %% Line 197
		  apply 'do_label_ref'/1
		      (Label)
	      in  %% Line 197
		  [{'b',_cor2,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_bc'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	case _cor0 of
	  <{'bc',BCond,Label,Pred}> when 'true' ->
	      let <_cor2> =
		  %% Line 201
		  apply 'do_label_ref'/1
		      (Label)
	      in  %% Line 201
		  [{'bc_sdi',{{'bcond',BCond},_cor2,{'pred',Pred}},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_bctr'/1 =
    %% Line 203
    fun (_cor0) ->
	%% Line 204
	[{'bcctr',{{'bo',20},{'bi',0}},_cor0}|[]]
'do_bctrl'/1 =
    %% Line 206
    fun (_cor0) ->
	%% Line 207
	case _cor0 of
	  <{'bctrl',SDesc}> when 'true' ->
	      %% Line 208
	      [{'bcctrl',{{'bo',20},{'bi',0}},_cor0}|%% Line 209
						     [{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_bl'/1 =
    %% Line 211
    fun (_cor0) ->
	%% Line 212
	case _cor0 of
	  <{'bl',Fun,SDesc,Linkage}> when 'true' ->
	      %% Line 213
	      [{'.reloc',{'b_fun',Fun,Linkage},{'comment','fun'}}|%% Line 214
								  [{'bl',{{'li',0}},_cor0}|%% Line 215
											   [{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|[]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_blr'/1 =
    %% Line 217
    fun (_cor0) ->
	%% Line 218
	[{'bclr',{{'bo',20},{'bi',0}},_cor0}|[]]
'do_cmp'/1 =
    %% Line 220
    fun (_cor0) ->
	%% Line 221
	case _cor0 of
	  <{'cmp',CmpOp,Src1,Src2}> when 'true' ->
	      let <NewSrc1> =
		  %% Line 222
		  apply 'do_reg'/1
		      (Src1)
	      in  let <NewSrc2> =
		      %% Line 223
		      apply 'do_reg_or_imm'/1
			  (Src2)
		  in  let <RealOp,L> =
			  %% Line 225
			  case CmpOp of
			    %% Line 226
			    <'cmpd'> when 'true' ->
				<'cmp',1>
			    %% Line 227
			    <'cmpdi'> when 'true' ->
				<'cmpi',1>
			    %% Line 228
			    <'cmpld'> when 'true' ->
				<'cmpl',1>
			    %% Line 229
			    <'cmpldi'> when 'true' ->
				<'cmpli',1>
			    %% Line 230
			    <'cmp'> when 'true' ->
				<CmpOp,0>
			    %% Line 231
			    <'cmpi'> when 'true' ->
				<CmpOp,0>
			    %% Line 232
			    <'cmpl'> when 'true' ->
				<CmpOp,0>
			    %% Line 233
			    <'cmpli'> when 'true' ->
				<CmpOp,0>
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 235
			  [{RealOp,{{'crf',0},L,NewSrc1,NewSrc2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_label'/1 =
    %% Line 237
    fun (_cor0) ->
	%% Line 238
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      %% Line 239
	      [{'.label',Label,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_load'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	case _cor0 of
	  <{'load',LdOp,Dst,Disp,Base}> when 'true' ->
	      let <NewDst> =
		  %% Line 243
		  apply 'do_reg'/1
		      (Dst)
	      in  let <_cor4> =
		      %% Line 245
		      case LdOp of
			%% Line 246
			<'ld'> when 'true' ->
			    apply 'do_disp_ds'/1
				(Disp)
			%% Line 247
			<'ldu'> when 'true' ->
			    apply 'do_disp_ds'/1
				(Disp)
			%% Line 248
			<_cor8> when 'true' ->
			    apply 'do_disp'/1
				(Disp)
		      end
		  in  let <NewBase> =
			  %% Line 250
			  apply 'do_reg'/1
			      (Base)
		      in  %% Line 251
			  [{LdOp,{NewDst,_cor4,NewBase},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_loadx'/1 =
    %% Line 253
    fun (_cor0) ->
	%% Line 254
	case _cor0 of
	  <{'loadx',LdxOp,Dst,Base1,Base2}> when 'true' ->
	      let <NewDst> =
		  %% Line 255
		  apply 'do_reg'/1
		      (Dst)
	      in  let <NewBase1> =
		      %% Line 256
		      apply 'do_reg'/1
			  (Base1)
		  in  let <NewBase2> =
			  %% Line 257
			  apply 'do_reg'/1
			      (Base2)
		      in  %% Line 258
			  [{LdxOp,{NewDst,NewBase1,NewBase2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_mfspr'/1 =
    %% Line 260
    fun (_cor0) ->
	%% Line 261
	case _cor0 of
	  <{'mfspr',Dst,SPR}> when 'true' ->
	      let <NewDst> =
		  %% Line 262
		  apply 'do_reg'/1
		      (Dst)
	      in  let <NewSPR> =
		      %% Line 263
		      apply 'do_spr'/1
			  (SPR)
		  in  %% Line 264
		      [{'mfspr',{NewDst,NewSPR},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_mtcr'/1 =
    %% Line 266
    fun (_cor0) ->
	%% Line 267
	case _cor0 of
	  <{'mtcr',Src}> when 'true' ->
	      let <NewSrc> =
		  %% Line 268
		  apply 'do_reg'/1
		      (Src)
	      in  %% Line 269
		  [{'mtcrf',{{'crm',128},NewSrc},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_mtspr'/1 =
    %% Line 271
    fun (_cor0) ->
	%% Line 272
	case _cor0 of
	  <{'mtspr',SPR,Src}> when 'true' ->
	      let <NewSPR> =
		  %% Line 273
		  apply 'do_spr'/1
		      (SPR)
	      in  let <NewSrc> =
		      %% Line 274
		      apply 'do_reg'/1
			  (Src)
		  in  %% Line 275
		      [{'mtspr',{NewSPR,NewSrc},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_pseudo_li'/3 =
    %% Line 277
    fun (_cor2,_cor1,_cor0) ->
	%% Line 278
	case _cor2 of
	  <{'pseudo_li',Dst,Imm}> when 'true' ->
	      let <_cor6> =
		  %% Line 280
		  case Imm of
		    %% Line 281
		    <Atom>
			when call 'erlang':'is_atom'
			      (Imm) ->
			%% Line 282
			{'load_atom',Atom}
		    %% Line 290
		    <{Label,'constant'}> when 'true' ->
			let <ConstNo> =
			    %% Line 291
			    call 'hipe_pack_constants':'find_const'
				({_cor1,Label}, _cor0)
			in  %% Line 292
			    {'load_address',{'constant',ConstNo}}
		    %% Line 293
		    <{Label,'closure'}> when 'true' ->
			%% Line 294
			{'load_address',{'closure',Label}}
		    %% Line 295
		    <{Label,'c_const'}> when 'true' ->
			%% Line 296
			{'load_address',{'c_const',Label}}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewDst> =
		      %% Line 298
		      apply 'do_reg'/1
			  (Dst)
		  in  %% Line 301
		      case call 'erlang':'get'
			       ('hipe_target_arch') of
			%% Line 302
			<'powerpc'> when 'true' ->
			    %% Line 303
			    [{'.reloc',_cor6,{'comment','reloc'}}|%% Line 304
								  [{'addi',{NewDst,{'r',0},{'simm',0}},_cor2}|%% Line 305
													      [{'addis',{NewDst,NewDst,{'simm',0}},_cor2}|[]]]]
			%% Line 306
			<'ppc64'> when 'true' ->
			    %% Line 307
			    [{'.reloc',_cor6,{'comment','reloc'}}|%% Line 308
								  [{'addis',{NewDst,{'r',0},{'simm',0}},_cor2}|%% Line 309
													       [{'ori',{NewDst,NewDst,{'uimm',0}},_cor2}|%% Line 310
																			 [{'rldicr',{NewDst,NewDst,{'sh6',32},{'me6',31}},_cor2}|%% Line 311
																										 [{'oris',{NewDst,NewDst,{'uimm',0}},_cor2}|%% Line 312
																															    [{'ori',{NewDst,NewDst,{'uimm',0}},_cor2}|[]]]]]]]
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_store'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 316
	case _cor0 of
	  <{'store',StOp,Src,Disp,Base}> when 'true' ->
	      let <NewSrc> =
		  %% Line 317
		  apply 'do_reg'/1
		      (Src)
	      in  let <_cor4> =
		      %% Line 319
		      case StOp of
			%% Line 320
			<'std'> when 'true' ->
			    apply 'do_disp_ds'/1
				(Disp)
			%% Line 321
			<'stdu'> when 'true' ->
			    apply 'do_disp_ds'/1
				(Disp)
			%% Line 322
			<_cor8> when 'true' ->
			    apply 'do_disp'/1
				(Disp)
		      end
		  in  let <NewBase> =
			  %% Line 324
			  apply 'do_reg'/1
			      (Base)
		      in  %% Line 325
			  [{StOp,{NewSrc,_cor4,NewBase},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_storex'/1 =
    %% Line 327
    fun (_cor0) ->
	%% Line 328
	case _cor0 of
	  <{'storex',StxOp,Src,Base1,Base2}> when 'true' ->
	      let <NewSrc> =
		  %% Line 329
		  apply 'do_reg'/1
		      (Src)
	      in  let <NewBase1> =
		      %% Line 330
		      apply 'do_reg'/1
			  (Base1)
		  in  let <NewBase2> =
			  %% Line 331
			  apply 'do_reg'/1
			      (Base2)
		      in  %% Line 332
			  [{StxOp,{NewSrc,NewBase1,NewBase2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_unary'/1 =
    %% Line 334
    fun (_cor0) ->
	%% Line 335
	case _cor0 of
	  <{'unary',UnOp,Dst,Src}> when 'true' ->
	      let <NewDst> =
		  %% Line 336
		  apply 'do_reg'/1
		      (Dst)
	      in  let <NewSrc> =
		      %% Line 337
		      apply 'do_reg'/1
			  (Src)
		  in  let <NewI,NewOpnds> =
			  %% Line 339
			  case UnOp of
			    %% Line 340
			    <{RLWINM,SH,MB,ME}> when 'true' ->
				<RLWINM,{NewDst,NewSrc,{'sh',SH},{'mb',MB},{'me',ME}}>
			    %% Line 341
			    <_cor8> when 'true' ->
				<UnOp,{NewDst,NewSrc}>
			  end
		      in  %% Line 343
			  [{NewI,NewOpnds,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_lfd'/1 =
    %% Line 345
    fun (_cor0) ->
	%% Line 346
	case _cor0 of
	  <{'lfd',Dst,Disp,Base}> when 'true' ->
	      let <NewDst> =
		  %% Line 347
		  apply 'do_fpreg'/1
		      (Dst)
	      in  let <NewDisp> =
		      %% Line 348
		      apply 'do_disp'/1
			  (Disp)
		  in  let <NewBase> =
			  %% Line 349
			  apply 'do_reg'/1
			      (Base)
		      in  %% Line 350
			  [{'lfd',{NewDst,NewDisp,NewBase},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_stfd'/1 =
    %% Line 352
    fun (_cor0) ->
	%% Line 353
	case _cor0 of
	  <{'stfd',Src,Disp,Base}> when 'true' ->
	      let <NewSrc> =
		  %% Line 354
		  apply 'do_fpreg'/1
		      (Src)
	      in  let <NewDisp> =
		      %% Line 355
		      apply 'do_disp'/1
			  (Disp)
		  in  let <NewBase> =
			  %% Line 356
			  apply 'do_reg'/1
			      (Base)
		      in  %% Line 357
			  [{'stfd',{NewSrc,NewDisp,NewBase},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fp_binary'/1 =
    %% Line 359
    fun (_cor0) ->
	%% Line 360
	case _cor0 of
	  <{'fp_binary',FpBinOp,Dst,Src1,Src2}> when 'true' ->
	      let <NewDst> =
		  %% Line 361
		  apply 'do_fpreg'/1
		      (Dst)
	      in  let <NewSrc1> =
		      %% Line 362
		      apply 'do_fpreg'/1
			  (Src1)
		  in  let <NewSrc2> =
			  %% Line 363
			  apply 'do_fpreg'/1
			      (Src2)
		      in  %% Line 364
			  [{FpBinOp,{NewDst,NewSrc1,NewSrc2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fp_unary'/1 =
    %% Line 366
    fun (_cor0) ->
	%% Line 367
	case _cor0 of
	  <{'fp_unary',FpUnOp,Dst,Src}> when 'true' ->
	      let <NewDst> =
		  %% Line 368
		  apply 'do_fpreg'/1
		      (Dst)
	      in  let <NewSrc> =
		      %% Line 369
		      apply 'do_fpreg'/1
			  (Src)
		  in  %% Line 370
		      [{FpUnOp,{NewDst,NewSrc},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fpreg'/1 =
    %% Line 372
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',Reg,'double',_cor6}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Reg)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, Reg)
			in  let <_cor3> =
				call 'erlang':'<'
				    (Reg, 32)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 373
	      {'fr',Reg}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'do_fpreg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_reg'/1 =
    %% Line 375
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',Reg,Type,_cor8}>
	      when %% Line 376
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Reg)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, Reg)
			in  let <_cor3> =
				call 'erlang':'<'
				    (Reg, 32)
			    in  let <_cor4> =
				    call 'erlang':'=/='
					(Type, 'double')
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor2, _cor5)
					in  call 'erlang':'and'
						(_cor1, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 377
	      {'r',Reg}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'do_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_label_ref'/1 =
    %% Line 379
    fun (_cor0) ->
	case _cor0 of
	  <Label>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 380
	      {'label',Label}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'do_label_ref',1}}] )
	    -| ['compiler_generated'] )
	end
'do_reg_or_imm'/1 =
    %% Line 382
    fun (_cor0) ->
	%% Line 383
	case _cor0 of
	  %% Line 384
	  <{'ppc_temp',_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 385
	      apply 'do_reg'/1
		  (_cor0)
	  %% Line 386
	  <{'ppc_simm16',Value}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Value)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(-32768, Value)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (Value, 32767)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor1, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 387
		  call 'erlang':'band'
		      (Value, 65535)
	      in  %% Line 387
		  {'simm',_cor6}
	  %% Line 388
	  <{'ppc_uimm16',Value}>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Value)
		    in  let <_cor8> =
			    call 'erlang':'=<'
				(0, Value)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (Value, 65535)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 389
	      {'uimm',Value}
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'do_disp'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <Disp>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(-32768, _cor0)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (_cor0, 32767)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor1, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 393
		  call 'erlang':'band'
		      (Disp, 65535)
	      in  %% Line 393
		  {'d',_cor6}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'do_disp',1}}] )
	    -| ['compiler_generated'] )
	end
'do_disp_ds'/1 =
    %% Line 395
    fun (_cor0) ->
	case _cor0 of
	  <Disp>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 396
			    call 'erlang':'=<'
				(-32768, _cor0)
			in  let <_cor4> =
				%% Line 396
				call 'erlang':'=<'
				    (_cor0, 32767)
			    in  let <_cor5> =
				    %% Line 396
				    call 'erlang':'band'
					(_cor0, 3)
				in  let <_cor6> =
					%% Line 396
					call 'erlang':'=:='
					    (_cor5, 0)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor4, _cor6)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor3, _cor7)
					    in  call 'erlang':'and'
						    (_cor1, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 397
		  call 'erlang':'band'
		      (Disp, 65535)
	      in  let <_cor10> =
		      %% Line 397
		      call 'erlang':'bsr'
			  (_cor9, 2)
		  in  %% Line 397
		      {'ds',_cor10}
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'do_disp_ds',1}}] )
	    -| ['compiler_generated'] )
	end
'do_spr'/1 =
    %% Line 399
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 401
	    case _cor0 of
	      %% Line 402
	      <'xer'> when 'true' ->
		  1
	      %% Line 403
	      <'lr'> when 'true' ->
		  8
	      %% Line 404
	      <'ctr'> when 'true' ->
		  9
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  %% Line 406
	    {'spr',_cor2}
'encode'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	let <CodeSize> =
	    %% Line 419
	    apply 'compute_code_size'/2
		(_cor1, 0)
	in  let <ExportMap> =
		%% Line 420
		apply 'build_export_map'/3
		    (_cor1, 0, [])
	    in  %% Line 421
		case apply 'encode_mfas'/5
			 (_cor1, 0, [], [], _cor0) of
		  <{AccCode,Relocs}> when 'true' ->
		      let <_cor5> =
			  %% Line 422
			  call 'lists':'reverse'
			      (AccCode)
		      in  let <CodeBinary> =
			      %% Line 422
			      call 'erlang':'list_to_binary'
				  (_cor5)
			  in  do  %% Line 423
				  case <> of
				    <>
					when try
					      let <_cor7> =
						  call 'erlang':'byte_size'
						      (CodeBinary)
					      in  call 'erlang':'=:='
						      (CodeSize, _cor7)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_ppc_assemble',423,[67|[111|[100|[101|[83|[105|[122|[101|[32|[61|[58|[61|[32|[98|[121|[116|[101|[95|[115|[105|[122|[101|[32|[40|[32|[67|[111|[100|[101|[66|[105|[110|[97|[114|[121|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				  end
				  let <_cor8> =
				      %% Line 424
				      call 'gb_trees':'empty'
					  ()
				  in  let <CombinedLabelMap> =
					  %% Line 424
					  apply 'combine_label_maps'/3
					      (_cor1, 0, _cor8)
				      in  %% Line 425
					  {CodeSize,CodeBinary,Relocs,CombinedLabelMap,ExportMap}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'compute_code_size'/2 =
    %% Line 427
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_MFA,_X_Insns,CodeSize,_X_LabelMap}|Code],Size> when 'true' ->
	      let <_cor2> =
		  %% Line 428
		  call 'erlang':'+'
		      (Size, CodeSize)
	      in  %% Line 428
		  apply 'compute_code_size'/2
		      (Code, _cor2)
	  %% Line 429
	  <[],Size> when 'true' ->
	      Size
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'compute_code_size',2}}] )
	    -| ['compiler_generated'] )
	end
'build_export_map'/3 =
    %% Line 431
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{M,F,A},_X_Insns,CodeSize,_X_LabelMap}|Code],Address,ExportMap> when 'true' ->
	      let <_cor3> =
		  %% Line 432
		  call 'erlang':'+'
		      (Address, CodeSize)
	      in  %% Line 432
		  apply 'build_export_map'/3
		      (Code, _cor3, [{Address,M,F,A}|ExportMap])
	  %% Line 433
	  <[],_X_Address,ExportMap> when 'true' ->
	      ExportMap
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'build_export_map',3}}] )
	    -| ['compiler_generated'] )
	end
'combine_label_maps'/3 =
    %% Line 435
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,_X_Insns,CodeSize,LabelMap}|Code],Address,CLM> when 'true' ->
	      let <_cor3> =
		  %% Line 436
		  call 'gb_trees':'to_list'
		      (LabelMap)
	      in  let <NewCLM> =
		      %% Line 436
		      apply 'merge_label_map'/4
			  (_cor3, MFA, Address, CLM)
		  in  let <_cor5> =
			  %% Line 437
			  call 'erlang':'+'
			      (Address, CodeSize)
		      in  %% Line 437
			  apply 'combine_label_maps'/3
			      (Code, _cor5, NewCLM)
	  %% Line 438
	  <[],_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'combine_label_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_label_map'/4 =
    %% Line 440
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,Offset}|Rest],MFA,Address,CLM> when 'true' ->
	      let <_cor4> =
		  %% Line 441
		  call 'erlang':'+'
		      (Address, Offset)
	      in  let <NewCLM> =
		      %% Line 441
		      call 'gb_trees':'insert'
			  ({MFA,Label}, _cor4, CLM)
		  in  %% Line 442
		      apply 'merge_label_map'/4
			  (Rest, MFA, Address, NewCLM)
	  %% Line 443
	  <[],_X_MFA,_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge_label_map',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_mfas'/5 =
    %% Line 445
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,CodeSize,LabelMap}|Code],Address,AccCode,Relocs,Options> when 'true' ->
	      do  %% Line 446
		  apply 'print'/3
		      ([71|[101|[110|[101|[114|[97|[116|[105|[110|[103|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]], [MFA|[]], Options)
		  do  %% Line 447
		      apply 'print'/3
			  ([79|[102|[102|[115|[101|[116|[32|[32|[32|[124|[32|[79|[112|[99|[111|[100|[101|[32|[32|[32|[124|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], Options)
		      %% Line 448
		      case %% Line 449
			   apply 'encode_insns'/7
			       (Insns, Address, Address, LabelMap, Relocs, AccCode, Options) of
			<{Address1,Relocs1,AccCode1}> when 'true' ->
			    let <ExpectedAddress> =
				%% Line 450
				call 'erlang':'+'
				    (Address, CodeSize)
			    in  do  %% Line 451
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Address1,
						 ExpectedAddress) ->
					  []
				      <> when 'true' ->
					  call 'erlang':'exit'
					      ({'assertion_failed','hipe_ppc_assemble',451,[65|[100|[100|[114|[101|[115|[115|[49|[32|[61|[58|[61|[32|[69|[120|[112|[101|[99|[116|[101|[100|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				    end
				    do  %% Line 452
					apply 'print'/3
					    ([70|[105|[110|[105|[115|[104|[101|[100|[46|[10]]]]]]]]]], [], Options)
					%% Line 453
					apply 'encode_mfas'/5
					    (Code, Address1, AccCode1, Relocs1, Options)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 454
	  <[],_X_Address,AccCode,Relocs,_X_Options> when 'true' ->
	      %% Line 455
	      {AccCode,Relocs}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'encode_mfas',5}}] )
	    -| ['compiler_generated'] )
	end
'encode_insns'/7 =
    %% Line 457
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Address,FunAddress,LabelMap,Relocs,AccCode,Options> when 'true' ->
	      %% Line 458
	      case I of
		%% Line 459
		<{'.label',L,_cor24}> when 'true' ->
		    let <_cor7> =
			%% Line 460
			call 'gb_trees':'get'
			    (L, LabelMap)
		    in  let <LabelAddress> =
			    %% Line 460
			    call 'erlang':'+'
				(_cor7, FunAddress)
			in  do  %% Line 461
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Address,
					     LabelAddress) ->
				      []
				  <> when 'true' ->
				      call 'erlang':'exit'
					  ({'assertion_failed','hipe_ppc_assemble',461,[65|[100|[100|[114|[101|[115|[115|[32|[61|[58|[61|[32|[76|[97|[98|[101|[108|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]})
				end
				do  %% Line 462
				    apply 'print_insn'/4
					(Address, [], I, Options)
				    %% Line 463
				    apply 'encode_insns'/7
					(Insns, Address, FunAddress, LabelMap, Relocs, AccCode, Options)
		%% Line 464
		<{'.reloc',Data,_cor25}> when 'true' ->
		    let <Reloc> =
			%% Line 465
			apply 'encode_reloc'/4
			    (Data, Address, FunAddress, LabelMap)
		    in  %% Line 466
			apply 'encode_insns'/7
			    (Insns, Address, FunAddress, LabelMap, [Reloc|Relocs], AccCode, Options)
		%% Line 467
		<{'bc_sdi',_cor26,_cor27}> when 'true' ->
		    let <_cor10> =
			%% Line 468
			apply 'fix_bc_sdi'/5
			    (I, Insns, Address, FunAddress, LabelMap)
		    in  %% Line 468
			apply 'encode_insns'/7
			    (_cor10, %% Line 469
				     Address, %% Line 469
					      FunAddress, %% Line 469
							  LabelMap, %% Line 469
								    Relocs, %% Line 469
									    AccCode, %% Line 469
										     Options)
		%% Line 470
		<_cor28> when 'true' ->
		    %% Line 471
		    case apply 'fix_jumps'/4
			     (I, Address, FunAddress, LabelMap) of
		      <{Op,Arg,_cor29}> when 'true' ->
			  let <Word> =
			      %% Line 472
			      call 'hipe_ppc_encode':'insn_encode'
				  (Op, Arg)
			  in  do  %% Line 473
				  apply 'print_insn'/4
				      (Address, Word, I, Options)
				  let <Segment> =
				      %% Line 474
				      #{#<Word>(32,1,'integer',['unsigned'|['big']])}#
				  in  let <NewAccCode> =
					  %% Line 475
					  [Segment|AccCode]
				      in  let <_cor15> =
					      %% Line 476
					      call 'erlang':'+'
						  (Address, 4)
					  in  %% Line 476
					      apply 'encode_insns'/7
						  (Insns, _cor15, FunAddress, LabelMap, Relocs, NewAccCode, Options)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 478
	  <[],Address,_X_FunAddress,_X_LabelMap,Relocs,AccCode,_X_Options> when 'true' ->
	      %% Line 479
	      {Address,Relocs,AccCode}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'encode_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'encode_reloc'/4 =
    %% Line 481
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 482
	case _cor3 of
	  %% Line 483
	  <{'b_fun',MFAorPrim,Linkage}> when 'true' ->
	      let <_cor5> =
		  %% Line 487
		  case Linkage of
		    %% Line 488
		    <'remote'> when 'true' ->
			2
		    %% Line 489
		    <'not_remote'> when 'true' ->
			3
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 491
		      apply 'untag_mfa_or_prim'/1
			  (MFAorPrim)
		  in  %% Line 491
		      {_cor5,_cor2,_cor7}
	  %% Line 492
	  <{'load_atom',Atom}> when 'true' ->
	      %% Line 493
	      {0,_cor2,Atom}
	  %% Line 494
	  <{'load_address',X}> when 'true' ->
	      %% Line 495
	      {1,_cor2,X}
	  %% Line 496
	  <{'sdesc',SDesc}> when 'true' ->
	      %% Line 497
	      case SDesc of
		<{'ppc_sdesc',ExnLab,FSize,Arity,Live}> when 'true' ->
		    let <_cor11> =
			%% Line 499
			case ExnLab of
			  %% Line 500
			  <[]> when 'true' ->
			      []
			  %% Line 501
			  <_cor18> when 'true' ->
			      let <_cor9> =
				  call 'gb_trees':'get'
				      (ExnLab, _cor0)
			      in  call 'erlang':'+'
				      (_cor9, _cor1)
			end
		    in  %% Line 503
			{4,_cor2,%% Line 504
				 {_cor11,FSize,Arity,Live}}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'untag_mfa_or_prim'/1 =
    %% Line 507
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_mfa',M,F,A}> when 'true' ->
	      {M,F,A}
	  %% Line 508
	  <{'ppc_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'untag_mfa_or_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_bc_sdi'/5 =
    %% Line 510
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 511
	case _cor4 of
	  <{'bc_sdi',Opnds,OrigI}> when 'true' ->
	      %% Line 512
	      case Opnds of
		<{{'bcond',BCond},Label,{'pred',Pred}}> when 'true' ->
		    %% Line 513
		    case Label of
		      <{'label',L}> when 'true' ->
			  let <_cor8> =
			      %% Line 514
			      call 'gb_trees':'get'
				  (L, _cor0)
			  in  let <LabelAddress> =
				  %% Line 514
				  call 'erlang':'+'
				      (_cor8, _cor1)
			      in  let <_cor10> =
				      %% Line 515
				      call 'erlang':'-'
					  (LabelAddress, _cor2)
				  in  let <BD> =
					  %% Line 515
					  call 'erlang':'div'
					      (_cor10, 4)
				      in  %% Line 516
					  case <> of
					    <>
						when let <_cor13> =
						      call 'erlang':'>='
							  (BD, -8192)
						  in  let <_cor14> =
							  call 'erlang':'=<'
							      (BD, 8191)
						      in  call 'erlang':'and'
							      (_cor13, _cor14) ->
						%% Line 517
						[{'bc',Opnds,OrigI}|_cor3]
					    %% Line 518
					    <> when 'true' ->
						let <NewBCond> =
						    %% Line 519
						    call 'hipe_ppc':'negate_bcond'
							(BCond)
						in  let <NewPred> =
							%% Line 520
							call 'erlang':'-'
							    (1.00000000000000000000e+00, Pred)
						    in  %% Line 521
							[{'bc',%% Line 522
							       {{'bcond',NewBCond},'.+8',{'pred',NewPred}},%% Line 523
													   {'bc',NewBCond,'.+8',NewPred}}|%% Line 524
																	  [{'b',Label,{'b_label',L}}|_cor3]]
					  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'fix_jumps'/4 =
    %% Line 528
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 529
	case _cor3 of
	  %% Line 530
	  <{'b',{'label',L},OrigI}> when 'true' ->
	      let <_cor4> =
		  %% Line 531
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 531
		      call 'erlang':'+'
			  (_cor4, _cor1)
		  in  let <_cor6> =
			  %% Line 532
			  call 'erlang':'-'
			      (LabelAddress, _cor2)
		      in  let <LI> =
			      %% Line 532
			      call 'erlang':'div'
				  (_cor6, 4)
			  in  do  %% Line 534
				  case <> of
				    <>
					when call 'erlang':'=<'
					      (LI,
					       8388607) ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_ppc_assemble',534,[76|[73|[32|[61|[60|[32|[56|[51|[56|[56|[54|[48|[55]]]]]]]]]]]]]})
				  end
				  do  %% Line 535
				      case <> of
					<>
					    when call 'erlang':'>='
						  (LI,
						   -8388608) ->
					    []
					<> when 'true' ->
					    call 'erlang':'exit'
						({'assertion_failed','hipe_ppc_assemble',535,[76|[73|[32|[62|[61|[32|[45|[32|[40|[32|[56|[51|[56|[56|[54|[48|[56|[32|[41]]]]]]]]]]]]]]]]]]]})
				      end
				      let <_cor9> =
					  %% Line 536
					  call 'erlang':'band'
					      (LI, 16777215)
				      in  %% Line 536
					  {'b',{{'li',_cor9}},OrigI}
	  %% Line 537
	  <{'bc',{{'bcond',BCond},Target,{'pred',Pred}},OrigI}> when 'true' ->
	      let <_cor12> =
		  %% Line 539
		  case Target of
		    %% Line 540
		    <{'label',L}> when 'true' ->
			let <_cor10> =
			    call 'gb_trees':'get'
				(L, _cor0)
			in  call 'erlang':'+'
				(_cor10, _cor1)
		    %% Line 541
		    <'.+8'> when 'true' ->
			call 'erlang':'+'
			    (_cor2, 8)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor14> =
		      %% Line 543
		      call 'erlang':'-'
			  (_cor12, _cor2)
		  in  let <BD> =
			  %% Line 543
			  call 'erlang':'div'
			      (_cor14, 4)
		      in  do  %% Line 545
			      case <> of
				<>
				    when call 'erlang':'=<'
					  (BD,
					   8191) ->
				    []
				<> when 'true' ->
				    call 'erlang':'exit'
					({'assertion_failed','hipe_ppc_assemble',545,[66|[68|[32|[61|[60|[32|[56|[49|[57|[49]]]]]]]]]]})
			      end
			      do  %% Line 546
				  case <> of
				    <>
					when call 'erlang':'>='
					      (BD,
					       -8192) ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_ppc_assemble',546,[66|[68|[32|[62|[61|[32|[45|[32|[40|[32|[56|[49|[57|[50|[32|[41]]]]]]]]]]]]]]]]})
				  end
				  %% Line 547
				  case apply 'split_bcond'/1
					   (BCond) of
				    <{BO1,BI}> when 'true' ->
					let <BO> =
					    %% Line 548
					    apply 'mk_bo'/3
						(BO1, Pred, BD)
					in  let <_cor19> =
						%% Line 549
						call 'erlang':'band'
						    (BD, 16383)
					    in  %% Line 549
						{'bc',{{'bo',BO},{'bi',BI},{'bd',_cor19}},OrigI}
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor17})
				      -| ['compiler_generated'] )
				  end
	  %% Line 550
	  <_cor25> when 'true' ->
	      _cor3
	end
'split_bcond'/1 =
    %% Line 553
    fun (_cor0) ->
	%% Line 554
	case _cor0 of
	  %% Line 555
	  <'lt'> when 'true' ->
	      {1,0}
	  %% Line 556
	  <'ge'> when 'true' ->
	      {0,0}
	  %% Line 557
	  <'gt'> when 'true' ->
	      {1,1}
	  %% Line 558
	  <'le'> when 'true' ->
	      {0,1}
	  %% Line 559
	  <'eq'> when 'true' ->
	      {1,2}
	  %% Line 560
	  <'ne'> when 'true' ->
	      {0,2}
	  %% Line 561
	  <'so'> when 'true' ->
	      {1,3}
	  %% Line 562
	  <'ns'> when 'true' ->
	      {0,3}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_bo'/3 =
    %% Line 565
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 566
	    call 'erlang':'bsl'
		(_cor2, 3)
	in  let <_cor5> =
		%% Line 566
		call 'erlang':'bor'
		    (_cor4, 4)
	    in  let <_cor3> =
		    %% Line 566
		    apply 'mk_y'/2
			(_cor1, _cor0)
		in  %% Line 566
		    call 'erlang':'bor'
			(_cor5, _cor3)
'mk_y'/2 =
    %% Line 568
    fun (_cor1,_cor0) ->
	%% Line 569
	case <> of
	  <>
	      when call 'erlang':'<'
		    (_cor1,
		     5.00000000000000000000e-01) ->
	      %% Line 570
	      case <> of
		<>
		    when call 'erlang':'<'
			  (_cor0,
			   0) ->
		    1
		<> when 'true' ->
		    0
	      end
	  %% Line 571
	  <> when 'true' ->
	      %% Line 572
	      case <> of
		<>
		    when call 'erlang':'<'
			  (_cor0,
			   0) ->
		    0
		<> when 'true' ->
		    1
	      end
	end
'print'/3 =
    %% Line 581
    fun (_cor2,_cor1,_cor0) ->
	%% Line 582
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      call 'io':'format'
		  (_cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'print_insn'/4 =
    %% Line 584
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 585
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      apply 'print_insn_2'/3
		  (_cor3, _cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'print_insn_2'/3 =
    %% Line 587
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Address,Word,{_cor7,_cor8,OrigI}> when 'true' ->
	      do  %% Line 588
		  call 'io':'format'
		      ([126|[56|[46|[49|[54|[46|[48|[98|[32|[124|[32]]]]]]]]]]], [Address|[]])
		  let <_cor3> =
		      %% Line 589
		      apply 'word_to_bytes'/1
			  (Word)
		  in  do  %% Line 589
			  apply 'print_code_list'/2
			      (_cor3, 0)
			  %% Line 590
			  call 'hipe_ppc_pp':'pp_insn'
			      (OrigI)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'print_insn_2',3}}] )
	    -| ['compiler_generated'] )
	end
'word_to_bytes'/1 =
    %% Line 592
    fun (_cor0) ->
	%% Line 593
	case _cor0 of
	  %% Line 594
	  <[]> when 'true' ->
	      []
	  %% Line 595
	  <_cor10> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'bsr'
		      (_cor0, 24)
	      in  let <_cor2> =
		      call 'erlang':'band'
			  (_cor1, 255)
		  in  let <_cor3> =
			  call 'erlang':'bsr'
			      (_cor0, 16)
		      in  let <_cor4> =
			      call 'erlang':'band'
				  (_cor3, 255)
			  in  let <_cor5> =
				  %% Line 596
				  call 'erlang':'bsr'
				      (_cor0, 8)
			      in  let <_cor6> =
				      %% Line 596
				      call 'erlang':'band'
					  (_cor5, 255)
				  in  let <_cor7> =
					  %% Line 596
					  call 'erlang':'band'
					      (_cor0, 255)
				      in  [_cor2|[_cor4|%% Line 596
							[_cor6|[_cor7|[]]]]]
	end
'print_code_list'/2 =
    %% Line 599
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Byte|Rest],Len> when 'true' ->
	      do  %% Line 600
		  apply 'print_byte'/1
		      (Byte)
		  let <_cor2> =
		      %% Line 601
		      call 'erlang':'+'
			  (Len, 1)
		  in  %% Line 601
		      apply 'print_code_list'/2
			  (Rest, _cor2)
	  %% Line 602
	  <[],Len> when 'true' ->
	      let <_cor3> =
		  %% Line 603
		  call 'erlang':'*'
		      (Len, 2)
	      in  let <_cor4> =
		      %% Line 603
		      call 'erlang':'-'
			  (8, _cor3)
		  in  do  %% Line 603
			  apply 'fill_spaces'/1
			      (_cor4)
			  %% Line 604
			  call 'io':'format'
			      ([32|[124|[32]]])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'print_code_list',2}}] )
	    -| ['compiler_generated'] )
	end
'print_byte'/1 =
    %% Line 606
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 607
	    call 'erlang':'band'
		(_cor0, 255)
	in  %% Line 607
	    call 'io':'format'
		([126|[50|[46|[49|[54|[46|[48|[98]]]]]]]], [_cor1|[]])
'fill_spaces'/1 =
    %% Line 609
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      do  %% Line 610
		  call 'io':'format'
		      ([32])
		  let <_cor1> =
		      %% Line 611
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 611
		      apply 'fill_spaces'/1
			  (_cor1)
	  %% Line 612
	  <0> when 'true' ->
	      %% Line 613
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fill_spaces',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_assemble')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_assemble', _cor0)
end