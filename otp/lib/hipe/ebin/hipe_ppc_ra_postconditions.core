module 'hipe_ppc_ra_postconditions' ['check_and_rewrite'/3,
				     'check_and_rewrite2'/3,
				     'module_info'/0,
				     'module_info'/1]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','ppc_mfa'},[{'typed_record_field',{'record_field',39,{'atom',39,'m'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'f'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'a'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'arity',[]}]]}}]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','ppc_prim'},[{'record_field',40,{'atom',40,'prim'}}],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','ppc_sdesc'},[{'record_field',41,{'atom',41,'exnlab'}}|[{'record_field',41,{'atom',41,'fsize'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'arity'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'arity',[]}]]}}|[{'record_field',41,{'atom',41,'live'}}]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ppc_simm16'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ppc_temp'},[{'record_field',43,{'atom',43,'reg'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'allocatable'}}]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','ppc_uimm16'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','alu'},[{'record_field',76,{'atom',76,'aluop'}}|[{'record_field',76,{'atom',76,'dst'}}|[{'record_field',76,{'atom',76,'src1'}}|[{'record_field',76,{'atom',76,'src2'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','b_fun'},[{'record_field',77,{'atom',77,'fun'}}|[{'record_field',77,{'atom',77,'linkage'}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','b_label'},[{'record_field',78,{'atom',78,'label'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','bc'},[{'record_field',79,{'atom',79,'bcond'}}|[{'record_field',79,{'atom',79,'label'}}|[{'record_field',79,{'atom',79,'pred'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bctr'},[{'record_field',80,{'atom',80,'labels'}}],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','bctrl'},[{'record_field',81,{'atom',81,'sdesc'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','bl'},[{'record_field',82,{'atom',82,'fun'}}|[{'record_field',82,{'atom',82,'sdesc'}}|[{'record_field',82,{'atom',82,'linkage'}}]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','blr'},[],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','cmp'},[{'record_field',84,{'atom',84,'cmpop'}}|[{'record_field',84,{'atom',84,'src1'}}|[{'record_field',84,{'atom',84,'src2'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'term'}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','label'},[{'record_field',86,{'atom',86,'label'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','load'},[{'record_field',87,{'atom',87,'ldop'}}|[{'record_field',87,{'atom',87,'dst'}}|[{'record_field',87,{'atom',87,'disp'}}|[{'record_field',87,{'atom',87,'base'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','loadx'},[{'record_field',88,{'atom',88,'ldxop'}}|[{'record_field',88,{'atom',88,'dst'}}|[{'record_field',88,{'atom',88,'base1'}}|[{'record_field',88,{'atom',88,'base2'}}]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','mfspr'},[{'record_field',89,{'atom',89,'dst'}}|[{'record_field',89,{'atom',89,'spr'}}]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','mtcr'},[{'record_field',90,{'atom',90,'src'}}],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','mtspr'},[{'record_field',91,{'atom',91,'spr'}}|[{'record_field',91,{'atom',91,'src'}}]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_bc'},[{'record_field',92,{'atom',92,'bcond'}}|[{'record_field',92,{'atom',92,'true_label'}}|[{'record_field',92,{'atom',92,'false_label'}}|[{'record_field',92,{'atom',92,'pred'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call'},[{'record_field',93,{'atom',93,'func'}}|[{'record_field',93,{'atom',93,'sdesc'}}|[{'record_field',93,{'atom',93,'contlab'}}|[{'record_field',93,{'atom',93,'linkage'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_call_prepare'},[{'record_field',94,{'atom',94,'nrstkargs'}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_li'},[{'record_field',95,{'atom',95,'dst'}}|[{'record_field',95,{'atom',95,'imm'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_move'},[{'record_field',96,{'atom',96,'dst'}}|[{'record_field',96,{'atom',96,'src'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'func'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','store'},[{'record_field',99,{'atom',99,'stop'}}|[{'record_field',99,{'atom',99,'src'}}|[{'record_field',99,{'atom',99,'disp'}}|[{'record_field',99,{'atom',99,'base'}}]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','storex'},[{'record_field',100,{'atom',100,'stxop'}}|[{'record_field',100,{'atom',100,'src'}}|[{'record_field',100,{'atom',100,'base1'}}|[{'record_field',100,{'atom',100,'base2'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','unary'},[{'record_field',101,{'atom',101,'unop'}}|[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'src'}}]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','lfd'},[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'disp'}}|[{'record_field',102,{'atom',102,'base'}}]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','lfdx'},[{'record_field',103,{'atom',103,'dst'}}|[{'record_field',103,{'atom',103,'base1'}}|[{'record_field',103,{'atom',103,'base2'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','stfd'},[{'record_field',104,{'atom',104,'src'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'base'}}]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','stfdx'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'base1'}}|[{'record_field',105,{'atom',105,'base2'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','fp_binary'},[{'record_field',106,{'atom',106,'fp_binop'}}|[{'record_field',106,{'atom',106,'dst'}}|[{'record_field',106,{'atom',106,'src1'}}|[{'record_field',106,{'atom',106,'src2'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','fp_unary'},[{'record_field',107,{'atom',107,'fp_unop'}}|[{'record_field',107,{'atom',107,'dst'}}|[{'record_field',107,{'atom',107,'src'}}]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_fmove'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'src'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','defun'},[{'typed_record_field',{'record_field',114,{'atom',114,'mfa'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'mfa',[]}]]}}|[{'record_field',114,{'atom',114,'formals'}}|[{'record_field',114,{'atom',114,'code'}}|[{'typed_record_field',{'record_field',115,{'atom',115,'data'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'isclosure'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'isleaf'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'boolean',[]}]]}}|[{'record_field',118,{'atom',118,'var_range'}}|[{'record_field',118,{'atom',118,'label_range'}}]]]]]]]],[]}]]
'check_and_rewrite'/3 =
    %% Line 27
    fun (_cor2,_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 28
	    call 'hipe_temp_map':'cols2tuple'
		(_cor1, 'hipe_ppc_specific')
	in  %% Line 29
	    apply 'check_and_rewrite2'/3
		(_cor2, TempMap, _cor0)
'check_and_rewrite2'/3 =
    %% Line 31
    fun (_cor2,_cor1,_cor0) ->
	let <Strategy> =
	    %% Line 32
	    apply 'strategy'/1
		(_cor0)
	in  %% Line 33
	    case _cor2 of
	      <{'defun',_cor15,_cor16,Code0,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		  %% Line 34
		  case apply 'do_insns'/5
			   (Code0, _cor1, Strategy, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor6> =
			    %% Line 35
			    call 'hipe_gensym':'get_var'
				('ppc')
			in  let <VarRange> = {%% Line 35
				 0,_cor6}
			    in  let <_cor9> =
				    %% Line 36
				    call 'erlang':'setelement'
					(8, _cor2, VarRange)
				in  let <_cor11> =
					%% Line 36
					call 'erlang':'setelement'
					    (4, _cor9, Code1)
				    in  %% Line 36
					{_cor11,%% Line 37
						DidSpill}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'strategy'/1 =
    %% Line 39
    fun (_cor0) ->
	%% Line 40
	case _cor0 of
	  %% Line 41
	  <'normal'> when 'true' ->
	      'new'
	  %% Line 42
	  <'linearscan'> when 'true' ->
	      'fixed'
	  %% Line 43
	  <'naive'> when 'true' ->
	      'fixed'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_insns'/5 =
    %% Line 46
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Strategy,Accum,DidSpill0> when 'true' ->
	      %% Line 47
	      case apply 'do_insn'/3
		       (I, TempMap, Strategy) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor7> =
			%% Line 48
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor6> =
			    %% Line 48
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 48
			    apply 'do_insns'/5
				(Insns, TempMap, Strategy, _cor7, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 49
	  <[],_X_TempMap,_X_Strategy,Accum,DidSpill> when 'true' ->
	      let <_cor8> =
		  %% Line 50
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 50
		  {_cor8,DidSpill}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_insns',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/3 =
    %% Line 52
    fun (_cor2,_cor1,_cor0) ->
	%% Line 53
	case _cor2 of
	  %% Line 54
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'do_alu'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 55
	  <{'cmp',_cor11,_cor12,_cor13}> when 'true' ->
	      apply 'do_cmp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 56
	  <{'load',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      apply 'do_load'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 57
	  <{'loadx',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      apply 'do_loadx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 58
	  <{'mfspr',_cor22,_cor23}> when 'true' ->
	      apply 'do_mfspr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 59
	  <{'mtcr',_cor24}> when 'true' ->
	      apply 'do_mtcr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 60
	  <{'mtspr',_cor25,_cor26}> when 'true' ->
	      apply 'do_mtspr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 61
	  <{'pseudo_li',_cor27,_cor28}> when 'true' ->
	      apply 'do_pseudo_li'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 62
	  <{'pseudo_move',_cor29,_cor30}> when 'true' ->
	      apply 'do_pseudo_move'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 63
	  <{'store',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      apply 'do_store'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 64
	  <{'storex',_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      apply 'do_storex'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 65
	  <{'unary',_cor39,_cor40,_cor41}> when 'true' ->
	      apply 'do_unary'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 66
	  <{'lfd',_cor42,_cor43,_cor44}> when 'true' ->
	      apply 'do_lfd'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 67
	  <{'lfdx',_cor45,_cor46,_cor47}> when 'true' ->
	      apply 'do_lfdx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 68
	  <{'stfd',_cor48,_cor49,_cor50}> when 'true' ->
	      apply 'do_stfd'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 69
	  <{'stfdx',_cor51,_cor52,_cor53}> when 'true' ->
	      apply 'do_stfdx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 70
	  <_cor54> when 'true' ->
	      {[_cor2|[]],'false'}
	end
'do_alu'/3 =
    %% Line 75
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'alu',_cor17,Dst,Src1,Src2},TempMap,Strategy> when 'true' ->
	      %% Line 76
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 77
		    case apply 'fix_src1'/3
			     (Src1, TempMap, Strategy) of
		      <{FixSrc1,NewSrc1,DidSpill2}> when 'true' ->
			  %% Line 78
			  case apply 'fix_src2_or_imm'/3
				   (Src2, TempMap, Strategy) of
			    <{FixSrc2,NewSrc2,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 79
				    {'alu',_cor17,NewDst,NewSrc1,NewSrc2}
				in  let <_cor12> =
					%% Line 80
					call 'erlang':'++'
					    (FixSrc2, [_cor8|FixDst])
				    in  let <_cor13> =
					    %% Line 80
					    call 'erlang':'++'
						(FixSrc1, _cor12)
					in  let <_cor10> =
						%% Line 80
						call 'erlang':'or'
						    (DidSpill1, DidSpill2)
					    in  let <_cor11> =
						    %% Line 80
						    call 'erlang':'or'
							(_cor10, DidSpill3)
						in  %% Line 80
						    {_cor13,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_alu',3}}] )
	    -| ['compiler_generated'] )
	end
'do_cmp'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'cmp',_cor15,Src1,Src2},TempMap,Strategy> when 'true' ->
	      %% Line 83
	      case apply 'fix_src1'/3
		       (Src1, TempMap, Strategy) of
		<{FixSrc1,NewSrc1,DidSpill1}> when 'true' ->
		    %% Line 84
		    case apply 'fix_src2_or_imm'/3
			     (Src2, TempMap, Strategy) of
		      <{FixSrc2,NewSrc2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 85
			      {'cmp',_cor15,NewSrc1,NewSrc2}
			  in  let <_cor10> =
				  %% Line 86
				  call 'erlang':'++'
				      (FixSrc2, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 86
				      call 'erlang':'++'
					  (FixSrc1, _cor10)
				  in  let <_cor9> =
					  %% Line 86
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 86
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_cmp',3}}] )
	    -| ['compiler_generated'] )
	end
'do_load'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'load',_cor15,Dst,_cor16,Base},TempMap,Strategy> when 'true' ->
	      %% Line 89
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 90
		    case apply 'fix_src1'/3
			     (Base, TempMap, Strategy) of
		      <{FixBase,NewBase,DidSpill2}> when 'true' ->
			  let <_cor6> =
			      %% Line 91
			      call 'erlang':'setelement'
				  (5, I, NewBase)
			  in  let <_cor8> =
				  %% Line 91
				  call 'erlang':'setelement'
				      (3, _cor6, NewDst)
			      in  let <_cor11> =
				      %% Line 92
				      call 'erlang':'++'
					  (FixBase, [_cor8|FixDst])
				  in  let <_cor10> =
					  %% Line 92
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 92
					  {_cor11,_cor10}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_load',3}}] )
	    -| ['compiler_generated'] )
	end
'do_loadx'/3 =
    %% Line 94
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'loadx',_cor17,Dst,Base1,Base2},TempMap,Strategy> when 'true' ->
	      %% Line 95
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 96
		    case apply 'fix_src1'/3
			     (Base1, TempMap, Strategy) of
		      <{FixBase1,NewBase1,DidSpill2}> when 'true' ->
			  %% Line 97
			  case apply 'fix_src2'/3
				   (Base2, TempMap, Strategy) of
			    <{FixBase2,NewBase2,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 98
				    {'loadx',_cor17,NewDst,NewBase1,NewBase2}
				in  let <_cor12> =
					%% Line 99
					call 'erlang':'++'
					    (FixBase2, [_cor8|FixDst])
				    in  let <_cor13> =
					    %% Line 99
					    call 'erlang':'++'
						(FixBase1, _cor12)
					in  let <_cor10> =
						%% Line 99
						call 'erlang':'or'
						    (DidSpill1, DidSpill2)
					    in  let <_cor11> =
						    %% Line 99
						    call 'erlang':'or'
							(_cor10, DidSpill3)
						in  %% Line 99
						    {_cor13,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_loadx',3}}] )
	    -| ['compiler_generated'] )
	end
'do_mfspr'/3 =
    %% Line 101
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'mfspr',Dst,_cor11},TempMap,Strategy> when 'true' ->
	      %% Line 102
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 103
			call 'erlang':'setelement'
			    (2, I, NewDst)
		    in  %% Line 104
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_mfspr',3}}] )
	    -| ['compiler_generated'] )
	end
'do_mtcr'/3 =
    %% Line 106
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'mtcr',Src},TempMap,Strategy> when 'true' ->
	      %% Line 107
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill}> when 'true' ->
		    let <_cor6> = {%% Line 108
			 'mtcr',%% Line 108
				NewSrc}
		    in  let <_cor8> =
			    %% Line 109
			    call 'erlang':'++'
				(FixSrc, [_cor6|[]])
			in  %% Line 109
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_mtcr',3}}] )
	    -| ['compiler_generated'] )
	end
'do_mtspr'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'mtspr',_cor12,Src},TempMap,Strategy> when 'true' ->
	      %% Line 112
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 113
			call 'erlang':'setelement'
			    (3, I, NewSrc)
		    in  let <_cor8> =
			    %% Line 114
			    call 'erlang':'++'
				(FixSrc, [_cor6|[]])
			in  %% Line 114
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_mtspr',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_li'/3 =
    %% Line 116
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_li',Dst,_cor11},TempMap,Strategy> when 'true' ->
	      %% Line 117
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 118
			call 'erlang':'setelement'
			    (2, I, NewDst)
		    in  %% Line 119
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_pseudo_li',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_move'/3 =
    %% Line 121
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_move',Dst,Src},TempMap,Strategy> when 'true' ->
	      %% Line 126
	      case apply 'temp_is_spilled'/2
		       (Dst, TempMap) of
		%% Line 127
		<'true'> when 'true' ->
		    %% Line 128
		    case apply 'fix_src1'/3
			     (Src, TempMap, Strategy) of
		      <{FixSrc,NewSrc,DidSpill}> when 'true' ->
			  let <_cor6> =
			      %% Line 129
			      call 'erlang':'setelement'
				  (3, I, NewSrc)
			  in  let <_cor8> =
				  %% Line 130
				  call 'erlang':'++'
				      (FixSrc, [_cor6|[]])
			      in  %% Line 130
				  {_cor8,DidSpill}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 131
		<_cor16> when 'true' ->
		    %% Line 132
		    {[I|[]],'false'}
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_pseudo_move',3}}] )
	    -| ['compiler_generated'] )
	end
'do_store'/3 =
    %% Line 135
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'store',_cor16,Src,_cor17,Base},TempMap,Strategy> when 'true' ->
	      %% Line 136
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 137
		    case apply 'fix_src2'/3
			     (Base, TempMap, Strategy) of
		      <{FixBase,NewBase,DidSpill2}> when 'true' ->
			  let <_cor6> =
			      %% Line 138
			      call 'erlang':'setelement'
				  (5, I, NewBase)
			  in  let <_cor8> =
				  %% Line 138
				  call 'erlang':'setelement'
				      (3, _cor6, NewSrc)
			      in  let <_cor11> =
				      %% Line 139
				      call 'erlang':'++'
					  (FixBase, [_cor8|[]])
				  in  let <_cor12> =
					  %% Line 139
					  call 'erlang':'++'
					      (FixSrc, _cor11)
				      in  let <_cor10> =
					      %% Line 139
					      call 'erlang':'or'
						  (DidSpill1, DidSpill2)
					  in  %% Line 139
					      {_cor12,_cor10}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'do_store',3}}] )
	    -| ['compiler_generated'] )
	end
'do_storex'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'storex',_cor18,Src,Base1,Base2},TempMap,Strategy> when 'true' ->
	      %% Line 142
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 143
		    case apply 'fix_src2'/3
			     (Base1, TempMap, Strategy) of
		      <{FixBase1,NewBase1,DidSpill2}> when 'true' ->
			  %% Line 144
			  case apply 'fix_src3'/3
				   (Base2, TempMap, Strategy) of
			    <{FixBase2,NewBase2,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 145
				    {'storex',_cor18,NewSrc,NewBase1,NewBase2}
				in  let <_cor12> =
					%% Line 146
					call 'erlang':'++'
					    (FixBase2, [_cor8|[]])
				    in  let <_cor13> =
					    %% Line 146
					    call 'erlang':'++'
						(FixBase1, _cor12)
					in  let <_cor14> =
						%% Line 146
						call 'erlang':'++'
						    (FixSrc, _cor13)
					    in  let <_cor10> =
						    %% Line 146
						    call 'erlang':'or'
							(DidSpill1, DidSpill2)
						in  let <_cor11> =
							%% Line 146
							call 'erlang':'or'
							    (_cor10, DidSpill3)
						    in  %% Line 146
							{_cor14,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'do_storex',3}}] )
	    -| ['compiler_generated'] )
	end
'do_unary'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'unary',_cor14,Dst,Src},TempMap,Strategy> when 'true' ->
	      %% Line 149
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 150
		    case apply 'fix_src1'/3
			     (Src, TempMap, Strategy) of
		      <{FixSrc,NewSrc,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 151
			      {'unary',_cor14,NewDst,NewSrc}
			  in  let <_cor10> =
				  %% Line 152
				  call 'erlang':'++'
				      (FixSrc, [_cor7|FixDst])
			      in  let <_cor9> =
				      %% Line 152
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 152
				      {_cor10,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_unary',3}}] )
	    -| ['compiler_generated'] )
	end
'do_lfd'/3 =
    %% Line 154
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'lfd',_cor12,_cor13,Base},TempMap,Strategy> when 'true' ->
	      %% Line 155
	      case apply 'fix_src1'/3
		       (Base, TempMap, Strategy) of
		<{FixBase,NewBase,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 156
			call 'erlang':'setelement'
			    (4, I, NewBase)
		    in  let <_cor8> =
			    %% Line 157
			    call 'erlang':'++'
				(FixBase, [_cor6|[]])
			in  %% Line 157
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_lfd',3}}] )
	    -| ['compiler_generated'] )
	end
'do_lfdx'/3 =
    %% Line 159
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'lfdx',_cor15,Base1,Base2},TempMap,Strategy> when 'true' ->
	      %% Line 160
	      case apply 'fix_src1'/3
		       (Base1, TempMap, Strategy) of
		<{FixBase1,NewBase1,DidSpill1}> when 'true' ->
		    %% Line 161
		    case apply 'fix_src2'/3
			     (Base2, TempMap, Strategy) of
		      <{FixBase2,NewBase2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 162
			      {'lfdx',_cor15,NewBase1,NewBase2}
			  in  let <_cor10> =
				  %% Line 163
				  call 'erlang':'++'
				      (FixBase2, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 163
				      call 'erlang':'++'
					  (FixBase1, _cor10)
				  in  let <_cor9> =
					  %% Line 163
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 163
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_lfdx',3}}] )
	    -| ['compiler_generated'] )
	end
'do_stfd'/3 =
    %% Line 165
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'stfd',_cor12,_cor13,Base},TempMap,Strategy> when 'true' ->
	      %% Line 166
	      case apply 'fix_src1'/3
		       (Base, TempMap, Strategy) of
		<{FixBase,NewBase,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 167
			call 'erlang':'setelement'
			    (4, I, NewBase)
		    in  let <_cor8> =
			    %% Line 168
			    call 'erlang':'++'
				(FixBase, [_cor6|[]])
			in  %% Line 168
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_stfd',3}}] )
	    -| ['compiler_generated'] )
	end
'do_stfdx'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'stfdx',_cor15,Base1,Base2},TempMap,Strategy> when 'true' ->
	      %% Line 171
	      case apply 'fix_src1'/3
		       (Base1, TempMap, Strategy) of
		<{FixBase1,NewBase1,DidSpill1}> when 'true' ->
		    %% Line 172
		    case apply 'fix_src2'/3
			     (Base2, TempMap, Strategy) of
		      <{FixBase2,NewBase2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 173
			      {'stfdx',_cor15,NewBase1,NewBase2}
			  in  let <_cor10> =
				  %% Line 174
				  call 'erlang':'++'
				      (FixBase2, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 174
				      call 'erlang':'++'
					  (FixBase1, _cor10)
				  in  let <_cor9> =
					  %% Line 174
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 174
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_stfdx',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_src2_or_imm'/3 =
    %% Line 178
    fun (_cor2,_cor1,_cor0) ->
	%% Line 179
	case _cor2 of
	  %% Line 180
	  <{'ppc_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src2'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 181
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_src1'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 185
	    apply 'temp1'/1
		(_cor0)
	in  %% Line 185
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp1'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 188
	  <'fixed'> when 'true' ->
	      call 'hipe_ppc_registers':'temp1'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp1',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src2'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 191
	    apply 'temp2'/1
		(_cor0)
	in  %% Line 191
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp2'/1 =
    %% Line 193
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 194
	  <'fixed'> when 'true' ->
	      call 'hipe_ppc_registers':'temp2'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp2',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src3'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 197
	    apply 'temp3'/1
		(_cor0)
	in  %% Line 197
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp3'/1 =
    %% Line 199
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 200
	  <'fixed'> when 'true' ->
	      call 'hipe_ppc_registers':'temp3'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp3',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	%% Line 203
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 204
	  <'true'> when 'true' ->
	      let <NewSrc> =
		  %% Line 205
		  apply 'clone'/2
		      (_cor2, _cor0)
	      in  let <_cor4> =
		      %% Line 206
		      call 'hipe_ppc':'mk_pseudo_move'
			  (NewSrc, _cor2)
		  in  %% Line 206
		      {[_cor4|[]],%% Line 207
				  NewSrc,%% Line 208
					 'true'}
	  %% Line 209
	  <_cor9> when 'true' ->
	      %% Line 210
	      {[],_cor2,'false'}
	end
'fix_dst'/3 =
    %% Line 213
    fun (_cor2,_cor1,_cor0) ->
	%% Line 214
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 215
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 216
		  apply 'temp3'/1
		      (_cor0)
	      in  let <NewDst> =
		      %% Line 216
		      apply 'clone'/2
			  (_cor2, _cor3)
		  in  let <_cor5> =
			  %% Line 217
			  call 'hipe_ppc':'mk_pseudo_move'
			      (_cor2, NewDst)
		      in  %% Line 217
			  {[_cor5|[]],%% Line 218
				      NewDst,%% Line 219
					     'true'}
	  %% Line 220
	  <_cor10> when 'true' ->
	      %% Line 221
	      {[],_cor2,'false'}
	end
'temp_is_spilled'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Temp,[]> when 'true' ->
	      let <_cor2> =
		  %% Line 227
		  call 'hipe_ppc':'temp_is_precoloured'
		      (Temp)
	      in  %% Line 227
		  call 'erlang':'not'
		      (_cor2)
	  %% Line 228
	  <Temp,TempMap> when 'true' ->
	      %% Line 229
	      case call 'hipe_ppc':'temp_is_allocatable'
		       (Temp) of
		%% Line 230
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 231
			call 'hipe_ppc':'temp_reg'
			    (Temp)
		    in  let <_cor5> =
			    %% Line 232
			    call 'erlang':'tuple_size'
				(TempMap)
			in  %% Line 232
			    ( case <> of
				( <>
				      when call 'erlang':'>'
					    (_cor5,
					     Reg) ->
				      call 'hipe_temp_map':'is_spilled'
					  (Reg, TempMap)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 233
		<'false'> when 'true' ->
		    'true'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'clone'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	let <Type> =
	    %% Line 239
	    call 'hipe_ppc':'temp_type'
		(_cor1)
	in  %% Line 240
	    case _cor0 of
	      %% Line 241
	      <[]> when 'true' ->
		  call 'hipe_ppc':'mk_new_temp'
		      (Type)
	      %% Line 242
	      <Reg> when 'true' ->
		  call 'hipe_ppc':'mk_temp'
		      (Reg, Type)
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_ra_postconditions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_ra_postconditions', _cor0)
end