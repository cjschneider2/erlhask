module 'hipe_amd64_encode' ['cc'/1,
			    'ea_base'/1,
			    'ea_disp32_base'/2,
			    'ea_disp32_sib'/2,
			    'ea_disp32_sindex'/1,
			    'ea_disp8_base'/2,
			    'ea_disp8_sib'/2,
			    'ea_sib'/1,
			    'insn_encode'/3,
			    'insn_sizeof'/2,
			    'module_info'/0,
			    'module_info'/1,
			    'rm_mem'/1,
			    'rm_reg'/1,
			    'sib'/1,
			    'sib'/2,
			    'sindex'/2]
    attributes [%% Line 171
		'type' =
		    %% Line 171
		    [{{'record','sib'},[{'record_field',171,{'atom',171,'sindex_opt'}}|[{'typed_record_field',{'record_field',171,{'atom',171,'base'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'integer',[]}]]}}]],[]}]]
'cc'/1 =
    %% Line 106
    fun (_cor0) ->
	case _cor0 of
	  <'o'> when 'true' ->
	      0
	  %% Line 107
	  <'no'> when 'true' ->
	      1
	  %% Line 108
	  <'b'> when 'true' ->
	      2
	  %% Line 109
	  <'ae'> when 'true' ->
	      3
	  %% Line 110
	  <'e'> when 'true' ->
	      4
	  %% Line 111
	  <'ne'> when 'true' ->
	      5
	  %% Line 112
	  <'be'> when 'true' ->
	      6
	  %% Line 113
	  <'a'> when 'true' ->
	      7
	  %% Line 114
	  <'s'> when 'true' ->
	      8
	  %% Line 115
	  <'ns'> when 'true' ->
	      9
	  %% Line 116
	  <'pe'> when 'true' ->
	      10
	  %% Line 117
	  <'po'> when 'true' ->
	      11
	  %% Line 118
	  <'l'> when 'true' ->
	      12
	  %% Line 119
	  <'ge'> when 'true' ->
	      13
	  %% Line 120
	  <'le'> when 'true' ->
	      14
	  %% Line 121
	  <'g'> when 'true' ->
	      15
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cc',1}}] )
	    -| ['compiler_generated'] )
	end
'sindex'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Scale,Index>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Scale)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Index)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 166
		  case <> of
		    <>
			when call 'erlang':'>='
			      (Scale,
			       0) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_amd64_encode','sindex'})
		  end
		  do  %% Line 167
		      case <> of
			<>
			    when call 'erlang':'=<'
				  (Scale,
				   3) ->
			    []
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_amd64_encode','sindex'})
		      end
		      do  %% Line 168
			  case <> of
			    <>
				when call 'erlang':'=/='
				      (Index,
				       4) ->
				[]
			    <> when 'true' ->
				call 'erlang':'exit'
				    ({'hipe_amd64_encode','sindex'})
			  end
			  %% Line 169
			  {'sindex',Scale,Index}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sindex',2}}] )
	    -| ['compiler_generated'] )
	end
'sib'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <Base>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      {'sib','none',Base}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sib',1}}] )
	    -| ['compiler_generated'] )
	end
'sib'/2 =
    %% Line 173
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Base,Sindex>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      {'sib',Sindex,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sib',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_base'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Disp32,Base>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      do  %% Line 176
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_amd64_encode','ea_disp32_base'})
		  end
		  %% Line 177
		  {'ea_disp32_base',Disp32,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ea_disp32_base',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_sib'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	{'ea_disp32_sib',_cor1,_cor0}
'ea_disp8_base'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Disp8,Base>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      do  %% Line 180
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_amd64_encode','ea_disp8_base'})
		  end
		  %% Line 181
		  {'ea_disp8_base',Disp8,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ea_disp8_base',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp8_sib'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	{'ea_disp8_sib',_cor1,_cor0}
'ea_base'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <Base>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      do  %% Line 184
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_amd64_encode','ea_base'})
		  end
		  do  %% Line 185
		      case <> of
			<>
			    when call 'erlang':'=/='
				  (Base,
				   5) ->
			    []
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_amd64_encode','ea_base'})
		      end
		      %% Line 186
		      {'ea_base',Base}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ea_base',1}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_sindex'/1 =
    %% Line 187
    fun (_cor0) ->
	{'ea_disp32_sindex',_cor0,'none'}
'ea_sib'/1 =
    %% Line 189
    fun (_cor0) ->
	do  %% Line 190
	    case <> of
	      <>
		  when ( try
			  ( case <> of
			      ( <>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_record'
									     -| ['compiler_generated'] )
					    (_cor0,
					     ( 'sib'
					       -| ['compiler_generated'] ),
					     ( 3
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    let <_cor5> =
					( call 'erlang':'element'
					      (3, _cor0)
					  -| ['compiler_generated'] )
				    in  ( call 'erlang':'=/='
					      (_cor5, 5)
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  []
	      <> when 'true' ->
		  call 'erlang':'exit'
		      ({'hipe_amd64_encode','ea_sib'})
	    end
	    %% Line 191
	    {'ea_sib',_cor0}
'rm_reg'/1 =
    %% Line 194
    fun (_cor0) ->
	{'rm_reg',_cor0}
'rm_mem'/1 =
    %% Line 195
    fun (_cor0) ->
	{'rm_mem',_cor0}
'mk_modrm'/3 =
    %% Line 197
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 198
	    apply 'rex'/1
		([{'r',_cor1}|[{'b',_cor0}|[]]])
	in  let <_cor6> =
		%% Line 199
		call 'erlang':'bsl'
		    (_cor2, 6)
	    in  let <_cor4> =
		    %% Line 199
		    call 'erlang':'band'
			(_cor1, 7)
		in  let <_cor5> =
			%% Line 199
			call 'erlang':'bsl'
			    (_cor4, 3)
		    in  let <_cor7> =
			    %% Line 199
			    call 'erlang':'bor'
				(_cor6, _cor5)
			in  let <_cor3> =
				%% Line 199
				call 'erlang':'band'
				    (_cor0, 7)
			    in  let <_cor8> =
				    %% Line 199
				    call 'erlang':'bor'
					(_cor7, _cor3)
				in  %% Line 198
				    {_cor9,_cor8}
'mk_sib'/3 =
    %% Line 201
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 202
	    apply 'rex'/1
		([{'x',_cor1}|[{'b',_cor0}|[]]])
	in  let <_cor6> =
		%% Line 203
		call 'erlang':'bsl'
		    (_cor2, 6)
	    in  let <_cor4> =
		    %% Line 203
		    call 'erlang':'band'
			(_cor1, 7)
		in  let <_cor5> =
			%% Line 203
			call 'erlang':'bsl'
			    (_cor4, 3)
		    in  let <_cor7> =
			    %% Line 203
			    call 'erlang':'bor'
				(_cor6, _cor5)
			in  let <_cor3> =
				%% Line 203
				call 'erlang':'band'
				    (_cor0, 7)
			    in  let <_cor8> =
				    %% Line 203
				    call 'erlang':'bor'
					(_cor7, _cor3)
				in  %% Line 202
				    {_cor9,_cor8}
'rex'/1 =
    %% Line 205
    fun (_cor0) ->
	let <_cor1> =
	    apply 'rex_'/1
		(_cor0)
	in  {'rex',_cor1}
'rex_'/1 =
    %% Line 206
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      0
	  %% Line 207
	  <[{'r8',Reg8}|Rest]> when 'true' ->
	      %% Line 208
	      case Reg8 of
		%% Line 209
		<{'rm_mem',_cor24}> when 'true' ->
		    apply 'rex_'/1
			(Rest)
		%% Line 210
		<4> when 'true' ->
		    let <_cor1> =
			apply 'rex_'/1
			    (Rest)
		    in  call 'erlang':'bor'
			    (256, _cor1)
		%% Line 211
		<5> when 'true' ->
		    let <_cor3> =
			apply 'rex_'/1
			    (Rest)
		    in  call 'erlang':'bor'
			    (256, _cor3)
		%% Line 212
		<6> when 'true' ->
		    let <_cor5> =
			apply 'rex_'/1
			    (Rest)
		    in  call 'erlang':'bor'
			    (256, _cor5)
		%% Line 213
		<7> when 'true' ->
		    let <_cor7> =
			apply 'rex_'/1
			    (Rest)
		    in  call 'erlang':'bor'
			    (256, _cor7)
		%% Line 214
		<X>
		    when call 'erlang':'is_integer'
			  (Reg8) ->
		    apply 'rex_'/1
			(Rest)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 216
	  <[{'w',REXW}|Rest]> when 'true' ->
	      let <_cor11> =
		  %% Line 217
		  call 'erlang':'bsl'
		      (REXW, 3)
	      in  let <_cor10> =
		      %% Line 217
		      apply 'rex_'/1
			  (Rest)
		  in  %% Line 217
		      call 'erlang':'bor'
			  (_cor11, _cor10)
	  %% Line 218
	  <[{'r',ModRM_regRegister}|Rest]>
	      when call 'erlang':'is_integer'
		    (ModRM_regRegister) ->
	      let <_cor12> =
		  %% Line 219
		  case <> of
		    <>
			when call 'erlang':'>'
			      (ModRM_regRegister,
			       7) ->
			1
		    %% Line 220
		    <> when 'true' ->
			0
		  end
	      in  let <_cor15> =
		      %% Line 222
		      call 'erlang':'bsl'
			  (_cor12, 2)
		  in  let <_cor14> =
			  %% Line 222
			  apply 'rex_'/1
			      (Rest)
		      in  %% Line 222
			  call 'erlang':'bor'
			      (_cor15, _cor14)
	  %% Line 223
	  <[{'x',SIB_indexRegister}|Rest]>
	      when call 'erlang':'is_integer'
		    (SIB_indexRegister) ->
	      let <_cor16> =
		  %% Line 224
		  case <> of
		    <>
			when call 'erlang':'>'
			      (SIB_indexRegister,
			       7) ->
			1
		    %% Line 225
		    <> when 'true' ->
			0
		  end
	      in  let <_cor19> =
		      %% Line 227
		      call 'erlang':'bsl'
			  (_cor16, 1)
		  in  let <_cor18> =
			  %% Line 227
			  apply 'rex_'/1
			      (Rest)
		      in  %% Line 227
			  call 'erlang':'bor'
			      (_cor19, _cor18)
	  %% Line 228
	  <[{'b',OtherRegister}|Rest]>
	      when call 'erlang':'is_integer'
		    (OtherRegister) ->
	      let <_cor20> =
		  %% Line 230
		  case <> of
		    <>
			when call 'erlang':'>'
			      (OtherRegister,
			       7) ->
			1
		    %% Line 231
		    <> when 'true' ->
			0
		  end
	      in  let <_cor22> =
		      %% Line 233
		      apply 'rex_'/1
			  (Rest)
		  in  %% Line 233
		      call 'erlang':'bor'
			  (_cor20, _cor22)
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'rex_',1}}] )
	    -| ['compiler_generated'] )
	end
'le16'/2 =
    %% Line 235
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 236
	    call 'erlang':'band'
		(_cor1, 255)
	in  let <_cor3> =
		%% Line 236
		call 'erlang':'bsr'
		    (_cor1, 8)
	    in  let <_cor4> =
		    %% Line 236
		    call 'erlang':'band'
			(_cor3, 255)
		in  %% Line 236
		    [_cor2|[_cor4|_cor0]]
'le32'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Word,Tail>
	      when call 'erlang':'is_integer'
		    (Word) ->
	      let <_cor2> =
		  %% Line 239
		  call 'erlang':'band'
		      (Word, 255)
	      in  let <_cor3> =
		      %% Line 239
		      call 'erlang':'bsr'
			  (Word, 8)
		  in  let <_cor4> =
			  %% Line 239
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  let <_cor5> =
			      %% Line 240
			      call 'erlang':'bsr'
				  (Word, 16)
			  in  let <_cor6> =
				  %% Line 240
				  call 'erlang':'band'
				      (_cor5, 255)
			      in  let <_cor7> =
				      %% Line 240
				      call 'erlang':'bsr'
					  (Word, 24)
				  in  let <_cor8> =
					  %% Line 240
					  call 'erlang':'band'
					      (_cor7, 255)
				      in  %% Line 239
					  [_cor2|[_cor4|%% Line 240
							[_cor6|[_cor8|Tail]]]]
	  %% Line 241
	  <{Tag,Val},Tail> when 'true' ->
	      %% Line 242
	      [{'le32',Tag,Val}|Tail]
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'le32',2}}] )
	    -| ['compiler_generated'] )
	end
'le64'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Word,Tail>
	      when call 'erlang':'is_integer'
		    (Word) ->
	      let <_cor2> =
		  %% Line 245
		  call 'erlang':'band'
		      (Word, 255)
	      in  let <_cor3> =
		      %% Line 245
		      call 'erlang':'bsr'
			  (Word, 8)
		  in  let <_cor4> =
			  %% Line 245
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  let <_cor5> =
			      %% Line 246
			      call 'erlang':'bsr'
				  (Word, 16)
			  in  let <_cor6> =
				  %% Line 246
				  call 'erlang':'band'
				      (_cor5, 255)
			      in  let <_cor7> =
				      %% Line 246
				      call 'erlang':'bsr'
					  (Word, 24)
				  in  let <_cor8> =
					  %% Line 246
					  call 'erlang':'band'
					      (_cor7, 255)
				      in  let <_cor9> =
					      %% Line 247
					      call 'erlang':'bsr'
						  (Word, 32)
					  in  let <_cor10> =
						  %% Line 247
						  call 'erlang':'band'
						      (_cor9, 255)
					      in  let <_cor11> =
						      %% Line 247
						      call 'erlang':'bsr'
							  (Word, 40)
						  in  let <_cor12> =
							  %% Line 247
							  call 'erlang':'band'
							      (_cor11, 255)
						      in  let <_cor13> =
							      %% Line 248
							      call 'erlang':'bsr'
								  (Word, 48)
							  in  let <_cor14> =
								  %% Line 248
								  call 'erlang':'band'
								      (_cor13, 255)
							      in  let <_cor15> =
								      %% Line 248
								      call 'erlang':'bsr'
									  (Word, 56)
								  in  let <_cor16> =
									  %% Line 248
									  call 'erlang':'band'
									      (_cor15, 255)
								      in  %% Line 245
									  [_cor2|[_cor4|%% Line 246
											[_cor6|[_cor8|%% Line 247
												      [_cor10|[_cor12|%% Line 248
														      [_cor14|[_cor16|Tail]]]]]]]]
	  %% Line 249
	  <{Tag,Val},Tail> when 'true' ->
	      %% Line 250
	      [{'le64',Tag,Val}|Tail]
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'le64',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_sindex_opt'/1 =
    %% Line 252
    fun (_cor0) ->
	case _cor0 of
	  <{'sindex',Scale,Index}> when 'true' ->
	      {Scale,Index}
	  %% Line 253
	  <'none'> when 'true' ->
	      {0,4}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enc_sindex_opt',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_sib'/1 =
    %% Line 255
    fun (_cor0) ->
	case _cor0 of
	  <{'sib',SindexOpt,Base}> when 'true' ->
	      %% Line 256
	      case apply 'enc_sindex_opt'/1
		       (SindexOpt) of
		<{Scale,Index}> when 'true' ->
		    %% Line 257
		    apply 'mk_sib'/3
			(Scale, Index, Base)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enc_sib',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_ea'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	%% Line 260
	case _cor2 of
	  %% Line 261
	  <{'ea_disp32_base',Disp32,Base}> when 'true' ->
	      let <_cor3> =
		  %% Line 262
		  apply 'mk_modrm'/3
		      (2, _cor1, Base)
	      in  let <_cor4> =
		      %% Line 262
		      apply 'le32'/2
			  (Disp32, _cor0)
		  in  %% Line 262
		      [_cor3|_cor4]
	  %% Line 263
	  <{'ea_disp32_sib',Disp32,SIB}> when 'true' ->
	      let <_cor5> =
		  %% Line 264
		  apply 'mk_modrm'/3
		      (2, _cor1, 4)
	      in  let <_cor6> =
		      %% Line 264
		      apply 'enc_sib'/1
			  (SIB)
		  in  let <_cor7> =
			  %% Line 264
			  apply 'le32'/2
			      (Disp32, _cor0)
		      in  %% Line 264
			  [_cor5|[_cor6|_cor7]]
	  %% Line 265
	  <{'ea_disp8_base',Disp8,Base}> when 'true' ->
	      let <_cor8> =
		  %% Line 266
		  apply 'mk_modrm'/3
		      (1, _cor1, Base)
	      in  %% Line 266
		  [_cor8|[Disp8|_cor0]]
	  %% Line 267
	  <{'ea_disp8_sib',Disp8,SIB}> when 'true' ->
	      let <_cor9> =
		  %% Line 268
		  apply 'mk_modrm'/3
		      (1, _cor1, 4)
	      in  let <_cor10> =
		      %% Line 268
		      apply 'enc_sib'/1
			  (SIB)
		  in  %% Line 268
		      [_cor9|[_cor10|[Disp8|_cor0]]]
	  %% Line 269
	  <{'ea_base',Base}> when 'true' ->
	      let <_cor11> =
		  %% Line 270
		  apply 'mk_modrm'/3
		      (0, _cor1, Base)
	      in  %% Line 270
		  [_cor11|_cor0]
	  %% Line 271
	  <{'ea_disp32_sindex',Disp32,SindexOpt}> when 'true' ->
	      %% Line 272
	      case apply 'enc_sindex_opt'/1
		       (SindexOpt) of
		<{Scale,Index}> when 'true' ->
		    let <SIB> =
			%% Line 273
			apply 'mk_sib'/3
			    (Scale, Index, 5)
		    in  let <MODRM> =
			    %% Line 274
			    apply 'mk_modrm'/3
				(0, _cor1, 4)
			in  let <_cor15> =
				%% Line 275
				apply 'le32'/2
				    (Disp32, _cor0)
			    in  %% Line 275
				[MODRM|[SIB|_cor15]]
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 276
	  <{'ea_sib',SIB}> when 'true' ->
	      let <_cor16> =
		  %% Line 277
		  apply 'mk_modrm'/3
		      (0, _cor1, 4)
	      in  let <_cor17> =
		      %% Line 277
		      apply 'enc_sib'/1
			  (SIB)
		  in  %% Line 277
		      [_cor16|[_cor17|_cor0]]
	  %% Line 278
	  <{'ea_disp32_rip',Disp32}> when 'true' ->
	      let <_cor18> =
		  %% Line 279
		  apply 'mk_modrm'/3
		      (0, _cor1, 5)
	      in  let <_cor19> =
		      %% Line 279
		      apply 'le32'/2
			  (Disp32, _cor0)
		  in  %% Line 279
		      [_cor18|_cor19]
	  ( <_cor20> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor20})
	    -| ['compiler_generated'] )
	end
'encode_rm'/3 =
    %% Line 282
    fun (_cor2,_cor1,_cor0) ->
	%% Line 283
	case _cor2 of
	  %% Line 284
	  <{'rm_reg',Reg}> when 'true' ->
	      let <_cor3> =
		  apply 'mk_modrm'/3
		      (3, _cor1, Reg)
	      in  [_cor3|_cor0]
	  %% Line 285
	  <{'rm_mem',EA}> when 'true' ->
	      apply 'enc_ea'/3
		  (EA, _cor1, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'st'/1 =
    %% Line 317
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      0
	  %% Line 318
	  <1> when 'true' ->
	      1
	  %% Line 319
	  <2> when 'true' ->
	      2
	  %% Line 320
	  <3> when 'true' ->
	      3
	  %% Line 321
	  <4> when 'true' ->
	      4
	  %% Line 322
	  <5> when 'true' ->
	      5
	  %% Line 323
	  <6> when 'true' ->
	      6
	  %% Line 324
	  <7> when 'true' ->
	      7
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'st',1}}] )
	    -| ['compiler_generated'] )
	end
'arith_binop_encode'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	%% Line 344
	case _cor0 of
	  %% Line 345
	  <{'eax',{'imm32',Imm32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 346
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor3> =
		      %% Line 346
		      call 'erlang':'bor'
			  (5, _cor2)
		  in  let <_cor4> =
			  %% Line 346
			  apply 'le32'/2
			      (Imm32, [])
		      in  %% Line 346
			  [_cor3|_cor4]
	  %% Line 347
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor5> =
		  %% Line 348
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor6> =
		      %% Line 348
		      apply 'encode_rm'/3
			  (RM32, _cor1, _cor5)
		  in  %% Line 348
		      [129|_cor6]
	  %% Line 349
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor7> =
		  %% Line 350
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 350
		  [131|_cor7]
	  %% Line 351
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor8> =
		  %% Line 352
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor9> =
		      %% Line 352
		      call 'erlang':'bor'
			  (1, _cor8)
		  in  let <_cor10> =
			  %% Line 352
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 352
			  [_cor9|_cor10]
	  %% Line 353
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor11> =
		  %% Line 354
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor12> =
		      %% Line 354
		      call 'erlang':'bor'
			  (3, _cor11)
		  in  let <_cor13> =
			  %% Line 354
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 354
			  [_cor12|_cor13]
	  %% Line 356
	  <{'rax',{'imm32',Imm32}}> when 'true' ->
	      let <_cor14> =
		  %% Line 357
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor15> =
		      %% Line 357
		      call 'erlang':'bsl'
			  (_cor1, 3)
		  in  let <_cor16> =
			  %% Line 357
			  call 'erlang':'bor'
			      (5, _cor15)
		      in  let <_cor17> =
			      %% Line 357
			      apply 'le32'/2
				  (Imm32, [])
			  in  %% Line 357
			      [_cor14|[_cor16|_cor17]]
	  %% Line 358
	  <{{'rm64',RM64},{'imm32',Imm32}}> when 'true' ->
	      let <_cor18> =
		  %% Line 359
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor19> =
		      %% Line 360
		      apply 'le32'/2
			  (Imm32, [])
		  in  let <_cor20> =
			  %% Line 360
			  apply 'encode_rm'/3
			      (RM64, _cor1, _cor19)
		      in  %% Line 359
			  [_cor18|[129|_cor20]]
	  %% Line 361
	  <{{'rm64',RM64},{'imm8',Imm8}}> when 'true' ->
	      let <_cor21> =
		  %% Line 362
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor22> =
		      %% Line 362
		      apply 'encode_rm'/3
			  (RM64, _cor1, [Imm8|[]])
		  in  %% Line 362
		      [_cor21|[131|_cor22]]
	  %% Line 363
	  <{{'rm64',RM64},{'reg64',Reg64}}> when 'true' ->
	      let <_cor23> =
		  %% Line 364
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor24> =
		      %% Line 364
		      call 'erlang':'bsl'
			  (_cor1, 3)
		  in  let <_cor25> =
			  %% Line 364
			  call 'erlang':'bor'
			      (1, _cor24)
		      in  let <_cor26> =
			      %% Line 365
			      apply 'encode_rm'/3
				  (RM64, Reg64, [])
			  in  %% Line 364
			      [_cor23|[_cor25|_cor26]]
	  %% Line 366
	  <{{'reg64',Reg64},{'rm64',RM64}}> when 'true' ->
	      let <_cor27> =
		  %% Line 367
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor28> =
		      %% Line 367
		      call 'erlang':'bsl'
			  (_cor1, 3)
		  in  let <_cor29> =
			  %% Line 367
			  call 'erlang':'bor'
			      (3, _cor28)
		      in  let <_cor30> =
			      %% Line 368
			      apply 'encode_rm'/3
				  (RM64, Reg64, [])
			  in  %% Line 367
			      [_cor27|[_cor29|_cor30]]
	  ( <_cor31> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor31})
	    -| ['compiler_generated'] )
	end
'sse2_arith_binop_encode'/3 =
    %% Line 371
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Prefix,Opcode,{{'xmm',XMM64},{'rm64fp',RM64}}> when 'true' ->
	      let <_cor3> =
		  %% Line 373
		  apply 'encode_rm'/3
		      (RM64, XMM64, [])
	      in  %% Line 373
		  [Prefix|[15|[Opcode|_cor3]]]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'sse2_arith_binop_encode',3}}] )
	    -| ['compiler_generated'] )
	end
'sse2_cvtsi2sd_encode'/1 =
    %% Line 375
    fun (_cor0) ->
	case _cor0 of
	  <{{'xmm',XMM64},{'rm64',RM64}}> when 'true' ->
	      let <_cor1> =
		  %% Line 376
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor2> =
		      %% Line 376
		      apply 'encode_rm'/3
			  (RM64, XMM64, [])
		  in  %% Line 376
		      [_cor1|[242|[15|[42|_cor2]]]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sse2_cvtsi2sd_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'sse2_mov_encode'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	case _cor0 of
	  %% Line 380
	  <{{'xmm',XMM64},{'rm64fp',RM64}}> when 'true' ->
	      let <_cor1> =
		  %% Line 381
		  apply 'encode_rm'/3
		      (RM64, XMM64, [])
	      in  %% Line 381
		  [242|[15|[16|_cor1]]]
	  %% Line 382
	  <{{'rm64fp',RM64},{'xmm',XMM64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 383
		  apply 'encode_rm'/3
		      (RM64, XMM64, [])
	      in  %% Line 383
		  [242|[15|[17|_cor2]]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'bs_op_encode'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 404
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 404
		  [15|[Opcode|_cor2]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'bs_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'bswap_encode'/1 =
    %% Line 409
    fun (_cor0) ->
	%% Line 410
	case _cor0 of
	  %% Line 411
	  <{{'reg32',Reg32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 412
		  apply 'rex'/1
		      ([{'b',Reg32}|[]])
	      in  let <_cor2> =
		      %% Line 412
		      call 'erlang':'band'
			  (Reg32, 7)
		  in  let <_cor3> =
			  %% Line 412
			  call 'erlang':'bor'
			      (200, _cor2)
		      in  %% Line 412
			  [_cor1|[15|[_cor3|[]]]]
	  %% Line 413
	  <{{'reg64',Reg64}}> when 'true' ->
	      let <_cor4> =
		  %% Line 414
		  apply 'rex'/1
		      ([{'w',1}|[{'b',Reg64}|[]]])
	      in  let <_cor5> =
		      %% Line 414
		      call 'erlang':'band'
			  (Reg64, 7)
		  in  let <_cor6> =
			  %% Line 414
			  call 'erlang':'bor'
			      (200, _cor5)
		      in  %% Line 414
			  [_cor4|[15|[_cor6|[]]]]
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'bt_op_encode'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	%% Line 421
	case _cor0 of
	  %% Line 422
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 423
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor3> =
		      %% Line 423
		      call 'erlang':'bor'
			  (163, _cor2)
		  in  let <_cor4> =
			  %% Line 423
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 423
			  [15|[_cor3|_cor4]]
	  %% Line 424
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor5> =
		  %% Line 425
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 425
		  [15|[186|_cor5]]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'call_encode'/1 =
    %% Line 436
    fun (_cor0) ->
	%% Line 437
	case _cor0 of
	  %% Line 438
	  <{{'rel32',Rel32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 439
		  apply 'le32'/2
		      (Rel32, [])
	      in  %% Line 439
		  [232|_cor1]
	  %% Line 442
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 443
		  apply 'encode_rm'/3
		      (RM64, 2, [])
	      in  %% Line 443
		  [255|_cor2]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'cbw_encode'/1 =
    %% Line 454
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 455
	      [102|[152]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cbw_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'cbw_sizeof'/1 =
    %% Line 457
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 458
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cbw_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'nullary_op_encode'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{}> when 'true' ->
	      %% Line 462
	      [Opcode|[]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'nullary_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'nullary_op_sizeof'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 466
	      1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nullary_op_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'cmovcc_encode'/1 =
    %% Line 468
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',CC},{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 469
		  call 'erlang':'bor'
		      (64, CC)
	      in  let <_cor2> =
		      %% Line 469
		      apply 'encode_rm'/3
			  (RM32, Reg32, [])
		  in  %% Line 469
		      [15|[_cor1|_cor2]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'cmovcc_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'incdec_encode'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	%% Line 475
	case _cor0 of
	  %% Line 476
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 477
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 477
		  [255|_cor2]
	  %% Line 478
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor3> =
		  %% Line 479
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor4> =
		      %% Line 479
		      apply 'encode_rm'/3
			  (RM64, _cor1, [])
		  in  %% Line 479
		      [_cor3|[255|_cor4]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'arith_unop_encode'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	%% Line 491
	case _cor0 of
	  %% Line 492
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 493
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 493
		  [247|_cor2]
	  %% Line 494
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor3> =
		  %% Line 495
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor4> =
		      %% Line 495
		      apply 'encode_rm'/3
			  (RM64, _cor1, [])
		  in  %% Line 495
		      [_cor3|[247|_cor4]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'enter_encode'/1 =
    %% Line 501
    fun (_cor0) ->
	case _cor0 of
	  <{{'imm16',Imm16},{'imm8',Imm8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 502
		  apply 'le16'/2
		      (Imm16, [Imm8|[]])
	      in  %% Line 502
		  [200|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enter_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'enter_sizeof'/1 =
    %% Line 504
    fun (_cor0) ->
	case _cor0 of
	  <{{'imm16',_cor3},{'imm8',_cor4}}> when 'true' ->
	      4
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enter_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'imul_encode'/1 =
    %% Line 507
    fun (_cor0) ->
	%% Line 508
	case _cor0 of
	  %% Line 509
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 510
		  apply 'encode_rm'/3
		      (RM32, 5, [])
	      in  %% Line 510
		  [247|_cor1]
	  %% Line 511
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 512
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor3> =
		      %% Line 512
		      apply 'encode_rm'/3
			  (RM64, 5, [])
		  in  %% Line 512
		      [_cor2|[247|_cor3]]
	  %% Line 513
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor4> =
		  %% Line 514
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 514
		  [15|[175|_cor4]]
	  %% Line 515
	  <{{'reg64',Reg64},{'rm64',RM64}}> when 'true' ->
	      let <_cor5> =
		  %% Line 516
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor6> =
		      %% Line 516
		      apply 'encode_rm'/3
			  (RM64, Reg64, [])
		  in  %% Line 516
		      [_cor5|[15|[175|_cor6]]]
	  %% Line 517
	  <{{'reg32',Reg32},{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor7> =
		  %% Line 518
		  apply 'encode_rm'/3
		      (RM32, Reg32, [Imm8|[]])
	      in  %% Line 518
		  [107|_cor7]
	  %% Line 519
	  <{{'reg64',Reg64},{'rm64',RM64},{'imm8',Imm8}}> when 'true' ->
	      let <_cor8> =
		  %% Line 520
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor9> =
		      %% Line 520
		      apply 'encode_rm'/3
			  (RM64, Reg64, [Imm8|[]])
		  in  %% Line 520
		      [_cor8|[107|_cor9]]
	  %% Line 521
	  <{{'reg32',Reg32},{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor10> =
		  %% Line 522
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor11> =
		      %% Line 522
		      apply 'encode_rm'/3
			  (RM32, Reg32, _cor10)
		  in  %% Line 522
		      [105|_cor11]
	  %% Line 523
	  <{{'reg64',Reg64},{'rm64',RM64},{'imm32',Imm32}}> when 'true' ->
	      let <_cor12> =
		  %% Line 524
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor13> =
		      %% Line 524
		      apply 'le32'/2
			  (Imm32, [])
		  in  let <_cor14> =
			  %% Line 524
			  apply 'encode_rm'/3
			      (RM64, Reg64, _cor13)
		      in  %% Line 524
			  [_cor12|[105|_cor14]]
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'jcc_encode'/1 =
    %% Line 539
    fun (_cor0) ->
	%% Line 540
	case _cor0 of
	  %% Line 541
	  <{{'cc',CC},{'rel8',Rel8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 542
		  call 'erlang':'bor'
		      (112, CC)
	      in  %% Line 542
		  [_cor1|[Rel8|[]]]
	  %% Line 543
	  <{{'cc',CC},{'rel32',Rel32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 544
		  call 'erlang':'bor'
		      (128, CC)
	      in  let <_cor3> =
		      %% Line 544
		      apply 'le32'/2
			  (Rel32, [])
		  in  %% Line 544
		      [15|[_cor2|_cor3]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'jcc_sizeof'/1 =
    %% Line 547
    fun (_cor0) ->
	%% Line 548
	case _cor0 of
	  %% Line 549
	  <{{'cc',_cor3},{'rel8',_cor4}}> when 'true' ->
	      %% Line 550
	      2
	  %% Line 551
	  <{{'cc',_cor5},{'rel32',_cor6}}> when 'true' ->
	      6
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'jmp8_op_encode'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{{'rel8',Rel8}}> when 'true' ->
	      %% Line 556
	      [Opcode|[Rel8|[]]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'jmp8_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'jmp8_op_sizeof'/1 =
    %% Line 558
    fun (_cor0) ->
	case _cor0 of
	  <{{'rel8',_cor2}}> when 'true' ->
	      %% Line 559
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'jmp8_op_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'jmp_encode'/1 =
    %% Line 561
    fun (_cor0) ->
	%% Line 562
	case _cor0 of
	  %% Line 563
	  <{{'rel8',Rel8}}> when 'true' ->
	      %% Line 564
	      [235|[Rel8|[]]]
	  %% Line 565
	  <{{'rel32',Rel32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 566
		  apply 'le32'/2
		      (Rel32, [])
	      in  %% Line 566
		  [233|_cor1]
	  %% Line 569
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 570
		  apply 'encode_rm'/3
		      (RM64, 4, [])
	      in  %% Line 570
		  [255|_cor2]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'lea_encode'/1 =
    %% Line 583
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',Reg32},{'ea',EA}}> when 'true' ->
	      let <_cor1> =
		  %% Line 584
		  apply 'enc_ea'/3
		      (EA, Reg32, [])
	      in  %% Line 584
		  [141|_cor1]
	  %% Line 585
	  <{{'reg64',Reg64},{'ea',EA}}> when 'true' ->
	      let <_cor2> =
		  %% Line 586
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor3> =
		      %% Line 586
		      apply 'enc_ea'/3
			  (EA, Reg64, [])
		  in  %% Line 586
		      [_cor2|[141|_cor3]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'lea_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'mov_encode'/1 =
    %% Line 591
    fun (_cor0) ->
	%% Line 592
	case _cor0 of
	  %% Line 593
	  <{{'rm8',RM8},{'reg8',Reg8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 594
		  apply 'rex'/1
		      ([{'r8',RM8}|[{'r8',Reg8}|[]]])
	      in  let <_cor2> =
		      %% Line 594
		      apply 'encode_rm'/3
			  (RM8, Reg8, [])
		  in  %% Line 594
		      [_cor1|[136|_cor2]]
	  %% Line 595
	  <{{'rm16',RM16},{'reg16',Reg16}}> when 'true' ->
	      let <_cor3> =
		  %% Line 596
		  apply 'encode_rm'/3
		      (RM16, Reg16, [])
	      in  %% Line 596
		  [102|[137|_cor3]]
	  %% Line 597
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor4> =
		  %% Line 598
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 598
		  [137|_cor4]
	  %% Line 599
	  <{{'rm64',RM64},{'reg64',Reg64}}> when 'true' ->
	      let <_cor5> =
		  %% Line 600
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor6> =
		      %% Line 600
		      apply 'encode_rm'/3
			  (RM64, Reg64, [])
		  in  %% Line 600
		      [_cor5|[137|_cor6]]
	  %% Line 601
	  <{{'reg8',Reg8},{'rm8',RM8}}> when 'true' ->
	      let <_cor7> =
		  %% Line 602
		  apply 'rex'/1
		      ([{'r8',RM8}|[{'r8',Reg8}|[]]])
	      in  let <_cor8> =
		      %% Line 603
		      apply 'encode_rm'/3
			  (RM8, Reg8, [])
		  in  %% Line 602
		      [_cor7|[138|_cor8]]
	  %% Line 604
	  <{{'reg16',Reg16},{'rm16',RM16}}> when 'true' ->
	      let <_cor9> =
		  %% Line 605
		  apply 'encode_rm'/3
		      (RM16, Reg16, [])
	      in  %% Line 605
		  [102|[139|_cor9]]
	  %% Line 606
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor10> =
		  %% Line 607
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 607
		  [139|_cor10]
	  %% Line 608
	  <{{'reg64',Reg64},{'rm64',RM64}}> when 'true' ->
	      let <_cor11> =
		  %% Line 609
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor12> =
		      %% Line 609
		      apply 'encode_rm'/3
			  (RM64, Reg64, [])
		  in  %% Line 609
		      [_cor11|[139|_cor12]]
	  %% Line 610
	  <{'al',{'moffs8',Moffs8}}> when 'true' ->
	      let <_cor13> =
		  %% Line 611
		  apply 'le32'/2
		      (Moffs8, [])
	      in  %% Line 611
		  [160|_cor13]
	  %% Line 612
	  <{'ax',{'moffs16',Moffs16}}> when 'true' ->
	      let <_cor14> =
		  %% Line 613
		  apply 'le32'/2
		      (Moffs16, [])
	      in  %% Line 613
		  [102|[161|_cor14]]
	  %% Line 614
	  <{'eax',{'moffs32',Moffs32}}> when 'true' ->
	      let <_cor15> =
		  %% Line 615
		  apply 'le32'/2
		      (Moffs32, [])
	      in  %% Line 615
		  [161|_cor15]
	  %% Line 616
	  <{'rax',{'moffs32',Moffs32}}> when 'true' ->
	      let <_cor16> =
		  %% Line 617
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor17> =
		      %% Line 617
		      apply 'le32'/2
			  (Moffs32, [])
		  in  %% Line 617
		      [_cor16|[161|_cor17]]
	  %% Line 618
	  <{{'moffs8',Moffs8},'al'}> when 'true' ->
	      let <_cor18> =
		  %% Line 619
		  apply 'le32'/2
		      (Moffs8, [])
	      in  %% Line 619
		  [162|_cor18]
	  %% Line 620
	  <{{'moffs16',Moffs16},'ax'}> when 'true' ->
	      let <_cor19> =
		  %% Line 621
		  apply 'le32'/2
		      (Moffs16, [])
	      in  %% Line 621
		  [102|[163|_cor19]]
	  %% Line 622
	  <{{'moffs32',Moffs32},'eax'}> when 'true' ->
	      let <_cor20> =
		  %% Line 623
		  apply 'le32'/2
		      (Moffs32, [])
	      in  %% Line 623
		  [163|_cor20]
	  %% Line 624
	  <{{'moffs32',Moffs32},'rax'}> when 'true' ->
	      let <_cor21> =
		  %% Line 625
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor22> =
		      %% Line 625
		      apply 'le32'/2
			  (Moffs32, [])
		  in  %% Line 625
		      [_cor21|[163|_cor22]]
	  %% Line 626
	  <{{'reg8',Reg8},{'imm8',Imm8}}> when 'true' ->
	      let <_cor23> =
		  %% Line 627
		  apply 'rex'/1
		      ([{'b',Reg8}|[{'r8',Reg8}|[]]])
	      in  let <_cor24> =
		      %% Line 627
		      call 'erlang':'band'
			  (Reg8, 7)
		  in  let <_cor25> =
			  %% Line 627
			  call 'erlang':'bor'
			      (176, _cor24)
		      in  %% Line 627
			  [_cor23|[_cor25|[Imm8|[]]]]
	  %% Line 628
	  <{{'reg16',Reg16},{'imm16',Imm16}}> when 'true' ->
	      let <_cor26> =
		  %% Line 629
		  apply 'rex'/1
		      ([{'b',Reg16}|[]])
	      in  let <_cor27> =
		      %% Line 629
		      call 'erlang':'band'
			  (Reg16, 7)
		  in  let <_cor28> =
			  %% Line 629
			  call 'erlang':'bor'
			      (184, _cor27)
		      in  let <_cor29> =
			      %% Line 630
			      apply 'le16'/2
				  (Imm16, [])
			  in  %% Line 629
			      [102|[_cor26|[_cor28|_cor29]]]
	  %% Line 631
	  <{{'reg32',Reg32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor30> =
		  %% Line 632
		  apply 'rex'/1
		      ([{'b',Reg32}|[]])
	      in  let <_cor31> =
		      %% Line 632
		      call 'erlang':'band'
			  (Reg32, 7)
		  in  let <_cor32> =
			  %% Line 632
			  call 'erlang':'bor'
			      (184, _cor31)
		      in  let <_cor33> =
			      %% Line 633
			      apply 'le32'/2
				  (Imm32, [])
			  in  %% Line 632
			      [_cor30|[_cor32|_cor33]]
	  %% Line 634
	  <{{'reg64',Reg64},{'imm64',Imm64}}> when 'true' ->
	      let <_cor34> =
		  %% Line 635
		  apply 'rex'/1
		      ([{'w',1}|[{'b',Reg64}|[]]])
	      in  let <_cor35> =
		      %% Line 635
		      call 'erlang':'band'
			  (Reg64, 7)
		  in  let <_cor36> =
			  %% Line 635
			  call 'erlang':'bor'
			      (184, _cor35)
		      in  let <_cor37> =
			      %% Line 636
			      apply 'le64'/2
				  (Imm64, [])
			  in  %% Line 635
			      [_cor34|[_cor36|_cor37]]
	  %% Line 637
	  <{{'rm8',RM8},{'imm8',Imm8}}> when 'true' ->
	      let <_cor38> =
		  %% Line 638
		  apply 'rex'/1
		      ([{'r8',RM8}|[]])
	      in  let <_cor39> =
		      %% Line 638
		      apply 'encode_rm'/3
			  (RM8, 0, [Imm8|[]])
		  in  %% Line 638
		      [_cor38|[198|_cor39]]
	  %% Line 639
	  <{{'rm16',RM16},{'imm16',Imm16}}> when 'true' ->
	      let <_cor40> =
		  %% Line 641
		  apply 'le16'/2
		      (Imm16, [])
	      in  let <_cor41> =
		      %% Line 641
		      apply 'encode_rm'/3
			  (RM16, 0, _cor40)
		  in  %% Line 640
		      [102|[199|_cor41]]
	  %% Line 642
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor42> =
		  %% Line 643
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor43> =
		      %% Line 643
		      apply 'encode_rm'/3
			  (RM32, 0, _cor42)
		  in  %% Line 643
		      [199|_cor43]
	  %% Line 644
	  <{{'rm64',RM64},{'imm32',Imm32}}> when 'true' ->
	      let <_cor44> =
		  %% Line 645
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor45> =
		      %% Line 645
		      apply 'le32'/2
			  (Imm32, [])
		  in  let <_cor46> =
			  %% Line 645
			  apply 'encode_rm'/3
			      (RM64, 0, _cor45)
		      in  %% Line 645
			  [_cor44|[199|_cor46]]
	  ( <_cor47> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor47})
	    -| ['compiler_generated'] )
	end
'movx_op_encode'/2 =
    %% Line 688
    fun (_cor1,_cor0) ->
	%% Line 689
	case _cor0 of
	  %% Line 690
	  <{{'reg16',Reg16},{'rm8',RM8}}> when 'true' ->
	      let <_cor2> =
		  %% Line 691
		  apply 'rex'/1
		      ([{'r8',RM8}|[]])
	      in  let <_cor3> =
		      %% Line 692
		      apply 'encode_rm'/3
			  (RM8, Reg16, [])
		  in  %% Line 691
		      [102|[_cor2|[15|[_cor1|_cor3]]]]
	  %% Line 693
	  <{{'reg32',Reg32},{'rm8',RM8}}> when 'true' ->
	      let <_cor4> =
		  %% Line 694
		  apply 'rex'/1
		      ([{'r8',RM8}|[]])
	      in  let <_cor5> =
		      %% Line 694
		      apply 'encode_rm'/3
			  (RM8, Reg32, [])
		  in  %% Line 694
		      [_cor4|[15|[_cor1|_cor5]]]
	  %% Line 695
	  <{{'reg32',Reg32},{'rm16',RM16}}> when 'true' ->
	      let <_cor6> =
		  %% Line 696
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor7> =
		      %% Line 696
		      apply 'encode_rm'/3
			  (RM16, Reg32, [])
		  in  %% Line 696
		      [15|[_cor6|_cor7]]
	  %% Line 697
	  <{{'reg64',Reg64},{'rm8',RM8}}> when 'true' ->
	      let <_cor8> =
		  %% Line 698
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor9> =
		      %% Line 698
		      apply 'encode_rm'/3
			  (RM8, Reg64, [])
		  in  %% Line 698
		      [_cor8|[15|[_cor1|_cor9]]]
	  %% Line 699
	  <{{'reg64',Reg64},{'rm16',RM16}}> when 'true' ->
	      let <_cor10> =
		  %% Line 700
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor11> =
		      %% Line 700
		      call 'erlang':'bor'
			  (_cor1, 1)
		  in  let <_cor12> =
			  %% Line 700
			  apply 'encode_rm'/3
			      (RM16, Reg64, [])
		      in  %% Line 700
			  [_cor10|[15|[_cor11|_cor12]]]
	  %% Line 701
	  <{{'reg64',Reg64},{'rm32',RM32}}> when 'true' ->
	      let <_cor13> =
		  %% Line 703
		  call 'erlang':'bsr'
		      (_cor1, 3)
	      in  let <_cor14> =
		      %% Line 703
		      call 'erlang':'band'
			  (1, _cor13)
		  in  let <_cor15> =
			  %% Line 703
			  apply 'rex'/1
			      ([{'w',_cor14}|[]])
		      in  let <_cor16> =
			      %% Line 704
			      apply 'encode_rm'/3
				  (RM32, Reg64, [])
			  in  %% Line 703
			      [_cor15|[99|_cor16]]
	  ( <_cor17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'pop_encode'/1 =
    %% Line 717
    fun (_cor0) ->
	%% Line 718
	case _cor0 of
	  %% Line 719
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor1> =
		  %% Line 720
		  apply 'encode_rm'/3
		      (RM64, 0, [])
	      in  %% Line 720
		  [143|_cor1]
	  %% Line 721
	  <{{'reg64',Reg64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 722
		  apply 'rex'/1
		      ([{'b',Reg64}|[]])
	      in  let <_cor3> =
		      %% Line 722
		      call 'erlang':'band'
			  (Reg64, 7)
		  in  let <_cor4> =
			  %% Line 722
			  call 'erlang':'bor'
			      (88, _cor3)
		      in  %% Line 722
			  [_cor2|[_cor4|[]]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'push_encode'/1 =
    %% Line 733
    fun (_cor0) ->
	%% Line 734
	case _cor0 of
	  %% Line 737
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor1> =
		  %% Line 738
		  apply 'encode_rm'/3
		      (RM64, 6, [])
	      in  %% Line 738
		  [255|_cor1]
	  %% Line 741
	  <{{'reg64',Reg64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 742
		  apply 'rex'/1
		      ([{'b',Reg64}|[]])
	      in  let <_cor3> =
		      %% Line 742
		      call 'erlang':'band'
			  (Reg64, 7)
		  in  let <_cor4> =
			  %% Line 742
			  call 'erlang':'bor'
			      (80, _cor3)
		      in  %% Line 742
			  [_cor2|[_cor4|[]]]
	  %% Line 743
	  <{{'imm8',Imm8}}> when 'true' ->
	      %% Line 744
	      [106|[Imm8|[]]]
	  %% Line 745
	  <{{'imm32',Imm32}}> when 'true' ->
	      let <_cor5> =
		  %% Line 746
		  apply 'le32'/2
		      (Imm32, [])
	      in  %% Line 746
		  [104|_cor5]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'shift_op_encode'/2 =
    %% Line 761
    fun (_cor1,_cor0) ->
	%% Line 762
	case _cor0 of
	  %% Line 763
	  <{{'rm32',RM32},1}> when 'true' ->
	      let <_cor2> =
		  %% Line 764
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 764
		  [209|_cor2]
	  %% Line 765
	  <{{'rm32',RM32},'cl'}> when 'true' ->
	      let <_cor3> =
		  %% Line 766
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 766
		  [211|_cor3]
	  %% Line 767
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor4> =
		  %% Line 768
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 768
		  [193|_cor4]
	  %% Line 769
	  <{{'rm64',RM64},1}> when 'true' ->
	      let <_cor5> =
		  %% Line 770
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor6> =
		      %% Line 770
		      apply 'encode_rm'/3
			  (RM64, _cor1, [])
		  in  %% Line 770
		      [_cor5|[209|_cor6]]
	  %% Line 771
	  <{{'rm64',RM64},'cl'}> when 'true' ->
	      let <_cor7> =
		  %% Line 772
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor8> =
		      %% Line 772
		      apply 'encode_rm'/3
			  (RM64, _cor1, [])
		  in  %% Line 772
		      [_cor7|[211|_cor8]]
	  %% Line 773
	  <{{'rm64',RM64},{'imm8',Imm8}}> when 'true' ->
	      let <_cor9> =
		  %% Line 774
		  apply 'rex'/1
		      ([{'w',1}])
	      in  let <_cor10> =
		      %% Line 774
		      apply 'encode_rm'/3
			  (RM64, _cor1, [Imm8|[]])
		  in  %% Line 774
		      [_cor9|[193|_cor10]]
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'ret_encode'/1 =
    %% Line 787
    fun (_cor0) ->
	%% Line 788
	case _cor0 of
	  %% Line 789
	  <{}> when 'true' ->
	      %% Line 790
	      [195]
	  %% Line 791
	  <{{'imm16',Imm16}}> when 'true' ->
	      let <_cor1> =
		  %% Line 792
		  apply 'le16'/2
		      (Imm16, [])
	      in  %% Line 792
		  [194|_cor1]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'ret_sizeof'/1 =
    %% Line 795
    fun (_cor0) ->
	%% Line 796
	case _cor0 of
	  %% Line 797
	  <{}> when 'true' ->
	      %% Line 798
	      1
	  %% Line 799
	  <{{'imm16',_cor3}}> when 'true' ->
	      3
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'setcc_encode'/1 =
    %% Line 803
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',CC},{'rm8',RM8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 804
		  apply 'rex'/1
		      ([{'r8',RM8}|[]])
	      in  let <_cor2> =
		      %% Line 804
		      call 'erlang':'bor'
			  (144, CC)
		  in  let <_cor3> =
			  %% Line 804
			  apply 'encode_rm'/3
			      (RM8, 0, [])
		      in  %% Line 804
			  [_cor1|[15|[_cor2|_cor3]]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'setcc_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'shd_op_encode'/2 =
    %% Line 809
    fun (_cor1,_cor0) ->
	%% Line 810
	case _cor0 of
	  %% Line 811
	  <{{'rm32',RM32},{'reg32',Reg32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor2> =
		  %% Line 812
		  apply 'encode_rm'/3
		      (RM32, Reg32, [Imm8|[]])
	      in  %% Line 812
		  [15|[_cor1|_cor2]]
	  %% Line 813
	  <{{'rm32',RM32},{'reg32',Reg32},'cl'}> when 'true' ->
	      let <_cor3> =
		  %% Line 814
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor4> =
		      %% Line 814
		      apply 'encode_rm'/3
			  (RM32, Reg32, [])
		  in  %% Line 814
		      [15|[_cor3|_cor4]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'test_encode'/1 =
    %% Line 825
    fun (_cor0) ->
	%% Line 826
	case _cor0 of
	  %% Line 827
	  <{'eax',{'imm32',Imm32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 828
		  apply 'le32'/2
		      (Imm32, [])
	      in  %% Line 828
		  [169|_cor1]
	  %% Line 829
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 830
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor3> =
		      %% Line 830
		      apply 'encode_rm'/3
			  (RM32, 0, _cor2)
		  in  %% Line 830
		      [247|_cor3]
	  %% Line 831
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor4> =
		  %% Line 832
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 832
		  [133|_cor4]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'fild_encode'/1 =
    %% Line 845
    fun (_cor0) ->
	%% Line 847
	case _cor0 of
	  <{{'rm64',RM64}}> when 'true' ->
	      let <_cor2> =
		  %% Line 848
		  apply 'encode_rm'/3
		      (RM64, 0, [])
	      in  %% Line 848
		  [219|_cor2]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'fld_encode'/1 =
    %% Line 854
    fun (_cor0) ->
	%% Line 855
	case _cor0 of
	  %% Line 856
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor1> =
		  %% Line 857
		  apply 'encode_rm'/3
		      (RM64fp, 0, [])
	      in  %% Line 857
		  [221|_cor1]
	  %% Line 858
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor2> =
		  %% Line 859
		  apply 'st'/1
		      (St)
	      in  let <_cor3> =
		      %% Line 859
		      call 'erlang':'bor'
			  (192, _cor2)
		  in  %% Line 859
		      [217|[_cor3|[]]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'x87_comm_arith_encode'/2 =
    %% Line 870
    fun (_cor1,_cor0) ->
	%% Line 872
	case _cor0 of
	  %% Line 873
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 874
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 874
		  [220|_cor2]
	  %% Line 875
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <_cor4> =
		  %% Line 876
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor5> =
		      %% Line 876
		      call 'erlang':'bor'
			  (192, _cor4)
		  in  let <_cor3> =
			  %% Line 876
			  apply 'st'/1
			      (St)
		      in  let <_cor6> =
			      %% Line 876
			      call 'erlang':'bor'
				  (_cor5, _cor3)
			  in  %% Line 876
			      [216|[_cor6|[]]]
	  %% Line 877
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <_cor8> =
		  %% Line 878
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor9> =
		      %% Line 878
		      call 'erlang':'bor'
			  (192, _cor8)
		  in  let <_cor7> =
			  %% Line 878
			  apply 'st'/1
			      (St)
		      in  let <_cor10> =
			      %% Line 878
			      call 'erlang':'bor'
				  (_cor9, _cor7)
			  in  %% Line 878
			      [220|[_cor10|[]]]
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'x87_comm_arith_pop_encode'/2 =
    %% Line 881
    fun (_cor1,_cor0) ->
	%% Line 883
	case _cor0 of
	  %% Line 884
	  <[]> when 'true' ->
	      let <_cor3> =
		  %% Line 885
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor4> =
		      %% Line 885
		      call 'erlang':'bor'
			  (192, _cor3)
		  in  let <_cor2> =
			  %% Line 885
			  apply 'st'/1
			      (1)
		      in  let <_cor5> =
			      %% Line 885
			      call 'erlang':'bor'
				  (_cor4, _cor2)
			  in  %% Line 885
			      [222|[_cor5|[]]]
	  %% Line 886
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <_cor7> =
		  %% Line 887
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor8> =
		      %% Line 887
		      call 'erlang':'bor'
			  (192, _cor7)
		  in  let <_cor6> =
			  %% Line 887
			  apply 'st'/1
			      (St)
		      in  let <_cor9> =
			      %% Line 887
			      call 'erlang':'bor'
				  (_cor8, _cor6)
			  in  %% Line 887
			      [222|[_cor9|[]]]
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'x87_arith_encode'/2 =
    %% Line 890
    fun (_cor1,_cor0) ->
	%% Line 892
	case _cor0 of
	  %% Line 893
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 894
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 894
		  [220|_cor2]
	  %% Line 895
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 896
		  call 'erlang':'band'
		      (_cor1, 6)
	      in  let <_cor5> =
		      %% Line 897
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor6> =
			  %% Line 897
			  call 'erlang':'bor'
			      (192, _cor5)
		      in  let <_cor4> =
			      %% Line 897
			      apply 'st'/1
				  (St)
			  in  let <_cor7> =
				  %% Line 897
				  call 'erlang':'bor'
				      (_cor6, _cor4)
			      in  %% Line 897
				  [216|[_cor7|[]]]
	  %% Line 898
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 899
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor10> =
		      %% Line 900
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor11> =
			  %% Line 900
			  call 'erlang':'bor'
			      (192, _cor10)
		      in  let <_cor9> =
			      %% Line 900
			      apply 'st'/1
				  (St)
			  in  let <_cor12> =
				  %% Line 900
				  call 'erlang':'bor'
				      (_cor11, _cor9)
			      in  %% Line 900
				  [220|[_cor12|[]]]
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'x87_arith_pop_encode'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	let <OpCode0> =
	    %% Line 905
	    call 'erlang':'bor'
		(_cor1, 1)
	in  %% Line 906
	    case _cor0 of
	      %% Line 907
	      <[]> when 'true' ->
		  let <_cor4> =
		      %% Line 908
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor5> =
			  %% Line 908
			  call 'erlang':'bor'
			      (200, _cor4)
		      in  let <_cor3> =
			      %% Line 908
			      apply 'st'/1
				  (1)
			  in  let <_cor6> =
				  %% Line 908
				  call 'erlang':'bor'
				      (_cor5, _cor3)
			      in  %% Line 908
				  [222|[_cor6|[]]]
	      %% Line 909
	      <{{'fpst',St},{'fpst',0}}> when 'true' ->
		  let <_cor8> =
		      %% Line 910
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor9> =
			  %% Line 910
			  call 'erlang':'bor'
			      (200, _cor8)
		      in  let <_cor7> =
			      %% Line 910
			      apply 'st'/1
				  (St)
			  in  let <_cor10> =
				  %% Line 910
				  call 'erlang':'bor'
				      (_cor9, _cor7)
			      in  %% Line 910
				  [222|[_cor10|[]]]
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'x87_arith_rev_encode'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	%% Line 915
	case _cor0 of
	  %% Line 916
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 917
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 917
		  [220|_cor2]
	  %% Line 918
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 919
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor5> =
		      %% Line 920
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor6> =
			  %% Line 920
			  call 'erlang':'bor'
			      (192, _cor5)
		      in  let <_cor4> =
			      %% Line 920
			      apply 'st'/1
				  (St)
			  in  let <_cor7> =
				  %% Line 920
				  call 'erlang':'bor'
				      (_cor6, _cor4)
			      in  %% Line 920
				  [216|[_cor7|[]]]
	  %% Line 921
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 922
		  call 'erlang':'band'
		      (_cor1, 6)
	      in  let <_cor10> =
		      %% Line 923
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor11> =
			  %% Line 923
			  call 'erlang':'bor'
			      (192, _cor10)
		      in  let <_cor9> =
			      %% Line 923
			      apply 'st'/1
				  (St)
			  in  let <_cor12> =
				  %% Line 923
				  call 'erlang':'bor'
				      (_cor11, _cor9)
			      in  %% Line 923
				  [220|[_cor12|[]]]
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'x87_arith_rev_pop_encode'/2 =
    %% Line 926
    fun (_cor1,_cor0) ->
	let <OpCode0> =
	    %% Line 928
	    call 'erlang':'band'
		(_cor1, 6)
	in  %% Line 929
	    case _cor0 of
	      %% Line 930
	      <[]> when 'true' ->
		  let <_cor4> =
		      %% Line 931
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor5> =
			  %% Line 931
			  call 'erlang':'bor'
			      (192, _cor4)
		      in  let <_cor3> =
			      %% Line 931
			      apply 'st'/1
				  (1)
			  in  let <_cor6> =
				  %% Line 931
				  call 'erlang':'bor'
				      (_cor5, _cor3)
			      in  %% Line 931
				  [222|[_cor6|[]]]
	      %% Line 932
	      <{{'fpst',St},{'fpst',0}}> when 'true' ->
		  let <_cor8> =
		      %% Line 933
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor9> =
			  %% Line 933
			  call 'erlang':'bor'
			      (192, _cor8)
		      in  let <_cor7> =
			      %% Line 933
			      apply 'st'/1
				  (St)
			  in  let <_cor10> =
				  %% Line 933
				  call 'erlang':'bor'
				      (_cor9, _cor7)
			      in  %% Line 933
				  [222|[_cor10|[]]]
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'fst_encode'/2 =
    %% Line 946
    fun (_cor1,_cor0) ->
	%% Line 947
	case _cor0 of
	  %% Line 948
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 949
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 949
		  [221|_cor2]
	  %% Line 950
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor4> =
		  %% Line 951
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor5> =
		      %% Line 951
		      call 'erlang':'bor'
			  (192, _cor4)
		  in  let <_cor3> =
			  %% Line 951
			  apply 'st'/1
			      (St)
		      in  let <_cor6> =
			      %% Line 951
			      call 'erlang':'bor'
				  (_cor5, _cor3)
			  in  %% Line 951
			      [221|[_cor6|[]]]
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'fchs_encode'/0 =
    %% Line 962
    fun () ->
	%% Line 963
	[217|[224]]
'fchs_sizeof'/0 =
    %% Line 965
    fun () ->
	%% Line 966
	2
'ffree_encode'/1 =
    %% Line 968
    fun (_cor0) ->
	case _cor0 of
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor1> =
		  %% Line 969
		  apply 'st'/1
		      (St)
	      in  let <_cor2> =
		      %% Line 969
		      call 'erlang':'bor'
			  (192, _cor1)
		  in  %% Line 969
		      [221|[_cor2|[]]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'ffree_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'ffree_sizeof'/0 =
    %% Line 971
    fun () ->
	%% Line 972
	2
'fwait_encode'/0 =
    %% Line 974
    fun () ->
	%% Line 975
	[155]
'fwait_sizeof'/0 =
    %% Line 977
    fun () ->
	%% Line 978
	1
'fxch_encode'/1 =
    %% Line 980
    fun (_cor0) ->
	%% Line 981
	case _cor0 of
	  %% Line 982
	  <[]> when 'true' ->
	      let <_cor1> =
		  %% Line 983
		  apply 'st'/1
		      (1)
	      in  let <_cor2> =
		      %% Line 983
		      call 'erlang':'bor'
			  (200, _cor1)
		  in  %% Line 983
		      [217|[_cor2|[]]]
	  %% Line 984
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor3> =
		  %% Line 985
		  apply 'st'/1
		      (St)
	      in  let <_cor4> =
		      %% Line 985
		      call 'erlang':'bor'
			  (200, _cor3)
		  in  %% Line 985
		      [217|[_cor4|[]]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'fxch_sizeof'/0 =
    %% Line 988
    fun () ->
	%% Line 989
	2
'insn_encode'/3 =
    %% Line 991
    fun (_cor2,_cor1,_cor0) ->
	let <Bytes_and_REX> =
	    %% Line 992
	    apply 'insn_encode_internal'/2
		(_cor2, _cor1)
	in  let <Bytes> =
		%% Line 993
		apply 'fix_rex'/1
		    (Bytes_and_REX)
	    in  %% Line 994
		case apply 'has_relocs'/1
			 (Bytes) of
		  %% Line 995
		  <'false'> when 'true' ->
		      %% Line 996
		      {Bytes,[]}
		  %% Line 997
		  <_cor9> when 'true' ->
		      %% Line 998
		      apply 'fix_relocs'/4
			  (Bytes, _cor0, [], [])
		end
'fix_rex'/1 =
    %% Line 1001
    fun (_cor0) ->
	%% Line 1002
	apply 'fix_rex'/3
	    (_cor0, 64, [])
'fix_rex'/3 =
    %% Line 1004
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'rex',REX}|Rest],REXAcc,Bytes> when 'true' ->
	      let <_cor3> =
		  %% Line 1005
		  call 'erlang':'bor'
		      (REXAcc, REX)
	      in  %% Line 1005
		  apply 'fix_rex'/3
		      (Rest, _cor3, Bytes)
	  %% Line 1006
	  <[{{'rex',REX},Byte}|Rest],REXAcc,Bytes> when 'true' ->
	      let <_cor4> =
		  %% Line 1007
		  call 'erlang':'bor'
		      (REXAcc, REX)
	      in  %% Line 1007
		  apply 'fix_rex'/3
		      (Rest, _cor4, [Byte|Bytes])
	  %% Line 1008
	  <[Byte|Rest],REXAcc,Bytes> when 'true' ->
	      %% Line 1009
	      apply 'fix_rex'/3
		  (Rest, REXAcc, [Byte|Bytes])
	  %% Line 1010
	  <[],64,Bytes> when 'true' ->
	      %% Line 1011
	      call 'lists':'reverse'
		  (Bytes)
	  %% Line 1012
	  <[],REX0,Bytes> when 'true' ->
	      let <REX> =
		  %% Line 1013
		  call 'erlang':'band'
		      (REX0, 255)
	      in  %% Line 1014
		  case call 'lists':'reverse'
			   (Bytes) of
		    <[Head|Tail]> when 'true' ->
			%% Line 1015
			case Head of
			  %% Line 1016
			  <102> when 'true' ->
			      %% Line 1017
			      [102|[REX|Tail]]
			  %% Line 1018
			  <242> when 'true' ->
			      %% Line 1019
			      [242|[REX|Tail]]
			  %% Line 1020
			  <_cor11> when 'true' ->
			      %% Line 1021
			      [REX|[Head|Tail]]
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fix_rex',3}}] )
	    -| ['compiler_generated'] )
	end
'has_relocs'/1 =
    %% Line 1024
    fun (_cor0) ->
	case _cor0 of
	  <[{'le32',_cor2,_cor3}|_cor4]> when 'true' ->
	      'true'
	  %% Line 1025
	  <[{'le64',_cor5,_cor6}|_cor7]> when 'true' ->
	      'true'
	  %% Line 1026
	  <[_cor8|Bytes]> when 'true' ->
	      apply 'has_relocs'/1
		  (Bytes)
	  %% Line 1027
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'has_relocs',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_relocs'/4 =
    %% Line 1029
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'le32',Tag,Val}|Bytes],Offset,Code,Relocs> when 'true' ->
	      let <_cor4> =
		  %% Line 1030
		  call 'erlang':'+'
		      (Offset, 4)
	      in  %% Line 1030
		  apply 'fix_relocs'/4
		      (Bytes, _cor4, %% Line 1031
				     [0|[0|[0|[0|Code]]]], %% Line 1032
							   [{Tag,Offset,Val}|Relocs])
	  %% Line 1033
	  <[{'le64',Tag,Val}|Bytes],Offset,Code,Relocs> when 'true' ->
	      let <_cor5> =
		  %% Line 1034
		  call 'erlang':'+'
		      (Offset, 8)
	      in  %% Line 1034
		  apply 'fix_relocs'/4
		      (Bytes, _cor5, %% Line 1035
				     [0|[0|[0|[0|%% Line 1036
						 [0|[0|[0|[0|Code]]]]]]]], %% Line 1037
									   [{Tag,Offset,Val}|Relocs])
	  %% Line 1038
	  <[Byte|Bytes],Offset,Code,Relocs> when 'true' ->
	      let <_cor6> =
		  %% Line 1039
		  call 'erlang':'+'
		      (Offset, 1)
	      in  %% Line 1039
		  apply 'fix_relocs'/4
		      (Bytes, _cor6, [Byte|Code], Relocs)
	  %% Line 1040
	  <[],_X_Offset,Code,Relocs> when 'true' ->
	      let <_cor8> =
		  %% Line 1041
		  call 'lists':'reverse'
		      (Code)
	      in  let <_cor7> =
		      %% Line 1041
		      call 'lists':'reverse'
			  (Relocs)
		  in  %% Line 1041
		      {_cor8,_cor7}
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'fix_relocs',4}}] )
	    -| ['compiler_generated'] )
	end
'insn_encode_internal'/2 =
    %% Line 1043
    fun (_cor1,_cor0) ->
	%% Line 1044
	case _cor1 of
	  %% Line 1045
	  <'adc'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (2, _cor0)
	  %% Line 1046
	  <'add'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (0, _cor0)
	  %% Line 1047
	  <'and'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (4, _cor0)
	  %% Line 1048
	  <'bsf'> when 'true' ->
	      apply 'bs_op_encode'/2
		  (188, _cor0)
	  %% Line 1049
	  <'bsr'> when 'true' ->
	      apply 'bs_op_encode'/2
		  (189, _cor0)
	  %% Line 1050
	  <'bswap'> when 'true' ->
	      apply 'bswap_encode'/1
		  (_cor0)
	  %% Line 1051
	  <'bt'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (4, _cor0)
	  %% Line 1052
	  <'btc'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (7, _cor0)
	  %% Line 1053
	  <'btr'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (6, _cor0)
	  %% Line 1054
	  <'bts'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (5, _cor0)
	  %% Line 1055
	  <'call'> when 'true' ->
	      apply 'call_encode'/1
		  (_cor0)
	  %% Line 1056
	  <'cbw'> when 'true' ->
	      apply 'cbw_encode'/1
		  (_cor0)
	  %% Line 1057
	  <'cdq'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (153, _cor0)
	  %% Line 1058
	  <'clc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (248, _cor0)
	  %% Line 1059
	  <'cld'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (252, _cor0)
	  %% Line 1060
	  <'cmc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (245, _cor0)
	  %% Line 1061
	  <'cmovcc'> when 'true' ->
	      apply 'cmovcc_encode'/1
		  (_cor0)
	  %% Line 1062
	  <'cmp'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (7, _cor0)
	  %% Line 1063
	  <'cwde'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (152, _cor0)
	  %% Line 1064
	  <'dec'> when 'true' ->
	      apply 'incdec_encode'/2
		  (1, _cor0)
	  %% Line 1065
	  <'div'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (6, _cor0)
	  %% Line 1066
	  <'enter'> when 'true' ->
	      apply 'enter_encode'/1
		  (_cor0)
	  %% Line 1067
	  <'idiv'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (7, _cor0)
	  %% Line 1068
	  <'imul'> when 'true' ->
	      apply 'imul_encode'/1
		  (_cor0)
	  %% Line 1069
	  <'inc'> when 'true' ->
	      apply 'incdec_encode'/2
		  (0, _cor0)
	  %% Line 1070
	  <'into'> when 'true' ->
	      case call 'erlang':'get'
		       ('hipe_target_arch') of
		%% Line 1071
		<'x86'> when 'true' ->
		    apply 'nullary_op_encode'/2
			(206, _cor0)
		%% Line 1072
		<'amd64'> when 'true' ->
		    call 'erlang':'exit'
			({'invalid_amd64_opcode','hipe_amd64_encode__erl'})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1075
	  <'jcc'> when 'true' ->
	      apply 'jcc_encode'/1
		  (_cor0)
	  %% Line 1076
	  <'jecxz'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (227, _cor0)
	  %% Line 1077
	  <'jmp'> when 'true' ->
	      apply 'jmp_encode'/1
		  (_cor0)
	  %% Line 1078
	  <'lea'> when 'true' ->
	      apply 'lea_encode'/1
		  (_cor0)
	  %% Line 1079
	  <'leave'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (201, _cor0)
	  %% Line 1080
	  <'loop'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (226, _cor0)
	  %% Line 1081
	  <'loope'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (225, _cor0)
	  %% Line 1082
	  <'loopne'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (224, _cor0)
	  %% Line 1083
	  <'mov'> when 'true' ->
	      apply 'mov_encode'/1
		  (_cor0)
	  %% Line 1084
	  <'movsx'> when 'true' ->
	      apply 'movx_op_encode'/2
		  (190, _cor0)
	  %% Line 1085
	  <'movzx'> when 'true' ->
	      apply 'movx_op_encode'/2
		  (182, _cor0)
	  %% Line 1086
	  <'mul'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (4, _cor0)
	  %% Line 1087
	  <'neg'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (3, _cor0)
	  %% Line 1088
	  <'nop'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (144, _cor0)
	  %% Line 1089
	  <'not'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (2, _cor0)
	  %% Line 1090
	  <'or'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (1, _cor0)
	  %% Line 1091
	  <'pop'> when 'true' ->
	      apply 'pop_encode'/1
		  (_cor0)
	  %% Line 1092
	  <'prefix_fs'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (100, _cor0)
	  %% Line 1093
	  <'push'> when 'true' ->
	      apply 'push_encode'/1
		  (_cor0)
	  %% Line 1094
	  <'rcl'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (2, _cor0)
	  %% Line 1095
	  <'rcr'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (3, _cor0)
	  %% Line 1096
	  <'ret'> when 'true' ->
	      apply 'ret_encode'/1
		  (_cor0)
	  %% Line 1097
	  <'rol'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (0, _cor0)
	  %% Line 1098
	  <'ror'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (1, _cor0)
	  %% Line 1099
	  <'sar'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (7, _cor0)
	  %% Line 1100
	  <'sbb'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (3, _cor0)
	  %% Line 1101
	  <'setcc'> when 'true' ->
	      apply 'setcc_encode'/1
		  (_cor0)
	  %% Line 1102
	  <'shl'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (4, _cor0)
	  %% Line 1103
	  <'shld'> when 'true' ->
	      apply 'shd_op_encode'/2
		  (164, _cor0)
	  %% Line 1104
	  <'shr'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (5, _cor0)
	  %% Line 1105
	  <'shrd'> when 'true' ->
	      apply 'shd_op_encode'/2
		  (172, _cor0)
	  %% Line 1106
	  <'stc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (249, _cor0)
	  %% Line 1107
	  <'std'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (253, _cor0)
	  %% Line 1108
	  <'sub'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (5, _cor0)
	  %% Line 1109
	  <'test'> when 'true' ->
	      apply 'test_encode'/1
		  (_cor0)
	  %% Line 1110
	  <'xor'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (6, _cor0)
	  %% Line 1113
	  <'addsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 88, _cor0)
	  %% Line 1114
	  <'cmpsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 194, _cor0)
	  %% Line 1115
	  <'comisd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (102, 47, _cor0)
	  %% Line 1116
	  <'cvtsi2sd'> when 'true' ->
	      apply 'sse2_cvtsi2sd_encode'/1
		  (_cor0)
	  %% Line 1117
	  <'divsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 94, _cor0)
	  %% Line 1118
	  <'maxsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 95, _cor0)
	  %% Line 1119
	  <'minsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 93, _cor0)
	  %% Line 1120
	  <'movsd'> when 'true' ->
	      apply 'sse2_mov_encode'/1
		  (_cor0)
	  %% Line 1121
	  <'mulsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 89, _cor0)
	  %% Line 1122
	  <'sqrtsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 81, _cor0)
	  %% Line 1123
	  <'subsd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (242, 92, _cor0)
	  %% Line 1124
	  <'ucomisd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (102, 46, _cor0)
	  %% Line 1125
	  <'xorpd'> when 'true' ->
	      apply 'sse2_arith_binop_encode'/3
		  (102, 87, _cor0)
	  %% Line 1129
	  <'fadd'> when 'true' ->
	      apply 'x87_comm_arith_encode'/2
		  (0, _cor0)
	  %% Line 1130
	  <'faddp'> when 'true' ->
	      apply 'x87_comm_arith_pop_encode'/2
		  (0, _cor0)
	  %% Line 1131
	  <'fchs'> when 'true' ->
	      apply 'fchs_encode'/0
		  ()
	  %% Line 1132
	  <'fdiv'> when 'true' ->
	      apply 'x87_arith_encode'/2
		  (6, _cor0)
	  %% Line 1133
	  <'fdivp'> when 'true' ->
	      apply 'x87_arith_pop_encode'/2
		  (6, _cor0)
	  %% Line 1134
	  <'fdivr'> when 'true' ->
	      apply 'x87_arith_rev_encode'/2
		  (7, _cor0)
	  %% Line 1135
	  <'fdivrp'> when 'true' ->
	      apply 'x87_arith_rev_pop_encode'/2
		  (7, _cor0)
	  %% Line 1136
	  <'ffree'> when 'true' ->
	      apply 'ffree_encode'/1
		  (_cor0)
	  %% Line 1137
	  <'fild'> when 'true' ->
	      apply 'fild_encode'/1
		  (_cor0)
	  %% Line 1138
	  <'fld'> when 'true' ->
	      apply 'fld_encode'/1
		  (_cor0)
	  %% Line 1139
	  <'fmul'> when 'true' ->
	      apply 'x87_comm_arith_encode'/2
		  (1, _cor0)
	  %% Line 1140
	  <'fmulp'> when 'true' ->
	      apply 'x87_comm_arith_pop_encode'/2
		  (1, _cor0)
	  %% Line 1141
	  <'fst'> when 'true' ->
	      apply 'fst_encode'/2
		  (2, _cor0)
	  %% Line 1142
	  <'fstp'> when 'true' ->
	      apply 'fst_encode'/2
		  (3, _cor0)
	  %% Line 1143
	  <'fsub'> when 'true' ->
	      apply 'x87_arith_encode'/2
		  (4, _cor0)
	  %% Line 1144
	  <'fsubp'> when 'true' ->
	      apply 'x87_arith_pop_encode'/2
		  (4, _cor0)
	  %% Line 1145
	  <'fsubr'> when 'true' ->
	      apply 'x87_arith_rev_encode'/2
		  (5, _cor0)
	  %% Line 1146
	  <'fsubrp'> when 'true' ->
	      apply 'x87_arith_rev_pop_encode'/2
		  (5, _cor0)
	  %% Line 1147
	  <'fwait'> when 'true' ->
	      apply 'fwait_encode'/0
		  ()
	  %% Line 1148
	  <'fxch'> when 'true' ->
	      apply 'fxch_encode'/1
		  (_cor0)
	  %% Line 1151
	  <_cor6> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_amd64_encode','insn_encode',_cor1})
	end
'insn_sizeof'/2 =
    %% Line 1154
    fun (_cor1,_cor0) ->
	%% Line 1155
	case _cor1 of
	  %% Line 1156
	  <'cbw'> when 'true' ->
	      apply 'cbw_sizeof'/1
		  (_cor0)
	  %% Line 1157
	  <'cdq'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1158
	  <'clc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1159
	  <'cld'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1160
	  <'cmc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1161
	  <'cwde'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1162
	  <'enter'> when 'true' ->
	      apply 'enter_sizeof'/1
		  (_cor0)
	  %% Line 1163
	  <'into'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1164
	  <'jcc'> when 'true' ->
	      apply 'jcc_sizeof'/1
		  (_cor0)
	  %% Line 1165
	  <'jecxz'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1166
	  <'leave'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1167
	  <'loop'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1168
	  <'loope'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1169
	  <'loopne'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1170
	  <'nop'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1171
	  <'prefix_fs'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1172
	  <'ret'> when 'true' ->
	      apply 'ret_sizeof'/1
		  (_cor0)
	  %% Line 1173
	  <'stc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1174
	  <'std'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1179
	  <'fchs'> when 'true' ->
	      apply 'fchs_sizeof'/0
		  ()
	  %% Line 1184
	  <'ffree'> when 'true' ->
	      apply 'ffree_sizeof'/0
		  ()
	  %% Line 1195
	  <'fwait'> when 'true' ->
	      apply 'fwait_sizeof'/0
		  ()
	  %% Line 1196
	  <'fxch'> when 'true' ->
	      apply 'fxch_sizeof'/0
		  ()
	  %% Line 1198
	  <_cor6> when 'true' ->
	      %% Line 1199
	      case apply 'insn_encode'/3
		       (_cor1, _cor0, 0) of
		<{Bytes,_cor7}> when 'true' ->
		    %% Line 1200
		    call 'erlang':'length'
			(Bytes)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_encode')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_encode', _cor0)
end