module 'cerl_lib' ['bool_switch_cases'/1,
		   'is_bool_switch'/1,
		   'is_safe_expr'/2,
		   'is_simple_clause'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'reduce_expr'/1]
    attributes [%% Line 41
		'spec' =
		    %% Line 41
		    [{{'is_simple_clause',1},[{'type',41,'fun',[{'type',41,'product',[{'remote_type',41,[{'atom',41,'cerl'}|[{'atom',41,'c_clause'}|[[]]]]}]}|[{'type',41,'boolean',[]}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'is_bool_switch',1},[{'type',66,'fun',[{'type',66,'product',[{'type',66,'list',[{'remote_type',66,[{'atom',66,'cerl'}|[{'atom',66,'c_clause'}|[[]]]]}]}]}|[{'type',66,'boolean',[]}]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'bool_switch_cases',1},[{'type',90,'fun',[{'type',90,'product',[{'type',90,'list',[{'remote_type',90,[{'atom',90,'cerl'}|[{'atom',90,'c_clause'}|[[]]]]}]}]}|[{'type',90,'tuple',[{'remote_type',90,[{'atom',90,'cerl'}|[{'atom',90,'cerl'}|[[]]]]}|[{'remote_type',90,[{'atom',90,'cerl'}|[{'atom',90,'cerl'}|[[]]]]}]]}]]}]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'check_fun',{'type',106,'fun',[{'type',106,'product',[{'var',106,'_'}|[{'var',106,'_'}]]}|[{'type',106,'boolean',[]}]]},[]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'is_safe_expr',2},[{'type',132,'fun',[{'type',132,'product',[{'remote_type',132,[{'atom',132,'cerl'}|[{'atom',132,'cerl'}|[[]]]]}|[{'type',132,'check_fun',[]}]]}|[{'type',132,'boolean',[]}]]}]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'reduce_expr',1},[{'type',355,'fun',[{'type',355,'product',[{'remote_type',355,[{'atom',355,'cerl'}|[{'atom',355,'cerl'}|[[]]]]}]}|[{'remote_type',355,[{'atom',355,'cerl'}|[{'atom',355,'cerl'}|[[]]]]}]]}]}],
		%% Line 361
		'spec' =
		    %% Line 361
		    [{{'reduce_expr',2},[{'type',361,'fun',[{'type',361,'product',[{'remote_type',361,[{'atom',361,'cerl'}|[{'atom',361,'cerl'}|[[]]]]}|[{'type',361,'check_fun',[]}]]}|[{'remote_type',361,[{'atom',361,'cerl'}|[{'atom',361,'cerl'}|[[]]]]}]]}]}]]
'is_simple_clause'/1 =
    %% Line 43
    fun (_cor0) ->
	%% Line 44
	case call 'cerl':'clause_pats'
		 (_cor0) of
	  %% Line 45
	  <[_X_P|[]]> when 'true' ->
	      let <G> =
		  %% Line 46
		  call 'cerl':'clause_guard'
		      (_cor0)
	      in  %% Line 47
		  case call 'cerl_clauses':'eval_guard'
			   (G) of
		    %% Line 48
		    <{'value','true'}> when 'true' ->
			'true'
		    %% Line 49
		    <_cor5> when 'true' ->
			'false'
		  end
	  %% Line 51
	  <_cor6> when 'true' ->
	      'false'
	end
'is_bool_switch'/1 =
    %% Line 68
    fun (_cor0) ->
	case _cor0 of
	  <[C1|[C2|[]]]> when 'true' ->
	      let <_976> =
		  case call 'cerl':'clause_pats'
			   (C1) of
		    <[_X_P|[]]> when 'true' ->
			let <G> =
			    call 'cerl':'clause_guard'
				(C1)
			in  case call 'cerl_clauses':'eval_guard'
				     (G) of
			      <{'value','true'}> when 'true' ->
				  'true'
			      <_cor5> when 'true' ->
				  'false'
			    end
		    <_cor6> when 'true' ->
			'false'
		  end
	      in  let <_cor3> =
		      %% Line 69
		      ( case _976 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				case call 'cerl':'clause_pats'
					 (C2) of
				  <[_X_P|[]]> when 'true' ->
				      let <G> =
					  call 'cerl':'clause_guard'
					      (C2)
				      in  case call 'cerl_clauses':'eval_guard'
						   (G) of
					    <{'value','true'}> when 'true' ->
						'true'
					    <_cor5> when 'true' ->
						'false'
					  end
				  <_cor6> when 'true' ->
				      'false'
				end
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor1> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_976}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 69
		      case _cor3 of
			%% Line 70
			<'true'> when 'true' ->
			    let <_714> =
				%% Line 71
				call 'cerl':'clause_pats'
				    (C1)
			    in  %% Line 71
				case _714 of
				  <[P1|[]]> when 'true' ->
				      let <_642> =
					  %% Line 72
					  call 'cerl':'clause_pats'
					      (C2)
				      in  %% Line 72
					  case _642 of
					    <[P2|[]]> when 'true' ->
						let <_527> =
						    %% Line 73
						    call 'cerl':'is_c_atom'
							(P1)
						in  let <_cor8> =
							%% Line 73
							( case _527 of
							    ( <( 'true'
								 -| ['compiler_generated'] )> when 'true' ->
								  call 'cerl':'is_c_atom'
								      (P2)
							      -| ['compiler_generated'] )
							    ( <( 'false'
								 -| ['compiler_generated'] )> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							    ( <_cor6> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {( 'badarg'
									      -| ['compiler_generated'] ),_527}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  %% Line 73
							case _cor8 of
							  %% Line 74
							  <'true'> when 'true' ->
							      let <A1> =
								  %% Line 75
								  call 'cerl':'concrete'
								      (P1)
							      in  let <A2> =
								      %% Line 76
								      call 'cerl':'concrete'
									  (P2)
								  in  %% Line 77
								      ( case <> of
									  ( <>
										when call 'erlang':'is_boolean'
										      (A1) ->
										%% Line 78
										( case <> of
										    ( <>
											  when call 'erlang':'is_boolean'
												(A2) ->
											  call 'erlang':'=/='
											      (A1, A2)
										      -| ['compiler_generated'] )
										    ( <> when 'true' ->
											  'false'
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									  ( <> when 'true' ->
										'false'
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
							  %% Line 79
							  <'false'> when 'true' ->
							      %% Line 80
							      'false'
							  ( <_cor15> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor8})
							    -| ['compiler_generated'] )
							end
					    ( <_cor5> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_642})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_714})
				    -| ['compiler_generated'] )
				end
			%% Line 82
			<'false'> when 'true' ->
			    %% Line 83
			    'false'
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 85
	  <_cor18> when 'true' ->
	      %% Line 86
	      'false'
	end
'bool_switch_cases'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <[C1|[C2|[]]]> when 'true' ->
	      let <B1> =
		  %% Line 93
		  call 'cerl':'clause_body'
		      (C1)
	      in  let <B2> =
		      %% Line 94
		      call 'cerl':'clause_body'
			  (C2)
		  in  let <_1085> =
			  %% Line 95
			  call 'cerl':'clause_pats'
			      (C1)
		      in  %% Line 95
			  case _1085 of
			    <[P1|[]]> when 'true' ->
				let <_1514> =
				    %% Line 96
				    call 'cerl':'concrete'
					(P1)
				in  %% Line 96
				    case _1514 of
				      %% Line 97
				      <'true'> when 'true' ->
					  %% Line 98
					  {B1,B2}
				      %% Line 99
				      <'false'> when 'true' ->
					  %% Line 100
					  {B2,B1}
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_1514})
					-| ['compiler_generated'] )
				    end
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_1085})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'bool_switch_cases',1}}] )
	    -| ['compiler_generated'] )
	end
'default_check'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	'false'
'is_safe_expr'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	%% Line 135
	case call 'cerl':'type'
		 (_cor1) of
	  %% Line 136
	  <'literal'> when 'true' ->
	      %% Line 137
	      'true'
	  %% Line 138
	  <'var'> when 'true' ->
	      %% Line 139
	      'true'
	  %% Line 140
	  <'fun'> when 'true' ->
	      %% Line 141
	      'true'
	  %% Line 142
	  <'values'> when 'true' ->
	      let <_cor2> =
		  %% Line 143
		  call 'cerl':'values_es'
		      (_cor1)
	      in  %% Line 143
		  apply 'is_safe_expr_list'/2
		      (_cor2, _cor0)
	  %% Line 144
	  <'tuple'> when 'true' ->
	      let <_cor3> =
		  %% Line 145
		  call 'cerl':'tuple_es'
		      (_cor1)
	      in  %% Line 145
		  apply 'is_safe_expr_list'/2
		      (_cor3, _cor0)
	  %% Line 146
	  <'cons'> when 'true' ->
	      let <_cor4> =
		  %% Line 147
		  call 'cerl':'cons_hd'
		      (_cor1)
	      in  let <_105> =
		      %% Line 147
		      apply 'is_safe_expr'/2
			  (_cor4, _cor0)
		  in  %% Line 147
		      case _105 of
			%% Line 148
			<'true'> when 'true' ->
			    let <_cor5> =
				%% Line 149
				call 'cerl':'cons_tl'
				    (_cor1)
			    in  %% Line 149
				apply 'is_safe_expr'/2
				    (_cor5, _cor0)
			%% Line 150
			<'false'> when 'true' ->
			    %% Line 151
			    'false'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_105})
			  -| ['compiler_generated'] )
		      end
	  %% Line 153
	  <'let'> when 'true' ->
	      let <_cor7> =
		  %% Line 154
		  call 'cerl':'let_arg'
		      (_cor1)
	      in  let <_837> =
		      %% Line 154
		      apply 'is_safe_expr'/2
			  (_cor7, _cor0)
		  in  %% Line 154
		      case _837 of
			%% Line 155
			<'true'> when 'true' ->
			    let <_cor8> =
				%% Line 156
				call 'cerl':'let_body'
				    (_cor1)
			    in  %% Line 156
				apply 'is_safe_expr'/2
				    (_cor8, _cor0)
			%% Line 157
			<'false'> when 'true' ->
			    %% Line 158
			    'false'
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_837})
			  -| ['compiler_generated'] )
		      end
	  %% Line 160
	  <'letrec'> when 'true' ->
	      let <_cor10> =
		  %% Line 161
		  call 'cerl':'letrec_body'
		      (_cor1)
	      in  %% Line 161
		  apply 'is_safe_expr'/2
		      (_cor10, _cor0)
	  %% Line 162
	  <'seq'> when 'true' ->
	      let <_cor11> =
		  %% Line 163
		  call 'cerl':'seq_arg'
		      (_cor1)
	      in  let <_902> =
		      %% Line 163
		      apply 'is_safe_expr'/2
			  (_cor11, _cor0)
		  in  %% Line 163
		      case _902 of
			%% Line 164
			<'true'> when 'true' ->
			    let <_cor12> =
				%% Line 165
				call 'cerl':'seq_body'
				    (_cor1)
			    in  %% Line 165
				apply 'is_safe_expr'/2
				    (_cor12, _cor0)
			%% Line 166
			<'false'> when 'true' ->
			    %% Line 167
			    'false'
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_902})
			  -| ['compiler_generated'] )
		      end
	  %% Line 169
	  <'catch'> when 'true' ->
	      let <_cor14> =
		  %% Line 170
		  call 'cerl':'catch_body'
		      (_cor1)
	      in  %% Line 170
		  apply 'is_safe_expr'/2
		      (_cor14, _cor0)
	  %% Line 171
	  <'try'> when 'true' ->
	      let <_cor15> =
		  %% Line 176
		  call 'cerl':'try_arg'
		      (_cor1)
	      in  let <_378> =
		      %% Line 176
		      apply 'is_safe_expr'/2
			  (_cor15, _cor0)
		  in  %% Line 176
		      case _378 of
			%% Line 177
			<'true'> when 'true' ->
			    let <_cor16> =
				%% Line 178
				call 'cerl':'try_body'
				    (_cor1)
			    in  %% Line 178
				apply 'is_safe_expr'/2
				    (_cor16, _cor0)
			%% Line 179
			<'false'> when 'true' ->
			    let <_cor17> =
				%% Line 180
				call 'cerl':'try_arg'
				    (_cor1)
			    in  let <_210> =
				    %% Line 180
				    apply 'is_pure_expr'/2
					(_cor17, _cor0)
				in  %% Line 180
				    case _210 of
				      %% Line 181
				      <'true'> when 'true' ->
					  let <_cor18> =
					      %% Line 182
					      call 'cerl':'try_body'
						  (_cor1)
					  in  let <_525> =
						  %% Line 182
						  apply 'is_safe_expr'/2
						      (_cor18, _cor0)
					      in  %% Line 182
						  case _525 of
						    %% Line 183
						    <'true'> when 'true' ->
							let <_cor19> =
							    %% Line 184
							    call 'cerl':'try_handler'
								(_cor1)
							in  %% Line 184
							    apply 'is_safe_expr'/2
								(_cor19, _cor0)
						    %% Line 185
						    <'false'> when 'true' ->
							%% Line 186
							'false'
						    ( <_cor20> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_525})
						      -| ['compiler_generated'] )
						  end
				      %% Line 188
				      <'false'> when 'true' ->
					  %% Line 189
					  'false'
				      ( <_cor21> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_210})
					-| ['compiler_generated'] )
				    end
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_378})
			  -| ['compiler_generated'] )
		      end
	  %% Line 192
	  <'primop'> when 'true' ->
	      let <_cor23> =
		  %% Line 193
		  call 'cerl':'primop_name'
		      (_cor1)
	      in  let <Name> =
		      %% Line 193
		      call 'cerl':'atom_val'
			  (_cor23)
		  in  let <As> =
			  %% Line 194
			  call 'cerl':'primop_args'
			      (_cor1)
		      in  let <_cor26> =
			      %% Line 195
			      call 'erlang':'length'
				  (As)
			  in  let <_851> =
				  %% Line 195
				  apply _cor0
				      ('safe', {Name,_cor26})
			      in  %% Line 195
				  case _851 of
				    %% Line 196
				    <'true'> when 'true' ->
					%% Line 197
					apply 'is_safe_expr_list'/2
					    (As, _cor0)
				    %% Line 198
				    <'false'> when 'true' ->
					%% Line 199
					'false'
				    ( <_cor27> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_851})
				      -| ['compiler_generated'] )
				  end
	  %% Line 201
	  <'call'> when 'true' ->
	      let <Module> =
		  %% Line 202
		  call 'cerl':'call_module'
		      (_cor1)
	      in  let <Name> =
		      %% Line 203
		      call 'cerl':'call_name'
			  (_cor1)
		  in  let <_cor31> =
			  %% Line 204
			  call 'cerl':'is_c_atom'
			      (Module)
		      in  let <_cor30> =
			      %% Line 204
			      call 'cerl':'is_c_atom'
				  (Name)
			  in  %% Line 204
			      case call 'erlang':'and'
				       (_cor31, _cor30) of
				%% Line 205
				<'true'> when 'true' ->
				    let <M> =
					%% Line 206
					call 'cerl':'atom_val'
					    (Module)
				    in  let <F> =
					    %% Line 207
					    call 'cerl':'atom_val'
						(Name)
					in  let <As> =
						%% Line 208
						call 'cerl':'call_args'
						    (_cor1)
					    in  let <_cor35> =
						    %% Line 209
						    call 'erlang':'length'
							(As)
						in  let <_85> =
							%% Line 209
							apply _cor0
							    ('safe', {M,F,_cor35})
						    in  %% Line 209
							case _85 of
							  %% Line 210
							  <'true'> when 'true' ->
							      %% Line 211
							      apply 'is_safe_expr_list'/2
								  (As, _cor0)
							  %% Line 212
							  <'false'> when 'true' ->
							      %% Line 213
							      'false'
							  ( <_cor36> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_85})
							    -| ['compiler_generated'] )
							end
				%% Line 215
				<'false'> when 'true' ->
				    %% Line 216
				    'false'
			      end
	  %% Line 218
	  <_cor41> when 'true' ->
	      %% Line 219
	      'false'
	end
'is_safe_expr_list'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],Check> when 'true' ->
	      let <_525> =
		  %% Line 223
		  apply 'is_safe_expr'/2
		      (E, _cor0)
	      in  %% Line 223
		  case _525 of
		    %% Line 224
		    <'true'> when 'true' ->
			%% Line 225
			apply 'is_safe_expr_list'/2
			    (Es, _cor0)
		    %% Line 226
		    <'false'> when 'true' ->
			%% Line 227
			'false'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_525})
		      -| ['compiler_generated'] )
		  end
	  %% Line 229
	  <[],_X_Check> when 'true' ->
	      %% Line 230
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_safe_expr_list',2}}] )
	    -| ['compiler_generated'] )
	end
'is_pure_expr'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	%% Line 251
	case call 'cerl':'type'
		 (_cor1) of
	  %% Line 252
	  <'literal'> when 'true' ->
	      %% Line 253
	      'true'
	  %% Line 254
	  <'var'> when 'true' ->
	      %% Line 255
	      'true'
	  %% Line 256
	  <'fun'> when 'true' ->
	      %% Line 257
	      'true'
	  %% Line 258
	  <'values'> when 'true' ->
	      let <_cor2> =
		  %% Line 259
		  call 'cerl':'values_es'
		      (_cor1)
	      in  %% Line 259
		  apply 'is_pure_expr_list'/2
		      (_cor2, _cor0)
	  %% Line 260
	  <'tuple'> when 'true' ->
	      let <_cor3> =
		  %% Line 261
		  call 'cerl':'tuple_es'
		      (_cor1)
	      in  %% Line 261
		  apply 'is_pure_expr_list'/2
		      (_cor3, _cor0)
	  %% Line 262
	  <'cons'> when 'true' ->
	      let <_cor4> =
		  %% Line 263
		  call 'cerl':'cons_hd'
		      (_cor1)
	      in  let <_1082> =
		      %% Line 263
		      apply 'is_pure_expr'/2
			  (_cor4, _cor0)
		  in  %% Line 263
		      case _1082 of
			%% Line 264
			<'true'> when 'true' ->
			    let <_cor5> =
				%% Line 265
				call 'cerl':'cons_tl'
				    (_cor1)
			    in  %% Line 265
				apply 'is_pure_expr'/2
				    (_cor5, _cor0)
			%% Line 266
			<'false'> when 'true' ->
			    %% Line 267
			    'false'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1082})
			  -| ['compiler_generated'] )
		      end
	  %% Line 269
	  <'let'> when 'true' ->
	      let <_cor7> =
		  %% Line 270
		  call 'cerl':'let_arg'
		      (_cor1)
	      in  let <_381> =
		      %% Line 270
		      apply 'is_pure_expr'/2
			  (_cor7, _cor0)
		  in  %% Line 270
		      case _381 of
			%% Line 271
			<'true'> when 'true' ->
			    let <_cor8> =
				%% Line 272
				call 'cerl':'let_body'
				    (_cor1)
			    in  %% Line 272
				apply 'is_pure_expr'/2
				    (_cor8, _cor0)
			%% Line 273
			<'false'> when 'true' ->
			    %% Line 274
			    'false'
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_381})
			  -| ['compiler_generated'] )
		      end
	  %% Line 276
	  <'letrec'> when 'true' ->
	      let <_cor10> =
		  %% Line 277
		  call 'cerl':'letrec_body'
		      (_cor1)
	      in  %% Line 277
		  apply 'is_pure_expr'/2
		      (_cor10, _cor0)
	  %% Line 278
	  <'seq'> when 'true' ->
	      let <_cor11> =
		  %% Line 279
		  call 'cerl':'seq_arg'
		      (_cor1)
	      in  let <_31> =
		      %% Line 279
		      apply 'is_pure_expr'/2
			  (_cor11, _cor0)
		  in  %% Line 279
		      case _31 of
			%% Line 280
			<'true'> when 'true' ->
			    let <_cor12> =
				%% Line 281
				call 'cerl':'seq_body'
				    (_cor1)
			    in  %% Line 281
				apply 'is_pure_expr'/2
				    (_cor12, _cor0)
			%% Line 282
			<'false'> when 'true' ->
			    %% Line 283
			    'false'
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_31})
			  -| ['compiler_generated'] )
		      end
	  %% Line 285
	  <'catch'> when 'true' ->
	      let <_cor14> =
		  %% Line 286
		  call 'cerl':'catch_body'
		      (_cor1)
	      in  %% Line 286
		  apply 'is_pure_expr'/2
		      (_cor14, _cor0)
	  %% Line 287
	  <'try'> when 'true' ->
	      let <_cor15> =
		  %% Line 288
		  call 'cerl':'try_arg'
		      (_cor1)
	      in  let <_1336> =
		      %% Line 288
		      apply 'is_pure_expr'/2
			  (_cor15, _cor0)
		  in  %% Line 288
		      case _1336 of
			%% Line 289
			<'true'> when 'true' ->
			    let <_cor16> =
				%% Line 290
				call 'cerl':'try_body'
				    (_cor1)
			    in  let <_1392> =
				    %% Line 290
				    apply 'is_pure_expr'/2
					(_cor16, _cor0)
				in  %% Line 290
				    case _1392 of
				      %% Line 291
				      <'true'> when 'true' ->
					  let <_cor17> =
					      %% Line 292
					      call 'cerl':'try_handler'
						  (_cor1)
					  in  %% Line 292
					      apply 'is_pure_expr'/2
						  (_cor17, _cor0)
				      %% Line 293
				      <'false'> when 'true' ->
					  %% Line 294
					  'false'
				      ( <_cor18> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_1392})
					-| ['compiler_generated'] )
				    end
			%% Line 296
			<'false'> when 'true' ->
			    %% Line 297
			    'false'
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1336})
			  -| ['compiler_generated'] )
		      end
	  %% Line 299
	  <'primop'> when 'true' ->
	      let <_cor20> =
		  %% Line 300
		  call 'cerl':'primop_name'
		      (_cor1)
	      in  let <Name> =
		      %% Line 300
		      call 'cerl':'atom_val'
			  (_cor20)
		  in  let <As> =
			  %% Line 301
			  call 'cerl':'primop_args'
			      (_cor1)
		      in  let <_cor23> =
			      %% Line 302
			      call 'erlang':'length'
				  (As)
			  in  let <_517> =
				  %% Line 302
				  apply _cor0
				      ('pure', {Name,_cor23})
			      in  %% Line 302
				  case _517 of
				    %% Line 303
				    <'true'> when 'true' ->
					%% Line 304
					apply 'is_pure_expr_list'/2
					    (As, _cor0)
				    %% Line 305
				    <'false'> when 'true' ->
					%% Line 306
					'false'
				    ( <_cor24> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_517})
				      -| ['compiler_generated'] )
				  end
	  %% Line 308
	  <'call'> when 'true' ->
	      let <Module> =
		  %% Line 309
		  call 'cerl':'call_module'
		      (_cor1)
	      in  let <Name> =
		      %% Line 310
		      call 'cerl':'call_name'
			  (_cor1)
		  in  let <_cor28> =
			  %% Line 311
			  call 'cerl':'is_c_atom'
			      (Module)
		      in  let <_cor27> =
			      %% Line 311
			      call 'cerl':'is_c_atom'
				  (Name)
			  in  %% Line 311
			      case call 'erlang':'and'
				       (_cor28, _cor27) of
				%% Line 312
				<'true'> when 'true' ->
				    let <M> =
					%% Line 313
					call 'cerl':'atom_val'
					    (Module)
				    in  let <F> =
					    %% Line 314
					    call 'cerl':'atom_val'
						(Name)
					in  let <As> =
						%% Line 315
						call 'cerl':'call_args'
						    (_cor1)
					    in  let <_cor32> =
						    %% Line 316
						    call 'erlang':'length'
							(As)
						in  let <_1188> =
							%% Line 316
							apply _cor0
							    ('pure', {M,F,_cor32})
						    in  %% Line 316
							case _1188 of
							  %% Line 317
							  <'true'> when 'true' ->
							      %% Line 318
							      apply 'is_pure_expr_list'/2
								  (As, _cor0)
							  %% Line 319
							  <'false'> when 'true' ->
							      %% Line 320
							      'false'
							  ( <_cor33> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_1188})
							    -| ['compiler_generated'] )
							end
				%% Line 322
				<'false'> when 'true' ->
				    %% Line 323
				    'false'
			      end
	  %% Line 325
	  <_cor38> when 'true' ->
	      %% Line 326
	      'false'
	end
'is_pure_expr_list'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],Check> when 'true' ->
	      let <_1027> =
		  %% Line 330
		  apply 'is_pure_expr'/2
		      (E, _cor0)
	      in  %% Line 330
		  case _1027 of
		    %% Line 331
		    <'true'> when 'true' ->
			%% Line 332
			apply 'is_pure_expr_list'/2
			    (Es, _cor0)
		    %% Line 333
		    <'false'> when 'true' ->
			%% Line 334
			'false'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1027})
		      -| ['compiler_generated'] )
		  end
	  %% Line 336
	  <[],_X_Check> when 'true' ->
	      %% Line 337
	      'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_pure_expr_list',2}}] )
	    -| ['compiler_generated'] )
	end
'reduce_expr'/1 =
    %% Line 357
    fun (_cor0) ->
	let <Check> = 'default_check'/2
	in  %% Line 359
	    apply 'reduce_expr'/2
		(_cor0, Check)
'reduce_expr'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	%% Line 364
	case call 'cerl':'type'
		 (_cor1) of
	  %% Line 365
	  <'values'> when 'true' ->
	      %% Line 366
	      case call 'cerl':'values_es'
		       (_cor1) of
		%% Line 367
		<[E1|[]]> when 'true' ->
		    %% Line 370
		    apply 'reduce_expr'/2
			(E1, _cor0)
		%% Line 371
		<_cor45> when 'true' ->
		    _cor1
	      end
	  %% Line 374
	  <'seq'> when 'true' ->
	      let <_cor3> =
		  %% Line 375
		  call 'cerl':'seq_arg'
		      (_cor1)
	      in  let <A> =
		      %% Line 375
		      apply 'reduce_expr'/2
			  (_cor3, _cor0)
		  in  let <_cor5> =
			  %% Line 376
			  call 'cerl':'seq_body'
			      (_cor1)
		      in  let <B> =
			      %% Line 376
			      apply 'reduce_expr'/2
				  (_cor5, _cor0)
			  in  let <_1360> =
				  %% Line 379
				  apply 'is_safe_expr'/2
				      (A, _cor0)
			      in  %% Line 379
				  case _1360 of
				    %% Line 380
				    <'true'> when 'true' ->
					B
				    %% Line 382
				    <'false'> when 'true' ->
					let <_1028> =
					    %% Line 383
					    call 'cerl':'is_c_seq'
						(B)
					in  %% Line 383
					    case _1028 of
					      %% Line 384
					      <'true'> when 'true' ->
						  let <B1> =
						      %% Line 391
						      call 'cerl':'seq_arg'
							  (B)
						  in  let <B2> =
							  %% Line 392
							  call 'cerl':'seq_body'
							      (B)
						      in  let <_cor9> =
							      %% Line 393
							      call 'cerl':'c_seq'
								  (A, B1)
							  in  %% Line 393
							      call 'cerl':'c_seq'
								  (_cor9, B2)
					      %% Line 394
					      <'false'> when 'true' ->
						  %% Line 395
						  call 'cerl':'c_seq'
						      (A, B)
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_1028})
						-| ['compiler_generated'] )
					    end
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_1360})
				      -| ['compiler_generated'] )
				  end
	  %% Line 398
	  <'let'> when 'true' ->
	      let <_cor12> =
		  %% Line 399
		  call 'cerl':'let_arg'
		      (_cor1)
	      in  let <A> =
		      %% Line 399
		      apply 'reduce_expr'/2
			  (_cor12, _cor0)
		  in  let <_1046> =
			  %% Line 400
			  call 'cerl':'is_c_seq'
			      (A)
		      in  %% Line 400
			  case _1046 of
			    %% Line 401
			    <'true'> when 'true' ->
				let <A1> =
				    %% Line 405
				    call 'cerl':'seq_arg'
					(A)
				in  let <A2> =
					%% Line 406
					call 'cerl':'seq_body'
					    (A)
				    in  let <_cor17> =
					    %% Line 407
					    call 'cerl':'let_vars'
						(_cor1)
					in  let <_cor16> =
						%% Line 408
						call 'cerl':'let_body'
						    (_cor1)
					    in  let <E1> =
						    %% Line 407
						    call 'cerl':'update_c_let'
							(_cor1, _cor17, A2, _cor16)
						in  let <_cor19> =
							%% Line 409
							apply 'reduce_expr'/2
							    (E1, _cor0)
						    in  %% Line 409
							call 'cerl':'c_seq'
							    (A1, _cor19)
			    %% Line 410
			    <'false'> when 'true' ->
				let <_cor20> =
				    %% Line 411
				    call 'cerl':'let_body'
					(_cor1)
				in  let <B> =
					%% Line 411
					apply 'reduce_expr'/2
					    (_cor20, _cor0)
				    in  let <Vs> =
					    %% Line 412
					    call 'cerl':'let_vars'
						(_cor1)
					in  %% Line 416
					    case call 'cerl':'type'
						     (B) of
					      %% Line 417
					      <'var'>
						  when try
							let <_cor23> =
							    call 'erlang':'length'
								(Vs)
							in  call 'erlang':'=:='
								(_cor23, 1)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  %% Line 419
						  case Vs of
						    <[V|[]]> when 'true' ->
							let <N1> =
							    %% Line 420
							    call 'cerl':'var_name'
								(V)
							in  let <N2> =
								%% Line 421
								call 'cerl':'var_name'
								    (B)
							    in  %% Line 422
								case <> of
								  <>
								      when call 'erlang':'=:='
									    (N1,
									     N2) ->
								      A
								  %% Line 425
								  <> when 'true' ->
								      let <_cor27> =
									  %% Line 429
									  call 'cerl':'c_seq'
									      (A, B)
								      in  %% Line 429
									  apply 'reduce_expr'/2
									      (_cor27, _cor0)
								end
						    ( <_cor24> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',Vs})
						      -| ['compiler_generated'] )
						  end
					      %% Line 431
					      <'literal'> when 'true' ->
						  let <_cor28> =
						      %% Line 434
						      call 'cerl':'c_seq'
							  (A, B)
						  in  %% Line 434
						      apply 'reduce_expr'/2
							  (_cor28, _cor0)
					      %% Line 435
					      <_cor46> when 'true' ->
						  %% Line 436
						  call 'cerl':'update_c_let'
						      (_cor1, Vs, A, B)
					    end
			    ( <_cor30> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_1046})
			      -| ['compiler_generated'] )
			  end
	  %% Line 439
	  <'try'> when 'true' ->
	      let <_cor31> =
		  %% Line 441
		  call 'cerl':'try_arg'
		      (_cor1)
	      in  let <A> =
		      %% Line 441
		      apply 'reduce_expr'/2
			  (_cor31, _cor0)
		  in  let <_cor33> =
			  %% Line 442
			  call 'cerl':'try_body'
			      (_cor1)
		      in  let <B> =
			      %% Line 442
			      apply 'reduce_expr'/2
				  (_cor33, _cor0)
			  in  let <_830> =
				  %% Line 443
				  apply 'is_safe_expr'/2
				      (A, _cor0)
			      in  %% Line 443
				  case _830 of
				    %% Line 444
				    <'true'> when 'true' ->
					B
				    %% Line 446
				    <'false'> when 'true' ->
					let <_cor37> =
					    %% Line 447
					    call 'cerl':'try_vars'
						(_cor1)
					in  let <_cor36> =
						%% Line 448
						call 'cerl':'try_evars'
						    (_cor1)
					    in  let <_cor35> =
						    %% Line 449
						    call 'cerl':'try_handler'
							(_cor1)
						in  %% Line 447
						    call 'cerl':'update_c_try'
							(_cor1, A, _cor37, B, _cor36, _cor35)
				    ( <_cor38> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_830})
				      -| ['compiler_generated'] )
				  end
	  %% Line 451
	  <'catch'> when 'true' ->
	      let <_cor39> =
		  %% Line 453
		  call 'cerl':'catch_body'
		      (_cor1)
	      in  let <B> =
		      %% Line 453
		      apply 'reduce_expr'/2
			  (_cor39, _cor0)
		  in  let <_46> =
			  %% Line 454
			  apply 'is_safe_expr'/2
			      (B, _cor0)
		      in  %% Line 454
			  case _46 of
			    %% Line 455
			    <'true'> when 'true' ->
				B
			    %% Line 457
			    <'false'> when 'true' ->
				%% Line 458
				call 'cerl':'update_c_catch'
				    (_cor1, B)
			    ( <_cor41> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_46})
			      -| ['compiler_generated'] )
			  end
	  %% Line 460
	  <_cor47> when 'true' ->
	      _cor1
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cerl_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cerl_lib', _cor0)
end