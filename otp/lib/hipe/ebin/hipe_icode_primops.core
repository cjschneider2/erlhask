module 'hipe_icode_primops' ['arg_types'/1,
			     'fails'/1,
			     'is_safe'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'pp'/2,
			     'type'/1,
			     'type'/2]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'is_safe',1},[{'type',46,'fun',[{'type',46,'product',[{'type',46,'icode_primop',[]}]}|[{'type',46,'boolean',[]}]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'fails',1},[{'type',144,'fun',[{'type',144,'product',[{'type',144,'icode_funcall',[]}]}|[{'type',144,'boolean',[]}]]}]}],
		%% Line 253
		'spec' =
		    %% Line 253
		    [{{'pp',2},[{'type',253,'fun',[{'type',253,'product',[{'remote_type',253,[{'atom',253,'io'}|[{'atom',253,'device'}|[[]]]]}|[{'type',253,'icode_primop',[]}]]}|[{'atom',253,'ok'}]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'type',2},[{'type',368,'fun',[{'type',368,'product',[{'type',368,'icode_funcall',[]}|[{'type',368,'list',[{'remote_type',368,[{'atom',368,'erl_types'}|[{'atom',368,'erl_type'}|[[]]]]}]}]]}|[{'remote_type',368,[{'atom',368,'erl_types'}|[{'atom',368,'erl_type'}|[[]]]]}]]}]}],
		%% Line 733
		'spec' =
		    %% Line 733
		    [{{'type',1},[{'type',733,'fun',[{'type',733,'product',[{'type',733,'icode_funcall',[]}]}|[{'remote_type',733,[{'atom',733,'erl_types'}|[{'atom',733,'erl_type'}|[[]]]]}]]}]}],
		%% Line 912
		'spec' =
		    %% Line 912
		    [{{'arg_types',1},[{'type',912,'fun',[{'type',912,'product',[{'type',912,'icode_funcall',[]}]}|[{'type',912,'union',[{'type',912,'list',[{'remote_type',912,[{'atom',912,'erl_types'}|[{'atom',912,'erl_type'}|[[]]]]}]}|[{'atom',912,'unknown'}]]}]]}]}]]
'is_safe'/1 =
    %% Line 48
    fun (_cor0) ->
	case _cor0 of
	  <'+'> when 'true' ->
	      'false'
	  %% Line 49
	  <'/'> when 'true' ->
	      'false'
	  %% Line 50
	  <'*'> when 'true' ->
	      'false'
	  %% Line 51
	  <'-'> when 'true' ->
	      'false'
	  %% Line 52
	  <'bsr'> when 'true' ->
	      'false'
	  %% Line 53
	  <'bsl'> when 'true' ->
	      'false'
	  %% Line 54
	  <'band'> when 'true' ->
	      'false'
	  %% Line 55
	  <'bor'> when 'true' ->
	      'false'
	  %% Line 56
	  <'bxor'> when 'true' ->
	      'false'
	  %% Line 57
	  <'bnot'> when 'true' ->
	      'false'
	  %% Line 58
	  <'div'> when 'true' ->
	      'false'
	  %% Line 59
	  <'rem'> when 'true' ->
	      'false'
	  %% Line 60
	  <'call_fun'> when 'true' ->
	      'false'
	  %% Line 61
	  <'check_get_msg'> when 'true' ->
	      'false'
	  %% Line 62
	  <'clear_timeout'> when 'true' ->
	      'false'
	  %% Line 63
	  <'cons'> when 'true' ->
	      'true'
	  %% Line 65
	  <'extra_unsafe_add'> when 'true' ->
	      'true'
	  %% Line 66
	  <'extra_unsafe_sub'> when 'true' ->
	      'true'
	  %% Line 67
	  <'fcheckerror'> when 'true' ->
	      'false'
	  %% Line 68
	  <'fclearerror'> when 'true' ->
	      'false'
	  %% Line 69
	  <'fp_add'> when 'true' ->
	      'false'
	  %% Line 70
	  <'fp_div'> when 'true' ->
	      'false'
	  %% Line 71
	  <'fp_mul'> when 'true' ->
	      'false'
	  %% Line 72
	  <'fp_sub'> when 'true' ->
	      'false'
	  %% Line 73
	  <'mktuple'> when 'true' ->
	      'true'
	  %% Line 74
	  <'next_msg'> when 'true' ->
	      'false'
	  %% Line 75
	  <'redtest'> when 'true' ->
	      'false'
	  %% Line 76
	  <'select_msg'> when 'true' ->
	      'false'
	  %% Line 77
	  <'self'> when 'true' ->
	      'true'
	  %% Line 78
	  <'set_timeout'> when 'true' ->
	      'false'
	  %% Line 79
	  <'suspend_msg'> when 'true' ->
	      'false'
	  %% Line 80
	  <'unsafe_add'> when 'true' ->
	      'true'
	  %% Line 81
	  <'unsafe_band'> when 'true' ->
	      'true'
	  %% Line 82
	  <'unsafe_bnot'> when 'true' ->
	      'true'
	  %% Line 83
	  <'unsafe_bor'> when 'true' ->
	      'true'
	  %% Line 84
	  <'unsafe_bsl'> when 'true' ->
	      'true'
	  %% Line 85
	  <'unsafe_bsr'> when 'true' ->
	      'true'
	  %% Line 86
	  <'unsafe_bxor'> when 'true' ->
	      'true'
	  %% Line 87
	  <'unsafe_hd'> when 'true' ->
	      'true'
	  %% Line 88
	  <'unsafe_sub'> when 'true' ->
	      'true'
	  %% Line 89
	  <'unsafe_tag_float'> when 'true' ->
	      'true'
	  %% Line 90
	  <'unsafe_tl'> when 'true' ->
	      'true'
	  %% Line 91
	  <'unsafe_untag_float'> when 'true' ->
	      'true'
	  %% Line 92
	  <{'apply_N',_cor2}> when 'true' ->
	      'false'
	  %% Line 93
	  <{'closure_element',_cor3}> when 'true' ->
	      'true'
	  %% Line 94
	  <{'element',_cor4}> when 'true' ->
	      'false'
	  %% Line 96
	  <{'hipe_bs_primop',{'bs_start_match',_cor5}}> when 'true' ->
	      'false'
	  %% Line 97
	  <{'hipe_bs_primop',{{'bs_start_match','bitstr'},_cor6}}> when 'true' ->
	      'true'
	  %% Line 98
	  <{'hipe_bs_primop',{{'bs_start_match','ok_matchstate'},_cor7}}> when 'true' ->
	      'false'
	  %% Line 99
	  <{'hipe_bs_primop',{'bs_get_binary',_cor8,_cor9}}> when 'true' ->
	      'false'
	  %% Line 100
	  <{'hipe_bs_primop',{'bs_get_binary_all',_cor10,_cor11}}> when 'true' ->
	      'false'
	  %% Line 101
	  <{'hipe_bs_primop',{'bs_get_binary_all_2',_cor12,_cor13}}> when 'true' ->
	      'false'
	  %% Line 102
	  <{'hipe_bs_primop',{'bs_get_integer',_cor14,_cor15}}> when 'true' ->
	      'false'
	  %% Line 103
	  <{'hipe_bs_primop',{'bs_get_float',_cor16,_cor17}}> when 'true' ->
	      'false'
	  %% Line 104
	  <{'hipe_bs_primop',{'bs_skip_bits',_cor18}}> when 'true' ->
	      'false'
	  %% Line 105
	  <{'hipe_bs_primop',{'bs_skip_bits_all',_cor19,_cor20}}> when 'true' ->
	      'false'
	  %% Line 106
	  <{'hipe_bs_primop',{'bs_test_tail',_cor21}}> when 'true' ->
	      'false'
	  %% Line 107
	  <{'hipe_bs_primop',{'bs_restore',_cor22}}> when 'true' ->
	      'true'
	  %% Line 108
	  <{'hipe_bs_primop',{'bs_save',_cor23}}> when 'true' ->
	      'true'
	  %% Line 109
	  <{'hipe_bs_primop',{'bs_add',_cor24}}> when 'true' ->
	      'false'
	  %% Line 110
	  <{'hipe_bs_primop',{'bs_add',_cor25,_cor26}}> when 'true' ->
	      'false'
	  %% Line 111
	  <{'hipe_bs_primop','bs_bits_to_bytes'}> when 'true' ->
	      'false'
	  %% Line 112
	  <{'hipe_bs_primop','bs_bits_to_bytes2'}> when 'true' ->
	      'false'
	  %% Line 113
	  <{'hipe_bs_primop',{'bs_init',_cor27}}> when 'true' ->
	      'false'
	  %% Line 114
	  <{'hipe_bs_primop',{'bs_init',_cor28,_cor29}}> when 'true' ->
	      'false'
	  %% Line 115
	  <{'hipe_bs_primop',{'bs_init_bits',_cor30}}> when 'true' ->
	      'false'
	  %% Line 116
	  <{'hipe_bs_primop',{'bs_init_bits',_cor31,_cor32}}> when 'true' ->
	      'false'
	  %% Line 117
	  <{'hipe_bs_primop',{'bs_put_binary',_cor33,_cor34}}> when 'true' ->
	      'false'
	  %% Line 118
	  <{'hipe_bs_primop',{'bs_put_binary_all',_cor35}}> when 'true' ->
	      'false'
	  %% Line 119
	  <{'hipe_bs_primop',{'bs_put_float',_cor36,_cor37,_cor38}}> when 'true' ->
	      'false'
	  %% Line 120
	  <{'hipe_bs_primop',{'bs_put_integer',_cor39,_cor40,_cor41}}> when 'true' ->
	      'false'
	  %% Line 121
	  <{'hipe_bs_primop',{'bs_put_string',_cor42,_cor43}}> when 'true' ->
	      'false'
	  %% Line 122
	  <{'hipe_bs_primop','bs_put_utf8'}> when 'true' ->
	      'false'
	  %% Line 123
	  <{'hipe_bs_primop','bs_utf8_size'}> when 'true' ->
	      'true'
	  %% Line 124
	  <{'hipe_bs_primop','bs_get_utf8'}> when 'true' ->
	      'false'
	  %% Line 125
	  <{'hipe_bs_primop','bs_utf16_size'}> when 'true' ->
	      'true'
	  %% Line 126
	  <{'hipe_bs_primop',{'bs_put_utf16',_cor44}}> when 'true' ->
	      'false'
	  %% Line 127
	  <{'hipe_bs_primop',{'bs_get_utf16',_cor45}}> when 'true' ->
	      'false'
	  %% Line 128
	  <{'hipe_bs_primop','bs_validate_unicode'}> when 'true' ->
	      'false'
	  %% Line 129
	  <{'hipe_bs_primop','bs_validate_unicode_retract'}> when 'true' ->
	      'false'
	  %% Line 130
	  <{'hipe_bs_primop',{'unsafe_bs_put_integer',_cor46,_cor47,_cor48}}> when 'true' ->
	      'false'
	  %% Line 131
	  <{'hipe_bs_primop','bs_final'}> when 'true' ->
	      'true'
	  %% Line 132
	  <{'hipe_bs_primop','bs_context_to_binary'}> when 'true' ->
	      'true'
	  %% Line 133
	  <{'hipe_bs_primop',{'bs_test_unit',_cor49}}> when 'true' ->
	      'false'
	  %% Line 134
	  <{'hipe_bs_primop',{'bs_match_string',_cor50,_cor51}}> when 'true' ->
	      'false'
	  %% Line 135
	  <{'hipe_bs_primop',{'bs_append',_cor52,_cor53,_cor54,_cor55}}> when 'true' ->
	      'false'
	  %% Line 136
	  <{'hipe_bs_primop',{'bs_private_append',_cor56,_cor57}}> when 'true' ->
	      'false'
	  %% Line 137
	  <{'hipe_bs_primop','bs_init_writable'}> when 'true' ->
	      'true'
	  %% Line 138
	  <{'mkfun',_cor58,_cor59,_cor60}> when 'true' ->
	      'true'
	  %% Line 139
	  <{'unsafe_element',_cor61}> when 'true' ->
	      'true'
	  %% Line 140
	  <{'unsafe_update_element',_cor62}> when 'true' ->
	      'true'
	  %% Line 141
	  <'debug_native_called'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_safe',1}}] )
	    -| ['compiler_generated'] )
	end
'fails'/1 =
    %% Line 146
    fun (_cor0) ->
	case _cor0 of
	  <'+'> when 'true' ->
	      'true'
	  %% Line 147
	  <'-'> when 'true' ->
	      'true'
	  %% Line 148
	  <'*'> when 'true' ->
	      'true'
	  %% Line 149
	  <'/'> when 'true' ->
	      'true'
	  %% Line 150
	  <'bnot'> when 'true' ->
	      'true'
	  %% Line 151
	  <'band'> when 'true' ->
	      'true'
	  %% Line 152
	  <'bor'> when 'true' ->
	      'true'
	  %% Line 153
	  <'bsl'> when 'true' ->
	      'true'
	  %% Line 154
	  <'bsr'> when 'true' ->
	      'true'
	  %% Line 155
	  <'bxor'> when 'true' ->
	      'true'
	  %% Line 156
	  <'div'> when 'true' ->
	      'true'
	  %% Line 157
	  <'rem'> when 'true' ->
	      'true'
	  %% Line 158
	  <'call_fun'> when 'true' ->
	      'true'
	  %% Line 159
	  <'check_get_msg'> when 'true' ->
	      'true'
	  %% Line 160
	  <'clear_timeout'> when 'true' ->
	      'false'
	  %% Line 161
	  <'cons'> when 'true' ->
	      'false'
	  %% Line 162
	  <'conv_to_float'> when 'true' ->
	      'true'
	  %% Line 163
	  <'extra_unsafe_add'> when 'true' ->
	      'false'
	  %% Line 164
	  <'extra_unsafe_sub'> when 'true' ->
	      'false'
	  %% Line 165
	  <'fcheckerror'> when 'true' ->
	      'true'
	  %% Line 166
	  <'fclearerror'> when 'true' ->
	      'false'
	  %% Line 167
	  <'fp_add'> when 'true' ->
	      'false'
	  %% Line 168
	  <'fp_div'> when 'true' ->
	      'false'
	  %% Line 169
	  <'fp_mul'> when 'true' ->
	      'false'
	  %% Line 170
	  <'fp_sub'> when 'true' ->
	      'false'
	  %% Line 171
	  <'mktuple'> when 'true' ->
	      'false'
	  %% Line 172
	  <'next_msg'> when 'true' ->
	      'false'
	  %% Line 173
	  <'redtest'> when 'true' ->
	      'false'
	  %% Line 174
	  <'select_msg'> when 'true' ->
	      'false'
	  %% Line 175
	  <'self'> when 'true' ->
	      'false'
	  %% Line 176
	  <'set_timeout'> when 'true' ->
	      'true'
	  %% Line 177
	  <'suspend_msg'> when 'true' ->
	      'false'
	  %% Line 178
	  <'unsafe_untag_float'> when 'true' ->
	      'false'
	  %% Line 179
	  <'unsafe_tag_float'> when 'true' ->
	      'false'
	  %% Line 180
	  <'unsafe_add'> when 'true' ->
	      'false'
	  %% Line 181
	  <'unsafe_band'> when 'true' ->
	      'false'
	  %% Line 182
	  <'unsafe_bnot'> when 'true' ->
	      'false'
	  %% Line 183
	  <'unsafe_bor'> when 'true' ->
	      'false'
	  %% Line 184
	  <'unsafe_bsl'> when 'true' ->
	      'false'
	  %% Line 185
	  <'unsafe_bsr'> when 'true' ->
	      'false'
	  %% Line 186
	  <'unsafe_bxor'> when 'true' ->
	      'false'
	  %% Line 187
	  <'unsafe_hd'> when 'true' ->
	      'false'
	  %% Line 188
	  <'unsafe_sub'> when 'true' ->
	      'false'
	  %% Line 190
	  <'unsafe_tl'> when 'true' ->
	      'false'
	  %% Line 192
	  <{'apply_N',_cor11}> when 'true' ->
	      'true'
	  %% Line 193
	  <{'closure_element',_cor12}> when 'true' ->
	      'false'
	  %% Line 194
	  <{'element',_cor13}> when 'true' ->
	      'true'
	  %% Line 196
	  <{'hipe_bs_primop',{'bs_start_match',_cor14}}> when 'true' ->
	      'true'
	  %% Line 197
	  <{'hipe_bs_primop',{{'bs_start_match','bitstr'},_cor15}}> when 'true' ->
	      'true'
	  %% Line 198
	  <{'hipe_bs_primop',{{'bs_start_match','ok_matchstate'},_cor16}}> when 'true' ->
	      'true'
	  %% Line 199
	  <{'hipe_bs_primop',{'bs_get_binary',_cor17,_cor18}}> when 'true' ->
	      'true'
	  %% Line 200
	  <{'hipe_bs_primop',{'bs_get_binary_all',_cor19,_cor20}}> when 'true' ->
	      'true'
	  %% Line 201
	  <{'hipe_bs_primop',{'bs_get_binary_all_2',_cor21,_cor22}}> when 'true' ->
	      'true'
	  %% Line 202
	  <{'hipe_bs_primop',{'bs_get_integer',_cor23,_cor24}}> when 'true' ->
	      'true'
	  %% Line 203
	  <{'hipe_bs_primop',{'bs_get_float',_cor25,_cor26}}> when 'true' ->
	      'true'
	  %% Line 204
	  <{'hipe_bs_primop',{'bs_skip_bits',_cor27}}> when 'true' ->
	      'true'
	  %% Line 205
	  <{'hipe_bs_primop',{'bs_skip_bits_all',_cor28,_cor29}}> when 'true' ->
	      'true'
	  %% Line 206
	  <{'hipe_bs_primop',{'bs_test_tail',_cor30}}> when 'true' ->
	      'true'
	  %% Line 207
	  <{'hipe_bs_primop',{'bs_restore',_cor31}}> when 'true' ->
	      'false'
	  %% Line 208
	  <{'hipe_bs_primop',{'bs_save',_cor32}}> when 'true' ->
	      'false'
	  %% Line 209
	  <{'hipe_bs_primop','bs_context_to_binary'}> when 'true' ->
	      'false'
	  %% Line 210
	  <{'hipe_bs_primop',{'bs_test_unit',_cor33}}> when 'true' ->
	      'true'
	  %% Line 211
	  <{'hipe_bs_primop',{'bs_match_string',_cor34,_cor35}}> when 'true' ->
	      'true'
	  %% Line 212
	  <{'hipe_bs_primop',{'bs_add',_cor36}}> when 'true' ->
	      'true'
	  %% Line 213
	  <{'hipe_bs_primop',{'bs_add',_cor37,_cor38}}> when 'true' ->
	      'true'
	  %% Line 214
	  <{'hipe_bs_primop','bs_bits_to_bytes'}> when 'true' ->
	      'true'
	  %% Line 215
	  <{'hipe_bs_primop','bs_bits_to_bytes2'}> when 'true' ->
	      'true'
	  %% Line 216
	  <{'hipe_bs_primop',{'bs_init',_cor39}}> when 'true' ->
	      'true'
	  %% Line 217
	  <{'hipe_bs_primop',{'bs_init',_cor40,_cor41}}> when 'true' ->
	      'true'
	  %% Line 218
	  <{'hipe_bs_primop',{'bs_init_bits',_cor42}}> when 'true' ->
	      'true'
	  %% Line 219
	  <{'hipe_bs_primop',{'bs_init_bits',_cor43,_cor44}}> when 'true' ->
	      'true'
	  %% Line 220
	  <{'hipe_bs_primop',{'bs_put_binary',_cor45,_cor46}}> when 'true' ->
	      'true'
	  %% Line 221
	  <{'hipe_bs_primop',{'bs_put_binary_all',_cor47}}> when 'true' ->
	      'true'
	  %% Line 222
	  <{'hipe_bs_primop',{'bs_put_float',_cor48,_cor49,_cor50}}> when 'true' ->
	      'true'
	  %% Line 223
	  <{'hipe_bs_primop',{'bs_put_integer',_cor51,_cor52,_cor53}}> when 'true' ->
	      'true'
	  %% Line 224
	  <{'hipe_bs_primop',{'bs_put_string',_cor54,_cor55}}> when 'true' ->
	      'true'
	  %% Line 225
	  <{'hipe_bs_primop','bs_put_utf8'}> when 'true' ->
	      'true'
	  %% Line 226
	  <{'hipe_bs_primop','bs_utf8_size'}> when 'true' ->
	      'false'
	  %% Line 227
	  <{'hipe_bs_primop','bs_get_utf8'}> when 'true' ->
	      'true'
	  %% Line 228
	  <{'hipe_bs_primop','bs_utf16_size'}> when 'true' ->
	      'false'
	  %% Line 229
	  <{'hipe_bs_primop',{'bs_put_utf16',_cor56}}> when 'true' ->
	      'true'
	  %% Line 230
	  <{'hipe_bs_primop',{'bs_get_utf16',_cor57}}> when 'true' ->
	      'true'
	  %% Line 231
	  <{'hipe_bs_primop','bs_validate_unicode'}> when 'true' ->
	      'true'
	  %% Line 232
	  <{'hipe_bs_primop','bs_validate_unicode_retract'}> when 'true' ->
	      'true'
	  %% Line 233
	  <{'hipe_bs_primop',{'unsafe_bs_put_integer',_cor58,_cor59,_cor60}}> when 'true' ->
	      'true'
	  %% Line 234
	  <{'hipe_bs_primop','bs_final'}> when 'true' ->
	      'false'
	  %% Line 235
	  <{'hipe_bs_primop',{'bs_append',_cor61,_cor62,_cor63,_cor64}}> when 'true' ->
	      'true'
	  %% Line 236
	  <{'hipe_bs_primop',{'bs_private_append',_cor65,_cor66}}> when 'true' ->
	      'true'
	  %% Line 237
	  <{'hipe_bs_primop','bs_init_writable'}> when 'true' ->
	      'true'
	  %% Line 238
	  <{'mkfun',_cor67,_cor68,_cor69}> when 'true' ->
	      'false'
	  %% Line 239
	  <{'unsafe_element',_cor70}> when 'true' ->
	      'false'
	  %% Line 240
	  <{'unsafe_update_element',_cor71}> when 'true' ->
	      'false'
	  %% Line 241
	  <'debug_native_called'> when 'true' ->
	      'false'
	  %% Line 245
	  <{M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'=<'
					(0, A)
				in  let <_cor5> =
					call 'erlang':'=<'
					    (A, 255)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor4, _cor5)
					in  let <_cor7> =
						call 'erlang':'and'
						    (_cor3, _cor6)
					    in  let <_cor8> =
						    call 'erlang':'and'
							(_cor2, _cor7)
						in  call 'erlang':'and'
							(_cor1, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 247
		  call 'erl_bifs':'is_safe'
		      (M, F, A)
	      in  %% Line 247
		  call 'erlang':'not'
		      (_cor9)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'fails',1}}] )
	    -| ['compiler_generated'] )
	end
'pp'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	%% Line 256
	case _cor0 of
	  %% Line 257
	  <{'apply_N',N}> when 'true' ->
	      %% Line 258
	      call 'io':'format'
		  (_cor1, [97|[112|[112|[108|[121|[95|[78|[60|[126|[119|[62|[47]]]]]]]]]]]], [N|[]])
	  %% Line 259
	  <{'closure_element',N}> when 'true' ->
	      %% Line 260
	      call 'io':'format'
		  (_cor1, [99|[108|[111|[115|[117|[114|[101|[95|[101|[108|[101|[109|[101|[110|[116|[60|[126|[119|[62]]]]]]]]]]]]]]]]]]], [N|[]])
	  %% Line 261
	  <{'element',_cor6}> when 'true' ->
	      %% Line 262
	      call 'io':'format'
		  (_cor1, [101|[108|[101|[109|[101|[110|[116]]]]]]], [])
	  %% Line 263
	  <{'gc_test',N}> when 'true' ->
	      %% Line 264
	      call 'io':'format'
		  (_cor1, [103|[99|[95|[116|[101|[115|[116|[60|[126|[119|[62]]]]]]]]]]], [N|[]])
	  %% Line 265
	  <{'hipe_bs_primop',BsOp}> when 'true' ->
	      %% Line 266
	      case BsOp of
		%% Line 267
		<{'bs_put_binary_all',Flags}> when 'true' ->
		    %% Line 268
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[98|[105|[110|[97|[114|[121|[95|[97|[108|[108|[60|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [Flags|[]])
		%% Line 269
		<{'bs_put_binary',Size}> when 'true' ->
		    %% Line 270
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[98|[105|[110|[97|[114|[121|[60|[126|[119|[62]]]]]]]]]]]]]]]]], [Size|[]])
		%% Line 271
		<{'bs_put_binary',Flags,Size}> when 'true' ->
		    %% Line 272
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[98|[105|[110|[97|[114|[121|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [Flags|[Size|[]]])
		%% Line 273
		<{'bs_put_float',Flags,Size,_X_ConstInfo}> when 'true' ->
		    %% Line 274
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[102|[108|[111|[97|[116|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]], [Flags|[Size|[]]])
		%% Line 275
		<{'bs_put_string',String,SizeInBytes}> when 'true' ->
		    %% Line 276
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[115|[116|[114|[105|[110|[103|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [String|[SizeInBytes|[]]])
		%% Line 277
		<{'bs_put_integer',Bits,Flags,_X_ConstInfo}> when 'true' ->
		    %% Line 278
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[105|[110|[116|[101|[103|[101|[114|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]], [Bits|[Flags|[]]])
		%% Line 279
		<{'unsafe_bs_put_integer',Bits,Flags,_X_ConstInfo}> when 'true' ->
		    %% Line 280
		    call 'io':'format'
			(_cor1, [117|[110|[115|[97|[102|[101|[95|[98|[115|[95|[112|[117|[116|[95|[105|[110|[116|[101|[103|[101|[114|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bits|[Flags|[]]])
		%% Line 281
		<{'bs_skip_bits_all',Unit,Flags}> when 'true' ->
		    %% Line 282
		    call 'io':'format'
			(_cor1, [98|[115|[95|[115|[107|[105|[112|[95|[98|[105|[116|[115|[95|[97|[108|[108|[60|[126|[119|[44|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]], [Unit|[Flags|[]]])
		%% Line 283
		<{'bs_skip_bits',Unit}> when 'true' ->
		    %% Line 284
		    call 'io':'format'
			(_cor1, [98|[115|[95|[115|[107|[105|[112|[95|[98|[105|[116|[115|[60|[126|[119|[62]]]]]]]]]]]]]]]], [Unit|[]])
		%% Line 285
		<{'bs_start_match',Max}> when 'true' ->
		    %% Line 286
		    call 'io':'format'
			(_cor1, [98|[115|[95|[115|[116|[97|[114|[116|[95|[109|[97|[116|[99|[104|[60|[126|[119|[62]]]]]]]]]]]]]]]]]], [Max|[]])
		%% Line 287
		<{{'bs_start_match',Type},Max}> when 'true' ->
		    %% Line 288
		    call 'io':'format'
			(_cor1, [98|[115|[95|[115|[116|[97|[114|[116|[95|[109|[97|[116|[99|[104|[60|[126|[119|[44|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [Type|[Max|[]]])
		%% Line 289
		<{'bs_match_string',String,SizeInBytes}> when 'true' ->
		    %% Line 290
		    call 'io':'format'
			(_cor1, [98|[115|[95|[109|[97|[116|[99|[104|[95|[115|[116|[114|[105|[110|[103|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]], [String|[SizeInBytes|[]]])
		%% Line 291
		<{'bs_get_integer',Size,Flags}> when 'true' ->
		    %% Line 292
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[105|[110|[116|[101|[103|[101|[114|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]], [Size|[Flags|[]]])
		%% Line 293
		<{'bs_get_float',Size,Flags}> when 'true' ->
		    %% Line 294
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[102|[108|[111|[97|[116|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]], [Size|[Flags|[]]])
		%% Line 295
		<{'bs_get_binary',Size,Flags}> when 'true' ->
		    %% Line 296
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[98|[105|[110|[97|[114|[121|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [Size|[Flags|[]]])
		%% Line 297
		<{'bs_get_binary_all',Unit,Flags}> when 'true' ->
		    %% Line 298
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[98|[105|[110|[97|[114|[121|[95|[97|[108|[108|[60|[126|[119|[44|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]], [Unit|[Flags|[]]])
		%% Line 299
		<{'bs_get_binary_all_2',Unit,Flags}> when 'true' ->
		    %% Line 300
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[98|[105|[110|[97|[114|[121|[95|[97|[108|[108|[60|[126|[119|[44|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]], [Unit|[Flags|[]]])
		%% Line 301
		<{'bs_test_tail',NumBits}> when 'true' ->
		    %% Line 302
		    call 'io':'format'
			(_cor1, [98|[115|[95|[116|[101|[115|[116|[95|[116|[97|[105|[108|[60|[126|[119|[62]]]]]]]]]]]]]]]], [NumBits|[]])
		%% Line 303
		<{'bs_test_unit',Unit}> when 'true' ->
		    %% Line 304
		    call 'io':'format'
			(_cor1, [98|[115|[95|[116|[101|[115|[116|[95|[117|[110|[105|[116|[60|[126|[119|[62]]]]]]]]]]]]]]]], [Unit|[]])
		%% Line 305
		<'bs_context_to_binary'> when 'true' ->
		    %% Line 306
		    call 'io':'format'
			(_cor1, [98|[115|[95|[99|[111|[110|[116|[101|[120|[116|[95|[116|[111|[95|[98|[105|[110|[97|[114|[121]]]]]]]]]]]]]]]]]]]], [])
		%% Line 307
		<{'bs_restore',Index}> when 'true' ->
		    %% Line 308
		    call 'io':'format'
			(_cor1, [98|[115|[95|[114|[101|[115|[116|[111|[114|[101|[60|[126|[119|[62]]]]]]]]]]]]]], [Index|[]])
		%% Line 309
		<{'bs_save',Index}> when 'true' ->
		    %% Line 310
		    call 'io':'format'
			(_cor1, [98|[115|[95|[115|[97|[118|[101|[60|[126|[119|[62]]]]]]]]]]], [Index|[]])
		%% Line 311
		<{'bs_init',Size,Flags}> when 'true' ->
		    %% Line 312
		    call 'io':'format'
			(_cor1, [98|[115|[95|[105|[110|[105|[116|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]], [Size|[Flags|[]]])
		%% Line 313
		<{'bs_init',Flags}> when 'true' ->
		    %% Line 314
		    call 'io':'format'
			(_cor1, [98|[115|[95|[105|[110|[105|[116|[60|[126|[119|[62]]]]]]]]]]], [Flags|[]])
		%% Line 315
		<{'bs_init_bits',Size,Flags}> when 'true' ->
		    %% Line 316
		    call 'io':'format'
			(_cor1, [98|[115|[95|[105|[110|[105|[116|[95|[98|[105|[116|[115|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]], [Size|[Flags|[]]])
		%% Line 317
		<{'bs_init_bits',Flags}> when 'true' ->
		    %% Line 318
		    call 'io':'format'
			(_cor1, [98|[115|[95|[105|[110|[105|[116|[95|[98|[105|[116|[115|[60|[126|[119|[62]]]]]]]]]]]]]]]], [Flags|[]])
		%% Line 319
		<{'bs_add',Unit}> when 'true' ->
		    %% Line 320
		    call 'io':'format'
			(_cor1, [98|[115|[95|[97|[100|[100|[60|[126|[119|[62]]]]]]]]]], [Unit|[]])
		%% Line 321
		<{'bs_add',Const,Unit}> when 'true' ->
		    %% Line 322
		    call 'io':'format'
			(_cor1, [98|[115|[95|[97|[100|[100|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]], [Const|[Unit|[]]])
		%% Line 323
		<{'bs_append',X,Y,Z,W}> when 'true' ->
		    %% Line 324
		    call 'io':'format'
			(_cor1, [98|[115|[95|[97|[112|[112|[101|[110|[100|[60|[126|[119|[44|[32|[126|[119|[44|[32|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]]], [X|[Y|[Z|[W|[]]]]])
		%% Line 325
		<{'bs_private_append',U,Flags}> when 'true' ->
		    %% Line 326
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[114|[105|[118|[97|[116|[101|[95|[97|[112|[112|[101|[110|[100|[60|[126|[119|[44|[32|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]]], [U|[Flags|[]]])
		%% Line 327
		<'bs_bits_to_bytes'> when 'true' ->
		    %% Line 328
		    call 'io':'format'
			(_cor1, [98|[115|[95|[98|[105|[116|[115|[95|[116|[111|[95|[98|[121|[116|[101|[115]]]]]]]]]]]]]]]], [])
		%% Line 329
		<'bs_bits_to_bytes2'> when 'true' ->
		    %% Line 330
		    call 'io':'format'
			(_cor1, [98|[115|[95|[98|[105|[116|[115|[95|[116|[111|[95|[98|[121|[116|[101|[115|[50]]]]]]]]]]]]]]]]], [])
		%% Line 331
		<'bs_utf8_size'> when 'true' ->
		    %% Line 332
		    call 'io':'format'
			(_cor1, [98|[115|[95|[117|[116|[102|[56|[95|[115|[105|[122|[101]]]]]]]]]]]], [])
		%% Line 333
		<'bs_put_utf8'> when 'true' ->
		    %% Line 334
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[117|[116|[102|[56]]]]]]]]]]], [])
		%% Line 335
		<'bs_get_utf8'> when 'true' ->
		    %% Line 336
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[117|[116|[102|[56]]]]]]]]]]], [])
		%% Line 337
		<'bs_utf16_size'> when 'true' ->
		    %% Line 338
		    call 'io':'format'
			(_cor1, [98|[115|[95|[117|[116|[102|[49|[54|[95|[115|[105|[122|[101]]]]]]]]]]]]], [])
		%% Line 339
		<{'bs_put_utf16',Flags}> when 'true' ->
		    %% Line 340
		    call 'io':'format'
			(_cor1, [98|[115|[95|[112|[117|[116|[95|[117|[116|[102|[49|[54|[60|[126|[119|[62]]]]]]]]]]]]]]]], [Flags|[]])
		%% Line 341
		<{'bs_get_utf16',Flags}> when 'true' ->
		    %% Line 342
		    call 'io':'format'
			(_cor1, [98|[115|[95|[103|[101|[116|[95|[117|[116|[102|[49|[54|[60|[126|[119|[62]]]]]]]]]]]]]]]], [Flags|[]])
		%% Line 343
		<'bs_validate_unicode'> when 'true' ->
		    %% Line 344
		    call 'io':'format'
			(_cor1, [98|[115|[95|[118|[97|[108|[105|[100|[97|[116|[101|[95|[117|[110|[105|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]], [])
		%% Line 345
		<'bs_validate_unicode_retract'> when 'true' ->
		    %% Line 346
		    call 'io':'format'
			(_cor1, [98|[115|[95|[118|[97|[108|[105|[100|[97|[116|[101|[95|[117|[110|[105|[99|[111|[100|[101|[95|[114|[101|[116|[114|[97|[99|[116]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		%% Line 347
		<'bs_final'> when 'true' ->
		    %% Line 348
		    call 'io':'format'
			(_cor1, [98|[115|[95|[102|[105|[110|[97|[108]]]]]]]], [])
		%% Line 349
		<'bs_final2'> when 'true' ->
		    %% Line 350
		    call 'io':'format'
			(_cor1, [98|[115|[95|[102|[105|[110|[97|[108|[50]]]]]]]]], [])
		%% Line 351
		<'bs_init_writable'> when 'true' ->
		    %% Line 352
		    call 'io':'format'
			(_cor1, [98|[115|[95|[105|[110|[105|[116|[95|[119|[114|[105|[116|[97|[98|[108|[101]]]]]]]]]]]]]]]], [])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 354
	  <{'mkfun',{Mod,Fun,Arity},Unique,I}> when 'true' ->
	      %% Line 355
	      call 'io':'format'
		  (_cor1, [109|[107|[102|[117|[110|[60|[126|[119|[44|[126|[119|[44|[126|[119|[44|[126|[119|[44|[126|[119|[62]]]]]]]]]]]]]]]]]]]]], [Mod|[Fun|[Arity|[Unique|[I|[]]]]]])
	  %% Line 356
	  <{'unsafe_element',N}> when 'true' ->
	      %% Line 357
	      call 'io':'format'
		  (_cor1, [117|[110|[115|[97|[102|[101|[95|[101|[108|[101|[109|[101|[110|[116|[60|[126|[119|[62]]]]]]]]]]]]]]]]]], [N|[]])
	  %% Line 358
	  <{'unsafe_update_element',N}> when 'true' ->
	      %% Line 359
	      call 'io':'format'
		  (_cor1, [117|[110|[115|[97|[102|[101|[95|[117|[112|[100|[97|[116|[101|[95|[101|[108|[101|[109|[101|[110|[116|[60|[126|[119|[62]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
	  %% Line 360
	  <Fun>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 361
	      call 'io':'format'
		  (_cor1, [126|[119]], [Fun|[]])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'type'/2 =
    %% Line 370
    fun (_cor1,_cor0) ->
	%% Line 371
	case _cor1 of
	  %% Line 374
	  <'+'> when 'true' ->
	      %% Line 375
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2, _cor0)
	  %% Line 376
	  <'-'> when 'true' ->
	      %% Line 377
	      call 'erl_bif_types':'type'
		  ('erlang', '-', 2, _cor0)
	  %% Line 378
	  <'*'> when 'true' ->
	      %% Line 379
	      call 'erl_bif_types':'type'
		  ('erlang', '*', 2, _cor0)
	  %% Line 380
	  <'/'> when 'true' ->
	      %% Line 381
	      call 'erl_bif_types':'type'
		  ('erlang', '/', 2, _cor0)
	  %% Line 382
	  <'band'> when 'true' ->
	      %% Line 383
	      call 'erl_bif_types':'type'
		  ('erlang', 'band', 2, _cor0)
	  %% Line 384
	  <'bnot'> when 'true' ->
	      %% Line 385
	      call 'erl_bif_types':'type'
		  ('erlang', 'bnot', 1, _cor0)
	  %% Line 386
	  <'bor'> when 'true' ->
	      %% Line 387
	      call 'erl_bif_types':'type'
		  ('erlang', 'bor', 2, _cor0)
	  %% Line 388
	  <'bxor'> when 'true' ->
	      %% Line 389
	      call 'erl_bif_types':'type'
		  ('erlang', 'bxor', 2, _cor0)
	  %% Line 390
	  <'bsl'> when 'true' ->
	      %% Line 391
	      call 'erl_bif_types':'type'
		  ('erlang', 'bsl', 2, _cor0)
	  %% Line 392
	  <'bsr'> when 'true' ->
	      %% Line 393
	      call 'erl_bif_types':'type'
		  ('erlang', 'bsr', 2, _cor0)
	  %% Line 394
	  <'div'> when 'true' ->
	      %% Line 395
	      call 'erl_bif_types':'type'
		  ('erlang', 'div', 2, _cor0)
	  %% Line 396
	  <'rem'> when 'true' ->
	      %% Line 397
	      call 'erl_bif_types':'type'
		  ('erlang', 'rem', 2, _cor0)
	  %% Line 398
	  <'extra_unsafe_add'> when 'true' ->
	      %% Line 399
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2, _cor0)
	  %% Line 400
	  <'unsafe_add'> when 'true' ->
	      %% Line 401
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2, _cor0)
	  %% Line 402
	  <'unsafe_bnot'> when 'true' ->
	      %% Line 403
	      call 'erl_bif_types':'type'
		  ('erlang', 'bnot', 1, _cor0)
	  %% Line 404
	  <'unsafe_bor'> when 'true' ->
	      %% Line 405
	      call 'erl_bif_types':'type'
		  ('erlang', 'bor', 2, _cor0)
	  %% Line 406
	  <'unsafe_band'> when 'true' ->
	      %% Line 407
	      call 'erl_bif_types':'type'
		  ('erlang', 'band', 2, _cor0)
	  %% Line 408
	  <'unsafe_bxor'> when 'true' ->
	      %% Line 409
	      call 'erl_bif_types':'type'
		  ('erlang', 'bxor', 2, _cor0)
	  %% Line 410
	  <'unsafe_sub'> when 'true' ->
	      %% Line 411
	      call 'erl_bif_types':'type'
		  ('erlang', '-', 2, _cor0)
	  %% Line 414
	  <'cons'> when 'true' ->
	      %% Line 415
	      case _cor0 of
		<[HeadType|[TailType|[]]]> when 'true' ->
		    %% Line 416
		    call 'erl_types':'t_cons'
			(HeadType, TailType)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 417
	  <'unsafe_hd'> when 'true' ->
	      %% Line 418
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    %% Line 419
		    case call 'erl_types':'t_is_cons'
			     (Type) of
		      %% Line 420
		      <'true'> when 'true' ->
			  call 'erl_types':'t_cons_hd'
			      (Type)
		      %% Line 421
		      <'false'> when 'true' ->
			  call 'erl_types':'t_none'
			      ()
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 423
	  <'unsafe_tl'> when 'true' ->
	      %% Line 424
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    %% Line 425
		    case call 'erl_types':'t_is_cons'
			     (Type) of
		      %% Line 426
		      <'true'> when 'true' ->
			  call 'erl_types':'t_cons_tl'
			      (Type)
		      %% Line 427
		      <'false'> when 'true' ->
			  call 'erl_types':'t_none'
			      ()
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 431
	  <'mktuple'> when 'true' ->
	      %% Line 432
	      call 'erl_types':'t_tuple'
		  (_cor0)
	  %% Line 433
	  <{'element',_cor161}> when 'true' ->
	      %% Line 434
	      call 'erl_bif_types':'type'
		  ('erlang', 'element', 2, _cor0)
	  %% Line 435
	  <{'unsafe_element',N}> when 'true' ->
	      %% Line 436
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    %% Line 437
		    case call 'erl_types':'t_is_tuple'
			     (Type) of
		      %% Line 438
		      <'false'> when 'true' ->
			  %% Line 439
			  call 'erl_types':'t_none'
			      ()
		      %% Line 440
		      <'true'> when 'true' ->
			  let <Index> =
			      %% Line 441
			      call 'erl_types':'t_from_term'
				  (N)
			  in  %% Line 442
			      call 'erl_bif_types':'type'
				  ('erlang', 'element', 2, [Index|_cor0])
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 444
	  <{'unsafe_update_element',N}> when 'true' ->
	      let <_cor10> =
		  %% Line 446
		  call 'erl_types':'t_integer'
		      (N)
	      in  %% Line 446
		  call 'erl_bif_types':'type'
		      ('erlang', 'setelement', 3, [_cor10|_cor0])
	  %% Line 449
	  <'fclearerror'> when 'true' ->
	      %% Line 450
	      call 'erl_types':'t_any'
		  ()
	  %% Line 451
	  <'fcheckerror'> when 'true' ->
	      %% Line 452
	      call 'erl_types':'t_any'
		  ()
	  %% Line 453
	  <'unsafe_tag_float'> when 'true' ->
	      %% Line 454
	      call 'erl_types':'t_float'
		  ()
	  %% Line 457
	  <'conv_to_float'> when 'true' ->
	      %% Line 458
	      call 'erl_types':'t_any'
		  ()
	  %% Line 459
	  <'unsafe_untag_float'> when 'true' ->
	      %% Line 460
	      call 'erl_types':'t_any'
		  ()
	  %% Line 461
	  <'fp_add'> when 'true' ->
	      %% Line 462
	      call 'erl_types':'t_any'
		  ()
	  %% Line 463
	  <'fp_sub'> when 'true' ->
	      %% Line 464
	      call 'erl_types':'t_any'
		  ()
	  %% Line 465
	  <'fp_mul'> when 'true' ->
	      %% Line 466
	      call 'erl_types':'t_any'
		  ()
	  %% Line 467
	  <'fp_div'> when 'true' ->
	      %% Line 468
	      call 'erl_types':'t_any'
		  ()
	  %% Line 469
	  <'fnegate'> when 'true' ->
	      %% Line 470
	      call 'erl_types':'t_any'
		  ()
	  %% Line 473
	  <{'hipe_bs_primop',{'bs_start_match',Max}}> when 'true' ->
	      %% Line 474
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    let <_cor14> =
			%% Line 477
			call 'erl_types':'t_matchstate_present'
			    (Type)
		    in  let <_cor12> =
			    %% Line 478
			    call 'erl_types':'t_bitstr'
				(1, 0)
			in  let <_cor13> =
				%% Line 478
				call 'erl_types':'t_inf'
				    (_cor12, Type)
			    in  let <Init> =
				    %% Line 476
				    call 'erl_types':'t_sup'
					(_cor14, _cor13)
				in  %% Line 479
				    case call 'erl_types':'t_is_none'
					     (Init) of
				      %% Line 480
				      <'true'> when 'true' ->
					  %% Line 481
					  call 'erl_types':'t_none'
					      ()
				      %% Line 482
				      <'false'> when 'true' ->
					  %% Line 483
					  call 'erl_types':'t_matchstate'
					      (Init, Max)
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor16})
					-| ['compiler_generated'] )
				    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 485
	  <{'hipe_bs_primop',{{'bs_start_match',_cor162},Max}}> when 'true' ->
	      %% Line 486
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    let <_cor20> =
			%% Line 489
			call 'erl_types':'t_matchstate_present'
			    (Type)
		    in  let <_cor18> =
			    %% Line 490
			    call 'erl_types':'t_bitstr'
				(1, 0)
			in  let <_cor19> =
				%% Line 490
				call 'erl_types':'t_inf'
				    (_cor18, Type)
			    in  let <Init> =
				    %% Line 488
				    call 'erl_types':'t_sup'
					(_cor20, _cor19)
				in  %% Line 491
				    case call 'erl_types':'t_is_none'
					     (Init) of
				      %% Line 492
				      <'true'> when 'true' ->
					  %% Line 493
					  call 'erl_types':'t_none'
					      ()
				      %% Line 494
				      <'false'> when 'true' ->
					  %% Line 495
					  call 'erl_types':'t_matchstate'
					      (Init, Max)
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor22})
					-| ['compiler_generated'] )
				    end
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 497
	  <{'hipe_bs_primop',{'bs_get_integer',Size,Flags}}> when 'true' ->
	      let <Signed> =
		  %% Line 498
		  call 'erlang':'band'
		      (Flags, 4)
	      in  %% Line 499
		  case _cor0 of
		    <[MatchState|RestArgs]> when 'true' ->
			let <BinType> =
			    %% Line 500
			    call 'erl_types':'t_matchstate_present'
				(MatchState)
			in  %% Line 501
			    case RestArgs of
			      %% Line 502
			      <[]> when 'true' ->
				  let <_cor26> =
				      %% Line 503
				      call 'erl_types':'t_bitstr'
					  (0, Size)
				  in  let <NewBinType> =
					  %% Line 503
					  apply 'match_bin'/2
					      (_cor26, BinType)
				      in  let <NewMatchState> =
					      %% Line 505
					      call 'erl_types':'t_matchstate_update_present'
						  (NewBinType, MatchState)
					  in  %% Line 506
					      case <> of
						<>
						    when call 'erlang':'=:='
							  (Signed,
							   0) ->
						    let <_cor29> =
							%% Line 507
							call 'erlang':'bsl'
							    (1, Size)
						    in  let <_cor30> =
							    %% Line 507
							    call 'erlang':'-'
								(_cor29, 1)
							in  let <_cor31> =
								%% Line 507
								call 'erl_types':'t_from_range'
								    (0, _cor30)
							    in  %% Line 507
								call 'erl_types':'t_product'
								    ([_cor31|%% Line 508
									     [NewMatchState|[]]])
						%% Line 509
						<>
						    when call 'erlang':'=:='
							  (Signed,
							   4) ->
						    let <_cor35> =
							%% Line 510
							call 'erlang':'-'
							    (Size, 1)
						    in  let <_cor36> =
							    %% Line 510
							    call 'erlang':'bsl'
								(1, _cor35)
							in  let <_cor37> =
								%% Line 510
								call 'erlang':'-'
								    (_cor36)
							    in  let <_cor32> =
								    %% Line 511
								    call 'erlang':'-'
									(Size, 1)
								in  let <_cor33> =
									%% Line 511
									call 'erlang':'bsl'
									    (1, _cor32)
								    in  let <_cor34> =
									    %% Line 511
									    call 'erlang':'-'
										(_cor33, 1)
									in  let <_cor38> =
										%% Line 510
										call 'erl_types':'t_from_range'
										    (_cor37, _cor34)
									    in  %% Line 510
										call 'erl_types':'t_product'
										    ([_cor38|%% Line 512
											     [NewMatchState|[]]])
						( <> when 'true' ->
						      primop 'match_fail'
							  ('if_clause')
						  -| ['compiler_generated'] )
					      end
			      %% Line 514
			      <[_X_Arg|[]]> when 'true' ->
				  let <_cor39> =
				      %% Line 515
				      call 'erl_types':'t_bitstr'
					  (Size, 0)
				  in  let <NewBinType> =
					  %% Line 515
					  apply 'match_bin'/2
					      (_cor39, BinType)
				      in  let <NewMatchState> =
					      %% Line 517
					      call 'erl_types':'t_matchstate_update_present'
						  (NewBinType, MatchState)
					  in  let <_cor42> =
						  %% Line 518
						  call 'erl_types':'t_integer'
						      ()
					      in  %% Line 518
						  call 'erl_types':'t_product'
						      ([_cor42|[NewMatchState|[]]])
			      ( <_cor43> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor43})
				-| ['compiler_generated'] )
			    end
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 520
	  <{'hipe_bs_primop',{'bs_get_float',Size,_X_Flags}}> when 'true' ->
	      %% Line 521
	      case _cor0 of
		<[MatchState|RestArgs]> when 'true' ->
		    let <BinType> =
			%% Line 522
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor52> =
			    %% Line 524
			    case RestArgs of
			      %% Line 525
			      <[]> when 'true' ->
				  let <_cor46> =
				      %% Line 526
				      call 'erl_types':'t_bitstr'
					  (0, Size)
				  in  %% Line 526
				      apply 'match_bin'/2
					  (_cor46, BinType)
			      %% Line 527
			      <[_X_Arg|[]]> when 'true' ->
				  let <_cor49> =
				      %% Line 528
				      call 'erl_types':'t_bitstr'
					  (0, 32)
				  in  let <_cor50> =
					  %% Line 528
					  apply 'match_bin'/2
					      (_cor49, BinType)
				      in  let <_cor47> =
					      %% Line 529
					      call 'erl_types':'t_bitstr'
						  (0, 64)
					  in  let <_cor48> =
						  %% Line 529
						  apply 'match_bin'/2
						      (_cor47, BinType)
					      in  %% Line 528
						  call 'erl_types':'t_sup'
						      (_cor50, _cor48)
			      ( <_cor51> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor51})
				-| ['compiler_generated'] )
			    end
			in  let <NewMatchState> =
				%% Line 531
				call 'erl_types':'t_matchstate_update_present'
				    (_cor52, MatchState)
			    in  let <_cor55> =
				    %% Line 532
				    call 'erl_types':'t_float'
					()
				in  %% Line 532
				    call 'erl_types':'t_product'
					([_cor55|[NewMatchState|[]]])
		( <_cor44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 533
	  <{'hipe_bs_primop',{'bs_get_binary',Size,_X_Flags}}> when 'true' ->
	      %% Line 534
	      case _cor0 of
		<[MatchState|RestArgs]> when 'true' ->
		    let <BinType> =
			%% Line 535
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  %% Line 536
			case RestArgs of
			  %% Line 537
			  <[]> when 'true' ->
			      let <_cor58> =
				  %% Line 538
				  call 'erl_types':'t_bitstr'
				      (0, Size)
			      in  let <NewBinType> =
				      %% Line 538
				      apply 'match_bin'/2
					  (_cor58, BinType)
				  in  let <NewMatchState> =
					  %% Line 539
					  call 'erl_types':'t_matchstate_update_present'
					      (NewBinType, MatchState)
				      in  let <_cor61> =
					      %% Line 540
					      call 'erl_types':'t_bitstr'
						  (0, Size)
					  in  %% Line 540
					      call 'erl_types':'t_product'
						  ([_cor61|[NewMatchState|[]]])
			  %% Line 541
			  <[ArgType|[]]> when 'true' ->
			      let <_cor62> =
				  %% Line 542
				  call 'erl_types':'t_non_neg_integer'
				      ()
			      in  let <Posint> =
				      %% Line 542
				      call 'erl_types':'t_inf'
					  (_cor62, ArgType)
				  in  %% Line 543
				      case call 'erl_types':'t_is_none'
					       (Posint) of
					%% Line 544
					<'true'> when 'true' ->
					    let <_cor64> =
						%% Line 545
						call 'erl_types':'t_none'
						    ()
					    in  let <_cor65> =
						    %% Line 547
						    call 'erl_types':'t_none'
							()
						in  let <_cor66> =
							%% Line 546
							call 'erl_types':'t_matchstate_update_present'
							    (_cor65, %% Line 548
								     MatchState)
						    in  %% Line 545
							call 'erl_types':'t_product'
							    ([_cor64|%% Line 546
								     [_cor66|%% Line 548
									     []]])
					%% Line 549
					<'false'> when 'true' ->
					    let <_cor67> =
						%% Line 551
						call 'erl_types':'number_min'
						    (Posint)
					    in  let <_cor68> =
						    %% Line 551
						    call 'erlang':'*'
							(_cor67, Size)
						in  let <OutBinType> =
							%% Line 551
							call 'erl_types':'t_bitstr'
							    (Size, _cor68)
						    in  let <NewBinType> =
							    %% Line 552
							    apply 'match_bin'/2
								(OutBinType, BinType)
							in  let <NewMatchState> =
								%% Line 553
								call 'erl_types':'t_matchstate_update_present'
								    (NewBinType, MatchState)
							    in  %% Line 554
								call 'erl_types':'t_product'
								    ([OutBinType|[NewMatchState|[]]])
					( <_cor72> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor72})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor73> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor73})
			    -| ['compiler_generated'] )
			end
		( <_cor56> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor56})
		  -| ['compiler_generated'] )
	      end
	  %% Line 557
	  <{'hipe_bs_primop',{'bs_get_binary_all',Unit,_X_Flags}}> when 'true' ->
	      %% Line 558
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 559
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor76> =
			    %% Line 560
			    call 'erl_types':'t_bitstr'
				(Unit, 0)
			in  %% Line 560
			    call 'erl_types':'t_inf'
				(BinType, _cor76)
		( <_cor74> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor74})
		  -| ['compiler_generated'] )
	      end
	  %% Line 561
	  <{'hipe_bs_primop',{'bs_get_binary_all_2',Unit,_X_Flags}}> when 'true' ->
	      %% Line 562
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 563
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor79> =
			    %% Line 565
			    call 'erl_types':'t_bitstr'
				(Unit, 0)
			in  let <_cor80> =
				%% Line 565
				call 'erl_types':'t_inf'
				    (BinType, _cor79)
			    in  let <_cor81> =
				    %% Line 567
				    call 'erl_types':'t_bitstr'
					(0, 0)
				in  let <_cor82> =
					%% Line 566
					call 'erl_types':'t_matchstate_update_present'
					    (_cor81, %% Line 567
						     MatchState)
				    in  %% Line 564
					call 'erl_types':'t_product'
					    (%% Line 565
					     [_cor80|%% Line 566
						     [_cor82|%% Line 567
							     []]])
		( <_cor77> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor77})
		  -| ['compiler_generated'] )
	      end
	  %% Line 568
	  <{'hipe_bs_primop',{'bs_skip_bits_all',_X_Unit,_X_Flags}}> when 'true' ->
	      %% Line 569
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <_cor84> =
			%% Line 570
			call 'erl_types':'t_bitstr'
			    (0, 0)
		    in  %% Line 570
			call 'erl_types':'t_matchstate_update_present'
			    (_cor84, MatchState)
		( <_cor83> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor83})
		  -| ['compiler_generated'] )
	      end
	  %% Line 571
	  <{'hipe_bs_primop',{'bs_skip_bits',Size}}> when 'true' ->
	      %% Line 572
	      case _cor0 of
		<[MatchState|RestArgs]> when 'true' ->
		    let <BinType> =
			%% Line 573
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor90> =
			    %% Line 575
			    case RestArgs of
			      %% Line 576
			      <[]> when 'true' ->
				  let <_cor87> =
				      %% Line 577
				      call 'erl_types':'t_bitstr'
					  (0, Size)
				  in  %% Line 577
				      apply 'match_bin'/2
					  (_cor87, BinType)
			      %% Line 578
			      <[_X_Arg|[]]> when 'true' ->
				  let <_cor88> =
				      %% Line 579
				      call 'erl_types':'t_bitstr'
					  (Size, 0)
				  in  %% Line 579
				      apply 'match_bin'/2
					  (_cor88, BinType)
			      ( <_cor89> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor89})
				-| ['compiler_generated'] )
			    end
			in  %% Line 581
			    call 'erl_types':'t_matchstate_update_present'
				(_cor90, MatchState)
		( <_cor85> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor85})
		  -| ['compiler_generated'] )
	      end
	  %% Line 582
	  <{'hipe_bs_primop',{'bs_save',Slot}}> when 'true' ->
	      %% Line 583
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 584
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  %% Line 585
			call 'erl_types':'t_matchstate_update_slot'
			    (BinType, MatchState, Slot)
		( <_cor92> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor92})
		  -| ['compiler_generated'] )
	      end
	  %% Line 586
	  <{'hipe_bs_primop',{'bs_restore',Slot}}> when 'true' ->
	      %% Line 587
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 588
			call 'erl_types':'t_matchstate_slot'
			    (MatchState, Slot)
		    in  %% Line 589
			call 'erl_types':'t_matchstate_update_present'
			    (BinType, MatchState)
		( <_cor94> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor94})
		  -| ['compiler_generated'] )
	      end
	  %% Line 590
	  <{'hipe_bs_primop','bs_context_to_binary'}> when 'true' ->
	      %% Line 591
	      case _cor0 of
		<[Type|[]]> when 'true' ->
		    let <_cor100> =
			%% Line 593
			call 'erl_types':'t_matchstate'
			    ()
		    in  let <_cor101> =
			    %% Line 593
			    call 'erl_types':'t_subtract'
				(Type, _cor100)
			in  let <_cor97> =
				%% Line 595
				call 'erl_types':'t_matchstate'
				    ()
			    in  let <_cor98> =
				    %% Line 595
				    call 'erl_types':'t_inf'
					(Type, _cor97)
				in  let <_cor99> =
					%% Line 594
					call 'erl_types':'t_matchstate_slot'
					    (_cor98, %% Line 595
						     0)
				    in  %% Line 592
					call 'erl_types':'t_sup'
					    (_cor101, _cor99)
		( <_cor96> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor96})
		  -| ['compiler_generated'] )
	      end
	  %% Line 596
	  <{'hipe_bs_primop',{'bs_match_string',_cor163,Bytes}}> when 'true' ->
	      %% Line 597
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 598
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor104> =
			    %% Line 599
			    call 'erlang':'*'
				(Bytes, 8)
			in  let <_cor105> =
				%% Line 599
				call 'erl_types':'t_bitstr'
				    (0, _cor104)
			    in  let <NewBinType> =
				    %% Line 599
				    apply 'match_bin'/2
					(_cor105, BinType)
				in  %% Line 600
				    call 'erl_types':'t_matchstate_update_present'
					(NewBinType, MatchState)
		( <_cor102> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor102})
		  -| ['compiler_generated'] )
	      end
	  %% Line 601
	  <{'hipe_bs_primop',{'bs_test_unit',Unit}}> when 'true' ->
	      %% Line 602
	      case _cor0 of
		<[MatchState|[]]> when 'true' ->
		    let <BinType> =
			%% Line 603
			call 'erl_types':'t_matchstate_present'
			    (MatchState)
		    in  let <_cor109> =
			    %% Line 604
			    call 'erl_types':'t_bitstr'
				(Unit, 0)
			in  let <NewBinType> =
				%% Line 604
				call 'erl_types':'t_inf'
				    (_cor109, BinType)
			    in  %% Line 605
				call 'erl_types':'t_matchstate_update_present'
				    (NewBinType, MatchState)
		( <_cor107> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor107})
		  -| ['compiler_generated'] )
	      end
	  %% Line 606
	  <{'hipe_bs_primop',{'bs_add',_cor164,_cor165}}> when 'true' ->
	      %% Line 607
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 608
	  <{'hipe_bs_primop',{'bs_add',_cor166}}> when 'true' ->
	      %% Line 609
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 610
	  <{'hipe_bs_primop','bs_bits_to_bytes'}> when 'true' ->
	      %% Line 611
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 612
	  <{'hipe_bs_primop','bs_bits_to_bytes2'}> when 'true' ->
	      %% Line 613
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 614
	  <{'hipe_bs_primop',{Name,Size,_X_Flags,_X_ConstInfo}}>
	      when let <_cor111> =
		    %% Line 615
		    call 'erlang':'=:='
			(Name, 'bs_put_integer')
		in  let <_cor112> =
			%% Line 616
			call 'erlang':'=:='
			    (Name, 'bs_put_float')
		    in  %% Line 615
			call 'erlang':'or'
			    (_cor111, _cor112) ->
	      %% Line 617
	      case _cor0 of
		%% Line 618
		<[_X_SrcType|[_X_Base|[Type|[]]]]> when 'true' ->
		    let <_cor113> =
			%% Line 619
			call 'erl_types':'t_bitstr'
			    (0, Size)
		    in  %% Line 619
			call 'erl_types':'t_bitstr_concat'
			    (Type, _cor113)
		%% Line 620
		<[_X_SrcType|[_X_BitsType|[_X_Base|[Type|[]]]]]> when 'true' ->
		    let <_cor114> =
			%% Line 621
			call 'erl_types':'t_bitstr'
			    (Size, 0)
		    in  %% Line 621
			call 'erl_types':'t_bitstr_concat'
			    (Type, _cor114)
		( <_cor115> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor115})
		  -| ['compiler_generated'] )
	      end
	  %% Line 623
	  <{'hipe_bs_primop',{'bs_put_binary',Size,_X_Flags}}> when 'true' ->
	      %% Line 624
	      case _cor0 of
		%% Line 625
		<[_X_SrcType|[_X_Base|[Type|[]]]]> when 'true' ->
		    let <_cor116> =
			%% Line 626
			call 'erl_types':'t_bitstr'
			    (0, Size)
		    in  %% Line 626
			call 'erl_types':'t_bitstr_concat'
			    (Type, _cor116)
		%% Line 627
		<[_X_SrcType|[_X_BitsType|[_X_Base|[Type|[]]]]]> when 'true' ->
		    let <_cor117> =
			%% Line 628
			call 'erl_types':'t_bitstr'
			    (Size, 0)
		    in  %% Line 628
			call 'erl_types':'t_bitstr_concat'
			    (Type, _cor117)
		( <_cor118> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor118})
		  -| ['compiler_generated'] )
	      end
	  %% Line 630
	  <{'hipe_bs_primop',{'bs_put_binary_all',_X_Flags}}> when 'true' ->
	      %% Line 631
	      case _cor0 of
		<[SrcType|[_X_Base|[Type|[]]]]> when 'true' ->
		    %% Line 632
		    call 'erl_types':'t_bitstr_concat'
			(SrcType, Type)
		( <_cor119> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor119})
		  -| ['compiler_generated'] )
	      end
	  %% Line 633
	  <{'hipe_bs_primop',{'bs_put_string',_cor167,Size}}> when 'true' ->
	      %% Line 634
	      case _cor0 of
		<[_X_Base|[Type|[]]]> when 'true' ->
		    let <_cor121> =
			%% Line 635
			call 'erlang':'*'
			    (8, Size)
		    in  let <_cor122> =
			    %% Line 635
			    call 'erl_types':'t_bitstr'
				(0, _cor121)
			in  %% Line 635
			    call 'erl_types':'t_bitstr_concat'
				(Type, _cor122)
		( <_cor120> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor120})
		  -| ['compiler_generated'] )
	      end
	  %% Line 636
	  <{'hipe_bs_primop','bs_utf8_size'}> when 'true' ->
	      %% Line 637
	      case _cor0 of
		<[_X_Arg|[]]> when 'true' ->
		    %% Line 638
		    call 'erl_types':'t_from_range'
			(1, 4)
		( <_cor123> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor123})
		  -| ['compiler_generated'] )
	      end
	  %% Line 639
	  <{'hipe_bs_primop','bs_utf16_size'}> when 'true' ->
	      %% Line 640
	      case _cor0 of
		<[_X_Arg|[]]> when 'true' ->
		    %% Line 641
		    call 'erl_types':'t_from_range'
			(2, 4)
		( <_cor124> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor124})
		  -| ['compiler_generated'] )
	      end
	  %% Line 642
	  <{'hipe_bs_primop','bs_final'}> when 'true' ->
	      %% Line 643
	      case _cor0 of
		<[_X_Base|[Type|[]]]> when 'true' ->
		    %% Line 644
		    Type
		( <_cor125> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor125})
		  -| ['compiler_generated'] )
	      end
	  %% Line 645
	  <{'hipe_bs_primop',{'bs_init',Size,_X_Flags}}> when 'true' ->
	      let <_cor126> =
		  %% Line 647
		  call 'erlang':'*'
		      (Size, 8)
	      in  let <_cor127> =
		      %% Line 647
		      call 'erl_types':'t_bitstr'
			  (0, _cor126)
		  in  let <_cor128> =
			  %% Line 648
			  call 'erl_types':'t_any'
			      ()
		      in  let <_cor129> =
			      %% Line 649
			      call 'erl_types':'t_bitstr'
				  (0, 0)
			  in  %% Line 646
			      call 'erl_types':'t_product'
				  (%% Line 647
				   [_cor127|%% Line 648
					    [_cor128|%% Line 649
						     [_cor129|[]]]])
	  %% Line 650
	  <{'hipe_bs_primop',{'bs_init',_X_Flags}}> when 'true' ->
	      let <_cor130> =
		  %% Line 652
		  call 'erl_types':'t_binary'
		      ()
	      in  let <_cor131> =
		      %% Line 653
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor132> =
			  %% Line 654
			  call 'erl_types':'t_bitstr'
			      (0, 0)
		      in  %% Line 651
			  call 'erl_types':'t_product'
			      (%% Line 652
			       [_cor130|%% Line 653
					[_cor131|%% Line 654
						 [_cor132|[]]]])
	  %% Line 655
	  <{'hipe_bs_primop',{'bs_init_bits',Size,_X_Flags}}> when 'true' ->
	      let <_cor133> =
		  %% Line 657
		  call 'erl_types':'t_bitstr'
		      (0, Size)
	      in  let <_cor134> =
		      %% Line 658
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor135> =
			  %% Line 659
			  call 'erl_types':'t_bitstr'
			      (0, 0)
		      in  %% Line 656
			  call 'erl_types':'t_product'
			      (%% Line 657
			       [_cor133|%% Line 658
					[_cor134|%% Line 659
						 [_cor135|[]]]])
	  %% Line 660
	  <{'hipe_bs_primop',{'bs_init_bits',_X_Flags}}> when 'true' ->
	      let <_cor136> =
		  %% Line 662
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor137> =
		      %% Line 663
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor138> =
			  %% Line 664
			  call 'erl_types':'t_bitstr'
			      (0, 0)
		      in  %% Line 661
			  call 'erl_types':'t_product'
			      (%% Line 662
			       [_cor136|%% Line 663
					[_cor137|%% Line 664
						 [_cor138|[]]]])
	  %% Line 665
	  <{'hipe_bs_primop',{'bs_private_append',_X_U,_X_Flags}}> when 'true' ->
	      let <_cor139> =
		  %% Line 667
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor140> =
		      %% Line 668
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor141> =
			  %% Line 669
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 666
			  call 'erl_types':'t_product'
			      (%% Line 667
			       [_cor139|%% Line 668
					[_cor140|%% Line 669
						 [_cor141|[]]]])
	  %% Line 670
	  <{'hipe_bs_primop',{'bs_append',_X_W,_X_R,_X_U,_X_Flags}}> when 'true' ->
	      let <_cor142> =
		  %% Line 672
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor143> =
		      %% Line 673
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor144> =
			  %% Line 674
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 671
			  call 'erl_types':'t_product'
			      (%% Line 672
			       [_cor142|%% Line 673
					[_cor143|%% Line 674
						 [_cor144|[]]]])
	  %% Line 675
	  <{'hipe_bs_primop','bs_init_writable'}> when 'true' ->
	      %% Line 676
	      call 'erl_types':'t_bitstr'
		  (0, 0)
	  %% Line 677
	  <{'hipe_bs_primop',_X_BsOp}> when 'true' ->
	      %% Line 678
	      call 'erl_types':'t_any'
		  ()
	  %% Line 681
	  <{'mkfun',{_X_M,_X_F,A},_cor168,_cor169}> when 'true' ->
	      let <_cor146> =
		  %% Line 683
		  call 'erlang':'length'
		      (_cor0)
	      in  let <_cor147> =
		      %% Line 683
		      call 'erlang':'-'
			  (A, _cor146)
		  in  let <_cor145> =
			  %% Line 683
			  call 'erl_types':'t_any'
			      ()
		      in  %% Line 683
			  call 'erl_types':'t_fun'
			      (_cor147, _cor145)
	  %% Line 684
	  <{'apply_N',_cor170}> when 'true' ->
	      %% Line 685
	      call 'erl_types':'t_any'
		  ()
	  %% Line 686
	  <Op>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (_cor1,
				     'call_fun') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (_cor1, 'enter_fun')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 687
	      case call 'lists':'reverse'
		       (_cor0) of
		<[Fun0|TailArgs0]> when 'true' ->
		    let <TailArgs> =
			%% Line 688
			call 'lists':'reverse'
			    (TailArgs0)
		    in  let <_cor153> =
			    %% Line 689
			    call 'erl_types':'t_fun'
				()
			in  let <Fun> =
				%% Line 689
				call 'erl_types':'t_inf'
				    (_cor153, Fun0)
			    in  %% Line 690
				case call 'erl_types':'t_is_fun'
					 (Fun) of
				  %% Line 691
				  <'true'> when 'true' ->
				      %% Line 692
				      case call 'erl_types':'t_fun_args'
					       (Fun) of
					%% Line 693
					<'unknown'> when 'true' ->
					    %% Line 694
					    call 'erl_types':'t_any'
						()
					%% Line 695
					<FunArgs> when 'true' ->
					    %% Line 696
					    case apply 'check_fun_args'/2
						     (FunArgs, TailArgs) of
					      %% Line 697
					      <'ok'> when 'true' ->
						  %% Line 698
						  call 'erl_types':'t_fun_range'
						      (Fun)
					      %% Line 699
					      <'error'> when 'true' ->
						  %% Line 700
						  call 'erl_types':'t_none'
						      ()
					      ( <_cor155> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor155})
						-| ['compiler_generated'] )
					    end
				      end
				  %% Line 703
				  <'false'> when 'true' ->
				      %% Line 704
				      call 'erl_types':'t_none'
					  ()
				  ( <_cor157> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor157})
				    -| ['compiler_generated'] )
				end
		( <_cor151> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor151})
		  -| ['compiler_generated'] )
	      end
	  %% Line 708
	  <'check_get_msg'> when 'true' ->
	      %% Line 709
	      call 'erl_types':'t_any'
		  ()
	  %% Line 710
	  <'clear_timeout'> when 'true' ->
	      %% Line 711
	      call 'erl_types':'t_any'
		  ()
	  %% Line 712
	  <'next_msg'> when 'true' ->
	      %% Line 713
	      call 'erl_types':'t_any'
		  ()
	  %% Line 714
	  <'select_msg'> when 'true' ->
	      %% Line 715
	      call 'erl_types':'t_any'
		  ()
	  %% Line 716
	  <'set_timeout'> when 'true' ->
	      %% Line 717
	      call 'erl_types':'t_any'
		  ()
	  %% Line 718
	  <'suspend_msg'> when 'true' ->
	      %% Line 719
	      call 'erl_types':'t_any'
		  ()
	  %% Line 722
	  <{'closure_element',_cor171}> when 'true' ->
	      %% Line 723
	      call 'erl_types':'t_any'
		  ()
	  %% Line 724
	  <'redtest'> when 'true' ->
	      %% Line 725
	      call 'erl_types':'t_any'
		  ()
	  %% Line 726
	  <'debug_native_called'> when 'true' ->
	      %% Line 727
	      call 'erl_types':'t_any'
		  ()
	  %% Line 728
	  <{M,F,A}> when 'true' ->
	      %% Line 729
	      call 'erl_bif_types':'type'
		  (M, F, A, _cor0)
	  ( <_cor158> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor158})
	    -| ['compiler_generated'] )
	end
'type'/1 =
    %% Line 735
    fun (_cor0) ->
	%% Line 736
	case _cor0 of
	  %% Line 739
	  <'bnot'> when 'true' ->
	      %% Line 740
	      call 'erl_bif_types':'type'
		  ('erlang', 'bnot', 1)
	  %% Line 741
	  <'+'> when 'true' ->
	      %% Line 742
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2)
	  %% Line 743
	  <'-'> when 'true' ->
	      %% Line 744
	      call 'erl_bif_types':'type'
		  ('erlang', '-', 2)
	  %% Line 745
	  <'*'> when 'true' ->
	      %% Line 746
	      call 'erl_bif_types':'type'
		  ('erlang', '*', 2)
	  %% Line 747
	  <'/'> when 'true' ->
	      %% Line 748
	      call 'erl_bif_types':'type'
		  ('erlang', '/', 2)
	  %% Line 749
	  <'div'> when 'true' ->
	      %% Line 750
	      call 'erl_bif_types':'type'
		  ('erlang', 'div', 2)
	  %% Line 751
	  <'rem'> when 'true' ->
	      %% Line 752
	      call 'erl_bif_types':'type'
		  ('erlang', 'rem', 2)
	  %% Line 753
	  <'band'> when 'true' ->
	      %% Line 754
	      call 'erl_bif_types':'type'
		  ('erlang', 'band', 2)
	  %% Line 755
	  <'bor'> when 'true' ->
	      %% Line 756
	      call 'erl_bif_types':'type'
		  ('erlang', 'bor', 2)
	  %% Line 757
	  <'bxor'> when 'true' ->
	      %% Line 758
	      call 'erl_bif_types':'type'
		  ('erlang', 'bxor', 2)
	  %% Line 759
	  <'bsr'> when 'true' ->
	      %% Line 760
	      call 'erl_bif_types':'type'
		  ('erlang', 'bsr', 2)
	  %% Line 761
	  <'bsl'> when 'true' ->
	      %% Line 762
	      call 'erl_bif_types':'type'
		  ('erlang', 'bsl', 2)
	  %% Line 763
	  <'unsafe_add'> when 'true' ->
	      %% Line 764
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2)
	  %% Line 765
	  <'extra_unsafe_add'> when 'true' ->
	      %% Line 766
	      call 'erl_bif_types':'type'
		  ('erlang', '+', 2)
	  %% Line 767
	  <'unsafe_sub'> when 'true' ->
	      %% Line 768
	      call 'erl_bif_types':'type'
		  ('erlang', '-', 2)
	  %% Line 769
	  <'unsafe_bor'> when 'true' ->
	      %% Line 770
	      call 'erl_bif_types':'type'
		  ('erlang', 'bor', 2)
	  %% Line 771
	  <'unsafe_band'> when 'true' ->
	      %% Line 772
	      call 'erl_bif_types':'type'
		  ('erlang', 'band', 2)
	  %% Line 773
	  <'unsafe_bxor'> when 'true' ->
	      %% Line 774
	      call 'erl_bif_types':'type'
		  ('erlang', 'bxor', 2)
	  %% Line 777
	  <'cons'> when 'true' ->
	      %% Line 778
	      call 'erl_types':'t_cons'
		  ()
	  %% Line 779
	  <'unsafe_hd'> when 'true' ->
	      %% Line 780
	      call 'erl_bif_types':'type'
		  ('erlang', 'hd', 1)
	  %% Line 781
	  <'unsafe_tl'> when 'true' ->
	      %% Line 782
	      call 'erl_bif_types':'type'
		  ('erlang', 'tl', 1)
	  %% Line 785
	  <'mktuple'> when 'true' ->
	      %% Line 786
	      call 'erl_types':'t_tuple'
		  ()
	  %% Line 787
	  <{'element',_cor33}> when 'true' ->
	      %% Line 788
	      call 'erl_bif_types':'type'
		  ('erlang', 'element', 2)
	  %% Line 789
	  <{'unsafe_element',_cor34}> when 'true' ->
	      %% Line 790
	      call 'erl_bif_types':'type'
		  ('erlang', 'element', 2)
	  %% Line 791
	  <{'unsafe_update_element',_cor35}> when 'true' ->
	      %% Line 792
	      call 'erl_bif_types':'type'
		  ('erlang', 'setelement', 3)
	  %% Line 795
	  <'fclearerror'> when 'true' ->
	      %% Line 796
	      call 'erl_types':'t_any'
		  ()
	  %% Line 797
	  <'fcheckerror'> when 'true' ->
	      %% Line 798
	      call 'erl_types':'t_any'
		  ()
	  %% Line 799
	  <'unsafe_tag_float'> when 'true' ->
	      %% Line 800
	      call 'erl_types':'t_float'
		  ()
	  %% Line 803
	  <'conv_to_float'> when 'true' ->
	      %% Line 804
	      call 'erl_types':'t_any'
		  ()
	  %% Line 805
	  <'unsafe_untag_float'> when 'true' ->
	      %% Line 806
	      call 'erl_types':'t_any'
		  ()
	  %% Line 807
	  <'fp_add'> when 'true' ->
	      %% Line 808
	      call 'erl_types':'t_any'
		  ()
	  %% Line 809
	  <'fp_sub'> when 'true' ->
	      %% Line 810
	      call 'erl_types':'t_any'
		  ()
	  %% Line 811
	  <'fp_mul'> when 'true' ->
	      %% Line 812
	      call 'erl_types':'t_any'
		  ()
	  %% Line 813
	  <'fp_div'> when 'true' ->
	      %% Line 814
	      call 'erl_types':'t_any'
		  ()
	  %% Line 815
	  <'fnegate'> when 'true' ->
	      %% Line 816
	      call 'erl_types':'t_any'
		  ()
	  %% Line 819
	  <{'hipe_bs_primop','bs_get_utf8'}> when 'true' ->
	      let <_cor1> =
		  %% Line 820
		  call 'erl_types':'t_integer'
		      ()
	      in  let <_cor2> =
		      %% Line 820
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 820
		      call 'erl_types':'t_product'
			  ([_cor1|[_cor2|[]]])
	  %% Line 821
	  <{'hipe_bs_primop',{'bs_get_utf16',_X_Flags}}> when 'true' ->
	      let <_cor3> =
		  %% Line 822
		  call 'erl_types':'t_integer'
		      ()
	      in  let <_cor4> =
		      %% Line 822
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 822
		      call 'erl_types':'t_product'
			  ([_cor3|[_cor4|[]]])
	  %% Line 823
	  <{'hipe_bs_primop',{'bs_get_integer',_X_Size,_X_Flags}}> when 'true' ->
	      let <_cor5> =
		  %% Line 824
		  call 'erl_types':'t_integer'
		      ()
	      in  let <_cor6> =
		      %% Line 824
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 824
		      call 'erl_types':'t_product'
			  ([_cor5|[_cor6|[]]])
	  %% Line 825
	  <{'hipe_bs_primop',{'bs_get_float',_cor36,_cor37}}> when 'true' ->
	      let <_cor7> =
		  %% Line 826
		  call 'erl_types':'t_float'
		      ()
	      in  let <_cor8> =
		      %% Line 826
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 826
		      call 'erl_types':'t_product'
			  ([_cor7|[_cor8|[]]])
	  %% Line 827
	  <{'hipe_bs_primop',{'bs_get_binary',_cor38,_cor39}}> when 'true' ->
	      let <_cor9> =
		  %% Line 828
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor10> =
		      %% Line 828
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 828
		      call 'erl_types':'t_product'
			  ([_cor9|[_cor10|[]]])
	  %% Line 829
	  <{'hipe_bs_primop',{'bs_get_binary_all',_cor40,_cor41}}> when 'true' ->
	      %% Line 830
	      call 'erl_types':'t_bitstr'
		  ()
	  %% Line 831
	  <{'hipe_bs_primop',{'bs_get_binary_all_2',_cor42,_cor43}}> when 'true' ->
	      let <_cor11> =
		  %% Line 832
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor12> =
		      %% Line 832
		      call 'erl_types':'t_matchstate'
			  ()
		  in  %% Line 832
		      call 'erl_types':'t_product'
			  ([_cor11|[_cor12|[]]])
	  %% Line 833
	  <{'hipe_bs_primop','bs_final'}> when 'true' ->
	      %% Line 834
	      call 'erl_types':'t_bitstr'
		  ()
	  %% Line 835
	  <{'hipe_bs_primop',{'bs_init',_cor44,_cor45}}> when 'true' ->
	      let <_cor13> =
		  %% Line 836
		  call 'erl_types':'t_binary'
		      ()
	      in  let <_cor14> =
		      %% Line 836
		      call 'erl_types':'t_bitstr'
			  ()
		  in  let <_cor15> =
			  %% Line 837
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 836
			  call 'erl_types':'t_product'
			      ([_cor13|[_cor14|%% Line 837
					       [_cor15|[]]]])
	  %% Line 838
	  <{'hipe_bs_primop',{'bs_init',_cor46}}> when 'true' ->
	      let <_cor16> =
		  %% Line 839
		  call 'erl_types':'t_binary'
		      ()
	      in  let <_cor17> =
		      %% Line 839
		      call 'erl_types':'t_bitstr'
			  ()
		  in  let <_cor18> =
			  %% Line 840
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 839
			  call 'erl_types':'t_product'
			      ([_cor16|[_cor17|%% Line 840
					       [_cor18|[]]]])
	  %% Line 841
	  <{'hipe_bs_primop',{'bs_init_bits',Size,_cor47}}> when 'true' ->
	      let <_cor19> =
		  %% Line 842
		  call 'erl_types':'t_bitstr'
		      (0, Size)
	      in  let <_cor20> =
		      %% Line 842
		      call 'erl_types':'t_bitstr'
			  ()
		  in  let <_cor21> =
			  %% Line 843
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 842
			  call 'erl_types':'t_product'
			      ([_cor19|[_cor20|%% Line 843
					       [_cor21|[]]]])
	  %% Line 844
	  <{'hipe_bs_primop',{'bs_init_bits',_cor48}}> when 'true' ->
	      let <_cor22> =
		  %% Line 845
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor23> =
		      %% Line 845
		      call 'erl_types':'t_bitstr'
			  ()
		  in  let <_cor24> =
			  %% Line 846
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 845
			  call 'erl_types':'t_product'
			      ([_cor22|[_cor23|%% Line 846
					       [_cor24|[]]]])
	  %% Line 847
	  <{'hipe_bs_primop',{'bs_add',_cor49,_cor50}}> when 'true' ->
	      %% Line 848
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 849
	  <{'hipe_bs_primop',{'bs_add',_cor51}}> when 'true' ->
	      %% Line 850
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 851
	  <{'hipe_bs_primop','bs_bits_to_bytes'}> when 'true' ->
	      %% Line 852
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 853
	  <{'hipe_bs_primop','bs_bits_to_bytes2'}> when 'true' ->
	      %% Line 854
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 855
	  <{'hipe_bs_primop',{'bs_private_append',_X_U,_X_Flags}}> when 'true' ->
	      let <_cor25> =
		  %% Line 857
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor26> =
		      %% Line 858
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor27> =
			  %% Line 859
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 856
			  call 'erl_types':'t_product'
			      (%% Line 857
			       [_cor25|%% Line 858
				       [_cor26|%% Line 859
					       [_cor27|[]]]])
	  %% Line 860
	  <{'hipe_bs_primop',{'bs_append',_X_W,_X_R,_X_U,_X_Flags}}> when 'true' ->
	      let <_cor28> =
		  %% Line 862
		  call 'erl_types':'t_bitstr'
		      ()
	      in  let <_cor29> =
		      %% Line 863
		      call 'erl_types':'t_any'
			  ()
		  in  let <_cor30> =
			  %% Line 864
			  call 'erl_types':'t_bitstr'
			      ()
		      in  %% Line 861
			  call 'erl_types':'t_product'
			      (%% Line 862
			       [_cor28|%% Line 863
				       [_cor29|%% Line 864
					       [_cor30|[]]]])
	  %% Line 865
	  <{'hipe_bs_primop','bs_init_writable'}> when 'true' ->
	      %% Line 866
	      call 'erl_types':'t_bitstr'
		  ()
	  %% Line 867
	  <{'hipe_bs_primop',_X_BsOp}> when 'true' ->
	      %% Line 868
	      call 'erl_types':'t_any'
		  ()
	  %% Line 871
	  <{'mkfun',_cor52,_cor53,_cor54}> when 'true' ->
	      %% Line 873
	      call 'erl_types':'t_fun'
		  ()
	  %% Line 874
	  <{'apply_N',_cor55}> when 'true' ->
	      %% Line 875
	      call 'erl_types':'t_any'
		  ()
	  %% Line 876
	  <'call_fun'> when 'true' ->
	      %% Line 877
	      call 'erl_types':'t_any'
		  ()
	  %% Line 878
	  <'enter_fun'> when 'true' ->
	      %% Line 879
	      call 'erl_types':'t_any'
		  ()
	  %% Line 882
	  <'check_get_msg'> when 'true' ->
	      %% Line 883
	      call 'erl_types':'t_any'
		  ()
	  %% Line 884
	  <'clear_timeout'> when 'true' ->
	      %% Line 885
	      call 'erl_types':'t_any'
		  ()
	  %% Line 886
	  <'next_msg'> when 'true' ->
	      %% Line 887
	      call 'erl_types':'t_any'
		  ()
	  %% Line 888
	  <'select_msg'> when 'true' ->
	      %% Line 889
	      call 'erl_types':'t_any'
		  ()
	  %% Line 890
	  <'set_timeout'> when 'true' ->
	      %% Line 891
	      call 'erl_types':'t_any'
		  ()
	  %% Line 892
	  <'suspend_msg'> when 'true' ->
	      %% Line 893
	      call 'erl_types':'t_any'
		  ()
	  %% Line 896
	  <{'closure_element',_cor56}> when 'true' ->
	      %% Line 897
	      call 'erl_types':'t_any'
		  ()
	  %% Line 898
	  <'redtest'> when 'true' ->
	      %% Line 899
	      call 'erl_types':'t_any'
		  ()
	  %% Line 900
	  <'debug_native_called'> when 'true' ->
	      %% Line 901
	      call 'erl_types':'t_any'
		  ()
	  %% Line 902
	  <{M,F,A}> when 'true' ->
	      %% Line 903
	      call 'erl_bif_types':'type'
		  (M, F, A)
	  ( <_cor31> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor31})
	    -| ['compiler_generated'] )
	end
'arg_types'/1 =
    %% Line 914
    fun (_cor0) ->
	%% Line 915
	case _cor0 of
	  %% Line 916
	  <{M,F,A}> when 'true' ->
	      %% Line 917
	      call 'erl_bif_types':'arg_types'
		  (M, F, A)
	  %% Line 918
	  <{'element',_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 919
		  call 'erl_types':'t_pos_fixnum'
		      ()
	      in  let <_cor2> =
		      %% Line 919
		      call 'erl_types':'t_tuple'
			  ()
		  in  %% Line 919
		      [_cor1|[_cor2|[]]]
	  %% Line 920
	  <'+'> when 'true' ->
	      %% Line 921
	      call 'erl_bif_types':'arg_types'
		  ('erlang', '+', 2)
	  %% Line 922
	  <'-'> when 'true' ->
	      %% Line 923
	      call 'erl_bif_types':'arg_types'
		  ('erlang', '-', 2)
	  %% Line 924
	  <'*'> when 'true' ->
	      %% Line 925
	      call 'erl_bif_types':'arg_types'
		  ('erlang', '*', 2)
	  %% Line 926
	  <'/'> when 'true' ->
	      %% Line 927
	      call 'erl_bif_types':'arg_types'
		  ('erlang', '/', 2)
	  %% Line 928
	  <'band'> when 'true' ->
	      %% Line 929
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'band', 2)
	  %% Line 930
	  <'bnot'> when 'true' ->
	      %% Line 931
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'bnot', 1)
	  %% Line 932
	  <'bor'> when 'true' ->
	      %% Line 933
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'bor', 2)
	  %% Line 934
	  <'bxor'> when 'true' ->
	      %% Line 935
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'bxor', 2)
	  %% Line 936
	  <'bsl'> when 'true' ->
	      %% Line 937
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'bsl', 2)
	  %% Line 938
	  <'bsr'> when 'true' ->
	      %% Line 939
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'bsr', 2)
	  %% Line 940
	  <'div'> when 'true' ->
	      %% Line 941
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'div', 2)
	  %% Line 942
	  <'rem'> when 'true' ->
	      %% Line 943
	      call 'erl_bif_types':'arg_types'
		  ('erlang', 'rem', 2)
	  %% Line 944
	  <_cor6> when 'true' ->
	      %% Line 945
	      'unknown'
	end
'check_fun_args'/2 =
    %% Line 952
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2]> when 'true' ->
	      let <Inf> =
		  %% Line 953
		  call 'erl_types':'t_inf'
		      (T1, T2)
	      in  %% Line 954
		  case call 'erl_types':'t_inf'
			   (Inf, T2) of
		    %% Line 955
		    <_cor6>
			when call 'erlang':'=:='
			      (_cor6,
			       Inf) ->
			%% Line 956
			apply 'check_fun_args'/2
			    (Left1, Left2)
		    %% Line 957
		    <_cor7> when 'true' ->
			%% Line 958
			'error'
		  end
	  %% Line 960
	  <[],[]> when 'true' ->
	      %% Line 961
	      'ok'
	  %% Line 962
	  <_cor8,_cor9> when 'true' ->
	      %% Line 963
	      'error'
	end
'match_bin'/2 =
    %% Line 965
    fun (_cor1,_cor0) ->
	%% Line 966
	call 'erl_types':'t_bitstr_match'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_primops')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_primops', _cor0)
end