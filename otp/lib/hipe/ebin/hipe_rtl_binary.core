module 'hipe_rtl_binary' ['gen_rtl'/7,
			  'module_info'/0,
			  'module_info'/1]
    attributes []
'gen_rtl'/7 =
    %% Line 30
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_143> =
	    %% Line 31
	    apply 'type_of_operation'/1
		(_cor6)
	in  %% Line 31
	    case _143 of
	      %% Line 32
	      <'match'> when 'true' ->
		  let <_cor7> =
		      %% Line 33
		      call 'hipe_rtl_binary_match':'gen_rtl'
			  (_cor6, _cor5, _cor4, _cor3, _cor2)
		  in  %% Line 33
		      {_cor7,_cor0}
	      %% Line 35
	      <'construct'> when 'true' ->
		  %% Line 36
		  call 'hipe_rtl_binary_construct':'gen_rtl'
		      (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_143})
		-| ['compiler_generated'] )
	    end
'type_of_operation'/1 =
    %% Line 40
    fun (_cor0) ->
	case _cor0 of
	  <{'bs_start_match',_cor2}> when 'true' ->
	      'match'
	  %% Line 41
	  <{{'bs_start_match',_cor3},_cor4}> when 'true' ->
	      'match'
	  %% Line 42
	  <{'bs_get_binary',_cor5,_cor6}> when 'true' ->
	      'match'
	  %% Line 43
	  <{'bs_get_binary_all',_cor7,_cor8}> when 'true' ->
	      'match'
	  %% Line 44
	  <{'bs_get_binary_all_2',_cor9,_cor10}> when 'true' ->
	      'match'
	  %% Line 45
	  <{'bs_get_integer',_cor11,_cor12}> when 'true' ->
	      'match'
	  %% Line 46
	  <{'bs_get_float',_cor13,_cor14}> when 'true' ->
	      'match'
	  %% Line 47
	  <{'bs_skip_bits',_cor15}> when 'true' ->
	      'match'
	  %% Line 48
	  <{'bs_skip_bits_all',_cor16,_cor17}> when 'true' ->
	      'match'
	  %% Line 49
	  <{'bs_test_tail',_cor18}> when 'true' ->
	      'match'
	  %% Line 50
	  <{'bs_restore',_cor19}> when 'true' ->
	      'match'
	  %% Line 51
	  <{'bs_save',_cor20}> when 'true' ->
	      'match'
	  %% Line 52
	  <{'bs_test_unit',_cor21}> when 'true' ->
	      'match'
	  %% Line 53
	  <{'bs_match_string',_cor22,_cor23}> when 'true' ->
	      'match'
	  %% Line 54
	  <'bs_context_to_binary'> when 'true' ->
	      'match'
	  %% Line 55
	  <{'bs_add',_cor24}> when 'true' ->
	      'construct'
	  %% Line 56
	  <{'bs_add',_cor25,_cor26}> when 'true' ->
	      'construct'
	  %% Line 57
	  <'bs_bits_to_bytes'> when 'true' ->
	      'construct'
	  %% Line 58
	  <'bs_bits_to_bytes2'> when 'true' ->
	      'construct'
	  %% Line 59
	  <{'bs_init',_cor27}> when 'true' ->
	      'construct'
	  %% Line 60
	  <{'bs_init',_cor28,_cor29}> when 'true' ->
	      'construct'
	  %% Line 61
	  <{'bs_init_bits',_cor30}> when 'true' ->
	      'construct'
	  %% Line 62
	  <{'bs_init_bits',_cor31,_cor32}> when 'true' ->
	      'construct'
	  %% Line 63
	  <{'bs_put_binary',_cor33,_cor34}> when 'true' ->
	      'construct'
	  %% Line 64
	  <{'bs_put_binary_all',_cor35}> when 'true' ->
	      'construct'
	  %% Line 65
	  <{'bs_put_float',_cor36,_cor37,_cor38}> when 'true' ->
	      'construct'
	  %% Line 66
	  <{'bs_put_integer',_cor39,_cor40,_cor41}> when 'true' ->
	      'construct'
	  %% Line 67
	  <{'bs_put_string',_cor42,_cor43}> when 'true' ->
	      'construct'
	  %% Line 68
	  <{'unsafe_bs_put_integer',_cor44,_cor45,_cor46}> when 'true' ->
	      'construct'
	  %% Line 69
	  <'bs_utf8_size'> when 'true' ->
	      'construct'
	  %% Line 70
	  <'bs_put_utf8'> when 'true' ->
	      'construct'
	  %% Line 71
	  <'bs_get_utf8'> when 'true' ->
	      'match'
	  %% Line 72
	  <'bs_utf16_size'> when 'true' ->
	      'construct'
	  %% Line 73
	  <{'bs_put_utf16',_cor47}> when 'true' ->
	      'construct'
	  %% Line 74
	  <{'bs_get_utf16',_cor48}> when 'true' ->
	      'match'
	  %% Line 75
	  <'bs_validate_unicode'> when 'true' ->
	      'construct'
	  %% Line 76
	  <'bs_validate_unicode_retract'> when 'true' ->
	      'match'
	  %% Line 77
	  <'bs_final'> when 'true' ->
	      'construct'
	  %% Line 78
	  <{'bs_append',_cor49,_cor50,_cor51,_cor52}> when 'true' ->
	      'construct'
	  %% Line 79
	  <{'bs_private_append',_cor53,_cor54}> when 'true' ->
	      'construct'
	  %% Line 80
	  <'bs_init_writable'> when 'true' ->
	      'construct'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'type_of_operation',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_binary')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_binary', _cor0)
end