module 'hipe_icode_exceptions' ['fix_catches'/1,
				'module_info'/0,
				'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'fix_catches',1},[{'type',87,'fun',[{'type',87,'product',[{'type',87,'record',[{'atom',87,'cfg'}]}]}|[{'type',87,'record',[{'atom',87,'cfg'}]}]]}]}],
		%% Line 395
		'type' =
		    %% Line 395
		    [{{'record','state'},[{'typed_record_field',{'record_field',395,{'atom',395,'cfg'}},{'type',395,'union',[{'atom',395,'undefined'}|[{'type',395,'record',[{'atom',395,'cfg'}]}]]}}|[{'typed_record_field',{'record_field',396,{'atom',396,'changed'},{'atom',396,'false'}},{'type',396,'boolean',[]}}|[{'typed_record_field',{'record_field',397,{'atom',397,'succ'}},{'type',397,'union',[{'atom',397,'undefined'}|[{'type',397,'record',[{'atom',397,'cfg'}]}]]}}|[{'typed_record_field',{'record_field',398,{'atom',398,'pred'}},{'type',398,'union',[{'atom',398,'undefined'}|[{'type',398,'record',[{'atom',398,'cfg'}]}]]}}|[{'typed_record_field',{'record_field',399,{'atom',399,'start_labels'}},{'type',399,'union',[{'atom',399,'undefined'}|[{'type',399,'nonempty_list',[{'type',399,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',400,{'atom',400,'visited'},{'call',400,{'remote',400,{'atom',400,'hipe_icode_cfg'},{'atom',400,'none_visited'}},[]}},{'remote_type',400,[{'atom',400,'gb_sets'}|[{'atom',400,'set'}|[[]]]]}}|[{'typed_record_field',{'record_field',401,{'atom',401,'out'},{'call',401,{'remote',401,{'atom',401,'gb_trees'},{'atom',401,'empty'}},[]}},{'remote_type',401,[{'atom',401,'gb_trees'}|[{'atom',401,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',402,{'atom',402,'in'},{'call',402,{'remote',402,{'atom',402,'gb_trees'},{'atom',402,'empty'}},[]}},{'remote_type',402,[{'atom',402,'gb_trees'}|[{'atom',402,'tree'}|[[]]]]}}]]]]]]]],[]}]]
'fix_catches'/1 =
    %% Line 89
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 90
	    apply 'init_state'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 90
		apply 'find_catches'/1
		    (_cor1)
	    in  %% Line 90
		case apply 'build_mapping'/1
			 (_cor2) of
		  <{Map,State}> when 'true' ->
		      let <_cor4> =
			  %% Line 91
			  apply 'rewrite'/2
			      (State, Map)
		      in  let <_cor5> =
			      %% Line 91
			      apply 'get_cfg'/1
				  (_cor4)
			  in  %% Line 91
			      call 'hipe_icode_cfg':'remove_unreachable_code'
				  (_cor5)
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'find_catches'/1 =
    %% Line 95
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 96
	    apply 'get_start_labels'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 97
		apply 'clear_changed'/1
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 97
		    apply 'clear_visited'/1
			(_cor1)
		in  %% Line 96
		    apply 'find_catches'/2
			(_cor3, _cor2)
'find_catches'/2 =
    %% Line 99
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L|Ls],State0> when 'true' ->
	      %% Line 100
	      case apply 'is_visited'/2
		       (L, State0) of
		%% Line 101
		<'true'> when 'true' ->
		    %% Line 102
		    apply 'find_catches'/2
			(Ls, State0)
		%% Line 103
		<'false'> when 'true' ->
		    let <State1> =
			%% Line 104
			apply 'set_visited'/2
			    (L, State0)
		    in  let <Code> =
			    %% Line 105
			    apply 'get_bb_code'/2
				(L, State1)
			in  let <Cs> =
				%% Line 106
				apply 'get_new_catches_in'/2
				    (L, State1)
			    in  let <State2> =
				    %% Line 107
				    apply 'set_catches_in'/3
					(L, Cs, State1)
				in  let <Cs1> =
					%% Line 108
					apply 'catches_out'/2
					    (Code, Cs)
				    in  let <_cor7> =
					    %% Line 109
					    apply 'get_succ'/2
						(L, State2)
					in  let <Ls1> =
						%% Line 109
						call 'erlang':'++'
						    (_cor7, Ls)
					    in  let <Cs0> =
						    %% Line 110
						    apply 'get_catches_out'/2
							(L, State2)
						in  %% Line 111
						    case <> of
						      <>
							  when call 'erlang':'=:='
								(Cs1,
								 Cs0) ->
							  %% Line 112
							  apply 'find_catches'/2
							      (Ls1, State2)
						      %% Line 113
						      <> when 'true' ->
							  let <State3> =
							      %% Line 114
							      apply 'set_catches_out'/3
								  (L, Cs1, State2)
							  in  let <_cor11> =
								  %% Line 115
								  apply 'set_changed'/1
								      (State3)
							      in  %% Line 115
								  apply 'find_catches'/2
								      (Ls1, _cor11)
						    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 118
	  <[],State> when 'true' ->
	      %% Line 119
	      case apply 'is_changed'/1
		       (State) of
		%% Line 120
		<'true'> when 'true' ->
		    %% Line 121
		    apply 'find_catches'/1
			(State)
		%% Line 122
		<'false'> when 'true' ->
		    %% Line 123
		    State
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'find_catches',2}}] )
	    -| ['compiler_generated'] )
	end
'catches_out'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Is],Cs> when 'true' ->
	      let <_cor2> =
		  %% Line 127
		  apply 'catches_out_instr'/2
		      (I, Cs)
	      in  %% Line 127
		  apply 'catches_out'/2
		      (Is, _cor2)
	  %% Line 128
	  <[],Cs> when 'true' ->
	      %% Line 129
	      Cs
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'catches_out',2}}] )
	    -| ['compiler_generated'] )
	end
'catches_out_instr'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	%% Line 132
	case _cor1 of
	  %% Line 133
	  <{'icode_begin_try',_cor6,_cor7}> when 'true' ->
	      let <Id> =
		  %% Line 134
		  call 'hipe_icode':'begin_try_label'
		      (_cor1)
	      in  %% Line 135
		  apply 'push_catch'/2
		      (Id, _cor0)
	  %% Line 136
	  <{'icode_end_try'}> when 'true' ->
	      %% Line 137
	      apply 'pop_catch'/1
		  (_cor0)
	  %% Line 138
	  <{'icode_begin_handler',_cor8}> when 'true' ->
	      %% Line 139
	      apply 'pop_catch'/1
		  (_cor0)
	  %% Line 140
	  <_cor9> when 'true' ->
	      _cor0
	end
'build_mapping'/1 =
    %% Line 147
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 148
	    apply 'get_start_labels'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 148
		apply 'clear_visited'/1
		    (_cor0)
	    in  let <_cor1> =
		    %% Line 149
		    apply 'new_mapping'/0
			()
		in  %% Line 148
		    apply 'build_mapping'/3
			(_cor3, _cor2, _cor1)
'build_mapping'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[L|Ls],State0,Map> when 'true' ->
	      %% Line 152
	      case apply 'is_visited'/2
		       (L, State0) of
		%% Line 153
		<'true'> when 'true' ->
		    %% Line 154
		    apply 'build_mapping'/3
			(Ls, State0, Map)
		%% Line 155
		<'false'> when 'true' ->
		    let <State1> =
			%% Line 156
			apply 'set_visited'/2
			    (L, State0)
		    in  let <_cor4> =
			    %% Line 157
			    apply 'get_catches_in'/2
				(L, State1)
			in  let <Cs> =
				%% Line 157
				apply 'list_of_catches'/1
				    (_cor4)
			    in  %% Line 158
				case apply 'map_bb'/4
					 (L, Cs, State1, Map) of
				  <{Map1,State2}> when 'true' ->
				      let <_cor7> =
					  %% Line 159
					  apply 'get_succ'/2
					      (L, State2)
				      in  let <Ls1> =
					      %% Line 159
					      call 'erlang':'++'
						  (_cor7, Ls)
					  in  %% Line 160
					      apply 'build_mapping'/3
						  (Ls1, State2, Map1)
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 162
	  <[],State,Map> when 'true' ->
	      %% Line 163
	      {Map,State}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'build_mapping',3}}] )
	    -| ['compiler_generated'] )
	end
'map_bb'/4 =
    %% Line 165
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_L,[_X_C|[]],State,Map> when 'true' ->
	      %% Line 166
	      {Map,State}
	  %% Line 167
	  <L,[C|Cs],State,Map> when 'true' ->
	      let <Map1> =
		  %% Line 170
		  apply 'new_catch_labels'/3
		      (Cs, L, Map)
	      in  let <_cor5> =
		      %% Line 171
		      apply 'single_catch'/1
			  (C)
		  in  let <State1> =
			  %% Line 171
			  apply 'set_catches_in'/3
			      (L, _cor5, State)
		      in  let <Code> =
			      %% Line 172
			      apply 'get_bb_code'/2
				  (L, State1)
			  in  let <State2> =
				  %% Line 173
				  apply 'clone'/5
				      (Cs, L, Code, State1, Map1)
			      in  %% Line 174
				  {Map1,State2}
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'map_bb',4}}] )
	    -| ['compiler_generated'] )
	end
'clone'/5 =
    %% Line 176
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],L,Code,State,Map> when 'true' ->
	      let <Ren> =
		  %% Line 177
		  apply 'get_renaming'/2
		      (C, Map)
	      in  let <L1> =
		      %% Line 178
		      apply Ren
			  (L)
		  in  let <State1> =
			  %% Line 179
			  apply 'set_bb_code'/3
			      (L1, Code, State)
		      in  let <_cor8> =
			      %% Line 180
			      apply 'single_catch'/1
				  (C)
			  in  let <State2> =
				  %% Line 180
				  apply 'set_catches_in'/3
				      (L1, _cor8, State1)
			      in  %% Line 181
				  apply 'clone'/5
				      (Cs, L, Code, State2, Map)
	  %% Line 182
	  <[],_X_L,_X_Code,State,_X_Map> when 'true' ->
	      %% Line 183
	      State
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'clone',5}}] )
	    -| ['compiler_generated'] )
	end
'new_catch_labels'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],L,Map> when 'true' ->
	      let <_cor3> =
		  %% Line 186
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <L1> =
		      %% Line 186
		      call 'hipe_icode':'label_name'
			  (_cor3)
		  in  let <Map1> =
			  %% Line 187
			  apply 'set_mapping'/4
			      (C, L, L1, Map)
		      in  %% Line 188
			  apply 'new_catch_labels'/3
			      (Cs, L, Map1)
	  %% Line 189
	  <[],_X_L,Map> when 'true' ->
	      %% Line 190
	      Map
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'new_catch_labels',3}}] )
	    -| ['compiler_generated'] )
	end
'rewrite'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 196
	    apply 'get_start_labels'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 196
		apply 'clear_visited'/1
		    (_cor1)
	    in  %% Line 196
		apply 'rewrite'/3
		    (_cor3, _cor2, _cor0)
'rewrite'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[L|Ls],State0,Map> when 'true' ->
	      %% Line 199
	      case apply 'is_visited'/2
		       (L, State0) of
		%% Line 200
		<'true'> when 'true' ->
		    %% Line 201
		    apply 'rewrite'/3
			(Ls, State0, Map)
		%% Line 202
		<'false'> when 'true' ->
		    let <State1> =
			%% Line 203
			apply 'set_visited'/2
			    (L, State0)
		    in  let <Code> =
			    %% Line 204
			    apply 'get_bb_code'/2
				(L, State1)
			in  let <_cor5> =
				%% Line 205
				apply 'get_catches_in'/2
				    (L, State1)
			    in  let <Cs> =
				    %% Line 205
				    apply 'list_of_catches'/1
					(_cor5)
				in  let <State2> =
					%% Line 206
					apply 'rewrite_bb'/5
					    (L, Cs, Code, State1, Map)
				    in  let <_cor8> =
					    %% Line 207
					    apply 'get_succ'/2
						(L, State2)
					in  let <Ls1> =
						%% Line 207
						call 'erlang':'++'
						    (_cor8, Ls)
					    in  %% Line 208
						apply 'rewrite'/3
						    (Ls1, State2, Map)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 210
	  <[],State,_X_Map> when 'true' ->
	      %% Line 211
	      State
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'rewrite',3}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_bb'/5 =
    %% Line 213
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <L,[C|[]],Code,State,Map> when 'true' ->
	      %% Line 214
	      case apply 'rewrite_code'/4
		       (Code, C, State, Map) of
		<{Code1,State1}> when 'true' ->
		    %% Line 215
		    apply 'set_bb_code'/3
			(L, Code1, State1)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rewrite_bb',5}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_code'/4 =
    %% Line 217
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 218
	apply 'rewrite_code'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'rewrite_code'/5 =
    %% Line 220
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],C,State,Map,As> when 'true' ->
	      let <_cor5> =
		  %% Line 221
		  apply 'single_catch'/1
		      (C)
	      in  let <_cor6> =
		      %% Line 221
		      apply 'catches_out_instr'/2
			  (I, _cor5)
		  in  %% Line 221
		      case apply 'list_of_catches'/1
			       (_cor6) of
			<[C1|[]]> when 'true' ->
			    %% Line 222
			    case I of
			      %% Line 223
			      <{'icode_begin_try',_cor22,_cor23}> when 'true' ->
				  %% Line 224
				  case apply 'update_begin_try'/5
					   (I, Is, C, State, Map) of
				    <{I1,Is1,State1}> when 'true' ->
					let <I2> =
					    %% Line 225
					    apply 'redirect_instr'/3
						(I1, C, Map)
					in  %% Line 226
					    apply 'rewrite_code'/5
						(Is1, C1, State1, Map, [I2|As])
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 227
			      <{'icode_end_try'}> when 'true' ->
				  %% Line 228
				  apply 'rewrite_code'/5
				      (Is, C1, State, Map, As)
			      %% Line 229
			      <{'icode_call',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
				  %% Line 230
				  case apply 'update_call'/5
					   (I, Is, C, State, Map) of
				    <{I1,Is1,State1}> when 'true' ->
					let <I2> =
					    %% Line 231
					    apply 'redirect_instr'/3
						(I1, C, Map)
					in  %% Line 232
					    apply 'rewrite_code'/5
						(Is1, C1, State1, Map, [I2|As])
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
			      %% Line 233
			      <{'icode_fail',_cor31,_cor32,_cor33}> when 'true' ->
				  %% Line 234
				  case apply 'update_fail'/5
					   (I, Is, C, State, Map) of
				    <{I1,Is1,State1}> when 'true' ->
					let <I2> =
					    %% Line 235
					    apply 'redirect_instr'/3
						(I1, C, Map)
					in  %% Line 236
					    apply 'rewrite_code'/5
						(Is1, C1, State1, Map, [I2|As])
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      %% Line 237
			      <_cor34> when 'true' ->
				  let <I1> =
				      %% Line 238
				      apply 'redirect_instr'/3
					  (I, C, Map)
				  in  %% Line 239
				      apply 'rewrite_code'/5
					  (Is, C1, State, Map, [I1|As])
			    end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  %% Line 241
	  <[],_X_C,State,_X_Map,As> when 'true' ->
	      let <_cor16> =
		  %% Line 242
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 242
		  {_cor16,State}
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'rewrite_code',5}}] )
	    -| ['compiler_generated'] )
	end
'redirect_instr'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 245
	    call 'hipe_icode':'successors'
		(_cor2)
	in  let <_cor3> =
		%% Line 245
		apply 'get_renaming'/2
		    (_cor1, _cor0)
	    in  %% Line 245
		apply 'redirect_instr_1'/3
		    (_cor2, _cor4, _cor3)
'redirect_instr_1'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[L0|Ls],Ren> when 'true' ->
	      let <_cor3> =
		  %% Line 248
		  apply Ren
		      (L0)
	      in  let <I1> =
		      %% Line 248
		      call 'hipe_icode':'redirect_jmp'
			  (I, L0, _cor3)
		  in  %% Line 249
		      apply 'redirect_instr_1'/3
			  (I1, Ls, Ren)
	  %% Line 250
	  <I,[],_X_Ren> when 'true' ->
	      %% Line 251
	      I
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'redirect_instr_1',3}}] )
	    -| ['compiler_generated'] )
	end
'update_begin_try'/5 =
    %% Line 253
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 254
	    call 'hipe_icode':'begin_try_successor'
		(_cor4)
	in  let <I1> =
		%% Line 255
		call 'hipe_icode':'mk_goto'
		    (L)
	    in  %% Line 256
		{I1,_cor3,_cor1}
'update_call'/5 =
    %% Line 258
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 259
	case apply 'top_of_stack'/1
		 (_cor2) of
	  %% Line 260
	  <[]> when 'true' ->
	      %% Line 262
	      {_cor4,_cor3,_cor1}
	  %% Line 263
	  <L> when 'true' ->
	      let <_cor5> =
		  %% Line 265
		  call 'hipe_icode':'call_fun'
		      (_cor4)
	      in  %% Line 265
		  case call 'hipe_icode_primops':'fails'
			   (_cor5) of
		    %% Line 266
		    <'true'> when 'true' ->
			%% Line 268
			case call 'hipe_icode':'call_fail_label'
				 (_cor4) of
			  %% Line 269
			  <[]> when 'true' ->
			      let <I1> =
				  %% Line 270
				  call 'hipe_icode':'call_set_fail_label'
				      (_cor4, L)
			      in  %% Line 273
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor3,
					       []) ->
					%% Line 274
					{I1,_cor3,_cor1}
				    %% Line 275
				    <> when 'true' ->
					let <_cor7> =
					    %% Line 276
					    call 'hipe_icode':'mk_new_label'
						()
					in  let <L1> =
						%% Line 276
						call 'hipe_icode':'label_name'
						    (_cor7)
					    in  let <I2> =
						    %% Line 277
						    call 'hipe_icode':'call_set_continuation'
							(I1, L1)
						in  let <State1> =
							%% Line 278
							apply 'set_bb_code'/3
							    (L1, _cor3, _cor1)
						    in  let <_cor11> =
							    %% Line 279
							    apply 'single_catch'/1
								(_cor2)
							in  let <State2> =
								%% Line 279
								apply 'set_catches_in'/3
								    (L1, _cor11, State1)
							    in  let <State3> =
								    %% Line 280
								    apply 'rewrite_bb'/5
									(L1, [_cor2|[]], _cor3, State2, _cor0)
								in  %% Line 281
								    {I2,[],State3}
				  end
			  %% Line 283
			  <_cor23>
			      when call 'erlang':'=:='
				    (_cor3,
				     []) ->
			      %% Line 286
			      {_cor4,_cor3,_cor1}
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    %% Line 288
		    <'false'> when 'true' ->
			let <I1> =
			    %% Line 290
			    call 'hipe_icode':'call_set_fail_label'
				(_cor4, [])
			in  %% Line 291
			    {I1,_cor3,_cor1}
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	end
'update_fail'/5 =
    %% Line 295
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 296
	case call 'hipe_icode':'fail_label'
		 (_cor4) of
	  %% Line 297
	  <[]> when 'true' ->
	      let <_cor5> =
		  %% Line 298
		  apply 'top_of_stack'/1
		      (_cor2)
	      in  let <_cor6> =
		      %% Line 298
		      call 'hipe_icode':'fail_set_label'
			  (_cor4, _cor5)
		  in  %% Line 298
		      {_cor6,_cor3,_cor1}
	  %% Line 299
	  <_cor13> when 'true' ->
	      %% Line 300
	      {_cor4,_cor3,_cor1}
	end
'no_catches'/0 =
    %% Line 308
    fun () ->
	[]
'single_catch'/1 =
    %% Line 311
    fun (_cor0) ->
	[_cor0|[]]
'empty_stack'/0 =
    %% Line 314
    fun () ->
	[]
'top_of_stack'/1 =
    %% Line 317
    fun (_cor0) ->
	case _cor0 of
	  <[C|_cor2]> when 'true' ->
	      C
	  %% Line 318
	  <[]> when 'true' ->
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'top_of_stack',1}}] )
	    -| ['compiler_generated'] )
	end
'join_catches'/2 =
    %% Line 320
    fun (_cor1,_cor0) ->
	%% Line 321
	call 'ordsets':'union'
	    (_cor1, _cor0)
'list_of_catches'/1 =
    %% Line 323
    fun (_cor0) ->
	_cor0
'push_catch'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,[]> when 'true' ->
	      %% Line 330
	      [[L|[]]|[]]
	  %% Line 331
	  <L,Cs> when 'true' ->
	      %% Line 332
	      apply 'push_catch_1'/2
		  (L, Cs)
	end
'push_catch_1'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,[C|Cs]> when 'true' ->
	      let <_cor2> =
		  %% Line 335
		  apply 'push_catch_1'/2
		      (L, Cs)
	      in  %% Line 335
		  [[L|C]|_cor2]
	  %% Line 336
	  <_X_L,[]> when 'true' ->
	      %% Line 337
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'push_catch_1',2}}] )
	    -| ['compiler_generated'] )
	end
'pop_catch'/1 =
    %% Line 342
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 343
	    apply 'pop_catch_1'/1
		(_cor0)
	in  %% Line 343
	    call 'ordsets':'from_list'
		(_cor1)
'pop_catch_1'/1 =
    %% Line 345
    fun (_cor0) ->
	case _cor0 of
	  <[[_cor4|C]|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 346
		  apply 'pop_catch_1'/1
		      (Cs)
	      in  %% Line 346
		  [C|_cor1]
	  %% Line 347
	  <[[]|Cs]> when 'true' ->
	      let <_cor2> =
		  %% Line 356
		  apply 'pop_catch_1'/1
		      (Cs)
	      in  %% Line 356
		  [[]|_cor2]
	  %% Line 357
	  <[]> when 'true' ->
	      %% Line 358
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'pop_catch_1',1}}] )
	    -| ['compiler_generated'] )
	end
'new_mapping'/0 =
    %% Line 364
    fun () ->
	%% Line 365
	call 'gb_trees':'empty'
	    ()
'set_mapping'/4 =
    %% Line 367
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 368
	    case call 'gb_trees':'lookup'
		     (_cor3, _cor0) of
	      %% Line 369
	      <{'value',Dict0}> when 'true' ->
		  %% Line 370
		  call 'gb_trees':'enter'
		      (_cor2, _cor1, Dict0)
	      %% Line 371
	      <'none'> when 'true' ->
		  let <_cor4> =
		      %% Line 372
		      call 'gb_trees':'empty'
			  ()
		  in  %% Line 372
		      call 'gb_trees':'insert'
			  (_cor2, _cor1, _cor4)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  %% Line 374
	    call 'gb_trees':'enter'
		(_cor3, _cor6, _cor0)
'get_renaming'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	%% Line 379
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 380
	  <{'value',Dict}> when 'true' ->
	      %% Line 381
	      ( fun (_cor3) ->
		    %% Line 382
		    case call 'gb_trees':'lookup'
			     (_cor3, Dict) of
		      %% Line 383
		      <{'value',L1}> when 'true' ->
			  L1
		      %% Line 384
		      <'none'> when 'true' ->
			  _cor3
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-get_renaming/2-fun-0-'}}] )
	  %% Line 387
	  <'none'> when 'true' ->
	      %% Line 388
	      ( fun (_cor5) ->
		    _cor5
		-| [{'id',{0,0,'-get_renaming/2-fun-1-'}}] )
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'init_state'/1 =
    %% Line 405
    fun (_cor0) ->
	let <_cor3> =
	    call 'hipe_icode_cfg':'none_visited'
		()
	in  let <_cor2> =
		call 'gb_trees':'empty'
		    ()
	    in  let <_cor1> =
		    call 'gb_trees':'empty'
			()
		in  let <State> =
			%% Line 406
			{'state',_cor0,'false','undefined','undefined','undefined',_cor3,_cor2,_cor1}
		    in  %% Line 407
			apply 'refresh_state_cache'/1
			    (State)
'refresh_state_cache'/1 =
    %% Line 409
    fun (_cor0) ->
	%% Line 410
	( case _cor0 of
	    ( <( {'state',_rec0,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      %% Line 411
		      call 'hipe_icode_cfg':'start_label'
			  (_rec0)
		  in  let <SLs> =
			  %% Line 411
			  [_cor4|[]]
		      in  let <_cor7> =
			      %% Line 412
			      call 'erlang':'setelement'
				  (6, _cor0, SLs)
			  in  let <_cor8> =
				  %% Line 412
				  call 'erlang':'setelement'
				      (5, _cor7, _rec0)
			      in  %% Line 412
				  call 'erlang':'setelement'
				      (4, _cor8, _rec0)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_cfg'/1 =
    %% Line 414
    fun (_cor0) ->
	%% Line 415
	( case _cor0 of
	    ( <( {'state',_rec2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec2
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_start_labels'/1 =
    %% Line 417
    fun (_cor0) ->
	%% Line 418
	( case _cor0 of
	    ( <( {'state',_cor3,_cor4,_cor5,_cor6,_rec3,_cor7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec3
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_pred'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	%% Line 421
	( case _cor0 of
	    ( <( {'state',_cor6,_cor7,_cor8,_rec4,_cor9,_cor10,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'hipe_icode_cfg':'pred'
		      (_rec4, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_succ'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	%% Line 424
	( case _cor0 of
	    ( <( {'state',_cor6,_cor7,_rec5,_cor8,_cor9,_cor10,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'hipe_icode_cfg':'succ'
		      (_rec5, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_changed'/1 =
    %% Line 426
    fun (_cor0) ->
	%% Line 427
	case _cor0 of
	  <{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, 'true')
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'is_changed'/1 =
    %% Line 429
    fun (_cor0) ->
	%% Line 430
	( case _cor0 of
	    ( <( {'state',_cor3,_rec7,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec7
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_changed'/1 =
    %% Line 432
    fun (_cor0) ->
	%% Line 433
	case _cor0 of
	  <{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, 'false')
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_catches_out'/3 =
    %% Line 435
    fun (_cor2,_cor1,_cor0) ->
	%% Line 436
	( case _cor0 of
	    ( <( {'state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec11,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec9> =
		      call 'gb_trees':'enter'
			  (_cor2, _cor1, _rec11)
		  in  call 'erlang':'setelement'
			  (8, _cor0, _rec9)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_catches_out'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	%% Line 439
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_rec12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'gb_trees':'lookup'
			   (_cor1, _rec12) of
		    %% Line 440
		    <{'value',Cs}> when 'true' ->
			Cs
		    %% Line 441
		    <'none'> when 'true' ->
			apply 'no_catches'/0
			    ()
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_catches_in'/3 =
    %% Line 444
    fun (_cor2,_cor1,_cor0) ->
	%% Line 445
	( case _cor0 of
	    ( <( {'state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec15}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec13> =
		      call 'gb_trees':'enter'
			  (_cor2, _cor1, _rec15)
		  in  call 'erlang':'setelement'
			  (9, _cor0, _rec13)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_catches_in'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	%% Line 448
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec16}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'gb_trees':'lookup'
			   (_cor1, _rec16) of
		    %% Line 449
		    <{'value',Cs}> when 'true' ->
			Cs
		    %% Line 450
		    <'none'> when 'true' ->
			apply 'no_catches'/0
			    ()
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_visited'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	%% Line 454
	( case _cor0 of
	    ( <( {'state',_cor9,_cor10,_cor11,_cor12,_cor13,_rec19,_cor14,_cor15}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec17> =
		      call 'hipe_icode_cfg':'visit'
			  (_cor1, _rec19)
		  in  call 'erlang':'setelement'
			  (7, _cor0, _rec17)
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_visited'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	%% Line 457
	( case _cor0 of
	    ( <( {'state',_cor6,_cor7,_cor8,_cor9,_cor10,_rec20,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'hipe_icode_cfg':'is_visited'
		      (_cor1, _rec20)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_visited'/1 =
    %% Line 459
    fun (_cor0) ->
	let <_rec21> =
	    %% Line 460
	    call 'hipe_icode_cfg':'none_visited'
		()
	in  %% Line 460
	    case _cor0 of
	      <{'state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
		  call 'erlang':'setelement'
		      (7, _cor0, _rec21)
	      ( <_cor13> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','state'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'get_bb_code'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	%% Line 463
	( case _cor0 of
	    ( <( {'state',_rec23,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_icode_cfg':'bb'
			  (_rec23, _cor1)
		  in  call 'hipe_bb':'code'
			  (_cor4)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_bb_code'/3 =
    %% Line 465
    fun (_cor2,_cor1,_cor0) ->
	%% Line 466
	( case _cor0 of
	    ( <( {'state',_rec24,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor6> =
		      %% Line 467
		      call 'hipe_bb':'mk_bb'
			  (_cor1)
		  in  let <CFG1> =
			  %% Line 467
			  call 'hipe_icode_cfg':'bb_add'
			      (_rec24, _cor2, _cor6)
		      in  let <_cor10> =
			      %% Line 468
			      call 'erlang':'setelement'
				  (2, _cor0, CFG1)
			  in  %% Line 468
			      apply 'refresh_state_cache'/1
				  (_cor10)
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_new_catches_in'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	let <Ps> =
	    %% Line 471
	    apply 'get_pred'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 472
		apply 'get_start_labels'/1
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 472
		    case call 'lists':'member'
			     (_cor1, _cor3) of
		      %% Line 473
		      <'true'> when 'true' ->
			  let <_cor4> =
			      apply 'empty_stack'/0
				  ()
			  in  apply 'single_catch'/1
				  (_cor4)
		      %% Line 474
		      <'false'> when 'true' ->
			  apply 'no_catches'/0
			      ()
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		in  %% Line 476
		    apply 'get_new_catches_in'/3
			(Ps, _cor6, _cor0)
'get_new_catches_in'/3 =
    %% Line 478
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P|Ps],Cs,State> when 'true' ->
	      let <_cor3> =
		  %% Line 479
		  apply 'get_catches_out'/2
		      (P, State)
	      in  let <Cs1> =
		      %% Line 479
		      apply 'join_catches'/2
			  (Cs, _cor3)
		  in  %% Line 480
		      apply 'get_new_catches_in'/3
			  (Ps, Cs1, State)
	  %% Line 481
	  <[],Cs,_cor8> when 'true' ->
	      %% Line 482
	      Cs
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_new_catches_in',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_exceptions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_exceptions', _cor0)
end