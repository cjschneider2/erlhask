module 'hipe_icode_split_arith' ['cfg'/3,
				 'module_info'/0,
				 'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'cfg',3},[{'type',39,'fun',[{'type',39,'product',[{'type',39,'record',[{'atom',39,'cfg'}]}|[{'type',39,'mfa',[]}|[{'type',39,'comp_options',[]}]]]}|[{'type',39,'record',[{'atom',39,'cfg'}]}]]}]}]]
'cfg'/3 =
    %% Line 41
    fun (_cor2,_cor1,_cor0) ->
	let <Icode> =
	    %% Line 42
	    call 'hipe_icode_cfg':'cfg_to_linear'
		(_cor2)
	in  %% Line 43
	    case call 'proplists':'get_bool'
		     ('split_arith_unsafe', _cor0) of
	      %% Line 44
	      <'true'> when 'true' ->
		  apply 'make_split_unsafe'/1
		      (Icode)
	      %% Line 45
	      <_cor10> when 'true' ->
		  %% Line 46
		  case apply 'preprocess'/1
			   (Icode) of
		    %% Line 47
		    <{'do_not_split',_X_Ratio}> when 'true' ->
			_cor2
		    %% Line 49
		    <{'split',_X_Ratio,Icode1}> when 'true' ->
			%% Line 50
			apply 'split'/1
			    (Icode1)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	    end
'check_nofix_const'/1 =
    %% Line 56
    fun (_cor0) ->
	case _cor0 of
	  <[Arg1|Arg2]> when 'true' ->
	      %% Line 57
	      case call 'hipe_icode':'is_const'
		       (Arg1) of
		%% Line 58
		<'true'> when 'true' ->
		    let <_cor1> =
			%% Line 59
			call 'hipe_icode':'const_value'
			    (Arg1)
		    in  let <Val1> =
			    %% Line 59
			    call 'hipe_tagscheme':'fixnum_val'
				(_cor1)
			in  %% Line 60
			    case call 'hipe_tagscheme':'is_fixnum'
				     (Val1) of
			      %% Line 61
			      <'true'> when 'true' ->
				  %% Line 62
				  apply 'check_nofix_const'/1
				      (Arg2)
			      %% Line 63
			      <'false'> when 'true' ->
				  {'no'}
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
		%% Line 65
		<'false'> when 'true' ->
		    %% Line 66
		    apply 'check_nofix_const'/1
			(Arg2)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 68
	  <[]> when 'true' ->
	      'true'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_nofix_const',1}}] )
	    -| ['compiler_generated'] )
	end
'check_const'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <[I|Left]> when 'true' ->
	      %% Line 71
	      case I of
		%% Line 72
		<{'icode_call',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
		    %% Line 73
		    case apply 'is_arith'/1
			     (I) of
		      %% Line 74
		      <'true'> when 'true' ->
			  let <Args> =
			      %% Line 75
			      call 'hipe_icode':'call_args'
				  (I)
			  in  %% Line 76
			      case apply 'check_nofix_const'/1
				       (Args) of
				%% Line 77
				<{'no'}> when 'true' ->
				    {'do_not_split'}
				%% Line 78
				<_cor13> when 'true' ->
				    apply 'check_const'/1
					(Left)
			      end
		      %% Line 80
		      <_cor14> when 'true' ->
			  apply 'check_const'/1
			      (Left)
		    end
		%% Line 82
		<_cor15> when 'true' ->
		    apply 'check_const'/1
			(Left)
	      end
	  %% Line 84
	  <[]> when 'true' ->
	      {'yes'}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_const',1}}] )
	    -| ['compiler_generated'] )
	end
'make_split_unsafe'/1 =
    %% Line 86
    fun (_cor0) ->
	let <LinearCode> =
	    %% Line 87
	    call 'hipe_icode':'icode_code'
		(_cor0)
	in  let <NewLinearCode> =
		%% Line 88
		apply 'change_unsafe'/1
		    (LinearCode)
	    in  let <NewIcode> =
		    %% Line 89
		    call 'hipe_icode':'icode_code_update'
			(_cor0, NewLinearCode)
		in  %% Line 90
		    call 'hipe_icode_cfg':'linear_to_cfg'
			(NewIcode)
'change_unsafe'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <[I|Is]> when 'true' ->
	      %% Line 93
	      case I of
		%% Line 94
		<{'icode_call',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		    %% Line 95
		    case apply 'is_arith_extra_unsafe'/1
			     (I) of
		      %% Line 96
		      <'true'> when 'true' ->
			  let <_cor1> =
			      %% Line 97
			      call 'hipe_icode':'call_fun'
				  (I)
			  in  let <NewOp> =
				  %% Line 97
				  apply 'arithop_to_extra_unsafe'/1
				      (_cor1)
			      in  let <NewI1> =
				      %% Line 98
				      call 'hipe_icode':'call_fun_update'
					  (I, NewOp)
				  in  let <_cor4> =
					  %% Line 99
					  apply 'change_unsafe'/1
					      (Is)
				      in  %% Line 99
					  [NewI1|_cor4]
		      %% Line 100
		      <'false'> when 'true' ->
			  let <_cor5> =
			      %% Line 101
			      apply 'change_unsafe'/1
				  (Is)
			  in  %% Line 101
			      [I|_cor5]
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 103
		<_cor17> when 'true' ->
		    let <_cor7> =
			%% Line 104
			apply 'change_unsafe'/1
			    (Is)
		    in  %% Line 104
			[I|_cor7]
	      end
	  %% Line 106
	  <[]> when 'true' ->
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'change_unsafe',1}}] )
	    -| ['compiler_generated'] )
	end
'preprocess'/1 =
    %% Line 108
    fun (_cor0) ->
	let <LinearCode> =
	    %% Line 109
	    call 'hipe_icode':'icode_code'
		(_cor0)
	in  %% Line 110
	    case apply 'check_const'/1
		     (LinearCode) of
	      %% Line 111
	      <{'do_not_split'}> when 'true' ->
		  %% Line 112
		  {'do_not_split',1.98490000000000010871e+00}
	      %% Line 113
	      <_cor7> when 'true' ->
		  %% Line 114
		  case apply 'preprocess_code'/1
			   (LinearCode) of
		    <{NofArith,NofIns,NewLinearCode}> when 'true' ->
			%% Line 115
			case call 'erlang':'/'
				 (NofArith, NofIns) of
			  %% Line 116
			  <X>
			      when call 'erlang':'>='
				    (X,
				     5.00000000000000010408e-03) ->
			      let <NewIcode> =
				  %% Line 117
				  call 'hipe_icode':'icode_code_update'
				      (_cor0, NewLinearCode)
			      in  %% Line 118
				  {'split',X,NewIcode}
			  %% Line 119
			  <Y> when 'true' ->
			      %% Line 120
			      {'do_not_split',Y}
			end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
'preprocess_code'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <[H|Code]> when 'true' ->
	      %% Line 125
	      apply 'preprocess_code'/4
		  (Code, 0, 0, [H|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'preprocess_code',1}}] )
	    -| ['compiler_generated'] )
	end
'preprocess_code'/4 =
    %% Line 127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Left],NofArith,NofIns,CodeAcc = [PrevI|_cor50]> when 'true' ->
	      %% Line 128
	      case I of
		%% Line 129
		<{'icode_call',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}> when 'true' ->
		    %% Line 130
		    case apply 'is_arith'/1
			     (I) of
		      %% Line 131
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 139
			      call 'hipe_icode':'call_fun'
				  (I)
			  in  let <NewOp> =
				  %% Line 139
				  apply 'arithop_to_split'/1
				      (_cor4)
			      in  let <NewI> =
				      %% Line 140
				      call 'hipe_icode':'call_fun_update'
					  (I, NewOp)
				  in  %% Line 141
				      case call 'hipe_icode':'is_label'
					       (PrevI) of
					%% Line 142
					<'true'> when 'true' ->
					    let <_cor10> =
						%% Line 143
						( case <> of
						    ( <>
							  when call 'erlang':'=:='
								(Left,
								 []) ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  let <_cor8> =
							      call 'erlang':'hd'
								  (Left)
							  in  call 'hipe_icode':'is_label'
								  (_cor8)
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 143
						case _cor10 of
						  %% Line 144
						  <'true'> when 'true' ->
						      let <_cor12> =
							  %% Line 145
							  call 'erlang':'+'
							      (NofArith, 1)
						      in  let <_cor11> =
							      %% Line 145
							      call 'erlang':'+'
								  (NofIns, 1)
							  in  %% Line 145
							      apply 'preprocess_code'/4
								  (Left, _cor12, _cor11, [NewI|CodeAcc])
						  %% Line 146
						  <'false'> when 'true' ->
						      let <NewLabel> =
							  %% Line 147
							  call 'hipe_icode':'mk_new_label'
							      ()
						      in  let <NewLabelName> =
							      %% Line 148
							      call 'hipe_icode':'label_name'
								  (NewLabel)
							  in  let <NewI1> =
								  %% Line 149
								  call 'hipe_icode':'call_set_continuation'
								      (NewI, NewLabelName)
							      in  let <_cor17> =
								      %% Line 150
								      call 'erlang':'+'
									  (NofArith, 1)
								  in  let <_cor16> =
									  %% Line 150
									  call 'erlang':'+'
									      (NofIns, 1)
								      in  %% Line 150
									  apply 'preprocess_code'/4
									      (Left, _cor17, _cor16, %% Line 151
												     [NewLabel|[NewI1|CodeAcc]])
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor18})
						    -| ['compiler_generated'] )
						end
					%% Line 153
					<'false'> when 'true' ->
					    let <_cor24> =
						%% Line 155
						case call 'hipe_icode':'is_branch'
							 (PrevI) of
						  %% Line 156
						  <'true'> when 'true' ->
						      let <_cor19> =
							  %% Line 157
							  call 'hipe_icode':'mk_new_label'
							      ()
						      in  %% Line 157
							  [_cor19|[]]
						  %% Line 158
						  <'false'> when 'true' ->
						      let <NewLabel1> =
							  %% Line 159
							  call 'hipe_icode':'mk_new_label'
							      ()
						      in  let <NewLabelName1> =
							      %% Line 160
							      call 'hipe_icode':'label_name'
								  (NewLabel1)
							  in  let <_cor22> =
								  %% Line 161
								  call 'hipe_icode':'mk_goto'
								      (NewLabelName1)
							      in  %% Line 161
								  [NewLabel1|[_cor22|[]]]
						  ( <_cor23> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor23})
						    -| ['compiler_generated'] )
						end
					    in  let <_cor29> =
						    %% Line 163
						    ( case <> of
							( <>
							      when call 'erlang':'=:='
								    (Left,
								     []) ->
							      'true'
							  -| ['compiler_generated'] )
							( <> when 'true' ->
							      let <_cor27> =
								  call 'erlang':'hd'
								      (Left)
							      in  call 'hipe_icode':'is_label'
								      (_cor27)
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						in  %% Line 163
						    case _cor29 of
						      %% Line 164
						      <'true'> when 'true' ->
							  let <_cor32> =
							      %% Line 165
							      call 'erlang':'+'
								  (NofArith, 1)
							  in  let <_cor31> =
								  %% Line 165
								  call 'erlang':'+'
								      (NofIns, 1)
							      in  let <_cor30> =
								      %% Line 166
								      [NewI|call 'erlang':'++'
										(_cor24, CodeAcc)]
								  in  %% Line 165
								      apply 'preprocess_code'/4
									  (Left, _cor32, _cor31, _cor30)
						      %% Line 167
						      <'false'> when 'true' ->
							  let <NewLabel2> =
							      %% Line 168
							      call 'hipe_icode':'mk_new_label'
								  ()
							  in  let <NewLabelName2> =
								  %% Line 169
								  call 'hipe_icode':'label_name'
								      (NewLabel2)
							      in  let <NewI1> =
								      %% Line 170
								      call 'hipe_icode':'call_set_continuation'
									  (NewI, NewLabelName2)
								  in  let <_cor38> =
									  %% Line 171
									  call 'erlang':'+'
									      (NofArith, 1)
								      in  let <_cor37> =
									      %% Line 171
									      call 'erlang':'+'
										  (NofIns, 1)
									  in  let <_cor36> =
										  %% Line 172
										  [NewLabel2|[NewI1|call 'erlang':'++'
													(_cor24, CodeAcc)]]
									      in  %% Line 171
										  apply 'preprocess_code'/4
										      (Left, _cor38, _cor37, _cor36)
						      ( <_cor39> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor39})
							-| ['compiler_generated'] )
						    end
					( <_cor40> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor40})
					  -| ['compiler_generated'] )
				      end
		      %% Line 175
		      <'false'> when 'true' ->
			  let <_cor41> =
			      %% Line 176
			      call 'erlang':'+'
				  (NofIns, 1)
			  in  %% Line 176
			      apply 'preprocess_code'/4
				  (Left, NofArith, _cor41, [I|CodeAcc])
		      ( <_cor42> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor42})
			-| ['compiler_generated'] )
		    end
		%% Line 178
		<{'icode_label',_cor58}> when 'true' ->
		    %% Line 180
		    apply 'preprocess_code'/4
			(Left, NofArith, NofIns, [I|CodeAcc])
		%% Line 181
		<_cor59> when 'true' ->
		    let <_cor43> =
			%% Line 182
			call 'erlang':'+'
			    (NofIns, 1)
		    in  %% Line 182
			apply 'preprocess_code'/4
			    (Left, NofArith, _cor43, [I|CodeAcc])
	      end
	  %% Line 184
	  <[],NofArith,NofIns,CodeAcc> when 'true' ->
	      let <_cor45> =
		  %% Line 185
		  call 'lists':'reverse'
		      (CodeAcc)
	      in  %% Line 185
		  {NofArith,NofIns,_cor45}
	  ( <_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'preprocess_code',4}}] )
	    -| ['compiler_generated'] )
	end
'split'/1 =
    %% Line 187
    fun (_cor0) ->
	let <LinearCode> =
	    %% Line 188
	    call 'hipe_icode':'icode_code'
		(_cor0)
	in  let <_cor8> =
		%% Line 191
		( fun (_cor5,_cor4) ->
		      %% Line 192
		      case call 'hipe_icode':'is_label'
			       (_cor5) of
			%% Line 193
			<'true'> when 'true' ->
			    let <_cor2> =
				call 'hipe_icode':'label_name'
				    (_cor5)
			    in  [_cor2|_cor4]
			%% Line 194
			<'false'> when 'true' ->
			    _cor4
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-split/1-fun-0-'}}] )
	    in  let <AllLabels> =
		    %% Line 191
		    call 'lists':'foldl'
			(_cor8, %% Line 196
				[], %% Line 196
				    LinearCode)
		in  %% Line 197
		    case apply 'new_label_maps'/1
			     (AllLabels) of
		      <{OldToNewMap,NewToOldMap}> when 'true' ->
			  let <NewLinearCode> =
			      %% Line 202
			      apply 'map_code'/2
				  (LinearCode, OldToNewMap)
			  in  let <NewIcode> =
				  %% Line 203
				  call 'hipe_icode':'icode_code_update'
				      (_cor0, NewLinearCode)
			      in  let <NewCfg> =
				      %% Line 204
				      call 'hipe_icode_cfg':'linear_to_cfg'
					  (NewIcode)
				  in  let <_cor19> =
					  %% Line 206
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor16) ->
							case _cor16 of
							  <[X|_cor15]> when 'true' ->
							      let <_cor17> =
								  call 'gb_trees':'get'
								      (X, OldToNewMap)
							      in  let <_cor18> =
								      apply 'lc$^0'/1
									  (_cor15)
								  in  ( [_cor17|_cor18]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor16> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor16})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (AllLabels)
					    -| ['list_comprehension'] )
				      in  %% Line 206
					  apply 'insert_tests'/4
					      (NewCfg, _cor19, %% Line 207
							       NewToOldMap, %% Line 207
									    OldToNewMap)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
'map_code'/2 =
    %% Line 211
    fun (_cor1,_cor0) ->
	let <AddedCode> =
	    %% Line 212
	    apply 'map_code'/4
		(_cor1, 'none', _cor0, [])
	in  %% Line 213
	    call 'erlang':'++'
		(_cor1, AddedCode)
'map_code'/4 =
    %% Line 215
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Left],ArithFail,LabelMap,Acc> when 'true' ->
	      %% Line 216
	      case I of
		%% Line 217
		<{'icode_call',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		    %% Line 218
		    case apply 'is_arith'/1
			     (I) of
		      %% Line 219
		      <'true'> when 'true' ->
			  %% Line 220
			  case call 'hipe_icode':'defines'
				   (I) of
			    %% Line 221
			    <[]> when 'true' ->
				let <_cor4> =
				    %% Line 222
				    apply 'redirect'/2
					(I, LabelMap)
				in  %% Line 222
				    apply 'map_code'/4
					(Left, ArithFail, LabelMap, [_cor4|Acc])
			    %% Line 223
			    <_cor28> when 'true' ->
				let <NewOp> =
				    %% Line 224
				    apply 'split_to_unsafe'/1
					(I)
				in  let <NewI1> =
					%% Line 225
					call 'hipe_icode':'call_fun_update'
					    (I, NewOp)
				    in  let <NewI2> =
					    %% Line 226
					    apply 'redirect'/2
						(NewI1, LabelMap)
					in  let <NewI3> =
						%% Line 227
						call 'hipe_icode':'call_set_fail_label'
						    (NewI2, ArithFail)
					    in  %% Line 228
						apply 'map_code'/4
						    (Left, ArithFail, LabelMap, [NewI3|Acc])
			  end
		      %% Line 230
		      <'false'> when 'true' ->
			  let <_cor10> =
			      %% Line 231
			      apply 'redirect'/2
				  (I, LabelMap)
			  in  %% Line 231
			      apply 'map_code'/4
				  (Left, ArithFail, LabelMap, [_cor10|Acc])
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		%% Line 233
		<{'icode_label',_cor29}> when 'true' ->
		    let <LabelName> =
			%% Line 234
			call 'hipe_icode':'label_name'
			    (I)
		    in  let <_cor13> =
			    %% Line 235
			    call 'gb_trees':'get'
				(LabelName, LabelMap)
			in  let <NewLabel> =
				%% Line 235
				call 'hipe_icode':'mk_label'
				    (_cor13)
			    in  %% Line 236
				apply 'map_code'/4
				    (Left, LabelName, LabelMap, [NewLabel|Acc])
		%% Line 237
		<_cor30> when 'true' ->
		    let <_cor15> =
			%% Line 238
			apply 'redirect'/2
			    (I, LabelMap)
		    in  %% Line 238
			apply 'map_code'/4
			    (Left, ArithFail, LabelMap, [_cor15|Acc])
	      end
	  %% Line 240
	  <[],_X_ArithFail,_X_LabelMap,Acc> when 'true' ->
	      %% Line 241
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'map_code',4}}] )
	    -| ['compiler_generated'] )
	end
'insert_tests'/4 =
    %% Line 243
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <InfoMap> =
	    %% Line 244
	    apply 'infomap_init'/1
		(_cor2)
	in  let <NewInfoMap> =
		%% Line 246
		apply 'find_testpoints'/3
		    (_cor3, _cor2, InfoMap)
	    in  %% Line 249
		apply 'make_tests'/4
		    (_cor3, NewInfoMap, _cor1, _cor0)
'find_testpoints'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	%% Line 252
	case apply 'find_testpoints'/4
		 (_cor1, _cor0, _cor2, 'false') of
	  %% Line 253
	  <{'dirty',NewInfoMap}> when 'true' ->
	      %% Line 255
	      apply 'find_testpoints'/3
		  (_cor2, _cor1, NewInfoMap)
	  %% Line 256
	  <'fixpoint'> when 'true' ->
	      _cor0
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'find_testpoints'/4 =
    %% Line 260
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Lbl|Left],InfoMap,Cfg,Dirty> when 'true' ->
	      let <_cor4> =
		  %% Line 261
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Lbl)
	      in  let <Code> =
		      %% Line 261
		      call 'hipe_bb':'code'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 262
			  call 'hipe_icode_cfg':'succ'
			      (Cfg, Lbl)
		      in  let <InfoOut> =
			      %% Line 262
			      apply 'join_info'/2
				  (_cor6, InfoMap)
			  in  let <OldInfoIn> =
				  %% Line 263
				  apply 'infomap_get_all'/2
				      (Lbl, InfoMap)
			      in  let <_cor9> =
				      %% Line 264
				      call 'lists':'reverse'
					  (Code)
				  in  let <NewInfoIn> =
					  %% Line 264
					  apply 'traverse_code'/2
					      (_cor9, InfoOut)
				      in  let <_cor13> =
					      %% Line 265
					      ( case call 'gb_sets':'is_subset'
							 (OldInfoIn, NewInfoIn) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 266
							call 'gb_sets':'is_subset'
							    (NewInfoIn, OldInfoIn)
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							'false'
						    -| ['compiler_generated'] )
						  ( <_cor11> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor11}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 265
					      case _cor13 of
						%% Line 267
						<'true'> when 'true' ->
						    %% Line 268
						    apply 'find_testpoints'/4
							(Left, InfoMap, Cfg, Dirty)
						%% Line 269
						<'false'> when 'true' ->
						    let <NewInfoMap> =
							%% Line 272
							call 'gb_trees':'update'
							    (Lbl, NewInfoIn, InfoMap)
						    in  %% Line 273
							apply 'find_testpoints'/4
							    (Left, NewInfoMap, Cfg, 'true')
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor15})
						  -| ['compiler_generated'] )
					      end
	  %% Line 275
	  <[],InfoMap,_X_Cfg,Dirty> when 'true' ->
	      %% Line 276
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Dirty,
			   'true') ->
		    {'dirty',InfoMap}
		%% Line 277
		<> when 'true' ->
		    'fixpoint'
	      end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'find_testpoints',4}}] )
	    -| ['compiler_generated'] )
	end
'traverse_code'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Left],Info> when 'true' ->
	      let <NewInfo> =
		  %% Line 281
		  apply 'kill_defines'/2
		      (I, Info)
	      in  %% Line 282
		  case I of
		    %% Line 283
		    <{'icode_call',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
			%% Line 284
			case apply 'is_unsafe_arith'/1
				 (I) of
			  %% Line 285
			  <'true'> when 'true' ->
			      let <_cor3> =
				  %% Line 287
				  call 'hipe_icode':'call_dstlist'
				      (I)
			      in  let <Dst> =
				      %% Line 287
				      call 'erlang':'hd'
					  (_cor3)
				  in  let <NewInfo1> =
					  %% Line 288
					  call 'gb_sets':'delete_any'
					      ({'killed',Dst}, NewInfo)
				      in  let <_cor6> =
					      %% Line 290
					      call 'hipe_icode':'uses'
						  (I)
					  in  let <_cor7> =
						  %% Line 290
						  call 'gb_sets':'from_list'
						      (_cor6)
					      in  let <NewInfo2> =
						      %% Line 290
						      call 'gb_sets':'union'
							  (NewInfo1, _cor7)
						  in  %% Line 291
						      apply 'traverse_code'/2
							  (Left, NewInfo2)
			  %% Line 292
			  <'false'> when 'true' ->
			      %% Line 293
			      apply 'traverse_code'/2
				  (Left, NewInfo)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 295
		    <{'icode_move',_cor26,_cor27}> when 'true' ->
			let <Dst> =
			    %% Line 296
			    call 'hipe_icode':'move_dst'
				(I)
			in  %% Line 297
			    case call 'gb_sets':'is_member'
				     (Dst, Info) of
			      %% Line 298
			      <'true'> when 'true' ->
				  let <NewInfo1> =
				      %% Line 301
				      call 'gb_sets':'delete'
					  ({'killed',Dst}, NewInfo)
				  in  let <Src> =
					  %% Line 302
					  call 'hipe_icode':'move_src'
					      (I)
				      in  %% Line 303
					  case call 'hipe_icode':'is_const'
						   (Src) of
					    %% Line 304
					    <'true'> when 'true' ->
						%% Line 305
						apply 'traverse_code'/2
						    (Left, NewInfo1)
					    %% Line 306
					    <'false'> when 'true' ->
						let <NewInfo2> =
						    %% Line 307
						    call 'gb_sets':'add'
							(Src, NewInfo1)
						in  %% Line 308
						    apply 'traverse_code'/2
							(Left, NewInfo2)
					    ( <_cor14> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor14})
					      -| ['compiler_generated'] )
					  end
			      %% Line 310
			      <'false'> when 'true' ->
				  %% Line 311
				  apply 'traverse_code'/2
				      (Left, NewInfo)
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor15})
				-| ['compiler_generated'] )
			    end
		    %% Line 313
		    <_cor28> when 'true' ->
			%% Line 314
			apply 'traverse_code'/2
			    (Left, NewInfo)
		  end
	  %% Line 316
	  <[],Info> when 'true' ->
	      %% Line 317
	      Info
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'traverse_code',2}}] )
	    -| ['compiler_generated'] )
	end
'kill_defines'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	let <Defines> =
	    %% Line 320
	    call 'hipe_icode':'defines'
		(_cor1)
	in  let <_cor8> =
		%% Line 321
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[X|_cor4]> when 'true' ->
				    ( case call 'gb_sets':'is_member'
					       (X, _cor0) of
					<'true'> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [X|_cor6]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Defines)
		  -| ['list_comprehension'] )
	    in  %% Line 321
		case _cor8 of
		  %% Line 322
		  <[]> when 'true' ->
		      _cor0
		  %% Line 324
		  <List> when 'true' ->
		      let <_cor9> =
			  %% Line 325
			  call 'gb_sets':'from_list'
			      (List)
		      in  let <TmpInfo> =
			      %% Line 325
			      call 'gb_sets':'difference'
				  (_cor0, _cor9)
			  in  let <_cor15> =
				  %% Line 326
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor13) ->
						case _cor13 of
						  <[X|_cor12]> when 'true' ->
						      let <_cor14> =
							  apply 'lc$^1'/1
							      (_cor12)
						      in  ( [{'killed',X}|_cor14]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor13> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor13})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (List)
				    -| ['list_comprehension'] )
			      in  let <_cor16> =
				      %% Line 326
				      call 'gb_sets':'from_list'
					  (_cor15)
				  in  %% Line 326
				      call 'gb_sets':'union'
					  (_cor16, TmpInfo)
		end
'make_tests'/4 =
    %% Line 329
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 331
	    call 'gb_trees':'keys'
		(_cor1)
	in  let <WorkList> =
		%% Line 331
		apply 'make_worklist'/5
		    (_cor4, _cor2, _cor1, _cor3, %% Line 332
						 [])
	    in  let <NewCfg> =
		    %% Line 334
		    apply 'make_tests'/2
			(WorkList, _cor3)
		in  let <Args> =
			%% Line 338
			call 'hipe_icode_cfg':'params'
			    (NewCfg)
		    in  let <Start> =
			    %% Line 339
			    call 'hipe_icode_cfg':'start_label'
				(NewCfg)
			in  let <AltStart> =
				%% Line 340
				call 'gb_trees':'get'
				    (Start, _cor0)
			    in  let <_cor10> =
				    %% Line 341
				    apply 'infomap_get'/2
					(AltStart, _cor2)
				in  let <UnsafeIn> =
					%% Line 341
					call 'gb_sets':'to_list'
					    (_cor10)
				    in  let <_cor19> =
					    %% Line 342
					    ( letrec
						  'lc$^0'/1 =
						      fun (_cor16) ->
							  case _cor16 of
							    <[X|_cor13]> when 'true' ->
								( letrec
								      'lc$^1'/1 =
									  fun (_cor17) ->
									      case _cor17 of
										<[Y|_cor15]>
										    when call 'erlang':'=:='
											  (X,
											   Y) ->
										    let <_cor18> =
											apply 'lc$^1'/1
											    (_cor15)
										    in  ( [X|_cor18]
											  -| ['compiler_generated'] )
										( <[Y|_cor15]> when 'true' ->
										      apply 'lc$^1'/1
											  (_cor15)
										  -| ['compiler_generated'] )
										<[]> when 'true' ->
										    apply 'lc$^0'/1
											(_cor13)
										( <_cor17> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor17})
											-| [{'function_name',{'lc$^1',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^1'/1
									  (Args)
								  -| ['list_comprehension'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor16> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor16})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^0'/1
						      (UnsafeIn)
					      -| ['list_comprehension'] )
					in  %% Line 342
					    case _cor19 of
					      %% Line 343
					      <[]> when 'true' ->
						  %% Line 344
						  call 'hipe_icode_cfg':'start_label_update'
						      (NewCfg, AltStart)
					      %% Line 345
					      <KilledArgs> when 'true' ->
						  let <_cor20> =
						      %% Line 346
						      call 'hipe_icode':'mk_new_label'
							  ()
						  in  let <NewStart> =
							  %% Line 346
							  call 'hipe_icode':'label_name'
							      (_cor20)
						      in  let <NewCfg1> =
							      %% Line 347
							      apply 'insert_test_block'/5
								  (NewStart, AltStart, Start, %% Line 348
											      KilledArgs, %% Line 348
													  NewCfg)
							  in  %% Line 349
							      call 'hipe_icode_cfg':'start_label_update'
								  (NewCfg1, NewStart)
					    end
'make_worklist'/5 =
    %% Line 352
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Lbl|Left],InfoMap,LabelMap,Cfg,Acc> when 'true' ->
	      let <Vars> =
		  %% Line 353
		  apply 'infomap_get_killed'/2
		      (Lbl, InfoMap)
	      in  %% Line 354
		  case call 'gb_sets':'is_empty'
			   (Vars) of
		    %% Line 355
		    <'true'> when 'true' ->
			apply 'make_worklist'/5
			    (Left, InfoMap, LabelMap, Cfg, Acc)
		    %% Line 356
		    <'false'> when 'true' ->
			let <_cor14> =
			    %% Line 359
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[%% Line 361
					      Succ|_cor7]> when 'true' ->
						let <_cor12> =
						    call 'gb_trees':'get'
							(Succ, LabelMap)
						in  let <_cor10> =
							%% Line 360
							apply 'infomap_get'/2
							    (Succ, InfoMap)
						    in  let <_cor11> =
							    %% Line 360
							    call 'gb_sets':'intersection'
								(_cor10, Vars)
							in  let <_cor13> =
								%% Line 361
								apply 'lc$^0'/1
								    (_cor7)
							    in  ( [{Lbl,Succ,_cor12,_cor11}|_cor13]
								  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor8> =
				      %% Line 361
				      call 'hipe_icode_cfg':'succ'
					  (Cfg, Lbl)
				  in  apply 'lc$^0'/1
					  (_cor8)
			      -| ['list_comprehension'] )
			in  let <_cor23> =
				%% Line 362
				( letrec
				      'lc$^1'/1 =
					  fun (_cor19) ->
					      case _cor19 of
						<[%% Line 363
						  {Label,Succ,FailLbl,PrunedVars}|_cor17]> when 'true' ->
						    let <_cor18> =
							%% Line 364
							call 'gb_sets':'is_empty'
							    (PrunedVars)
						    in  %% Line 364
							( case <> of
							    <>
								when call 'erlang':'=:='
								      (_cor18,
								       'false') ->
								let <_cor20> =
								    call 'gb_sets':'to_list'
									(PrunedVars)
								in  let <_cor21> =
									apply 'lc$^1'/1
									    (_cor17)
								    in  ( [{Label,Succ,FailLbl,_cor20}|_cor21]
									  -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor17)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <[_cor16|_cor17]> when 'true' ->
						      %% Line 363
						      apply 'lc$^1'/1
							  (_cor17)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 364
						    Acc
						( <_cor19> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor19})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor14)
				  -| ['list_comprehension'] )
			    in  %% Line 366
				apply 'make_worklist'/5
				    (Left, InfoMap, LabelMap, Cfg, _cor23)
		    ( <_cor25> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor25})
		      -| ['compiler_generated'] )
		  end
	  %% Line 368
	  <[],_X_InfoMap,_X_LabelMap,_X_Cfg,Acc> when 'true' ->
	      %% Line 369
	      Acc
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'make_worklist',5}}] )
	    -| ['compiler_generated'] )
	end
'make_tests'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{FromLbl,ToLbl,FailLbl,Vars}|Left],Cfg> when 'true' ->
	      let <_cor2> =
		  %% Line 372
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <NewLbl> =
		      %% Line 372
		      call 'hipe_icode':'label_name'
			  (_cor2)
		  in  let <TmpCfg> =
			  %% Line 373
			  apply 'insert_test_block'/5
			      (NewLbl, ToLbl, FailLbl, Vars, Cfg)
		      in  let <NewCfg> =
			      %% Line 374
			      call 'hipe_icode_cfg':'redirect'
				  (TmpCfg, FromLbl, ToLbl, NewLbl)
			  in  %% Line 375
			      apply 'make_tests'/2
				  (Left, NewCfg)
	  %% Line 376
	  <[],Cfg> when 'true' ->
	      %% Line 377
	      Cfg
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'make_tests',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_test_block'/5 =
    %% Line 379
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 380
	    call 'hipe_icode':'mk_type'
		(_cor1, 'fixnum', _cor3, _cor2, 9.89999999999999991118e-01)
	in  let <Code> =
		%% Line 380
		[_cor5|[]]
	    in  let <BB> =
		    %% Line 381
		    call 'hipe_bb':'mk_bb'
			(Code)
		in  %% Line 382
		    call 'hipe_icode_cfg':'bb_add'
			(_cor0, _cor4, BB)
'infomap_init'/1 =
    %% Line 384
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 385
	    call 'gb_trees':'empty'
		()
	in  %% Line 385
	    apply 'infomap_init'/2
		(_cor0, _cor1)
'infomap_init'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Lbl|Left],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 388
		  call 'gb_sets':'empty'
		      ()
	      in  let <_cor3> =
		      %% Line 388
		      call 'gb_trees':'insert'
			  (Lbl, _cor2, Map)
		  in  %% Line 388
		      apply 'infomap_init'/2
			  (Left, _cor3)
	  %% Line 389
	  <[],Map> when 'true' ->
	      %% Line 390
	      Map
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'infomap_init',2}}] )
	    -| ['compiler_generated'] )
	end
'join_info'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 393
	    call 'gb_sets':'empty'
		()
	in  %% Line 393
	    apply 'join_info'/3
		(_cor1, _cor0, _cor2)
'join_info'/3 =
    %% Line 395
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lbl|Left],Map,Set> when 'true' ->
	      let <_cor3> =
		  %% Line 396
		  apply 'infomap_get'/2
		      (Lbl, Map)
	      in  let <_cor4> =
		      %% Line 396
		      call 'gb_sets':'union'
			  (Set, _cor3)
		  in  %% Line 396
		      apply 'join_info'/3
			  (Left, Map, _cor4)
	  %% Line 397
	  <[],_X_Map,Set> when 'true' ->
	      %% Line 398
	      Set
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'join_info',3}}] )
	    -| ['compiler_generated'] )
	end
'infomap_get'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	%% Line 401
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 402
	  <'none'> when 'true' ->
	      call 'gb_sets':'empty'
		  ()
	  %% Line 403
	  <{'value',Val}> when 'true' ->
	      let <_cor5> =
		  %% Line 404
		  ( fun (_cor3) ->
			case _cor3 of
			  %% Line 405
			  <{'killed',_cor9}> when 'true' ->
			      'false'
			  %% Line 406
			  <_cor10> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-infomap_get/2-fun-0-'}}] )
	      in  %% Line 404
		  call 'gb_sets':'filter'
		      (_cor5, %% Line 409
			      Val)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'infomap_get_all'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	%% Line 413
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 414
	  <'none'> when 'true' ->
	      call 'gb_sets':'empty'
		  ()
	  %% Line 415
	  <{'value',Val}> when 'true' ->
	      Val
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'infomap_get_killed'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	%% Line 419
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 420
	  <'none'> when 'true' ->
	      call 'gb_sets':'empty'
		  ()
	  %% Line 421
	  <{'value',Val}> when 'true' ->
	      let <Fun> =
		  %% Line 422
		  ( fun (_cor4,_cor3) ->
			%% Line 423
			case _cor4 of
			  %% Line 424
			  <{'killed',Var}> when 'true' ->
			      [Var|_cor3]
			  %% Line 425
			  <_cor13> when 'true' ->
			      _cor3
			end
		    -| [{'id',{0,0,'-infomap_get_killed/2-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 428
		      call 'gb_sets':'to_list'
			  (Val)
		  in  let <_cor9> =
			  %% Line 428
			  call 'lists':'foldl'
			      (Fun, [], _cor8)
		      in  %% Line 428
			  call 'gb_sets':'from_list'
			      (_cor9)
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'arithop_to_split'/1 =
    %% Line 434
    fun (_cor0) ->
	%% Line 435
	case _cor0 of
	  %% Line 436
	  <'+'> when 'true' ->
	      'gen_add'
	  %% Line 437
	  <'-'> when 'true' ->
	      'gen_sub'
	  %% Line 438
	  <_cor3> when 'true' ->
	      _cor0
	end
'is_arith'/1 =
    %% Line 444
    fun (_cor0) ->
	%% Line 445
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 446
	  <'+'> when 'true' ->
	      'true'
	  %% Line 447
	  <'-'> when 'true' ->
	      'true'
	  %% Line 448
	  <'gen_add'> when 'true' ->
	      'true'
	  %% Line 449
	  <'gen_sub'> when 'true' ->
	      'true'
	  %% Line 450
	  <'bor'> when 'true' ->
	      'true'
	  %% Line 451
	  <'bxor'> when 'true' ->
	      'true'
	  %% Line 452
	  <'bsr'> when 'true' ->
	      %% Line 455
	      case call 'hipe_icode':'args'
		       (_cor0) of
		<[_cor7|[Arg2|[]]]> when 'true' ->
		    %% Line 456
		    ( case call 'hipe_icode':'is_const'
			       (Arg2) of
			( <( 'true'
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor3> =
				  call 'hipe_icode':'const_value'
				      (Arg2)
			      in  call 'erlang':'>='
				      (_cor3, 0)
			  -| ['compiler_generated'] )
			( <( 'false'
			     -| ['compiler_generated'] )> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
			( <_cor2> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {( 'badarg'
					  -| ['compiler_generated'] ),_cor2}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 457
	  <'bsl'> when 'true' ->
	      %% Line 460
	      'false'
	  %% Line 461
	  <'bnot'> when 'true' ->
	      'true'
	  %% Line 462
	  <'band'> when 'true' ->
	      'true'
	  %% Line 463
	  <_cor8> when 'true' ->
	      'false'
	end
'is_unsafe_arith'/1 =
    %% Line 468
    fun (_cor0) ->
	%% Line 469
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 470
	  <'unsafe_add'> when 'true' ->
	      'true'
	  %% Line 471
	  <'unsafe_sub'> when 'true' ->
	      'true'
	  %% Line 472
	  <'unsafe_bor'> when 'true' ->
	      'true'
	  %% Line 473
	  <'unsafe_bxor'> when 'true' ->
	      'true'
	  %% Line 474
	  <'unsafe_bsr'> when 'true' ->
	      'true'
	  %% Line 475
	  <'unsafe_bsl'> when 'true' ->
	      'true'
	  %% Line 476
	  <'unsafe_bnot'> when 'true' ->
	      'true'
	  %% Line 477
	  <'unsafe_band'> when 'true' ->
	      'true'
	  %% Line 478
	  <_cor3> when 'true' ->
	      'false'
	end
'split_to_unsafe'/1 =
    %% Line 481
    fun (_cor0) ->
	%% Line 482
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 483
	  <'gen_add'> when 'true' ->
	      'unsafe_add'
	  %% Line 484
	  <'gen_sub'> when 'true' ->
	      'unsafe_sub'
	  %% Line 485
	  <'bor'> when 'true' ->
	      'unsafe_bor'
	  %% Line 486
	  <'bxor'> when 'true' ->
	      'unsafe_bxor'
	  %% Line 487
	  <'bsr'> when 'true' ->
	      %% Line 488
	      case apply 'is_arith'/1
		       (_cor0) of
		%% Line 489
		<'true'> when 'true' ->
		    'unsafe_bsr'
		%% Line 490
		<'false'> when 'true' ->
		    'bsr'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 492
	  <'bsl'> when 'true' ->
	      %% Line 495
	      'bsl'
	  %% Line 496
	  <'bnot'> when 'true' ->
	      'unsafe_bnot'
	  %% Line 497
	  <'band'> when 'true' ->
	      'unsafe_band'
	  %% Line 498
	  <Op> when 'true' ->
	      Op
	end
'is_arith_extra_unsafe'/1 =
    %% Line 504
    fun (_cor0) ->
	%% Line 505
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 506
	  <'+'> when 'true' ->
	      'true'
	  %% Line 507
	  <'-'> when 'true' ->
	      'true'
	  %% Line 508
	  <'bor'> when 'true' ->
	      'true'
	  %% Line 509
	  <'bxor'> when 'true' ->
	      'true'
	  %% Line 510
	  <'bsr'> when 'true' ->
	      apply 'is_arith'/1
		  (_cor0)
	  %% Line 511
	  <'bsl'> when 'true' ->
	      'false'
	  %% Line 512
	  <'bnot'> when 'true' ->
	      'true'
	  %% Line 513
	  <'band'> when 'true' ->
	      'true'
	  %% Line 514
	  <_cor3> when 'true' ->
	      'false'
	end
'arithop_to_extra_unsafe'/1 =
    %% Line 517
    fun (_cor0) ->
	%% Line 518
	case _cor0 of
	  %% Line 519
	  <'+'> when 'true' ->
	      'extra_unsafe_add'
	  %% Line 520
	  <'-'> when 'true' ->
	      'extra_unsafe_sub'
	  %% Line 521
	  <'bor'> when 'true' ->
	      'unsafe_bor'
	  %% Line 522
	  <'bxor'> when 'true' ->
	      'unsafe_bxor'
	  %% Line 523
	  <'bsr'> when 'true' ->
	      'unsafe_bsr'
	  %% Line 524
	  <'bsl'> when 'true' ->
	      'bsl'
	  %% Line 525
	  <'bnot'> when 'true' ->
	      'unsafe_bnot'
	  %% Line 526
	  <'band'> when 'true' ->
	      'unsafe_band'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'redirect'/2 =
    %% Line 531
    fun (_cor1,_cor0) ->
	%% Line 532
	case call 'hipe_icode':'successors'
		 (_cor1) of
	  %% Line 533
	  <[]> when 'true' ->
	      _cor1
	  %% Line 534
	  <Successors> when 'true' ->
	      let <_cor7> =
		  %% Line 535
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor3]> when 'true' ->
				      let <_cor5> =
					  call 'gb_trees':'get'
					      (X, _cor0)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [{X,_cor5}|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Successors)
		    -| ['list_comprehension'] )
	      in  %% Line 536
		  apply 'redirect_1'/2
		      (_cor7, _cor1)
	end
'redirect_1'/2 =
    %% Line 539
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{From,To}|Left],I> when 'true' ->
	      let <_cor2> =
		  %% Line 540
		  call 'hipe_icode':'redirect_jmp'
		      (I, From, To)
	      in  %% Line 540
		  apply 'redirect_1'/2
		      (Left, _cor2)
	  %% Line 541
	  <[],I> when 'true' ->
	      %% Line 542
	      I
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'redirect_1',2}}] )
	    -| ['compiler_generated'] )
	end
'new_label_maps'/1 =
    %% Line 544
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 545
	    call 'gb_trees':'empty'
		()
	in  let <_cor1> =
		%% Line 545
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 545
		apply 'new_label_maps'/3
		    (_cor0, _cor2, _cor1)
'new_label_maps'/3 =
    %% Line 547
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lbl|Left],Map1,Map2> when 'true' ->
	      let <_cor3> =
		  %% Line 548
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <NewLabel> =
		      %% Line 548
		      call 'hipe_icode':'label_name'
			  (_cor3)
		  in  let <NewMap1> =
			  %% Line 549
			  call 'gb_trees':'insert'
			      (Lbl, NewLabel, Map1)
		      in  let <NewMap2> =
			      %% Line 550
			      call 'gb_trees':'insert'
				  (NewLabel, Lbl, Map2)
			  in  %% Line 551
			      apply 'new_label_maps'/3
				  (Left, NewMap1, NewMap2)
	  %% Line 552
	  <[],Map1,Map2> when 'true' ->
	      %% Line 553
	      {Map1,Map2}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'new_label_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_split_arith')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_split_arith', _cor0)
end