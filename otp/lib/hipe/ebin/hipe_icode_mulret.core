module 'hipe_icode_mulret' ['module_info'/0,
			    'module_info'/1,
			    'mult_ret'/4]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'mult_ret',4},[{'type',42,'fun',[{'type',42,'product',[{'type',42,'list',[{'var',42,'_'}]}|[{'type',42,'atom',[]}|[{'type',42,'comp_options',[]}|[{'var',42,'_'}]]]]}|[{'type',42,'list',[{'var',42,'_'}]}]]}]}]]
'mult_ret'/4 =
    %% Line 44
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 45
	    call 'erlang':'length'
		(_cor3)
	in  %% Line 45
	    case <> of
	      %% Line 46
	      <>
		  when call 'erlang':'>'
			(_cor4,
			 1) ->
		  let <Table> =
		      %% Line 47
		      apply 'analyse'/3
			  (_cor3, _cor2, _cor0)
		  in  %% Line 49
		      apply 'optimize'/4
			  (_cor3, _cor2, _cor1, Table)
	      %% Line 50
	      <> when 'true' ->
		  _cor3
	    end
'analyse'/3 =
    %% Line 63
    fun (_cor2,_cor1,_cor0) ->
	let <MaxRets> =
	    %% Line 64
	    call 'hipe_rtl_arch':'nr_of_return_regs'
		()
	in  let <Table> =
		%% Line 65
		apply 'mkTable'/1
		    (_cor2)
	    in  %% Line 67
		apply 'filterTable'/3
		    (Table, MaxRets, _cor0)
'mkTable'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	apply 'mkTable'/2
	    (_cor0, {[],[]})
'mkTable'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{MFA,Icode}|List],Table> when 'true' ->
	      %% Line 83
	      case call 'hipe_icode':'icode_label_range'
		       (Icode) of
		<{_X_LMin,LMax}> when 'true' ->
		    let <_cor3> =
			%% Line 84
			call 'erlang':'+'
			    (LMax, 1)
		    in  do  %% Line 84
			    call 'hipe_gensym':'set_label'
				('icode', _cor3)
			    %% Line 85
			    case call 'hipe_icode':'icode_var_range'
				     (Icode) of
			      <{_X_VMin,VMax}> when 'true' ->
				  let <_cor5> =
				      %% Line 86
				      call 'erlang':'+'
					  (VMax, 1)
				  in  do  %% Line 86
					  call 'hipe_gensym':'set_var'
					      ('icode', _cor5)
					  %% Line 87
					  case apply 'isFunDef'/1
						   (MFA) of
					    %% Line 88
					    <'true'> when 'true' ->
						%% Line 89
						apply 'mkTable'/2
						    (List, Table)
					    %% Line 90
					    <'false'> when 'true' ->
						let <CallList> =
						    %% Line 91
						    apply 'mkCallList'/2
							(MFA, Icode)
						in  let <Optimizable> =
							%% Line 92
							apply 'isOptimizable'/1
							    (Icode)
						    in  let <NewTable> =
							    %% Line 93
							    apply 'addToTable'/4
								(MFA, Optimizable, CallList, Table)
							in  %% Line 94
							    apply 'mkTable'/2
								(List, NewTable)
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor9})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 96
	  <[_cor12|List],Table> when 'true' ->
	      apply 'mkTable'/2
		  (List, Table)
	  %% Line 97
	  <[],Table> when 'true' ->
	      Table
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'mkTable',2}}] )
	    -| ['compiler_generated'] )
	end
'isFunDef'/1 =
    %% Line 106
    fun (_cor0) ->
	case _cor0 of
	  <{_cor4,F,_cor5}> when 'true' ->
	      let <_cor1> =
		  %% Line 107
		  call 'erlang':'atom_to_list'
		      (F)
	      in  let <_cor2> =
		      %% Line 107
		      call 'erlang':'hd'
			  (_cor1)
		  in  %% Line 107
		      call 'erlang':'=:='
			  (_cor2, 45)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'isFunDef',1}}] )
	    -| ['compiler_generated'] )
	end
'mkCallList'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	let <Code> =
	    %% Line 117
	    call 'hipe_icode':'icode_code'
		(_cor0)
	in  %% Line 118
	    apply 'mkCallList'/3
		(Code, _cor1, [])
'mkCallList'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'icode_call',Vars,F,_cor7,'local',_cor8,_cor9,_cor10}|Code],MFA,Res> when 'true' ->
	      %% Line 121
	      case apply 'lookForDef'/2
		       (Code, Vars) of
		<{Size,DstList}> when 'true' ->
		    %% Line 122
		    apply 'mkCallList'/3
			(Code, MFA, [{'callPair',MFA,{F,{'matchSize',Size,DstList}}}|Res])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 123
	  <[_cor11|Code],MFA,Res> when 'true' ->
	      apply 'mkCallList'/3
		  (Code, MFA, Res)
	  %% Line 124
	  <[],_cor12,Res> when 'true' ->
	      Res
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mkCallList',3}}] )
	    -| ['compiler_generated'] )
	end
'lookForDef'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'icode_type',{'tuple',Size},_cor10,L,_cor11,_cor12}|Code],Vars> when 'true' ->
	      let <Code2> =
		  %% Line 134
		  apply 'skipToLabel'/2
		      (Code, L)
	      in  let <DstLst> =
		      %% Line 135
		      apply 'lookForUnElems'/2
			  (Code2, Vars)
		  in  %% Line 136
		      case DstLst of
			%% Line 137
			<[]> when 'true' ->
			    {1,Vars}
			%% Line 138
			<_cor13> when 'true' ->
			    let <DstLst2> =
				%% Line 139
				apply 'fixDstLst'/2
				    (DstLst, Size)
			    in  %% Line 140
				{Size,DstLst2}
		      end
	  %% Line 142
	  <[{'icode_move',NewVar,Var}|Code],[_cor14|[]]>
	      when call 'erlang':'=:='
		    (_cor14,
		     Var) ->
	      %% Line 143
	      apply 'lookForDef'/2
		  (Code, [NewVar|[]])
	  %% Line 144
	  <[{'icode_label',_cor15}|_cor16],Vars> when 'true' ->
	      %% Line 145
	      {1,Vars}
	  %% Line 146
	  <[I|Code],Vars = [Var|[]]> when 'true' ->
	      let <Defs> =
		  %% Line 147
		  call 'hipe_icode':'defines'
		      (I)
	      in  %% Line 148
		  case call 'lists':'member'
			   (Var, Defs) of
		    %% Line 149
		    <'true'> when 'true' ->
			%% Line 150
			{1,Vars}
		    %% Line 151
		    <'false'> when 'true' ->
			%% Line 152
			apply 'lookForDef'/2
			    (Code, Vars)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 154
	  <[],Vars> when 'true' ->
	      {1,Vars}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'lookForDef',2}}] )
	    -| ['compiler_generated'] )
	end
'skipToLabel'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	%% Line 164
	case apply 'skipToLabel2'/2
		 (_cor1, _cor0) of
	  %% Line 165
	  <'noLabel'> when 'true' ->
	      _cor1
	  %% Line 167
	  <NewCode> when 'true' ->
	      %% Line 168
	      NewCode
	end
'skipToLabel2'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'icode_label',L}|Code],_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     L) ->
	      Code
	  %% Line 172
	  <[_cor5|Code],L> when 'true' ->
	      apply 'skipToLabel2'/2
		  (Code, L)
	  %% Line 173
	  <[],_cor6> when 'true' ->
	      'noLabel'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'skipToLabel2',2}}] )
	    -| ['compiler_generated'] )
	end
'lookForUnElems'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	%% Line 183
	apply 'lookForUnElems'/3
	    (_cor1, _cor0, [])
'lookForUnElems'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'icode_call',%% Line 186
			  [Ret|[]],{'unsafe_element',Nr},Var,_cor6,_cor7,_cor8,_cor9}|%% Line 186
										      Code],_cor10,%% Line 186
												   Res>
	      when call 'erlang':'=:='
		    (_cor10,
		     %% Line 186
		     Var) ->
	      %% Line 187
	      apply 'lookForUnElems'/3
		  (Code, Var, [{Nr,Ret}|Res])
	  %% Line 188
	  <[{'icode_move',Var,_cor11}|_cor12],[_cor13|[]],Res>
	      when call 'erlang':'=:='
		    (_cor13,
		     Var) ->
	      %% Line 189
	      call 'lists':'flatten'
		  (Res)
	  %% Line 190
	  <[{'icode_call',VarList,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}|_cor20],_cor21,Res>
	      when call 'erlang':'=:='
		    (_cor21,
		     VarList) ->
	      %% Line 191
	      call 'lists':'flatten'
		  (Res)
	  %% Line 192
	  <[_cor22|Code],Var,Res> when 'true' ->
	      %% Line 193
	      apply 'lookForUnElems'/3
		  (Code, Var, Res)
	  %% Line 194
	  <[],_cor23,Res> when 'true' ->
	      call 'lists':'flatten'
		  (Res)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'lookForUnElems',3}}] )
	    -| ['compiler_generated'] )
	end
'fixDstLst'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <DstLst,Size>
	      when call 'erlang':'is_integer'
		    (Size) ->
	      %% Line 204
	      apply 'fixDstLst'/4
		  (DstLst, Size, 1, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fixDstLst',2}}] )
	    -| ['compiler_generated'] )
	end
'fixDstLst'/4 =
    %% Line 206
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <DstLst,Size,Cnt,Res>
	      when call 'erlang':'=<'
		    (Cnt,
		     Size) ->
	      %% Line 207
	      case apply 'isInLst'/2
		       (Cnt, DstLst) of
		%% Line 208
		<{'true',Var}> when 'true' ->
		    let <_cor4> =
			%% Line 209
			call 'erlang':'+'
			    (Cnt, 1)
		    in  %% Line 209
			apply 'fixDstLst'/4
			    (DstLst, Size, _cor4, [Var|Res])
		%% Line 210
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 211
			call 'hipe_gensym':'new_var'
			    ('icode')
		    in  let <Var> =
			    %% Line 211
			    call 'hipe_icode':'mk_var'
				(_cor5)
			in  let <_cor7> =
				%% Line 212
				call 'erlang':'+'
				    (Cnt, 1)
			    in  %% Line 212
				apply 'fixDstLst'/4
				    (DstLst, Size, _cor7, [Var|Res])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 214
	  <_cor13,Size,Cnt,Res>
	      when call 'erlang':'>'
		    (Cnt,
		     Size) ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'fixDstLst',4}}] )
	    -| ['compiler_generated'] )
	end
'isInLst'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Nr,[{_cor4,Var}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Nr) ->
	      {'true',Var}
	  %% Line 224
	  <Cnt,[_cor6|DstLst]> when 'true' ->
	      apply 'isInLst'/2
		  (Cnt, DstLst)
	  %% Line 225
	  <_cor7,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'isInLst',2}}] )
	    -| ['compiler_generated'] )
	end
'isOptimizable'/1 =
    %% Line 234
    fun (_cor0) ->
	let <Icode2> =
	    %% Line 236
	    call 'hipe_icode':'strip_comments'
		(_cor0)
	in  let <Cfg> =
		%% Line 237
		call 'hipe_icode_cfg':'linear_to_cfg'
		    (Icode2)
	    in  %% Line 239
		case apply 'findReturnBlocks'/1
			 (Cfg) of
		  %% Line 240
		  <'noReturn'> when 'true' ->
		      %% Line 241
		      {'false',-1}
		  %% Line 242
		  <BlockList> when 'true' ->
		      %% Line 243
		      apply 'processReturnBlocks'/2
			  (BlockList, Cfg)
		end
'findReturnBlocks'/1 =
    %% Line 253
    fun (_cor0) ->
	let <Labels> =
	    %% Line 254
	    call 'hipe_icode_cfg':'labels'
		(_cor0)
	in  %% Line 255
	    case apply 'searchBlocks'/2
		     (Labels, _cor0) of
	      %% Line 256
	      <[]> when 'true' ->
		  %% Line 257
		  'noReturn'
	      %% Line 258
	      <BlockList> when 'true' ->
		  %% Line 259
		  BlockList
	    end
'searchBlocks'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	%% Line 270
	apply 'searchBlocks'/3
	    (_cor1, _cor0, [])
'searchBlocks'/3 =
    %% Line 272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Labels],IcodeCfg,Res> when 'true' ->
	      let <Block> =
		  %% Line 273
		  call 'hipe_icode_cfg':'bb'
		      (IcodeCfg, Label)
	      in  let <Code> =
		      %% Line 274
		      call 'hipe_bb':'code'
			  (Block)
		  in  %% Line 275
		      case apply 'searchBlockCode'/1
			       (Code) of
			%% Line 276
			<{'hasReturn',RetVar}> when 'true' ->
			    %% Line 277
			    apply 'searchBlocks'/3
				(Labels, IcodeCfg, [{Label,RetVar}|Res])
			%% Line 278
			<'noReturn'> when 'true' ->
			    %% Line 279
			    apply 'searchBlocks'/3
				(Labels, IcodeCfg, Res)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 281
	  <[],_cor9,Res> when 'true' ->
	      Res
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'searchBlocks',3}}] )
	    -| ['compiler_generated'] )
	end
'searchBlockCode'/1 =
    %% Line 290
    fun (_cor0) ->
	case _cor0 of
	  <[{'icode_return',Vars}|_cor2]> when 'true' ->
	      %% Line 291
	      {'hasReturn',Vars}
	  %% Line 292
	  <[_cor3|Icode]> when 'true' ->
	      %% Line 293
	      apply 'searchBlockCode'/1
		  (Icode)
	  %% Line 294
	  <[]> when 'true' ->
	      'noReturn'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'searchBlockCode',1}}] )
	    -| ['compiler_generated'] )
	end
'processReturnBlocks'/2 =
    %% Line 303
    fun (_cor1,_cor0) ->
	%% Line 304
	apply 'processReturnBlocks'/4
	    (_cor1, _cor0, {'true',-1}, [])
'processReturnBlocks'/4 =
    %% Line 306
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,Var}|BlockList],Cfg,{Opts,Size},TypeLst> when 'true' ->
	      %% Line 307
	      case apply 'traverseCode'/3
		       (Label, Var, Cfg) of
		<{Opt,Type,Size2}> when 'true' ->
		    let <_cor8> =
			%% Line 308
			( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(Size,
					 -1) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  call 'erlang':'=:='
				      (Size, Size2)
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 308
			case _cor8 of
			  %% Line 309
			  <'true'> when 'true' ->
			      let <_cor11> =
				  %% Line 311
				  ( case Opt of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    Opts
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor9> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor9}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 310
				  apply 'processReturnBlocks'/4
				      (BlockList, Cfg, %% Line 311
						       {_cor11,Size2}, %% Line 311
								       [Type|TypeLst])
			  %% Line 312
			  <'false'> when 'true' ->
			      %% Line 313
			      {'false',-1}
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 315
	  <[],_cor23,Res,TypeLst> when 'true' ->
	      %% Line 316
	      case call 'lists':'member'
		       ('icode_var', TypeLst) of
		%% Line 317
		<'true'> when 'true' ->
		    %% Line 318
		    case Res of
		      <{_cor24,Size}> when 'true' ->
			  %% Line 319
			  case <> of
			    %% Line 320
			    <>
				when call 'erlang':'>'
				      (Size,
				       1) ->
				%% Line 321
				Res
			    %% Line 322
			    <> when 'true' ->
				%% Line 323
				{'false',-1}
			  end
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		%% Line 325
		<'false'> when 'true' ->
		    %% Line 326
		    {'false',-1}
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'processReturnBlocks',4}}] )
	    -| ['compiler_generated'] )
	end
'traverseCode'/3 =
    %% Line 336
    fun (_cor2,_cor1,_cor0) ->
	%% Line 337
	apply 'traverseCode'/4
	    (_cor2, _cor1, _cor0, [])
'traverseCode'/4 =
    %% Line 339
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Preds> =
	    %% Line 340
	    call 'hipe_icode_cfg':'pred'
		(_cor1, _cor3)
	in  let <Block> =
		%% Line 341
		call 'hipe_icode_cfg':'bb'
		    (_cor1, _cor3)
	    in  let <Code> =
		    %% Line 342
		    call 'hipe_bb':'code'
			(Block)
		in  let <_cor7> =
			%% Line 343
			call 'lists':'reverse'
			    (Code)
		    in  %% Line 343
			case apply 'findDefine'/2
				 (_cor7, _cor2) of
			  %% Line 344
			  <{'found',Type,NumRets}> when 'true' ->
			      %% Line 345
			      {'true',Type,NumRets}
			  %% Line 346
			  <{'notFound',SrcVar}> when 'true' ->
			      %% Line 347
			      case Preds of
				%% Line 348
				<[]> when 'true' ->
				    %% Line 349
				    {'false','none',-1}
				%% Line 350
				<[Pred|[]]> when 'true' ->
				    %% Line 351
				    case call 'lists':'member'
					     (_cor3, _cor0) of
				      %% Line 352
				      <'false'> when 'true' ->
					  %% Line 353
					  apply 'traverseCode'/4
					      (Pred, SrcVar, _cor1, [_cor3|_cor0])
				      %% Line 354
				      <'true'> when 'true' ->
					  %% Line 355
					  {'false','none',-1}
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				%% Line 357
				<_cor18> when 'true' ->
				    %% Line 358
				    {'false','none',-1}
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
'findDefine'/2 =
    %% Line 369
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'icode_call',Vars,'mktuple',Vs,_cor12,_cor13,_cor14,_cor15}|_cor16],_cor17>
	      when call 'erlang':'=:='
		    (_cor17,
		     Vars) ->
	      %% Line 370
	      case call 'erlang':'length'
		       (Vs) of
		%% Line 371
		<1> when 'true' ->
		    %% Line 372
		    case Vs of
		      <[{Type,_cor18}|[]]> when 'true' ->
			  %% Line 373
			  {'found',Type,1}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 374
		<Len> when 'true' ->
		    let <_cor3> =
			%% Line 375
			call 'erlang':'make_fun'
			    ('hipe_icode', 'is_var', 1)
		    in  %% Line 375
			case call 'lists':'any'
				 (_cor3, Vs) of
			  %% Line 376
			  <'true'> when 'true' ->
			      %% Line 377
			      {'found','icode_var',Len}
			  %% Line 378
			  <'false'> when 'true' ->
			      %% Line 379
			      {'found','icode_const',Len}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 382
	  <[{'icode_move',Var,Src}|Code],[_cor19|[]]>
	      when call 'erlang':'=:='
		    (_cor19,
		     Var) ->
	      %% Line 383
	      case call 'hipe_icode':'is_var'
		       (Src) of
		%% Line 384
		<'true'> when 'true' ->
		    %% Line 385
		    apply 'findDefine'/2
			(Code, [Src|[]])
		%% Line 386
		<'false'> when 'true' ->
		    %% Line 387
		    case Src of
		      %% Line 388
		      <{'icode_const',{'flat',Value}}> when 'true' ->
			  %% Line 389
			  case <> of
			    %% Line 390
			    <>
				when call 'erlang':'is_tuple'
				      (Value) ->
				let <_cor6> =
				    %% Line 391
				    call 'erlang':'tuple_size'
					(Value)
				in  %% Line 391
				    {'found','icode_const',_cor6}
			    %% Line 392
			    <> when 'true' ->
				%% Line 393
				{'found','icode_const',1}
			  end
		      %% Line 395
		      <_cor20> when 'true' ->
			  %% Line 396
			  apply 'findDefine'/2
			      (Code, [Var|[]])
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 399
	  <[_cor21|Code],Var> when 'true' ->
	      %% Line 400
	      apply 'findDefine'/2
		  (Code, Var)
	  %% Line 401
	  <[],Var> when 'true' ->
	      %% Line 402
	      {'notFound',Var}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'findDefine',2}}] )
	    -| ['compiler_generated'] )
	end
'addToTable'/4 =
    %% Line 411
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <MFA,Optimizable,CallList,{FunLst,CallLst}> when 'true' ->
	      let <NewFunLst> =
		  %% Line 412
		  [{MFA,Optimizable}|FunLst]
	      in  let <_cor5> =
		      %% Line 413
		      call 'erlang':'++'
			  (CallList, CallLst)
		  in  %% Line 413
		      {NewFunLst,_cor5}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'addToTable',4}}] )
	    -| ['compiler_generated'] )
	end
'filterTable'/3 =
    %% Line 422
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{FunLst,CallLst},MaxRets,Exports> when 'true' ->
	      %% Line 423
	      apply 'filterTable'/5
		  (FunLst, CallLst, MaxRets, Exports, {[],[]})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'filterTable',3}}] )
	    -| ['compiler_generated'] )
	end
'filterTable'/5 =
    %% Line 425
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Fun|FunLst],CallLst,MaxRets,Exports,FCs = {Funs,Calls}> when 'true' ->
	      %% Line 426
	      case Fun of
		<{MFA,{ReturnOpt,Rets}}> when 'true' ->
		    %% Line 427
		    case apply 'checkCalls'/3
			     (CallLst, MFA, Rets) of
		      <{CallOpt,CallsToKeep}> when 'true' ->
			  let <CallsToKeep2> =
			      %% Line 428
			      apply 'removeDuplicateCalls'/1
				  (CallsToKeep)
			  in  let <NotExported> =
				  %% Line 429
				  apply 'checkExported'/2
				      (MFA, Exports)
			      in  let <_cor18> =
				      %% Line 430
				      ( case CallOpt of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						( case ReturnOpt of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  ( case <> of
							      ( <>
								    when call 'erlang':'=<'
									  (Rets,
									   MaxRets) ->
								    %% Line 431
								    ( case NotExported of
									( <( 'true'
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor13> =
										  apply 'containRecursiveCalls'/2
										      (CallsToKeep2, MFA)
									      in  call 'erlang':'not'
										      (_cor13)
									  -| ['compiler_generated'] )
									( <( 'false'
									     -| ['compiler_generated'] )> when 'true' ->
									      'false'
									  -| ['compiler_generated'] )
									( <_cor12> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {( 'badarg'
											  -| ['compiler_generated'] ),_cor12}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor10> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor10}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_cor9> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor9}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  %% Line 430
				      case _cor18 of
					%% Line 432
					<'true'> when 'true' ->
					    let <_cor19> =
						%% Line 434
						call 'erlang':'++'
						    (CallsToKeep2, Calls)
					    in  %% Line 433
						apply 'filterTable'/5
						    (FunLst, CallLst, MaxRets, Exports, %% Line 434
											{[Fun|Funs],_cor19})
					%% Line 435
					<'false'> when 'true' ->
					    %% Line 436
					    apply 'filterTable'/5
						(FunLst, CallLst, MaxRets, Exports, FCs)
					( <_cor20> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor20})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 438
	  <[],_cor26,_cor27,_cor28,Res> when 'true' ->
	      Res
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'filterTable',5}}] )
	    -| ['compiler_generated'] )
	end
'removeDuplicateCalls'/1 =
    %% Line 440
    fun (_cor0) ->
	%% Line 441
	apply 'removeDuplicateCalls'/2
	    (_cor0, [])
'removeDuplicateCalls'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Call|CallsToKeep],Res> when 'true' ->
	      %% Line 444
	      case call 'lists':'member'
		       (Call, CallsToKeep) of
		%% Line 445
		<'true'> when 'true' ->
		    %% Line 446
		    apply 'removeDuplicateCalls'/2
			(CallsToKeep, Res)
		%% Line 447
		<'false'> when 'true' ->
		    %% Line 448
		    apply 'removeDuplicateCalls'/2
			(CallsToKeep, [Call|Res])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 450
	  <[],Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'removeDuplicateCalls',2}}] )
	    -| ['compiler_generated'] )
	end
'containRecursiveCalls'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Call|Calls],Fun> when 'true' ->
	      %% Line 453
	      case Call of
		<{'callPair',Caller,{Callee,_cor9}}> when 'true' ->
		    let <_cor5> =
			%% Line 454
			( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(Callee,
					 Fun) ->
				  call 'erlang':'=:='
				      (Caller, Fun)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 454
			case _cor5 of
			  %% Line 455
			  <'true'> when 'true' ->
			      %% Line 456
			      'true'
			  %% Line 457
			  <'false'> when 'true' ->
			      %% Line 458
			      apply 'containRecursiveCalls'/2
				  (Calls, Fun)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 460
	  <[],_cor10> when 'true' ->
	      'false'
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'containRecursiveCalls',2}}] )
	    -| ['compiler_generated'] )
	end
'checkCalls'/3 =
    %% Line 469
    fun (_cor2,_cor1,_cor0) ->
	%% Line 470
	apply 'checkCalls'/5
	    (_cor2, _cor1, _cor0, [], [])
'checkCalls'/5 =
    %% Line 472
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C = {'callPair',_cor11,{MFA,{'matchSize',Rets,_cor12}}}|CallLst],_cor13,_cor14,%% Line 473
											   Res,%% Line 473
											       Opt>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor13, %% Line 473
				 MFA)
		in  let <_cor16> =
			call 'erlang':'=:='
			    (_cor14, %% Line 473
				     Rets)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 474
	      apply 'checkCalls'/5
		  (CallLst, MFA, Rets, [C|Res], ['true'|Opt])
	  %% Line 475
	  <[{'callPair',_cor17,{MFA,{'matchSize',_cor18,_cor19}}}|CallLst],_cor20,%% Line 476
										  Rets,%% Line 476
										       Res,%% Line 476
											   Opt>
	      when call 'erlang':'=:='
		    (_cor20,
		     %% Line 476
		     MFA) ->
	      %% Line 477
	      apply 'checkCalls'/5
		  (CallLst, MFA, Rets, Res, ['false'|Opt])
	  %% Line 478
	  <[_cor21|CallLst],MFA,Rets,Res,Opt> when 'true' ->
	      %% Line 479
	      apply 'checkCalls'/5
		  (CallLst, MFA, Rets, Res, Opt)
	  %% Line 480
	  <[],_cor22,_cor23,Res,Opt> when 'true' ->
	      let <_cor5> =
		  apply 'combineOpts'/1
		      (Opt)
	      in  {_cor5,Res}
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'checkCalls',5}}] )
	    -| ['compiler_generated'] )
	end
'combineOpts'/1 =
    %% Line 489
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'false'
	  %% Line 490
	  <[Opt|[]]> when 'true' ->
	      Opt
	  %% Line 491
	  <[Opt|Opts]> when 'true' ->
	      ( case Opt of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'combineOpts'/1
			    (Opts)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'combineOpts',1}}] )
	    -| ['compiler_generated'] )
	end
'checkExported'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_cor4,F,A},[{_cor5,_cor6}|_cor7]>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(_cor5, F)
		in  let <_cor9> =
			call 'erlang':'=:='
			    (_cor6, A)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      'false'
	  %% Line 501
	  <MFA,[_cor10|Exports]> when 'true' ->
	      apply 'checkExported'/2
		  (MFA, Exports)
	  %% Line 502
	  <_cor11,[]> when 'true' ->
	      'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'checkExported',2}}] )
	    -| ['compiler_generated'] )
	end
'optimize'/4 =
    %% Line 513
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 514
	case _cor0 of
	  <{FunLst,CallLst}> when 'true' ->
	      let <List2> =
		  %% Line 515
		  apply 'optimizeFuns'/3
		      (FunLst, _cor1, _cor3)
	      in  %% Line 516
		  apply 'optimizeCalls'/3
		      (CallLst, _cor1, List2)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'optimizeFuns'/3 =
    %% Line 525
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Fun,_cor7}|FunList],Opts,List> when 'true' ->
	      let <NewList> =
		  %% Line 526
		  apply 'findFun'/2
		      (List, Fun)
	      in  %% Line 527
		  apply 'optimizeFuns'/3
		      (FunList, Opts, NewList)
	  %% Line 528
	  <[],_cor8,List> when 'true' ->
	      List
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'optimizeFuns',3}}] )
	    -| ['compiler_generated'] )
	end
'findFun'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	apply 'findFun'/3
	    (_cor1, _cor0, [])
'findFun'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Fun,Icode}|List],_cor7,Res>
	      when call 'erlang':'=:='
		    (_cor7,
		     Fun) ->
	      let <NewIcode> =
		  %% Line 532
		  apply 'optimizeFun'/1
		      (Icode)
	      in  %% Line 533
		  apply 'findFun'/3
		      (List, Fun, [{Fun,NewIcode}|Res])
	  %% Line 534
	  <[I|List],Fun,Res> when 'true' ->
	      apply 'findFun'/3
		  (List, Fun, [I|Res])
	  %% Line 535
	  <[],_cor8,Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'findFun',3}}] )
	    -| ['compiler_generated'] )
	end
'optimizeFun'/1 =
    %% Line 538
    fun (_cor0) ->
	%% Line 539
	case call 'hipe_icode':'icode_label_range'
		 (_cor0) of
	  <{_X_LMin,LMax}> when 'true' ->
	      let <_cor2> =
		  %% Line 540
		  call 'erlang':'+'
		      (LMax, 1)
	      in  do  %% Line 540
		      call 'hipe_gensym':'set_label'
			  ('icode', _cor2)
		      %% Line 541
		      case call 'hipe_icode':'icode_var_range'
			       (_cor0) of
			<{_X_VMin,VMax}> when 'true' ->
			    let <_cor4> =
				%% Line 542
				call 'erlang':'+'
				    (VMax, 1)
			    in  do  %% Line 542
				    call 'hipe_gensym':'set_var'
					('icode', _cor4)
				    let <Icode2> =
					%% Line 544
					call 'hipe_icode':'strip_comments'
					    (_cor0)
				    in  let <Cfg> =
					    %% Line 545
					    call 'hipe_icode_cfg':'linear_to_cfg'
						(Icode2)
					in  %% Line 546
					    case apply 'findReturnBlocks'/1
						     (Cfg) of
					      %% Line 547
					      <'noReturn'> when 'true' ->
						  %% Line 548
						  'false'
					      %% Line 549
					      <BlockList> when 'true' ->
						  let <NewCfg> =
						      %% Line 550
						      apply 'optimizeReturnBlocks'/2
							  (BlockList, Cfg)
						  in  %% Line 551
						      call 'hipe_icode_cfg':'cfg_to_linear'
							  (NewCfg)
					    end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'optimizeReturnBlocks'/2 =
    %% Line 554
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Block|BlockList],Cfg> when 'true' ->
	      %% Line 555
	      case apply 'optimizeReturnBlock'/2
		       (Block, Cfg) of
		<{NewCfg,Vars}> when 'true' ->
		    let <_cor5> =
			%% Line 556
			case Vars of
			  %% Line 557
			  <[_cor9|[]]> when 'true' ->
			      %% Line 558
			      Cfg
			  %% Line 559
			  <_cor10> when 'true' ->
			      %% Line 560
			      case Block of
				<{Label,_cor11}> when 'true' ->
				    %% Line 561
				    apply 'updateReturnBlock'/3
					(Label, Vars, NewCfg)
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			end
		    in  %% Line 563
			apply 'optimizeReturnBlocks'/2
			    (BlockList, _cor5)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 564
	  <[],Cfg> when 'true' ->
	      Cfg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'optimizeReturnBlocks',2}}] )
	    -| ['compiler_generated'] )
	end
'optimizeReturnBlock'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	%% Line 567
	apply 'optimizeReturnBlock'/3
	    (_cor1, _cor0, [])
'optimizeReturnBlock'/3 =
    %% Line 569
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Label,Var},Cfg,UpdateMap> when 'true' ->
	      let <Preds> =
		  %% Line 570
		  call 'hipe_icode_cfg':'pred'
		      (Cfg, Label)
	      in  let <Block> =
		      %% Line 571
		      call 'hipe_icode_cfg':'bb'
			  (Cfg, Label)
		  in  let <Code> =
			  %% Line 572
			  call 'hipe_bb':'code'
			      (Block)
		      in  %% Line 573
			  case apply 'optimizeDefine'/2
				   (Code, Var) of
			    %% Line 574
			    <{'found',NewBlockCode,Vars}> when 'true' ->
				let <NewBlock> =
				    %% Line 575
				    call 'hipe_bb':'code_update'
					(Block, NewBlockCode)
				in  let <NewCfg> =
					%% Line 576
					apply 'resolveUpdateMap'/2
					    (UpdateMap, Cfg)
				    in  let <_cor8> =
					    %% Line 577
					    call 'hipe_icode_cfg':'bb_add'
						(NewCfg, Label, NewBlock)
					in  %% Line 577
					    {_cor8,Vars}
			    %% Line 578
			    <{'none',NewBlockCode,NewVar}> when 'true' ->
				%% Line 579
				case Preds of
				  %% Line 580
				  <[Pred|[]]> when 'true' ->
				      let <NewBlock> =
					  %% Line 581
					  call 'hipe_bb':'code_update'
					      (Block, NewBlockCode)
				      in  %% Line 582
					  apply 'optimizeReturnBlock'/3
					      ({Pred,NewVar}, Cfg, %% Line 583
								   [{Label,NewBlock}|UpdateMap])
				  %% Line 584
				  <[_cor15|_cor16]> when 'true' ->
				      %% Line 585
				      {Cfg,Var}
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    %% Line 587
			    <{'none','noOpt'}> when 'true' ->
				%% Line 588
				{Cfg,Var}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'optimizeReturnBlock',3}}] )
	    -| ['compiler_generated'] )
	end
'optimizeDefine'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 592
	    call 'lists':'reverse'
		(_cor1)
	in  %% Line 592
	    apply 'optimizeDefine'/4
		(_cor2, _cor0, [], [])
'optimizeDefine'/4 =
    %% Line 594
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],Dsts,DstLst,Res> when 'true' ->
	      %% Line 595
	      case Dsts of
		<[Ds|[]]> when 'true' ->
		    let <_cor7> =
			%% Line 596
			( case apply 'isCallPrimop'/2
				   (I, 'mktuple') of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'=:='
				      (DstLst, [])
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 596
			case _cor7 of
			  %% Line 597
			  <'true'> when 'true' ->
			      let <_cor8> =
				  %% Line 598
				  call 'hipe_icode':'call_dstlist'
				      (I)
			      in  %% Line 598
				  case <> of
				    %% Line 599
				    <>
					when call 'erlang':'=:='
					      (_cor8,
					       Dsts) ->
					let <_cor9> =
					    %% Line 600
					    call 'hipe_icode':'call_args'
						(I)
					in  let <_cor10> =
						%% Line 600
						call 'erlang':'length'
						    (_cor9)
					    in  %% Line 600
						case <> of
						  %% Line 601
						  <>
						      when call 'erlang':'>'
							    (_cor10,
							     1) ->
						      let <_cor11> =
							  %% Line 602
							  call 'hipe_icode':'call_args'
							      (I)
						      in  %% Line 602
							  apply 'optimizeDefine'/4
							      (Code, Dsts, _cor11, Res)
						  %% Line 603
						  <> when 'true' ->
						      %% Line 604
						      {'none','noOpt'}
						end
				    %% Line 606
				    <> when 'true' ->
					%% Line 607
					apply 'optimizeDefine'/4
					    (Code, Dsts, DstLst, [I|Res])
				  end
			  %% Line 609
			  <'false'> when 'true' ->
			      let <_cor16> =
				  %% Line 610
				  ( case call 'hipe_icode':'is_move'
					     (I) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'=:='
						(DstLst, [])
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor14> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor14}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 610
				  case _cor16 of
				    %% Line 611
				    <'true'> when 'true' ->
					let <_cor17> =
					    %% Line 612
					    call 'hipe_icode':'move_dst'
						(I)
					in  %% Line 612
					    case <> of
					      %% Line 613
					      <>
						  when call 'erlang':'=:='
							(_cor17,
							 Ds) ->
						  let <Src> =
						      %% Line 614
						      call 'hipe_icode':'move_src'
							  (I)
						  in  %% Line 615
						      case call 'hipe_icode':'is_var'
							       (Src) of
							%% Line 616
							<'true'> when 'true' ->
							    let <NewDst> =
								%% Line 617
								call 'hipe_icode':'move_src'
								    (I)
							    in  %% Line 618
								apply 'optimizeDefine'/4
								    (Code, [NewDst|[]], DstLst, Res)
							%% Line 619
							<'false'> when 'true' ->
							    %% Line 620
							    case Src of
							      %% Line 621
							      <{'icode_const',{'flat',T}}>
								  when call 'erlang':'is_tuple'
									(T) ->
								  let <NewLst> =
								      %% Line 622
								      call 'erlang':'tuple_to_list'
									  (T)
								  in  %% Line 623
								      apply 'optimizeDefine'/4
									  (Code, Dsts, NewLst, Res)
							      %% Line 624
							      <_cor36> when 'true' ->
								  %% Line 625
								  {'none','noOpt'}
							    end
							( <_cor22> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor22})
							  -| ['compiler_generated'] )
						      end
					      %% Line 628
					      <> when 'true' ->
						  %% Line 629
						  apply 'optimizeDefine'/4
						      (Code, Dsts, DstLst, [I|Res])
					    end
				    %% Line 631
				    <'false'> when 'true' ->
					let <_cor25> =
					    %% Line 632
					    call 'hipe_icode':'defines'
						(I)
					in  let <_cor27> =
						%% Line 632
						( case call 'lists':'member'
							   (Ds, _cor25) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  call 'erlang':'=:='
							      (DstLst, [])
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor24> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor24}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 632
						case _cor27 of
						  %% Line 633
						  <'true'> when 'true' ->
						      %% Line 634
						      {'none','noOpt'}
						  %% Line 635
						  <'false'> when 'true' ->
						      %% Line 636
						      apply 'optimizeDefine'/4
							  (Code, Dsts, DstLst, [I|Res])
						  ( <_cor28> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor28})
						    -| ['compiler_generated'] )
						end
				    ( <_cor29> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor29})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor30> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor30})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 640
	  <[],Dsts,DstLst,Res> when 'true' ->
	      %% Line 641
	      case DstLst of
		%% Line 642
		<[]> when 'true' ->
		    %% Line 643
		    {'none',Res,Dsts}
		%% Line 644
		<_cor37> when 'true' ->
		    %% Line 645
		    {'found',Res,DstLst}
	      end
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'optimizeDefine',4}}] )
	    -| ['compiler_generated'] )
	end
'resolveUpdateMap'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Label,Block}|UpdateMap],Cfg> when 'true' ->
	      let <_cor2> =
		  %% Line 649
		  call 'hipe_icode_cfg':'bb_add'
		      (Cfg, Label, Block)
	      in  %% Line 649
		  apply 'resolveUpdateMap'/2
		      (UpdateMap, _cor2)
	  %% Line 650
	  <[],Cfg> when 'true' ->
	      Cfg
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'resolveUpdateMap',2}}] )
	    -| ['compiler_generated'] )
	end
'updateReturnBlock'/3 =
    %% Line 659
    fun (_cor2,_cor1,_cor0) ->
	let <Block> =
	    %% Line 660
	    call 'hipe_icode_cfg':'bb'
		(_cor0, _cor2)
	in  let <Code> =
		%% Line 661
		call 'hipe_bb':'code'
		    (Block)
	    in  let <NewCode> =
		    %% Line 662
		    apply 'updateReturnCode'/2
			(Code, _cor1)
		in  let <NewBlock> =
			%% Line 663
			call 'hipe_bb':'code_update'
			    (Block, NewCode)
		    in  %% Line 664
			call 'hipe_icode_cfg':'bb_add'
			    (_cor0, _cor2, NewBlock)
'updateReturnCode'/2 =
    %% Line 666
    fun (_cor1,_cor0) ->
	%% Line 667
	apply 'updateReturnCode'/3
	    (_cor1, _cor0, [])
'updateReturnCode'/3 =
    %% Line 669
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Code],DstLst,Res> when 'true' ->
	      %% Line 670
	      case call 'hipe_icode':'is_return'
		       (I) of
		%% Line 671
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 672
			call 'hipe_icode':'mk_return'
			    (DstLst)
		    in  %% Line 672
			apply 'updateReturnCode'/3
			    (Code, DstLst, [_cor3|Res])
		%% Line 673
		<'false'> when 'true' ->
		    %% Line 674
		    apply 'updateReturnCode'/3
			(Code, DstLst, [I|Res])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 676
	  <[],_cor8,Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'updateReturnCode',3}}] )
	    -| ['compiler_generated'] )
	end
'optimizeCalls'/3 =
    %% Line 685
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Call|CallLst],_X_Opts,List> when 'true' ->
	      %% Line 686
	      case Call of
		<{'callPair',Caller,{Callee,{'matchSize',_cor8,DstLst}}}> when 'true' ->
		    let <NewList> =
			%% Line 687
			apply 'optimizeCall'/4
			    (List, Caller, Callee, DstLst)
		    in  %% Line 688
			apply 'optimizeCalls'/3
			    (CallLst, _X_Opts, NewList)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 689
	  <[],_X_Opts,List> when 'true' ->
	      List
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'optimizeCalls',3}}] )
	    -| ['compiler_generated'] )
	end
'optimizeCall'/4 =
    %% Line 698
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 699
	apply 'optimizeCall'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'optimizeCall'/5 =
    %% Line 701
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Icode}|List],_cor17,Callee,DstLst,Res>
	      when call 'erlang':'=:='
		    (_cor17,
		     MFA) ->
	      %% Line 702
	      case call 'hipe_icode':'icode_label_range'
		       (Icode) of
		<{_X_LMin,LMax}> when 'true' ->
		    let <_cor6> =
			%% Line 703
			call 'erlang':'+'
			    (LMax, 1)
		    in  do  %% Line 703
			    call 'hipe_gensym':'set_label'
				('icode', _cor6)
			    %% Line 704
			    case call 'hipe_icode':'icode_var_range'
				     (Icode) of
			      <{_X_VMin,VMax}> when 'true' ->
				  let <_cor8> =
				      %% Line 705
				      call 'erlang':'+'
					  (VMax, 1)
				  in  do  %% Line 705
					  call 'hipe_gensym':'set_var'
					      ('icode', _cor8)
					  let <Icode2> =
					      %% Line 707
					      call 'hipe_icode':'strip_comments'
						  (Icode)
					  in  let <Cfg> =
						  %% Line 708
						  call 'hipe_icode_cfg':'linear_to_cfg'
						      (Icode2)
					      in  let <NewIcode> =
						      %% Line 709
						      apply 'findAndUpdateCalls'/3
							  (Cfg, Callee, DstLst)
						  in  %% Line 710
						      apply 'optimizeCall'/5
							  (List, MFA, Callee, DstLst, [{MFA,NewIcode}|Res])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 711
	  <[I|List],Caller,Callee,DstLst,Res> when 'true' ->
	      %% Line 712
	      apply 'optimizeCall'/5
		  (List, Caller, Callee, DstLst, [I|Res])
	  %% Line 713
	  <[],_cor18,_cor19,_cor20,Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'optimizeCall',5}}] )
	    -| ['compiler_generated'] )
	end
'findAndUpdateCalls'/3 =
    %% Line 722
    fun (_cor2,_cor1,_cor0) ->
	let <Labels> =
	    %% Line 723
	    call 'hipe_icode_cfg':'labels'
		(_cor2)
	in  let <Cfg2> =
		%% Line 724
		apply 'findAndUpdateCalls'/5
		    (_cor2, Labels, _cor1, _cor0, [])
	    in  %% Line 725
		call 'hipe_icode_cfg':'cfg_to_linear'
		    (Cfg2)
'findAndUpdateCalls'/5 =
    %% Line 726
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Cfg,[L|Labels],Callee,DstLst,Visited> when 'true' ->
	      %% Line 729
	      case apply 'containCorrectCall'/4
		       (Cfg, L, Callee, DstLst) of
		%% Line 730
		<'true'> when 'true' ->
		    let <Block> =
			%% Line 731
			call 'hipe_icode_cfg':'bb'
			    (Cfg, L)
		    in  let <Code> =
			    %% Line 732
			    call 'hipe_bb':'code'
				(Block)
			in  %% Line 733
			    case apply 'updateCode'/3
				     (Code, Callee, DstLst) of
			      <{NewCode,OldVar}> when 'true' ->
				  let <NewBlock> =
				      %% Line 734
				      call 'hipe_bb':'code_update'
					  (Block, NewCode)
				  in  let <Cfg2> =
					  %% Line 735
					  call 'hipe_icode_cfg':'bb_add'
					      (Cfg, L, NewBlock)
				      in  let <Cfg3> =
					      %% Line 736
					      apply 'cleanUpAffectedCode'/5
						  (Cfg2, OldVar, Callee, L, Visited)
					  in  %% Line 737
					      apply 'findAndUpdateCalls'/5
						  (Cfg3, Labels, Callee, DstLst, [L|Visited])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		%% Line 738
		<'false'> when 'true' ->
		    %% Line 739
		    apply 'findAndUpdateCalls'/5
			(Cfg, Labels, Callee, DstLst, [L|Visited])
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 741
	  <Cfg,[],_cor17,_cor18,_cor19> when 'true' ->
	      Cfg
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'findAndUpdateCalls',5}}] )
	    -| ['compiler_generated'] )
	end
'containCorrectCall'/4 =
    %% Line 743
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Block> =
	    %% Line 744
	    call 'hipe_icode_cfg':'bb'
		(_cor3, _cor2)
	in  let <Code> =
		%% Line 745
		call 'hipe_bb':'code'
		    (Block)
	    in  %% Line 746
		case apply 'containCallee'/2
			 (Code, _cor1) of
		  %% Line 747
		  <{'true',OldVar}> when 'true' ->
		      let <Succs> =
			  %% Line 748
			  call 'hipe_icode_cfg':'succ'
			      (_cor3, _cor2)
		      in  %% Line 749
			  apply 'checkForUnElems'/4
			      (Succs, OldVar, _cor0, _cor3)
		  %% Line 750
		  <'false'> when 'true' ->
		      %% Line 751
		      'false'
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
'checkForUnElems'/4 =
    %% Line 754
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor11,_cor12,_cor13> when 'true' ->
	      'false'
	  %% Line 755
	  <[Succ|Succs],OldVar,DstLst,Cfg> when 'true' ->
	      let <Block> =
		  %% Line 756
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Succ)
	      in  let <Code> =
		      %% Line 757
		      call 'hipe_bb':'code'
			  (Block)
		  in  %% Line 758
		      case apply 'checkForUnElems2'/4
			       (Code, OldVar, DstLst, []) of
			%% Line 759
			<'true'> when 'true' ->
			    %% Line 760
			    'true'
			%% Line 761
			<'false'> when 'true' ->
			    %% Line 762
			    apply 'checkForUnElems'/4
				(Succs, OldVar, DstLst, Cfg)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'checkForUnElems',4}}] )
	    -| ['compiler_generated'] )
	end
'checkForUnElems2'/4 =
    %% Line 765
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],OldVar,DstLst,DstRes> when 'true' ->
	      %% Line 766
	      case apply 'isCallPrimop'/2
		       (I, 'unsafe_element') of
		%% Line 767
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 768
			call 'hipe_icode':'call_args'
			    (I)
		    in  %% Line 768
			case <> of
			  %% Line 769
			  <>
			      when call 'erlang':'=:='
				    (_cor4,
				     OldVar) ->
			      %% Line 770
			      case call 'hipe_icode':'call_dstlist'
				       (I) of
				<[Dst|[]]> when 'true' ->
				    %% Line 771
				    case call 'lists':'member'
					     (Dst, DstLst) of
				      %% Line 772
				      <'true'> when 'true' ->
					  %% Line 773
					  apply 'checkForUnElems2'/4
					      (Code, OldVar, DstLst, [Dst|DstRes])
				      %% Line 774
				      <'false'> when 'true' ->
					  %% Line 775
					  apply 'checkForUnElems2'/4
					      (Code, OldVar, DstLst, DstRes)
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  %% Line 777
			  <> when 'true' ->
			      %% Line 778
			      apply 'checkForUnElems2'/4
				  (Code, OldVar, DstLst, DstRes)
			end
		%% Line 780
		<'false'> when 'true' ->
		    %% Line 781
		    apply 'checkForUnElems2'/4
			(Code, OldVar, DstLst, DstRes)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 783
	  <[],_cor14,DstLst,DstRes> when 'true' ->
	      let <_cor9> =
		  call 'lists':'reverse'
		      (DstRes)
	      in  call 'erlang':'=:='
		      (DstLst, _cor9)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'checkForUnElems2',4}}] )
	    -| ['compiler_generated'] )
	end
'containCallee'/2 =
    %% Line 786
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Code],Callee> when 'true' ->
	      %% Line 787
	      case apply 'isCallLocal'/2
		       (I, Callee) of
		%% Line 788
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 789
			call 'hipe_icode':'call_dstlist'
			    (I)
		    in  %% Line 789
			{'true',_cor2}
		%% Line 790
		<'false'> when 'true' ->
		    %% Line 791
		    apply 'containCallee'/2
			(Code, Callee)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 793
	  <[],_cor6> when 'true' ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'containCallee',2}}] )
	    -| ['compiler_generated'] )
	end
'updateCode'/3 =
    %% Line 796
    fun (_cor2,_cor1,_cor0) ->
	%% Line 797
	apply 'updateCode'/5
	    (_cor2, _cor1, _cor0, [], [])
'updateCode'/5 =
    %% Line 799
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],Callee,DstLst,Res,OldVars> when 'true' ->
	      %% Line 800
	      case apply 'isCallLocal'/2
		       (I, Callee) of
		%% Line 801
		<'true'> when 'true' ->
		    let <Vars> =
			%% Line 802
			call 'hipe_icode':'call_dstlist'
			    (I)
		    in  let <I2> =
			    %% Line 803
			    call 'hipe_icode':'call_dstlist_update'
				(I, DstLst)
			in  %% Line 804
			    apply 'updateCode'/5
				(Code, Callee, DstLst, [I2|Res], Vars)
		%% Line 805
		<'false'> when 'true' ->
		    %% Line 806
		    apply 'updateCode'/5
			(Code, Callee, DstLst, [I|Res], OldVars)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 808
	  <[],_cor14,_cor15,Res,OldVars> when 'true' ->
	      let <_cor8> =
		  call 'lists':'reverse'
		      (Res)
	      in  {_cor8,OldVars}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'updateCode',5}}] )
	    -| ['compiler_generated'] )
	end
'cleanUpAffectedCode'/5 =
    %% Line 811
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Block> =
	    %% Line 812
	    call 'hipe_icode_cfg':'bb'
		(_cor4, _cor1)
	in  let <Code> =
		%% Line 813
		call 'hipe_bb':'code'
		    (Block)
	    in  %% Line 814
		case apply 'divideAtCall'/2
			 (Code, _cor2) of
		  <{CodeBefore,CodeAfter,DstLst}> when 'true' ->
		      %% Line 815
		      case apply 'findType'/2
			       (CodeAfter, _cor3) of
			<{NewCodeAfter,ContLab,FailLab}> when 'true' ->
			    let <ContBlock> =
				%% Line 816
				call 'hipe_icode_cfg':'bb'
				    (_cor4, ContLab)
			    in  let <Succs> =
				    %% Line 817
				    call 'hipe_icode_cfg':'succ'
					(_cor4, ContLab)
				in  let <ContCode> =
					%% Line 818
					call 'hipe_bb':'code'
					    (ContBlock)
				    in  %% Line 819
					case apply 'removeUnElems'/3
						 (ContCode, _cor3, DstLst) of
					  <{NewContCode,NewFailLab}> when 'true' ->
					      let <_cor13> =
						  %% Line 821
						  call 'erlang':'++'
						      (NewCodeAfter, NewContCode)
					      in  let <_cor14> =
						      %% Line 821
						      call 'erlang':'++'
							  (CodeBefore, _cor13)
						  in  let <NewBlock> =
							  %% Line 820
							  call 'hipe_bb':'code_update'
							      (Block, _cor14)
						      in  let <Cfg2> =
							      %% Line 822
							      call 'hipe_icode_cfg':'bb_add'
								  (_cor4, _cor1, NewBlock)
							  in  let <Cfg3> =
								  %% Line 823
								  apply 'resolveSuccBlocks'/6
								      (Succs, _cor3, DstLst, [_cor1|_cor0], %% Line 824
													    NewFailLab, %% Line 824
															Cfg2)
							      in  %% Line 825
								  apply 'insertMiddleFailBlock'/5
								      (Cfg3, NewFailLab, FailLab, _cor3, DstLst)
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor12})
					    -| ['compiler_generated'] )
					end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'divideAtCall'/2 =
    %% Line 827
    fun (_cor1,_cor0) ->
	%% Line 828
	apply 'divideAtCall'/3
	    (_cor1, _cor0, [])
'divideAtCall'/3 =
    %% Line 830
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Code],Caller,Tail> when 'true' ->
	      %% Line 831
	      case apply 'isCallLocal'/2
		       (I, Caller) of
		%% Line 832
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 833
			call 'lists':'reverse'
			    ([I|Tail])
		    in  let <_cor3> =
			    %% Line 833
			    call 'hipe_icode':'call_dstlist'
				(I)
			in  %% Line 833
			    {_cor4,Code,_cor3}
		%% Line 834
		<'false'> when 'true' ->
		    %% Line 835
		    apply 'divideAtCall'/3
			(Code, Caller, [I|Tail])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 837
	  <[],_cor9,Tail> when 'true' ->
	      {Tail,[]}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'divideAtCall',3}}] )
	    -| ['compiler_generated'] )
	end
'findType'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	%% Line 840
	apply 'findType'/4
	    (_cor1, _cor0, [], {'none','none'})
'findType'/4 =
    %% Line 842
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],OldVar,Rest,Succs> when 'true' ->
	      %% Line 843
	      case call 'hipe_icode':'is_type'
		       (I) of
		%% Line 844
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 845
			call 'hipe_icode':'type_args'
			    (I)
		    in  %% Line 845
			case <> of
			  %% Line 846
			  <>
			      when call 'erlang':'=:='
				    (_cor4,
				     OldVar) ->
			      let <TrueLab> =
				  %% Line 847
				  call 'hipe_icode':'type_true_label'
				      (I)
			      in  let <FalseLab> =
				      %% Line 848
				      call 'hipe_icode':'type_false_label'
					  (I)
				  in  %% Line 849
				      apply 'findType'/4
					  (Code, OldVar, Rest, {TrueLab,FalseLab})
			  %% Line 850
			  <> when 'true' ->
			      %% Line 851
			      apply 'findType'/4
				  (Code, OldVar, [I|Rest], Succs)
			end
		%% Line 853
		<'false'> when 'true' ->
		    %% Line 854
		    case call 'hipe_icode':'is_move'
			     (I) of
		      %% Line 855
		      <'true'> when 'true' ->
			  let <_cor8> =
			      %% Line 856
			      call 'hipe_icode':'move_src'
				  (I)
			  in  %% Line 856
			      case <> of
				%% Line 857
				<>
				    when call 'erlang':'=:='
					  ([_cor8|[]],
					   OldVar) ->
				    let <_cor9> =
					%% Line 858
					call 'hipe_icode':'move_dst'
					    (I)
				    in  %% Line 858
					apply 'findType'/4
					    (Code, _cor9, [I|Rest], Succs)
				%% Line 859
				<> when 'true' ->
				    %% Line 860
				    apply 'findType'/4
					(Code, OldVar, [I|Rest], Succs)
			      end
		      %% Line 862
		      <'false'> when 'true' ->
			  %% Line 863
			  apply 'findType'/4
			      (Code, OldVar, [I|Rest], Succs)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 866
	  <[],_cor18,Rest,{TrueLab,FalseLab}> when 'true' ->
	      let <_cor13> =
		  %% Line 867
		  call 'lists':'reverse'
		      (Rest)
	      in  %% Line 867
		  {_cor13,TrueLab,FalseLab}
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'findType',4}}] )
	    -| ['compiler_generated'] )
	end
'removeUnElems'/3 =
    %% Line 871
    fun (_cor2,_cor1,_cor0) ->
	%% Line 872
	apply 'removeUnElems'/6
	    (_cor2, _cor1, _cor0, [], 'false', 'none')
'removeUnElems'/6 =
    %% Line 874
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],OldVars = [OldVar|[]],DstLst,Res,Def,Lab> when 'true' ->
	      %% Line 875
	      case apply 'isCallPrimop'/2
		       (I, 'unsafe_element') of
		%% Line 876
		<'true'> when 'true' ->
		    let <_cor6> =
			%% Line 877
			call 'hipe_icode':'call_args'
			    (I)
		    in  %% Line 877
			case <> of
			  %% Line 878
			  <>
			      when call 'erlang':'=:='
				    (_cor6,
				     OldVars) ->
			      %% Line 879
			      apply 'removeUnElems'/6
				  (Code, OldVars, DstLst, Res, Def, Lab)
			  %% Line 880
			  <> when 'true' ->
			      let <_cor7> =
				  %% Line 881
				  call 'hipe_icode':'call_args'
				      (I)
			      in  %% Line 881
				  case call 'lists':'member'
					   (OldVar, _cor7) of
				    %% Line 882
				    <'true'> when 'true' ->
					%% Line 887
					apply 'removeUnElems'/6
					    (Code, OldVars, DstLst, [I|Res], Def, Lab)
				    %% Line 892
				    <'false'> when 'true' ->
					do  %% Line 893
					    call 'io':'format'
						([66|[111|[114|[100|[101|[32|[97|[108|[100|[114|[105|[103|[32|[107|[117|[110|[110|[97|[32|[104|[97|[109|[110|[97|[32|[104|[228|[114|[33]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
					    %% Line 894
					    apply 'removeUnElems'/6
						(Code, OldVars, DstLst, [I|Res], Def, Lab)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			end
		%% Line 897
		<'false'> when 'true' ->
		    %% Line 898
		    case call 'hipe_icode':'is_move'
			     (I) of
		      %% Line 899
		      <'true'> when 'true' ->
			  let <_cor10> =
			      %% Line 900
			      call 'hipe_icode':'move_src'
				  (I)
			  in  %% Line 900
			      case <> of
				%% Line 901
				<>
				    when call 'erlang':'=:='
					  (_cor10,
					   OldVar) ->
				    let <NewVar> =
					%% Line 902
					call 'hipe_icode':'move_dst'
					    (I)
				    in  %% Line 903
					apply 'removeUnElems'/6
					    (Code, [NewVar|[]], DstLst, [I|Res], Def, Lab)
				%% Line 904
				<> when 'true' ->
				    %% Line 905
				    apply 'removeUnElems'/6
					(Code, OldVars, DstLst, [I|Res], Def, Lab)
			      end
		      %% Line 907
		      <'false'> when 'true' ->
			  let <_cor15> =
			      %% Line 908
			      ( case call 'hipe_icode':'is_type'
					 (I) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					call 'erlang':'not'
					    (Def)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor13> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor13}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 908
			      case _cor15 of
				%% Line 909
				<'true'> when 'true' ->
				    let <_cor17> =
					%% Line 910
					case <> of
					  %% Line 911
					  <>
					      when call 'erlang':'=:='
						    (Lab,
						     'none') ->
					      %% Line 912
					      call 'hipe_gensym':'get_next_label'
						  ('icode')
					  %% Line 913
					  <> when 'true' ->
					      %% Line 914
					      Lab
					end
				    in  let <_X_I2> =
					    %% Line 916
					    apply 'updateTypeFalseLabel'/2
						(I, _cor17)
					in  %% Line 917
					    apply 'removeUnElems'/6
						(Code, OldVars, DstLst, [I|Res], Def, _cor17)
				%% Line 918
				<'false'> when 'true' ->
				    let <_cor21> =
					%% Line 919
					call 'hipe_icode':'uses'
					    (I)
				    in  let <_cor23> =
					    %% Line 919
					    ( case call 'lists':'member'
						       (OldVar, _cor21) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      Def
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor20> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor20}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 919
					    case _cor23 of
					      %% Line 920
					      <'true'> when 'true' ->
						  %% Line 921
						  apply 'removeUnElems'/6
						      (Code, OldVars, DstLst, [I|Res], Def, Lab)
					      %% Line 922
					      <'false'> when 'true' ->
						  let <_cor24> =
						      %% Line 923
						      call 'hipe_icode':'defines'
							  (I)
						  in  %% Line 923
						      case call 'lists':'member'
							       (OldVar, _cor24) of
							%% Line 924
							<'true'> when 'true' ->
							    %% Line 925
							    apply 'removeUnElems'/6
								(Code, OldVars, DstLst, [I|Res], 'true', Lab)
							%% Line 926
							<'false'> when 'true' ->
							    %% Line 927
							    apply 'removeUnElems'/6
								(Code, OldVars, DstLst, [I|Res], Def, Lab)
							( <_cor25> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor25})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor26> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor26})
						-| ['compiler_generated'] )
					    end
				( <_cor27> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor27})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor28> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor28})
			-| ['compiler_generated'] )
		    end
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 933
	  <[],_cor37,_cor38,Res,_cor39,Lab> when 'true' ->
	      let <_cor30> =
		  call 'lists':'reverse'
		      (Res)
	      in  {_cor30,Lab}
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32,_cor31})
		  -| [{'function_name',{'removeUnElems',6}}] )
	    -| ['compiler_generated'] )
	end
'updateTypeFalseLabel'/2 =
    %% Line 936
    fun (_cor1,_cor0) ->
	let <TrueLabel> =
	    %% Line 937
	    call 'hipe_icode':'type_true_label'
		(_cor1)
	in  let <Args> =
		%% Line 938
		call 'hipe_icode':'type_args'
		    (_cor1)
	    in  let <Type> =
		    %% Line 939
		    call 'hipe_icode':'type_test'
			(_cor1)
		in  %% Line 940
		    call 'hipe_icode':'mk_type'
			(Args, Type, TrueLabel, _cor0)
'resolveSuccBlocks'/6 =
    %% Line 943
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 944
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor9) ->
			  case _cor9 of
			    <[X|_cor7]> when 'true' ->
				( case call 'lists':'member'
					   (X, _cor2) of
				    <'false'> when 'true' ->
					let <_cor10> =
					    apply 'lc$^0'/1
						(_cor7)
					in  ( [X|_cor10]
					      -| ['compiler_generated'] )
				    ( <'true'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor7)
				      -| ['compiler_generated'] )
				    ( <_cor_variable> when 'true' ->
					  call 'erlang':'error'
					      ('badarg')
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor9> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor9})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor5)
	      -| ['list_comprehension'] )
	in  %% Line 945
	    apply 'resolveSuccBlocks2'/6
		(_cor12, _cor4, _cor3, _cor2, _cor1, _cor0)
'resolveSuccBlocks2'/6 =
    %% Line 947
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Succ|Succs],OldVar,DstLst,Vis,FailLab,Cfg> when 'true' ->
	      let <Block> =
		  %% Line 948
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Succ)
	      in  let <Code> =
		      %% Line 949
		      call 'hipe_bb':'code'
			  (Block)
		  in  %% Line 950
		      case apply 'checkUsesDefs'/4
			       (Code, OldVar, DstLst, FailLab) of
			<{NewCode,ReDefined}> when 'true' ->
			    let <NewBlock> =
				%% Line 951
				call 'hipe_bb':'code_update'
				    (Block, NewCode)
			    in  let <Cfg2> =
				    %% Line 952
				    call 'hipe_icode_cfg':'bb_add'
					(Cfg, Succ, NewBlock)
				in  %% Line 953
				    case ReDefined of
				      %% Line 954
				      <'true'> when 'true' ->
					  %% Line 955
					  apply 'resolveSuccBlocks2'/6
					      (Succs, OldVar, DstLst, [Succ|Vis], FailLab, Cfg2)
				      %% Line 956
				      <'false'> when 'true' ->
					  let <NewSuccs> =
					      %% Line 957
					      call 'hipe_icode_cfg':'succ'
						  (Cfg, Succ)
					  in  let <_cor19> =
						  %% Line 958
						  ( letrec
							'lc$^0'/1 =
							    fun (_cor16) ->
								case _cor16 of
								  <[X|_cor13]> when 'true' ->
								      let <_cor14> =
									  call 'erlang':'++'
									      (Vis, Succs)
								      in  ( case call 'lists':'member'
										     (X, _cor14) of
									      <'false'> when 'true' ->
										  let <_cor17> =
										      apply 'lc$^0'/1
											  (_cor13)
										  in  ( [X|_cor17]
											-| ['compiler_generated'] )
									      ( <'true'> when 'true' ->
										    apply 'lc$^0'/1
											(_cor13)
										-| ['compiler_generated'] )
									      ( <_cor_variable> when 'true' ->
										    call 'erlang':'error'
											('badarg')
										-| ['compiler_generated'] )
									    end
									    -| ['list_comprehension'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor16> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor16})
									  -| [{'function_name',{'lc$^0',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^0'/1
							    (NewSuccs)
						    -| ['list_comprehension'] )
					      in  let <_cor21> =
						      %% Line 959
						      call 'erlang':'++'
							  (_cor19, Succs)
						  in  %% Line 959
						      apply 'resolveSuccBlocks2'/6
							  (_cor21, OldVar, DstLst, %% Line 960
										   [Succ|Vis], %% Line 960
											       FailLab, %% Line 960
													Cfg2)
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor22})
					-| ['compiler_generated'] )
				    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 962
	  <[],_cor29,_cor30,_cor31,_cor32,Cfg> when 'true' ->
	      Cfg
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'resolveSuccBlocks2',6}}] )
	    -| ['compiler_generated'] )
	end
'checkUsesDefs'/4 =
    %% Line 965
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 966
	apply 'checkUsesDefs'/6
	    (_cor3, _cor2, _cor1, _cor0, [], 'false')
'checkUsesDefs'/6 =
    %% Line 968
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Code],OldVar,DstLst,FailLab,Res,Defined> when 'true' ->
	      %% Line 969
	      case OldVar of
		<[OVar|[]]> when 'true' ->
		    %% Line 970
		    case call 'hipe_icode':'is_move'
			     (I) of
		      %% Line 971
		      <'true'> when 'true' ->
			  let <_cor7> =
			      %% Line 972
			      call 'hipe_icode':'move_src'
				  (I)
			  in  %% Line 972
			      case <> of
				%% Line 973
				<>
				    when call 'erlang':'=:='
					  (_cor7,
					   OVar) ->
				    let <NewVar> =
					%% Line 974
					call 'hipe_icode':'move_dst'
					    (I)
				    in  %% Line 975
					apply 'checkUsesDefs'/6
					    (Code, NewVar, DstLst, FailLab, [I|Res], 'true')
				%% Line 976
				<> when 'true' ->
				    let <_cor9> =
					%% Line 977
					call 'hipe_icode':'defines'
					    (I)
				    in  %% Line 977
					case call 'lists':'member'
						 (OVar, _cor9) of
					  %% Line 978
					  <'true'> when 'true' ->
					      %% Line 979
					      apply 'checkUsesDefs'/6
						  (Code, OldVar, DstLst, FailLab, [I|Res], 'true')
					  %% Line 980
					  <'false'> when 'true' ->
					      %% Line 981
					      apply 'checkUsesDefs'/6
						  (Code, OldVar, DstLst, FailLab, [I|Res], Defined)
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor10})
					    -| ['compiler_generated'] )
					end
			      end
		      %% Line 984
		      <'false'> when 'true' ->
			  let <_cor14> =
			      %% Line 985
			      ( case call 'hipe_icode':'is_type'
					 (I) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					call 'erlang':'not'
					    (Defined)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor12> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor12}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 985
			      case _cor14 of
				%% Line 986
				<'true'> when 'true' ->
				    %% Line 987
				    case <> of
				      %% Line 988
				      <>
					  when call 'erlang':'=/='
						(FailLab,
						 'none') ->
					  let <_X_I2> =
					      %% Line 989
					      apply 'updateTypeFalseLabel'/2
						  (I, FailLab)
					  in  %% Line 990
					      apply 'checkUsesDefs'/6
						  (Code, OldVar, DstLst, FailLab, [I|Res], Defined)
				      %% Line 991
				      <> when 'true' ->
					  %% Line 992
					  apply 'checkUsesDefs'/6
					      (Code, OldVar, DstLst, FailLab, [I|Res], Defined)
				    end
				%% Line 994
				<'false'> when 'true' ->
				    let <_cor18> =
					%% Line 995
					call 'hipe_icode':'uses'
					    (I)
				    in  let <_cor22> =
					    %% Line 995
					    ( case call 'lists':'member'
						       (OVar, _cor18) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 996
						      ( case Defined of
							  ( <'false'> when 'true' ->
								call 'erlang':'=/='
								    (FailLab, 'none')
							    -| ['compiler_generated'] )
							  ( <'true'> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							  ( <_cor_variable> when 'true' ->
								call 'erlang':'error'
								    ('badarg')
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor17> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor17}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 995
					    case _cor22 of
					      %% Line 997
					      <'true'> when 'true' ->
						  let <Tpl> =
						      %% Line 998
						      call 'hipe_icode':'mk_primop'
							  (OldVar, 'mktuple', DstLst)
						  in  %% Line 999
						      apply 'checkUsesDefs'/6
							  (Code, OldVar, DstLst, FailLab, [I|[Tpl|Res]], 'true')
					      %% Line 1000
					      <'false'> when 'true' ->
						  let <_cor24> =
						      %% Line 1001
						      call 'hipe_icode':'defines'
							  (I)
						  in  %% Line 1001
						      case call 'lists':'member'
							       (OVar, _cor24) of
							%% Line 1002
							<'true'> when 'true' ->
							    %% Line 1003
							    apply 'checkUsesDefs'/6
								(Code, OldVar, DstLst, FailLab, [I|Res], 'true')
							%% Line 1004
							<'false'> when 'true' ->
							    %% Line 1005
							    apply 'checkUsesDefs'/6
								(Code, OldVar, DstLst, FailLab, [I|Res], Defined)
							( <_cor25> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor25})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor26> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor26})
						-| ['compiler_generated'] )
					    end
				( <_cor27> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor27})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor28> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor28})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1010
	  <[],_cor36,_cor37,_cor38,Res,Defined> when 'true' ->
	      let <_cor29> =
		  call 'lists':'reverse'
		      (Res)
	      in  {_cor29,Defined}
	  ( <_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'checkUsesDefs',6}}] )
	    -| ['compiler_generated'] )
	end
'insertMiddleFailBlock'/5 =
    %% Line 1013
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1014
	case <> of
	  %% Line 1015
	  <>
	      when call 'erlang':'=:='
		    (_cor3,
		     'none') ->
	      _cor4
	  %% Line 1017
	  <> when 'true' ->
	      let <_cor5> =
		  %% Line 1018
		  call 'hipe_icode':'mk_primop'
		      (_cor1, 'mktuple', _cor0)
	      in  let <_cor6> =
		      %% Line 1019
		      call 'hipe_icode':'mk_goto'
			  (_cor2)
		  in  let <NewCode> =
			  %% Line 1018
			  [_cor5|%% Line 1019
				 [_cor6|[]]]
		      in  let <NewBlock> =
			      %% Line 1020
			      call 'hipe_bb':'mk_bb'
				  (NewCode)
			  in  %% Line 1021
			      call 'hipe_icode_cfg':'bb_add'
				  (_cor4, _cor3, NewBlock)
	end
'isCallLocal'/2 =
    %% Line 1025
    fun (_cor1,_cor0) ->
	%% Line 1026
	( case call 'hipe_icode':'is_call'
		   (_cor1) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_icode':'call_type'
			  (_cor1)
		  in  %% Line 1027
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (_cor4,
				       'local') ->
				let <_cor5> =
				    call 'hipe_icode':'call_fun'
					(_cor1)
				in  call 'erlang':'=:='
					(_cor5, _cor0)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor2> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor2}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'isCallPrimop'/2 =
    %% Line 1029
    fun (_cor1,_cor0) ->
	%% Line 1030
	case call 'hipe_icode':'is_call'
		 (_cor1) of
	  %% Line 1031
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 1032
		  call 'hipe_icode':'call_fun'
		      (_cor1)
	      in  %% Line 1032
		  case <> of
		    %% Line 1033
		    <>
			when call 'erlang':'is_tuple'
			      (_cor2) ->
			let <_cor4> =
			    %% Line 1034
			    call 'hipe_icode':'call_type'
				(_cor1)
			in  %% Line 1034
			    ( case <> of
				( <>
				      when call 'erlang':'=:='
					    (_cor4,
					     'primop') ->
				      let <_cor5> =
					  %% Line 1035
					  call 'hipe_icode':'call_fun'
					      (_cor1)
				      in  let <_cor6> =
					      %% Line 1035
					      call 'erlang':'element'
						  (1, _cor5)
					  in  %% Line 1035
					      call 'erlang':'=:='
						  (_cor6, _cor0)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1036
		    <> when 'true' ->
			let <_cor9> =
			    %% Line 1037
			    call 'hipe_icode':'call_type'
				(_cor1)
			in  %% Line 1037
			    ( case <> of
				( <>
				      when call 'erlang':'=:='
					    (_cor9,
					     'primop') ->
				      let <_cor10> =
					  %% Line 1038
					  call 'hipe_icode':'call_fun'
					      (_cor1)
				      in  %% Line 1038
					  call 'erlang':'=:='
					      (_cor10, _cor0)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		  end
	  %% Line 1040
	  <'false'> when 'true' ->
	      %% Line 1041
	      'false'
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_mulret')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_mulret', _cor0)
end