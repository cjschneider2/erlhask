module 'hipe_x86_postpass' ['module_info'/0,
			    'module_info'/1,
			    'postpass'/2]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'postpass'/2 =
    %% Line 40
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Defun = {'defun',_cor11,_cor12,Code0,_cor13,_cor14,_cor15,_cor16,_cor17},Options> when 'true' ->
	      let <Code1> =
		  %% Line 41
		  apply 'pseudo_insn_expansion'/1
		      (Code0)
	      in  let <_cor4> =
		      %% Line 42
		      case call 'proplists':'get_bool'
			       ('peephole', Options) of
			%% Line 43
			<'true'> when 'true' ->
			    apply 'peephole_optimization'/1
				(Code1)
			%% Line 44
			<'false'> when 'true' ->
			    Code1
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  in  let <Code3> =
			  %% Line 46
			  apply 'trivial_goto_elimination'/1
			      (_cor4)
		      in  %% Line 47
			  call 'erlang':'setelement'
			      (4, Defun, Code3)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'postpass',2}}] )
	    -| ['compiler_generated'] )
	end
'peephole_optimization'/1 =
    %% Line 62
    fun (_cor0) ->
	%% Line 63
	apply 'peep'/3
	    (_cor0, [], [])
'peep'/3 =
    %% Line 67
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'fmove',Src,_cor48}|Insns],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor48,
		     Src) ->
	      %% Line 68
	      apply 'peep'/3
		  (Insns, Res, ['moveSelf1'|Lst])
	  %% Line 69
	  <[I = {'fmove',Src,Dst}|%% Line 70
				  [{'fmove',_cor49,_cor50}|Insns]],%% Line 70
								   Res,%% Line 70
								       Lst>
	      when let <_cor51> =
		    call 'erlang':'=:='
			(_cor49, %% Line 70
				 Dst)
		in  let <_cor52> =
			call 'erlang':'=:='
			    (_cor50, %% Line 70
				     Src)
		    in  call 'erlang':'and'
			    (_cor51, _cor52) ->
	      %% Line 71
	      apply 'peep'/3
		  (Insns, [I|Res], ['moveSelf2'|Lst])
	  %% Line 72
	  <[{'movsx',Src,_cor53}|Insns],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor53,
		     Src) ->
	      %% Line 73
	      apply 'peep'/3
		  (Insns, Res, ['moveSelf3'|Lst])
	  %% Line 74
	  <[I = {'movsx',Src,Dst}|%% Line 75
				  [{'movsx',_cor54,_cor55}|Insns]],%% Line 75
								   Res,%% Line 75
								       Lst>
	      when let <_cor56> =
		    call 'erlang':'=:='
			(_cor54, %% Line 75
				 Dst)
		in  let <_cor57> =
			call 'erlang':'=:='
			    (_cor55, %% Line 75
				     Src)
		    in  call 'erlang':'and'
			    (_cor56, _cor57) ->
	      %% Line 76
	      apply 'peep'/3
		  (Insns, [I|Res], ['moveSelf4'|Lst])
	  %% Line 77
	  <[{'movzx',Src,_cor58}|Insns],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor58,
		     Src) ->
	      %% Line 78
	      apply 'peep'/3
		  (Insns, Res, ['moveSelf5'|Lst])
	  %% Line 79
	  <[I = {'movzx',Src,Dst}|%% Line 80
				  [{'movzx',_cor59,_cor60}|Insns]],%% Line 80
								   Res,%% Line 80
								       Lst>
	      when let <_cor61> =
		    call 'erlang':'=:='
			(_cor59, %% Line 80
				 Dst)
		in  let <_cor62> =
			call 'erlang':'=:='
			    (_cor60, %% Line 80
				     Src)
		    in  call 'erlang':'and'
			    (_cor61, _cor62) ->
	      %% Line 81
	      apply 'peep'/3
		  (Insns, [I|Res], ['moveSelf6'|Lst])
	  %% Line 82
	  <[{'cmovcc',_cor63,Src,_cor64}|Insns],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor64,
		     Src) ->
	      %% Line 83
	      apply 'peep'/3
		  (Insns, Res, ['moveSelf7'|Lst])
	  %% Line 84
	  <[I = {'cmovcc',_cor65,Src,Dst}|%% Line 85
					  [{'cmovcc',_cor66,_cor67,_cor68}|Insns]],%% Line 85
										   Res,%% Line 85
										       Lst>
	      when let <_cor69> =
		    call 'erlang':'=:='
			(_cor67, %% Line 85
				 Dst)
		in  let <_cor70> =
			call 'erlang':'=:='
			    (_cor68, %% Line 85
				     Src)
		    in  call 'erlang':'and'
			    (_cor69, _cor70) ->
	      %% Line 86
	      apply 'peep'/3
		  (Insns, [I|Res], ['moveSelf8'|Lst])
	  %% Line 87
	  <[{'move',{'x86_temp',X,_cor71,_cor72},%% Line 88
						 {'x86_temp',_cor73,_cor74,_cor75}}|%% Line 88
										    Insns],%% Line 88
											   Res,%% Line 88
											       Lst>
	      when call 'erlang':'=:='
		    (_cor73,
		     %% Line 88
		     X) ->
	      %% Line 89
	      apply 'peep'/3
		  (Insns, Res, ['moveSelf9'|Lst])
	  %% Line 90
	  <[I = {'move',{'x86_temp',Src,_cor76,_cor77},{'x86_temp',Dst,_cor78,_cor79}}|%% Line 91
										       [{'move',{'x86_temp',_cor80,_cor81,_cor82},{'x86_temp',_cor83,_cor84,_cor85}}|Insns]],%% Line 91
																					     Res,%% Line 91
																						 Lst>
	      when let <_cor86> =
		    call 'erlang':'=:='
			(_cor80, %% Line 91
				 Dst)
		in  let <_cor87> =
			call 'erlang':'=:='
			    (_cor83, %% Line 91
				     Src)
		    in  call 'erlang':'and'
			    (_cor86, _cor87) ->
	      %% Line 92
	      apply 'peep'/3
		  (Insns, [I|Res], ['moveSelf0'|Lst])
	  %% Line 97
	  <[Move = {'move',Src,Dst}|[Alu = {'alu',_cor88,_cor89,_cor90}|Insns]],Res,Lst>
	      when let <_cor91> =
		    call 'erlang':'=:='
			(_cor89, Src)
		in  let <_cor92> =
			call 'erlang':'=:='
			    (_cor90, Dst)
		    in  call 'erlang':'and'
			    (_cor91, _cor92) ->
	      let <_cor5> =
		  %% Line 98
		  call 'erlang':'setelement'
		      (3, Alu, Dst)
	      in  %% Line 98
		  apply 'peep'/3
		      ([_cor5|Insns], [Move|Res], ['elimBinALMDouble'|Lst])
	  %% Line 103
	  <[Move = {'fmove',Src,Dst}|%% Line 104
				     [BinOp = {'fp_binop',_cor97,_cor98,_cor99}|Insns]],%% Line 104
											Res,%% Line 104
											    Lst>
	      when let <_cor100> =
		    call 'erlang':'=:='
			(_cor98, %% Line 104
				 Src)
		in  let <_cor101> =
			call 'erlang':'=:='
			    (_cor99, %% Line 104
				     Dst)
		    in  call 'erlang':'and'
			    (_cor100, _cor101) ->
	      let <_cor8> =
		  %% Line 105
		  call 'erlang':'setelement'
		      (3, BinOp, Dst)
	      in  %% Line 105
		  apply 'peep'/3
		      ([_cor8|Insns], [Move|Res], ['elimFBinDouble'|Lst])
	  %% Line 110
	  <[{'move',Src1,Dst}|%% Line 111
			      [{'alu',Op,Src2,_cor106}|Insns]],%% Line 111
							       Res,%% Line 111
								   Lst>
	      when let <_cor107> =
		    call 'erlang':'=:='
			(_cor106, %% Line 111
				  Dst)
		in  let <_cor108> =
			%% Line 112
			try
			    let <_cor9> =
				call 'erlang':'=:='
				    (Src1, {'x86_imm','undefined'})
			    in  let <_cor10> =
				    call 'erlang':'=/='
					(Src2, {'x86_imm','undefined'})
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    %% Line 113
					    call 'erlang':'=:='
						(Op, 'add')
					in  let <_cor13> =
						%% Line 113
						call 'erlang':'=:='
						    (Op, 'and')
					    in  let <_cor14> =
						    %% Line 113
						    call 'erlang':'or'
							(_cor12, _cor13)
						in  let <_cor15> =
							%% Line 113
							call 'erlang':'=:='
							    (Op, 'or')
						    in  let <_cor16> =
							    %% Line 113
							    call 'erlang':'or'
								(_cor14, _cor15)
							in  let <_cor17> =
								%% Line 113
								call 'erlang':'=:='
								    (Op, 'xor')
							    in  let <_cor18> =
								    %% Line 113
								    call 'erlang':'or'
									(_cor16, _cor17)
								in  call 'erlang':'and'
									(_cor11, _cor18)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor107, _cor108) ->
	      %% Line 114
	      apply 'peep'/3
		  (Insns, [{'alu',Op,Src1,Dst}|%% Line 115
					       [{'move',Src2,Dst}|Res]], %% Line 116
									 ['commuteBinALMD'|Lst])
	  %% Line 121
	  <[C = {'cmp',Src,Dst}|[J = {'jcc',Cond,Lab}|Insns]],Res,Lst> when 'true' ->
	      let <_cor23> =
		  %% Line 122
		  call 'erlang':'=:='
		      (Src, {'x86_imm',0})
	      in  let <_cor22> =
		      %% Line 122
		      call 'erlang':'=:='
			  (Dst, {'x86_imm',0})
		  in  let <_cor24> =
			  %% Line 122
			  call 'erlang':'or'
			      (_cor23, _cor22)
		      in  let <_cor20> =
			      %% Line 123
			      call 'erlang':'=:='
				  (Cond, 'eq')
			  in  let <_cor19> =
				  %% Line 123
				  call 'erlang':'=:='
				      (Cond, 'neq')
			      in  let <_cor21> =
				      %% Line 123
				      call 'erlang':'or'
					  (_cor20, _cor19)
				  in  %% Line 122
				      case call 'erlang':'and'
					       (_cor24, _cor21) of
					%% Line 124
					<'true'> when 'true' ->
					    let <_cor26> =
						%% Line 125
						case Src of
						  <{'x86_imm',0}> when 'true' ->
						      Src
						  <_cor109> when 'true' ->
						      Dst
						end
					    in  let <_cor29> =
						    %% Line 126
						    case Cond of
						      <'eq'> when 'true' ->
							  'z'
						      <'neq'> when 'true' ->
							  'nz'
						      ( <_cor28> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor28})
							-| ['compiler_generated'] )
						    end
						in  let <Test> =
							%% Line 127
							{'test',_cor26,{'x86_imm',0}}
						    in  let <Jump> = {%% Line 128
							     'jcc',_cor29,%% Line 128
									  Lab}
							in  %% Line 129
							    apply 'peep'/3
								(Insns, [Jump|[Test|Res]], ['elimCmp0'|Lst])
					%% Line 130
					<_cor110> when 'true' ->
					    %% Line 131
					    apply 'peep'/3
						(Insns, [J|[C|Res]], Lst)
				      end
	  %% Line 137
	  <[I|Insns],Res,Lst>
	      when let <_cor34> =
		    call 'erlang':'=:='
			(I, {'cmp','undefined','undefined'})
		in  let <_cor35> =
			call 'erlang':'=:='
			    (I, {'test','undefined','undefined'})
		    in  call 'erlang':'or'
			    (_cor34, _cor35) ->
	      %% Line 138
	      case apply 'check'/1
		       (Insns) of
		%% Line 139
		<{'jcc',_cor111,_cor112}> when 'true' ->
		    %% Line 140
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 141
		<{'jmp_fun',_cor113,_cor114}> when 'true' ->
		    %% Line 142
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 143
		<{'jmp_label',_cor115}> when 'true' ->
		    %% Line 144
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 145
		<{'jmp_switch',_cor116,_cor117,_cor118}> when 'true' ->
		    %% Line 146
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 147
		<{'cmovcc',_cor119,_cor120,_cor121}> when 'true' ->
		    %% Line 148
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 149
		<{'ret',_cor122}> when 'true' ->
		    %% Line 150
		    apply 'peep'/3
			(Insns, [I|Res], Lst)
		%% Line 151
		<_cor123> when 'true' ->
		    %% Line 152
		    apply 'peep'/3
			(Insns, Res, ['elimCmpTest'|Lst])
	      end
	  %% Line 158
	  <[{'push',Opr}|[{'pop',_cor124}|Insns]],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor124,
		     Opr) ->
	      %% Line 159
	      apply 'peep'/3
		  (Insns, Res, ['elimPushPop'|Lst])
	  %% Line 164
	  <[{'jcc',_cor125,Lab}|[I = {'label',_cor126}|Insns]],Res,Lst>
	      when call 'erlang':'=:='
		    (_cor126,
		     Lab) ->
	      %% Line 165
	      apply 'peep'/3
		  (Insns, [I|[{'jmp_label',Lab}|Res]], ['elimIFF'|Lst])
	  %% Line 170
	  <[{'move',{'x86_imm',0},Dst}|Insns],Res,Lst>
	      when %% Line 171
		call 'erlang':'=:='
		    (Dst,
		     {'x86_temp','undefined','undefined','undefined'}) ->
	      %% Line 172
	      apply 'peep'/3
		  (Insns, [{'alu','xor',Dst,Dst}|Res], ['elimSet0'|Lst])
	  %% Line 176
	  <[B = {'alu',Op,{'x86_imm',Val},Dst}|Insns],Res,Lst> when 'true' ->
	      %% Line 177
	      case apply 'log2'/1
		       (Val) of
		<{IsLog2,Size,Sign}> when 'true' ->
		    let <_cor39> =
			%% Line 178
			call 'erlang':'=:='
			    (Op, 'imul')
		    in  let <_cor38> =
			    %% Line 178
			    call 'erlang':'=:='
				(Op, 'idiv')
			in  let <_cor40> =
				%% Line 178
				call 'erlang':'or'
				    (_cor39, _cor38)
			    in  %% Line 178
				case call 'erlang':'and'
					 (_cor40, IsLog2) of
				  %% Line 179
				  <'true'> when 'true' ->
				      let <_cor42> =
					  %% Line 180
					  case Sign of
					    <'positive'> when 'true' ->
						'bsl'
					    <'negative'> when 'true' ->
						'bsr'
					    ( <_cor41> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor41})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 181
					  apply 'peep'/3
					      (Insns, %% Line 182
						      [{'shift',_cor42,{'x86_imm',Size},Dst}|Res], %% Line 183
												   ['elimMDPow2'|Lst])
				  %% Line 184
				  <'false'> when 'true' ->
				      %% Line 185
				      apply 'peep'/3
					  (Insns, [B|Res], Lst)
				end
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 199
	  <[I|Insns],Res,Lst> when 'true' ->
	      %% Line 200
	      apply 'peep'/3
		  (Insns, [I|Res], Lst)
	  %% Line 201
	  <[],Res,_X_Lst> when 'true' ->
	      %% Line 202
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor47,_cor46,_cor45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46,_cor45})
		  -| [{'function_name',{'peep',3}}] )
	    -| ['compiler_generated'] )
	end
'trivial_goto_elimination'/1 =
    %% Line 206
    fun (_cor0) ->
	apply 'goto_elim'/2
	    (_cor0, [])
'goto_elim'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'jmp_label',Label}|[I = {'label',_cor4}|Insns]],Res>
	      when call 'erlang':'=:='
		    (_cor4,
		     Label) ->
	      %% Line 209
	      apply 'goto_elim'/2
		  ([I|Insns], Res)
	  %% Line 210
	  <[I|Insns],Res> when 'true' ->
	      %% Line 211
	      apply 'goto_elim'/2
		  (Insns, [I|Res])
	  %% Line 212
	  <[],Res> when 'true' ->
	      %% Line 213
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'goto_elim',2}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_insn_expansion'/1 =
    %% Line 223
    fun (_cor0) ->
	apply 'expand'/2
	    (_cor0, [])
'expand'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Tail],Res> when 'true' ->
	      %% Line 225
	      case I of
		%% Line 226
		<{'pseudo_jcc',Cc,TrueLab,FalseLab,_cor9}> when 'true' ->
		    let <_cor2> =
			%% Line 227
			call 'hipe_x86':'mk_jmp_label'
			    (FalseLab)
		    in  let <_cor3> =
			    %% Line 228
			    call 'hipe_x86':'mk_jcc'
				(Cc, TrueLab)
			in  %% Line 227
			    apply 'expand'/2
				(Tail, [_cor2|%% Line 228
					      [_cor3|Res]])
		%% Line 229
		<{'pseudo_tailcall_prepare'}> when 'true' ->
		    %% Line 230
		    apply 'expand'/2
			(Tail, Res)
		%% Line 231
		<{'pseudo_call',Fun,SDesc,ContLab,Linkage}> when 'true' ->
		    let <_cor4> =
			%% Line 232
			call 'hipe_x86':'mk_jmp_label'
			    (ContLab)
		    in  let <_cor5> =
			    %% Line 233
			    call 'hipe_x86':'mk_call'
				(Fun, SDesc, Linkage)
			in  %% Line 232
			    apply 'expand'/2
				(Tail, [_cor4|%% Line 233
					      [_cor5|Res]])
		%% Line 234
		<_cor10> when 'true' ->
		    %% Line 235
		    apply 'expand'/2
			(Tail, [I|Res])
	      end
	  %% Line 237
	  <[],Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'expand',2}}] )
	    -| ['compiler_generated'] )
	end
'log2'/1 =
    %% Line 242
    fun (_cor0) ->
	apply 'log2'/2
	    (_cor0, 0)
'log2'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_cor9> when 'true' ->
	      {'false',0,'positive'}
	  %% Line 244
	  <Nr,I> when 'true' ->
	      let <_cor2> =
		  %% Line 245
		  call 'erlang':'band'
		      (Nr, 1)
	      in  %% Line 245
		  case <> of
		    %% Line 246
		    <>
			when call 'erlang':'=:='
			      (_cor2,
			       1) ->
			%% Line 247
			case Nr of
			  %% Line 248
			  <1> when 'true' ->
			      %% Line 249
			      {'true',I,'positive'}
			  %% Line 250
			  <-1> when 'true' ->
			      %% Line 251
			      {'true',I,'negative'}
			  %% Line 252
			  <_cor10> when 'true' ->
			      %% Line 253
			      {'false',0,'positive'}
			end
		    %% Line 255
		    <> when 'true' ->
			let <_cor5> =
			    %% Line 256
			    call 'erlang':'bsr'
				(Nr, 1)
			in  let <_cor4> =
				%% Line 256
				call 'erlang':'+'
				    (I, 1)
			    in  %% Line 256
				apply 'log2'/2
				    (_cor5, _cor4)
		  end
	end
'check'/1 =
    %% Line 262
    fun (_cor0) ->
	case _cor0 of
	  <[I|Ins]> when 'true' ->
	      %% Line 263
	      case I of
		%% Line 264
		<{'comment',_cor3}> when 'true' ->
		    %% Line 265
		    apply 'check'/1
			(Ins)
		%% Line 266
		<{'move',_cor4,_cor5}> when 'true' ->
		    %% Line 267
		    apply 'check'/1
			(Ins)
		%% Line 268
		<{'fmove',_cor6,_cor7}> when 'true' ->
		    %% Line 269
		    apply 'check'/1
			(Ins)
		%% Line 270
		<{'movsx',_cor8,_cor9}> when 'true' ->
		    %% Line 271
		    apply 'check'/1
			(Ins)
		%% Line 272
		<{'movzx',_cor10,_cor11}> when 'true' ->
		    %% Line 273
		    apply 'check'/1
			(Ins)
		%% Line 274
		<OtherI> when 'true' ->
		    %% Line 275
		    OtherI
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'check',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_postpass')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_postpass', _cor0)
end