module 'hipe_x86_cfg' ['arity'/1,
		       'bb'/2,
		       'bb_add'/3,
		       'breadthorder'/1,
		       'init'/1,
		       'labels'/1,
		       'linearise'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'params'/1,
		       'postorder'/1,
		       'pred'/2,
		       'redirect_jmp'/3,
		       'reverse_postorder'/1,
		       'start_label'/1,
		       'start_label_update'/2,
		       'succ'/2]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'start_label',1},[{'type',141,'fun',[{'type',141,'product',[{'type',141,'cfg',[]}]}|[{'type',141,'cfg_lbl',[]}]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'start_label_update',2},[{'type',145,'fun',[{'type',145,'product',[{'type',145,'cfg',[]}|[{'type',145,'cfg_lbl',[]}]]}|[{'type',145,'cfg',[]}]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'function',1},[{'type',150,'fun',[{'type',150,'product',[{'type',150,'cfg',[]}]}|[{'type',150,'mfa',[]}]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'is_closure',1},[{'type',153,'fun',[{'type',153,'product',[{'type',153,'cfg',[]}]}|[{'type',153,'boolean',[]}]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'is_leaf',1},[{'type',156,'fun',[{'type',156,'product',[{'type',156,'cfg',[]}]}|[{'type',156,'boolean',[]}]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'other_entrypoints',1},[{'type',216,'fun',[{'type',216,'product',[{'type',216,'cfg',[]}]}|[{'type',216,'list',[{'type',216,'cfg_lbl',[]}]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'remove_duplicates',1},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'list',[{'type',239,'cfg_lbl',[]}]}]}|[{'type',239,'list',[{'type',239,'cfg_lbl',[]}]}]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'remove_duplicates',2},[{'type',243,'fun',[{'type',243,'product',[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}|[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}]]}|[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'none_visited',0},[{'type',537,'fun',[{'type',537,'product',[]}|[{'remote_type',537,[{'atom',537,'gb_sets'}|[{'atom',537,'set'}|[[]]]]}]]}]}]]
'start_label'/1 =
    %% Line 142
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec0
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_label_update'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	%% Line 147
	( case _cor1 of
	    ( <( {'cfg',_cor13,_rec2,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 148
		  case _rec2 of
		    <{'cfg_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(3, _rec2, _cor0)
			in  call 'erlang':'setelement'
				(3, _cor1, _cor7)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','cfg_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'function'/1 =
    %% Line 151
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec7,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec7 of
		      ( <( {'cfg_info',_rec6,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec6
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_closure'/1 =
    %% Line 154
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec9,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec9 of
		      ( <( {'cfg_info',_cor8,_cor9,_rec8,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec8
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_leaf'/1 =
    %% Line 157
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec11,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec11 of
		      ( <( {'cfg_info',_cor8,_cor9,_cor10,_cor11,_rec10,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec10
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'params'/1 =
    %% Line 177
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec14,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec14 of
		      ( <( {'cfg_info',_cor8,_cor9,_cor10,_cor11,_cor12,_rec13,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec13
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bb'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	( case _cor1 of
	    ( <( {'cfg',_rec15,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_2107> =
		      %% Line 230
		      call 'gb_trees':'lookup'
			  (_cor0, _rec15)
		  in  %% Line 230
		      case _2107 of
			%% Line 231
			<{'value',{Block,_X_Succ,_X_Pred}}> when 'true' ->
			    Block
			%% Line 233
			<'none'> when 'true' ->
			    %% Line 234
			    'not_found'
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2107})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_duplicates'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc> when 'true' ->
	      let <_2006> =
		  %% Line 246
		  call 'lists':'member'
		      (H, _cor0)
	      in  let <_cor3> =
		      %% Line 246
		      case _2006 of
			%% Line 247
			<'false'> when 'true' ->
			    [H|_cor0]
			%% Line 248
			<'true'> when 'true' ->
			    _cor0
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2006})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 250
		      apply 'remove_duplicates'/2
			  (T, _cor3)
	  %% Line 251
	  <[],Acc> when 'true' ->
	      %% Line 252
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'remove_duplicates',2}}] )
	    -| ['compiler_generated'] )
	end
'bb_add'/3 =
    %% Line 307
    fun (_cor2,_cor1,_cor0) ->
	let <Last> =
	    %% Line 309
	    call 'hipe_bb':'last'
		(_cor0)
	in  do  let <_288> =
		    %% Line 310
		    apply 'is_branch'/1
			(Last)
		in  %% Line 310
		    case _288 of
		      %% Line 311
		      <'true'> when 'true' ->
			  'ok'
		      %% Line 312
		      <'false'> when 'true' ->
			  call 'erlang':'throw'
			      ({'hipe_x86_cfg',{[66|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[101|[110|[100|[115|[32|[119|[105|[116|[104|[111|[117|[116|[32|[98|[114|[97|[110|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Last}})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_288})
			-| ['compiler_generated'] )
		    end
		let <_cor5> =
		    %% Line 318
		    apply 'branch_successors'/1
			(Last)
		in  let <Succ> =
			apply 'remove_duplicates'/2
			    (_cor5, [])
		    in  %% Line 319
			( case _cor2 of
			    ( <( {'cfg',_rec16,_cor33,_cor34}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_1055> =
				      %% Line 320
				      call 'gb_trees':'lookup'
					  (_cor1, _rec16)
				  in  let <OldSucc,OldPred> =
					  %% Line 320
					  case _1055 of
					    %% Line 321
					    <{'value',{_X_Block,OSucc,OPred}}> when 'true' ->
						%% Line 322
						<OSucc,OPred>
					    %% Line 323
					    <'none'> when 'true' ->
						%% Line 324
						<[],[]>
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_1055})
					      -| ['compiler_generated'] )
					  end
				      in  let <HT1> =
					      %% Line 328
					      call 'gb_trees':'enter'
						  (_cor1, {_cor0,Succ,OldPred}, _rec16)
					  in  let <_cor19> =
						  %% Line 330
						  fun (_cor16,_cor15) ->
						      %% Line 331
						      apply 'add_pred'/3
							  (_cor15, _cor16, _cor1)
					      in  let <_cor14> =
						      %% Line 333
						      call 'erlang':'--'
							  (Succ, OldSucc)
						  in  let <HT2> =
							  %% Line 330
							  call 'lists':'foldl'
							      (_cor19, HT1, _cor14)
						      in  let <_cor26> =
							      %% Line 335
							      fun (_cor23,_cor22) ->
								  %% Line 336
								  apply 'remove_pred'/3
								      (_cor22, _cor23, _cor1)
							  in  let <_cor21> =
								  %% Line 338
								  call 'erlang':'--'
								      (OldSucc, Succ)
							      in  let <HT3> =
								      %% Line 335
								      call 'lists':'foldl'
									  (_cor26, HT2, _cor21)
								  in  %% Line 339
								      call 'erlang':'setelement'
									  (2, _cor2, HT3)
			      -| ['compiler_generated'] )
			    ( <_cor35> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cfg'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'remove_pred'/3 =
    %% Line 341
    fun (_cor2,_cor1,_cor0) ->
	let <_4312> =
	    %% Line 342
	    call 'gb_trees':'lookup'
		(_cor1, _cor2)
	in  %% Line 342
	    case _4312 of
	      %% Line 343
	      <{'value',{Block,Succ,Preds}}> when 'true' ->
		  let <Code> =
		      %% Line 344
		      call 'hipe_bb':'code'
			  (Block)
		  in  let <NewBlock> =
			  %% Line 346
			  call 'hipe_bb':'code_update'
			      (Block, Code)
		      in  let <_cor6> =
			      %% Line 347
			      call 'lists':'delete'
				  (_cor0, Preds)
			  in  %% Line 347
			      call 'gb_trees':'update'
				  (_cor1, {NewBlock,Succ,_cor6}, _cor2)
	      %% Line 348
	      <'none'> when 'true' ->
		  _cor2
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4312})
		-| ['compiler_generated'] )
	    end
'add_pred'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	let <_3235> =
	    %% Line 353
	    call 'gb_trees':'lookup'
		(_cor1, _cor2)
	in  %% Line 353
	    case _3235 of
	      %% Line 354
	      <{'value',{Block,Succ,Preds}}> when 'true' ->
		  let <_cor3> =
		      %% Line 355
		      call 'lists':'delete'
			  (_cor0, Preds)
		  in  %% Line 355
		      call 'gb_trees':'update'
			  (_cor1, {Block,Succ,[_cor0|_cor3]}, _cor2)
	      %% Line 356
	      <'none'> when 'true' ->
		  %% Line 357
		  call 'gb_trees':'insert'
		      (_cor1, {[],[],[_cor0|[]]}, _cor2)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3235})
		-| ['compiler_generated'] )
	    end
'take_bbs'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],CFG> when 'true' ->
	      _cor0
	  %% Line 401
	  <Xs,CFG> when 'true' ->
	      let <Lbl> =
		  %% Line 402
		  call 'erlang':'hd'
		      (_cor1)
	      in  let <_2317> =
		      call 'hipe_x86':'is_label'
			  (Lbl)
		  in  %% Line 403
		      case _2317 of
			%% Line 404
			<'true'> when 'true' ->
			    let <_cor3> =
				%% Line 405
				call 'erlang':'tl'
				    (_cor1)
			    in  let <_3245> =
				    %% Line 405
				    apply 'take_bb'/2
					(_cor3, [])
				in  %% Line 405
				    case _3245 of
				      %% Line 406
				      <{Code,Rest}> when 'true' ->
					  let <_cor5> =
					      call 'hipe_x86':'label_label'
						  (Lbl)
					  in  let <_cor4> =
						  %% Line 407
						  call 'hipe_bb':'mk_bb'
						      (Code)
					      in  let <NewCFG> =
						      %% Line 407
						      apply 'bb_add'/3
							  (_cor0, _cor5, _cor4)
						  in  %% Line 408
						      apply 'take_bbs'/2
							  (Rest, NewCFG)
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_3245})
					-| ['compiler_generated'] )
				    end
			%% Line 410
			<'false'> when 'true' ->
			    %% Line 411
			    call 'erlang':'error'
				({'hipe_x86_cfg',[98|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[100|[111|[101|[115|[110|[39|[116|[32|[115|[116|[97|[114|[116|[32|[119|[105|[116|[104|[32|[97|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor1})
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2317})
			  -| ['compiler_generated'] )
		      end
	end
'take_bb'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Code> when 'true' ->
	      let <_cor2> =
		  %% Line 422
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 422
		  {_cor2,[]}
	  %% Line 423
	  <[X|[Y|Xs]],Code> when 'true' ->
	      let <_4363> =
		  call 'hipe_x86':'is_label'
		      (X)
	      in  %% Line 424
		  case _4363 of
		    %% Line 425
		    <'true'> when 'true' ->
			let <_cor3> =
			    call 'hipe_x86':'label_label'
				(X)
			in  let <_cor4> =
				call 'hipe_x86':'mk_jmp_label'
				    (_cor3)
			    in  %% Line 426
				{[_cor4|[]],[X|[Y|Xs]]}
		    %% Line 427
		    <'false'> when 'true' ->
			let <_4078> =
			    %% Line 428
			    apply 'is_branch'/1
				(X)
			in  %% Line 428
			    case _4078 of
			      %% Line 429
			      <'true'> when 'true' ->
				  let <_1444> =
				      call 'hipe_x86':'is_label'
					  (Y)
				  in  %% Line 430
				      case _1444 of
					%% Line 431
					<'true'> when 'true' ->
					    let <_cor5> =
						%% Line 432
						call 'lists':'reverse'
						    ([X|_cor0])
					    in  %% Line 432
						{_cor5,[Y|Xs]}
					%% Line 433
					<'false'> when 'true' ->
					    let <_cor6> =
						%% Line 436
						call 'lists':'reverse'
						    ([X|_cor0])
					    in  %% Line 436
						{_cor6,[Y|Xs]}
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_1444})
					  -| ['compiler_generated'] )
				      end
			      %% Line 438
			      <'false'> when 'true' ->
				  let <_2565> =
				      call 'hipe_x86':'is_label'
					  (Y)
				  in  %% Line 439
				      case _2565 of
					%% Line 440
					<'true'> when 'true' ->
					    let <_cor8> =
						call 'hipe_x86':'label_label'
						    (Y)
					    in  let <_cor9> =
						    call 'hipe_x86':'mk_jmp_label'
							(_cor8)
						in  let <_cor10> =
							%% Line 441
							call 'lists':'reverse'
							    ([_cor9|[X|_cor0]])
						    in  %% Line 441
							{_cor10,[Y|Xs]}
					%% Line 442
					<'false'> when 'true' ->
					    %% Line 443
					    apply 'take_bb'/2
						([Y|Xs], [X|_cor0])
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_2565})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4078})
				-| ['compiler_generated'] )
			    end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4363})
		      -| ['compiler_generated'] )
		  end
	  %% Line 447
	  <[X|[]],[]> when 'true' ->
	      let <_2667> =
		  call 'hipe_x86':'is_label'
		      (X)
	      in  %% Line 448
		  case _2667 of
		    %% Line 449
		    <'true'> when 'true' ->
			let <_cor14> =
			    call 'hipe_x86':'label_label'
				(X)
			in  let <_cor15> =
				call 'hipe_x86':'mk_jmp_label'
				    (_cor14)
			    in  %% Line 452
				{[X|[_cor15|[]]],[]}
		    %% Line 453
		    <'false'> when 'true' ->
			%% Line 454
			{[X|[]],[]}
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2667})
		      -| ['compiler_generated'] )
		  end
	  %% Line 456
	  <[X|[]],Code> when 'true' ->
	      let <_2702> =
		  call 'hipe_x86':'is_label'
		      (X)
	      in  %% Line 457
		  case _2702 of
		    %% Line 458
		    <'true'> when 'true' ->
			let <_cor19> =
			    %% Line 461
			    call 'lists':'reverse'
				(_cor0)
			in  let <_cor17> =
				call 'hipe_x86':'label_label'
				    (X)
			    in  let <_cor18> =
				    call 'hipe_x86':'mk_jmp_label'
					(_cor17)
				in  %% Line 461
				    {_cor19,[X|[_cor18|[]]]}
		    %% Line 462
		    <'false'> when 'true' ->
			let <_cor20> =
			    %% Line 463
			    call 'lists':'reverse'
				([X|_cor0])
			in  %% Line 463
			    {_cor20,[]}
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2702})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'take_bb',2}}] )
	    -| ['compiler_generated'] )
	end
'labels'/1 =
    %% Line 472
    fun (_cor0) ->
	%% Line 473
	( case _cor0 of
	    ( <( {'cfg',_rec18,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 474
		  call 'gb_trees':'keys'
		      (_rec18)
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'postorder'/1 =
    %% Line 476
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 477
	    apply 'reverse_postorder'/1
		(_cor0)
	in  %% Line 477
	    call 'lists':'reverse'
		(_cor1)
'reverse_postorder'/1 =
    %% Line 479
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor3> =
				call 'hipe_consttab':'referred_labels'
				    (_cor6)
			    in  let <_cor2> =
				    %% Line 539
				    call 'gb_sets':'empty'
					()
				in  let <_2631> =
					%% Line 482
					apply 'depth_search'/4
					    ([_rec0|_cor3], _cor2, _cor0, [])
				    in  %% Line 481
					case _2631 of
					  <{Ordering,_X_Visited}> when 'true' ->
					      Ordering
					  ( <_cor4> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_2631})
					    -| ['compiler_generated'] )
					end
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'depth_search'/4 =
    %% Line 485
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[N|Ns],Visited,CFG,Acc> when 'true' ->
	      let <_3433> =
		  %% Line 545
		  call 'gb_sets':'is_member'
		      (N, _cor2)
	      in  %% Line 486
		  case _3433 of
		    %% Line 487
		    <'true'> when 'true' ->
			%% Line 488
			apply 'depth_search'/4
			    (Ns, _cor2, _cor1, _cor0)
		    %% Line 489
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 490
			    apply 'succ'/2
				(_cor1, N)
			in  let <_cor4> =
				%% Line 542
				call 'gb_sets':'add'
				    (N, _cor2)
			    in  let <_3275> =
				    %% Line 490
				    apply 'depth_search'/4
					(_cor5, _cor4, _cor1, _cor0)
				in  %% Line 490
				    case _3275 of
				      <{Order,Vis}> when 'true' ->
					  %% Line 491
					  apply 'depth_search'/4
					      (Ns, Vis, _cor1, [N|Order])
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_3275})
					-| ['compiler_generated'] )
				    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3433})
		      -| ['compiler_generated'] )
		  end
	  %% Line 493
	  <[],Visited,_cor12,Ordering> when 'true' ->
	      %% Line 494
	      {_cor0,_cor2}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'depth_search',4}}] )
	    -| ['compiler_generated'] )
	end
'breadthorder'/1 =
    %% Line 517
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 518
	    apply 'reverse_breadthorder'/1
		(_cor0)
	in  %% Line 518
	    call 'lists':'reverse'
		(_cor1)
'reverse_breadthorder'/1 =
    %% Line 520
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor2> =
				%% Line 539
				call 'gb_sets':'empty'
				    ()
			    in  let <_1341> =
				    %% Line 522
				    apply 'breadth_list'/4
					([_rec0|[]], _cor2, _cor0, [])
				in  %% Line 522
				    case _1341 of
				      <{Vis,RBO1}> when 'true' ->
					  let <_cor4> =
					      call 'hipe_consttab':'referred_labels'
						  (_cor6)
					  in  let <_3467> =
						  %% Line 523
						  apply 'breadth_list'/4
						      (_cor4, Vis, _cor0, RBO1)
					      in  %% Line 523
						  case _3467 of
						    <{_X_Vis1,RBO2}> when 'true' ->
							RBO2
						    ( <_fol134> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_3467})
						      -| ['compiler_generated'] )
						  end
				      ( <_cor3> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_1341})
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'breadth_list'/4 =
    %% Line 526
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Xs],Vis,CFG,BO> when 'true' ->
	      let <_5434> =
		  %% Line 545
		  call 'gb_sets':'is_member'
		      (X, _cor2)
	      in  %% Line 527
		  case _5434 of
		    %% Line 528
		    <'true'> when 'true' ->
			%% Line 529
			apply 'breadth_list'/4
			    (Xs, _cor2, _cor1, _cor0)
		    %% Line 530
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 531
			    apply 'succ'/2
				(_cor1, X)
			in  let <_cor6> =
				%% Line 531
				call 'erlang':'++'
				    (Xs, _cor5)
			    in  let <_cor4> =
				    %% Line 542
				    call 'gb_sets':'add'
					(X, _cor2)
				in  %% Line 531
				    apply 'breadth_list'/4
					(_cor6, _cor4, _cor1, [X|_cor0])
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5434})
		      -| ['compiler_generated'] )
		  end
	  %% Line 533
	  <[],Vis,_X_CFG,BO> when 'true' ->
	      %% Line 534
	      {_cor2,_cor0}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'breadth_list',4}}] )
	    -| ['compiler_generated'] )
	end
'succ'/2 =
    %% Line 551
    fun (_cor1,_cor0) ->
	%% Line 552
	( case _cor1 of
	    ( <( {'cfg',_rec19,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_2998> =
		      %% Line 553
		      call 'gb_trees':'lookup'
			  (_cor0, _rec19)
		  in  %% Line 553
		      case _2998 of
			%% Line 554
			<{'value',{_X_Block,Succ,_X_Pred}}> when 'true' ->
			    Succ
			%% Line 556
			<'none'> when 'true' ->
			    %% Line 557
			    call 'erlang':'error'
				({[115|[117|[99|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2998})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pred'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	%% Line 562
	( case _cor1 of
	    ( <( {'cfg',_rec20,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_1909> =
		      %% Line 563
		      call 'gb_trees':'lookup'
			  (_cor0, _rec20)
		  in  %% Line 563
		      case _1909 of
			%% Line 564
			<{'value',{_X_Block,_X_Succ,Pred}}> when 'true' ->
			    Pred
			%% Line 566
			<'none'> when 'true' ->
			    %% Line 567
			    call 'erlang':'error'
				({[112|[114|[101|[100|[101|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1909})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fallthrough'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	%% Line 573
	( case _cor1 of
	    ( <( {'cfg',_rec21,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_1005> =
		      %% Line 574
		      call 'gb_trees':'lookup'
			  (_cor0, _rec21)
		  in  %% Line 574
		      case _1005 of
			%% Line 575
			<{'value',{_X_Block,Succ,_cor12}}> when 'true' ->
			    %% Line 576
			    case Succ of
			      %% Line 577
			      <[X|_cor13]> when 'true' ->
				  X
			      %% Line 578
			      <_cor14> when 'true' ->
				  'none'
			    end
			%% Line 580
			<'none'> when 'true' ->
			    %% Line 581
			    call 'erlang':'error'
				({[102|[97|[108|[108|[116|[104|[114|[111|[117|[103|[104|[32|[108|[97|[98|[101|[108|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor0})
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1005})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'conditional'/2 =
    %% Line 584
    fun (_cor1,_cor0) ->
	%% Line 585
	( case _cor1 of
	    ( <( {'cfg',_rec22,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_56> =
		      %% Line 586
		      call 'gb_trees':'lookup'
			  (_cor0, _rec22)
		  in  %% Line 586
		      case _56 of
			<{'value',{_X_Block,Succ,_cor12}}> when 'true' ->
			    %% Line 587
			    case Succ of
			      %% Line 588
			      <[]> when 'true' ->
				  'none'
			      %% Line 589
			      <[_cor13|[]]> when 'true' ->
				  'none'
			      %% Line 590
			      <[_cor14|Labels]> when 'true' ->
				  Labels
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',Succ})
				-| ['compiler_generated'] )
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_56})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'linearize_cfg'/1 =
    %% Line 601
    fun (_cor0) ->
	let <Start> =
	    %% Line 602
	    apply 'start_label'/1
		(_cor0)
	in  let <Vis> =
		call 'gb_sets':'empty'
		    ()
	    in  let <_645> =
		    %% Line 604
		    apply 'lin_succ'/3
			(Start, _cor0, Vis)
		in  %% Line 604
		    case _645 of
		      <{Vis0,NestedCode}> when 'true' ->
			  ( case _cor0 of
			      ( <( {'cfg',_cor3,_cor4,_rec12}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <BlocksInData> =
					%% Line 605
					call 'hipe_consttab':'referred_labels'
					    (_rec12)
				    in  let <AllCode> =
					    %% Line 606
					    apply 'lin_other_entries'/4
						(NestedCode, _cor0, BlocksInData, Vis0)
					in  %% Line 607
					    call 'lists':'flatten'
						(AllCode)
				-| ['compiler_generated'] )
			      ( <_cor5> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','cfg'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_645})
			-| ['compiler_generated'] )
		    end
'lin_succ'/3 =
    %% Line 609
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',_X_CFG,Vis> when 'true' ->
	      %% Line 610
	      {_cor0,[]}
	  %% Line 611
	  <[Label|Labels],CFG,Vis> when 'true' ->
	      let <_238> =
		  %% Line 612
		  apply 'lin_succ'/3
		      (Label, _cor1, _cor0)
	      in  %% Line 612
		  case _238 of
		    <{Vis1,Code1}> when 'true' ->
			let <_1010> =
			    %% Line 613
			    apply 'lin_succ'/3
				(Labels, _cor1, Vis1)
			in  %% Line 613
			    case _1010 of
			      <{Vis2,Code2}> when 'true' ->
				  %% Line 614
				  {Vis2,[Code1|[Code2|[]]]}
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_1010})
				-| ['compiler_generated'] )
			    end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_238})
		      -| ['compiler_generated'] )
		  end
	  %% Line 615
	  <[],_X_CFG,Vis> when 'true' ->
	      %% Line 616
	      {_cor0,[]}
	  %% Line 617
	  <Label,CFG,Vis> when 'true' ->
	      let <_3541> =
		  call 'gb_sets':'is_member'
		      (_cor2, _cor0)
	      in  %% Line 618
		  case _3541 of
		    %% Line 619
		    <'true'> when 'true' ->
			%% Line 620
			{_cor0,[]}
		    %% Line 621
		    <'false'> when 'true' ->
			let <Vis0> =
			    call 'gb_sets':'add'
				(_cor2, _cor0)
			in  let <_2167> =
				%% Line 623
				apply 'bb'/2
				    (_cor1, _cor2)
			    in  %% Line 623
				case _2167 of
				  %% Line 624
				  <'not_found'> when 'true' ->
				      %% Line 625
				      call 'erlang':'error'
					  ({'hipe_x86_cfg',[78|[111|[32|[98|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[119|[105|[116|[104|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]],_cor2})
				  %% Line 626
				  <BB> when 'true' ->
				      let <Fallthrough> =
					  %% Line 627
					  apply 'fallthrough'/2
					      (_cor1, _cor2)
				      in  let <Cond> =
					      %% Line 628
					      apply 'conditional'/2
						  (_cor1, _cor2)
					  in  let <LblInstr> =
						  call 'hipe_x86':'mk_label'
						      (_cor2)
					      in  let <_4125> =
						      %% Line 630
						      apply 'lin_succ'/3
							  (Fallthrough, _cor1, Vis0)
						  in  %% Line 630
						      case _4125 of
							<{Vis1,Code1}> when 'true' ->
							    let <_4343> =
								%% Line 631
								apply 'lin_succ'/3
								    (Cond, _cor1, Vis1)
							    in  %% Line 631
								case _4343 of
								  <{Vis2,Code2}> when 'true' ->
								      let <_cor11> =
									  %% Line 632
									  call 'hipe_bb':'code'
									      (_2167)
								      in  %% Line 632
									  {Vis2,[[LblInstr|_cor11]|[Code1|[Code2|[]]]]}
								  ( <_cor10> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_4343})
								    -| ['compiler_generated'] )
								end
							( <_cor9> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_4125})
							  -| ['compiler_generated'] )
						      end
				end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3541})
		      -| ['compiler_generated'] )
		  end
	end
'lin_other_entries'/4 =
    %% Line 636
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Code,_X_CFG,[],_X_Vis> when 'true' ->
	      _cor3
	  %% Line 638
	  <Code,CFG,[E|Es],Vis> when 'true' ->
	      let <_5242> =
		  %% Line 639
		  apply 'lin_succ'/3
		      (E, _cor2, _cor0)
	      in  %% Line 639
		  case _5242 of
		    <{Vis0,MoreCode}> when 'true' ->
			%% Line 640
			apply 'lin_other_entries'/4
			    ([_cor3|[MoreCode|[]]], _cor2, Es, Vis0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5242})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'lin_other_entries',4}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 40
    fun (_cor0) ->
	let <Code> =
	    %% Line 43
	    call 'hipe_x86':'defun_code'
		(_cor0)
	in  let <_cor2> =
		%% Line 44
		call 'erlang':'hd'
		    (Code)
	    in  let <StartLab> =
		    %% Line 44
		    call 'hipe_x86':'label_label'
			(_cor2)
		in  let <Data> =
			%% Line 45
			call 'hipe_x86':'defun_data'
			    (_cor0)
		    in  let <IsClosure> =
			    %% Line 46
			    call 'hipe_x86':'defun_is_closure'
				(_cor0)
			in  let <MFA> =
				%% Line 47
				call 'hipe_x86':'defun_mfa'
				    (_cor0)
			    in  let <IsLeaf> =
				    %% Line 48
				    call 'hipe_x86':'defun_is_leaf'
					(_cor0)
				in  let <Formals> =
					%% Line 49
					call 'hipe_x86':'defun_formals'
					    (_cor0)
				    in  let <Info> =
					    %% Line 160
					    {'cfg_info',MFA,StartLab,IsClosure,'undefined',IsLeaf,Formals,[]}
					in  let <_cor7> =
						%% Line 165
						call 'gb_trees':'empty'
						    ()
					    in  let <CFG0> =
						    %% Line 165
						    {'cfg',_cor7,Info,Data}
						in  %% Line 51
						    apply 'take_bbs'/2
							(Code, CFG0)
'is_branch'/1 =
    %% Line 53
    fun (_cor0) ->
	%% Line 54
	case _cor0 of
	  %% Line 55
	  <{'jmp_fun',_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 56
	  <{'jmp_label',_cor5}> when 'true' ->
	      'true'
	  %% Line 57
	  <{'jmp_switch',_cor6,_cor7,_cor8}> when 'true' ->
	      'true'
	  %% Line 58
	  <{'pseudo_call',_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      'true'
	  %% Line 59
	  <{'pseudo_jcc',_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      'true'
	  %% Line 60
	  <{'pseudo_tailcall',_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      'true'
	  %% Line 61
	  <{'ret',_cor21}> when 'true' ->
	      'true'
	  %% Line 62
	  <_cor22> when 'true' ->
	      'false'
	end
'branch_successors'/1 =
    %% Line 65
    fun (_cor0) ->
	%% Line 66
	case _cor0 of
	  %% Line 67
	  <{'jmp_fun',_cor4,_cor5}> when 'true' ->
	      []
	  %% Line 68
	  <{'jmp_label',Label}> when 'true' ->
	      [Label|[]]
	  %% Line 69
	  <{'jmp_switch',_cor6,_cor7,Labels}> when 'true' ->
	      Labels
	  %% Line 70
	  <{'pseudo_call',_cor8,{'x86_sdesc',ExnLab,_cor9,_cor10,_cor11},ContLab,_cor12}> when 'true' ->
	      %% Line 71
	      case ExnLab of
		%% Line 72
		<[]> when 'true' ->
		    [ContLab|[]]
		%% Line 73
		<_cor13> when 'true' ->
		    [ContLab|[ExnLab|[]]]
	      end
	  %% Line 75
	  <{'pseudo_jcc',_cor14,TrueLab,FalseLab,_cor15}> when 'true' ->
	      [FalseLab|[TrueLab|[]]]
	  %% Line 76
	  <{'pseudo_tailcall',_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      []
	  %% Line 77
	  <{'ret',_cor20}> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'redirect_jmp'/3 =
    %% Line 84
    fun (_cor2,_cor1,_cor0) ->
	%% Line 85
	case _cor2 of
	  %% Line 86
	  <{'jmp_label',Label}> when 'true' ->
	      %% Line 87
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   Label) ->
		    {'jmp_label',_cor0}
		%% Line 88
		<> when 'true' ->
		    _cor2
	      end
	  %% Line 90
	  <{'pseudo_jcc',_cor16,TrueLab,FalseLab,_cor17}> when 'true' ->
	      let <_cor7> =
		  %% Line 91
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       TrueLab) ->
			call 'erlang':'setelement'
			    (3, _cor2, _cor0)
		    %% Line 92
		    <> when 'true' ->
			_cor2
		  end
	      in  %% Line 94
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       FalseLab) ->
			case _cor7 of
			  <{'pseudo_jcc',_cor23,_cor24,_cor25,_cor26}> when 'true' ->
			      call 'erlang':'setelement'
				  (4, _cor7, _cor0)
			  ( <_cor27> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','pseudo_jcc'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 95
		    <> when 'true' ->
			_cor7
		  end
	  %% Line 98
	  <_cor28> when 'true' ->
	      _cor2
	end
'linearise'/1 =
    %% Line 123
    fun (_cor0) ->
	let <MFA> =
	    %% Line 124
	    apply 'function'/1
		(_cor0)
	in  let <Formals> =
		%% Line 125
		apply 'params'/1
		    (_cor0)
	    in  let <Code> =
		    %% Line 126
		    apply 'linearize_cfg'/1
			(_cor0)
		in  %% Line 167
		    ( case _cor0 of
			( <( {'cfg',_cor3,_cor4,_rec12}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <VarRange> =
				  call 'hipe_gensym':'var_range'
				      ('x86')
			      in  let <LabelRange> =
				      call 'hipe_gensym':'label_range'
					  ('x86')
				  in  let <IsClosure> =
					  apply 'is_closure'/1
					      (_cor0)
				      in  let <IsLeaf> =
					      apply 'is_leaf'/1
						  (_cor0)
					  in  call 'hipe_x86':'mk_defun'
						  (MFA, Formals, IsClosure, IsLeaf, Code, _rec12, VarRange, LabelRange)
			  -| ['compiler_generated'] )
			( <_cor5> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cfg'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'arity'/1 =
    %% Line 135
    fun (_cor0) ->
	let <_2834> =
	    %% Line 136
	    apply 'function'/1
		(_cor0)
	in  %% Line 136
	    case _2834 of
	      <{_X_M,_X_F,A}> when 'true' ->
		  A
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2834})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_cfg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_cfg', _cor0)
end