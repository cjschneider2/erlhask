module 'hipe_arm_assemble' ['assemble'/4,
			    'module_info'/0,
			    'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}],
		%% Line 573
		'type' =
		    %% Line 573
		    [{{'record','previous'},[{'record_field',573,{'atom',573,'set'}}|[{'record_field',573,{'atom',573,'head'}}|[{'record_field',573,{'atom',573,'tail'}}]]],[]}],
		%% Line 608
		'type' =
		    %% Line 608
		    [{{'record','pending'},[{'record_field',608,{'atom',608,'set'}}|[{'record_field',608,{'atom',608,'list'}}|[{'record_field',608,{'atom',608,'firstref'}}]]],[]}]]
'assemble'/4 =
    %% Line 31
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 32
	    apply 'print'/3
		([42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[65|[115|[115|[101|[109|[98|[108|[105|[110|[103|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], _cor0)
	    let <_cor10> =
		%% Line 34
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[%% Line 37
				  {MFA,Defun}|_cor5]> when 'true' ->
				    let <_cor8> =
					%% Line 35
					call 'hipe_arm':'defun_code'
					    (Defun)
				    in  let <_cor7> =
					    %% Line 36
					    call 'hipe_arm':'defun_data'
						(Defun)
					in  let <_cor9> =
						%% Line 37
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{MFA,_cor8,_cor7}|_cor9]
						  -| ['compiler_generated'] )
				( <[_cor4|_cor5]> when 'true' ->
				      %% Line 37
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
	    in  %% Line 39
		case %% Line 40
		     call 'hipe_pack_constants':'pack_constants'
			 (_cor10, 4) of
		  <{ConstAlign,ConstSize,ConstMap,RefsFromConsts}> when 'true' ->
		      let <_cor13> =
			  %% Line 43
			  apply 'translate'/2
			      (_cor10, ConstMap)
		      in  %% Line 42
			  case %% Line 43
			       apply 'encode'/2
				   (_cor13, _cor0) of
			    <{CodeSize,CodeBinary,AccRefs,LabelMap,ExportMap}> when 'true' ->
				do  %% Line 44
				    apply 'print'/3
					([84|[111|[116|[97|[108|[32|[110|[117|[109|[32|[98|[121|[116|[101|[115|[61|[126|[119|[10]]]]]]]]]]]]]]]]]]], [CodeSize|[]], _cor0)
				    let <SC> =
					%% Line 46
					call 'hipe_pack_constants':'slim_constmap'
					    (ConstMap)
				    in  let <DataRelocs> =
					    %% Line 47
					    call 'hipe_pack_constants':'mk_data_relocs'
						(RefsFromConsts, LabelMap)
					in  let <SSE> =
						%% Line 48
						call 'hipe_pack_constants':'slim_sorted_exportmap'
						    (ExportMap, _cor2, _cor1)
					    in  let <SlimRefs> =
						    %% Line 49
						    call 'hipe_pack_constants':'slim_refs'
							(AccRefs)
						in  let <_cor19> =
							%% Line 50
							call 'hipe_bifs':'system_crc'
							    (13615612)
						    in  %% Line 50
							call 'erlang':'term_to_binary'
							    ([{[51|[46|[49|[49]]]],_cor19}|%% Line 51
											   [ConstAlign|[ConstSize|%% Line 52
														  [SC|%% Line 53
														      [DataRelocs|%% Line 54
																  [SSE|%% Line 55
																       [CodeSize|[CodeBinary|[SlimRefs|%% Line 56
																				       [0|[[]]]]]]]]]]]])
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor12})
		    -| ['compiler_generated'] )
		end
'translate'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	%% Line 75
	apply 'translate_mfas'/3
	    (_cor1, _cor0, [])
'translate_mfas'/3 =
    %% Line 77
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,_X_Data}|Code],ConstMap,NewCode> when 'true' ->
	      %% Line 78
	      case apply 'translate_insns'/3
		       (Insns, MFA, ConstMap) of
		<{NewInsns,CodeSize,LabelMap}> when 'true' ->
		    %% Line 79
		    apply 'translate_mfas'/3
			(Code, ConstMap, [{MFA,NewInsns,CodeSize,LabelMap}|NewCode])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 80
	  <[],_X_ConstMap,NewCode> when 'true' ->
	      %% Line 81
	      call 'lists':'reverse'
		  (NewCode)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'translate_mfas',3}}] )
	    -| ['compiler_generated'] )
	end
'translate_insns'/3 =
    %% Line 83
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 84
	    call 'gb_trees':'empty'
		()
	in  let <_cor4> =
		%% Line 85
		apply 'previous_empty'/0
		    ()
	    in  let <_cor3> =
		    %% Line 85
		    apply 'pending_empty'/0
			()
		in  %% Line 84
		    apply 'translate_insns'/8
			(_cor2, _cor1, _cor0, _cor5, 0, [], _cor4, _cor3)
'translate_insns'/8 =
    %% Line 87
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Insns = [I|Is],MFA,ConstMap,LabelMap,Address,NewInsns,PrevImms,PendImms> when 'true' ->
	      let <IsNotFallthroughInsn> =
		  %% Line 88
		  apply 'is_not_fallthrough_insn'/1
		      (I)
	      in  let <MustFlushPending> =
		      %% Line 89
		      apply 'must_flush_pending'/2
			  (PendImms, Address)
		  in  let <NewIs,Insns1,PendImms1,DoFlushPending> =
			  %% Line 91
			  case <MustFlushPending,IsNotFallthroughInsn> of
			    %% Line 92
			    <'true','false'> when 'true' ->
				let <N> =
				    %% Line 96
				    apply 'pending_size'/1
					(PendImms)
				in  let <BranchOffset> =
					%% Line 97
					call 'erlang':'-'
					    (N, 1)
				    in  let <_cor12> =
					    %% Line 98
					    apply 'do_cond'/1
						('al')
					in  let <NewIs0> =
						%% Line 98
						[{'b',{_cor12,{'imm24',BranchOffset}},{'comment','skip'}}|[]]
					    in  %% Line 100
						<NewIs0,Insns,PendImms,'true'>
			    %% Line 101
			    <_cor28,_cor29> when 'true' ->
				%% Line 102
				case apply 'translate_insn'/6
					 (I, MFA, ConstMap, Address, PrevImms, PendImms) of
				  <{NewIs0,PendImms0}> when 'true' ->
				      %% Line 103
				      <NewIs0,Is,PendImms0,IsNotFallthroughInsn>
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor14})
				    -| ['compiler_generated'] )
				end
			  end
		      in  %% Line 105
			  apply 'add_insns'/10
			      (NewIs, Insns1, MFA, ConstMap, LabelMap, Address, NewInsns, PrevImms, PendImms1, DoFlushPending)
	  %% Line 106
	  <[],_X_MFA,_X_ConstMap,LabelMap,Address,NewInsns,PrevImms,PendImms> when 'true' ->
	      %% Line 107
	      case %% Line 108
		   apply 'flush_pending'/5
		       (PendImms, LabelMap, Address, NewInsns, PrevImms) of
		<{LabelMap1,Address1,NewInsns1,_X_PrevImms1}> when 'true' ->
		    let <_cor19> =
			%% Line 109
			call 'lists':'reverse'
			    (NewInsns1)
		    in  %% Line 109
			{_cor19,Address1,LabelMap1}
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'translate_insns',8}}] )
	    -| ['compiler_generated'] )
	end
'add_insns'/10 =
    %% Line 111
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],Insns,MFA,ConstMap,LabelMap,Address,NewInsns,PrevImms,PendImms,DoFlushPending> when 'true' ->
	      let <_cor11> =
		  %% Line 113
		  case I of
		    %% Line 114
		    <{'.label',L,_cor31}> when 'true' ->
			%% Line 115
			call 'gb_trees':'insert'
			    (L, Address, LabelMap)
		    %% Line 116
		    <_cor32> when 'true' ->
			%% Line 117
			LabelMap
		  end
	      in  let <_cor13> =
		      %% Line 119
		      apply 'insn_size'/1
			  (I)
		  in  let <Address1> =
			  %% Line 119
			  call 'erlang':'+'
			      (Address, _cor13)
		      in  %% Line 120
			  apply 'add_insns'/10
			      (Is, Insns, MFA, ConstMap, _cor11, Address1, [I|NewInsns], PrevImms, PendImms, DoFlushPending)
	  %% Line 121
	  <[],Insns,MFA,ConstMap,LabelMap,Address,NewInsns,PrevImms,PendImms,DoFlushPending> when 'true' ->
	      let <LabelMap1,Address1,NewInsns1,PrevImms1,PendImms1> =
		  %% Line 123
		  case DoFlushPending of
		    %% Line 124
		    <'true'> when 'true' ->
			%% Line 125
			case %% Line 126
			     apply 'flush_pending'/5
				 (PendImms, LabelMap, Address, NewInsns, PrevImms) of
			  <{LabelMap0,Address0,NewInsns0,PrevImms0}> when 'true' ->
			      let <_cor16> =
				  %% Line 127
				  apply 'pending_empty'/0
				      ()
			      in  %% Line 127
				  <LabelMap0,Address0,NewInsns0,PrevImms0,_cor16>
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor15})
			    -| ['compiler_generated'] )
			end
		    %% Line 128
		    <'false'> when 'true' ->
			let <PrevImms0> =
			    %% Line 129
			    apply 'expire_previous'/2
				(PrevImms, Address)
			in  %% Line 130
			    <LabelMap,Address,NewInsns,PrevImms0,PendImms>
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 132
		  apply 'translate_insns'/8
		      (Insns, MFA, ConstMap, LabelMap1, Address1, NewInsns1, PrevImms1, PendImms1)
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'add_insns',10}}] )
	    -| ['compiler_generated'] )
	end
'must_flush_pending'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	%% Line 135
	case apply 'pending_firstref'/1
		 (_cor1) of
	  %% Line 136
	  <[]> when 'true' ->
	      'false'
	  %% Line 137
	  <LP0> when 'true' ->
	      let <Distance> =
		  %% Line 138
		  call 'erlang':'-'
		      (_cor0, LP0)
	      in  do  %% Line 147
		      case <> of
			<>
			    when call 'erlang':'=<'
				  (Distance,
				   4096) ->
			    []
			<> when 'true' ->
			    call 'erlang':'exit'
				({'assertion_failed','hipe_arm_assemble',147,[68|[105|[115|[116|[97|[110|[99|[101|[32|[61|[60|[32|[52|[48|[57|[54]]]]]]]]]]]]]]]]})
		      end
		      %% Line 148
		      call 'erlang':'=:='
			  (Distance, 4096)
	end
'flush_pending'/5 =
    %% Line 151
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 152
	    apply 'pending_size'/1
		(_cor4)
	in  let <_cor6> =
		%% Line 152
		call 'erlang':'*'
		    (4, _cor5)
	    in  let <Address1> =
		    %% Line 152
		    call 'erlang':'+'
			(_cor2, _cor6)
		in  let <PrevImms1> =
			%% Line 153
			apply 'expire_previous'/2
			    (_cor0, Address1)
		    in  let <_cor9> =
			    %% Line 155
			    apply 'pending_to_list'/1
				(_cor4)
			in  %% Line 154
			    case %% Line 155
				 apply 'flush_pending2'/5
				     (_cor9, _cor3, _cor2, _cor1, PrevImms1) of
			      <{LabelMap1,_cor17,Insns1,PrevImms2}>
				  when call 'erlang':'=:='
					(_cor17,
					 Address1) ->
				  let <PrevImms3> =
				      %% Line 156
				      apply 'expire_previous'/2
					  (PrevImms2, Address1)
				  in  %% Line 157
				      {LabelMap1,Address1,Insns1,PrevImms3}
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
'flush_pending2'/5 =
    %% Line 159
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Lab,RelocOrInt,Imm}|Imms],LabelMap,Address,Insns,PrevImms> when 'true' ->
	      let <PrevImms1> =
		  %% Line 160
		  apply 'previous_append'/4
		      (PrevImms, Address, Lab, Imm)
	      in  let <LabelMap1> =
		      %% Line 161
		      call 'gb_trees':'insert'
			  (Lab, Address, LabelMap)
		  in  let <RelocOpt,LongVal> =
			  %% Line 163
			  case <> of
			    <>
				when call 'erlang':'is_integer'
				      (RelocOrInt) ->
				%% Line 164
				<[],RelocOrInt>
			    %% Line 165
			    <> when 'true' ->
				%% Line 166
				<[RelocOrInt|[]],0>
			  end
		      in  let <_cor9> =
			      %% Line 170
			      call 'erlang':'++'
				  (RelocOpt, %% Line 171
					     [{'.label',Lab,{'comment',Imm}}|%% Line 172
									     Insns])
			  in  let <Insns1> =
				  %% Line 169
				  [{'.long',LongVal,{'comment',Imm}}|_cor9]
			      in  let <_cor11> =
				      %% Line 173
				      call 'erlang':'+'
					  (Address, 4)
				  in  %% Line 173
				      apply 'flush_pending2'/5
					  (Imms, LabelMap1, _cor11, Insns1, PrevImms1)
	  %% Line 174
	  <[],LabelMap,Address,Insns,PrevImms> when 'true' ->
	      %% Line 175
	      {LabelMap,Address,Insns,PrevImms}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'flush_pending2',5}}] )
	    -| ['compiler_generated'] )
	end
'expire_previous'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	%% Line 178
	case apply 'previous_findmin'/1
		 (_cor1) of
	  %% Line 179
	  <[]> when 'true' ->
	      _cor1
	  %% Line 180
	  <{ImmAddress,_X_Imm}> when 'true' ->
	      %% Line 181
	      case <> of
		<>
		    when try
			  let <_cor2> =
			      call 'erlang':'-'
				  (_cor0, ImmAddress)
			  in  call 'erlang':'>'
				  (_cor2, 4084)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor3> =
			%% Line 182
			apply 'previous_delmin'/1
			    (_cor1)
		    in  %% Line 182
			apply 'expire_previous'/2
			    (_cor3, _cor0)
		%% Line 183
		<> when 'true' ->
		    _cor1
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'is_not_fallthrough_insn'/1 =
    %% Line 188
    fun (_cor0) ->
	%% Line 189
	case _cor0 of
	  %% Line 190
	  <{'b_fun',_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 191
	  <{'b_label','al',_cor5}> when 'true' ->
	      'true'
	  %% Line 194
	  <{'load',_cor6,{'arm_temp',15,Type,_cor7},_cor8}>
	      when call 'erlang':'=/='
		    (Type,
		     'double') ->
	      'true'
	  %% Line 196
	  <{'move',_cor9,_cor10,{'arm_temp',15,Type,_cor11},_cor12}>
	      when call 'erlang':'=/='
		    (Type,
		     'double') ->
	      'true'
	  %% Line 197
	  <_cor13> when 'true' ->
	      'false'
	end
'insn_size'/1 =
    %% Line 200
    fun (_cor0) ->
	%% Line 201
	case _cor0 of
	  %% Line 202
	  <{'.label',_cor3,_cor4}> when 'true' ->
	      0
	  %% Line 203
	  <{'.reloc',_cor5,_cor6}> when 'true' ->
	      0
	  %% Line 204
	  <_cor7> when 'true' ->
	      4
	end
'translate_insn'/6 =
    %% Line 207
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 208
	case _cor5 of
	  %% Line 210
	  <{'pseudo_li',_cor14,_cor15,_cor16}> when 'true' ->
	      apply 'do_pseudo_li'/6
		  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 211
	  <_cor17> when 'true' ->
	      let <_cor6> =
		  apply 'translate_insn'/1
		      (_cor5)
	      in  {_cor6,_cor0}
	end
'translate_insn'/1 =
    %% Line 214
    fun (_cor0) ->
	%% Line 215
	case _cor0 of
	  %% Line 216
	  <{'alu',_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      apply 'do_alu'/1
		  (_cor0)
	  %% Line 217
	  <{'b_fun',_cor8,_cor9}> when 'true' ->
	      apply 'do_b_fun'/1
		  (_cor0)
	  %% Line 218
	  <{'b_label',_cor10,_cor11}> when 'true' ->
	      apply 'do_b_label'/1
		  (_cor0)
	  %% Line 219
	  <{'bl',_cor12,_cor13,_cor14}> when 'true' ->
	      apply 'do_bl'/1
		  (_cor0)
	  %% Line 220
	  <{'blx',_cor15,_cor16}> when 'true' ->
	      apply 'do_blx'/1
		  (_cor0)
	  %% Line 221
	  <{'cmp',_cor17,_cor18,_cor19}> when 'true' ->
	      apply 'do_cmp'/1
		  (_cor0)
	  %% Line 222
	  <{'comment',_cor20}> when 'true' ->
	      []
	  %% Line 223
	  <{'label',_cor21}> when 'true' ->
	      apply 'do_label'/1
		  (_cor0)
	  %% Line 224
	  <{'load',_cor22,_cor23,_cor24}> when 'true' ->
	      apply 'do_load'/1
		  (_cor0)
	  %% Line 225
	  <{'ldrsb',_cor25,_cor26}> when 'true' ->
	      apply 'do_ldrsb'/1
		  (_cor0)
	  %% Line 226
	  <{'move',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      apply 'do_move'/1
		  (_cor0)
	  %% Line 236
	  <{'smull',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      apply 'do_smull'/1
		  (_cor0)
	  %% Line 237
	  <{'store',_cor35,_cor36,_cor37}> when 'true' ->
	      apply 'do_store'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_alu'/1 =
    %% Line 240
    fun (_cor0) ->
	%% Line 241
	case _cor0 of
	  <{'alu',AluOp,S,Dst,Src,Am1}> when 'true' ->
	      let <NewCond> =
		  %% Line 242
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewS> =
		      %% Line 243
		      apply 'do_s'/1
			  (S)
		  in  let <NewDst> =
			  %% Line 244
			  apply 'do_reg'/1
			      (Dst)
		      in  let <NewSrc> =
			      %% Line 245
			      apply 'do_reg'/1
				  (Src)
			  in  let <NewAm1> =
				  %% Line 246
				  apply 'do_am1'/1
				      (Am1)
			      in  %% Line 248
				  let <NewOpnds> =
				      ( {NewCond,NewS,NewDst,NewSrc,NewAm1}
					-| ['compiler_generated'] )
				  in  [{AluOp,NewOpnds,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_b_fun'/1 =
    %% Line 250
    fun (_cor0) ->
	%% Line 251
	case _cor0 of
	  <{'b_fun',Fun,Linkage}> when 'true' ->
	      let <_cor2> =
		  %% Line 253
		  apply 'do_cond'/1
		      ('al')
	      in  %% Line 252
		  [{'.reloc',{'b_fun',Fun,Linkage},{'comment','fun'}}|%% Line 253
								      [{'b',{_cor2,{'imm24',0}},_cor0}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_b_label'/1 =
    %% Line 255
    fun (_cor0) ->
	%% Line 256
	case _cor0 of
	  <{'b_label',Cond,Label}> when 'true' ->
	      let <_cor3> =
		  %% Line 257
		  apply 'do_cond'/1
		      (Cond)
	      in  let <_cor2> =
		      %% Line 257
		      apply 'do_label_ref'/1
			  (Label)
		  in  %% Line 257
		      [{'b',{_cor3,_cor2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_bl'/1 =
    %% Line 259
    fun (_cor0) ->
	%% Line 260
	case _cor0 of
	  <{'bl',Fun,SDesc,Linkage}> when 'true' ->
	      let <_cor2> =
		  %% Line 262
		  apply 'do_cond'/1
		      ('al')
	      in  %% Line 261
		  [{'.reloc',{'b_fun',Fun,Linkage},{'comment','fun'}}|%% Line 262
								      [{'bl',{_cor2,{'imm24',0}},_cor0}|%% Line 263
													[{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|[]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_blx'/1 =
    %% Line 265
    fun (_cor0) ->
	%% Line 266
	case _cor0 of
	  <{'blx',Src,SDesc}> when 'true' ->
	      let <_cor3> =
		  %% Line 267
		  apply 'do_cond'/1
		      ('al')
	      in  let <_cor2> =
		      %% Line 267
		      apply 'do_reg'/1
			  (Src)
		  in  %% Line 267
		      [{'blx',{_cor3,_cor2},_cor0}|%% Line 268
						   [{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_cmp'/1 =
    %% Line 270
    fun (_cor0) ->
	%% Line 271
	case _cor0 of
	  <{'cmp',CmpOp,Src,Am1}> when 'true' ->
	      let <NewCond> =
		  %% Line 272
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewSrc> =
		      %% Line 273
		      apply 'do_reg'/1
			  (Src)
		  in  let <NewAm1> =
			  %% Line 274
			  apply 'do_am1'/1
			      (Am1)
		      in  %% Line 275
			  [{CmpOp,{NewCond,NewSrc,NewAm1},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_label'/1 =
    %% Line 277
    fun (_cor0) ->
	%% Line 278
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      %% Line 279
	      [{'.label',Label,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_load'/1 =
    %% Line 281
    fun (_cor0) ->
	%% Line 282
	case _cor0 of
	  <{'load',LdOp,Dst,Am2}> when 'true' ->
	      let <NewCond> =
		  %% Line 283
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewDst> =
		      %% Line 284
		      apply 'do_reg'/1
			  (Dst)
		  in  let <NewAm2> =
			  %% Line 285
			  apply 'do_am2'/1
			      (Am2)
		      in  %% Line 286
			  [{LdOp,{NewCond,NewDst,NewAm2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_ldrsb'/1 =
    %% Line 288
    fun (_cor0) ->
	%% Line 289
	case _cor0 of
	  <{'ldrsb',Dst,Am3}> when 'true' ->
	      let <NewCond> =
		  %% Line 290
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewDst> =
		      %% Line 291
		      apply 'do_reg'/1
			  (Dst)
		  in  let <NewAm3> =
			  %% Line 292
			  apply 'do_am3'/1
			      (Am3)
		      in  %% Line 293
			  [{'ldrsb',{NewCond,NewDst,NewAm3},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_move'/1 =
    %% Line 295
    fun (_cor0) ->
	%% Line 296
	case _cor0 of
	  <{'move',MovOp,S,Dst,Am1}> when 'true' ->
	      let <NewCond> =
		  %% Line 297
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewS> =
		      %% Line 298
		      apply 'do_s'/1
			  (S)
		  in  let <NewDst> =
			  %% Line 299
			  apply 'do_reg'/1
			      (Dst)
		      in  let <NewAm1> =
			      %% Line 300
			      apply 'do_am1'/1
				  (Am1)
			  in  %% Line 301
			      [{MovOp,{NewCond,NewS,NewDst,NewAm1},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_pseudo_li'/6 =
    %% Line 303
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 304
	case _cor5 of
	  <{'pseudo_li',Dst,Imm,Label0}> when 'true' ->
	      let <Label1,PendImms1> =
		  %% Line 306
		  case apply 'previous_lookup'/2
			   (_cor1, Imm) of
		    %% Line 307
		    <{'value',Lab}> when 'true' ->
			<Lab,_cor0>
		    %% Line 308
		    <'none'> when 'true' ->
			%% Line 309
			case apply 'pending_lookup'/2
				 (_cor0, Imm) of
			  %% Line 310
			  <{'value',Lab}> when 'true' ->
			      <Lab,_cor0>
			  %% Line 311
			  <'none'> when 'true' ->
			      let <_cor11> =
				  %% Line 313
				  case <> of
				    <>
					when call 'erlang':'is_integer'
					      (Imm) ->
					%% Line 316
					Imm
				    %% Line 317
				    <> when 'true' ->
					let <_cor9> =
					    %% Line 319
					    case Imm of
					      %% Line 320
					      <Atom>
						  when call 'erlang':'is_atom'
							(Imm) ->
						  %% Line 321
						  {'load_atom',Atom}
					      %% Line 322
					      <{Label,'constant'}> when 'true' ->
						  let <ConstNo> =
						      %% Line 323
						      call 'hipe_pack_constants':'find_const'
							  ({_cor4,Label}, _cor3)
						  in  %% Line 324
						      {'load_address',{'constant',ConstNo}}
					      %% Line 325
					      <{Label,'closure'}> when 'true' ->
						  %% Line 326
						  {'load_address',{'closure',Label}}
					      %% Line 327
					      <{Label,'c_const'}> when 'true' ->
						  %% Line 328
						  {'load_address',{'c_const',Label}}
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor8})
						-| ['compiler_generated'] )
					    end
					in  %% Line 330
					    {'.reloc',_cor9,{'comment','reloc'}}
				  end
			      in  let <_cor14> =
				      %% Line 333
				      apply 'pending_append'/5
					  (_cor0, _cor2, Label0, _cor11, Imm)
				  in  %% Line 332
				      <Label0,_cor14>
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewDst> =
		      %% Line 336
		      apply 'do_reg'/1
			  (Dst)
		  in  let <_cor20> =
			  %% Line 337
			  apply 'do_label_ref'/1
			      (Label1)
		      in  %% Line 337
			  {[{'.pseudo_li',{NewDst,_cor20},_cor5}|[]],PendImms1}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'do_smull'/1 =
    %% Line 339
    fun (_cor0) ->
	%% Line 340
	case _cor0 of
	  <{'smull',DstLo,DstHi,Src1,Src2}> when 'true' ->
	      let <NewCond> =
		  %% Line 341
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewS> =
		      %% Line 342
		      apply 'do_s'/1
			  ('false')
		  in  let <NewDstLo> =
			  %% Line 343
			  apply 'do_reg'/1
			      (DstLo)
		      in  let <NewDstHi> =
			      %% Line 344
			      apply 'do_reg'/1
				  (DstHi)
			  in  let <NewSrc1> =
				  %% Line 345
				  apply 'do_reg'/1
				      (Src1)
			      in  let <NewSrc2> =
				      %% Line 346
				      apply 'do_reg'/1
					  (Src2)
				  in  %% Line 347
				      [{'smull',{NewCond,NewS,NewDstLo,NewDstHi,NewSrc1,NewSrc2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_store'/1 =
    %% Line 349
    fun (_cor0) ->
	%% Line 350
	case _cor0 of
	  <{'store',StOp,Src,Am2}> when 'true' ->
	      let <NewCond> =
		  %% Line 351
		  apply 'do_cond'/1
		      ('al')
	      in  let <NewSrc> =
		      %% Line 352
		      apply 'do_reg'/1
			  (Src)
		  in  let <NewAm2> =
			  %% Line 353
			  apply 'do_am2'/1
			      (Am2)
		      in  %% Line 354
			  [{StOp,{NewCond,NewSrc,NewAm2},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_reg'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',Reg,Type,_cor8}>
	      when %% Line 357
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Reg)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, Reg)
			in  let <_cor3> =
				call 'erlang':'<'
				    (Reg, 16)
			    in  let <_cor4> =
				    call 'erlang':'=/='
					(Type, 'double')
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor2, _cor5)
					in  call 'erlang':'and'
						(_cor1, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 358
	      {'r',Reg}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'do_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_cond'/1 =
    %% Line 360
    fun (_cor0) ->
	{'cond',_cor0}
'do_s'/1 =
    %% Line 362
    fun (_cor0) ->
	let <_cor2> =
	    case _cor0 of
	      <'false'> when 'true' ->
		  0
	      <'true'> when 'true' ->
		  1
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  {'s',_cor2}
'do_label_ref'/1 =
    %% Line 364
    fun (_cor0) ->
	case _cor0 of
	  <Label>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 365
	      {'label',Label}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'do_label_ref',1}}] )
	    -| ['compiler_generated'] )
	end
'do_am1'/1 =
    %% Line 367
    fun (_cor0) ->
	%% Line 368
	case _cor0 of
	  %% Line 369
	  <{'arm_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'do_reg'/1
		  (_cor0)
	  %% Line 370
	  <{Src1,'rrx'}> when 'true' ->
	      let <_cor1> =
		  apply 'do_reg'/1
		      (Src1)
	      in  {_cor1,'rrx'}
	  %% Line 371
	  <{Src1,ShiftOp,Src2 = {'arm_temp',_cor10,_cor11,_cor12}}> when 'true' ->
	      let <_cor3> =
		  apply 'do_reg'/1
		      (Src1)
	      in  let <_cor2> =
		      apply 'do_reg'/1
			  (Src2)
		  in  {_cor3,{ShiftOp,_cor2}}
	  %% Line 372
	  <{Src1,ShiftOp,Imm5}> when 'true' ->
	      let <_cor4> =
		  apply 'do_reg'/1
		      (Src1)
	      in  {_cor4,{ShiftOp,{'imm5',Imm5}}}
	  %% Line 373
	  <{Imm8,Imm4}> when 'true' ->
	      {{'imm8',Imm8},{'imm4',Imm4}}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'do_am2'/1 =
    %% Line 376
    fun (_cor0) ->
	case _cor0 of
	  <{'am2',Src,Sign,Offset}> when 'true' ->
	      let <NewSrc> =
		  %% Line 377
		  apply 'do_reg'/1
		      (Src)
	      in  %% Line 378
		  case Offset of
		    %% Line 379
		    <{'arm_temp',_cor7,_cor8,_cor9}> when 'true' ->
			let <_cor2> =
			    apply 'do_reg'/1
				(Offset)
			in  {'register_offset',NewSrc,Sign,_cor2}
		    %% Line 380
		    <{Src3,'rrx'}> when 'true' ->
			let <_cor3> =
			    apply 'do_reg'/1
				(Src3)
			in  {'scaled_register_offset',NewSrc,Sign,_cor3,'rrx'}
		    %% Line 381
		    <{Src3,ShiftOp,Imm5}> when 'true' ->
			let <_cor4> =
			    apply 'do_reg'/1
				(Src3)
			in  {'scaled_register_offset',NewSrc,Sign,_cor4,{ShiftOp,{'imm5',Imm5}}}
		    %% Line 382
		    <Imm12> when 'true' ->
			{'immediate_offset',NewSrc,Sign,{'imm12',Imm12}}
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'do_am2',1}}] )
	    -| ['compiler_generated'] )
	end
'do_am3'/1 =
    %% Line 385
    fun (_cor0) ->
	case _cor0 of
	  <{'am3',Src,Sign,Offset}> when 'true' ->
	      let <NewSrc> =
		  %% Line 386
		  apply 'do_reg'/1
		      (Src)
	      in  %% Line 387
		  case Offset of
		    %% Line 388
		    <{'arm_temp',_cor5,_cor6,_cor7}> when 'true' ->
			let <_cor2> =
			    apply 'do_reg'/1
				(Offset)
			in  {'register_offset',NewSrc,Sign,_cor2}
		    %% Line 389
		    <_cor8> when 'true' ->
			{'immediate_offset',NewSrc,Sign,{'imm8',Offset}}
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'do_am3',1}}] )
	    -| ['compiler_generated'] )
	end
'encode'/2 =
    %% Line 402
    fun (_cor1,_cor0) ->
	let <CodeSize> =
	    %% Line 403
	    apply 'compute_code_size'/2
		(_cor1, 0)
	in  let <ExportMap> =
		%% Line 404
		apply 'build_export_map'/3
		    (_cor1, 0, [])
	    in  %% Line 405
		case apply 'encode_mfas'/5
			 (_cor1, 0, [], [], _cor0) of
		  <{AccCode,Relocs}> when 'true' ->
		      let <_cor5> =
			  %% Line 406
			  call 'lists':'reverse'
			      (AccCode)
		      in  let <CodeBinary> =
			      %% Line 406
			      call 'erlang':'list_to_binary'
				  (_cor5)
			  in  do  %% Line 407
				  case <> of
				    <>
					when try
					      let <_cor7> =
						  call 'erlang':'byte_size'
						      (CodeBinary)
					      in  call 'erlang':'=:='
						      (CodeSize, _cor7)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_arm_assemble',407,[67|[111|[100|[101|[83|[105|[122|[101|[32|[61|[58|[61|[32|[98|[121|[116|[101|[95|[115|[105|[122|[101|[32|[40|[32|[67|[111|[100|[101|[66|[105|[110|[97|[114|[121|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				  end
				  let <_cor8> =
				      %% Line 408
				      call 'gb_trees':'empty'
					  ()
				  in  let <CombinedLabelMap> =
					  %% Line 408
					  apply 'combine_label_maps'/3
					      (_cor1, 0, _cor8)
				      in  %% Line 409
					  {CodeSize,CodeBinary,Relocs,CombinedLabelMap,ExportMap}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'compute_code_size'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_MFA,_X_Insns,CodeSize,_X_LabelMap}|Code],Size> when 'true' ->
	      let <_cor2> =
		  %% Line 412
		  call 'erlang':'+'
		      (Size, CodeSize)
	      in  %% Line 412
		  apply 'compute_code_size'/2
		      (Code, _cor2)
	  %% Line 413
	  <[],Size> when 'true' ->
	      Size
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'compute_code_size',2}}] )
	    -| ['compiler_generated'] )
	end
'build_export_map'/3 =
    %% Line 415
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{M,F,A},_X_Insns,CodeSize,_X_LabelMap}|Code],Address,ExportMap> when 'true' ->
	      let <_cor3> =
		  %% Line 416
		  call 'erlang':'+'
		      (Address, CodeSize)
	      in  %% Line 416
		  apply 'build_export_map'/3
		      (Code, _cor3, [{Address,M,F,A}|ExportMap])
	  %% Line 417
	  <[],_X_Address,ExportMap> when 'true' ->
	      ExportMap
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'build_export_map',3}}] )
	    -| ['compiler_generated'] )
	end
'combine_label_maps'/3 =
    %% Line 419
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,_X_Insns,CodeSize,LabelMap}|Code],Address,CLM> when 'true' ->
	      let <_cor3> =
		  %% Line 420
		  call 'gb_trees':'to_list'
		      (LabelMap)
	      in  let <NewCLM> =
		      %% Line 420
		      apply 'merge_label_map'/4
			  (_cor3, MFA, Address, CLM)
		  in  let <_cor5> =
			  %% Line 421
			  call 'erlang':'+'
			      (Address, CodeSize)
		      in  %% Line 421
			  apply 'combine_label_maps'/3
			      (Code, _cor5, NewCLM)
	  %% Line 422
	  <[],_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'combine_label_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_label_map'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,Offset}|Rest],MFA,Address,CLM> when 'true' ->
	      let <_cor4> =
		  %% Line 425
		  call 'erlang':'+'
		      (Address, Offset)
	      in  let <NewCLM> =
		      %% Line 425
		      call 'gb_trees':'insert'
			  ({MFA,Label}, _cor4, CLM)
		  in  %% Line 426
		      apply 'merge_label_map'/4
			  (Rest, MFA, Address, NewCLM)
	  %% Line 427
	  <[],_X_MFA,_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge_label_map',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_mfas'/5 =
    %% Line 429
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,CodeSize,LabelMap}|Code],Address,AccCode,Relocs,Options> when 'true' ->
	      do  %% Line 430
		  apply 'print'/3
		      ([71|[101|[110|[101|[114|[97|[116|[105|[110|[103|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]], [MFA|[]], Options)
		  do  %% Line 431
		      apply 'print'/3
			  ([79|[102|[102|[115|[101|[116|[32|[32|[32|[124|[32|[79|[112|[99|[111|[100|[101|[32|[32|[32|[124|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], Options)
		      %% Line 432
		      case %% Line 433
			   apply 'encode_insns'/7
			       (Insns, Address, Address, LabelMap, Relocs, AccCode, Options) of
			<{Address1,Relocs1,AccCode1}> when 'true' ->
			    let <ExpectedAddress> =
				%% Line 434
				call 'erlang':'+'
				    (Address, CodeSize)
			    in  do  %% Line 435
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Address1,
						 ExpectedAddress) ->
					  []
				      <> when 'true' ->
					  call 'erlang':'exit'
					      ({'assertion_failed','hipe_arm_assemble',435,[65|[100|[100|[114|[101|[115|[115|[49|[32|[61|[58|[61|[32|[69|[120|[112|[101|[99|[116|[101|[100|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				    end
				    do  %% Line 436
					apply 'print'/3
					    ([70|[105|[110|[105|[115|[104|[101|[100|[46|[10]]]]]]]]]], [], Options)
					%% Line 437
					apply 'encode_mfas'/5
					    (Code, Address1, AccCode1, Relocs1, Options)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 438
	  <[],_X_Address,AccCode,Relocs,_X_Options> when 'true' ->
	      %% Line 439
	      {AccCode,Relocs}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'encode_mfas',5}}] )
	    -| ['compiler_generated'] )
	end
'encode_insns'/7 =
    %% Line 441
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Address,FunAddress,LabelMap,Relocs,AccCode,Options> when 'true' ->
	      %% Line 442
	      case I of
		%% Line 443
		<{'.label',L,_cor26}> when 'true' ->
		    let <_cor7> =
			%% Line 444
			call 'gb_trees':'get'
			    (L, LabelMap)
		    in  let <LabelAddress> =
			    %% Line 444
			    call 'erlang':'+'
				(_cor7, FunAddress)
			in  do  %% Line 445
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Address,
					     LabelAddress) ->
				      []
				  <> when 'true' ->
				      call 'erlang':'exit'
					  ({'assertion_failed','hipe_arm_assemble',445,[65|[100|[100|[114|[101|[115|[115|[32|[61|[58|[61|[32|[76|[97|[98|[101|[108|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]})
				end
				do  %% Line 446
				    apply 'print_insn'/4
					(Address, [], I, Options)
				    %% Line 447
				    apply 'encode_insns'/7
					(Insns, Address, FunAddress, LabelMap, Relocs, AccCode, Options)
		%% Line 448
		<{'.reloc',Data,_cor27}> when 'true' ->
		    do  %% Line 449
			apply 'print_insn'/4
			    (Address, [], I, Options)
			let <Reloc> =
			    %% Line 450
			    apply 'encode_reloc'/4
				(Data, Address, FunAddress, LabelMap)
			in  %% Line 451
			    apply 'encode_insns'/7
				(Insns, Address, FunAddress, LabelMap, [Reloc|Relocs], AccCode, Options)
		%% Line 452
		<{'.long',Value,_cor28}> when 'true' ->
		    do  %% Line 453
			apply 'print_insn'/4
			    (Address, Value, I, Options)
			let <Segment> =
			    %% Line 454
			    #{#<Value>(32,1,'integer',['unsigned'|['native']])}#
			in  let <NewAccCode> =
				%% Line 455
				[Segment|AccCode]
			    in  let <_cor12> =
				    %% Line 456
				    call 'erlang':'+'
					(Address, 4)
				in  %% Line 456
				    apply 'encode_insns'/7
					(Insns, _cor12, FunAddress, LabelMap, Relocs, NewAccCode, Options)
		%% Line 457
		<_cor29> when 'true' ->
		    %% Line 458
		    case apply 'fix_pc_refs'/4
			     (I, Address, FunAddress, LabelMap) of
		      <{Op,Arg,_cor30}> when 'true' ->
			  let <Word> =
			      %% Line 459
			      call 'hipe_arm_encode':'insn_encode'
				  (Op, Arg)
			  in  do  %% Line 460
				  apply 'print_insn'/4
				      (Address, Word, I, Options)
				  let <Segment> =
				      %% Line 461
				      #{#<Word>(32,1,'integer',['unsigned'|['native']])}#
				  in  let <NewAccCode> =
					  %% Line 462
					  [Segment|AccCode]
				      in  let <_cor17> =
					      %% Line 463
					      call 'erlang':'+'
						  (Address, 4)
					  in  %% Line 463
					      apply 'encode_insns'/7
						  (Insns, _cor17, FunAddress, LabelMap, Relocs, NewAccCode, Options)
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 465
	  <[],Address,_X_FunAddress,_X_LabelMap,Relocs,AccCode,_X_Options> when 'true' ->
	      %% Line 466
	      {Address,Relocs,AccCode}
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'encode_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'encode_reloc'/4 =
    %% Line 468
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 469
	case _cor3 of
	  %% Line 470
	  <{'b_fun',MFAorPrim,Linkage}> when 'true' ->
	      let <_cor5> =
		  %% Line 474
		  case Linkage of
		    %% Line 475
		    <'remote'> when 'true' ->
			2
		    %% Line 476
		    <'not_remote'> when 'true' ->
			3
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 478
		      apply 'untag_mfa_or_prim'/1
			  (MFAorPrim)
		  in  %% Line 478
		      {_cor5,_cor2,_cor7}
	  %% Line 479
	  <{'load_atom',Atom}> when 'true' ->
	      %% Line 480
	      {0,_cor2,Atom}
	  %% Line 481
	  <{'load_address',X}> when 'true' ->
	      %% Line 482
	      {1,_cor2,X}
	  %% Line 483
	  <{'sdesc',SDesc}> when 'true' ->
	      %% Line 484
	      case SDesc of
		<{'arm_sdesc',ExnLab,FSize,Arity,Live}> when 'true' ->
		    let <_cor11> =
			%% Line 486
			case ExnLab of
			  %% Line 487
			  <[]> when 'true' ->
			      []
			  %% Line 488
			  <_cor18> when 'true' ->
			      let <_cor9> =
				  call 'gb_trees':'get'
				      (ExnLab, _cor0)
			      in  call 'erlang':'+'
				      (_cor9, _cor1)
			end
		    in  %% Line 490
			{4,_cor2,%% Line 491
				 {_cor11,FSize,Arity,Live}}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'untag_mfa_or_prim'/1 =
    %% Line 494
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_mfa',M,F,A}> when 'true' ->
	      {M,F,A}
	  %% Line 495
	  <{'arm_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'untag_mfa_or_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_pc_refs'/4 =
    %% Line 497
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 498
	case _cor3 of
	  %% Line 499
	  <{'b',{Cond,{'label',L}},OrigI}> when 'true' ->
	      let <_cor4> =
		  %% Line 500
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 500
		      call 'erlang':'+'
			  (_cor4, _cor1)
		  in  let <_cor6> =
			  %% Line 501
			  call 'erlang':'+'
			      (_cor2, 8)
		      in  let <_cor7> =
			      %% Line 501
			      call 'erlang':'-'
				  (LabelAddress, _cor6)
			  in  let <Imm24> =
				  %% Line 501
				  call 'erlang':'div'
				      (_cor7, 4)
			      in  do  %% Line 503
				      case <> of
					<>
					    when call 'erlang':'=<'
						  (Imm24,
						   8388607) ->
					    []
					<> when 'true' ->
					    call 'erlang':'exit'
						({'assertion_failed','hipe_arm_assemble',503,[73|[109|[109|[50|[52|[32|[61|[60|[32|[56|[51|[56|[56|[54|[48|[55]]]]]]]]]]]]]]]]})
				      end
				      do  %% Line 504
					  case <> of
					    <>
						when call 'erlang':'>='
						      (Imm24,
						       -8388608) ->
						[]
					    <> when 'true' ->
						call 'erlang':'exit'
						    ({'assertion_failed','hipe_arm_assemble',504,[73|[109|[109|[50|[52|[32|[62|[61|[32|[45|[32|[40|[32|[56|[51|[56|[56|[54|[48|[56|[32|[41]]]]]]]]]]]]]]]]]]]]]]})
					  end
					  let <_cor10> =
					      %% Line 505
					      call 'erlang':'band'
						  (Imm24, 16777215)
					  in  %% Line 505
					      {'b',{Cond,{'imm24',_cor10}},OrigI}
	  %% Line 506
	  <{'.pseudo_li',{Dst,{'label',L}},OrigI}> when 'true' ->
	      let <_cor11> =
		  %% Line 507
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 507
		      call 'erlang':'+'
			  (_cor11, _cor1)
		  in  let <_cor13> =
			  %% Line 508
			  call 'erlang':'+'
			      (_cor2, 8)
		      in  let <Offset> =
			      %% Line 508
			      call 'erlang':'-'
				  (LabelAddress, _cor13)
			  in  let <Sign,Imm12> =
				  %% Line 510
				  case <> of
				    <>
					when call 'erlang':'<'
					      (Offset,
					       0) ->
					let <_cor15> =
					    call 'erlang':'-'
						(Offset)
					in  <'-',_cor15>
				    %% Line 511
				    <> when 'true' ->
					<'+',Offset>
				  end
			      in  do  %% Line 513
				      case <> of
					<>
					    when call 'erlang':'=<'
						  (Imm12,
						   4095) ->
					    []
					<> when 'true' ->
					    call 'erlang':'exit'
						({'assertion_failed','hipe_arm_assemble',513,[73|[109|[109|[49|[50|[32|[61|[60|[32|[52|[48|[57|[53]]]]]]]]]]]]]})
				      end
				      let <Am2> =
					  %% Line 514
					  {'immediate_offset',{'r',15},Sign,{'imm12',Imm12}}
				      in  let <_cor19> =
					      %% Line 515
					      apply 'do_cond'/1
						  ('al')
					  in  %% Line 515
					      {'ldr',{_cor19,Dst,Am2},OrigI}
	  %% Line 516
	  <_cor25> when 'true' ->
	      _cor3
	end
'print'/3 =
    %% Line 525
    fun (_cor2,_cor1,_cor0) ->
	%% Line 526
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      call 'io':'format'
		  (_cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'print_insn'/4 =
    %% Line 528
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 529
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      apply 'print_insn_2'/3
		  (_cor3, _cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'print_insn_2'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Address,Word,{NewI,NewArgs,OrigI}> when 'true' ->
	      do  %% Line 532
		  call 'io':'format'
		      ([126|[56|[46|[49|[54|[46|[48|[98|[32|[124|[32]]]]]]]]]]], [Address|[]])
		  let <_cor3> =
		      %% Line 533
		      apply 'word_to_bytes'/1
			  (Word)
		  in  do  %% Line 533
			  apply 'print_code_list'/2
			      (_cor3, 0)
			  %% Line 534
			  case NewI of
			    %% Line 535
			    <'.long'> when 'true' ->
				%% Line 536
				call 'io':'format'
				    ([9|[46|[108|[111|[110|[103|[32|[126|[46|[49|[54|[120|[10]]]]]]]]]]]]], [Word|[[48|[120]]]])
			    %% Line 537
			    <'.reloc'> when 'true' ->
				%% Line 538
				call 'io':'format'
				    ([9|[46|[114|[101|[108|[111|[99|[32|[126|[119|[10]]]]]]]]]]], [NewArgs|[]])
			    %% Line 539
			    <_cor8> when 'true' ->
				%% Line 540
				call 'hipe_arm_pp':'pp_insn'
				    (OrigI)
			  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'print_insn_2',3}}] )
	    -| ['compiler_generated'] )
	end
'word_to_bytes'/1 =
    %% Line 543
    fun (_cor0) ->
	%% Line 544
	case _cor0 of
	  %% Line 545
	  <[]> when 'true' ->
	      []
	  %% Line 546
	  <_cor10> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'bsr'
		      (_cor0, 24)
	      in  let <_cor2> =
		      call 'erlang':'band'
			  (_cor1, 255)
		  in  let <_cor3> =
			  call 'erlang':'bsr'
			      (_cor0, 16)
		      in  let <_cor4> =
			      call 'erlang':'band'
				  (_cor3, 255)
			  in  let <_cor5> =
				  %% Line 547
				  call 'erlang':'bsr'
				      (_cor0, 8)
			      in  let <_cor6> =
				      %% Line 547
				      call 'erlang':'band'
					  (_cor5, 255)
				  in  let <_cor7> =
					  %% Line 547
					  call 'erlang':'band'
					      (_cor0, 255)
				      in  [_cor2|[_cor4|%% Line 547
							[_cor6|[_cor7|[]]]]]
	end
'print_code_list'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Byte|Rest],Len> when 'true' ->
	      do  %% Line 551
		  apply 'print_byte'/1
		      (Byte)
		  let <_cor2> =
		      %% Line 552
		      call 'erlang':'+'
			  (Len, 1)
		  in  %% Line 552
		      apply 'print_code_list'/2
			  (Rest, _cor2)
	  %% Line 553
	  <[],Len> when 'true' ->
	      let <_cor3> =
		  %% Line 554
		  call 'erlang':'*'
		      (Len, 2)
	      in  let <_cor4> =
		      %% Line 554
		      call 'erlang':'-'
			  (8, _cor3)
		  in  do  %% Line 554
			  apply 'fill_spaces'/1
			      (_cor4)
			  %% Line 555
			  call 'io':'format'
			      ([32|[124|[32]]])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'print_code_list',2}}] )
	    -| ['compiler_generated'] )
	end
'print_byte'/1 =
    %% Line 557
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 558
	    call 'erlang':'band'
		(_cor0, 255)
	in  %% Line 558
	    call 'io':'format'
		([126|[50|[46|[49|[54|[46|[48|[98]]]]]]]], [_cor1|[]])
'fill_spaces'/1 =
    %% Line 560
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      do  %% Line 561
		  call 'io':'format'
		      ([32])
		  let <_cor1> =
		      %% Line 562
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 562
		      apply 'fill_spaces'/1
			  (_cor1)
	  %% Line 563
	  <0> when 'true' ->
	      %% Line 564
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fill_spaces',1}}] )
	    -| ['compiler_generated'] )
	end
'previous_empty'/0 =
    %% Line 575
    fun () ->
	let <_cor0> =
	    call 'gb_trees':'empty'
		()
	in  {'previous',_cor0,[],[]}
'previous_lookup'/2 =
    %% Line 577
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'previous',S,_cor4,_cor5},Imm> when 'true' ->
	      call 'gb_trees':'lookup'
		  (Imm, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'previous_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'previous_findmin'/1 =
    %% Line 579
    fun (_cor0) ->
	case _cor0 of
	  <{'previous',_cor3,H,_cor4}> when 'true' ->
	      %% Line 580
	      case H of
		%% Line 581
		<[X|_cor5]> when 'true' ->
		    X
		%% Line 582
		<_cor6> when 'true' ->
		    []
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'previous_findmin',1}}] )
	    -| ['compiler_generated'] )
	end
'previous_delmin'/1 =
    %% Line 585
    fun (_cor0) ->
	case _cor0 of
	  <{'previous',S,[{_X_Address,Imm}|H],T}> when 'true' ->
	      let <NewH,NewT> =
		  %% Line 587
		  case H of
		    %% Line 588
		    <[]> when 'true' ->
			let <_cor1> =
			    call 'lists':'reverse'
				(T)
			in  <_cor1,[]>
		    %% Line 589
		    <_cor7> when 'true' ->
			<H,T>
		  end
	      in  let <_cor5> =
		      %% Line 591
		      call 'gb_trees':'delete'
			  (Imm, S)
		  in  %% Line 591
		      {'previous',_cor5,NewH,NewT}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'previous_delmin',1}}] )
	    -| ['compiler_generated'] )
	end
'previous_append'/4 =
    %% Line 593
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'previous',S,H,T},Address,Lab,Imm> when 'true' ->
	      let <NewH,NewT> =
		  %% Line 595
		  case H of
		    %% Line 596
		    <[]> when 'true' ->
			<[{Address,Imm}|[]],[]>
		    %% Line 597
		    <_cor12> when 'true' ->
			<H,[{Address,Imm}|T]>
		  end
	      in  let <_cor7> =
		      %% Line 599
		      call 'gb_trees':'insert'
			  (Imm, Lab, S)
		  in  %% Line 599
		      {'previous',_cor7,NewH,NewT}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'previous_append',4}}] )
	    -| ['compiler_generated'] )
	end
'pending_empty'/0 =
    %% Line 610
    fun () ->
	let <_cor0> =
	    call 'gb_trees':'empty'
		()
	in  {'pending',_cor0,[],[]}
'pending_to_list'/1 =
    %% Line 612
    fun (_cor0) ->
	case _cor0 of
	  <{'pending',_cor2,L,_cor3}> when 'true' ->
	      call 'lists':'reverse'
		  (L)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pending_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'pending_lookup'/2 =
    %% Line 614
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'pending',S,_cor4,_cor5},Imm> when 'true' ->
	      call 'gb_trees':'lookup'
		  (Imm, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pending_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'pending_firstref'/1 =
    %% Line 616
    fun (_cor0) ->
	case _cor0 of
	  <{'pending',_cor2,_cor3,F}> when 'true' ->
	      F
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pending_firstref',1}}] )
	    -| ['compiler_generated'] )
	end
'pending_append'/5 =
    %% Line 618
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'pending',S,L,F},Address,Lab,RelocOrInt,Imm> when 'true' ->
	      let <_cor7> =
		  %% Line 619
		  call 'gb_trees':'insert'
		      (Imm, Lab, S)
	      in  let <_cor6> =
		      %% Line 621
		      case F of
			<[]> when 'true' ->
			    Address
			<_cor13> when 'true' ->
			    F
		      end
		  in  %% Line 619
		      {'pending',_cor7,%% Line 620
				       [{Lab,RelocOrInt,Imm}|L],_cor6}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pending_append',5}}] )
	    -| ['compiler_generated'] )
	end
'pending_size'/1 =
    %% Line 623
    fun (_cor0) ->
	case _cor0 of
	  <{'pending',_cor2,L,_cor3}> when 'true' ->
	      call 'erlang':'length'
		  (L)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pending_size',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_assemble')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_assemble', _cor0)
end