module 'hipe_amd64_assemble' ['assemble'/4,
			      'module_info'/0,
			      'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','sdi_info'},[{'typed_record_field',{'record_field',23,{'atom',23,'lb'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'integer',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'ub'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'incr'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'byte',[]}]]}}]]],[]}]]
'assemble'/4 =
    %% Line 61
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 62
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([120|[56|[54|[32|[97|[115|[115|[101|[109|[98|[108|[101|[114]]]]]]]]]]]]], 'hipe_amd64_assemble')
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	    do  %% Line 63
		apply 'print'/3
		    ([42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[65|[115|[115|[101|[109|[98|[108|[105|[110|[103|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], _cor0)
		let <_cor11> =
		    %% Line 65
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor7) ->
				  case _cor7 of
				    <[%% Line 68
				      {MFA,Defun}|_cor6]> when 'true' ->
					let <_cor9> =
					    %% Line 66
					    call 'hipe_x86':'defun_code'
						(Defun)
					in  let <_cor8> =
						%% Line 67
						call 'hipe_x86':'defun_data'
						    (Defun)
					    in  let <_cor10> =
						    %% Line 68
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [{MFA,_cor9,_cor8}|_cor10]
						      -| ['compiler_generated'] )
				    ( <[_cor5|_cor6]> when 'true' ->
					  %% Line 68
					  apply 'lc$^0'/1
					      (_cor6)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor3)
		      -| ['list_comprehension'] )
		in  let <_cor13> =
			%% Line 71
			call 'hipe_amd64_registers':'alignment'
			    ()
		    in  %% Line 70
			case %% Line 71
			     call 'hipe_pack_constants':'pack_constants'
				 (_cor11, _cor13) of
			  <{ConstAlign,ConstSize,ConstMap,RefsFromConsts}> when 'true' ->
			      let <_cor15> =
				  %% Line 74
				  apply 'translate'/3
				      (_cor11, ConstMap, _cor0)
			      in  %% Line 73
				  case %% Line 74
				       apply 'encode'/2
					   (_cor15, _cor0) of
				    <{CodeSize,CodeBinary,AccRefs,LabelMap,ExportMap}> when 'true' ->
					do  %% Line 75
					    apply 'print'/3
						([84|[111|[116|[97|[108|[32|[110|[117|[109|[32|[98|[121|[116|[101|[115|[61|[126|[119|[10]]]]]]]]]]]]]]]]]]], [CodeSize|[]], _cor0)
					    let <SC> =
						%% Line 81
						call 'hipe_pack_constants':'slim_constmap'
						    (ConstMap)
					    in  let <DataRelocs> =
						    %% Line 82
						    call 'hipe_pack_constants':'mk_data_relocs'
							(RefsFromConsts, LabelMap)
						in  let <SSE> =
							%% Line 83
							call 'hipe_pack_constants':'slim_sorted_exportmap'
							    (ExportMap, _cor2, _cor1)
						    in  let <SlimRefs> =
							    %% Line 84
							    call 'hipe_pack_constants':'slim_refs'
								(AccRefs)
							in  let <_cor21> =
								%% Line 85
								call 'hipe_bifs':'system_crc'
								    (13615612)
							    in  %% Line 85
								call 'erlang':'term_to_binary'
								    ([{[51|[46|[49|[49]]]],_cor21}|%% Line 86
												   [ConstAlign|[ConstSize|%% Line 87
															  [SC|%% Line 88
															      [DataRelocs|%% Line 89
																	  [SSE|%% Line 90
																	       [CodeSize|[CodeBinary|[SlimRefs|%% Line 91
																					       [0|[[]]]]]]]]]]]])
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor16})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor14})
			    -| ['compiler_generated'] )
			end
'translate'/3 =
    %% Line 109
    fun (_cor2,_cor1,_cor0) ->
	%% Line 110
	apply 'translate_mfas'/4
	    (_cor2, _cor1, [], _cor0)
'translate_mfas'/4 =
    %% Line 112
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,_X_Data}|Code],ConstMap,NewCode,Options> when 'true' ->
	      let <_cor4> =
		  %% Line 114
		  call 'hipe_sdi':'pass1_init'
		      ()
	      in  %% Line 113
		  case %% Line 114
		       apply 'translate_insns'/6
			   (Insns, {MFA,ConstMap}, _cor4, 0, [], Options) of
		    <{NewInsns,CodeSize,LabelMap}> when 'true' ->
			%% Line 115
			apply 'translate_mfas'/4
			    (Code, ConstMap, [{MFA,NewInsns,CodeSize,LabelMap}|NewCode], Options)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 116
	  <[],_X_ConstMap,NewCode,_X_Options> when 'true' ->
	      %% Line 117
	      call 'lists':'reverse'
		  (NewCode)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'translate_mfas',4}}] )
	    -| ['compiler_generated'] )
	end
'translate_insns'/6 =
    %% Line 119
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Context,SdiPass1,Address,NewInsns,Options> when 'true' ->
	      let <NewIs> =
		  %% Line 120
		  apply 'translate_insn'/3
		      (I, Context, Options)
	      in  %% Line 121
		  apply 'add_insns'/7
		      (NewIs, Insns, Context, SdiPass1, Address, NewInsns, Options)
	  %% Line 122
	  <[],_X_Context,SdiPass1,Address,NewInsns,_X_Options> when 'true' ->
	      %% Line 123
	      case call 'hipe_sdi':'pass2'
		       (SdiPass1) of
		<{LabelMap,CodeSizeIncr}> when 'true' ->
		    let <_cor9> =
			%% Line 124
			call 'lists':'reverse'
			    (NewInsns)
		    in  let <_cor8> =
			    %% Line 124
			    call 'erlang':'+'
				(Address, CodeSizeIncr)
			in  %% Line 124
			    {_cor9,_cor8,LabelMap}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'translate_insns',6}}] )
	    -| ['compiler_generated'] )
	end
'add_insns'/7 =
    %% Line 126
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],Insns,Context,SdiPass1,Address,NewInsns,Options> when 'true' ->
	      let <_cor18> =
		  %% Line 128
		  case I of
		    %% Line 129
		    <{'.label',L,_cor29}> when 'true' ->
			%% Line 130
			call 'hipe_sdi':'pass1_add_label'
			    (SdiPass1, Address, L)
		    %% Line 131
		    <{'jcc_sdi',{_cor30,{'label',L}},_cor31}> when 'true' ->
			%% Line 133
			call 'hipe_sdi':'pass1_add_sdi'
			    (SdiPass1, Address, L, {'sdi_info',-126,129,4})
		    %% Line 134
		    <{'jmp_sdi',{{'label',L}},_cor32}> when 'true' ->
			%% Line 136
			call 'hipe_sdi':'pass1_add_sdi'
			    (SdiPass1, Address, L, {'sdi_info',-126,129,3})
		    %% Line 137
		    <_cor33> when 'true' ->
			%% Line 138
			SdiPass1
		  end
	      in  let <_cor20> =
		      %% Line 140
		      apply 'insn_size'/1
			  (I)
		  in  let <Address1> =
			  %% Line 140
			  call 'erlang':'+'
			      (Address, _cor20)
		      in  %% Line 141
			  apply 'add_insns'/7
			      (Is, Insns, Context, _cor18, Address1, [I|NewInsns], Options)
	  %% Line 142
	  <[],Insns,Context,SdiPass1,Address,NewInsns,Options> when 'true' ->
	      %% Line 143
	      apply 'translate_insns'/6
		  (Insns, Context, SdiPass1, Address, NewInsns, Options)
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'add_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'insn_size'/1 =
    %% Line 145
    fun (_cor0) ->
	%% Line 146
	case _cor0 of
	  %% Line 147
	  <{'.label',_cor3,_cor4}> when 'true' ->
	      0
	  %% Line 148
	  <{'.sdesc',_cor5,_cor6}> when 'true' ->
	      0
	  %% Line 149
	  <{'jcc_sdi',_cor7,_cor8}> when 'true' ->
	      2
	  %% Line 150
	  <{'jmp_sdi',_cor9,_cor10}> when 'true' ->
	      2
	  %% Line 151
	  <{Op,Arg,_X_Orig}> when 'true' ->
	      call 'hipe_amd64_encode':'insn_sizeof'
		  (Op, Arg)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'translate_insn'/3 =
    %% Line 154
    fun (_cor2,_cor1,_cor0) ->
	%% Line 155
	case _cor2 of
	  %% Line 156
	  <{'alu',_cor78,_cor79,_cor80}> when 'true' ->
	      let <_cor4> =
		  %% Line 157
		  call 'hipe_x86':'alu_src'
		      (_cor2)
	      in  let <_cor3> =
		      %% Line 157
		      call 'hipe_x86':'alu_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 157
			  apply 'resolve_alu_args'/3
			      (_cor4, _cor3, _cor1)
		      in  let <_cor6> =
			      %% Line 158
			      call 'hipe_x86':'alu_op'
				  (_cor2)
			  in  %% Line 158
			      [{_cor6,Arg,_cor2}|[]]
	  %% Line 159
	  <{'call',_cor81,_cor82,_cor83}> when 'true' ->
	      %% Line 160
	      apply 'translate_call'/1
		  (_cor2)
	  %% Line 161
	  <{'cmovcc',_cor84,_cor85,_cor86}> when 'true' ->
	      let <_cor8> =
		  %% Line 163
		  call 'hipe_x86':'cmovcc_src'
		      (_cor2)
	      in  let <_cor7> =
		      %% Line 163
		      call 'hipe_x86':'cmovcc_dst'
			  (_cor2)
		  in  %% Line 162
		      case apply 'resolve_move_args'/3
			       (_cor8, _cor7, _cor1) of
			<{Dst,Src}> when 'true' ->
			    let <_cor10> =
				%% Line 165
				call 'hipe_x86':'cmovcc_cc'
				    (_cor2)
			    in  let <_cor11> =
				    %% Line 165
				    call 'hipe_amd64_encode':'cc'
					(_cor10)
				in  let <CC> = {%% Line 165
					 'cc',_cor11}
				    in  let <Arg> = {%% Line 166
					     CC,%% Line 166
						Dst,%% Line 166
						    Src}
					in  %% Line 167
					    [{'cmovcc',Arg,_cor2}|[]]
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  %% Line 168
	  <{'cmp',_cor87,_cor88}> when 'true' ->
	      let <_cor15> =
		  %% Line 169
		  call 'hipe_x86':'cmp_src'
		      (_cor2)
	      in  let <_cor14> =
		      %% Line 169
		      call 'hipe_x86':'cmp_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 169
			  apply 'resolve_alu_args'/3
			      (_cor15, _cor14, _cor1)
		      in  %% Line 170
			  [{'cmp',Arg,_cor2}|[]]
	  %% Line 171
	  <{'comment',_cor89}> when 'true' ->
	      %% Line 172
	      []
	  %% Line 173
	  <{'fmove',_cor90,_cor91}> when 'true' ->
	      let <_cor18> =
		  %% Line 174
		  call 'hipe_x86':'fmove_src'
		      (_cor2)
	      in  let <_cor17> =
		      %% Line 175
		      call 'hipe_x86':'fmove_dst'
			  (_cor2)
		  in  %% Line 174
		      case apply 'resolve_sse2_fmove_args'/2
			       (_cor18, _cor17) of
			<{Op,Arg}> when 'true' ->
			    %% Line 176
			    [{Op,Arg,_cor2}|[]]
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor19})
			  -| ['compiler_generated'] )
		      end
	  %% Line 177
	  <{'fp_binop',_cor92,_cor93,_cor94}> when 'true' ->
	      %% Line 178
	      case call 'proplists':'get_bool'
		       ('x87', _cor0) of
		%% Line 179
		<'true'> when 'true' ->
		    let <_cor21> =
			%% Line 180
			call 'hipe_x86':'fp_binop_src'
			    (_cor2)
		    in  let <_cor20> =
			    %% Line 181
			    call 'hipe_x86':'fp_binop_dst'
				(_cor2)
			in  let <Arg> =
				%% Line 180
				apply 'resolve_x87_binop_args'/2
				    (_cor21, _cor20)
			    in  let <_cor23> =
				    %% Line 182
				    call 'hipe_x86':'fp_binop_op'
					(_cor2)
				in  %% Line 182
				    [{_cor23,Arg,_cor2}|[]]
		%% Line 183
		<'false'> when 'true' ->
		    let <_cor25> =
			%% Line 184
			call 'hipe_x86':'fp_binop_src'
			    (_cor2)
		    in  let <_cor24> =
			    %% Line 185
			    call 'hipe_x86':'fp_binop_dst'
				(_cor2)
			in  let <Arg> =
				%% Line 184
				apply 'resolve_sse2_binop_args'/2
				    (_cor25, _cor24)
			    in  let <_cor27> =
				    %% Line 186
				    call 'hipe_x86':'fp_binop_op'
					(_cor2)
				in  let <_cor28> =
					%% Line 186
					apply 'resolve_sse2_op'/1
					    (_cor27)
				    in  %% Line 186
					[{_cor28,Arg,_cor2}|[]]
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 188
	  <{'fp_unop',_cor95,_cor96}> when 'true' ->
	      %% Line 189
	      case call 'proplists':'get_bool'
		       ('x87', _cor0) of
		%% Line 190
		<'true'> when 'true' ->
		    let <_cor30> =
			%% Line 191
			call 'hipe_x86':'fp_unop_arg'
			    (_cor2)
		    in  let <Arg> =
			    %% Line 191
			    apply 'resolve_x87_unop_arg'/1
				(_cor30)
			in  let <_cor32> =
				%% Line 192
				call 'hipe_x86':'fp_unop_op'
				    (_cor2)
			    in  %% Line 192
				[{_cor32,Arg,_cor2}|[]]
		%% Line 193
		<'false'> when 'true' ->
		    %% Line 194
		    case call 'hipe_x86':'fp_unop_op'
			     (_cor2) of
		      %% Line 195
		      <'fchs'> when 'true' ->
			  let <_cor33> =
			      %% Line 196
			      call 'hipe_x86':'fp_unop_arg'
				  (_cor2)
			  in  let <Arg> =
				  %% Line 196
				  apply 'resolve_sse2_fchs_arg'/1
				      (_cor33)
			      in  %% Line 197
				  [{'xorpd',Arg,_cor2}|[]]
		      %% Line 198
		      <'fwait'> when 'true' ->
			  %% Line 199
			  []
		      ( <_cor35> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor35})
			-| ['compiler_generated'] )
		    end
		( <_cor36> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 202
	  <{'imul',_cor97,_cor98,_cor99}> when 'true' ->
	      %% Line 203
	      apply 'translate_imul'/2
		  (_cor2, _cor1)
	  %% Line 204
	  <{'jcc',_cor100,_cor101}> when 'true' ->
	      let <_cor37> =
		  %% Line 205
		  call 'hipe_x86':'jcc_cc'
		      (_cor2)
	      in  let <_cor38> =
		      %% Line 205
		      call 'hipe_amd64_encode':'cc'
			  (_cor37)
		  in  let <Cc> = {%% Line 205
			   'cc',_cor38}
		      in  let <_cor40> =
			      %% Line 206
			      call 'hipe_x86':'jcc_label'
				  (_cor2)
			  in  let <Label> =
				  %% Line 206
				  apply 'translate_label'/1
				      (_cor40)
			      in  %% Line 207
				  [{'jcc_sdi',{Cc,Label},_cor2}|[]]
	  %% Line 208
	  <{'jmp_fun',_cor102,_cor103}> when 'true' ->
	      let <_cor43> =
		  %% Line 212
		  case call 'hipe_x86':'jmp_fun_linkage'
			   (_cor2) of
		    %% Line 213
		    <'remote'> when 'true' ->
			2
		    %% Line 214
		    <'not_remote'> when 'true' ->
			3
		    ( <_cor42> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor42})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor45> =
		      %% Line 216
		      call 'hipe_x86':'jmp_fun_fun'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 216
			  apply 'translate_fun'/2
			      (_cor45, _cor43)
		      in  %% Line 217
			  [{'jmp',{Arg},_cor2}|[]]
	  %% Line 218
	  <{'jmp_label',_cor104}> when 'true' ->
	      let <_cor47> =
		  %% Line 219
		  call 'hipe_x86':'jmp_label_label'
		      (_cor2)
	      in  let <Arg> =
		      %% Line 219
		      apply 'translate_label'/1
			  (_cor47)
		  in  %% Line 220
		      [{'jmp_sdi',{Arg},_cor2}|[]]
	  %% Line 221
	  <{'jmp_switch',_cor105,_cor106,_cor107}> when 'true' ->
	      let <RM32> =
		  %% Line 222
		  apply 'resolve_jmp_switch_arg'/2
		      (_cor2, _cor1)
	      in  %% Line 223
		  [{'jmp',{RM32},_cor2}|[]]
	  %% Line 224
	  <{'label',_cor108}> when 'true' ->
	      let <_cor50> =
		  %% Line 225
		  call 'hipe_x86':'label_label'
		      (_cor2)
	      in  %% Line 225
		  [{'.label',_cor50,_cor2}|[]]
	  %% Line 226
	  <{'lea',_cor109,_cor110}> when 'true' ->
	      let <_cor52> =
		  %% Line 227
		  call 'hipe_x86':'lea_mem'
		      (_cor2)
	      in  let <_cor51> =
		      %% Line 227
		      call 'hipe_x86':'lea_temp'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 227
			  apply 'resolve_lea_args'/2
			      (_cor52, _cor51)
		      in  %% Line 228
			  [{'lea',Arg,_cor2}|[]]
	  %% Line 229
	  <{'move',_cor111,_cor112}> when 'true' ->
	      let <_cor55> =
		  %% Line 230
		  call 'hipe_x86':'move_src'
		      (_cor2)
	      in  let <_cor54> =
		      %% Line 230
		      call 'hipe_x86':'move_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 230
			  apply 'resolve_move_args'/3
			      (_cor55, _cor54, _cor1)
		      in  %% Line 232
			  [{'mov',Arg,_cor2}|[]]
	  %% Line 233
	  <{'move64',_cor113,_cor114}> when 'true' ->
	      %% Line 234
	      apply 'translate_move64'/2
		  (_cor2, _cor1)
	  %% Line 235
	  <{'movsx',_cor115,_cor116}> when 'true' ->
	      let <_cor58> =
		  %% Line 236
		  call 'hipe_x86':'movsx_src'
		      (_cor2)
	      in  let <_cor57> =
		      %% Line 236
		      call 'hipe_x86':'movsx_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 236
			  apply 'resolve_movx_args'/2
			      (_cor58, _cor57)
		      in  %% Line 237
			  [{'movsx',Arg,_cor2}|[]]
	  %% Line 238
	  <{'movzx',_cor117,_cor118}> when 'true' ->
	      let <_cor61> =
		  %% Line 239
		  call 'hipe_x86':'movzx_src'
		      (_cor2)
	      in  let <_cor60> =
		      %% Line 239
		      call 'hipe_x86':'movzx_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 239
			  apply 'resolve_movx_args'/2
			      (_cor61, _cor60)
		      in  %% Line 240
			  [{'movzx',Arg,_cor2}|[]]
	  %% Line 245
	  <{'pop',_cor119}> when 'true' ->
	      let <_cor63> =
		  %% Line 246
		  call 'hipe_x86':'pop_dst'
		      (_cor2)
	      in  let <Arg> =
		      %% Line 246
		      apply 'translate_dst'/1
			  (_cor63)
		  in  %% Line 247
		      [{'pop',{Arg},_cor2}|[]]
	  %% Line 248
	  <{'push',_cor120}> when 'true' ->
	      let <_cor65> =
		  %% Line 249
		  call 'hipe_x86':'push_src'
		      (_cor2)
	      in  let <Arg> =
		      %% Line 249
		      apply 'translate_src'/2
			  (_cor65, _cor1)
		  in  %% Line 250
		      [{'push',{Arg},_cor2}|[]]
	  %% Line 251
	  <{'ret',_cor121}> when 'true' ->
	      %% Line 252
	      apply 'translate_ret'/1
		  (_cor2)
	  %% Line 253
	  <{'shift',_cor122,_cor123,_cor124}> when 'true' ->
	      let <_cor68> =
		  %% Line 254
		  call 'hipe_x86':'shift_src'
		      (_cor2)
	      in  let <_cor67> =
		      %% Line 254
		      call 'hipe_x86':'shift_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 254
			  apply 'resolve_shift_args'/3
			      (_cor68, _cor67, _cor1)
		      in  let <_cor70> =
			      %% Line 255
			      call 'hipe_x86':'shift_op'
				  (_cor2)
			  in  %% Line 255
			      [{_cor70,Arg,_cor2}|[]]
	  %% Line 256
	  <{'test',_cor125,_cor126}> when 'true' ->
	      let <_cor72> =
		  %% Line 257
		  call 'hipe_x86':'test_src'
		      (_cor2)
	      in  let <_cor71> =
		      %% Line 257
		      call 'hipe_x86':'test_dst'
			  (_cor2)
		  in  let <Arg> =
			  %% Line 257
			  apply 'resolve_test_args'/3
			      (_cor72, _cor71, _cor1)
		      in  %% Line 258
			  [{'test',Arg,_cor2}|[]]
	  ( <_cor74> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor74})
	    -| ['compiler_generated'] )
	end
'translate_call'/1 =
    %% Line 360
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 364
	    case call 'hipe_x86':'call_linkage'
		     (_cor0) of
	      %% Line 365
	      <'remote'> when 'true' ->
		  2
	      %% Line 366
	      <'not_remote'> when 'true' ->
		  3
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  let <_cor4> =
		%% Line 368
		call 'hipe_x86':'call_fun'
		    (_cor0)
	    in  let <Arg> =
		    %% Line 368
		    apply 'translate_fun'/2
			(_cor4, _cor2)
		in  let <SDesc> =
			%% Line 369
			call 'hipe_x86':'call_sdesc'
			    (_cor0)
		    in  %% Line 370
			[{'call',{Arg},_cor0}|[{'.sdesc',SDesc,{'comment','sdesc'}}|[]]]
'translate_ret'/1 =
    %% Line 372
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 374
	    case call 'hipe_x86':'ret_npop'
		     (_cor0) of
	      %% Line 375
	      <0> when 'true' ->
		  {}
	      %% Line 376
	      <N> when 'true' ->
		  {{'imm16',N}}
	    end
	in  %% Line 378
	    [{'ret',_cor2,_cor0}|[]]
'translate_imul'/2 =
    %% Line 382
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 383
	    call 'hipe_x86':'imul_temp'
		(_cor1)
	in  let <Temp> =
		%% Line 383
		apply 'temp_to_regArch'/1
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 384
		    call 'hipe_x86':'imul_src'
			(_cor1)
		in  let <Src> =
			%% Line 384
			apply 'temp_or_mem_to_rmArch'/1
			    (_cor4)
		    in  let <_cor8> =
			    %% Line 386
			    case call 'hipe_x86':'imul_imm_opt'
				     (_cor1) of
			      %% Line 387
			      <[]> when 'true' ->
				  {Temp,Src}
			      %% Line 388
			      <Imm> when 'true' ->
				  let <_cor6> =
				      apply 'translate_imm'/3
					  (Imm, _cor0, 'true')
				  in  {Temp,Src,_cor6}
			    end
			in  %% Line 390
			    [{'imul',_cor8,_cor1}|[]]
'temp_or_mem_to_rmArch'/1 =
    %% Line 392
    fun (_cor0) ->
	%% Line 393
	case _cor0 of
	  %% Line 394
	  <{'x86_temp',_cor3,_cor4,_cor5}> when 'true' ->
	      apply 'temp_to_rmArch'/1
		  (_cor0)
	  %% Line 395
	  <{'x86_mem',_cor6,_cor7,_cor8}> when 'true' ->
	      apply 'mem_to_rmArch'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'translate_label'/1 =
    %% Line 398
    fun (_cor0) ->
	case _cor0 of
	  <Label>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 399
	      {'label',Label}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'translate_label',1}}] )
	    -| ['compiler_generated'] )
	end
'translate_fun'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	%% Line 402
	case _cor1 of
	  %% Line 403
	  <{'x86_temp',_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 404
	      apply 'temp_to_rmArch'/1
		  (_cor1)
	  %% Line 405
	  <{'x86_mem',_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 406
	      apply 'mem_to_rmArch'/1
		  (_cor1)
	  %% Line 407
	  <{'x86_mfa',M,F,A}> when 'true' ->
	      %% Line 408
	      {'rel32',{_cor0,{M,F,A}}}
	  %% Line 409
	  <{'x86_prim',Prim}> when 'true' ->
	      %% Line 410
	      {'rel32',{_cor0,Prim}}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'translate_src'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	%% Line 414
	case _cor1 of
	  %% Line 415
	  <{'x86_imm',_cor5}> when 'true' ->
	      %% Line 416
	      apply 'translate_imm'/3
		  (_cor1, _cor0, 'true')
	  %% Line 417
	  <_cor6> when 'true' ->
	      %% Line 418
	      apply 'translate_dst'/1
		  (_cor1)
	end
'translate_imm'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'x86_imm',Imm},Context,MayTrunc8> when 'true' ->
	      %% Line 425
	      case <> of
		<>
		    when call 'erlang':'is_atom'
			  (Imm) ->
		    %% Line 426
		    {'imm32',{0,Imm}}
		%% Line 427
		<>
		    when call 'erlang':'is_integer'
			  (Imm) ->
		    let <_cor5> =
			%% Line 428
			call 'erlang':'=<'
			    (Imm, 127)
		    in  let <_cor4> =
			    %% Line 428
			    call 'erlang':'>='
				(Imm, -128)
			in  %% Line 428
			    case call 'erlang':'and'
				     (_cor5, _cor4) of
			      %% Line 429
			      <'true'> when 'true' ->
				  let <_cor7> =
				      %% Line 431
				      case MayTrunc8 of
					%% Line 432
					<'true'> when 'true' ->
					    call 'erlang':'band'
						(Imm, 255)
					%% Line 433
					<'false'> when 'true' ->
					    Imm
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 435
				      {'imm8',_cor7}
			      %% Line 436
			      <'false'> when 'true' ->
				  %% Line 437
				  {'imm32',Imm}
			    end
		%% Line 439
		<> when 'true' ->
		    let <_cor13> =
			%% Line 441
			case Imm of
			  %% Line 442
			  <{Label,'constant'}> when 'true' ->
			      %% Line 443
			      case Context of
				<{MFA,ConstMap}> when 'true' ->
				    let <ConstNo> =
					%% Line 444
					call 'hipe_pack_constants':'find_const'
					    ({MFA,Label}, ConstMap)
				    in  %% Line 445
					{'constant',ConstNo}
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor10})
				  -| ['compiler_generated'] )
			      end
			  %% Line 446
			  <{Label,'closure'}> when 'true' ->
			      %% Line 447
			      {'closure',Label}
			  %% Line 448
			  <{Label,'c_const'}> when 'true' ->
			      %% Line 449
			      {'c_const',Label}
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 451
			{'imm32',{1,_cor13}}
	      end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'translate_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'translate_dst'/1 =
    %% Line 454
    fun (_cor0) ->
	%% Line 455
	case _cor0 of
	  %% Line 456
	  <{'x86_temp',_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 457
	      apply 'temp_to_regArch'/1
		  (_cor0)
	  %% Line 458
	  <{'x86_mem',_cor6,_cor7,'double'}> when 'true' ->
	      %% Line 459
	      apply 'mem_to_rm64fp'/1
		  (_cor0)
	  %% Line 460
	  <{'x86_mem',_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 461
	      apply 'mem_to_rmArch'/1
		  (_cor0)
	  %% Line 462
	  <{'x86_fpreg',_cor11,_cor12}> when 'true' ->
	      %% Line 463
	      apply 'fpreg_to_stack'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'encode'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	let <CodeSize> =
	    %% Line 477
	    apply 'compute_code_size'/2
		(_cor1, 0)
	in  let <ExportMap> =
		%% Line 478
		apply 'build_export_map'/3
		    (_cor1, 0, [])
	    in  %% Line 479
		case apply 'encode_mfas'/5
			 (_cor1, 0, [], [], _cor0) of
		  <{AccCode,Relocs}> when 'true' ->
		      let <_cor5> =
			  %% Line 480
			  call 'lists':'reverse'
			      (AccCode)
		      in  let <CodeBinary> =
			      %% Line 480
			      call 'erlang':'list_to_binary'
				  (_cor5)
			  in  do  %% Line 481
				  case <> of
				    <>
					when try
					      let <_cor7> =
						  call 'erlang':'byte_size'
						      (CodeBinary)
					      in  call 'erlang':'=:='
						      (CodeSize, _cor7)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_amd64_assemble',481,[67|[111|[100|[101|[83|[105|[122|[101|[32|[61|[58|[61|[32|[98|[121|[116|[101|[95|[115|[105|[122|[101|[32|[40|[32|[67|[111|[100|[101|[66|[105|[110|[97|[114|[121|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				  end
				  let <_cor8> =
				      %% Line 482
				      call 'gb_trees':'empty'
					  ()
				  in  let <CombinedLabelMap> =
					  %% Line 482
					  apply 'combine_label_maps'/3
					      (_cor1, 0, _cor8)
				      in  %% Line 483
					  {CodeSize,CodeBinary,Relocs,CombinedLabelMap,ExportMap}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'nr_pad_bytes'/1 =
    %% Line 485
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'rem'
		(_cor0, 4)
	in  let <_cor2> =
		call 'erlang':'-'
		    (4, _cor1)
	    in  call 'erlang':'rem'
		    (_cor2, 4)
'align_entry'/1 =
    %% Line 487
    fun (_cor0) ->
	let <_cor1> =
	    apply 'nr_pad_bytes'/1
		(_cor0)
	in  call 'erlang':'+'
		(_cor0, _cor1)
'compute_code_size'/2 =
    %% Line 489
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_MFA,_X_Insns,CodeSize,_X_LabelMap}|Code],Size> when 'true' ->
	      let <_cor2> =
		  %% Line 490
		  call 'erlang':'+'
		      (Size, CodeSize)
	      in  let <_cor3> =
		      %% Line 490
		      apply 'align_entry'/1
			  (_cor2)
		  in  %% Line 490
		      apply 'compute_code_size'/2
			  (Code, _cor3)
	  %% Line 491
	  <[],Size> when 'true' ->
	      Size
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'compute_code_size',2}}] )
	    -| ['compiler_generated'] )
	end
'build_export_map'/3 =
    %% Line 493
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{M,F,A},_X_Insns,CodeSize,_X_LabelMap}|Code],Address,ExportMap> when 'true' ->
	      let <_cor3> =
		  %% Line 494
		  call 'erlang':'+'
		      (Address, CodeSize)
	      in  let <_cor4> =
		      %% Line 494
		      apply 'align_entry'/1
			  (_cor3)
		  in  %% Line 494
		      apply 'build_export_map'/3
			  (Code, _cor4, [{Address,M,F,A}|ExportMap])
	  %% Line 495
	  <[],_X_Address,ExportMap> when 'true' ->
	      ExportMap
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'build_export_map',3}}] )
	    -| ['compiler_generated'] )
	end
'combine_label_maps'/3 =
    %% Line 497
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,_X_Insns,CodeSize,LabelMap}|Code],Address,CLM> when 'true' ->
	      let <_cor3> =
		  %% Line 498
		  call 'gb_trees':'to_list'
		      (LabelMap)
	      in  let <NewCLM> =
		      %% Line 498
		      apply 'merge_label_map'/4
			  (_cor3, MFA, Address, CLM)
		  in  let <_cor5> =
			  %% Line 499
			  call 'erlang':'+'
			      (Address, CodeSize)
		      in  let <_cor6> =
			      %% Line 499
			      apply 'align_entry'/1
				  (_cor5)
			  in  %% Line 499
			      apply 'combine_label_maps'/3
				  (Code, _cor6, NewCLM)
	  %% Line 500
	  <[],_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'combine_label_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_label_map'/4 =
    %% Line 502
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,Offset}|Rest],MFA,Address,CLM> when 'true' ->
	      let <_cor4> =
		  %% Line 503
		  call 'erlang':'+'
		      (Address, Offset)
	      in  let <NewCLM> =
		      %% Line 503
		      call 'gb_trees':'insert'
			  ({MFA,Label}, _cor4, CLM)
		  in  %% Line 504
		      apply 'merge_label_map'/4
			  (Rest, MFA, Address, NewCLM)
	  %% Line 505
	  <[],_X_MFA,_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge_label_map',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_mfas'/5 =
    %% Line 507
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,CodeSize,LabelMap}|Code],Address,AccCode,Relocs,Options> when 'true' ->
	      do  %% Line 508
		  apply 'print'/3
		      ([71|[101|[110|[101|[114|[97|[116|[105|[110|[103|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]], [MFA|[]], Options)
		  do  %% Line 509
		      apply 'print'/3
			  ([79|[102|[102|[115|[101|[116|[32|[32|[32|[124|[32|[79|[112|[99|[111|[100|[101|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[124|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], Options)
		      %% Line 510
		      case %% Line 511
			   apply 'encode_insns'/7
			       (Insns, Address, Address, LabelMap, Relocs, AccCode, Options) of
			<{Address1,Relocs1,AccCode1}> when 'true' ->
			    let <_cor6> =
				%% Line 512
				call 'erlang':'+'
				    (Address, CodeSize)
			    in  let <ExpectedAddress> =
				    %% Line 512
				    apply 'align_entry'/1
					(_cor6)
				in  do  %% Line 513
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (Address1,
						     ExpectedAddress) ->
					      []
					  <> when 'true' ->
					      call 'erlang':'exit'
						  ({'assertion_failed','hipe_amd64_assemble',513,[65|[100|[100|[114|[101|[115|[115|[49|[32|[61|[58|[61|[32|[69|[120|[112|[101|[99|[116|[101|[100|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
					end
					do  %% Line 514
					    apply 'print'/3
						([70|[105|[110|[105|[115|[104|[101|[100|[46|[10|[10]]]]]]]]]]], [], Options)
					    %% Line 515
					    apply 'encode_mfas'/5
						(Code, Address1, AccCode1, Relocs1, Options)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 516
	  <[],_X_Address,AccCode,Relocs,_X_Options> when 'true' ->
	      %% Line 517
	      {AccCode,Relocs}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'encode_mfas',5}}] )
	    -| ['compiler_generated'] )
	end
'encode_insns'/7 =
    %% Line 519
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Address,FunAddress,LabelMap,Relocs,AccCode,Options> when 'true' ->
	      %% Line 520
	      case I of
		%% Line 521
		<{'.label',L,_cor32}> when 'true' ->
		    let <_cor7> =
			%% Line 522
			call 'gb_trees':'get'
			    (L, LabelMap)
		    in  let <LabelAddress> =
			    %% Line 522
			    call 'erlang':'+'
				(_cor7, FunAddress)
			in  do  %% Line 523
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Address,
					     LabelAddress) ->
				      []
				  <> when 'true' ->
				      call 'erlang':'exit'
					  ({'assertion_failed','hipe_amd64_assemble',523,[65|[100|[100|[114|[101|[115|[115|[32|[61|[58|[61|[32|[76|[97|[98|[101|[108|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]})
				end
				do  %% Line 524
				    apply 'print_insn'/4
					(Address, [], I, Options)
				    %% Line 525
				    apply 'encode_insns'/7
					(Insns, Address, FunAddress, LabelMap, Relocs, AccCode, Options)
		%% Line 526
		<{'.sdesc',SDesc,_cor33}> when 'true' ->
		    %% Line 527
		    case SDesc of
		      <{'x86_sdesc',ExnLab,FSize,Arity,Live}> when 'true' ->
			  let <_cor12> =
			      %% Line 529
			      case ExnLab of
				%% Line 530
				<[]> when 'true' ->
				    []
				%% Line 531
				<_cor34> when 'true' ->
				    let <_cor10> =
					call 'gb_trees':'get'
					    (ExnLab, LabelMap)
				    in  call 'erlang':'+'
					    (_cor10, FunAddress)
			      end
			  in  let <Reloc> =
				  %% Line 533
				  {4,Address,%% Line 534
					     {_cor12,FSize,Arity,Live}}
			      in  %% Line 535
				  apply 'encode_insns'/7
				      (Insns, Address, FunAddress, LabelMap, [Reloc|Relocs], AccCode, Options)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		%% Line 536
		<_cor35> when 'true' ->
		    %% Line 537
		    case apply 'fix_jumps'/4
			     (I, Address, FunAddress, LabelMap) of
		      <{Op,Arg,_cor36}> when 'true' ->
			  %% Line 538
			  case call 'hipe_amd64_encode':'insn_encode'
				   (Op, Arg, Address) of
			    <{Bytes,NewRelocs}> when 'true' ->
				do  %% Line 539
				    apply 'print_insn'/4
					(Address, Bytes, I, Options)
				    let <Segment> =
					%% Line 540
					call 'erlang':'list_to_binary'
					    (Bytes)
				    in  let <Size> =
					    %% Line 541
					    call 'erlang':'byte_size'
						(Segment)
					in  let <NewAccCode> =
						%% Line 542
						[Segment|AccCode]
					    in  let <_cor21> =
						    %% Line 543
						    call 'erlang':'+'
							(Address, Size)
						in  let <_cor20> =
							%% Line 543
							call 'erlang':'++'
							    (NewRelocs, Relocs)
						    in  %% Line 543
							apply 'encode_insns'/7
							    (Insns, _cor21, FunAddress, LabelMap, _cor20, NewAccCode, Options)
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor16})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 545
	  <[],Address,FunAddress,LabelMap,Relocs,AccCode,Options> when 'true' ->
	      %% Line 546
	      case apply 'nr_pad_bytes'/1
		       (Address) of
		%% Line 547
		<0> when 'true' ->
		    %% Line 548
		    {Address,Relocs,AccCode}
		%% Line 549
		<NrPadBytes> when 'true' ->
		    let <Padding> =
			%% Line 550
			call 'lists':'duplicate'
			    (NrPadBytes, {'nop',{},{'comment','padding'}})
		    in  %% Line 551
			apply 'encode_insns'/7
			    (Padding, Address, FunAddress, LabelMap, Relocs, AccCode, Options)
	      end
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'encode_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'fix_jumps'/4 =
    %% Line 554
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 555
	case _cor3 of
	  %% Line 556
	  <{'jcc_sdi',{CC,{'label',L}},OrigI}> when 'true' ->
	      let <_cor4> =
		  %% Line 557
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 557
		      call 'erlang':'+'
			  (_cor4, _cor1)
		  in  let <_cor6> =
			  %% Line 558
			  call 'erlang':'+'
			      (_cor2, 2)
		      in  let <ShortOffset> =
			      %% Line 558
			      call 'erlang':'-'
				  (LabelAddress, _cor6)
			  in  %% Line 559
			      case <> of
				<>
				    when try
					  let <_cor8> =
					      call 'erlang':'is_integer'
						  (ShortOffset)
					  in  let <_cor10> =
						  call 'erlang':'>='
						      (ShortOffset, -128)
					      in  let <_cor11> =
						      call 'erlang':'=<'
							  (ShortOffset, 127)
						  in  let <_cor12> =
							  call 'erlang':'and'
							      (_cor10, _cor11)
						      in  call 'erlang':'and'
							      (_cor8, _cor12)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor13> =
					%% Line 560
					call 'erlang':'band'
					    (ShortOffset, 255)
				    in  %% Line 560
					{'jcc',{CC,{'rel8',_cor13}},OrigI}
				%% Line 561
				<> when 'true' ->
				    let <_cor14> =
					%% Line 562
					call 'erlang':'+'
					    (_cor2, 6)
				    in  let <LongOffset> =
					    %% Line 562
					    call 'erlang':'-'
						(LabelAddress, _cor14)
					in  %% Line 563
					    {'jcc',{CC,{'rel32',LongOffset}},OrigI}
			      end
	  %% Line 565
	  <{'jmp_sdi',{{'label',L}},OrigI}> when 'true' ->
	      let <_cor16> =
		  %% Line 566
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 566
		      call 'erlang':'+'
			  (_cor16, _cor1)
		  in  let <_cor18> =
			  %% Line 567
			  call 'erlang':'+'
			      (_cor2, 2)
		      in  let <ShortOffset> =
			      %% Line 567
			      call 'erlang':'-'
				  (LabelAddress, _cor18)
			  in  %% Line 568
			      case <> of
				<>
				    when try
					  let <_cor20> =
					      call 'erlang':'is_integer'
						  (ShortOffset)
					  in  let <_cor22> =
						  call 'erlang':'>='
						      (ShortOffset, -128)
					      in  let <_cor23> =
						      call 'erlang':'=<'
							  (ShortOffset, 127)
						  in  let <_cor24> =
							  call 'erlang':'and'
							      (_cor22, _cor23)
						      in  call 'erlang':'and'
							      (_cor20, _cor24)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor25> =
					%% Line 569
					call 'erlang':'band'
					    (ShortOffset, 255)
				    in  %% Line 569
					{'jmp',{{'rel8',_cor25}},OrigI}
				%% Line 570
				<> when 'true' ->
				    let <_cor26> =
					%% Line 571
					call 'erlang':'+'
					    (_cor2, 5)
				    in  let <LongOffset> =
					    %% Line 571
					    call 'erlang':'-'
						(LabelAddress, _cor26)
					in  %% Line 572
					    {'jmp',{{'rel32',LongOffset}},OrigI}
			      end
	  %% Line 574
	  <_cor33> when 'true' ->
	      _cor3
	end
'fpreg_to_stack'/1 =
    %% Line 579
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_fpreg',Reg,_cor2}> when 'true' ->
	      %% Line 580
	      {'fpst',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fpreg_to_stack',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_regArch'/1 =
    %% Line 582
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 583
	      {'reg64',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_regArch',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_reg64'/1 =
    %% Line 586
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 587
	      {'reg64',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_reg64',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_reg32'/1 =
    %% Line 590
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 591
	      {'reg32',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_reg32',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_reg16'/1 =
    %% Line 592
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 593
	      {'reg16',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_reg16',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_reg8'/1 =
    %% Line 594
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 595
	      {'reg8',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_reg8',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_xmm'/1 =
    %% Line 597
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 598
	      {'xmm',Reg}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_to_xmm',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_rm64'/1 =
    %% Line 601
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor3,_cor4}> when 'true' ->
	      let <_cor1> =
		  %% Line 602
		  call 'hipe_amd64_encode':'rm_reg'
		      (Reg)
	      in  %% Line 602
		  {'rm64',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'temp_to_rm64',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_rmArch'/1 =
    %% Line 605
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor3,_cor4}> when 'true' ->
	      let <_cor1> =
		  %% Line 606
		  call 'hipe_amd64_encode':'rm_reg'
		      (Reg)
	      in  %% Line 606
		  {'rm64',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'temp_to_rmArch',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_to_rm64fp'/1 =
    %% Line 607
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_temp',Reg,_cor3,_cor4}> when 'true' ->
	      let <_cor1> =
		  %% Line 608
		  call 'hipe_amd64_encode':'rm_reg'
		      (Reg)
	      in  %% Line 608
		  {'rm64fp',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'temp_to_rm64fp',1}}] )
	    -| ['compiler_generated'] )
	end
'mem_to_ea'/1 =
    %% Line 610
    fun (_cor0) ->
	let <EA> =
	    %% Line 611
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  %% Line 612
	    {'ea',EA}
'mem_to_rm32'/1 =
    %% Line 614
    fun (_cor0) ->
	let <EA> =
	    %% Line 615
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 616
		call 'hipe_amd64_encode':'rm_mem'
		    (EA)
	    in  %% Line 616
		{'rm32',_cor2}
'mem_to_rmArch'/1 =
    %% Line 618
    fun (_cor0) ->
	let <EA> =
	    %% Line 619
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 620
		call 'hipe_amd64_encode':'rm_mem'
		    (EA)
	    in  %% Line 620
		{'rm64',_cor2}
'mem_to_rm64fp'/1 =
    %% Line 622
    fun (_cor0) ->
	let <EA> =
	    %% Line 623
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 624
		call 'hipe_amd64_encode':'rm_mem'
		    (EA)
	    in  %% Line 624
		{'rm64fp',_cor2}
'mem_to_rm8'/1 =
    %% Line 627
    fun (_cor0) ->
	let <EA> =
	    %% Line 628
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 629
		call 'hipe_amd64_encode':'rm_mem'
		    (EA)
	    in  %% Line 629
		{'rm8',_cor2}
'mem_to_rm16'/1 =
    %% Line 631
    fun (_cor0) ->
	let <EA> =
	    %% Line 632
	    apply 'mem_to_ea_common'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 633
		call 'hipe_amd64_encode':'rm_mem'
		    (EA)
	    in  %% Line 633
		{'rm16',_cor2}
'mem_to_ea_common'/1 =
    %% Line 636
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_mem',[],{'x86_imm',Off},_cor23}> when 'true' ->
	      %% Line 637
	      call 'hipe_amd64_encode':'ea_disp32_sindex'
		  (Off)
	  %% Line 638
	  <{'x86_mem',{'x86_temp',Base,_cor24,_cor25},{'x86_temp',Index,_cor26,_cor27},_cor28}> when 'true' ->
	      %% Line 639
	      case call 'erlang':'band'
		       (Base, 7) of
		%% Line 640
		<5> when 'true' ->
		    %% Line 641
		    case call 'erlang':'band'
			     (Index, 7) of
		      %% Line 642
		      <5> when 'true' ->
			  let <SINDEX> =
			      %% Line 643
			      call 'hipe_amd64_encode':'sindex'
				  (0, Index)
			  in  let <SIB> =
				  %% Line 644
				  call 'hipe_amd64_encode':'sib'
				      (Base, SINDEX)
			      in  %% Line 645
				  call 'hipe_amd64_encode':'ea_disp8_sib'
				      (0, SIB)
		      %% Line 646
		      <_cor29> when 'true' ->
			  let <SINDEX> =
			      %% Line 647
			      call 'hipe_amd64_encode':'sindex'
				  (0, Base)
			  in  let <SIB> =
				  %% Line 648
				  call 'hipe_amd64_encode':'sib'
				      (Index, SINDEX)
			      in  %% Line 649
				  call 'hipe_amd64_encode':'ea_sib'
				      (SIB)
		    end
		%% Line 651
		<_cor30> when 'true' ->
		    let <SINDEX> =
			%% Line 652
			call 'hipe_amd64_encode':'sindex'
			    (0, Index)
		    in  let <SIB> =
			    %% Line 653
			    call 'hipe_amd64_encode':'sib'
				(Base, SINDEX)
			in  %% Line 654
			    call 'hipe_amd64_encode':'ea_sib'
				(SIB)
	      end
	  %% Line 656
	  <{'x86_mem',{'x86_temp',Base,_cor31,_cor32},{'x86_imm',Off},_cor33}> when 'true' ->
	      %% Line 657
	      case <> of
		%% Line 658
		<>
		    when call 'erlang':'=:='
			  (Off,
			   0) ->
		    %% Line 659
		    case Base of
		      %% Line 660
		      <4> when 'true' ->
			  let <SIB> =
			      %% Line 661
			      call 'hipe_amd64_encode':'sib'
				  (Base)
			  in  %% Line 662
			      call 'hipe_amd64_encode':'ea_sib'
				  (SIB)
		      %% Line 663
		      <5> when 'true' ->
			  %% Line 664
			  call 'hipe_amd64_encode':'ea_disp8_base'
			      (Off, Base)
		      %% Line 665
		      <12> when 'true' ->
			  let <SIB> =
			      %% Line 666
			      call 'hipe_amd64_encode':'sib'
				  (Base)
			  in  %% Line 667
			      call 'hipe_amd64_encode':'ea_sib'
				  (SIB)
		      %% Line 668
		      <13> when 'true' ->
			  %% Line 669
			  call 'hipe_amd64_encode':'ea_disp8_base'
			      (Off, Base)
		      %% Line 670
		      <_cor34> when 'true' ->
			  %% Line 671
			  call 'hipe_amd64_encode':'ea_base'
			      (Base)
		    end
		%% Line 673
		<>
		    when let <_cor13> =
			  call 'erlang':'>='
			      (Off, -128)
		      in  let <_cor14> =
			      call 'erlang':'=<'
				  (Off, 127)
			  in  call 'erlang':'and'
				  (_cor13, _cor14) ->
		    let <Disp8> =
			%% Line 674
			call 'erlang':'band'
			    (Off, 255)
		    in  %% Line 675
			case Base of
			  %% Line 676
			  <4> when 'true' ->
			      let <SIB> =
				  %% Line 677
				  call 'hipe_amd64_encode':'sib'
				      (Base)
			      in  %% Line 678
				  call 'hipe_amd64_encode':'ea_disp8_sib'
				      (Disp8, SIB)
			  %% Line 679
			  <12> when 'true' ->
			      let <SIB> =
				  %% Line 680
				  call 'hipe_amd64_encode':'sib'
				      (Base)
			      in  %% Line 681
				  call 'hipe_amd64_encode':'ea_disp8_sib'
				      (Disp8, SIB)
			  %% Line 682
			  <_cor35> when 'true' ->
			      %% Line 683
			      call 'hipe_amd64_encode':'ea_disp8_base'
				  (Disp8, Base)
			end
		%% Line 685
		<> when 'true' ->
		    %% Line 686
		    case Base of
		      %% Line 687
		      <4> when 'true' ->
			  let <SIB> =
			      %% Line 688
			      call 'hipe_amd64_encode':'sib'
				  (Base)
			  in  %% Line 689
			      call 'hipe_amd64_encode':'ea_disp32_sib'
				  (Off, SIB)
		      %% Line 690
		      <12> when 'true' ->
			  let <SIB> =
			      %% Line 691
			      call 'hipe_amd64_encode':'sib'
				  (Base)
			  in  %% Line 692
			      call 'hipe_amd64_encode':'ea_disp32_sib'
				  (Off, SIB)
		      %% Line 693
		      <_cor36> when 'true' ->
			  %% Line 694
			  call 'hipe_amd64_encode':'ea_disp32_base'
			      (Off, Base)
		    end
	      end
	  ( <_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22})
		  -| [{'function_name',{'mem_to_ea_common',1}}] )
	    -| ['compiler_generated'] )
	end
'resolve_jmp_switch_arg'/2 =
    %% Line 700
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 701
	    call 'hipe_x86':'jmp_switch_jtab'
		(_cor1)
	in  let <Base> =
		%% Line 701
		call 'hipe_x86':'temp_reg'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 702
		    call 'hipe_x86':'jmp_switch_temp'
			(_cor1)
		in  let <Index> =
			%% Line 702
			call 'hipe_x86':'temp_reg'
			    (_cor4)
		    in  let <SINDEX> =
			    %% Line 703
			    call 'hipe_amd64_encode':'sindex'
				(3, Index)
			in  let <SIB> =
				%% Line 704
				call 'hipe_amd64_encode':'sib'
				    (Base, SINDEX)
			    in  let <_cor10> =
				    %% Line 706
				    case <> of
				      <>
					  when let <_cor8> =
						call 'erlang':'=:='
						    (Base, 5)
					    in  let <_cor9> =
						    call 'erlang':'=:='
							(Base, 13)
						in  call 'erlang':'or'
							(_cor8, _cor9) ->
					  %% Line 707
					  call 'hipe_amd64_encode':'ea_disp8_sib'
					      (0, SIB)
				      %% Line 708
				      <> when 'true' ->
					  %% Line 709
					  call 'hipe_amd64_encode':'ea_sib'
					      (SIB)
				    end
				in  let <_cor12> =
					%% Line 711
					call 'hipe_amd64_encode':'rm_mem'
					    (_cor10)
				    in  %% Line 711
					{'rm64',_cor12}
'resolve_lea_args'/2 =
    %% Line 722
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Src = {'x86_mem',_cor6,_cor7,_cor8},Dst = {'x86_temp',_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor3> =
		  %% Line 723
		  apply 'temp_to_regArch'/1
		      (Dst)
	      in  let <_cor2> =
		      %% Line 723
		      apply 'mem_to_ea'/1
			  (Src)
		  in  %% Line 723
		      {_cor3,_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'resolve_lea_args',2}}] )
	    -| ['compiler_generated'] )
	end
'resolve_sse2_op'/1 =
    %% Line 725
    fun (_cor0) ->
	%% Line 726
	case _cor0 of
	  %% Line 727
	  <'fadd'> when 'true' ->
	      'addsd'
	  %% Line 728
	  <'fdiv'> when 'true' ->
	      'divsd'
	  %% Line 729
	  <'fmul'> when 'true' ->
	      'mulsd'
	  %% Line 730
	  <'fsub'> when 'true' ->
	      'subsd'
	  %% Line 731
	  <_cor3> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_amd64_assemble','unknown_sse2_operator',_cor0})
	end
'resolve_sse2_binop_args'/2 =
    %% Line 735
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Src = {'x86_mem',_cor10,_cor11,'double'},Dst = %% Line 736
							  {'x86_temp',_cor12,'double',_cor13}> when 'true' ->
	      let <_cor3> =
		  %% Line 737
		  apply 'temp_to_xmm'/1
		      (Dst)
	      in  let <_cor2> =
		      %% Line 737
		      apply 'mem_to_rm64fp'/1
			  (Src)
		  in  %% Line 737
		      {_cor3,_cor2}
	  %% Line 739
	  <Src = {'x86_temp',_cor14,'double',_cor15},Dst = %% Line 740
							   {'x86_mem',_cor16,_cor17,'double'}> when 'true' ->
	      let <_cor5> =
		  %% Line 741
		  apply 'mem_to_rm64fp'/1
		      (Dst)
	      in  let <_cor4> =
		      %% Line 741
		      apply 'temp_to_xmm'/1
			  (Src)
		  in  %% Line 741
		      {_cor5,_cor4}
	  %% Line 743
	  <Src = {'x86_temp',_cor18,'double',_cor19},Dst = %% Line 744
							   {'x86_temp',_cor20,'double',_cor21}> when 'true' ->
	      let <_cor7> =
		  %% Line 745
		  apply 'temp_to_xmm'/1
		      (Dst)
	      in  let <_cor6> =
		      %% Line 745
		      apply 'temp_to_rm64fp'/1
			  (Src)
		  in  %% Line 745
		      {_cor7,_cor6}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'resolve_sse2_binop_args',2}}] )
	    -| ['compiler_generated'] )
	end
'resolve_sse2_fmove_args'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	%% Line 749
	case <_cor1,_cor0> of
	  %% Line 750
	  <{'x86_temp',_cor10,'untagged',_cor11},{'x86_temp',_cor12,'double',_cor13}> when 'true' ->
	      let <_cor3> =
		  %% Line 751
		  apply 'temp_to_xmm'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 751
		      apply 'temp_to_rmArch'/1
			  (_cor1)
		  in  %% Line 751
		      {'cvtsi2sd',{_cor3,_cor2}}
	  %% Line 752
	  <{'x86_mem',_cor14,_cor15,'untagged'},{'x86_temp',_cor16,'double',_cor17}> when 'true' ->
	      let <_cor5> =
		  %% Line 753
		  apply 'temp_to_xmm'/1
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 753
		      apply 'mem_to_rmArch'/1
			  (_cor1)
		  in  %% Line 753
		      {'cvtsi2sd',{_cor5,_cor4}}
	  %% Line 754
	  <_fol38,_fol39> when 'true' ->
	      let <_cor6> =
		  %% Line 755
		  apply 'resolve_sse2_binop_args'/2
		      (_cor1, _cor0)
	      in  %% Line 755
		  {'movsd',_cor6}
	end
'resolve_sse2_fchs_arg'/1 =
    %% Line 759
    fun (_cor0) ->
	case _cor0 of
	  <Dst = {'x86_temp',_cor4,'double',_cor5}> when 'true' ->
	      let <_cor2> =
		  %% Line 760
		  apply 'temp_to_xmm'/1
		      (Dst)
	      in  let <_cor1> =
		      %% Line 761
		      call 'hipe_amd64_encode':'ea_disp32_sindex'
			  (%% Line 762
			   {1,{'c_const','sse2_fnegate_mask'}})
		  in  %% Line 760
		      {_cor2,%% Line 761
			     {'rm64fp',{'rm_mem',_cor1}}}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'resolve_sse2_fchs_arg',1}}] )
	    -| ['compiler_generated'] )
	end
'resolve_move_args'/3 =
    %% Line 766
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'x86_imm',ImmSrc},Dst = {'x86_mem',_cor34,_cor35,Type},Context> when 'true' ->
	      %% Line 767
	      case Type of
		%% Line 768
		<'byte'> when 'true' ->
		    let <ByteImm> =
			%% Line 769
			call 'erlang':'band'
			    (ImmSrc, 255)
		    in  let <_cor4> =
			    %% Line 770
			    apply 'mem_to_rm8'/1
				(Dst)
			in  %% Line 770
			    {_cor4,{'imm8',ByteImm}}
		%% Line 771
		<'int16'> when 'true' ->
		    let <_cor6> =
			%% Line 772
			apply 'mem_to_rm16'/1
			    (Dst)
		    in  let <_cor5> =
			    %% Line 772
			    call 'erlang':'band'
				(ImmSrc, 65535)
			in  %% Line 772
			    {_cor6,{'imm16',_cor5}}
		%% Line 773
		<'int32'> when 'true' ->
		    %% Line 774
		    case apply 'translate_imm'/3
			     ({'x86_imm',ImmSrc}, Context, 'false') of
		      <{_cor36,Imm}> when 'true' ->
			  let <_cor8> =
			      %% Line 775
			      apply 'mem_to_rm32'/1
				  (Dst)
			  in  %% Line 775
			      {_cor8,{'imm32',Imm}}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 776
		<_cor37> when 'true' ->
		    let <RMArch> =
			%% Line 777
			apply 'mem_to_rmArch'/1
			    (Dst)
		    in  %% Line 778
			case apply 'translate_imm'/3
				 ({'x86_imm',ImmSrc}, Context, 'false') of
			  <{_cor38,Imm}> when 'true' ->
			      %% Line 779
			      {RMArch,{'imm32',Imm}}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 783
	  <Src = {'x86_mem',_cor39,_cor40,Type},Dst = {'x86_temp',_cor41,_cor42,_cor43},_X_Context> when 'true' ->
	      %% Line 784
	      case Type of
		%% Line 785
		<'int32'> when 'true' ->
		    let <_cor13> =
			%% Line 786
			apply 'temp_to_reg32'/1
			    (Dst)
		    in  let <_cor12> =
			    %% Line 786
			    apply 'mem_to_rm32'/1
				(Src)
			in  %% Line 786
			    {_cor13,_cor12}
		%% Line 787
		<_cor44> when 'true' ->
		    let <_cor15> =
			%% Line 788
			apply 'temp_to_regArch'/1
			    (Dst)
		    in  let <_cor14> =
			    %% Line 788
			    apply 'mem_to_rmArch'/1
				(Src)
			in  %% Line 788
			    {_cor15,_cor14}
	      end
	  %% Line 792
	  <Src = {'x86_temp',_cor45,_cor46,_cor47},Dst = {'x86_mem',_cor48,_cor49,Type},_X_Context> when 'true' ->
	      %% Line 793
	      case Type of
		%% Line 794
		<'byte'> when 'true' ->
		    let <_cor18> =
			%% Line 795
			apply 'mem_to_rm8'/1
			    (Dst)
		    in  let <_cor17> =
			    %% Line 795
			    apply 'temp_to_reg8'/1
				(Src)
			in  %% Line 795
			    {_cor18,_cor17}
		%% Line 796
		<'int16'> when 'true' ->
		    let <_cor20> =
			%% Line 797
			apply 'mem_to_rm16'/1
			    (Dst)
		    in  let <_cor19> =
			    %% Line 797
			    apply 'temp_to_reg16'/1
				(Src)
			in  %% Line 797
			    {_cor20,_cor19}
		%% Line 798
		<'int32'> when 'true' ->
		    let <_cor22> =
			%% Line 799
			apply 'mem_to_rm32'/1
			    (Dst)
		    in  let <_cor21> =
			    %% Line 799
			    apply 'temp_to_reg32'/1
				(Src)
			in  %% Line 799
			    {_cor22,_cor21}
		%% Line 800
		<'tagged'> when 'true' ->
		    let <_cor24> =
			%% Line 801
			apply 'mem_to_rmArch'/1
			    (Dst)
		    in  let <_cor23> =
			    %% Line 801
			    apply 'temp_to_regArch'/1
				(Src)
			in  %% Line 801
			    {_cor24,_cor23}
		%% Line 802
		<'untagged'> when 'true' ->
		    let <_cor26> =
			%% Line 803
			apply 'mem_to_rmArch'/1
			    (Dst)
		    in  let <_cor25> =
			    %% Line 803
			    apply 'temp_to_regArch'/1
				(Src)
			in  %% Line 803
			    {_cor26,_cor25}
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor27})
		  -| ['compiler_generated'] )
	      end
	  %% Line 807
	  <Src = {'x86_temp',_cor50,_cor51,_cor52},Dst = {'x86_temp',_cor53,_cor54,_cor55},_X_Context> when 'true' ->
	      let <_cor29> =
		  %% Line 808
		  apply 'temp_to_regArch'/1
		      (Dst)
	      in  let <_cor28> =
		      %% Line 808
		      apply 'temp_to_rmArch'/1
			  (Src)
		  in  %% Line 808
		      {_cor29,_cor28}
	  %% Line 811
	  <Src = {'x86_imm',_X_ImmSrc},Dst = {'x86_temp',_cor56,_cor57,_cor58},Context> when 'true' ->
	      %% Line 812
	      case apply 'translate_imm'/3
		       (Src, Context, 'false') of
		<{_cor59,Imm}> when 'true' ->
		    %% Line 813
		    apply 'imm_move_args'/2
			(Dst, Imm)
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor30})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'resolve_move_args',3}}] )
	    -| ['compiler_generated'] )
	end
'imm_move_args'/2 =
    %% Line 816
    fun (_cor1,_cor0) ->
	%% Line 817
	case <> of
	  <>
	      when let <_cor2> =
		    call 'erlang':'is_number'
			(_cor0)
		in  let <_cor3> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 818
		  apply 'temp_to_reg32'/1
		      (_cor1)
	      in  %% Line 818
		  {_cor4,{'imm32',_cor0}}
	  %% Line 819
	  <> when 'true' ->
	      let <_cor5> =
		  %% Line 820
		  apply 'temp_to_rm64'/1
		      (_cor1)
	      in  %% Line 820
		  {_cor5,{'imm32',_cor0}}
	end
'translate_move64'/2 =
    %% Line 828
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 829
	    call 'hipe_x86':'move64_src'
		(_cor1)
	in  let <_cor2> =
		%% Line 830
		call 'hipe_x86':'move64_dst'
		    (_cor1)
	    in  let <Arg> =
		    %% Line 829
		    apply 'resolve_move64_args'/3
			(_cor3, _cor2, _cor0)
		in  %% Line 832
		    [{'mov',Arg,_cor1}|[]]
'resolve_move64_args'/3 =
    %% Line 835
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Src = {'x86_imm',_cor8},Dst = {'x86_temp',_cor9,_cor10,_cor11},Context> when 'true' ->
	      %% Line 836
	      case apply 'translate_imm'/3
		       (Src, Context, 'false') of
		<{_cor12,Imm}> when 'true' ->
		    let <_cor4> =
			%% Line 837
			apply 'temp_to_reg64'/1
			    (Dst)
		    in  %% Line 837
			{_cor4,{'imm64',Imm}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'resolve_move64_args',3}}] )
	    -| ['compiler_generated'] )
	end
'resolve_movx_args'/2 =
    %% Line 843
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Src = {'x86_mem',_cor7,_cor8,Type},Dst = {'x86_temp',_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor4> =
		  %% Line 844
		  apply 'temp_to_regArch'/1
		      (Dst)
	      in  let <_cor3> =
		      %% Line 845
		      case Type of
			%% Line 846
			<'byte'> when 'true' ->
			    %% Line 847
			    apply 'mem_to_rm8'/1
				(Src)
			%% Line 848
			<'int16'> when 'true' ->
			    %% Line 849
			    apply 'mem_to_rm16'/1
				(Src)
			%% Line 850
			<'int32'> when 'true' ->
			    %% Line 851
			    apply 'mem_to_rm32'/1
				(Src)
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 844
		      {_cor4,_cor3}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'resolve_movx_args',2}}] )
	    -| ['compiler_generated'] )
	end
'resolve_alu_args'/3 =
    %% Line 855
    fun (_cor2,_cor1,_cor0) ->
	%% Line 856
	case <_cor2,_cor1> of
	  %% Line 857
	  <{'x86_imm',_cor21},{'x86_mem',_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor4> =
		  %% Line 858
		  apply 'mem_to_rmArch'/1
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 858
		      apply 'translate_imm'/3
			  (_cor2, _cor0, 'true')
		  in  %% Line 858
		      {_cor4,_cor3}
	  %% Line 859
	  <{'x86_mem',_cor25,_cor26,_cor27},{'x86_temp',_cor28,_cor29,_cor30}> when 'true' ->
	      let <_cor6> =
		  %% Line 860
		  apply 'temp_to_regArch'/1
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 860
		      apply 'mem_to_rmArch'/1
			  (_cor2)
		  in  %% Line 860
		      {_cor6,_cor5}
	  %% Line 861
	  <{'x86_temp',_cor31,_cor32,_cor33},{'x86_mem',_cor34,_cor35,_cor36}> when 'true' ->
	      let <_cor8> =
		  %% Line 862
		  apply 'mem_to_rmArch'/1
		      (_cor1)
	      in  let <_cor7> =
		      %% Line 862
		      apply 'temp_to_regArch'/1
			  (_cor2)
		  in  %% Line 862
		      {_cor8,_cor7}
	  %% Line 863
	  <{'x86_temp',_cor37,_cor38,_cor39},{'x86_temp',_cor40,_cor41,_cor42}> when 'true' ->
	      let <_cor10> =
		  %% Line 864
		  apply 'temp_to_regArch'/1
		      (_cor1)
	      in  let <_cor9> =
		      %% Line 864
		      apply 'temp_to_rmArch'/1
			  (_cor2)
		  in  %% Line 864
		      {_cor10,_cor9}
	  %% Line 865
	  <{'x86_imm',_cor43},{'x86_temp',0,_cor44,_cor45}> when 'true' ->
	      let <NewSrc> =
		  %% Line 866
		  apply 'translate_imm'/3
		      (_cor2, _cor0, 'true')
	      in  let <_cor13> =
		      %% Line 868
		      case NewSrc of
			%% Line 869
			<{'imm8',_cor46}> when 'true' ->
			    apply 'temp_to_rmArch'/1
				(_cor1)
			%% Line 870
			<{'imm32',_cor47}> when 'true' ->
			    'rax'
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 872
		      {_cor13,NewSrc}
	  %% Line 873
	  <{'x86_imm',_cor48},{'x86_temp',_cor49,_cor50,_cor51}> when 'true' ->
	      let <_cor16> =
		  %% Line 874
		  apply 'temp_to_rmArch'/1
		      (_cor1)
	      in  let <_cor15> =
		      %% Line 874
		      apply 'translate_imm'/3
			  (_cor2, _cor0, 'true')
		  in  %% Line 874
		      {_cor16,_cor15}
	  ( <_fol48,_fol49> when 'true' ->
		let <_cor17> = {_fol48,_fol49}
		in  primop 'match_fail'
			({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'resolve_test_args'/3 =
    %% Line 878
    fun (_cor2,_cor1,_cor0) ->
	%% Line 879
	case _cor2 of
	  %% Line 880
	  <{'x86_imm',_cor15}> when 'true' ->
	      %% Line 881
	      case apply 'translate_imm'/3
		       (_cor2, _cor0, 'false') of
		<{_X_ImmSize,ImmValue}> when 'true' ->
		    let <_cor5> =
			%% Line 883
			case _cor1 of
			  %% Line 884
			  <{'x86_temp',0,_cor16,_cor17}> when 'true' ->
			      'rax'
			  %% Line 885
			  <{'x86_temp',_cor18,_cor19,_cor20}> when 'true' ->
			      apply 'temp_to_rmArch'/1
				  (_cor1)
			  %% Line 886
			  <{'x86_mem',_cor21,_cor22,_cor23}> when 'true' ->
			      apply 'mem_to_rmArch'/1
				  (_cor1)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 888
			{_cor5,{'imm32',ImmValue}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 889
	  <{'x86_temp',_cor24,_cor25,_cor26}> when 'true' ->
	      let <_cor8> =
		  %% Line 891
		  case _cor1 of
		    %% Line 892
		    <{'x86_temp',_cor27,_cor28,_cor29}> when 'true' ->
			apply 'temp_to_rmArch'/1
			    (_cor1)
		    %% Line 893
		    <{'x86_mem',_cor30,_cor31,_cor32}> when 'true' ->
			apply 'mem_to_rmArch'/1
			    (_cor1)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 895
		      apply 'temp_to_regArch'/1
			  (_cor2)
		  in  %% Line 895
		      {_cor8,_cor10}
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'resolve_shift_args'/3 =
    %% Line 899
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 901
	    case _cor1 of
	      %% Line 902
	      <{'x86_temp',_cor12,_cor13,_cor14}> when 'true' ->
		  apply 'temp_to_rmArch'/1
		      (_cor1)
	      %% Line 903
	      <{'x86_mem',_cor15,_cor16,_cor17}> when 'true' ->
		  apply 'mem_to_rmArch'/1
		      (_cor1)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  let <_cor7> =
		%% Line 906
		case _cor2 of
		  %% Line 907
		  <{'x86_imm',1}> when 'true' ->
		      1
		  %% Line 908
		  <{'x86_imm',_cor18}> when 'true' ->
		      apply 'translate_imm'/3
			  (_cor2, _cor0, 'true')
		  %% Line 909
		  <{'x86_temp',1,_cor19,_cor20}> when 'true' ->
		      'cl'
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 911
		{_cor4,_cor7}
'resolve_x87_unop_arg'/1 =
    %% Line 914
    fun (_cor0) ->
	case _cor0 of
	  <Arg = {'x86_mem',_cor9,_cor10,Type}> when 'true' ->
	      %% Line 915
	      case Type of
		%% Line 916
		<'double'> when 'true' ->
		    let <_cor1> =
			apply 'mem_to_rm64fp'/1
			    (Arg)
		    in  {_cor1}
		%% Line 917
		<'untagged'> when 'true' ->
		    let <_cor2> =
			apply 'mem_to_rmArch'/1
			    (Arg)
		    in  {_cor2}
		%% Line 918
		<_cor11> when 'true' ->
		    do  call 'io':'format'
			    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'fmovArgNotSupported',{Arg}}|['hipe_amd64_assemble'|[918]]])
			call 'erlang':'error'
			    ({'hipe_amd64_assemble',918,{'fmovArgNotSupported',{Arg}}})
	      end
	  %% Line 920
	  <Arg = {'x86_fpreg',_cor12,_cor13}> when 'true' ->
	      let <_cor7> =
		  %% Line 921
		  apply 'fpreg_to_stack'/1
		      (Arg)
	      in  %% Line 921
		  {_cor7}
	  %% Line 922
	  <[]> when 'true' ->
	      %% Line 923
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'resolve_x87_unop_arg',1}}] )
	    -| ['compiler_generated'] )
	end
'resolve_x87_binop_args'/2 =
    %% Line 926
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Src = {'x86_fpreg',_cor8,_cor9},Dst = {'x86_mem',_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor3> =
		  %% Line 927
		  apply 'mem_to_rm64fp'/1
		      (Dst)
	      in  let <_cor2> =
		      %% Line 927
		      apply 'fpreg_to_stack'/1
			  (Src)
		  in  %% Line 927
		      {_cor3,_cor2}
	  %% Line 929
	  <Src = {'x86_fpreg',_cor13,_cor14},Dst = {'x86_fpreg',_cor15,_cor16}> when 'true' ->
	      let <_cor5> =
		  %% Line 930
		  apply 'fpreg_to_stack'/1
		      (Dst)
	      in  let <_cor4> =
		      %% Line 930
		      apply 'fpreg_to_stack'/1
			  (Src)
		  in  %% Line 930
		      {_cor5,_cor4}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'resolve_x87_binop_args',2}}] )
	    -| ['compiler_generated'] )
	end
'print'/3 =
    %% Line 938
    fun (_cor2,_cor1,_cor0) ->
	%% Line 939
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      call 'io':'format'
		  (_cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'print_insn'/4 =
    %% Line 941
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 942
	    case call 'proplists':'get_bool'
		     ('pp_asm', _cor0) of
	      <'true'> when 'true' ->
		  apply 'print_insn_2'/3
		      (_cor3, _cor2, _cor1)
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	    %% Line 943
	    case call 'proplists':'get_bool'
		     ('pp_cxmon', _cor0) of
	      <'true'> when 'true' ->
		  apply 'print_code_list_2'/1
		      (_cor2)
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'print_code_list_2'/1 =
    %% Line 945
    fun (_cor0) ->
	case _cor0 of
	  <[H|Tail]> when 'true' ->
	      do  %% Line 946
		  apply 'print_byte'/1
		      (H)
		  do  %% Line 947
		      call 'io':'format'
			  ([44])
		      %% Line 948
		      apply 'print_code_list_2'/1
			  (Tail)
	  %% Line 949
	  <[]> when 'true' ->
	      %% Line 950
	      call 'io':'format'
		  ([])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'print_code_list_2',1}}] )
	    -| ['compiler_generated'] )
	end
'print_insn_2'/3 =
    %% Line 952
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Address,Bytes,{_cor6,_cor7,OrigI}> when 'true' ->
	      do  %% Line 953
		  call 'io':'format'
		      ([126|[56|[46|[49|[54|[98|[32|[124|[32]]]]]]]]], [Address|[]])
		  do  %% Line 954
		      apply 'print_code_list'/2
			  (Bytes, 0)
		      %% Line 955
		      call 'hipe_amd64_pp':'pp_insn'
			  (OrigI)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'print_insn_2',3}}] )
	    -| ['compiler_generated'] )
	end
'print_code_list'/2 =
    %% Line 957
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Byte|Rest],Len> when 'true' ->
	      do  %% Line 958
		  apply 'print_byte'/1
		      (Byte)
		  let <_cor2> =
		      %% Line 959
		      call 'erlang':'+'
			  (Len, 1)
		  in  %% Line 959
		      apply 'print_code_list'/2
			  (Rest, _cor2)
	  %% Line 960
	  <[],Len> when 'true' ->
	      let <_cor3> =
		  %% Line 961
		  call 'erlang':'*'
		      (Len, 2)
	      in  let <_cor4> =
		      %% Line 961
		      call 'erlang':'-'
			  (24, _cor3)
		  in  do  %% Line 961
			  apply 'fill_spaces'/1
			      (_cor4)
			  %% Line 962
			  call 'io':'format'
			      ([32|[124|[32]]])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'print_code_list',2}}] )
	    -| ['compiler_generated'] )
	end
'print_byte'/1 =
    %% Line 964
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 965
	    call 'erlang':'band'
		(_cor0, 255)
	in  %% Line 965
	    call 'io':'format'
		([126|[50|[46|[49|[54|[46|[48|[98]]]]]]]], [_cor1|[]])
'fill_spaces'/1 =
    %% Line 967
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      do  %% Line 968
		  call 'io':'format'
		      ([32])
		  let <_cor1> =
		      %% Line 969
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 969
		      apply 'fill_spaces'/1
			  (_cor1)
	  %% Line 970
	  <0> when 'true' ->
	      %% Line 971
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fill_spaces',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_assemble')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_assemble', _cor0)
end