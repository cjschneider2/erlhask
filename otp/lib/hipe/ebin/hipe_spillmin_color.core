module 'hipe_spillmin_color' ['module_info'/0,
			      'module_info'/1,
			      'stackalloc'/6]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'stackalloc',6},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'record',[{'atom',68,'cfg'}]}|[{'type',68,'list',[{'var',68,'_'}]}|[{'type',68,'non_neg_integer',[]}|[{'type',69,'comp_options',[]}|[{'type',69,'module',[]}|[{'type',69,'hipe_temp_map',[]}]]]]]]}|[{'type',70,'tuple',[{'type',70,'hipe_spill_map',[]}|[{'type',70,'non_neg_integer',[]}]]}]]}]}],
		%% Line 461
		'type' =
		    %% Line 461
		    [{{'record','ig_info'},[{'typed_record_field',{'record_field',461,{'atom',461,'neighbors'},{'nil',461}},{'type',461,'list',[{'var',461,'_'}]}}|[{'typed_record_field',{'record_field',461,{'atom',461,'degree'},{'integer',461,0}},{'type',461,'non_neg_integer',[]}}]],[]}]]
'stackalloc'/6 =
    %% Line 72
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 74
	case apply 'build_ig'/3
		 (_cor5, _cor1, _cor0) of
	  <{IG,NumNodes}> when 'true' ->
	      %% Line 75
	      case %% Line 76
		   apply 'color_heuristic'/7
		       (IG, 0, NumNodes, NumNodes, NumNodes, _cor1, 1) of
		<{Cols,MaxColors}> when 'true' ->
		    let <SortedCols> =
			%% Line 77
			call 'lists':'sort'
			    (Cols)
		    in  let <_cor10> =
			    %% Line 78
			    apply 'remap_temp_map'/3
				(SortedCols, _cor0, _cor3)
			in  let <_cor9> =
				%% Line 78
				call 'erlang':'+'
				    (_cor3, MaxColors)
			    in  %% Line 78
				{_cor10,_cor9}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'ceiling'/1 =
    %% Line 81
    fun (_cor0) ->
	let <T> =
	    %% Line 82
	    call 'erlang':'trunc'
		(_cor0)
	in  %% Line 83
	    case call 'erlang':'-'
		     (_cor0, T) of
	      %% Line 84
	      <Neg>
		  when call 'erlang':'<'
			(Neg,
			 0.00000000000000000000e+00) ->
		  T
	      %% Line 85
	      <Pos>
		  when call 'erlang':'>'
			(Pos,
			 0.00000000000000000000e+00) ->
		  call 'erlang':'+'
		      (T, 1)
	      %% Line 86
	      <_cor4> when 'true' ->
		  T
	    end
'color_heuristic'/7 =
    %% Line 110
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 111
	case _cor0 of
	  %% Line 112
	  <0> when 'true' ->
	      let <_cor7> =
		  %% Line 113
		  apply 'init_stackslots'/1
		      (_cor4)
	      in  let <_cor8> =
		      %% Line 113
		      call 'ordsets':'from_list'
			  (_cor7)
		  in  %% Line 113
		      case apply 'color'/4
			       (_cor6, _cor8, _cor2, _cor1) of
			%% Line 115
			<'not_easily_colorable'> when 'true' ->
			    let <_cor9> =
				%% Line 116
				apply 'init_stackslots'/1
				    (_cor3)
			    in  let <_cor10> =
				    %% Line 116
				    call 'ordsets':'from_list'
					(_cor9)
				in  %% Line 116
				    apply 'color'/4
					(_cor6, _cor10, _cor2, _cor1)
			%% Line 118
			<Else> when 'true' ->
			    %% Line 119
			    Else
		      end
	  %% Line 121
	  <_cor36> when 'true' ->
	      let <_cor12> =
		  %% Line 125
		  call 'erlang':'-'
		      (_cor4, _cor5)
	      in  %% Line 125
		  case <> of
		    %% Line 126
		    <>
			when call 'erlang':'<'
			      (_cor12,
			       2) ->
			let <_cor13> =
			    %% Line 127
			    apply 'init_stackslots'/1
				(_cor4)
			in  let <_cor14> =
				%% Line 127
				call 'ordsets':'from_list'
				    (_cor13)
			    in  %% Line 127
				case apply 'color'/4
					 (_cor6, _cor14, _cor2, _cor1) of
				  %% Line 129
				  <'not_easily_colorable'> when 'true' ->
				      let <_cor15> =
					  %% Line 130
					  apply 'init_stackslots'/1
					      (_cor3)
				      in  let <_cor16> =
					      %% Line 130
					      call 'ordsets':'from_list'
						  (_cor15)
					  in  %% Line 130
					      apply 'color'/4
						  (_cor6, _cor16, _cor2, _cor1)
				  %% Line 132
				  <Else> when 'true' ->
				      %% Line 133
				      Else
				end
		    %% Line 135
		    <> when 'true' ->
			let <_cor18> =
			    %% Line 136
			    call 'erlang':'-'
				(_cor4, _cor5)
			in  let <_cor19> =
				%% Line 136
				call 'erlang':'/'
				    (_cor18, 2)
			    in  let <_cor20> =
				    %% Line 136
				    apply 'ceiling'/1
					(_cor19)
				in  let <NumSlots> =
					%% Line 136
					call 'erlang':'+'
					    (_cor20, _cor5)
				    in  let <_cor22> =
					    %% Line 137
					    apply 'init_stackslots'/1
						(NumSlots)
					in  let <_cor23> =
						%% Line 137
						call 'ordsets':'from_list'
						    (_cor22)
					    in  %% Line 137
						case apply 'color'/4
							 (_cor6, _cor23, _cor2, _cor1) of
						  %% Line 139
						  <'not_easily_colorable'> when 'true' ->
						      let <_cor24> =
							  %% Line 141
							  call 'erlang':'-'
							      (_cor0, 1)
						      in  %% Line 140
							  apply 'color_heuristic'/7
							      (_cor6, NumSlots, _cor4, _cor3, _cor2, _cor1, _cor24)
						  %% Line 142
						  <{_X_TmpCols,TmpMaxColors}> when 'true' ->
						      let <_cor25> =
							  %% Line 144
							  call 'erlang':'-'
							      (_cor0, 1)
						      in  %% Line 143
							  apply 'color_heuristic'/7
							      (_cor6, _cor5, TmpMaxColors, %% Line 144
											   NumSlots, _cor2, _cor1, _cor25)
						  ( <_cor26> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor26})
						    -| ['compiler_generated'] )
						end
		  end
	end
'remap_temp_map'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 152
	    call 'hipe_temp_map':'to_substlist'
		(_cor1)
	in  %% Line 152
	    apply 'remap_temp_map0'/3
		(_cor2, _cor3, _cor0)
'remap_temp_map0'/3 =
    %% Line 154
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_TempMap,_X_SpillIndex> when 'true' ->
	      %% Line 155
	      []
	  %% Line 156
	  <[{_X_M,{'spill',N}}|Xs],[{TempNr,{'spill',_cor9}}|Ys],SpillIndex> when 'true' ->
	      let <_cor3> =
		  %% Line 157
		  call 'erlang':'+'
		      (SpillIndex, N)
	      in  let <_cor4> =
		      %% Line 157
		      call 'erlang':'-'
			  (_cor3, 1)
		  in  let <_cor5> =
			  %% Line 157
			  apply 'remap_temp_map0'/3
			      (Xs, Ys, SpillIndex)
		      in  %% Line 157
			  [{TempNr,{'spill',_cor4}}|_cor5]
	  %% Line 158
	  <Cols,[_X_Y|Ys],SpillIndex> when 'true' ->
	      %% Line 159
	      apply 'remap_temp_map0'/3
		  (Cols, Ys, SpillIndex)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'remap_temp_map0',3}}] )
	    -| ['compiler_generated'] )
	end
'build_ig'/3 =
    %% Line 169
    fun (_cor2,_cor1,_cor0) ->
	%% Line 170
	try
	    apply 'build_ig0'/3
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 171
	      <'error',Rsn,_cor10> when 'true' ->
		  call 'erlang':'exit'
		      ({'regalloc','build_ig',Rsn})
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'setup_ets'/1 =
    %% Line 178
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 179
	    call 'ets':'new'
		('tempMappingTable', [])
	in  %% Line 179
	    apply 'setup_ets0'/3
		(_cor0, _cor1, 0)
'setup_ets0'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Table,_X_N> when 'true' ->
	      %% Line 182
	      Table
	  %% Line 183
	  <[X|Xs],Table,N> when 'true' ->
	      do  %% Line 184
		  call 'ets':'insert'
		      (Table, {X,N})
		  let <_cor3> =
		      %% Line 185
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 185
		      apply 'setup_ets0'/3
			  (Xs, Table, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'setup_ets0',3}}] )
	    -| ['compiler_generated'] )
	end
'build_ig0'/3 =
    %% Line 187
    fun (_cor2,_cor1,_cor0) ->
	let <Live> =
	    %% Line 188
	    call _cor1:'analyze'
		(_cor2)
	in  let <TempMapping> =
		%% Line 189
		apply 'map_spilled_temporaries'/1
		    (_cor0)
	    in  let <TempMappingTable> =
		    %% Line 190
		    apply 'setup_ets'/1
			(TempMapping)
		in  let <NumSpilled> =
			%% Line 191
			call 'erlang':'length'
			    (TempMapping)
		    in  let <_cor8> =
			    %% Line 192
			    call _cor1:'labels'
				(_cor2)
			in  let <_cor7> =
				%% Line 192
				apply 'empty_ig'/1
				    (NumSpilled)
			    in  let <IG> =
				    %% Line 192
				    apply 'build_ig_bbs'/7
					(_cor8, _cor2, Live, _cor7, _cor1, _cor0, %% Line 193
										  TempMappingTable)
				in  do  %% Line 194
					call 'ets':'delete'
					    (TempMappingTable)
					let <_cor10> =
					    %% Line 195
					    apply 'normalize_ig'/1
						(IG)
					in  %% Line 195
					    {_cor10,NumSpilled}
'build_ig_bbs'/7 =
    %% Line 197
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_CFG,_X_Live,IG,_X_Target,_X_TempMap,_X_TempMapping> when 'true' ->
	      %% Line 198
	      IG
	  %% Line 199
	  <[L|Ls],CFG,Live,IG,Target,TempMap,TempMapping> when 'true' ->
	      let <Xs> =
		  %% Line 200
		  apply 'bb'/3
		      (CFG, L, Target)
	      in  let <_cor14> =
		      %% Line 201
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[X|_cor9]> when 'true' ->
					  %% Line 202
					  ( case call 'hipe_temp_map':'is_spilled'
						     (X, TempMap) of
					      <'true'> when 'true' ->
						  let <_cor12> =
						      apply 'lc$^0'/1
							  (_cor9)
						  in  ( [X|_cor12]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor9)
						-| ['compiler_generated'] )
					      ( <_cor13> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor13})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor10> =
				apply 'liveout'/3
				    (Live, L, Target)
			    in  apply 'lc$^0'/1
				    (_cor10)
			-| ['list_comprehension'] )
		  in  let <LiveOutList> =
			  %% Line 203
			  call 'ordsets':'to_list'
			      (_cor14)
		      in  let <LiveOutListMapped> =
			      %% Line 204
			      apply 'list_map'/3
				  (LiveOutList, TempMapping, [])
			  in  let <LiveOutSetMapped> =
				  %% Line 205
				  call 'ordsets':'from_list'
				      (LiveOutListMapped)
			      in  %% Line 206
				  case %% Line 207
				       apply 'build_ig_bb'/6
					   (Xs, LiveOutSetMapped, IG, Target, TempMap, TempMapping) of
				    <{_cor27,NewIG}> when 'true' ->
					%% Line 208
					apply 'build_ig_bbs'/7
					    (Ls, CFG, Live, NewIG, Target, TempMap, TempMapping)
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor19})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'build_ig_bbs',7}}] )
	    -| ['compiler_generated'] )
	end
'build_ig_bb'/6 =
    %% Line 210
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],LiveOut,IG,_X_Target,_X_TempMap,_X_TempMapping> when 'true' ->
	      %% Line 211
	      {LiveOut,IG}
	  %% Line 212
	  <[X|Xs],LiveOut,IG,Target,TempMap,TempMapping> when 'true' ->
	      %% Line 213
	      case %% Line 214
		   apply 'build_ig_bb'/6
		       (Xs, LiveOut, IG, Target, TempMap, TempMapping) of
		<{Live,NewIG}> when 'true' ->
		    %% Line 215
		    apply 'build_ig_instr'/6
			(X, Live, NewIG, Target, TempMap, TempMapping)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'build_ig_bb',6}}] )
	    -| ['compiler_generated'] )
	end
'build_ig_instr'/6 =
    %% Line 217
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 218
	case apply 'def_use'/3
		 (_cor5, _cor2, _cor1) of
	  <{Def,Use}> when 'true' ->
	      let <DefListMapped> =
		  %% Line 220
		  apply 'list_map'/3
		      (Def, _cor0, [])
	      in  let <UseListMapped> =
		      %% Line 221
		      apply 'list_map'/3
			  (Use, _cor0, [])
		  in  let <DefSetMapped> =
			  %% Line 222
			  call 'ordsets':'from_list'
			      (DefListMapped)
		      in  let <UseSetMapped> =
			      %% Line 223
			      call 'ordsets':'from_list'
				  (UseListMapped)
			  in  let <_cor11> =
				  %% Line 224
				  call 'ordsets':'to_list'
				      (_cor4)
			      in  let <NewIG> =
				      %% Line 224
				      apply 'interference_arcs'/3
					  (DefListMapped, _cor11, _cor3)
				  in  let <_cor13> =
					  %% Line 225
					  call 'ordsets':'subtract'
					      (_cor4, DefSetMapped)
				      in  let <NewLive> =
					      %% Line 225
					      call 'ordsets':'union'
						  (UseSetMapped, _cor13)
					  in  %% Line 226
					      {NewLive,NewIG}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'list_map'/3 =
    %% Line 230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Mapping,Acc> when 'true' ->
	      %% Line 231
	      Acc
	  %% Line 232
	  <[X|Xs],Mapping,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 233
		  call 'ets':'lookup'
		      (Mapping, X)
	      in  %% Line 233
		  case call 'erlang':'hd'
			   (_cor3) of
		    <{_X_Key,Val}> when 'true' ->
			%% Line 234
			apply 'list_map'/3
			    (Xs, Mapping, [Val|Acc])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'list_map',3}}] )
	    -| ['compiler_generated'] )
	end
'map_spilled_temporaries'/1 =
    %% Line 237
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 238
	    call 'hipe_temp_map':'to_substlist'
		(_cor0)
	in  %% Line 238
	    apply 'map_spilled_temporaries0'/1
		(_cor1)
'map_spilled_temporaries0'/1 =
    %% Line 240
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 241
	      []
	  %% Line 242
	  <[{N,{'spill',_cor3}}|Xs]> when 'true' ->
	      let <_cor1> =
		  %% Line 243
		  apply 'map_spilled_temporaries0'/1
		      (Xs)
	      in  %% Line 243
		  [N|_cor1]
	  %% Line 244
	  <[_X_X|Xs]> when 'true' ->
	      %% Line 245
	      apply 'map_spilled_temporaries0'/1
		  (Xs)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'map_spilled_temporaries0',1}}] )
	    -| ['compiler_generated'] )
	end
'interference_arcs'/3 =
    %% Line 249
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Live,IG> when 'true' ->
	      %% Line 250
	      IG
	  %% Line 251
	  <[X|Xs],Live,IG> when 'true' ->
	      let <_cor3> =
		  %% Line 252
		  apply 'i_arcs'/3
		      (X, Live, IG)
	      in  %% Line 252
		  apply 'interference_arcs'/3
		      (Xs, Live, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'interference_arcs',3}}] )
	    -| ['compiler_generated'] )
	end
'i_arcs'/3 =
    %% Line 254
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_X,[],IG> when 'true' ->
	      %% Line 255
	      IG
	  %% Line 256
	  <X,[Y|Ys],IG> when 'true' ->
	      let <_cor3> =
		  %% Line 257
		  apply 'add_edge'/3
		      (X, Y, IG)
	      in  %% Line 257
		  apply 'i_arcs'/3
		      (X, Ys, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'i_arcs',3}}] )
	    -| ['compiler_generated'] )
	end
'color'/4 =
    %% Line 275
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 276
	try
	    %% Line 277
	    apply 'color_0'/4
		(_cor3, _cor2, _cor1, _cor0)
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 279
	      <'error',Rsn,_cor19> when 'true' ->
		  do  %% Line 280
		      call 'code_server':'error_msg'
			  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[67|[111|[108|[111|[114|[105|[110|[103|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe_spillmin_color'|[280|[Rsn|[]]]])
		      do  %% Line 281
			  call 'io':'format'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Rsn|['hipe_spillmin_color'|[281]]])
			  %% Line 281
			  call 'erlang':'error'
			      ({'hipe_spillmin_color',281,Rsn})
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'color_0'/4 =
    %% Line 284
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <K> =
	    %% Line 286
	    call 'ordsets':'size'
		(_cor2)
	in  let <Nodes> =
		%% Line 287
		apply 'list_ig'/1
		    (_cor3)
	    in  let <Low> =
		    %% Line 288
		    apply 'low_degree_nodes'/2
			(Nodes, K)
		in  %% Line 291
		    case apply 'simplify'/6
			     (Low, _cor1, _cor3, K, [], _cor0) of
		      %% Line 292
		      <'non_simplifiable'> when 'true' ->
			  'not_easily_colorable'
		      %% Line 293
		      <Stk> when 'true' ->
			  %% Line 295
			  apply 'select'/4
			      (Stk, _cor3, _cor2, _cor1)
		    end
'simplify'/6 =
    %% Line 314
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Vis> =
	    %% Line 315
	    apply 'none_visited'/1
		(_cor4)
	in  %% Line 316
	    apply 'simplify_ig'/7
		(_cor5, _cor4, _cor3, _cor2, _cor1, Vis, _cor0)
'simplify_ig'/7 =
    %% Line 318
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],0,_X_IG,_X_K,Stk,_X_Vis,_X_Target> when 'true' ->
	      %% Line 319
	      Stk
	  %% Line 320
	  <[],N,_X_IG,_X_K,_X_Stk,_X_Vis,_X_Target>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      %% Line 322
	      'non_simplifiable'
	  %% Line 323
	  <[X|Xs],N,IG,K,Stk,Vis,Target> when 'true' ->
	      %% Line 325
	      case apply 'is_visited'/2
		       (X, Vis) of
		%% Line 326
		<'true'> when 'true' ->
		    %% Line 328
		    apply 'simplify_ig'/7
			(Xs, N, IG, K, Stk, Vis, Target)
		%% Line 329
		<'false'> when 'true' ->
		    %% Line 331
		    case apply 'decrement_neighbors'/5
			     (X, Xs, IG, Vis, K) of
		      <{NewLow,NewIG}> when 'true' ->
			  let <NewStk> =
			      %% Line 333
			      apply 'push_colored'/2
				  (X, Stk)
			  in  let <_cor10> =
				  %% Line 334
				  call 'erlang':'-'
				      (N, 1)
			      in  let <_cor9> =
				      %% Line 334
				      apply 'visit'/2
					  (X, Vis)
				  in  %% Line 334
				      apply 'simplify_ig'/7
					  (NewLow, _cor10, NewIG, K, NewStk, _cor9, Target)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'simplify_ig',7}}] )
	    -| ['compiler_generated'] )
	end
'decrement_neighbors'/5 =
    %% Line 337
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Ns> =
	    %% Line 338
	    apply 'unvisited_neighbors'/3
		(_cor4, _cor1, _cor2)
	in  %% Line 341
	    apply 'decrement_each'/5
		(Ns, _cor3, _cor2, _cor1, _cor0)
'decrement_each'/5 =
    %% Line 345
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],Low,IG,_X_Vis,_X_K> when 'true' ->
	      %% Line 346
	      {Low,IG}
	  %% Line 347
	  <[N|Ns],OldLow,IG,Vis,K> when 'true' ->
	      %% Line 348
	      case apply 'decrement_each'/5
		       (Ns, OldLow, IG, Vis, K) of
		<Res = {Low,CurrIG}> when 'true' ->
		    %% Line 349
		    case apply 'is_visited'/2
			     (N, Vis) of
		      %% Line 350
		      <'true'> when 'true' ->
			  %% Line 351
			  Res
		      %% Line 352
		      <'false'> when 'true' ->
			  %% Line 353
			  case apply 'decrement_degree'/2
				   (N, CurrIG) of
			    <{D,NewIG}> when 'true' ->
				%% Line 354
				case <> of
				  %% Line 355
				  <>
				      when try
					    let <_cor7> =
						call 'erlang':'-'
						    (K, 1)
					    in  call 'erlang':'=:='
						    (D, _cor7)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 356
				      {[N|Low],NewIG}
				  %% Line 357
				  <> when 'true' ->
				      %% Line 358
				      {Low,NewIG}
				end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'decrement_each',5}}] )
	    -| ['compiler_generated'] )
	end
'select'/4 =
    %% Line 370
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 371
	    apply 'none_colored'/1
		(_cor0)
	in  %% Line 371
	    apply 'select_colors'/4
		(_cor3, _cor2, _cor4, _cor1)
'select_colors'/4 =
    %% Line 373
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_IG,_X_Cols,_X_PhysRegs> when 'true' ->
	      %% Line 375
	      {[],0}
	  %% Line 376
	  <[{X,'colorable'}|Xs],IG,Cols,PhysRegs> when 'true' ->
	      %% Line 378
	      case apply 'select_color'/4
		       (X, IG, Cols, PhysRegs) of
		<{Slot,NewCols}> when 'true' ->
		    %% Line 380
		    case apply 'select_colors'/4
			     (Xs, IG, NewCols, PhysRegs) of
		      <{Tail,MaxColor}> when 'true' ->
			  let <NewMaxColor> =
			      %% Line 381
			      call 'erlang':'max'
				  (Slot, MaxColor)
			  in  %% Line 383
			      {[{X,{'spill',Slot}}|Tail],NewMaxColor}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'select_colors',4}}] )
	    -| ['compiler_generated'] )
	end
'select_color'/4 =
    %% Line 385
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 386
	    apply 'neighbors'/2
		(_cor3, _cor2)
	in  let <UsedColors> =
		%% Line 386
		apply 'get_colors'/2
		    (_cor4, _cor1)
	    in  let <Reg> =
		    %% Line 387
		    apply 'select_unused_color'/2
			(UsedColors, _cor0)
		in  let <_cor7> =
			%% Line 388
			apply 'set_color'/3
			    (_cor3, Reg, _cor1)
		    in  %% Line 388
			{Reg,_cor7}
'get_colors'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Cols> when 'true' ->
	      []
	  %% Line 393
	  <[X|Xs],Cols> when 'true' ->
	      %% Line 394
	      case apply 'color_of'/2
		       (X, Cols) of
		%% Line 395
		<'uncolored'> when 'true' ->
		    %% Line 396
		    apply 'get_colors'/2
			(Xs, Cols)
		%% Line 397
		<{'color',R}> when 'true' ->
		    let <_cor2> =
			%% Line 398
			apply 'get_colors'/2
			    (Xs, Cols)
		    in  %% Line 398
			[R|_cor2]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_colors',2}}] )
	    -| ['compiler_generated'] )
	end
'select_unused_color'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	let <Summary> =
	    %% Line 402
	    call 'ordsets':'from_list'
		(_cor1)
	in  let <_cor3> =
		%% Line 403
		call 'ordsets':'subtract'
		    (_cor0, Summary)
	    in  let <AvailRegs> =
		    %% Line 403
		    call 'ordsets':'to_list'
			(_cor3)
		in  %% Line 404
		    call 'erlang':'hd'
			(AvailRegs)
'push_colored'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	%% Line 407
	[{_cor1,'colorable'}|_cor0]
'low_degree_nodes'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_K> when 'true' ->
	      []
	  %% Line 410
	  <[{N,Info}|Xs],K> when 'true' ->
	      let <Deg> =
		  %% Line 412
		  apply 'degree'/1
		      (Info)
	      in  %% Line 413
		  case <> of
		    %% Line 414
		    <>
			when call 'erlang':'<'
			      (Deg,
			       K) ->
			let <_cor3> =
			    %% Line 415
			    apply 'low_degree_nodes'/2
				(Xs, K)
			in  %% Line 415
			    [N|_cor3]
		    %% Line 416
		    <> when 'true' ->
			%% Line 417
			apply 'low_degree_nodes'/2
			    (Xs, K)
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'low_degree_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'unvisited_neighbors'/3 =
    %% Line 422
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 423
	    apply 'neighbors'/2
		(_cor2, _cor0)
	in  let <_cor4> =
		%% Line 423
		apply 'unvisited'/2
		    (_cor3, _cor1)
	    in  %% Line 423
		call 'ordsets':'from_list'
		    (_cor4)
'unvisited'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Vis> when 'true' ->
	      []
	  %% Line 426
	  <[X|Xs],Vis> when 'true' ->
	      %% Line 427
	      case apply 'is_visited'/2
		       (X, Vis) of
		%% Line 428
		<'true'> when 'true' ->
		    %% Line 429
		    apply 'unvisited'/2
			(Xs, Vis)
		%% Line 430
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 431
			apply 'unvisited'/2
			    (Xs, Vis)
		    in  %% Line 431
			[X|_cor2]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'unvisited',2}}] )
	    -| ['compiler_generated'] )
	end
'init_stackslots'/1 =
    %% Line 444
    fun (_cor0) ->
	%% Line 445
	apply 'init_stackslots'/2
	    (_cor0, [])
'init_stackslots'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      %% Line 448
	      Acc
	  %% Line 449
	  <NumSlots,Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 450
		  call 'erlang':'-'
		      (NumSlots, 1)
	      in  %% Line 450
		  apply 'init_stackslots'/2
		      (_cor2, [NumSlots|Acc])
	end
'empty_ig'/1 =
    %% Line 463
    fun (_cor0) ->
	%% Line 464
	call 'hipe_vectors':'new'
	    (_cor0, {'ig_info',[],0})
'degree'/1 =
    %% Line 466
    fun (_cor0) ->
	%% Line 467
	( case _cor0 of
	    ( <( {'ig_info',_cor3,_rec0}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ig_info'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'neighbors'/1 =
    %% Line 469
    fun (_cor0) ->
	%% Line 470
	( case _cor0 of
	    ( <( {'ig_info',_rec1,_cor3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec1
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ig_info'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_edge'/3 =
    %% Line 472
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,_cor7,IG>
	      when call 'erlang':'=:='
		    (_cor7,
		     X) ->
	      IG
	  %% Line 473
	  <X,Y,IG> when 'true' ->
	      let <_cor3> =
		  %% Line 474
		  apply 'add_arc'/3
		      (Y, X, IG)
	      in  %% Line 474
		  apply 'add_arc'/3
		      (X, Y, _cor3)
	end
'add_arc'/3 =
    %% Line 476
    fun (_cor2,_cor1,_cor0) ->
	let <Info> =
	    %% Line 477
	    call 'hipe_vectors':'get'
		(_cor0, _cor2)
	in  let <Old> =
		%% Line 478
		apply 'neighbors'/1
		    (Info)
	    in  let <_rec2> =
		    %% Line 479
		    [_cor1|Old]
		in  %% Line 479
		    case Info of
		      <{'ig_info',_cor13,_cor14}> when 'true' ->
			  let <_cor8> =
			      call 'erlang':'setelement'
				  (2, Info, _rec2)
			  in  %% Line 480
			      call 'hipe_vectors':'set'
				  (_cor0, _cor2, _cor8)
		      ( <_cor15> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ig_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'normalize_ig'/1 =
    %% Line 482
    fun (_cor0) ->
	let <Size> =
	    %% Line 483
	    call 'hipe_vectors':'size'
		(_cor0)
	in  let <_cor2> =
		%% Line 484
		call 'erlang':'-'
		    (Size, 1)
	    in  %% Line 484
		apply 'normalize_ig'/2
		    (_cor2, _cor0)
'normalize_ig'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <-1,IG> when 'true' ->
	      %% Line 487
	      IG
	  %% Line 488
	  <I,IG> when 'true' ->
	      let <Info> =
		  %% Line 489
		  call 'hipe_vectors':'get'
		      (IG, I)
	      in  let <_cor3> =
		      %% Line 490
		      apply 'neighbors'/1
			  (Info)
		  in  let <N> =
			  %% Line 490
			  call 'ordsets':'from_list'
			      (_cor3)
		      in  let <_rec4> =
			      %% Line 491
			      call 'erlang':'length'
				  (N)
			  in  %% Line 491
			      case Info of
				<{'ig_info',_rec6,_rec7}> when 'true' ->
				    let <_cor8> = {'ig_info',N,_rec4}
				    in  let <NewIG> =
					    %% Line 492
					    call 'hipe_vectors':'set'
						(IG, I, _cor8)
					in  let <_cor11> =
						%% Line 493
						call 'erlang':'-'
						    (I, 1)
					    in  %% Line 493
						apply 'normalize_ig'/2
						    (_cor11, NewIG)
				( <_cor14> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','ig_info'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	end
'neighbors'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	%% Line 497
	( case call 'hipe_vectors':'get'
		   (_cor0, _cor1) of
	    ( <( {'ig_info',_rec8,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec8
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ig_info'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'decrement_degree'/2 =
    %% Line 499
    fun (_cor1,_cor0) ->
	let <Info> =
	    %% Line 500
	    call 'hipe_vectors':'get'
		(_cor0, _cor1)
	in  let <Degree> =
		%% Line 501
		apply 'degree'/1
		    (Info)
	    in  let <NewDegree> =
		    %% Line 502
		    call 'erlang':'-'
			(Degree, 1)
		in  %% Line 503
		    case Info of
		      <{'ig_info',_cor12,_cor13}> when 'true' ->
			  let <_cor7> =
			      call 'erlang':'setelement'
				  (3, Info, NewDegree)
			  in  let <_cor9> =
				  %% Line 504
				  call 'hipe_vectors':'set'
				      (_cor0, _cor1, _cor7)
			      in  %% Line 504
				  {NewDegree,_cor9}
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ig_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'list_ig'/1 =
    %% Line 506
    fun (_cor0) ->
	%% Line 507
	call 'hipe_vectors':'list'
	    (_cor0)
'none_colored'/1 =
    %% Line 513
    fun (_cor0) ->
	%% Line 514
	call 'hipe_vectors':'new'
	    (_cor0, 'uncolored')
'color_of'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	%% Line 517
	call 'hipe_vectors':'get'
	    (_cor0, _cor1)
'set_color'/3 =
    %% Line 519
    fun (_cor2,_cor1,_cor0) ->
	%% Line 520
	call 'hipe_vectors':'set'
	    (_cor0, _cor2, {'color',_cor1})
'none_visited'/1 =
    %% Line 528
    fun (_cor0) ->
	%% Line 529
	call 'hipe_vectors':'new'
	    (_cor0, 'false')
'visit'/2 =
    %% Line 531
    fun (_cor1,_cor0) ->
	%% Line 532
	call 'hipe_vectors':'set'
	    (_cor0, _cor1, 'true')
'is_visited'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	%% Line 535
	call 'hipe_vectors':'get'
	    (_cor0, _cor1)
'liveout'/3 =
    %% Line 542
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 543
	    call _cor0:'liveout'
		(_cor2, _cor1)
	in  let <_cor4> =
		%% Line 543
		apply 'reg_names'/2
		    (_cor3, _cor0)
	    in  %% Line 543
		call 'ordsets':'from_list'
		    (_cor4)
'bb'/3 =
    %% Line 545
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 546
	    call _cor0:'bb'
		(_cor2, _cor1)
	in  %% Line 546
	    call 'hipe_bb':'code'
		(_cor3)
'def_use'/3 =
    %% Line 548
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 549
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[Y|_cor4]> when 'true' ->
				%% Line 550
				( case call 'hipe_temp_map':'is_spilled'
					   (Y, _cor0) of
				    <'true'> when 'true' ->
					let <_cor8> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [Y|_cor8]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor4)
				      -| ['compiler_generated'] )
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor5> =
		      call _cor1:'defines'
			  (_cor2)
		  in  let <_cor6> =
			  apply 'reg_names'/2
			      (_cor5, _cor1)
		      in  apply 'lc$^0'/1
			      (_cor6)
	      -| ['list_comprehension'] )
	in  let <_cor19> =
		%% Line 551
		( letrec
		      'lc$^1'/1 =
			  fun (_cor16) ->
			      case _cor16 of
				<[Z|_cor13]> when 'true' ->
				    %% Line 552
				    ( case call 'hipe_temp_map':'is_spilled'
					       (Z, _cor0) of
					<'true'> when 'true' ->
					    let <_cor17> =
						apply 'lc$^1'/1
						    (_cor13)
					    in  ( [Z|_cor17]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor13)
					  -| ['compiler_generated'] )
					( <_cor18> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor18})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor16> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor16})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor14> =
			  call _cor1:'uses'
			      (_cor2)
		      in  let <_cor15> =
			      apply 'reg_names'/2
				  (_cor14, _cor1)
			  in  apply 'lc$^1'/1
				  (_cor15)
		  -| ['list_comprehension'] )
	    in  %% Line 553
		{_cor10,_cor19}
'reg_names'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	%% Line 556
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor3]> when 'true' ->
			    let <_cor5> =
				call _cor0:'reg_nr'
				    (X)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_spillmin_color')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_spillmin_color', _cor0)
end