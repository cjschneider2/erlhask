module 'hipe_digraph' ['add_edge'/3,
		       'add_node'/2,
		       'add_node_list'/2,
		       'from_list'/1,
		       'get_children'/2,
		       'get_parents'/2,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/0,
		       'reverse_preorder_sccs'/1,
		       'to_list'/1]
    attributes [%% Line 33
		'export_type' =
		    %% Line 33
		    [{'hdg',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'ordset',{'type',37,'list',[{'var',37,'T'}]},[{'var',37,'T'}]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','hipe_digraph'},[{'typed_record_field',{'record_field',39,{'atom',39,'edges'},{'call',39,{'remote',39,{'atom',39,'dict'},{'atom',39,'new'}},[]}},{'remote_type',39,[{'atom',39,'dict'}|[{'atom',39,'dict'}|[[]]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'rev_edges'},{'call',40,{'remote',40,{'atom',40,'dict'},{'atom',40,'new'}},[]}},{'remote_type',40,[{'atom',40,'dict'}|[{'atom',40,'dict'}|[[]]]]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'leaves'},{'call',41,{'remote',41,{'atom',41,'ordsets'},{'atom',41,'new'}},[]}},{'type',41,'ordset',[{'var',41,'_'}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'nodes'},{'call',42,{'remote',42,{'atom',42,'sets'},{'atom',42,'new'}},[]}},{'remote_type',42,[{'atom',42,'sets'}|[{'atom',42,'set'}|[[]]]]}}]]]],[]}],
		%% Line 44
		'opaque' =
		    %% Line 44
		    [{'hdg',{'type',44,'record',[{'atom',44,'hipe_digraph'}]},[]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'new',0},[{'type',48,'fun',[{'type',48,'product',[]}|[{'type',48,'hdg',[]}]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'from_list',1},[{'type',54,'fun',[{'type',54,'product',[{'type',54,'list',[{'var',54,'_'}]}]}|[{'type',54,'hdg',[]}]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'to_list',1},[{'type',75,'fun',[{'type',75,'product',[{'type',75,'hdg',[]}]}|[{'type',75,'list',[{'var',75,'_'}]}]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'add_node',2},[{'type',84,'fun',[{'type',84,'product',[{'var',84,'_'}|[{'type',84,'hdg',[]}]]}|[{'type',84,'hdg',[]}]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'add_node_list',2},[{'type',89,'fun',[{'type',89,'product',[{'type',89,'list',[{'var',89,'_'}]}|[{'type',89,'hdg',[]}]]}|[{'type',89,'hdg',[]}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'add_edge',3},[{'type',95,'fun',[{'type',95,'product',[{'var',95,'_'}|[{'var',95,'_'}|[{'type',95,'hdg',[]}]]]}|[{'type',95,'hdg',[]}]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'take_indep_scc',1},[{'type',111,'fun',[{'type',111,'product',[{'type',111,'hdg',[]}]}|[{'type',111,'union',[{'atom',111,'none'}|[{'type',111,'tuple',[{'atom',111,'ok'}|[{'type',111,'list',[{'var',111,'_'}]}|[{'type',111,'hdg',[]}]]]}]]}]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'reverse_preorder_sccs',1},[{'type',185,'fun',[{'type',185,'product',[{'type',185,'hdg',[]}]}|[{'type',185,'list',[{'type',185,'list',[{'var',185,'_'}]}]}]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'get_parents',2},[{'type',198,'fun',[{'type',198,'product',[{'var',198,'_'}|[{'type',198,'hdg',[]}]]}|[{'type',198,'list',[{'var',198,'_'}]}]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'get_children',2},[{'type',206,'fun',[{'type',206,'product',[{'var',206,'_'}|[{'type',206,'hdg',[]}]]}|[{'type',206,'list',[{'var',206,'_'}]}]]}]}]]
'new'/0 =
    %% Line 50
    fun () ->
	let <_cor3> =
	    %% Line 51
	    call 'dict':'new'
		()
	in  let <_cor2> =
		%% Line 51
		call 'dict':'new'
		    ()
	    in  let <_cor1> =
		    %% Line 52
		    call 'ordsets':'new'
			()
		in  let <_cor0> =
			%% Line 52
			call 'sets':'new'
			    ()
		    in  %% Line 51
			{'hipe_digraph',_cor3,_cor2,_cor1,_cor0}
'from_list'/1 =
    %% Line 56
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 57
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{From,To},Dict> when 'true' ->
			let <Fun> =
			    %% Line 58
			    ( fun (_cor2) ->
				  call 'ordsets':'add_element'
				      (To, _cor2)
			      -| [{'id',{0,0,'-from_list/1-fun-0-'}}] )
			in  %% Line 59
			    call 'dict':'update'
				(From, Fun, [To|[]], Dict)
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-from_list/1-fun-1-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-from_list/1-fun-1-'}}] )
	in  let <_cor1> =
		%% Line 61
		call 'dict':'new'
		    ()
	    in  let <Edges> =
		    %% Line 57
		    call 'lists':'foldl'
			(_cor9, _cor1, _cor0)
		in  let <_cor19> =
			%% Line 62
			( fun (_cor16,_cor15) ->
			      case <_cor16,_cor15> of
				<{From,To},Dict> when 'true' ->
				    let <Fun> =
					%% Line 63
					( fun (_cor12) ->
					      %% Line 64
					      call 'ordsets':'add_element'
						  (From, _cor12)
					  -| [{'id',{0,0,'-from_list/1-fun-2-'}}] )
				    in  %% Line 66
					call 'dict':'update'
					    (To, Fun, [From|[]], Dict)
				( <_cor18,_cor17> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor18,_cor17})
					-| [{'function_name',{'-from_list/1-fun-3-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-from_list/1-fun-3-'}}] )
		    in  let <_cor11> =
			    %% Line 68
			    call 'dict':'new'
				()
			in  let <RevEdges> =
				%% Line 62
				call 'lists':'foldl'
				    (_cor19, _cor11, _cor0)
			    in  let <_cor21> =
				    %% Line 69
				    call 'dict':'fetch_keys'
					(Edges)
				in  let <Keys1> =
					%% Line 69
					call 'sets':'from_list'
					    (_cor21)
				    in  let <_cor23> =
					    %% Line 70
					    call 'dict':'fetch_keys'
						(RevEdges)
					in  let <Keys2> =
						%% Line 70
						call 'sets':'from_list'
						    (_cor23)
					    in  let <Nodes> =
						    %% Line 71
						    call 'sets':'union'
							(Keys1, Keys2)
						in  %% Line 72
						    {'hipe_digraph',Edges,RevEdges,%% Line 73
										   [],%% Line 73
										      Nodes}
'to_list'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <{'hipe_digraph',Edges,_cor14,_cor15,_cor16}> when 'true' ->
	      let <List1> =
		  %% Line 78
		  call 'dict':'to_list'
		      (Edges)
	      in  let <_cor11> =
		      %% Line 79
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{From,ToList},Acc> when 'true' ->
				  let <_cor6> =
				      %% Line 80
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor4) ->
						    case _cor4 of
						      <[To|_cor3]> when 'true' ->
							  let <_cor5> =
							      apply 'lc$^0'/1
								  (_cor3)
							  in  ( [{From,To}|_cor5]
								-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor4> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor4})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(ToList)
					-| ['list_comprehension'] )
				  in  %% Line 80
				      [_cor6|Acc]
			      ( <_cor10,_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10,_cor9})
				      -| [{'function_name',{'-to_list/1-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-to_list/1-fun-0-'}}] )
		  in  let <List2> =
			  %% Line 79
			  call 'lists':'foldl'
			      (_cor11, %% Line 81
				       [], %% Line 81
					   List1)
		      in  %% Line 82
			  call 'lists':'flatten'
			      (List2)
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'add_node'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NewNode,DG = {'hipe_digraph',_cor7,_cor8,_cor9,Nodes}> when 'true' ->
	      let <_rec0> =
		  %% Line 87
		  call 'sets':'add_element'
		      (NewNode, Nodes)
	      in  %% Line 87
		  call 'erlang':'setelement'
		      (5, DG, _rec0)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_node',2}}] )
	    -| ['compiler_generated'] )
	end
'add_node_list'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NewNodes,DG = {'hipe_digraph',_cor8,_cor9,_cor10,Nodes}> when 'true' ->
	      let <Set> =
		  %% Line 92
		  call 'sets':'from_list'
		      (NewNodes)
	      in  let <_rec2> =
		      %% Line 93
		      call 'sets':'union'
			  (Set, Nodes)
		  in  %% Line 93
		      call 'erlang':'setelement'
			  (5, DG, _rec2)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'add_node_list',2}}] )
	    -| ['compiler_generated'] )
	end
'add_edge'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <From,To,{'hipe_digraph',Edges,RevEdges,%% Line 98
						  Leaves,%% Line 98
							 Nodes}> when 'true' ->
	      let <Fun1> =
		  %% Line 99
		  ( fun (_cor3) ->
			call 'ordsets':'add_element'
			    (To, _cor3)
		    -| [{'id',{0,0,'-add_edge/3-fun-0-'}}] )
	      in  let <NewEdges> =
		      %% Line 100
		      call 'dict':'update'
			  (From, Fun1, [To|[]], Edges)
		  in  let <Fun2> =
			  %% Line 101
			  ( fun (_cor7) ->
				call 'ordsets':'add_element'
				    (From, _cor7)
			    -| [{'id',{0,0,'-add_edge/3-fun-1-'}}] )
		      in  let <NewRevEdges> =
			      %% Line 102
			      call 'dict':'update'
				  (To, Fun2, [From|[]], RevEdges)
			  in  let <NewLeaves> =
				  %% Line 103
				  call 'ordsets':'del_element'
				      (From, Leaves)
			      in  let <_cor12> =
				      %% Line 107
				      call 'sets':'add_element'
					  (To, Nodes)
				  in  let <_cor13> =
					  %% Line 107
					  call 'sets':'add_element'
					      (From, _cor12)
				      in  %% Line 104
					  {'hipe_digraph',NewEdges,%% Line 105
								   NewRevEdges,%% Line 106
									       NewLeaves,_cor13}
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'add_edge',3}}] )
	    -| ['compiler_generated'] )
	end
'take_indep_scc'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <DG = {'hipe_digraph',Edges,RevEdges,%% Line 114
					       Leaves,%% Line 114
						      Nodes}> when 'true' ->
	      let <_cor1> =
		  %% Line 115
		  call 'sets':'size'
		      (Nodes)
	      in  %% Line 115
		  case <> of
		    %% Line 116
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       0) ->
			'none'
		    %% Line 117
		    <> when 'true' ->
			let <SCC,NewLeaves> =
			    %% Line 119
			    case Leaves of
			      %% Line 120
			      <[H|T]> when 'true' ->
				  %% Line 121
				  <[H|[]],T>
			      %% Line 122
			      <[]> when 'true' ->
				  %% Line 123
				  case apply 'find_all_leaves'/1
					   (Edges) of
				    %% Line 124
				    <[]> when 'true' ->
					%% Line 125
					case apply 'dfs'/2
						 (Nodes, RevEdges) of
					  <{[Node|_cor18],_cor19}> when 'true' ->
					      %% Line 126
					      case apply 'dfs'/2
						       (Node, Edges) of
						<{SCC1,_cor20}> when 'true' ->
						    %% Line 127
						    <SCC1,[]>
						( <_cor3> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor3})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor2> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor2})
					    -| ['compiler_generated'] )
					end
				    %% Line 128
				    <[H|T]> when 'true' ->
					%% Line 129
					<[H|[]],T>
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			in  let <NewEdges> =
				%% Line 132
				apply 'remove_edges'/3
				    (SCC, Edges, RevEdges)
			    in  let <NewRevEdges> =
				    %% Line 133
				    apply 'remove_edges'/3
					(SCC, RevEdges, Edges)
				in  let <_cor10> =
					%% Line 134
					call 'sets':'from_list'
					    (SCC)
				    in  let <NewNodes> =
					    %% Line 134
					    call 'sets':'subtract'
						(Nodes, _cor10)
					in  let <_cor15> =
						%% Line 135
						apply 'reverse_preorder'/2
						    (SCC, Edges)
					    in  let <_cor14> =
						    %% Line 137
						    {'hipe_digraph',NewEdges,NewRevEdges,NewLeaves,NewNodes}
						in  %% Line 135
						    {'ok',_cor15,_cor14}
		  end
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'take_indep_scc',1}}] )
	    -| ['compiler_generated'] )
	end
'find_all_leaves'/1 =
    %% Line 140
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 141
	    ( fun (_cor3,_cor2,_cor1) ->
		  case <_cor3,_cor2,_cor1> of
		    <Key,[_cor10|[]],Acc>
			when call 'erlang':'=:='
			      (_cor10,
			       Key) ->
			[Key|Acc]
		    %% Line 142
		    <_cor11,_cor12,Acc> when 'true' ->
			Acc
		  end
	      -| [{'id',{0,0,'-find_all_leaves/1-fun-0-'}}] )
	in  let <List> =
		%% Line 141
		call 'dict':'fold'
		    (_cor7, %% Line 143
			    [], _cor0)
	    in  %% Line 144
		call 'ordsets':'from_list'
		    (List)
'remove_edges'/3 =
    %% Line 146
    fun (_cor2,_cor1,_cor0) ->
	let <Nodes> =
	    %% Line 147
	    call 'ordsets':'from_list'
		(_cor2)
	in  let <Fun> =
		%% Line 148
		( fun (_cor5,_cor4) ->
		      call 'dict':'erase'
			  (_cor5, _cor4)
		  -| [{'id',{0,0,'-remove_edges/3-fun-0-'}}] )
	    in  let <Edges1> =
		    %% Line 149
		    call 'lists':'foldl'
			(Fun, _cor1, Nodes)
		in  %% Line 150
		    apply 'remove_edges_in'/3
			(Nodes, Edges1, _cor0)
'remove_edges_in'/3 =
    %% Line 152
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Node|Nodes],Edges,RevEdges> when 'true' ->
	      let <_cor11> =
		  %% Line 154
		  case call 'dict':'find'
			   (Node, RevEdges) of
		    %% Line 155
		    <'error'> when 'true' ->
			%% Line 156
			Edges
		    %% Line 157
		    <{'ok',Set}> when 'true' ->
			let <Fun> =
			    %% Line 158
			    ( fun (_cor6,_cor5) ->
				  %% Line 159
				  case call 'dict':'find'
					   (_cor6, _cor5) of
				    %% Line 160
				    <'error'> when 'true' ->
					_cor5
				    %% Line 162
				    <{'ok',OldTo}> when 'true' ->
					%% Line 163
					case call 'ordsets':'del_element'
						 (Node, OldTo) of
					  %% Line 164
					  <[]> when 'true' ->
					      call 'dict':'store'
						  (_cor6, [_cor6|[]], _cor5)
					  %% Line 165
					  <NewSet> when 'true' ->
					      call 'dict':'store'
						  (_cor6, NewSet, _cor5)
					end
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-remove_edges_in/3-fun-0-'}}] )
			in  %% Line 169
			    call 'lists':'foldl'
				(Fun, Edges, Set)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 171
		  apply 'remove_edges_in'/3
		      (Nodes, _cor11, RevEdges)
	  %% Line 172
	  <[],Edges,_X_RevEdges> when 'true' ->
	      %% Line 173
	      Edges
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'remove_edges_in',3}}] )
	    -| ['compiler_generated'] )
	end
'reverse_preorder'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Nodes = [_cor13|[]],_X_Edges> when 'true' ->
	      %% Line 176
	      Nodes
	  %% Line 177
	  <Nodes = [N|_cor14],Edges> when 'true' ->
	      let <NodeSet> =
		  %% Line 178
		  call 'sets':'from_list'
		      (Nodes)
	      in  %% Line 179
		  case apply 'dfs'/2
			   (N, Edges) of
		    <{PreOrder,_cor15}> when 'true' ->
			let <_cor9> =
			    %% Line 180
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor6) ->
					  case _cor6 of
					    <[X|_cor5]> when 'true' ->
						( case call 'sets':'is_element'
							   (X, NodeSet) of
						    <'true'> when 'true' ->
							let <_cor7> =
							    apply 'lc$^0'/1
								(_cor5)
							in  ( [X|_cor7]
							      -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor5)
						      -| ['compiler_generated'] )
						    ( <_cor8> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor8})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor6> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor6})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (PreOrder)
			      -| ['list_comprehension'] )
			in  %% Line 181
			    call 'lists':'reverse'
				(_cor9)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'reverse_preorder',2}}] )
	    -| ['compiler_generated'] )
	end
'reverse_preorder_sccs'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	apply 'reverse_preorder_sccs'/2
	    (_cor0, [])
'reverse_preorder_sccs'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	%% Line 191
	case apply 'take_indep_scc'/1
		 (_cor1) of
	  %% Line 192
	  <'none'> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 193
	  <{'ok',SCC,DG1}> when 'true' ->
	      apply 'reverse_preorder_sccs'/2
		  (DG1, [SCC|_cor0])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_parents'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,{'hipe_digraph',_cor5,RevEdges,_cor6,_cor7}> when 'true' ->
	      %% Line 201
	      case call 'dict':'is_key'
		       (Node, RevEdges) of
		%% Line 202
		<'true'> when 'true' ->
		    call 'dict':'fetch'
			(Node, RevEdges)
		%% Line 203
		<'false'> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_parents',2}}] )
	    -| ['compiler_generated'] )
	end
'get_children'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,{'hipe_digraph',Edges,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 209
	      case call 'dict':'is_key'
		       (Node, Edges) of
		%% Line 210
		<'true'> when 'true' ->
		    call 'dict':'fetch'
			(Node, Edges)
		%% Line 211
		<'false'> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_children',2}}] )
	    -| ['compiler_generated'] )
	end
'dfs'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	%% Line 218
	case call 'sets':'is_set'
		 (_cor1) of
	  %% Line 219
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 220
		  call 'sets':'to_list'
		      (_cor1)
	      in  let <_cor2> =
		      %% Line 220
		      call 'sets':'new'
			  ()
		  in  %% Line 220
		      apply 'dfs'/4
			  (_cor3, _cor0, _cor2, [])
	  %% Line 221
	  <'false'> when 'true' ->
	      let <_cor4> =
		  %% Line 222
		  call 'sets':'new'
		      ()
	      in  %% Line 222
		  apply 'dfs'/4
		      ([_cor1|[]], _cor0, _cor4, [])
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'dfs'/4 =
    %% Line 225
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Node|Left],Edges,Visited,Order> when 'true' ->
	      %% Line 226
	      case call 'sets':'is_element'
		       (Node, Visited) of
		%% Line 227
		<'true'> when 'true' ->
		    %% Line 228
		    apply 'dfs'/4
			(Left, Edges, Visited, Order)
		%% Line 229
		<'false'> when 'true' ->
		    let <NewVisited> =
			%% Line 230
			call 'sets':'add_element'
			    (Node, Visited)
		    in  %% Line 231
			case call 'dict':'find'
				 (Node, Edges) of
			  %% Line 232
			  <'error'> when 'true' ->
			      %% Line 233
			      apply 'dfs'/4
				  (Left, Edges, NewVisited, [Node|Order])
			  %% Line 234
			  <{'ok',Succ}> when 'true' ->
			      %% Line 235
			      case apply 'dfs'/4
				       (Succ, Edges, NewVisited, Order) of
				<{NewOrder,NewVisited1}> when 'true' ->
				    %% Line 236
				    apply 'dfs'/4
					(Left, Edges, NewVisited1, [Node|NewOrder])
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 239
	  <[],_X_Edges,Visited,Order> when 'true' ->
	      %% Line 240
	      {Order,Visited}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'dfs',4}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_digraph')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_digraph', _cor0)
end