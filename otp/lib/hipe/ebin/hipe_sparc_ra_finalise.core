module 'hipe_sparc_ra_finalise' ['finalise'/3,
				 'module_info'/0,
				 'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'finalise'/3 =
    %% Line 25
    fun (_cor2,_cor1,_cor0) ->
	let <Code> =
	    %% Line 26
	    call 'hipe_sparc':'defun_code'
		(_cor2)
	in  %% Line 27
	    case call 'hipe_sparc':'defun_var_range'
		     (_cor2) of
	      <{_cor13,SpillLimit}> when 'true' ->
		  let <Map> =
		      %% Line 28
		      apply 'mk_ra_map'/2
			  (_cor1, SpillLimit)
		  in  let <FPMap1> =
			  %% Line 29
			  apply 'mk_ra_map_fp'/2
			      (_cor0, SpillLimit)
		      in  let <NewCode> =
			      %% Line 30
			      apply 'ra_code'/4
				  (Code, Map, FPMap1, [])
			  in  %% Line 31
			      case _cor2 of
				<{'defun',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
				    call 'erlang':'setelement'
					(4, _cor2, NewCode)
				( <_cor22> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','defun'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'ra_code'/4 =
    %% Line 33
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Map,FPMap,Accum> when 'true' ->
	      let <_cor4> =
		  %% Line 34
		  apply 'ra_insn'/3
		      (I, Map, FPMap)
	      in  %% Line 34
		  apply 'ra_code'/4
		      (Insns, Map, FPMap, [_cor4|Accum])
	  %% Line 35
	  <[],_X_Map,_X_FPMap,Accum> when 'true' ->
	      %% Line 36
	      call 'lists':'reverse'
		  (Accum)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ra_code',4}}] )
	    -| ['compiler_generated'] )
	end
'ra_insn'/3 =
    %% Line 38
    fun (_cor2,_cor1,_cor0) ->
	%% Line 39
	case _cor2 of
	  %% Line 40
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'ra_alu'/2
		  (_cor2, _cor1)
	  %% Line 41
	  <{'jmp',_cor11,_cor12,_cor13}> when 'true' ->
	      apply 'ra_jmp'/2
		  (_cor2, _cor1)
	  %% Line 43
	  <{'pseudo_call',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      apply 'ra_pseudo_call'/2
		  (_cor2, _cor1)
	  %% Line 44
	  <{'pseudo_move',_cor18,_cor19}> when 'true' ->
	      apply 'ra_pseudo_move'/2
		  (_cor2, _cor1)
	  %% Line 45
	  <{'pseudo_set',_cor20,_cor21}> when 'true' ->
	      apply 'ra_pseudo_set'/2
		  (_cor2, _cor1)
	  %% Line 46
	  <{'pseudo_tailcall',_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      apply 'ra_pseudo_tailcall'/2
		  (_cor2, _cor1)
	  %% Line 47
	  <{'rdy',_cor26}> when 'true' ->
	      apply 'ra_rdy'/2
		  (_cor2, _cor1)
	  %% Line 48
	  <{'sethi',_cor27,_cor28}> when 'true' ->
	      apply 'ra_sethi'/2
		  (_cor2, _cor1)
	  %% Line 49
	  <{'store',_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      apply 'ra_store'/2
		  (_cor2, _cor1)
	  %% Line 50
	  <{'fp_binary',_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      apply 'ra_fp_binary'/2
		  (_cor2, _cor0)
	  %% Line 51
	  <{'fp_unary',_cor37,_cor38,_cor39}> when 'true' ->
	      apply 'ra_fp_unary'/2
		  (_cor2, _cor0)
	  %% Line 52
	  <{'pseudo_fload',_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      apply 'ra_pseudo_fload'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 53
	  <{'pseudo_fmove',_cor44,_cor45}> when 'true' ->
	      apply 'ra_pseudo_fmove'/2
		  (_cor2, _cor0)
	  %% Line 54
	  <{'pseudo_fstore',_cor46,_cor47,_cor48}> when 'true' ->
	      apply 'ra_pseudo_fstore'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 55
	  <_cor49> when 'true' ->
	      _cor2
	end
'ra_alu'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'alu',_cor9,Src1,Src2,Dst},Map> when 'true' ->
	      let <NewSrc1> =
		  %% Line 59
		  apply 'ra_temp'/2
		      (Src1, Map)
	      in  let <NewSrc2> =
		      %% Line 60
		      apply 'ra_src'/2
			  (Src2, Map)
		  in  let <NewDst> =
			  %% Line 61
			  apply 'ra_temp'/2
			      (Dst, Map)
		      in  %% Line 62
			  {'alu',_cor9,NewSrc1,NewSrc2,NewDst}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_alu',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_jmp'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'jmp',Src1,Src2,_cor8},Map> when 'true' ->
	      let <NewSrc1> =
		  %% Line 65
		  apply 'ra_temp'/2
		      (Src1, Map)
	      in  let <NewSrc2> =
		      %% Line 66
		      apply 'ra_src'/2
			  (Src2, Map)
		  in  %% Line 67
		      {'jmp',NewSrc1,NewSrc2,_cor8}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_jmp',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_call'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_call',FunV,_cor7,_cor8,_cor9},Map> when 'true' ->
	      let <NewFunV> =
		  %% Line 76
		  apply 'ra_funv'/2
		      (FunV, Map)
	      in  %% Line 77
		  call 'erlang':'setelement'
		      (2, I, NewFunV)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_call',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_move'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_move',Src,Dst},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 80
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewDst> =
		      %% Line 81
		      apply 'ra_temp'/2
			  (Dst, Map)
		  in  %% Line 82
		      {'pseudo_move',NewSrc,NewDst}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_move',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_set'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_set',_cor7,Dst},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 85
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 86
		  call 'erlang':'setelement'
		      (3, I, NewDst)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_set',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_tailcall'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_tailcall',FunV,_cor9,StkArgs,_cor10},Map> when 'true' ->
	      let <NewFunV> =
		  %% Line 89
		  apply 'ra_funv'/2
		      (FunV, Map)
	      in  let <NewStkArgs> =
		      %% Line 90
		      apply 'ra_args'/2
			  (StkArgs, Map)
		  in  let <_cor5> =
			  %% Line 91
			  call 'erlang':'setelement'
			      (4, I, NewStkArgs)
		      in  %% Line 91
			  call 'erlang':'setelement'
			      (2, _cor5, NewFunV)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_pseudo_tailcall',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_rdy'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'rdy',Dst},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 94
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 95
		  {'rdy',NewDst}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_rdy',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_sethi'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'sethi',_cor7,Dst},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 98
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 99
		  call 'erlang':'setelement'
		      (3, I, NewDst)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_sethi',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_store'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'store',_cor9,Src,Base,Disp},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 102
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewBase> =
		      %% Line 103
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  let <NewDisp> =
			  %% Line 104
			  apply 'ra_src'/2
			      (Disp, Map)
		      in  %% Line 105
			  {'store',_cor9,NewSrc,NewBase,NewDisp}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_store',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_fp_binary'/2 =
    %% Line 107
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_binary',_cor9,Src1,Src2,Dst},FPMap> when 'true' ->
	      let <NewSrc1> =
		  %% Line 108
		  apply 'ra_temp_fp'/2
		      (Src1, FPMap)
	      in  let <NewSrc2> =
		      %% Line 109
		      apply 'ra_temp_fp'/2
			  (Src2, FPMap)
		  in  let <NewDst> =
			  %% Line 110
			  apply 'ra_temp_fp'/2
			      (Dst, FPMap)
		      in  %% Line 111
			  {'fp_binary',_cor9,NewSrc1,NewSrc2,NewDst}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_fp_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_fp_unary'/2 =
    %% Line 113
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_unary',_cor8,Src,Dst},FPMap> when 'true' ->
	      let <NewSrc> =
		  %% Line 114
		  apply 'ra_temp_fp'/2
		      (Src, FPMap)
	      in  let <NewDst> =
		      %% Line 115
		      apply 'ra_temp_fp'/2
			  (Dst, FPMap)
		  in  %% Line 116
		      {'fp_unary',_cor8,NewSrc,NewDst}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_fp_unary',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_fload'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_fload',Base,_cor11,Dst,_cor12},Map,FPMap> when 'true' ->
	      let <NewBase> =
		  %% Line 119
		  apply 'ra_temp'/2
		      (Base, Map)
	      in  let <NewDst> =
		      %% Line 120
		      apply 'ra_temp_fp'/2
			  (Dst, FPMap)
		  in  let <_cor6> =
			  %% Line 121
			  call 'erlang':'setelement'
			      (4, I, NewDst)
		      in  %% Line 121
			  call 'erlang':'setelement'
			      (2, _cor6, NewBase)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ra_pseudo_fload',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_fmove'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_fmove',Src,Dst},FPMap> when 'true' ->
	      let <NewSrc> =
		  %% Line 124
		  apply 'ra_temp_fp'/2
		      (Src, FPMap)
	      in  let <NewDst> =
		      %% Line 125
		      apply 'ra_temp_fp'/2
			  (Dst, FPMap)
		  in  %% Line 126
		      {'pseudo_fmove',NewSrc,NewDst}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_fmove',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_fstore'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_fstore',Src,Base,_cor10},Map,FPMap> when 'true' ->
	      let <NewSrc> =
		  %% Line 129
		  apply 'ra_temp_fp'/2
		      (Src, FPMap)
	      in  let <NewBase> =
		      %% Line 130
		      apply 'ra_temp'/2
			  (Base, Map)
		  in  %% Line 131
		      {'pseudo_fstore',NewSrc,NewBase,_cor10}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ra_pseudo_fstore',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_args'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Arg|Args],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 136
		  apply 'ra_temp_or_imm'/2
		      (Arg, Map)
	      in  let <_cor3> =
		      %% Line 136
		      apply 'ra_args'/2
			  (Args, Map)
		  in  %% Line 136
		      [_cor2|_cor3]
	  %% Line 137
	  <[],_cor6> when 'true' ->
	      %% Line 138
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'ra_args',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_temp_or_imm'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	%% Line 141
	case call 'hipe_sparc':'is_temp'
		 (_cor1) of
	  %% Line 142
	  <'true'> when 'true' ->
	      %% Line 143
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 144
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'ra_funv'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	%% Line 151
	case _cor1 of
	  %% Line 152
	  <{'sparc_temp',_cor5,_cor6,_cor7}> when 'true' ->
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 153
	  <_cor8> when 'true' ->
	      _cor1
	end
'ra_src'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	%% Line 157
	case _cor1 of
	  %% Line 158
	  <{'sparc_temp',_cor5,_cor6,_cor7}> when 'true' ->
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 159
	  <_cor8> when 'true' ->
	      _cor1
	end
'ra_temp_fp'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	let <Reg> =
	    %% Line 163
	    call 'hipe_sparc':'temp_reg'
		(_cor1)
	in  %% Line 164
	    case call 'hipe_sparc':'temp_type'
		     (_cor1) of
	      <'double'> when 'true' ->
		  %% Line 165
		  case call 'hipe_sparc_registers':'is_precoloured_fpr'
			   (Reg) of
		    %% Line 166
		    <'true'> when 'true' ->
			_cor1
		    %% Line 167
		    <_cor7> when 'true' ->
			apply 'ra_temp_common'/3
			    (Reg, _cor1, _cor0)
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'ra_temp'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	let <Reg> =
	    %% Line 171
	    call 'hipe_sparc':'temp_reg'
		(_cor1)
	in  %% Line 172
	    case call 'hipe_sparc':'temp_type'
		     (_cor1) of
	      %% Line 173
	      <'double'> when 'true' ->
		  %% Line 174
		  call 'erlang':'exit'
		      ({'hipe_sparc_ra_finalise','ra_temp',_cor1})
	      %% Line 175
	      <_cor7> when 'true' ->
		  %% Line 176
		  case call 'hipe_sparc_registers':'is_precoloured_gpr'
			   (Reg) of
		    %% Line 177
		    <'true'> when 'true' ->
			_cor1
		    %% Line 178
		    <_cor8> when 'true' ->
			apply 'ra_temp_common'/3
			    (Reg, _cor1, _cor0)
		  end
	    end
'ra_temp_common'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	%% Line 183
	case call 'gb_trees':'lookup'
		 (_cor2, _cor0) of
	  %% Line 184
	  <{'value',NewReg}> when 'true' ->
	      case _cor1 of
		<{'sparc_temp',_cor9,_cor10,_cor11}> when 'true' ->
		    call 'erlang':'setelement'
			(2, _cor1, NewReg)
		( <_cor12> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','sparc_temp'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 185
	  <_cor13> when 'true' ->
	      _cor1
	end
'mk_ra_map'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 195
	    ( fun (_cor5,_cor4) ->
		  %% Line 196
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, 'is_precoloured_gpr') of
		    <{Key,Val}> when 'true' ->
			%% Line 197
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 199
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 195
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'conv_ra_maplet'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MapLet = {From,To},SpillLimit,IsPrecoloured> when 'true' ->
	      do  %% Line 204
		  case <> of
		    <>
			when let <_cor3> =
			      call 'erlang':'is_integer'
				  (From)
			  in  let <_cor4> =
				  call 'erlang':'=<'
				      (From, SpillLimit)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			%% Line 205
			case call 'hipe_sparc_registers':IsPrecoloured
				 (From) of
			  %% Line 206
			  <'false'> when 'true' ->
			      []
			  %% Line 207
			  <_cor17> when 'true' ->
			      %% Line 208
			      case To of
				%% Line 209
				<{'reg',_cor18}>
				    when call 'erlang':'=:='
					  (_cor18,
					   From) ->
				    []
				%% Line 210
				<_cor19> when 'true' ->
				    call 'erlang':'exit'
					({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
			      end
			end
		    %% Line 213
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
		  end
		  %% Line 216
		  case To of
		    %% Line 217
		    <{'reg',NewReg}> when 'true' ->
			do  %% Line 220
			    case <> of
			      <>
				  when call 'erlang':'is_integer'
					(NewReg) ->
				  %% Line 221
				  case call 'hipe_sparc_registers':IsPrecoloured
					   (NewReg) of
				    %% Line 222
				    <'true'> when 'true' ->
					[]
				    %% Line 223
				    <_cor20> when 'true' ->
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (From,
						     NewReg) ->
					      []
					  %% Line 224
					  <> when 'true' ->
					      %% Line 225
					      call 'erlang':'exit'
						  ({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
					end
				  end
			      %% Line 228
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    %% Line 231
			    {From,NewReg}
		    %% Line 232
		    <{'spill',SpillIndex}> when 'true' ->
			do  %% Line 234
			    case <> of
			      <>
				  when let <_cor8> =
					call 'erlang':'is_integer'
					    (SpillIndex)
				    in  let <_cor9> =
					    call 'erlang':'>='
						(SpillIndex, 0)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
				  []
			      %% Line 235
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    let <_cor10> =
				%% Line 238
				call 'erlang':'+'
				    (SpillLimit, SpillIndex)
			    in  let <ToTempNum> =
				    %% Line 238
				    call 'erlang':'+'
					(_cor10, 1)
				in  let <MaxTempNum> =
					%% Line 239
					call 'hipe_gensym':'get_var'
					    ('sparc')
				    in  do  %% Line 240
					    case <> of
					      <>
						  when call 'erlang':'>='
							(MaxTempNum,
							 ToTempNum) ->
						  'ok'
					      %% Line 241
					      <> when 'true' ->
						  call 'hipe_gensym':'set_var'
						      ('sparc', ToTempNum)
					    end
					    %% Line 243
					    {From,ToTempNum}
		    %% Line 244
		    <_cor21> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_sparc_ra_finalise','conv_ra_maplet',MapLet})
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'conv_ra_maplet',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_ra_map_fp'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 248
	    ( fun (_cor5,_cor4) ->
		  %% Line 249
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, %% Line 250
					  'is_precoloured_fpr') of
		    <{Key,Val}> when 'true' ->
			%% Line 251
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map_fp/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 253
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 248
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_finalise')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_finalise', _cor0)
end