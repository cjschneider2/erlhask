module 'hipe_icode_pp' ['module_info'/0,
			'module_info'/1,
			'pp'/1,
			'pp'/2,
			'pp_block'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'pp',1},[{'type',52,'fun',[{'type',52,'product',[{'type',52,'record',[{'atom',52,'icode'}]}]}|[{'atom',52,'ok'}]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'pp',2},[{'type',59,'fun',[{'type',59,'product',[{'remote_type',59,[{'atom',59,'io'}|[{'atom',59,'device'}|[[]]]]}|[{'type',59,'record',[{'atom',59,'icode'}]}]]}|[{'atom',59,'ok'}]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'pp_block',1},[{'type',83,'fun',[{'type',83,'product',[{'type',83,'icode_instrs',[]}]}|[{'atom',83,'ok'}]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'pp_instrs',2},[{'type',87,'fun',[{'type',87,'product',[{'remote_type',87,[{'atom',87,'io'}|[{'atom',87,'device'}|[[]]]]}|[{'type',87,'icode_instrs',[]}]]}|[{'atom',87,'ok'}]]}]}]]
'pp'/1 =
    %% Line 56
    fun (_cor0) ->
	%% Line 57
	apply 'pp'/2
	    ('standard_io', _cor0)
'pp'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	%% Line 64
	case call 'hipe_icode':'icode_fun'
		 (_cor0) of
	  <{Mod,Fun,Arity}> when 'true' ->
	      let <Args> =
		  %% Line 65
		  call 'hipe_icode':'icode_params'
		      (_cor0)
	      in  do  %% Line 66
		      call 'io':'format'
			  (_cor1, [126|[119|[58|[126|[119|[47|[126|[119|[40]]]]]]]]], [Mod|[Fun|[Arity|[]]]])
		      do  %% Line 67
			  apply 'pp_args'/2
			      (_cor1, Args)
			  do  %% Line 68
			      call 'io':'format'
				  (_cor1, [41|[32|[45|[62|[126|[110]]]]]], [])
			      let <_cor5> =
				  %% Line 70
				  case call 'hipe_icode':'icode_is_closure'
					   (_cor0) of
				    %% Line 71
				    <'true'> when 'true' ->
					'Closure'
				    %% Line 72
				    <'false'> when 'true' ->
					'Not a closure'
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      in  let <_cor7> =
				      %% Line 74
				      case call 'hipe_icode':'icode_is_leaf'
					       (_cor0) of
					%% Line 75
					<'true'> when 'true' ->
					    'Leaf function'
					%% Line 76
					<'false'> when 'true' ->
					    'Not a leaf function'
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor8> =
					  %% Line 78
					  call 'hipe_icode':'icode_info'
					      (_cor0)
				      in  do  %% Line 69
					      call 'io':'format'
						  (_cor1, [37|[37|[32|[73|[110|[102|[111|[58|[126|[112|[10]]]]]]]]]]], %% Line 70
														       [[_cor5|%% Line 74
															       [_cor7|_cor8]]|%% Line 78
																	      []])
					      let <_cor9> =
						  %% Line 79
						  call 'hipe_icode':'icode_code'
						      (_cor0)
					      in  do  %% Line 79
						      apply 'pp_instrs'/2
							  (_cor1, _cor9)
						      do  %% Line 80
							  call 'io':'format'
							      (_cor1, [37|[37|[32|[68|[97|[116|[97|[58|[10]]]]]]]]], [])
							  let <_cor10> =
							      %% Line 81
							      call 'hipe_icode':'icode_data'
								  (_cor0)
							  in  %% Line 81
							      call 'hipe_data_pp':'pp'
								  (_cor1, _cor10, 'icode', [])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'pp_block'/1 =
    %% Line 84
    fun (_cor0) ->
	%% Line 85
	apply 'pp_instrs'/2
	    ('standard_io', _cor0)
'pp_instrs'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 90
	    ( fun (_cor2) ->
		  apply 'pp_instr'/2
		      (_cor1, _cor2)
	      -| [{'id',{0,0,'-pp_instrs/2-fun-0-'}}] )
	in  %% Line 90
	    call 'lists':'foreach'
		(_cor4, _cor0)
'pp_instr'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	%% Line 95
	case _cor0 of
	  %% Line 96
	  <{'icode_label',_cor48}> when 'true' ->
	      let <_cor2> =
		  %% Line 97
		  call 'hipe_icode':'label_name'
		      (_cor0)
	      in  %% Line 97
		  call 'io':'format'
		      (_cor1, [126|[112|[58|[126|[110]]]]], [_cor2|[]])
	  %% Line 98
	  <{'icode_comment',_cor49}> when 'true' ->
	      let <Txt> =
		  %% Line 99
		  call 'hipe_icode':'comment_text'
		      (_cor0)
	      in  let <_cor5> =
		      %% Line 100
		      case call 'io_lib':'deep_char_list'
			       (Txt) of
			%% Line 101
			<'true'> when 'true' ->
			    Txt
			%% Line 102
			<'false'> when 'true' ->
			    call 'io_lib':'format'
				([126|[112]], [Txt|[]])
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 104
		      call 'io':'format'
			  (_cor1, [32|[32|[32|[32|[37|[32|[126|[115|[126|[110]]]]]]]]]], [_cor5|[]])
	  %% Line 105
	  <{'icode_phi',_cor50,_cor51,_cor52}> when 'true' ->
	      do  %% Line 106
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32]]]], [])
		  let <_cor7> =
		      %% Line 107
		      call 'hipe_icode':'phi_dst'
			  (_cor0)
		  in  do  %% Line 107
			  apply 'pp_arg'/2
			      (_cor1, _cor7)
			  do  %% Line 108
			      call 'io':'format'
				  (_cor1, [32|[58|[61|[32|[112|[104|[105|[40]]]]]]]], [])
			      let <_cor8> =
				  %% Line 109
				  call 'hipe_icode':'phi_arglist'
				      (_cor0)
			      in  do  %% Line 109
				      apply 'pp_phi_args'/2
					  (_cor1, _cor8)
				      %% Line 110
				      call 'io':'format'
					  (_cor1, [41|[126|[110]]], [])
	  %% Line 111
	  <{'icode_move',_cor53,_cor54}> when 'true' ->
	      do  %% Line 112
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32]]]], [])
		  let <_cor9> =
		      %% Line 113
		      call 'hipe_icode':'move_dst'
			  (_cor0)
		  in  do  %% Line 113
			  apply 'pp_arg'/2
			      (_cor1, _cor9)
			  do  %% Line 114
			      call 'io':'format'
				  (_cor1, [32|[58|[61|[32]]]], [])
			      let <_cor10> =
				  %% Line 115
				  call 'hipe_icode':'move_src'
				      (_cor0)
			      in  do  %% Line 115
				      apply 'pp_arg'/2
					  (_cor1, _cor10)
				      %% Line 116
				      call 'io':'format'
					  (_cor1, [126|[110]], [])
	  %% Line 117
	  <{'icode_call',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
	      do  %% Line 118
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32]]]], [])
		  do  %% Line 119
		      case call 'hipe_icode':'call_dstlist'
			       (_cor0) of
			%% Line 120
			<[]> when 'true' ->
			    %% Line 121
			    call 'io':'format'
				(_cor1, [95|[32|[58|[61|[32]]]]], [])
			%% Line 122
			<DstList> when 'true' ->
			    do  %% Line 123
				apply 'pp_args'/2
				    (_cor1, DstList)
				%% Line 124
				call 'io':'format'
				    (_cor1, [32|[58|[61|[32]]]], [])
		      end
		      let <_cor15> =
			  %% Line 126
			  call 'hipe_icode':'call_fun'
			      (_cor0)
		      in  let <_cor14> =
			      %% Line 127
			      call 'hipe_icode':'call_args'
				  (_cor0)
			  in  let <_cor13> =
				  %% Line 128
				  call 'hipe_icode':'call_type'
				      (_cor0)
			      in  let <_cor12> =
				      %% Line 129
				      call 'hipe_icode':'call_in_guard'
					  (_cor0)
				  in  do  %% Line 126
					  apply 'pp_fun'/5
					      (_cor1, _cor15, _cor14, _cor13, _cor12)
					  do  %% Line 130
					      case call 'hipe_icode':'call_continuation'
						       (_cor0) of
						%% Line 131
						<[]> when 'true' ->
						    'ok'
						%% Line 133
						<CC> when 'true' ->
						    %% Line 134
						    call 'io':'format'
							(_cor1, [32|[45|[62|[32|[126|[119]]]]]], [CC|[]])
					      end
					      %% Line 136
					      case call 'hipe_icode':'call_fail_label'
						       (_cor0) of
						%% Line 137
						<[]> when 'true' ->
						    call 'io':'format'
							(_cor1, [126|[110]], [])
						%% Line 138
						<Fail> when 'true' ->
						    call 'io':'format'
							(_cor1, [44|[32|[35|[102|[97|[105|[108|[32|[126|[119|[126|[110]]]]]]]]]]]], [Fail|[]])
					      end
	  %% Line 140
	  <{'icode_enter',_cor62,_cor63,_cor64}> when 'true' ->
	      do  %% Line 141
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32]]]], [])
		  let <_cor20> =
		      %% Line 142
		      call 'hipe_icode':'enter_fun'
			  (_cor0)
		  in  let <_cor19> =
			  %% Line 143
			  call 'hipe_icode':'enter_args'
			      (_cor0)
		      in  let <_cor18> =
			      %% Line 144
			      call 'hipe_icode':'enter_type'
				  (_cor0)
			  in  do  %% Line 142
				  apply 'pp_fun'/4
				      (_cor1, _cor20, _cor19, _cor18)
				  %% Line 145
				  call 'io':'format'
				      (_cor1, [126|[110]], [])
	  %% Line 146
	  <{'icode_return',_cor65}> when 'true' ->
	      do  %% Line 147
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[40]]]]]]]]]]], [])
		  let <_cor21> =
		      %% Line 148
		      call 'hipe_icode':'return_vars'
			  (_cor0)
		  in  do  %% Line 148
			  apply 'pp_args'/2
			      (_cor1, _cor21)
			  %% Line 149
			  call 'io':'format'
			      (_cor1, [41|[126|[110]]], [])
	  %% Line 150
	  <{'icode_begin_try',_cor66,_cor67}> when 'true' ->
	      let <_cor22> =
		  %% Line 152
		  call 'hipe_icode':'begin_try_label'
		      (_cor0)
	      in  let <_cor23> =
		      %% Line 153
		      call 'hipe_icode':'begin_try_successor'
			  (_cor0)
		  in  %% Line 151
		      call 'io':'format'
			  (_cor1, [32|[32|[32|[32|[98|[101|[103|[105|[110|[95|[116|[114|[121|[32|[45|[62|[32|[126|[119|[32|[99|[111|[110|[116|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 152
																								    [_cor22|%% Line 153
																									    [_cor23|[]]])
	  %% Line 154
	  <{'icode_begin_handler',_cor68}> when 'true' ->
	      do  %% Line 155
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32]]]], [])
		  let <_cor24> =
		      %% Line 156
		      call 'hipe_icode':'begin_handler_dstlist'
			  (_cor0)
		  in  do  %% Line 156
			  apply 'pp_args'/2
			      (_cor1, _cor24)
			  %% Line 157
			  call 'io':'format'
			      (_cor1, [32|[58|[61|[32|[98|[101|[103|[105|[110|[95|[104|[97|[110|[100|[108|[101|[114|[40|[41|[126|[110]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 158
	  <{'icode_end_try'}> when 'true' ->
	      %% Line 159
	      call 'io':'format'
		  (_cor1, [32|[32|[32|[32|[101|[110|[100|[95|[116|[114|[121|[126|[110]]]]]]]]]]]]], [])
	  %% Line 160
	  <{'icode_fail',_cor69,_cor70,_cor71}> when 'true' ->
	      let <Type> =
		  %% Line 161
		  call 'hipe_icode':'fail_class'
		      (_cor0)
	      in  do  %% Line 162
		      call 'io':'format'
			  (_cor1, [32|[32|[32|[32|[102|[97|[105|[108|[40|[126|[119|[44|[32|[91]]]]]]]]]]]]]], [Type|[]])
		      let <_cor26> =
			  %% Line 163
			  call 'hipe_icode':'fail_args'
			      (_cor0)
		      in  do  %% Line 163
			      apply 'pp_args'/2
				  (_cor1, _cor26)
			      %% Line 164
			      case call 'hipe_icode':'fail_label'
				       (_cor0) of
				%% Line 165
				<[]> when 'true' ->
				    call 'io':'put_chars'
					(_cor1, [93|[41|[10]]])
				%% Line 166
				<Fail> when 'true' ->
				    call 'io':'format'
					(_cor1, [93|[41|[32|[45|[62|[32|[126|[119|[10]]]]]]]]], [Fail|[]])
			      end
	  %% Line 168
	  <{'icode_if',_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
	      let <_cor28> =
		  %% Line 169
		  call 'hipe_icode':'if_op'
		      (_cor0)
	      in  do  %% Line 169
		      call 'io':'format'
			  (_cor1, [32|[32|[32|[32|[105|[102|[32|[126|[119|[40]]]]]]]]]], [_cor28|[]])
		      let <_cor29> =
			  %% Line 170
			  call 'hipe_icode':'if_args'
			      (_cor0)
		      in  do  %% Line 170
			      apply 'pp_args'/2
				  (_cor1, _cor29)
			      let <_cor30> =
				  %% Line 172
				  call 'hipe_icode':'if_true_label'
				      (_cor0)
			      in  let <_cor31> =
				      %% Line 172
				      call 'hipe_icode':'if_pred'
					  (_cor0)
				  in  let <_cor32> =
					  %% Line 173
					  call 'hipe_icode':'if_false_label'
					      (_cor0)
				      in  %% Line 171
					  call 'io':'format'
					      (_cor1, [41|[32|[116|[104|[101|[110|[32|[126|[112|[32|[40|[126|[46|[50|[102|[41|[32|[101|[108|[115|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 172
																									 [_cor30|[_cor31|%% Line 173
																											 [_cor32|[]]]])
	  %% Line 174
	  <{'icode_switch_val',_cor77,_cor78,_cor79,_cor80}> when 'true' ->
	      do  %% Line 175
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32|[115|[119|[105|[116|[99|[104|[95|[118|[97|[108|[32]]]]]]]]]]]]]]], [])
		  let <_cor33> =
		      %% Line 176
		      call 'hipe_icode':'switch_val_term'
			  (_cor0)
		  in  do  %% Line 176
			  apply 'pp_arg'/2
			      (_cor1, _cor33)
			  let <_cor34> =
			      %% Line 177
			      call 'hipe_icode':'switch_val_cases'
				  (_cor0)
			  in  do  %% Line 177
				  apply 'pp_switch_cases'/2
				      (_cor1, _cor34)
				  let <_cor35> =
				      %% Line 179
				      call 'hipe_icode':'switch_val_fail_label'
					  (_cor0)
				  in  %% Line 178
				      call 'io':'format'
					  (_cor1, [32|[32|[32|[32|[102|[97|[105|[108|[32|[45|[62|[32|[126|[119|[10]]]]]]]]]]]]]]], %% Line 179
																   [_cor35|[]])
	  %% Line 180
	  <{'icode_switch_tuple_arity',_cor81,_cor82,_cor83,_cor84}> when 'true' ->
	      do  %% Line 181
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32|[115|[119|[105|[116|[99|[104|[95|[116|[117|[112|[108|[101|[95|[97|[114|[105|[116|[121|[32]]]]]]]]]]]]]]]]]]]]]]], [])
		  let <_cor36> =
		      %% Line 182
		      call 'hipe_icode':'switch_tuple_arity_term'
			  (_cor0)
		  in  do  %% Line 182
			  apply 'pp_arg'/2
			      (_cor1, _cor36)
			  let <_cor37> =
			      %% Line 183
			      call 'hipe_icode':'switch_tuple_arity_cases'
				  (_cor0)
			  in  do  %% Line 183
				  apply 'pp_switch_cases'/2
				      (_cor1, _cor37)
				  let <_cor38> =
				      %% Line 185
				      call 'hipe_icode':'switch_tuple_arity_fail_label'
					  (_cor0)
				  in  %% Line 184
				      call 'io':'format'
					  (_cor1, [32|[32|[32|[32|[102|[97|[105|[108|[32|[45|[62|[32|[126|[119|[10]]]]]]]]]]]]]]], %% Line 185
																   [_cor38|[]])
	  %% Line 186
	  <{'icode_type',_cor85,_cor86,_cor87,_cor88,_cor89}> when 'true' ->
	      do  %% Line 187
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32|[105|[102|[32|[105|[115|[95]]]]]]]]]], [])
		  let <_cor39> =
		      %% Line 188
		      call 'hipe_icode':'type_test'
			  (_cor0)
		  in  do  %% Line 188
			  apply 'pp_type'/2
			      (_cor1, _cor39)
			  do  %% Line 189
			      call 'io':'format'
				  (_cor1, [40], [])
			      let <_cor40> =
				  %% Line 190
				  call 'hipe_icode':'type_args'
				      (_cor0)
			      in  do  %% Line 190
				      apply 'pp_args'/2
					  (_cor1, _cor40)
				      let <_cor41> =
					  %% Line 192
					  call 'hipe_icode':'type_true_label'
					      (_cor0)
				      in  let <_cor42> =
					      %% Line 192
					      call 'hipe_icode':'type_pred'
						  (_cor0)
					  in  let <_cor43> =
						  %% Line 193
						  call 'hipe_icode':'type_false_label'
						      (_cor0)
					      in  %% Line 191
						  call 'io':'format'
						      (_cor1, [41|[32|[116|[104|[101|[110|[32|[126|[112|[32|[40|[126|[46|[50|[102|[41|[32|[101|[108|[115|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 192
																										 [_cor41|[_cor42|%% Line 193
																												 [_cor43|[]]]])
	  %% Line 194
	  <{'icode_goto',_cor90}> when 'true' ->
	      let <_cor44> =
		  %% Line 195
		  call 'hipe_icode':'goto_label'
		      (_cor0)
	      in  %% Line 195
		  call 'io':'format'
		      (_cor1, [32|[32|[32|[32|[103|[111|[116|[111|[32|[126|[112|[126|[110]]]]]]]]]]]]], [_cor44|[]])
	  ( <_cor45> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor45})
	    -| ['compiler_generated'] )
	end
'pp_fun'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 199
	apply 'pp_fun'/5
	    (_cor3, _cor2, _cor1, _cor0, 'false')
'pp_fun'/5 =
    %% Line 201
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 202
	    case _cor1 of
	      %% Line 203
	      <'primop'> when 'true' ->
		  %% Line 204
		  call 'hipe_icode_primops':'pp'
		      (_cor4, _cor3)
	      %% Line 205
	      <'local'> when 'true' ->
		  %% Line 206
		  case _cor3 of
		    <{_cor16,F,A}> when 'true' ->
			%% Line 207
			call 'io':'format'
			    (_cor4, [126|[119|[47|[126|[119]]]]], [F|[A|[]]])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 208
	      <'remote'> when 'true' ->
		  %% Line 209
		  case _cor3 of
		    <{M,F,A}> when 'true' ->
			%% Line 210
			call 'io':'format'
			    (_cor4, [126|[119|[58|[126|[119|[47|[126|[119]]]]]]]], [M|[F|[A|[]]]])
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	    do  %% Line 212
		call 'io':'format'
		    (_cor4, [40], [])
		do  %% Line 213
		    apply 'pp_args'/2
			(_cor4, _cor2)
		    %% Line 214
		    case _cor0 of
		      %% Line 215
		      <'true'> when 'true' ->
			  %% Line 216
			  case _cor1 of
			    %% Line 217
			    <'primop'> when 'true' ->
				%% Line 218
				call 'io':'format'
				    (_cor4, [41|[32|[40|[112|[114|[105|[109|[111|[112|[44|[103|[117|[97|[114|[100|[41]]]]]]]]]]]]]]]], [])
			    %% Line 219
			    <_cor17> when 'true' ->
				%% Line 220
				call 'io':'format'
				    (_cor4, [41|[32|[40|[103|[117|[97|[114|[100|[41]]]]]]]]], [])
			  end
		      %% Line 222
		      <'false'> when 'true' ->
			  %% Line 223
			  case _cor1 of
			    %% Line 224
			    <'primop'> when 'true' ->
				%% Line 225
				call 'io':'format'
				    (_cor4, [41|[32|[40|[112|[114|[105|[109|[111|[112|[41]]]]]]]]]], [])
			    %% Line 226
			    <_cor18> when 'true' ->
				%% Line 227
				call 'io':'format'
				    (_cor4, [41], [])
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
'pp_arg'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	%% Line 232
	case call 'hipe_icode':'is_variable'
		 (_cor0) of
	  %% Line 233
	  <'true'> when 'true' ->
	      do  %% Line 234
		  case call 'hipe_icode':'is_var'
			   (_cor0) of
		    %% Line 235
		    <'true'> when 'true' ->
			let <N> =
			    %% Line 236
			    call 'hipe_icode':'var_name'
				(_cor0)
			in  %% Line 237
			    call 'io':'format'
				(_cor1, [118|[126|[112]]], [N|[]])
		    %% Line 238
		    <'false'> when 'true' ->
			%% Line 239
			case call 'hipe_icode':'is_reg'
				 (_cor0) of
			  %% Line 240
			  <'true'> when 'true' ->
			      let <N> =
				  %% Line 241
				  call 'hipe_icode':'reg_name'
				      (_cor0)
			      in  %% Line 242
				  call 'io':'format'
				      (_cor1, [114|[126|[112]]], [N|[]])
			  %% Line 243
			  <'false'> when 'true' ->
			      let <N> =
				  %% Line 244
				  call 'hipe_icode':'fvar_name'
				      (_cor0)
			      in  %% Line 245
				  call 'io':'format'
				      (_cor1, [102|[118|[126|[112]]]], [N|[]])
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
		  %% Line 248
		  case call 'hipe_icode':'is_annotated_variable'
			   (_cor0) of
		    %% Line 249
		    <'true'> when 'true' ->
			%% Line 250
			case call 'hipe_icode':'variable_annotation'
				 (_cor0) of
			  <{_cor14,Val,Fun}> when 'true' ->
			      let <_cor8> =
				  %% Line 251
				  apply Fun
				      (Val)
			      in  %% Line 251
				  call 'io':'format'
				      (_cor1, [32|[40|[126|[115|[41]]]]], [_cor8|[]])
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 252
		    <'false'> when 'true' ->
			%% Line 253
			'ok'
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 255
	  <'false'> when 'true' ->
	      let <Const> =
		  %% Line 256
		  call 'hipe_icode':'const_value'
		      (_cor0)
	      in  %% Line 257
		  call 'io':'format'
		      (_cor1, [126|[112]], [Const|[]])
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'pp_args'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Dev,[]> when 'true' ->
	      'ok'
	  %% Line 261
	  <Dev,[A|[]]> when 'true' ->
	      %% Line 262
	      apply 'pp_arg'/2
		  (Dev, A)
	  %% Line 263
	  <Dev,[A|Args]> when 'true' ->
	      do  %% Line 264
		  apply 'pp_arg'/2
		      (Dev, A)
		  do  %% Line 265
		      call 'io':'format'
			  (Dev, [44|[32]], [])
		      %% Line 266
		      apply 'pp_args'/2
			  (Dev, Args)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pp_args',2}}] )
	    -| ['compiler_generated'] )
	end
'pp_phi_args'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Dev,[]> when 'true' ->
	      'ok'
	  %% Line 269
	  <Dev,[{Pred,A}|[]]> when 'true' ->
	      do  %% Line 270
		  call 'io':'format'
		      (Dev, [123|[126|[119|[44|[32]]]]], [Pred|[]])
		  do  %% Line 271
		      apply 'pp_arg'/2
			  (Dev, A)
		      %% Line 272
		      call 'io':'format'
			  (Dev, [125], [])
	  %% Line 273
	  <Dev,[{Pred,A}|Args]> when 'true' ->
	      do  %% Line 274
		  call 'io':'format'
		      (Dev, [123|[126|[119|[44|[32]]]]], [Pred|[]])
		  do  %% Line 275
		      apply 'pp_arg'/2
			  (Dev, A)
		      do  %% Line 276
			  call 'io':'format'
			      (Dev, [125|[44|[32]]], [])
			  %% Line 277
			  apply 'pp_phi_args'/2
			      (Dev, Args)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pp_phi_args',2}}] )
	    -| ['compiler_generated'] )
	end
'pp_type'/2 =
    %% Line 279
    fun (_cor1,_cor0) ->
	%% Line 280
	call 'io':'format'
	    (_cor1, [126|[119]], [_cor0|[]])
'pp_switch_cases'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	do  %% Line 283
	    call 'io':'format'
		(_cor1, [32|[111|[102|[10]]]], [])
	    do  %% Line 284
		apply 'pp_switch_cases'/3
		    (_cor1, _cor0, 1)
		%% Line 285
		call 'io':'format'
		    (_cor1, [], [])
'pp_switch_cases'/3 =
    %% Line 287
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dev,[{Val,L}|[]],_X_Pos> when 'true' ->
	      do  %% Line 288
		  call 'io':'format'
		      (Dev, [32|[32|[32|[32|[32|[32|[32|[32]]]]]]]], [])
		  do  %% Line 289
		      apply 'pp_arg'/2
			  (Dev, Val)
		      %% Line 290
		      call 'io':'format'
			  (Dev, [32|[45|[62|[32|[126|[119|[10]]]]]]], [L|[]])
	  %% Line 291
	  <Dev,[{Val,L}|Ls],Pos> when 'true' ->
	      do  %% Line 292
		  call 'io':'format'
		      (Dev, [32|[32|[32|[32|[32|[32|[32|[32]]]]]]]], [])
		  do  %% Line 293
		      apply 'pp_arg'/2
			  (Dev, Val)
		      do  %% Line 294
			  call 'io':'format'
			      (Dev, [32|[45|[62|[32|[126|[119|[59|[10]]]]]]]], [L|[]])
			  %% Line 301
			  apply 'pp_switch_cases'/3
			      (Dev, Ls, Pos)
	  %% Line 302
	  <_X_Dev,[],_cor7> when 'true' ->
	      'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pp_switch_cases',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_pp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_pp', _cor0)
end