module 'hipe_sparc_assemble' ['assemble'/4,
			      'module_info'/0,
			      'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','sdi_info'},[{'typed_record_field',{'record_field',23,{'atom',23,'lb'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'integer',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'ub'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'incr'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'byte',[]}]]}}]]],[]}]]
'assemble'/4 =
    %% Line 32
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 33
	    apply 'print'/3
		([42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[65|[115|[115|[101|[109|[98|[108|[105|[110|[103|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], _cor0)
	    let <_cor10> =
		%% Line 35
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[%% Line 38
				  {MFA,Defun}|_cor5]> when 'true' ->
				    let <_cor8> =
					%% Line 36
					call 'hipe_sparc':'defun_code'
					    (Defun)
				    in  let <_cor7> =
					    %% Line 37
					    call 'hipe_sparc':'defun_data'
						(Defun)
					in  let <_cor9> =
						%% Line 38
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{MFA,_cor8,_cor7}|_cor9]
						  -| ['compiler_generated'] )
				( <[_cor4|_cor5]> when 'true' ->
				      %% Line 38
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
	    in  %% Line 40
		case %% Line 41
		     call 'hipe_pack_constants':'pack_constants'
			 (_cor10, 4) of
		  <{ConstAlign,ConstSize,ConstMap,RefsFromConsts}> when 'true' ->
		      let <_cor13> =
			  %% Line 44
			  apply 'translate'/2
			      (_cor10, ConstMap)
		      in  %% Line 43
			  case %% Line 44
			       apply 'encode'/2
				   (_cor13, _cor0) of
			    <{CodeSize,CodeBinary,AccRefs,LabelMap,ExportMap}> when 'true' ->
				do  %% Line 45
				    apply 'print'/3
					([84|[111|[116|[97|[108|[32|[110|[117|[109|[32|[98|[121|[116|[101|[115|[61|[126|[119|[10]]]]]]]]]]]]]]]]]]], [CodeSize|[]], _cor0)
				    let <SC> =
					%% Line 47
					call 'hipe_pack_constants':'slim_constmap'
					    (ConstMap)
				    in  let <DataRelocs> =
					    %% Line 48
					    call 'hipe_pack_constants':'mk_data_relocs'
						(RefsFromConsts, LabelMap)
					in  let <SSE> =
						%% Line 49
						call 'hipe_pack_constants':'slim_sorted_exportmap'
						    (ExportMap, _cor2, _cor1)
					    in  let <SlimRefs> =
						    %% Line 50
						    call 'hipe_pack_constants':'slim_refs'
							(AccRefs)
						in  let <_cor19> =
							%% Line 51
							call 'hipe_bifs':'system_crc'
							    (13615612)
						    in  %% Line 51
							call 'erlang':'term_to_binary'
							    ([{[51|[46|[49|[49]]]],_cor19}|%% Line 52
											   [ConstAlign|[ConstSize|%% Line 53
														  [SC|%% Line 54
														      [DataRelocs|%% Line 55
																  [SSE|%% Line 56
																       [CodeSize|[CodeBinary|[SlimRefs|%% Line 57
																				       [0|[[]]]]]]]]]]]])
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor12})
		    -| ['compiler_generated'] )
		end
'translate'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	%% Line 74
	apply 'translate_mfas'/3
	    (_cor1, _cor0, [])
'translate_mfas'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,_X_Data}|Code],ConstMap,NewCode> when 'true' ->
	      let <_cor3> =
		  %% Line 78
		  call 'hipe_sdi':'pass1_init'
		      ()
	      in  %% Line 77
		  case %% Line 78
		       apply 'translate_insns'/6
			   (Insns, MFA, ConstMap, _cor3, 0, []) of
		    <{NewInsns,CodeSize,LabelMap}> when 'true' ->
			%% Line 79
			apply 'translate_mfas'/3
			    (Code, ConstMap, [{MFA,NewInsns,CodeSize,LabelMap}|NewCode])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 80
	  <[],_X_ConstMap,NewCode> when 'true' ->
	      %% Line 81
	      call 'lists':'reverse'
		  (NewCode)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'translate_mfas',3}}] )
	    -| ['compiler_generated'] )
	end
'translate_insns'/6 =
    %% Line 83
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      let <NewIs> =
		  %% Line 84
		  apply 'translate_insn'/3
		      (I, MFA, ConstMap)
	      in  %% Line 85
		  apply 'add_insns'/7
		      (NewIs, Insns, MFA, ConstMap, SdiPass1, Address, NewInsns)
	  %% Line 86
	  <[],_X_MFA,_X_ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      %% Line 87
	      case call 'hipe_sdi':'pass2'
		       (SdiPass1) of
		<{LabelMap,CodeSizeIncr}> when 'true' ->
		    let <_cor9> =
			%% Line 88
			call 'lists':'reverse'
			    (NewInsns)
		    in  let <_cor8> =
			    %% Line 88
			    call 'erlang':'+'
				(Address, CodeSizeIncr)
			in  %% Line 88
			    {_cor9,_cor8,LabelMap}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'translate_insns',6}}] )
	    -| ['compiler_generated'] )
	end
'add_insns'/7 =
    %% Line 90
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],Insns,MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      let <_cor13> =
		  %% Line 92
		  case I of
		    %% Line 93
		    <{'.label',L,_cor24}> when 'true' ->
			%% Line 94
			call 'hipe_sdi':'pass1_add_label'
			    (SdiPass1, Address, L)
		    %% Line 95
		    <{'bp_sdi',{_cor25,_cor26,{'label',L}},_cor27}> when 'true' ->
			%% Line 97
			call 'hipe_sdi':'pass1_add_sdi'
			    (SdiPass1, Address, L, {'sdi_info',-1048576,1048572,8})
		    %% Line 99
		    <_cor28> when 'true' ->
			%% Line 100
			SdiPass1
		  end
	      in  let <_cor15> =
		      %% Line 102
		      apply 'insn_size'/1
			  (I)
		  in  let <Address1> =
			  %% Line 102
			  call 'erlang':'+'
			      (Address, _cor15)
		      in  %% Line 103
			  apply 'add_insns'/7
			      (Is, Insns, MFA, ConstMap, _cor13, Address1, [I|NewInsns])
	  %% Line 104
	  <[],Insns,MFA,ConstMap,SdiPass1,Address,NewInsns> when 'true' ->
	      %% Line 105
	      apply 'translate_insns'/6
		  (Insns, MFA, ConstMap, SdiPass1, Address, NewInsns)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'add_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'insn_size'/1 =
    %% Line 114
    fun (_cor0) ->
	%% Line 115
	case _cor0 of
	  %% Line 116
	  <{'.label',_cor3,_cor4}> when 'true' ->
	      0
	  %% Line 117
	  <{'.reloc',_cor5,_cor6}> when 'true' ->
	      0
	  %% Line 118
	  <_cor7> when 'true' ->
	      4
	end
'translate_insn'/3 =
    %% Line 121
    fun (_cor2,_cor1,_cor0) ->
	%% Line 122
	case _cor2 of
	  %% Line 123
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'do_alu'/1
		  (_cor2)
	  %% Line 124
	  <{'bp',_cor11,_cor12,_cor13}> when 'true' ->
	      apply 'do_bp'/1
		  (_cor2)
	  %% Line 126
	  <{'call_rec',_cor14,_cor15,_cor16}> when 'true' ->
	      apply 'do_call_rec'/1
		  (_cor2)
	  %% Line 127
	  <{'call_tail',_cor17,_cor18}> when 'true' ->
	      apply 'do_call_tail'/1
		  (_cor2)
	  %% Line 128
	  <{'comment',_cor19}> when 'true' ->
	      []
	  %% Line 129
	  <{'jmp',_cor20,_cor21,_cor22}> when 'true' ->
	      apply 'do_jmp'/1
		  (_cor2)
	  %% Line 130
	  <{'jmpl',_cor23,_cor24}> when 'true' ->
	      apply 'do_jmpl'/1
		  (_cor2)
	  %% Line 131
	  <{'label',_cor25}> when 'true' ->
	      apply 'do_label'/1
		  (_cor2)
	  %% Line 138
	  <{'pseudo_set',_cor26,_cor27}> when 'true' ->
	      apply 'do_pseudo_set'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 141
	  <{'rdy',_cor28}> when 'true' ->
	      apply 'do_rdy'/1
		  (_cor2)
	  %% Line 142
	  <{'sethi',_cor29,_cor30}> when 'true' ->
	      apply 'do_sethi'/1
		  (_cor2)
	  %% Line 143
	  <{'store',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      apply 'do_store'/1
		  (_cor2)
	  %% Line 144
	  <{'fp_binary',_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      apply 'do_fp_binary'/1
		  (_cor2)
	  %% Line 145
	  <{'fp_unary',_cor39,_cor40,_cor41}> when 'true' ->
	      apply 'do_fp_unary'/1
		  (_cor2)
	  %% Line 146
	  <{'pseudo_fload',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      apply 'do_pseudo_fload'/1
		  (_cor2)
	  %% Line 148
	  <{'pseudo_fstore',_cor46,_cor47,_cor48}> when 'true' ->
	      apply 'do_pseudo_fstore'/1
		  (_cor2)
	  %% Line 149
	  <_cor49> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_sparc_assemble','translate_insn',_cor2})
	end
'do_alu'/1 =
    %% Line 152
    fun (_cor0) ->
	%% Line 153
	case _cor0 of
	  <{'alu',AluOp,Src1,Src2,Dst}> when 'true' ->
	      let <NewDst> =
		  %% Line 154
		  apply 'do_reg'/1
		      (Dst)
	      in  let <NewSrc1> =
		      %% Line 155
		      apply 'do_reg'/1
			  (Src1)
		  in  let <NewSrc2> =
			  %% Line 156
			  apply 'do_reg_or_imm'/1
			      (Src2)
		      in  %% Line 157
			  [{AluOp,{NewSrc1,NewSrc2,NewDst},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_bp'/1 =
    %% Line 159
    fun (_cor0) ->
	%% Line 160
	case _cor0 of
	  <{'bp',Cond,Label,Pred}> when 'true' ->
	      let <NewLabel> = {%% Line 161
		   'label',%% Line 161
			   Label}
	      in  %% Line 162
		  case Cond of
		    %% Line 163
		    <'a'> when 'true' ->
			%% Line 164
			[{'ba',NewLabel,_cor0}|[]]
		    %% Line 165
		    <_cor7> when 'true' ->
			let <NewCond> = {%% Line 166
			     'cond',%% Line 166
				    Cond}
			in  let <NewPred> = {%% Line 167
				 'pred',%% Line 167
					Pred}
			    in  %% Line 168
				[{'bp_sdi',{NewCond,NewPred,NewLabel},_cor0}|[]]
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_call_rec'/1 =
    %% Line 181
    fun (_cor0) ->
	%% Line 182
	case _cor0 of
	  <{'call_rec',Fun,SDesc,Linkage}> when 'true' ->
	      %% Line 183
	      [{'.reloc',{'call',Fun,Linkage},{'comment','fun'}}|%% Line 184
								 [{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|%% Line 185
														 [{'call',{'disp30',0},_cor0}|[]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_call_tail'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	case _cor0 of
	  <{'call_tail',Fun,Linkage}> when 'true' ->
	      %% Line 189
	      [{'.reloc',{'call',Fun,Linkage},{'comment','fun'}}|%% Line 190
								 [{'call',{'disp30',0},_cor0}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_jmp'/1 =
    %% Line 192
    fun (_cor0) ->
	%% Line 193
	case _cor0 of
	  <{'jmp',Src1,Src2,_cor6}> when 'true' ->
	      let <NewSrc1> =
		  %% Line 194
		  apply 'do_reg'/1
		      (Src1)
	      in  let <NewSrc2> =
		      %% Line 195
		      apply 'do_reg_or_imm'/1
			  (Src2)
		  in  %% Line 197
		      [{'jmpl',{NewSrc1,NewSrc2,{'r',0}},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_jmpl'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	case _cor0 of
	  <{'jmpl',Src,SDesc}> when 'true' ->
	      let <NewSrc1> =
		  %% Line 201
		  apply 'do_reg'/1
		      (Src)
	      in  %% Line 204
		  [{'.reloc',{'sdesc',SDesc},{'comment','sdesc'}}|%% Line 205
								  [{'jmpl',{NewSrc1,{'simm13',0},{'r',15}},_cor0}|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_label'/1 =
    %% Line 207
    fun (_cor0) ->
	%% Line 208
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      %% Line 209
	      [{'.label',Label,_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_pseudo_set'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 212
	case _cor2 of
	  <{'pseudo_set',Imm,Dst}> when 'true' ->
	      let <_cor6> =
		  %% Line 214
		  case Imm of
		    %% Line 215
		    <Atom>
			when call 'erlang':'is_atom'
			      (Imm) ->
			%% Line 216
			{'load_atom',Atom}
		    %% Line 224
		    <{Label,'constant'}> when 'true' ->
			let <ConstNo> =
			    %% Line 225
			    call 'hipe_pack_constants':'find_const'
				({_cor1,Label}, _cor0)
			in  %% Line 226
			    {'load_address',{'constant',ConstNo}}
		    %% Line 227
		    <{Label,'closure'}> when 'true' ->
			%% Line 228
			{'load_address',{'closure',Label}}
		    %% Line 229
		    <{Label,'c_const'}> when 'true' ->
			%% Line 230
			{'load_address',{'c_const',Label}}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewDst> =
		      %% Line 232
		      apply 'do_reg'/1
			  (Dst)
		  in  %% Line 233
		      [{'.reloc',_cor6,{'comment','reloc'}}|%% Line 234
							    [{'sethi',{{'uimm22',0},NewDst},_cor2}|%% Line 235
												   [{'or',{NewDst,{'simm13',0},NewDst},_cor2}|[]]]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_rdy'/1 =
    %% Line 237
    fun (_cor0) ->
	%% Line 238
	case _cor0 of
	  <{'rdy',Dst}> when 'true' ->
	      let <NewDst> =
		  %% Line 239
		  apply 'do_reg'/1
		      (Dst)
	      in  %% Line 240
		  [{'rd',{'y',NewDst},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_sethi'/1 =
    %% Line 242
    fun (_cor0) ->
	%% Line 243
	case _cor0 of
	  <{'sethi',{'sparc_uimm22',UImm22},Dst}> when 'true' ->
	      let <NewUImm22> = {%% Line 244
		   'uimm22',%% Line 244
			    UImm22}
	      in  let <NewDst> =
		      %% Line 245
		      apply 'do_reg'/1
			  (Dst)
		  in  %% Line 246
		      [{'sethi',{NewUImm22,NewDst},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_store'/1 =
    %% Line 248
    fun (_cor0) ->
	%% Line 249
	case _cor0 of
	  <{'store',StOp,Src,Base,Disp}> when 'true' ->
	      let <NewSrc> =
		  %% Line 250
		  apply 'do_reg'/1
		      (Src)
	      in  let <NewBase> =
		      %% Line 251
		      apply 'do_reg'/1
			  (Base)
		  in  let <NewDisp> =
			  %% Line 252
			  apply 'do_reg_or_imm'/1
			      (Disp)
		      in  %% Line 253
			  [{StOp,{NewSrc,NewBase,NewDisp},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fp_binary'/1 =
    %% Line 255
    fun (_cor0) ->
	%% Line 256
	case _cor0 of
	  <{'fp_binary',FpBinOp,Src1,Src2,Dst}> when 'true' ->
	      let <NewSrc1> =
		  %% Line 257
		  apply 'do_fpreg'/1
		      (Src1)
	      in  let <NewSrc2> =
		      %% Line 258
		      apply 'do_fpreg'/1
			  (Src2)
		  in  let <NewDst> =
			  %% Line 259
			  apply 'do_fpreg'/1
			      (Dst)
		      in  %% Line 260
			  [{FpBinOp,{NewSrc1,NewSrc2,NewDst},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fp_unary'/1 =
    %% Line 262
    fun (_cor0) ->
	%% Line 263
	case _cor0 of
	  <{'fp_unary',FpUnOp,Src,Dst}> when 'true' ->
	      let <NewSrc> =
		  %% Line 264
		  apply 'do_fpreg'/1
		      (Src)
	      in  let <NewDst> =
		      %% Line 265
		      apply 'do_fpreg'/1
			  (Dst)
		  in  %% Line 266
		      [{FpUnOp,{NewSrc,NewDst},_cor0}|[]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_pseudo_fload'/1 =
    %% Line 268
    fun (_cor0) ->
	%% Line 269
	case _cor0 of
	  <{'pseudo_fload',Base,Disp,Dst,IsSingle}> when 'true' ->
	      let <NewBase> =
		  %% Line 270
		  apply 'do_reg'/1
		      (Base)
	      in  %% Line 271
		  case Disp of
		    <{'sparc_simm13',RawDisp}> when 'true' ->
			%% Line 272
			case apply 'do_fpreg'/1
				 (Dst) of
			  <FrRawDst = {'fr',RawDst}> when 'true' ->
			      %% Line 273
			      case IsSingle of
				%% Line 274
				<'true'> when 'true' ->
				    %% Line 275
				    [{'ldf',{NewBase,{'simm13',RawDisp},FrRawDst},_cor0}|[]]
				%% Line 276
				<_cor9> when 'true' ->
				    let <_cor6> =
					%% Line 278
					call 'erlang':'+'
					    (RawDisp, 4)
				    in  let <_cor5> =
					    %% Line 278
					    call 'erlang':'+'
						(RawDst, 1)
					in  %% Line 277
					    [{'ldf',{NewBase,{'simm13',RawDisp},FrRawDst},_cor0}|%% Line 278
												 [{'ldf',{NewBase,{'simm13',_cor6},{'fr',_cor5}},_cor0}|[]]]
			      end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_pseudo_fstore'/1 =
    %% Line 281
    fun (_cor0) ->
	%% Line 282
	case _cor0 of
	  <{'pseudo_fstore',Src,Base,Disp}> when 'true' ->
	      %% Line 283
	      case apply 'do_fpreg'/1
		       (Src) of
		<FrRawSrc = {'fr',RawSrc}> when 'true' ->
		    let <NewBase> =
			%% Line 284
			apply 'do_reg'/1
			    (Base)
		    in  %% Line 285
			case Disp of
			  <{'sparc_simm13',RawDisp}> when 'true' ->
			      let <_cor6> =
				  %% Line 287
				  call 'erlang':'+'
				      (RawSrc, 1)
			      in  let <_cor5> =
				      %% Line 287
				      call 'erlang':'+'
					  (RawDisp, 4)
				  in  %% Line 286
				      [{'stf',{FrRawSrc,NewBase,{'simm13',RawDisp}},_cor0}|%% Line 287
											   [{'stf',{{'fr',_cor6},NewBase,{'simm13',_cor5}},_cor0}|[]]]
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fpreg'/1 =
    %% Line 291
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',Reg,'double',_cor7}>
	      when %% Line 292
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Reg)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, Reg)
			in  let <_cor3> =
				call 'erlang':'<'
				    (Reg, 16)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 293
		  call 'erlang':'*'
		      (2, Reg)
	      in  %% Line 293
		  {'fr',_cor5}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'do_fpreg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_reg'/1 =
    %% Line 295
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',Reg,Type,_cor8}>
	      when %% Line 296
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Reg)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(0, Reg)
			in  let <_cor3> =
				call 'erlang':'<'
				    (Reg, 32)
			    in  let <_cor4> =
				    call 'erlang':'=/='
					(Type, 'double')
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor2, _cor5)
					in  call 'erlang':'and'
						(_cor1, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 297
	      {'r',Reg}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'do_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_reg_or_imm'/1 =
    %% Line 299
    fun (_cor0) ->
	%% Line 300
	case _cor0 of
	  %% Line 301
	  <{'sparc_temp',_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 302
	      apply 'do_reg'/1
		  (_cor0)
	  %% Line 303
	  <{'sparc_simm13',Value}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (Value)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(-4096, Value)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (Value, 4095)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor1, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 304
		  call 'erlang':'band'
		      (Value, 8191)
	      in  %% Line 304
		  {'simm13',_cor6}
	  %% Line 305
	  <{'sparc_uimm5',Value}>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Value)
		    in  let <_cor8> =
			    call 'erlang':'=<'
				(0, Value)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (Value, 31)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 306
	      {'uimm5',Value}
	  %% Line 307
	  <{'sparc_uimm6',Value}>
	      when try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (Value)
		    in  let <_cor12> =
			    call 'erlang':'=<'
				(0, Value)
			in  let <_cor13> =
				call 'erlang':'=<'
				    (Value, 63)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 308
	      {'uimm6',Value}
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'encode'/2 =
    %% Line 321
    fun (_cor1,_cor0) ->
	let <CodeSize> =
	    %% Line 322
	    apply 'compute_code_size'/2
		(_cor1, 0)
	in  let <ExportMap> =
		%% Line 323
		apply 'build_export_map'/3
		    (_cor1, 0, [])
	    in  %% Line 324
		case apply 'encode_mfas'/5
			 (_cor1, 0, [], [], _cor0) of
		  <{AccCode,Relocs}> when 'true' ->
		      let <_cor5> =
			  %% Line 325
			  call 'lists':'reverse'
			      (AccCode)
		      in  let <CodeBinary> =
			      %% Line 325
			      call 'erlang':'list_to_binary'
				  (_cor5)
			  in  do  %% Line 326
				  case <> of
				    <>
					when try
					      let <_cor7> =
						  call 'erlang':'byte_size'
						      (CodeBinary)
					      in  call 'erlang':'=:='
						      (CodeSize, _cor7)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_sparc_assemble',326,[67|[111|[100|[101|[83|[105|[122|[101|[32|[61|[58|[61|[32|[98|[121|[116|[101|[95|[115|[105|[122|[101|[32|[40|[32|[67|[111|[100|[101|[66|[105|[110|[97|[114|[121|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				  end
				  let <_cor8> =
				      %% Line 327
				      call 'gb_trees':'empty'
					  ()
				  in  let <CombinedLabelMap> =
					  %% Line 327
					  apply 'combine_label_maps'/3
					      (_cor1, 0, _cor8)
				      in  %% Line 328
					  {CodeSize,CodeBinary,Relocs,CombinedLabelMap,ExportMap}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'compute_code_size'/2 =
    %% Line 330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_MFA,_X_Insns,CodeSize,_X_LabelMap}|Code],Size> when 'true' ->
	      let <_cor2> =
		  %% Line 331
		  call 'erlang':'+'
		      (Size, CodeSize)
	      in  %% Line 331
		  apply 'compute_code_size'/2
		      (Code, _cor2)
	  %% Line 332
	  <[],Size> when 'true' ->
	      Size
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'compute_code_size',2}}] )
	    -| ['compiler_generated'] )
	end
'build_export_map'/3 =
    %% Line 334
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{M,F,A},_X_Insns,CodeSize,_X_LabelMap}|Code],Address,ExportMap> when 'true' ->
	      let <_cor3> =
		  %% Line 335
		  call 'erlang':'+'
		      (Address, CodeSize)
	      in  %% Line 335
		  apply 'build_export_map'/3
		      (Code, _cor3, [{Address,M,F,A}|ExportMap])
	  %% Line 336
	  <[],_X_Address,ExportMap> when 'true' ->
	      ExportMap
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'build_export_map',3}}] )
	    -| ['compiler_generated'] )
	end
'combine_label_maps'/3 =
    %% Line 338
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,_X_Insns,CodeSize,LabelMap}|Code],Address,CLM> when 'true' ->
	      let <_cor3> =
		  %% Line 339
		  call 'gb_trees':'to_list'
		      (LabelMap)
	      in  let <NewCLM> =
		      %% Line 339
		      apply 'merge_label_map'/4
			  (_cor3, MFA, Address, CLM)
		  in  let <_cor5> =
			  %% Line 340
			  call 'erlang':'+'
			      (Address, CodeSize)
		      in  %% Line 340
			  apply 'combine_label_maps'/3
			      (Code, _cor5, NewCLM)
	  %% Line 341
	  <[],_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'combine_label_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_label_map'/4 =
    %% Line 343
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,Offset}|Rest],MFA,Address,CLM> when 'true' ->
	      let <_cor4> =
		  %% Line 344
		  call 'erlang':'+'
		      (Address, Offset)
	      in  let <NewCLM> =
		      %% Line 344
		      call 'gb_trees':'insert'
			  ({MFA,Label}, _cor4, CLM)
		  in  %% Line 345
		      apply 'merge_label_map'/4
			  (Rest, MFA, Address, NewCLM)
	  %% Line 346
	  <[],_X_MFA,_X_Address,CLM> when 'true' ->
	      CLM
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'merge_label_map',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_mfas'/5 =
    %% Line 348
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,Insns,CodeSize,LabelMap}|Code],Address,AccCode,Relocs,Options> when 'true' ->
	      do  %% Line 349
		  apply 'print'/3
		      ([71|[101|[110|[101|[114|[97|[116|[105|[110|[103|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]], [MFA|[]], Options)
		  do  %% Line 350
		      apply 'print'/3
			  ([79|[102|[102|[115|[101|[116|[32|[32|[32|[124|[32|[79|[112|[99|[111|[100|[101|[32|[32|[32|[124|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], Options)
		      %% Line 351
		      case %% Line 352
			   apply 'encode_insns'/7
			       (Insns, Address, Address, LabelMap, Relocs, AccCode, Options) of
			<{Address1,Relocs1,AccCode1}> when 'true' ->
			    let <ExpectedAddress> =
				%% Line 353
				call 'erlang':'+'
				    (Address, CodeSize)
			    in  do  %% Line 354
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Address1,
						 ExpectedAddress) ->
					  []
				      <> when 'true' ->
					  call 'erlang':'exit'
					      ({'assertion_failed','hipe_sparc_assemble',354,[65|[100|[100|[114|[101|[115|[115|[49|[32|[61|[58|[61|[32|[69|[120|[112|[101|[99|[116|[101|[100|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
				    end
				    do  %% Line 355
					apply 'print'/3
					    ([70|[105|[110|[105|[115|[104|[101|[100|[46|[10]]]]]]]]]], [], Options)
					%% Line 356
					apply 'encode_mfas'/5
					    (Code, Address1, AccCode1, Relocs1, Options)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 357
	  <[],_X_Address,AccCode,Relocs,_X_Options> when 'true' ->
	      %% Line 358
	      {AccCode,Relocs}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'encode_mfas',5}}] )
	    -| ['compiler_generated'] )
	end
'encode_insns'/7 =
    %% Line 360
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],Address,FunAddress,LabelMap,Relocs,AccCode,Options> when 'true' ->
	      %% Line 361
	      case I of
		%% Line 362
		<{'.label',L,_cor24}> when 'true' ->
		    let <_cor7> =
			%% Line 363
			call 'gb_trees':'get'
			    (L, LabelMap)
		    in  let <LabelAddress> =
			    %% Line 363
			    call 'erlang':'+'
				(_cor7, FunAddress)
			in  do  %% Line 364
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Address,
					     LabelAddress) ->
				      []
				  <> when 'true' ->
				      call 'erlang':'exit'
					  ({'assertion_failed','hipe_sparc_assemble',364,[65|[100|[100|[114|[101|[115|[115|[32|[61|[58|[61|[32|[76|[97|[98|[101|[108|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]})
				end
				do  %% Line 365
				    apply 'print_insn'/4
					(Address, [], I, Options)
				    %% Line 366
				    apply 'encode_insns'/7
					(Insns, Address, FunAddress, LabelMap, Relocs, AccCode, Options)
		%% Line 367
		<{'.reloc',Data,_cor25}> when 'true' ->
		    let <Reloc> =
			%% Line 368
			apply 'encode_reloc'/4
			    (Data, Address, FunAddress, LabelMap)
		    in  %% Line 369
			apply 'encode_insns'/7
			    (Insns, Address, FunAddress, LabelMap, [Reloc|Relocs], AccCode, Options)
		%% Line 370
		<{'bp_sdi',_cor26,_cor27}> when 'true' ->
		    let <_cor10> =
			%% Line 371
			apply 'fix_bp_sdi'/5
			    (I, Insns, Address, FunAddress, LabelMap)
		    in  %% Line 371
			apply 'encode_insns'/7
			    (_cor10, %% Line 372
				     Address, %% Line 372
					      FunAddress, %% Line 372
							  LabelMap, %% Line 372
								    Relocs, %% Line 372
									    AccCode, %% Line 372
										     Options)
		%% Line 376
		<_cor28> when 'true' ->
		    %% Line 377
		    case apply 'fix_jumps'/4
			     (I, Address, FunAddress, LabelMap) of
		      <{Op,Arg,_cor29}> when 'true' ->
			  let <Word> =
			      %% Line 378
			      call 'hipe_sparc_encode':'insn_encode'
				  (Op, Arg)
			  in  do  %% Line 379
				  apply 'print_insn'/4
				      (Address, Word, I, Options)
				  let <Segment> =
				      %% Line 380
				      #{#<Word>(32,1,'integer',['unsigned'|['big']])}#
				  in  let <NewAccCode> =
					  %% Line 381
					  [Segment|AccCode]
				      in  let <_cor15> =
					      %% Line 382
					      call 'erlang':'+'
						  (Address, 4)
					  in  %% Line 382
					      apply 'encode_insns'/7
						  (Insns, _cor15, FunAddress, LabelMap, Relocs, NewAccCode, Options)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 384
	  <[],Address,_X_FunAddress,_X_LabelMap,Relocs,AccCode,_X_Options> when 'true' ->
	      %% Line 385
	      {Address,Relocs,AccCode}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'encode_insns',7}}] )
	    -| ['compiler_generated'] )
	end
'encode_reloc'/4 =
    %% Line 387
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 388
	case _cor3 of
	  %% Line 389
	  <{'call',MFAorPrim,Linkage}> when 'true' ->
	      let <_cor5> =
		  %% Line 393
		  case Linkage of
		    %% Line 394
		    <'remote'> when 'true' ->
			2
		    %% Line 395
		    <'not_remote'> when 'true' ->
			3
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 397
		      apply 'untag_mfa_or_prim'/1
			  (MFAorPrim)
		  in  %% Line 397
		      {_cor5,_cor2,_cor7}
	  %% Line 398
	  <{'load_atom',Atom}> when 'true' ->
	      %% Line 399
	      {0,_cor2,Atom}
	  %% Line 400
	  <{'load_address',X}> when 'true' ->
	      %% Line 401
	      {1,_cor2,X}
	  %% Line 402
	  <{'sdesc',SDesc}> when 'true' ->
	      %% Line 403
	      case SDesc of
		<{'sparc_sdesc',ExnLab,FSize,Arity,Live}> when 'true' ->
		    let <_cor11> =
			%% Line 405
			case ExnLab of
			  %% Line 406
			  <[]> when 'true' ->
			      []
			  %% Line 407
			  <_cor18> when 'true' ->
			      let <_cor9> =
				  call 'gb_trees':'get'
				      (ExnLab, _cor0)
			      in  call 'erlang':'+'
				      (_cor9, _cor1)
			end
		    in  %% Line 409
			{4,_cor2,%% Line 410
				 {_cor11,FSize,Arity,Live}}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'untag_mfa_or_prim'/1 =
    %% Line 413
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_mfa',M,F,A}> when 'true' ->
	      {M,F,A}
	  %% Line 414
	  <{'sparc_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'untag_mfa_or_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_bp_sdi'/5 =
    %% Line 416
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 417
	case _cor4 of
	  <{'bp_sdi',Opnds,OrigI}> when 'true' ->
	      %% Line 418
	      case Opnds of
		<{{'cond',Cond},{'pred',Pred},Label}> when 'true' ->
		    %% Line 419
		    case Label of
		      <{'label',L}> when 'true' ->
			  let <_cor8> =
			      %% Line 420
			      call 'gb_trees':'get'
				  (L, _cor0)
			  in  let <LabelAddress> =
				  %% Line 420
				  call 'erlang':'+'
				      (_cor8, _cor1)
			      in  let <_cor10> =
				      %% Line 421
				      call 'erlang':'-'
					  (LabelAddress, _cor2)
				  in  let <BD> =
					  %% Line 421
					  call 'erlang':'div'
					      (_cor10, 4)
				      in  %% Line 422
					  case <> of
					    <>
						when let <_cor13> =
						      call 'erlang':'>='
							  (BD, -262144)
						  in  let <_cor14> =
							  call 'erlang':'=<'
							      (BD, 262143)
						      in  call 'erlang':'and'
							      (_cor13, _cor14) ->
						%% Line 423
						[{'bp',Opnds,OrigI}|_cor3]
					    %% Line 424
					    <> when 'true' ->
						%% Line 428
						case _cor3 of
						  <[Delay|Rest]> when 'true' ->
						      let <NewCond> =
							  %% Line 429
							  call 'hipe_sparc':'negate_cond'
							      (Cond)
						      in  let <NewPred> =
							      %% Line 430
							      call 'erlang':'-'
								  (1.00000000000000000000e+00, Pred)
							  in  %% Line 431
							      [{'bp',%% Line 432
								     {{'cond',NewCond},{'pred',NewPred},'.+16'},%% Line 433
														{'bp',NewCond,'.+16',NewPred}}|%% Line 434
																	       [Delay|%% Line 435
																		      [{'ba',Label,{'bp','a',L,1.00000000000000000000e+00}}|%% Line 436
																									    [{'sethi',{{'uimm22',0},{'r',0}},{'comment','nop'}}|%% Line 437
																																Rest]]]]
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor15})
						    -| ['compiler_generated'] )
						end
					  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'fix_jumps'/4 =
    %% Line 466
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 467
	case _cor3 of
	  %% Line 468
	  <{'ba',{'label',L},OrigI}> when 'true' ->
	      let <_cor4> =
		  %% Line 469
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  let <LabelAddress> =
		      %% Line 469
		      call 'erlang':'+'
			  (_cor4, _cor1)
		  in  let <_cor6> =
			  %% Line 470
			  call 'erlang':'-'
			      (LabelAddress, _cor2)
		      in  let <BD> =
			      %% Line 470
			      call 'erlang':'div'
				  (_cor6, 4)
			  in  do  %% Line 472
				  case <> of
				    <>
					when call 'erlang':'=<'
					      (BD,
					       2097151) ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_sparc_assemble',472,[66|[68|[32|[61|[60|[32|[50|[48|[57|[55|[49|[53|[49]]]]]]]]]]]]]})
				  end
				  do  %% Line 473
				      case <> of
					<>
					    when call 'erlang':'>='
						  (BD,
						   -2097152) ->
					    []
					<> when 'true' ->
					    call 'erlang':'exit'
						({'assertion_failed','hipe_sparc_assemble',473,[66|[68|[32|[62|[61|[32|[45|[32|[50|[48|[57|[55|[49|[53|[50]]]]]]]]]]]]]]]})
				      end
				      let <_cor9> =
					  %% Line 474
					  call 'erlang':'band'
					      (BD, 4194303)
				      in  %% Line 474
					  {'ba',{'disp22',_cor9},OrigI}
	  %% Line 475
	  <{'bp',{Cond,Pred,Target},OrigI}> when 'true' ->
	      let <_cor12> =
		  %% Line 477
		  case Target of
		    %% Line 478
		    <{'label',L}> when 'true' ->
			let <_cor10> =
			    call 'gb_trees':'get'
				(L, _cor0)
			in  call 'erlang':'+'
				(_cor10, _cor1)
		    %% Line 479
		    <'.+16'> when 'true' ->
			call 'erlang':'+'
			    (_cor2, 16)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor14> =
		      %% Line 481
		      call 'erlang':'-'
			  (_cor12, _cor2)
		  in  let <BD> =
			  %% Line 481
			  call 'erlang':'div'
			      (_cor14, 4)
		      in  do  %% Line 483
			      case <> of
				<>
				    when call 'erlang':'=<'
					  (BD,
					   262143) ->
				    []
				<> when 'true' ->
				    call 'erlang':'exit'
					({'assertion_failed','hipe_sparc_assemble',483,[66|[68|[32|[61|[60|[32|[50|[54|[50|[49|[52|[51]]]]]]]]]]]]})
			      end
			      do  %% Line 484
				  case <> of
				    <>
					when call 'erlang':'>='
					      (BD,
					       -262144) ->
					[]
				    <> when 'true' ->
					call 'erlang':'exit'
					    ({'assertion_failed','hipe_sparc_assemble',484,[66|[68|[32|[62|[61|[32|[45|[32|[50|[54|[50|[49|[52|[52]]]]]]]]]]]]]]})
				  end
				  let <_cor18> =
				      %% Line 485
				      apply 'px'/1
					  (Pred)
				  in  let <_cor17> =
					  %% Line 485
					  call 'erlang':'band'
					      (BD, 524287)
				      in  %% Line 485
					  {'bp',{Cond,_cor18,{'disp19',_cor17}},OrigI}
	  %% Line 487
	  <_cor24> when 'true' ->
	      _cor3
	end
'px'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <{'pred',Pred}> when 'true' ->
	      let <_cor1> =
		  %% Line 506
		  case <> of
		    <>
			when call 'erlang':'>='
			      (Pred,
			       5.00000000000000000000e-01) ->
			'pt'
		    <> when 'true' ->
			'pn'
		  end
	      in  %% Line 506
		  {'pred',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'px',1}}] )
	    -| ['compiler_generated'] )
	end
'print'/3 =
    %% Line 514
    fun (_cor2,_cor1,_cor0) ->
	%% Line 515
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      call 'io':'format'
		  (_cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'print_insn'/4 =
    %% Line 517
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 518
	case call 'proplists':'get_bool'
		 ('pp_asm', _cor0) of
	  <'true'> when 'true' ->
	      apply 'print_insn_2'/3
		  (_cor3, _cor2, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'print_insn_2'/3 =
    %% Line 520
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Address,Word,{_cor7,_cor8,OrigI}> when 'true' ->
	      do  %% Line 521
		  call 'io':'format'
		      ([126|[56|[46|[49|[54|[46|[48|[98|[32|[124|[32]]]]]]]]]]], [Address|[]])
		  let <_cor3> =
		      %% Line 522
		      apply 'word_to_bytes'/1
			  (Word)
		  in  do  %% Line 522
			  apply 'print_code_list'/2
			      (_cor3, 0)
			  %% Line 523
			  call 'hipe_sparc_pp':'pp_insn'
			      (OrigI)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'print_insn_2',3}}] )
	    -| ['compiler_generated'] )
	end
'word_to_bytes'/1 =
    %% Line 525
    fun (_cor0) ->
	%% Line 526
	case _cor0 of
	  %% Line 527
	  <[]> when 'true' ->
	      []
	  %% Line 528
	  <_cor10> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'bsr'
		      (_cor0, 24)
	      in  let <_cor2> =
		      call 'erlang':'band'
			  (_cor1, 255)
		  in  let <_cor3> =
			  call 'erlang':'bsr'
			      (_cor0, 16)
		      in  let <_cor4> =
			      call 'erlang':'band'
				  (_cor3, 255)
			  in  let <_cor5> =
				  %% Line 529
				  call 'erlang':'bsr'
				      (_cor0, 8)
			      in  let <_cor6> =
				      %% Line 529
				      call 'erlang':'band'
					  (_cor5, 255)
				  in  let <_cor7> =
					  %% Line 529
					  call 'erlang':'band'
					      (_cor0, 255)
				      in  [_cor2|[_cor4|%% Line 529
							[_cor6|[_cor7|[]]]]]
	end
'print_code_list'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Byte|Rest],Len> when 'true' ->
	      do  %% Line 533
		  apply 'print_byte'/1
		      (Byte)
		  let <_cor2> =
		      %% Line 534
		      call 'erlang':'+'
			  (Len, 1)
		  in  %% Line 534
		      apply 'print_code_list'/2
			  (Rest, _cor2)
	  %% Line 535
	  <[],Len> when 'true' ->
	      let <_cor3> =
		  %% Line 536
		  call 'erlang':'*'
		      (Len, 2)
	      in  let <_cor4> =
		      %% Line 536
		      call 'erlang':'-'
			  (8, _cor3)
		  in  do  %% Line 536
			  apply 'fill_spaces'/1
			      (_cor4)
			  %% Line 537
			  call 'io':'format'
			      ([32|[124|[32]]])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'print_code_list',2}}] )
	    -| ['compiler_generated'] )
	end
'print_byte'/1 =
    %% Line 539
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 540
	    call 'erlang':'band'
		(_cor0, 255)
	in  %% Line 540
	    call 'io':'format'
		([126|[50|[46|[49|[54|[46|[48|[98]]]]]]]], [_cor1|[]])
'fill_spaces'/1 =
    %% Line 542
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      do  %% Line 543
		  call 'io':'format'
		      ([32])
		  let <_cor1> =
		      %% Line 544
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 544
		      apply 'fill_spaces'/1
			  (_cor1)
	  %% Line 545
	  <0> when 'true' ->
	      %% Line 546
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fill_spaces',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_assemble')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_assemble', _cor0)
end