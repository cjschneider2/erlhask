module 'hipe_ig_moves' ['get_moves'/1,
			'module_info'/0,
			'module_info'/1,
			'new'/1,
			'new_move'/3]
    attributes [%% Line 27
		'type' =
		    %% Line 27
		    [{'hipe_vector',{'remote_type',27,[{'atom',27,'gb_trees'}|[{'atom',27,'tree'}|[[]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','ig_moves'},[{'typed_record_field',{'record_field',36,{'atom',36,'movelist'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'hipe_vector',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'nrmoves'},{'integer',37,0}},{'type',37,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'moveinsns'},{'nil',38}},{'type',38,'list',[{'type',38,'tuple',[{'var',38,'_'}|[{'var',38,'_'}]]}]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'moveset'},{'call',39,{'remote',39,{'atom',39,'gb_sets'},{'atom',39,'empty'}},[]}},{'remote_type',39,[{'atom',39,'gb_sets'}|[{'atom',39,'set'}|[[]]]]}}]]]],[]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'new',1},[{'type',43,'fun',[{'type',43,'product',[{'type',43,'non_neg_integer',[]}]}|[{'type',43,'record',[{'atom',43,'ig_moves'}]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'new_move',3},[{'type',49,'fun',[{'type',49,'product',[{'var',49,'_'}|[{'var',49,'_'}|[{'type',49,'record',[{'atom',49,'ig_moves'}]}]]]}|[{'type',49,'record',[{'atom',49,'ig_moves'}]}]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'add_movelist',3},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'non_neg_integer',[]}|[{'type',68,'non_neg_integer',[]}|[{'type',68,'hipe_vector',[]}]]]}|[{'type',68,'hipe_vector',[]}]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'get_moves',1},[{'type',76,'fun',[{'type',76,'product',[{'type',76,'record',[{'atom',76,'ig_moves'}]}]}|[{'type',76,'tuple',[{'type',76,'hipe_vector',[]}|[{'type',76,'non_neg_integer',[]}|[{'type',76,'tuple','any'}]]]}]]}]}]]
'new'/1 =
    %% Line 45
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 46
	    call 'ordsets':'new'
		()
	in  let <MoveList> =
		%% Line 46
		call 'hipe_vectors':'new'
		    (_cor0, _cor1)
	    in  let <_cor3> =
		    call 'gb_sets':'empty'
			()
		in  %% Line 47
		    {'ig_moves',MoveList,0,[],_cor3}
'new_move'/3 =
    %% Line 51
    fun (_cor2,_cor1,_cor0) ->
	%% Line 52
	( case _cor0 of
	    ( <( {'ig_moves',_cor26,_cor27,_cor28,_rec0}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <MoveInsn> = {_cor2,_cor1}
		  in  %% Line 54
		      case call 'gb_sets':'is_member'
			       (MoveInsn, _rec0) of
			%% Line 55
			<'true'> when 'true' ->
			    _cor0
			%% Line 57
			<'false'> when 'true' ->
			    let <_cor13> =
				%% Line 61
				apply 'add_movelist'/3
				    (_cor27, _cor1, _cor26)
			    in  let <Movelist1> =
				    %% Line 60
				    apply 'add_movelist'/3
					(_cor27, _cor2, _cor13)
				in  let <_rec3> =
					%% Line 62
					call 'erlang':'+'
					    (_cor27, 1)
				    in  let <_rec4> =
					    %% Line 64
					    [MoveInsn|_cor28]
					in  let <_rec5> =
						%% Line 65
						call 'gb_sets':'insert'
						    (MoveInsn, _rec0)
					    in  %% Line 65
						{'ig_moves',Movelist1,_rec3,_rec4,_rec5}
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ig_moves'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_movelist'/3 =
    %% Line 70
    fun (_cor2,_cor1,_cor0) ->
	let <AssocMoves> =
	    %% Line 71
	    call 'hipe_vectors':'get'
		(_cor0, _cor1)
	in  let <_cor4> =
		%% Line 74
		call 'ordsets':'add_element'
		    (_cor2, AssocMoves)
	    in  %% Line 74
		call 'hipe_vectors':'set'
		    (_cor0, _cor1, _cor4)
'get_moves'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	( case _cor0 of
	    ( <( {'ig_moves',_rec12,_cor10,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      %% Line 81
		      call 'lists':'reverse'
			  (_cor11)
		  in  let <_cor4> =
			  %% Line 81
			  call 'erlang':'list_to_tuple'
			      (_cor3)
		      in  {_rec12,_cor10,_cor4}
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ig_moves'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ig_moves')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ig_moves', _cor0)
end