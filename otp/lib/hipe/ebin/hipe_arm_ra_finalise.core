module 'hipe_arm_ra_finalise' ['finalise'/3,
			       'module_info'/0,
			       'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}]]
'finalise'/3 =
    %% Line 25
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Defun,TempMap,_X_FPMap0 = []> when 'true' ->
	      let <Code> =
		  %% Line 26
		  call 'hipe_arm':'defun_code'
		      (Defun)
	      in  %% Line 27
		  case call 'hipe_arm':'defun_var_range'
			   (Defun) of
		    <{_cor12,SpillLimit}> when 'true' ->
			let <Map> =
			    %% Line 28
			    apply 'mk_ra_map'/2
				(TempMap, SpillLimit)
			in  let <NewCode> =
				%% Line 29
				apply 'ra_code'/3
				    (Code, Map, [])
			    in  %% Line 30
				case Defun of
				  <{'defun',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
				      call 'erlang':'setelement'
					  (4, Defun, NewCode)
				  ( <_cor21> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','defun'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'finalise',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_code'/3 =
    %% Line 32
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Insns],Map,Accum> when 'true' ->
	      let <_cor3> =
		  %% Line 33
		  apply 'ra_insn'/2
		      (I, Map)
	      in  %% Line 33
		  apply 'ra_code'/3
		      (Insns, Map, [_cor3|Accum])
	  %% Line 34
	  <[],_X_Map,Accum> when 'true' ->
	      %% Line 35
	      call 'lists':'reverse'
		  (Accum)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'ra_code',3}}] )
	    -| ['compiler_generated'] )
	end
'ra_insn'/2 =
    %% Line 37
    fun (_cor1,_cor0) ->
	%% Line 38
	case _cor1 of
	  %% Line 39
	  <{'alu',_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'ra_alu'/2
		  (_cor1, _cor0)
	  %% Line 40
	  <{'cmp',_cor10,_cor11,_cor12}> when 'true' ->
	      apply 'ra_cmp'/2
		  (_cor1, _cor0)
	  %% Line 41
	  <{'load',_cor13,_cor14,_cor15}> when 'true' ->
	      apply 'ra_load'/2
		  (_cor1, _cor0)
	  %% Line 42
	  <{'ldrsb',_cor16,_cor17}> when 'true' ->
	      apply 'ra_ldrsb'/2
		  (_cor1, _cor0)
	  %% Line 43
	  <{'move',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      apply 'ra_move'/2
		  (_cor1, _cor0)
	  %% Line 44
	  <{'pseudo_call',_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      apply 'ra_pseudo_call'/2
		  (_cor1, _cor0)
	  %% Line 45
	  <{'pseudo_li',_cor26,_cor27,_cor28}> when 'true' ->
	      apply 'ra_pseudo_li'/2
		  (_cor1, _cor0)
	  %% Line 46
	  <{'pseudo_move',_cor29,_cor30}> when 'true' ->
	      apply 'ra_pseudo_move'/2
		  (_cor1, _cor0)
	  %% Line 47
	  <{'pseudo_switch',_cor31,_cor32,_cor33}> when 'true' ->
	      apply 'ra_pseudo_switch'/2
		  (_cor1, _cor0)
	  %% Line 48
	  <{'pseudo_tailcall',_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      apply 'ra_pseudo_tailcall'/2
		  (_cor1, _cor0)
	  %% Line 49
	  <{'smull',_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      apply 'ra_smull'/2
		  (_cor1, _cor0)
	  %% Line 50
	  <{'store',_cor42,_cor43,_cor44}> when 'true' ->
	      apply 'ra_store'/2
		  (_cor1, _cor0)
	  %% Line 51
	  <_cor45> when 'true' ->
	      _cor1
	end
'ra_alu'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'alu',_cor9,_cor10,Dst,Src,Am1},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 55
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewSrc> =
		      %% Line 56
		      apply 'ra_temp'/2
			  (Src, Map)
		  in  let <NewAm1> =
			  %% Line 57
			  apply 'ra_am1'/2
			      (Am1, Map)
		      in  %% Line 58
			  {'alu',_cor9,_cor10,NewDst,NewSrc,NewAm1}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_alu',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_cmp'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'cmp',_cor8,Src,Am1},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 61
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewAm1> =
		      %% Line 62
		      apply 'ra_am1'/2
			  (Am1, Map)
		  in  %% Line 63
		      {'cmp',_cor8,NewSrc,NewAm1}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_cmp',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_load'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'load',_cor8,Dst,Am2},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 66
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewAm2> =
		      %% Line 67
		      apply 'ra_am2'/2
			  (Am2, Map)
		  in  %% Line 68
		      {'load',_cor8,NewDst,NewAm2}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_load',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_ldrsb'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'ldrsb',Dst,Am3},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 71
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewAm3> =
		      %% Line 72
		      apply 'ra_am3'/2
			  (Am3, Map)
		  in  %% Line 73
		      {'ldrsb',NewDst,NewAm3}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_ldrsb',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_move'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'move',_cor9,_cor10,Dst,Am1},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 76
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewAm1> =
		      %% Line 77
		      apply 'ra_am1'/2
			  (Am1, Map)
		  in  let <_cor5> =
			  %% Line 78
			  call 'erlang':'setelement'
			      (5, I, NewAm1)
		      in  %% Line 78
			  call 'erlang':'setelement'
			      (4, _cor5, NewDst)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_move',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_call'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_call',FunV,_cor7,_cor8,_cor9},Map> when 'true' ->
	      let <NewFunV> =
		  %% Line 81
		  apply 'ra_funv'/2
		      (FunV, Map)
	      in  %% Line 82
		  call 'erlang':'setelement'
		      (2, I, NewFunV)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_call',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_li'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_li',Dst,_cor7,_cor8},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 85
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  %% Line 86
		  call 'erlang':'setelement'
		      (2, I, NewDst)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ra_pseudo_li',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_move'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_move',Dst,Src},Map> when 'true' ->
	      let <NewDst> =
		  %% Line 89
		  apply 'ra_temp'/2
		      (Dst, Map)
	      in  let <NewSrc> =
		      %% Line 90
		      apply 'ra_temp'/2
			  (Src, Map)
		  in  %% Line 91
		      {'pseudo_move',NewDst,NewSrc}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_move',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_switch'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_switch',JTab,Index,_cor8},Map> when 'true' ->
	      let <NewJTab> =
		  %% Line 94
		  apply 'ra_temp'/2
		      (JTab, Map)
	      in  let <NewIndex> =
		      %% Line 95
		      apply 'ra_temp'/2
			  (Index, Map)
		  in  %% Line 96
		      {'pseudo_switch',NewJTab,NewIndex,_cor8}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_pseudo_switch',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_pseudo_tailcall'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_tailcall',FunV,_cor9,StkArgs,_cor10},Map> when 'true' ->
	      let <NewFunV> =
		  %% Line 99
		  apply 'ra_funv'/2
		      (FunV, Map)
	      in  let <NewStkArgs> =
		      %% Line 100
		      apply 'ra_args'/2
			  (StkArgs, Map)
		  in  let <_cor5> =
			  %% Line 101
			  call 'erlang':'setelement'
			      (4, I, NewStkArgs)
		      in  %% Line 101
			  call 'erlang':'setelement'
			      (2, _cor5, NewFunV)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ra_pseudo_tailcall',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_smull'/2 =
    %% Line 103
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'smull',DstLo,DstHi,Src1,Src2},Map> when 'true' ->
	      let <NewDstLo> =
		  %% Line 104
		  apply 'ra_temp'/2
		      (DstLo, Map)
	      in  let <NewDstHi> =
		      %% Line 105
		      apply 'ra_temp'/2
			  (DstHi, Map)
		  in  let <NewSrc1> =
			  %% Line 106
			  apply 'ra_temp'/2
			      (Src1, Map)
		      in  let <NewSrc2> =
			      %% Line 107
			      apply 'ra_temp'/2
				  (Src2, Map)
			  in  %% Line 108
			      {'smull',NewDstLo,NewDstHi,NewSrc1,NewSrc2}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'ra_smull',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_store'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'store',_cor8,Src,Am2},Map> when 'true' ->
	      let <NewSrc> =
		  %% Line 111
		  apply 'ra_temp'/2
		      (Src, Map)
	      in  let <NewAm2> =
		      %% Line 112
		      apply 'ra_am2'/2
			  (Am2, Map)
		  in  %% Line 113
		      {'store',_cor8,NewSrc,NewAm2}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_store',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_args'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Arg|Args],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 118
		  apply 'ra_temp_or_imm'/2
		      (Arg, Map)
	      in  let <_cor3> =
		      %% Line 118
		      apply 'ra_args'/2
			  (Args, Map)
		  in  %% Line 118
		      [_cor2|_cor3]
	  %% Line 119
	  <[],_cor6> when 'true' ->
	      %% Line 120
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'ra_args',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_temp_or_imm'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	%% Line 123
	case call 'hipe_arm':'is_temp'
		 (_cor1) of
	  %% Line 124
	  <'true'> when 'true' ->
	      %% Line 125
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 126
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'ra_funv'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	%% Line 133
	case _cor1 of
	  %% Line 134
	  <{'arm_temp',_cor5,_cor6,_cor7}> when 'true' ->
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 135
	  <_cor8> when 'true' ->
	      _cor1
	end
'ra_am1'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	%% Line 139
	case _cor1 of
	  %% Line 140
	  <{'arm_temp',_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 141
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 142
	  <{Src2,'rrx'}> when 'true' ->
	      let <NewSrc2> =
		  %% Line 143
		  apply 'ra_temp'/2
		      (Src2, _cor0)
	      in  %% Line 144
		  {NewSrc2,'rrx'}
	  %% Line 145
	  <{Src2,ShiftOp,ShiftArg}> when 'true' ->
	      let <NewSrc2> =
		  %% Line 146
		  apply 'ra_temp'/2
		      (Src2, _cor0)
	      in  let <_cor5> =
		      %% Line 148
		      case ShiftArg of
			%% Line 149
			<{'arm_temp',_cor13,_cor14,_cor15}> when 'true' ->
			    apply 'ra_temp'/2
				(ShiftArg, _cor0)
			%% Line 150
			<_cor16> when 'true' ->
			    ShiftArg
		      end
		  in  %% Line 152
		      {NewSrc2,ShiftOp,_cor5}
	  %% Line 153
	  <_cor17> when 'true' ->
	      _cor1
	end
'ra_am2'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Am2 = {'am2',Src2,_cor8,Offset},Map> when 'true' ->
	      let <NewSrc2> =
		  %% Line 158
		  apply 'ra_temp'/2
		      (Src2, Map)
	      in  let <NewOffset> =
		      %% Line 159
		      apply 'ra_am2offset'/2
			  (Offset, Map)
		  in  %% Line 160
		      {'am2',NewSrc2,_cor8,NewOffset}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_am2',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_am2offset'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	%% Line 163
	case _cor1 of
	  %% Line 164
	  <{'arm_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 165
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 166
	  <{Src3,'rrx'}> when 'true' ->
	      let <NewSrc3> =
		  %% Line 167
		  apply 'ra_temp'/2
		      (Src3, _cor0)
	      in  %% Line 168
		  {NewSrc3,'rrx'}
	  %% Line 169
	  <{Src3,ShiftOp,Imm5}> when 'true' ->
	      let <NewSrc3> =
		  %% Line 170
		  apply 'ra_temp'/2
		      (Src3, _cor0)
	      in  %% Line 171
		  {NewSrc3,ShiftOp,Imm5}
	  %% Line 172
	  <_cor10> when 'true' ->
	      _cor1
	end
'ra_am3'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Am3 = {'am3',Src2,_cor8,Offset},Map> when 'true' ->
	      let <NewSrc2> =
		  %% Line 177
		  apply 'ra_temp'/2
		      (Src2, Map)
	      in  let <NewOffset> =
		      %% Line 178
		      apply 'ra_am3offset'/2
			  (Offset, Map)
		  in  %% Line 179
		      {'am3',NewSrc2,_cor8,NewOffset}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'ra_am3',2}}] )
	    -| ['compiler_generated'] )
	end
'ra_am3offset'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	%% Line 182
	case _cor1 of
	  %% Line 183
	  <{'arm_temp',_cor5,_cor6,_cor7}> when 'true' ->
	      apply 'ra_temp'/2
		  (_cor1, _cor0)
	  %% Line 184
	  <_cor8> when 'true' ->
	      _cor1
	end
'ra_temp'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	let <Reg> =
	    %% Line 200
	    call 'hipe_arm':'temp_reg'
		(_cor1)
	in  %% Line 201
	    case call 'hipe_arm':'temp_type'
		     (_cor1) of
	      %% Line 202
	      <'double'> when 'true' ->
		  %% Line 203
		  call 'erlang':'exit'
		      ({'hipe_arm_ra_finalise','ra_temp',_cor1})
	      %% Line 204
	      <_cor7> when 'true' ->
		  %% Line 205
		  case call 'hipe_arm_registers':'is_precoloured_gpr'
			   (Reg) of
		    %% Line 206
		    <'true'> when 'true' ->
			_cor1
		    %% Line 207
		    <_cor8> when 'true' ->
			apply 'ra_temp_common'/3
			    (Reg, _cor1, _cor0)
		  end
	    end
'ra_temp_common'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 212
	case call 'gb_trees':'lookup'
		 (_cor2, _cor0) of
	  %% Line 213
	  <{'value',NewReg}> when 'true' ->
	      case _cor1 of
		<{'arm_temp',_cor9,_cor10,_cor11}> when 'true' ->
		    call 'erlang':'setelement'
			(2, _cor1, NewReg)
		( <_cor12> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arm_temp'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 214
	  <_cor13> when 'true' ->
	      _cor1
	end
'mk_ra_map'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 224
	    ( fun (_cor5,_cor4) ->
		  %% Line 225
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, 'is_precoloured_gpr') of
		    <{Key,Val}> when 'true' ->
			%% Line 226
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 228
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 224
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'conv_ra_maplet'/3 =
    %% Line 231
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MapLet = {From,To},SpillLimit,IsPrecoloured> when 'true' ->
	      do  %% Line 233
		  case <> of
		    <>
			when let <_cor3> =
			      call 'erlang':'is_integer'
				  (From)
			  in  let <_cor4> =
				  call 'erlang':'=<'
				      (From, SpillLimit)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			%% Line 234
			case call 'hipe_arm_registers':IsPrecoloured
				 (From) of
			  %% Line 235
			  <'false'> when 'true' ->
			      []
			  %% Line 236
			  <_cor17> when 'true' ->
			      %% Line 237
			      case To of
				%% Line 238
				<{'reg',_cor18}>
				    when call 'erlang':'=:='
					  (_cor18,
					   From) ->
				    []
				%% Line 239
				<_cor19> when 'true' ->
				    call 'erlang':'exit'
					({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
			      end
			end
		    %% Line 242
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
		  end
		  %% Line 245
		  case To of
		    %% Line 246
		    <{'reg',NewReg}> when 'true' ->
			do  %% Line 249
			    case <> of
			      <>
				  when call 'erlang':'is_integer'
					(NewReg) ->
				  %% Line 250
				  case call 'hipe_arm_registers':IsPrecoloured
					   (NewReg) of
				    %% Line 251
				    <'true'> when 'true' ->
					[]
				    %% Line 252
				    <_cor20> when 'true' ->
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (From,
						     NewReg) ->
					      []
					  %% Line 253
					  <> when 'true' ->
					      %% Line 254
					      call 'erlang':'exit'
						  ({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
					end
				  end
			      %% Line 257
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    %% Line 260
			    {From,NewReg}
		    %% Line 261
		    <{'spill',SpillIndex}> when 'true' ->
			do  %% Line 263
			    case <> of
			      <>
				  when let <_cor8> =
					call 'erlang':'is_integer'
					    (SpillIndex)
				    in  let <_cor9> =
					    call 'erlang':'>='
						(SpillIndex, 0)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
				  []
			      %% Line 264
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    let <_cor10> =
				%% Line 267
				call 'erlang':'+'
				    (SpillLimit, SpillIndex)
			    in  let <ToTempNum> =
				    %% Line 267
				    call 'erlang':'+'
					(_cor10, 1)
				in  let <MaxTempNum> =
					%% Line 268
					call 'hipe_gensym':'get_var'
					    ('arm')
				    in  do  %% Line 269
					    case <> of
					      <>
						  when call 'erlang':'>='
							(MaxTempNum,
							 ToTempNum) ->
						  'ok'
					      %% Line 270
					      <> when 'true' ->
						  call 'hipe_gensym':'set_var'
						      ('arm', ToTempNum)
					    end
					    %% Line 272
					    {From,ToTempNum}
		    %% Line 273
		    <_cor21> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_arm_ra_finalise','conv_ra_maplet',MapLet})
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'conv_ra_maplet',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_ra_finalise')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_ra_finalise', _cor0)
end