module 'hipe_rtl_ssa_avail_expr' ['cfg'/1,
				  'module_info'/0,
				  'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','alu'},[{'record_field',28,{'atom',28,'dst'}}|[{'record_field',28,{'atom',28,'src1'}}|[{'record_field',28,{'atom',28,'op'}}|[{'record_field',28,{'atom',28,'src2'}}]]]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','alub'},[{'record_field',29,{'atom',29,'dst'}}|[{'record_field',29,{'atom',29,'src1'}}|[{'record_field',29,{'atom',29,'op'}}|[{'record_field',29,{'atom',29,'src2'}}|[{'record_field',29,{'atom',29,'cond'}}|[{'record_field',29,{'atom',29,'true_label'}}|[{'record_field',29,{'atom',29,'false_label'}}|[{'record_field',29,{'atom',29,'p'}}]]]]]]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','branch'},[{'record_field',30,{'atom',30,'src1'}}|[{'record_field',30,{'atom',30,'src2'}}|[{'record_field',30,{'atom',30,'cond'}}|[{'record_field',30,{'atom',30,'true_label'}}|[{'record_field',30,{'atom',30,'false_label'}}|[{'record_field',30,{'atom',30,'p'}}]]]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','call'},[{'record_field',31,{'atom',31,'dstlist'}}|[{'record_field',31,{'atom',31,'fun'}}|[{'record_field',31,{'atom',31,'arglist'}}|[{'record_field',31,{'atom',31,'type'}}|[{'record_field',31,{'atom',31,'continuation'}}|[{'record_field',32,{'atom',32,'failcontinuation'}}|[{'record_field',32,{'atom',32,'normalcontinuation'},{'nil',32}}]]]]]]],[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{{'record','comment'},[{'record_field',33,{'atom',33,'text'}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','enter'},[{'record_field',34,{'atom',34,'fun'}}|[{'record_field',34,{'atom',34,'arglist'}}|[{'record_field',34,{'atom',34,'type'}}]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','fconv'},[{'record_field',35,{'atom',35,'dst'}}|[{'record_field',35,{'atom',35,'src'}}]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','fixnumop'},[{'record_field',36,{'atom',36,'dst'}}|[{'record_field',36,{'atom',36,'src'}}|[{'record_field',36,{'atom',36,'type'}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','fload'},[{'record_field',37,{'atom',37,'dst'}}|[{'record_field',37,{'atom',37,'src'}}|[{'record_field',37,{'atom',37,'offset'}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','fmove'},[{'record_field',38,{'atom',38,'dst'}}|[{'record_field',38,{'atom',38,'src'}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','fp'},[{'record_field',39,{'atom',39,'dst'}}|[{'record_field',39,{'atom',39,'src1'}}|[{'record_field',39,{'atom',39,'op'}}|[{'record_field',39,{'atom',39,'src2'}}]]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','fp_unop'},[{'record_field',40,{'atom',40,'dst'}}|[{'record_field',40,{'atom',40,'src'}}|[{'record_field',40,{'atom',40,'op'}}]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','fstore'},[{'record_field',41,{'atom',41,'base'}}|[{'record_field',41,{'atom',41,'offset'}}|[{'record_field',41,{'atom',41,'src'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','gctest'},[{'record_field',42,{'atom',42,'words'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','goto'},[{'record_field',43,{'atom',43,'label'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','goto_index'},[{'record_field',44,{'atom',44,'block'}}|[{'record_field',44,{'atom',44,'index'}}|[{'record_field',44,{'atom',44,'labels'}}]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','label'},[{'record_field',45,{'atom',45,'name'}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','load'},[{'record_field',46,{'atom',46,'dst'}}|[{'record_field',46,{'atom',46,'src'}}|[{'record_field',46,{'atom',46,'offset'}}|[{'record_field',46,{'atom',46,'size'}}|[{'record_field',46,{'atom',46,'sign'}}]]]]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','load_address'},[{'record_field',47,{'atom',47,'dst'}}|[{'record_field',47,{'atom',47,'addr'}}|[{'record_field',47,{'atom',47,'type'}}]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','load_atom'},[{'record_field',48,{'atom',48,'dst'}}|[{'record_field',48,{'atom',48,'atom'}}]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','load_word_index'},[{'record_field',49,{'atom',49,'dst'}}|[{'record_field',49,{'atom',49,'block'}}|[{'record_field',49,{'atom',49,'index'}}]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','move'},[{'record_field',50,{'atom',50,'dst'}}|[{'record_field',50,{'atom',50,'src'}}]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','multimove'},[{'record_field',51,{'atom',51,'dstlist'}}|[{'record_field',51,{'atom',51,'srclist'}}]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','phi'},[{'record_field',52,{'atom',52,'dst'}}|[{'record_field',52,{'atom',52,'id'}}|[{'record_field',52,{'atom',52,'arglist'}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','return'},[{'record_field',53,{'atom',53,'varlist'}}],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','store'},[{'record_field',54,{'atom',54,'base'}}|[{'record_field',54,{'atom',54,'offset'}}|[{'record_field',54,{'atom',54,'src'}}|[{'record_field',54,{'atom',54,'size'}}]]]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','switch'},[{'record_field',55,{'atom',55,'src'}}|[{'record_field',55,{'atom',55,'labels'}}|[{'record_field',55,{'atom',55,'sorted_by'},{'nil',55}}]]],[]}]]
'cfg'/1 =
    %% Line 36
    fun (_cor0) ->
	let <CFG1> =
	    %% Line 37
	    apply 'remove_loads'/1
		(_cor0)
	in  let <CFG2> =
		%% Line 38
		apply 'remove_stores'/1
		    (CFG1)
	    in  let <CFG3> =
		    %% Line 39
		    apply 'optimize_fixnums'/1
			(CFG2)
		in  %% Line 40
		    call 'hipe_rtl_ssa':'remove_dead_code'
			(CFG3)
'remove_loads'/1 =
    %% Line 48
    fun (_cor0) ->
	let <LoadsFun> = 'spread_info'/2
	in  let <Info> =
		%% Line 50
		apply 'fix_point'/2
		    (_cor0, LoadsFun)
	    in  %% Line 51
		apply 'pass_through'/3
		    (_cor0, LoadsFun, Info)
'spread_info'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	%% Line 54
	call 'lists':'foldl'
	    ('do_instr'/2, {[],_cor0}, _cor1)
'do_instr'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Instr,{Acc,Info}> when 'true' ->
	      %% Line 57
	      case _cor1 of
		%% Line 58
		<{'call',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor3> =
			%% Line 59
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  let <_1525> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_4808> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor2> = {_1525,_4808}
				in  %% Line 59
				    {_cor3,_cor2}
		%% Line 60
		<{'store',_cor33,_cor34,_cor35,_cor36}> when 'true' ->
		    let <_cor5> =
			%% Line 61
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  let <_4360> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_930> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor4> = {_4360,_930}
				in  %% Line 61
				    {_cor5,_cor4}
		%% Line 62
		<{'gctest',_cor37}> when 'true' ->
		    let <_cor7> =
			%% Line 63
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  let <_125> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_3278> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor6> = {_125,_3278}
				in  %% Line 63
				    {_cor7,_cor6}
		%% Line 64
		<{'load',_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
		    let <Dst> =
			%% Line 65
			call 'hipe_rtl':'load_dst'
			    (_cor1)
		    in  let <_cor12> =
			    %% Line 66
			    call 'hipe_rtl':'load_src'
				(_cor1)
			in  let <_cor11> =
				%% Line 66
				call 'hipe_rtl':'load_offset'
				    (_cor1)
			    in  let <_cor10> =
				    %% Line 67
				    call 'hipe_rtl':'load_size'
					(_cor1)
				in  let <_cor9> =
					%% Line 67
					call 'hipe_rtl':'load_sign'
					    (_cor1)
				    in  let <LoadType> =
					    %% Line 66
					    {_cor12,_cor11,_cor10,_cor9}
					in  let <_3066> =
						%% Line 69
						apply 'lookup_y'/2
						    (LoadType, Info)
					    in  let <_cor15> =
						    %% Line 69
						    case _3066 of
						      %% Line 70
						      <'none'> when 'true' ->
							  _cor1
						      %% Line 72
						      <Var> when 'true' ->
							  %% Line 73
							  call 'hipe_rtl':'mk_move'
							      (Dst, _3066)
						    end
						in  let <Fun> = 'load_filter_fun'/2
						    in  let <_cor20> =
							    %% Line 76
							    call 'erlang':'++'
								(Acc, [_cor15|[]])
							in  let <_cor18> =
								%% Line 76
								apply 'remove_defines'/3
								    (_cor1, Info, Fun)
							    in  let <_cor19> =
								    %% Line 76
								    apply 'insert'/3
									(Dst, LoadType, _cor18)
								in  %% Line 76
								    {_cor20,_cor19}
		%% Line 77
		<_cor43> when 'true' ->
		    let <_cor22> =
			%% Line 78
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  let <_cor21> =
			    %% Line 78
			    apply 'remove_defines'/3
				(_cor1, Info, 'load_filter_fun'/2)
			in  %% Line 78
			    {_cor22,_cor21}
	      end
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'do_instr',2}}] )
	    -| ['compiler_generated'] )
	end
'load_filter_fun'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{X1,{X2,X3,_cor9,_cor10}},PreColDefs> when 'true' ->
	      let <_cor4> =
		  %% Line 82
		  call 'lists':'member'
		      (X1, _cor0)
	      in  let <_cor3> =
		      %% Line 83
		      call 'lists':'member'
			  (X2, _cor0)
		  in  let <_cor5> =
			  %% Line 82
			  call 'erlang':'or'
			      (_cor4, _cor3)
		      in  let <_cor2> =
			      %% Line 84
			      call 'lists':'member'
				  (X3, _cor0)
			  in  let <_cor6> =
				  %% Line 83
				  call 'erlang':'or'
				      (_cor5, _cor2)
			      in  %% Line 82
				  call 'erlang':'not'
				      (_cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'load_filter_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_stores'/1 =
    %% Line 92
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 195
	    call 'gb_trees':'empty'
		()
	in  %% Line 93
	    apply 'pass_through'/3
		(_cor0, 'remove_store'/2, _cor1)
'remove_store'/2 =
    %% Line 95
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 99
	    call 'lists':'reverse'
		(_cor1)
	in  let <_752> =
		%% Line 300
		call 'gb_trees':'empty'
		    ()
	    in  let <_1320> =
		    %% Line 300
		    call 'gb_trees':'empty'
			()
		in  let <_2890> = {_752,_1320}
		    in  %% Line 99
			apply 'remove_store_from_bb'/3
			    (_cor2, _2890, [])
'remove_store_from_bb'/3 =
    %% Line 101
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Instr|Instrs],Env,Acc> when 'true' ->
	      let <NewAcc,NewEnv> =
		  %% Line 103
		  case Instr of
		    %% Line 104
		    <{'call',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
			let <_4703> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_3169> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor3> = {_4703,_3169}
				in  %% Line 105
				    <[Instr|_cor0],_cor3>
		    %% Line 106
		    <{'gctest',_cor26}> when 'true' ->
			let <_1450> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_2038> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor4> = {_1450,_2038}
				in  %% Line 107
				    <[Instr|_cor0],_cor4>
		    %% Line 108
		    <{'store',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			let <Base> =
			    %% Line 109
			    call 'hipe_rtl':'store_base'
				(Instr)
			in  let <Offset> =
				%% Line 110
				call 'hipe_rtl':'store_offset'
				    (Instr)
			    in  let <Size> =
				    %% Line 111
				    call 'hipe_rtl':'store_size'
					(Instr)
				in  let <StoreType> = {Base,Offset,Size}
				    in  let <_5033> =
					    %% Line 113
					    apply 'lookup_y'/2
						(StoreType, _cor1)
					in  %% Line 113
					    case _5033 of
					      %% Line 114
					      <'none'> when 'true' ->
						  let <_cor9> =
						      %% Line 115
						      apply 'insert'/3
							  (StoreType, 'true', _cor1)
						  in  %% Line 115
						      <[Instr|_cor0],_cor9>
					      %% Line 116
					      <'true'> when 'true' ->
						  %% Line 117
						  <_cor0,_cor1>
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_5033})
						-| ['compiler_generated'] )
					    end
		    %% Line 119
		    <{'load',_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
			let <_1147> =
			    %% Line 300
			    call 'gb_trees':'empty'
				()
			in  let <_2561> =
				%% Line 300
				call 'gb_trees':'empty'
				    ()
			    in  let <_cor11> = {_1147,_2561}
				in  %% Line 120
				    <[Instr|_cor0],_cor11>
		    %% Line 121
		    <_cor36> when 'true' ->
			let <_cor12> =
			    %% Line 122
			    apply 'remove_defines'/3
				(Instr, _cor1, 'store_filter_fun'/2)
			in  %% Line 122
			    <[Instr|_cor0],_cor12>
		  end
	      in  %% Line 124
		  apply 'remove_store_from_bb'/3
		      (Instrs, NewEnv, NewAcc)
	  %% Line 125
	  <[],Env,Acc> when 'true' ->
	      %% Line 126
	      {_cor0,_cor1}
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'remove_store_from_bb',3}}] )
	    -| ['compiler_generated'] )
	end
'store_filter_fun'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{X1,X2,_cor7},_cor8},PreColDefs> when 'true' ->
	      let <_cor3> =
		  %% Line 129
		  call 'lists':'member'
		      (X1, _cor0)
	      in  let <_cor2> =
		      %% Line 130
		      call 'lists':'member'
			  (X2, _cor0)
		  in  let <_cor4> =
			  %% Line 129
			  call 'erlang':'or'
			      (_cor3, _cor2)
		      in  %% Line 129
			  call 'erlang':'not'
			      (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'store_filter_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'optimize_fixnums'/1 =
    %% Line 138
    fun (_cor0) ->
	let <FixFun> = 'fixnum_opt'/2
	in  let <Info> =
		%% Line 140
		apply 'fix_point'/2
		    (_cor0, FixFun)
	    in  %% Line 141
		apply 'pass_through'/3
		    (_cor0, FixFun, Info)
'fixnum_opt'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	%% Line 144
	call 'lists':'foldl'
	    ('do_fixnums'/2, {[],_cor0}, _cor1)
'do_fixnums'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Instr,{Acc,Env}> when 'true' ->
	      %% Line 147
	      case _cor1 of
		%% Line 148
		<{'call',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
		    let <_cor2> =
			%% Line 149
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  %% Line 149
			{_cor2,Env}
		%% Line 150
		<{'gctest',_cor27}> when 'true' ->
		    let <_cor3> =
			%% Line 151
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  %% Line 151
			{_cor3,Env}
		%% Line 152
		<{'fixnumop',Dst,Src,_cor28}> when 'true' ->
		    let <_387> =
			%% Line 153
			apply 'lookup_y'/2
			    (Src, Env)
		    in  %% Line 153
			case _387 of
			  %% Line 154
			  <'none'> when 'true' ->
			      let <_476> =
				  %% Line 155
				  apply 'lookup_x'/2
				      (Src, Env)
			      in  %% Line 155
				  case _476 of
				    %% Line 156
				    <'none'> when 'true' ->
					let <_cor5> =
					    %% Line 157
					    call 'hipe_rtl_arch':'is_precoloured'
						(Src)
					in  let <_cor4> =
						%% Line 158
						call 'hipe_rtl_arch':'is_precoloured'
						    (Dst)
					    in  %% Line 157
						case call 'erlang':'or'
							 (_cor5, _cor4) of
						  %% Line 159
						  <'true'> when 'true' ->
						      let <_cor6> =
							  %% Line 160
							  call 'erlang':'++'
							      (Acc, [_cor1|[]])
						      in  %% Line 160
							  {_cor6,Env}
						  %% Line 161
						  <'false'> when 'true' ->
						      let <_cor8> =
							  %% Line 162
							  call 'erlang':'++'
							      (Acc, [_cor1|[]])
						      in  let <_cor7> =
							      %% Line 162
							      apply 'insert'/3
								  (Dst, Src, Env)
							  in  %% Line 162
							      {_cor8,_cor7}
						end
				    %% Line 164
				    <OtherSrc> when 'true' ->
					let <_cor10> =
					    %% Line 165
					    call 'hipe_rtl':'mk_move'
						(Dst, _476)
					in  let <_cor11> =
						%% Line 165
						call 'erlang':'++'
						    (Acc, [_cor10|[]])
					    in  %% Line 165
						{_cor11,Env}
				  end
			  %% Line 167
			  <OtherDst> when 'true' ->
			      let <_cor13> =
				  %% Line 168
				  call 'hipe_rtl':'mk_move'
				      (Dst, _387)
			      in  let <_cor14> =
				      %% Line 168
				      call 'erlang':'++'
					  (Acc, [_cor13|[]])
				  in  %% Line 168
				      {_cor14,Env}
			end
		%% Line 170
		<_cor29> when 'true' ->
		    let <_cor16> =
			%% Line 171
			call 'erlang':'++'
			    (Acc, [_cor1|[]])
		    in  %% Line 171
			{_cor16,Env}
	      end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'do_fixnums',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_point'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	let <Start> =
	    %% Line 221
	    call 'hipe_rtl_cfg':'start_label'
		(_cor1)
	in  let <Info> =
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 223
		apply 'fix_point'/4
		    ([Start|[]], _cor1, _cor0, Info)
'fix_point'/4 =
    %% Line 225
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Label|Labels],CFG,Fun,Info> when 'true' ->
	      let <_1751> =
		  %% Line 226
		  apply 'initial_stage'/4
		      (Label, _cor2, _cor1, _cor0)
	      in  %% Line 226
		  case _1751 of
		    %% Line 227
		    <{'true',_cor12,_cor13}> when 'true' ->
			%% Line 228
			apply 'fix_point'/4
			    (Labels, _cor2, _cor1, _cor0)
		    %% Line 229
		    <{'false',_cor14,NewInfoOut}> when 'true' ->
			let <Succ> =
			    %% Line 230
			    call 'hipe_rtl_cfg':'succ'
				(_cor2, Label)
			in  let <_cor7> =
				( letrec
				      'lc$^0'/1 =
					  fun (_cor4) ->
					      case _cor4 of
						<[New|_5238]> when 'true' ->
						    let <_822> =
							call 'lists':'member'
							    (New, Labels)
						    in  ( case _822 of
							    <'true'> when 'true' ->
								let <_cor5> =
								    apply 'lc$^0'/1
									(_5238)
								in  ( [New|_cor5]
								      -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^0'/1
								      (_5238)
							      -| ['compiler_generated'] )
							    ( <_cor6> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_822})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_3961> when 'true' ->
						      primop 'match_fail'
							  ({'function_clause',_cor4})
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Succ)
				  -| ['list_comprehension'] )
			    in  let <NewList> =
				    call 'erlang':'++'
					(Labels, _cor7)
				in  let <NewInfo> =
					call 'gb_trees':'enter'
					    (Label, NewInfoOut, _cor0)
				    in  %% Line 233
					apply 'fix_point'/4
					    (NewList, _cor2, _cor1, NewInfo)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1751})
		      -| ['compiler_generated'] )
		  end
	  %% Line 235
	  <[],_X_CFG,_X_Fun,Info> when 'true' ->
	      _cor0
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'fix_point',4}}] )
	    -| ['compiler_generated'] )
	end
'pass_through'/3 =
    %% Line 238
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 239
	    call 'hipe_rtl_cfg':'reverse_postorder'
		(_cor2)
	in  %% Line 239
	    apply 'pass_through'/4
		(_cor3, _cor2, _cor1, _cor0)
'pass_through'/4 =
    %% Line 242
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Label|Labels],CFG,Fun,Info> when 'true' ->
	      let <_3997> =
		  %% Line 243
		  apply 'initial_stage'/4
		      (Label, _cor2, _cor1, _cor0)
	      in  %% Line 243
		  case _3997 of
		    <{_cor10,NewCode,_cor11}> when 'true' ->
			let <NewBB> =
			    call 'hipe_bb':'mk_bb'
				(NewCode)
			in  let <NewCFG> =
				call 'hipe_rtl_cfg':'bb_add'
				    (_cor2, Label, NewBB)
			    in  %% Line 245
				apply 'pass_through'/4
				    (Labels, NewCFG, _cor1, _cor0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3997})
		      -| ['compiler_generated'] )
		  end
	  %% Line 246
	  <[],CFG,_X_Fun,_X_Info> when 'true' ->
	      _cor2
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pass_through',4}}] )
	    -| ['compiler_generated'] )
	end
'initial_stage'/4 =
    %% Line 249
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_3902> =
	    call 'gb_trees':'lookup'
		(_cor3, _cor0)
	in  let <OldInfoOut> =
		case _3902 of
		  <{'value',V}> when 'true' ->
		      V
		  <'none'> when 'true' ->
		      'none'
		  ( <_1035> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_3902})
		    -| ['compiler_generated'] )
		end
	    in  let <Pred> =
		    %% Line 251
		    call 'hipe_rtl_cfg':'pred'
			(_cor2, _cor3)
		in  let <_cor11> =
			%% Line 252
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[L|_cor7]> when 'true' ->
					    let <_3902> =
						call 'gb_trees':'lookup'
						    (L, _cor0)
					    in  let <_cor9> =
						    case _3902 of
						      <{'value',V}> when 'true' ->
							  V
						      <'none'> when 'true' ->
							  'none'
						      ( <_652> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_3902})
							-| ['compiler_generated'] )
						    end
						in  let <_cor10> =
							apply 'lc$^0'/1
							    (_cor7)
						    in  ( [_cor9|_cor10]
							  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_2039> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Pred)
			  -| ['list_comprehension'] )
		    in  let <InfoEnv> =
			    %% Line 252
			    apply 'join'/1
				(_cor11)
			in  let <CurrentBB> =
				call 'hipe_rtl_cfg':'bb'
				    (_cor2, _cor3)
			    in  let <OldCode> =
				    call 'hipe_bb':'code'
					(CurrentBB)
				in  let <Phis> =
					%% Line 292
					( letrec
					      'lc$^0'/1 =
						  fun (_2586) ->
						      case _2586 of
							<[I = {'phi',_cor6,_cor7,_cor8}|_1965]> when 'true' ->
							    let <_cor4> =
								apply 'lc$^0'/1
								    (_1965)
							    in  ( [I|_cor4]
								  -| ['compiler_generated'] )
							( <[_1456|_279]> when 'true' ->
							      apply 'lc$^0'/1
								  (_279)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_2028> when 'true' ->
							      primop 'match_fail'
								  ({'function_clause',_2586})
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (OldCode)
					  -| ['list_comprehension'] )
				    in  let <_27> =
					    %% Line 289
					    call 'erlang':'--'
						(OldCode, Phis)
					in  let <InfoIn> =
						%% Line 255
						apply 'join_phi'/3
						    (Phis, _cor0, InfoEnv)
					    in  let <_248> =
						    %% Line 256
						    apply _cor1
							(_27, InfoIn)
						in  %% Line 256
						    case _248 of
						      <{NewCode,NewInfoOut}> when 'true' ->
							  let <_cor18> =
							      %% Line 257
							      call 'erlang':'=:='
								  (OldInfoOut, NewInfoOut)
							  in  let <_cor17> =
								  %% Line 257
								  call 'erlang':'++'
								      (Phis, NewCode)
							      in  %% Line 257
								  {_cor18,_cor17,NewInfoOut}
						      ( <_cor16> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_248})
							-| ['compiler_generated'] )
						    end
'join_phi'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'phi',Dst,_cor13,AList}|Rest],Info,Env> when 'true' ->
	      let <_cor7> =
		  %% Line 260
		  fun (_cor4,_cor3) ->
		      %% Line 261
		      apply 'check_label'/3
			  (_cor4, _cor1, _cor3)
	      in  let <_3135> =
		      %% Line 260
		      call 'lists':'foldl'
			  (_cor7, %% Line 262
				  'none', AList)
		  in  %% Line 260
		      case _3135 of
			%% Line 263
			<'no_val'> when 'true' ->
			    %% Line 264
			    apply 'join_phi'/3
				(Rest, _cor1, _cor0)
			%% Line 265
			<'none'> when 'true' ->
			    %% Line 266
			    apply 'join_phi'/3
				(Rest, _cor1, _cor0)
			%% Line 267
			<Expr> when 'true' ->
			    let <_cor8> =
				%% Line 268
				apply 'insert'/3
				    (Dst, _3135, _cor0)
			    in  %% Line 268
				apply 'join_phi'/3
				    (Rest, _cor1, _cor8)
		      end
	  %% Line 270
	  <[],_X_Info,Env> when 'true' ->
	      _cor0
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'join_phi',3}}] )
	    -| ['compiler_generated'] )
	end
'check_label'/3 =
    %% Line 273
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Lbl,Var},Info,Acc> when 'true' ->
	      let <_4545> =
		  %% Line 274
		  call 'gb_trees':'lookup'
		      (Lbl, _cor1)
	      in  %% Line 274
		  case _4545 of
		    %% Line 275
		    <'none'> when 'true' ->
			_cor0
		    %% Line 276
		    <{'value',Env}> when 'true' ->
			let <_350> =
			    %% Line 277
			    apply 'lookup_x'/2
				(Var, Env)
			in  %% Line 277
			    case _350 of
			      %% Line 278
			      <'none'> when 'true' ->
				  'no_val'
			      %% Line 279
			      <_cor8>
				  when call 'erlang':'=:='
					(_350,
					 _cor0) ->
				  _cor0
			      %% Line 280
			      <V> when 'true' ->
				  %% Line 281
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor0,
					       'none') ->
					_350
				    %% Line 282
				    <> when 'true' ->
					'no_val'
				  end
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4545})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'check_label',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 302
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Y,{XtoY,YtoX}> when 'true' ->
	      let <NewYtoX> =
		  %% Line 303
		  apply 'remove_old_binding'/3
		      (_cor2, XtoY, YtoX)
	      in  let <NewXtoY> =
		      %% Line 304
		      apply 'remove_old_binding'/3
			  (_cor1, YtoX, XtoY)
		  in  let <_cor6> =
			  %% Line 305
			  call 'gb_trees':'enter'
			      (_cor2, _cor1, NewXtoY)
		      in  let <_cor5> =
			      %% Line 306
			      call 'gb_trees':'enter'
				  (_cor1, _cor2, NewYtoX)
			  in  %% Line 305
			      {_cor6,_cor5}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'insert',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_old_binding'/3 =
    %% Line 308
    fun (_cor2,_cor1,_cor0) ->
	let <_815> =
	    %% Line 309
	    call 'gb_trees':'lookup'
		(_cor2, _cor1)
	in  %% Line 309
	    case _815 of
	      %% Line 310
	      <'none'> when 'true' ->
		  _cor0
	      %% Line 312
	      <{'value',V}> when 'true' ->
		  let <_cor3> =
		      %% Line 313
		      call 'gb_trees':'delete'
			  (V, _cor0)
		  in  %% Line 313
		      call 'gb_trees':'balance'
			  (_cor3)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_815})
		-| ['compiler_generated'] )
	    end
'lookup_x'/2 =
    %% Line 316
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,{XtoY,_X_YtoX}> when 'true' ->
	      let <_2935> =
		  %% Line 317
		  call 'gb_trees':'lookup'
		      (_cor1, XtoY)
	      in  %% Line 317
		  case _2935 of
		    %% Line 318
		    <'none'> when 'true' ->
			'none'
		    %% Line 319
		    <{'value',Val}> when 'true' ->
			Val
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2935})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'lookup_x',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_y'/2 =
    %% Line 322
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Y,{_X_XtoY,YtoX}> when 'true' ->
	      let <_2020> =
		  %% Line 323
		  call 'gb_trees':'lookup'
		      (_cor1, YtoX)
	      in  %% Line 323
		  case _2020 of
		    %% Line 324
		    <'none'> when 'true' ->
			'none'
		    %% Line 325
		    <{'value',Val}> when 'true' ->
			Val
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2020})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'lookup_y',2}}] )
	    -| ['compiler_generated'] )
	end
'join'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      let <_cor1> =
		  call 'gb_trees':'empty'
		      ()
	      in  let <_1142> =
		      call 'gb_trees':'empty'
			  ()
		  in  {_cor1,_1142}
	  %% Line 329
	  <['none']> when 'true' ->
	      let <_cor1> =
		  call 'gb_trees':'empty'
		      ()
	      in  let <_2824> =
		      call 'gb_trees':'empty'
			  ()
		  in  {_cor1,_2824}
	  %% Line 330
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 331
	  <[E1|[E2|Rest]]> when 'true' ->
	      let <_cor1> =
		  apply 'join'/2
		      (E1, E2)
	      in  apply 'join'/1
		      ([_cor1|Rest])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'join',1}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{MapXY1,MapYX1},{MapXY2,MapYX2}> when 'true' ->
	      let <_cor3> =
		  %% Line 340
		  call 'gb_trees':'to_list'
		      (MapXY1)
	      in  let <_cor2> =
		      %% Line 341
		      call 'gb_trees':'to_list'
			  (MapXY2)
		  in  let <OrdDict> =
			  %% Line 340
			  call 'ordsets':'intersection'
			      (_cor3, _cor2)
		      in  let <_cor3> =
			      %% Line 342
			      call 'gb_trees':'from_orddict'
				  (OrdDict)
			  in  let <_124> =
				  %% Line 340
				  call 'gb_trees':'to_list'
				      (MapYX1)
			      in  let <_cor2> =
				      %% Line 341
				      call 'gb_trees':'to_list'
					  (MapYX2)
				  in  let <OrdDict> =
					  %% Line 340
					  call 'ordsets':'intersection'
					      (_124, _cor2)
				      in  let <_cor2> =
					      %% Line 342
					      call 'gb_trees':'from_orddict'
						  (OrdDict)
					  in  %% Line 334
					      {_cor3,_cor2}
	  %% Line 336
	  <'none',E> when 'true' ->
	      _cor0
	  %% Line 337
	  <E,'none'> when 'true' ->
	      _cor1
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_defines'/3 =
    %% Line 344
    fun (_cor2,_cor1,_cor0) ->
	let <Defs> =
	    %% Line 345
	    call 'hipe_rtl':'defines'
		(_cor2)
	in  let <_cor9> =
		%% Line 346
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[Def|_cor5]> when 'true' ->
				    let <_3140> =
					call 'hipe_rtl_arch':'is_precoloured'
					    (Def)
				    in  ( case _3140 of
					    <'true'> when 'true' ->
						let <_cor7> =
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [Def|_cor7]
						      -| ['compiler_generated'] )
					    ( <'false'> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor5)
					      -| ['compiler_generated'] )
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_3140})
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_1970> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Defs)
		  -| ['list_comprehension'] )
	    in  %% Line 346
		case _cor9 of
		  %% Line 347
		  <[]> when 'true' ->
		      _cor1
		  %% Line 349
		  <PreColDefs> when 'true' ->
		      %% Line 350
		      apply 'filter_environments'/3
			  (_cor9, _cor1, _cor0)
		end
'filter_environments'/3 =
    %% Line 353
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <PreColDefs,{M1,_X_M2},Fun> when 'true' ->
	      let <L1> =
		  %% Line 354
		  call 'gb_trees':'to_list'
		      (M1)
	      in  let <_cor9> =
		      %% Line 355
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[Tup|_cor5]> when 'true' ->
					  let <_3981> =
					      apply _cor0
						  (Tup, _cor2)
					  in  ( case _3981 of
						  <'true'> when 'true' ->
						      let <_cor7> =
							  apply 'lc$^0'/1
							      (_cor5)
						      in  ( [Tup|_cor7]
							    -| ['compiler_generated'] )
						  ( <'false'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor5)
						    -| ['compiler_generated'] )
						  ( <_cor8> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_3981})
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_360> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(L1)
			-| ['list_comprehension'] )
		  in  let <_cor15> =
			  %% Line 356
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor13) ->
					case _cor13 of
					  <[{X,Y}|_cor12]> when 'true' ->
					      let <_cor14> =
						  apply 'lc$^1'/1
						      (_cor12)
					      in  ( [{Y,X}|_cor14]
						    -| ['compiler_generated'] )
					  ( <[_cor11|_cor12]> when 'true' ->
						apply 'lc$^1'/1
						    (_cor12)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_3470> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor13})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (_cor9)
			    -| ['list_comprehension'] )
		      in  let <_cor19> =
			      %% Line 357
			      call 'gb_trees':'from_orddict'
				  (_cor9)
			  in  let <_cor17> =
				  %% Line 357
				  call 'orddict':'from_list'
				      (_cor15)
			      in  let <_cor18> =
				      %% Line 357
				      call 'gb_trees':'from_orddict'
					  (_cor17)
				  in  %% Line 357
				      {_cor19,_cor18}
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'filter_environments',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_ssa_avail_expr')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_ssa_avail_expr', _cor0)
end