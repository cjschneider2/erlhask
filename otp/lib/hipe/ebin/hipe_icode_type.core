module 'hipe_icode_type' ['cfg'/4,
			  'module_info'/0,
			  'module_info'/1,
			  'new__info'/1,
			  'replace_nones'/1,
			  'return__info'/1,
			  'return_any_args'/2,
			  'return_none'/0,
			  'return_none_args'/2,
			  'specialize'/1,
			  'unannotate_cfg'/1,
			  'update__info'/2]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'args_fun',{'type',48,'fun',[{'type',48,'product',[{'type',48,'mfa',[]}|[{'type',48,'cfg',[]}]]}|[{'type',48,'list',[{'remote_type',48,[{'atom',48,'erl_types'}|[{'atom',48,'erl_type'}|[[]]]]}]}]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'call_fun',{'type',49,'fun',[{'type',49,'product',[{'type',49,'mfa',[]}|[{'type',49,'list',[{'var',49,'_'}]}]]}|[{'remote_type',49,[{'atom',49,'erl_types'}|[{'atom',49,'erl_type'}|[[]]]]}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'final_fun',{'type',50,'fun',[{'type',50,'product',[{'type',50,'mfa',[]}|[{'type',50,'list',[{'var',50,'_'}]}]]}|[{'atom',50,'ok'}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'data',{'type',51,'tuple',[{'type',51,'mfa',[]}|[{'type',51,'args_fun',[]}|[{'type',51,'call_fun',[]}|[{'type',51,'final_fun',[]}]]]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','state'},[{'typed_record_field',{'record_field',100,{'atom',100,'info_map'},{'call',100,{'remote',100,{'atom',100,'gb_trees'},{'atom',100,'empty'}},[]}},{'remote_type',100,[{'atom',100,'gb_trees'}|[{'atom',100,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'cfg'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'cfg',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'liveness'},{'call',102,{'remote',102,{'atom',102,'gb_trees'},{'atom',102,'empty'}},[]}},{'remote_type',102,[{'atom',102,'gb_trees'}|[{'atom',102,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'arg_types'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'list',[{'remote_type',103,[{'atom',103,'erl_types'}|[{'atom',103,'erl_type'}|[[]]]]}]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'ret_type'},{'cons',104,{'call',104,{'atom',104,'t_none'},[]},{'nil',104}}},{'type',104,'list',[{'remote_type',104,[{'atom',104,'erl_types'}|[{'atom',104,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'lookupfun'}},{'type',105,'union',[{'atom',105,'undefined'}|[{'type',105,'call_fun',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'resultaction'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'final_fun',[]}]]}}]]]]]]],[]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'cfg',4},[{'type',112,'fun',[{'type',112,'product',[{'type',112,'cfg',[]}|[{'type',112,'mfa',[]}|[{'type',112,'comp_options',[]}|[{'type',112,'record',[{'atom',112,'comp_servers'}]}]]]]}|[{'type',112,'cfg',[]}]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'analyse',2},[{'type',186,'fun',[{'type',186,'product',[{'type',186,'cfg',[]}|[{'type',186,'data',[]}]]}|[{'atom',186,'ok'}]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'safe_analyse',2},[{'type',195,'fun',[{'type',195,'product',[{'type',195,'cfg',[]}|[{'type',195,'data',[]}]]}|[{'type',195,'record',[{'atom',195,'state'}]}]]}]}],
		%% Line 1113
		'spec' =
		    %% Line 1113
		    [{{'specialize',1},[{'type',1113,'fun',[{'type',1113,'product',[{'type',1113,'cfg',[]}]}|[{'type',1113,'cfg',[]}]]}]}],
		%% Line 1858
		'spec' =
		    %% Line 1858
		    [{{'any_is_none',1},[{'type',1858,'fun',[{'type',1858,'product',[{'type',1858,'list',[{'remote_type',1858,[{'atom',1858,'erl_types'}|[{'atom',1858,'erl_type'}|[[]]]]}]}]}|[{'type',1858,'boolean',[]}]]}]}],
		%% Line 2051
		'spec' =
		    %% Line 2051
		    [{{'unannotate_cfg',1},[{'type',2051,'fun',[{'type',2051,'product',[{'type',2051,'cfg',[]}]}|[{'type',2051,'cfg',[]}]]}]}],
		%% Line 2173
		'spec' =
		    %% Line 2173
		    [{{'replace_nones',1},[{'type',2173,'fun',[{'type',2173,'product',[{'type',2173,'union',[{'type',2173,'list',[{'remote_type',2173,[{'atom',2173,'erl_types'}|[{'atom',2173,'erl_type'}|[[]]]]}]}|[{'remote_type',2173,[{'atom',2173,'erl_types'}|[{'atom',2173,'erl_type'}|[[]]]]}]]}]}|[{'type',2174,'list',[{'remote_type',2174,[{'atom',2174,'erl_types'}|[{'atom',2174,'erl_type'}|[[]]]]}]}]]}]}],
		%% Line 2181
		'spec' =
		    %% Line 2181
		    [{{'replace_none',1},[{'type',2181,'fun',[{'type',2181,'product',[{'remote_type',2181,[{'atom',2181,'erl_types'}|[{'atom',2181,'erl_type'}|[[]]]]}]}|[{'remote_type',2181,[{'atom',2181,'erl_types'}|[{'atom',2181,'erl_type'}|[[]]]]}]]}]}],
		%% Line 2191
		'spec' =
		    %% Line 2191
		    [{{'update__info',2},[{'type',2191,'fun',[{'type',2191,'product',[{'type',2191,'list',[{'remote_type',2191,[{'atom',2191,'erl_types'}|[{'atom',2191,'erl_type'}|[[]]]]}]}|[{'type',2191,'list',[{'remote_type',2191,[{'atom',2191,'erl_types'}|[{'atom',2191,'erl_type'}|[[]]]]}]}]]}|[{'type',2192,'tuple',[{'type',2192,'boolean',[]}|[{'type',2192,'list',[{'remote_type',2192,[{'atom',2192,'erl_types'}|[{'atom',2192,'erl_type'}|[[]]]]}]}]]}]]}]}],
		%% Line 2202
		'spec' =
		    %% Line 2202
		    [{{'new__info',1},[{'type',2202,'fun',[{'type',2202,'product',[{'type',2202,'list',[{'remote_type',2202,[{'atom',2202,'erl_types'}|[{'atom',2202,'erl_type'}|[[]]]]}]}]}|[{'type',2202,'list',[{'remote_type',2202,[{'atom',2202,'erl_types'}|[{'atom',2202,'erl_type'}|[[]]]]}]}]]}]}],
		%% Line 2207
		'spec' =
		    %% Line 2207
		    [{{'return__info',1},[{'type',2207,'fun',[{'type',2207,'product',[{'remote_type',2207,[{'atom',2207,'erl_types'}|[{'atom',2207,'erl_type'}|[[]]]]}]}|[{'remote_type',2207,[{'atom',2207,'erl_types'}|[{'atom',2207,'erl_type'}|[[]]]]}]]}]}],
		%% Line 2212
		'spec' =
		    %% Line 2212
		    [{{'return_none',0},[{'type',2212,'fun',[{'type',2212,'product',[]}|[{'type',2212,'nonempty_list',[{'remote_type',2212,[{'atom',2212,'erl_types'}|[{'atom',2212,'erl_type'}|[[]]]]}]}]]}]}],
		%% Line 2217
		'spec' =
		    %% Line 2217
		    [{{'return_none_args',2},[{'type',2217,'fun',[{'type',2217,'product',[{'type',2217,'cfg',[]}|[{'type',2217,'mfa',[]}]]}|[{'type',2217,'list',[{'remote_type',2217,[{'atom',2217,'erl_types'}|[{'atom',2217,'erl_type'}|[[]]]]}]}]]}]}],
		%% Line 2227
		'spec' =
		    %% Line 2227
		    [{{'return_any_args',2},[{'type',2227,'fun',[{'type',2227,'product',[{'type',2227,'cfg',[]}|[{'type',2227,'mfa',[]}]]}|[{'type',2227,'list',[{'remote_type',2227,[{'atom',2227,'erl_types'}|[{'atom',2227,'erl_type'}|[[]]]]}]}]]}]}]]
'cfg'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 115
	case call 'proplists':'get_bool'
		 ('concurrent_comp', _cor1) of
	  %% Line 116
	  <'true'> when 'true' ->
	      %% Line 117
	      ( case _cor0 of
		  ( <( {'comp_servers',_cor11,_cor12,_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'concurrent_cfg'/3
			    (_cor3, _cor2, _rec0)
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','comp_servers'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 118
	  <'false'> when 'true' ->
	      %% Line 119
	      apply 'ordinary_cfg'/2
		  (_cor3, _cor2)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'concurrent_cfg'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 123
	    call 'erlang':'self'
		()
	in  do  %% Line 123
		call 'erlang':'!'
		    (_cor0, {'ready',{_cor1,_cor3}})
		%% Line 124
		case apply 'do_analysis'/2
			 (_cor2, _cor1) of
		  <{ArgsFun,CallFun,FinalFun}> when 'true' ->
		      let <Ans> =
			  %% Line 125
			  apply 'do_rewrite'/5
			      (_cor2, _cor1, ArgsFun, CallFun, FinalFun)
		      in  do  %% Line 126
			      call 'erlang':'!'
				  (_cor0, {'done_rewrite',_cor1})
			      %% Line 127
			      Ans
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'do_analysis'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	%% Line 130
	receive
	  %% Line 131
	  <{'analyse',{ArgsFun,CallFun,FinalFun}}> when 'true' ->
	      do  %% Line 132
		  apply 'analyse'/2
		      (_cor1, {_cor0,ArgsFun,CallFun,FinalFun})
		  %% Line 133
		  apply 'do_analysis'/2
		      (_cor1, _cor0)
	  %% Line 134
	  <{'done',Done = {_X_NewArgsFun,_X_NewCallFun,_X_NewFinalFun}}> when 'true' ->
	      %% Line 135
	      Done
	after 'infinity' ->
	  'true'
'do_rewrite'/5 =
    %% Line 138
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 139
	apply 'common_rewrite'/2
	    (_cor4, {_cor3,_cor2,_cor1,_cor0})
'ordinary_cfg'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 142
	    apply 'make_data'/2
		(_cor1, _cor0)
	in  %% Line 143
	    apply 'common_rewrite'/2
		(_cor1, Data)
'common_rewrite'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	let <State> =
	    %% Line 146
	    apply 'safe_analyse'/2
		(_cor1, _cor0)
	in  let <NewState> =
		%% Line 147
		apply 'simplify_controlflow'/1
		    (State)
	    in  let <_cor4> =
		    %% Line 148
		    apply 'annotate_cfg'/1
			(NewState)
		in  let <NewCfg> =
			%% Line 148
			apply 'state__cfg'/1
			    (_cor4)
		    in  let <_cor6> =
			    %% Line 149
			    apply 'specialize'/1
				(NewCfg)
			in  %% Line 149
			    call 'hipe_icode_cfg':'remove_unreachable_code'
				(_cor6)
'make_data'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,MFA = {_X_M,_X_F,A}> when 'true' ->
	      let <_cor3> =
		  %% Line 153
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 154
		    <'true'> when 'true' ->
			call 'hipe_icode_cfg':'closure_arity'
			    (Cfg)
		    %% Line 155
		    <'false'> when 'true' ->
			A
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 157
		      call 'erl_types':'t_any'
			  ()
		  in  let <Args> =
			  %% Line 157
			  call 'lists':'duplicate'
			      (_cor3, _cor5)
		      in  let <ArgsFun> =
			      %% Line 158
			      ( fun (_cor8,_cor7) ->
				    Args
				-| [{'id',{0,0,'-make_data/2-fun-0-'}}] )
			  in  let <CallFun> =
				  %% Line 159
				  ( fun (_cor13,_cor12) ->
					call 'erl_types':'t_any'
					    ()
				    -| [{'id',{0,0,'-make_data/2-fun-1-'}}] )
			      in  let <FinalFun> =
				      %% Line 160
				      ( fun (_cor18,_cor17) ->
					    'ok'
					-| [{'id',{0,0,'-make_data/2-fun-2-'}}] )
				  in  %% Line 161
				      {MFA,ArgsFun,CallFun,FinalFun}
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'make_data',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	%% Line 189
	try
	    %% Line 190
	    case apply 'safe_analyse'/2
		     (_cor1, _cor0) of
	      <{'state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
		  %% Line 191
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 192
	      <'throw','no_input',_cor16> when 'true' ->
		  'ok'
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'safe_analyse'/2 =
    %% Line 197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,Data = {MFA,_cor8,_cor9,_cor10}> when 'true' ->
	      let <State> =
		  %% Line 198
		  apply 'new_state'/2
		      (Cfg, Data)
	      in  let <NewState> =
		      %% Line 199
		      apply 'analyse_blocks'/2
			  (State, MFA)
		  in  let <_cor4> =
			  %% Line 200
			  apply 'state__resultaction'/1
			      (NewState)
		      in  let <_cor5> =
			      %% Line 200
			      apply 'state__ret_type'/1
				  (NewState)
			  in  do  %% Line 200
				  apply _cor4
				      (MFA, _cor5)
				  %% Line 201
				  NewState
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'safe_analyse',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse_blocks'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	let <Work> =
	    %% Line 204
	    apply 'init_work'/1
		(_cor1)
	in  %% Line 205
	    apply 'analyse_blocks'/3
		(Work, _cor1, _cor0)
'analyse_blocks'/3 =
    %% Line 207
    fun (_cor2,_cor1,_cor0) ->
	%% Line 208
	case apply 'get_work'/1
		 (_cor2) of
	  %% Line 209
	  <'fixpoint'> when 'true' ->
	      _cor1
	  %% Line 211
	  <{Label,NewWork}> when 'true' ->
	      let <Info> =
		  %% Line 212
		  apply 'state__info_in'/2
		      (_cor1, Label)
	      in  let <_cor8> =
		      %% Line 214
		      try
			  apply 'analyse_block'/3
			      (Label, Info, _cor1)
		      of <_cor4> ->
			  _cor4
		      catch <_cor7,_cor6,_cor5> ->
			  case <_cor7,_cor6,_cor5> of
			    %% Line 215
			    <'throw','none_type',_cor15> when 'true' ->
				%% Line 217
				{_cor1,[]}
			    ( <_cor7,_cor6,_cor5> when 'true' ->
				  primop 'raise'
				      (_cor5, _cor6)
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 213
		      case _cor8 of
			<{NewState,NewLabels}> when 'true' ->
			    let <NewWork2> =
				%% Line 219
				apply 'add_work'/2
				    (NewWork, NewLabels)
			    in  %% Line 220
				apply 'analyse_blocks'/3
				    (NewWork2, NewState, _cor0)
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'analyse_block'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	let <BB> =
	    %% Line 224
	    apply 'state__bb'/2
		(_cor0, _cor2)
	in  let <Code> =
		%% Line 225
		call 'hipe_bb':'butlast'
		    (BB)
	    in  let <Last> =
		    %% Line 226
		    call 'hipe_bb':'last'
			(BB)
		in  let <_cor6> =
			%% Line 227
			apply 'state__lookupfun'/1
			    (_cor0)
		    in  let <InfoOut> =
			    %% Line 227
			    apply 'analyse_insns'/3
				(Code, _cor1, _cor6)
			in  let <NewState> =
				%% Line 228
				apply 'state__info_out_update'/3
				    (_cor0, _cor2, InfoOut)
			    in  %% Line 229
				case Last of
				  %% Line 230
				  <{'icode_if',_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
				      let <UpdateInfo> =
					  %% Line 231
					  apply 'do_if'/2
					      (Last, InfoOut)
				      in  %% Line 232
					  apply 'do_updates'/2
					      (NewState, UpdateInfo)
				  %% Line 233
				  <{'icode_type',_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
				      let <UpdateInfo> =
					  %% Line 234
					  apply 'do_type'/2
					      (Last, InfoOut)
				      in  %% Line 235
					  apply 'do_updates'/2
					      (NewState, UpdateInfo)
				  %% Line 236
				  <{'icode_switch_tuple_arity',_cor38,_cor39,_cor40,_cor41}> when 'true' ->
				      let <UpdateInfo> =
					  %% Line 237
					  apply 'do_switch_tuple_arity'/2
					      (Last, InfoOut)
				      in  %% Line 238
					  apply 'do_updates'/2
					      (NewState, UpdateInfo)
				  %% Line 239
				  <{'icode_switch_val',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
				      let <UpdateInfo> =
					  %% Line 240
					  apply 'do_switch_val'/2
					      (Last, InfoOut)
				      in  %% Line 241
					  apply 'do_updates'/2
					      (NewState, UpdateInfo)
				  %% Line 242
				  <{'icode_enter',_cor46,_cor47,_cor48}> when 'true' ->
				      let <_cor13> =
					  %% Line 243
					  apply 'state__lookupfun'/1
					      (NewState)
				      in  let <NewState1> =
					      %% Line 243
					      apply 'do_enter'/4
						  (Last, InfoOut, NewState, _cor13)
					  in  %% Line 244
					      apply 'do_updates'/2
						  (NewState1, [])
				  %% Line 245
				  <{'icode_call',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
				      %% Line 246
				      case apply 'do_last_call'/4
					       (Last, InfoOut, NewState, _cor2) of
					<{NewState1,UpdateInfo}> when 'true' ->
					    %% Line 247
					    apply 'do_updates'/2
						(NewState1, UpdateInfo)
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
				  %% Line 248
				  <{'icode_return',_cor56}> when 'true' ->
				      let <NewState1> =
					  %% Line 249
					  apply 'do_return'/3
					      (Last, InfoOut, NewState)
				      in  %% Line 250
					  apply 'do_updates'/2
					      (NewState1, [])
				  %% Line 251
				  <_cor57> when 'true' ->
				      let <_cor22> =
					  %% Line 252
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor20) ->
							case _cor20 of
							  <[X|_cor18]> when 'true' ->
							      let <_cor21> =
								  apply 'lc$^0'/1
								      (_cor18)
							      in  ( [{X,InfoOut}|_cor21]
								    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor20> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor20})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  let <_cor19> =
						    apply 'state__succ'/2
							(NewState, _cor2)
						in  apply 'lc$^0'/1
							(_cor19)
					    -| ['list_comprehension'] )
				      in  %% Line 253
					  apply 'do_updates'/2
					      (NewState, _cor22)
				end
'analyse_insns'/3 =
    %% Line 256
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Insns],Info,LookupFun> when 'true' ->
	      let <NewInfo> =
		  %% Line 257
		  apply 'analyse_insn'/3
		      (I, Info, LookupFun)
	      in  %% Line 258
		  apply 'analyse_insns'/3
		      (Insns, NewInfo, LookupFun)
	  %% Line 259
	  <[],Info,_cor7> when 'true' ->
	      %% Line 260
	      Info
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'analyse_insns',3}}] )
	    -| ['compiler_generated'] )
	end
'analyse_insn'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	%% Line 263
	case _cor2 of
	  %% Line 264
	  <{'icode_move',_cor13,_cor14}> when 'true' ->
	      %% Line 265
	      apply 'do_move'/2
		  (_cor2, _cor1)
	  %% Line 266
	  <{'icode_call',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      let <NewInfo> =
		  %% Line 267
		  apply 'do_call'/3
		      (_cor2, _cor1, _cor0)
	      in  %% Line 269
		  apply 'update_call_arguments'/2
		      (_cor2, NewInfo)
	  %% Line 270
	  <{'icode_phi',_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor4> =
		  %% Line 271
		  call 'hipe_icode':'args'
		      (_cor2)
	      in  let <_cor5> =
		      %% Line 271
		      apply 'join_list'/2
			  (_cor4, _cor1)
		  in  let <Type> =
			  %% Line 271
			  call 'erl_types':'t_limit'
			      (_cor5, 3)
		      in  %% Line 272
			  apply 'enter_defines'/3
			      (_cor2, Type, _cor1)
	  %% Line 273
	  <{'icode_begin_handler',_cor25}> when 'true' ->
	      let <_cor7> =
		  %% Line 274
		  call 'erl_types':'t_any'
		      ()
	      in  %% Line 274
		  apply 'enter_defines'/3
		      (_cor2, _cor7, _cor1)
	  %% Line 275
	  <_cor26> when 'true' ->
	      %% Line 277
	      case apply 'defines'/1
		       (_cor2) of
		%% Line 278
		<[]> when 'true' ->
		    _cor1
		%% Line 279
		<_cor27> when 'true' ->
		    call 'erlang':'exit'
			({[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[100|[101|[115|[116|[105|[110|[97|[116|[105|[111|[110|[32|[110|[111|[116|[32|[97|[110|[97|[108|[121|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor2})
	      end
	end
'do_move'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	%% Line 285
	case call 'hipe_icode':'args'
		 (_cor1) of
	  <[Src|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 286
		  apply 'lookup'/2
		      (Src, _cor0)
	      in  %% Line 286
		  apply 'enter_defines'/3
		      (_cor1, _cor3, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_basic_call'/3 =
    %% Line 288
    fun (_cor2,_cor1,_cor0) ->
	%% Line 289
	case call 'hipe_icode':'call_type'
		 (_cor2) of
	  %% Line 290
	  <'primop'> when 'true' ->
	      let <Fun> =
		  %% Line 291
		  call 'hipe_icode':'call_fun'
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 292
		      call 'hipe_icode':'args'
			  (_cor2)
		  in  let <ArgTypes> =
			  %% Line 292
			  apply 'lookup_list'/2
			      (_cor4, _cor1)
		      in  %% Line 293
			  apply 'primop_type'/2
			      (Fun, ArgTypes)
	  %% Line 294
	  <'remote'> when 'true' ->
	      %% Line 295
	      case call 'hipe_icode':'call_fun'
		       (_cor2) of
		<{M,F,A}> when 'true' ->
		    let <_cor7> =
			%% Line 296
			call 'hipe_icode':'args'
			    (_cor2)
		    in  let <ArgTypes> =
			    %% Line 296
			    apply 'lookup_list'/2
				(_cor7, _cor1)
			in  let <None> =
				%% Line 297
				call 'erl_types':'t_none'
				    ()
			    in  %% Line 298
				case call 'erl_bif_types':'type'
					 (M, F, A, ArgTypes) of
				  %% Line 299
				  <_cor19>
				      when call 'erlang':'=:='
					    (_cor19,
					     None) ->
				      let <NewArgTypes> =
					  %% Line 300
					  apply 'add_funs_to_arg_types'/1
					      (ArgTypes)
				      in  %% Line 301
					  call 'erl_bif_types':'type'
					      (M, F, A, NewArgTypes)
				  %% Line 302
				  <Other> when 'true' ->
				      %% Line 303
				      Other
				end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 305
	  <'local'> when 'true' ->
	      let <MFA> =
		  %% Line 306
		  call 'hipe_icode':'call_fun'
		      (_cor2)
	      in  let <_cor13> =
		      %% Line 307
		      call 'hipe_icode':'args'
			  (_cor2)
		  in  let <ArgTypes> =
			  %% Line 307
			  apply 'lookup_list'/2
			      (_cor13, _cor1)
		      in  %% Line 309
			  apply _cor0
			      (MFA, ArgTypes)
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'do_call'/3 =
    %% Line 312
    fun (_cor2,_cor1,_cor0) ->
	let <RetType> =
	    %% Line 313
	    apply 'do_basic_call'/3
		(_cor2, _cor1, _cor0)
	in  let <IsNone> =
		%% Line 314
		call 'erl_types':'t_is_none'
		    (RetType)
	    in  %% Line 316
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (IsNone,
			     'true') ->
		      call 'erlang':'throw'
			  ('none_type')
		  %% Line 317
		  <> when 'true' ->
		      apply 'enter_defines'/3
			  (_cor2, RetType, _cor1)
		end
'do_safe_call'/3 =
    %% Line 320
    fun (_cor2,_cor1,_cor0) ->
	let <RetType> =
	    %% Line 321
	    apply 'do_basic_call'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 322
	    apply 'enter_defines'/3
		(_cor2, RetType, _cor1)
'do_last_call'/4 =
    %% Line 324
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 325
	try
	    let <_cor4> =
		%% Line 326
		apply 'state__lookupfun'/1
		    (_cor1)
	    in  let <NewInfoOut> =
		    %% Line 326
		    apply 'do_call'/3
			(_cor3, _cor2, _cor4)
		in  let <NewState> =
			%% Line 327
			apply 'state__info_out_update'/3
			    (_cor1, _cor0, NewInfoOut)
		    in  let <ContInfo> =
			    %% Line 328
			    apply 'update_call_arguments'/2
				(_cor3, NewInfoOut)
			in  let <Cont> =
				%% Line 329
				call 'hipe_icode':'call_continuation'
				    (_cor3)
			    in  let <Fail> =
				    %% Line 330
				    call 'hipe_icode':'call_fail_label'
					(_cor3)
				in  let <_cor14> =
					%% Line 331
					( fun (_cor11,_cor10) ->
					      'ok'
					  -| [{'id',{0,0,'-do_last_call/4-fun-0-'}}] )
				    in  do  %% Line 331
					    apply _cor14
						([67|[111|[110|[116|[105|[110|[102|[111|[44|[32|[78|[101|[119|[73|[110|[102|[111|[79|[117|[116]]]]]]]]]]]]]]]]]]]], {ContInfo,NewInfoOut})
					    let <_cor19> =
						%% Line 333
						case Fail of
						  %% Line 334
						  <[]> when 'true' ->
						      %% Line 335
						      [{Cont,ContInfo}|[]]
						  %% Line 336
						  <_cor33> when 'true' ->
						      %% Line 337
						      case apply 'call_always_fails'/2
							       (_cor3, _cor2) of
							%% Line 338
							<'true'> when 'true' ->
							    %% Line 339
							    [{Fail,NewInfoOut}|[]]
							%% Line 340
							<'false'> when 'true' ->
							    let <Fun> =
								%% Line 341
								call 'hipe_icode':'call_fun'
								    (_cor3)
							    in  %% Line 342
								case call 'hipe_icode_primops':'fails'
									 (Fun) of
								  %% Line 343
								  <'true'> when 'true' ->
								      %% Line 344
								      [{Cont,ContInfo}|[{Fail,NewInfoOut}|[]]]
								  %% Line 345
								  <'false'> when 'true' ->
								      %% Line 346
								      [{Cont,ContInfo}|[]]
								  ( <_cor16> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor16})
								    -| ['compiler_generated'] )
								end
							( <_cor17> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor17})
							  -| ['compiler_generated'] )
						      end
						end
					    in  %% Line 350
						{NewState,_cor19}
	of <_cor21> ->
	    _cor21
	catch <_cor24,_cor23,_cor22> ->
	    case <_cor24,_cor23,_cor22> of
	      %% Line 351
	      <'throw','none_type',_cor34> when 'true' ->
		  let <State2> =
		      %% Line 352
		      apply 'state__info_out_update'/3
			  (_cor1, _cor0, _cor2)
		  in  %% Line 353
		      case call 'hipe_icode':'call_fail_label'
			       (_cor3) of
			%% Line 354
			<[]> when 'true' ->
			    call 'erlang':'throw'
				('none_type')
			%% Line 355
			<FailLbl> when 'true' ->
			    %% Line 356
			    {State2,[{FailLbl,_cor2}|[]]}
		      end
	      ( <_cor24,_cor23,_cor22> when 'true' ->
		    primop 'raise'
			(_cor22, _cor23)
		-| ['compiler_generated'] )
	    end
'call_always_fails'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'icode_call',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15},Info> when 'true' ->
	      %% Line 361
	      case call 'hipe_icode':'call_fun'
		       (I) of
		%% Line 363
		<{'erlang','halt',0}> when 'true' ->
		    'false'
		%% Line 364
		<{'erlang','halt',1}> when 'true' ->
		    'false'
		%% Line 365
		<{'erlang','exit',1}> when 'true' ->
		    'false'
		%% Line 366
		<{'erlang','error',1}> when 'true' ->
		    'false'
		%% Line 367
		<{'erlang','error',2}> when 'true' ->
		    'false'
		%% Line 368
		<{'erlang','throw',1}> when 'true' ->
		    'false'
		%% Line 369
		<{'erlang','hibernate',3}> when 'true' ->
		    'false'
		%% Line 370
		<Fun> when 'true' ->
		    %% Line 371
		    case call 'hipe_icode':'call_type'
			     (I) of
		      %% Line 372
		      <'primop'> when 'true' ->
			  let <_cor2> =
			      %% Line 373
			      call 'hipe_icode':'call_args'
				  (I)
			  in  let <Args> =
				  %% Line 373
				  apply 'safe_lookup_list'/2
				      (_cor2, Info)
			      in  let <ReturnType> =
				      %% Line 374
				      apply 'primop_type'/2
					  (Fun, Args)
				  in  %% Line 375
				      call 'erl_types':'t_is_none'
					  (ReturnType)
		      %% Line 376
		      <_cor16> when 'true' ->
			  'false'
		    end
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'call_always_fails',2}}] )
	    -| ['compiler_generated'] )
	end
'do_enter'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 382
	    call 'hipe_icode':'args'
		(_cor3)
	in  let <ArgTypes> =
		%% Line 382
		apply 'lookup_list'/2
		    (_cor4, _cor2)
	    in  let <_cor13> =
		    %% Line 384
		    case call 'hipe_icode':'enter_type'
			     (_cor3) of
		      %% Line 385
		      <'local'> when 'true' ->
			  let <MFA> =
			      %% Line 386
			      call 'hipe_icode':'enter_fun'
				  (_cor3)
			  in  %% Line 387
			      apply _cor0
				  (MFA, ArgTypes)
		      %% Line 388
		      <'remote'> when 'true' ->
			  %% Line 389
			  case call 'hipe_icode':'enter_fun'
				   (_cor3) of
			    <{M,F,A}> when 'true' ->
				let <None> =
				    %% Line 390
				    call 'erl_types':'t_none'
					()
				in  %% Line 391
				    case call 'erl_bif_types':'type'
					     (M, F, A, ArgTypes) of
				      %% Line 392
				      <_cor19>
					  when call 'erlang':'=:='
						(_cor19,
						 None) ->
					  let <NewArgTypes> =
					      %% Line 393
					      apply 'add_funs_to_arg_types'/1
						  (ArgTypes)
					  in  %% Line 394
					      call 'erl_bif_types':'type'
						  (M, F, A, NewArgTypes)
				      %% Line 395
				      <Other> when 'true' ->
					  %% Line 396
					  Other
				    end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 398
		      <'primop'> when 'true' ->
			  let <Fun> =
			      %% Line 399
			      call 'hipe_icode':'enter_fun'
				  (_cor3)
			  in  %% Line 400
			      apply 'primop_type'/2
				  (Fun, ArgTypes)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		in  %% Line 402
		    apply 'state__ret_type_update'/2
			(_cor1, _cor13)
'do_return'/3 =
    %% Line 404
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 405
	    call 'hipe_icode':'args'
		(_cor2)
	in  let <RetTypes> =
		%% Line 405
		apply 'lookup_list'/2
		    (_cor3, _cor1)
	    in  %% Line 406
		apply 'state__ret_type_update'/2
		    (_cor0, RetTypes)
'do_if'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	let <TrueLab> =
	    %% Line 410
	    call 'hipe_icode':'if_true_label'
		(_cor1)
	in  let <FalseLab> =
		%% Line 411
		call 'hipe_icode':'if_false_label'
		    (_cor1)
	    in  %% Line 412
		case call 'hipe_icode':'if_args'
			 (_cor1) of
		  %% Line 413
		  <Args = [Arg1|[Arg2|[]]]> when 'true' ->
		      %% Line 414
		      case apply 'lookup_list'/2
			       (Args, _cor0) of
			<[Type1|[Type2|[]]]> when 'true' ->
			    let <_cor7> =
				%% Line 415
				( case call 'erl_types':'t_is_none'
					   (Type1) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  call 'erl_types':'t_is_none'
					      (Type2)
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor5}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 415
				case _cor7 of
				  %% Line 416
				  <'true'> when 'true' ->
				      %% Line 417
				      [{TrueLab,_cor0}|[{FalseLab,_cor0}|[]]]
				  %% Line 418
				  <'false'> when 'true' ->
				      let <Inf> =
					  %% Line 419
					  call 'erl_types':'t_inf'
					      (Type1, Type2)
				      in  %% Line 420
					  case call 'hipe_icode':'if_op'
						   (_cor1) of
					    %% Line 421
					    <'=:='> when 'true' ->
						%% Line 422
						case call 'erl_types':'t_is_none'
							 (Inf) of
						  %% Line 423
						  <'true'> when 'true' ->
						      %% Line 424
						      [{FalseLab,_cor0}|[]]
						  %% Line 425
						  <'false'> when 'true' ->
						      let <_cor9> =
							  %% Line 426
							  apply 'enter'/3
							      (Arg2, Inf, _cor0)
						      in  let <_cor10> =
							      %% Line 426
							      apply 'enter'/3
								  (Arg1, Inf, _cor9)
							  in  %% Line 426
							      [{TrueLab,_cor10}|%% Line 427
										[{FalseLab,_cor0}|[]]]
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor11})
						    -| ['compiler_generated'] )
						end
					    %% Line 429
					    <'=/='> when 'true' ->
						%% Line 430
						case call 'erl_types':'t_is_none'
							 (Inf) of
						  %% Line 431
						  <'true'> when 'true' ->
						      %% Line 432
						      [{TrueLab,_cor0}|[]]
						  %% Line 433
						  <'false'> when 'true' ->
						      let <_cor12> =
							  %% Line 434
							  apply 'enter'/3
							      (Arg2, Inf, _cor0)
						      in  let <_cor13> =
							      %% Line 434
							      apply 'enter'/3
								  (Arg1, Inf, _cor12)
							  in  %% Line 434
							      [{FalseLab,_cor13}|%% Line 435
										 [{TrueLab,_cor0}|[]]]
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor14})
						    -| ['compiler_generated'] )
						end
					    %% Line 437
					    <'=='> when 'true' ->
						%% Line 438
						[{TrueLab,_cor0}|[{FalseLab,_cor0}|[]]]
					    %% Line 439
					    <'/='> when 'true' ->
						%% Line 440
						[{TrueLab,_cor0}|[{FalseLab,_cor0}|[]]]
					    %% Line 441
					    <Op> when 'true' ->
						%% Line 442
						apply 'integer_range_inequality_propagation'/6
						    (Op, Arg1, Arg2, %% Line 443
								     TrueLab, %% Line 443
									      FalseLab, _cor0)
					  end
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor16})
				    -| ['compiler_generated'] )
				end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
		  %% Line 448
		  <_cor20> when 'true' ->
		      %% Line 450
		      [{TrueLab,_cor0}|[{FalseLab,_cor0}|[]]]
		end
'integer_range_inequality_propagation'/6 =
    %% Line 453
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arg1> =
	    %% Line 454
	    apply 'lookup'/2
		(_cor4, _cor0)
	in  let <Arg2> =
		%% Line 455
		apply 'lookup'/2
		    (_cor3, _cor0)
	    in  let <_cor12> =
		    %% Line 456
		    ( fun (_cor9,_cor8) ->
			  'ok'
		      -| [{'id',{0,0,'-integer_range_inequality_propagation/6-fun-0-'}}] )
		in  do  %% Line 456
			apply _cor12
			    ([97|[114|[103|[115]]]], [Arg1|[Arg2|[]]])
			let <_cor13> =
			    %% Line 457
			    call 'erl_types':'t_integer'
				()
			in  let <IntArg1> =
				%% Line 457
				call 'erl_types':'t_inf'
				    (Arg1, _cor13)
			    in  let <_cor15> =
				    %% Line 458
				    call 'erl_types':'t_integer'
					()
				in  let <IntArg2> =
					%% Line 458
					call 'erl_types':'t_inf'
					    (Arg2, _cor15)
				    in  let <_cor17> =
					    %% Line 459
					    call 'erl_types':'t_integer'
						()
					in  let <NonIntArg1> =
						%% Line 459
						call 'erl_types':'t_subtract'
						    (Arg1, _cor17)
					    in  let <_cor19> =
						    %% Line 460
						    call 'erl_types':'t_integer'
							()
						in  let <NonIntArg2> =
							%% Line 460
							call 'erl_types':'t_subtract'
							    (Arg2, _cor19)
						    in  let <_cor25> =
							    %% Line 461
							    ( fun (_cor22,_cor21) ->
								  'ok'
							      -| [{'id',{0,0,'-integer_range_inequality_propagation/6-fun-1-'}}] )
							in  do  %% Line 461
								apply _cor25
								    ([110|[111|[110|[105|[110|[116|[97|[114|[103|[115]]]]]]]]]], [NonIntArg1|[NonIntArg2|[]]])
								let <_cor27> =
								    %% Line 462
								    call 'erl_types':'t_is_none'
									(IntArg1)
								in  let <_cor26> =
									%% Line 462
									call 'erl_types':'t_is_none'
									    (IntArg2)
								    in  %% Line 462
									case call 'erlang':'or'
										 (_cor27, _cor26) of
									  %% Line 463
									  <'true'> when 'true' ->
									      let <_cor32> =
										  %% Line 464
										  ( fun (_cor29,_cor28) ->
											'ok'
										    -| [{'id',{0,0,'-integer_range_inequality_propagation/6-fun-2-'}}] )
									      in  do  %% Line 464
										      apply _cor32
											  ([111|[110|[101|[32|[105|[115|[32|[110|[111|[110|[101]]]]]]]]]]], [IntArg1|[IntArg2|[]]])
										      %% Line 465
										      [{_cor2,_cor0}|[{_cor1,_cor0}|[]]]
									  %% Line 466
									  <'false'> when 'true' ->
									      let <_cor76,FalseArg1,FalseArg2,TrueArg1,TrueArg2> =
										  %% Line 467
										  case _cor5 of
										    %% Line 468
										    <'>='> when 'true' ->
											let <_cor66> =
											    %% Line 470
											    apply 'integer_range_less_then_propagator'/2
												(IntArg1, IntArg2)
											in  %% Line 469
											    case _cor66 of
											      <{FalseArg1,FalseArg2,TrueArg1,TrueArg2}> when 'true' ->
												  <( _cor66
												     -| ['compiler_generated'] ),FalseArg1,FalseArg2,TrueArg1,TrueArg2>
											      ( <_cor33> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor33})
												-| ['compiler_generated'] )
											    end
										    %% Line 471
										    <'>'> when 'true' ->
											let <_cor67> =
											    %% Line 473
											    apply 'integer_range_less_then_propagator'/2
												(IntArg2, IntArg1)
											in  %% Line 472
											    case _cor67 of
											      <{TrueArg2,TrueArg1,FalseArg2,FalseArg1}> when 'true' ->
												  <( _cor67
												     -| ['compiler_generated'] ),FalseArg1,FalseArg2,TrueArg1,TrueArg2>
											      ( <_cor34> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor34})
												-| ['compiler_generated'] )
											    end
										    %% Line 474
										    <'<'> when 'true' ->
											let <_cor68> =
											    %% Line 476
											    apply 'integer_range_less_then_propagator'/2
												(IntArg1, IntArg2)
											in  %% Line 475
											    case _cor68 of
											      <{TrueArg1,TrueArg2,FalseArg1,FalseArg2}> when 'true' ->
												  <( _cor68
												     -| ['compiler_generated'] ),FalseArg1,FalseArg2,TrueArg1,TrueArg2>
											      ( <_cor35> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor35})
												-| ['compiler_generated'] )
											    end
										    %% Line 477
										    <'=<'> when 'true' ->
											let <_cor69> =
											    %% Line 479
											    apply 'integer_range_less_then_propagator'/2
												(IntArg2, IntArg1)
											in  %% Line 478
											    case _cor69 of
											      <{FalseArg2,FalseArg1,TrueArg2,TrueArg1}> when 'true' ->
												  <( _cor69
												     -| ['compiler_generated'] ),FalseArg1,FalseArg2,TrueArg1,TrueArg2>
											      ( <_cor36> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor36})
												-| ['compiler_generated'] )
											    end
										    ( <_cor37> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor37})
										      -| ['compiler_generated'] )
										  end
									      in  let <_cor42> =
										      %% Line 481
										      ( fun (_cor39,_cor38) ->
											    'ok'
											-| [{'id',{0,0,'-integer_range_inequality_propagation/6-fun-3-'}}] )
										  in  do  %% Line 481
											  apply _cor42
											      ([105|[110|[116|[32|[114|[101|[115]]]]]]], [TrueArg1|[TrueArg2|[FalseArg1|[FalseArg2|[]]]]])
											  let <_cor45> =
											      %% Line 482
											      call 'erl_types':'t_sup'
												  (FalseArg1, NonIntArg1)
											  in  let <_cor43> =
												  %% Line 483
												  call 'erl_types':'t_sup'
												      (FalseArg2, NonIntArg2)
											      in  let <_cor44> =
												      %% Line 483
												      apply 'enter'/3
													  (_cor3, _cor43, _cor0)
												  in  let <_cor46> =
													  %% Line 482
													  apply 'enter'/3
													      (_cor4, _cor45, _cor44)
												      in  let <False> = {_cor1,_cor46}
													  in  let <_cor50> =
														  %% Line 484
														  call 'erl_types':'t_sup'
														      (TrueArg1, NonIntArg1)
													      in  let <_cor48> =
														      %% Line 485
														      call 'erl_types':'t_sup'
															  (TrueArg2, NonIntArg2)
														  in  let <_cor49> =
															  %% Line 485
															  apply 'enter'/3
															      (_cor3, _cor48, _cor0)
														      in  let <_cor51> =
															      %% Line 484
															      apply 'enter'/3
																  (_cor4, _cor50, _cor49)
															  in  let <True> = {_cor2,_cor51}
															      in  %% Line 486
																  [True|[False|[]]]
									end
'integer_range_less_then_propagator'/2 =
    %% Line 489
    fun (_cor1,_cor0) ->
	let <Min1> =
	    %% Line 490
	    call 'erl_types':'number_min'
		(_cor1)
	in  let <Max1> =
		%% Line 491
		call 'erl_types':'number_max'
		    (_cor1)
	    in  let <Min2> =
		    %% Line 492
		    call 'erl_types':'number_min'
			(_cor0)
		in  let <Max2> =
			%% Line 493
			call 'erl_types':'number_max'
			    (_cor0)
		    in  let <_cor7> =
			    %% Line 495
			    call 'erl_bif_types':'infinity_add'
				(Max2, -1)
			in  let <TrueMax1> =
				%% Line 495
				call 'erl_types':'min'
				    (Max1, _cor7)
			    in  let <_cor9> =
				    %% Line 496
				    call 'erl_bif_types':'infinity_add'
					(Min1, 1)
				in  let <TrueMin2> =
					%% Line 496
					call 'erl_types':'max'
					    (_cor9, Min2)
				    in  let <FalseMin1> =
					    %% Line 497
					    call 'erl_types':'max'
						(Min1, Min2)
					in  let <FalseMax2> =
						%% Line 498
						call 'erl_types':'min'
						    (Max1, Max2)
					    in  let <_cor16> =
						    %% Line 499
						    call 'erl_types':'t_from_range'
							(Min1, TrueMax1)
						in  let <_cor15> =
							%% Line 500
							call 'erl_types':'t_from_range'
							    (TrueMin2, Max2)
						    in  let <_cor14> =
							    %% Line 501
							    call 'erl_types':'t_from_range'
								(FalseMin1, Max1)
							in  let <_cor13> =
								%% Line 502
								call 'erl_types':'t_from_range'
								    (Min2, FalseMax2)
							    in  %% Line 499
								{_cor16,_cor15,_cor14,_cor13}
'do_type'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	%% Line 505
	case call 'hipe_icode':'args'
		 (_cor1) of
	  %% Line 506
	  <[Var|[]]> when 'true' ->
	      apply 'do_type'/3
		  (_cor1, _cor0, Var)
	  %% Line 507
	  <[Var1|[Var2|[]]]> when 'true' ->
	      apply 'do_type2'/4
		  (_cor1, _cor0, Var1, Var2)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'do_type2'/4 =
    %% Line 510
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 512
	case call 'hipe_icode':'type_test'
		 (_cor3) of
	  <'function2'> when 'true' ->
	      let <FunType> =
		  %% Line 513
		  apply 'lookup'/2
		      (_cor1, _cor2)
	      in  let <ArityType> =
		      %% Line 514
		      apply 'lookup'/2
			  (_cor0, _cor2)
		  in  let <TrueLab> =
			  %% Line 515
			  call 'hipe_icode':'type_true_label'
			      (_cor3)
		      in  let <FalseLab> =
			      %% Line 516
			      call 'hipe_icode':'type_false_label'
				  (_cor3)
			  in  let <_cor9> =
				  %% Line 517
				  call 'erl_types':'t_fun'
				      ()
			      in  let <SuccType1> =
				      %% Line 517
				      call 'erl_types':'t_inf'
					  (_cor9, FunType)
				  in  let <_cor12> =
					  %% Line 518
					  apply 'test_type'/2
					      ('function', FunType)
				      in  let <_cor11> =
					      %% Line 519
					      apply 'test_type'/2
						  ('integer', ArityType)
					  in  %% Line 518
					      case apply 'combine_test'/2
						       (_cor12, _cor11) of
						%% Line 520
						<'true'> when 'true' ->
						    %% Line 521
						    case call 'erl_types':'t_number_vals'
							     (ArityType) of
						      %% Line 522
						      <[Arity|[]]> when 'true' ->
							  %% Line 523
							  case call 'erl_types':'t_fun_arity'
								   (SuccType1) of
							    %% Line 524
							    <'unknown'> when 'true' ->
								let <_cor13> =
								    %% Line 525
								    call 'erl_types':'t_any'
									()
								in  let <_cor14> =
									%% Line 525
									call 'erl_types':'t_fun'
									    (Arity, _cor13)
								    in  let <SuccType> =
									    %% Line 525
									    call 'erl_types':'t_inf'
										(_cor14, FunType)
									in  let <_cor16> =
										%% Line 526
										apply 'enter'/3
										    (_cor1, SuccType, _cor2)
									    in  %% Line 526
										[{TrueLab,_cor16}|%% Line 527
												  [{FalseLab,_cor2}|[]]]
							    %% Line 528
							    <_cor56>
								when let <_cor57> =
								      call 'erlang':'=:='
									  (_cor56, Arity)
								  in  let <_cor58> =
									  call 'erlang':'is_integer'
									      (Arity)
								      in  call 'erlang':'and'
									      (_cor57, _cor58) ->
								let <_cor17> =
								    %% Line 529
								    call 'erl_types':'t_any'
									()
								in  let <_cor18> =
									%% Line 529
									call 'erl_types':'t_fun'
									    (Arity, _cor17)
								    in  let <FalseType> =
									    %% Line 529
									    call 'erl_types':'t_subtract'
										(FunType, _cor18)
									in  let <_cor20> =
										%% Line 530
										apply 'enter'/3
										    (_cor1, SuccType1, _cor2)
									    in  let <_cor21> =
										    %% Line 531
										    apply 'enter'/3
											(_cor1, FalseType, _cor2)
										in  %% Line 530
										    [{TrueLab,_cor20}|%% Line 531
												      [{FalseLab,_cor21}|[]]]
							    ( <_cor22> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor22})
							      -| ['compiler_generated'] )
							  end
						      %% Line 533
						      <_cor59> when 'true' ->
							  %% Line 534
							  case call 'erl_types':'t_fun_arity'
								   (SuccType1) of
							    %% Line 535
							    <'unknown'> when 'true' ->
								let <_cor23> =
								    %% Line 536
								    apply 'enter'/3
									(_cor1, SuccType1, _cor2)
								in  %% Line 536
								    [{TrueLab,_cor23}|%% Line 537
										      [{FalseLab,_cor2}|[]]]
							    %% Line 538
							    <Arity>
								when call 'erlang':'is_integer'
								      (Arity) ->
								let <T> =
								    %% Line 539
								    call 'erl_types':'t_from_term'
									(Arity)
								in  let <NewInfo> =
									%% Line 540
									apply 'enter'/3
									    (_cor0, T, _cor2)
								    in  let <_cor26> =
									    %% Line 541
									    apply 'enter'/3
										(_cor1, SuccType1, NewInfo)
									in  let <_cor27> =
										%% Line 542
										call 'erl_types':'t_subtract'
										    (T, ArityType)
									    in  let <_cor28> =
										    %% Line 542
										    apply 'enter'/3
											(_cor0, _cor27, _cor2)
										in  %% Line 541
										    [{TrueLab,_cor26}|%% Line 542
												      [{FalseLab,_cor28}|[]]]
							    ( <_cor29> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor29})
							      -| ['compiler_generated'] )
							  end
						    end
						%% Line 545
						<'false'> when 'true' ->
						    %% Line 546
						    [{FalseLab,_cor2}|[]]
						%% Line 547
						<'maybe'> when 'true' ->
						    let <_cor31> =
							%% Line 548
							call 'erl_types':'t_integer'
							    ()
						    in  let <GenTrueArity> =
							    %% Line 548
							    call 'erl_types':'t_inf'
								(_cor31, ArityType)
							in  let <_cor33> =
								%% Line 549
								call 'erl_types':'t_fun'
								    ()
							    in  let <GenTrueFun> =
								    %% Line 549
								    call 'erl_types':'t_inf'
									(_cor33, FunType)
								in  let <_cor36> =
									%% Line 550
									call 'erl_types':'t_number_vals'
									    (GenTrueArity)
								    in  let <_cor35> =
									    %% Line 550
									    call 'erl_types':'t_fun_arity'
										(GenTrueFun)
									in  %% Line 550
									    case <_cor36,_cor35> of
									      %% Line 551
									      <'unknown','unknown'> when 'true' ->
										  let <TrueInfo> =
										      %% Line 552
										      apply 'enter_list'/3
											  ([_cor1|[_cor0|[]]], %% Line 553
													       [GenTrueFun|[GenTrueArity|[]]], _cor2)
										  in  %% Line 554
										      [{TrueLab,TrueInfo}|[{FalseLab,_cor2}|[]]]
									      %% Line 555
									      <'unknown',Arity>
										  when call 'erlang':'is_integer'
											(Arity) ->
										  let <_cor38> =
										      %% Line 557
										      call 'erl_types':'t_integer'
											  (Arity)
										  in  let <TrueInfo> =
											  %% Line 556
											  apply 'enter_list'/3
											      ([_cor1|[_cor0|[]]], %% Line 557
														   [GenTrueFun|[_cor38|[]]], _cor2)
										      in  %% Line 558
											  [{TrueLab,TrueInfo}|[{FalseLab,_cor2}|[]]]
									      %% Line 559
									      <[Val|[]],'unknown'>
										  when call 'erlang':'is_integer'
											(Val) ->
										  let <_cor40> =
										      %% Line 561
										      call 'erl_types':'t_any'
											  ()
										  in  let <_cor41> =
											  %% Line 561
											  call 'erl_types':'t_fun'
											      (Val, _cor40)
										      in  let <_cor42> =
											      %% Line 561
											      call 'erl_types':'t_inf'
												  (GenTrueFun, _cor41)
											  in  let <TrueInfo> =
												  %% Line 560
												  apply 'enter_list'/3
												      ([_cor1|[_cor0|[]]], %% Line 561
															   [_cor42|%% Line 562
																   [GenTrueArity|[]]], _cor2)
											      in  %% Line 563
												  [{TrueLab,TrueInfo}|[{FalseLab,_cor2}|[]]]
									      %% Line 564
									      <Vals,'unknown'>
										  when call 'erlang':'is_list'
											(Vals) ->
										  let <TrueInfo> =
										      %% Line 566
										      apply 'enter_list'/3
											  ([_cor1|[_cor0|[]]], %% Line 567
													       [GenTrueFun|[GenTrueArity|[]]], _cor2)
										  in  %% Line 568
										      [{TrueLab,TrueInfo}|[{FalseLab,_cor2}|[]]]
									      %% Line 569
									      <Vals,Arity>
										  when let <_cor45> =
											call 'erlang':'is_list'
											    (Vals)
										    in  let <_cor46> =
											    call 'erlang':'is_integer'
												(Arity)
											in  call 'erlang':'and'
												(_cor45, _cor46) ->
										  %% Line 570
										  case call 'lists':'member'
											   (Arity, Vals) of
										    %% Line 571
										    <'false'> when 'true' ->
											%% Line 572
											[{FalseLab,_cor2}|[]]
										    %% Line 573
										    <'true'> when 'true' ->
											let <_cor47> =
											    %% Line 575
											    call 'erl_types':'t_integer'
												(Arity)
											in  let <TrueInfo> =
												%% Line 574
												apply 'enter_list'/3
												    ([_cor1|[_cor0|[]]], %% Line 575
															 [GenTrueFun|[_cor47|[]]], _cor2)
											    in  %% Line 576
												[{TrueLab,TrueInfo}|[{FalseLab,_cor2}|[]]]
										    ( <_cor49> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor49})
										      -| ['compiler_generated'] )
										  end
									      ( <_fol81,_fol82> when 'true' ->
										    let <_cor50> = {_fol81,_fol82}
										    in  primop 'match_fail'
											    ({'case_clause',_cor50})
										-| ['compiler_generated'] )
									    end
						( <_cor51> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor51})
						  -| ['compiler_generated'] )
					      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'combine_test'/2 =
    %% Line 581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true','true'> when 'true' ->
	      'true'
	  %% Line 582
	  <'false',_cor4> when 'true' ->
	      'false'
	  %% Line 583
	  <_cor5,'false'> when 'true' ->
	      'false'
	  %% Line 584
	  <_cor6,_cor7> when 'true' ->
	      'maybe'
	end
'do_type'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	let <TrueLab> =
	    %% Line 587
	    call 'hipe_icode':'type_true_label'
		(_cor2)
	in  let <FalseLab> =
		%% Line 588
		call 'hipe_icode':'type_false_label'
		    (_cor2)
	    in  let <None> =
		    %% Line 589
		    call 'erl_types':'t_none'
			()
		in  %% Line 590
		    case apply 'lookup'/2
			     (_cor0, _cor1) of
		      %% Line 591
		      <_cor29>
			  when call 'erlang':'=:='
				(_cor29,
				 None) ->
			  %% Line 592
			  [{TrueLab,_cor1}|[{FalseLab,_cor1}|[]]]
		      %% Line 593
		      <VarInfo> when 'true' ->
			  %% Line 594
			  case call 'hipe_icode':'type_test'
				   (_cor2) of
			    %% Line 595
			    <'cons'> when 'true' ->
				let <_cor6> =
				    %% Line 596
				    call 'erl_types':'t_cons'
					()
				in  %% Line 596
				    apply 'test_cons_or_nil'/6
					(_cor6, _cor0, VarInfo, TrueLab, FalseLab, _cor1)
			    %% Line 597
			    <'nil'> when 'true' ->
				let <_cor7> =
				    %% Line 598
				    call 'erl_types':'t_nil'
					()
				in  %% Line 598
				    apply 'test_cons_or_nil'/6
					(_cor7, _cor0, VarInfo, TrueLab, FalseLab, _cor1)
			    %% Line 599
			    <Test = {'atom',A}> when 'true' ->
				let <_cor10> =
				    %% Line 600
				    ( fun (_cor8) ->
					  call 'erl_types':'t_atom'
					      (_cor8)
				      -| [{'id',{0,0,'-do_type/3-fun-0-'}}] )
				in  %% Line 600
				    apply 'test_number_or_atom'/8
					(_cor10, %% Line 601
						 A, _cor0, %% Line 601
							   VarInfo, %% Line 601
								    Test, %% Line 601
									  TrueLab, %% Line 601
										   FalseLab, _cor1)
			    %% Line 602
			    <Test = {'integer',N}> when 'true' ->
				let <_cor13> =
				    %% Line 603
				    ( fun (_cor11) ->
					  call 'erl_types':'t_number'
					      (_cor11)
				      -| [{'id',{0,0,'-do_type/3-fun-1-'}}] )
				in  %% Line 603
				    apply 'test_number_or_atom'/8
					(_cor13, %% Line 604
						 N, _cor0, %% Line 604
							   VarInfo, %% Line 604
								    Test, %% Line 604
									  TrueLab, %% Line 604
										   FalseLab, _cor1)
			    %% Line 605
			    <{'record',Atom,Size}> when 'true' ->
				%% Line 606
				apply 'test_record'/7
				    (Atom, Size, _cor0, VarInfo, TrueLab, FalseLab, _cor1)
			    %% Line 607
			    <Other> when 'true' ->
				%% Line 608
				case call 'erl_types':'t_is_any'
					 (VarInfo) of
				  %% Line 609
				  <'true'> when 'true' ->
				      let <_cor14> =
					  %% Line 610
					  apply 'true_branch_info'/1
					      (Other)
				      in  let <TrueType> =
					      %% Line 610
					      call 'erl_types':'t_inf'
						  (_cor14, VarInfo)
					  in  let <TrueInfo> =
						  %% Line 611
						  apply 'enter'/3
						      (_cor0, TrueType, _cor1)
					      in  %% Line 612
						  [{TrueLab,TrueInfo}|[{FalseLab,_cor1}|[]]]
				  %% Line 613
				  <'false'> when 'true' ->
				      %% Line 614
				      case apply 'test_type'/2
					       (Other, VarInfo) of
					%% Line 615
					<'true'> when 'true' ->
					    %% Line 616
					    [{TrueLab,_cor1}|[]]
					%% Line 617
					<'false'> when 'true' ->
					    %% Line 618
					    [{FalseLab,_cor1}|[]]
					%% Line 619
					<'maybe'> when 'true' ->
					    let <_cor17> =
						%% Line 620
						apply 'true_branch_info'/1
						    (Other)
					    in  let <TrueType> =
						    %% Line 620
						    call 'erl_types':'t_inf'
							(_cor17, VarInfo)
						in  let <TrueInfo> =
							%% Line 621
							apply 'enter'/3
							    (_cor0, TrueType, _cor1)
						    in  let <FalseType> =
							    %% Line 622
							    call 'erl_types':'t_subtract'
								(VarInfo, TrueType)
							in  let <FalseInfo> =
								%% Line 623
								apply 'enter'/3
								    (_cor0, FalseType, _cor1)
							    in  %% Line 624
								[{TrueLab,TrueInfo}|[{FalseLab,FalseInfo}|[]]]
					( <_cor22> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor22})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor23> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor23})
				    -| ['compiler_generated'] )
				end
			  end
		    end
'do_switch_tuple_arity'/2 =
    %% Line 630
    fun (_cor1,_cor0) ->
	let <Var> =
	    %% Line 631
	    call 'hipe_icode':'switch_tuple_arity_term'
		(_cor1)
	in  let <VarType> =
		%% Line 632
		apply 'lookup'/2
		    (Var, _cor0)
	    in  let <Cases> =
		    %% Line 633
		    call 'hipe_icode':'switch_tuple_arity_cases'
			(_cor1)
		in  let <FailLabel> =
			%% Line 634
			call 'hipe_icode':'switch_tuple_arity_fail_label'
			    (_cor1)
		    in  %% Line 635
			case apply 'legal_switch_tuple_arity_cases'/2
				 (Cases, VarType) of
			  %% Line 636
			  <[]> when 'true' ->
			      %% Line 637
			      [{FailLabel,_cor0}|[]]
			  %% Line 638
			  <LegalCases> when 'true' ->
			      %% Line 639
			      case %% Line 640
				   apply 'switch_tuple_arity_update_info'/7
				       (LegalCases, Var, VarType, %% Line 641
								  FailLabel, %% Line 641
									     VarType, _cor0, %% Line 641
											     []) of
				<{Fail,UpdateInfo}> when 'true' ->
				    %% Line 642
				    case apply 'switch_tuple_arity_can_fail'/2
					     (LegalCases, VarType) of
				      %% Line 643
				      <'true'> when 'true' ->
					  [Fail|UpdateInfo]
				      %% Line 644
				      <'false'> when 'true' ->
					  UpdateInfo
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			end
'legal_switch_tuple_arity_cases'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	%% Line 649
	case call 'erl_types':'t_is_tuple'
		 (_cor0) of
	  %% Line 650
	  <'false'> when 'true' ->
	      let <_cor2> =
		  %% Line 651
		  call 'erl_types':'t_tuple'
		      ()
	      in  let <Inf> =
		      %% Line 651
		      call 'erl_types':'t_inf'
			  (_cor2, _cor0)
		  in  %% Line 652
		      case call 'erl_types':'t_is_tuple'
			       (Inf) of
			%% Line 653
			<'true'> when 'true' ->
			    apply 'legal_switch_tuple_arity_cases_1'/2
				(_cor1, Inf)
			%% Line 654
			<'false'> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 656
	  <'true'> when 'true' ->
	      %% Line 657
	      apply 'legal_switch_tuple_arity_cases_1'/2
		  (_cor1, _cor0)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'legal_switch_tuple_arity_cases_1'/2 =
    %% Line 660
    fun (_cor1,_cor0) ->
	%% Line 661
	case call 'erl_types':'t_tuple_sizes'
		 (_cor0) of
	  %% Line 662
	  <'unknown'> when 'true' ->
	      _cor1
	  %% Line 664
	  <TupleSizes> when 'true' ->
	      %% Line 665
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor5) ->
			    case _cor5 of
			      <[Case = {Size,_X_Label}|_cor3]> when 'true' ->
				  let <_cor4> =
				      %% Line 666
				      call 'hipe_icode':'const_value'
					  (Size)
				  in  %% Line 666
				      ( case call 'lists':'member'
						 (_cor4, TupleSizes) of
					  <'true'> when 'true' ->
					      let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [Case|_cor6]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor3)
					    -| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor7})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
			      ( <[_cor2|_cor3]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor5> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor5})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(_cor1)
		-| ['list_comprehension'] )
	end
'switch_tuple_arity_can_fail'/2 =
    %% Line 669
    fun (_cor1,_cor0) ->
	%% Line 670
	case call 'erl_types':'t_is_tuple'
		 (_cor0) of
	  %% Line 671
	  <'false'> when 'true' ->
	      'true'
	  %% Line 672
	  <'true'> when 'true' ->
	      %% Line 673
	      case call 'erl_types':'t_tuple_sizes'
		       (_cor0) of
		%% Line 674
		<'unknown'> when 'true' ->
		    'true'
		%% Line 675
		<Sizes1> when 'true' ->
		    let <_cor7> =
			%% Line 676
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[{X,_cor16}|_cor3]> when 'true' ->
					    let <_cor5> =
						call 'hipe_icode':'const_value'
						    (X)
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [_cor5|_cor6]
						      -| ['compiler_generated'] )
					( <[_cor2|_cor3]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor1)
			  -| ['list_comprehension'] )
		    in  let <Set1> =
			    %% Line 677
			    call 'sets':'from_list'
				(Sizes1)
			in  let <Set2> =
				%% Line 678
				call 'sets':'from_list'
				    (_cor7)
			    in  let <_cor11> =
				    %% Line 679
				    call 'sets':'is_subset'
					(Set1, Set2)
				in  %% Line 679
				    call 'erlang':'not'
					(_cor11)
	      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_update_info'/7 =
    %% Line 683
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Arity,Label}|Left],Var,TupleType,%% Line 684
					      FailLabel,%% Line 684
							FailType,%% Line 684
								 Info,%% Line 684
								      Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 685
		  call 'hipe_icode':'const_value'
		      (Arity)
	      in  let <_cor8> =
		      %% Line 685
		      call 'erl_types':'t_tuple'
			  (_cor7)
		  in  let <Inf> =
			  %% Line 685
			  call 'erl_types':'t_inf'
			      (TupleType, _cor8)
		      in  let <NewInfo> =
			      %% Line 686
			      apply 'enter'/3
				  (Var, Inf, Info)
			  in  let <NewFailType> =
				  %% Line 687
				  call 'erl_types':'t_subtract'
				      (FailType, Inf)
			      in  %% Line 688
				  apply 'switch_tuple_arity_update_info'/7
				      (Left, Var, TupleType, FailLabel, NewFailType, %% Line 689
										     Info, %% Line 689
											   [{Label,NewInfo}|Acc])
	  %% Line 690
	  <[],Var,_X_TupleType,%% Line 691
			       FailLabel,%% Line 691
					 FailType,%% Line 691
						  Info,%% Line 691
						       Acc> when 'true' ->
	      let <_cor12> =
		  %% Line 692
		  apply 'enter'/3
		      (Var, FailType, Info)
	      in  %% Line 692
		  {{FailLabel,_cor12},Acc}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'switch_tuple_arity_update_info',7}}] )
	    -| ['compiler_generated'] )
	end
'do_switch_val'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	let <Var> =
	    %% Line 695
	    call 'hipe_icode':'switch_val_term'
		(_cor1)
	in  let <VarType> =
		%% Line 696
		apply 'lookup'/2
		    (Var, _cor0)
	    in  let <Cases> =
		    %% Line 697
		    call 'hipe_icode':'switch_val_cases'
			(_cor1)
		in  let <FailLabel> =
			%% Line 698
			call 'hipe_icode':'switch_val_fail_label'
			    (_cor1)
		    in  %% Line 699
			case apply 'legal_switch_val_cases'/2
				 (Cases, VarType) of
			  %% Line 700
			  <[]> when 'true' ->
			      %% Line 701
			      [{FailLabel,_cor0}|[]]
			  %% Line 702
			  <LegalCases> when 'true' ->
			      %% Line 703
			      apply 'switch_val_update_info'/7
				  (LegalCases, Var, VarType, %% Line 704
							     FailLabel, %% Line 704
									VarType, _cor0, %% Line 704
											[])
			end
'legal_switch_val_cases'/2 =
    %% Line 707
    fun (_cor1,_cor0) ->
	%% Line 708
	apply 'legal_switch_val_cases'/3
	    (_cor1, _cor0, [])
'legal_switch_val_cases'/3 =
    %% Line 710
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[VL = {Val,_X_Label}|Left],Type,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 711
		  call 'hipe_icode':'const_value'
		      (Val)
	      in  let <ConstType> =
		      %% Line 711
		      call 'erl_types':'t_from_term'
			  (_cor3)
		  in  %% Line 712
		      case call 'erl_types':'t_is_subtype'
			       (ConstType, Type) of
			%% Line 713
			<'true'> when 'true' ->
			    %% Line 714
			    apply 'legal_switch_val_cases'/3
				(Left, Type, [VL|Acc])
			%% Line 715
			<'false'> when 'true' ->
			    %% Line 716
			    apply 'legal_switch_val_cases'/3
				(Left, Type, Acc)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 718
	  <[],_X_Type,Acc> when 'true' ->
	      %% Line 719
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'legal_switch_val_cases',3}}] )
	    -| ['compiler_generated'] )
	end
'switch_val_update_info'/7 =
    %% Line 721
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Const,Label}|Left],Arg,ArgType,%% Line 722
					    FailLabel,%% Line 722
						      FailType,%% Line 722
							       Info,%% Line 722
								    Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 723
		  call 'hipe_icode':'const_value'
		      (Const)
	      in  let <TrueType> =
		      %% Line 723
		      call 'erl_types':'t_from_term'
			  (_cor7)
		  in  let <NewInfo> =
			  %% Line 724
			  apply 'enter'/3
			      (Arg, TrueType, Info)
		      in  let <NewFailType> =
			      %% Line 725
			      call 'erl_types':'t_subtract'
				  (FailType, TrueType)
			  in  %% Line 726
			      apply 'switch_val_update_info'/7
				  (Left, Arg, ArgType, FailLabel, NewFailType, %% Line 727
									       Info, %% Line 727
										     [{Label,NewInfo}|Acc])
	  %% Line 728
	  <[],Arg,_X_ArgType,FailLabel,FailType,Info,Acc> when 'true' ->
	      let <_cor11> =
		  %% Line 729
		  apply 'enter'/3
		      (Arg, FailType, Info)
	      in  %% Line 729
		  [{FailLabel,_cor11}|Acc]
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'switch_val_update_info',7}}] )
	    -| ['compiler_generated'] )
	end
'test_cons_or_nil'/6 =
    %% Line 731
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 732
	case call 'erl_types':'t_is_any'
		 (_cor3) of
	  %% Line 733
	  <'true'> when 'true' ->
	      let <_cor6> =
		  %% Line 734
		  apply 'enter'/3
		      (_cor4, _cor5, _cor0)
	      in  %% Line 734
		  [{_cor2,_cor6}|%% Line 735
				 [{_cor1,_cor0}|[]]]
	  %% Line 736
	  <'false'> when 'true' ->
	      let <TrueType> =
		  %% Line 737
		  call 'erl_types':'t_inf'
		      (_cor3, _cor5)
	      in  let <FalseType> =
		      %% Line 738
		      call 'erl_types':'t_subtract'
			  (_cor3, TrueType)
		  in  %% Line 739
		      case call 'erl_types':'t_is_none'
			       (FalseType) of
			%% Line 740
			<'true'> when 'true' ->
			    %% Line 741
			    [{_cor2,_cor0}|[]]
			%% Line 742
			<'false'> when 'true' ->
			    %% Line 743
			    case call 'erl_types':'t_is_none'
				     (TrueType) of
			      %% Line 744
			      <'true'> when 'true' ->
				  %% Line 745
				  [{_cor1,_cor0}|[]]
			      %% Line 746
			      <'false'> when 'true' ->
				  let <_cor9> =
				      %% Line 747
				      apply 'enter'/3
					  (_cor4, TrueType, _cor0)
				  in  let <_cor10> =
					  %% Line 748
					  apply 'enter'/3
					      (_cor4, FalseType, _cor0)
				      in  %% Line 747
					  [{_cor2,_cor9}|%% Line 748
							 [{_cor1,_cor10}|[]]]
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'test_number_or_atom'/8 =
    %% Line 753
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 755
	case call 'erl_types':'t_is_any'
		 (_cor4) of
	  %% Line 756
	  <'true'> when 'true' ->
	      let <_cor8> =
		  %% Line 757
		  apply _cor7
		      (_cor6)
	      in  let <_cor9> =
		      %% Line 757
		      apply 'enter'/3
			  (_cor5, _cor8, _cor0)
		  in  %% Line 757
		      [{_cor2,_cor9}|%% Line 758
				     [{_cor1,_cor0}|[]]]
	  %% Line 759
	  <'false'> when 'true' ->
	      %% Line 760
	      case apply 'test_type'/2
		       (_cor3, _cor4) of
		%% Line 761
		<'false'> when 'true' ->
		    %% Line 762
		    [{_cor1,_cor0}|[]]
		%% Line 763
		<'true'> when 'true' ->
		    %% Line 764
		    [{_cor2,_cor0}|[]]
		%% Line 765
		<'maybe'> when 'true' ->
		    let <_cor10> =
			%% Line 766
			apply _cor7
			    (_cor6)
		    in  let <FalseType> =
			    %% Line 766
			    call 'erl_types':'t_subtract'
				(_cor4, _cor10)
			in  let <_cor12> =
				%% Line 767
				apply _cor7
				    (_cor6)
			    in  let <_cor13> =
				    %% Line 767
				    apply 'enter'/3
					(_cor5, _cor12, _cor0)
				in  let <_cor14> =
					%% Line 768
					apply 'enter'/3
					    (_cor5, FalseType, _cor0)
				    in  %% Line 767
					[{_cor2,_cor13}|%% Line 768
							[{_cor1,_cor14}|[]]]
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'test_record'/7 =
    %% Line 772
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 773
	    call 'erlang':'-'
		(_cor5, 1)
	in  let <_cor7> =
		%% Line 773
		call 'erl_types':'t_any'
		    ()
	    in  let <AnyList> =
		    %% Line 773
		    call 'lists':'duplicate'
			(_cor8, _cor7)
		in  let <_cor10> =
			%% Line 774
			call 'erl_types':'t_atom'
			    (_cor6)
		    in  let <RecordType> =
			    %% Line 774
			    call 'erl_types':'t_tuple'
				([_cor10|AnyList])
			in  let <Inf> =
				%% Line 775
				call 'erl_types':'t_inf'
				    (RecordType, _cor3)
			    in  %% Line 776
				case call 'erl_types':'t_is_none'
					 (Inf) of
				  %% Line 777
				  <'true'> when 'true' ->
				      %% Line 778
				      [{_cor1,_cor0}|[]]
				  %% Line 779
				  <'false'> when 'true' ->
				      let <Sub> =
					  %% Line 780
					  call 'erl_types':'t_subtract'
					      (_cor3, Inf)
				      in  %% Line 781
					  case call 'erl_types':'t_is_none'
						   (Sub) of
					    %% Line 782
					    <'true'> when 'true' ->
						let <_cor14> =
						    %% Line 783
						    apply 'enter'/3
							(_cor4, Inf, _cor0)
						in  %% Line 783
						    [{_cor2,_cor14}|[]]
					    %% Line 784
					    <'false'> when 'true' ->
						let <_cor15> =
						    %% Line 785
						    apply 'enter'/3
							(_cor4, Inf, _cor0)
						in  let <_cor16> =
							%% Line 786
							apply 'enter'/3
							    (_cor4, Sub, _cor0)
						    in  %% Line 785
							[{_cor2,_cor15}|%% Line 786
									[{_cor1,_cor16}|[]]]
					    ( <_cor17> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor17})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor18> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor18})
				    -| ['compiler_generated'] )
				end
'test_type'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	%% Line 794
	case call 'erl_types':'t_is_any'
		 (_cor0) of
	  %% Line 795
	  <'true'> when 'true' ->
	      'maybe'
	  %% Line 796
	  <'false'> when 'true' ->
	      let <TrueTest> =
		  %% Line 797
		  apply 'true_branch_info'/1
		      (_cor1)
	      in  let <Inf> =
		      %% Line 798
		      call 'erl_types':'t_inf'
			  (TrueTest, _cor0)
		  in  %% Line 801
		      case call 'erl_types':'t_is_equal'
			       (_cor0, Inf) of
			%% Line 802
			<'true'> when 'true' ->
			    let <_cor4> =
				%% Line 803
				call 'erl_types':'t_is_none'
				    (_cor0)
			    in  %% Line 803
				call 'erlang':'not'
				    (_cor4)
			%% Line 804
			<'false'> when 'true' ->
			    %% Line 805
			    case call 'erl_types':'t_is_equal'
				     (TrueTest, Inf) of
			      %% Line 806
			      <'true'> when 'true' ->
				  %% Line 807
				  case apply 'test_type0'/2
					   (_cor1, _cor0) of
				    %% Line 808
				    <'false'> when 'true' ->
					%% Line 809
					'maybe'
				    %% Line 810
				    <'true'> when 'true' ->
					%% Line 811
					'true'
				    %% Line 812
				    <'maybe'> when 'true' ->
					%% Line 813
					'maybe'
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor5})
				      -| ['compiler_generated'] )
				  end
			      %% Line 815
			      <'false'> when 'true' ->
				  %% Line 816
				  case apply 'test_type0'/2
					   (_cor1, Inf) of
				    %% Line 817
				    <'true'> when 'true' ->
					%% Line 818
					'maybe'
				    %% Line 819
				    <'false'> when 'true' ->
					%% Line 820
					'false'
				    %% Line 821
				    <'maybe'> when 'true' ->
					%% Line 822
					'maybe'
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'test_type0'/2 =
    %% Line 830
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'integer',T> when 'true' ->
	      %% Line 831
	      call 'erl_types':'t_is_integer'
		  (T)
	  %% Line 832
	  <{'integer',N},T> when 'true' ->
	      %% Line 833
	      case call 'erl_types':'t_is_integer'
		       (T) of
		%% Line 834
		<'true'> when 'true' ->
		    %% Line 835
		    case call 'erl_types':'t_number_vals'
			     (T) of
		      %% Line 836
		      <'unknown'> when 'true' ->
			  'maybe'
		      %% Line 837
		      <[_cor13|[]]>
			  when call 'erlang':'=:='
				(_cor13,
				 N) ->
			  'true'
		      %% Line 838
		      <List>
			  when call 'erlang':'is_list'
				(List) ->
			  %% Line 839
			  case call 'lists':'member'
				   (N, List) of
			    %% Line 840
			    <'true'> when 'true' ->
				'maybe'
			    %% Line 841
			    <'false'> when 'true' ->
				'false'
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor2})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 844
		<'false'> when 'true' ->
		    'false'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 846
	  <'float',T> when 'true' ->
	      %% Line 847
	      call 'erl_types':'t_is_float'
		  (T)
	  %% Line 848
	  <'number',T> when 'true' ->
	      %% Line 849
	      call 'erl_types':'t_is_number'
		  (T)
	  %% Line 850
	  <'atom',T> when 'true' ->
	      %% Line 851
	      call 'erl_types':'t_is_atom'
		  (T)
	  %% Line 852
	  <{'atom',A},T> when 'true' ->
	      %% Line 853
	      case call 'erl_types':'t_is_atom'
		       (T) of
		%% Line 854
		<'true'> when 'true' ->
		    %% Line 855
		    case call 'erl_types':'t_atom_vals'
			     (T) of
		      %% Line 856
		      <'unknown'> when 'true' ->
			  'maybe'
		      %% Line 857
		      <[_cor14|[]]>
			  when call 'erlang':'=:='
				(_cor14,
				 A) ->
			  'true'
		      %% Line 858
		      <List>
			  when call 'erlang':'is_list'
				(List) ->
			  %% Line 859
			  case call 'lists':'member'
				   (A, List) of
			    %% Line 860
			    <'true'> when 'true' ->
				'maybe'
			    %% Line 861
			    <'false'> when 'true' ->
				'false'
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 864
		<'false'> when 'true' ->
		    'false'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 866
	  <'tuple',T> when 'true' ->
	      %% Line 867
	      call 'erl_types':'t_is_tuple'
		  (T)
	  %% Line 868
	  <{'tuple',N},T> when 'true' ->
	      %% Line 869
	      case call 'erl_types':'t_is_tuple'
		       (T) of
		%% Line 870
		<'true'> when 'true' ->
		    %% Line 871
		    case call 'erl_types':'t_tuple_sizes'
			     (T) of
		      %% Line 872
		      <'unknown'> when 'true' ->
			  'maybe'
		      %% Line 873
		      <[X|[]]>
			  when call 'erlang':'is_integer'
				(X) ->
			  call 'erlang':'=:='
			      (X, N)
		      %% Line 874
		      <List>
			  when call 'erlang':'is_list'
				(List) ->
			  %% Line 875
			  case call 'lists':'member'
				   (N, List) of
			    %% Line 876
			    <'true'> when 'true' ->
				'maybe'
			    %% Line 877
			    <'false'> when 'true' ->
				'false'
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		%% Line 880
		<'false'> when 'true' ->
		    'false'
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 882
	  <'pid',T> when 'true' ->
	      %% Line 883
	      call 'erl_types':'t_is_pid'
		  (T)
	  %% Line 884
	  <'port',T> when 'true' ->
	      %% Line 885
	      call 'erl_types':'t_is_port'
		  (T)
	  %% Line 886
	  <'binary',T> when 'true' ->
	      %% Line 887
	      call 'erl_types':'t_is_binary'
		  (T)
	  %% Line 888
	  <'bitstr',T> when 'true' ->
	      %% Line 889
	      call 'erl_types':'t_is_bitstr'
		  (T)
	  %% Line 890
	  <'reference',T> when 'true' ->
	      %% Line 891
	      call 'erl_types':'t_is_reference'
		  (T)
	  %% Line 892
	  <'function',T> when 'true' ->
	      %% Line 893
	      call 'erl_types':'t_is_fun'
		  (T)
	  %% Line 894
	  <'boolean',T> when 'true' ->
	      %% Line 895
	      call 'erl_types':'t_is_boolean'
		  (T)
	  %% Line 896
	  <'list',T> when 'true' ->
	      %% Line 897
	      call 'erl_types':'t_is_maybe_improper_list'
		  (T)
	  %% Line 902
	  <'map',T> when 'true' ->
	      %% Line 903
	      call 'erl_types':'t_is_map'
		  (T)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'test_type0',2}}] )
	    -| ['compiler_generated'] )
	end
'true_branch_info'/1 =
    %% Line 905
    fun (_cor0) ->
	case _cor0 of
	  <'integer'> when 'true' ->
	      %% Line 906
	      call 'erl_types':'t_integer'
		  ()
	  %% Line 907
	  <{'integer',N}> when 'true' ->
	      %% Line 908
	      call 'erl_types':'t_integer'
		  (N)
	  %% Line 909
	  <'float'> when 'true' ->
	      %% Line 910
	      call 'erl_types':'t_float'
		  ()
	  %% Line 911
	  <'number'> when 'true' ->
	      %% Line 912
	      call 'erl_types':'t_number'
		  ()
	  %% Line 913
	  <'atom'> when 'true' ->
	      %% Line 914
	      call 'erl_types':'t_atom'
		  ()
	  %% Line 915
	  <{'atom',A}> when 'true' ->
	      %% Line 916
	      call 'erl_types':'t_atom'
		  (A)
	  %% Line 917
	  <'list'> when 'true' ->
	      %% Line 918
	      call 'erl_types':'t_maybe_improper_list'
		  ()
	  %% Line 919
	  <'tuple'> when 'true' ->
	      %% Line 920
	      call 'erl_types':'t_tuple'
		  ()
	  %% Line 921
	  <{'tuple',N}> when 'true' ->
	      %% Line 922
	      call 'erl_types':'t_tuple'
		  (N)
	  %% Line 923
	  <'pid'> when 'true' ->
	      %% Line 924
	      call 'erl_types':'t_pid'
		  ()
	  %% Line 925
	  <'port'> when 'true' ->
	      %% Line 926
	      call 'erl_types':'t_port'
		  ()
	  %% Line 927
	  <'binary'> when 'true' ->
	      %% Line 928
	      call 'erl_types':'t_binary'
		  ()
	  %% Line 929
	  <'bitstr'> when 'true' ->
	      %% Line 930
	      call 'erl_types':'t_bitstr'
		  ()
	  %% Line 931
	  <'reference'> when 'true' ->
	      %% Line 932
	      call 'erl_types':'t_reference'
		  ()
	  %% Line 933
	  <'function'> when 'true' ->
	      %% Line 934
	      call 'erl_types':'t_fun'
		  ()
	  %% Line 939
	  <'boolean'> when 'true' ->
	      %% Line 940
	      call 'erl_types':'t_boolean'
		  ()
	  %% Line 941
	  <'map'> when 'true' ->
	      %% Line 942
	      call 'erl_types':'t_map'
		  ()
	  %% Line 943
	  <T> when 'true' ->
	      %% Line 944
	      call 'erlang':'exit'
		  ({'hipe_icode_type','unknown_typetest',T})
	end
'simplify_controlflow'/1 =
    %% Line 960
    fun (_cor0) ->
	let <Cfg> =
	    %% Line 961
	    apply 'state__cfg'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 962
		call 'hipe_icode_cfg':'reverse_postorder'
		    (Cfg)
	    in  %% Line 962
		apply 'simplify_controlflow'/2
		    (_cor2, _cor0)
'simplify_controlflow'/2 =
    %% Line 964
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],State> when 'true' ->
	      let <Info> =
		  %% Line 965
		  apply 'state__info_out'/2
		      (State, Label)
	      in  let <_cor6> =
		      %% Line 967
		      case apply 'state__bb'/2
			       (State, Label) of
			%% Line 968
			<'not_found'> when 'true' ->
			    State
			%% Line 969
			<BB> when 'true' ->
			    let <I> =
				%% Line 970
				call 'hipe_bb':'last'
				    (BB)
			    in  %% Line 971
				case I of
				  %% Line 972
				  <{'icode_if',_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
				      %% Line 973
				      apply 'rewrite_if'/5
					  (State, I, BB, Info, Label)
				  %% Line 974
				  <{'icode_type',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
				      %% Line 975
				      apply 'rewrite_type'/5
					  (State, I, BB, Info, Label)
				  %% Line 976
				  <{'icode_switch_tuple_arity',_cor20,_cor21,_cor22,_cor23}> when 'true' ->
				      %% Line 977
				      apply 'rewrite_switch_tuple_arity'/5
					  (State, I, BB, Info, Label)
				  %% Line 978
				  <{'icode_switch_val',_cor24,_cor25,_cor26,_cor27}> when 'true' ->
				      %% Line 979
				      apply 'rewrite_switch_val'/5
					  (State, I, BB, Info, Label)
				  %% Line 980
				  <{'icode_call',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
				      %% Line 981
				      apply 'rewrite_call'/5
					  (State, I, BB, Info, Label)
				  %% Line 982
				  <_cor35> when 'true' ->
				      %% Line 983
				      State
				end
		      end
		  in  %% Line 986
		      apply 'simplify_controlflow'/2
			  (Left, _cor6)
	  %% Line 987
	  <[],State> when 'true' ->
	      %% Line 988
	      State
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'simplify_controlflow',2}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_if'/5 =
    %% Line 990
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 991
	case apply 'do_if'/2
		 (_cor3, _cor1) of
	  %% Line 992
	  <[{Lab,_cor11}|[]]> when 'true' ->
	      %% Line 993
	      apply 'mk_goto'/4
		  (_cor4, _cor2, _cor0, Lab)
	  %% Line 994
	  <[_cor12|[_cor13|[]]]> when 'true' ->
	      _cor4
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'rewrite_type'/5 =
    %% Line 998
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FalseLab> =
	    %% Line 999
	    call 'hipe_icode':'type_false_label'
		(_cor3)
	in  %% Line 1000
	    case call 'hipe_icode':'type_true_label'
		     (_cor3) of
	      %% Line 1001
	      <_cor13>
		  when call 'erlang':'=:='
			(_cor13,
			 FalseLab) ->
		  %% Line 1003
		  apply 'mk_goto'/4
		      (_cor4, _cor2, _cor0, FalseLab)
	      %% Line 1004
	      <TrueLab> when 'true' ->
		  %% Line 1005
		  case apply 'do_type'/2
			   (_cor3, _cor1) of
		    %% Line 1006
		    <[{_cor14,_cor15}|[]]>
			when call 'erlang':'=:='
			      (_cor14,
			       TrueLab) ->
			%% Line 1007
			apply 'mk_goto'/4
			    (_cor4, _cor2, _cor0, TrueLab)
		    %% Line 1008
		    <[{_cor16,_cor17}|[]]>
			when call 'erlang':'=:='
			      (_cor16,
			       FalseLab) ->
			%% Line 1009
			apply 'mk_goto'/4
			    (_cor4, _cor2, _cor0, FalseLab)
		    %% Line 1010
		    <[_cor18|[_cor19|[]]]> when 'true' ->
			_cor4
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	    end
'rewrite_switch_tuple_arity'/5 =
    %% Line 1015
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Cases> =
	    %% Line 1016
	    call 'hipe_icode':'switch_tuple_arity_cases'
		(_cor3)
	in  let <Var> =
		%% Line 1017
		call 'hipe_icode':'switch_tuple_arity_term'
		    (_cor3)
	    in  let <Type> =
		    %% Line 1018
		    apply 'safe_lookup'/2
			(Var, _cor1)
		in  %% Line 1019
		    case apply 'legal_switch_tuple_arity_cases'/2
			     (Cases, Type) of
		      %% Line 1020
		      <[]> when 'true' ->
			  let <Fail> =
			      %% Line 1021
			      call 'hipe_icode':'switch_tuple_arity_fail_label'
				  (_cor3)
			  in  %% Line 1022
			      apply 'mk_goto'/4
				  (_cor4, _cor2, _cor0, Fail)
		      %% Line 1023
		      <_cor32>
			  when call 'erlang':'=:='
				(_cor32,
				 Cases) ->
			  %% Line 1025
			  case apply 'switch_tuple_arity_can_fail'/2
				   (Cases, Type) of
			    %% Line 1026
			    <'true'> when 'true' ->
				_cor4
			    %% Line 1027
			    <'false'> when 'true' ->
				let <NewCases> =
				    %% Line 1028
				    apply 'butlast'/1
					(Cases)
				in  %% Line 1029
				    case call 'lists':'last'
					     (Cases) of
				      <{_X_Arity,NewFail}> when 'true' ->
					  let <TmpI> =
					      %% Line 1031
					      call 'hipe_icode':'switch_tuple_arity_fail_label_update'
						  (_cor3, NewFail)
					  in  let <NewI> =
						  %% Line 1033
						  call 'hipe_icode':'switch_tuple_arity_cases_update'
						      (TmpI, NewCases)
					      in  let <_cor13> =
						      %% Line 1034
						      call 'hipe_bb':'butlast'
							  (_cor2)
						  in  let <_cor14> =
							  %% Line 1034
							  call 'erlang':'++'
							      (_cor13, [NewI|[]])
						      in  let <NewBB> =
							      %% Line 1034
							      call 'hipe_bb':'code_update'
								  (_cor2, _cor14)
							  in  %% Line 1035
							      apply 'state__bb_add'/3
								  (_cor4, _cor0, NewBB)
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor10})
					-| ['compiler_generated'] )
				    end
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor16})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1037
		      <LegalCases> when 'true' ->
			  let <_cor21> =
			      %% Line 1039
			      case apply 'switch_tuple_arity_can_fail'/2
				       (LegalCases, Type) of
				%% Line 1040
				<'true'> when 'true' ->
				    %% Line 1041
				    call 'hipe_icode':'switch_tuple_arity_cases_update'
					(_cor3, LegalCases)
				%% Line 1042
				<'false'> when 'true' ->
				    let <NewCases> =
					%% Line 1043
					apply 'butlast'/1
					    (LegalCases)
				    in  %% Line 1044
					case call 'lists':'last'
						 (LegalCases) of
					  <{_X_Arity,NewFail}> when 'true' ->
					      let <TmpI> =
						  %% Line 1046
						  call 'hipe_icode':'switch_tuple_arity_cases_update'
						      (_cor3, NewCases)
					      in  %% Line 1047
						  call 'hipe_icode':'switch_tuple_arity_fail_label_update'
						      (TmpI, NewFail)
					  ( <_cor18> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor18})
					    -| ['compiler_generated'] )
					end
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor20})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor23> =
				  %% Line 1049
				  call 'hipe_bb':'butlast'
				      (_cor2)
			      in  let <_cor24> =
				      %% Line 1049
				      call 'erlang':'++'
					  (_cor23, [_cor21|[]])
				  in  let <NewBB> =
					  %% Line 1049
					  call 'hipe_bb':'code_update'
					      (_cor2, _cor24)
				      in  %% Line 1050
					  apply 'state__bb_add'/3
					      (_cor4, _cor0, NewBB)
		    end
'rewrite_switch_val'/5 =
    %% Line 1053
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Cases> =
	    %% Line 1054
	    call 'hipe_icode':'switch_val_cases'
		(_cor3)
	in  let <Var> =
		%% Line 1055
		call 'hipe_icode':'switch_val_term'
		    (_cor3)
	    in  let <VarType> =
		    %% Line 1056
		    apply 'safe_lookup'/2
			(Var, _cor1)
		in  %% Line 1057
		    case apply 'legal_switch_val_cases'/2
			     (Cases, VarType) of
		      %% Line 1058
		      <[]> when 'true' ->
			  let <Fail> =
			      %% Line 1059
			      call 'hipe_icode':'switch_val_fail_label'
				  (_cor3)
			  in  %% Line 1060
			      apply 'mk_goto'/4
				  (_cor4, _cor2, _cor0, Fail)
		      %% Line 1061
		      <_cor19>
			  when call 'erlang':'=:='
				(_cor19,
				 Cases) ->
			  _cor4
		      %% Line 1065
		      <LegalCases> when 'true' ->
			  let <NewI> =
			      %% Line 1066
			      call 'hipe_icode':'switch_val_cases_update'
				  (_cor3, LegalCases)
			  in  let <_cor10> =
				  %% Line 1067
				  call 'hipe_bb':'butlast'
				      (_cor2)
			      in  let <_cor11> =
				      %% Line 1067
				      call 'erlang':'++'
					  (_cor10, [NewI|[]])
				  in  let <NewBB> =
					  %% Line 1067
					  call 'hipe_bb':'code_update'
					      (_cor2, _cor11)
				      in  %% Line 1068
					  apply 'state__bb_add'/3
					      (_cor4, _cor0, NewBB)
		    end
'rewrite_call'/5 =
    %% Line 1071
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1072
	case apply 'call_always_fails'/2
		 (_cor3, _cor1) of
	  %% Line 1073
	  <'false'> when 'true' ->
	      let <Fun> =
		  %% Line 1074
		  call 'hipe_icode':'call_fun'
		      (_cor3)
	      in  %% Line 1075
		  case call 'hipe_icode_primops':'fails'
			   (Fun) of
		    %% Line 1076
		    <'false'> when 'true' ->
			%% Line 1077
			case call 'hipe_icode':'call_fail_label'
				 (_cor3) of
			  %% Line 1078
			  <[]> when 'true' ->
			      _cor4
			  %% Line 1079
			  <_cor16> when 'true' ->
			      apply 'unset_fail'/4
				  (_cor4, _cor2, _cor0, _cor3)
			end
		    %% Line 1081
		    <'true'> when 'true' ->
			_cor4
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1083
	  <'true'> when 'true' ->
	      %% Line 1084
	      case call 'hipe_icode':'call_in_guard'
		       (_cor3) of
		%% Line 1085
		<'false'> when 'true' ->
		    _cor4
		%% Line 1086
		<'true'> when 'true' ->
		    let <FailLabel> =
			%% Line 1087
			call 'hipe_icode':'call_fail_label'
			    (_cor3)
		    in  %% Line 1088
			apply 'mk_goto'/4
			    (_cor4, _cor2, _cor0, FailLabel)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'mk_goto'/4 =
    %% Line 1092
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NewI> =
	    %% Line 1093
	    call 'hipe_icode':'mk_goto'
		(_cor0)
	in  let <_cor5> =
		%% Line 1094
		call 'hipe_bb':'butlast'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 1094
		    call 'erlang':'++'
			(_cor5, [NewI|[]])
		in  let <NewBB> =
			%% Line 1094
			call 'hipe_bb':'code_update'
			    (_cor2, _cor6)
		    in  %% Line 1095
			apply 'state__bb_add'/3
			    (_cor3, _cor1, NewBB)
'unset_fail'/4 =
    %% Line 1097
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NewI> =
	    %% Line 1099
	    call 'hipe_icode':'call_set_fail_label'
		(_cor0, [])
	in  let <_cor5> =
		%% Line 1100
		call 'hipe_bb':'butlast'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 1100
		    call 'erlang':'++'
			(_cor5, [NewI|[]])
		in  let <NewBB> =
			%% Line 1100
			call 'hipe_bb':'code_update'
			    (_cor2, _cor6)
		    in  %% Line 1101
			apply 'state__bb_add'/3
			    (_cor3, _cor1, NewBB)
'specialize'/1 =
    %% Line 1115
    fun (_cor0) ->
	let <Labels> =
	    %% Line 1116
	    call 'hipe_icode_cfg':'reverse_postorder'
		(_cor0)
	in  %% Line 1117
	    apply 'transform_bbs'/2
		(Labels, _cor0)
'transform_bbs'/2 =
    %% Line 1119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],Cfg> when 'true' ->
	      let <BB> =
		  %% Line 1120
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Label)
	      in  let <Code> =
		      %% Line 1121
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <NewCode> =
			  %% Line 1122
			  apply 'make_transformations'/1
			      (Code)
		      in  let <NewBB> =
			      %% Line 1123
			      call 'hipe_bb':'code_update'
				  (BB, NewCode)
			  in  let <NewCfg> =
				  %% Line 1124
				  call 'hipe_icode_cfg':'bb_add'
				      (Cfg, Label, NewBB)
			      in  %% Line 1125
				  apply 'transform_bbs'/2
				      (Left, NewCfg)
	  %% Line 1126
	  <[],Cfg> when 'true' ->
	      %% Line 1127
	      Cfg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'transform_bbs',2}}] )
	    -| ['compiler_generated'] )
	end
'make_transformations'/1 =
    %% Line 1129
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1130
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[I|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'transform_insn'/1
					(I)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 1130
	    call 'lists':'flatten'
		(_cor6)
'transform_insn'/1 =
    %% Line 1132
    fun (_cor0) ->
	%% Line 1133
	case _cor0 of
	  %% Line 1134
	  <{'icode_call',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      %% Line 1135
	      apply 'handle_call_and_enter'/1
		  (_cor0)
	  %% Line 1136
	  <{'icode_enter',_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 1137
	      apply 'handle_call_and_enter'/1
		  (_cor0)
	  %% Line 1138
	  <{'icode_if',_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      let <CurrentIfOp> =
		  %% Line 1139
		  call 'hipe_icode':'if_op'
		      (_cor0)
	      in  let <_cor8> =
		      %% Line 1140
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[A|_cor3]> when 'true' ->
					  let <_cor6> =
					      apply 'get_type'/1
						  (A)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor4> =
				call 'hipe_icode':'args'
				    (_cor0)
			    in  apply 'lc$^0'/1
				    (_cor4)
			-| ['list_comprehension'] )
		  in  let <UsesFixnums> =
			  %% Line 1140
			  apply 'all_fixnums'/1
			      (_cor8)
		      in  let <_cor16> =
			      %% Line 1141
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor13) ->
					    case _cor13 of
					      <[A|_cor11]> when 'true' ->
						  let <_cor14> =
						      apply 'get_type'/1
							  (A)
						  in  let <_cor15> =
							  apply 'lc$^1'/1
							      (_cor11)
						      in  ( [_cor14|_cor15]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor12> =
					call 'hipe_icode':'args'
					    (_cor0)
				    in  apply 'lc$^1'/1
					    (_cor12)
				-| ['list_comprehension'] )
			  in  let <AnyImmediate> =
				  %% Line 1141
				  apply 'any_immediate'/1
				      (_cor16)
			      in  let <ExactComp> =
				      %% Line 1142
				      apply 'is_exact_comp'/1
					  (CurrentIfOp)
				  in  %% Line 1143
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (UsesFixnums,
						   'true') ->
					    let <_cor19> =
						%% Line 1144
						apply 'fixnum_ifop'/1
						    (CurrentIfOp)
					    in  %% Line 1144
						call 'hipe_icode':'if_op_update'
						    (_cor0, _cor19)
					%% Line 1145
					<>
					    when try
						  ( let <_cor22> =
							( case AnyImmediate of
							    ( <( 'true'
								 -| ['compiler_generated'] )> when 'true' ->
								  ExactComp
							      -| ['compiler_generated'] )
							    ( <( 'false'
								 -| ['compiler_generated'] )> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							    ( <_cor20> when 'true' ->
								  _cor20
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  ( call ( 'erlang'
								 -| ['compiler_generated'] ):( '=:='
											       -| ['compiler_generated'] )
							      (( _cor22
								 -| ['compiler_generated'] ), ( 'true'
												-| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_cor23> =
						%% Line 1146
						apply 'fixnum_ifop'/1
						    (CurrentIfOp)
					    in  %% Line 1146
						call 'hipe_icode':'if_op_update'
						    (_cor0, _cor23)
					%% Line 1147
					<> when 'true' ->
					    _cor0
				      end
	  %% Line 1150
	  <_cor41> when 'true' ->
	      _cor0
	end
'handle_call_and_enter'/1 =
    %% Line 1154
    fun (_cor0) ->
	%% Line 1155
	case apply 'call_or_enter_fun'/1
		 (_cor0) of
	  %% Line 1156
	  <{'element',_cor24}> when 'true' ->
	      let <_cor1> =
		  %% Line 1157
		  apply 'update_call_or_enter'/2
		      (_cor0, {'erlang','element',2})
	      in  %% Line 1157
		  apply 'transform_insn'/1
		      (_cor1)
	  %% Line 1158
	  <{'erlang','element',2}> when 'true' ->
	      let <NewI1> =
		  %% Line 1159
		  apply 'transform_element2'/1
		      (_cor0)
	      in  let <_cor6> =
		      %% Line 1160
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor0,
					 'icode_call',
					 8)
				    -| ['compiler_generated'] ) ->
				call 'hipe_icode':'call_in_guard'
				    (_cor0)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1160
		      case _cor6 of
			%% Line 1161
			<'true'> when 'true' ->
			    %% Line 1162
			    case call 'hipe_icode':'call_fun'
				     (NewI1) of
			      %% Line 1163
			      <{'unsafe_element',_cor25}> when 'true' ->
				  NewI1
			      %% Line 1164
			      <_cor26> when 'true' ->
				  _cor0
			    end
			%% Line 1166
			<'false'> when 'true' ->
			    %% Line 1167
			    NewI1
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1169
	  <{'erlang','hd',1}> when 'true' ->
	      apply 'transform_hd_or_tl'/2
		  (_cor0, 'unsafe_hd')
	  %% Line 1170
	  <{'erlang','tl',1}> when 'true' ->
	      apply 'transform_hd_or_tl'/2
		  (_cor0, 'unsafe_tl')
	  %% Line 1171
	  <{'hipe_bs_primop',BsOP}> when 'true' ->
	      let <_cor9> =
		  %% Line 1173
		  call 'hipe_icode':'args'
		      (_cor0)
	      in  let <_cor10> =
		      %% Line 1173
		      apply 'get_type_list'/1
			  (_cor9)
		  in  let <NewBsOp> =
			  %% Line 1173
			  apply 'bit_opts'/2
			      (BsOP, _cor10)
		      in  %% Line 1174
			  apply 'update_call_or_enter'/2
			      (_cor0, {'hipe_bs_primop',NewBsOp})
	  %% Line 1175
	  <'conv_to_float'> when 'true' ->
	      %% Line 1176
	      case call 'hipe_icode':'args'
		       (_cor0) of
		<[Src|[]]> when 'true' ->
		    let <_cor13> =
			%% Line 1177
			apply 'get_type'/1
			    (Src)
		    in  %% Line 1177
			case call 'erl_types':'t_is_float'
				 (_cor13) of
			  %% Line 1178
			  <'true'> when 'true' ->
			      %% Line 1179
			      apply 'update_call_or_enter'/2
				  (_cor0, 'unsafe_untag_float')
			  %% Line 1180
			  <'false'> when 'true' ->
			      _cor0
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1183
	  <FunName> when 'true' ->
	      %% Line 1184
	      case apply 'is_arith_function'/1
		       (FunName) of
		%% Line 1185
		<'true'> when 'true' ->
		    %% Line 1186
		    case apply 'strength_reduce'/2
			     (_cor0, FunName) of
		      %% Line 1187
		      <NewIs>
			  when call 'erlang':'is_list'
				(NewIs) ->
			  %% Line 1188
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor17) ->
					case _cor17 of
					  <[NewI|_cor16]> when 'true' ->
					      let <_cor18> =
						  apply 'pos_transform_arith'/1
						      (NewI)
					      in  let <_cor19> =
						      apply 'lc$^0'/1
							  (_cor16)
						  in  ( [_cor18|_cor19]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor17> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor17})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (NewIs)
			    -| ['list_comprehension'] )
		      %% Line 1189
		      <NewI> when 'true' ->
			  %% Line 1190
			  apply 'pos_transform_arith'/1
			      (NewI)
		    end
		%% Line 1192
		<'false'> when 'true' ->
		    _cor0
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	end
'pos_transform_arith'/1 =
    %% Line 1197
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1198
	    ( case call 'hipe_icode':'is_enter'
		       (_cor0) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      'true'
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'hipe_icode':'is_call'
			  (_cor0)
		  -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor1}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1198
	    case _cor3 of
	      %% Line 1199
	      <'true'> when 'true' ->
		  let <FunName> =
		      %% Line 1200
		      apply 'call_or_enter_fun'/1
			  (_cor0)
		  in  %% Line 1201
		      apply 'transform_arith'/2
			  (_cor0, FunName)
	      %% Line 1202
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'is_arith_function'/1 =
    %% Line 1206
    fun (_cor0) ->
	%% Line 1207
	case _cor0 of
	  %% Line 1208
	  <'band'> when 'true' ->
	      'true'
	  %% Line 1209
	  <'bor'> when 'true' ->
	      'true'
	  %% Line 1210
	  <'bxor'> when 'true' ->
	      'true'
	  %% Line 1211
	  <'bnot'> when 'true' ->
	      'true'
	  %% Line 1212
	  <'bsl'> when 'true' ->
	      'true'
	  %% Line 1213
	  <'bsr'> when 'true' ->
	      'true'
	  %% Line 1214
	  <'+'> when 'true' ->
	      'true'
	  %% Line 1215
	  <'-'> when 'true' ->
	      'true'
	  %% Line 1216
	  <'*'> when 'true' ->
	      'true'
	  %% Line 1217
	  <'div'> when 'true' ->
	      'true'
	  %% Line 1218
	  <'rem'> when 'true' ->
	      'true'
	  %% Line 1219
	  <_cor3> when 'true' ->
	      'false'
	end
'strength_reduce'/2 =
    %% Line 1227
    fun (_cor1,_cor0) ->
	%% Line 1228
	case _cor0 of
	  %% Line 1229
	  <'*'> when 'true' ->
	      %% Line 1230
	      case apply 'mult_args_const_second'/1
		       (_cor1) of
		<[Arg1|[Arg2|[]]]> when 'true' ->
		    let <ArgT1> =
			%% Line 1231
			apply 'get_type'/1
			    (Arg1)
		    in  %% Line 1232
			case call 'erl_types':'t_is_integer'
				 (ArgT1) of
			  %% Line 1233
			  <'true'> when 'true' ->
			      %% Line 1234
			      case call 'hipe_icode':'is_const'
				       (Arg2) of
				%% Line 1235
				<'true'> when 'true' ->
				    %% Line 1236
				    case call 'hipe_icode':'const_value'
					     (Arg2) of
				      %% Line 1237
				      <0> when 'true' ->
					  case apply 'call_dstlist'/1
						   (_cor1) of
					    %% Line 1238
					    <[]> when 'true' ->
						apply 'remove_useless_arithmetic_instruction'/1
						    (_cor1)
					    %% Line 1239
					    <[Dst|[]]> when 'true' ->
						apply 'create_strength_reduce_move'/3
						    (_cor1, Dst, Arg2)
					    ( <_cor4> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor4})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1241
				      <1> when 'true' ->
					  case apply 'call_dstlist'/1
						   (_cor1) of
					    %% Line 1242
					    <[]> when 'true' ->
						apply 'remove_useless_arithmetic_instruction'/1
						    (_cor1)
					    %% Line 1243
					    <[Dst|[]]> when 'true' ->
						apply 'create_strength_reduce_move'/3
						    (_cor1, Dst, Arg1)
					    ( <_cor5> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor5})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1245
				      <2> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 1)
				      %% Line 1246
				      <4> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 2)
				      %% Line 1247
				      <8> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 3)
				      %% Line 1248
				      <16> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 4)
				      %% Line 1249
				      <32> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 5)
				      %% Line 1250
				      <64> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 6)
				      %% Line 1251
				      <128> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 7)
				      %% Line 1252
				      <256> when 'true' ->
					  apply 'strength_reduce_imult'/3
					      (_cor1, Arg1, 8)
				      %% Line 1253
				      <_X___> when 'true' ->
					  _cor1
				    end
				%% Line 1255
				<'false'> when 'true' ->
				    _cor1
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1257
			  <'false'> when 'true' ->
			      _cor1
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1259
	  <'div'> when 'true' ->
	      %% Line 1260
	      case call 'hipe_icode':'args'
		       (_cor1) of
		<[Arg1|[Arg2|[]]]> when 'true' ->
		    let <ArgT1> =
			%% Line 1261
			apply 'get_type'/1
			    (Arg1)
		    in  %% Line 1262
			case call 'erl_types':'t_is_non_neg_integer'
				 (ArgT1) of
			  %% Line 1263
			  <'true'> when 'true' ->
			      %% Line 1264
			      case call 'hipe_icode':'is_const'
				       (Arg2) of
				%% Line 1265
				<'true'> when 'true' ->
				    %% Line 1266
				    case call 'hipe_icode':'const_value'
					     (Arg2) of
				      %% Line 1267
				      <0> when 'true' ->
					  do  call 'io':'fwrite'
						  ([73|[110|[116|[101|[103|[101|[114|[32|[100|[105|[118|[105|[115|[105|[111|[110|[32|[98|[121|[32|[48|[32|[100|[101|[116|[101|[99|[116|[101|[100|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					      _cor1
				      %% Line 1268
				      <1> when 'true' ->
					  case apply 'call_dstlist'/1
						   (_cor1) of
					    %% Line 1269
					    <[]> when 'true' ->
						apply 'remove_useless_arithmetic_instruction'/1
						    (_cor1)
					    %% Line 1270
					    <[Dst|[]]> when 'true' ->
						apply 'create_strength_reduce_move'/3
						    (_cor1, Dst, Arg1)
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor11})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1272
				      <2> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 1)
				      %% Line 1273
				      <4> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 2)
				      %% Line 1274
				      <8> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 3)
				      %% Line 1275
				      <16> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 4)
				      %% Line 1276
				      <32> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 5)
				      %% Line 1277
				      <64> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 6)
				      %% Line 1278
				      <128> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 7)
				      %% Line 1279
				      <256> when 'true' ->
					  apply 'strength_reduce_div'/3
					      (_cor1, Arg1, 8)
				      %% Line 1280
				      <_X___> when 'true' ->
					  _cor1
				    end
				%% Line 1282
				<'false'> when 'true' ->
				    _cor1
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1284
			  <'false'> when 'true' ->
			      _cor1
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1286
	  <'rem'> when 'true' ->
	      %% Line 1287
	      case call 'hipe_icode':'args'
		       (_cor1) of
		<[Arg1|[Arg2|[]]]> when 'true' ->
		    let <ArgT1> =
			%% Line 1288
			apply 'get_type'/1
			    (Arg1)
		    in  %% Line 1289
			case call 'erl_types':'t_is_non_neg_integer'
				 (ArgT1) of
			  %% Line 1290
			  <'true'> when 'true' ->
			      %% Line 1291
			      case call 'hipe_icode':'is_const'
				       (Arg2) of
				%% Line 1292
				<'true'> when 'true' ->
				    %% Line 1293
				    case call 'hipe_icode':'const_value'
					     (Arg2) of
				      %% Line 1294
				      <0> when 'true' ->
					  do  call 'io':'fwrite'
						  ([82|[101|[109|[97|[105|[110|[100|[101|[114|[32|[119|[105|[116|[104|[32|[48|[32|[100|[101|[116|[101|[99|[116|[101|[100|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]])
					      _cor1
				      %% Line 1295
				      <1> when 'true' ->
					  case apply 'call_dstlist'/1
						   (_cor1) of
					    %% Line 1296
					    <[]> when 'true' ->
						apply 'remove_useless_arithmetic_instruction'/1
						    (_cor1)
					    %% Line 1297
					    <[Dst|[]]> when 'true' ->
						let <_cor17> =
						    %% Line 1298
						    call 'hipe_icode':'mk_const'
							(0)
						in  apply 'create_strength_reduce_move'/3
							(_cor1, %% Line 1298
								Dst, _cor17)
					    ( <_cor18> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor18})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1300
				      <2> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 1)
				      %% Line 1301
				      <4> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 3)
				      %% Line 1302
				      <8> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 7)
				      %% Line 1303
				      <16> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 15)
				      %% Line 1304
				      <32> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 31)
				      %% Line 1305
				      <64> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 63)
				      %% Line 1306
				      <128> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 127)
				      %% Line 1307
				      <256> when 'true' ->
					  apply 'strength_reduce_rem'/3
					      (_cor1, Arg1, 255)
				      %% Line 1308
				      <_X___> when 'true' ->
					  _cor1
				    end
				%% Line 1310
				<'false'> when 'true' ->
				    _cor1
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor20})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1312
			  <'false'> when 'true' ->
			      _cor1
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor21})
			    -| ['compiler_generated'] )
			end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1314
	  <_cor25> when 'true' ->
	      _cor1
	end
'remove_useless_arithmetic_instruction'/1 =
    %% Line 1317
    fun (_cor0) ->
	%% Line 1318
	[]
'create_strength_reduce_move'/3 =
    %% Line 1320
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1321
	case call 'hipe_icode':'call_continuation'
		 (_cor2) of
	  %% Line 1322
	  <[]> when 'true' ->
	      %% Line 1323
	      call 'hipe_icode':'mk_move'
		  (_cor1, _cor0)
	  %% Line 1324
	  <Lbl> when 'true' ->
	      let <_cor3> =
		  %% Line 1325
		  call 'hipe_icode':'mk_move'
		      (_cor1, _cor0)
	      in  let <_cor4> =
		      %% Line 1326
		      call 'hipe_icode':'mk_goto'
			  (Lbl)
		  in  %% Line 1325
		      [_cor3|%% Line 1326
			     [_cor4|[]]]
	end
'mult_args_const_second'/1 =
    %% Line 1331
    fun (_cor0) ->
	%% Line 1332
	case call 'hipe_icode':'args'
		 (_cor0) of
	  <Args = [Arg1|[Arg2|[]]]> when 'true' ->
	      %% Line 1333
	      case call 'hipe_icode':'is_const'
		       (Arg1) of
		%% Line 1334
		<'true'> when 'true' ->
		    [Arg2|[Arg1|[]]]
		%% Line 1335
		<'false'> when 'true' ->
		    Args
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'strength_reduce_imult'/3 =
    %% Line 1341
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1342
	    apply 'get_type'/1
		(_cor1)
	in  %% Line 1342
	    case call 'erl_types':'t_number_vals'
		     (_cor3) of
	      %% Line 1343
	      <[X|[]]>
		  when call 'erlang':'is_integer'
			(X) ->
		  %% Line 1345
		  case apply 'call_dstlist'/1
			   (_cor2) of
		    %% Line 1346
		    <[]> when 'true' ->
			apply 'remove_useless_arithmetic_instruction'/1
			    (_cor2)
		    %% Line 1347
		    <[D|[]]> when 'true' ->
			let <_cor4> =
			    call 'erlang':'bsl'
				(X, _cor0)
			in  let <_cor5> =
				call 'hipe_icode':'mk_const'
				    (_cor4)
			    in  apply 'create_strength_reduce_move'/3
				    (_cor2, D, _cor5)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1349
	      <_cor12> when 'true' ->
		  let <_cor7> =
		      %% Line 1350
		      call 'hipe_icode':'mk_const'
			  (_cor0)
		  in  %% Line 1350
		      apply 'update_call_or_enter'/3
			  (_cor2, 'bsl', [_cor1|[_cor7|[]]])
	    end
'strength_reduce_div'/3 =
    %% Line 1353
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1354
	    apply 'get_type'/1
		(_cor1)
	in  %% Line 1354
	    case call 'erl_types':'t_number_vals'
		     (_cor3) of
	      %% Line 1355
	      <[X|[]]>
		  when call 'erlang':'is_integer'
			(X) ->
		  %% Line 1357
		  case apply 'call_dstlist'/1
			   (_cor2) of
		    %% Line 1358
		    <[]> when 'true' ->
			apply 'remove_useless_arithmetic_instruction'/1
			    (_cor2)
		    %% Line 1359
		    <[D|[]]> when 'true' ->
			let <_cor4> =
			    call 'erlang':'bsr'
				(X, _cor0)
			in  let <_cor5> =
				call 'hipe_icode':'mk_const'
				    (_cor4)
			    in  apply 'create_strength_reduce_move'/3
				    (_cor2, D, _cor5)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1361
	      <_cor12> when 'true' ->
		  let <_cor7> =
		      %% Line 1362
		      call 'hipe_icode':'mk_const'
			  (_cor0)
		  in  %% Line 1362
		      apply 'update_call_or_enter'/3
			  (_cor2, 'bsr', [_cor1|[_cor7|[]]])
	    end
'strength_reduce_rem'/3 =
    %% Line 1365
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1366
	    apply 'get_type'/1
		(_cor1)
	in  %% Line 1366
	    case call 'erl_types':'t_number_vals'
		     (_cor3) of
	      %% Line 1367
	      <[X|[]]>
		  when call 'erlang':'is_integer'
			(X) ->
		  %% Line 1369
		  case apply 'call_dstlist'/1
			   (_cor2) of
		    %% Line 1370
		    <[]> when 'true' ->
			apply 'remove_useless_arithmetic_instruction'/1
			    (_cor2)
		    %% Line 1371
		    <[D|[]]> when 'true' ->
			let <_cor4> =
			    call 'erlang':'band'
				(X, _cor0)
			in  let <_cor5> =
				call 'hipe_icode':'mk_const'
				    (_cor4)
			    in  apply 'create_strength_reduce_move'/3
				    (_cor2, D, _cor5)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1373
	      <_cor12> when 'true' ->
		  let <_cor7> =
		      %% Line 1374
		      call 'hipe_icode':'mk_const'
			  (_cor0)
		  in  %% Line 1374
		      apply 'update_call_or_enter'/3
			  (_cor2, 'band', [_cor1|[_cor7|[]]])
	    end
'call_or_enter_fun'/1 =
    %% Line 1379
    fun (_cor0) ->
	%% Line 1380
	case call 'hipe_icode':'is_call'
		 (_cor0) of
	  %% Line 1381
	  <'true'> when 'true' ->
	      call 'hipe_icode':'call_fun'
		  (_cor0)
	  %% Line 1382
	  <'false'> when 'true' ->
	      call 'hipe_icode':'enter_fun'
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'update_call_or_enter'/2 =
    %% Line 1385
    fun (_cor1,_cor0) ->
	%% Line 1386
	case call 'hipe_icode':'is_call'
		 (_cor1) of
	  %% Line 1387
	  <'true'> when 'true' ->
	      %% Line 1388
	      case call 'hipe_icode_primops':'fails'
		       (_cor0) of
		%% Line 1389
		<'false'> when 'true' ->
		    let <NewI> =
			%% Line 1390
			call 'hipe_icode':'call_fun_update'
			    (_cor1, _cor0)
		    in  %% Line 1391
			call 'hipe_icode':'call_set_fail_label'
			    (NewI, [])
		%% Line 1392
		<'true'> when 'true' ->
		    %% Line 1393
		    call 'hipe_icode':'call_fun_update'
			(_cor1, _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1395
	  <'false'> when 'true' ->
	      call 'hipe_icode':'enter_fun_update'
		  (_cor1, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'update_call_or_enter'/3 =
    %% Line 1398
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1399
	case call 'hipe_icode':'is_call'
		 (_cor2) of
	  %% Line 1400
	  <'true'> when 'true' ->
	      let <I1> =
		  %% Line 1401
		  call 'hipe_icode':'call_args_update'
		      (_cor2, _cor0)
	      in  %% Line 1402
		  call 'hipe_icode':'call_fun_update'
		      (I1, _cor1)
	  %% Line 1403
	  <'false'> when 'true' ->
	      let <I1> =
		  %% Line 1404
		  call 'hipe_icode':'enter_args_update'
		      (_cor2, _cor0)
	      in  %% Line 1405
		  call 'hipe_icode':'enter_fun_update'
		      (I1, _cor1)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'transform_element2'/1 =
    %% Line 1408
    fun (_cor0) ->
	%% Line 1409
	case call 'hipe_icode':'args'
		 (_cor0) of
	  <[Index|[Tuple|[]]]> when 'true' ->
	      let <IndexType> =
		  %% Line 1410
		  apply 'get_type'/1
		      (Index)
	      in  let <TupleType> =
		      %% Line 1411
		      apply 'get_type'/1
			  (Tuple)
		  in  let <_cor8> =
			  %% Line 1412
			  ( fun (_cor5,_cor4) ->
				'ok'
			    -| [{'id',{0,0,'-transform_element2/1-fun-0-'}}] )
		      in  do  %% Line 1412
			      apply _cor8
				  ([84|[117|[112|[108|[101]]]]], TupleType)
			      let <_cor11> =
				  %% Line 1414
				  case apply 'test_type'/2
					   ('integer', IndexType) of
				    %% Line 1415
				    <'true'> when 'true' ->
					%% Line 1416
					case call 'erl_types':'t_number_vals'
						 (IndexType) of
					  %% Line 1417
					  <'unknown'> when 'true' ->
					      'unknown'
					  %% Line 1418
					  <Vals = [_cor48|_cor49]> when 'true' ->
					      {'number',Vals}
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor9})
					    -| ['compiler_generated'] )
					end
				    %% Line 1420
				    <_cor50> when 'true' ->
					'unknown'
				  end
			      in  let <_cor21> =
				      %% Line 1423
				      case apply 'test_type'/2
					       ('tuple', TupleType) of
					%% Line 1424
					<'true'> when 'true' ->
					    let <_cor17> =
						%% Line 1425
						( fun (_cor14,_cor13) ->
						      'ok'
						  -| [{'id',{0,0,'-transform_element2/1-fun-1-'}}] )
					    in  do  %% Line 1425
						    apply _cor17
							([105|[115|[32|[116|[117|[112|[108|[101]]]]]]]], TupleType)
						    %% Line 1426
						    case call 'erl_types':'t_tuple_sizes'
							     (TupleType) of
						      %% Line 1427
						      <'unknown'> when 'true' ->
							  'unknown'
						      %% Line 1428
						      <Sizes> when 'true' ->
							  let <_cor18> =
							      call 'lists':'min'
								  (Sizes)
							  in  {'tuple',_cor18}
						    end
					%% Line 1430
					<_cor53> when 'true' ->
					    'unknown'
				      end
				  in  %% Line 1432
				      case <_cor11,_cor21> of
					%% Line 1433
					<{'number',Ns = [_cor54|_cor55]},{'tuple',A}>
					    when call 'erlang':'is_integer'
						  (A) ->
					    let <_cor27> =
						%% Line 1434
						( fun (_cor25) ->
						      ( case <> of
							  ( <>
								when call 'erlang':'<'
								      (0,
								       _cor25) ->
								call 'erlang':'=<'
								    (_cor25, A)
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| [{'id',{0,0,'-transform_element2/1-fun-2-'}}] )
					    in  %% Line 1434
						case call 'lists':'all'
							 (_cor27, Ns) of
						  %% Line 1435
						  <'true'> when 'true' ->
						      %% Line 1436
						      case Ns of
							%% Line 1437
							<[Idx|[]]> when 'true' ->
							    %% Line 1438
							    case call 'hipe_icode':'args'
								     (_cor0) of
							      <[_cor56|[_cor57|[]]]>
								  when call 'erlang':'=:='
									(_cor57,
									 Tuple) ->
								  %% Line 1439
								  apply 'update_call_or_enter'/3
								      (_cor0, {'unsafe_element',Idx}, [Tuple|[]])
							      ( <_cor28> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor28})
								-| ['compiler_generated'] )
							    end
							%% Line 1440
							<[_cor58|_cor59]> when 'true' ->
							    let <NewFun> =
								%% Line 1441
								{'element',[_cor21|['valid']]}
							    in  %% Line 1442
								apply 'update_call_or_enter'/2
								    (_cor0, NewFun)
							( <_cor30> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor30})
							  -| ['compiler_generated'] )
						      end
						  %% Line 1444
						  <'false'> when 'true' ->
						      let <_cor33> =
							  %% Line 1445
							  ( fun (_cor31) ->
								call 'hipe_tagscheme':'is_fixnum'
								    (_cor31)
							    -| [{'id',{0,0,'-transform_element2/1-fun-3-'}}] )
						      in  %% Line 1445
							  case call 'lists':'all'
								   (_cor33, Ns) of
							    %% Line 1446
							    <'true'> when 'true' ->
								let <NewFun> =
								    %% Line 1447
								    {'element',[_cor21|['fixnums']]}
								in  %% Line 1448
								    apply 'update_call_or_enter'/2
									(_cor0, NewFun)
							    %% Line 1449
							    <'false'> when 'true' ->
								let <NewFun> =
								    %% Line 1450
								    {'element',[_cor21|['unknown']]}
								in  %% Line 1451
								    apply 'update_call_or_enter'/2
									(_cor0, NewFun)
							    ( <_cor36> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor36})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor37> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor37})
						    -| ['compiler_generated'] )
						end
					%% Line 1454
					<_fol193,_fol194>
					    when try
						  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (_cor11,
								   'unknown') ->
							    'true'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    call 'erlang':'=:='
								(_cor21, 'unknown')
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 1455
					    case call 'erl_types':'t_is_fixnum'
						     (IndexType) of
					      %% Line 1456
					      <'true'> when 'true' ->
						  let <NewFun> =
						      %% Line 1457
						      {'element',[_cor21|['fixnums']]}
						  in  %% Line 1458
						      apply 'update_call_or_enter'/2
							  (_cor0, NewFun)
					      %% Line 1459
					      <'false'> when 'true' ->
						  let <NewFun> =
						      %% Line 1460
						      {'element',[_cor21|[_cor11|[]]]}
						  in  %% Line 1461
						      apply 'update_call_or_enter'/2
							  (_cor0, NewFun)
					      ( <_cor43> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor43})
						-| ['compiler_generated'] )
					    end
					( <_fol195,_fol196> when 'true' ->
					      let <_cor44> = {_fol195,_fol196}
					      in  primop 'match_fail'
						      ({'case_clause',_cor44})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'transform_hd_or_tl'/2 =
    %% Line 1465
    fun (_cor1,_cor0) ->
	%% Line 1466
	case call 'hipe_icode':'args'
		 (_cor1) of
	  <[Arg|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1467
		  apply 'get_type'/1
		      (Arg)
	      in  %% Line 1467
		  case call 'erl_types':'t_is_cons'
			   (_cor3) of
		    %% Line 1468
		    <'true'> when 'true' ->
			apply 'update_call_or_enter'/2
			    (_cor1, _cor0)
		    %% Line 1469
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'transform_arith'/2 =
    %% Line 1472
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1473
	    call 'hipe_icode':'args'
		(_cor1)
	in  let <ArgTypes> =
		%% Line 1473
		apply 'get_type_list'/1
		    (_cor2)
	    in  let <_cor8> =
		    %% Line 1476
		    case call 'hipe_icode':'is_call'
			     (_cor1) of
		      %% Line 1477
		      <'true'> when 'true' ->
			  let <_cor4> =
			      apply 'call_dstlist'/1
				  (_cor1)
			  in  apply 'get_type_list'/1
				  (_cor4)
		      %% Line 1478
		      <'false'> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'length'
				  (ArgTypes)
			  in  let <_cor6> =
				  call 'erl_bif_types':'type'
				      ('erlang', _cor0, _cor5, ArgTypes)
			      in  [_cor6|[]]
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		in  %% Line 1480
		    case apply 'valid_unsafe_args'/2
			     (ArgTypes, _cor0) of
		      %% Line 1481
		      <'true'> when 'true' ->
			  %% Line 1482
			  case apply 'all_is_fixnum'/1
				   (_cor8) of
			    %% Line 1483
			    <'true'> when 'true' ->
				let <_cor10> =
				    %% Line 1484
				    apply 'arithop_to_extra_unsafe'/1
					(_cor0)
				in  %% Line 1484
				    apply 'update_call_or_enter'/2
					(_cor1, _cor10)
			    %% Line 1485
			    <'false'> when 'true' ->
				let <_cor11> =
				    %% Line 1486
				    apply 'arithop_to_unsafe'/1
					(_cor0)
				in  %% Line 1486
				    apply 'update_call_or_enter'/2
					(_cor1, _cor11)
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1488
		      <'false'> when 'true' ->
			  _cor1
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor13})
			-| ['compiler_generated'] )
		    end
'all_is_fixnum'/1 =
    %% Line 1492
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1493
	    call 'erlang':'make_fun'
		('erl_types', 't_is_fixnum', 1)
	in  %% Line 1493
	    call 'lists':'all'
		(_cor1, _cor0)
'valid_unsafe_args'/2 =
    %% Line 1495
    fun (_cor1,_cor0) ->
	%% Line 1496
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor0,
		     'bnot') ->
	      %% Line 1497
	      case _cor1 of
		<[Arg|[]]> when 'true' ->
		    %% Line 1498
		    call 'erl_types':'t_is_fixnum'
			(Arg)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1499
	  <> when 'true' ->
	      %% Line 1500
	      case _cor1 of
		<[LeftArg|[RightArg|[]]]> when 'true' ->
		    %% Line 1501
		    case _cor0 of
		      %% Line 1502
		      <'bsl'> when 'true' ->
			  let <_cor5> =
			      call 'erl_types':'t_is_fixnum'
				  (LeftArg)
			  in  let <_cor4> =
				  call 'erl_types':'t_is_bitwidth'
				      (RightArg)
			      in  call 'erlang':'and'
				      (_cor5, _cor4)
		      %% Line 1503
		      <'bsr'> when 'true' ->
			  let <_cor7> =
			      call 'erl_types':'t_is_fixnum'
				  (LeftArg)
			  in  let <_cor6> =
				  call 'erl_types':'t_is_bitwidth'
				      (RightArg)
			      in  call 'erlang':'and'
				      (_cor7, _cor6)
		      %% Line 1504
		      <_cor13> when 'true' ->
			  let <_cor9> =
			      call 'erl_types':'t_is_fixnum'
				  (LeftArg)
			  in  let <_cor8> =
				  call 'erl_types':'t_is_fixnum'
				      (RightArg)
			      in  call 'erlang':'and'
				      (_cor9, _cor8)
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'arithop_to_extra_unsafe'/1 =
    %% Line 1508
    fun (_cor0) ->
	%% Line 1509
	case _cor0 of
	  %% Line 1510
	  <'+'> when 'true' ->
	      'extra_unsafe_add'
	  %% Line 1511
	  <'-'> when 'true' ->
	      'extra_unsafe_sub'
	  %% Line 1512
	  <'*'> when 'true' ->
	      '*'
	  %% Line 1513
	  <'div'> when 'true' ->
	      'div'
	  %% Line 1514
	  <'rem'> when 'true' ->
	      'rem'
	  %% Line 1515
	  <'band'> when 'true' ->
	      'unsafe_band'
	  %% Line 1516
	  <'bor'> when 'true' ->
	      'unsafe_bor'
	  %% Line 1517
	  <'bxor'> when 'true' ->
	      'unsafe_bxor'
	  %% Line 1518
	  <'bnot'> when 'true' ->
	      'unsafe_bnot'
	  %% Line 1519
	  <'bsl'> when 'true' ->
	      'unsafe_bsl'
	  %% Line 1520
	  <'bsr'> when 'true' ->
	      'unsafe_bsr'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'arithop_to_unsafe'/1 =
    %% Line 1523
    fun (_cor0) ->
	%% Line 1524
	case _cor0 of
	  %% Line 1525
	  <'+'> when 'true' ->
	      'unsafe_add'
	  %% Line 1526
	  <'-'> when 'true' ->
	      'unsafe_sub'
	  %% Line 1527
	  <_cor3> when 'true' ->
	      _cor0
	end
'fixnum_ifop'/1 =
    %% Line 1530
    fun (_cor0) ->
	%% Line 1531
	case _cor0 of
	  %% Line 1532
	  <'=:='> when 'true' ->
	      'fixnum_eq'
	  %% Line 1533
	  <'=/='> when 'true' ->
	      'fixnum_neq'
	  %% Line 1534
	  <'=='> when 'true' ->
	      'fixnum_eq'
	  %% Line 1535
	  <'/='> when 'true' ->
	      'fixnum_neq'
	  %% Line 1536
	  <'>'> when 'true' ->
	      'fixnum_gt'
	  %% Line 1537
	  <'<'> when 'true' ->
	      'fixnum_lt'
	  %% Line 1538
	  <'>='> when 'true' ->
	      'fixnum_ge'
	  %% Line 1539
	  <'=<'> when 'true' ->
	      'fixnum_le'
	  %% Line 1540
	  <_cor3> when 'true' ->
	      _cor0
	end
'bit_opts'/2 =
    %% Line 1543
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {Name,Size,Flags},[MSType|[]]>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Name, 'bs_get_integer')
		in  let <_cor3> =
			%% Line 1544
			call 'erlang':'=:='
			    (Name, 'bs_get_float')
		    in  let <_cor4> =
			    %% Line 1545
			    call 'erlang':'=:='
				(Name, 'bs_get_binary')
			in  let <_cor5> =
				%% Line 1544
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  call 'erlang':'or'
				    (_cor2, _cor5) ->
	      let <Bits> =
		  %% Line 1546
		  call 'erl_types':'t_matchstate_present'
		      (MSType)
	      in  %% Line 1547
		  case call 'erl_types':'t_is_bitstr'
			   (Bits) of
		    %% Line 1548
		    <'true'> when 'true' ->
			let <Base> =
			    %% Line 1549
			    call 'erl_types':'t_bitstr_base'
				(Bits)
			in  %% Line 1550
			    case <> of
			      <>
				  when call 'erlang':'>='
					(Base,
					 Size) ->
				  let <_cor8> =
				      %% Line 1551
				      call 'erlang':'bor'
					  (Flags, 16)
				  in  %% Line 1551
				      {Name,Size,_cor8}
			      %% Line 1552
			      <> when 'true' ->
				  I
			    end
		    %% Line 1554
		    <'false'> when 'true' ->
			I
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1556
	  <I = {'bs_get_binary_all',Size,Flags},[MSType|[]]> when 'true' ->
	      let <Bits> =
		  %% Line 1557
		  call 'erl_types':'t_matchstate_present'
		      (MSType)
	      in  %% Line 1558
		  case call 'erl_types':'t_is_bitstr'
			   (Bits) of
		    %% Line 1559
		    <'true'> when 'true' ->
			let <Base> =
			    %% Line 1560
			    call 'erl_types':'t_bitstr_base'
				(Bits)
			in  let <Unit> =
				%% Line 1561
				call 'erl_types':'t_bitstr_unit'
				    (Bits)
			    in  %% Line 1562
				case <> of
				  <>
				      when try
					    let <_cor14> =
						call 'erlang':'rem'
						    (Base, Size)
					    in  ( case <> of
						    ( <>
							  when call 'erlang':'=:='
								(_cor14,
								 0) ->
							  let <_cor15> =
							      call 'erlang':'rem'
								  (Unit, Size)
							  in  call 'erlang':'=:='
								  (_cor15, 0)
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor18> =
					  %% Line 1563
					  call 'erlang':'bor'
					      (Flags, 16)
				      in  %% Line 1563
					  {'bs_get_binary_all',Size,_cor18}
				  %% Line 1564
				  <> when 'true' ->
				      I
				end
		    %% Line 1566
		    <'false'> when 'true' ->
			I
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor19})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1568
	  <I = {'bs_test_unit',Size},[MSType|[]]> when 'true' ->
	      let <Bits> =
		  %% Line 1569
		  call 'erl_types':'t_matchstate_present'
		      (MSType)
	      in  %% Line 1570
		  case call 'erl_types':'t_is_bitstr'
			   (Bits) of
		    %% Line 1571
		    <'true'> when 'true' ->
			let <Base> =
			    %% Line 1572
			    call 'erl_types':'t_bitstr_base'
				(Bits)
			in  let <Unit> =
				%% Line 1573
				call 'erl_types':'t_bitstr_unit'
				    (Bits)
			    in  %% Line 1574
				case <> of
				  <>
				      when try
					    let <_cor24> =
						call 'erlang':'rem'
						    (Base, Size)
					    in  ( case <> of
						    ( <>
							  when call 'erlang':'=:='
								(_cor24,
								 0) ->
							  let <_cor25> =
							      call 'erlang':'rem'
								  (Unit, Size)
							  in  call 'erlang':'=:='
								  (_cor25, 0)
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 1575
				      {'bs_test_unit',1}
				  %% Line 1576
				  <> when 'true' ->
				      I
				end
		    %% Line 1578
		    <'false'> when 'true' ->
			I
		    ( <_cor28> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor28})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1580
	  <I = {'bs_put_integer',Size,Flags,ConstInfo},[Src|_cor43]> when 'true' ->
	      %% Line 1581
	      case call 'erl_types':'t_is_fixnum'
		       (Src) of
		%% Line 1582
		<'true'> when 'true' ->
		    %% Line 1583
		    {'unsafe_bs_put_integer',Size,Flags,ConstInfo}
		%% Line 1584
		<'false'> when 'true' ->
		    I
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1586
	  <I = {'bs_start_match',Max},[Src|[]]> when 'true' ->
	      %% Line 1587
	      case call 'erl_types':'t_is_bitstr'
		       (Src) of
		%% Line 1588
		<'true'> when 'true' ->
		    {{'bs_start_match','bitstr'},Max}
		%% Line 1589
		<'false'> when 'true' ->
		    let <_cor30> =
			%% Line 1590
			call 'erl_types':'t_matchstate'
			    ()
		    in  let <MSorNone> =
			    %% Line 1590
			    call 'erl_types':'t_inf'
				(_cor30, Src)
			in  %% Line 1591
			    case call 'erl_types':'t_is_matchstate'
				     (MSorNone) of
			      %% Line 1592
			      <'true'> when 'true' ->
				  let <Slots> =
				      %% Line 1593
				      call 'erl_types':'t_matchstate_slots'
					  (MSorNone)
				  in  let <_cor37> =
					  %% Line 1594
					  ( case call 'erl_types':'t_is_any'
						     (Slots) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_cor34> =
							call 'erl_types':'t_to_tlist'
							    (Slots)
						    in  let <_cor35> =
							    call 'erlang':'length'
								(_cor34)
							in  call 'erlang':'=<'
								(_cor35, Max)
						-| ['compiler_generated'] )
					      ( <_cor33> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor33}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 1594
					  case _cor37 of
					    %% Line 1595
					    <'true'> when 'true' ->
						I
					    %% Line 1596
					    <'false'> when 'true' ->
						{{'bs_start_match','ok_matchstate'},Max}
					    ( <_cor38> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor38})
					      -| ['compiler_generated'] )
					  end
			      %% Line 1598
			      <'false'> when 'true' ->
				  I
			      ( <_cor39> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor39})
				-| ['compiler_generated'] )
			    end
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1601
	  <I,_cor44> when 'true' ->
	      I
	end
'is_exact_comp'/1 =
    %% Line 1603
    fun (_cor0) ->
	%% Line 1604
	case _cor0 of
	  %% Line 1605
	  <'=:='> when 'true' ->
	      'true'
	  %% Line 1606
	  <'=/='> when 'true' ->
	      'true'
	  %% Line 1607
	  <_X_Op> when 'true' ->
	      'false'
	end
'all_fixnums'/1 =
    %% Line 1610
    fun (_cor0) ->
	case _cor0 of
	  <[Type|Types]> when 'true' ->
	      %% Line 1611
	      ( case call 'erl_types':'t_is_fixnum'
			 (Type) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'all_fixnums'/1
			    (Types)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1612
	  <[]> when 'true' ->
	      %% Line 1613
	      'true'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'all_fixnums',1}}] )
	    -| ['compiler_generated'] )
	end
'any_immediate'/1 =
    %% Line 1615
    fun (_cor0) ->
	case _cor0 of
	  <[Type|Types]> when 'true' ->
	      %% Line 1616
	      ( case call 'erl_types':'t_is_fixnum'
			 (Type) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			( case call 'erl_types':'t_is_atom'
				   (Type) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'any_immediate'/1
				      (Types)
			      -| ['compiler_generated'] )
			    ( <_cor2> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1617
	  <[]> when 'true' ->
	      'false'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'any_immediate',1}}] )
	    -| ['compiler_generated'] )
	end
'get_standard_primop'/1 =
    %% Line 1619
    fun (_cor0) ->
	case _cor0 of
	  <'unsafe_bsl'> when 'true' ->
	      'bsl'
	  %% Line 1620
	  <'unsafe_bsr'> when 'true' ->
	      'bsr'
	  %% Line 1621
	  <'unsafe_add'> when 'true' ->
	      '+'
	  %% Line 1622
	  <'extra_unsafe_add'> when 'true' ->
	      '+'
	  %% Line 1623
	  <'unsafe_bnot'> when 'true' ->
	      'bnot'
	  %% Line 1624
	  <'unsafe_bxor'> when 'true' ->
	      'bxor'
	  %% Line 1625
	  <'unsafe_band'> when 'true' ->
	      'band'
	  %% Line 1626
	  <'unsafe_bor'> when 'true' ->
	      'bor'
	  %% Line 1627
	  <'unsafe_sub'> when 'true' ->
	      '-'
	  %% Line 1628
	  <'extra_unsafe_sub'> when 'true' ->
	      '-'
	  %% Line 1629
	  <Op> when 'true' ->
	      Op
	end
'primop_type'/2 =
    %% Line 1631
    fun (_cor1,_cor0) ->
	%% Line 1632
	case _cor1 of
	  %% Line 1633
	  <{'mkfun',MFA,_cor12,_cor13}> when 'true' ->
	      let <_cor3> =
		  %% Line 1634
		  call 'erl_types':'t_fun'
		      ()
	      in  let <_cor2> =
		      %% Line 1634
		      apply 'find_signature_mfa'/1
			  (MFA)
		  in  %% Line 1634
		      call 'erl_types':'t_inf'
			  (_cor3, _cor2)
	  %% Line 1635
	  <_cor14> when 'true' ->
	      let <None> =
		  %% Line 1636
		  call 'erl_types':'t_none'
		      ()
	      in  let <Primop> =
		      %% Line 1637
		      apply 'get_standard_primop'/1
			  (_cor1)
		  in  let <RetType> =
			  %% Line 1638
			  call 'hipe_icode_primops':'type'
			      (Primop, _cor0)
		      in  %% Line 1639
			  case RetType of
			    %% Line 1640
			    <_cor15>
				when call 'erlang':'=:='
				      (RetType,
				       None) ->
				let <_cor7> =
				    %% Line 1641
				    apply 'add_funs_to_arg_types'/1
					(_cor0)
				in  %% Line 1641
				    call 'hipe_icode_primops':'type'
					(Primop, _cor7)
			    %% Line 1642
			    <Other> when 'true' ->
				%% Line 1643
				Other
			  end
	end
'add_arg_types'/2 =
    %% Line 1651
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1652
	    call 'gb_trees':'empty'
		()
	in  %% Line 1652
	    apply 'add_arg_types'/3
		(_cor1, _cor0, _cor2)
'add_arg_types'/3 =
    %% Line 1654
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|Args],[Type|Types],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1656
		  case call 'erl_types':'t_is_none'
			   (Type) of
		    %% Line 1657
		    <'true'> when 'true' ->
			call 'erl_types':'t_any'
			    ()
		    %% Line 1658
		    <'false'> when 'true' ->
			Type
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 1660
		      apply 'enter'/3
			  (Arg, _cor4, Acc)
		  in  %% Line 1660
		      apply 'add_arg_types'/3
			  (Args, Types, _cor6)
	  %% Line 1661
	  <_cor10,[],Acc> when 'true' ->
	      %% Line 1662
	      Acc
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'add_arg_types',3}}] )
	    -| ['compiler_generated'] )
	end
'get_type_list'/1 =
    %% Line 1664
    fun (_cor0) ->
	%% Line 1665
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Arg|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'get_type'/1
				    (Arg)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'get_type'/1 =
    %% Line 1667
    fun (_cor0) ->
	%% Line 1668
	case call 'hipe_icode':'is_annotated_variable'
		 (_cor0) of
	  %% Line 1669
	  <'true'> when 'true' ->
	      let <None> =
		  %% Line 1670
		  call 'erl_types':'t_none'
		      ()
	      in  %% Line 1671
		  case call 'hipe_icode':'variable_annotation'
			   (_cor0) of
		    %% Line 1672
		    <{'type_anno',_cor6,_cor7}>
			when call 'erlang':'=:='
			      (_cor6,
			       None) ->
			call 'erl_types':'t_any'
			    ()
		    %% Line 1673
		    <{'type_anno',Type,_cor8}> when 'true' ->
			Type
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1675
	  <'false'> when 'true' ->
	      %% Line 1676
	      case call 'hipe_icode':'is_const'
		       (_cor0) of
		%% Line 1677
		<'true'> when 'true' ->
		    apply 'const_type'/1
			(_cor0)
		%% Line 1678
		<'false'> when 'true' ->
		    call 'erl_types':'t_any'
			()
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 1685
    fun (_cor1,_cor0) ->
	%% Line 1686
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 1687
	  <'none'> when 'true' ->
	      %% Line 1688
	      case call 'hipe_icode':'is_const'
		       (_cor1) of
		%% Line 1689
		<'true'> when 'true' ->
		    apply 'const_type'/1
			(_cor1)
		%% Line 1690
		<'false'> when 'true' ->
		    call 'erl_types':'t_none'
			()
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1692
	  <{'value',Type}> when 'true' ->
	      %% Line 1693
	      Type
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'lookup_list'/2 =
    %% Line 1696
    fun (_cor1,_cor0) ->
	%% Line 1697
	apply 'lookup_list0'/3
	    (_cor1, _cor0, [])
'lookup_list0'/3 =
    %% Line 1699
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Info,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1700
		  apply 'lookup'/2
		      (H, Info)
	      in  %% Line 1700
		  apply 'lookup_list0'/3
		      (T, Info, [_cor3|Acc])
	  %% Line 1701
	  <[],_cor7,Acc> when 'true' ->
	      %% Line 1702
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'lookup_list0',3}}] )
	    -| ['compiler_generated'] )
	end
'safe_lookup'/2 =
    %% Line 1707
    fun (_cor1,_cor0) ->
	%% Line 1708
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 1709
	  <'none'> when 'true' ->
	      %% Line 1710
	      case call 'hipe_icode':'is_const'
		       (_cor1) of
		%% Line 1711
		<'true'> when 'true' ->
		    apply 'const_type'/1
			(_cor1)
		%% Line 1712
		<'false'> when 'true' ->
		    %% Line 1714
		    call 'erl_types':'t_any'
			()
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1716
	  <{'value',Type}> when 'true' ->
	      %% Line 1717
	      Type
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'safe_lookup_list'/2 =
    %% Line 1720
    fun (_cor1,_cor0) ->
	%% Line 1721
	apply 'safe_lookup_list0'/3
	    (_cor1, _cor0, [])
'safe_lookup_list0'/3 =
    %% Line 1723
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Info,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1724
		  apply 'safe_lookup'/2
		      (H, Info)
	      in  %% Line 1724
		  apply 'safe_lookup_list0'/3
		      (T, Info, [_cor3|Acc])
	  %% Line 1725
	  <[],_cor7,Acc> when 'true' ->
	      %% Line 1726
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'safe_lookup_list0',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_list'/3 =
    %% Line 1728
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Var|VarLeft],[Type|TypeLeft],Info> when 'true' ->
	      let <NewInfo> =
		  %% Line 1729
		  apply 'enter'/3
		      (Var, Type, Info)
	      in  %% Line 1730
		  apply 'enter_list'/3
		      (VarLeft, TypeLeft, NewInfo)
	  %% Line 1731
	  <[],[],Info> when 'true' ->
	      %% Line 1732
	      Info
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'enter_list',3}}] )
	    -| ['compiler_generated'] )
	end
'enter'/3 =
    %% Line 1734
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Key|[]],Value,Tree> when 'true' ->
	      %% Line 1735
	      apply 'enter'/3
		  (Key, Value, Tree)
	  %% Line 1736
	  <Key,Value,Tree> when 'true' ->
	      %% Line 1737
	      case apply 'is_var_or_reg'/1
		       (Key) of
		%% Line 1738
		<'true'> when 'true' ->
		    %% Line 1739
		    case call 'erl_types':'t_is_none'
			     (Value) of
		      %% Line 1740
		      <'true'> when 'true' ->
			  %% Line 1741
			  call 'gb_trees':'delete_any'
			      (Key, Tree)
		      %% Line 1742
		      <'false'> when 'true' ->
			  %% Line 1743
			  call 'gb_trees':'enter'
			      (Key, Value, Tree)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 1745
		<'false'> when 'true' ->
		    %% Line 1746
		    Tree
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'join_list'/2 =
    %% Line 1749
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1750
	    call 'erl_types':'t_none'
		()
	in  %% Line 1750
	    apply 'join_list'/3
		(_cor1, _cor0, _cor2)
'join_list'/3 =
    %% Line 1752
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Info,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1753
		  apply 'lookup'/2
		      (H, Info)
	      in  let <Type> =
		      %% Line 1753
		      call 'erl_types':'t_sup'
			  (_cor3, Acc)
		  in  %% Line 1754
		      apply 'join_list'/3
			  (T, Info, Type)
	  %% Line 1755
	  <[],_cor8,Acc> when 'true' ->
	      %% Line 1756
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'join_list',3}}] )
	    -| ['compiler_generated'] )
	end
'join_info_in'/3 =
    %% Line 1758
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_OldInfo,_X_NewInfo> when 'true' ->
	      %% Line 1760
	      'fixpoint'
	  %% Line 1761
	  <Vars,OldInfo,NewInfo> when 'true' ->
	      let <_cor3> =
		  %% Line 1762
		  call 'gb_trees':'empty'
		      ()
	      in  let <NewInfo2> =
		      %% Line 1762
		      apply 'join_info_in'/5
			  (Vars, Vars, OldInfo, NewInfo, _cor3)
		  in  %% Line 1763
		      case apply 'info_is_equal'/2
			       (NewInfo2, OldInfo) of
			%% Line 1764
			<'true'> when 'true' ->
			    'fixpoint'
			%% Line 1765
			<'false'> when 'true' ->
			    NewInfo2
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	end
'join_info_in'/5 =
    %% Line 1772
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Var|Left],LiveIn,Info1,Info2,Acc> when 'true' ->
	      let <Type1> =
		  %% Line 1773
		  call 'gb_trees':'lookup'
		      (Var, Info1)
	      in  let <Type2> =
		      %% Line 1774
		      call 'gb_trees':'lookup'
			  (Var, Info2)
		  in  %% Line 1775
		      case <Type1,Type2> of
			%% Line 1776
			<'none','none'> when 'true' ->
			    %% Line 1777
			    apply 'join_info_in'/5
				(Left, LiveIn, Info1, Info2, Acc)
			%% Line 1778
			<'none',{'value',Val}> when 'true' ->
			    let <NewTree> =
				%% Line 1779
				call 'gb_trees':'insert'
				    (Var, Val, Acc)
			    in  %% Line 1780
				apply 'join_info_in'/5
				    (Left, LiveIn, Info1, Info2, NewTree)
			%% Line 1781
			<{'value',Val},'none'> when 'true' ->
			    let <NewTree> =
				%% Line 1782
				call 'gb_trees':'insert'
				    (Var, Val, Acc)
			    in  %% Line 1783
				apply 'join_info_in'/5
				    (Left, LiveIn, Info1, Info2, NewTree)
			%% Line 1784
			<{'value',Val1},{'value',Val2}> when 'true' ->
			    let <_cor9> =
				%% Line 1785
				call 'erl_types':'t_sup'
				    (Val1, Val2)
			    in  let <NewTree> =
				    %% Line 1785
				    call 'gb_trees':'insert'
					(Var, _cor9, Acc)
				in  %% Line 1786
				    apply 'join_info_in'/5
					(Left, LiveIn, Info1, Info2, NewTree)
			( <_fol227,_fol228> when 'true' ->
			      let <_cor11> = {_fol227,_fol228}
			      in  primop 'match_fail'
				      ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1788
	  <[],_X_LiveIn,_X_Info1,_X_Info2,Acc> when 'true' ->
	      %% Line 1789
	      Acc
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'join_info_in',5}}] )
	    -| ['compiler_generated'] )
	end
'info_is_equal'/2 =
    %% Line 1791
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1792
	    call 'gb_trees':'to_list'
		(_cor1)
	in  let <_cor2> =
		%% Line 1792
		call 'gb_trees':'to_list'
		    (_cor0)
	    in  %% Line 1792
		apply 'compare'/2
		    (_cor3, _cor2)
'compare'/2 =
    %% Line 1794
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Var,Type1}|Left1],[{_cor6,Type2}|Left2]>
	      when call 'erlang':'=:='
		    (_cor6,
		     Var) ->
	      %% Line 1795
	      ( case call 'erl_types':'t_is_equal'
			 (Type1, Type2) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'compare'/2
			    (Left1, Left2)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1796
	  <[],[]> when 'true' ->
	      %% Line 1797
	      'true'
	  %% Line 1798
	  <_cor7,_cor8> when 'true' ->
	      %% Line 1799
	      'false'
	end
'const_type'/1 =
    %% Line 1801
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1802
	    call 'hipe_icode':'const_value'
		(_cor0)
	in  %% Line 1802
	    call 'erl_types':'t_from_term'
		(_cor1)
'do_updates'/2 =
    %% Line 1804
    fun (_cor1,_cor0) ->
	%% Line 1805
	apply 'do_updates'/3
	    (_cor1, _cor0, [])
'do_updates'/3 =
    %% Line 1807
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State,[{Label,Info}|Tail],Worklist> when 'true' ->
	      %% Line 1808
	      case apply 'state__info_in_update'/3
		       (State, Label, Info) of
		%% Line 1809
		<'fixpoint'> when 'true' ->
		    %% Line 1811
		    apply 'do_updates'/3
			(State, Tail, Worklist)
		%% Line 1812
		<NewState> when 'true' ->
		    %% Line 1816
		    apply 'do_updates'/3
			(NewState, Tail, [Label|Worklist])
	      end
	  %% Line 1818
	  <State,[],Worklist> when 'true' ->
	      %% Line 1819
	      {State,Worklist}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'do_updates',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_defines'/3 =
    %% Line 1821
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1822
	case apply 'defines'/1
		 (_cor2) of
	  %% Line 1823
	  <[]> when 'true' ->
	      _cor0
	  %% Line 1824
	  <[Def|[]]> when 'true' ->
	      %% Line 1825
	      apply 'enter'/3
		  (Def, _cor1, _cor0)
	  %% Line 1826
	  <Defs> when 'true' ->
	      let <_cor16> =
		  %% Line 1827
		  case call 'erl_types':'t_is_any'
			   (_cor1) of
		    %% Line 1828
		    <'true'> when 'true' ->
			%% Line 1829
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[Def|_cor4]> when 'true' ->
					    let <_cor6> =
						call 'erl_types':'t_any'
						    ()
					    in  let <_cor7> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [{Def,_cor6}|_cor7]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Defs)
			  -| ['list_comprehension'] )
		    %% Line 1830
		    <'false'> when 'true' ->
			%% Line 1831
			case call 'erl_types':'t_is_none'
				 (_cor1) of
			  %% Line 1832
			  <'true'> when 'true' ->
			      %% Line 1833
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor10) ->
					    case _cor10 of
					      <[Def|_cor9]> when 'true' ->
						  let <_cor11> =
						      call 'erl_types':'t_none'
							  ()
						  in  let <_cor12> =
							  apply 'lc$^1'/1
							      (_cor9)
						      in  ( [{Def,_cor11}|_cor12]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor10> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor10})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Defs)
				-| ['list_comprehension'] )
			  %% Line 1834
			  <'false'> when 'true' ->
			      let <_cor13> =
				  %% Line 1835
				  call 'erl_types':'t_to_tlist'
				      (_cor1)
			      in  %% Line 1835
				  call 'lists':'zip'
				      (Defs, _cor13)
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor22> =
		      %% Line 1838
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{X,T},Inf> when 'true' ->
				  apply 'enter'/3
				      (X, T, Inf)
			      ( <_cor21,_cor20> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor21,_cor20})
				      -| [{'function_name',{'-enter_defines/3-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-enter_defines/3-fun-0-'}}] )
		  in  %% Line 1838
		      call 'lists':'foldl'
			  (_cor22, _cor0, _cor16)
	end
'defines'/1 =
    %% Line 1841
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1842
	    call 'hipe_icode':'defines'
		(_cor0)
	in  %% Line 1842
	    apply 'keep_vars_and_regs'/1
		(_cor1)
'call_dstlist'/1 =
    %% Line 1844
    fun (_cor0) ->
	%% Line 1845
	call 'hipe_icode':'call_dstlist'
	    (_cor0)
'uses'/1 =
    %% Line 1847
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1848
	    call 'hipe_icode':'uses'
		(_cor0)
	in  %% Line 1848
	    apply 'keep_vars_and_regs'/1
		(_cor1)
'keep_vars_and_regs'/1 =
    %% Line 1850
    fun (_cor0) ->
	%% Line 1851
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[V|_cor2]> when 'true' ->
			    ( case apply 'is_var_or_reg'/1
				       (V) of
				<'true'> when 'true' ->
				    let <_cor4> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [V|_cor4]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'butlast'/1 =
    %% Line 1853
    fun (_cor0) ->
	case _cor0 of
	  <[_cor3|[]]> when 'true' ->
	      %% Line 1854
	      []
	  %% Line 1855
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1856
		  apply 'butlast'/1
		      (T)
	      in  %% Line 1856
		  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'butlast',1}}] )
	    -| ['compiler_generated'] )
	end
'any_is_none'/1 =
    %% Line 1860
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1861
	    ( fun (_cor1) ->
		  call 'erl_types':'t_is_none'
		      (_cor1)
	      -| [{'id',{0,0,'-any_is_none/1-fun-0-'}}] )
	in  %% Line 1861
	    call 'lists':'any'
		(_cor3, _cor0)
'is_var_or_reg'/1 =
    %% Line 1863
    fun (_cor0) ->
	%% Line 1864
	( case call 'hipe_icode':'is_var'
		   (_cor0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  'true'
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'hipe_icode':'is_reg'
		      (_cor0)
	      -| ['compiler_generated'] )
	    ( <_cor1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'new_state'/2 =
    %% Line 1871
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{MFA,GetCallFun,GetResFun,FinalAction}> when 'true' ->
	      let <Start> =
		  %% Line 1872
		  call 'hipe_icode_cfg':'start_label'
		      (Cfg)
	      in  let <Params> =
		      %% Line 1873
		      call 'hipe_icode_cfg':'params'
			  (Cfg)
		  in  let <ParamTypes> =
			  %% Line 1874
			  apply GetCallFun
			      (MFA, Cfg)
		      in  %% Line 1875
			  case apply 'any_is_none'/1
				   (ParamTypes) of
			    %% Line 1876
			    <'true'> when 'true' ->
				let <_cor5> =
				    %% Line 1877
				    call 'erl_types':'t_none'
					()
				in  do  %% Line 1877
					apply FinalAction
					    (MFA, [_cor5|[]])
					%% Line 1878
					call 'erlang':'throw'
					    ('no_input')
			    %% Line 1879
			    <'false'> when 'true' ->
				let <Info> =
				    %% Line 1880
				    apply 'add_arg_types'/2
					(Params, ParamTypes)
				in  let <_cor7> =
					%% Line 1881
					call 'gb_trees':'empty'
					    ()
				    in  let <InfoMap> =
					    %% Line 1881
					    call 'gb_trees':'insert'
						({Start,'in'}, Info, _cor7)
					in  let <Liveness> =
						%% Line 1882
						call 'hipe_icode_ssa':'ssa_liveness__analyze'
						    (Cfg)
					    in  let <_cor10> =
						    call 'erl_types':'t_none'
							()
						in  %% Line 1883
						    {'state',InfoMap,Cfg,Liveness,%% Line 1884
										  ParamTypes,[_cor10|[]],%% Line 1884
													 GetResFun,%% Line 1885
														   FinalAction}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'new_state',2}}] )
	    -| ['compiler_generated'] )
	end
'state__cfg'/1 =
    %% Line 1888
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,Cfg,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 1889
	      Cfg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__cfg',1}}] )
	    -| ['compiler_generated'] )
	end
'state__succ'/2 =
    %% Line 1891
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,Cfg,_cor5,_cor6,_cor7,_cor8,_cor9},Label> when 'true' ->
	      %% Line 1892
	      call 'hipe_icode_cfg':'succ'
		  (Cfg, Label)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__succ',2}}] )
	    -| ['compiler_generated'] )
	end
'state__bb'/2 =
    %% Line 1894
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor4,Cfg,_cor5,_cor6,_cor7,_cor8,_cor9},Label> when 'true' ->
	      %% Line 1895
	      call 'hipe_icode_cfg':'bb'
		  (Cfg, Label)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__bb',2}}] )
	    -| ['compiler_generated'] )
	end
'state__bb_add'/3 =
    %% Line 1897
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',_cor9,Cfg,_cor10,_cor11,_cor12,_cor13,_cor14},Label,BB> when 'true' ->
	      let <NewCfg> =
		  %% Line 1898
		  call 'hipe_icode_cfg':'bb_add'
		      (Cfg, Label, BB)
	      in  %% Line 1899
		  call 'erlang':'setelement'
		      (3, S, NewCfg)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__bb_add',3}}] )
	    -| ['compiler_generated'] )
	end
'state__params_update'/2 =
    %% Line 1901
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'state',_cor7,Cfg,_cor8,_cor9,_cor10,_cor11,_cor12},NewParams> when 'true' ->
	      let <NewCfg> =
		  %% Line 1902
		  call 'hipe_icode_cfg':'params_update'
		      (Cfg, NewParams)
	      in  %% Line 1903
		  call 'erlang':'setelement'
		      (3, S, NewCfg)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__params_update',2}}] )
	    -| ['compiler_generated'] )
	end
'state__ret_type'/1 =
    %% Line 1905
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,RT,_cor6,_cor7}> when 'true' ->
	      RT
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__ret_type',1}}] )
	    -| ['compiler_generated'] )
	end
'state__lookupfun'/1 =
    %% Line 1907
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,LF,_cor7}> when 'true' ->
	      LF
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__lookupfun',1}}] )
	    -| ['compiler_generated'] )
	end
'state__resultaction'/1 =
    %% Line 1909
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,RA}> when 'true' ->
	      RA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__resultaction',1}}] )
	    -| ['compiler_generated'] )
	end
'state__info_in'/2 =
    %% Line 1911
    fun (_cor1,_cor0) ->
	%% Line 1912
	apply 'state__info'/2
	    (_cor1, {_cor0,'in'})
'state__info_out'/2 =
    %% Line 1914
    fun (_cor1,_cor0) ->
	%% Line 1915
	apply 'state__info'/2
	    (_cor1, {_cor0,'out'})
'state__info'/2 =
    %% Line 1917
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',IM,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10},Label> when 'true' ->
	      %% Line 1918
	      case call 'gb_trees':'lookup'
		       (Label, IM) of
		%% Line 1919
		<{'value',Info}> when 'true' ->
		    Info
		%% Line 1920
		<'none'> when 'true' ->
		    call 'gb_trees':'empty'
			()
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'state__info',2}}] )
	    -| ['compiler_generated'] )
	end
'state__ret_type_update'/2 =
    %% Line 1923
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor13,_cor14,_cor15,_cor16,RT,_cor17,_cor18},NewType>
	      when %% Line 1924
		call 'erlang':'is_list'
		    (NewType) ->
	      let <_cor2> =
		  %% Line 1925
		  call 'erlang':'make_fun'
		      ('erl_types', 't_sup', 2)
	      in  let <TotType> =
		      %% Line 1925
		      call 'lists':'zipwith'
			  (_cor2, RT, NewType)
		  in  %% Line 1926
		      call 'erlang':'setelement'
			  (6, State, TotType)
	  %% Line 1927
	  <State = {'state',_cor27,_cor28,_cor29,_cor30,RT,_cor31,_cor32},NewType> when 'true' ->
	      let <_cor10> =
		  %% Line 1928
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[_cor33|_cor7]> when 'true' ->
				      let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [NewType|_cor9]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (RT)
		    -| ['list_comprehension'] )
	      in  %% Line 1928
		  apply 'state__ret_type_update'/2
		      (State, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'state__ret_type_update',2}}] )
	    -| ['compiler_generated'] )
	end
'state__info_in_update'/3 =
    %% Line 1930
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',IM,_cor21,Liveness,_cor22,_cor23,_cor24,_cor25},Label,Info> when 'true' ->
	      let <LiveIn> =
		  %% Line 1931
		  call 'hipe_icode_ssa':'ssa_liveness__livein'
		      (Liveness, Label)
	      in  let <LabelIn> = {%% Line 1932
		       Label,%% Line 1932
			     'in'}
		  in  %% Line 1933
		      case call 'gb_trees':'lookup'
			       (LabelIn, IM) of
			%% Line 1934
			<'none'> when 'true' ->
			    let <OldInfo> =
				%% Line 1935
				call 'gb_trees':'empty'
				    ()
			    in  %% Line 1936
				case apply 'join_info_in'/3
					 (LiveIn, OldInfo, Info) of
				  %% Line 1937
				  <'fixpoint'> when 'true' ->
				      let <_rec5> =
					  %% Line 1939
					  call 'gb_trees':'enter'
					      (LabelIn, OldInfo, IM)
				      in  %% Line 1939
					  call 'erlang':'setelement'
					      (2, S, _rec5)
				  %% Line 1940
				  <NewInfo> when 'true' ->
				      let <_rec7> =
					  %% Line 1941
					  call 'gb_trees':'enter'
					      (LabelIn, NewInfo, IM)
				      in  %% Line 1941
					  call 'erlang':'setelement'
					      (2, S, _rec7)
				end
			%% Line 1943
			<{'value',OldInfo}> when 'true' ->
			    %% Line 1944
			    case apply 'join_info_in'/3
				     (LiveIn, OldInfo, Info) of
			      %% Line 1945
			      <'fixpoint'> when 'true' ->
				  %% Line 1946
				  'fixpoint'
			      %% Line 1947
			      <NewInfo> when 'true' ->
				  let <_rec9> =
				      %% Line 1948
				      call 'gb_trees':'enter'
					  (LabelIn, NewInfo, IM)
				  in  %% Line 1948
				      call 'erlang':'setelement'
					  (2, S, _rec9)
			    end
			( <_cor17> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor17})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'state__info_in_update',3}}] )
	    -| ['compiler_generated'] )
	end
'state__info_out_update'/3 =
    %% Line 1952
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'state',IM,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14},Label,Info> when 'true' ->
	      let <_rec11> =
		  %% Line 1953
		  call 'gb_trees':'enter'
		      ({Label,'out'}, Info, IM)
	      in  %% Line 1953
		  call 'erlang':'setelement'
		      (2, State, _rec11)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__info_out_update',3}}] )
	    -| ['compiler_generated'] )
	end
'init_work'/1 =
    %% Line 1960
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1962
	    apply 'state__cfg'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1962
		call 'hipe_icode_cfg':'start_label'
		    (_cor1)
	    in  let <Labels> =
		    %% Line 1962
		    [_cor2|[]]
		in  let <_cor4> =
			%% Line 1963
			call 'gb_sets':'from_list'
			    (Labels)
		    in  %% Line 1963
			{Labels,[],_cor4}
'get_work'/1 =
    %% Line 1965
    fun (_cor0) ->
	case _cor0 of
	  <{[Label|Left],List,Set}> when 'true' ->
	      let <_cor1> =
		  %% Line 1966
		  call 'gb_sets':'delete'
		      (Label, Set)
	      in  let <NewWork> = {%% Line 1966
		       Left,%% Line 1966
			    List,_cor1}
		  in  %% Line 1967
		      {Label,NewWork}
	  %% Line 1968
	  <{[],[],_X_Set}> when 'true' ->
	      %% Line 1969
	      'fixpoint'
	  %% Line 1970
	  <{[],List,Set}> when 'true' ->
	      let <_cor3> =
		  %% Line 1971
		  call 'lists':'reverse'
		      (List)
	      in  %% Line 1971
		  apply 'get_work'/1
		      ({_cor3,[],Set})
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'get_work',1}}] )
	    -| ['compiler_generated'] )
	end
'add_work'/2 =
    %% Line 1973
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Work = {List1,List2,Set},[Label|Left]> when 'true' ->
	      %% Line 1974
	      case call 'gb_sets':'is_member'
		       (Label, Set) of
		%% Line 1975
		<'true'> when 'true' ->
		    %% Line 1976
		    apply 'add_work'/2
			(Work, Left)
		%% Line 1977
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 1979
			call 'gb_sets':'insert'
			    (Label, Set)
		    in  %% Line 1979
			apply 'add_work'/2
			    ({List1,[Label|List2],_cor2}, Left)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1981
	  <Work,[]> when 'true' ->
	      %% Line 1982
	      Work
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_work',2}}] )
	    -| ['compiler_generated'] )
	end
'annotate_cfg'/1 =
    %% Line 1989
    fun (_cor0) ->
	let <Cfg> =
	    %% Line 1990
	    apply 'state__cfg'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 1991
		call 'hipe_icode_cfg':'params'
		    (Cfg)
	    in  let <_cor2> =
		    %% Line 1992
		    call 'hipe_icode_cfg':'start_label'
			(Cfg)
		in  let <NewState> =
			%% Line 1991
			apply 'annotate_params'/3
			    (_cor3, _cor0, _cor2)
		    in  let <Labels> =
			    %% Line 1993
			    call 'hipe_icode_cfg':'reverse_postorder'
				(Cfg)
			in  %% Line 1994
			    apply 'annotate_bbs'/2
				(Labels, NewState)
'annotate_params'/3 =
    %% Line 1996
    fun (_cor2,_cor1,_cor0) ->
	let <Info> =
	    %% Line 1997
	    apply 'state__info_in'/2
		(_cor1, _cor0)
	in  let <AnnoFun> =
		%% Line 1998
		call 'erlang':'make_fun'
		    ('hipe_icode', 'annotate_variable', 2)
	    in  let <_cor10> =
		    %% Line 2000
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor7) ->
				  case _cor7 of
				    <[P|_cor6]> when 'true' ->
					let <_cor8> =
					    apply 'make_annotation'/2
						(P, Info)
					in  let <_cor9> =
						apply 'lc$^0'/1
						    (_cor6)
					    in  ( [_cor8|_cor9]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor2)
		      -| ['list_comprehension'] )
		in  let <NewParams> =
			%% Line 2000
			call 'lists':'zipwith'
			    (AnnoFun, _cor2, _cor10)
		    in  %% Line 2001
			apply 'state__params_update'/2
			    (_cor1, NewParams)
'annotate_bbs'/2 =
    %% Line 2003
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],State> when 'true' ->
	      let <BB> =
		  %% Line 2004
		  apply 'state__bb'/2
		      (State, Label)
	      in  let <Code> =
		      %% Line 2005
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <Info> =
			  %% Line 2006
			  apply 'state__info_in'/2
			      (State, Label)
		      in  let <_cor5> =
			      %% Line 2007
			      apply 'state__lookupfun'/1
				  (State)
			  in  let <NewCode> =
				  %% Line 2007
				  apply 'annotate_instr_list'/4
				      (Code, Info, _cor5, [])
			      in  let <NewBB> =
				      %% Line 2008
				      call 'hipe_bb':'code_update'
					  (BB, NewCode)
				  in  let <NewState> =
					  %% Line 2009
					  apply 'state__bb_add'/3
					      (State, Label, NewBB)
				      in  %% Line 2010
					  apply 'annotate_bbs'/2
					      (Left, NewState)
	  %% Line 2011
	  <[],State> when 'true' ->
	      %% Line 2012
	      State
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'annotate_bbs',2}}] )
	    -| ['compiler_generated'] )
	end
'annotate_instr_list'/4 =
    %% Line 2014
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|[]],Info,LookupFun,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2016
		  case I of
		    %% Line 2017
		    <{'icode_call',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			%% Line 2018
			apply 'do_safe_call'/3
			    (I, Info, LookupFun)
		    %% Line 2019
		    <_cor23> when 'true' ->
			%% Line 2020
			apply 'analyse_insn'/3
			    (I, Info, LookupFun)
		  end
	      in  let <NewI> =
		      %% Line 2022
		      apply 'annotate_instr'/3
			  (I, _cor5, Info)
		  in  %% Line 2023
		      call 'lists':'reverse'
			  ([NewI|Acc])
	  %% Line 2024
	  <[I|Left],Info,LookupFun,Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 2026
		  case I of
		    %% Line 2027
		    <{'icode_call',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			%% Line 2028
			apply 'do_safe_call'/3
			    (I, Info, LookupFun)
		    %% Line 2029
		    <_cor31> when 'true' ->
			%% Line 2030
			apply 'analyse_insn'/3
			    (I, Info, LookupFun)
		  end
	      in  let <NewI> =
		      %% Line 2032
		      apply 'annotate_instr'/3
			  (I, _cor9, Info)
		  in  %% Line 2033
		      apply 'annotate_instr_list'/4
			  (Left, _cor9, LookupFun, [NewI|Acc])
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'annotate_instr_list',4}}] )
	    -| ['compiler_generated'] )
	end
'annotate_instr'/3 =
    %% Line 2035
    fun (_cor2,_cor1,_cor0) ->
	let <Def> =
	    %% Line 2036
	    apply 'defines'/1
		(_cor2)
	in  let <Use> =
		%% Line 2037
		apply 'uses'/1
		    (_cor2)
	    in  let <Fun> =
		    %% Line 2038
		    call 'erlang':'make_fun'
			('hipe_icode', 'annotate_variable', 2)
		in  let <_cor12> =
			%% Line 2039
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[X|_cor7]> when 'true' ->
					    let <_cor9> =
						apply 'make_annotation'/2
						    (X, _cor1)
					    in  let <_cor10> =
						    apply Fun
							(X, _cor9)
						in  let <_cor11> =
							apply 'lc$^0'/1
							    (_cor7)
						    in  ( [{X,_cor10}|_cor11]
							  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor8> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Def)
			  -| ['list_comprehension'] )
		    in  let <_cor20> =
			    %% Line 2040
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor16) ->
					  case _cor16 of
					    <[X|_cor15]> when 'true' ->
						let <_cor17> =
						    apply 'make_annotation'/2
							(X, _cor0)
						in  let <_cor18> =
							apply Fun
							    (X, _cor17)
						    in  let <_cor19> =
							    apply 'lc$^1'/1
								(_cor15)
							in  ( [{X,_cor18}|_cor19]
							      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor16> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor16})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (Use)
			      -| ['list_comprehension'] )
			in  %% Line 2041
			    case call 'erlang':'++'
				     (_cor12, _cor20) of
			      %% Line 2042
			      <[]> when 'true' ->
				  _cor2
			      %% Line 2044
			      <Subst> when 'true' ->
				  %% Line 2045
				  call 'hipe_icode':'subst'
				      (Subst, _cor2)
			    end
'make_annotation'/2 =
    %% Line 2048
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2049
	    apply 'safe_lookup'/2
		(_cor1, _cor0)
	in  let <_cor2> =
		%% Line 2049
		call 'erlang':'make_fun'
		    ('erl_types', 't_to_string', 1)
	    in  %% Line 2049
		{'type_anno',_cor3,_cor2}
'unannotate_cfg'/1 =
    %% Line 2053
    fun (_cor0) ->
	let <NewCfg> =
	    %% Line 2054
	    apply 'unannotate_params'/1
		(_cor0)
	in  let <Labels> =
		%% Line 2055
		call 'hipe_icode_cfg':'labels'
		    (NewCfg)
	    in  %% Line 2056
		apply 'unannotate_bbs'/2
		    (Labels, NewCfg)
'unannotate_params'/1 =
    %% Line 2058
    fun (_cor0) ->
	let <Params> =
	    %% Line 2059
	    call 'hipe_icode_cfg':'params'
		(_cor0)
	in  let <_cor8> =
		%% Line 2060
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[%% Line 2061
				  X|_cor3]> when 'true' ->
				    %% Line 2061
				    ( case call 'hipe_icode':'is_variable'
					       (X) of
					<'true'> when 'true' ->
					    let <_cor5> =
						call 'hipe_icode':'unannotate_variable'
						    (X)
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [_cor5|_cor6]
						      -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (%% Line 2061
			   Params)
		  -| ['list_comprehension'] )
	    in  %% Line 2062
		call 'hipe_icode_cfg':'params_update'
		    (_cor0, _cor8)
'unannotate_bbs'/2 =
    %% Line 2064
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Label|Left],Cfg> when 'true' ->
	      let <BB> =
		  %% Line 2065
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Label)
	      in  let <Code> =
		      %% Line 2066
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <NewCode> =
			  %% Line 2067
			  apply 'unannotate_instr_list'/2
			      (Code, [])
		      in  let <NewBB> =
			      %% Line 2068
			      call 'hipe_bb':'code_update'
				  (BB, NewCode)
			  in  let <NewCfg> =
				  %% Line 2069
				  call 'hipe_icode_cfg':'bb_add'
				      (Cfg, Label, NewBB)
			      in  %% Line 2070
				  apply 'unannotate_bbs'/2
				      (Left, NewCfg)
	  %% Line 2071
	  <[],Cfg> when 'true' ->
	      %% Line 2072
	      Cfg
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'unannotate_bbs',2}}] )
	    -| ['compiler_generated'] )
	end
'unannotate_instr_list'/2 =
    %% Line 2074
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Left],Acc> when 'true' ->
	      let <NewI> =
		  %% Line 2075
		  apply 'unannotate_instr'/1
		      (I)
	      in  %% Line 2076
		  apply 'unannotate_instr_list'/2
		      (Left, [NewI|Acc])
	  %% Line 2077
	  <[],Acc> when 'true' ->
	      %% Line 2078
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'unannotate_instr_list',2}}] )
	    -| ['compiler_generated'] )
	end
'unannotate_instr'/1 =
    %% Line 2080
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2081
	    call 'hipe_icode':'defines'
		(_cor0)
	in  let <_cor1> =
		%% Line 2081
		call 'hipe_icode':'uses'
		    (_cor0)
	    in  let <DefUses> =
		    %% Line 2081
		    call 'erlang':'++'
			(_cor2, _cor1)
		in  let <_cor10> =
			%% Line 2082
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[X|_cor5]> when 'true' ->
					    %% Line 2083
					    ( case call 'hipe_icode':'is_variable'
						       (X) of
						<'true'> when 'true' ->
						    let <_cor7> =
							call 'hipe_icode':'unannotate_variable'
							    (X)
						    in  let <_cor8> =
							    apply 'lc$^0'/1
								(_cor5)
							in  ( [{X,_cor7}|_cor8]
							      -| ['compiler_generated'] )
						( <'false'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor5)
						  -| ['compiler_generated'] )
						( <_cor9> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor9})
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (DefUses)
			  -| ['list_comprehension'] )
		    in  %% Line 2084
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (_cor10,
				     []) ->
			      _cor0
			  %% Line 2085
			  <> when 'true' ->
			      call 'hipe_icode':'subst'
				  (_cor10, _cor0)
			end
'update_call_arguments'/2 =
    %% Line 2093
    fun (_cor1,_cor0) ->
	let <Args> =
	    %% Line 2094
	    call 'hipe_icode':'call_args'
		(_cor1)
	in  let <ArgTypes> =
		%% Line 2095
		apply 'lookup_list'/2
		    (Args, _cor0)
	    in  let <_cor5> =
		    %% Line 2096
		    call 'hipe_icode':'call_fun'
			(_cor1)
		in  let <_cor4> =
			%% Line 2096
			call 'erlang':'length'
			    (Args)
		    in  let <Signature> =
			    %% Line 2096
			    apply 'find_signature'/2
				(_cor5, _cor4)
			in  %% Line 2097
			    case call 'erl_types':'t_fun_args'
				     (Signature) of
			      %% Line 2098
			      <'unknown'> when 'true' ->
				  _cor0
			      %% Line 2100
			      <PltArgTypes> when 'true' ->
				  let <NewArgTypes> =
				      %% Line 2101
				      call 'erl_types':'t_inf_lists'
					  (ArgTypes, PltArgTypes)
				  in  %% Line 2102
				      apply 'enter_list'/3
					  (Args, NewArgTypes, _cor0)
			    end
'find_signature'/2 =
    %% Line 2110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA = {_cor4,_cor5,_cor6},_cor7> when 'true' ->
	      apply 'find_signature_mfa'/1
		  (MFA)
	  %% Line 2111
	  <Primop,Arity> when 'true' ->
	      apply 'find_signature_primop'/2
		  (Primop, Arity)
	end
'find_signature_mfa'/1 =
    %% Line 2113
    fun (_cor0) ->
	%% Line 2114
	case apply 'get_mfa_arg_types'/1
		 (_cor0) of
	  %% Line 2115
	  <'any'> when 'true' ->
	      let <_cor1> =
		  %% Line 2116
		  apply 'get_mfa_type'/1
		      (_cor0)
	      in  %% Line 2116
		  call 'erl_types':'t_fun'
		      (_cor1)
	  %% Line 2117
	  <BifArgs> when 'true' ->
	      let <_cor2> =
		  %% Line 2118
		  apply 'get_mfa_type'/1
		      (_cor0)
	      in  %% Line 2118
		  call 'erl_types':'t_fun'
		      (BifArgs, _cor2)
	end
'find_signature_primop'/2 =
    %% Line 2121
    fun (_cor1,_cor0) ->
	%% Line 2122
	case apply 'get_primop_arg_types'/1
		 (_cor1) of
	  %% Line 2123
	  <'any'> when 'true' ->
	      let <_cor2> =
		  %% Line 2124
		  apply 'get_primop_type'/1
		      (_cor1)
	      in  %% Line 2124
		  call 'erl_types':'t_fun'
		      (_cor0, _cor2)
	  %% Line 2125
	  <ArgTypes> when 'true' ->
	      let <_cor3> =
		  %% Line 2126
		  apply 'get_primop_type'/1
		      (_cor1)
	      in  %% Line 2126
		  call 'erl_types':'t_fun'
		      (ArgTypes, _cor3)
	end
'get_primop_arg_types'/1 =
    %% Line 2129
    fun (_cor0) ->
	%% Line 2130
	case call 'hipe_icode_primops':'arg_types'
		 (_cor0) of
	  %% Line 2131
	  <'unknown'> when 'true' ->
	      'any'
	  %% Line 2132
	  <ArgTypes> when 'true' ->
	      apply 'add_tuple_to_args'/1
		  (ArgTypes)
	end
'get_mfa_arg_types'/1 =
    %% Line 2135
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}> when 'true' ->
	      %% Line 2136
	      case call 'erl_bif_types':'arg_types'
		       (M, F, A) of
		%% Line 2137
		<'unknown'> when 'true' ->
		    %% Line 2138
		    'any'
		%% Line 2139
		<BifArgs> when 'true' ->
		    %% Line 2140
		    apply 'add_tuple_to_args'/1
			(BifArgs)
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_mfa_arg_types',1}}] )
	    -| ['compiler_generated'] )
	end
'get_mfa_type'/1 =
    %% Line 2143
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}> when 'true' ->
	      %% Line 2144
	      call 'erl_bif_types':'type'
		  (M, F, A)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_mfa_type',1}}] )
	    -| ['compiler_generated'] )
	end
'get_primop_type'/1 =
    %% Line 2146
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2147
	    apply 'get_standard_primop'/1
		(_cor0)
	in  %% Line 2147
	    call 'hipe_icode_primops':'type'
		(_cor1)
'add_tuple_to_args'/1 =
    %% Line 2149
    fun (_cor0) ->
	%% Line 2150
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[T|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'add_tuple_to_type'/1
				    (T)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'add_tuple_to_type'/1 =
    %% Line 2152
    fun (_cor0) ->
	let <None> =
	    %% Line 2153
	    call 'erl_types':'t_none'
		()
	in  let <_cor2> =
		%% Line 2154
		call 'erl_types':'t_fun'
		    ()
	    in  %% Line 2154
		case call 'erl_types':'t_inf'
			 (_cor2, _cor0) of
		  %% Line 2155
		  <_cor8>
		      when call 'erlang':'=:='
			    (_cor8,
			     None) ->
		      _cor0
		  %% Line 2156
		  <_X_Other> when 'true' ->
		      let <_cor3> =
			  call 'erl_types':'t_atom'
			      ()
		      in  let <_cor4> =
			      call 'erl_types':'t_atom'
				  ()
			  in  let <_cor5> =
				  call 'erl_types':'t_tuple'
				      ([_cor3|[_cor4|[]]])
			      in  call 'erl_types':'t_sup'
				      (_cor0, _cor5)
		end
'add_funs_to_arg_types'/1 =
    %% Line 2159
    fun (_cor0) ->
	%% Line 2160
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[T|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'add_fun_to_arg_type'/1
				    (T)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'add_fun_to_arg_type'/1 =
    %% Line 2162
    fun (_cor0) ->
	let <None> =
	    %% Line 2163
	    call 'erl_types':'t_none'
		()
	in  let <_cor2> =
		%% Line 2164
		call 'erl_types':'t_atom'
		    ()
	    in  let <_cor3> =
		    %% Line 2164
		    call 'erl_types':'t_atom'
			()
		in  let <_cor4> =
			%% Line 2164
			call 'erl_types':'t_tuple'
			    ([_cor2|[_cor3|[]]])
		    in  %% Line 2164
			case call 'erl_types':'t_inf'
				 (_cor4, _cor0) of
			  %% Line 2165
			  <_cor8>
			      when call 'erlang':'=:='
				    (_cor8,
				     None) ->
			      _cor0
			  %% Line 2166
			  <_X_Other> when 'true' ->
			      let <_cor5> =
				  call 'erl_types':'t_fun'
				      ()
			      in  call 'erl_types':'t_sup'
				      (_cor0, _cor5)
			end
'replace_nones'/1 =
    %% Line 2176
    fun (_cor0) ->
	case _cor0 of
	  <Types>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 2177
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[T|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'replace_none'/1
					  (T)
				  in  let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor4|_cor5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Types)
		-| ['list_comprehension'] )
	  %% Line 2178
	  <Type> when 'true' ->
	      let <_cor6> =
		  %% Line 2179
		  apply 'replace_none'/1
		      (Type)
	      in  %% Line 2179
		  [_cor6|[]]
	end
'replace_none'/1 =
    %% Line 2183
    fun (_cor0) ->
	%% Line 2184
	case call 'erl_types':'t_is_none'
		 (_cor0) of
	  %% Line 2185
	  <'true'> when 'true' ->
	      %% Line 2186
	      call 'erl_types':'t_any'
		  ()
	  %% Line 2187
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'update__info'/2 =
    %% Line 2194
    fun (_cor1,_cor0) ->
	let <SupFun> =
	    %% Line 2196
	    ( fun (_cor4,_cor3) ->
		  let <_cor2> =
		      call 'erl_types':'t_sup'
			  (_cor4, _cor3)
		  in  call 'erl_types':'t_limit'
			  (_cor2, 3)
	      -| [{'id',{0,0,'-update__info/2-fun-0-'}}] )
	in  let <EqFun> =
		%% Line 2197
		call 'erlang':'make_fun'
		    ('erl_types', 't_is_equal', 2)
	    in  let <ResTypes> =
		    %% Line 2198
		    call 'lists':'zipwith'
			(SupFun, _cor1, _cor0)
		in  let <Change> =
			%% Line 2199
			call 'lists':'zipwith'
			    (EqFun, ResTypes, _cor0)
		    in  let <_cor13> =
			    %% Line 2200
			    ( fun (_cor11) ->
				  _cor11
			      -| [{'id',{0,0,'-update__info/2-fun-1-'}}] )
			in  let <_cor14> =
				%% Line 2200
				call 'lists':'all'
				    (_cor13, Change)
			    in  %% Line 2200
				{_cor14,ResTypes}
'new__info'/1 =
    %% Line 2204
    fun (_cor0) ->
	%% Line 2205
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[T|_cor2]> when 'true' ->
			    let <_cor4> =
				call 'erl_types':'t_limit'
				    (T, 3)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'return__info'/1 =
    %% Line 2209
    fun (_cor0) ->
	_cor0
'return_none'/0 =
    %% Line 2214
    fun () ->
	let <_cor0> =
	    %% Line 2215
	    call 'erl_types':'t_none'
		()
	in  %% Line 2215
	    [_cor0|[]]
'return_none_args'/2 =
    %% Line 2219
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{_X_M,_X_F,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 2221
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 2222
		    <'true'> when 'true' ->
			let <_cor2> =
			    call 'hipe_icode_cfg':'closure_arity'
				(Cfg)
			in  call 'erlang':'-'
				(_cor2, 1)
		    %% Line 2223
		    <'false'> when 'true' ->
			A
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 2225
		      call 'erl_types':'t_none'
			  ()
		  in  %% Line 2225
		      call 'lists':'duplicate'
			  (_cor4, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'return_none_args',2}}] )
	    -| ['compiler_generated'] )
	end
'return_any_args'/2 =
    %% Line 2229
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{_X_M,_X_F,A}> when 'true' ->
	      let <_cor3> =
		  %% Line 2231
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 2232
		    <'true'> when 'true' ->
			call 'hipe_icode_cfg':'closure_arity'
			    (Cfg)
		    %% Line 2233
		    <'false'> when 'true' ->
			A
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 2235
		      call 'erl_types':'t_any'
			  ()
		  in  %% Line 2235
		      call 'lists':'duplicate'
			  (_cor3, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'return_any_args',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_type')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_type', _cor0)
end