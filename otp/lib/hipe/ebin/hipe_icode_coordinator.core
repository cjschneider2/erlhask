module 'hipe_icode_coordinator' ['coordinate'/4,
				 'module_info'/0,
				 'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'coordinate',4},[{'type',39,'fun',[{'type',39,'product',[{'remote_type',39,[{'atom',39,'hipe_digraph'}|[{'atom',39,'hdg'}|[[]]]]}|[{'type',39,'list',[{'type',39,'mfa',[]}]}|[{'type',39,'list',[{'type',39,'mfa',[]}]}|[{'type',39,'module',[]}]]]]}|[{'type',40,'no_return',[]}]]}]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'mfalists',{'type',50,'tuple',[{'type',50,'list',[{'type',50,'mfa',[]}]}|[{'type',50,'list',[{'type',50,'mfa',[]}]}]]},[]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'coordinate',6},[{'type',52,'fun',[{'type',52,'product',[{'type',52,'mfalists',[]}|[{'remote_type',52,[{'atom',52,'hipe_digraph'}|[{'atom',52,'hdg'}|[[]]]]}|[{'remote_type',52,[{'atom',52,'gb_trees'}|[{'atom',52,'tree'}|[[]]]]}|[{'type',53,'fun',[{'type',53,'product',[{'type',53,'mfalists',[]}|[{'remote_type',53,[{'atom',53,'gb_trees'}|[{'atom',53,'tree'}|[[]]]]}]]}|[{'type',53,'mfalists',[]}]]}|[{'type',54,'fun',[{'type',54,'product',[{'remote_type',54,[{'atom',54,'gb_trees'}|[{'atom',54,'tree'}|[[]]]]}]}|[{'atom',54,'ok'}]]}|[{'type',54,'pid',[]}]]]]]]}|[{'type',54,'no_return',[]}]]}]}]]
'coordinate'/4 =
    %% Line 42
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ServerPid> =
	    %% Line 43
	    apply 'initialize_server'/2
		(_cor2, _cor0)
	in  let <_cor5> =
		%% Line 44
		call 'erlang':'++'
		    (_cor2, _cor1)
	    in  let <All> =
		    %% Line 44
		    call 'ordsets':'from_list'
			(_cor5)
		in  let <Restart> =
			%% Line 45
			( fun (_cor8,_cor7) ->
			      apply 'restart_funs'/4
				  (_cor8, _cor7, All, ServerPid)
			  -| [{'id',{0,0,'-coordinate/4-fun-0-'}}] )
		    in  let <LastAction> =
			    %% Line 46
			    ( fun (_cor12) ->
				  apply 'last_action'/4
				      (_cor12, ServerPid, _cor0, All)
			      -| [{'id',{0,0,'-coordinate/4-fun-1-'}}] )
			in  let <MFALists> = {_cor2,%% Line 47
				       All}
			    in  let <_cor16> =
				    %% Line 48
				    call 'gb_trees':'empty'
					()
				in  %% Line 48
				    apply 'coordinate'/6
					(MFALists, _cor3, _cor16, Restart, LastAction, ServerPid)
'coordinate'/6 =
    %% Line 56
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 57
	    case _cor5 of
	      %% Line 58
	      <{[],[]}> when 'true' ->
		  do  %% Line 59
		      apply _cor1
			  (_cor3)
		      do  %% Line 60
			  call 'erlang':'!'
			      (_cor0, 'stop')
			  %% Line 61
			  receive
			    %% Line 62
			    <{'stop',Ans2Pid}> when 'true' ->
				let <_cor6> =
				    %% Line 63
				    call 'erlang':'self'
					()
				in  do  %% Line 63
					call 'erlang':'!'
					    (Ans2Pid, {'done',_cor6})
					%% Line 64
					call 'erlang':'exit'
					    ('normal')
			  after 'infinity' ->
			    'ok'
	      %% Line 66
	      <_cor22> when 'true' ->
		  'ok'
	    end
	    %% Line 68
	    receive
	      %% Line 69
	      <{'stop',AnsPid}> when 'true' ->
		  do  %% Line 70
		      call 'erlang':'!'
			  (_cor0, 'stop')
		      let <_cor8> =
			  %% Line 71
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 71
			      call 'erlang':'!'
				  (AnsPid, {'done',_cor8})
			      %% Line 72
			      call 'erlang':'exit'
				  ('normal')
	      %% Line 73
	      <Message> when 'true' ->
		  let <_cor13> =
		      %% Line 75
		      case Message of
			%% Line 76
			<{'restart_call',MFA}> when 'true' ->
			    let <_cor9> =
				%% Line 77
				apply 'handle_restart_call'/2
				    (MFA, _cor5)
			    in  %% Line 77
				{_cor3,_cor9}
			%% Line 78
			<{'ready',{MFA,Pid}}> when 'true' ->
			    %% Line 79
			    apply 'handle_ready'/4
				(MFA, Pid, _cor5, _cor3)
			%% Line 80
			<{'restart_done',MFA}> when 'true' ->
			    let <_cor10> =
				%% Line 81
				apply 'handle_restart_done'/3
				    (MFA, _cor5, _cor4)
			    in  %% Line 81
				{_cor3,_cor10}
			%% Line 82
			<{'no_change_done',MFA}> when 'true' ->
			    let <_cor11> =
				%% Line 83
				apply 'handle_no_change_done'/2
				    (MFA, _cor5)
			    in  %% Line 83
				{_cor3,_cor11}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 74
		      case _cor13 of
			<{NewPM,NewMFALists}> when 'true' ->
			    let <_cor15> =
				%% Line 85
				apply _cor2
				    (NewMFALists, NewPM)
			    in  %% Line 85
				apply 'coordinate'/6
				    (_cor15, _cor4, NewPM, _cor2, _cor1, _cor0)
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor14})
			  -| ['compiler_generated'] )
		      end
	    after 'infinity' ->
	      'true'
'handle_restart_call'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,QB = {Queue,Busy}> when 'true' ->
	      %% Line 90
	      case call 'lists':'member'
		       (MFA, Queue) of
		%% Line 91
		<'true'> when 'true' ->
		    %% Line 92
		    QB
		%% Line 93
		<'false'> when 'true' ->
		    %% Line 94
		    {[MFA|Queue],Busy}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'handle_restart_call',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_ready'/4 =
    %% Line 97
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <MFA,Pid,{Queue,Busy},PM> when 'true' ->
	      let <_cor5> =
		  %% Line 98
		  call 'gb_trees':'insert'
		      (MFA, Pid, PM)
	      in  let <_cor4> =
		      %% Line 98
		      call 'erlang':'--'
			  (Busy, [MFA|[]])
		  in  %% Line 98
		      {_cor5,{Queue,_cor4}}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'handle_ready',4}}] )
	    -| ['compiler_generated'] )
	end
'handle_restart_done'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MFA,{Queue,Busy},CG> when 'true' ->
	      let <Restarts> =
		  %% Line 101
		  call 'hipe_digraph':'get_parents'
		      (MFA, CG)
	      in  let <_cor5> =
		      %% Line 102
		      call 'erlang':'++'
			  (Restarts, Queue)
		  in  let <_cor6> =
			  %% Line 102
			  call 'ordsets':'from_list'
			      (_cor5)
		      in  let <_cor4> =
			      %% Line 102
			      call 'erlang':'--'
				  (Busy, [MFA|[]])
			  in  %% Line 102
			      {_cor6,_cor4}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'handle_restart_done',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_no_change_done'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,{Queue,Busy}> when 'true' ->
	      let <_cor2> =
		  %% Line 105
		  call 'erlang':'--'
		      (Busy, [MFA|[]])
	      in  %% Line 105
		  {Queue,_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'handle_no_change_done',2}}] )
	    -| ['compiler_generated'] )
	end
'last_action'/4 =
    %% Line 107
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 108
	    ( fun (_cor6) ->
		  let <_cor5> =
		      %% Line 109
		      call 'gb_trees':'get'
			  (_cor6, _cor3)
		  in  let <_cor4> =
			  %% Line 109
			  apply 'final_funs'/2
			      (_cor2, _cor1)
		      in  do  %% Line 109
			      call 'erlang':'!'
				  (_cor5, {'done',_cor4})
			      %% Line 110
			      receive
				%% Line 111
				<{'done_rewrite',_cor13}>
				    when call 'erlang':'=:='
					  (_cor13,
					   _cor6) ->
				    'ok'
			      after 'infinity' ->
				'true'
	      -| [{'id',{0,0,'-last_action/4-fun-0-'}}] )
	in  %% Line 108
	    call 'lists':'foreach'
		(_cor8, _cor0)
'restart_funs'/4 =
    %% Line 115
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <QB = {Queue,Busy},PM,All,ServerPid> when 'true' ->
	      let <_cor5> =
		  %% Line 116
		  call 'erlang':'system_info'
		      ('schedulers')
	      in  let <_cor4> =
		      %% Line 116
		      call 'erlang':'length'
			  (Busy)
		  in  %% Line 116
		      case call 'erlang':'-'
			       (_cor5, _cor4) of
			%% Line 117
			<X>
			    when let <_cor6> =
				  call 'erlang':'is_integer'
				      (X)
			      in  let <_cor7> =
				      call 'erlang':'>'
					  (X, 0)
				  in  call 'erlang':'and'
					  (_cor6, _cor7) ->
			    let <_cor14> =
				%% Line 118
				( letrec
				      'lc$^0'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[Pos|_cor9]> when 'true' ->
						    ( case call 'lists':'member'
							       (Pos, Busy) of
							<'false'> when 'true' ->
							    let <_cor12> =
								apply 'lc$^0'/1
								    (_cor9)
							    in  ( [Pos|_cor12]
								  -| ['compiler_generated'] )
							( <'true'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor9)
							  -| ['compiler_generated'] )
							( <_cor_variable> when 'true' ->
							      call 'erlang':'error'
								  ('badarg')
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Queue)
				  -| ['list_comprehension'] )
			    in  let <Restarts> =
				    %% Line 119
				    call 'lists':'sublist'
					(_cor14, X)
				in  let <_cor19> =
					%% Line 120
					( fun (_cor17) ->
					      %% Line 121
					      apply 'restart_fun'/4
						  (_cor17, PM, All, ServerPid)
					  -| [{'id',{0,0,'-restart_funs/4-fun-0-'}}] )
				    in  do  %% Line 120
					    call 'lists':'foreach'
						(_cor19, %% Line 122
							 Restarts)
					    let <_cor21> =
						%% Line 123
						call 'erlang':'--'
						    (Queue, Restarts)
					    in  let <_cor20> =
						    %% Line 123
						    call 'erlang':'++'
							(Busy, Restarts)
						in  %% Line 123
						    {_cor21,_cor20}
			%% Line 124
			<X>
			    when call 'erlang':'is_integer'
				  (X) ->
			    %% Line 125
			    QB
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'restart_funs',4}}] )
	    -| ['compiler_generated'] )
	end
'initialize_server'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 129
	    ( fun () ->
		  apply 'info_server'/1
		      (_cor0)
	      -| [{'id',{0,0,'-initialize_server/2-fun-0-'}}] )
	in  let <Pid> =
		%% Line 129
		call 'erlang':'spawn_link'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 130
		    ( fun (_cor4) ->
			  call 'erlang':'!'
			      (Pid, {'set_escaping',_cor4})
		      -| [{'id',{0,0,'-initialize_server/2-fun-1-'}}] )
		in  do  %% Line 130
			call 'lists':'foreach'
			    (_cor6, _cor1)
			%% Line 131
			Pid
'safe_get_args'/4 =
    %% Line 133
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 134
	    apply 'get_args'/3
		(_cor3, _cor2, _cor1)
	in  %% Line 134
	    call _cor0:'replace_nones'
		(_cor4)
'get_args'/3 =
    %% Line 136
    fun (_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 137
	    call 'erlang':'make_ref'
		()
	in  let <_cor4> =
		%% Line 138
		call 'erlang':'self'
		    ()
	    in  do  %% Line 138
		    call 'erlang':'!'
			(_cor0, {'get_call',_cor2,_cor1,_cor4,Ref})
		    %% Line 139
		    receive
		      %% Line 140
		      <{_cor8,Types}>
			  when call 'erlang':'=:='
				(_cor8,
				 Ref) ->
			  %% Line 141
			  Types
		    after 'infinity' ->
		      'true'
'safe_get_res'/3 =
    %% Line 144
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 145
	    apply 'get_res'/2
		(_cor2, _cor1)
	in  %% Line 145
	    call _cor0:'replace_nones'
		(_cor3)
'get_res'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 148
	    call 'erlang':'make_ref'
		()
	in  let <_cor3> =
		%% Line 149
		call 'erlang':'self'
		    ()
	    in  do  %% Line 149
		    call 'erlang':'!'
			(_cor0, {'get_return',_cor1,_cor3,Ref})
		    %% Line 150
		    receive
		      %% Line 151
		      <{_cor6,Types}>
			  when call 'erlang':'=:='
				(_cor6,
				 Ref) ->
			  %% Line 152
			  Types
		    after 'infinity' ->
		      'true'
'update_return_type'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 156
	    call 'erlang':'make_ref'
		()
	in  let <_cor4> =
		%% Line 157
		call 'erlang':'self'
		    ()
	    in  do  %% Line 157
		    call 'erlang':'!'
			(_cor0, {'update_return',_cor2,_cor1,_cor4,Ref})
		    %% Line 158
		    receive
		      %% Line 159
		      <{_cor8,Ans}>
			  when call 'erlang':'=:='
				(_cor8,
				 Ref) ->
			  %% Line 160
			  Ans
		    after 'infinity' ->
		      'true'
'update_call_type'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 164
	    call 'erlang':'make_ref'
		()
	in  let <_cor4> =
		%% Line 165
		call 'erlang':'self'
		    ()
	    in  do  %% Line 165
		    call 'erlang':'!'
			(_cor0, {'update_call',_cor2,_cor1,_cor4,Ref})
		    %% Line 166
		    receive
		      %% Line 167
		      <{_cor8,Ans}>
			  when call 'erlang':'=:='
				(_cor8,
				 Ref) ->
			  %% Line 168
			  Ans
		    after 'infinity' ->
		      'true'
'restart_fun'/4 =
    %% Line 171
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 172
	    call 'gb_trees':'get'
		(_cor3, _cor2)
	in  let <_cor4> =
		%% Line 172
		apply 'analysis_funs'/2
		    (_cor1, _cor0)
	    in  do  %% Line 172
		    call 'erlang':'!'
			(_cor5, {'analyse',_cor4})
		    %% Line 173
		    'ok'
'analysis_funs'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	let <Self> =
	    %% Line 176
	    call 'erlang':'self'
		()
	in  let <ArgsFun> =
		%% Line 177
		( fun (_cor4,_cor3) ->
		      apply 'get_args'/3
			  (_cor4, _cor3, _cor0)
		  -| [{'id',{0,0,'-analysis_funs/2-fun-0-'}}] )
	    in  let <GetResFun> =
		    %% Line 178
		    ( fun (_cor12,_cor11) ->
			  do  %% Line 179
			      case call 'lists':'member'
				       (_cor12, _cor1) of
				%% Line 180
				<'true'> when 'true' ->
				    %% Line 181
				    case apply 'update_call_type'/3
					     (_cor12, _cor11, _cor0) of
				      %% Line 182
				      <'do_restart'> when 'true' ->
					  do  %% Line 183
					      call 'erlang':'!'
						  (Self, {'restart_call',_cor12})
					      'ok'
				      %% Line 185
				      <'no_change'> when 'true' ->
					  'ok'
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor8})
					-| ['compiler_generated'] )
				    end
				%% Line 188
				<'false'> when 'true' ->
				    'ok'
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			      %% Line 191
			      case apply 'get_res'/2
				       (_cor12, _cor0) of
				<[Ans|[]]> when 'true' ->
				    %% Line 192
				    Ans
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor10})
				  -| ['compiler_generated'] )
			      end
		      -| [{'id',{0,0,'-analysis_funs/2-fun-1-'}}] )
		in  let <FinalFun> =
			%% Line 194
			( fun (_cor18,_cor17) ->
			      %% Line 195
			      case apply 'update_return_type'/3
				       (_cor18, _cor17, _cor0) of
				%% Line 196
				<'do_restart'> when 'true' ->
				    do  %% Line 197
					call 'erlang':'!'
					    (Self, {'restart_done',_cor18})
					%% Line 198
					'ok'
				%% Line 199
				<'no_change'> when 'true' ->
				    do  %% Line 200
					call 'erlang':'!'
					    (Self, {'no_change_done',_cor18})
					%% Line 201
					'ok'
				( <_cor16> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor16})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-analysis_funs/2-fun-2-'}}] )
		    in  %% Line 204
			{ArgsFun,GetResFun,FinalFun}
'final_funs'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	let <ArgsFun> =
	    %% Line 207
	    ( fun (_cor3,_cor2) ->
		  apply 'safe_get_args'/4
		      (_cor3, _cor2, _cor1, _cor0)
	      -| [{'id',{0,0,'-final_funs/2-fun-0-'}}] )
	in  let <GetResFun> =
		%% Line 208
		( fun (_cor9,_cor8) ->
		      %% Line 209
		      case apply 'safe_get_res'/3
			       (_cor9, _cor1, _cor0) of
			<[Ans|[]]> when 'true' ->
			    %% Line 210
			    Ans
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-final_funs/2-fun-1-'}}] )
	    in  let <FinalFun> =
		    %% Line 212
		    ( fun (_cor14,_cor13) ->
			  'ok'
		      -| [{'id',{0,0,'-final_funs/2-fun-2-'}}] )
		in  %% Line 213
		    {ArgsFun,GetResFun,FinalFun}
'info_server'/1 =
    %% Line 215
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 216
	    call 'gb_trees':'empty'
		()
	in  let <_cor1> =
		%% Line 216
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 216
		apply 'info_server_loop'/3
		    (_cor2, _cor1, _cor0)
'info_server_loop'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	%% Line 219
	receive
	  %% Line 220
	  <{'update_return',MFA,NewInfo,Pid,Ref}> when 'true' ->
	      let <NewReturnInfo> =
		  %% Line 221
		  apply 'handle_update'/6
		      (MFA, _cor1, NewInfo, Pid, Ref, _cor0)
	      in  %% Line 222
		  apply 'info_server_loop'/3
		      (_cor2, NewReturnInfo, _cor0)
	  %% Line 223
	  <{'update_call',MFA,NewInfo,Pid,Ref}> when 'true' ->
	      let <NewCallInfo> =
		  %% Line 224
		  apply 'handle_update'/6
		      (MFA, _cor2, NewInfo, Pid, Ref, _cor0)
	      in  %% Line 225
		  apply 'info_server_loop'/3
		      (NewCallInfo, _cor1, _cor0)
	  %% Line 226
	  <{'get_return',MFA,Pid,Ref}> when 'true' ->
	      let <_cor6> =
		  %% Line 228
		  case call 'gb_trees':'lookup'
			   (MFA, _cor1) of
		    %% Line 229
		    <'none'> when 'true' ->
			%% Line 230
			call _cor0:'return_none'
			    ()
		    %% Line 231
		    <{'value',TypesComp}> when 'true' ->
			%% Line 232
			call _cor0:'return__info'
			    (TypesComp)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 234
		      call 'erlang':'!'
			  (Pid, {Ref,_cor6})
		      %% Line 235
		      apply 'info_server_loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 236
	  <{'get_call',MFA,Cfg,Pid,Ref}> when 'true' ->
	      let <_cor9> =
		  %% Line 238
		  case call 'gb_trees':'lookup'
			   (MFA, _cor2) of
		    %% Line 239
		    <'none'> when 'true' ->
			%% Line 240
			call _cor0:'return_none_args'
			    (Cfg, MFA)
		    %% Line 241
		    <{'value','escaping'}> when 'true' ->
			%% Line 242
			call _cor0:'return_any_args'
			    (Cfg, MFA)
		    %% Line 243
		    <{'value',TypesComp}> when 'true' ->
			%% Line 244
			call _cor0:'return__info'
			    (TypesComp)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 246
		      call 'erlang':'!'
			  (Pid, {Ref,_cor9})
		      %% Line 247
		      apply 'info_server_loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 248
	  <{'set_escaping',MFA}> when 'true' ->
	      let <NewCallInfo> =
		  %% Line 249
		  call 'gb_trees':'enter'
		      (MFA, 'escaping', _cor2)
	      in  %% Line 250
		  apply 'info_server_loop'/3
		      (NewCallInfo, _cor1, _cor0)
	  %% Line 251
	  <'stop'> when 'true' ->
	      %% Line 252
	      'ok'
	after 'infinity' ->
	  'true'
'handle_update'/6 =
    %% Line 255
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 257
	    case call 'gb_trees':'lookup'
		     (_cor5, _cor4) of
	      %% Line 258
	      <'none'> when 'true' ->
		  do  %% Line 260
		      call 'erlang':'!'
			  (_cor2, {_cor1,'do_restart'})
		      %% Line 261
		      call _cor0:'new__info'
			  (_cor3)
	      %% Line 262
	      <{'value','escaping'}> when 'true' ->
		  do  %% Line 263
		      call 'erlang':'!'
			  (_cor2, {_cor1,'no_change'})
		      %% Line 264
		      'escaping'
	      %% Line 265
	      <{'value',OldInfo}> when 'true' ->
		  %% Line 268
		  case call _cor0:'update__info'
			   (_cor3, OldInfo) of
		    %% Line 269
		    <{'true',Type}> when 'true' ->
			do  %% Line 270
			    call 'erlang':'!'
				(_cor2, {_cor1,'no_change'})
			    %% Line 271
			    Type
		    %% Line 272
		    <{'false',Type}> when 'true' ->
			do  %% Line 273
			    call 'erlang':'!'
				(_cor2, {_cor1,'do_restart'})
			    %% Line 274
			    Type
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	in  %% Line 277
	    call 'gb_trees':'enter'
		(_cor5, _cor8, _cor4)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_coordinator')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_coordinator', _cor0)
end