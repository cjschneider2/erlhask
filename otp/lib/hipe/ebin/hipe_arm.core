module 'hipe_arm' ['defun_code'/1,
		   'defun_data'/1,
		   'defun_formals'/1,
		   'defun_is_closure'/1,
		   'defun_is_leaf'/1,
		   'defun_mfa'/1,
		   'defun_var_range'/1,
		   'is_label'/1,
		   'is_prim'/1,
		   'is_pseudo_move'/1,
		   'is_temp'/1,
		   'label_label'/1,
		   'mk_addi'/4,
		   'mk_alu'/5,
		   'mk_am2'/3,
		   'mk_am3'/3,
		   'mk_b_fun'/2,
		   'mk_b_label'/1,
		   'mk_b_label'/2,
		   'mk_bl'/3,
		   'mk_blx'/2,
		   'mk_bx'/1,
		   'mk_cmp'/3,
		   'mk_comment'/1,
		   'mk_defun'/8,
		   'mk_label'/1,
		   'mk_ldrsb'/2,
		   'mk_li'/2,
		   'mk_li'/3,
		   'mk_load'/3,
		   'mk_load'/6,
		   'mk_lr'/0,
		   'mk_mfa'/3,
		   'mk_mflr'/1,
		   'mk_move'/2,
		   'mk_move'/3,
		   'mk_mtlr'/1,
		   'mk_new_nonallocatable_temp'/1,
		   'mk_new_temp'/1,
		   'mk_pc'/0,
		   'mk_prim'/1,
		   'mk_pseudo_bc'/4,
		   'mk_pseudo_blr'/0,
		   'mk_pseudo_call'/4,
		   'mk_pseudo_call_prepare'/1,
		   'mk_pseudo_li'/2,
		   'mk_pseudo_move'/2,
		   'mk_pseudo_switch'/3,
		   'mk_pseudo_tailcall'/4,
		   'mk_pseudo_tailcall_prepare'/0,
		   'mk_sdesc'/4,
		   'mk_smull'/4,
		   'mk_store'/3,
		   'mk_store'/6,
		   'mk_temp'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'prim_prim'/1,
		   'pseudo_call_contlab'/1,
		   'pseudo_call_funv'/1,
		   'pseudo_call_linkage'/1,
		   'pseudo_call_prepare_nrstkargs'/1,
		   'pseudo_call_sdesc'/1,
		   'pseudo_move_dst'/1,
		   'pseudo_move_src'/1,
		   'pseudo_tailcall_funv'/1,
		   'pseudo_tailcall_linkage'/1,
		   'pseudo_tailcall_stkargs'/1,
		   'temp_is_allocatable'/1,
		   'temp_is_precoloured'/1,
		   'temp_reg'/1,
		   'temp_type'/1,
		   'try_aluop_imm'/2]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}]]
'mk_temp'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	%% Line 129
	{'arm_temp',_cor2,_cor1,_cor0}
'mk_temp'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	apply 'mk_temp'/3
	    (_cor1, _cor0, 'true')
'mk_new_temp'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 132
	    call 'hipe_gensym':'get_next_var'
		('arm')
	in  %% Line 132
	    apply 'mk_temp'/3
		(_cor2, _cor1, _cor0)
'mk_new_temp'/1 =
    %% Line 133
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'true')
'mk_new_nonallocatable_temp'/1 =
    %% Line 134
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'false')
'is_temp'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',_cor3,_cor4,_cor5}> when 'true' ->
	      'true'
	  <_cor6> when 'true' ->
	      'false'
	end
'temp_reg'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',Reg,_cor2,_cor3}> when 'true' ->
	      Reg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_type'/1 =
    %% Line 137
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',_cor2,Type,_cor3}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_type',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_allocatable'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',_cor2,_cor3,A}> when 'true' ->
	      A
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_is_allocatable',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_precoloured'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_temp',Reg,_cor2,_cor3}> when 'true' ->
	      %% Line 140
	      call 'hipe_arm_registers':'is_precoloured_gpr'
		  (Reg)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_is_precoloured',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_mfa'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	{'arm_mfa',_cor2,_cor1,_cor0}
'mk_prim'/1 =
    %% Line 144
    fun (_cor0) ->
	{'arm_prim',_cor0}
'is_prim'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_prim',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'prim_prim'/1 =
    %% Line 146
    fun (_cor0) ->
	case _cor0 of
	  <{'arm_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'prim_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_am2'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	{'am2',_cor2,_cor1,_cor0}
'mk_am3'/3 =
    %% Line 149
    fun (_cor2,_cor1,_cor0) ->
	{'am3',_cor2,_cor1,_cor0}
'mk_alu'/5 =
    %% Line 151
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 152
	{'alu',_cor4,_cor3,_cor2,_cor1,_cor0}
'mk_alu'/4 =
    %% Line 153
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'mk_alu'/5
	    (_cor3, 'false', _cor2, _cor1, _cor0)
'mk_b_fun'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	{'b_fun',_cor1,_cor0}
'mk_b_label'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	{'b_label',_cor1,_cor0}
'mk_b_label'/1 =
    %% Line 158
    fun (_cor0) ->
	apply 'mk_b_label'/2
	    ('al', _cor0)
'mk_bl'/3 =
    %% Line 160
    fun (_cor2,_cor1,_cor0) ->
	{'bl',_cor2,_cor1,_cor0}
'mk_blx'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	{'blx',_cor1,_cor0}
'mk_cmp'/3 =
    %% Line 164
    fun (_cor2,_cor1,_cor0) ->
	{'cmp',_cor2,_cor1,_cor0}
'mk_sdesc'/4 =
    %% Line 166
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 167
	{'arm_sdesc',_cor3,_cor2,_cor1,_cor0}
'mk_comment'/1 =
    %% Line 169
    fun (_cor0) ->
	{'comment',_cor0}
'mk_label'/1 =
    %% Line 171
    fun (_cor0) ->
	{'label',_cor0}
'is_label'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <{'label',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'label_label'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      Label
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'label_label',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_load'/3 =
    %% Line 175
    fun (_cor2,_cor1,_cor0) ->
	{'load',_cor2,_cor1,_cor0}
'mk_load'/6 =
    %% Line 177
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <LdOp,Dst,Base,Offset,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      let <Sign,AbsOffset> =
		  %% Line 179
		  case <> of
		    <>
			when call 'erlang':'<'
			      (Offset,
			       0) ->
			let <_cor6> =
			    call 'erlang':'-'
				(Offset)
			in  <'-',_cor6>
		    %% Line 180
		    <> when 'true' ->
			<'+',Offset>
		  end
	      in  %% Line 182
		  case <> of
		    <>
			when call 'erlang':'=<'
			      (AbsOffset,
			       4095) ->
			let <Am2> =
			    %% Line 183
			    {'am2',Base,Sign,AbsOffset}
			in  let <_cor10> =
				%% Line 184
				apply 'mk_load'/3
				    (LdOp, Dst, Am2)
			    in  %% Line 184
				[_cor10|Rest]
		    %% Line 185
		    <> when 'true' ->
			let <DstReg> =
			    %% Line 188
			    apply 'temp_reg'/1
				(Dst)
			in  let <BaseReg> =
				%% Line 189
				apply 'temp_reg'/1
				    (Base)
			    in  let <_cor13> =
				    %% Line 190
				    case <> of
				      <>
					  when call 'erlang':'=/='
						(DstReg,
						 BaseReg) ->
					  Dst
				      %% Line 191
				      <> when 'true' ->
					  apply 'mk_scratch'/1
					      (Scratch)
				    end
				in  let <Am2> =
					%% Line 194
					{'am2',Base,Sign,_cor13}
				    in  let <_cor16> =
					    %% Line 196
					    apply 'mk_load'/3
						(LdOp, Dst, Am2)
					in  %% Line 195
					    apply 'mk_li'/3
						(_cor13, AbsOffset, %% Line 196
								    [_cor16|Rest])
		  end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'mk_load',6}}] )
	    -| ['compiler_generated'] )
	end
'mk_scratch'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	case _cor0 of
	  %% Line 201
	  <'temp2'> when 'true' ->
	      let <_cor1> =
		  call 'hipe_arm_registers':'temp2'
		      ()
	      in  apply 'mk_temp'/2
		      (_cor1, 'untagged')
	  %% Line 202
	  <'new'> when 'true' ->
	      apply 'mk_new_temp'/1
		  ('untagged')
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'mk_ldrsb'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	{'ldrsb',_cor1,_cor0}
'mk_move'/4 =
    %% Line 207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	{'move',_cor3,_cor2,_cor1,_cor0}
'mk_move'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	apply 'mk_move'/4
	    ('mov', _cor2, _cor1, _cor0)
'mk_move'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	apply 'mk_move'/4
	    ('mov', 'false', _cor1, _cor0)
'mk_pseudo_bc'/4 =
    %% Line 211
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 212
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor0,
		     5.00000000000000000000e-01) ->
	      let <_cor5> =
		  %% Line 213
		  apply 'negate_cond'/1
		      (_cor3)
	      in  let <_cor4> =
		      %% Line 214
		      call 'erlang':'-'
			  (1.00000000000000000000e+00, _cor0)
		  in  %% Line 213
		      apply 'mk_pseudo_bc_simple'/4
			  (_cor5, _cor1, _cor2, _cor4)
	  %% Line 215
	  <> when 'true' ->
	      %% Line 216
	      apply 'mk_pseudo_bc_simple'/4
		  (_cor3, _cor2, _cor1, _cor0)
	end
'mk_pseudo_bc_simple'/4 =
    %% Line 219
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cond,TrueLab,FalseLab,Pred>
	      when call 'erlang':'=<'
		    (Pred,
		     5.00000000000000000000e-01) ->
	      %% Line 220
	      {'pseudo_bc',Cond,TrueLab,%% Line 221
					FalseLab,%% Line 221
						 Pred}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_pseudo_bc_simple',4}}] )
	    -| ['compiler_generated'] )
	end
'negate_cond'/1 =
    %% Line 223
    fun (_cor0) ->
	%% Line 224
	case _cor0 of
	  %% Line 225
	  <'lt'> when 'true' ->
	      'ge'
	  %% Line 226
	  <'ge'> when 'true' ->
	      'lt'
	  %% Line 227
	  <'gt'> when 'true' ->
	      'le'
	  %% Line 228
	  <'le'> when 'true' ->
	      'gt'
	  %% Line 229
	  <'eq'> when 'true' ->
	      'ne'
	  %% Line 230
	  <'ne'> when 'true' ->
	      'eq'
	  %% Line 231
	  <'hi'> when 'true' ->
	      'ls'
	  %% Line 232
	  <'ls'> when 'true' ->
	      'hi'
	  %% Line 233
	  <'hs'> when 'true' ->
	      'lo'
	  %% Line 234
	  <'lo'> when 'true' ->
	      'hs'
	  %% Line 235
	  <'vs'> when 'true' ->
	      'vc'
	  %% Line 236
	  <'vc'> when 'true' ->
	      'vs'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call'/4 =
    %% Line 239
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 240
	{'pseudo_call',_cor3,_cor2,_cor1,_cor0}
'pseudo_call_funv'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',FunV,_cor2,_cor3,_cor4}> when 'true' ->
	      FunV
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_funv',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_sdesc'/1 =
    %% Line 242
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,SDesc,_cor3,_cor4}> when 'true' ->
	      SDesc
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_sdesc',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_contlab'/1 =
    %% Line 243
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,ContLab,_cor4}> when 'true' ->
	      ContLab
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_contlab',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_linkage'/1 =
    %% Line 244
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call_prepare'/1 =
    %% Line 246
    fun (_cor0) ->
	%% Line 247
	{'pseudo_call_prepare',_cor0}
'pseudo_call_prepare_nrstkargs'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call_prepare',NrStkArgs}> when 'true' ->
	      %% Line 249
	      NrStkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_prepare_nrstkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_li'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 252
	    call 'hipe_gensym':'get_next_label'
		('arm')
	in  %% Line 252
	    {'pseudo_li',_cor1,_cor0,_cor2}
'mk_pseudo_move'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	{'pseudo_move',_cor1,_cor0}
'is_pseudo_move'/1 =
    %% Line 255
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor3,_cor4}> when 'true' ->
	      'true'
	  <_cor5> when 'true' ->
	      'false'
	end
'pseudo_move_dst'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',Dst,_cor2}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_move_src'/1 =
    %% Line 257
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor2,Src}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_src',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_switch'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	%% Line 260
	{'pseudo_switch',_cor2,_cor1,_cor0}
'mk_pseudo_tailcall'/4 =
    %% Line 262
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 263
	{'pseudo_tailcall',_cor3,_cor2,_cor1,_cor0}
'pseudo_tailcall_funv'/1 =
    %% Line 264
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',FunV,_cor2,_cor3,_cor4}> when 'true' ->
	      FunV
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_funv',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_stkargs'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,StkArgs,_cor4}> when 'true' ->
	      StkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_stkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_linkage'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_tailcall_prepare'/0 =
    %% Line 268
    fun () ->
	{'pseudo_tailcall_prepare'}
'mk_smull'/4 =
    %% Line 270
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 271
	{'smull',_cor3,_cor2,_cor1,_cor0}
'mk_store'/3 =
    %% Line 273
    fun (_cor2,_cor1,_cor0) ->
	{'store',_cor2,_cor1,_cor0}
'mk_store'/6 =
    %% Line 275
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <StOp,Src,Base,Offset,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      let <Sign,AbsOffset> =
		  %% Line 277
		  case <> of
		    <>
			when call 'erlang':'<'
			      (Offset,
			       0) ->
			let <_cor6> =
			    call 'erlang':'-'
				(Offset)
			in  <'-',_cor6>
		    %% Line 278
		    <> when 'true' ->
			<'+',Offset>
		  end
	      in  %% Line 280
		  case <> of
		    <>
			when call 'erlang':'=<'
			      (AbsOffset,
			       4095) ->
			let <Am2> =
			    %% Line 281
			    {'am2',Base,Sign,AbsOffset}
			in  let <_cor10> =
				%% Line 282
				apply 'mk_store'/3
				    (StOp, Src, Am2)
			    in  %% Line 282
				[_cor10|Rest]
		    %% Line 283
		    <> when 'true' ->
			let <Index> =
			    %% Line 284
			    apply 'mk_scratch'/1
				(Scratch)
			in  let <Am2> =
				%% Line 285
				{'am2',Base,Sign,Index}
			    in  let <_cor13> =
				    %% Line 287
				    apply 'mk_store'/3
					(StOp, Src, Am2)
				in  %% Line 286
				    apply 'mk_li'/3
					(Index, AbsOffset, %% Line 287
							   [_cor13|Rest])
		  end
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'mk_store',6}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_blr'/0 =
    %% Line 290
    fun () ->
	{'pseudo_blr'}
'mk_bx'/1 =
    %% Line 291
    fun (_cor0) ->
	{'pseudo_bx',_cor0}
'mk_mflr'/1 =
    %% Line 292
    fun (_cor0) ->
	let <_cor1> =
	    apply 'mk_lr'/0
		()
	in  apply 'mk_move'/2
		(_cor0, _cor1)
'mk_mtlr'/1 =
    %% Line 293
    fun (_cor0) ->
	let <_cor1> =
	    apply 'mk_lr'/0
		()
	in  apply 'mk_move'/2
		(_cor1, _cor0)
'mk_lr'/0 =
    %% Line 294
    fun () ->
	let <_cor0> =
	    call 'hipe_arm_registers':'lr'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_pc'/0 =
    %% Line 295
    fun () ->
	let <_cor0> =
	    call 'hipe_arm_registers':'pc'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_li'/2 =
    %% Line 298
    fun (_cor1,_cor0) ->
	apply 'mk_li'/3
	    (_cor1, _cor0, [])
'mk_li'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	%% Line 302
	case apply 'try_aluop_imm'/2
		 ('mov', _cor1) of
	  %% Line 303
	  <{NewMovOp,Am1}> when 'true' ->
	      let <_cor3> =
		  %% Line 304
		  apply 'mk_move'/4
		      (NewMovOp, 'false', _cor2, Am1)
	      in  %% Line 304
		  [_cor3|_cor0]
	  %% Line 305
	  <[]> when 'true' ->
	      let <_cor4> =
		  %% Line 306
		  apply 'mk_pseudo_li'/2
		      (_cor2, _cor1)
	      in  %% Line 306
		  [_cor4|_cor0]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'mk_addi'/4 =
    %% Line 312
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 313
	case apply 'try_aluop_imm'/2
		 ('add', _cor1) of
	  %% Line 314
	  <{NewAluOp,Am1}> when 'true' ->
	      let <_cor4> =
		  %% Line 315
		  apply 'mk_alu'/4
		      (NewAluOp, _cor3, _cor2, Am1)
	      in  %% Line 315
		  [_cor4|_cor0]
	  %% Line 316
	  <[]> when 'true' ->
	      let <DstReg> =
		  %% Line 319
		  apply 'temp_reg'/1
		      (_cor3)
	      in  let <SrcReg> =
		      %% Line 320
		      apply 'temp_reg'/1
			  (_cor2)
		  in  let <_cor8> =
			  %% Line 321
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (DstReg,
				       SrcReg) ->
				let <_cor7> =
				    %% Line 322
				    call 'hipe_arm_registers':'temp2'
					()
				in  %% Line 322
				    apply 'mk_temp'/2
					(_cor7, 'untagged')
			    %% Line 323
			    <> when 'true' ->
				_cor3
			  end
		      in  let <_cor10> =
			      %% Line 326
			      apply 'mk_pseudo_li'/2
				  (_cor8, _cor1)
			  in  let <_cor11> =
				  %% Line 326
				  apply 'mk_alu'/4
				      ('add', _cor3, _cor2, _cor8)
			      in  %% Line 326
				  [_cor10|[_cor11|_cor0]]
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'try_aluop_imm'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	%% Line 330
	case apply 'imm_to_am1'/1
		 (_cor0) of
	  %% Line 331
	  <Am1 = {_X_Imm8,_X_Imm4}> when 'true' ->
	      {_cor1,Am1}
	  %% Line 332
	  <[]> when 'true' ->
	      %% Line 333
	      case apply 'invert_aluop_imm'/2
		       (_cor1, _cor0) of
		%% Line 334
		<{NewAluOp,NewImm}> when 'true' ->
		    %% Line 335
		    case apply 'imm_to_am1'/1
			     (NewImm) of
		      %% Line 336
		      <Am1 = {_X_Imm8,_X_Imm4}> when 'true' ->
			  {NewAluOp,Am1}
		      %% Line 337
		      <[]> when 'true' ->
			  []
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 339
		<[]> when 'true' ->
		    []
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'invert_aluop_imm'/2 =
    %% Line 343
    fun (_cor1,_cor0) ->
	%% Line 344
	case _cor1 of
	  %% Line 345
	  <'mov'> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'mvn',_cor2}
	  %% Line 346
	  <'mvn'> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'mov',_cor3}
	  %% Line 347
	  <'cmp'> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'-'
		      (_cor0)
	      in  {'cmn',_cor4}
	  %% Line 348
	  <'cmn'> when 'true' ->
	      let <_cor5> =
		  call 'erlang':'-'
		      (_cor0)
	      in  {'cmp',_cor5}
	  %% Line 349
	  <'and'> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'bic',_cor6}
	  %% Line 350
	  <'bic'> when 'true' ->
	      let <_cor7> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'and',_cor7}
	  %% Line 351
	  <'orr'> when 'true' ->
	      let <_cor8> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'orn',_cor8}
	  %% Line 352
	  <'orn'> when 'true' ->
	      let <_cor9> =
		  call 'erlang':'bnot'
		      (_cor0)
	      in  {'orr',_cor9}
	  %% Line 353
	  <'add'> when 'true' ->
	      let <_cor10> =
		  call 'erlang':'-'
		      (_cor0)
	      in  {'sub',_cor10}
	  %% Line 354
	  <'sub'> when 'true' ->
	      let <_cor11> =
		  call 'erlang':'-'
		      (_cor0)
	      in  {'add',_cor11}
	  %% Line 355
	  <_cor15> when 'true' ->
	      []
	end
'imm_to_am1'/1 =
    %% Line 358
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'band'
		(_cor0, 4294967295)
	in  apply 'imm_to_am1'/2
		(_cor1, 16)
'imm_to_am1'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	%% Line 360
	case <> of
	  <>
	      when let <_cor2> =
		    call 'erlang':'>='
			(_cor1, 0)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (_cor1, 255)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  call 'erlang':'band'
		      (_cor0, 15)
	      in  {_cor1,_cor4}
	  %% Line 361
	  <> when 'true' ->
	      let <NewRotCnt> =
		  %% Line 362
		  call 'erlang':'-'
		      (_cor0, 1)
	      in  %% Line 363
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (NewRotCnt,
			       0) ->
			[]
		    %% Line 364
		    <> when 'true' ->
			let <_cor8> =
			    %% Line 365
			    call 'erlang':'bsr'
				(_cor1, 2)
			in  let <_cor6> =
				%% Line 365
				call 'erlang':'band'
				    (_cor1, 3)
			    in  let <_cor7> =
				    %% Line 365
				    call 'erlang':'bsl'
					(_cor6, 30)
				in  let <NewImm> =
					%% Line 365
					call 'erlang':'bor'
					    (_cor8, _cor7)
				    in  %% Line 366
					apply 'imm_to_am1'/2
					    (NewImm, NewRotCnt)
		  end
	end
'mk_defun'/8 =
    %% Line 370
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 371
	{'defun',_cor7,_cor6,_cor3,_cor2,_cor5,_cor4,_cor1,_cor0}
'defun_mfa'/1 =
    %% Line 374
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',MFA,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_formals'/1 =
    %% Line 375
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,Formals,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Formals
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_formals',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_closure'/1 =
    %% Line 376
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,IsClosure,_cor6,_cor7,_cor8}> when 'true' ->
	      IsClosure
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_closure',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_leaf'/1 =
    %% Line 377
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,IsLeaf,_cor7,_cor8}> when 'true' ->
	      IsLeaf
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_leaf',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_code'/1 =
    %% Line 378
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,Code,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_code',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_data'/1 =
    %% Line 379
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,Data,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Data
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_data',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_var_range'/1 =
    %% Line 380
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,VarRange,_cor8}> when 'true' ->
	      VarRange
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_var_range',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm', _cor0)
end