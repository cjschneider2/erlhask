module 'elf_format' ['extract_note'/2,
		     'extract_rela'/2,
		     'extract_text'/1,
		     'get_exn_handlers'/1,
		     'get_rela_addends'/1,
		     'get_rodata_relocs'/1,
		     'get_tab_entries'/1,
		     'get_text_relocs'/1,
		     'is64bit'/0,
		     'module_info'/0,
		     'module_info'/1,
		     'set_architecture_flag'/1]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{'elf',{'type',39,'binary',[]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'lp',{'type',41,'non_neg_integer',[]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'num',{'type',42,'non_neg_integer',[]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'index',{'type',43,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'offset',{'type',44,'non_neg_integer',[]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'size',{'type',45,'non_neg_integer',[]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'start',{'type',46,'non_neg_integer',[]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'info',{'type',48,'index',[]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'nameoff',{'type',49,'offset',[]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'valueoff',{'type',50,'offset',[]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'name',{'type',52,'string',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'name_size',{'type',53,'tuple',[{'type',53,'name',[]}|[{'type',53,'size',[]}]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'name_sizes',{'type',54,'list',[{'type',54,'name_size',[]}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','elf_ehdr'},[{'record_field',61,{'atom',61,'ident'}}|[{'record_field',62,{'atom',62,'type'}}|[{'record_field',63,{'atom',63,'machine'}}|[{'record_field',64,{'atom',64,'version'}}|[{'record_field',65,{'atom',65,'entry'}}|[{'record_field',66,{'atom',66,'phoff'}}|[{'typed_record_field',{'record_field',67,{'atom',67,'shoff'}},{'type',67,'union',[{'atom',67,'undefined'}|[{'type',67,'offset',[]}]]}}|[{'record_field',68,{'atom',68,'flags'}}|[{'typed_record_field',{'record_field',69,{'atom',69,'ehsize'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'size',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'phentsize'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'size',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'phnum'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'num',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'shentsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'size',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'shnum'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'num',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'shstrndx'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'index',[]}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'elf_ehdr',{'type',76,'record',[{'atom',76,'elf_ehdr'}]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','elf_ehdr_ident'},[{'record_field',78,{'atom',78,'class'}}|[{'record_field',79,{'atom',79,'data'}}|[{'record_field',80,{'atom',80,'version'}}|[{'record_field',81,{'atom',81,'osabi'}}|[{'record_field',82,{'atom',82,'abiversion'}}|[{'record_field',83,{'atom',83,'pad'}}|[{'record_field',84,{'atom',84,'nident'}}]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','elf_shdr'},[{'record_field',89,{'atom',89,'name'}}|[{'record_field',90,{'atom',90,'type'}}|[{'record_field',91,{'atom',91,'flags'}}|[{'record_field',92,{'atom',92,'addr'}}|[{'typed_record_field',{'record_field',93,{'atom',93,'offset'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'offset',[]}]]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'size'}},{'type',94,'union',[{'atom',94,'undefined'}|[{'type',94,'size',[]}]]}}|[{'record_field',95,{'atom',95,'link'}}|[{'record_field',96,{'atom',96,'info'}}|[{'record_field',97,{'atom',97,'addralign'}}|[{'record_field',98,{'atom',98,'entsize'}}]]]]]]]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','elf_sym'},[{'typed_record_field',{'record_field',103,{'atom',103,'name'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'nameoff',[]}]]}}|[{'record_field',104,{'atom',104,'info'}}|[{'record_field',105,{'atom',105,'other'}}|[{'record_field',106,{'atom',106,'shndx'}}|[{'typed_record_field',{'record_field',107,{'atom',107,'value'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'valueoff',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'size'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'size',[]}]]}}]]]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{'elf_sym',{'type',110,'record',[{'atom',110,'elf_sym'}]},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','elf_rel'},[{'typed_record_field',{'record_field',113,{'atom',113,'r_offset'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'offset',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'r_info'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'info',[]}]]}}]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'elf_rel',{'type',116,'record',[{'atom',116,'elf_rel'}]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{{'record','elf_rela'},[{'typed_record_field',{'record_field',118,{'atom',118,'r_offset'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'type',118,'offset',[]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'r_info'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'info',[]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'r_addend'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'offset',[]}]]}}]]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'elf_rela',{'type',122,'record',[{'atom',122,'elf_rela'}]},[]}],
		%% Line 146
		'type' =
		    %% Line 146
		    [{{'record','elf_gccexntab_callsite'},[{'typed_record_field',{'record_field',146,{'atom',146,'start'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'type',146,'start',[]}]]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'size'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'size',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'lp'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'lp',[]}]]}}|[{'record_field',150,{'atom',150,'onaction'}}]]]],[]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'sym_name',1},[{'type',206,'fun',[{'type',206,'product',[{'type',206,'elf_sym',[]}]}|[{'type',206,'nameoff',[]}]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'mk_rel',2},[{'type',218,'fun',[{'type',218,'product',[{'type',218,'offset',[]}|[{'type',218,'info',[]}]]}|[{'type',218,'elf_rel',[]}]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'r_offset',1},[{'type',225,'fun',[{'type',225,'product',[{'type',225,'union',[{'type',225,'elf_rel',[]}|[{'type',225,'elf_rela',[]}]]}]}|[{'type',225,'offset',[]}]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'r_info',1},[{'type',229,'fun',[{'type',229,'product',[{'type',229,'union',[{'type',229,'elf_rel',[]}|[{'type',229,'elf_rela',[]}]]}]}|[{'type',229,'info',[]}]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'mk_rela',3},[{'type',233,'fun',[{'type',233,'product',[{'type',233,'offset',[]}|[{'type',233,'info',[]}|[{'type',233,'offset',[]}]]]}|[{'type',233,'elf_rela',[]}]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'rela_addend',1},[{'type',237,'fun',[{'type',237,'product',[{'type',237,'elf_rela',[]}]}|[{'type',237,'offset',[]}]]}]}],
		%% Line 272
		'spec' =
		    %% Line 272
		    [{{'extract_header',1},[{'type',272,'fun',[{'type',272,'product',[{'type',272,'elf',[]}]}|[{'type',272,'elf_ehdr',[]}]]}]}],
		%% Line 346
		'spec' =
		    %% Line 346
		    [{{'extract_shstrtab',1},[{'type',346,'fun',[{'type',346,'product',[{'type',346,'elf',[]}]}|[{'type',346,'list',[{'type',346,'name',[]}]}]]}]}],
		%% Line 363
		'spec' =
		    %% Line 363
		    [{{'get_tab_entries',1},[{'type',363,'fun',[{'type',363,'product',[{'type',363,'elf',[]}]}|[{'type',363,'list',[{'type',363,'tuple',[{'type',363,'name',[]}|[{'type',363,'valueoff',[]}|[{'type',363,'size',[]}]]]}]}]]}]}],
		%% Line 425
		'spec' =
		    %% Line 425
		    [{{'extract_strtab',1},[{'type',425,'fun',[{'type',425,'product',[{'type',425,'elf',[]}]}|[{'type',425,'list',[{'type',425,'tuple',[{'type',425,'string',[]}|[{'type',425,'offset',[]}]]}]}]]}]}],
		%% Line 449
		'spec' =
		    %% Line 449
		    [{{'get_rodata_relocs',1},[{'type',449,'fun',[{'type',449,'product',[{'type',449,'elf',[]}]}|[{'type',449,'list',[{'type',449,'offset',[]}]}]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'get_rela_addends',1},[{'type',461,'fun',[{'type',461,'product',[{'type',461,'list',[{'type',461,'elf_rela',[]}]}]}|[{'type',461,'list',[{'type',461,'offset',[]}]}]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'get_text_relocs',1},[{'type',467,'fun',[{'type',467,'product',[{'type',467,'elf',[]}]}|[{'type',467,'list',[{'type',467,'tuple',[{'type',467,'name',[]}|[{'type',467,'offset',[]}]]}]}]]}]}],
		%% Line 491
		'spec' =
		    %% Line 491
		    [{{'extract_rela',2},[{'type',491,'fun',[{'type',491,'product',[{'type',491,'elf',[]}|[{'type',491,'name',[]}]]}|[{'type',491,'list',[{'type',491,'union',[{'type',491,'elf_rel',[]}|[{'type',491,'elf_rela',[]}]]}]}]]}]}],
		%% Line 534
		'spec' =
		    %% Line 534
		    [{{'extract_text',1},[{'type',534,'fun',[{'type',534,'product',[{'type',534,'elf',[]}]}|[{'type',534,'binary',[]}]]}]}],
		%% Line 547
		'spec' =
		    %% Line 547
		    [{{'extract_note',2},[{'type',547,'fun',[{'type',547,'product',[{'type',547,'elf',[]}|[{'type',547,'string',[]}]]}|[{'type',547,'binary',[]}]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'get_exn_handlers',1},[{'type',559,'fun',[{'type',559,'product',[{'type',559,'elf',[]}]}|[{'type',559,'list',[{'type',559,'tuple',[{'type',559,'start',[]}|[{'type',559,'start',[]}|[{'type',559,'lp',[]}]]]}]}]]}]}],
		%% Line 637
		'spec' =
		    %% Line 637
		    [{{'get_binary_segment',3},[{'type',637,'fun',[{'type',637,'product',[{'type',637,'binary',[]}|[{'type',637,'offset',[]}|[{'type',637,'size',[]}]]]}|[{'type',637,'binary',[]}]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'extract_segment_by_name',2},[{'type',649,'fun',[{'type',649,'product',[{'type',649,'elf',[]}|[{'type',649,'string',[]}]]}|[{'type',649,'binary',[]}]]}]}],
		%% Line 669
		'spec' =
		    %% Line 669
		    [{{'get_names',1},[{'type',669,'fun',[{'type',669,'product',[{'type',669,'binary',[{'integer',669,8}|[{'integer',669,8}]]}]}|[{'type',669,'name_sizes',[]}]]}]}],
		%% Line 685
		'spec' =
		    %% Line 685
		    [{{'fix_names',2},[{'type',685,'fun',[{'type',685,'product',[{'type',685,'name_sizes',[]}|[{'type',685,'name_sizes',[]}]]}|[{'type',685,'name_sizes',[]}]]}]}],
		%% Line 715
		'spec' =
		    %% Line 715
		    [{{'bin_reverse',1},[{'type',715,'fun',[{'type',715,'product',[{'type',715,'binary',[]}]}|[{'type',715,'binary',[]}]]}]}],
		%% Line 719
		'spec' =
		    %% Line 719
		    [{{'bin_reverse',2},[{'type',719,'fun',[{'type',719,'product',[{'type',719,'binary',[]}|[{'type',719,'binary',[]}]]}|[{'type',719,'binary',[]}]]}]}],
		%% Line 727
		'spec' =
		    %% Line 727
		    [{{'bin_get_string',1},[{'type',727,'fun',[{'type',727,'product',[{'type',727,'binary',[]}]}|[{'type',727,'tuple',[{'type',727,'string',[]}|[{'type',727,'binary',[]}]]}]]}]}],
		%% Line 758
		'spec' =
		    %% Line 758
		    [{{'leb128_decode',1},[{'type',758,'fun',[{'type',758,'product',[{'type',758,'binary',[]}]}|[{'type',758,'tuple',[{'type',758,'integer',[]}|[{'type',758,'binary',[]}]]}]]}]}],
		%% Line 762
		'spec' =
		    %% Line 762
		    [{{'leb128_decode',3},[{'type',762,'fun',[{'type',762,'product',[{'type',762,'binary',[]}|[{'type',762,'integer',[]}|[{'type',762,'binary',[]}]]]}|[{'type',762,'tuple',[{'type',762,'integer',[]}|[{'type',762,'binary',[]}]]}]]}]}],
		%% Line 776
		'spec' =
		    %% Line 776
		    [{{'set_architecture_flag',1},[{'type',776,'fun',[{'type',776,'product',[{'type',776,'elf',[]}]}|[{'atom',776,'ok'}]]}]}],
		%% Line 785
		'spec' =
		    %% Line 785
		    [{{'is64bit',0},[{'type',785,'fun',[{'type',785,'product',[]}|[{'type',785,'boolean',[]}]]}]}]]
'extract_header'/1 =
    %% Line 273
    fun (_cor0) ->
	let <_1595> =
	    %% Line 274
	    apply 'get_binary_segment'/3
		(_cor0, 0, 64)
	in  %% Line 290
	    case ( _1595
		   -| ['reuse_for_context'] ) of
	      <#{#<Ident_bin>(16,8,'binary',['unsigned'|['big']]),
		 #<Type>(16,1,'integer',['unsigned'|['little']]),
		 #<Machine>(16,1,'integer',['unsigned'|['little']]),
		 #<Version>(32,1,'integer',['unsigned'|['little']]),
		 #<Entry>(64,1,'integer',['unsigned'|['little']]),
		 #<Phoff>(64,1,'integer',['unsigned'|['little']]),
		 #<Shoff>(64,1,'integer',['unsigned'|['little']]),
		 #<Flags>(32,1,'integer',['unsigned'|['little']]),
		 #<Ehsize>(16,1,'integer',['unsigned'|['little']]),
		 #<Phentsize>(16,1,'integer',['unsigned'|['little']]),
		 #<Phnum>(16,1,'integer',['unsigned'|['little']]),
		 #<Shentsize>(16,1,'integer',['unsigned'|['little']]),
		 #<Shnum>(16,1,'integer',['unsigned'|['little']]),
		 #<Shstrndx>(16,1,'integer',['unsigned'|['little']])}#> when 'true' ->
		  %% Line 293
		  case ( Ident_bin
			 -| ['reuse_for_context'] ) of
		    <#{#<127>(8,1,'integer',['unsigned'|['big']]),
		       #<69>(8,1,'integer',['unsigned'|['big']]),
		       #<76>(8,1,'integer',['unsigned'|['big']]),
		       #<70>(8,1,'integer',['unsigned'|['big']]),
		       #<Class>(8,1,'integer',['unsigned'|['big']]),
		       #<Data>(8,1,'integer',['unsigned'|['big']]),
		       #<_cor20>(8,1,'integer',['unsigned'|['big']]),
		       #<Osabi>(8,1,'integer',['unsigned'|['big']]),
		       #<Abiversion>(8,1,'integer',['unsigned'|['big']]),
		       #<Pad>(6,8,'binary',['unsigned'|['big']]),
		       #<Nident>(8,1,'integer',['unsigned'|['big']])}#>
			when call 'erlang':'=:='
			      (_cor20,
			       Version) ->
			let <Ident> =
			    {'elf_ehdr_ident',Class,Data,Version,Osabi,Abiversion,Pad,Nident}
			in  {'elf_ehdr',Ident,Type,Machine,Version,Entry,Phoff,Shoff,Flags,Ehsize,Phentsize,Phnum,Shentsize,Shnum,Shstrndx}
		    ( <_cor17> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (Ident_bin)
			      primop 'match_fail'
				  ({'badmatch',Ident_bin})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor16> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (_1595)
			primop 'match_fail'
			    ({'badmatch',_1595})
		-| ['compiler_generated'] )
	    end
'extract_shdrtab'/1 =
    %% Line 304
    fun (_cor0) ->
	let <_4089> =
	    %% Line 308
	    apply 'extract_header'/1
		(_cor0)
	in  %% Line 307
	    case _4089 of
	      <{'elf_ehdr',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,ShOff,_cor11,_cor12,_cor13,_cor14,ShEntsize,ShNum,_cor15}> when 'true' ->
		  let <_cor2> =
		      %% Line 310
		      call 'erlang':'*'
			  (ShNum, ShEntsize)
		  in  let <ShdrBin> =
			  %% Line 310
			  apply 'get_binary_segment'/3
			      (_cor0, ShOff, _cor2)
		      in  %% Line 311
			  apply 'get_shdrtab_entries'/2
			      (ShdrBin, [])
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4089})
		-| ['compiler_generated'] )
	    end
'get_shdrtab_entries'/2 =
    %% Line 313
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 314
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 315
	  <ShdrBin,Acc> when 'true' ->
	      %% Line 328
	      case ( _cor1
		     -| ['reuse_for_context'] ) of
		<#{#<Name>(32,1,'integer',['unsigned'|['little']]),
		   #<Type>(32,1,'integer',['unsigned'|['little']]),
		   #<Flags>(64,1,'integer',['unsigned'|['little']]),
		   #<Addr>(64,1,'integer',['unsigned'|['little']]),
		   #<Offset>(64,1,'integer',['unsigned'|['little']]),
		   #<Size>(64,1,'integer',['unsigned'|['little']]),
		   #<Link>(32,1,'integer',['unsigned'|['little']]),
		   #<Info>(32,1,'integer',['unsigned'|['little']]),
		   #<Addralign>(64,1,'integer',['unsigned'|['little']]),
		   #<Entsize>(64,1,'integer',['unsigned'|['little']]),
		   #<MoreShdrE>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <ShdrE> =
			{'elf_shdr',Name,Type,Flags,Addr,Offset,Size,Link,Info,Addralign,Entsize}
		    in  %% Line 331
			apply 'get_shdrtab_entries'/2
			    (MoreShdrE, [ShdrE|_cor0])
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'extract_shstrtab'/1 =
    %% Line 347
    fun (_cor0) ->
	let <_3812> =
	    %% Line 349
	    apply 'extract_header'/1
		(_cor0)
	in  %% Line 349
	    case _3812 of
	      <{'elf_ehdr',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,ShStrNdx}> when 'true' ->
		  let <ShHdrTab> =
		      %% Line 350
		      apply 'extract_shdrtab'/1
			  (_cor0)
		  in  let <_cor2> =
			  call 'erlang':'+'
			      (ShStrNdx, 1)
		      in  let <_2438> =
			      call 'lists':'nth'
				  (_cor2, ShHdrTab)
			  in  %% Line 352
			      case _2438 of
				<{'elf_shdr',_cor24,_cor25,_cor26,_cor27,ShStrOffset,ShStrSize,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
				    let <_2207> =
					%% Line 354
					apply 'get_binary_segment'/3
					    (_cor0, ShStrOffset, ShStrSize)
				    in  %% Line 354
					case _2207 of
					  %% Line 355
					  <#{}#> when 'true' ->
					      %% Line 356
					      []
					  %% Line 357
					  <ShStrTab> when 'true' ->
					      %% Line 358
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor7) ->
							    case _cor7 of
							      <[{Name,_X_Size}|_cor5]> when 'true' ->
								  let <_cor8> =
								      apply 'lc$^0'/1
									  (_cor5)
								  in  ( [Name|_cor8]
									-| ['compiler_generated'] )
							      ( <[_cor4|_cor5]> when 'true' ->
								    apply 'lc$^0'/1
									(_cor5)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_3925> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor7})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor6> =
							apply 'get_names'/1
							    (_2207)
						    in  apply 'lc$^0'/1
							    (_cor6)
						-| ['list_comprehension'] )
					end
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_2438})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3812})
		-| ['compiler_generated'] )
	    end
'get_tab_entries'/1 =
    %% Line 364
    fun (_cor0) ->
	let <SymTab> =
	    %% Line 365
	    apply 'extract_symtab'/1
		(_cor0)
	in  let <_cor7> =
		%% Line 366
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[%% Line 367
				  {'elf_sym',Name,_cor19,_cor20,_cor21,Value,Size}|_cor3]>
				    when %% Line 368
				      call 'erlang':'=/='
					  (Name,
					   0) ->
				    let <_cor5> =
					call 'erlang':'div'
					    (Size, 8)
				    in  let <_cor6> =
					    %% Line 367
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [{Name,Value,_cor5}|_cor6]
					      -| ['compiler_generated'] )
				( <[_cor2|_cor3]> when 'true' ->
				      %% Line 367
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_69> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (SymTab)
		  -| ['list_comprehension'] )
	    in  let <_1575> =
		    %% Line 369
		    call 'lists':'unzip3'
			(_cor7)
		in  %% Line 369
		    case _1575 of
		      <{NameIndices,ValueOffs,Sizes}> when 'true' ->
			  let <StrTab> =
			      %% Line 373
			      apply 'extract_strtab'/1
				  (_cor0)
			  in  let <_cor16> =
				  %% Line 374
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor13) ->
						case _cor13 of
						  <[Off|_cor12]> when 'true' ->
						      let <_cor14> =
							  apply 'get_strtab_entry'/2
							      (StrTab, Off)
						      in  let <_cor15> =
							      apply 'lc$^1'/1
								  (_cor12)
							  in  ( [_cor14|_cor15]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_3211> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor13})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  case NameIndices of
					  <[Off|_cor12]> when 'true' ->
					      let <_131> =
						  %% Line 437
						  call 'lists':'keyfind'
						      (Off, 2, StrTab)
					      in  let <_cor14> =
						      %% Line 437
						      case _131 of
							%% Line 438
							<{Name,_cor5}>
							    when call 'erlang':'=:='
								  (_cor5,
								   Off) ->
							    Name
							%% Line 439
							<'false'> when 'true' ->
							    []
							( <_cor2> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_131})
							  -| ['compiler_generated'] )
						      end
						  in  let <_cor15> =
							  apply 'lc$^1'/1
							      (_cor12)
						      in  ( [_cor14|_cor15]
							    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_3211> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',NameIndices})
					    -| ['compiler_generated'] )
					end
				    -| ['list_comprehension'] )
			      in  %% Line 376
				  call 'lists':'zip3'
				      (_cor16, ValueOffs, Sizes)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_1575})
			-| ['compiler_generated'] )
		    end
'extract_symtab'/1 =
    %% Line 383
    fun (_cor0) ->
	let <Symtab_bin> =
	    %% Line 384
	    apply 'extract_segment_by_name'/2
		(_cor0, [46|[115|[121|[109|[116|[97|[98]]]]]]])
	in  %% Line 385
	    apply 'get_symtab_entries'/2
		(Symtab_bin, [])
'get_symtab_entries'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 388
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 389
	  <Symtab_bin,Acc> when 'true' ->
	      %% Line 390
	      case ( _cor1
		     -| ['reuse_for_context'] ) of
		<#{#<SymE_bin>(24,8,'binary',['unsigned'|['big']]),
		   #<MoreSymE>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_367> =
			%% Line 787
			call 'erlang':'get'
			    ('elf_class')
		    in  let <_2086> =
			    %% Line 787
			    case _367 of
			      %% Line 788
			      <2> when 'true' ->
				  'true'
			      %% Line 789
			      <1> when 'true' ->
				  'false'
			      ( <_2288> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_367})
				-| ['compiler_generated'] )
			    end
			in  let <_cor11,Info,Name,Other,Shndx,Size,Value> =
				%% Line 391
				case _2086 of
				  %% Line 392
				  <'true'> when 'true' ->
				      %% Line 400
				      case SymE_bin of
					<#{#<Name>(32,1,'integer',['unsigned'|['little']]),
					   #<Info>(8,1,'integer',['unsigned'|['little']]),
					   #<Other>(8,1,'integer',['unsigned'|['little']]),
					   #<Shndx>(16,1,'integer',['unsigned'|['little']]),
					   #<Value>(64,1,'integer',['unsigned'|['little']]),
					   #<Size>(64,1,'integer',['unsigned'|['little']])}#> when 'true' ->
					    <SymE_bin,Info,Name,Other,Shndx,Size,Value>
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',SymE_bin})
					  -| ['compiler_generated'] )
				      end
				  %% Line 401
				  <'false'> when 'true' ->
				      %% Line 409
				      case SymE_bin of
					<#{#<Name>(32,1,'integer',['unsigned'|['little']]),
					   #<Value>(64,1,'integer',['unsigned'|['little']]),
					   #<Size>(64,1,'integer',['unsigned'|['little']]),
					   #<Info>(8,1,'integer',['unsigned'|['little']]),
					   #<Other>(8,1,'integer',['unsigned'|['little']]),
					   #<Shndx>(16,1,'integer',['unsigned'|['little']])}#> when 'true' ->
					    <SymE_bin,Info,Name,Other,Shndx,Size,Value>
					( <_cor4> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',SymE_bin})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_2086})
				    -| ['compiler_generated'] )
				end
			    in  let <SymE> =
				    {'elf_sym',Name,Info,Other,Shndx,Value,Size}
				in  %% Line 412
				    apply 'get_symtab_entries'/2
					(MoreSymE, [SymE|_cor0])
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'extract_strtab'/1 =
    %% Line 426
    fun (_cor0) ->
	let <Strtab_bin> =
	    %% Line 427
	    apply 'extract_segment_by_name'/2
		(_cor0, [46|[115|[116|[114|[116|[97|[98]]]]]]])
	in  let <NamesSizes> =
		%% Line 428
		apply 'get_names'/1
		    (Strtab_bin)
	    in  let <_2839> =
		    %% Line 742
		    call 'lists':'unzip'
			(NamesSizes)
		in  %% Line 742
		    case _2839 of
		      <{Names,Sizes}> when 'true' ->
			  let <Offsets> =
			      %% Line 743
			      apply 'make_offsets_from_sizes'/3
				  (Sizes, 1, [])
			  in  %% Line 744
			      call 'lists':'zip'
				  (Names, Offsets)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_2839})
			-| ['compiler_generated'] )
		    end
'get_strtab_entry'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	let <_131> =
	    %% Line 437
	    call 'lists':'keyfind'
		(_cor0, 2, _cor1)
	in  %% Line 437
	    case _131 of
	      %% Line 438
	      <{Name,_cor5}>
		  when call 'erlang':'=:='
			(_cor5,
			 _cor0) ->
		  Name
	      %% Line 439
	      <'false'> when 'true' ->
		  []
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_131})
		-| ['compiler_generated'] )
	    end
'get_rodata_relocs'/1 =
    %% Line 450
    fun (_cor0) ->
	let <_367> =
	    %% Line 787
	    call 'erlang':'get'
		('elf_class')
	in  let <_1603> =
		%% Line 787
		case _367 of
		  %% Line 788
		  <2> when 'true' ->
		      'true'
		  %% Line 789
		  <1> when 'true' ->
		      'false'
		  ( <_2328> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_367})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 451
		case _1603 of
		  %% Line 452
		  <'true'> when 'true' ->
		      let <_cor1> =
			  %% Line 454
			  apply 'extract_rela'/2
			      (_cor0, [46|[114|[111|[100|[97|[116|[97]]]]]]])
		      in  %% Line 463
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor3) ->
					case _cor3 of
					  <[E|_cor2]> when 'true' ->
					      case E of
						<{'elf_rela',_5217,_72,Addend}> when 'true' ->
						    let <_cor5> =
							apply 'lc$^0'/1
							    (_cor2)
						    in  ( [Addend|_cor5]
							  -| ['compiler_generated'] )
						( <_3236> when 'true' ->
						      primop 'match_fail'
							  ({'function_clause',E})
						  -| ['compiler_generated'] )
					      end
					  <[]> when 'true' ->
					      []
					  ( <_3399> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',_cor3})
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor1)
			    -| ['list_comprehension'] )
		  %% Line 455
		  <'false'> when 'true' ->
		      %% Line 458
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[SkipPadding|_cor3]>
					  when call 'erlang':'=/='
						(SkipPadding,
						 0) ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [SkipPadding|_cor6]
						-| ['compiler_generated'] )
				      ( <[SkipPadding|_cor3]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_5395> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor4> =
				apply 'extract_rodata'/1
				    (_cor0)
			    in  apply 'lc$^0'/1
				    (_cor4)
			-| ['list_comprehension'] )
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_1603})
		    -| ['compiler_generated'] )
		end
'get_rela_addends'/1 =
    %% Line 462
    fun (_cor0) ->
	%% Line 463
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[E|_cor2]> when 'true' ->
			    case E of
			      <{'elf_rela',_5217,_72,Addend}> when 'true' ->
				  let <_cor5> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [Addend|_cor5]
					-| ['compiler_generated'] )
			      ( <_cor1> when 'true' ->
				    primop 'match_fail'
					({'function_clause',E})
				-| ['compiler_generated'] )
			    end
			<[]> when 'true' ->
			    []
			( <_3399> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'get_text_relocs'/1 =
    %% Line 468
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 470
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[E|_cor2]> when 'true' ->
				let <_cor6> =
				    case E of
				      <{'elf_rel',_3853,Info}> when 'true' ->
					  Info
				      <{'elf_rela',_cor3,Info,_1868}> when 'true' ->
					  Info
				      ( <_cor1> when 'true' ->
					    primop 'match_fail'
						({'function_clause',E})
					-| ['compiler_generated'] )
				    end
				in  let <_cor7> =
					call 'erlang':'bsr'
					    (_cor6, 32)
				    in  let <_cor5> =
					    case E of
					      <{'elf_rel',Offset,_2078}> when 'true' ->
						  Offset
					      <{'elf_rela',Offset,_cor3,_4647}> when 'true' ->
						  Offset
					      ( <_cor1> when 'true' ->
						    primop 'match_fail'
							({'function_clause',E})
						-| ['compiler_generated'] )
					    end
					in  let <_cor8> =
						%% Line 471
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [{_cor7,_cor5}|_cor8]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_4262> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      %% Line 471
		      apply 'extract_rela'/2
			  (_cor0, [46|[116|[101|[120|[116]]]]])
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  let <_3263> =
		%% Line 472
		call 'lists':'unzip'
		    (_cor9)
	    in  %% Line 472
		case _3263 of
		  <{NameIndices,ActualOffsets}> when 'true' ->
		      let <Symtab> =
			  %% Line 476
			  apply 'extract_symtab'/1
			      (_cor0)
		      in  let <_cor18> =
			      %% Line 477
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor15) ->
					    case _cor15 of
					      <[Index|_cor14]> when 'true' ->
						  let <_cor2> =
						      call 'erlang':'+'
							  (Index, 1)
						  in  let <_cor16> =
							  call 'lists':'nth'
							      (_cor2, Symtab)
						      in  let <_cor17> =
							      apply 'lc$^1'/1
								  (_cor14)
							  in  ( [_cor16|_cor17]
								-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_1310> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor15})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  case NameIndices of
				      <[Index|_cor14]> when 'true' ->
					  let <_cor2> =
					      call 'erlang':'+'
						  (Index, 1)
					  in  let <_cor16> =
						  call 'lists':'nth'
						      (_cor2, Symtab)
					      in  let <_cor17> =
						      apply 'lc$^1'/1
							  (_cor14)
						  in  ( [_cor16|_cor17]
							-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_1310> when 'true' ->
					    primop 'match_fail'
						({'function_clause',NameIndices})
					-| ['compiler_generated'] )
				    end
				-| ['list_comprehension'] )
			  in  let <_cor25> =
				  %% Line 481
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor22) ->
						case _cor22 of
						  <[E|_cor21]> when 'true' ->
						      case E of
							<{'elf_sym',Name,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
							    let <_cor24> =
								apply 'lc$^2'/1
								    (_cor21)
							    in  ( [Name|_cor24]
								  -| ['compiler_generated'] )
							( <_cor1> when 'true' ->
							      primop 'match_fail'
								  ({'function_clause',E})
							  -| ['compiler_generated'] )
						      end
						  <[]> when 'true' ->
						      []
						  ( <_621> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor22})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (_cor18)
				    -| ['list_comprehension'] )
			      in  let <Strtab> =
				      %% Line 484
				      apply 'extract_strtab'/1
					  (_cor0)
				  in  let <_cor33> =
					  %% Line 485
					  ( letrec
						'lc$^3'/1 =
						    fun (_cor30) ->
							case _cor30 of
							  <[Off|_cor29]> when 'true' ->
							      let <_cor31> =
								  apply 'get_strtab_entry'/2
								      (Strtab, Off)
							      in  let <_cor32> =
								      apply 'lc$^3'/1
									  (_cor29)
								  in  ( [_cor31|_cor32]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_2467> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor30})
								  -| [{'function_name',{'lc$^3',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  case _cor25 of
						  <[Off|_cor29]> when 'true' ->
						      let <_131> =
							  call 'lists':'keyfind'
							      (Off, 2, Strtab)
						      in  let <_cor31> =
							      case _131 of
								<{Name,_cor5}>
								    when call 'erlang':'=:='
									  (_cor5,
									   Off) ->
								    Name
								<'false'> when 'true' ->
								    []
								( <_cor2> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_131})
								  -| ['compiler_generated'] )
							      end
							  in  let <_cor32> =
								  apply 'lc$^3'/1
								      (_cor29)
							      in  ( [_cor31|_cor32]
								    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_2467> when 'true' ->
							primop 'match_fail'
							    ({'function_clause',_cor25})
						    -| ['compiler_generated'] )
						end
					    -| ['list_comprehension'] )
				      in  %% Line 487
					  call 'lists':'zip'
					      (_cor33, ActualOffsets)
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_3263})
		    -| ['compiler_generated'] )
		end
'extract_rela'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	let <_367> =
	    %% Line 787
	    call 'erlang':'get'
		('elf_class')
	in  let <_2076> =
		%% Line 787
		case _367 of
		  %% Line 788
		  <2> when 'true' ->
		      'true'
		  %% Line 789
		  <1> when 'true' ->
		      'false'
		  ( <_3195> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_367})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor3> =
		    %% Line 494
		    case _2076 of
		      %% Line 495
		      <'true'> when 'true' ->
			  call 'erlang':'++'
			      ([46|[114|[101|[108|[97]]]]], _cor0)
		      %% Line 496
		      <'false'> when 'true' ->
			  [46|[114|[101|[108|_cor0]]]]
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_2076})
			-| ['compiler_generated'] )
		    end
		in  let <Rela_bin> =
			%% Line 498
			apply 'extract_segment_by_name'/2
			    (_cor1, _cor3)
		    in  %% Line 499
			apply 'get_rela_entries'/2
			    (Rela_bin, [])
'get_rela_entries'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 502
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 503
	  <Bin,Acc> when 'true' ->
	      let <_367> =
		  %% Line 787
		  call 'erlang':'get'
		      ('elf_class')
	      in  let <_1113> =
		      %% Line 787
		      case _367 of
			%% Line 788
			<2> when 'true' ->
			    'true'
			%% Line 789
			<1> when 'true' ->
			    'false'
			( <_3495> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_367})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor5,Rest> =
			  %% Line 504
			  case _1113 of
			    %% Line 505
			    <'true'> when 'true' ->
				%% Line 511
				case ( _cor1
				       -| ['reuse_for_context'] ) of
				  <#{#<Offset>(64,1,'integer',['unsigned'|['little']]),
				     #<Info>(64,1,'integer',['unsigned'|['little']]),
				     #<Addend>(64,1,'integer',['unsigned'|['little']]),
				     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_cor9> =
					  {'elf_rela',Offset,Info,Addend}
				      in  <_cor9,Rest>
				  ( <_cor2> when 'true' ->
					do  primop 'bs_context_to_binary'
						(_cor1)
					    primop 'match_fail'
						({'badmatch',_cor1})
				    -| ['compiler_generated'] )
				end
			    %% Line 513
			    <'false'> when 'true' ->
				%% Line 518
				case ( _cor1
				       -| ['reuse_for_context'] ) of
				  <#{#<Offset>(64,1,'integer',['unsigned'|['little']]),
				     #<Info>(64,1,'integer',['unsigned'|['little']]),
				     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_cor10> = {'elf_rel',Offset,Info}
				      in  <_cor10,Rest>
				  ( <_cor3> when 'true' ->
					do  primop 'bs_context_to_binary'
						(_cor1)
					    primop 'match_fail'
						({'badmatch',_cor1})
				    -| ['compiler_generated'] )
				end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_1113})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 521
			  apply 'get_rela_entries'/2
			      (Rest, [_cor5|_cor0])
	end
'extract_text'/1 =
    %% Line 535
    fun (_cor0) ->
	%% Line 536
	apply 'extract_segment_by_name'/2
	    (_cor0, [46|[116|[101|[120|[116]]]]])
'extract_note'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 549
	    call 'erlang':'++'
		([46|[110|[111|[116|[101]]]]], _cor0)
	in  %% Line 549
	    apply 'extract_segment_by_name'/2
		(_cor1, _cor2)
'get_exn_handlers'/1 =
    %% Line 560
    fun (_cor0) ->
	let <CallSites> =
	    %% Line 561
	    apply 'extract_gccexntab_callsites'/1
		(_cor0)
	in  %% Line 562
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 563
			      {'elf_gccexntab_callsite',Start,Size,LP,_cor8}|_cor3]> when 'true' ->
				let <_cor5> =
				    call 'erlang':'+'
					(Start, Size)
				in  let <_cor6> =
					%% Line 563
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [{Start,_cor5,LP}|_cor6]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 563
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_258> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (CallSites)
	      -| ['list_comprehension'] )
'extract_gccexntab_callsites'/1 =
    %% Line 570
    fun (_cor0) ->
	let <_758> =
	    %% Line 571
	    apply 'extract_segment_by_name'/2
		(_cor0, [46|[103|[99|[99|[95|[101|[120|[99|[101|[112|[116|[95|[116|[97|[98|[108|[101]]]]]]]]]]]]]]]]])
	in  %% Line 571
	    case _758 of
	      %% Line 572
	      <#{}#> when 'true' ->
		  %% Line 573
		  []
	      %% Line 574
	      <ExnTab> when 'true' ->
		  %% Line 576
		  case ( _758
			 -| ['reuse_for_context'] ) of
		    <#{#<LBenc>(8,1,'integer',['unsigned'|['big']]),
		       #<More>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_X_LPBase,LSDACont> =
			    %% Line 580
			    case <> of
			      %% Line 581
			      <>
				  when call 'erlang':'=:='
					(LBenc,
					 255) ->
				  <-1,More>
			      %% Line 583
			      <> when 'true' ->
				  %% Line 584
				  case ( More
					 -| ['reuse_for_context'] ) of
				    <#{#<Base>(8,1,'integer',['unsigned'|['big']]),
				       #<More2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					%% Line 585
					<Base,More2>
				    ( <_cor3> when 'true' ->
					  do  primop 'bs_context_to_binary'
						  (More)
					      primop 'match_fail'
						  ({'badmatch',More})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 588
			    case ( LSDACont
				   -| ['reuse_for_context'] ) of
			      <#{#<TTenc>(8,1,'integer',['unsigned'|['big']]),
				 #<More3>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_cor10> =
				      %% Line 591
				      case <> of
					%% Line 592
					<>
					    when call 'erlang':'=:='
						  (TTenc,
						   255) ->
					    %% Line 593
					    {-1,More3}
					%% Line 594
					<> when 'true' ->
					    %% Line 760
					    apply 'leb128_decode'/3
						(More3, 0, #{}#)
				      end
				  in  %% Line 590
				      case _cor10 of
					<{_X_TTOff,LSDACont2}> when 'true' ->
					    %% Line 599
					    case ( LSDACont2
						   -| ['reuse_for_context'] ) of
					      <#{#<_X_CSenc>(8,1,'integer',['unsigned'|['big']]),
						 #<More4>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						  let <_5688> =
						      %% Line 760
						      apply 'leb128_decode'/3
							  (More4, 0, #{}#)
						  in  %% Line 602
						      case _5688 of
							<{_X_CSTabSize,CSTab}> when 'true' ->
							    %% Line 604
							    apply 'get_gccexntab_callsites'/2
								(CSTab, [])
							( <_cor13> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_5688})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor12> when 'true' ->
						    do  primop 'bs_context_to_binary'
							    (LSDACont2)
							primop 'match_fail'
							    ({'badmatch',LSDACont2})
						-| ['compiler_generated'] )
					    end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor7> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (LSDACont)
					primop 'match_fail'
					    ({'badmatch',LSDACont})
				-| ['compiler_generated'] )
			    end
		    ( <_cor1> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_758)
			      primop 'match_fail'
				  ({'badmatch',_758})
		      -| ['compiler_generated'] )
		  end
	    end
'get_gccexntab_callsites'/2 =
    %% Line 607
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 608
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 609
	  <CSTab,Acc> when 'true' ->
	      %% Line 613
	      case ( _cor1
		     -| ['reuse_for_context'] ) of
		<#{#<Start>(32,1,'integer',['unsigned'|['little']]),
		   #<Size>(32,1,'integer',['unsigned'|['little']]),
		   #<LP>(32,1,'integer',['unsigned'|['little']]),
		   #<OnAction>(8,1,'integer',['unsigned'|['big']]),
		   #<More>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <GccCS> =
			{'elf_gccexntab_callsite',Start,Size,LP,OnAction}
		    in  %% Line 615
			apply 'get_gccexntab_callsites'/2
			    (More, [GccCS|_cor0])
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'extract_rodata'/1 =
    %% Line 620
    fun (_cor0) ->
	let <Rodata_bin> =
	    %% Line 621
	    apply 'extract_segment_by_name'/2
		(_cor0, [46|[114|[111|[100|[97|[116|[97]]]]]]])
	in  %% Line 622
	    apply 'get_rodata_entries'/2
		(Rodata_bin, [])
'get_rodata_entries'/2 =
    %% Line 624
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 625
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 626
	  <Rodata_bin,Acc> when 'true' ->
	      %% Line 627
	      case ( _cor1
		     -| ['reuse_for_context'] ) of
		<#{#<Num>(64,1,'integer',['unsigned'|['little']]),
		   #<More>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 628
		    apply 'get_rodata_entries'/2
			(More, [Num|_cor0])
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'get_binary_segment'/3 =
    %% Line 638
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bin,Offset,_X_Size>
	      when try
		    let <_cor3> =
			call 'erlang':'byte_size'
			    (_cor2)
		    in  call 'erlang':'>'
			    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 639
	      #{}#
	  %% Line 640
	  <Bin,Offset,Size> when 'true' ->
	      %% Line 641
	      case ( _cor2
		     -| ['reuse_for_context'] ) of
		<#{#<_X_Hdr>(_cor1,8,'binary',['unsigned'|['big']]),
		   #<BinSeg>(_cor0,8,'binary',['unsigned'|['big']]),
		   #<_X_More>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    BinSeg
		( <_cor4> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor2)
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'extract_segment_by_name'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	let <SHdrTable> =
	    %% Line 652
	    apply 'extract_shdrtab'/1
		(_cor1)
	in  let <Names> =
		%% Line 653
		apply 'extract_shstrtab'/1
		    (_cor1)
	    in  let <_740> =
		    %% Line 655
		    call 'lists':'keysort'
			(2, SHdrTable)
		in  %% Line 655
		    case _740 of
		      <[_X_Zero|ShdrEs]> when 'true' ->
			  let <L> =
			      %% Line 656
			      call 'lists':'zip'
				  (Names, ShdrEs)
			  in  let <_4793> =
				  %% Line 658
				  call 'lists':'keyfind'
				      (_cor0, 1, L)
			      in  %% Line 658
				  case _4793 of
				    %% Line 659
				    <{_cor10,ShdrE}>
					when call 'erlang':'=:='
					      (_cor10,
					       _cor0) ->
					%% Line 660
					case ShdrE of
					  <{'elf_shdr',_cor11,_cor12,_cor13,_cor14,Offset,Size,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
					      %% Line 661
					      apply 'get_binary_segment'/3
						  (_cor1, Offset, Size)
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',ShdrE})
					    -| ['compiler_generated'] )
					end
				    %% Line 662
				    <'false'> when 'true' ->
					%% Line 663
					#{}#
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_4793})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_740})
			-| ['compiler_generated'] )
		    end
'get_names'/1 =
    %% Line 670
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <NamesSizes> =
		  %% Line 671
		  apply 'get_names'/2
		      (Bin, [])
	      in  %% Line 672
		  apply 'fix_names'/2
		      (NamesSizes, [])
	  ( <_cor2> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor0)
		    ( primop 'match_fail'
			  ({'function_clause',_cor0})
		      -| [{'function_name',{'get_names',1}}] )
	    -| ['compiler_generated'] )
	end
'get_names'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      %% Line 675
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 676
	  <Bin,Acc> when 'true' ->
	      let <_349> =
		  %% Line 677
		  apply 'bin_get_string'/1
		      (_cor1)
	      in  %% Line 677
		  case _349 of
		    <{Name,MoreNames}> when 'true' ->
			let <_cor3> =
			    %% Line 678
			    call 'erlang':'length'
				(Name)
			in  %% Line 678
			    apply 'get_names'/2
				(MoreNames, [{Name,_cor3}|_cor0])
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_349})
		      -| ['compiler_generated'] )
		  end
	end
'fix_names'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 687
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 688
	  <[T = {Name,Size}|Names],Acc> when 'true' ->
	      let <_367> =
		  %% Line 787
		  call 'erlang':'get'
		      ('elf_class')
	      in  let <_5352> =
		      %% Line 787
		      case _367 of
			%% Line 788
			<2> when 'true' ->
			    'true'
			%% Line 789
			<1> when 'true' ->
			    'false'
			( <_688> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_367})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 689
		      case _5352 of
			%% Line 690
			<'true'> when 'true' ->
			    let <_cor2> =
				%% Line 691
				call 'string':'str'
				    (Name, [46|[114|[101|[108|[97]]]]])
			    in  %% Line 691
				case <> of
				  %% Line 692
				  <>
				      when call 'erlang':'=:='
					    (_cor2,
					     1) ->
				      let <Section> =
					  %% Line 693
					  call 'string':'substr'
					      (Name, 6)
				      in  let <_cor4> =
					      %% Line 694
					      call 'erlang':'-'
						  (Size, 5)
					  in  %% Line 694
					      apply 'fix_names'/2
						  (Names, [{Section,_cor4}|%% Line 695
									   [T|_cor0]])
				  %% Line 697
				  <> when 'true' ->
				      %% Line 698
				      apply 'fix_names'/2
					  (Names, [T|_cor0])
				end
			%% Line 700
			<'false'> when 'true' ->
			    let <_cor6> =
				%% Line 701
				call 'string':'str'
				    (Name, [46|[114|[101|[108]]]])
			    in  %% Line 701
				case <> of
				  %% Line 702
				  <>
				      when call 'erlang':'=:='
					    (_cor6,
					     1) ->
				      let <Section> =
					  %% Line 703
					  call 'string':'substr'
					      (Name, 5)
				      in  let <_cor8> =
					      %% Line 704
					      call 'erlang':'-'
						  (Size, 4)
					  in  %% Line 704
					      apply 'fix_names'/2
						  (Names, [{Section,_cor8}|%% Line 705
									   [T|_cor0]])
				  %% Line 707
				  <> when 'true' ->
				      %% Line 708
				      apply 'fix_names'/2
					  (Names, [T|_cor0])
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_5352})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'fix_names',2}}] )
	    -| ['compiler_generated'] )
	end
'bin_reverse'/2 =
    %% Line 720
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{}#,Acc> when 'true' ->
	      _cor0
	  %% Line 722
	  <#{#<Head>(8,1,'integer',['unsigned'|['big']]),
	     #<More>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 723
		  #{#<Head>(8,1,'integer',['unsigned'|['big']]),
		    #<_cor0>('all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 723
		  apply 'bin_reverse'/2
		      (More, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1,_cor0})
		      -| [{'function_name',{'bin_reverse',2}}] )
	    -| ['compiler_generated'] )
	end
'bin_get_string'/1 =
    %% Line 728
    fun (_cor0) ->
	%% Line 729
	apply 'bin_get_string'/2
	    (_cor0, #{}#)
'bin_get_string'/2 =
    %% Line 731
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{}#,BinAcc> when 'true' ->
	      case _cor0 of
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor0) ->
		    let <Bin> =
			apply 'bin_reverse'/2
			    (_cor0, #{}#)
		    in  let <_cor3> =
			    %% Line 733
			    call 'erlang':'binary_to_list'
				(Bin)
			in  %% Line 733
			    {_cor3,#{}#}
		( <_150> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 734
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<MoreBin>('all',8,'binary',['unsigned'|['big']])}#,BinAcc> when 'true' ->
	      case _cor0 of
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor0) ->
		    let <Bin> =
			apply 'bin_reverse'/2
			    (_cor0, #{}#)
		    in  let <_cor5> =
			    %% Line 736
			    call 'erlang':'binary_to_list'
				(Bin)
			in  %% Line 736
			    {_cor5,MoreBin}
		( <_4885> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 737
	  <#{#<Letter>(8,1,'integer',['unsigned'|['big']]),
	     #<Tail>('all',8,'binary',['unsigned'|['big']])}#,BinAcc> when 'true' ->
	      let <_cor6> =
		  %% Line 738
		  #{#<Letter>(8,1,'integer',['unsigned'|['big']]),
		    #<_cor0>('all',8,'binary',['unsigned'|['big']])}#
	      in  %% Line 738
		  apply 'bin_get_string'/2
		      (Tail, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1,_cor0})
		      -| [{'function_name',{'bin_get_string',2}}] )
	    -| ['compiler_generated'] )
	end
'make_offsets_from_sizes'/3 =
    %% Line 746
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor8,Acc> when 'true' ->
	      %% Line 747
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 748
	  <[Size|Sizes],Cur,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 749
		  call 'erlang':'+'
		      (Size, _cor1)
	      in  let <_cor4> =
		      %% Line 749
		      call 'erlang':'+'
			  (_cor3, 1)
		  in  %% Line 749
		      apply 'make_offsets_from_sizes'/3
			  (Sizes, _cor4, [_cor1|_cor0])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'make_offsets_from_sizes',3}}] )
	    -| ['compiler_generated'] )
	end
'leb128_decode'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	%% Line 764
	case ( _cor2
	       -| ['reuse_for_context'] ) of
	  <#{#<Sentinel>(1,1,'binary',['unsigned'|['big']]),
	     #<NextBundle>(7,1,'binary',['unsigned'|['big']]),
	     #<MoreLebNums>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 765
	      case ( Sentinel
		     -| ['reuse_for_context'] ) of
		%% Line 766
		<#{#<1>(1,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor5> =
			%% Line 767
			call 'erlang':'+'
			    (_cor1, 7)
		    in  let <_cor4> =
			    %% Line 767
			    #{#<NextBundle>(7,1,'binary',['unsigned'|['big']]),
			      #<_cor0>('all',1,'binary',['unsigned'|['big']])}#
			in  %% Line 767
			    apply 'leb128_decode'/3
				(MoreLebNums, _cor5, _cor4)
		%% Line 768
		<#{#<0>(1,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <Size> =
			%% Line 769
			call 'erlang':'+'
			    (_cor1, 7)
		    in  let <_3212> =
			    %% Line 770
			    #{#<NextBundle>(7,1,'binary',['unsigned'|['big']]),
			      #<_cor0>('all',1,'binary',['unsigned'|['big']])}#
			in  %% Line 770
			    case ( _3212
				   -| ['reuse_for_context'] ) of
			      <#{#<Num>(Size,1,'integer',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 771
				  {Num,MoreLebNums}
			      ( <_cor7> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_3212)
					primop 'match_fail'
					    ({'badmatch',_3212})
				-| ['compiler_generated'] )
			    end
		( <_cor8> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (Sentinel)
			  primop 'match_fail'
			      ({'case_clause',Sentinel})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor2)
		    primop 'match_fail'
			({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'set_architecture_flag'/1 =
    %% Line 777
    fun (_cor0) ->
	let <_2022> =
	    %% Line 780
	    apply 'get_binary_segment'/3
		(_cor0, 0, 64)
	in  %% Line 780
	    case ( _2022
		   -| ['reuse_for_context'] ) of
	      <#{#<127>(8,1,'integer',['unsigned'|['big']]),
		 #<69>(8,1,'integer',['unsigned'|['big']]),
		 #<76>(8,1,'integer',['unsigned'|['big']]),
		 #<70>(8,1,'integer',['unsigned'|['big']]),
		 #<EI_Class>(8,1,'integer',['unsigned'|['big']]),
		 #<_X_MoreHeader>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  do  %% Line 781
		      call 'erlang':'put'
			  ('elf_class', EI_Class)
		      %% Line 782
		      'ok'
	      ( <_cor15> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (_2022)
			primop 'match_fail'
			    ({'badmatch',_2022})
		-| ['compiler_generated'] )
	    end
'is64bit'/0 =
    %% Line 786
    fun () ->
	let <_367> =
	    %% Line 787
	    call 'erlang':'get'
		('elf_class')
	in  %% Line 787
	    case _367 of
	      %% Line 788
	      <2> when 'true' ->
		  'true'
	      %% Line 789
	      <1> when 'true' ->
		  'false'
	      ( <_cor0> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_367})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('elf_format')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('elf_format', _cor0)
end