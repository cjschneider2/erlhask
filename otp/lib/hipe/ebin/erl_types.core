module 'erl_types' ['any_none'/1,
		    'any_none_or_unit'/1,
		    'atom_to_string'/1,
		    'is_erl_type'/1,
		    'is_opaque_type'/2,
		    'lift_list_to_pos_empty'/1,
		    'lookup_record'/3,
		    'max'/2,
		    'min'/2,
		    'module_builtin_opaques'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'number_max'/1,
		    'number_max'/2,
		    'number_min'/1,
		    'number_min'/2,
		    'record_field_diffs_to_string'/2,
		    'subst_all_remote'/2,
		    'subst_all_vars_to_any'/1,
		    't_abstract_records'/2,
		    't_any'/0,
		    't_arity'/0,
		    't_atom'/0,
		    't_atom'/1,
		    't_atom_vals'/1,
		    't_atom_vals'/2,
		    't_atoms'/1,
		    't_binary'/0,
		    't_bitstr'/0,
		    't_bitstr'/2,
		    't_bitstr_base'/1,
		    't_bitstr_concat'/1,
		    't_bitstr_concat'/2,
		    't_bitstr_match'/2,
		    't_bitstr_unit'/1,
		    't_bitstrlist'/0,
		    't_boolean'/0,
		    't_byte'/0,
		    't_char'/0,
		    't_collect_vars'/1,
		    't_cons'/0,
		    't_cons'/2,
		    't_cons_hd'/1,
		    't_cons_hd'/2,
		    't_cons_tl'/1,
		    't_cons_tl'/2,
		    't_constant'/0,
		    't_contains_opaque'/1,
		    't_contains_opaque'/2,
		    't_decorate_with_opaque'/3,
		    't_elements'/1,
		    't_find_opaque_mismatch'/3,
		    't_find_unknown_opaque'/3,
		    't_fixnum'/0,
		    't_float'/0,
		    't_form_to_string'/1,
		    't_from_form'/1,
		    't_from_form'/2,
		    't_from_form'/3,
		    't_from_range'/2,
		    't_from_range_unsafe'/2,
		    't_from_term'/1,
		    't_fun'/0,
		    't_fun'/1,
		    't_fun'/2,
		    't_fun_args'/1,
		    't_fun_args'/2,
		    't_fun_arity'/1,
		    't_fun_arity'/2,
		    't_fun_range'/1,
		    't_fun_range'/2,
		    't_has_opaque_subtype'/2,
		    't_has_var'/1,
		    't_identifier'/0,
		    't_inf'/1,
		    't_inf'/2,
		    't_inf'/3,
		    't_inf_lists'/2,
		    't_inf_lists'/3,
		    't_integer'/0,
		    't_integer'/1,
		    't_integers'/1,
		    't_iodata'/0,
		    't_iolist'/0,
		    't_is_any'/1,
		    't_is_any_atom'/2,
		    't_is_any_atom'/3,
		    't_is_atom'/1,
		    't_is_atom'/2,
		    't_is_binary'/1,
		    't_is_binary'/2,
		    't_is_bitstr'/1,
		    't_is_bitstr'/2,
		    't_is_bitwidth'/1,
		    't_is_boolean'/1,
		    't_is_boolean'/2,
		    't_is_cons'/1,
		    't_is_cons'/2,
		    't_is_constant'/1,
		    't_is_equal'/2,
		    't_is_fixnum'/1,
		    't_is_float'/1,
		    't_is_float'/2,
		    't_is_fun'/1,
		    't_is_fun'/2,
		    't_is_instance'/2,
		    't_is_integer'/1,
		    't_is_integer'/2,
		    't_is_list'/1,
		    't_is_map'/1,
		    't_is_map'/2,
		    't_is_matchstate'/1,
		    't_is_maybe_improper_list'/1,
		    't_is_maybe_improper_list'/2,
		    't_is_nil'/1,
		    't_is_nil'/2,
		    't_is_non_neg_integer'/1,
		    't_is_none'/1,
		    't_is_none_or_unit'/1,
		    't_is_number'/1,
		    't_is_number'/2,
		    't_is_opaque'/1,
		    't_is_opaque'/2,
		    't_is_pid'/1,
		    't_is_pid'/2,
		    't_is_port'/1,
		    't_is_port'/2,
		    't_is_reference'/1,
		    't_is_reference'/2,
		    't_is_remote'/1,
		    't_is_string'/1,
		    't_is_subtype'/2,
		    't_is_tuple'/1,
		    't_is_tuple'/2,
		    't_is_unit'/1,
		    't_is_var'/1,
		    't_limit'/2,
		    't_list'/0,
		    't_list'/1,
		    't_list_elements'/1,
		    't_list_elements'/2,
		    't_list_termination'/1,
		    't_map'/0,
		    't_map'/1,
		    't_map'/2,
		    't_matchstate'/0,
		    't_matchstate'/2,
		    't_matchstate_present'/1,
		    't_matchstate_slot'/2,
		    't_matchstate_slots'/1,
		    't_matchstate_update_present'/2,
		    't_matchstate_update_slot'/3,
		    't_maybe_improper_list'/0,
		    't_mfa'/0,
		    't_module'/0,
		    't_nil'/0,
		    't_node'/0,
		    't_non_neg_fixnum'/0,
		    't_non_neg_integer'/0,
		    't_none'/0,
		    't_nonempty_list'/0,
		    't_nonempty_list'/1,
		    't_nonempty_string'/0,
		    't_number'/0,
		    't_number'/1,
		    't_number_vals'/1,
		    't_number_vals'/2,
		    't_opaque_from_records'/1,
		    't_opaque_structure'/1,
		    't_pid'/0,
		    't_port'/0,
		    't_pos_fixnum'/0,
		    't_pos_integer'/0,
		    't_product'/1,
		    't_reference'/0,
		    't_remote'/3,
		    't_solve_remote'/3,
		    't_string'/0,
		    't_struct_from_opaque'/2,
		    't_subst'/2,
		    't_subtract'/2,
		    't_subtract_list'/2,
		    't_sup'/1,
		    't_sup'/2,
		    't_tid'/0,
		    't_timeout'/0,
		    't_to_string'/1,
		    't_to_string'/2,
		    't_to_tlist'/1,
		    't_tuple'/0,
		    't_tuple'/1,
		    't_tuple_args'/1,
		    't_tuple_args'/2,
		    't_tuple_size'/1,
		    't_tuple_size'/2,
		    't_tuple_sizes'/1,
		    't_tuple_subtypes'/1,
		    't_tuple_subtypes'/2,
		    't_unify'/2,
		    't_unit'/0,
		    't_unopaque'/1,
		    't_unopaque'/2,
		    't_var'/1,
		    't_var_name'/1,
		    'type_is_defined'/4]
    attributes [%% Line 232
		'export_type' =
		    %% Line 232
		    [{'erl_type',0}|[{'type_table',0}|[{'var_table',0}]]],
		%% Line 286
		'type' =
		    %% Line 286
		    [{'tag',{'type',286,'union',[{'atom',286,'atom'}|[{'atom',286,'binary'}|[{'atom',286,'function'}|[{'atom',286,'identifier'}|[{'atom',287,'list'}|[{'atom',287,'map'}|[{'atom',287,'matchstate'}|[{'atom',287,'nil'}|[{'atom',287,'number'}|[{'atom',288,'opaque'}|[{'atom',288,'product'}|[{'atom',288,'remote'}|[{'atom',289,'tuple'}|[{'atom',289,'tuple_set'}|[{'atom',289,'union'}|[{'atom',289,'var'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 299
		'type' =
		    %% Line 299
		    [{'qual',{'type',299,'union',[{'atom',299,'float'}|[{'atom',299,'integer'}|[{'atom',299,'nonempty'}|[{'atom',299,'pid'}|[{'atom',300,'port'}|[{'atom',300,'reference'}|[{'atom',300,'unknown'}|[{'type',300,'tuple',[{'var',300,'_'}|[{'var',300,'_'}]]}]]]]]]]]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{{'record','c'},[{'typed_record_field',{'record_field',310,{'atom',310,'tag'}},{'type',310,'union',[{'atom',310,'undefined'}|[{'type',310,'tag',[]}]]}}|[{'typed_record_field',{'record_field',311,{'atom',311,'elements'},{'nil',311}},{'type',311,'term',[]}}|[{'typed_record_field',{'record_field',312,{'atom',312,'qualifier'},{'atom',312,'unknown'}},{'type',312,'qual',[]}}]]],[]}],
		%% Line 314
		'opaque' =
		    %% Line 314
		    [{'erl_type',{'type',314,'union',[{'atom',314,'any'}|[{'atom',314,'none'}|[{'atom',314,'unit'}|[{'type',314,'record',[{'atom',314,'c'}]}]]]]},[]}],
		%% Line 320
		'type' =
		    %% Line 320
		    [{'parse_form',{'type',320,'union',[{'type',320,'tuple',[{'type',320,'atom',[]}|[{'var',320,'_'}|[{'var',320,'_'}]]]}|[{'type',320,'tuple',[{'type',320,'atom',[]}|[{'var',320,'_'}|[{'var',320,'_'}|[{'var',320,'_'}]]]]}|[{'type',320,'tuple',[{'atom',320,'op'}|[{'var',320,'_'}|[{'var',320,'_'}|[{'var',320,'_'}|[{'var',320,'_'}]]]]]}]]]},[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'rng_elem',{'type',321,'union',[{'atom',321,'pos_inf'}|[{'atom',321,'neg_inf'}|[{'type',321,'integer',[]}]]]},[]}],
		%% Line 323
		'type' =
		    %% Line 323
		    [{{'record','int_set'},[{'typed_record_field',{'record_field',323,{'atom',323,'set'}},{'type',323,'union',[{'atom',323,'undefined'}|[{'type',323,'list',[{'type',323,'integer',[]}]}]]}}],[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{{'record','int_rng'},[{'typed_record_field',{'record_field',324,{'atom',324,'from'}},{'type',324,'union',[{'atom',324,'undefined'}|[{'type',324,'rng_elem',[]}]]}}|[{'typed_record_field',{'record_field',324,{'atom',324,'to'}},{'type',324,'union',[{'atom',324,'undefined'}|[{'type',324,'rng_elem',[]}]]}}]],[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','opaque'},[{'typed_record_field',{'record_field',328,{'atom',328,'mod'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'module',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'name'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'atom',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'args'},{'nil',329}},{'type',329,'list',[{'type',329,'erl_type',[]}]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'struct'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'erl_type',[]}]]}}]]]],[]}],
		%% Line 330
		'type' =
		    %% Line 330
		    [{{'record','remote'},[{'typed_record_field',{'record_field',330,{'atom',330,'mod'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'module',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'name'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'atom',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'args'},{'nil',330}},{'type',330,'list',[{'type',330,'erl_type',[]}]}}]]],[]}],
		%% Line 365
		'type' =
		    %% Line 365
		    [{'opaques',{'type',365,'union',[{'type',365,'list',[{'type',365,'erl_type',[]}]}|[{'atom',365,'universe'}]]},[]}],
		%% Line 367
		'type' =
		    %% Line 367
		    [{'record_key',{'type',367,'tuple',[{'atom',367,'record'}|[{'type',367,'atom',[]}]]},[]}],
		%% Line 368
		'type' =
		    %% Line 368
		    [{'type_key',{'type',368,'tuple',[{'type',368,'union',[{'atom',368,'type'}|[{'atom',368,'opaque'}]]}|[{'type',368,'atom',[]}|[{'type',368,'arity',[]}]]]},[]}],
		%% Line 369
		'type' =
		    %% Line 369
		    [{'record_value',{'remote_type',369,[{'atom',369,'orddict'}|[{'atom',369,'orddict'}|[[]]]]},[]}],
		%% Line 370
		'type' =
		    %% Line 370
		    [{'type_value',{'type',370,'tuple',[{'type',370,'module',[]}|[{'type',370,'erl_type',[]}|[{'type',370,'atom',[]}]]]},[]}],
		%% Line 371
		'type' =
		    %% Line 371
		    [{'type_table',{'type',371,'union',[{'remote_type',371,[{'atom',371,'dict'}|[{'atom',371,'dict'}|[[{'type',371,'record_key',[]}|[{'type',371,'record_value',[]}]]]]]}|[{'remote_type',372,[{'atom',372,'dict'}|[{'atom',372,'dict'}|[[{'type',372,'type_key',[]}|[{'type',372,'type_value',[]}]]]]]}]]},[]}],
		%% Line 374
		'type' =
		    %% Line 374
		    [{'var_table',{'remote_type',374,[{'atom',374,'dict'}|[{'atom',374,'dict'}|[[{'type',374,'atom',[]}|[{'type',374,'erl_type',[]}]]]]]},[]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'t_any',0},[{'type',408,'fun',[{'type',408,'product',[]}|[{'type',408,'erl_type',[]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'t_is_any',1},[{'type',413,'fun',[{'type',413,'product',[{'type',413,'erl_type',[]}]}|[{'type',413,'boolean',[]}]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'t_none',0},[{'type',421,'fun',[{'type',421,'product',[]}|[{'type',421,'erl_type',[]}]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'t_is_none',1},[{'type',426,'fun',[{'type',426,'product',[{'type',426,'erl_type',[]}]}|[{'type',426,'boolean',[]}]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'t_opaque',4},[{'type',435,'fun',[{'type',435,'product',[{'type',435,'module',[]}|[{'type',435,'atom',[]}|[{'type',435,'list',[{'var',435,'_'}]}|[{'type',435,'erl_type',[]}]]]]}|[{'type',435,'erl_type',[]}]]}]}],
		%% Line 441
		'spec' =
		    %% Line 441
		    [{{'t_is_opaque',2},[{'type',441,'fun',[{'type',441,'product',[{'type',441,'erl_type',[]}|[{'type',441,'list',[{'type',441,'erl_type',[]}]}]]}|[{'type',441,'boolean',[]}]]}]}],
		%% Line 447
		'spec' =
		    %% Line 447
		    [{{'t_is_opaque',1},[{'type',447,'fun',[{'type',447,'product',[{'type',447,'erl_type',[]}]}|[{'type',447,'boolean',[]}]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'t_has_opaque_subtype',2},[{'type',452,'fun',[{'type',452,'product',[{'type',452,'erl_type',[]}|[{'type',452,'opaques',[]}]]}|[{'type',452,'boolean',[]}]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'t_opaque_structure',1},[{'type',462,'fun',[{'type',462,'product',[{'type',462,'erl_type',[]}]}|[{'type',462,'erl_type',[]}]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'t_opaque_modules',1},[{'type',467,'fun',[{'type',467,'product',[{'type',467,'erl_type',[]}]}|[{'type',467,'list',[{'type',467,'module',[]}]}]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'t_contains_opaque',1},[{'type',477,'fun',[{'type',477,'product',[{'type',477,'erl_type',[]}]}|[{'type',477,'boolean',[]}]]}]}],
		%% Line 485
		'spec' =
		    %% Line 485
		    [{{'t_contains_opaque',2},[{'type',485,'fun',[{'type',485,'product',[{'type',485,'erl_type',[]}|[{'type',485,'list',[{'type',485,'erl_type',[]}]}]]}|[{'type',485,'boolean',[]}]]}]}],
		%% Line 522
		'spec' =
		    %% Line 522
		    [{{'list_contains_opaque',2},[{'type',522,'fun',[{'type',522,'product',[{'type',522,'list',[{'type',522,'erl_type',[]}]}|[{'type',522,'list',[{'type',522,'erl_type',[]}]}]]}|[{'type',522,'boolean',[]}]]}]}],
		%% Line 533
		'spec' =
		    %% Line 533
		    [{{'t_find_opaque_mismatch',3},[{'type',533,'fun',[{'type',533,'product',[{'type',533,'erl_type',[]}|[{'type',533,'erl_type',[]}|[{'type',533,'list',[{'type',533,'erl_type',[]}]}]]]}|[{'type',534,'union',[{'atom',534,'error'}|[{'type',534,'tuple',[{'atom',534,'ok'}|[{'type',534,'erl_type',[]}|[{'type',534,'erl_type',[]}]]]}]]}]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'t_find_unknown_opaque',3},[{'type',587,'fun',[{'type',587,'product',[{'type',587,'erl_type',[]}|[{'type',587,'erl_type',[]}|[{'type',587,'opaques',[]}]]]}|[{'type',588,'list',[{'type',588,'pos_integer',[]}]}]]}]}],
		%% Line 603
		'spec' =
		    %% Line 603
		    [{{'t_decorate_with_opaque',3},[{'type',603,'fun',[{'type',603,'product',[{'type',603,'erl_type',[]}|[{'type',603,'erl_type',[]}|[{'type',603,'list',[{'type',603,'erl_type',[]}]}]]]}|[{'type',603,'erl_type',[]}]]}]}],
		%% Line 684
		'spec' =
		    %% Line 684
		    [{{'list_decorate',3},[{'type',684,'fun',[{'type',684,'product',[{'type',684,'list',[{'type',684,'erl_type',[]}]}|[{'type',684,'list',[{'type',684,'erl_type',[]}]}|[{'type',684,'opaques',[]}]]]}|[{'type',684,'list',[{'type',684,'erl_type',[]}]}]]}]}],
		%% Line 749
		'spec' =
		    %% Line 749
		    [{{'t_opaque_from_records',1},[{'type',749,'fun',[{'type',749,'product',[{'type',749,'type_table',[]}]}|[{'type',749,'list',[{'type',749,'erl_type',[]}]}]]}]}],
		%% Line 773
		'spec' =
		    %% Line 773
		    [{{'t_struct_from_opaque',2},[{'type',773,'fun',[{'type',773,'product',[{'type',773,'erl_type',[]}|[{'type',773,'list',[{'type',773,'erl_type',[]}]}]]}|[{'type',773,'erl_type',[]}]]}]}],
		%% Line 802
		'spec' =
		    %% Line 802
		    [{{'module_builtin_opaques',1},[{'type',802,'fun',[{'type',802,'product',[{'type',802,'module',[]}]}|[{'type',802,'list',[{'type',802,'erl_type',[]}]}]]}]}],
		%% Line 811
		'spec' =
		    %% Line 811
		    [{{'t_remote',3},[{'type',811,'fun',[{'type',811,'product',[{'type',811,'atom',[]}|[{'type',811,'atom',[]}|[{'type',811,'list',[{'type',811,'erl_type',[]}]}]]]}|[{'type',811,'erl_type',[]}]]}]}],
		%% Line 816
		'spec' =
		    %% Line 816
		    [{{'t_is_remote',1},[{'type',816,'fun',[{'type',816,'product',[{'type',816,'erl_type',[]}]}|[{'type',816,'boolean',[]}]]}]}],
		%% Line 824
		'type' =
		    %% Line 824
		    [{'mod_records',{'remote_type',824,[{'atom',824,'dict'}|[{'atom',824,'dict'}|[[{'type',824,'module',[]}|[{'type',824,'type_table',[]}]]]]]},[]}],
		%% Line 826
		'spec' =
		    %% Line 826
		    [{{'t_solve_remote',3},[{'type',826,'fun',[{'type',826,'product',[{'type',826,'erl_type',[]}|[{'remote_type',826,[{'atom',826,'sets'}|[{'atom',826,'set'}|[[{'type',826,'mfa',[]}]]]]}|[{'type',826,'mod_records',[]}]]]}|[{'type',826,'erl_type',[]}]]}]}],
		%% Line 958
		'spec' =
		    %% Line 958
		    [{{'t_unit',0},[{'type',958,'fun',[{'type',958,'product',[]}|[{'type',958,'erl_type',[]}]]}]}],
		%% Line 963
		'spec' =
		    %% Line 963
		    [{{'t_is_unit',1},[{'type',963,'fun',[{'type',963,'product',[{'type',963,'erl_type',[]}]}|[{'type',963,'boolean',[]}]]}]}],
		%% Line 968
		'spec' =
		    %% Line 968
		    [{{'t_is_none_or_unit',1},[{'type',968,'fun',[{'type',968,'product',[{'type',968,'erl_type',[]}]}|[{'type',968,'boolean',[]}]]}]}],
		%% Line 978
		'spec' =
		    %% Line 978
		    [{{'t_atom',0},[{'type',978,'fun',[{'type',978,'product',[]}|[{'type',978,'erl_type',[]}]]}]}],
		%% Line 983
		'spec' =
		    %% Line 983
		    [{{'t_atom',1},[{'type',983,'fun',[{'type',983,'product',[{'type',983,'atom',[]}]}|[{'type',983,'erl_type',[]}]]}]}],
		%% Line 988
		'spec' =
		    %% Line 988
		    [{{'t_atoms',1},[{'type',988,'fun',[{'type',988,'product',[{'type',988,'list',[{'type',988,'atom',[]}]}]}|[{'type',988,'erl_type',[]}]]}]}],
		%% Line 993
		'spec' =
		    %% Line 993
		    [{{'t_atom_vals',1},[{'type',993,'fun',[{'type',993,'product',[{'type',993,'erl_type',[]}]}|[{'type',993,'union',[{'atom',993,'unknown'}|[{'type',993,'nonempty_list',[{'type',993,'atom',[]}]}]]}]]}]}],
		%% Line 998
		'spec' =
		    %% Line 998
		    [{{'t_atom_vals',2},[{'type',998,'fun',[{'type',998,'product',[{'type',998,'erl_type',[]}|[{'type',998,'opaques',[]}]]}|[{'type',998,'union',[{'atom',998,'unknown'}|[{'type',998,'nonempty_list',[{'type',998,'atom',[]}]}]]}]]}]}],
		%% Line 1010
		'spec' =
		    %% Line 1010
		    [{{'t_is_atom',1},[{'type',1010,'fun',[{'type',1010,'product',[{'type',1010,'erl_type',[]}]}|[{'type',1010,'boolean',[]}]]}]}],
		%% Line 1015
		'spec' =
		    %% Line 1015
		    [{{'t_is_atom',2},[{'type',1015,'fun',[{'type',1015,'product',[{'type',1015,'erl_type',[]}|[{'type',1015,'opaques',[]}]]}|[{'type',1015,'boolean',[]}]]}]}],
		%% Line 1023
		'spec' =
		    %% Line 1023
		    [{{'t_is_any_atom',2},[{'type',1023,'fun',[{'type',1023,'product',[{'type',1023,'atom',[]}|[{'type',1023,'erl_type',[]}]]}|[{'type',1023,'boolean',[]}]]}]}],
		%% Line 1028
		'spec' =
		    %% Line 1028
		    [{{'t_is_any_atom',3},[{'type',1028,'fun',[{'type',1028,'product',[{'type',1028,'atom',[]}|[{'type',1028,'erl_type',[]}|[{'type',1028,'opaques',[]}]]]}|[{'type',1028,'boolean',[]}]]}]}],
		%% Line 1041
		'spec' =
		    %% Line 1041
		    [{{'t_is_boolean',1},[{'type',1041,'fun',[{'type',1041,'product',[{'type',1041,'erl_type',[]}]}|[{'type',1041,'boolean',[]}]]}]}],
		%% Line 1046
		'spec' =
		    %% Line 1046
		    [{{'t_is_boolean',2},[{'type',1046,'fun',[{'type',1046,'product',[{'type',1046,'erl_type',[]}|[{'type',1046,'opaques',[]}]]}|[{'type',1046,'boolean',[]}]]}]}],
		%% Line 1051
		'spec' =
		    %% Line 1051
		    [{{'t_boolean',0},[{'type',1051,'fun',[{'type',1051,'product',[]}|[{'type',1051,'erl_type',[]}]]}]}],
		%% Line 1069
		'spec' =
		    %% Line 1069
		    [{{'t_binary',0},[{'type',1069,'fun',[{'type',1069,'product',[]}|[{'type',1069,'erl_type',[]}]]}]}],
		%% Line 1074
		'spec' =
		    %% Line 1074
		    [{{'t_is_binary',1},[{'type',1074,'fun',[{'type',1074,'product',[{'type',1074,'erl_type',[]}]}|[{'type',1074,'boolean',[]}]]}]}],
		%% Line 1079
		'spec' =
		    %% Line 1079
		    [{{'t_is_binary',2},[{'type',1079,'fun',[{'type',1079,'product',[{'type',1079,'erl_type',[]}|[{'type',1079,'opaques',[]}]]}|[{'type',1079,'boolean',[]}]]}]}],
		%% Line 1092
		'spec' =
		    %% Line 1092
		    [{{'t_bitstr',0},[{'type',1092,'fun',[{'type',1092,'product',[]}|[{'type',1092,'erl_type',[]}]]}]}],
		%% Line 1097
		'spec' =
		    %% Line 1097
		    [{{'t_bitstr',2},[{'type',1097,'fun',[{'type',1097,'product',[{'type',1097,'non_neg_integer',[]}|[{'type',1097,'non_neg_integer',[]}]]}|[{'type',1097,'erl_type',[]}]]}]}],
		%% Line 1110
		'spec' =
		    %% Line 1110
		    [{{'t_bitstr_unit',1},[{'type',1110,'fun',[{'type',1110,'product',[{'type',1110,'erl_type',[]}]}|[{'type',1110,'non_neg_integer',[]}]]}]}],
		%% Line 1114
		'spec' =
		    %% Line 1114
		    [{{'t_bitstr_base',1},[{'type',1114,'fun',[{'type',1114,'product',[{'type',1114,'erl_type',[]}]}|[{'type',1114,'non_neg_integer',[]}]]}]}],
		%% Line 1118
		'spec' =
		    %% Line 1118
		    [{{'t_bitstr_concat',1},[{'type',1118,'fun',[{'type',1118,'product',[{'type',1118,'list',[{'type',1118,'erl_type',[]}]}]}|[{'type',1118,'erl_type',[]}]]}]}],
		%% Line 1128
		'spec' =
		    %% Line 1128
		    [{{'t_bitstr_concat',2},[{'type',1128,'fun',[{'type',1128,'product',[{'type',1128,'erl_type',[]}|[{'type',1128,'erl_type',[]}]]}|[{'type',1128,'erl_type',[]}]]}]}],
		%% Line 1135
		'spec' =
		    %% Line 1135
		    [{{'t_bitstr_match',2},[{'type',1135,'fun',[{'type',1135,'product',[{'type',1135,'erl_type',[]}|[{'type',1135,'erl_type',[]}]]}|[{'type',1135,'erl_type',[]}]]}]}],
		%% Line 1142
		'spec' =
		    %% Line 1142
		    [{{'t_is_bitstr',1},[{'type',1142,'fun',[{'type',1142,'product',[{'type',1142,'erl_type',[]}]}|[{'type',1142,'boolean',[]}]]}]}],
		%% Line 1147
		'spec' =
		    %% Line 1147
		    [{{'t_is_bitstr',2},[{'type',1147,'fun',[{'type',1147,'product',[{'type',1147,'erl_type',[]}|[{'type',1147,'opaques',[]}]]}|[{'type',1147,'boolean',[]}]]}]}],
		%% Line 1159
		'spec' =
		    %% Line 1159
		    [{{'t_matchstate',0},[{'type',1159,'fun',[{'type',1159,'product',[]}|[{'type',1159,'erl_type',[]}]]}]}],
		%% Line 1164
		'spec' =
		    %% Line 1164
		    [{{'t_matchstate',2},[{'type',1164,'fun',[{'type',1164,'product',[{'type',1164,'erl_type',[]}|[{'type',1164,'non_neg_integer',[]}]]}|[{'type',1164,'erl_type',[]}]]}]}],
		%% Line 1172
		'spec' =
		    %% Line 1172
		    [{{'t_is_matchstate',1},[{'type',1172,'fun',[{'type',1172,'product',[{'type',1172,'erl_type',[]}]}|[{'type',1172,'boolean',[]}]]}]}],
		%% Line 1177
		'spec' =
		    %% Line 1177
		    [{{'t_matchstate_present',1},[{'type',1177,'fun',[{'type',1177,'product',[{'type',1177,'erl_type',[]}]}|[{'type',1177,'erl_type',[]}]]}]}],
		%% Line 1185
		'spec' =
		    %% Line 1185
		    [{{'t_matchstate_slot',2},[{'type',1185,'fun',[{'type',1185,'product',[{'type',1185,'erl_type',[]}|[{'type',1185,'non_neg_integer',[]}]]}|[{'type',1185,'erl_type',[]}]]}]}],
		%% Line 1201
		'spec' =
		    %% Line 1201
		    [{{'t_matchstate_slots',1},[{'type',1201,'fun',[{'type',1201,'product',[{'type',1201,'erl_type',[]}]}|[{'type',1201,'erl_type',[]}]]}]}],
		%% Line 1206
		'spec' =
		    %% Line 1206
		    [{{'t_matchstate_update_present',2},[{'type',1206,'fun',[{'type',1206,'product',[{'type',1206,'erl_type',[]}|[{'type',1206,'erl_type',[]}]]}|[{'type',1206,'erl_type',[]}]]}]}],
		%% Line 1215
		'spec' =
		    %% Line 1215
		    [{{'t_matchstate_update_slot',3},[{'type',1215,'fun',[{'type',1215,'product',[{'type',1215,'erl_type',[]}|[{'type',1215,'erl_type',[]}|[{'type',1215,'non_neg_integer',[]}]]]}|[{'type',1215,'erl_type',[]}]]}]}],
		%% Line 1245
		'spec' =
		    %% Line 1245
		    [{{'t_fun',0},[{'type',1245,'fun',[{'type',1245,'product',[]}|[{'type',1245,'erl_type',[]}]]}]}],
		%% Line 1250
		'spec' =
		    %% Line 1250
		    [{{'t_fun',1},[{'type',1250,'fun',[{'type',1250,'product',[{'type',1250,'erl_type',[]}]}|[{'type',1250,'erl_type',[]}]]}]}],
		%% Line 1255
		'spec' =
		    %% Line 1255
		    [{{'t_fun',2},[{'type',1255,'fun',[{'type',1255,'product',[{'type',1255,'union',[{'type',1255,'list',[{'type',1255,'erl_type',[]}]}|[{'type',1255,'arity',[]}]]}|[{'type',1255,'erl_type',[]}]]}|[{'type',1255,'erl_type',[]}]]}]}],
		%% Line 1262
		'spec' =
		    %% Line 1262
		    [{{'t_fun_args',1},[{'type',1262,'fun',[{'type',1262,'product',[{'type',1262,'erl_type',[]}]}|[{'type',1262,'union',[{'atom',1262,'unknown'}|[{'type',1262,'list',[{'type',1262,'erl_type',[]}]}]]}]]}]}],
		%% Line 1267
		'spec' =
		    %% Line 1267
		    [{{'t_fun_args',2},[{'type',1267,'fun',[{'type',1267,'product',[{'type',1267,'erl_type',[]}|[{'type',1267,'opaques',[]}]]}|[{'type',1267,'union',[{'atom',1267,'unknown'}|[{'type',1267,'list',[{'type',1267,'erl_type',[]}]}]]}]]}]}],
		%% Line 1277
		'spec' =
		    %% Line 1277
		    [{{'t_fun_arity',1},[{'type',1277,'fun',[{'type',1277,'product',[{'type',1277,'erl_type',[]}]}|[{'type',1277,'union',[{'atom',1277,'unknown'}|[{'type',1277,'non_neg_integer',[]}]]}]]}]}],
		%% Line 1282
		'spec' =
		    %% Line 1282
		    [{{'t_fun_arity',2},[{'type',1282,'fun',[{'type',1282,'product',[{'type',1282,'erl_type',[]}|[{'type',1282,'opaques',[]}]]}|[{'type',1282,'union',[{'atom',1282,'unknown'}|[{'type',1282,'non_neg_integer',[]}]]}]]}]}],
		%% Line 1292
		'spec' =
		    %% Line 1292
		    [{{'t_fun_range',1},[{'type',1292,'fun',[{'type',1292,'product',[{'type',1292,'erl_type',[]}]}|[{'type',1292,'erl_type',[]}]]}]}],
		%% Line 1297
		'spec' =
		    %% Line 1297
		    [{{'t_fun_range',2},[{'type',1297,'fun',[{'type',1297,'product',[{'type',1297,'erl_type',[]}|[{'type',1297,'opaques',[]}]]}|[{'type',1297,'erl_type',[]}]]}]}],
		%% Line 1305
		'spec' =
		    %% Line 1305
		    [{{'t_is_fun',1},[{'type',1305,'fun',[{'type',1305,'product',[{'type',1305,'erl_type',[]}]}|[{'type',1305,'boolean',[]}]]}]}],
		%% Line 1310
		'spec' =
		    %% Line 1310
		    [{{'t_is_fun',2},[{'type',1310,'fun',[{'type',1310,'product',[{'type',1310,'erl_type',[]}|[{'type',1310,'opaques',[]}]]}|[{'type',1310,'boolean',[]}]]}]}],
		%% Line 1322
		'spec' =
		    %% Line 1322
		    [{{'t_identifier',0},[{'type',1322,'fun',[{'type',1322,'product',[]}|[{'type',1322,'erl_type',[]}]]}]}],
		%% Line 1336
		'spec' =
		    %% Line 1336
		    [{{'t_port',0},[{'type',1336,'fun',[{'type',1336,'product',[]}|[{'type',1336,'erl_type',[]}]]}]}],
		%% Line 1341
		'spec' =
		    %% Line 1341
		    [{{'t_is_port',1},[{'type',1341,'fun',[{'type',1341,'product',[{'type',1341,'erl_type',[]}]}|[{'type',1341,'boolean',[]}]]}]}],
		%% Line 1346
		'spec' =
		    %% Line 1346
		    [{{'t_is_port',2},[{'type',1346,'fun',[{'type',1346,'product',[{'type',1346,'erl_type',[]}|[{'type',1346,'opaques',[]}]]}|[{'type',1346,'boolean',[]}]]}]}],
		%% Line 1357
		'spec' =
		    %% Line 1357
		    [{{'t_pid',0},[{'type',1357,'fun',[{'type',1357,'product',[]}|[{'type',1357,'erl_type',[]}]]}]}],
		%% Line 1362
		'spec' =
		    %% Line 1362
		    [{{'t_is_pid',1},[{'type',1362,'fun',[{'type',1362,'product',[{'type',1362,'erl_type',[]}]}|[{'type',1362,'boolean',[]}]]}]}],
		%% Line 1367
		'spec' =
		    %% Line 1367
		    [{{'t_is_pid',2},[{'type',1367,'fun',[{'type',1367,'product',[{'type',1367,'erl_type',[]}|[{'type',1367,'opaques',[]}]]}|[{'type',1367,'boolean',[]}]]}]}],
		%% Line 1378
		'spec' =
		    %% Line 1378
		    [{{'t_reference',0},[{'type',1378,'fun',[{'type',1378,'product',[]}|[{'type',1378,'erl_type',[]}]]}]}],
		%% Line 1383
		'spec' =
		    %% Line 1383
		    [{{'t_is_reference',1},[{'type',1383,'fun',[{'type',1383,'product',[{'type',1383,'erl_type',[]}]}|[{'type',1383,'boolean',[]}]]}]}],
		%% Line 1388
		'spec' =
		    %% Line 1388
		    [{{'t_is_reference',2},[{'type',1388,'fun',[{'type',1388,'product',[{'type',1388,'erl_type',[]}|[{'type',1388,'opaques',[]}]]}|[{'type',1388,'boolean',[]}]]}]}],
		%% Line 1401
		'spec' =
		    %% Line 1401
		    [{{'t_number',0},[{'type',1401,'fun',[{'type',1401,'product',[]}|[{'type',1401,'erl_type',[]}]]}]}],
		%% Line 1406
		'spec' =
		    %% Line 1406
		    [{{'t_number',1},[{'type',1406,'fun',[{'type',1406,'product',[{'type',1406,'integer',[]}]}|[{'type',1406,'erl_type',[]}]]}]}],
		%% Line 1411
		'spec' =
		    %% Line 1411
		    [{{'t_is_number',1},[{'type',1411,'fun',[{'type',1411,'product',[{'type',1411,'erl_type',[]}]}|[{'type',1411,'boolean',[]}]]}]}],
		%% Line 1416
		'spec' =
		    %% Line 1416
		    [{{'t_is_number',2},[{'type',1416,'fun',[{'type',1416,'product',[{'type',1416,'erl_type',[]}|[{'type',1416,'opaques',[]}]]}|[{'type',1416,'boolean',[]}]]}]}],
		%% Line 1428
		'spec' =
		    %% Line 1428
		    [{{'t_number_vals',1},[{'type',1428,'fun',[{'type',1428,'product',[{'type',1428,'erl_type',[]}]}|[{'type',1428,'union',[{'atom',1428,'unknown'}|[{'type',1428,'nonempty_list',[{'type',1428,'integer',[]}]}]]}]]}]}],
		%% Line 1433
		'spec' =
		    %% Line 1433
		    [{{'t_number_vals',2},[{'type',1433,'fun',[{'type',1433,'product',[{'type',1433,'erl_type',[]}|[{'type',1433,'opaques',[]}]]}|[{'type',1433,'union',[{'atom',1433,'unknown'}|[{'type',1433,'nonempty_list',[{'type',1433,'integer',[]}]}]]}]]}]}],
		%% Line 1448
		'spec' =
		    %% Line 1448
		    [{{'t_float',0},[{'type',1448,'fun',[{'type',1448,'product',[]}|[{'type',1448,'erl_type',[]}]]}]}],
		%% Line 1453
		'spec' =
		    %% Line 1453
		    [{{'t_is_float',1},[{'type',1453,'fun',[{'type',1453,'product',[{'type',1453,'erl_type',[]}]}|[{'type',1453,'boolean',[]}]]}]}],
		%% Line 1458
		'spec' =
		    %% Line 1458
		    [{{'t_is_float',2},[{'type',1458,'fun',[{'type',1458,'product',[{'type',1458,'erl_type',[]}|[{'type',1458,'opaques',[]}]]}|[{'type',1458,'boolean',[]}]]}]}],
		%% Line 1468
		'spec' =
		    %% Line 1468
		    [{{'t_integer',0},[{'type',1468,'fun',[{'type',1468,'product',[]}|[{'type',1468,'erl_type',[]}]]}]}],
		%% Line 1473
		'spec' =
		    %% Line 1473
		    [{{'t_integer',1},[{'type',1473,'fun',[{'type',1473,'product',[{'type',1473,'integer',[]}]}|[{'type',1473,'erl_type',[]}]]}]}],
		%% Line 1478
		'spec' =
		    %% Line 1478
		    [{{'t_integers',1},[{'type',1478,'fun',[{'type',1478,'product',[{'type',1478,'list',[{'type',1478,'integer',[]}]}]}|[{'type',1478,'erl_type',[]}]]}]}],
		%% Line 1483
		'spec' =
		    %% Line 1483
		    [{{'t_is_integer',1},[{'type',1483,'fun',[{'type',1483,'product',[{'type',1483,'erl_type',[]}]}|[{'type',1483,'boolean',[]}]]}]}],
		%% Line 1488
		'spec' =
		    %% Line 1488
		    [{{'t_is_integer',2},[{'type',1488,'fun',[{'type',1488,'product',[{'type',1488,'erl_type',[]}|[{'type',1488,'opaques',[]}]]}|[{'type',1488,'boolean',[]}]]}]}],
		%% Line 1498
		'spec' =
		    %% Line 1498
		    [{{'t_byte',0},[{'type',1498,'fun',[{'type',1498,'product',[]}|[{'type',1498,'erl_type',[]}]]}]}],
		%% Line 1517
		'spec' =
		    %% Line 1517
		    [{{'t_char',0},[{'type',1517,'fun',[{'type',1517,'product',[]}|[{'type',1517,'erl_type',[]}]]}]}],
		%% Line 1522
		'spec' =
		    %% Line 1522
		    [{{'t_is_char',1},[{'type',1522,'fun',[{'type',1522,'product',[{'type',1522,'erl_type',[]}]}|[{'type',1522,'boolean',[]}]]}]}],
		%% Line 1536
		'spec' =
		    %% Line 1536
		    [{{'t_cons',0},[{'type',1536,'fun',[{'type',1536,'product',[]}|[{'type',1536,'erl_type',[]}]]}]}],
		%% Line 1547
		'spec' =
		    %% Line 1547
		    [{{'t_cons',2},[{'type',1547,'fun',[{'type',1547,'product',[{'type',1547,'erl_type',[]}|[{'type',1547,'erl_type',[]}]]}|[{'type',1547,'erl_type',[]}]]}]}],
		%% Line 1573
		'spec' =
		    %% Line 1573
		    [{{'t_is_cons',1},[{'type',1573,'fun',[{'type',1573,'product',[{'type',1573,'erl_type',[]}]}|[{'type',1573,'boolean',[]}]]}]}],
		%% Line 1578
		'spec' =
		    %% Line 1578
		    [{{'t_is_cons',2},[{'type',1578,'fun',[{'type',1578,'product',[{'type',1578,'erl_type',[]}|[{'type',1578,'opaques',[]}]]}|[{'type',1578,'boolean',[]}]]}]}],
		%% Line 1586
		'spec' =
		    %% Line 1586
		    [{{'t_cons_hd',1},[{'type',1586,'fun',[{'type',1586,'product',[{'type',1586,'erl_type',[]}]}|[{'type',1586,'erl_type',[]}]]}]}],
		%% Line 1591
		'spec' =
		    %% Line 1591
		    [{{'t_cons_hd',2},[{'type',1591,'fun',[{'type',1591,'product',[{'type',1591,'erl_type',[]}|[{'type',1591,'opaques',[]}]]}|[{'type',1591,'erl_type',[]}]]}]}],
		%% Line 1598
		'spec' =
		    %% Line 1598
		    [{{'t_cons_tl',1},[{'type',1598,'fun',[{'type',1598,'product',[{'type',1598,'erl_type',[]}]}|[{'type',1598,'erl_type',[]}]]}]}],
		%% Line 1603
		'spec' =
		    %% Line 1603
		    [{{'t_cons_tl',2},[{'type',1603,'fun',[{'type',1603,'product',[{'type',1603,'erl_type',[]}|[{'type',1603,'opaques',[]}]]}|[{'type',1603,'erl_type',[]}]]}]}],
		%% Line 1611
		'spec' =
		    %% Line 1611
		    [{{'t_nil',0},[{'type',1611,'fun',[{'type',1611,'product',[]}|[{'type',1611,'erl_type',[]}]]}]}],
		%% Line 1616
		'spec' =
		    %% Line 1616
		    [{{'t_is_nil',1},[{'type',1616,'fun',[{'type',1616,'product',[{'type',1616,'erl_type',[]}]}|[{'type',1616,'boolean',[]}]]}]}],
		%% Line 1621
		'spec' =
		    %% Line 1621
		    [{{'t_is_nil',2},[{'type',1621,'fun',[{'type',1621,'product',[{'type',1621,'erl_type',[]}|[{'type',1621,'opaques',[]}]]}|[{'type',1621,'boolean',[]}]]}]}],
		%% Line 1629
		'spec' =
		    %% Line 1629
		    [{{'t_list',0},[{'type',1629,'fun',[{'type',1629,'product',[]}|[{'type',1629,'erl_type',[]}]]}]}],
		%% Line 1634
		'spec' =
		    %% Line 1634
		    [{{'t_list',1},[{'type',1634,'fun',[{'type',1634,'product',[{'type',1634,'erl_type',[]}]}|[{'type',1634,'erl_type',[]}]]}]}],
		%% Line 1641
		'spec' =
		    %% Line 1641
		    [{{'t_list_elements',1},[{'type',1641,'fun',[{'type',1641,'product',[{'type',1641,'erl_type',[]}]}|[{'type',1641,'erl_type',[]}]]}]}],
		%% Line 1646
		'spec' =
		    %% Line 1646
		    [{{'t_list_elements',2},[{'type',1646,'fun',[{'type',1646,'product',[{'type',1646,'erl_type',[]}|[{'type',1646,'opaques',[]}]]}|[{'type',1646,'erl_type',[]}]]}]}],
		%% Line 1654
		'spec' =
		    %% Line 1654
		    [{{'t_list_termination',1},[{'type',1654,'fun',[{'type',1654,'product',[{'type',1654,'erl_type',[]}]}|[{'type',1654,'erl_type',[]}]]}]}],
		%% Line 1659
		'spec' =
		    %% Line 1659
		    [{{'t_is_list',1},[{'type',1659,'fun',[{'type',1659,'product',[{'type',1659,'erl_type',[]}]}|[{'type',1659,'boolean',[]}]]}]}],
		%% Line 1665
		'spec' =
		    %% Line 1665
		    [{{'t_nonempty_list',0},[{'type',1665,'fun',[{'type',1665,'product',[]}|[{'type',1665,'erl_type',[]}]]}]}],
		%% Line 1670
		'spec' =
		    %% Line 1670
		    [{{'t_nonempty_list',1},[{'type',1670,'fun',[{'type',1670,'product',[{'type',1670,'erl_type',[]}]}|[{'type',1670,'erl_type',[]}]]}]}],
		%% Line 1675
		'spec' =
		    %% Line 1675
		    [{{'t_nonempty_string',0},[{'type',1675,'fun',[{'type',1675,'product',[]}|[{'type',1675,'erl_type',[]}]]}]}],
		%% Line 1680
		'spec' =
		    %% Line 1680
		    [{{'t_string',0},[{'type',1680,'fun',[{'type',1680,'product',[]}|[{'type',1680,'erl_type',[]}]]}]}],
		%% Line 1685
		'spec' =
		    %% Line 1685
		    [{{'t_is_string',1},[{'type',1685,'fun',[{'type',1685,'product',[{'type',1685,'erl_type',[]}]}|[{'type',1685,'boolean',[]}]]}]}],
		%% Line 1690
		'spec' =
		    %% Line 1690
		    [{{'t_maybe_improper_list',0},[{'type',1690,'fun',[{'type',1690,'product',[]}|[{'type',1690,'erl_type',[]}]]}]}],
		%% Line 1696
		'spec' =
		    %% Line 1696
		    [{{'t_maybe_improper_list',2},[{'type',1696,'fun',[{'type',1696,'product',[{'type',1696,'erl_type',[]}|[{'type',1696,'erl_type',[]}]]}|[{'type',1696,'erl_type',[]}]]}]}],
		%% Line 1705
		'spec' =
		    %% Line 1705
		    [{{'t_is_maybe_improper_list',1},[{'type',1705,'fun',[{'type',1705,'product',[{'type',1705,'erl_type',[]}]}|[{'type',1705,'boolean',[]}]]}]}],
		%% Line 1710
		'spec' =
		    %% Line 1710
		    [{{'t_is_maybe_improper_list',2},[{'type',1710,'fun',[{'type',1710,'product',[{'type',1710,'erl_type',[]}|[{'type',1710,'opaques',[]}]]}|[{'type',1710,'boolean',[]}]]}]}],
		%% Line 1729
		'spec' =
		    %% Line 1729
		    [{{'lift_list_to_pos_empty',1},[{'type',1729,'fun',[{'type',1729,'product',[{'type',1729,'erl_type',[]}]}|[{'type',1729,'erl_type',[]}]]}]}],
		%% Line 1739
		'spec' =
		    %% Line 1739
		    [{{'t_map',0},[{'type',1739,'fun',[{'type',1739,'product',[]}|[{'type',1739,'erl_type',[]}]]}]}],
		%% Line 1744
		'spec' =
		    %% Line 1744
		    [{{'t_map',1},[{'type',1744,'fun',[{'type',1744,'product',[{'type',1744,'list',[{'type',1744,'tuple',[{'type',1744,'erl_type',[]}|[{'type',1744,'erl_type',[]}]]}]}]}|[{'type',1744,'erl_type',[]}]]}]}],
		%% Line 1749
		'spec' =
		    %% Line 1749
		    [{{'t_is_map',1},[{'type',1749,'fun',[{'type',1749,'product',[{'type',1749,'erl_type',[]}]}|[{'type',1749,'boolean',[]}]]}]}],
		%% Line 1754
		'spec' =
		    %% Line 1754
		    [{{'t_is_map',2},[{'type',1754,'fun',[{'type',1754,'product',[{'type',1754,'erl_type',[]}|[{'type',1754,'opaques',[]}]]}|[{'type',1754,'boolean',[]}]]}]}],
		%% Line 1766
		'spec' =
		    %% Line 1766
		    [{{'t_tuple',0},[{'type',1766,'fun',[{'type',1766,'product',[]}|[{'type',1766,'erl_type',[]}]]}]}],
		%% Line 1771
		'spec' =
		    %% Line 1771
		    [{{'t_tuple',1},[{'type',1771,'fun',[{'type',1771,'product',[{'type',1771,'union',[{'type',1771,'non_neg_integer',[]}|[{'type',1771,'list',[{'type',1771,'erl_type',[]}]}]]}]}|[{'type',1771,'erl_type',[]}]]}]}],
		%% Line 1789
		'spec' =
		    %% Line 1789
		    [{{'get_tuple_tags',1},[{'type',1789,'fun',[{'type',1789,'product',[{'type',1789,'list',[{'type',1789,'erl_type',[]}]}]}|[{'type',1789,'nonempty_list',[{'type',1789,'erl_type',[]}]}]]}]}],
		%% Line 1804
		'spec' =
		    %% Line 1804
		    [{{'t_tuple_args',1},[{'type',1804,'fun',[{'type',1804,'product',[{'type',1804,'erl_type',[]}]}|[{'type',1804,'list',[{'type',1804,'erl_type',[]}]}]]}]}],
		%% Line 1810
		'spec' =
		    %% Line 1810
		    [{{'t_tuple_args',2},[{'type',1810,'fun',[{'type',1810,'product',[{'type',1810,'erl_type',[]}|[{'type',1810,'opaques',[]}]]}|[{'type',1810,'list',[{'type',1810,'erl_type',[]}]}]]}]}],
		%% Line 1818
		'spec' =
		    %% Line 1818
		    [{{'t_tuple_size',1},[{'type',1818,'fun',[{'type',1818,'product',[{'type',1818,'erl_type',[]}]}|[{'type',1818,'non_neg_integer',[]}]]}]}],
		%% Line 1824
		'spec' =
		    %% Line 1824
		    [{{'t_tuple_size',2},[{'type',1824,'fun',[{'type',1824,'product',[{'type',1824,'erl_type',[]}|[{'type',1824,'opaques',[]}]]}|[{'type',1824,'non_neg_integer',[]}]]}]}],
		%% Line 1831
		'spec' =
		    %% Line 1831
		    [{{'t_tuple_sizes',1},[{'type',1831,'fun',[{'type',1831,'product',[{'type',1831,'erl_type',[]}]}|[{'type',1831,'union',[{'atom',1831,'unknown'}|[{'type',1831,'nonempty_list',[{'type',1831,'non_neg_integer',[]}]}]]}]]}]}],
		%% Line 1840
		'spec' =
		    %% Line 1840
		    [{{'t_tuple_subtypes',2},[{'type',1840,'fun',[{'type',1840,'product',[{'type',1840,'erl_type',[]}|[{'type',1840,'opaques',[]}]]}|[{'type',1841,'union',[{'atom',1841,'unknown'}|[{'type',1841,'nonempty_list',[{'type',1841,'erl_type',[]}]}]]}]]}]}],
		%% Line 1859
		'spec' =
		    %% Line 1859
		    [{{'t_tuple_subtypes',1},[{'type',1859,'fun',[{'type',1859,'product',[{'type',1859,'erl_type',[]}]}|[{'type',1859,'union',[{'atom',1859,'unknown'}|[{'type',1859,'nonempty_list',[{'type',1859,'erl_type',[]}]}]]}]]}]}],
		%% Line 1867
		'spec' =
		    %% Line 1867
		    [{{'t_is_tuple',1},[{'type',1867,'fun',[{'type',1867,'product',[{'type',1867,'erl_type',[]}]}|[{'type',1867,'boolean',[]}]]}]}],
		%% Line 1872
		'spec' =
		    %% Line 1872
		    [{{'t_is_tuple',2},[{'type',1872,'fun',[{'type',1872,'product',[{'type',1872,'erl_type',[]}|[{'type',1872,'opaques',[]}]]}|[{'type',1872,'boolean',[]}]]}]}],
		%% Line 1885
		'spec' =
		    %% Line 1885
		    [{{'t_bitstrlist',0},[{'type',1885,'fun',[{'type',1885,'product',[]}|[{'type',1885,'erl_type',[]}]]}]}],
		%% Line 1891
		'spec' =
		    %% Line 1891
		    [{{'t_constant',0},[{'type',1891,'fun',[{'type',1891,'product',[]}|[{'type',1891,'erl_type',[]}]]}]}],
		%% Line 1896
		'spec' =
		    %% Line 1896
		    [{{'t_is_constant',1},[{'type',1896,'fun',[{'type',1896,'product',[{'type',1896,'erl_type',[]}]}|[{'type',1896,'boolean',[]}]]}]}],
		%% Line 1901
		'spec' =
		    %% Line 1901
		    [{{'t_arity',0},[{'type',1901,'fun',[{'type',1901,'product',[]}|[{'type',1901,'erl_type',[]}]]}]}],
		%% Line 1906
		'spec' =
		    %% Line 1906
		    [{{'t_pos_integer',0},[{'type',1906,'fun',[{'type',1906,'product',[]}|[{'type',1906,'erl_type',[]}]]}]}],
		%% Line 1911
		'spec' =
		    %% Line 1911
		    [{{'t_non_neg_integer',0},[{'type',1911,'fun',[{'type',1911,'product',[]}|[{'type',1911,'erl_type',[]}]]}]}],
		%% Line 1916
		'spec' =
		    %% Line 1916
		    [{{'t_is_non_neg_integer',1},[{'type',1916,'fun',[{'type',1916,'product',[{'type',1916,'erl_type',[]}]}|[{'type',1916,'boolean',[]}]]}]}],
		%% Line 1922
		'spec' =
		    %% Line 1922
		    [{{'t_neg_integer',0},[{'type',1922,'fun',[{'type',1922,'product',[]}|[{'type',1922,'erl_type',[]}]]}]}],
		%% Line 1927
		'spec' =
		    %% Line 1927
		    [{{'t_fixnum',0},[{'type',1927,'fun',[{'type',1927,'product',[]}|[{'type',1927,'erl_type',[]}]]}]}],
		%% Line 1932
		'spec' =
		    %% Line 1932
		    [{{'t_pos_fixnum',0},[{'type',1932,'fun',[{'type',1932,'product',[]}|[{'type',1932,'erl_type',[]}]]}]}],
		%% Line 1937
		'spec' =
		    %% Line 1937
		    [{{'t_non_neg_fixnum',0},[{'type',1937,'fun',[{'type',1937,'product',[]}|[{'type',1937,'erl_type',[]}]]}]}],
		%% Line 1942
		'spec' =
		    %% Line 1942
		    [{{'t_mfa',0},[{'type',1942,'fun',[{'type',1942,'product',[]}|[{'type',1942,'erl_type',[]}]]}]}],
		%% Line 1947
		'spec' =
		    %% Line 1947
		    [{{'t_module',0},[{'type',1947,'fun',[{'type',1947,'product',[]}|[{'type',1947,'erl_type',[]}]]}]}],
		%% Line 1952
		'spec' =
		    %% Line 1952
		    [{{'t_node',0},[{'type',1952,'fun',[{'type',1952,'product',[]}|[{'type',1952,'erl_type',[]}]]}]}],
		%% Line 1957
		'spec' =
		    %% Line 1957
		    [{{'t_iodata',0},[{'type',1957,'fun',[{'type',1957,'product',[]}|[{'type',1957,'erl_type',[]}]]}]}],
		%% Line 1962
		'spec' =
		    %% Line 1962
		    [{{'t_iolist',0},[{'type',1962,'fun',[{'type',1962,'product',[]}|[{'type',1962,'erl_type',[]}]]}]}],
		%% Line 1968
		'spec' =
		    %% Line 1968
		    [{{'t_iolist',2},[{'type',1968,'fun',[{'type',1968,'product',[{'type',1968,'non_neg_integer',[]}|[{'type',1968,'erl_type',[]}]]}|[{'type',1968,'erl_type',[]}]]}]}],
		%% Line 1976
		'spec' =
		    %% Line 1976
		    [{{'t_parameterized_module',0},[{'type',1976,'fun',[{'type',1976,'product',[]}|[{'type',1976,'erl_type',[]}]]}]}],
		%% Line 1981
		'spec' =
		    %% Line 1981
		    [{{'t_timeout',0},[{'type',1981,'fun',[{'type',1981,'product',[]}|[{'type',1981,'erl_type',[]}]]}]}],
		%% Line 1990
		'spec' =
		    %% Line 1990
		    [{{'t_array',0},[{'type',1990,'fun',[{'type',1990,'product',[]}|[{'type',1990,'erl_type',[]}]]}]}],
		%% Line 2000
		'spec' =
		    %% Line 2000
		    [{{'t_dict',0},[{'type',2000,'fun',[{'type',2000,'product',[]}|[{'type',2000,'erl_type',[]}]]}]}],
		%% Line 2014
		'spec' =
		    %% Line 2014
		    [{{'t_digraph',0},[{'type',2014,'fun',[{'type',2014,'product',[]}|[{'type',2014,'erl_type',[]}]]}]}],
		%% Line 2024
		'spec' =
		    %% Line 2024
		    [{{'t_gb_set',0},[{'type',2024,'fun',[{'type',2024,'product',[]}|[{'type',2024,'erl_type',[]}]]}]}],
		%% Line 2030
		'spec' =
		    %% Line 2030
		    [{{'t_gb_tree',0},[{'type',2030,'fun',[{'type',2030,'product',[]}|[{'type',2030,'erl_type',[]}]]}]}],
		%% Line 2036
		'spec' =
		    %% Line 2036
		    [{{'t_queue',0},[{'type',2036,'fun',[{'type',2036,'product',[]}|[{'type',2036,'erl_type',[]}]]}]}],
		%% Line 2041
		'spec' =
		    %% Line 2041
		    [{{'t_set',0},[{'type',2041,'fun',[{'type',2041,'product',[]}|[{'type',2041,'erl_type',[]}]]}]}],
		%% Line 2051
		'spec' =
		    %% Line 2051
		    [{{'t_tid',0},[{'type',2051,'fun',[{'type',2051,'product',[]}|[{'type',2051,'erl_type',[]}]]}]}],
		%% Line 2056
		'spec' =
		    %% Line 2056
		    [{{'all_opaque_builtins',0},[{'type',2056,'fun',[{'type',2056,'product',[]}|[{'type',2056,'nonempty_list',[{'type',2056,'erl_type',[]}]}]]}]}],
		%% Line 2066
		'spec' =
		    %% Line 2066
		    [{{'t_product',1},[{'type',2066,'fun',[{'type',2066,'product',[{'type',2066,'list',[{'type',2066,'erl_type',[]}]}]}|[{'type',2066,'erl_type',[]}]]}]}],
		%% Line 2075
		'spec' =
		    %% Line 2075
		    [{{'t_to_tlist',1},[{'type',2075,'fun',[{'type',2075,'product',[{'type',2075,'erl_type',[]}]}|[{'type',2075,'list',[{'type',2075,'erl_type',[]}]}]]}]}],
		%% Line 2082
		'spec' =
		    %% Line 2082
		    [{{'t_var',1},[{'type',2082,'fun',[{'type',2082,'product',[{'type',2082,'union',[{'type',2082,'atom',[]}|[{'type',2082,'integer',[]}]]}]}|[{'type',2082,'erl_type',[]}]]}]}],
		%% Line 2087
		'spec' =
		    %% Line 2087
		    [{{'t_is_var',1},[{'type',2087,'fun',[{'type',2087,'product',[{'type',2087,'erl_type',[]}]}|[{'type',2087,'boolean',[]}]]}]}],
		%% Line 2092
		'spec' =
		    %% Line 2092
		    [{{'t_var_name',1},[{'type',2092,'fun',[{'type',2092,'product',[{'type',2092,'erl_type',[]}]}|[{'type',2092,'union',[{'type',2092,'atom',[]}|[{'type',2092,'integer',[]}]]}]]}]}],
		%% Line 2096
		'spec' =
		    %% Line 2096
		    [{{'t_has_var',1},[{'type',2096,'fun',[{'type',2096,'product',[{'type',2096,'erl_type',[]}]}|[{'type',2096,'boolean',[]}]]}]}],
		%% Line 2118
		'spec' =
		    %% Line 2118
		    [{{'t_has_var_list',1},[{'type',2118,'fun',[{'type',2118,'product',[{'type',2118,'list',[{'type',2118,'erl_type',[]}]}]}|[{'type',2118,'boolean',[]}]]}]}],
		%% Line 2124
		'spec' =
		    %% Line 2124
		    [{{'t_collect_vars',1},[{'type',2124,'fun',[{'type',2124,'product',[{'type',2124,'erl_type',[]}]}|[{'type',2124,'list',[{'type',2124,'erl_type',[]}]}]]}]}],
		%% Line 2129
		'spec' =
		    %% Line 2129
		    [{{'t_collect_vars',2},[{'type',2129,'fun',[{'type',2129,'product',[{'type',2129,'erl_type',[]}|[{'type',2129,'list',[{'type',2129,'erl_type',[]}]}]]}|[{'type',2129,'list',[{'type',2129,'erl_type',[]}]}]]}]}],
		%% Line 2171
		'spec' =
		    %% Line 2171
		    [{{'t_from_term',1},[{'type',2171,'fun',[{'type',2171,'product',[{'type',2171,'term',[]}]}|[{'type',2171,'erl_type',[]}]]}]}],
		%% Line 2195
		'spec' =
		    %% Line 2195
		    [{{'t_from_range',2},[{'type',2195,'fun',[{'type',2195,'product',[{'type',2195,'rng_elem',[]}|[{'type',2195,'rng_elem',[]}]]}|[{'type',2195,'erl_type',[]}]]}]}],
		%% Line 2234
		'spec' =
		    %% Line 2234
		    [{{'t_from_range_unsafe',2},[{'type',2234,'fun',[{'type',2234,'product',[{'type',2234,'rng_elem',[]}|[{'type',2234,'rng_elem',[]}]]}|[{'type',2234,'erl_type',[]}]]}]}],
		%% Line 2246
		'spec' =
		    %% Line 2246
		    [{{'t_is_fixnum',1},[{'type',2246,'fun',[{'type',2246,'product',[{'type',2246,'erl_type',[]}]}|[{'type',2246,'boolean',[]}]]}]}],
		%% Line 2256
		'spec' =
		    %% Line 2256
		    [{{'is_fixnum',1},[{'type',2256,'fun',[{'type',2256,'product',[{'type',2256,'integer',[]}]}|[{'type',2256,'boolean',[]}]]}]}],
		%% Line 2268
		'spec' =
		    %% Line 2268
		    [{{'t_is_bitwidth',1},[{'type',2268,'fun',[{'type',2268,'product',[{'type',2268,'erl_type',[]}]}|[{'type',2268,'boolean',[]}]]}]}],
		%% Line 2278
		'spec' =
		    %% Line 2278
		    [{{'number_min',1},[{'type',2278,'fun',[{'type',2278,'product',[{'type',2278,'erl_type',[]}]}|[{'type',2278,'rng_elem',[]}]]}]}],
		%% Line 2283
		'spec' =
		    %% Line 2283
		    [{{'number_min',2},[{'type',2283,'fun',[{'type',2283,'product',[{'type',2283,'erl_type',[]}|[{'type',2283,'opaques',[]}]]}|[{'type',2283,'rng_elem',[]}]]}]}],
		%% Line 2292
		'spec' =
		    %% Line 2292
		    [{{'number_max',1},[{'type',2292,'fun',[{'type',2292,'product',[{'type',2292,'erl_type',[]}]}|[{'type',2292,'rng_elem',[]}]]}]}],
		%% Line 2297
		'spec' =
		    %% Line 2297
		    [{{'number_max',2},[{'type',2297,'fun',[{'type',2297,'product',[{'type',2297,'erl_type',[]}|[{'type',2297,'opaques',[]}]]}|[{'type',2297,'rng_elem',[]}]]}]}],
		%% Line 2319
		'spec' =
		    %% Line 2319
		    [{{'min',2},[{'type',2319,'fun',[{'type',2319,'product',[{'type',2319,'rng_elem',[]}|[{'type',2319,'rng_elem',[]}]]}|[{'type',2319,'rng_elem',[]}]]}]}],
		%% Line 2328
		'spec' =
		    %% Line 2328
		    [{{'max',2},[{'type',2328,'fun',[{'type',2328,'product',[{'type',2328,'rng_elem',[]}|[{'type',2328,'rng_elem',[]}]]}|[{'type',2328,'rng_elem',[]}]]}]}],
		%% Line 2354
		'spec' =
		    %% Line 2354
		    [{{'t_sup',1},[{'type',2354,'fun',[{'type',2354,'product',[{'type',2354,'list',[{'type',2354,'erl_type',[]}]}]}|[{'type',2354,'erl_type',[]}]]}]}],
		%% Line 2365
		'spec' =
		    %% Line 2365
		    [{{'t_sup',2},[{'type',2365,'fun',[{'type',2365,'product',[{'type',2365,'erl_type',[]}|[{'type',2365,'erl_type',[]}]]}|[{'type',2365,'erl_type',[]}]]}]}],
		%% Line 2495
		'spec' =
		    %% Line 2495
		    [{{'t_sup_lists',2},[{'type',2495,'fun',[{'type',2495,'product',[{'type',2495,'list',[{'type',2495,'erl_type',[]}]}|[{'type',2495,'list',[{'type',2495,'erl_type',[]}]}]]}|[{'type',2495,'list',[{'type',2495,'erl_type',[]}]}]]}]}],
		%% Line 2598
		'spec' =
		    %% Line 2598
		    [{{'t_elements',1},[{'type',2598,'fun',[{'type',2598,'product',[{'type',2598,'erl_type',[]}]}|[{'type',2598,'list',[{'type',2598,'erl_type',[]}]}]]}]}],
		%% Line 2648
		'spec' =
		    %% Line 2648
		    [{{'t_inf',1},[{'type',2648,'fun',[{'type',2648,'product',[{'type',2648,'list',[{'type',2648,'erl_type',[]}]}]}|[{'type',2648,'erl_type',[]}]]}]}],
		%% Line 2658
		'spec' =
		    %% Line 2658
		    [{{'t_inf',2},[{'type',2658,'fun',[{'type',2658,'product',[{'type',2658,'erl_type',[]}|[{'type',2658,'erl_type',[]}]]}|[{'type',2658,'erl_type',[]}]]}]}],
		%% Line 2664
		'type' =
		    %% Line 2664
		    [{'t_inf_opaques',{'type',2664,'union',[{'atom',2664,'universe'}|[{'type',2665,'list',[{'type',2665,'erl_type',[]}]}|[{'type',2665,'tuple',[{'atom',2665,'match'}|[{'type',2665,'list',[{'type',2665,'union',[{'type',2665,'erl_type',[]}|[{'atom',2665,'universe'}]]}]}]]}]]]},[]}],
		%% Line 2667
		'spec' =
		    %% Line 2667
		    [{{'t_inf',3},[{'type',2667,'fun',[{'type',2667,'product',[{'type',2667,'erl_type',[]}|[{'type',2667,'erl_type',[]}|[{'type',2667,'t_inf_opaques',[]}]]]}|[{'type',2667,'erl_type',[]}]]}]}],
		%% Line 2909
		'spec' =
		    %% Line 2909
		    [{{'t_inf_lists',2},[{'type',2909,'fun',[{'type',2909,'product',[{'type',2909,'list',[{'type',2909,'erl_type',[]}]}|[{'type',2909,'list',[{'type',2909,'erl_type',[]}]}]]}|[{'type',2909,'list',[{'type',2909,'erl_type',[]}]}]]}]}],
		%% Line 2914
		'spec' =
		    %% Line 2914
		    [{{'t_inf_lists',3},[{'type',2914,'fun',[{'type',2914,'product',[{'type',2914,'list',[{'type',2914,'erl_type',[]}]}|[{'type',2914,'list',[{'type',2914,'erl_type',[]}]}|[{'type',2914,'t_inf_opaques',[]}]]]}|[{'type',2914,'list',[{'type',2914,'erl_type',[]}]}]]}]}],
		%% Line 2919
		'spec' =
		    %% Line 2919
		    [{{'t_inf_lists',4},[{'type',2919,'fun',[{'type',2919,'product',[{'type',2919,'list',[{'type',2919,'erl_type',[]}]}|[{'type',2919,'list',[{'type',2919,'erl_type',[]}]}|[{'type',2919,'list',[{'type',2919,'erl_type',[]}]}|[{'type',2919,'list',[{'type',2919,'erl_type',[]}]}]]]]}|[{'type',2919,'list',[{'type',2919,'erl_type',[]}]}]]}]}],
		%% Line 2929
		'spec' =
		    %% Line 2929
		    [{{'t_inf_lists_strict',3},[{'type',2929,'fun',[{'type',2929,'product',[{'type',2929,'list',[{'type',2929,'erl_type',[]}]}|[{'type',2929,'list',[{'type',2929,'erl_type',[]}]}|[{'type',2929,'list',[{'type',2929,'erl_type',[]}]}]]]}|[{'type',2929,'union',[{'atom',2929,'bottom'}|[{'type',2929,'list',[{'type',2929,'erl_type',[]}]}]]}]]}]}],
		%% Line 2934
		'spec' =
		    %% Line 2934
		    [{{'t_inf_lists_strict',4},[{'type',2934,'fun',[{'type',2934,'product',[{'type',2934,'list',[{'type',2934,'erl_type',[]}]}|[{'type',2934,'list',[{'type',2934,'erl_type',[]}]}|[{'type',2934,'list',[{'type',2934,'erl_type',[]}]}|[{'type',2934,'list',[{'type',2934,'erl_type',[]}]}]]]]}|[{'type',2934,'union',[{'atom',2934,'bottom'}|[{'type',2934,'list',[{'type',2934,'erl_type',[]}]}]]}]]}]}],
		%% Line 3075
		'spec' =
		    %% Line 3075
		    [{{'t_subst',2},[{'type',3075,'fun',[{'type',3075,'product',[{'type',3075,'erl_type',[]}|[{'remote_type',3075,[{'atom',3075,'dict'}|[{'atom',3075,'dict'}|[[{'type',3075,'atom',[]}|[{'type',3075,'erl_type',[]}]]]]]}]]}|[{'type',3075,'erl_type',[]}]]}]}],
		%% Line 3124
		'spec' =
		    %% Line 3124
		    [{{'subst_all_vars_to_any',1},[{'type',3124,'fun',[{'type',3124,'product',[{'type',3124,'erl_type',[]}]}|[{'type',3124,'erl_type',[]}]]}]}],
		%% Line 3176
		'spec' =
		    %% Line 3176
		    [{{'subst_all_remote',2},[{'type',3176,'fun',[{'type',3176,'product',[{'type',3176,'erl_type',[]}|[{'type',3176,'erl_type',[]}]]}|[{'type',3176,'erl_type',[]}]]}]}],
		%% Line 3192
		'type' =
		    %% Line 3192
		    [{'t_unify_ret',{'type',3192,'tuple',[{'type',3192,'erl_type',[]}|[{'type',3192,'list',[{'type',3192,'tuple',[{'var',3192,'_'}|[{'type',3192,'erl_type',[]}]]}]}]]},[]}],
		%% Line 3194
		'spec' =
		    %% Line 3194
		    [{{'t_unify',2},[{'type',3194,'fun',[{'type',3194,'product',[{'type',3194,'erl_type',[]}|[{'type',3194,'erl_type',[]}]]}|[{'type',3194,'t_unify_ret',[]}]]}]}],
		%% Line 3297
		'spec' =
		    %% Line 3297
		    [{{'is_opaque_type',2},[{'type',3297,'fun',[{'type',3297,'product',[{'type',3297,'erl_type',[]}|[{'type',3297,'list',[{'type',3297,'erl_type',[]}]}]]}|[{'type',3297,'boolean',[]}]]}]}],
		%% Line 3450
		'spec' =
		    %% Line 3450
		    [{{'t_subtract_list',2},[{'type',3450,'fun',[{'type',3450,'product',[{'type',3450,'erl_type',[]}|[{'type',3450,'list',[{'type',3450,'erl_type',[]}]}]]}|[{'type',3450,'erl_type',[]}]]}]}],
		%% Line 3457
		'spec' =
		    %% Line 3457
		    [{{'t_subtract',2},[{'type',3457,'fun',[{'type',3457,'product',[{'type',3457,'erl_type',[]}|[{'type',3457,'erl_type',[]}]]}|[{'type',3457,'erl_type',[]}]]}]}],
		%% Line 3626
		'spec' =
		    %% Line 3626
		    [{{'opaque_subtract',2},[{'type',3626,'fun',[{'type',3626,'product',[{'type',3626,'erl_type',[]}|[{'type',3626,'erl_type',[]}]]}|[{'type',3626,'erl_type',[]}]]}]}],
		%% Line 3637
		'spec' =
		    %% Line 3637
		    [{{'t_subtract_lists',2},[{'type',3637,'fun',[{'type',3637,'product',[{'type',3637,'list',[{'type',3637,'erl_type',[]}]}|[{'type',3637,'list',[{'type',3637,'erl_type',[]}]}]]}|[{'type',3637,'list',[{'type',3637,'erl_type',[]}]}]]}]}],
		%% Line 3642
		'spec' =
		    %% Line 3642
		    [{{'t_subtract_lists',3},[{'type',3642,'fun',[{'type',3642,'product',[{'type',3642,'list',[{'type',3642,'erl_type',[]}]}|[{'type',3642,'list',[{'type',3642,'erl_type',[]}]}|[{'type',3642,'list',[{'type',3642,'erl_type',[]}]}]]]}|[{'type',3642,'list',[{'type',3642,'erl_type',[]}]}]]}]}],
		%% Line 3649
		'spec' =
		    %% Line 3649
		    [{{'subtract_union',2},[{'type',3649,'fun',[{'type',3649,'product',[{'type',3649,'nonempty_list',[{'type',3649,'erl_type',[]}]}|[{'type',3649,'nonempty_list',[{'type',3649,'erl_type',[]}]}]]}|[{'type',3649,'erl_type',[]}]]}]}],
		%% Line 3665
		'spec' =
		    %% Line 3665
		    [{{'subtract_union',4},[{'type',3665,'fun',[{'type',3665,'product',[{'type',3665,'list',[{'type',3665,'erl_type',[]}]}|[{'type',3665,'list',[{'type',3665,'erl_type',[]}]}|[{'type',3665,'non_neg_integer',[]}|[{'type',3665,'list',[{'type',3665,'erl_type',[]}]}]]]]}|[{'type',3665,'erl_type',[]}]]}]}],
		%% Line 3715
		'spec' =
		    %% Line 3715
		    [{{'t_is_equal',2},[{'type',3715,'fun',[{'type',3715,'product',[{'type',3715,'erl_type',[]}|[{'type',3715,'erl_type',[]}]]}|[{'type',3715,'boolean',[]}]]}]}],
		%% Line 3720
		'spec' =
		    %% Line 3720
		    [{{'t_is_subtype',2},[{'type',3720,'fun',[{'type',3720,'product',[{'type',3720,'erl_type',[]}|[{'type',3720,'erl_type',[]}]]}|[{'type',3720,'boolean',[]}]]}]}],
		%% Line 3739
		'spec' =
		    %% Line 3739
		    [{{'t_is_instance',2},[{'type',3739,'fun',[{'type',3739,'product',[{'type',3739,'erl_type',[]}|[{'type',3739,'erl_type',[]}]]}|[{'type',3739,'boolean',[]}]]}]}],
		%% Line 3745
		'spec' =
		    %% Line 3745
		    [{{'t_unopaque',1},[{'type',3745,'fun',[{'type',3745,'product',[{'type',3745,'erl_type',[]}]}|[{'type',3745,'erl_type',[]}]]}]}],
		%% Line 3750
		'spec' =
		    %% Line 3750
		    [{{'t_unopaque',2},[{'type',3750,'fun',[{'type',3750,'product',[{'type',3750,'erl_type',[]}|[{'type',3750,'union',[{'atom',3750,'universe'}|[{'type',3750,'list',[{'type',3750,'erl_type',[]}]}]]}]]}|[{'type',3750,'erl_type',[]}]]}]}],
		%% Line 3791
		'spec' =
		    %% Line 3791
		    [{{'t_limit',2},[{'type',3791,'fun',[{'type',3791,'product',[{'type',3791,'erl_type',[]}|[{'type',3791,'integer',[]}]]}|[{'type',3791,'erl_type',[]}]]}]}],
		%% Line 3840
		'spec' =
		    %% Line 3840
		    [{{'t_abstract_records',2},[{'type',3840,'fun',[{'type',3840,'product',[{'type',3840,'erl_type',[]}|[{'type',3840,'type_table',[]}]]}|[{'type',3840,'erl_type',[]}]]}]}],
		%% Line 3882
		'spec' =
		    %% Line 3882
		    [{{'t_map',2},[{'type',3882,'fun',[{'type',3882,'product',[{'type',3882,'fun',[{'type',3882,'product',[{'type',3882,'erl_type',[]}]}|[{'type',3882,'erl_type',[]}]]}|[{'type',3882,'erl_type',[]}]]}|[{'type',3882,'erl_type',[]}]]}]}],
		%% Line 3915
		'spec' =
		    %% Line 3915
		    [{{'t_to_string',1},[{'type',3915,'fun',[{'type',3915,'product',[{'type',3915,'erl_type',[]}]}|[{'type',3915,'string',[]}]]}]}],
		%% Line 3920
		'spec' =
		    %% Line 3920
		    [{{'t_to_string',2},[{'type',3920,'fun',[{'type',3920,'product',[{'type',3920,'erl_type',[]}|[{'type',3920,'type_table',[]}]]}|[{'type',3920,'string',[]}]]}]}],
		%% Line 4106
		'spec' =
		    %% Line 4106
		    [{{'record_field_diffs_to_string',2},[{'type',4106,'fun',[{'type',4106,'product',[{'type',4106,'erl_type',[]}|[{'type',4106,'type_table',[]}]]}|[{'type',4106,'string',[]}]]}]}],
		%% Line 4171
		'spec' =
		    %% Line 4171
		    [{{'t_from_form',1},[{'type',4171,'fun',[{'type',4171,'product',[{'type',4171,'parse_form',[]}]}|[{'type',4171,'erl_type',[]}]]}]}],
		%% Line 4176
		'spec' =
		    %% Line 4176
		    [{{'t_from_form',2},[{'type',4176,'fun',[{'type',4176,'product',[{'type',4176,'parse_form',[]}|[{'type',4176,'type_table',[]}]]}|[{'type',4176,'erl_type',[]}]]}]}],
		%% Line 4181
		'spec' =
		    %% Line 4181
		    [{{'t_from_form',3},[{'type',4181,'fun',[{'type',4181,'product',[{'type',4181,'parse_form',[]}|[{'type',4181,'type_table',[]}|[{'type',4181,'var_table',[]}]]]}|[{'type',4181,'erl_type',[]}]]}]}],
		%% Line 4187
		'type' =
		    %% Line 4187
		    [{'type_names',{'type',4187,'list',[{'type',4187,'union',[{'type',4187,'type_key',[]}|[{'type',4187,'record_key',[]}]]}]},[]}],
		%% Line 4189
		'spec' =
		    %% Line 4189
		    [{{'t_from_form',4},[{'type',4189,'fun',[{'type',4189,'product',[{'type',4189,'parse_form',[]}|[{'type',4189,'type_names',[]}|[{'type',4189,'type_table',[]}|[{'type',4189,'var_table',[]}]]]]}|[{'type',4190,'tuple',[{'type',4190,'erl_type',[]}|[{'type',4190,'type_names',[]}]]}]]}]}],
		%% Line 4536
		'spec' =
		    %% Line 4536
		    [{{'t_form_to_string',1},[{'type',4536,'fun',[{'type',4536,'product',[{'type',4536,'parse_form',[]}]}|[{'type',4536,'string',[]}]]}]}],
		%% Line 4633
		'spec' =
		    %% Line 4633
		    [{{'atom_to_string',1},[{'type',4633,'fun',[{'type',4633,'product',[{'type',4633,'atom',[]}]}|[{'type',4633,'string',[]}]]}]}],
		%% Line 4644
		'spec' =
		    %% Line 4644
		    [{{'any_none',1},[{'type',4644,'fun',[{'type',4644,'product',[{'type',4644,'list',[{'type',4644,'erl_type',[]}]}]}|[{'type',4644,'boolean',[]}]]}]}],
		%% Line 4650
		'spec' =
		    %% Line 4650
		    [{{'any_none_or_unit',1},[{'type',4650,'fun',[{'type',4650,'product',[{'type',4650,'list',[{'type',4650,'erl_type',[]}]}]}|[{'type',4650,'boolean',[]}]]}]}],
		%% Line 4657
		'spec' =
		    %% Line 4657
		    [{{'is_erl_type',1},[{'type',4657,'fun',[{'type',4657,'product',[{'type',4657,'any',[]}]}|[{'type',4657,'boolean',[]}]]}]}],
		%% Line 4665
		'spec' =
		    %% Line 4665
		    [{{'lookup_record',2},[{'type',4665,'fun',[{'type',4665,'product',[{'type',4665,'atom',[]}|[{'type',4665,'type_table',[]}]]}|[{'type',4666,'union',[{'atom',4666,'error'}|[{'type',4666,'tuple',[{'atom',4666,'ok'}|[{'type',4666,'list',[{'type',4666,'tuple',[{'type',4666,'atom',[]}|[{'type',4666,'union',[{'type',4666,'parse_form',[]}|[{'type',4666,'erl_type',[]}]]}]]}]}]]}]]}]]}]}],
		%% Line 4680
		'spec' =
		    %% Line 4680
		    [{{'lookup_record',3},[{'type',4680,'fun',[{'type',4680,'product',[{'type',4680,'atom',[]}|[{'type',4680,'arity',[]}|[{'type',4680,'type_table',[]}]]]}|[{'type',4681,'union',[{'atom',4681,'error'}|[{'type',4681,'tuple',[{'atom',4681,'ok'}|[{'type',4681,'list',[{'type',4681,'tuple',[{'type',4681,'atom',[]}|[{'type',4681,'erl_type',[]}]]}]}]]}]]}]]}]}],
		%% Line 4700
		'spec' =
		    %% Line 4700
		    [{{'type_is_defined',4},[{'type',4700,'fun',[{'type',4700,'product',[{'type',4700,'union',[{'atom',4700,'type'}|[{'atom',4700,'opaque'}]]}|[{'type',4700,'atom',[]}|[{'type',4700,'arity',[]}|[{'type',4700,'type_table',[]}]]]]}|[{'type',4701,'boolean',[]}]]}]}],
		%% Line 4710
		'spec' =
		    %% Line 4710
		    [{{'do_opaque',3},[{'type',4710,'fun',[{'type',4710,'product',[{'type',4710,'erl_type',[]}|[{'type',4710,'opaques',[]}|[{'type',4710,'fun',[{'type',4710,'product',[{'var',4710,'_'}]}|[{'var',4710,'T'}]]}]]]}|[{'var',4710,'T'}]]}]}],
		%% Line 4847
		'spec' =
		    %% Line 4847
		    [{{'gcd',2},[{'type',4847,'fun',[{'type',4847,'product',[{'type',4847,'integer',[]}|[{'type',4847,'integer',[]}]]}|[{'type',4847,'integer',[]}]]}]}],
		%% Line 4854
		'spec' =
		    %% Line 4854
		    [{{'gcd1',2},[{'type',4854,'fun',[{'type',4854,'product',[{'type',4854,'integer',[]}|[{'type',4854,'integer',[]}]]}|[{'type',4854,'integer',[]}]]}]}],
		%% Line 4863
		'spec' =
		    %% Line 4863
		    [{{'bitstr_concat',2},[{'type',4863,'fun',[{'type',4863,'product',[{'type',4863,'erl_type',[]}|[{'type',4863,'erl_type',[]}]]}|[{'type',4863,'erl_type',[]}]]}]}],
		%% Line 4870
		'spec' =
		    %% Line 4870
		    [{{'bitstr_match',2},[{'type',4870,'fun',[{'type',4870,'product',[{'type',4870,'erl_type',[]}|[{'type',4870,'erl_type',[]}]]}|[{'type',4870,'erl_type',[]}]]}]}],
		%% Line 4888
		'spec' =
		    %% Line 4888
		    [{{'handle_base',2},[{'type',4888,'fun',[{'type',4888,'product',[{'type',4888,'integer',[]}|[{'type',4888,'integer',[]}]]}|[{'type',4888,'integer',[]}]]}]}]]
't_any'/0 =
    %% Line 410
    fun () ->
	%% Line 411
	'any'
't_is_any'/1 =
    %% Line 415
    fun (_cor0) ->
	%% Line 416
	apply 'do_opaque'/3
	    (_cor0, 'universe', 'is_any'/1)
'is_any'/1 =
    %% Line 418
    fun (_cor0) ->
	case _cor0 of
	  <'any'> when 'true' ->
	      'true'
	  %% Line 419
	  <_cor2> when 'true' ->
	      'false'
	end
't_none'/0 =
    %% Line 423
    fun () ->
	%% Line 424
	'none'
't_is_none'/1 =
    %% Line 428
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      'true'
	  %% Line 429
	  <_cor2> when 'true' ->
	      'false'
	end
't_opaque'/4 =
    %% Line 437
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <O> =
	    %% Line 438
	    {'opaque',_cor3,_cor2,_cor1,_cor0}
	in  let <_cor5> =
		%% Line 4768
		call 'ordsets':'from_list'
		    ([O|[]])
	    in  %% Line 439
		{'c','opaque',_cor5,'unknown'}
't_is_opaque'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type = {'c','opaque',_cor5,_cor6},Opaques> when 'true' ->
	      let <_cor2> =
		  %% Line 444
		  apply 'is_opaque_type'/2
		      (_cor1, _cor0)
	      in  %% Line 444
		  call 'erlang':'not'
		      (_cor2)
	  %% Line 445
	  <_X_Type,_X_Opaques> when 'true' ->
	      'false'
	end
't_is_opaque'/1 =
    %% Line 449
    fun (_cor0) ->
	case _cor0 of
	  <{'c','opaque',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 450
	  <_cor4> when 'true' ->
	      'false'
	end
't_has_opaque_subtype'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	%% Line 455
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'has_opaque_subtype'/1)
'has_opaque_subtype'/1 =
    %% Line 457
    fun (_cor0) ->
	case _cor0 of
	  <{'c','union',Ts = [_cor2|[_cor3|[_cor4|[_cor5|[_cor6|[_cor7|[_cor8|[_cor9|[_cor10|[_cor11|[_cor12|[]]]]]]]]]]]],_cor13}> when 'true' ->
	      %% Line 458
	      call 'lists':'any'
		  ('t_is_opaque'/1, Ts)
	  %% Line 459
	  <T> when 'true' ->
	      case _cor0 of
		<{'c','opaque',_cor2,_cor3}> when 'true' ->
		    'true'
		<_cor4> when 'true' ->
		    'false'
	      end
	end
't_opaque_structure'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <{'c','opaque',Elements,_cor8}> when 'true' ->
	      let <_cor6> =
		  %% Line 465
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{'opaque',_cor9,_cor10,_cor11,Struct}|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Struct|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_21531> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'ordsets':'to_list'
				(Elements)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 465
		  apply 't_sup'/1
		      (_cor6)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_opaque_structure',1}}] )
	    -| ['compiler_generated'] )
	end
't_opaque_modules'/1 =
    %% Line 469
    fun (_cor0) ->
	case _cor0 of
	  <{'c','opaque',Elements,_cor4}> when 'true' ->
	      %% Line 470
	      case call 'ordsets':'size'
		       (Elements) of
		%% Line 471
		<1> when 'true' ->
		    let <_32841> =
			%% Line 4815
			call 'ordsets':'to_list'
			    (Elements)
		    in  %% Line 472
			case _32841 of
			  <[{'opaque',Mod,_cor5,_cor6,_cor7}|[]]> when 'true' ->
			      %% Line 473
			      [Mod|[]]
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_32841})
			    -| ['compiler_generated'] )
			end
		%% Line 474
		<_cor8> when 'true' ->
		    call 'erlang':'throw'
			({'error',[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[117|[108|[116|[105|[112|[108|[101|[32|[111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_opaque_modules',1}}] )
	    -| ['compiler_generated'] )
	end
't_contains_opaque'/1 =
    %% Line 479
    fun (_cor0) ->
	%% Line 480
	apply 't_contains_opaque'/2
	    (_cor0, [])
't_contains_opaque'/2 =
    %% Line 487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'any',_X_Opaques> when 'true' ->
	      'false'
	  %% Line 488
	  <'none',_X_Opaques> when 'true' ->
	      'false'
	  %% Line 489
	  <'unit',_X_Opaques> when 'true' ->
	      'false'
	  %% Line 490
	  <{'c','atom',_X_Set,_cor17},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 491
	  <{'c','binary',[_X_Unit|[_X_Base|[]]],_cor18},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 492
	  <{'c','number','any','float'},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 493
	  <{'c','function',[Domain|[Range|[]]],_cor19},Opaques> when 'true' ->
	      let <_2693> =
		  %% Line 494
		  apply 't_contains_opaque'/2
		      (Domain, _cor0)
	      in  %% Line 495
		  ( case _2693 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 't_contains_opaque'/2
				(Range, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_2693}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 496
	  <{'c','identifier',_X_Types,_cor20},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 497
	  <{'c','number',_X_Types,'integer'},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 498
	  <{'c','number',{'int_rng',_X_From,_X_To},'integer'},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 499
	  <{'c','number',{'int_set',_X_Set},'integer'},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 500
	  <{'c','list',[Type|[Tail|[]]],_cor21},Opaques> when 'true' ->
	      let <_17863> =
		  %% Line 501
		  apply 't_contains_opaque'/2
		      (Type, _cor0)
	      in  %% Line 501
		  ( case _17863 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 't_contains_opaque'/2
				(Tail, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor4> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_17863}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 502
	  <Map = {'c','map',_cor22,_cor23},Opaques> when 'true' ->
	      let <_cor7> =
		  %% Line 503
		  apply 'map_values'/1
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 525
		      fun (_cor2) ->
			  apply 't_contains_opaque'/2
			      (_cor2, _cor0)
		  in  let <_15058> =
			  %% Line 525
			  call 'lists':'any'
			      (_cor4, _cor7)
		      in  %% Line 503
			  ( case _15058 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor8> =
					%% Line 504
					apply 'map_keys'/1
					    (_cor1)
				    in  let <_cor4> =
					    %% Line 525
					    fun (_cor2) ->
						apply 't_contains_opaque'/2
						    (_cor2, _cor0)
					in  %% Line 525
					    call 'lists':'any'
						(_cor4, _cor8)
				-| ['compiler_generated'] )
			      ( <_cor6> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_15058}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 505
	  <{'c','matchstate',[_X_P|[_X_Slots|[]]],_cor24},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 506
	  <{'c','nil',_cor25,_cor26},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 507
	  <{'c','number',_X_Set,_X_Tag},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 508
	  <T = {'c','opaque',_cor27,_cor28},Opaques> when 'true' ->
	      %% Line 510
	      ( case apply 'is_opaque_type'/2
			 (_cor1, _cor0) of
		  ( <'false'> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <'true'> when 'true' ->
			let <_cor12> =
			    apply 't_opaque_structure'/1
				(_cor1)
			in  apply 't_contains_opaque'/1
				(_cor12)
		    -| ['compiler_generated'] )
		  ( <_cor_variable> when 'true' ->
			call 'erlang':'error'
			    ('badarg')
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 511
	  <{'c','product',Types,_cor29},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 525
		  fun (_cor2) ->
		      apply 't_contains_opaque'/2
			  (_cor2, _cor0)
	      in  %% Line 525
		  call 'lists':'any'
		      (_cor4, Types)
	  %% Line 513
	  <{'c','tuple','any',{_cor30,_cor31}},_X_Opaques> when 'true' ->
	      'false'
	  %% Line 514
	  <{'c','tuple',Types,{_cor32,_cor33}},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 525
		  fun (_cor2) ->
		      apply 't_contains_opaque'/2
			  (_cor2, _cor0)
	      in  %% Line 525
		  call 'lists':'any'
		      (_cor4, Types)
	  %% Line 516
	  <T = {'c','tuple_set',_X_Set,_cor34},Opaques> when 'true' ->
	      let <_cor14> =
		  %% Line 517
		  apply 't_tuple_subtypes'/1
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 525
		      fun (_cor2) ->
			  apply 't_contains_opaque'/2
			      (_cor2, _cor0)
		  in  %% Line 525
		      call 'lists':'any'
			  (_cor4, _cor14)
	  %% Line 518
	  <{'c','union',List = [_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[_cor43|[_cor44|[_cor45|[]]]]]]]]]]]],_cor46},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 525
		  fun (_cor2) ->
		      apply 't_contains_opaque'/2
			  (_cor2, _cor0)
	      in  %% Line 525
		  call 'lists':'any'
		      (_cor4, List)
	  %% Line 520
	  <{'c','var',_X_Id,_cor47},_X_Opaques> when 'true' ->
	      'false'
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_contains_opaque',2}}] )
	    -| ['compiler_generated'] )
	end
't_find_opaque_mismatch'/3 =
    %% Line 536
    fun (_cor2,_cor1,_cor0) ->
	%% Line 537
	apply 't_find_opaque_mismatch'/4
	    (_cor2, _cor1, _cor1, _cor0)
't_find_opaque_mismatch'/4 =
    %% Line 539
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'any',_X_Type,_X_TopType,_X_Opaques> when 'true' ->
	      'error'
	  %% Line 540
	  <'none',_X_Type,_X_TopType,_X_Opaques> when 'true' ->
	      'error'
	  %% Line 541
	  <{'c','list',[T1|[Tl1|[]]],_cor14},{'c','list',[T2|[Tl2|[]]],_cor15},TopType,Opaques> when 'true' ->
	      %% Line 542
	      apply 't_find_opaque_mismatch_ordlists'/4
		  ([T1|[Tl1|[]]], [T2|[Tl2|[]]], _cor1, _cor0)
	  %% Line 543
	  <T1,T2 = {'c','opaque',_cor16,_cor17},TopType,Opaques> when 'true' ->
	      let <_36194> =
		  %% Line 544
		  apply 'is_opaque_type'/2
		      (_cor2, _cor0)
	      in  %% Line 544
		  case _36194 of
		    %% Line 545
		    <'false'> when 'true' ->
			{'ok',_cor1,_cor2}
		    %% Line 546
		    <'true'> when 'true' ->
			let <_cor4> =
			    %% Line 547
			    apply 't_opaque_structure'/1
				(_cor2)
			in  %% Line 547
			    apply 't_find_opaque_mismatch'/4
				(_cor3, _cor4, _cor1, _cor0)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_36194})
		      -| ['compiler_generated'] )
		  end
	  %% Line 549
	  <T1 = {'c','opaque',_cor18,_cor19},T2,TopType,Opaques> when 'true' ->
	      let <_15416> =
		  %% Line 551
		  apply 'is_opaque_type'/2
		      (_cor3, _cor0)
	      in  %% Line 551
		  case _15416 of
		    %% Line 552
		    <'false'> when 'true' ->
			{'ok',_cor1,_cor3}
		    %% Line 553
		    <'true'> when 'true' ->
			let <_cor6> =
			    %% Line 554
			    apply 't_opaque_structure'/1
				(_cor3)
			in  %% Line 554
			    apply 't_find_opaque_mismatch'/4
				(_cor6, _cor2, _cor1, _cor0)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15416})
		      -| ['compiler_generated'] )
		  end
	  %% Line 556
	  <{'c','product',T1,_cor20},{'c','product',T2,_cor21},TopType,Opaques> when 'true' ->
	      let <_cor8> =
		  %% Line 571
		  fun (_cor5,_cor4) ->
		      %% Line 572
		      apply 't_find_opaque_mismatch'/4
			  (_cor5, _cor4, _cor1, _cor0)
	      in  let <List> =
		      %% Line 571
		      call 'lists':'zipwith'
			  (_cor8, T1, T2)
		  in  %% Line 574
		      apply 't_find_opaque_mismatch_list'/1
			  (List)
	  %% Line 558
	  <{'c','tuple',T1,{Arity,_cor22}},{'c','tuple',T2,{_cor23,_cor24}},TopType,Opaques>
	      when call 'erlang':'=:='
		    (_cor23,
		     Arity) ->
	      let <_cor8> =
		  %% Line 571
		  fun (_cor5,_cor4) ->
		      %% Line 572
		      apply 't_find_opaque_mismatch'/4
			  (_cor5, _cor4, _cor1, _cor0)
	      in  let <List> =
		      %% Line 571
		      call 'lists':'zipwith'
			  (_cor8, T1, T2)
		  in  %% Line 574
		      apply 't_find_opaque_mismatch_list'/1
			  (List)
	  %% Line 561
	  <T1 = {'c','tuple',_cor25,{_cor26,_cor27}},T2 = {'c','tuple_set',_cor28,_cor29},TopType,Opaques> when 'true' ->
	      let <Tuples1> =
		  %% Line 563
		  apply 't_tuple_subtypes'/1
		      (_cor3)
	      in  let <Tuples2> =
		      %% Line 564
		      apply 't_tuple_subtypes'/1
			  (_cor2)
		  in  %% Line 565
		      apply 't_find_opaque_mismatch_lists'/4
			  (Tuples1, Tuples2, _cor1, _cor0)
	  %% Line 566
	  <T1,{'c','union',U2 = [_cor30|[_cor31|[_cor32|[_cor33|[_cor34|[_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[]]]]]]]]]]]],_cor41},TopType,Opaques> when 'true' ->
	      %% Line 567
	      apply 't_find_opaque_mismatch_lists'/4
		  ([_cor3|[]], U2, _cor1, _cor0)
	  %% Line 568
	  <_X_T1,_X_T2,_X_TopType,_X_Opaques> when 'true' ->
	      'error'
	end
't_find_opaque_mismatch_ordlists'/4 =
    %% Line 570
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 571
	    fun (_cor5,_cor4) ->
		%% Line 572
		apply 't_find_opaque_mismatch'/4
		    (_cor5, _cor4, _cor1, _cor0)
	in  let <List> =
		%% Line 571
		call 'lists':'zipwith'
		    (_cor8, _cor3, _cor2)
	    in  %% Line 574
		apply 't_find_opaque_mismatch_list'/1
		    (List)
't_find_opaque_mismatch_lists'/4 =
    %% Line 576
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 577
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[T1|_cor5]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[T2|_cor7]> when 'true' ->
						    let <_cor10> =
							apply 't_find_opaque_mismatch'/4
							    (T1, T2, T2, _cor0)
						    in  let <_cor11> =
							    apply 'lc$^1'/1
								(_cor7)
							in  ( [_cor10|_cor11]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor5)
						( <_24634> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor2)
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_37536> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor3 of
		    <[T1|_cor5]> when 'true' ->
			( letrec
			      'lc$^1'/1 =
				  fun (_cor9) ->
				      case _cor9 of
					<[T2|_cor7]> when 'true' ->
					    let <_cor10> =
						apply 't_find_opaque_mismatch'/4
						    (T1, T2, T2, _cor0)
					    in  let <_cor11> =
						    apply 'lc$^1'/1
							(_cor7)
						in  ( [_cor10|_cor11]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor5)
					( <_24634> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (_cor2)
			  -| ['list_comprehension'] )
		    <[]> when 'true' ->
			[]
		    ( <_37536> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  %% Line 578
	    apply 't_find_opaque_mismatch_list'/1
		(_cor12)
't_find_opaque_mismatch_list'/1 =
    %% Line 580
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'error'
	  %% Line 581
	  <[H|T]> when 'true' ->
	      %% Line 582
	      case H of
		%% Line 583
		<{'ok',_X_T1,_X_T2}> when 'true' ->
		    H
		%% Line 584
		<'error'> when 'true' ->
		    apply 't_find_opaque_mismatch_list'/1
			(T)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',H})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_find_opaque_mismatch_list',1}}] )
	    -| ['compiler_generated'] )
	end
't_find_unknown_opaque'/3 =
    %% Line 596
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_T1,_X_T2,'universe'> when 'true' ->
	      []
	  %% Line 597
	  <T1,T2,Opaques> when 'true' ->
	      %% Line 598
	      try
		  apply 't_inf'/3
		      (_cor2, _cor1, {'match',_cor0})
	      of <_cor3> ->
		  %% Line 599
		  []
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 600
		    <'throw',N,_cor12>
			when call 'erlang':'is_integer'
			      (_cor6) ->
			[_cor6|[]]
		    ( <_3941,_14544,_22841> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	end
't_decorate_with_opaque'/3 =
    %% Line 608
    fun (_cor2,_cor1,_cor0) ->
	let <_16988> =
	    %% Line 3717
	    case <_cor2,_cor1> of
	      <T,_cor4>
		  when call 'erlang':'=:='
			(_cor1,
			 _cor2) ->
		  'true'
	      %% Line 3718
	      <_cor5,_cor6> when 'true' ->
		  'false'
	    end
	in  let <_cor6> =
		%% Line 609
		( case _16988 of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  'true'
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor4> =
			      apply 't_contains_opaque'/2
				  (_cor1, [])
			  in  call 'erlang':'not'
				  (_cor4)
		      -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_16988}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 609
		case _cor6 of
		  %% Line 610
		  <'true'> when 'true' ->
		      _cor2
		  %% Line 611
		  <'false'> when 'true' ->
		      let <T> =
			  %% Line 612
			  apply 't_inf'/2
			      (_cor2, _cor1)
		      in  let <_32782> =
			      apply 't_contains_opaque'/2
				  (T, [])
			  in  %% Line 613
			      case _32782 of
				%% Line 614
				<'false'> when 'true' ->
				    _cor2
				%% Line 615
				<'true'> when 'true' ->
				    %% Line 616
				    apply 'decorate'/3
					(_cor2, T, _cor0)
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_32782})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'decorate'/3 =
    %% Line 630
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,'none',_X_Opaques> when 'true' ->
	      _cor2
	  %% Line 631
	  <{'c','function',[Domain|[Range|[]]],_cor14},{'c','function',[D|[R|[]]],_cor15},Opaques> when 'true' ->
	      let <_cor3> =
		  %% Line 632
		  apply 'decorate'/3
		      (Domain, D, _cor0)
	      in  let <_cor4> =
		      %% Line 632
		      apply 'decorate'/3
			  (Range, R, _cor0)
		  in  %% Line 632
		      {'c','function',[_cor3|[_cor4|[]]],'unknown'}
	  %% Line 633
	  <{'c','list',[Types|[Tail|[]]],Size},{'c','list',[Ts|[Tl|[]]],_X_Sz},Opaques> when 'true' ->
	      let <_cor5> =
		  %% Line 634
		  apply 'decorate'/3
		      (Types, Ts, _cor0)
	      in  let <_cor6> =
		      %% Line 634
		      apply 'decorate'/3
			  (Tail, Tl, _cor0)
		  in  %% Line 634
		      {'c','list',[_cor5|[_cor6|[]]],Size}
	  %% Line 635
	  <{'c','product',Types,_cor16},{'c','product',Ts,_cor17},Opaques> when 'true' ->
	      let <_cor7> =
		  %% Line 687
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{Elem,E}|_cor4]> when 'true' ->
				      let <_cor7> =
					  apply 'decorate'/3
					      (Elem, E, _cor0)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_14579> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor6})
				    -| ['compiler_generated'] )
				end
		    in  let <_cor5> =
			    call 'lists':'zip'
				(Types, Ts)
			in  apply 'lc$^0'/1
				(_cor5)
		    -| ['list_comprehension'] )
	      in  %% Line 636
		  {'c','product',_cor7,'unknown'}
	  %% Line 637
	  <T = {'c','tuple',_cor18,{_cor19,_cor20}},{'c','tuple','any',{_cor21,_cor22}},_X_Opaques> when 'true' ->
	      _cor2
	  %% Line 638
	  <T = {'c','tuple','any',{_cor23,_cor24}},{'c','tuple',_cor25,{_cor26,_cor27}},_X_Opaques> when 'true' ->
	      _cor2
	  %% Line 639
	  <{'c','tuple',Types,{Arity,Tag}},{'c','tuple',Ts,{_cor28,_cor29}},Opaques>
	      when call 'erlang':'=:='
		    (_cor28,
		     Arity) ->
	      let <_cor8> =
		  %% Line 687
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{Elem,E}|_cor4]> when 'true' ->
				      let <_cor7> =
					  apply 'decorate'/3
					      (Elem, E, _cor0)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_14579> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor6})
				    -| ['compiler_generated'] )
				end
		    in  let <_cor5> =
			    call 'lists':'zip'
				(Types, Ts)
			in  apply 'lc$^0'/1
				(_cor5)
		    -| ['list_comprehension'] )
	      in  %% Line 640
		  {'c','tuple',_cor8,{Arity,Tag}}
	  %% Line 641
	  <{'c','tuple_set',List,_cor30},T = {'c','tuple',_cor31,{Arity,_cor32}},Opaques> when 'true' ->
	      %% Line 642
	      apply 'decorate_tuple_sets'/3
		  (List, [{Arity,[_cor1|[]]}|[]], _cor0)
	  %% Line 643
	  <{'c','tuple_set',List,_cor33},{'c','tuple_set',L,_cor34},Opaques> when 'true' ->
	      %% Line 644
	      apply 'decorate_tuple_sets'/3
		  (List, L, _cor0)
	  %% Line 645
	  <{'c','union',List = [_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[_cor43|[_cor44|[_cor45|[]]]]]]]]]]]],_cor46},T,Opaques>
	      when call 'erlang':'=/='
		    (_cor1,
		     'any') ->
	      let <_22573> =
		  %% Line 646
		  apply 'force_union'/1
		      (_cor1)
	      in  %% Line 646
		  case _22573 of
		    <{'c','union',L = [_cor47|[_cor48|[_cor49|[_cor50|[_cor51|[_cor52|[_cor53|[_cor54|[_cor55|[_cor56|[_cor57|[]]]]]]]]]]]],_cor58}> when 'true' ->
			%% Line 647
			apply 'union_decorate'/3
			    (List, L, _cor0)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_22573})
		      -| ['compiler_generated'] )
		  end
	  %% Line 648
	  <T = {'c','opaque',_cor59,_cor60},_cor61,_X_Opaques> when 'true' ->
	      _cor2
	  %% Line 649
	  <T,{'c','union',L = [_cor62|[_cor63|[_cor64|[_cor65|[_cor66|[_cor67|[_cor68|[_cor69|[_cor70|[_cor71|[_cor72|[]]]]]]]]]]]],_cor73},Opaques>
	      when call 'erlang':'=/='
		    (_cor2,
		     'any') ->
	      let <_26453> =
		  %% Line 650
		  apply 'force_union'/1
		      (_cor2)
	      in  %% Line 650
		  case _26453 of
		    <{'c','union',List = [_cor74|[_cor75|[_cor76|[_cor77|[_cor78|[_cor79|[_cor80|[_cor81|[_cor82|[_cor83|[_cor84|[]]]]]]]]]]]],_cor85}> when 'true' ->
			%% Line 651
			apply 'union_decorate'/3
			    (List, L, _cor0)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_26453})
		      -| ['compiler_generated'] )
		  end
	  %% Line 652
	  <Type,T = {'c','opaque',_cor86,_cor87},Opaques> when 'true' ->
	      %% Line 653
	      apply 'decorate_with_opaque'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 654
	  <Type,_X_T,_X_Opaques> when 'true' ->
	      _cor2
	end
'decorate_with_opaque'/3 =
    %% Line 658
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,{'c','opaque',Set2,_cor11},Opaques> when 'true' ->
	      let <_cor3> =
		  %% Line 4815
		  call 'ordsets':'to_list'
		      (Set2)
	      in  let <_8805> =
		      %% Line 659
		      apply 'decoration'/5
			  (_cor3, _cor2, _cor0, [], 'false')
		  in  %% Line 659
		      case _8805 of
			%% Line 660
			<{[],'false'}> when 'true' ->
			    _cor2
			%% Line 661
			<{List,All}>
			    when call 'erlang':'=/='
				  (List,
				   []) ->
			    let <_cor4> =
				%% Line 662
				call 'ordsets':'from_list'
				    (List)
			    in  let <NewType> =
				    %% Line 662
				    {'c','opaque',_cor4,'unknown'}
				in  %% Line 663
				    case All of
				      %% Line 664
				      <'true'> when 'true' ->
					  NewType
				      %% Line 665
				      <'false'> when 'true' ->
					  apply 't_sup'/2
					      (NewType, _cor2)
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',All})
					-| ['compiler_generated'] )
				    end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_8805})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decorate_with_opaque',3}}] )
	    -| ['compiler_generated'] )
	end
'decoration'/5 =
    %% Line 669
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Opaque = {'opaque',_cor26,_cor27,_cor28,S}|OpaqueTypes],Type,Opaques,NewOpaqueTypes0,All> when 'true' ->
	      let <IsOpaque> =
		  %% Line 671
		  apply 'is_opaque_type2'/2
		      (Opaque, _cor2)
	      in  let <I> =
		      %% Line 672
		      apply 't_inf'/2
			  (_cor3, S)
		  in  let <_cor9> =
			  %% Line 673
			  ( case IsOpaque of
			      ( <'false'> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <'true'> when 'true' ->
				    case I of
				      <'none'> when 'true' ->
					  'true'
				      <_11219> when 'true' ->
					  'false'
				    end
				-| ['compiler_generated'] )
			      ( <_cor_variable> when 'true' ->
				    call 'erlang':'error'
					('badarg')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 673
			  case _cor9 of
			    %% Line 674
			    <'true'> when 'true' ->
				apply 'decoration'/5
				    (OpaqueTypes, _cor3, _cor2, _cor1, _cor0)
			    %% Line 675
			    <'false'> when 'true' ->
				let <_rec0> =
				    %% Line 676
				    apply 'decorate'/3
					(I, S, _cor2)
				in  let <_cor13> =
					%% Line 676
					call 'erlang':'setelement'
					    (5, Opaque, _rec0)
				    in  let <_cor17> =
					    %% Line 677
					    ( case _cor0 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 3717
						      case <I,_cor3> of
							<T,_39026>
							    when call 'erlang':'=:='
								  (_cor3,
								   I) ->
							    'true'
							%% Line 3718
							<_cor5,_cor6> when 'true' ->
							    'false'
						      end
						  -| ['compiler_generated'] )
						( <_cor15> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor0}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <NewOpaqueTypes> =
						%% Line 678
						[_cor13|_cor1]
					    in  %% Line 679
						apply 'decoration'/5
						    (OpaqueTypes, _cor3, _cor2, NewOpaqueTypes, _cor17)
			    ( <_cor20> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 681
	  <[],_X_Type,_X_Opaques,NewOpaqueTypes,All> when 'true' ->
	      %% Line 682
	      {_cor1,_cor0}
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decoration',5}}] )
	    -| ['compiler_generated'] )
	end
'union_decorate'/3 =
    %% Line 689
    fun (_cor2,_cor1,_cor0) ->
	let <Union> =
	    %% Line 690
	    apply 'union_decorate'/5
		(_cor2, _cor1, _cor0, 0, [])
	in  %% Line 691
	    case _cor2 of
	      <[A|[B|[F|[I|[L|[N|[T|[M|[_cor22|[_X_R|[Map|[]]]]]]]]]]]]> when 'true' ->
		  %% Line 692
		  case _cor1 of
		    <[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[_cor30|[Opaque|[_cor31|[_cor32|[]]]]]]]]]]]]> when 'true' ->
			let <List> =
			    %% Line 693
			    [A|[B|[F|[I|[L|[N|[T|[M|[Map|[]]]]]]]]]]
			in  let <_cor17> =
				%% Line 694
				( letrec
				      'lc$^0'/1 =
					  fun (_cor13) ->
					      case _cor13 of
						<[E|_cor8]> when 'true' ->
						    let <_31113> =
							case E of
							  <'none'> when 'true' ->
							      'true'
							  <_1067> when 'true' ->
							      'false'
							end
						    in  %% Line 696
							( case _31113 of
							    <'false'> when 'true' ->
								let <_cor11> =
								    %% Line 697
								    apply 'decorate'/3
									(E, Opaque, _cor0)
								in  let <_39547> =
									case _cor11 of
									  <'none'> when 'true' ->
									      'true'
									  <_31076> when 'true' ->
									      'false'
									end
								    in  %% Line 697
									( case _39547 of
									    <'false'> when 'true' ->
										let <_cor14> =
										    apply 'lc$^0'/1
											(_cor8)
										in  ( [_cor11|_cor14]
										      -| ['compiler_generated'] )
									    ( <'true'> when 'true' ->
										  apply 'lc$^0'/1
										      (_cor8)
									      -| ['compiler_generated'] )
									    ( <_cor_variable> when 'true' ->
										  call 'erlang':'error'
										      ('badarg')
									      -| ['compiler_generated'] )
									  end
									  -| ['list_comprehension'] )
							    ( <'true'> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor8)
							      -| ['compiler_generated'] )
							    ( <_cor_variable> when 'true' ->
								  call 'erlang':'error'
								      ('badarg')
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_15598> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor13})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (List)
				  -| ['list_comprehension'] )
			    in  %% Line 698
				apply 't_sup'/1
				    ([Union|_cor17])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'union_decorate'/5 =
    %% Line 700
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <['none'|Left1],[_cor21|Left2],Opaques,N,Acc> when 'true' ->
	      %% Line 701
	      apply 'union_decorate'/5
		  (Left1, Left2, _cor2, _cor1, ['none'|_cor0])
	  %% Line 702
	  <[T1|Left1],['none'|Left2],Opaques,N,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 703
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  %% Line 703
		  apply 'union_decorate'/5
		      (Left1, Left2, _cor2, _cor5, [T1|_cor0])
	  %% Line 704
	  <[T1|Left1],[T2|Left2],Opaques,N,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 705
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  let <_cor6> =
		      %% Line 705
		      apply 'decorate'/3
			  (T1, T2, _cor2)
		  in  %% Line 705
		      apply 'union_decorate'/5
			  (Left1, Left2, _cor2, _cor7, [_cor6|_cor0])
	  %% Line 706
	  <[],[],_X_Opaques,N,Acc> when 'true' ->
	      %% Line 707
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   0) ->
		    'none'
		%% Line 708
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   1) ->
		    let <_cor12> =
			%% Line 709
			( letrec
			      'lc$^0'/1 =
				  fun (_cor10) ->
				      case _cor10 of
					<[T|_cor9]>
					    when call 'erlang':'=/='
						  (T,
						   'none') ->
					    let <_cor11> =
						apply 'lc$^0'/1
						    (_cor9)
					    in  ( [T|_cor11]
						  -| ['compiler_generated'] )
					( <[T|_cor9]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor9)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_9445> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor10})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor0)
			  -| ['list_comprehension'] )
		    in  %% Line 709
			case _cor12 of
			  <[Type|[]]> when 'true' ->
			      Type
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		%% Line 711
		<>
		    when call 'erlang':'>='
			  (_cor1,
			   2) ->
		    let <_cor15> =
			call 'lists':'reverse'
			    (_cor0)
		    in  case _cor15 of
			  <[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[_cor30|[_cor31|[_cor32|[]]]]]]]]]]]]> when 'true' ->
			      {'c','union',_cor15,'unknown'}
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor15})
			    -| ['compiler_generated'] )
			end
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'union_decorate',5}}] )
	    -| ['compiler_generated'] )
	end
'decorate_tuple_sets'/3 =
    %% Line 714
    fun (_cor2,_cor1,_cor0) ->
	%% Line 715
	apply 'decorate_tuple_sets'/4
	    (_cor2, _cor1, _cor0, [])
'decorate_tuple_sets'/4 =
    %% Line 717
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Arity,Tuples}|List],[{_cor10,Ts}|L],Opaques,Acc>
	      when call 'erlang':'=:='
		    (_cor10,
		     Arity) ->
	      let <DecTs> =
		  %% Line 718
		  apply 'decorate_tuples_in_sets'/3
		      (Tuples, Ts, _cor1)
	      in  %% Line 719
		  apply 'decorate_tuple_sets'/4
		      (List, L, _cor1, [{Arity,DecTs}|_cor0])
	  %% Line 720
	  <[ArTup|List],L,Opaques,Acc> when 'true' ->
	      %% Line 721
	      apply 'decorate_tuple_sets'/4
		  (List, _cor2, _cor1, [ArTup|_cor0])
	  %% Line 722
	  <[],_X_L,_X_Opaques,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 723
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 723
		  {'c','tuple_set',_cor5,'unknown'}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decorate_tuple_sets',4}}] )
	    -| ['compiler_generated'] )
	end
'decorate_tuples_in_sets'/3 =
    %% Line 725
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'c','tuple',Elements,{_cor20,'any'}}|[]],Ts,Opaques> when 'true' ->
	      let <_cor8> =
		  %% Line 726
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{'c','tuple',Es,{_cor21,_cor22}}|_cor4]> when 'true' ->
				      let <_cor6> =
					  ( letrec
						'lc$^0_33570'/1 =
						    fun (_cor6) ->
							case _cor6 of
							  <[{Elem,E}|_33151]> when 'true' ->
							      let <_cor7> =
								  apply 'decorate'/3
								      (Elem, E, _cor0)
							      in  let <_cor8> =
								      apply 'lc$^0_33570'/1
									  (_33151)
								  in  ( [_cor7|_cor8]
									-| ['compiler_generated'] )
							  ( <[_cor3|_41135]> when 'true' ->
								apply 'lc$^0_33570'/1
								    (_41135)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_14579> when 'true' ->
								primop 'match_fail'
								    ({'function_clause',_cor6})
							    -| ['compiler_generated'] )
							end
					    in  let <_33871> =
						    call 'lists':'zip'
							(Elements, Es)
						in  apply 'lc$^0_33570'/1
							(_33871)
					    -| ['list_comprehension'] )
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_10626> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      in  let <_cor15> =
		      %% Line 727
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[Es|_cor11]> when 'true' ->
					  let <_cor13> =
					      apply 't_tuple'/1
						  (Es)
					  in  let <_cor14> =
						  apply 'lc$^1'/1
						      (_cor11)
					      in  ( [_cor13|_cor14]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_16275> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor8)
			-| ['list_comprehension'] )
		  in  let <_5753> =
			  %% Line 727
			  apply 't_sup'/1
			      (_cor15)
		      in  %% Line 727
			  case _5753 of
			    %% Line 728
			    <{'c','tuple_set',[{_X_Arity,Tuples}|[]],_cor23}> when 'true' ->
				Tuples
			    %% Line 729
			    <Tuple = {'c','tuple',_cor24,{_cor25,_cor26}}> when 'true' ->
				[_5753|[]]
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_5753})
			      -| ['compiler_generated'] )
			  end
	  %% Line 731
	  <Tuples,Ts,Opaques> when 'true' ->
	      %% Line 732
	      apply 'decorate_tuples_in_sets'/4
		  (_cor2, _cor1, _cor0, [])
	end
'decorate_tuples_in_sets'/4 =
    %% Line 734
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L1 = [T1 = {'c','tuple',Elements,{Arity,Tag1}}|Tuples],L2 = %% Line 735
								       [{'c','tuple',Es,{_cor10,Tag2}}|Ts],Opaques,Acc>
	      when call 'erlang':'=:='
		    (_cor10,
		     Arity) ->
	      %% Line 736
	      case <> of
		%% Line 737
		<>
		    when call 'erlang':'<'
			  (Tag1,
			   Tag2) ->
		    apply 'decorate_tuples_in_sets'/4
			(Tuples, _cor2, _cor1, [T1|_cor0])
		%% Line 738
		<>
		    when call 'erlang':'>'
			  (Tag1,
			   Tag2) ->
		    apply 'decorate_tuples_in_sets'/4
			(_cor3, Ts, _cor1, _cor0)
		%% Line 739
		<>
		    when call 'erlang':'=:='
			  (Tag1,
			   Tag2) ->
		    let <NewElements> =
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[{Elem,E}|_cor4]> when 'true' ->
					    let <_cor7> =
						apply 'decorate'/3
						    (Elem, E, _cor1)
					    in  let <_cor8> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [_cor7|_cor8]
						      -| ['compiler_generated'] )
					( <[_1168|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_14579> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor5> =
				  call 'lists':'zip'
				      (Elements, Es)
			      in  apply 'lc$^0'/1
				      (_cor5)
			  -| ['list_comprehension'] )
		    in  let <NewAcc> =
			    %% Line 741
			    [{'c','tuple',NewElements,{Arity,Tag1}}|_cor0]
			in  %% Line 742
			    apply 'decorate_tuples_in_sets'/4
				(Tuples, Ts, _cor1, NewAcc)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 744
	  <[T1|Tuples],L2,Opaques,Acc> when 'true' ->
	      %% Line 745
	      apply 'decorate_tuples_in_sets'/4
		  (Tuples, _cor2, _cor1, [T1|_cor0])
	  %% Line 746
	  <[],_X_L,_X_Opaques,Acc> when 'true' ->
	      %% Line 747
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decorate_tuples_in_sets',4}}] )
	    -| ['compiler_generated'] )
	end
't_opaque_from_records'/1 =
    %% Line 751
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 753
	    fun (_cor3,_cor2) ->
		%% Line 754
		case _cor3 of
		  %% Line 755
		  <{'opaque',_X_Name,_X_Arity}> when 'true' ->
		      'true'
		  %% Line 756
		  <_cor28> when 'true' ->
		      'false'
		end
	in  let <OpaqueRecDict> =
		%% Line 753
		call 'dict':'filter'
		    (_cor6, _cor0)
	    in  let <_cor20> =
		    %% Line 760
		    fun (_cor17,_cor16) ->
			case <_cor17,_cor16> of
			  <{'opaque',Name,_X_Arity},{Module,_X_Type,ArgNames}> when 'true' ->
			      let <_cor14> =
				  %% Line 766
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor11) ->
						case _cor11 of
						  <[_cor29|_cor10]> when 'true' ->
						      let <_cor13> =
							  apply 'lc$^0'/1
							      (_cor10)
						      in  ( ['any'|_cor13]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_16043> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor11})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  case ArgNames of
					  <[_cor29|_cor10]> when 'true' ->
					      let <_cor13> =
						  apply 'lc$^0'/1
						      (_cor10)
					      in  ( ['any'|_cor13]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_16043> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',ArgNames})
					    -| ['compiler_generated'] )
					end
				    -| ['list_comprehension'] )
			      in  let <O> =
				      {'opaque',Module,Name,_cor14,'none'}
				  in  let <_cor5> =
					  %% Line 4768
					  call 'ordsets':'from_list'
					      ([O|[]])
				      in  {'c','opaque',_cor5,'unknown'}
			  ( <_cor19,_cor18> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor17,_cor16})
				  -| [{'function_name',{'-t_opaque_from_records/1-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		in  let <OpaqueTypeDict> =
			%% Line 760
			call 'dict':'map'
			    (_cor20, OpaqueRecDict)
		    in  %% Line 769
			( letrec
			      'lc$^1'/1 =
				  fun (_cor25) ->
				      case _cor25 of
					<[{_X_Key,OpaqueType}|_cor23]> when 'true' ->
					    let <_cor26> =
						apply 'lc$^1'/1
						    (_cor23)
					    in  ( [OpaqueType|_cor26]
						  -| ['compiler_generated'] )
					( <[_cor22|_cor23]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor23)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_24746> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor25})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor24> =
				  call 'dict':'to_list'
				      (OpaqueTypeDict)
			      in  apply 'lc$^1'/1
				      (_cor24)
			  -| ['list_comprehension'] )
't_struct_from_opaque'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','function',[Domain|[Range|[]]],_cor24},Opaques> when 'true' ->
	      let <_cor2> =
		  %% Line 776
		  apply 't_struct_from_opaque'/2
		      (Domain, _cor0)
	      in  let <_cor3> =
		      %% Line 777
		      apply 't_struct_from_opaque'/2
			  (Range, _cor0)
		  in  %% Line 776
		      {'c','function',[_cor2|%% Line 777
					     [_cor3|[]]],'unknown'}
	  %% Line 778
	  <{'c','list',[Types|[Term|[]]],Size},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 779
		  apply 't_struct_from_opaque'/2
		      (Types, _cor0)
	      in  let <_cor5> =
		      %% Line 780
		      apply 't_struct_from_opaque'/2
			  (Term, _cor0)
		  in  %% Line 779
		      {'c','list',[_cor4|%% Line 780
					 [_cor5|[]]],Size}
	  %% Line 781
	  <T = {'c','opaque',_cor25,_cor26},Opaques> when 'true' ->
	      let <_31346> =
		  %% Line 782
		  apply 'is_opaque_type'/2
		      (_cor1, _cor0)
	      in  %% Line 782
		  case _31346 of
		    %% Line 783
		    <'true'> when 'true' ->
			apply 't_opaque_structure'/1
			    (_cor1)
		    %% Line 784
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_31346})
		      -| ['compiler_generated'] )
		  end
	  %% Line 786
	  <{'c','product',Types,_cor27},Opaques> when 'true' ->
	      let <_cor7> =
		  %% Line 800
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Type|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 't_struct_from_opaque'/2
					      (Type, _cor0)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_22928> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  case Types of
			  <[Type|_cor3]> when 'true' ->
			      let <_cor5> =
				  apply 't_struct_from_opaque'/2
				      (Type, _cor0)
			      in  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [_cor5|_cor6]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_22928> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Types})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 787
		  {'c','product',_cor7,'unknown'}
	  %% Line 788
	  <T = {'c','tuple','any',{_cor28,_cor29}},_X_Opaques> when 'true' ->
	      _cor1
	  %% Line 789
	  <{'c','tuple',Types,{Arity,Tag}},Opaques> when 'true' ->
	      let <_cor8> =
		  %% Line 800
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Type|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 't_struct_from_opaque'/2
					      (Type, _cor0)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_22928> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  case Types of
			  <[Type|_cor3]> when 'true' ->
			      let <_cor5> =
				  apply 't_struct_from_opaque'/2
				      (Type, _cor0)
			      in  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [_cor5|_cor6]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_22928> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Types})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 790
		  {'c','tuple',_cor8,{Arity,Tag}}
	  %% Line 791
	  <{'c','tuple_set',Set,_cor30},Opaques> when 'true' ->
	      let <_cor19> =
		  %% Line 792
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor11) ->
				case _cor11 of
				  <[%% Line 793
				    {Sz,Tuples}|_cor10]> when 'true' ->
				      let <_cor17> =
					  ( letrec
						'lc$^1'/1 =
						    fun (_cor14) ->
							case _cor14 of
							  <[T|_cor13]> when 'true' ->
							      let <_cor15> =
								  apply 't_struct_from_opaque'/2
								      (T, _cor0)
							      in  let <_cor16> =
								      apply 'lc$^1'/1
									  (_cor13)
								  in  ( [_cor15|_cor16]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_36128> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor14})
								  -| [{'function_name',{'lc$^1',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^1'/1
						    (Tuples)
					    -| ['list_comprehension'] )
				      in  let <_cor18> =
					      %% Line 793
					      apply 'lc$^0'/1
						  (_cor10)
					  in  ( [{Sz,_cor17}|_cor18]
						-| ['compiler_generated'] )
				  ( <[_cor9|_cor10]> when 'true' ->
					%% Line 793
					apply 'lc$^0'/1
					    (_cor10)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_25654> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor11})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Set)
		    -| ['list_comprehension'] )
	      in  %% Line 794
		  {'c','tuple_set',_cor19,'unknown'}
	  %% Line 795
	  <{'c','union',List = [_cor31|[_cor32|[_cor33|[_cor34|[_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[]]]]]]]]]]]],_cor42},Opaques> when 'true' ->
	      let <_cor21> =
		  %% Line 800
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Type|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 't_struct_from_opaque'/2
					      (Type, _cor0)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_22928> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  case List of
			  <[Type|_cor3]> when 'true' ->
			      let <_cor5> =
				  apply 't_struct_from_opaque'/2
				      (Type, _cor0)
			      in  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [_cor5|_cor6]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_22928> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',List})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 796
		  apply 't_sup'/1
		      (_cor21)
	  %% Line 797
	  <Type,_X_Opaques> when 'true' ->
	      _cor1
	end
'module_builtin_opaques'/1 =
    %% Line 804
    fun (_cor0) ->
	%% Line 805
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[O|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 't_opaque_modules'/1
				    (O)
			    in  let <_40340> =
				    call 'lists':'member'
					(_cor0, _cor4)
				in  ( case _40340 of
					<'true'> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [O|_cor6]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor2)
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_40340})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_15268> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  apply 'all_opaque_builtins'/0
		      ()
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
't_remote'/3 =
    %% Line 813
    fun (_cor2,_cor1,_cor0) ->
	let <_27901> =
	    %% Line 814
	    {'remote',_cor2,_cor1,_cor0}
	in  let <_cor3> =
		%% Line 4768
		call 'ordsets':'from_list'
		    ([_27901|[]])
	    in  %% Line 814
		{'c','remote',_cor3,'unknown'}
't_is_remote'/1 =
    %% Line 818
    fun (_cor0) ->
	%% Line 819
	apply 'do_opaque'/3
	    (_cor0, 'universe', 'is_remote'/1)
'is_remote'/1 =
    %% Line 821
    fun (_cor0) ->
	case _cor0 of
	  <{'c','remote',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 822
	  <_cor4> when 'true' ->
	      'false'
	end
't_solve_remote'/3 =
    %% Line 828
    fun (_cor2,_cor1,_cor0) ->
	let <_1236> =
	    %% Line 829
	    apply 't_solve_remote'/4
		(_cor2, _cor1, _cor0, [])
	in  %% Line 829
	    case _1236 of
	      <{RT,_X_RR}> when 'true' ->
		  RT
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1236})
		-| ['compiler_generated'] )
	    end
't_solve_remote'/4 =
    %% Line 832
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'c','function',[Domain|[Range|[]]],_cor27},ET,R,C> when 'true' ->
	      let <_29123> =
		  %% Line 833
		  apply 't_solve_remote'/4
		      (Domain, _cor2, _cor1, _cor0)
	      in  %% Line 833
		  case _29123 of
		    <{RT1,RR1}> when 'true' ->
			let <_37239> =
			    %% Line 834
			    apply 't_solve_remote'/4
				(Range, _cor2, _cor1, _cor0)
			in  %% Line 834
			    case _37239 of
			      <{RT2,RR2}> when 'true' ->
				  let <_cor6> =
				      %% Line 835
				      call 'erlang':'++'
					  (RR1, RR2)
				  in  %% Line 835
				      {{'c','function',[RT1|[RT2|[]]],'unknown'},_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_37239})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_29123})
		      -| ['compiler_generated'] )
		  end
	  %% Line 836
	  <{'c','list',[Types|[Term|[]]],Size},ET,R,C> when 'true' ->
	      let <_7263> =
		  %% Line 837
		  apply 't_solve_remote'/4
		      (Types, _cor2, _cor1, _cor0)
	      in  %% Line 837
		  case _7263 of
		    <{RT1,RR1}> when 'true' ->
			let <_11166> =
			    %% Line 838
			    apply 't_solve_remote'/4
				(Term, _cor2, _cor1, _cor0)
			in  %% Line 838
			    case _11166 of
			      <{RT2,RR2}> when 'true' ->
				  let <_cor9> =
				      %% Line 839
				      call 'erlang':'++'
					  (RR1, RR2)
				  in  %% Line 839
				      {{'c','list',[RT1|[RT2|[]]],Size},_cor9}
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_11166})
				-| ['compiler_generated'] )
			    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7263})
		      -| ['compiler_generated'] )
		  end
	  %% Line 840
	  <{'c','product',Types,_cor28},ET,R,C> when 'true' ->
	      let <_31016> =
		  %% Line 841
		  apply 'list_solve_remote'/4
		      (Types, _cor2, _cor1, _cor0)
	      in  %% Line 841
		  case _31016 of
		    <{RL,RR}> when 'true' ->
			%% Line 842
			{{'c','product',RL,'unknown'},RR}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_31016})
		      -| ['compiler_generated'] )
		  end
	  %% Line 843
	  <{'c','opaque',Set,_cor29},ET,R,C> when 'true' ->
	      let <List> =
		  %% Line 844
		  call 'ordsets':'to_list'
		      (Set)
	      in  let <_31070> =
		      %% Line 845
		      apply 'opaques_solve_remote'/4
			  (List, _cor2, _cor1, _cor0)
		  in  %% Line 845
		      case _31070 of
			<{NewList,RR}> when 'true' ->
			    let <_cor13> =
				%% Line 846
				call 'ordsets':'from_list'
				    (NewList)
			    in  %% Line 846
				{{'c','opaque',_cor13,'unknown'},RR}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_31070})
			  -| ['compiler_generated'] )
		      end
	  %% Line 847
	  <T = {'c','tuple','any',{_cor30,_cor31}},_X_ET,_X_R,_X_C> when 'true' ->
	      {_cor3,[]}
	  %% Line 848
	  <{'c','tuple',Types,{_X_Arity,_X_Tag}},ET,R,C> when 'true' ->
	      let <_14589> =
		  %% Line 849
		  apply 'list_solve_remote'/4
		      (Types, _cor2, _cor1, _cor0)
	      in  %% Line 849
		  case _14589 of
		    <{RL,RR}> when 'true' ->
			let <_cor15> =
			    %% Line 850
			    apply 't_tuple'/1
				(RL)
			in  %% Line 850
			    {_cor15,RR}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14589})
		      -| ['compiler_generated'] )
		  end
	  %% Line 851
	  <{'c','tuple_set',Set,_cor32},ET,R,C> when 'true' ->
	      let <_34913> =
		  %% Line 852
		  apply 'tuples_solve_remote'/4
		      (Set, _cor2, _cor1, _cor0)
	      in  %% Line 852
		  case _34913 of
		    <{NewTuples,RR}> when 'true' ->
			let <_cor17> =
			    %% Line 853
			    apply 't_sup'/1
				(NewTuples)
			in  %% Line 853
			    {_cor17,RR}
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_34913})
		      -| ['compiler_generated'] )
		  end
	  %% Line 854
	  <{'c','remote',Set,_cor33},ET,R,C> when 'true' ->
	      let <RemoteList> =
		  %% Line 855
		  call 'ordsets':'to_list'
		      (Set)
	      in  let <_584> =
		      %% Line 856
		      apply 'list_solve_remote_type'/4
			  (RemoteList, _cor2, _cor1, _cor0)
		  in  %% Line 856
		      case _584 of
			<{RL,RR}> when 'true' ->
			    let <_cor20> =
				%% Line 857
				apply 't_sup'/1
				    (RL)
			    in  %% Line 857
				{_cor20,RR}
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_584})
			  -| ['compiler_generated'] )
		      end
	  %% Line 858
	  <{'c','union',List = [_cor34|[_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[_cor43|[_cor44|[]]]]]]]]]]]],_cor45},ET,R,C> when 'true' ->
	      let <_39887> =
		  %% Line 859
		  apply 'list_solve_remote'/4
		      (List, _cor2, _cor1, _cor0)
	      in  %% Line 859
		  case _39887 of
		    <{RL,RR}> when 'true' ->
			let <_cor22> =
			    %% Line 860
			    apply 't_sup'/1
				(RL)
			in  %% Line 860
			    {_cor22,RR}
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_39887})
		      -| ['compiler_generated'] )
		  end
	  %% Line 861
	  <T,_X_ET,_X_R,_X_C> when 'true' ->
	      {_cor3,[]}
	end
't_solve_remote_type'/4 =
    %% Line 863
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <RemType = {'remote',RemMod,Name,Args0},ET,R,C> when 'true' ->
	      let <_cor7> =
		  %% Line 865
		  fun (_cor5) ->
		      let <_33333> =
			  %% Line 866
			  apply 't_solve_remote'/4
			      (_cor5, _cor2, _cor1, _cor0)
		      in  %% Line 866
			  case _33333 of
			    <{Arg,_cor50}> when 'true' ->
				Arg
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_33333})
			      -| ['compiler_generated'] )
			  end
	      in  let <Args> =
		      %% Line 865
		      call 'lists':'map'
			  (_cor7, Args0)
		  in  let <ArgsLen> =
			  %% Line 869
			  call 'erlang':'length'
			      (Args)
		      in  let <_4575> =
			      %% Line 870
			      call 'dict':'find'
				  (RemMod, _cor1)
			  in  %% Line 870
			      case _4575 of
				%% Line 871
				<'error'> when 'true' ->
				    let <_cor11> =
					%% Line 872
					call 'erlang':'self'
					    ()
				    in  let <_cor10> =
					    %% Line 872
					    call 'erlang':'self'
						()
					in  do  %% Line 872
						call 'erlang':'!'
						    (_cor11, {_cor10,'ext_types',{RemMod,Name,ArgsLen}})
						%% Line 873
						{'any',[]}
				%% Line 874
				<{'ok',RemDict}> when 'true' ->
				    let <MFA> = {RemMod,Name,ArgsLen}
				    in  let <_6892> =
					    %% Line 876
					    call 'sets':'is_element'
						(MFA, _cor2)
					in  %% Line 876
					    case _6892 of
					      %% Line 877
					      <'true'> when 'true' ->
						  let <_21424> =
						      %% Line 878
						      apply 'lookup_type'/3
							  (Name, ArgsLen, RemDict)
						  in  %% Line 878
						      case _21424 of
							%% Line 879
							<{'type',{_X_Mod,Type,ArgNames}}> when 'true' ->
							    let <_33133> =
								%% Line 881
								apply 'can_unfold_more'/2
								    (_cor3, _cor0)
							    in  let <NewType,NewCycle,NewRR> =
								    %% Line 881
								    case _33133 of
								      %% Line 882
								      <'true'> when 'true' ->
									  let <List> =
									      %% Line 883
									      call 'lists':'zip'
										  (ArgNames, Args)
									  in  let <TmpVarDict> =
										  %% Line 884
										  call 'dict':'from_list'
										      (List)
									      in  let <_cor16> =
										      %% Line 885
										      apply 't_from_form'/3
											  (Type, RemDict, TmpVarDict)
										  in  <_cor16,%% Line 885
											      [_cor3|_cor0],%% Line 885
													    []>
								      %% Line 886
								      <'false'> when 'true' ->
									  <'any',_cor0,%% Line 887
										       [_cor3|[]]>
								      ( <_cor18> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_33133})
									-| ['compiler_generated'] )
								    end
								in  let <_32939> =
									%% Line 889
									apply 't_solve_remote'/4
									    (NewType, _cor2, _cor1, NewCycle)
								    in  %% Line 889
									case _32939 of
									  <{RT,RR}> when 'true' ->
									      let <RetRR> =
										  %% Line 890
										  call 'erlang':'++'
										      (NewRR, RR)
									      in  let <_24687> =
										      %% Line 892
										      call 'lists':'member'
											  (_cor3, RetRR)
										  in  let <_cor24> =
											  %% Line 892
											  case _24687 of
											    %% Line 893
											    <'true'> when 'true' ->
												apply 't_limit'/2
												    (RT, 2)
											    %% Line 894
											    <'false'> when 'true' ->
												RT
											    ( <_cor23> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_24687})
											      -| ['compiler_generated'] )
											  end
										      in  %% Line 896
											  {_cor24,RetRR}
									  ( <_cor21> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_32939})
									    -| ['compiler_generated'] )
									end
							%% Line 897
							<{'opaque',{Mod,Type,ArgNames}}> when 'true' ->
							    let <List> =
								%% Line 898
								call 'lists':'zip'
								    (ArgNames, Args)
							    in  let <TmpVarDict> =
								    %% Line 899
								    call 'dict':'from_list'
									(List)
								in  let <_18503> =
									%% Line 901
									apply 'can_unfold_more'/2
									    (_cor3, _cor0)
								    in  let <Rep,NewCycle,NewRR> =
									    %% Line 901
									    case _18503 of
									      %% Line 902
									      <'true'> when 'true' ->
										  let <_cor28> =
										      %% Line 903
										      apply 't_from_form'/3
											  (Type, RemDict, TmpVarDict)
										  in  <_cor28,%% Line 903
											      [_cor3|_cor0],%% Line 903
													    []>
									      %% Line 904
									      <'false'> when 'true' ->
										  <'any',_cor0,%% Line 905
											       [_cor3|[]]>
									      ( <_cor30> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_18503})
										-| ['compiler_generated'] )
									    end
									in  let <_19890> =
										%% Line 907
										apply 't_solve_remote'/4
										    (Rep, _cor2, _cor1, NewCycle)
									    in  %% Line 907
										case _19890 of
										  <{NewRep,RR}> when 'true' ->
										      let <RetRR> =
											  %% Line 908
											  call 'erlang':'++'
											      (NewRR, RR)
										      in  let <_22773> =
											      %% Line 910
											      call 'lists':'member'
												  (_cor3, RetRR)
											  in  let <_cor36> =
												  %% Line 910
												  case _22773 of
												    %% Line 911
												    <'true'> when 'true' ->
													apply 't_limit'/2
													    (NewRep, 2)
												    %% Line 912
												    <'false'> when 'true' ->
													NewRep
												    ( <_cor35> when 'true' ->
													  primop 'match_fail'
													      ({'case_clause',_22773})
												      -| ['compiler_generated'] )
												  end
											      in  let <_cor38> =
												      %% Line 914
												      apply 'skip_opaque_alias'/4
													  (_cor36, Mod, Name, Args)
												  in  %% Line 914
												      {_cor38,RetRR}
										  ( <_cor33> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_19890})
										    -| ['compiler_generated'] )
										end
							%% Line 915
							<'error'> when 'true' ->
							    let <Msg> =
								%% Line 916
								call 'io_lib':'format'
								    ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[102|[105|[110|[100|[32|[114|[101|[109|[111|[116|[101|[32|[116|[121|[112|[101|[32|[126|[119|[58|[126|[119|[40|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 917
																																	    [RemMod|[Name|[]]])
							    in  %% Line 918
								call 'erlang':'throw'
								    ({'error',Msg})
							( <_cor40> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_21424})
							  -| ['compiler_generated'] )
						      end
					      %% Line 920
					      <'false'> when 'true' ->
						  let <_cor42> =
						      %% Line 921
						      call 'erlang':'self'
							  ()
						  in  let <_cor41> =
							  %% Line 921
							  call 'erlang':'self'
							      ()
						      in  do  %% Line 921
							      call 'erlang':'!'
								  (_cor42, {_cor41,'ext_types',{RemMod,Name,ArgsLen}})
							      %% Line 922
							      {'any',[]}
					      ( <_cor44> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_6892})
						-| ['compiler_generated'] )
					    end
				( <_cor45> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_4575})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_solve_remote_type',4}}] )
	    -| ['compiler_generated'] )
	end
'list_solve_remote'/4 =
    %% Line 926
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_ET,_X_R,_X_C> when 'true' ->
	      %% Line 927
	      {[],[]}
	  %% Line 928
	  <[Type|Types],ET,R,C> when 'true' ->
	      let <_21893> =
		  %% Line 929
		  apply 't_solve_remote'/4
		      (Type, _cor2, _cor1, _cor0)
	      in  %% Line 929
		  case _21893 of
		    <{RT,RR1}> when 'true' ->
			let <_31951> =
			    %% Line 930
			    apply 'list_solve_remote'/4
				(Types, _cor2, _cor1, _cor0)
			in  %% Line 930
			    case _31951 of
			      <{RL,RR2}> when 'true' ->
				  let <_cor6> =
				      %% Line 931
				      call 'erlang':'++'
					  (RR1, RR2)
				  in  %% Line 931
				      {[RT|RL],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_31951})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_21893})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'list_solve_remote',4}}] )
	    -| ['compiler_generated'] )
	end
'list_solve_remote_type'/4 =
    %% Line 933
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_ET,_X_R,_X_C> when 'true' ->
	      %% Line 934
	      {[],[]}
	  %% Line 935
	  <[Type|Types],ET,R,C> when 'true' ->
	      let <_31495> =
		  %% Line 936
		  apply 't_solve_remote_type'/4
		      (Type, _cor2, _cor1, _cor0)
	      in  %% Line 936
		  case _31495 of
		    <{RT,RR1}> when 'true' ->
			let <_27633> =
			    %% Line 937
			    apply 'list_solve_remote_type'/4
				(Types, _cor2, _cor1, _cor0)
			in  %% Line 937
			    case _27633 of
			      <{RL,RR2}> when 'true' ->
				  let <_cor6> =
				      %% Line 938
				      call 'erlang':'++'
					  (RR1, RR2)
				  in  %% Line 938
				      {[RT|RL],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_27633})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_31495})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'list_solve_remote_type',4}}] )
	    -| ['compiler_generated'] )
	end
'opaques_solve_remote'/4 =
    %% Line 940
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_ET,_X_R,_X_C> when 'true' ->
	      %% Line 941
	      {[],[]}
	  %% Line 942
	  <[Remote = {'opaque',_cor14,_cor15,_cor16,Struct}|Tail],ET,R,C> when 'true' ->
	      let <_21899> =
		  %% Line 943
		  apply 't_solve_remote'/4
		      (Struct, _cor2, _cor1, _cor0)
	      in  %% Line 943
		  case _21899 of
		    <{RT,RR1}> when 'true' ->
			let <_29513> =
			    %% Line 944
			    apply 'opaques_solve_remote'/4
				(Tail, _cor2, _cor1, _cor0)
			in  %% Line 944
			    case _29513 of
			      <{LOp,RR2}> when 'true' ->
				  let <_cor9> =
				      %% Line 945
				      call 'erlang':'setelement'
					  (5, Remote, RT)
				  in  let <_cor6> =
					  %% Line 945
					  call 'erlang':'++'
					      (RR1, RR2)
				      in  %% Line 945
					  {[_cor9|LOp],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_29513})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_21899})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opaques_solve_remote',4}}] )
	    -| ['compiler_generated'] )
	end
'tuples_solve_remote'/4 =
    %% Line 947
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_ET,_X_R,_X_C> when 'true' ->
	      %% Line 948
	      {[],[]}
	  %% Line 949
	  <[{_X_Sz,Tuples}|Tail],ET,R,C> when 'true' ->
	      let <_37436> =
		  %% Line 950
		  apply 'list_solve_remote'/4
		      (Tuples, _cor2, _cor1, _cor0)
	      in  %% Line 950
		  case _37436 of
		    <{RL,RR1}> when 'true' ->
			let <_12144> =
			    %% Line 951
			    apply 'tuples_solve_remote'/4
				(Tail, _cor2, _cor1, _cor0)
			in  %% Line 951
			    case _12144 of
			      <{LSzTpls,RR2}> when 'true' ->
				  let <_cor7> =
				      %% Line 952
				      call 'erlang':'++'
					  (RL, LSzTpls)
				  in  let <_cor6> =
					  %% Line 952
					  call 'erlang':'++'
					      (RR1, RR2)
				      in  %% Line 952
					  {_cor7,_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_12144})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_37436})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'tuples_solve_remote',4}}] )
	    -| ['compiler_generated'] )
	end
't_unit'/0 =
    %% Line 960
    fun () ->
	%% Line 961
	'unit'
't_is_unit'/1 =
    %% Line 965
    fun (_cor0) ->
	case _cor0 of
	  <'unit'> when 'true' ->
	      'true'
	  %% Line 966
	  <_cor2> when 'true' ->
	      'false'
	end
't_is_none_or_unit'/1 =
    %% Line 970
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      'true'
	  %% Line 971
	  <'unit'> when 'true' ->
	      'true'
	  %% Line 972
	  <_cor2> when 'true' ->
	      'false'
	end
't_atom'/0 =
    %% Line 980
    fun () ->
	%% Line 981
	{'c','atom','any','unknown'}
't_atom'/1 =
    %% Line 985
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      ([_cor0|[]])
	      in  %% Line 986
		  {'c','atom',_cor1,'unknown'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_atom',1}}] )
	    -| ['compiler_generated'] )
	end
't_atoms'/1 =
    %% Line 990
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 991
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[A|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 't_atom'/1
					      (A)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_22587> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  %% Line 991
		  apply 't_sup'/1
		      (_cor6)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_atoms',1}}] )
	    -| ['compiler_generated'] )
	end
't_atom_vals'/1 =
    %% Line 995
    fun (_cor0) ->
	%% Line 996
	apply 't_atom_vals'/2
	    (_cor0, 'universe')
't_atom_vals'/2 =
    %% Line 1000
    fun (_cor1,_cor0) ->
	%% Line 1001
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'atom_vals'/1)
'atom_vals'/1 =
    %% Line 1003
    fun (_cor0) ->
	case _cor0 of
	  <{'c','atom','any',_cor4}> when 'true' ->
	      'unknown'
	  %% Line 1004
	  <{'c','atom',Set,_cor5}> when 'true' ->
	      %% Line 4815
	      call 'ordsets':'to_list'
		  (Set)
	  %% Line 1005
	  <{'c','opaque',_cor6,_cor7}> when 'true' ->
	      'unknown'
	  %% Line 1006
	  <Other> when 'true' ->
	      let <_22274> =
		  %% Line 1007
		  apply 't_inf'/2
		      ({'c','atom','any','unknown'}, _cor0)
	      in  %% Line 1007
		  case _22274 of
		    <Atm = {'c','atom',_cor8,_cor9}> when 'true' ->
			%% Line 1008
			apply 'atom_vals'/1
			    (_22274)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_22274})
		      -| ['compiler_generated'] )
		  end
	end
't_is_atom'/1 =
    %% Line 1012
    fun (_cor0) ->
	%% Line 1013
	apply 't_is_atom'/2
	    (_cor0, 'universe')
't_is_atom'/2 =
    %% Line 1017
    fun (_cor1,_cor0) ->
	%% Line 1018
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_atom1'/1)
'is_atom1'/1 =
    %% Line 1020
    fun (_cor0) ->
	case _cor0 of
	  <{'c','atom',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 1021
	  <_cor4> when 'true' ->
	      'false'
	end
't_is_any_atom'/2 =
    %% Line 1025
    fun (_cor1,_cor0) ->
	%% Line 1026
	apply 't_is_any_atom'/3
	    (_cor1, _cor0, 'universe')
't_is_any_atom'/3 =
    %% Line 1030
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1032
	    fun (_cor3) ->
		apply 'is_any_atom'/2
		    (_cor2, _cor3)
	in  %% Line 1031
	    apply 'do_opaque'/3
		(_cor1, _cor0, _cor5)
'is_any_atom'/2 =
    %% Line 1034
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Atom,{'c','atom','any',_cor4}>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      'false'
	  %% Line 1035
	  <Atom,{'c','atom',Set,_cor5}>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      let <_cor2> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      ([_cor1|[]])
	      in  %% Line 4771
		  call 'erlang':'=:='
		      (_cor2, Set)
	  %% Line 1037
	  <Atom,_cor6>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_any_atom',2}}] )
	    -| ['compiler_generated'] )
	end
't_is_boolean'/1 =
    %% Line 1043
    fun (_cor0) ->
	%% Line 1044
	apply 't_is_boolean'/2
	    (_cor0, 'universe')
't_is_boolean'/2 =
    %% Line 1048
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1049
	    fun (_cor2) ->
		apply 'is_boolean'/1
		    (_cor2)
	in  %% Line 1049
	    apply 'do_opaque'/3
		(_cor1, _cor0, _cor4)
't_boolean'/0 =
    %% Line 1053
    fun () ->
	let <_cor0> =
	    %% Line 4810
	    call 'ordsets':'from_list'
		(['false'|['true']])
	in  %% Line 1054
	    {'c','atom',_cor0,'unknown'}
'is_boolean'/1 =
    %% Line 1056
    fun (_cor0) ->
	case _cor0 of
	  <{'c','atom','any',_cor9}> when 'true' ->
	      'false'
	  %% Line 1057
	  <{'c','atom',Set,_cor10}> when 'true' ->
	      let <_33317> =
		  %% Line 4824
		  call 'ordsets':'size'
		      (Set)
	      in  %% Line 1058
		  case _33317 of
		    %% Line 1059
		    <1> when 'true' ->
			let <_40163> =
			    %% Line 4774
			    call 'ordsets':'is_element'
				('true', Set)
			in  ( case _40163 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 4774
				      call 'ordsets':'is_element'
					  ('false', Set)
				  -| ['compiler_generated'] )
				( <_cor1> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_40163}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1060
		    <2> when 'true' ->
			let <_19860> =
			    %% Line 4774
			    call 'ordsets':'is_element'
				('true', Set)
			in  ( case _19860 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 4774
				      call 'ordsets':'is_element'
					  ('false', Set)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor3> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_19860}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1061
		    <N>
			when let <_cor5> =
			      call 'erlang':'is_integer'
				  (_33317)
			  in  let <_cor6> =
				  call 'erlang':'>'
				      (_33317, 2)
			      in  call 'erlang':'and'
				      (_cor5, _cor6) ->
			'false'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_33317})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1063
	  <_cor11> when 'true' ->
	      'false'
	end
't_binary'/0 =
    %% Line 1071
    fun () ->
	%% Line 1072
	{'c','binary',[8|[0]],'unknown'}
't_is_binary'/1 =
    %% Line 1076
    fun (_cor0) ->
	%% Line 1077
	apply 't_is_binary'/2
	    (_cor0, 'universe')
't_is_binary'/2 =
    %% Line 1081
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1082
	    fun (_cor2) ->
		apply 'is_binary'/1
		    (_cor2)
	in  %% Line 1082
	    apply 'do_opaque'/3
		(_cor1, _cor0, _cor4)
'is_binary'/1 =
    %% Line 1084
    fun (_cor0) ->
	case _cor0 of
	  <{'c','binary',[U|[B|[]]],_cor6}> when 'true' ->
	      let <_cor2> =
		  %% Line 1085
		  call 'erlang':'rem'
		      (U, 8)
	      in  %% Line 1085
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (_cor2,
				   0) ->
			    let <_cor3> =
				call 'erlang':'rem'
				    (B, 8)
			    in  call 'erlang':'=:='
				    (_cor3, 0)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1086
	  <_cor7> when 'true' ->
	      'false'
	end
't_bitstr'/0 =
    %% Line 1094
    fun () ->
	%% Line 1095
	{'c','binary',[1|[0]],'unknown'}
't_bitstr'/2 =
    %% Line 1099
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1101
	    case <> of
	      %% Line 1102
	      <>
		  when call 'erlang':'=:='
			(_cor1,
			 0) ->
		  _cor0
	      %% Line 1103
	      <>
		  when try
			let <_cor3> =
			    call 'erlang':'*'
				(_cor1, 9)
			in  call 'erlang':'>='
				(_cor0, _cor3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_cor5> =
		      %% Line 1104
		      call 'erlang':'rem'
			  (_cor0, _cor1)
		  in  let <_cor4> =
			  %% Line 1104
			  call 'erlang':'*'
			      (_cor1, 8)
		      in  %% Line 1104
			  call 'erlang':'+'
			      (_cor5, _cor4)
	      %% Line 1105
	      <> when 'true' ->
		  _cor0
	    end
	in  %% Line 1108
	    {'c','binary',[_cor1|[_cor6|[]]],'unknown'}
't_bitstr_unit'/1 =
    %% Line 1112
    fun (_cor0) ->
	case _cor0 of
	  <{'c','binary',[U|[_cor2|[]]],_cor3}> when 'true' ->
	      U
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_bitstr_unit',1}}] )
	    -| ['compiler_generated'] )
	end
't_bitstr_base'/1 =
    %% Line 1116
    fun (_cor0) ->
	case _cor0 of
	  <{'c','binary',[_cor2|[B|[]]],_cor3}> when 'true' ->
	      B
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_bitstr_base',1}}] )
	    -| ['compiler_generated'] )
	end
't_bitstr_concat'/1 =
    %% Line 1120
    fun (_cor0) ->
	%% Line 1121
	apply 't_bitstr_concat_1'/2
	    (_cor0, {'c','binary',[0|[0]],'unknown'})
't_bitstr_concat_1'/2 =
    %% Line 1123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Left],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1124
		  apply 't_bitstr_concat'/2
		      (_cor0, T)
	      in  %% Line 1124
		  apply 't_bitstr_concat_1'/2
		      (Left, _cor2)
	  %% Line 1125
	  <[],Acc> when 'true' ->
	      _cor0
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_bitstr_concat_1',2}}] )
	    -| ['compiler_generated'] )
	end
't_bitstr_concat'/2 =
    %% Line 1130
    fun (_cor1,_cor0) ->
	let <T1p> =
	    %% Line 1131
	    apply 't_inf'/2
		({'c','binary',[1|[0]],'unknown'}, _cor1)
	in  let <T2p> =
		%% Line 1132
		apply 't_inf'/2
		    ({'c','binary',[1|[0]],'unknown'}, _cor0)
	    in  let <_cor7> =
		    %% Line 1133
		    apply 't_unopaque'/1
			(T1p)
		in  let <_cor6> =
			%% Line 1133
			apply 't_unopaque'/1
			    (T2p)
		    in  %% Line 1133
			apply 'bitstr_concat'/2
			    (_cor7, _cor6)
't_bitstr_match'/2 =
    %% Line 1137
    fun (_cor1,_cor0) ->
	let <T1p> =
	    %% Line 1138
	    apply 't_inf'/2
		({'c','binary',[1|[0]],'unknown'}, _cor1)
	in  let <T2p> =
		%% Line 1139
		apply 't_inf'/2
		    ({'c','binary',[1|[0]],'unknown'}, _cor0)
	    in  let <_cor7> =
		    %% Line 1140
		    apply 't_unopaque'/1
			(T1p)
		in  let <_cor6> =
			%% Line 1140
			apply 't_unopaque'/1
			    (T2p)
		    in  %% Line 1140
			apply 'bitstr_match'/2
			    (_cor7, _cor6)
't_is_bitstr'/1 =
    %% Line 1144
    fun (_cor0) ->
	%% Line 1145
	apply 't_is_bitstr'/2
	    (_cor0, 'universe')
't_is_bitstr'/2 =
    %% Line 1149
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1150
	    fun (_cor2) ->
		%% Line 1152
		case _cor2 of
		  <{'c','binary',[_28617|[_cor3|[]]],_cor4}> when 'true' ->
		      'true'
		  %% Line 1153
		  <_cor5> when 'true' ->
		      'false'
		end
	in  %% Line 1150
	    apply 'do_opaque'/3
		(_cor1, _cor0, _cor4)
't_matchstate'/0 =
    %% Line 1161
    fun () ->
	%% Line 1162
	{'c','matchstate',[{'c','binary',[1|[0]],'unknown'}|['any']],'unknown'}
't_matchstate'/2 =
    %% Line 1166
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Init,0> when 'true' ->
	      %% Line 1167
	      {'c','matchstate',[_cor1|[_cor1|[]]],'unknown'}
	  %% Line 1168
	  <Init,Max>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 1169
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[_cor12|_cor3]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( ['none'|_cor6]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_29070> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'lists':'seq'
				(1, _cor0)
			in  case _cor4 of
			      <[_cor12|_cor3]> when 'true' ->
				  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( ['none'|_cor6]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_29070> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor4})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  let <Slots> =
		      %% Line 1169
		      [_cor1|_cor7]
		  in  let <_cor9> =
			  %% Line 1170
			  apply 't_product'/1
			      (Slots)
		      in  %% Line 1170
			  {'c','matchstate',[_cor1|[_cor9|[]]],'unknown'}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_matchstate',2}}] )
	    -| ['compiler_generated'] )
	end
't_is_matchstate'/1 =
    %% Line 1174
    fun (_cor0) ->
	case _cor0 of
	  <{'c','matchstate',[_cor2|[_cor3|[]]],_cor4}> when 'true' ->
	      'true'
	  %% Line 1175
	  <_cor5> when 'true' ->
	      'false'
	end
't_matchstate_present'/1 =
    %% Line 1179
    fun (_cor0) ->
	%% Line 1180
	case apply 't_inf'/2
		 ({'c','matchstate',[{'c','binary',[1|[0]],'unknown'}|['any']],'unknown'}, _cor0) of
	  %% Line 1181
	  <{'c','matchstate',[P|[_cor4|[]]],_cor5}> when 'true' ->
	      P
	  %% Line 1182
	  <_cor6> when 'true' ->
	      'none'
	end
't_matchstate_slot'/2 =
    %% Line 1187
    fun (_cor1,_cor0) ->
	let <RealSlot> =
	    %% Line 1188
	    call 'erlang':'+'
		(_cor0, 1)
	in  %% Line 1189
	    case apply 't_inf'/2
		     ({'c','matchstate',[{'c','binary',[1|[0]],'unknown'}|['any']],'unknown'}, _cor1) of
	      %% Line 1190
	      <{'c','matchstate',[_cor8|['any']],_cor9}> when 'true' ->
		  'any'
	      %% Line 1191
	      <{'c','matchstate',[_cor10|[{'c','product',Vals,_cor11}|[]]],_cor12}>
		  when try
			let <_cor4> =
			    call 'erlang':'length'
				(Vals)
			in  call 'erlang':'>='
				(_cor4, RealSlot)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 1192
		  call 'lists':'nth'
		      (RealSlot, Vals)
	      %% Line 1193
	      <{'c','matchstate',[_cor13|[{'c','product',_cor14,_cor15}|[]]],_cor16}> when 'true' ->
		  %% Line 1194
		  'none'
	      %% Line 1195
	      <{'c','matchstate',[_cor17|[SlotType|[]]],_cor18}>
		  when call 'erlang':'=:='
			(RealSlot,
			 1) ->
		  SlotType
	      %% Line 1197
	      <_cor19> when 'true' ->
		  %% Line 1198
		  'none'
	    end
't_matchstate_slots'/1 =
    %% Line 1203
    fun (_cor0) ->
	case _cor0 of
	  <{'c','matchstate',[_cor2|[Slots|[]]],_cor3}> when 'true' ->
	      Slots
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_matchstate_slots',1}}] )
	    -| ['compiler_generated'] )
	end
't_matchstate_update_present'/2 =
    %% Line 1208
    fun (_cor1,_cor0) ->
	%% Line 1209
	case apply 't_inf'/2
		 ({'c','matchstate',[{'c','binary',[1|[0]],'unknown'}|['any']],'unknown'}, _cor0) of
	  %% Line 1210
	  <{'c','matchstate',[_cor6|[Slots|[]]],_cor7}> when 'true' ->
	      %% Line 1211
	      {'c','matchstate',[_cor1|[Slots|[]]],'unknown'}
	  %% Line 1212
	  <_cor8> when 'true' ->
	      'none'
	end
't_matchstate_update_slot'/3 =
    %% Line 1217
    fun (_cor2,_cor1,_cor0) ->
	let <RealSlot> =
	    %% Line 1218
	    call 'erlang':'+'
		(_cor0, 1)
	in  %% Line 1219
	    case apply 't_inf'/2
		     ({'c','matchstate',[{'c','binary',[1|[0]],'unknown'}|['any']],'unknown'}, _cor1) of
	      %% Line 1220
	      <{'c','matchstate',[Pres|[Slots|[]]],_cor16}> when 'true' ->
		  let <_cor10> =
		      %% Line 1222
		      case Slots of
			%% Line 1223
			<'any'> when 'true' ->
			    %% Line 1224
			    'any'
			%% Line 1225
			<{'c','product',Vals,_cor17}>
			    when try
				  let <_cor5> =
				      call 'erlang':'length'
					  (Vals)
				  in  call 'erlang':'>='
					  (_cor5, RealSlot)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor6> =
				%% Line 1226
				call 'erlang':'list_to_tuple'
				    (Vals)
			    in  let <NewTuple> =
				    %% Line 1226
				    call 'erlang':'setelement'
					(RealSlot, _cor6, _cor2)
				in  let <NewVals> =
					%% Line 1227
					call 'erlang':'tuple_to_list'
					    (NewTuple)
				    in  %% Line 1228
					{'c','product',NewVals,'unknown'}
			%% Line 1229
			<{'c','product',_cor18,_cor19}> when 'true' ->
			    %% Line 1230
			    'none'
			%% Line 1231
			<_cor20>
			    when call 'erlang':'=:='
				  (RealSlot,
				   1) ->
			    _cor2
			%% Line 1233
			<_cor21> when 'true' ->
			    %% Line 1234
			    'none'
		      end
		  in  %% Line 1236
		      {'c','matchstate',[Pres|[_cor10|[]]],'unknown'}
	      %% Line 1237
	      <_cor22> when 'true' ->
		  %% Line 1238
		  'none'
	    end
't_fun'/0 =
    %% Line 1247
    fun () ->
	%% Line 1248
	{'c','function',['any'|['any']],'unknown'}
't_fun'/1 =
    %% Line 1252
    fun (_cor0) ->
	%% Line 1253
	{'c','function',['any'|[_cor0|[]]],'unknown'}
't_fun'/2 =
    %% Line 1257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Domain,Range>
	      when call 'erlang':'is_list'
		    (_cor1) ->
	      %% Line 1258
	      {'c','function',[{'c','product',_cor1,'unknown'}|[_cor0|[]]],'unknown'}
	  %% Line 1259
	  <Arity,Range>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(0, _cor1)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (_cor1, 255)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 1260
		  call 'lists':'duplicate'
		      (_cor1, 'any')
	      in  %% Line 1260
		  {'c','function',[{'c','product',_cor6,'unknown'}|[_cor0|[]]],'unknown'}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_fun',2}}] )
	    -| ['compiler_generated'] )
	end
't_fun_args'/1 =
    %% Line 1264
    fun (_cor0) ->
	%% Line 1265
	apply 't_fun_args'/2
	    (_cor0, 'universe')
't_fun_args'/2 =
    %% Line 1269
    fun (_cor1,_cor0) ->
	%% Line 1270
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'fun_args'/1)
'fun_args'/1 =
    %% Line 1272
    fun (_cor0) ->
	case _cor0 of
	  <{'c','function',['any'|[_cor2|[]]],_cor3}> when 'true' ->
	      %% Line 1273
	      'unknown'
	  %% Line 1274
	  <{'c','function',[{'c','product',Domain,_cor4}|[_cor5|[]]],_cor6}>
	      when call 'erlang':'is_list'
		    (Domain) ->
	      Domain
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fun_args',1}}] )
	    -| ['compiler_generated'] )
	end
't_fun_arity'/1 =
    %% Line 1279
    fun (_cor0) ->
	%% Line 1280
	apply 't_fun_arity'/2
	    (_cor0, 'universe')
't_fun_arity'/2 =
    %% Line 1284
    fun (_cor1,_cor0) ->
	%% Line 1285
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'fun_arity'/1)
'fun_arity'/1 =
    %% Line 1287
    fun (_cor0) ->
	case _cor0 of
	  <{'c','function',['any'|[_cor2|[]]],_cor3}> when 'true' ->
	      %% Line 1288
	      'unknown'
	  %% Line 1289
	  <{'c','function',[{'c','product',Domain,_cor4}|[_cor5|[]]],_cor6}> when 'true' ->
	      %% Line 1290
	      call 'erlang':'length'
		  (Domain)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fun_arity',1}}] )
	    -| ['compiler_generated'] )
	end
't_fun_range'/1 =
    %% Line 1294
    fun (_cor0) ->
	%% Line 1295
	apply 't_fun_range'/2
	    (_cor0, 'universe')
't_fun_range'/2 =
    %% Line 1299
    fun (_cor1,_cor0) ->
	%% Line 1300
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'fun_range'/1)
'fun_range'/1 =
    %% Line 1302
    fun (_cor0) ->
	case _cor0 of
	  <{'c','function',[_cor2|[Range|[]]],_cor3}> when 'true' ->
	      Range
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fun_range',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_fun'/1 =
    %% Line 1307
    fun (_cor0) ->
	%% Line 1308
	apply 't_is_fun'/2
	    (_cor0, 'universe')
't_is_fun'/2 =
    %% Line 1312
    fun (_cor1,_cor0) ->
	%% Line 1313
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_fun'/1)
'is_fun'/1 =
    %% Line 1315
    fun (_cor0) ->
	case _cor0 of
	  <{'c','function',[_cor2|[_cor3|[]]],_cor4}> when 'true' ->
	      'true'
	  %% Line 1316
	  <_cor5> when 'true' ->
	      'false'
	end
't_identifier'/0 =
    %% Line 1324
    fun () ->
	%% Line 1325
	{'c','identifier','any','unknown'}
't_port'/0 =
    %% Line 1338
    fun () ->
	let <_cor0> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['port'])
	in  %% Line 1339
	    {'c','identifier',_cor0,'unknown'}
't_is_port'/1 =
    %% Line 1343
    fun (_cor0) ->
	%% Line 1344
	apply 't_is_port'/2
	    (_cor0, 'universe')
't_is_port'/2 =
    %% Line 1348
    fun (_cor1,_cor0) ->
	%% Line 1349
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_port1'/1)
'is_port1'/1 =
    %% Line 1351
    fun (_cor0) ->
	case _cor0 of
	  <{'c','identifier','any',_cor2}> when 'true' ->
	      'false'
	  %% Line 1352
	  <{'c','identifier',Set,_cor3}> when 'true' ->
	      let <_cor2> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['port'])
	      in  %% Line 4771
		  call 'erlang':'=:='
		      (_cor2, Set)
	  %% Line 1353
	  <_cor4> when 'true' ->
	      'false'
	end
't_pid'/0 =
    %% Line 1359
    fun () ->
	let <_cor0> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['pid'])
	in  %% Line 1360
	    {'c','identifier',_cor0,'unknown'}
't_is_pid'/1 =
    %% Line 1364
    fun (_cor0) ->
	%% Line 1365
	apply 't_is_pid'/2
	    (_cor0, 'universe')
't_is_pid'/2 =
    %% Line 1369
    fun (_cor1,_cor0) ->
	%% Line 1370
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_pid1'/1)
'is_pid1'/1 =
    %% Line 1372
    fun (_cor0) ->
	case _cor0 of
	  <{'c','identifier','any',_cor2}> when 'true' ->
	      'false'
	  %% Line 1373
	  <{'c','identifier',Set,_cor3}> when 'true' ->
	      let <_cor2> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['pid'])
	      in  %% Line 4771
		  call 'erlang':'=:='
		      (_cor2, Set)
	  %% Line 1374
	  <_cor4> when 'true' ->
	      'false'
	end
't_reference'/0 =
    %% Line 1380
    fun () ->
	let <_cor0> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['reference'])
	in  %% Line 1381
	    {'c','identifier',_cor0,'unknown'}
't_is_reference'/1 =
    %% Line 1385
    fun (_cor0) ->
	%% Line 1386
	apply 't_is_reference'/2
	    (_cor0, 'universe')
't_is_reference'/2 =
    %% Line 1390
    fun (_cor1,_cor0) ->
	%% Line 1391
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_reference1'/1)
'is_reference1'/1 =
    %% Line 1393
    fun (_cor0) ->
	case _cor0 of
	  <{'c','identifier','any',_cor2}> when 'true' ->
	      'false'
	  %% Line 1394
	  <{'c','identifier',Set,_cor3}> when 'true' ->
	      let <_cor2> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['reference'])
	      in  %% Line 4771
		  call 'erlang':'=:='
		      (_cor2, Set)
	  %% Line 1395
	  <_cor4> when 'true' ->
	      'false'
	end
't_number'/0 =
    %% Line 1403
    fun () ->
	%% Line 1404
	{'c','number','any','unknown'}
't_number'/1 =
    %% Line 1408
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1409
	      apply 't_integer'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_number',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_number'/1 =
    %% Line 1413
    fun (_cor0) ->
	%% Line 1414
	apply 't_is_number'/2
	    (_cor0, 'universe')
't_is_number'/2 =
    %% Line 1418
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1419
	    fun (_cor2) ->
		%% Line 1421
		case _cor2 of
		  <{'c','number',_8647,_cor3}> when 'true' ->
		      'true'
		  %% Line 1422
		  <_cor4> when 'true' ->
		      'false'
		end
	in  %% Line 1419
	    apply 'do_opaque'/3
		(_cor1, _cor0, _cor4)
't_number_vals'/1 =
    %% Line 1430
    fun (_cor0) ->
	%% Line 1431
	apply 't_number_vals'/2
	    (_cor0, 'universe')
't_number_vals'/2 =
    %% Line 1435
    fun (_cor1,_cor0) ->
	%% Line 1436
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'number_vals'/1)
'number_vals'/1 =
    %% Line 1438
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 4815
	      call 'ordsets':'to_list'
		  (Set)
	  %% Line 1439
	  <{'c','number',_cor5,_cor6}> when 'true' ->
	      'unknown'
	  %% Line 1440
	  <{'c','opaque',_cor7,_cor8}> when 'true' ->
	      'unknown'
	  %% Line 1441
	  <Other> when 'true' ->
	      let <Inf> =
		  %% Line 1442
		  apply 't_inf'/2
		      (_cor0, {'c','number','any','unknown'})
	      in  let <_6010> =
		      case Inf of
			<'none'> when 'true' ->
			    'true'
			<_cor2> when 'true' ->
			    'false'
		      end
		  in  %% Line 1443
		      case _6010 of
			<'false'> when 'true' ->
			    %% Line 1444
			    apply 'number_vals'/1
				(Inf)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6010})
			  -| ['compiler_generated'] )
		      end
	end
't_float'/0 =
    %% Line 1450
    fun () ->
	%% Line 1451
	{'c','number','any','float'}
't_is_float'/1 =
    %% Line 1455
    fun (_cor0) ->
	%% Line 1456
	apply 't_is_float'/2
	    (_cor0, 'universe')
't_is_float'/2 =
    %% Line 1460
    fun (_cor1,_cor0) ->
	%% Line 1461
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_float1'/1)
'is_float1'/1 =
    %% Line 1463
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number','any','float'}> when 'true' ->
	      'true'
	  %% Line 1464
	  <_cor2> when 'true' ->
	      'false'
	end
't_integer'/0 =
    %% Line 1470
    fun () ->
	%% Line 1471
	{'c','number','any','integer'}
't_integer'/1 =
    %% Line 1475
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      ([_cor0|[]])
	      in  %% Line 1476
		  {'c','number',{'int_set',_cor1},'integer'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_integer',1}}] )
	    -| ['compiler_generated'] )
	end
't_integers'/1 =
    %% Line 1480
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 1481
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[I|_cor2]> when 'true' ->
				      case I of
					<_17369>
					    when call 'erlang':'is_integer'
						  (I) ->
					    let <_cor1> =
						%% Line 4768
						call 'ordsets':'from_list'
						    ([I|[]])
					    in  let <_cor4> =
						    {'c','number',{'int_set',_cor1},'integer'}
						in  let <_cor5> =
							apply 'lc$^0'/1
							    (_cor2)
						    in  ( [_cor4|_cor5]
							  -| ['compiler_generated'] )
					( <_400> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',I})
					  -| ['compiler_generated'] )
				      end
				  <[]> when 'true' ->
				      []
				  ( <_19532> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  %% Line 1481
		  apply 't_sup'/1
		      (_cor6)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_integers',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_integer'/1 =
    %% Line 1485
    fun (_cor0) ->
	%% Line 1486
	apply 't_is_integer'/2
	    (_cor0, 'universe')
't_is_integer'/2 =
    %% Line 1490
    fun (_cor1,_cor0) ->
	%% Line 1491
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_integer1'/1)
'is_integer1'/1 =
    %% Line 1493
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',_cor2,'integer'}> when 'true' ->
	      'true'
	  %% Line 1494
	  <_cor3> when 'true' ->
	      'false'
	end
't_byte'/0 =
    %% Line 1500
    fun () ->
	%% Line 1501
	{'c','number',{'int_rng',0,255},'integer'}
't_char'/0 =
    %% Line 1519
    fun () ->
	%% Line 1520
	{'c','number',{'int_rng',0,1114111},'integer'}
't_is_char'/1 =
    %% Line 1524
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_rng','neg_inf',_cor12},'integer'}> when 'true' ->
	      'false'
	  %% Line 1525
	  <{'c','number',{'int_rng',_cor13,'pos_inf'},'integer'}> when 'true' ->
	      'false'
	  %% Line 1526
	  <{'c','number',{'int_rng',From,To},'integer'}>
	      when %% Line 1527
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (From)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(From, 0)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (To)
			    in  let <_cor4> =
				    call 'erlang':'=<'
					(To, 1114111)
				in  let <_cor5> =
					call 'erlang':'and'
					    (_cor3, _cor4)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor2, _cor5)
					in  call 'erlang':'and'
						(_cor1, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1527
	      'true'
	  %% Line 1528
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 4833
	      case Set of
		<[H|_cor2]> when 'true' ->
		    ( case <> of
			( <>
			      when call 'erlang':'>='
				    (H,
				     0) ->
			      let <_cor1> =
				  %% Line 4836
				  call 'lists':'reverse'
				      (Set)
			      in  let <_cor9> =
				      %% Line 4836
				      call 'erlang':'hd'
					  (_cor1)
				  in  call 'erlang':'=<'
					  (_cor9, 1114111)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',Set})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1530
	  <_cor14> when 'true' ->
	      'false'
	end
't_cons'/0 =
    %% Line 1538
    fun () ->
	%% Line 1539
	{'c','list',['any'|['any']],'nonempty'}
't_cons'/2 =
    %% Line 1549
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',_cor12> when 'true' ->
	      'none'
	  %% Line 1550
	  <_cor13,'none'> when 'true' ->
	      'none'
	  %% Line 1551
	  <'unit',_cor14> when 'true' ->
	      'none'
	  %% Line 1552
	  <_cor15,'unit'> when 'true' ->
	      'none'
	  %% Line 1553
	  <Hd,{'c','nil',_cor16,_cor17}> when 'true' ->
	      %% Line 1554
	      {'c','list',[_cor1|[{'c','nil',[],'unknown'}]],'nonempty'}
	  %% Line 1555
	  <Hd,{'c','list',[Contents|[Termination|[]]],_cor18}> when 'true' ->
	      let <_cor2> =
		  %% Line 1556
		  apply 't_sup'/2
		      (Contents, _cor1)
	      in  %% Line 1556
		  {'c','list',[_cor2|[Termination|[]]],'nonempty'}
	  %% Line 1557
	  <Hd,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 2661
		  apply 't_inf'/3
		      (_cor0, {'c','list',['any'|['any']],'unknown'}, 'universe')
	      in  let <_3554> =
		      %% Line 1571
		      fun (_2551) ->
			  _2551
		  in  let <_7554> =
			  %% Line 1571
			  apply 'do_opaque'/3
			      (_cor4, 'universe', _3554)
		      in  %% Line 1558
			  case _7554 of
			    %% Line 1559
			    <{'c','list',[Contents|[Termination|[]]],_X_Size}> when 'true' ->
				let <_cor6> =
				    %% Line 1562
				    apply 't_subtract'/2
					(_cor0, %% Line 1693
						{'c','list',['any'|['any']],'unknown'})
				in  let <NewTermination> =
					%% Line 1562
					apply 't_sup'/2
					    (_cor6, Termination)
				    in  let <_cor8> =
					    %% Line 1564
					    apply 't_sup'/2
						(_cor1, Contents)
					in  %% Line 1564
					    {'c','list',[_cor8|[NewTermination|[]]],'nonempty'}
			    %% Line 1565
			    <{'c','nil',_cor19,_cor20}> when 'true' ->
				{'c','list',[_cor1|[_cor0|[]]],'nonempty'}
			    %% Line 1566
			    <'none'> when 'true' ->
				{'c','list',[_cor1|[_cor0|[]]],'nonempty'}
			    %% Line 1567
			    <'unit'> when 'true' ->
				'none'
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_7554})
			      -| ['compiler_generated'] )
			  end
	end
't_is_cons'/1 =
    %% Line 1575
    fun (_cor0) ->
	%% Line 1576
	apply 't_is_cons'/2
	    (_cor0, 'universe')
't_is_cons'/2 =
    %% Line 1580
    fun (_cor1,_cor0) ->
	%% Line 1581
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_cons'/1)
'is_cons'/1 =
    %% Line 1583
    fun (_cor0) ->
	case _cor0 of
	  <{'c','list',[_cor2|[_cor3|[]]],'nonempty'}> when 'true' ->
	      'true'
	  %% Line 1584
	  <_cor4> when 'true' ->
	      'false'
	end
't_cons_hd'/1 =
    %% Line 1588
    fun (_cor0) ->
	%% Line 1589
	apply 't_cons_hd'/2
	    (_cor0, 'universe')
't_cons_hd'/2 =
    %% Line 1593
    fun (_cor1,_cor0) ->
	%% Line 1594
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'cons_hd'/1)
'cons_hd'/1 =
    %% Line 1596
    fun (_cor0) ->
	case _cor0 of
	  <{'c','list',[Contents|[_X_Termination|[]]],'nonempty'}> when 'true' ->
	      Contents
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'cons_hd',1}}] )
	    -| ['compiler_generated'] )
	end
't_cons_tl'/1 =
    %% Line 1600
    fun (_cor0) ->
	%% Line 1601
	apply 't_cons_tl'/2
	    (_cor0, 'universe')
't_cons_tl'/2 =
    %% Line 1605
    fun (_cor1,_cor0) ->
	%% Line 1606
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'cons_tl'/1)
'cons_tl'/1 =
    %% Line 1608
    fun (_cor0) ->
	case _cor0 of
	  <T = {'c','list',[_X_Contents|[Termination|[]]],'nonempty'}> when 'true' ->
	      %% Line 1609
	      apply 't_sup'/2
		  (Termination, _cor0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'cons_tl',1}}] )
	    -| ['compiler_generated'] )
	end
't_nil'/0 =
    %% Line 1613
    fun () ->
	%% Line 1614
	{'c','nil',[],'unknown'}
't_is_nil'/1 =
    %% Line 1618
    fun (_cor0) ->
	%% Line 1619
	apply 't_is_nil'/2
	    (_cor0, 'universe')
't_is_nil'/2 =
    %% Line 1623
    fun (_cor1,_cor0) ->
	%% Line 1624
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_nil'/1)
'is_nil'/1 =
    %% Line 1626
    fun (_cor0) ->
	case _cor0 of
	  <{'c','nil',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 1627
	  <_cor4> when 'true' ->
	      'false'
	end
't_list'/0 =
    %% Line 1631
    fun () ->
	%% Line 1632
	{'c','list',['any'|[{'c','nil',[],'unknown'}]],'unknown'}
't_list'/1 =
    %% Line 1636
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      'none'
	  %% Line 1637
	  <'unit'> when 'true' ->
	      'none'
	  %% Line 1638
	  <Contents> when 'true' ->
	      %% Line 1639
	      {'c','list',[_cor0|[{'c','nil',[],'unknown'}]],'unknown'}
	end
't_list_elements'/1 =
    %% Line 1643
    fun (_cor0) ->
	%% Line 1644
	apply 't_list_elements'/2
	    (_cor0, 'universe')
't_list_elements'/2 =
    %% Line 1648
    fun (_cor1,_cor0) ->
	%% Line 1649
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'list_elements'/1)
'list_elements'/1 =
    %% Line 1651
    fun (_cor0) ->
	case _cor0 of
	  <{'c','list',[Contents|[_cor2|[]]],_cor3}> when 'true' ->
	      Contents
	  %% Line 1652
	  <{'c','nil',_cor4,_cor5}> when 'true' ->
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'list_elements',1}}] )
	    -| ['compiler_generated'] )
	end
't_list_termination'/1 =
    %% Line 1656
    fun (_cor0) ->
	case _cor0 of
	  <{'c','nil',_cor2,_cor3}> when 'true' ->
	      {'c','nil',[],'unknown'}
	  %% Line 1657
	  <{'c','list',[_cor4|[Term|[]]],_cor5}> when 'true' ->
	      Term
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_list_termination',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_list'/1 =
    %% Line 1661
    fun (_cor0) ->
	case _cor0 of
	  <{'c','list',[_X_Contents|[{'c','nil',_cor2,_cor3}|[]]],_cor4}> when 'true' ->
	      'true'
	  %% Line 1662
	  <{'c','nil',_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 1663
	  <_cor7> when 'true' ->
	      'false'
	end
't_nonempty_list'/0 =
    %% Line 1667
    fun () ->
	%% Line 1668
	apply 't_cons'/2
	    ('any', {'c','nil',[],'unknown'})
't_nonempty_list'/1 =
    %% Line 1672
    fun (_cor0) ->
	%% Line 1673
	apply 't_cons'/2
	    (_cor0, {'c','nil',[],'unknown'})
't_nonempty_string'/0 =
    %% Line 1677
    fun () ->
	apply 't_cons'/2
	    ({'c','number',{'int_rng',0,1114111},'integer'}, {'c','nil',[],'unknown'})
't_string'/0 =
    %% Line 1682
    fun () ->
	%% Line 1683
	apply 't_list'/1
	    ({'c','number',{'int_rng',0,1114111},'integer'})
't_is_string'/1 =
    %% Line 1687
    fun (_cor0) ->
	let <_39614> =
	    %% Line 1688
	    apply 't_is_list'/1
		(_cor0)
	in  %% Line 1688
	    ( case _39614 of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor2> =
			  apply 't_list_elements'/1
			      (_cor0)
		      in  apply 't_is_char'/1
			      (_cor2)
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_39614}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
't_maybe_improper_list'/0 =
    %% Line 1692
    fun () ->
	%% Line 1693
	{'c','list',['any'|['any']],'unknown'}
't_is_maybe_improper_list'/1 =
    %% Line 1707
    fun (_cor0) ->
	%% Line 1708
	apply 't_is_maybe_improper_list'/2
	    (_cor0, 'universe')
't_is_maybe_improper_list'/2 =
    %% Line 1712
    fun (_cor1,_cor0) ->
	%% Line 1713
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_maybe_improper_list'/1)
'is_maybe_improper_list'/1 =
    %% Line 1715
    fun (_cor0) ->
	case _cor0 of
	  <{'c','list',[_cor2|[_cor3|[]]],_cor4}> when 'true' ->
	      'true'
	  %% Line 1716
	  <{'c','nil',_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 1717
	  <_cor7> when 'true' ->
	      'false'
	end
'lift_list_to_pos_empty'/1 =
    %% Line 1731
    fun (_cor0) ->
	case _cor0 of
	  <{'c','nil',_cor2,_cor3}> when 'true' ->
	      {'c','nil',[],'unknown'}
	  %% Line 1732
	  <{'c','list',[Content|[Termination|[]]],_cor4}> when 'true' ->
	      %% Line 1733
	      {'c','list',[Content|[Termination|[]]],'unknown'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'lift_list_to_pos_empty',1}}] )
	    -| ['compiler_generated'] )
	end
't_map'/0 =
    %% Line 1741
    fun () ->
	%% Line 1742
	{'c','map',[],'unknown'}
't_map'/1 =
    %% Line 1746
    fun (_cor0) ->
	%% Line 1747
	{'c','map',[],'unknown'}
't_is_map'/1 =
    %% Line 1751
    fun (_cor0) ->
	%% Line 1752
	apply 't_is_map'/2
	    (_cor0, 'universe')
't_is_map'/2 =
    %% Line 1756
    fun (_cor1,_cor0) ->
	%% Line 1757
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_map1'/1)
'is_map1'/1 =
    %% Line 1759
    fun (_cor0) ->
	case _cor0 of
	  <{'c','map',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 1760
	  <_cor4> when 'true' ->
	      'false'
	end
't_tuple'/0 =
    %% Line 1768
    fun () ->
	%% Line 1769
	{'c','tuple','any',{'any','any'}}
't_tuple'/1 =
    %% Line 1773
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1774
		  call 'lists':'duplicate'
		      (_cor0, 'any')
	      in  %% Line 1774
		  {'c','tuple',_cor1,{_cor0,'any'}}
	  %% Line 1775
	  <List> when 'true' ->
	      let <_24272> =
		  %% Line 4652
		  case _cor0 of
		    <['none'|_cor2]> when 'true' ->
			'true'
		    %% Line 4653
		    <['unit'|_cor3]> when 'true' ->
			'true'
		    %% Line 4654
		    <[_cor4|Left]> when 'true' ->
			case Left of
			  <['none'|_cor2]> when 'true' ->
			      'true'
			  <['unit'|_cor3]> when 'true' ->
			      'true'
			  <[_7302|_3319]> when 'true' ->
			      apply 'any_none_or_unit'/1
				  (_3319)
			  %% Line 4655
			  <[]> when 'true' ->
			      'false'
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Left})
			    -| ['compiler_generated'] )
			end
		    %% Line 4655
		    <[]> when 'true' ->
			'false'
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1776
		  case _24272 of
		    %% Line 1777
		    <'true'> when 'true' ->
			'none'
		    %% Line 1778
		    <'false'> when 'true' ->
			let <Arity> =
			    %% Line 1779
			    call 'erlang':'length'
				(_cor0)
			in  let <_20687> =
				%% Line 1780
				apply 'get_tuple_tags'/1
				    (_cor0)
			    in  %% Line 1780
				case _20687 of
				  %% Line 1781
				  <[Tag|[]]> when 'true' ->
				      {'c','tuple',_cor0,{Arity,Tag}}
				  %% Line 1782
				  <TagList> when 'true' ->
				      let <SortedTagList> =
					  %% Line 1783
					  call 'lists':'sort'
					      (_20687)
				      in  let <_cor9> =
					      %% Line 1784
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor6) ->
							    case _cor6 of
							      <[T|_cor5]> when 'true' ->
								  let <_cor7> =
								      call 'erlang':'tl'
									  (_cor0)
								  in  let <_cor8> =
									  apply 'lc$^0'/1
									      (_cor5)
								      in  ( [{'c','tuple',[T|_cor7],{Arity,T}}|_cor8]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_23147> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor6})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^0'/1
							(SortedTagList)
						-| ['list_comprehension'] )
					  in  %% Line 1785
					      {'c','tuple_set',[{Arity,_cor9}|[]],'unknown'}
				end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_24272})
		      -| ['compiler_generated'] )
		  end
	end
'get_tuple_tags'/1 =
    %% Line 1791
    fun (_cor0) ->
	case _cor0 of
	  <[Tag|_cor2]> when 'true' ->
	      %% Line 1792
	      apply 'do_opaque'/3
		  (Tag, 'universe', 'tuple_tags'/1)
	  %% Line 1793
	  <_cor3> when 'true' ->
	      ['any']
	end
'tuple_tags'/1 =
    %% Line 1795
    fun (_cor0) ->
	case _cor0 of
	  <{'c','atom','any',_cor10}> when 'true' ->
	      ['any']
	  %% Line 1796
	  <{'c','atom',Set,_cor11}> when 'true' ->
	      let <_cor1> =
		  %% Line 4824
		  call 'ordsets':'size'
		      (Set)
	      in  %% Line 1797
		  case <> of
		    %% Line 1798
		    <>
			when call 'erlang':'>'
			      (_cor1,
			       5) ->
			['any']
		    %% Line 1799
		    <> when 'true' ->
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[A|_cor3]> when 'true' ->
					    case A of
					      <_25183>
						  when call 'erlang':'is_atom'
							(A) ->
						  let <_11784> =
						      %% Line 4768
						      call 'ordsets':'from_list'
							  ([A|[]])
						  in  let <_cor6> =
							  {'c','atom',_11784,'unknown'}
						      in  let <_cor7> =
							      apply 'lc$^0'/1
								  (_cor3)
							  in  ( [_cor6|_cor7]
								-| ['compiler_generated'] )
					      ( <_cor2> when 'true' ->
						    primop 'match_fail'
							({'function_clause',A})
						-| ['compiler_generated'] )
					    end
					<[]> when 'true' ->
					    []
					( <_17825> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor4> =
				  %% Line 4815
				  call 'ordsets':'to_list'
				      (Set)
			      in  apply 'lc$^0'/1
				      (_cor4)
			  -| ['list_comprehension'] )
		  end
	  %% Line 1801
	  <_cor12> when 'true' ->
	      ['any']
	end
't_tuple_args'/1 =
    %% Line 1806
    fun (_cor0) ->
	%% Line 1807
	apply 't_tuple_args'/2
	    (_cor0, 'universe')
't_tuple_args'/2 =
    %% Line 1812
    fun (_cor1,_cor0) ->
	%% Line 1813
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'tuple_args'/1)
'tuple_args'/1 =
    %% Line 1815
    fun (_cor0) ->
	case _cor0 of
	  <{'c','tuple',Args,{_cor2,_cor3}}>
	      when call 'erlang':'is_list'
		    (Args) ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'tuple_args',1}}] )
	    -| ['compiler_generated'] )
	end
't_tuple_size'/1 =
    %% Line 1820
    fun (_cor0) ->
	%% Line 1821
	apply 't_tuple_size'/2
	    (_cor0, 'universe')
't_tuple_size'/2 =
    %% Line 1826
    fun (_cor1,_cor0) ->
	%% Line 1827
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'tuple_size1'/1)
'tuple_size1'/1 =
    %% Line 1829
    fun (_cor0) ->
	case _cor0 of
	  <{'c','tuple',_cor2,{Size,_cor3}}>
	      when call 'erlang':'is_integer'
		    (Size) ->
	      Size
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'tuple_size1',1}}] )
	    -| ['compiler_generated'] )
	end
't_tuple_sizes'/1 =
    %% Line 1833
    fun (_cor0) ->
	%% Line 1834
	apply 'do_opaque'/3
	    (_cor0, 'universe', 'tuple_sizes'/1)
'tuple_sizes'/1 =
    %% Line 1836
    fun (_cor0) ->
	case _cor0 of
	  <{'c','tuple','any',{'any','any'}}> when 'true' ->
	      'unknown'
	  %% Line 1837
	  <{'c','tuple',_cor6,{Size,_cor7}}>
	      when call 'erlang':'is_integer'
		    (Size) ->
	      [Size|[]]
	  %% Line 1838
	  <{'c','tuple_set',List,_cor8}> when 'true' ->
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[{Size,_cor9}|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [Size|_cor4]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_33336> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'tuple_sizes',1}}] )
	    -| ['compiler_generated'] )
	end
't_tuple_subtypes'/2 =
    %% Line 1843
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 1844
	    fun (_cor2) ->
		case _cor2 of
		  <{'c','tuple_set',List,_cor7}> when 'true' ->
		      %% Line 1845
		      apply 't_tuple_subtypes_tuple_list'/2
			  (List, _cor0)
		  %% Line 1846
		  <{'c','opaque',_cor8,_cor9}> when 'true' ->
		      'unknown'
		  %% Line 1847
		  <T> when 'true' ->
		      apply 't_tuple_subtypes'/1
			  (_cor2)
		end
	in  %% Line 1849
	    apply 'do_opaque'/3
		(_cor1, _cor0, Fun)
't_tuple_subtypes_tuple_list'/2 =
    %% Line 1851
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1852
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 1853
			      {_X_Size,Tuples}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 't_tuple_subtypes_list'/2
					(Tuples, _cor0)
				in  let <_cor6> =
					%% Line 1853
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 1853
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_2371> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  %% Line 1852
	    call 'lists':'append'
		(_cor7)
't_tuple_subtypes_list'/2 =
    %% Line 1855
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1856
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[E|_cor3]>
				when call 'erlang':'=/='
				      (E,
				       'none') ->
				let <_cor5> =
				    apply 't_tuple_subtypes'/2
					(E, _cor0)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    ( <[E|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_23305> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor13> =
		%% Line 1857
		( letrec
		      'lc$^1'/1 =
			  fun (_cor11) ->
			      case _cor11 of
				<[L|_cor10]>
				    when call 'erlang':'=/='
					  (L,
					   'unknown') ->
				    let <_cor12> =
					apply 'lc$^1'/1
					    (_cor10)
				    in  ( [L|_cor12]
					  -| ['compiler_generated'] )
				( <[L|_cor10]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor10)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_9096> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor11})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor7)
		  -| ['list_comprehension'] )
	    in  %% Line 1857
		call 'lists':'append'
		    (_cor13)
't_tuple_subtypes'/1 =
    %% Line 1862
    fun (_cor0) ->
	case _cor0 of
	  <{'c','tuple','any',{'any','any'}}> when 'true' ->
	      'unknown'
	  %% Line 1863
	  <T = {'c','tuple',_cor7,{_cor8,_cor9}}> when 'true' ->
	      [_cor0|[]]
	  %% Line 1864
	  <{'c','tuple_set',List,_cor10}> when 'true' ->
	      let <_cor5> =
		  %% Line 1865
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[{_X_Size,Tuples}|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Tuples|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_33804> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case List of
			  <[{_X_Size,Tuples}|_cor2]> when 'true' ->
			      let <_cor4> =
				  apply 'lc$^0'/1
				      (_cor2)
			      in  ( [Tuples|_cor4]
				    -| ['compiler_generated'] )
			  ( <[_cor1|_cor2]> when 'true' ->
				apply 'lc$^0'/1
				    (_cor2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_33804> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',List})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 1865
		  call 'lists':'append'
		      (_cor5)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_tuple_subtypes',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_tuple'/1 =
    %% Line 1869
    fun (_cor0) ->
	%% Line 1870
	apply 't_is_tuple'/2
	    (_cor0, 'universe')
't_is_tuple'/2 =
    %% Line 1874
    fun (_cor1,_cor0) ->
	%% Line 1875
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'is_tuple1'/1)
'is_tuple1'/1 =
    %% Line 1877
    fun (_cor0) ->
	case _cor0 of
	  <{'c','tuple',_cor2,{_cor3,_cor4}}> when 'true' ->
	      'true'
	  %% Line 1878
	  <{'c','tuple_set',_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 1879
	  <_cor7> when 'true' ->
	      'false'
	end
't_bitstrlist'/0 =
    %% Line 1887
    fun () ->
	%% Line 1888
	apply 't_iolist'/2
	    (1, {'c','binary',[1|[0]],'unknown'})
't_constant'/0 =
    %% Line 1893
    fun () ->
	%% Line 1894
	apply 't_sup'/1
	    ([{'c','number','any','unknown'}|[{'c','identifier','any','unknown'}|[{'c','atom','any','unknown'}|[{'c','function',['any'|['any']],'unknown'}|[{'c','binary',[8|[0]],'unknown'}]]]]])
't_is_constant'/1 =
    %% Line 1898
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1899
	    apply 't_constant'/0
		()
	in  %% Line 1899
	    apply 't_is_subtype'/2
		(_cor0, _cor1)
't_arity'/0 =
    %% Line 1903
    fun () ->
	%% Line 1904
	apply 't_from_range'/2
	    (0, 255)
't_pos_integer'/0 =
    %% Line 1908
    fun () ->
	%% Line 1909
	apply 't_from_range'/2
	    (1, 'pos_inf')
't_non_neg_integer'/0 =
    %% Line 1913
    fun () ->
	%% Line 1914
	apply 't_from_range'/2
	    (0, 'pos_inf')
't_is_non_neg_integer'/1 =
    %% Line 1918
    fun (_cor0) ->
	case _cor0 of
	  <T = {'c','number',_cor3,'integer'}> when 'true' ->
	      let <_cor1> =
		  %% Line 1919
		  apply 't_non_neg_integer'/0
		      ()
	      in  %% Line 1919
		  apply 't_is_subtype'/2
		      (_cor0, _cor1)
	  %% Line 1920
	  <_cor4> when 'true' ->
	      'false'
	end
't_neg_integer'/0 =
    %% Line 1924
    fun () ->
	%% Line 1925
	apply 't_from_range'/2
	    ('neg_inf', -1)
't_fixnum'/0 =
    %% Line 1929
    fun () ->
	{'c','number','any','integer'}
't_pos_fixnum'/0 =
    %% Line 1934
    fun () ->
	%% Line 1935
	apply 't_pos_integer'/0
	    ()
't_non_neg_fixnum'/0 =
    %% Line 1939
    fun () ->
	%% Line 1940
	apply 't_non_neg_integer'/0
	    ()
't_mfa'/0 =
    %% Line 1944
    fun () ->
	let <_cor2> =
	    %% Line 1945
	    apply 't_arity'/0
		()
	in  %% Line 1945
	    apply 't_tuple'/1
		([{'c','atom','any','unknown'}|[{'c','atom','any','unknown'}|[_cor2|[]]]])
't_module'/0 =
    %% Line 1949
    fun () ->
	%% Line 1950
	apply 't_sup'/2
	    ({'c','atom','any','unknown'}, {'c','tuple','any',{'any','any'}})
't_node'/0 =
    %% Line 1954
    fun () ->
	{'c','atom','any','unknown'}
't_iodata'/0 =
    %% Line 1959
    fun () ->
	let <_cor1> =
	    %% Line 1960
	    apply 't_iolist'/0
		()
	in  %% Line 1960
	    apply 't_sup'/2
		(_cor1, {'c','binary',[8|[0]],'unknown'})
't_iolist'/0 =
    %% Line 1964
    fun () ->
	%% Line 1965
	apply 't_iolist'/2
	    (1, {'c','binary',[8|[0]],'unknown'})
't_iolist'/2 =
    %% Line 1970
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,T>
	      when call 'erlang':'>'
		    (_cor1,
		     0) ->
	      let <_cor4> =
		  %% Line 1971
		  call 'erlang':'-'
		      (_cor1, 1)
	      in  let <_cor5> =
		      %% Line 1971
		      apply 't_iolist'/2
			  (_cor4, _cor0)
		  in  let <_cor7> =
			  %% Line 1971
			  apply 't_sup'/1
			      ([_cor5|[_cor0|[{'c','number',{'int_rng',0,255},'integer'}]]])
		      in  let <_cor3> =
			      %% Line 1972
			      apply 't_sup'/2
				  (_cor0, {'c','nil',[],'unknown'})
			  in  case <_cor7,_cor3> of
				<_X_Content,'unit'> when 'true' ->
				    'none'
				<'unit',_X_Termination> when 'true' ->
				    'none'
				<Content,Termination> when 'true' ->
				    {'c','list',[_cor7|[_cor3|[]]],'unknown'}
			      end
	  %% Line 1973
	  <0,T> when 'true' ->
	      let <_cor9> =
		  %% Line 1974
		  apply 't_sup'/2
		      (_cor0, {'c','nil',[],'unknown'})
	      in  case _cor9 of
		    <'unit'> when 'true' ->
			'none'
		    <Termination> when 'true' ->
			{'c','list',['any'|[_cor9|[]]],'unknown'}
		  end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_iolist',2}}] )
	    -| ['compiler_generated'] )
	end
't_timeout'/0 =
    %% Line 1983
    fun () ->
	let <_cor1> =
	    %% Line 1984
	    apply 't_non_neg_integer'/0
		()
	in  let <_40409> =
		%% Line 4768
		call 'ordsets':'from_list'
		    (['infinity'])
	    in  let <_cor0> =
		    {'c','atom',_40409,'unknown'}
		in  %% Line 1984
		    apply 't_sup'/2
			(_cor1, _cor0)
't_array'/0 =
    %% Line 1992
    fun () ->
	let <_cor1> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['array'])
	in  let <_cor0> =
		{'c','atom',_cor1,'unknown'}
	    in  let <_cor1> =
		    %% Line 4768
		    call 'ordsets':'from_list'
			(['undefined'])
		in  let <_cor1> =
			{'c','atom',_cor1,'unknown'}
		    in  let <_cor2> =
			    %% Line 1995
			    apply 't_non_neg_integer'/0
				()
			in  let <_cor3> =
				%% Line 1995
				apply 't_sup'/1
				    ([_cor1|[_cor2|[]]])
			    in  let <_4218> =
				    %% Line 4768
				    call 'ordsets':'from_list'
					(['undefined'])
				in  let <_cor4> =
					{'c','atom',_4218,'unknown'}
				    in  let <_cor5> =
					    %% Line 1996
					    apply 't_non_neg_integer'/0
						()
					in  let <_cor6> =
						%% Line 1996
						apply 't_sup'/1
						    ([_cor4|[_cor5|[]]])
					    in  let <_cor9> =
						    %% Line 1994
						    apply 't_tuple'/1
							([_cor0|%% Line 1995
								[_cor3|%% Line 1996
								       [_cor6|%% Line 1997
									      ['any'|['any']]]]])
						in  let <O> =
							{'opaque',%% Line 1993
								  'array',%% Line 1993
									  'array',%% Line 1993
										  ['any'],_cor9}
						    in  let <_23752> =
							    %% Line 4768
							    call 'ordsets':'from_list'
								([O|[]])
							in  {'c','opaque',_23752,'unknown'}
't_dict'/0 =
    %% Line 2002
    fun () ->
	let <_cor1> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['dict'])
	in  let <_cor0> =
		{'c','atom',_cor1,'unknown'}
	    in  let <_cor1> =
		    %% Line 4768
		    call 'ordsets':'from_list'
			(['undefined'])
		in  let <_cor1> =
			{'c','atom',_cor1,'unknown'}
		    in  let <_cor2> =
			    %% Line 2005
			    apply 't_non_neg_integer'/0
				()
			in  let <_cor3> =
				%% Line 2005
				apply 't_sup'/1
				    ([_cor1|[_cor2|[]]])
			    in  let <_21712> =
				    %% Line 4768
				    call 'ordsets':'from_list'
					(['undefined'])
				in  let <_cor4> =
					{'c','atom',_21712,'unknown'}
				    in  let <_cor5> =
					    %% Line 2006
					    apply 't_non_neg_integer'/0
						()
					in  let <_cor6> =
						%% Line 2006
						apply 't_sup'/1
						    ([_cor4|[_cor5|[]]])
					    in  let <_12592> =
						    %% Line 4768
						    call 'ordsets':'from_list'
							(['undefined'])
						in  let <_cor7> =
							{'c','atom',_12592,'unknown'}
						    in  let <_cor8> =
							    %% Line 2007
							    apply 't_non_neg_integer'/0
								()
							in  let <_cor9> =
								%% Line 2007
								apply 't_sup'/1
								    ([_cor7|[_cor8|[]]])
							    in  let <_32197> =
								    %% Line 4768
								    call 'ordsets':'from_list'
									(['undefined'])
								in  let <_cor10> =
									{'c','atom',_32197,'unknown'}
								    in  let <_cor11> =
									    %% Line 2008
									    apply 't_non_neg_integer'/0
										()
									in  let <_cor12> =
										%% Line 2008
										apply 't_sup'/1
										    ([_cor10|[_cor11|[]]])
									    in  let <_7172> =
										    %% Line 4768
										    call 'ordsets':'from_list'
											(['undefined'])
										in  let <_cor13> =
											{'c','atom',_7172,'unknown'}
										    in  let <_cor14> =
											    %% Line 2009
											    apply 't_non_neg_integer'/0
												()
											in  let <_cor15> =
												%% Line 2009
												apply 't_sup'/1
												    ([_cor13|[_cor14|[]]])
											    in  let <_23120> =
												    %% Line 4768
												    call 'ordsets':'from_list'
													(['undefined'])
												in  let <_cor16> =
													{'c','atom',_23120,'unknown'}
												    in  let <_cor17> =
													    %% Line 2010
													    apply 't_non_neg_integer'/0
														()
													in  let <_cor18> =
														%% Line 2010
														apply 't_sup'/1
														    ([_cor16|[_cor17|[]]])
													    in  let <_37264> =
														    %% Line 4768
														    call 'ordsets':'from_list'
															(['undefined'])
														in  let <_cor19> =
															{'c','atom',_37264,'unknown'}
														    in  let <_cor21> =
															    %% Line 2011
															    apply 't_sup'/1
																([_cor19|[{'c','tuple','any',{'any','any'}}]])
															in  let <_5711> =
																%% Line 4768
																call 'ordsets':'from_list'
																    (['undefined'])
															    in  let <_cor22> =
																    {'c','atom',_5711,'unknown'}
																in  let <_cor24> =
																	%% Line 2012
																	apply 't_sup'/1
																	    ([_cor22|[{'c','tuple','any',{'any','any'}}]])
																    in  let <_cor25> =
																	    %% Line 2004
																	    apply 't_tuple'/1
																		([_cor0|%% Line 2005
																			[_cor3|%% Line 2006
																			       [_cor6|%% Line 2007
																				      [_cor9|%% Line 2008
																					     [_cor12|%% Line 2009
																						     [_cor15|%% Line 2010
																							     [_cor18|%% Line 2011
																								     [_cor21|%% Line 2012
																									     [_cor24|[]]]]]]]]]])
																	in  let <O> =
																		{'opaque',%% Line 2003
																			  'dict',%% Line 2003
																				 'dict',%% Line 2003
																					['any'|['any']],_cor25}
																	    in  let <_15185> =
																		    %% Line 4768
																		    call 'ordsets':'from_list'
																			([O|[]])
																		in  {'c','opaque',_15185,'unknown'}
't_digraph'/0 =
    %% Line 2016
    fun () ->
	let <_cor1> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['digraph'])
	in  let <_cor0> =
		{'c','atom',_cor1,'unknown'}
	    in  let <_cor1> =
		    %% Line 2054
		    apply 't_opaque'/4
			('ets', 'tid', [], {'c','number','any','integer'})
		in  let <_cor3> =
			%% Line 2019
			apply 't_sup'/2
			    ({'c','atom','any','unknown'}, _cor1)
		    in  let <_cor4> =
			    %% Line 2054
			    apply 't_opaque'/4
				('ets', 'tid', [], {'c','number','any','integer'})
			in  let <_cor6> =
				%% Line 2020
				apply 't_sup'/2
				    ({'c','atom','any','unknown'}, _cor4)
			    in  let <_cor7> =
				    %% Line 2054
				    apply 't_opaque'/4
					('ets', 'tid', [], {'c','number','any','integer'})
				in  let <_cor9> =
					%% Line 2021
					apply 't_sup'/2
					    ({'c','atom','any','unknown'}, _cor7)
				    in  let <_4752> =
					    %% Line 4810
					    call 'ordsets':'from_list'
						(['false'|['true']])
					in  let <_cor10> =
						{'c','atom',_4752,'unknown'}
					    in  let <_cor11> =
						    %% Line 2018
						    apply 't_tuple'/1
							([_cor0|%% Line 2019
								[_cor3|%% Line 2020
								       [_cor6|%% Line 2021
									      [_cor9|%% Line 2022
										     [_cor10|[]]]]]])
						in  let <O> =
							{'opaque',%% Line 2017
								  'digraph',%% Line 2017
									    'digraph',%% Line 2017
										      [],_cor11}
						    in  let <_8805> =
							    %% Line 4768
							    call 'ordsets':'from_list'
								([O|[]])
							in  {'c','opaque',_8805,'unknown'}
't_gb_set'/0 =
    %% Line 2026
    fun () ->
	let <_cor0> =
	    %% Line 2028
	    apply 't_non_neg_integer'/0
		()
	in  let <_cor1> =
		%% Line 4768
		call 'ordsets':'from_list'
		    (['nil'])
	    in  let <_cor2> =
		    {'c','atom',_cor1,'unknown'}
		in  let <_cor1> =
			call 'lists':'duplicate'
			    (%% Line 2028
			     3, 'any')
		    in  let <_cor1> =
			    {'c','tuple',_cor1,{3,'any'}}
			in  let <_cor3> =
				%% Line 2028
				apply 't_sup'/2
				    (_cor2, _cor1)
			    in  let <_cor4> =
				    %% Line 2028
				    apply 't_tuple'/1
					([_cor0|[_cor3|[]]])
				in  let <O> =
					{'opaque',%% Line 2027
						  'gb_sets',%% Line 2027
							    'gb_set',%% Line 2027
								     [],_cor4}
				    in  let <_cor5> =
					    %% Line 4768
					    call 'ordsets':'from_list'
						([O|[]])
					in  {'c','opaque',_cor5,'unknown'}
't_gb_tree'/0 =
    %% Line 2032
    fun () ->
	let <_cor0> =
	    %% Line 2034
	    apply 't_non_neg_integer'/0
		()
	in  let <_cor1> =
		%% Line 4768
		call 'ordsets':'from_list'
		    (['nil'])
	    in  let <_cor2> =
		    {'c','atom',_cor1,'unknown'}
		in  let <_cor1> =
			call 'lists':'duplicate'
			    (%% Line 2034
			     4, 'any')
		    in  let <_cor1> =
			    {'c','tuple',_cor1,{4,'any'}}
			in  let <_cor3> =
				%% Line 2034
				apply 't_sup'/2
				    (_cor2, _cor1)
			    in  let <_cor4> =
				    %% Line 2034
				    apply 't_tuple'/1
					([_cor0|[_cor3|[]]])
				in  let <O> =
					{'opaque',%% Line 2033
						  'gb_trees',%% Line 2033
							     'gb_tree',%% Line 2033
								       [],_cor4}
				    in  let <_cor5> =
					    %% Line 4768
					    call 'ordsets':'from_list'
						([O|[]])
					in  {'c','opaque',_cor5,'unknown'}
't_queue'/0 =
    %% Line 2038
    fun () ->
	let <_cor2> =
	    %% Line 2039
	    apply 't_tuple'/1
		([{'c','list',['any'|[{'c','nil',[],'unknown'}]],'unknown'}|[{'c','list',['any'|[{'c','nil',[],'unknown'}]],'unknown'}]])
	in  let <O> =
		{'opaque',%% Line 2039
			  'queue',%% Line 2039
				  'queue',%% Line 2039
					  ['any'],_cor2}
	    in  let <_cor5> =
		    %% Line 4768
		    call 'ordsets':'from_list'
			([O|[]])
		in  {'c','opaque',_cor5,'unknown'}
't_set'/0 =
    %% Line 2043
    fun () ->
	let <_cor1> =
	    %% Line 4768
	    call 'ordsets':'from_list'
		(['set'])
	in  let <_cor0> =
		{'c','atom',_cor1,'unknown'}
	    in  let <_cor1> =
		    %% Line 2045
		    apply 't_non_neg_integer'/0
			()
		in  let <_cor2> =
			%% Line 2045
			apply 't_non_neg_integer'/0
			    ()
		    in  let <_cor3> =
			    %% Line 2046
			    apply 't_pos_integer'/0
				()
			in  let <_cor4> =
				%% Line 2046
				apply 't_non_neg_integer'/0
				    ()
			    in  let <_cor5> =
				    %% Line 2046
				    apply 't_non_neg_integer'/0
					()
				in  let <_cor6> =
					%% Line 2047
					apply 't_non_neg_integer'/0
					    ()
				    in  let <_16056> =
					    %% Line 4768
					    call 'ordsets':'from_list'
						(['undefined'])
					in  let <_cor7> =
						{'c','atom',_16056,'unknown'}
					    in  let <_cor9> =
						    %% Line 2048
						    apply 't_sup'/1
							([_cor7|[{'c','tuple','any',{'any','any'}}]])
						in  let <_33556> =
							%% Line 4768
							call 'ordsets':'from_list'
							    (['undefined'])
						    in  let <_cor10> =
							    {'c','atom',_33556,'unknown'}
							in  let <_cor12> =
								%% Line 2049
								apply 't_sup'/1
								    ([_cor10|[{'c','tuple','any',{'any','any'}}]])
							    in  let <_cor13> =
								    %% Line 2045
								    apply 't_tuple'/1
									([_cor0|[_cor1|[_cor2|%% Line 2046
											      [_cor3|[_cor4|[_cor5|%% Line 2047
														   [_cor6|%% Line 2048
															  [_cor9|%% Line 2049
																 [_cor12|[]]]]]]]]]])
								in  let <O> =
									{'opaque',%% Line 2044
										  'sets',%% Line 2044
											 'set',%% Line 2044
											       ['any'],_cor13}
								    in  let <_6285> =
									    %% Line 4768
									    call 'ordsets':'from_list'
										([O|[]])
									in  {'c','opaque',_6285,'unknown'}
't_tid'/0 =
    %% Line 2053
    fun () ->
	%% Line 2054
	apply 't_opaque'/4
	    ('ets', 'tid', [], {'c','number','any','integer'})
'all_opaque_builtins'/0 =
    %% Line 2058
    fun () ->
	let <_cor0> =
	    %% Line 2059
	    apply 't_array'/0
		()
	in  let <_cor1> =
		%% Line 2059
		apply 't_dict'/0
		    ()
	    in  let <_cor2> =
		    %% Line 2059
		    apply 't_digraph'/0
			()
		in  let <_cor3> =
			%% Line 2059
			apply 't_gb_set'/0
			    ()
		    in  let <_cor4> =
			    %% Line 2060
			    apply 't_gb_tree'/0
				()
			in  let <_cor5> =
				%% Line 2060
				apply 't_queue'/0
				    ()
			    in  let <_cor6> =
				    %% Line 2060
				    apply 't_set'/0
					()
				in  let <_12994> =
					%% Line 4768
					call 'ordsets':'from_list'
					    ([{'opaque','ets','tid',[],{'c','number','any','integer'}}])
				    in  let <_cor7> =
					    {'c','opaque',_12994,'unknown'}
					in  %% Line 2059
					    [_cor0|[_cor1|[_cor2|[_cor3|%% Line 2060
									[_cor4|[_cor5|[_cor6|[_cor7|[]]]]]]]]]
't_product'/1 =
    %% Line 2068
    fun (_cor0) ->
	case _cor0 of
	  <[T|[]]> when 'true' ->
	      T
	  %% Line 2069
	  <Types>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 2070
	      {'c','product',_cor0,'unknown'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_product',1}}] )
	    -| ['compiler_generated'] )
	end
't_to_tlist'/1 =
    %% Line 2077
    fun (_cor0) ->
	case _cor0 of
	  <{'c','product',Types,_cor7}> when 'true' ->
	      Types
	  %% Line 2078
	  <T>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=/='
				    (_cor0,
				     'any') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      ( case <> of
				  ( <>
					when call 'erlang':'=/='
					      (_cor0,
					       'none') ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					call 'erlang':'=/='
					    (_cor0, 'unit')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <_31069,R> ->
		    'false' ->
	      [_cor0|[]]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_to_tlist',1}}] )
	    -| ['compiler_generated'] )
	end
't_var'/1 =
    %% Line 2084
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      {'c','var',_cor0,'unknown'}
	  %% Line 2085
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      {'c','var',_cor0,'unknown'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_var',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_var'/1 =
    %% Line 2089
    fun (_cor0) ->
	case _cor0 of
	  <{'c','var',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 2090
	  <_cor4> when 'true' ->
	      'false'
	end
't_var_name'/1 =
    %% Line 2094
    fun (_cor0) ->
	case _cor0 of
	  <{'c','var',Id,_cor2}> when 'true' ->
	      Id
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_var_name',1}}] )
	    -| ['compiler_generated'] )
	end
't_has_var'/1 =
    %% Line 2098
    fun (_cor0) ->
	case _cor0 of
	  <{'c','var',_cor19,_cor20}> when 'true' ->
	      'true'
	  %% Line 2099
	  <{'c','function',[Domain|[Range|[]]],_cor21}> when 'true' ->
	      let <_9514> =
		  %% Line 2100
		  apply 't_has_var'/1
		      (Domain)
	      in  %% Line 2100
		  ( case _9514 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 't_has_var'/1
				(Range)
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_9514}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2101
	  <{'c','list',[Contents|[Termination|[]]],_cor22}> when 'true' ->
	      let <_273> =
		  %% Line 2102
		  apply 't_has_var'/1
		      (Contents)
	      in  %% Line 2102
		  ( case _273 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 't_has_var'/1
				(Termination)
			-| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_273}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2103
	  <{'c','product',Types,_cor23}> when 'true' ->
	      apply 't_has_var_list'/1
		  (Types)
	  %% Line 2104
	  <{'c','tuple','any',{'any','any'}}> when 'true' ->
	      'false'
	  %% Line 2105
	  <{'c','tuple',Elements,{_cor24,_cor25}}> when 'true' ->
	      %% Line 2106
	      apply 't_has_var_list'/1
		  (Elements)
	  %% Line 2107
	  <T = {'c','tuple_set',_cor26,_cor27}> when 'true' ->
	      let <_cor5> =
		  %% Line 2108
		  apply 't_tuple_subtypes'/1
		      (_cor0)
	      in  %% Line 2108
		  apply 't_has_var_list'/1
		      (_cor5)
	  %% Line 2109
	  <Map = {'c','map',_cor28,_cor29}> when 'true' ->
	      let <_cor7> =
		  %% Line 2110
		  apply 'map_keys'/1
		      (_cor0)
	      in  let <_1113> =
		      %% Line 2110
		      apply 't_has_var_list'/1
			  (_cor7)
		  in  %% Line 2110
		      ( case _1113 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor8> =
				    apply 'map_values'/1
					(_cor0)
				in  apply 't_has_var_list'/1
					(_cor8)
			    -| ['compiler_generated'] )
			  ( <_cor6> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_1113}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 2111
	  <{'c','opaque',Set,_cor30}> when 'true' ->
	      let <_cor17> =
		  %% Line 2113
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor13) ->
				case _cor13 of
				  <[O|_cor11]> when 'true' ->
				      ( case O of
					  ( <( {'opaque',_cor31,_cor32,_cor33,_rec3}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor16> =
						    apply 'lc$^0'/1
							(_cor11)
						in  ( [_rec3|_cor16]
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor34> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','opaque'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_1930> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor12> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set)
			in  case _cor12 of
			      <[O|_cor11]> when 'true' ->
				  ( case O of
				      ( <( {'opaque',_cor31,_cor32,_cor33,_rec3}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor16> =
						apply 'lc$^0'/1
						    (_cor11)
					    in  ( [_rec3|_cor16]
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor34> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','opaque'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_1930> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor12})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  %% Line 2113
		  apply 't_has_var_list'/1
		      (_cor17)
	  %% Line 2114
	  <{'c','union',List = [_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[_cor43|[_cor44|[_cor45|[]]]]]]]]]]]],_cor46}> when 'true' ->
	      %% Line 2115
	      apply 't_has_var_list'/1
		  (List)
	  %% Line 2116
	  <_cor47> when 'true' ->
	      'false'
	end
't_has_var_list'/1 =
    %% Line 2120
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_28906> =
		  %% Line 2121
		  apply 't_has_var'/1
		      (T)
	      in  %% Line 2121
		  ( case _28906 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 't_has_var_list'/1
				(Ts)
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_28906}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2122
	  <[]> when 'true' ->
	      'false'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_has_var_list',1}}] )
	    -| ['compiler_generated'] )
	end
't_collect_vars'/1 =
    %% Line 2126
    fun (_cor0) ->
	%% Line 2127
	apply 't_collect_vars'/2
	    (_cor0, [])
't_collect_vars'/2 =
    %% Line 2131
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var = {'c','var',_cor20,_cor21},Acc> when 'true' ->
	      %% Line 2132
	      call 'ordsets':'add_element'
		  (_cor1, _cor0)
	  %% Line 2133
	  <{'c','function',[Domain|[Range|[]]],_cor22},Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2134
		  apply 't_collect_vars'/2
		      (Domain, _cor0)
	      in  let <_cor2> =
		      %% Line 2134
		      apply 't_collect_vars'/2
			  (Range, [])
		  in  %% Line 2134
		      call 'ordsets':'union'
			  (_cor3, _cor2)
	  %% Line 2135
	  <{'c','list',[Contents|[Termination|[]]],_cor23},Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2136
		  apply 't_collect_vars'/2
		      (Contents, _cor0)
	      in  let <_cor4> =
		      %% Line 2136
		      apply 't_collect_vars'/2
			  (Termination, [])
		  in  %% Line 2136
		      call 'ordsets':'union'
			  (_cor5, _cor4)
	  %% Line 2137
	  <{'c','product',Types,_cor24},Acc> when 'true' ->
	      %% Line 2138
	      apply 't_collect_vars_list'/2
		  (Types, _cor0)
	  %% Line 2139
	  <{'c','tuple','any',{'any','any'}},Acc> when 'true' ->
	      _cor0
	  %% Line 2141
	  <{'c','tuple',Types,{_cor25,_cor26}},Acc> when 'true' ->
	      %% Line 2142
	      apply 't_collect_vars_list'/2
		  (Types, _cor0)
	  %% Line 2143
	  <TS = {'c','tuple_set',_cor27,_cor28},Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2144
		  apply 't_tuple_subtypes'/1
		      (_cor1)
	      in  %% Line 2144
		  apply 't_collect_vars_list'/2
		      (_cor6, _cor0)
	  %% Line 2145
	  <Map = {'c','map',_cor29,_cor30},Acc0> when 'true' ->
	      let <_cor7> =
		  %% Line 2146
		  apply 'map_keys'/1
		      (_cor1)
	      in  let <Acc> =
		      %% Line 2146
		      apply 't_collect_vars_list'/2
			  (_cor7, _cor0)
		  in  let <_cor9> =
			  %% Line 2147
			  apply 'map_values'/1
			      (_cor1)
		      in  %% Line 2147
			  apply 't_collect_vars_list'/2
			      (_cor9, Acc)
	  %% Line 2148
	  <{'c','opaque',Set,_cor31},Acc> when 'true' ->
	      let <_cor17> =
		  %% Line 2150
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor13) ->
				case _cor13 of
				  <[O|_cor11]> when 'true' ->
				      ( case O of
					  ( <( {'opaque',_cor32,_cor33,_cor34,_rec4}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor16> =
						    apply 'lc$^0'/1
							(_cor11)
						in  ( [_rec4|_cor16]
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor35> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','opaque'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_33257> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor12> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set)
			in  apply 'lc$^0'/1
				(_cor12)
		    -| ['list_comprehension'] )
	      in  %% Line 2150
		  apply 't_collect_vars_list'/2
		      (_cor17, _cor0)
	  %% Line 2151
	  <{'c','union',List = [_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[_cor43|[_cor44|[_cor45|[_cor46|[]]]]]]]]]]]],_cor47},Acc> when 'true' ->
	      %% Line 2152
	      apply 't_collect_vars_list'/2
		  (List, _cor0)
	  %% Line 2153
	  <_cor48,Acc> when 'true' ->
	      _cor0
	end
't_collect_vars_list'/2 =
    %% Line 2156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|Ts],Acc0> when 'true' ->
	      let <Acc> =
		  %% Line 2157
		  apply 't_collect_vars'/2
		      (T, _cor0)
	      in  %% Line 2158
		  apply 't_collect_vars_list'/2
		      (Ts, Acc)
	  %% Line 2159
	  <[],Acc> when 'true' ->
	      _cor0
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_collect_vars_list',2}}] )
	    -| ['compiler_generated'] )
	end
't_from_term'/1 =
    %% Line 2173
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_cor2> =
		  apply 't_from_term'/1
		      (H)
	      in  let <_cor1> =
		      apply 't_from_term'/1
			  (T)
		  in  apply 't_cons'/2
			  (_cor2, _cor1)
	  %% Line 2174
	  <[]> when 'true' ->
	      {'c','nil',[],'unknown'}
	  %% Line 2175
	  <T>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 't_atom'/1
		  (_cor0)
	  %% Line 2176
	  <T>
	      when call 'erlang':'is_bitstring'
		    (_cor0) ->
	      let <_cor3> =
		  call 'erlang':'bit_size'
		      (_cor0)
	      in  {'c','binary',[0|[_cor3|[]]],'unknown'}
	  %% Line 2177
	  <T>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      {'c','number','any','float'}
	  %% Line 2178
	  <T>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      let <_7319> =
		  %% Line 2179
		  call 'erlang':'fun_info'
		      (_cor0, 'arity')
	      in  %% Line 2179
		  case _7319 of
		    <{'arity',Arity}> when 'true' ->
			%% Line 2180
			apply 't_fun'/2
			    (Arity, 'any')
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7319})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2181
	  <T>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      apply 't_integer'/1
		  (_cor0)
	  %% Line 2182
	  <T>
	      when call 'erlang':'is_map'
		    (_cor0) ->
	      {'c','map',[],'unknown'}
	  %% Line 2183
	  <T>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_37057> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['pid'])
	      in  {'c','identifier',_37057,'unknown'}
	  %% Line 2184
	  <T>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      let <_15814> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['port'])
	      in  {'c','identifier',_15814,'unknown'}
	  %% Line 2185
	  <T>
	      when call 'erlang':'is_reference'
		    (_cor0) ->
	      let <_19778> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['reference'])
	      in  {'c','identifier',_19778,'unknown'}
	  %% Line 2186
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor12> =
		  %% Line 2187
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[E|_cor7]> when 'true' ->
				      let <_cor10> =
					  apply 't_from_term'/1
					      (E)
				      in  let <_cor11> =
					      apply 'lc$^0'/1
						  (_cor7)
					  in  ( [_cor10|_cor11]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_4617> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor8> =
			    call 'erlang':'tuple_to_list'
				(_cor0)
			in  apply 'lc$^0'/1
				(_cor8)
		    -| ['list_comprehension'] )
	      in  %% Line 2187
		  apply 't_tuple'/1
		      (_cor12)
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_from_term',1}}] )
	    -| ['compiler_generated'] )
	end
't_from_range'/2 =
    %% Line 2204
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'neg_inf','pos_inf'> when 'true' ->
	      {'c','number','any','integer'}
	  %% Line 2205
	  <'neg_inf',Y>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor3> =
			call 'erlang':'<'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      {'c','number',{'int_rng','neg_inf',-1},'integer'}
	  %% Line 2206
	  <'neg_inf',Y>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor6> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      {'c','number','any','integer'}
	  %% Line 2207
	  <X,'pos_inf'>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor8> =
			call 'erlang':'>='
			    (_cor1, 1)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      {'c','number',{'int_rng',1,'pos_inf'},'integer'}
	  %% Line 2208
	  <X,'pos_inf'>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor10> =
			call 'erlang':'>='
			    (_cor1, 0)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      {'c','number',{'int_rng',0,'pos_inf'},'integer'}
	  %% Line 2209
	  <X,'pos_inf'>
	      when let <_cor11> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor12> =
			call 'erlang':'<'
			    (_cor1, 0)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      {'c','number','any','integer'}
	  %% Line 2210
	  <X,Y>
	      when try
		    let <_cor13> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor14> =
			    call 'erlang':'is_integer'
				(_cor0)
			in  let <_cor15> =
				call 'erlang':'>'
				    (_cor1, _cor0)
			    in  let <_cor16> =
				    call 'erlang':'and'
					(_cor14, _cor15)
				in  call 'erlang':'and'
					(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'none'
	  %% Line 2211
	  <X,Y>
	      when let <_cor17> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor18> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      let <_cor19> =
		  %% Line 2212
		  call 'erlang':'-'
		      (_cor0, _cor1)
	      in  %% Line 2212
		  case <> of
		    %% Line 2213
		    <>
			when call 'erlang':'<'
			      (_cor19,
			       13) ->
			let <_cor20> =
			    call 'lists':'seq'
				(_cor1, _cor0)
			in  apply 't_integers'/1
				(_cor20)
		    %% Line 2214
		    <> when 'true' ->
			%% Line 2215
			case <> of
			  %% Line 2220
			  <>
			      when call 'erlang':'>='
				    (_cor1,
				     0) ->
			      %% Line 2221
			      case <> of
				<>
				    when let <_cor22> =
					  call 'erlang':'=<'
					      (_cor0, 255)
				      in  let <_cor23> =
					      call 'erlang':'>='
						  (_cor1, 1)
					  in  call 'erlang':'and'
						  (_cor22, _cor23) ->
				    {'c','number',{'int_rng',1,255},'integer'}
				%% Line 2222
				<>
				    when call 'erlang':'=<'
					  (_cor0,
					   255) ->
				    {'c','number',{'int_rng',0,255},'integer'}
				%% Line 2223
				<>
				    when let <_cor24> =
					  call 'erlang':'=<'
					      (_cor0, 1114111)
				      in  let <_cor25> =
					      call 'erlang':'>='
						  (_cor1, 1)
					  in  call 'erlang':'and'
						  (_cor24, _cor25) ->
				    {'c','number',{'int_rng',1,1114111},'integer'}
				%% Line 2224
				<>
				    when call 'erlang':'=<'
					  (_cor0,
					   1114111) ->
				    {'c','number',{'int_rng',0,1114111},'integer'}
				%% Line 2225
				<>
				    when call 'erlang':'>='
					  (_cor1,
					   1) ->
				    {'c','number',{'int_rng',1,'pos_inf'},'integer'}
				%% Line 2226
				<>
				    when call 'erlang':'>='
					  (_cor1,
					   0) ->
				    {'c','number',{'int_rng',0,'pos_inf'},'integer'}
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
			  %% Line 2216
			  <> when 'true' ->
			      %% Line 2217
			      case <> of
				<>
				    when call 'erlang':'<'
					  (_cor0,
					   0) ->
				    {'c','number',{'int_rng','neg_inf',-1},'integer'}
				%% Line 2218
				<> when 'true' ->
				    {'c','number','any','integer'}
			      end
			end
		  end
	  %% Line 2230
	  <'pos_inf','neg_inf'> when 'true' ->
	      'none'
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_from_range',2}}] )
	    -| ['compiler_generated'] )
	end
't_from_range_unsafe'/2 =
    %% Line 2236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'neg_inf','pos_inf'> when 'true' ->
	      {'c','number','any','integer'}
	  %% Line 2237
	  <'neg_inf',Y> when 'true' ->
	      {'c','number',{'int_rng','neg_inf',_cor0},'integer'}
	  %% Line 2238
	  <X,'pos_inf'> when 'true' ->
	      {'c','number',{'int_rng',_cor1,'pos_inf'},'integer'}
	  %% Line 2239
	  <X,Y>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(_cor0)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (_cor1, _cor0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2240
	      case <> of
		<>
		    when try
			  let <_cor6> =
			      call 'erlang':'-'
				  (_cor0, _cor1)
			  in  call 'erlang':'<'
				  (_cor6, 13)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor7> =
			call 'lists':'seq'
			    (_cor1, _cor0)
		    in  apply 't_integers'/1
			    (_cor7)
		%% Line 2241
		<> when 'true' ->
		    {'c','number',{'int_rng',_cor1,_cor0},'integer'}
	      end
	  %% Line 2243
	  <X,Y>
	      when let <_cor8> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor9> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      'none'
	  %% Line 2244
	  <'pos_inf','neg_inf'> when 'true' ->
	      'none'
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_from_range_unsafe',2}}] )
	    -| ['compiler_generated'] )
	end
't_is_fixnum'/1 =
    %% Line 2248
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_rng','neg_inf',_cor8},'integer'}> when 'true' ->
	      'false'
	  %% Line 2249
	  <{'c','number',{'int_rng',_cor9,'pos_inf'},'integer'}> when 'true' ->
	      'false'
	  %% Line 2250
	  <{'c','number',{'int_rng',From,To},'integer'}> when 'true' ->
	      let <_15887> =
		  %% Line 2251
		  apply 'is_fixnum'/1
		      (From)
	      in  %% Line 2251
		  ( case _15887 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_fixnum'/1
				(To)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_15887}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2252
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 4833
	      case Set of
		<[H|_cor2]> when 'true' ->
		    let <_4490> =
			apply 'is_fixnum'/1
			    (H)
		    in  ( case _4490 of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor1> =
				      %% Line 4836
				      call 'lists':'reverse'
					  (Set)
				  in  let <_cor5> =
					  %% Line 4836
					  call 'erlang':'hd'
					      (_cor1)
				      in  apply 'is_fixnum'/1
					      (_cor5)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor3> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_4490}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',Set})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2254
	  <_cor10> when 'true' ->
	      'false'
	end
'is_fixnum'/1 =
    %% Line 2258
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 2259
		  call 'erlang':'system_info'
		      ('wordsize')
	      in  let <_cor2> =
		      %% Line 2259
		      call 'erlang':'*'
			  (_cor1, 8)
		  in  let <Bits> =
			  %% Line 2259
			  call 'erlang':'-'
			      (_cor2, 4)
		      in  let <_cor5> =
			      %% Line 2260
			      call 'erlang':'-'
				  (Bits, 1)
			  in  let <_cor6> =
				  %% Line 2260
				  call 'erlang':'bsl'
				      (1, _cor5)
			      in  let <_cor7> =
				      %% Line 2260
				      call 'erlang':'-'
					  (_cor6, 1)
				  in  %% Line 2260
				      ( case <> of
					  ( <>
						when call 'erlang':'=<'
						      (_cor0,
						       _cor7) ->
						let <_cor8> =
						    call 'erlang':'-'
							(Bits, 1)
						in  let <_cor9> =
							call 'erlang':'bsl'
							    (1, _cor8)
						    in  let <_cor10> =
							    call 'erlang':'-'
								(_cor9)
							in  call 'erlang':'>='
								(_cor0, _cor10)
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_fixnum',1}}] )
	    -| ['compiler_generated'] )
	end
't_is_bitwidth'/1 =
    %% Line 2270
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_rng','neg_inf',_cor14},'integer'}> when 'true' ->
	      'false'
	  %% Line 2271
	  <{'c','number',{'int_rng',_cor15,'pos_inf'},'integer'}> when 'true' ->
	      'false'
	  %% Line 2272
	  <{'c','number',{'int_rng',From,To},'integer'}> when 'true' ->
	      let <_34680> =
		  case From of
		    <'pos_inf'> when 'true' ->
			'true'
		    <'neg_inf'> when 'true' ->
			'false'
		    <A> when 'true' ->
			call 'erlang':'>='
			    (From, %% Line 2273
				   0)
		  end
	      in  %% Line 2273
		  ( case _34680 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor2> =
				call 'erlang':'system_info'
				    ('wordsize')
			    in  let <_cor3> =
				    call 'erlang':'*'
					(_cor2, 8)
				in  let <_cor4> =
					call 'erlang':'-'
					    (_cor3, 4)
				    in  case <_cor4,To> of
					  <'pos_inf',_24584> when 'true' ->
					      'true'
					  <_cor5,'pos_inf'> when 'true' ->
					      'false'
					  <_cor6,'neg_inf'> when 'true' ->
					      'true'
					  <'neg_inf',_cor7> when 'true' ->
					      'false'
					  <A,B> when 'true' ->
					      call 'erlang':'>='
						  (_cor4, To)
					end
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_34680}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2274
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 4833
	      case Set of
		<[H|_cor2]> when 'true' ->
		    let <_25625> =
			case H of
			  <'pos_inf'> when 'true' ->
			      'true'
			  <'neg_inf'> when 'true' ->
			      'false'
			  <A> when 'true' ->
			      call 'erlang':'>='
				  (H, 0)
			end
		    in  ( case _25625 of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor9> =
				      call 'erlang':'system_info'
					  ('wordsize')
				  in  let <_cor10> =
					  call 'erlang':'*'
					      (_cor9, 8)
				      in  let <_cor11> =
					      call 'erlang':'-'
						  (_cor10, 4)
					  in  let <_cor1> =
						  %% Line 4836
						  call 'lists':'reverse'
						      (Set)
					      in  let <_cor8> =
						      %% Line 4836
						      call 'erlang':'hd'
							  (_cor1)
						  in  case <_cor11,_cor8> of
							<'pos_inf',_cor4> when 'true' ->
							    'true'
							<_cor5,'pos_inf'> when 'true' ->
							    'false'
							<_cor6,'neg_inf'> when 'true' ->
							    'true'
							<'neg_inf',_3890> when 'true' ->
							    'false'
							<A,B> when 'true' ->
							    call 'erlang':'>='
								(_cor11, _cor8)
						      end
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor6> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_25625}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',Set})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2276
	  <_cor16> when 'true' ->
	      'false'
	end
'number_min'/1 =
    %% Line 2280
    fun (_cor0) ->
	%% Line 2281
	apply 'number_min'/2
	    (_cor0, 'universe')
'number_min'/2 =
    %% Line 2285
    fun (_cor1,_cor0) ->
	%% Line 2286
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'number_min2'/1)
'number_min2'/1 =
    %% Line 2288
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_rng',From,_cor2},'integer'}> when 'true' ->
	      From
	  %% Line 2289
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 4833
	      case Set of
		<[H|_cor2]> when 'true' ->
		    H
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',Set})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2290
	  <{'c','number','any',_X_Tag}> when 'true' ->
	      'neg_inf'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'number_min2',1}}] )
	    -| ['compiler_generated'] )
	end
'number_max'/1 =
    %% Line 2294
    fun (_cor0) ->
	%% Line 2295
	apply 'number_max'/2
	    (_cor0, 'universe')
'number_max'/2 =
    %% Line 2299
    fun (_cor1,_cor0) ->
	%% Line 2300
	apply 'do_opaque'/3
	    (_cor1, _cor0, 'number_max2'/1)
'number_max2'/1 =
    %% Line 2302
    fun (_cor0) ->
	case _cor0 of
	  <{'c','number',{'int_rng',_cor2,To},'integer'}> when 'true' ->
	      To
	  %% Line 2303
	  <{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      let <_cor1> =
		  %% Line 4836
		  call 'lists':'reverse'
		      (Set)
	      in  %% Line 4836
		  call 'erlang':'hd'
		      (_cor1)
	  %% Line 2304
	  <{'c','number','any',_X_Tag}> when 'true' ->
	      'pos_inf'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'number_max2',1}}] )
	    -| ['compiler_generated'] )
	end
'in_range'/2 =
    %% Line 2314
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor6,{'c','number',{'int_rng','neg_inf','pos_inf'},'integer'}> when 'true' ->
	      'true'
	  %% Line 2315
	  <X,{'c','number',{'int_rng',From,'pos_inf'},'integer'}> when 'true' ->
	      call 'erlang':'>='
		  (_cor1, From)
	  %% Line 2316
	  <X,{'c','number',{'int_rng','neg_inf',To},'integer'}> when 'true' ->
	      call 'erlang':'=<'
		  (_cor1, To)
	  %% Line 2317
	  <X,{'c','number',{'int_rng',From,To},'integer'}> when 'true' ->
	      ( case <> of
		  ( <>
			when call 'erlang':'>='
			      (_cor1,
			       From) ->
			call 'erlang':'=<'
			    (_cor1, To)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'in_range',2}}] )
	    -| ['compiler_generated'] )
	end
'min'/2 =
    %% Line 2321
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'neg_inf',_cor4> when 'true' ->
	      'neg_inf'
	  %% Line 2322
	  <_cor5,'neg_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 2323
	  <'pos_inf',Y> when 'true' ->
	      _cor0
	  %% Line 2324
	  <X,'pos_inf'> when 'true' ->
	      _cor1
	  %% Line 2325
	  <X,Y>
	      when call 'erlang':'=<'
		    (_cor1,
		     _cor0) ->
	      _cor1
	  %% Line 2326
	  <_cor6,Y> when 'true' ->
	      _cor0
	end
'max'/2 =
    %% Line 2330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'neg_inf',Y> when 'true' ->
	      _cor0
	  %% Line 2331
	  <X,'neg_inf'> when 'true' ->
	      _cor1
	  %% Line 2332
	  <'pos_inf',_cor4> when 'true' ->
	      'pos_inf'
	  %% Line 2333
	  <_cor5,'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 2334
	  <X,Y>
	      when call 'erlang':'=<'
		    (_cor1,
		     _cor0) ->
	      _cor0
	  %% Line 2335
	  <X,_cor6> when 'true' ->
	      _cor1
	end
'expand_range_from_set'/2 =
    %% Line 2337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Range = {'c','number',{'int_rng',From,To},'integer'},Set> when 'true' ->
	      %% Line 4833
	      case _cor0 of
		<[H|_cor2]> when 'true' ->
		    let <Min> =
			case <H,From> of
			  <'neg_inf',_cor4> when 'true' ->
			      'neg_inf'
			  <_cor5,'neg_inf'> when 'true' ->
			      'neg_inf'
			  <'pos_inf',Y> when 'true' ->
			      From
			  <X,'pos_inf'> when 'true' ->
			      H
			  <X,Y>
			      when call 'erlang':'=<'
				    (H,
				     From) ->
			      H
			  <_cor6,Y> when 'true' ->
			      From
			end
		    in  let <_40264> =
			    %% Line 4836
			    call 'lists':'reverse'
				(_cor0)
			in  let <_cor4> =
				%% Line 4836
				call 'erlang':'hd'
				    (_40264)
			    in  let <Max> =
				    case <_cor4,To> of
				      <'neg_inf',Y> when 'true' ->
					  To
				      <X,'neg_inf'> when 'true' ->
					  _cor4
				      <'pos_inf',_29363> when 'true' ->
					  'pos_inf'
				      <_cor5,'pos_inf'> when 'true' ->
					  'pos_inf'
				      <X,Y>
					  when call 'erlang':'=<'
						(_cor4,
						 To) ->
					  To
				      <X,_cor6> when 'true' ->
					  _cor4
				    end
				in  case <> of
				      <>
					  when let <_cor6> =
						call 'erlang':'=:='
						    (From, Min)
					    in  let <_cor7> =
						    call 'erlang':'=:='
							(To, Max)
						in  call 'erlang':'and'
							(_cor6, _cor7) ->
					  _cor1
				      <> when 'true' ->
					  apply 't_from_range'/2
					      (Min, Max)
				    end
		( <_1198> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'expand_range_from_set',2}}] )
	    -| ['compiler_generated'] )
	end
't_sup'/1 =
    %% Line 2356
    fun (_cor0) ->
	case _cor0 of
	  <['any'|_cor3]> when 'true' ->
	      %% Line 2357
	      'any'
	  %% Line 2358
	  <[H1|[H2|T]]> when 'true' ->
	      let <_cor1> =
		  %% Line 2359
		  apply 't_sup'/2
		      (H1, H2)
	      in  %% Line 2359
		  apply 't_sup'/1
		      ([_cor1|T])
	  %% Line 2360
	  <[H|[]]> when 'true' ->
	      let <_15843> =
		  %% Line 3130
		  apply 't_has_var'/1
		      (H)
	      in  %% Line 3130
		  case _15843 of
		    %% Line 3131
		    <'true'> when 'true' ->
			apply 't_subst_aux'/2
			    (H, [])
		    %% Line 3132
		    <'false'> when 'true' ->
			H
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15843})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2362
	  <[]> when 'true' ->
	      %% Line 2363
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_sup',1}}] )
	    -| ['compiler_generated'] )
	end
't_sup'/2 =
    %% Line 2367
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'any',_cor45> when 'true' ->
	      'any'
	  %% Line 2368
	  <_cor46,'any'> when 'true' ->
	      'any'
	  %% Line 2369
	  <'none',T> when 'true' ->
	      _cor0
	  %% Line 2370
	  <T,'none'> when 'true' ->
	      _cor1
	  %% Line 2371
	  <'unit',T> when 'true' ->
	      _cor0
	  %% Line 2372
	  <T,'unit'> when 'true' ->
	      _cor1
	  %% Line 2373
	  <T,_cor47>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      let <_15843> =
		  %% Line 3130
		  apply 't_has_var'/1
		      (_cor1)
	      in  %% Line 3130
		  case _15843 of
		    %% Line 3131
		    <'true'> when 'true' ->
			apply 't_subst_aux'/2
			    (_cor1, [])
		    %% Line 3132
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15843})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2374
	  <{'c','var',_cor48,_cor49},_cor50> when 'true' ->
	      'any'
	  %% Line 2375
	  <_cor51,{'c','var',_cor52,_cor53}> when 'true' ->
	      'any'
	  %% Line 2376
	  <{'c','atom',Set1,_cor54},{'c','atom',Set2,_cor55}> when 'true' ->
	      let <_cor2> =
		  %% Line 4776
		  case <Set1,Set2> of
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4777
		    <_cor7,'any'> when 'true' ->
			'any'
		    %% Line 4778
		    <S1,S2> when 'true' ->
			let <_13461> =
			    %% Line 4779
			    call 'ordsets':'union'
				(Set1, Set2)
			in  %% Line 4779
			    case _13461 of
			      %% Line 4780
			      <S>
				  when try
					let <_cor2> =
					    call 'erlang':'length'
						(_13461)
					in  call 'erlang':'=<'
						(_cor2, 13)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  _13461
			      %% Line 4781
			      <_cor8> when 'true' ->
				  'any'
			    end
		  end
	      in  %% Line 2377
		  {'c','atom',_cor2,'unknown'}
	  %% Line 2378
	  <{'c','binary',[U1|[B1|[]]],_cor56},{'c','binary',[U2|[B2|[]]],_cor57}> when 'true' ->
	      let <_cor6> =
		  %% Line 2379
		  apply 'gcd'/2
		      (U1, U2)
	      in  let <_cor4> =
		      %% Line 2379
		      call 'erlang':'-'
			  (B1, B2)
		  in  let <_cor5> =
			  %% Line 2379
			  call 'erlang':'abs'
			      (_cor4)
		      in  let <_cor7> =
			      %% Line 2379
			      apply 'gcd'/2
				  (_cor6, _cor5)
			  in  let <_cor3> =
				  %% Line 2379
				  call 'lists':'min'
				      ([B1|[B2|[]]])
			      in  %% Line 2379
				  apply 't_bitstr'/2
				      (_cor7, _cor3)
	  %% Line 2380
	  <{'c','function',[Domain1|[Range1|[]]],_cor58},{'c','function',[Domain2|[Range2|[]]],_cor59}> when 'true' ->
	      let <_cor8> =
		  %% Line 2382
		  apply 't_sup'/2
		      (Domain1, Domain2)
	      in  let <_cor9> =
		      %% Line 2382
		      apply 't_sup'/2
			  (Range1, Range2)
		  in  %% Line 2382
		      {'c','function',[_cor8|[_cor9|[]]],'unknown'}
	  %% Line 2383
	  <{'c','identifier',Set1,_cor60},{'c','identifier',Set2,_cor61}> when 'true' ->
	      let <_cor10> =
		  %% Line 4776
		  case <Set1,Set2> of
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4777
		    <_cor7,'any'> when 'true' ->
			'any'
		    %% Line 4778
		    <S1,S2> when 'true' ->
			let <_13461> =
			    %% Line 4779
			    call 'ordsets':'union'
				(Set1, Set2)
			in  %% Line 4779
			    case _13461 of
			      %% Line 4780
			      <S>
				  when try
					let <_cor2> =
					    call 'erlang':'length'
						(_13461)
					in  call 'erlang':'=<'
						(_cor2, 13)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  _13461
			      %% Line 4781
			      <_cor8> when 'true' ->
				  'any'
			    end
		  end
	      in  %% Line 2384
		  {'c','identifier',_cor10,'unknown'}
	  %% Line 2385
	  <{'c','opaque',Set1,_cor62},{'c','opaque',Set2,_cor63}> when 'true' ->
	      let <_cor11> =
		  %% Line 2386
		  call 'ordsets':'union'
		      (Set1, Set2)
	      in  let <_cor12> =
		      %% Line 4815
		      call 'ordsets':'to_list'
			  (_cor11)
		  in  %% Line 2386
		      apply 'sup_opaque'/1
			  (_cor12)
	  %% Line 2392
	  <{'c','remote',Set1,_cor64},{'c','remote',Set2,_cor65}> when 'true' ->
	      let <_cor13> =
		  %% Line 4784
		  case <Set1,Set2> of
		    <'any',_cor4> when 'true' ->
			'any'
		    %% Line 4785
		    <_cor5,'any'> when 'true' ->
			'any'
		    %% Line 4786
		    <S1,S2> when 'true' ->
			call 'ordsets':'union'
			    (Set1, Set2)
		  end
	      in  %% Line 2393
		  {'c','remote',_cor13,'unknown'}
	  %% Line 2394
	  <{'c','matchstate',[Pres1|[Slots1|[]]],_cor66},{'c','matchstate',[Pres2|[Slots2|[]]],_cor67}> when 'true' ->
	      let <_cor14> =
		  %% Line 2395
		  apply 't_sup'/2
		      (Pres1, Pres2)
	      in  let <_cor15> =
		      %% Line 2395
		      apply 't_sup'/2
			  (Slots1, Slots2)
		  in  %% Line 2395
		      {'c','matchstate',[_cor14|[_cor15|[]]],'unknown'}
	  %% Line 2396
	  <{'c','nil',_cor68,_cor69},{'c','nil',_cor70,_cor71}> when 'true' ->
	      {'c','nil',[],'unknown'}
	  %% Line 2397
	  <{'c','nil',_cor72,_cor73},{'c','list',[Contents|[Termination|[]]],_cor74}> when 'true' ->
	      let <_cor16> =
		  %% Line 2398
		  apply 't_sup'/2
		      ({'c','nil',[],'unknown'}, Termination)
	      in  %% Line 2398
		  {'c','list',[Contents|[_cor16|[]]],'unknown'}
	  %% Line 2399
	  <{'c','list',[Contents|[Termination|[]]],_cor75},{'c','nil',_cor76,_cor77}> when 'true' ->
	      let <_cor17> =
		  %% Line 2400
		  apply 't_sup'/2
		      ({'c','nil',[],'unknown'}, Termination)
	      in  %% Line 2400
		  {'c','list',[Contents|[_cor17|[]]],'unknown'}
	  %% Line 2401
	  <{'c','list',[Contents1|[Termination1|[]]],Size1},%% Line 2402
							    {'c','list',[Contents2|[Termination2|[]]],Size2}> when 'true' ->
	      let <_cor19> =
		  %% Line 2404
		  case <Size1,Size2> of
		    %% Line 2405
		    <'unknown','unknown'> when 'true' ->
			'unknown'
		    %% Line 2406
		    <'unknown','nonempty'> when 'true' ->
			'unknown'
		    %% Line 2407
		    <'nonempty','unknown'> when 'true' ->
			'unknown'
		    %% Line 2408
		    <'nonempty','nonempty'> when 'true' ->
			'nonempty'
		    ( <_fol193,_fol194> when 'true' ->
			  let <_cor18> = {Size1,Size2}
			  in  primop 'match_fail'
				  ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      in  let <NewContents> =
		      %% Line 2410
		      apply 't_sup'/2
			  (Contents1, Contents2)
		  in  let <NewTermination> =
			  %% Line 2411
			  apply 't_sup'/2
			      (Termination1, Termination2)
		      in  let <TmpList> =
			      %% Line 2412
			      apply 't_cons'/2
				  (NewContents, NewTermination)
			  in  %% Line 2413
			      case _cor19 of
				%% Line 2414
				<'nonempty'> when 'true' ->
				    TmpList
				%% Line 2415
				<'unknown'> when 'true' ->
				    %% Line 2416
				    case TmpList of
				      <{'c','list',[FinalContents|[FinalTermination|[]]],_cor78}> when 'true' ->
					  %% Line 2417
					  {'c','list',[FinalContents|[FinalTermination|[]]],'unknown'}
				      ( <_cor24> when 'true' ->
					    primop 'match_fail'
						({'badmatch',TmpList})
					-| ['compiler_generated'] )
				    end
				( <_cor25> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor19})
				  -| ['compiler_generated'] )
			      end
	  %% Line 2419
	  <{'c','number',_cor79,_cor80},T = {'c','number','any','unknown'}> when 'true' ->
	      _cor0
	  %% Line 2420
	  <T = {'c','number','any','unknown'},{'c','number',_cor81,_cor82}> when 'true' ->
	      _cor1
	  %% Line 2421
	  <{'c','number','any','float'},{'c','number','any','float'}> when 'true' ->
	      {'c','number','any','float'}
	  %% Line 2422
	  <{'c','number','any','float'},{'c','number',_cor83,'integer'}> when 'true' ->
	      {'c','number','any','unknown'}
	  %% Line 2423
	  <{'c','number',_cor84,'integer'},{'c','number','any','float'}> when 'true' ->
	      {'c','number','any','unknown'}
	  %% Line 2424
	  <T = {'c','number','any','integer'},{'c','number',_cor85,'integer'}> when 'true' ->
	      _cor1
	  %% Line 2425
	  <{'c','number',_cor86,'integer'},T = {'c','number','any','integer'}> when 'true' ->
	      _cor0
	  %% Line 2426
	  <{'c','number',{'int_set',Set1},'integer'},{'c','number',{'int_set',Set2},'integer'}> when 'true' ->
	      let <_13285> =
		  %% Line 4776
		  case <Set1,Set2> of
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4777
		    <_cor7,'any'> when 'true' ->
			'any'
		    %% Line 4778
		    <S1,S2> when 'true' ->
			let <_13461> =
			    %% Line 4779
			    call 'ordsets':'union'
				(Set1, Set2)
			in  %% Line 4779
			    case _13461 of
			      %% Line 4780
			      <S>
				  when try
					let <_cor2> =
					    call 'erlang':'length'
						(_13461)
					in  call 'erlang':'=<'
						(_cor2, 13)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  _13461
			      %% Line 4781
			      <_cor8> when 'true' ->
				  'any'
			    end
		  end
	      in  %% Line 2427
		  case _13285 of
		    %% Line 2428
		    <'any'> when 'true' ->
			%% Line 4833
			case Set1 of
			  <[H|_cor2]> when 'true' ->
			      case Set2 of
				<[_fol973|_fol974]> when 'true' ->
				    let <_cor31> =
					case <H,_fol973> of
					  <'neg_inf',_cor4> when 'true' ->
					      'neg_inf'
					  <_cor5,'neg_inf'> when 'true' ->
					      'neg_inf'
					  <'pos_inf',Y> when 'true' ->
					      _fol973
					  <X,'pos_inf'> when 'true' ->
					      H
					  <X,Y>
					      when call 'erlang':'=<'
						    (H,
						     _fol973) ->
					      H
					  <_cor6,Y> when 'true' ->
					      _fol973
					end
				    in  let <_36596> =
					    %% Line 4836
					    call 'lists':'reverse'
						(Set1)
					in  let <_cor27> =
						%% Line 4836
						call 'erlang':'hd'
						    (_36596)
					    in  let <_28278> =
						    %% Line 4836
						    call 'lists':'reverse'
							(Set2)
						in  let <_cor26> =
							%% Line 4836
							call 'erlang':'hd'
							    (_28278)
						    in  let <_cor28> =
							    case <_cor27,_cor26> of
							      <'neg_inf',Y> when 'true' ->
								  _cor26
							      <X,'neg_inf'> when 'true' ->
								  _cor27
							      <'pos_inf',_cor4> when 'true' ->
								  'pos_inf'
							      <_cor5,'pos_inf'> when 'true' ->
								  'pos_inf'
							      <X,Y>
								  when call 'erlang':'=<'
									(_cor27,
									 _cor26) ->
								  _cor26
							      <X,_cor6> when 'true' ->
								  _cor27
							    end
							in  apply 't_from_range'/2
								(_cor31, _cor28)
				( <_35677> when 'true' ->
				      primop 'match_fail'
					  ({'function_clause',Set2})
				  -| ['compiler_generated'] )
			      end
			  ( <_1090> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Set1})
			    -| ['compiler_generated'] )
			end
		    %% Line 2431
		    <Set> when 'true' ->
			{'c','number',{'int_set',_13285},'integer'}
		  end
	  %% Line 2433
	  <{'c','number',{'int_rng',From1,To1},'integer'},{'c','number',{'int_rng',From2,To2},'integer'}> when 'true' ->
	      let <_cor34> =
		  case <From1,From2> of
		    <'neg_inf',_cor4> when 'true' ->
			'neg_inf'
		    <_cor5,'neg_inf'> when 'true' ->
			'neg_inf'
		    <'pos_inf',Y> when 'true' ->
			From2
		    <X,'pos_inf'> when 'true' ->
			From1
		    <X,Y>
			when call 'erlang':'=<'
			      (From1,
			       From2) ->
			From1
		    <_cor6,Y> when 'true' ->
			From2
		  end
	      in  let <_cor33> =
		      case <To1,To2> of
			<'neg_inf',Y> when 'true' ->
			    To2
			<X,'neg_inf'> when 'true' ->
			    To1
			<'pos_inf',_cor4> when 'true' ->
			    'pos_inf'
			<_cor5,'pos_inf'> when 'true' ->
			    'pos_inf'
			<X,Y>
			    when call 'erlang':'=<'
				  (To1,
				   To2) ->
			    To2
			<X,_cor6> when 'true' ->
			    To1
		      end
		  in  %% Line 2434
		      apply 't_from_range'/2
			  (_cor34, _cor33)
	  %% Line 2435
	  <Range = {'c','number',{'int_rng',_cor87,_cor88},'integer'},{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      %% Line 2436
	      apply 'expand_range_from_set'/2
		  (_cor1, Set)
	  %% Line 2437
	  <{'c','number',{'int_set',Set},'integer'},Range = {'c','number',{'int_rng',_cor89,_cor90},'integer'}> when 'true' ->
	      %% Line 2438
	      apply 'expand_range_from_set'/2
		  (_cor0, Set)
	  %% Line 2439
	  <{'c','product',Types1,_cor91},{'c','product',Types2,_cor92}> when 'true' ->
	      let <L1> =
		  %% Line 2440
		  call 'erlang':'length'
		      (Types1)
	      in  let <L2> =
		      %% Line 2441
		      call 'erlang':'length'
			  (Types2)
		  in  %% Line 2442
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (L1,
				   L2) ->
			    let <_cor37> =
				%% Line 2497
				case <Types1,Types2> of
				  <[T1|Left1],[T2|Left2]> when 'true' ->
				      let <_cor2> =
					  %% Line 2498
					  apply 't_sup'/2
					      (T1, T2)
				      in  let <_cor3> =
					      %% Line 2498
					      apply 't_sup_lists'/2
						  (Left1, Left2)
					  in  %% Line 2498
					      [_cor2|_cor3]
				  %% Line 2499
				  <[],[]> when 'true' ->
				      %% Line 2500
				      []
				  ( <_cor5,_cor4> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',Types1,Types2})
				    -| ['compiler_generated'] )
				end
			    in  {'c','product',_cor37,'unknown'}
			%% Line 2443
			<> when 'true' ->
			    'any'
		      end
	  %% Line 2445
	  <{'c','product',_cor93,_cor94},_cor95> when 'true' ->
	      %% Line 2446
	      'any'
	  %% Line 2447
	  <_cor96,{'c','product',_cor97,_cor98}> when 'true' ->
	      %% Line 2448
	      'any'
	  %% Line 2449
	  <T = {'c','tuple','any',{'any','any'}},{'c','tuple',_cor99,{_cor100,_cor101}}> when 'true' ->
	      _cor1
	  %% Line 2450
	  <{'c','tuple',_cor102,{_cor103,_cor104}},T = {'c','tuple','any',{'any','any'}}> when 'true' ->
	      _cor0
	  %% Line 2451
	  <T = {'c','tuple','any',{'any','any'}},{'c','tuple_set',_cor105,_cor106}> when 'true' ->
	      _cor1
	  %% Line 2452
	  <{'c','tuple_set',_cor107,_cor108},T = {'c','tuple','any',{'any','any'}}> when 'true' ->
	      _cor0
	  %% Line 2453
	  <T1 = {'c','tuple',Elements1,{Arity,Tag1}},T2 = %% Line 2454
							  {'c','tuple',Elements2,{_cor109,Tag2}}>
	      when call 'erlang':'=:='
		    (_cor109,
		     Arity) ->
	      %% Line 2455
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Tag1,
			   Tag2) ->
		    let <_cor38> =
			%% Line 2497
			case <Elements1,Elements2> of
			  <[_22084|Left1],[_15747|Left2]> when 'true' ->
			      let <_cor2> =
				  %% Line 2498
				  apply 't_sup'/2
				      (_22084, _15747)
			      in  let <_cor3> =
				      %% Line 2498
				      apply 't_sup_lists'/2
					  (Left1, Left2)
				  in  %% Line 2498
				      [_cor2|_cor3]
			  %% Line 2499
			  <[],[]> when 'true' ->
			      %% Line 2500
			      []
			  ( <_cor5,_cor4> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Elements1,Elements2})
			    -| ['compiler_generated'] )
			end
		    in  apply 't_tuple'/1
			    (_cor38)
		%% Line 2456
		<>
		    when call 'erlang':'=:='
			  (Tag1,
			   'any') ->
		    let <_cor39> =
			%% Line 2497
			case <Elements1,Elements2> of
			  <[_3080|Left1],[_13332|Left2]> when 'true' ->
			      let <_cor2> =
				  %% Line 2498
				  apply 't_sup'/2
				      (_3080, _13332)
			      in  let <_cor3> =
				      %% Line 2498
				      apply 't_sup_lists'/2
					  (Left1, Left2)
				  in  %% Line 2498
				      [_cor2|_cor3]
			  %% Line 2499
			  <[],[]> when 'true' ->
			      %% Line 2500
			      []
			  ( <_cor5,_cor4> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Elements1,Elements2})
			    -| ['compiler_generated'] )
			end
		    in  apply 't_tuple'/1
			    (_cor39)
		%% Line 2457
		<>
		    when call 'erlang':'=:='
			  (Tag2,
			   'any') ->
		    let <_cor40> =
			%% Line 2497
			case <Elements1,Elements2> of
			  <[_23030|Left1],[_1637|Left2]> when 'true' ->
			      let <_cor2> =
				  %% Line 2498
				  apply 't_sup'/2
				      (_23030, _1637)
			      in  let <_cor3> =
				      %% Line 2498
				      apply 't_sup_lists'/2
					  (Left1, Left2)
				  in  %% Line 2498
				      [_cor2|_cor3]
			  %% Line 2499
			  <[],[]> when 'true' ->
			      %% Line 2500
			      []
			  ( <_cor5,_cor4> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Elements1,Elements2})
			    -| ['compiler_generated'] )
			end
		    in  apply 't_tuple'/1
			    (_cor40)
		%% Line 2458
		<>
		    when call 'erlang':'<'
			  (Tag1,
			   Tag2) ->
		    {'c','tuple_set',[{Arity,[_cor1|[_cor0|[]]]}|[]],'unknown'}
		%% Line 2459
		<>
		    when call 'erlang':'>'
			  (Tag1,
			   Tag2) ->
		    {'c','tuple_set',[{Arity,[_cor0|[_cor1|[]]]}|[]],'unknown'}
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 2461
	  <T1 = {'c','tuple',_cor110,{Arity1,_cor111}},T2 = {'c','tuple',_cor112,{Arity2,_cor113}}> when 'true' ->
	      %% Line 2462
	      apply 'sup_tuple_sets'/2
		  ([{Arity1,[_cor1|[]]}|[]], [{Arity2,[_cor0|[]]}|[]])
	  %% Line 2463
	  <{'c','tuple_set',List1,_cor114},{'c','tuple_set',List2,_cor115}> when 'true' ->
	      %% Line 2464
	      apply 'sup_tuple_sets'/2
		  (List1, List2)
	  %% Line 2465
	  <{'c','tuple_set',List1,_cor116},T2 = {'c','tuple',_cor117,{Arity,_cor118}}> when 'true' ->
	      %% Line 2466
	      apply 'sup_tuple_sets'/2
		  (List1, [{Arity,[_cor0|[]]}|[]])
	  %% Line 2467
	  <T1 = {'c','tuple',_cor119,{Arity,_cor120}},{'c','tuple_set',List2,_cor121}> when 'true' ->
	      %% Line 2468
	      apply 'sup_tuple_sets'/2
		  ([{Arity,[_cor1|[]]}|[]], List2)
	  %% Line 2469
	  <T1,T2> when 'true' ->
	      let <_39127> =
		  %% Line 2470
		  apply 'force_union'/1
		      (_cor1)
	      in  %% Line 2470
		  case _39127 of
		    <{'c','union',U1 = [_cor122|[_cor123|[_cor124|[_cor125|[_cor126|[_cor127|[_cor128|[_cor129|[_cor130|[_cor131|[_cor132|[]]]]]]]]]]]],_cor133}> when 'true' ->
			let <_38413> =
			    %% Line 2471
			    apply 'force_union'/1
				(_cor0)
			in  %% Line 2471
			    case _38413 of
			      <{'c','union',U2 = [_cor134|[_cor135|[_cor136|[_cor137|[_cor138|[_cor139|[_cor140|[_cor141|[_cor142|[_cor143|[_cor144|[]]]]]]]]]]]],_cor145}> when 'true' ->
				  %% Line 2564
				  apply 'sup_union'/4
				      (U1, U2, 0, [])
			      ( <_cor42> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_38413})
				-| ['compiler_generated'] )
			    end
		    ( <_cor41> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_39127})
		      -| ['compiler_generated'] )
		  end
	end
'sup_opaque'/1 =
    %% Line 2474
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'none'
	  %% Line 2475
	  <List> when 'true' ->
	      let <L> =
		  %% Line 2476
		  apply 'sup_opaq'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 2477
		      call 'ordsets':'from_list'
			  (L)
		  in  %% Line 2477
		      {'c','opaque',_cor2,'unknown'}
	end
'sup_opaq'/1 =
    %% Line 2479
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 2480
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[T = %% Line 2481
				  {'opaque',Mod,Name,Args,_cor14}|_cor2]> when 'true' ->
				let <_cor4> =
				    %% Line 2481
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{{Mod,Name,Args},T}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 2481
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_24099> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[T = %% Line 2481
			  {'opaque',Mod,Name,Args,_cor14}|_cor2]> when 'true' ->
			let <_cor4> =
			    %% Line 2481
			    apply 'lc$^0'/1
				(_cor2)
			in  ( [{{Mod,Name,Args},T}|_cor4]
			      -| ['compiler_generated'] )
		    ( <[_cor1|_cor2]> when 'true' ->
			  %% Line 2481
			  apply 'lc$^0'/1
			      (_cor2)
		      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_24099> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <R> =
		%% Line 4896
		call 'sofs':'relation'
		    (_cor5)
	    in  let <F> =
		    %% Line 4897
		    call 'sofs':'relation_to_family'
			(R)
		in  let <F> =
			%% Line 4898
			call 'sofs':'to_external'
			    (F)
		    in  %% Line 2483
			( letrec
			      'lc$^1'/1 =
				  fun (_cor10) ->
				      case _cor10 of
					<[{_cor15,Ts}|_cor9]> when 'true' ->
					    let <_cor11> =
						%% Line 2485
						case Ts of
						  <[O|[]]> when 'true' ->
						      O
						  %% Line 2486
						  <_19970> when 'true' ->
						      apply 'supl'/2
							  (Ts, 'none')
						end
					    in  let <_cor12> =
						    apply 'lc$^1'/1
							(_cor9)
						in  ( [_cor11|_cor12]
						      -| ['compiler_generated'] )
					( <[_cor8|_cor9]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor9)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_40112> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor10})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (F)
			  -| ['list_comprehension'] )
'supl'/2 =
    %% Line 2488
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[O = {'opaque',_cor8,_cor9,_cor10,S}|L],S0> when 'true' ->
	      let <S1> =
		  %% Line 2489
		  apply 't_sup'/2
		      (S, _cor0)
	      in  %% Line 2490
		  case <> of
		    %% Line 2491
		    <>
			when call 'erlang':'=:='
			      (L,
			       []) ->
			call 'erlang':'setelement'
			    (5, O, S1)
		    %% Line 2492
		    <> when 'true' ->
			apply 'supl'/2
			    (L, S1)
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'supl',2}}] )
	    -| ['compiler_generated'] )
	end
't_sup_lists'/2 =
    %% Line 2497
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2]> when 'true' ->
	      let <_cor2> =
		  %% Line 2498
		  apply 't_sup'/2
		      (T1, T2)
	      in  let <_cor3> =
		      %% Line 2498
		      apply 't_sup_lists'/2
			  (Left1, Left2)
		  in  %% Line 2498
		      [_cor2|_cor3]
	  %% Line 2499
	  <[],[]> when 'true' ->
	      %% Line 2500
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_sup_lists',2}}] )
	    -| ['compiler_generated'] )
	end
'sup_tuple_sets'/2 =
    %% Line 2502
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 2503
	    ( letrec
		  'lc$^1'/1 =
		      fun (_cor9) ->
			  case _cor9 of
			    <[{Arity,_cor17}|_cor8]> when 'true' ->
				let <_cor10> =
				    apply 'lc$^1'/1
					(_cor8)
				in  ( [Arity|_cor10]
				      -| ['compiler_generated'] )
			    ( <[_cor7|_cor8]> when 'true' ->
				  apply 'lc$^1'/1
				      (_cor8)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_18227> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor9})
				    -| [{'function_name',{'lc$^1',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor1 of
		    <[{Arity,_cor17}|_cor8]> when 'true' ->
			let <_cor10> =
			    apply 'lc$^1'/1
				(_cor8)
			in  ( [Arity|_cor10]
			      -| ['compiler_generated'] )
		    ( <[_cor7|_cor8]> when 'true' ->
			  apply 'lc$^1'/1
			      (_cor8)
		      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_18227> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <_cor6> =
		%% Line 2504
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[{Arity,_cor18}|_cor3]> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [Arity|_cor5]
					  -| ['compiler_generated'] )
				( <[_cor2|_cor3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_25308> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  case _cor0 of
			<[{Arity,_cor18}|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor3)
			    in  ( [Arity|_cor5]
				  -| ['compiler_generated'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_25308> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor0})
			  -| ['compiler_generated'] )
		      end
		  -| ['list_comprehension'] )
	    in  let <TotalArities> =
		    %% Line 2503
		    call 'ordsets':'union'
			(_cor11, _cor6)
		in  %% Line 2505
		    case <> of
		      <>
			  when try
				let <_cor13> =
				    call 'erlang':'length'
					(TotalArities)
				in  call 'erlang':'>'
					(_cor13, 8)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  {'c','tuple','any',{'any','any'}}
		      %% Line 2506
		      <> when 'true' ->
			  let <_12680> =
			      %% Line 2507
			      apply 'sup_tuple_sets'/3
				  (_cor1, _cor0, [])
			  in  %% Line 2507
			      case _12680 of
				%% Line 2508
				<[{_X_Arity,[OneTuple = {'c','tuple',_cor19,{_cor20,_cor21}}|[]]}|[]]> when 'true' ->
				    OneTuple
				%% Line 2509
				<List> when 'true' ->
				    {'c','tuple_set',_12680,'unknown'}
			      end
		    end
'sup_tuple_sets'/3 =
    %% Line 2513
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Arity,Tuples1}|Left1],[{_cor8,Tuples2}|Left2],Acc>
	      when call 'erlang':'=:='
		    (_cor8,
		     Arity) ->
	      let <_cor3> =
		  %% Line 2514
		  apply 'sup_tuples_in_set'/2
		      (Tuples1, Tuples2)
	      in  let <NewAcc> =
		      %% Line 2514
		      [{Arity,_cor3}|_cor0]
		  in  %% Line 2515
		      apply 'sup_tuple_sets'/3
			  (Left1, Left2, NewAcc)
	  %% Line 2516
	  <L1 = [T1 = {Arity1,_cor9}|Left1],L2 = %% Line 2517
						 [T2 = {Arity2,_cor10}|Left2],Acc> when 'true' ->
	      %% Line 2518
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Arity1,
			   Arity2) ->
		    apply 'sup_tuple_sets'/3
			(Left1, _cor1, [T1|_cor0])
		%% Line 2519
		<>
		    when call 'erlang':'>'
			  (Arity1,
			   Arity2) ->
		    apply 'sup_tuple_sets'/3
			(_cor2, Left2, [T2|_cor0])
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 2521
	  <[],L2,Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0, _cor1)
	  %% Line 2522
	  <L1,[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0, _cor2)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sup_tuple_sets',3}}] )
	    -| ['compiler_generated'] )
	end
'sup_tuples_in_set'/2 =
    %% Line 2524
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T = {'c','tuple',_cor24,{_cor25,'any'}}|[]],L> when 'true' ->
	      let <_cor2> =
		  %% Line 2525
		  apply 'sup_tuple_elements'/1
		      ([T|_cor0])
	      in  let <_cor3> =
		      %% Line 2525
		      apply 't_tuple'/1
			  (_cor2)
		  in  %% Line 2525
		      [_cor3|[]]
	  %% Line 2526
	  <L,[T = {'c','tuple',_cor26,{_cor27,'any'}}|[]]> when 'true' ->
	      let <_cor4> =
		  %% Line 2527
		  apply 'sup_tuple_elements'/1
		      ([T|_cor1])
	      in  let <_cor5> =
		      %% Line 2527
		      apply 't_tuple'/1
			  (_cor4)
		  in  %% Line 2527
		      [_cor5|[]]
	  %% Line 2528
	  <L1,L2> when 'true' ->
	      let <FoldFun> =
		  %% Line 2529
		  fun (_cor7,_cor6) ->
		      case <_cor7,_cor6> of
			<{'c','tuple',_cor28,{_cor29,Tag}},AccTag> when 'true' ->
			    apply 't_sup'/2
				(Tag, _cor6)
			( <_cor9,_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor7,_cor6})
				-| [{'function_name',{'-sup_tuples_in_set/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <TotalTag0> =
		      %% Line 2530
		      call 'lists':'foldl'
			  (FoldFun, 'none', _cor1)
		  in  let <_29248> =
			  %% Line 2531
			  call 'lists':'foldl'
			      (FoldFun, TotalTag0, _cor0)
		      in  %% Line 2532
			  case _29248 of
			    %% Line 2533
			    <{'c','atom','any',_cor30}> when 'true' ->
				let <_cor13> =
				    %% Line 2535
				    call 'erlang':'++'
					(_cor1, _cor0)
				in  let <_cor14> =
					%% Line 2535
					apply 'sup_tuple_elements'/1
					    (_cor13)
				    in  let <_cor15> =
					    %% Line 2535
					    apply 't_tuple'/1
						(_cor14)
					in  %% Line 2535
					    [_cor15|[]]
			    %% Line 2536
			    <{'c','atom',Set,_cor31}> when 'true' ->
				let <_cor16> =
				    %% Line 4824
				    call 'ordsets':'size'
					(Set)
				in  %% Line 2537
				    case <> of
				      %% Line 2538
				      <>
					  when call 'erlang':'>'
						(_cor16,
						 5) ->
					  let <_cor17> =
					      %% Line 2540
					      call 'erlang':'++'
						  (_cor1, _cor0)
					  in  let <_cor18> =
						  %% Line 2540
						  apply 'sup_tuple_elements'/1
						      (_cor17)
					      in  let <_cor19> =
						      %% Line 2540
						      apply 't_tuple'/1
							  (_cor18)
						  in  %% Line 2540
						      [_cor19|[]]
				      %% Line 2541
				      <> when 'true' ->
					  %% Line 2543
					  apply 'sup_tuples_in_set'/3
					      (_cor1, _cor0, [])
				    end
			    ( <_cor21> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_29248})
			      -| ['compiler_generated'] )
			  end
	end
'sup_tuple_elements'/1 =
    %% Line 2547
    fun (_cor0) ->
	case _cor0 of
	  <[{'c','tuple',Elements,{_cor7,_cor8}}|L]> when 'true' ->
	      let <_cor5> =
		  %% Line 2548
		  fun (_cor2,_cor1) ->
		      case <_cor2,_cor1> of
			<{'c','tuple',Es,{_cor9,_cor10}},Acc> when 'true' ->
			    case <Es,_cor1> of
			      <[T1|Left1],[T2|Left2]> when 'true' ->
				  let <_3564> =
				      apply 't_sup'/2
					  (T1, T2)
				  in  let <_cor3> =
					  apply 't_sup_lists'/2
					      (Left1, Left2)
				      in  [_3564|_cor3]
			      <[],[]> when 'true' ->
				  []
			      ( <_cor5,_cor4> when 'true' ->
				    primop 'match_fail'
					({'function_clause',Es,_cor1})
				-| ['compiler_generated'] )
			    end
			( <_cor4,_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor2,_cor1})
				-| [{'function_name',{'-sup_tuple_elements/1-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 2548
		  call 'lists':'foldl'
		      (_cor5, Elements, L)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'sup_tuple_elements',1}}] )
	    -| ['compiler_generated'] )
	end
'sup_tuples_in_set'/3 =
    %% Line 2551
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L1 = [T1 = {'c','tuple',Elements1,{Arity,Tag1}}|Left1],L2 = %% Line 2552
								       [T2 = {'c','tuple',Elements2,{_cor8,Tag2}}|Left2],Acc>
	      when call 'erlang':'=:='
		    (_cor8,
		     Arity) ->
	      %% Line 2553
	      case <> of
		%% Line 2554
		<>
		    when call 'erlang':'<'
			  (Tag1,
			   Tag2) ->
		    apply 'sup_tuples_in_set'/3
			(Left1, _cor1, [T1|_cor0])
		%% Line 2555
		<>
		    when call 'erlang':'>'
			  (Tag1,
			   Tag2) ->
		    apply 'sup_tuples_in_set'/3
			(_cor2, Left2, [T2|_cor0])
		%% Line 2556
		<> when 'true' ->
		    let <NewElements> =
			case <Elements1,Elements2> of
			  <[_14304|_28235],[_20955|_5854]> when 'true' ->
			      let <_27280> =
				  apply 't_sup'/2
				      (_14304, _20955)
			      in  let <_cor3> =
				      apply 't_sup_lists'/2
					  (_28235, _5854)
				  in  [_27280|_cor3]
			  <[],[]> when 'true' ->
			      []
			  ( <_cor5,_cor4> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Elements1,Elements2})
			    -| ['compiler_generated'] )
			end
		    in  let <NewAcc> =
			    %% Line 2557
			    [{'c','tuple',NewElements,{Arity,Tag1}}|_cor0]
			in  %% Line 2558
			    apply 'sup_tuples_in_set'/3
				(Left1, Left2, NewAcc)
	      end
	  %% Line 2560
	  <[],L2,Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0, _cor1)
	  %% Line 2561
	  <L1,[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0, _cor2)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sup_tuples_in_set',3}}] )
	    -| ['compiler_generated'] )
	end
'sup_union'/4 =
    %% Line 2566
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <['none'|Left1],['none'|Left2],N,Acc> when 'true' ->
	      %% Line 2567
	      apply 'sup_union'/4
		  (Left1, Left2, _cor1, ['none'|_cor0])
	  %% Line 2568
	  <[T1|Left1],[T2|Left2],N,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2569
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  let <_cor4> =
		      %% Line 2569
		      apply 't_sup'/2
			  (T1, T2)
		  in  %% Line 2569
		      apply 'sup_union'/4
			  (Left1, Left2, _cor5, [_cor4|_cor0])
	  %% Line 2570
	  <[],[],N,Acc> when 'true' ->
	      %% Line 2571
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   0) ->
		    'none'
		%% Line 2572
		<>
		    when call 'erlang':'=:='
			  (_cor1,
			   1) ->
		    let <_cor10> =
			%% Line 2573
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[T|_cor7]>
					    when call 'erlang':'=/='
						  (T,
						   'none') ->
					    let <_cor9> =
						apply 'lc$^0'/1
						    (_cor7)
					    in  ( [T|_cor9]
						  -| ['compiler_generated'] )
					( <[T|_cor7]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor7)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_24508> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  case _cor0 of
				<[T|_cor7]>
				    when call 'erlang':'=/='
					  (T,
					   'none') ->
				    let <_cor9> =
					apply 'lc$^0'/1
					    (_cor7)
				    in  ( [T|_cor9]
					  -| ['compiler_generated'] )
				( <[T|_cor7]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor7)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_24508> when 'true' ->
				      primop 'match_fail'
					  ({'function_clause',_cor0})
				  -| ['compiler_generated'] )
			      end
			  -| ['list_comprehension'] )
		    in  %% Line 2573
			case _cor10 of
			  <[Type|[]]> when 'true' ->
			      Type
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		%% Line 2575
		<>
		    when try
			  let <_cor12> =
			      call 'erlang':'length'
				  (_cor0)
			  in  call 'erlang':'=:='
				  (_cor1, _cor12)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    'any'
		%% Line 2576
		<> when 'true' ->
		    let <_cor14> =
			call 'lists':'reverse'
			    (_cor0)
		    in  case _cor14 of
			  <[_cor19|[_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[]]]]]]]]]]]]> when 'true' ->
			      {'c','union',_cor14,'unknown'}
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor14})
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sup_union',4}}] )
	    -| ['compiler_generated'] )
	end
'force_union'/1 =
    %% Line 2579
    fun (_cor0) ->
	case _cor0 of
	  <T = {'c','atom',_cor28,_cor29}> when 'true' ->
	      let <_cor30> =
		  ( {'c','atom',_cor28,_cor29}
		    -| ['compiler_generated'] )
	      in  let <_cor2> =
		      ( [_cor30|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor2,'unknown'}
	  %% Line 2580
	  <T = {'c','binary',[_cor41|[_cor42|[]]],_cor43}> when 'true' ->
	      let <_fol259> =
		  ( [_cor42|[]]
		    -| ['compiler_generated'] )
	      in  let <_fol252> =
		      ( [_cor41|_fol259]
			-| ['compiler_generated'] )
		  in  let <_cor45> =
			  ( {'c','binary',_fol252,_cor43}
			    -| ['compiler_generated'] )
		      in  let <_cor4> =
			      ( ['none'|[_cor45|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
				-| ['compiler_generated'] )
			  in  {'c','union',_cor4,'unknown'}
	  %% Line 2581
	  <T = {'c','function',[_cor55|[_cor56|[]]],_cor57}> when 'true' ->
	      let <_fol302> =
		  ( [_cor56|[]]
		    -| ['compiler_generated'] )
	      in  let <_fol295> =
		      ( [_cor55|_fol302]
			-| ['compiler_generated'] )
		  in  let <_cor60> =
			  ( {'c','function',_fol295,_cor57}
			    -| ['compiler_generated'] )
		      in  let <_cor6> =
			      ( ['none'|['none'|[_cor60|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
				-| ['compiler_generated'] )
			  in  {'c','union',_cor6,'unknown'}
	  %% Line 2582
	  <T = {'c','identifier',_cor69,_cor70}> when 'true' ->
	      let <_cor74> =
		  ( {'c','identifier',_cor69,_cor70}
		    -| ['compiler_generated'] )
	      in  let <_cor8> =
		      ( ['none'|['none'|['none'|[_cor74|['none'|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor8,'unknown'}
	  %% Line 2583
	  <T = {'c','list',[_cor82|[_cor83|[]]],_cor84}> when 'true' ->
	      let <_fol379> =
		  ( [_cor83|[]]
		    -| ['compiler_generated'] )
	      in  let <_fol372> =
		      ( [_cor82|_fol379]
			-| ['compiler_generated'] )
		  in  let <_cor89> =
			  ( {'c','list',_fol372,_cor84}
			    -| ['compiler_generated'] )
		      in  let <_cor10> =
			      ( ['none'|['none'|['none'|['none'|[_cor89|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
				-| ['compiler_generated'] )
			  in  {'c','union',_cor10,'unknown'}
	  %% Line 2584
	  <T = {'c','nil',_cor96,_cor97}> when 'true' ->
	      let <_cor102> =
		  ( {'c','nil',_cor96,_cor97}
		    -| ['compiler_generated'] )
	      in  let <_cor12> =
		      ( ['none'|['none'|['none'|['none'|[_cor102|['none'|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor12,'unknown'}
	  %% Line 2585
	  <T = {'c','number',_cor109,_cor110}> when 'true' ->
	      let <_cor116> =
		  ( {'c','number',_cor109,_cor110}
		    -| ['compiler_generated'] )
	      in  let <_cor14> =
		      ( ['none'|['none'|['none'|['none'|['none'|[_cor116|['none'|['none'|['none'|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor14,'unknown'}
	  %% Line 2586
	  <T = {'c','opaque',_cor122,_cor123}> when 'true' ->
	      let <_cor132> =
		  ( {'c','opaque',_cor122,_cor123}
		    -| ['compiler_generated'] )
	      in  let <_cor16> =
		      ( ['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|[_cor132|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor16,'unknown'}
	  %% Line 2587
	  <T = {'c','remote',_cor135,_cor136}> when 'true' ->
	      let <_cor146> =
		  ( {'c','remote',_cor135,_cor136}
		    -| ['compiler_generated'] )
	      in  let <_cor18> =
		      ( ['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|[_cor146|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor18,'unknown'}
	  %% Line 2588
	  <T = {'c','map',_cor148,_cor149}> when 'true' ->
	      let <_cor160> =
		  ( {'c','map',_cor148,_cor149}
		    -| ['compiler_generated'] )
	      in  let <_cor20> =
		      ( ['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|['none'|[_cor160|[]]]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor20,'unknown'}
	  %% Line 2589
	  <T = {'c','tuple',_cor161,{_cor162,_cor163}}> when 'true' ->
	      let <_fol578> = {_cor162,_cor163}
	      in  let <_cor170> =
		      ( {'c','tuple',_cor161,_fol578}
			-| ['compiler_generated'] )
		  in  let <_cor22> =
			  ( ['none'|['none'|['none'|['none'|['none'|['none'|[_cor170|['none'|['none'|['none'|['none']]]]]]]]]]]
			    -| ['compiler_generated'] )
		      in  {'c','union',_cor22,'unknown'}
	  %% Line 2590
	  <T = {'c','tuple_set',_cor175,_cor176}> when 'true' ->
	      let <_cor183> =
		  ( {'c','tuple_set',_cor175,_cor176}
		    -| ['compiler_generated'] )
	      in  let <_cor24> =
		      ( ['none'|['none'|['none'|['none'|['none'|['none'|[_cor183|['none'|['none'|['none'|['none']]]]]]]]]]]
			-| ['compiler_generated'] )
		  in  {'c','union',_cor24,'unknown'}
	  %% Line 2591
	  <T = {'c','matchstate',[_cor188|[_cor189|[]]],_cor190}> when 'true' ->
	      let <_fol655> =
		  ( [_cor189|[]]
		    -| ['compiler_generated'] )
	      in  let <_fol648> =
		      ( [_cor188|_fol655]
			-| ['compiler_generated'] )
		  in  let <_cor198> =
			  ( {'c','matchstate',_fol648,_cor190}
			    -| ['compiler_generated'] )
		      in  let <_cor26> =
			      ( ['none'|['none'|['none'|['none'|['none'|['none'|['none'|[_cor198|['none'|['none'|['none']]]]]]]]]]]
				-| ['compiler_generated'] )
			  in  {'c','union',_cor26,'unknown'}
	  %% Line 2592
	  <T = {'c','union',_cor202 = [_cor203|[_cor204|[_cor205|[_cor206|[_cor207|[_cor208|[_cor209|[_cor210|[_cor211|[_cor212|[_cor213|[]]]]]]]]]]]],_cor214}> when 'true' ->
	      _cor0
	  ( <_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'force_union',1}}] )
	    -| ['compiler_generated'] )
	end
't_elements'/1 =
    %% Line 2600
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      []
	  %% Line 2601
	  <'unit'> when 'true' ->
	      []
	  %% Line 2602
	  <T = 'any'> when 'true' ->
	      [_cor0|[]]
	  %% Line 2603
	  <T = {'c','nil',_cor18,_cor19}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2604
	  <T = {'c','atom','any',_cor20}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2605
	  <{'c','atom',Atoms,_cor21}> when 'true' ->
	      %% Line 2606
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[A|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 't_atom'/1
					  (A)
				  in  let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor4|_cor5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_22993> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Atoms)
		-| ['list_comprehension'] )
	  %% Line 2607
	  <T = {'c','binary',[_cor22|[_cor23|[]]],_cor24}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2608
	  <T = {'c','function',[_cor25|[_cor26|[]]],_cor27}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2609
	  <T = {'c','identifier','any',_cor28}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2610
	  <{'c','identifier',IDs,_cor29}> when 'true' ->
	      %% Line 2611
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor8) ->
			    case _cor8 of
			      <[T|_cor7]> when 'true' ->
				  let <_cor9> =
				      apply 'lc$^1'/1
					  (_cor7)
				  in  ( [{'c','identifier',[T|[]],'unknown'}|_cor9]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_39324> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(IDs)
		-| ['list_comprehension'] )
	  %% Line 2612
	  <T = {'c','list',[_cor30|[_cor31|[]]],_cor32}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2613
	  <T = {'c','number',_cor33,_cor34}> when 'true' ->
	      %% Line 2614
	      case <_cor33,_cor34> of
		%% Line 2615
		<'any','unknown'> when 'true' ->
		    %% Line 2616
		    [{'c','number','any','float'}|[{'c','number','any','integer'}]]
		%% Line 2617
		<'any','float'> when 'true' ->
		    [_cor0|[]]
		%% Line 2618
		<'any','integer'> when 'true' ->
		    [_cor0|[]]
		%% Line 2619
		<{'int_rng',_cor35,_cor36},'integer'> when 'true' ->
		    [_cor0|[]]
		%% Line 2620
		<{'int_set',Set},'integer'> when 'true' ->
		    %% Line 2621
		    ( letrec
			  'lc$^2'/1 =
			      fun (_cor12) ->
				  case _cor12 of
				    <[I|_cor11]> when 'true' ->
					let <_cor13> =
					    apply 't_integer'/1
						(I)
					in  let <_cor14> =
						apply 'lc$^2'/1
						    (_cor11)
					    in  ( [_cor13|_cor14]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_6325> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12})
					    -| [{'function_name',{'lc$^2',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^2'/1
			      (Set)
		      -| ['list_comprehension'] )
		( <_fol673,_fol674> when 'true' ->
		      let <_cor15> =
			  ( {'c','number',_cor33,_cor34}
			    -| ['compiler_generated'] )
		      in  primop 'match_fail'
			      ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2623
	  <T = {'c','opaque',_cor37,_cor38}> when 'true' ->
	      %% Line 2624
	      apply 'do_elements'/1
		  (_cor0)
	  %% Line 2625
	  <T = {'c','map',_cor39,_cor40}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2626
	  <T = {'c','tuple',_cor41,{_cor42,_cor43}}> when 'true' ->
	      [_cor0|[]]
	  %% Line 2627
	  <TS = {'c','tuple_set',_cor44,_cor45}> when 'true' ->
	      let <_23597> =
		  %% Line 2628
		  apply 't_tuple_subtypes'/1
		      (_cor0)
	      in  %% Line 2628
		  case _23597 of
		    %% Line 2629
		    <'unknown'> when 'true' ->
			[]
		    %% Line 2630
		    <Elems> when 'true' ->
			_23597
		  end
	  %% Line 2632
	  <T = {'c','union',_cor46 = [_cor47|[_cor48|[_cor49|[_cor50|[_cor51|[_cor52|[_cor53|[_cor54|[_cor55|[_cor56|[_cor57|[]]]]]]]]]]]],_cor58}> when 'true' ->
	      %% Line 2633
	      apply 'do_elements'/1
		  (_cor0)
	  %% Line 2634
	  <{'c','var',_cor59,_cor60}> when 'true' ->
	      ['any']
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_elements',1}}] )
	    -| ['compiler_generated'] )
	end
'do_elements'/1 =
    %% Line 2638
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2639
	    fun (_cor1) ->
		_cor1
	in  let <_13749> =
		%% Line 2639
		apply 'do_opaque'/3
		    (_cor0, 'universe', _cor3)
	    in  %% Line 2639
		case _13749 of
		  %% Line 2640
		  <{'c','union',List = [_cor12|[_cor13|[_cor14|[_cor15|[_cor16|[_cor17|[_cor18|[_cor19|[_cor20|[_cor21|[_cor22|[]]]]]]]]]]]],_cor23}> when 'true' ->
		      let <_cor9> =
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[T|_cor5]> when 'true' ->
					      let <_cor7> =
						  apply 't_elements'/1
						      (T)
					      in  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [_cor7|_cor8]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_1086> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (List)
			    -| ['list_comprehension'] )
		      in  call 'lists':'append'
			      (_cor9)
		  %% Line 2641
		  <Type> when 'true' ->
		      apply 't_elements'/1
			  (_13749)
		end
't_inf'/1 =
    %% Line 2650
    fun (_cor0) ->
	case _cor0 of
	  <[H1|[H2|T]]> when 'true' ->
	      let <_28718> =
		  %% Line 2661
		  apply 't_inf'/3
		      (H1, H2, 'universe')
	      in  %% Line 2651
		  case _28718 of
		    %% Line 2652
		    <'none'> when 'true' ->
			'none'
		    %% Line 2653
		    <NewH> when 'true' ->
			apply 't_inf'/1
			    ([_28718|T])
		  end
	  %% Line 2655
	  <[H|[]]> when 'true' ->
	      H
	  %% Line 2656
	  <[]> when 'true' ->
	      'none'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_inf',1}}] )
	    -| ['compiler_generated'] )
	end
't_inf'/2 =
    %% Line 2660
    fun (_cor1,_cor0) ->
	%% Line 2661
	apply 't_inf'/3
	    (_cor1, _cor0, 'universe')
't_inf'/3 =
    %% Line 2669
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c','var',_cor53,_cor54},{'c','var',_cor55,_cor56},_X_Opaques> when 'true' ->
	      'any'
	  %% Line 2670
	  <{'c','var',_cor57,_cor58},T,_X_Opaques> when 'true' ->
	      apply 'subst_all_vars_to_any'/1
		  (_cor1)
	  %% Line 2671
	  <T,{'c','var',_cor59,_cor60},_X_Opaques> when 'true' ->
	      apply 'subst_all_vars_to_any'/1
		  (_cor2)
	  %% Line 2672
	  <'any',T,_X_Opaques> when 'true' ->
	      apply 'subst_all_vars_to_any'/1
		  (_cor1)
	  %% Line 2673
	  <T,'any',_X_Opaques> when 'true' ->
	      apply 'subst_all_vars_to_any'/1
		  (_cor2)
	  %% Line 2674
	  <'none',_cor61,_X_Opaques> when 'true' ->
	      'none'
	  %% Line 2675
	  <_cor62,'none',_X_Opaques> when 'true' ->
	      'none'
	  %% Line 2676
	  <'unit',_cor63,_X_Opaques> when 'true' ->
	      'unit'
	  %% Line 2677
	  <_cor64,'unit',_X_Opaques> when 'true' ->
	      'unit'
	  %% Line 2678
	  <T,_cor65,_X_Opaques>
	      when call 'erlang':'=:='
		    (_cor1,
		     _cor2) ->
	      apply 'subst_all_vars_to_any'/1
		  (_cor2)
	  %% Line 2679
	  <{'c','atom',Set1,_cor66},{'c','atom',Set2,_cor67},_cor68> when 'true' ->
	      let <_37099> =
		  %% Line 4792
		  case <Set1,Set2> of
		    <'any',S> when 'true' ->
			Set2
		    %% Line 4793
		    <S,'any'> when 'true' ->
			Set1
		    %% Line 4794
		    <S1,S2> when 'true' ->
			let <_32661> =
			    %% Line 4795
			    call 'ordsets':'intersection'
				(Set1, Set2)
			in  %% Line 4795
			    case _32661 of
			      %% Line 4796
			      <[]> when 'true' ->
				  'none'
			      %% Line 4797
			      <S> when 'true' ->
				  _32661
			    end
		  end
	      in  %% Line 2680
		  case _37099 of
		    %% Line 2681
		    <'none'> when 'true' ->
			'none'
		    %% Line 2682
		    <NewSet> when 'true' ->
			{'c','atom',_37099,'unknown'}
		  end
	  %% Line 2684
	  <{'c','binary',[U1|[B1|[]]],_cor69},{'c','binary',[0|[B2|[]]],_cor70},_X_Opaques> when 'true' ->
	      %% Line 2685
	      case <> of
		<>
		    when try
			  ( case <> of
			      ( <>
				    when call 'erlang':'>='
					  (B2,
					   B1) ->
				    let <_cor5> =
					call 'erlang':'-'
					    (B2, B1)
				    in  let <_cor6> =
					    call 'erlang':'rem'
						(_cor5, U1)
					in  call 'erlang':'=:='
						(_cor6, 0)
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    {'c','binary',[0|[B2|[]]],'unknown'}
		%% Line 2686
		<> when 'true' ->
		    'none'
	      end
	  %% Line 2688
	  <{'c','binary',[0|[B1|[]]],_cor71},{'c','binary',[U2|[B2|[]]],_cor72},_X_Opaques> when 'true' ->
	      %% Line 2689
	      case <> of
		<>
		    when try
			  ( case <> of
			      ( <>
				    when call 'erlang':'>='
					  (B1,
					   B2) ->
				    let <_cor10> =
					call 'erlang':'-'
					    (B1, B2)
				    in  let <_cor11> =
					    call 'erlang':'rem'
						(_cor10, U2)
					in  call 'erlang':'=:='
						(_cor11, 0)
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    {'c','binary',[0|[B1|[]]],'unknown'}
		%% Line 2690
		<> when 'true' ->
		    'none'
	      end
	  %% Line 2692
	  <{'c','binary',[U1|[B1|[]]],_cor73},{'c','binary',[_cor74|[_cor75|[]]],_cor76},_X_Opaques>
	      when let <_cor77> =
		    call 'erlang':'=:='
			(_cor74, U1)
		in  let <_cor78> =
			call 'erlang':'=:='
			    (_cor75, B1)
		    in  call 'erlang':'and'
			    (_cor77, _cor78) ->
	      %% Line 2693
	      apply 't_bitstr'/2
		  (U1, B1)
	  %% Line 2694
	  <{'c','binary',[U1|[B1|[]]],_cor79},{'c','binary',[U2|[B2|[]]],_cor80},_X_Opaques>
	      when call 'erlang':'>'
		    (U2,
		     U1) ->
	      %% Line 2695
	      apply 'inf_bitstr'/4
		  (U2, B2, U1, B1)
	  %% Line 2696
	  <{'c','binary',[U1|[B1|[]]],_cor81},{'c','binary',[U2|[B2|[]]],_cor82},_X_Opaques> when 'true' ->
	      %% Line 2697
	      apply 'inf_bitstr'/4
		  (U1, B1, U2, B2)
	  %% Line 2698
	  <{'c','function',[Domain1|[Range1|[]]],_cor83},{'c','function',[Domain2|[Range2|[]]],_cor84},Opaques> when 'true' ->
	      let <_7469> =
		  %% Line 2699
		  apply 't_inf'/3
		      (Domain1, Domain2, _cor0)
	      in  %% Line 2699
		  case _7469 of
		    %% Line 2700
		    <'none'> when 'true' ->
			'none'
		    %% Line 2701
		    <Domain> when 'true' ->
			let <_cor14> =
			    apply 't_inf'/3
				(Range1, Range2, _cor0)
			in  {'c','function',[_7469|[_cor14|[]]],'unknown'}
		  end
	  %% Line 2703
	  <{'c','identifier',Set1,_cor85},{'c','identifier',Set2,_cor86},_X_Opaques> when 'true' ->
	      let <_10178> =
		  %% Line 4792
		  case <Set1,Set2> of
		    <'any',S> when 'true' ->
			Set2
		    %% Line 4793
		    <S,'any'> when 'true' ->
			Set1
		    %% Line 4794
		    <S1,S2> when 'true' ->
			let <_32661> =
			    %% Line 4795
			    call 'ordsets':'intersection'
				(Set1, Set2)
			in  %% Line 4795
			    case _32661 of
			      %% Line 4796
			      <[]> when 'true' ->
				  'none'
			      %% Line 4797
			      <S> when 'true' ->
				  _32661
			    end
		  end
	      in  %% Line 2704
		  case _10178 of
		    %% Line 2705
		    <'none'> when 'true' ->
			'none'
		    %% Line 2706
		    <Set> when 'true' ->
			{'c','identifier',_10178,'unknown'}
		  end
	  %% Line 2708
	  <{'c','matchstate',[Pres1|[Slots1|[]]],_cor87},{'c','matchstate',[Pres2|[Slots2|[]]],_cor88},_X_Opaques> when 'true' ->
	      let <_cor17> =
		  %% Line 2709
		  apply 't_inf'/2
		      (Pres1, Pres2)
	      in  let <_cor18> =
		      %% Line 2709
		      apply 't_inf'/2
			  (Slots1, Slots2)
		  in  %% Line 2709
		      {'c','matchstate',[_cor17|[_cor18|[]]],'unknown'}
	  %% Line 2710
	  <{'c','nil',_cor89,_cor90},{'c','nil',_cor91,_cor92},_X_Opaques> when 'true' ->
	      {'c','nil',[],'unknown'}
	  %% Line 2711
	  <{'c','nil',_cor93,_cor94},{'c','list',[_cor95|[_cor96|[]]],'nonempty'},_X_Opaques> when 'true' ->
	      %% Line 2712
	      'none'
	  %% Line 2713
	  <{'c','list',[_cor97|[_cor98|[]]],'nonempty'},{'c','nil',_cor99,_cor100},_X_Opaques> when 'true' ->
	      %% Line 2714
	      'none'
	  %% Line 2715
	  <{'c','nil',_cor101,_cor102},{'c','list',[_X_Contents|[Termination|[]]],_cor103},Opaques> when 'true' ->
	      let <_cor19> =
		  %% Line 3748
		  apply 't_unopaque'/2
		      (Termination, 'universe')
	      in  %% Line 2716
		  apply 't_inf'/3
		      ({'c','nil',[],'unknown'}, _cor19, _cor0)
	  %% Line 2717
	  <{'c','list',[_X_Contents|[Termination|[]]],_cor104},{'c','nil',_cor105,_cor106},Opaques> when 'true' ->
	      let <_cor20> =
		  %% Line 3748
		  apply 't_unopaque'/2
		      (Termination, 'universe')
	      in  %% Line 2718
		  apply 't_inf'/3
		      ({'c','nil',[],'unknown'}, _cor20, _cor0)
	  %% Line 2719
	  <{'c','list',[Contents1|[Termination1|[]]],Size1},%% Line 2720
							    {'c','list',[Contents2|[Termination2|[]]],Size2},Opaques> when 'true' ->
	      let <_25980> =
		  %% Line 2721
		  apply 't_inf'/3
		      (Termination1, Termination2, _cor0)
	      in  %% Line 2721
		  case _25980 of
		    %% Line 2722
		    <'none'> when 'true' ->
			'none'
		    %% Line 2723
		    <Termination> when 'true' ->
			let <_20715> =
			    %% Line 2724
			    apply 't_inf'/3
				(Contents1, Contents2, _cor0)
			in  %% Line 2724
			    case _20715 of
			      %% Line 2725
			      <'none'> when 'true' ->
				  let <_cor23> =
				      %% Line 2727
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (Size1,
						       'unknown') ->
						call 'erlang':'=:='
						    (Size2, 'unknown')
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  %% Line 2727
				      case _cor23 of
					%% Line 2728
					<'true'> when 'true' ->
					    {'c','nil',[],'unknown'}
					%% Line 2729
					<'false'> when 'true' ->
					    'none'
					( <_cor24> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor23})
					  -| ['compiler_generated'] )
				      end
			      %% Line 2731
			      <Contents> when 'true' ->
				  let <_cor26> =
				      %% Line 2733
				      case <Size1,Size2> of
					%% Line 2734
					<'unknown','unknown'> when 'true' ->
					    'unknown'
					%% Line 2735
					<'unknown','nonempty'> when 'true' ->
					    'nonempty'
					%% Line 2736
					<'nonempty','unknown'> when 'true' ->
					    'nonempty'
					%% Line 2737
					<'nonempty','nonempty'> when 'true' ->
					    'nonempty'
					( <_fol679,_fol680> when 'true' ->
					      let <_cor25> = {Size1,Size2}
					      in  primop 'match_fail'
						      ({'case_clause',_cor25})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 2739
				      {'c','list',[_20715|[_25980|[]]],_cor26}
			    end
		  end
	  %% Line 2742
	  <T1 = {'c','number',_cor107,_cor108},T2 = {'c','number',_cor109,_cor110},_X_Opaques> when 'true' ->
	      %% Line 2743
	      case <_cor107,_cor108,_cor109,_cor110> of
		%% Line 2744
		<_fol685,_fol686,_fol697,_fol698>
		    when let <_cor111> =
			  ( {'c','number',_cor109,_cor110}
			    -| ['compiler_generated'] )
		      in  let <T> =
			      ( {'c','number',_cor107,_cor108}
				-| ['compiler_generated'] )
			  in  call 'erlang':'=:='
				  (_cor111, T) ->
		    ( {'c','number',_cor107,_cor108}
		      -| ['compiler_generated'] )
		%% Line 2745
		<_fol689,_fol690,'any','unknown'> when 'true' ->
		    _cor2
		%% Line 2746
		<'any','unknown',_fol701,_fol702> when 'true' ->
		    _cor1
		%% Line 2747
		<'any','float',_cor114,'integer'> when 'true' ->
		    'none'
		%% Line 2748
		<_cor115,'integer','any','float'> when 'true' ->
		    'none'
		%% Line 2749
		<'any','integer',_cor116,'integer'> when 'true' ->
		    _cor1
		%% Line 2750
		<_cor117,'integer','any','integer'> when 'true' ->
		    _cor2
		%% Line 2751
		<{'int_set',Set1},'integer',{'int_set',Set2},'integer'> when 'true' ->
		    let <_26002> =
			%% Line 4792
			case <Set1,Set2> of
			  <'any',S> when 'true' ->
			      Set2
			  %% Line 4793
			  <S,'any'> when 'true' ->
			      Set1
			  %% Line 4794
			  <S1,S2> when 'true' ->
			      let <_32661> =
				  %% Line 4795
				  call 'ordsets':'intersection'
				      (Set1, Set2)
			      in  %% Line 4795
				  case _32661 of
				    %% Line 4796
				    <[]> when 'true' ->
					'none'
				    %% Line 4797
				    <S> when 'true' ->
					_32661
				  end
			end
		    in  %% Line 2752
			case _26002 of
			  %% Line 2753
			  <'none'> when 'true' ->
			      'none'
			  %% Line 2754
			  <Set> when 'true' ->
			      {'c','number',{'int_set',_26002},'integer'}
			end
		%% Line 2756
		<{'int_rng',From1,To1},'integer',{'int_rng',From2,To2},'integer'> when 'true' ->
		    let <_cor32> =
			case <From1,From2> of
			  <'neg_inf',Y> when 'true' ->
			      From2
			  <X,'neg_inf'> when 'true' ->
			      From1
			  <'pos_inf',_cor4> when 'true' ->
			      'pos_inf'
			  <_cor5,'pos_inf'> when 'true' ->
			      'pos_inf'
			  <X,Y>
			      when call 'erlang':'=<'
				    (From1,
				     From2) ->
			      From2
			  <X,_cor6> when 'true' ->
			      From1
			end
		    in  let <_cor31> =
			    case <To1,To2> of
			      <'neg_inf',_cor4> when 'true' ->
				  'neg_inf'
			      <_cor5,'neg_inf'> when 'true' ->
				  'neg_inf'
			      <'pos_inf',Y> when 'true' ->
				  To2
			      <X,'pos_inf'> when 'true' ->
				  To1
			      <X,Y>
				  when call 'erlang':'=<'
					(To1,
					 To2) ->
				  To1
			      <_cor6,Y> when 'true' ->
				  To2
			    end
			in  %% Line 2757
			    apply 't_from_range'/2
				(_cor32, _cor31)
		%% Line 2758
		<{'int_rng',_cor118,_cor119},'integer',{'int_set',Set},'integer'> when 'true' ->
		    let <Range> =
			( {'c','number',{'int_rng',_cor118,_cor119},'integer'}
			  -| ['compiler_generated'] )
		    in  let <_cor35> =
			    %% Line 2761
			    fun (_cor33) ->
				apply 'in_range'/2
				    (_cor33, Range)
			in  let <_11577> =
				%% Line 4818
				call 'ordsets':'filter'
				    (_cor35, Set)
			    in  let <_8908> =
				    %% Line 4818
				    case _11577 of
				      %% Line 4819
				      <[]> when 'true' ->
					  'none'
				      %% Line 4820
				      <NewSet> when 'true' ->
					  _11577
				    end
				in  %% Line 2761
				    case _8908 of
				      %% Line 2762
				      <'none'> when 'true' ->
					  'none'
				      %% Line 2763
				      <NewSet> when 'true' ->
					  {'c','number',{'int_set',_8908},'integer'}
				    end
		%% Line 2767
		<{'int_set',Set},'integer',{'int_rng',_cor120,_cor121},'integer'> when 'true' ->
		    let <Range> =
			( {'c','number',{'int_rng',_cor120,_cor121},'integer'}
			  -| ['compiler_generated'] )
		    in  let <_cor41> =
			    %% Line 2768
			    fun (_cor39) ->
				apply 'in_range'/2
				    (_cor39, Range)
			in  let <_11577> =
				%% Line 4818
				call 'ordsets':'filter'
				    (_cor41, Set)
			    in  let <_9600> =
				    %% Line 4818
				    case _11577 of
				      %% Line 4819
				      <[]> when 'true' ->
					  'none'
				      %% Line 4820
				      <NewSet> when 'true' ->
					  _11577
				    end
				in  %% Line 2768
				    case _9600 of
				      %% Line 2769
				      <'none'> when 'true' ->
					  'none'
				      %% Line 2770
				      <NewSet> when 'true' ->
					  {'c','number',{'int_set',_9600},'integer'}
				    end
		( <_fol693,_fol694,_fol705,_fol706> when 'true' ->
		      let <_fol682> =
			  ( {'c','number',_cor109,_cor110}
			    -| ['compiler_generated'] )
		      in  let <_fol681> =
			      ( {'c','number',_cor107,_cor108}
				-| ['compiler_generated'] )
			  in  let <_cor43> = {_fol681,_fol682}
			      in  primop 'match_fail'
				      ({'case_clause',_cor43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2773
	  <{'c','product',Types1,_cor122},{'c','product',Types2,_cor123},Opaques> when 'true' ->
	      let <L1> =
		  %% Line 2774
		  call 'erlang':'length'
		      (Types1)
	      in  let <L2> =
		      %% Line 2775
		      call 'erlang':'length'
			  (Types2)
		  in  %% Line 2776
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (L1,
				   L2) ->
			    let <_cor46> =
				%% Line 2917
				apply 't_inf_lists'/4
				    (Types1, Types2, [], _cor0)
			    in  {'c','product',_cor46,'unknown'}
			%% Line 2777
			<> when 'true' ->
			    'none'
		      end
	  %% Line 2779
	  <{'c','product',_cor124,_cor125},_cor126,_X_Opaques> when 'true' ->
	      %% Line 2780
	      'none'
	  %% Line 2781
	  <_cor127,{'c','product',_cor128,_cor129},_X_Opaques> when 'true' ->
	      %% Line 2782
	      'none'
	  %% Line 2783
	  <{'c','tuple','any',{'any','any'}},T = {'c','tuple',_cor130,{_cor131,_cor132}},_X_Opaques> when 'true' ->
	      %% Line 2784
	      apply 'subst_all_vars_to_any'/1
		  (_cor1)
	  %% Line 2785
	  <T = {'c','tuple',_cor133,{_cor134,_cor135}},{'c','tuple','any',{'any','any'}},_X_Opaques> when 'true' ->
	      %% Line 2786
	      apply 'subst_all_vars_to_any'/1
		  (_cor2)
	  %% Line 2787
	  <{'c','tuple','any',{'any','any'}},T = {'c','tuple_set',_cor136,_cor137},_X_Opaques> when 'true' ->
	      %% Line 2788
	      apply 'subst_all_vars_to_any'/1
		  (_cor1)
	  %% Line 2789
	  <T = {'c','tuple_set',_cor138,_cor139},{'c','tuple','any',{'any','any'}},_X_Opaques> when 'true' ->
	      %% Line 2790
	      apply 'subst_all_vars_to_any'/1
		  (_cor2)
	  %% Line 2791
	  <{'c','tuple',Elements1,{Arity,_X_Tag1}},{'c','tuple',Elements2,{_cor140,_X_Tag2}},Opaques>
	      when call 'erlang':'=:='
		    (_cor140,
		     Arity) ->
	      let <_8128> =
		  %% Line 2932
		  apply 't_inf_lists_strict'/4
		      (Elements1, Elements2, [], _cor0)
	      in  %% Line 2792
		  case _8128 of
		    %% Line 2793
		    <'bottom'> when 'true' ->
			'none'
		    %% Line 2794
		    <NewElements> when 'true' ->
			apply 't_tuple'/1
			    (_8128)
		  end
	  %% Line 2796
	  <{'c','tuple_set',List1,_cor141},{'c','tuple_set',List2,_cor142},Opaques> when 'true' ->
	      %% Line 2797
	      apply 'inf_tuple_sets'/3
		  (List1, List2, _cor0)
	  %% Line 2798
	  <{'c','tuple_set',List,_cor143},T = {'c','tuple',_cor144,{Arity,_cor145}},Opaques> when 'true' ->
	      %% Line 2799
	      apply 'inf_tuple_sets'/3
		  (List, [{Arity,[_cor1|[]]}|[]], _cor0)
	  %% Line 2800
	  <T = {'c','tuple',_cor146,{Arity,_cor147}},{'c','tuple_set',List,_cor148},Opaques> when 'true' ->
	      %% Line 2801
	      apply 'inf_tuple_sets'/3
		  (List, [{Arity,[_cor2|[]]}|[]], _cor0)
	  %% Line 2803
	  <{'c','union',U1 = [_cor149|[_cor150|[_cor151|[_cor152|[_cor153|[_cor154|[_cor155|[_cor156|[_cor157|[_cor158|[_cor159|[]]]]]]]]]]]],_cor160},T,Opaques> when 'true' ->
	      let <_7969> =
		  %% Line 2804
		  apply 'force_union'/1
		      (_cor1)
	      in  %% Line 2804
		  case _7969 of
		    <{'c','union',U2 = [_cor161|[_cor162|[_cor163|[_cor164|[_cor165|[_cor166|[_cor167|[_cor168|[_cor169|[_cor170|[_cor171|[]]]]]]]]]]]],_cor172}> when 'true' ->
			%% Line 2805
			apply 'inf_union'/3
			    (U1, U2, _cor0)
		    ( <_cor48> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7969})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2806
	  <T,{'c','union',U2 = [_cor173|[_cor174|[_cor175|[_cor176|[_cor177|[_cor178|[_cor179|[_cor180|[_cor181|[_cor182|[_cor183|[]]]]]]]]]]]],_cor184},Opaques> when 'true' ->
	      let <_7945> =
		  %% Line 2807
		  apply 'force_union'/1
		      (_cor2)
	      in  %% Line 2807
		  case _7945 of
		    <{'c','union',U1 = [_cor185|[_cor186|[_cor187|[_cor188|[_cor189|[_cor190|[_cor191|[_cor192|[_cor193|[_cor194|[_cor195|[]]]]]]]]]]]],_cor196}> when 'true' ->
			%% Line 2808
			apply 'inf_union'/3
			    (U1, U2, _cor0)
		    ( <_cor49> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7945})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2809
	  <{'c','opaque',Set1,_cor197},{'c','opaque',Set2,_cor198},Opaques> when 'true' ->
	      %% Line 2810
	      apply 'inf_opaque'/3
		  (Set1, Set2, _cor0)
	  %% Line 2811
	  <T1 = {'c','opaque',_cor199,_cor200},T2,Opaques> when 'true' ->
	      %% Line 2812
	      apply 'inf_opaque1'/4
		  (_cor1, _cor2, 1, _cor0)
	  %% Line 2813
	  <T1,T2 = {'c','opaque',_cor201,_cor202},Opaques> when 'true' ->
	      %% Line 2814
	      apply 'inf_opaque1'/4
		  (_cor2, _cor1, 2, _cor0)
	  %% Line 2816
	  <{'c',_cor203,_cor204,_cor205},{'c',_cor206,_cor207,_cor208},_cor209> when 'true' ->
	      %% Line 2817
	      'none'
	  ( <_cor52,_cor51,_cor50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_inf',3}}] )
	    -| ['compiler_generated'] )
	end
'inf_opaque1'/4 =
    %% Line 2819
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,T2 = {'c','opaque',Set2,_cor15},Pos,Opaques> when 'true' ->
	      let <_cor6> =
		  %% Line 2820
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (_cor0,
				   'universe') ->
			    'true'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    apply 'inf_is_opaque_type'/3
				(_cor2, _cor1, _cor0)
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 2820
		  case _cor6 of
		    %% Line 2821
		    <'false'> when 'true' ->
			'none'
		    %% Line 2822
		    <'true'> when 'true' ->
			let <List2> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set2)
			in  let <_6665> =
				%% Line 2824
				apply 'inf_collect'/4
				    (_cor3, List2, _cor0, [])
			    in  %% Line 2824
				case _6665 of
				  %% Line 2825
				  <[]> when 'true' ->
				      'none'
				  %% Line 2826
				  <OpL> when 'true' ->
				      let <_cor8> =
					  call 'ordsets':'from_list'
					      (_6665)
				      in  {'c','opaque',_cor8,'unknown'}
				end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_opaque1',4}}] )
	    -| ['compiler_generated'] )
	end
'inf_is_opaque_type'/3 =
    %% Line 2830
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T,Pos,{'match',Opaques}> when 'true' ->
	      let <_19430> =
		  %% Line 2831
		  apply 'is_opaque_type'/2
		      (_cor2, Opaques)
	      in  %% Line 2831
		  ( case _19430 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'throw'
				(_cor1)
			-| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_19430}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2832
	  <T,_X_Pos,Opaques> when 'true' ->
	      %% Line 2833
	      apply 'is_opaque_type'/2
		  (_cor2, _cor0)
	end
'inf_collect'/4 =
    %% Line 2835
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T1,[T2|List2],Opaques,OpL> when 'true' ->
	      %% Line 2836
	      case T2 of
		<{'opaque',_cor14,_cor15,_cor16,S2}> when 'true' ->
		    let <_39449> =
			%% Line 2837
			apply 't_inf'/3
			    (_cor3, S2, _cor1)
		    in  %% Line 2837
			case _39449 of
			  %% Line 2838
			  <'none'> when 'true' ->
			      apply 'inf_collect'/4
				  (_cor3, List2, _cor1, _cor0)
			  %% Line 2839
			  <Inf> when 'true' ->
			      let <_cor7> =
				  %% Line 2840
				  call 'erlang':'setelement'
				      (5, T2, _39449)
			      in  %% Line 2841
				  apply 'inf_collect'/4
				      (_cor3, List2, _cor1, [_cor7|_cor0])
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',T2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2843
	  <_X_T1,[],_X_Opaques,OpL> when 'true' ->
	      _cor0
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_collect',4}}] )
	    -| ['compiler_generated'] )
	end
'combine'/3 =
    %% Line 2846
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2847
	case _cor1 of
	  <{'opaque',Mod1,Name1,Args1,_cor12}> when 'true' ->
	      %% Line 2848
	      case _cor0 of
		<{'opaque',Mod2,Name2,Args2,_cor13}> when 'true' ->
		    let <_24211> =
			%% Line 2849
			apply 'is_same_type_name'/2
			    ({Mod1,Name1,Args1}, {Mod2,Name2,Args2})
		    in  %% Line 2849
			case _24211 of
			  %% Line 2850
			  <'true'> when 'true' ->
			      let <_cor5> =
				  apply 'comb'/5
				      (Mod1, Name1, Args1, _cor2, _cor1)
			      in  [_cor5|[]]
			  %% Line 2851
			  <'false'> when 'true' ->
			      let <_cor6> =
				  apply 'comb'/5
				      (Mod1, Name1, Args1, _cor2, _cor1)
			      in  let <_cor7> =
				      apply 'comb'/5
					  (Mod2, Name2, Args2, _cor2, _cor0)
				  in  [_cor6|[_cor7|[]]]
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_24211})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'comb'/5 =
    %% Line 2854
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_15508> =
	    %% Line 2855
	    apply 'is_same_name'/4
		(_cor4, _cor3, _cor2, _cor1)
	in  %% Line 2855
	    case _15508 of
	      %% Line 2856
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 2857
	      <'false'> when 'true' ->
		  case _cor0 of
		    <{'opaque',_cor13,_cor14,_cor15,_cor16}> when 'true' ->
			call 'erlang':'setelement'
			    (5, _cor0, _cor1)
		    ( <_cor17> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opaque'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_15508})
		-| ['compiler_generated'] )
	    end
'is_same_name'/4 =
    %% Line 2860
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod1,Name1,Args1,%% Line 2861
			    {'c','opaque',[{'opaque',Mod2,Name2,Args2,_cor8}|[]],_cor9}> when 'true' ->
	      %% Line 2862
	      apply 'is_same_type_name'/2
		  ({_cor3,_cor2,_cor1}, {Mod2,Name2,Args2})
	  %% Line 2863
	  <_cor10,_cor11,_cor12,_cor13> when 'true' ->
	      'false'
	end
'inf_opaque'/3 =
    %% Line 2868
    fun (_cor2,_cor1,_cor0) ->
	let <List1> =
	    %% Line 2869
	    apply 'inf_look_up'/3
		(_cor2, 1, _cor0)
	in  let <List2> =
		%% Line 2870
		apply 'inf_look_up'/3
		    (_cor1, 2, _cor0)
	    in  let <_cor17> =
		    %% Line 2871
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor12) ->
				  case _cor12 of
				    <[%% Line 2872
				      {Is1,ModNameArgs1,T1}|_cor6]> when 'true' ->
					( letrec
					      'lc$^1'/1 =
						  fun (_cor13) ->
						      case _cor13 of
							<[%% Line 2873
							  {Is2,ModNameArgs2,T2}|_cor8]> when 'true' ->
							    let <_cor10> =
								%% Line 2874
								apply 'inf_opaque_types'/7
								    (Is1, ModNameArgs1, T1, Is2, ModNameArgs2, T2, _cor0)
							    in  let <_19385> =
								    case _cor10 of
								      <'none'> when 'true' ->
									  'true'
								      <_7487> when 'true' ->
									  'false'
								    end
								in  %% Line 2874
								    ( case _19385 of
									<'false'> when 'true' ->
									    let <_cor14> =
										apply 'combine'/3
										    (_cor10, T1, T2)
									    in  let <_cor15> =
										    apply 'lc$^1'/1
											(_cor8)
										in  ( [_cor14|_cor15]
										      -| ['compiler_generated'] )
									( <'true'> when 'true' ->
									      apply 'lc$^1'/1
										  (_cor8)
									  -| ['compiler_generated'] )
									( <_cor_variable> when 'true' ->
									      call 'erlang':'error'
										  ('badarg')
									  -| ['compiler_generated'] )
								      end
								      -| ['list_comprehension'] )
							( <[_cor7|_cor8]> when 'true' ->
							      %% Line 2873
							      apply 'lc$^1'/1
								  (_cor8)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    %% Line 2872
							    apply 'lc$^0'/1
								(_cor6)
							( <_13843> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor13})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (List2)
					  -| ['list_comprehension'] )
				    ( <[_cor5|_cor6]> when 'true' ->
					  %% Line 2872
					  apply 'lc$^0'/1
					      (_cor6)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_22925> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (List1)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 2877
			call 'lists':'append'
			    (_cor17)
		    in  let <List> =
			    %% Line 2877
			    call 'lists':'sort'
				(_cor19)
			in  %% Line 2878
			    apply 'sup_opaque'/1
				(List)
'inf_look_up'/3 =
    %% Line 2881
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2882
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[T = %% Line 2884
			      {'opaque',M,N,Args,_cor14}|_cor4]> when 'true' ->
			    let <_cor9> =
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(_cor0,
						 'universe') ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  apply 'inf_is_opaque_type2'/3
					      (T, _cor1, _cor0)
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  let <_cor10> =
				    %% Line 2884
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [{_cor9,%% Line 2883
					      {M,N,Args},T}|_cor10]
				      -| ['compiler_generated'] )
			( <[_cor3|_cor4]> when 'true' ->
			      %% Line 2884
			      apply 'lc$^0'/1
				  (_cor4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_23315> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor5> =
		  %% Line 4815
		  call 'ordsets':'to_list'
		      (_cor2)
	      in  apply 'lc$^0'/1
		      (_cor5)
	  -| ['list_comprehension'] )
'inf_is_opaque_type2'/3 =
    %% Line 2886
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T,Pos,{'match',Opaques}> when 'true' ->
	      let <_16634> =
		  %% Line 2887
		  apply 'is_opaque_type2'/2
		      (_cor2, Opaques)
	      in  %% Line 2887
		  ( case _16634 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'throw'
				(_cor1)
			-| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_16634}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2888
	  <T,_X_Pos,Opaques> when 'true' ->
	      %% Line 2889
	      apply 'is_opaque_type2'/2
		  (_cor2, _cor0)
	end
'inf_opaque_types'/7 =
    %% Line 2891
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2893
	case _cor4 of
	  <{'opaque',_cor23,_cor24,_cor25,S1}> when 'true' ->
	      %% Line 2894
	      case _cor1 of
		<{'opaque',_cor26,_cor27,_cor28,S2}> when 'true' ->
		    let <_cor11> =
			%% Line 2896
			( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(_cor0,
					 'universe') ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  %% Line 2897
				  apply 'is_same_type_name'/2
				      (_cor5, _cor2)
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 2895
			case _cor11 of
			  %% Line 2899
			  <'true'> when 'true' ->
			      apply 't_inf'/3
				  (S1, S2, _cor0)
			  %% Line 2900
			  <'false'> when 'true' ->
			      %% Line 2901
			      case <_cor6,_cor3> of
				%% Line 2902
				<'true','true'> when 'true' ->
				    apply 't_inf'/3
					(S1, S2, _cor0)
				%% Line 2903
				<'true','false'> when 'true' ->
				    let <_cor12> =
					%% Line 4768
					call 'ordsets':'from_list'
					    ([_cor1|[]])
				    in  apply 't_inf'/3
					    (S1, {'c','opaque',_cor12,'unknown'}, _cor0)
				%% Line 2904
				<'false','true'> when 'true' ->
				    let <_cor13> =
					%% Line 4768
					call 'ordsets':'from_list'
					    ([_cor4|[]])
				    in  apply 't_inf'/3
					    ({'c','opaque',_cor13,'unknown'}, S2, _cor0)
				%% Line 2905
				<'false','false'> when 'true' ->
				    'none'
				( <_fol732,_fol733> when 'true' ->
				      let <_cor14> = {_cor6,_cor3}
				      in  primop 'match_fail'
					      ({'case_clause',_cor14})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
't_inf_lists'/2 =
    %% Line 2911
    fun (_cor1,_cor0) ->
	%% Line 2912
	apply 't_inf_lists'/3
	    (_cor1, _cor0, 'universe')
't_inf_lists'/3 =
    %% Line 2916
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2917
	apply 't_inf_lists'/4
	    (_cor2, _cor1, [], _cor0)
't_inf_lists'/4 =
    %% Line 2921
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],Acc,Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 2922
		  apply 't_inf'/3
		      (T1, T2, _cor0)
	      in  %% Line 2922
		  apply 't_inf_lists'/4
		      (Left1, Left2, [_cor4|_cor1], _cor0)
	  %% Line 2923
	  <[],[],Acc,_X_Opaques> when 'true' ->
	      %% Line 2924
	      call 'lists':'reverse'
		  (_cor1)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_inf_lists',4}}] )
	    -| ['compiler_generated'] )
	end
't_inf_lists_strict'/4 =
    %% Line 2936
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],Acc,Opaques> when 'true' ->
	      let <_29228> =
		  %% Line 2937
		  apply 't_inf'/3
		      (T1, T2, _cor0)
	      in  %% Line 2937
		  case _29228 of
		    %% Line 2938
		    <'none'> when 'true' ->
			'bottom'
		    %% Line 2939
		    <T> when 'true' ->
			apply 't_inf_lists_strict'/4
			    (Left1, Left2, [_29228|_cor1], _cor0)
		  end
	  %% Line 2941
	  <[],[],Acc,_X_Opaques> when 'true' ->
	      %% Line 2942
	      call 'lists':'reverse'
		  (_cor1)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_inf_lists_strict',4}}] )
	    -| ['compiler_generated'] )
	end
'inf_tuple_sets'/3 =
    %% Line 2944
    fun (_cor2,_cor1,_cor0) ->
	let <_31351> =
	    %% Line 2945
	    apply 'inf_tuple_sets'/4
		(_cor2, _cor1, [], _cor0)
	in  %% Line 2945
	    case _31351 of
	      %% Line 2946
	      <[]> when 'true' ->
		  'none'
	      %% Line 2947
	      <[{_X_Arity,[OneTuple = {'c','tuple',_cor7,{_cor8,_cor9}}|[]]}|[]]> when 'true' ->
		  OneTuple
	      %% Line 2948
	      <List> when 'true' ->
		  {'c','tuple_set',_31351,'unknown'}
	    end
'inf_tuple_sets'/4 =
    %% Line 2951
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Arity,Tuples1}|Ts1],[{_cor9,Tuples2}|Ts2],Acc,Opaques>
	      when call 'erlang':'=:='
		    (_cor9,
		     Arity) ->
	      let <_15062> =
		  %% Line 2952
		  apply 'inf_tuples_in_sets'/3
		      (Tuples1, Tuples2, _cor0)
	      in  %% Line 2952
		  case _15062 of
		    %% Line 2953
		    <[]> when 'true' ->
			apply 'inf_tuple_sets'/4
			    (Ts1, Ts2, _cor1, _cor0)
		    %% Line 2954
		    <[{'c','tuple_set',[{_cor10,NewTuples}|[]],_cor11}|[]]>
			when call 'erlang':'=:='
			      (_cor10,
			       Arity) ->
			%% Line 2955
			apply 'inf_tuple_sets'/4
			    (Ts1, Ts2, [{Arity,NewTuples}|_cor1], _cor0)
		    %% Line 2956
		    <NewTuples> when 'true' ->
			apply 'inf_tuple_sets'/4
			    (Ts1, Ts2, [{Arity,_15062}|_cor1], _cor0)
		  end
	  %% Line 2958
	  <L1 = [{Arity1,_cor12}|Ts1],L2 = [{Arity2,_cor13}|Ts2],Acc,Opaques> when 'true' ->
	      %% Line 2959
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Arity1,
			   Arity2) ->
		    apply 'inf_tuple_sets'/4
			(Ts1, _cor2, _cor1, _cor0)
		%% Line 2960
		<>
		    when call 'erlang':'>'
			  (Arity1,
			   Arity2) ->
		    apply 'inf_tuple_sets'/4
			(_cor3, Ts2, _cor1, _cor0)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 2962
	  <[],_cor14,Acc,_X_Opaques> when 'true' ->
	      call 'lists':'reverse'
		  (_cor1)
	  %% Line 2963
	  <_cor15,[],Acc,_X_Opaques> when 'true' ->
	      call 'lists':'reverse'
		  (_cor1)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_tuple_sets',4}}] )
	    -| ['compiler_generated'] )
	end
'inf_tuples_in_sets'/3 =
    %% Line 2965
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'c','tuple',Elements1,{_cor30,'any'}}|[]],L2,Opaques> when 'true' ->
	      let <_cor8> =
		  %% Line 2966
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[%% Line 2967
				    {'c','tuple',Elements2,{_cor31,_cor32}}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 't_inf_lists_strict'/4
					      (Elements1, Elements2, [], _cor0)
				      in  let <_cor7> =
					      %% Line 2967
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					%% Line 2967
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_24942> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      in  %% Line 2968
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor12) ->
				case _cor12 of
				  <[Es|_cor11]>
				      when call 'erlang':'=/='
					    (Es,
					     'bottom') ->
				      let <_cor13> =
					  apply 't_tuple'/1
					      (Es)
				      in  let <_cor14> =
					      apply 'lc$^1'/1
						  (_cor11)
					  in  ( [_cor13|_cor14]
						-| ['compiler_generated'] )
				  ( <[Es|_cor11]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor11)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_23926> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor12})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case _cor8 of
			  <[Es|_cor11]>
			      when call 'erlang':'=/='
				    (Es,
				     'bottom') ->
			      let <_cor13> =
				  apply 't_tuple'/1
				      (Es)
			      in  let <_cor14> =
				      apply 'lc$^1'/1
					  (_cor11)
				  in  ( [_cor13|_cor14]
					-| ['compiler_generated'] )
			  ( <[Es|_cor11]> when 'true' ->
				apply 'lc$^1'/1
				    (_cor11)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_23926> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	  %% Line 2969
	  <L1,[{'c','tuple',Elements2,{_cor33,'any'}}|[]],Opaques> when 'true' ->
	      let <_cor20> =
		  %% Line 2970
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor17) ->
				case _cor17 of
				  <[%% Line 2971
				    {'c','tuple',Elements1,{_cor34,_cor35}}|_cor16]> when 'true' ->
				      let <_cor18> =
					  apply 't_inf_lists_strict'/4
					      (Elements1, Elements2, [], _cor0)
				      in  let <_cor19> =
					      %% Line 2971
					      apply 'lc$^2'/1
						  (_cor16)
					  in  ( [_cor18|_cor19]
						-| ['compiler_generated'] )
				  ( <[_cor15|_cor16]> when 'true' ->
					%% Line 2971
					apply 'lc$^2'/1
					    (_cor16)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_37898> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor17})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (_cor2)
		    -| ['list_comprehension'] )
	      in  %% Line 2972
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor24) ->
				case _cor24 of
				  <[Es|_cor23]>
				      when call 'erlang':'=/='
					    (Es,
					     'bottom') ->
				      let <_cor25> =
					  apply 't_tuple'/1
					      (Es)
				      in  let <_cor26> =
					      apply 'lc$^3'/1
						  (_cor23)
					  in  ( [_cor25|_cor26]
						-| ['compiler_generated'] )
				  ( <[Es|_cor23]> when 'true' ->
					apply 'lc$^3'/1
					    (_cor23)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_13815> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor24})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case _cor20 of
			  <[Es|_cor23]>
			      when call 'erlang':'=/='
				    (Es,
				     'bottom') ->
			      let <_cor25> =
				  apply 't_tuple'/1
				      (Es)
			      in  let <_cor26> =
				      apply 'lc$^3'/1
					  (_cor23)
				  in  ( [_cor25|_cor26]
					-| ['compiler_generated'] )
			  ( <[Es|_cor23]> when 'true' ->
				apply 'lc$^3'/1
				    (_cor23)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_13815> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	  %% Line 2973
	  <L1,L2,Opaques> when 'true' ->
	      %% Line 2974
	      apply 'inf_tuples_in_sets2'/4
		  (_cor2, _cor1, [], _cor0)
	end
'inf_tuples_in_sets2'/4 =
    %% Line 2976
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'c','tuple',Elements1,{Arity,Tag}}|Ts1],%% Line 2977
						     [{'c','tuple',Elements2,{_cor9,_cor10}}|Ts2],Acc,Opaques>
	      when let <_cor11> =
		    call 'erlang':'=:='
			(_cor9, Arity)
		in  let <_cor12> =
			call 'erlang':'=:='
			    (_cor10, Tag)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      let <_34229> =
		  apply 't_inf_lists_strict'/4
		      (Elements1, Elements2, [], _cor0)
	      in  %% Line 2978
		  case _34229 of
		    %% Line 2979
		    <'bottom'> when 'true' ->
			apply 'inf_tuples_in_sets2'/4
			    (Ts1, Ts2, _cor1, _cor0)
		    %% Line 2980
		    <NewElements> when 'true' ->
			%% Line 2981
			apply 'inf_tuples_in_sets2'/4
			    (Ts1, Ts2, [{'c','tuple',_34229,{Arity,Tag}}|_cor1], _cor0)
		  end
	  %% Line 2984
	  <L1 = [{'c','tuple',_cor13,{_cor14,Tag1}}|Ts1],L2 = %% Line 2985
							      [{'c','tuple',_cor15,{_cor16,Tag2}}|Ts2],Acc,Opaques> when 'true' ->
	      %% Line 2986
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Tag1,
			   Tag2) ->
		    apply 'inf_tuples_in_sets2'/4
			(Ts1, _cor2, _cor1, _cor0)
		%% Line 2987
		<>
		    when call 'erlang':'>'
			  (Tag1,
			   Tag2) ->
		    apply 'inf_tuples_in_sets2'/4
			(_cor3, Ts2, _cor1, _cor0)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 2989
	  <[],_cor17,Acc,_X_Opaques> when 'true' ->
	      call 'lists':'reverse'
		  (_cor1)
	  %% Line 2990
	  <_cor18,[],Acc,_X_Opaques> when 'true' ->
	      call 'lists':'reverse'
		  (_cor1)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_tuples_in_sets2',4}}] )
	    -| ['compiler_generated'] )
	end
'inf_union'/3 =
    %% Line 2992
    fun (_cor2,_cor1,_cor0) ->
	let <OpaqueFun> =
	    %% Line 2994
	    fun (_cor8,_cor7,_cor6) ->
		%% Line 2995
		case _cor8 of
		  <[_cor32|[_cor33|[_cor34|[_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[Opaque|[_cor40|[_cor41|[]]]]]]]]]]]]> when 'true' ->
		      %% Line 2996
		      case _cor7 of
			<[A|[B|[F|[I|[L|[N|[T|[M|[_cor42|[_X_R|[Map|[]]]]]]]]]]]]> when 'true' ->
			    let <List> =
				%% Line 2997
				[A|[B|[F|[I|[L|[N|[T|[M|[Map|[]]]]]]]]]]
			    in  %% Line 2998
				apply 'inf_union_collect'/5
				    (List, Opaque, _cor6, [], [])
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
	in  let <_cor17> =
		%% Line 3001
		fun (_cor14,_cor13) ->
		    apply 't_inf'/3
			(_cor13, _cor14, _cor0)
	    in  let <_38037> =
		    %% Line 3001
		    apply OpaqueFun
			(_cor2, _cor1, _cor17)
		in  %% Line 3000
		    case _38037 of
		      <{O1,ThrowList1}> when 'true' ->
			  let <_cor23> =
			      %% Line 3003
			      fun (_cor20,_cor19) ->
				  apply 't_inf'/3
				      (_cor20, _cor19, _cor0)
			  in  let <_11208> =
				  %% Line 3003
				  apply OpaqueFun
				      (_cor1, _cor2, _cor23)
			      in  %% Line 3003
				  case _11208 of
				    <{O2,ThrowList2}> when 'true' ->
					let <_40694> =
					    %% Line 3004
					    apply 'inf_union'/6
						(_cor2, _cor1, 0, [], [], _cor0)
					in  %% Line 3004
					    case _40694 of
					      <{Union,ThrowList3}> when 'true' ->
						  let <ThrowList> =
						      %% Line 3005
						      call 'lists':'merge3'
							  (ThrowList1, ThrowList2, ThrowList3)
						  in  let <_26483> =
							  %% Line 3006
							  apply 't_sup'/1
							      ([O1|[O2|[Union|[]]]])
						      in  %% Line 3006
							  case _26483 of
							    %% Line 3007
							    <'none'>
								when call 'erlang':'=/='
								      (ThrowList,
								       []) ->
								let <_cor27> =
								    call 'erlang':'hd'
									(ThrowList)
								in  call 'erlang':'throw'
									(_cor27)
							    %% Line 3008
							    <Sup> when 'true' ->
								_26483
							  end
					      ( <_cor25> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_40694})
						-| ['compiler_generated'] )
					    end
				    ( <_cor24> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_11208})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_38037})
			-| ['compiler_generated'] )
		    end
'inf_union_collect'/5 =
    %% Line 3011
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Opaque,_X_InfFun,InfList,ThrowList> when 'true' ->
	      let <_cor6> =
		  %% Line 3012
		  apply 't_sup'/1
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 3012
		      call 'lists':'usort'
			  (_cor0)
		  in  %% Line 3012
		      {_cor6,_cor5}
	  %% Line 3013
	  <['none'|L],Opaque,InfFun,InfList,ThrowList> when 'true' ->
	      %% Line 3014
	      apply 'inf_union_collect'/5
		  (L, _cor3, _cor2, ['none'|_cor1], _cor0)
	  %% Line 3015
	  <[E|L],Opaque,InfFun,InfList,ThrowList> when 'true' ->
	      %% Line 3016
	      try
		  apply _cor2
		      (E, _cor3)
	      of <_cor7> ->
		  %% Line 3018
		  apply 'inf_union_collect'/5
		      (L, _cor3, _cor2, [_cor7|_cor1], _cor0)
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 3019
		    <'throw',N,_cor17>
			when call 'erlang':'is_integer'
			      (_cor10) ->
			%% Line 3020
			apply 'inf_union_collect'/5
			    (L, _cor3, _cor2, _cor1, [_cor10|_cor0])
		    ( <_5627,_37345,_22285> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_union_collect',5}}] )
	    -| ['compiler_generated'] )
	end
'inf_union'/6 =
    %% Line 3023
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <['none'|Left1],['none'|Left2],N,Acc,ThrowList,Opaques> when 'true' ->
	      %% Line 3024
	      apply 'inf_union'/6
		  (Left1, Left2, _cor3, ['none'|_cor2], _cor1, _cor0)
	  %% Line 3025
	  <[T1|Left1],[T2|Left2],N,Acc,ThrowList,Opaques> when 'true' ->
	      %% Line 3026
	      try
		  apply 't_inf'/3
		      (T1, T2, _cor0)
	      of <_cor6> ->
		  case _cor6 of
		    %% Line 3027
		    <'none'> when 'true' ->
			apply 'inf_union'/6
			    (Left1, Left2, _cor3, ['none'|_cor2], _cor1, _cor0)
		    %% Line 3028
		    <T> when 'true' ->
			let <_cor7> =
			    call 'erlang':'+'
				(_cor3, 1)
			in  apply 'inf_union'/6
				(Left1, Left2, _cor7, [_cor6|_cor2], _cor1, _cor0)
		  end
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 3029
		    <'throw',_cor26,_cor27>
			when let <_cor28> =
			      call 'erlang':'=:='
				  (_cor10, _cor3)
			  in  let <_cor29> =
				  call 'erlang':'is_integer'
				      (_cor3)
			      in  call 'erlang':'and'
				      (_cor28, _cor29) ->
			%% Line 3030
			apply 'inf_union'/6
			    (Left1, Left2, _cor3, ['none'|_cor2], [_cor3|_cor1], _cor0)
		    ( <_41364,_32669,_11670> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  %% Line 3032
	  <[],[],N,Acc,ThrowList,_X_Opaques> when 'true' ->
	      %% Line 3033
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor3,
			   0) ->
		    {'none',_cor1}
		%% Line 3034
		<>
		    when call 'erlang':'=:='
			  (_cor3,
			   1) ->
		    let <_cor16> =
			%% Line 3035
			( letrec
			      'lc$^0'/1 =
				  fun (_cor14) ->
				      case _cor14 of
					<[T|_cor13]>
					    when call 'erlang':'=/='
						  (T,
						   'none') ->
					    let <_cor15> =
						apply 'lc$^0'/1
						    (_cor13)
					    in  ( [T|_cor15]
						  -| ['compiler_generated'] )
					( <[T|_cor13]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor13)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_33675> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor14})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  case _cor2 of
				<[T|_cor13]>
				    when call 'erlang':'=/='
					  (T,
					   'none') ->
				    let <_cor15> =
					apply 'lc$^0'/1
					    (_cor13)
				    in  ( [T|_cor15]
					  -| ['compiler_generated'] )
				( <[T|_cor13]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor13)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_33675> when 'true' ->
				      primop 'match_fail'
					  ({'function_clause',_cor2})
				  -| ['compiler_generated'] )
			      end
			  -| ['list_comprehension'] )
		    in  %% Line 3035
			case _cor16 of
			  <[Type|[]]> when 'true' ->
			      %% Line 3036
			      {Type,_cor1}
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor16})
			    -| ['compiler_generated'] )
			end
		%% Line 3037
		<>
		    when call 'erlang':'>='
			  (_cor3,
			   2) ->
		    let <_cor19> =
			call 'lists':'reverse'
			    (_cor2)
		    in  case _cor19 of
			  <[_cor30|[_cor31|[_cor32|[_cor33|[_cor34|[_cor35|[_cor36|[_cor37|[_cor38|[_cor39|[_cor40|[]]]]]]]]]]]]> when 'true' ->
			      {{'c','union',_cor19,'unknown'},_cor1}
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor19})
			    -| ['compiler_generated'] )
			end
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'inf_union',6}}] )
	    -| ['compiler_generated'] )
	end
'inf_bitstr'/4 =
    %% Line 3040
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <GCD> =
	    %% Line 3041
	    apply 'gcd'/2
		(_cor3, _cor1)
	in  let <_cor5> =
		%% Line 3042
		call 'erlang':'-'
		    (_cor0, _cor2)
	    in  %% Line 3042
		case call 'erlang':'rem'
			 (_cor5, GCD) of
		  %% Line 3043
		  <0> when 'true' ->
		      let <_cor6> =
			  %% Line 3044
			  call 'erlang':'*'
			      (_cor3, _cor1)
		      in  let <U> =
			      %% Line 3044
			      call 'erlang':'div'
				  (_cor6, GCD)
			  in  let <B> =
				  %% Line 3045
				  apply 'findfirst'/6
				      (0, 0, _cor3, _cor2, _cor1, _cor0)
			      in  %% Line 3046
				  apply 't_bitstr'/2
				      (U, B)
		  %% Line 3047
		  <_cor14> when 'true' ->
		      %% Line 3048
		      'none'
		end
'findfirst'/6 =
    %% Line 3051
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 3052
	    call 'erlang':'*'
		(_cor3, _cor5)
	in  let <Val1> =
		%% Line 3052
		call 'erlang':'+'
		    (_cor6, _cor2)
	    in  let <_cor8> =
		    %% Line 3053
		    call 'erlang':'*'
			(_cor1, _cor4)
		in  let <Val2> =
			%% Line 3053
			call 'erlang':'+'
			    (_cor8, _cor0)
		    in  %% Line 3054
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (Val1,
				     Val2) ->
			      Val1
			  %% Line 3056
			  <>
			      when call 'erlang':'>'
				    (Val1,
				     Val2) ->
			      let <_cor10> =
				  %% Line 3057
				  call 'erlang':'+'
				      (_cor4, 1)
			      in  %% Line 3057
				  apply 'findfirst'/6
				      (_cor5, _cor10, _cor3, _cor2, _cor1, _cor0)
			  %% Line 3058
			  <>
			      when call 'erlang':'<'
				    (Val1,
				     Val2) ->
			      let <_cor11> =
				  %% Line 3059
				  call 'erlang':'+'
				      (_cor5, 1)
			      in  %% Line 3059
				  apply 'findfirst'/6
				      (_cor11, _cor4, _cor3, _cor2, _cor1, _cor0)
			  ( <> when 'true' ->
				primop 'match_fail'
				    ('if_clause')
			    -| ['compiler_generated'] )
			end
't_subst'/2 =
    %% Line 3077
    fun (_cor1,_cor0) ->
	let <_4292> =
	    %% Line 3078
	    apply 't_has_var'/1
		(_cor1)
	in  %% Line 3078
	    case _4292 of
	      %% Line 3079
	      <'true'> when 'true' ->
		  apply 't_subst_dict'/2
		      (_cor1, _cor0)
	      %% Line 3080
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4292})
		-| ['compiler_generated'] )
	    end
't_subst_dict'/2 =
    %% Line 3083
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','var',Id,_cor63},Dict> when 'true' ->
	      let <_28238> =
		  %% Line 3084
		  call 'dict':'find'
		      (Id, _cor0)
	      in  %% Line 3084
		  case _28238 of
		    %% Line 3085
		    <'error'> when 'true' ->
			'any'
		    %% Line 3086
		    <{'ok',Type}> when 'true' ->
			Type
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_28238})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3088
	  <{'c','list',[Contents|[Termination|[]]],Size},Dict> when 'true' ->
	      let <_25203> =
		  %% Line 3089
		  apply 't_subst_dict'/2
		      (Contents, _cor0)
	      in  %% Line 3089
		  case _25203 of
		    %% Line 3090
		    <'none'> when 'true' ->
			'none'
		    %% Line 3091
		    <NewContents> when 'true' ->
			let <_28093> =
			    %% Line 3093
			    apply 't_subst_dict'/2
				(Termination, _cor0)
			in  %% Line 3093
			    case _28093 of
			      %% Line 3094
			      <{'c','nil',_cor64,_cor65}> when 'true' ->
				  {'c','list',[_25203|[{'c','nil',[],'unknown'}]],Size}
			      %% Line 3095
			      <'any'> when 'true' ->
				  {'c','list',[_25203|['any']],Size}
			      %% Line 3096
			      <Other> when 'true' ->
				  let <_24842> =
				      %% Line 3097
				      apply 't_cons'/2
					  (_25203, _28093)
				  in  %% Line 3097
				      case _24842 of
					<{'c','list',[NewContents2|[NewTermination|[]]],_cor66}> when 'true' ->
					    %% Line 3098
					    {'c','list',[NewContents2|[NewTermination|[]]],Size}
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_24842})
					  -| ['compiler_generated'] )
				      end
			    end
		  end
	  %% Line 3101
	  <{'c','function',[Domain|[Range|[]]],_cor67},Dict> when 'true' ->
	      let <_cor6> =
		  %% Line 3102
		  apply 't_subst_dict'/2
		      (Domain, _cor0)
	      in  let <_cor7> =
		      %% Line 3102
		      apply 't_subst_dict'/2
			  (Range, _cor0)
		  in  %% Line 3102
		      {'c','function',[_cor6|[_cor7|[]]],'unknown'}
	  %% Line 3103
	  <{'c','product',Types,_cor68},Dict> when 'true' ->
	      let <_cor13> =
		  %% Line 3104
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[T|_cor9]> when 'true' ->
				      let <_cor11> =
					  apply 't_subst_dict'/2
					      (T, _cor0)
				      in  let <_cor12> =
					      apply 'lc$^0'/1
						  (_cor9)
					  in  ( [_cor11|_cor12]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_36586> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  %% Line 3104
		  {'c','product',_cor13,'unknown'}
	  %% Line 3105
	  <T = {'c','tuple','any',{'any','any'}},_X_Dict> when 'true' ->
	      _cor1
	  %% Line 3107
	  <{'c','tuple',Elements,{_X_Arity,_X_Tag}},Dict> when 'true' ->
	      let <_cor19> =
		  %% Line 3108
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor16) ->
				case _cor16 of
				  <[E|_cor15]> when 'true' ->
				      let <_cor17> =
					  apply 't_subst_dict'/2
					      (E, _cor0)
				      in  let <_cor18> =
					      apply 'lc$^1'/1
						  (_cor15)
					  in  ( [_cor17|_cor18]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_12588> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor16})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  %% Line 3108
		  apply 't_tuple'/1
		      (_cor19)
	  %% Line 3109
	  <TS = {'c','tuple_set',_cor69,_cor70},Dict> when 'true' ->
	      let <_cor26> =
		  %% Line 3110
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor23) ->
				case _cor23 of
				  <[T|_cor21]> when 'true' ->
				      let <_cor24> =
					  apply 't_subst_dict'/2
					      (T, _cor0)
				      in  let <_cor25> =
					      apply 'lc$^2'/1
						  (_cor21)
					  in  ( [_cor24|_cor25]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_21197> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor23})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor22> =
			    apply 't_tuple_subtypes'/1
				(_cor1)
			in  apply 'lc$^2'/1
				(_cor22)
		    -| ['list_comprehension'] )
	      in  %% Line 3110
		  apply 't_sup'/1
		      (_cor26)
	  %% Line 3111
	  <{'c','map',Pairs,_cor71},Dict> when 'true' ->
	      let <_cor33> =
		  %% Line 3112
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[%% Line 3113
				    {K,V}|_cor28]> when 'true' ->
				      let <_cor31> =
					  apply 't_subst_dict'/2
					      (K, _cor0)
				      in  let <_cor30> =
					      apply 't_subst_dict'/2
						  (V, _cor0)
					  in  let <_cor32> =
						  %% Line 3113
						  apply 'lc$^3'/1
						      (_cor28)
					      in  ( [{_cor31,_cor30}|_cor32]
						    -| ['compiler_generated'] )
				  ( <[_cor27|_cor28]> when 'true' ->
					%% Line 3113
					apply 'lc$^3'/1
					    (_cor28)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_8187> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^3'/1
			    (Pairs)
		    -| ['list_comprehension'] )
	      in  %% Line 3112
		  {'c','map',_cor33,'unknown'}
	  %% Line 3114
	  <{'c','opaque',Es,_cor72},Dict> when 'true' ->
	      let <_cor51> =
		  %% Line 3115
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor37) ->
				case _cor37 of
				  <[Opaque = %% Line 3117
					     {'opaque',_cor73,_cor74,Args,S}|_cor35]> when 'true' ->
				      let <_cor43> =
					  ( letrec
						'lc$^5'/1 =
						    fun (_cor40) ->
							case _cor40 of
							  <[Arg|_cor39]> when 'true' ->
							      let <_cor41> =
								  apply 't_subst_dict'/2
								      (Arg, _cor0)
							      in  let <_cor42> =
								      apply 'lc$^5'/1
									  (_cor39)
								  in  ( [_cor41|_cor42]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_31275> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor40})
								  -| [{'function_name',{'lc$^5',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^5'/1
						    (Args)
					    -| ['list_comprehension'] )
				      in  let <_rec9> =
					      %% Line 3116
					      apply 't_subst_dict'/2
						  (S, _cor0)
					  in  let <_cor47> =
						  %% Line 3116
						  call 'erlang':'setelement'
						      (5, Opaque, _rec9)
					      in  let <_cor49> =
						      call 'erlang':'setelement'
							  (4, _cor47, _cor43)
						  in  let <_cor50> =
							  %% Line 3117
							  apply 'lc$^4'/1
							      (_cor35)
						      in  ( [_cor49|_cor50]
							    -| ['compiler_generated'] )
				  ( <[_cor34|_cor35]> when 'true' ->
					%% Line 3117
					apply 'lc$^4'/1
					    (_cor35)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_6354> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor37})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor36> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Es)
			in  apply 'lc$^4'/1
				(_cor36)
		    -| ['list_comprehension'] )
	      in  let <_cor53> =
		      %% Line 3118
		      call 'ordsets':'from_list'
			  (_cor51)
		  in  %% Line 3118
		      {'c','opaque',_cor53,'unknown'}
	  %% Line 3119
	  <{'c','union',List = [_cor80|[_cor81|[_cor82|[_cor83|[_cor84|[_cor85|[_cor86|[_cor87|[_cor88|[_cor89|[_cor90|[]]]]]]]]]]]],_cor91},Dict> when 'true' ->
	      let <_cor59> =
		  %% Line 3120
		  ( letrec
			'lc$^6'/1 =
			    fun (_cor56) ->
				case _cor56 of
				  <[E|_cor55]> when 'true' ->
				      let <_cor57> =
					  apply 't_subst_dict'/2
					      (E, _cor0)
				      in  let <_cor58> =
					      apply 'lc$^6'/1
						  (_cor55)
					  in  ( [_cor57|_cor58]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_29573> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor56})
					  -| [{'function_name',{'lc$^6',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^6'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 3120
		  case _cor59 of
		    <[_cor92|[_cor93|[_cor94|[_cor95|[_cor96|[_cor97|[_cor98|[_cor99|[_cor100|[_cor101|[_cor102|[]]]]]]]]]]]]> when 'true' ->
			{'c','union',_cor59,'unknown'}
		    ( <_cor60> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor59})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3121
	  <T,_X_Dict> when 'true' ->
	      _cor1
	end
'subst_all_vars_to_any'/1 =
    %% Line 3126
    fun (_cor0) ->
	let <_15843> =
	    %% Line 3130
	    apply 't_has_var'/1
		(_cor0)
	in  %% Line 3130
	    case _15843 of
	      %% Line 3131
	      <'true'> when 'true' ->
		  apply 't_subst_aux'/2
		      (_cor0, [])
	      %% Line 3132
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_15843})
		-| ['compiler_generated'] )
	    end
't_subst_aux'/2 =
    %% Line 3135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','var',Id,_cor63},VarMap> when 'true' ->
	      let <_27424> =
		  %% Line 3136
		  call 'lists':'keyfind'
		      (Id, 1, _cor0)
	      in  %% Line 3136
		  case _27424 of
		    %% Line 3137
		    <'false'> when 'true' ->
			'any'
		    %% Line 3138
		    <{_cor64,Type}>
			when call 'erlang':'=:='
			      (_cor64,
			       Id) ->
			Type
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_27424})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3140
	  <{'c','list',[Contents|[Termination|[]]],Size},VarMap> when 'true' ->
	      let <_21628> =
		  %% Line 3141
		  apply 't_subst_aux'/2
		      (Contents, _cor0)
	      in  %% Line 3141
		  case _21628 of
		    %% Line 3142
		    <'none'> when 'true' ->
			'none'
		    %% Line 3143
		    <NewContents> when 'true' ->
			let <_34366> =
			    %% Line 3145
			    apply 't_subst_aux'/2
				(Termination, _cor0)
			in  %% Line 3145
			    case _34366 of
			      %% Line 3146
			      <{'c','nil',_cor65,_cor66}> when 'true' ->
				  {'c','list',[_21628|[{'c','nil',[],'unknown'}]],Size}
			      %% Line 3147
			      <'any'> when 'true' ->
				  {'c','list',[_21628|['any']],Size}
			      %% Line 3148
			      <Other> when 'true' ->
				  let <_30571> =
				      %% Line 3149
				      apply 't_cons'/2
					  (_21628, _34366)
				  in  %% Line 3149
				      case _30571 of
					<{'c','list',[NewContents2|[NewTermination|[]]],_cor67}> when 'true' ->
					    %% Line 3150
					    {'c','list',[NewContents2|[NewTermination|[]]],Size}
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_30571})
					  -| ['compiler_generated'] )
				      end
			    end
		  end
	  %% Line 3153
	  <{'c','function',[Domain|[Range|[]]],_cor68},VarMap> when 'true' ->
	      let <_cor6> =
		  %% Line 3154
		  apply 't_subst_aux'/2
		      (Domain, _cor0)
	      in  let <_cor7> =
		      %% Line 3154
		      apply 't_subst_aux'/2
			  (Range, _cor0)
		  in  %% Line 3154
		      {'c','function',[_cor6|[_cor7|[]]],'unknown'}
	  %% Line 3155
	  <{'c','product',Types,_cor69},VarMap> when 'true' ->
	      let <_cor13> =
		  %% Line 3156
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[T|_cor9]> when 'true' ->
				      let <_cor11> =
					  apply 't_subst_aux'/2
					      (T, _cor0)
				      in  let <_cor12> =
					      apply 'lc$^0'/1
						  (_cor9)
					  in  ( [_cor11|_cor12]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_29650> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case Types of
			  <[T|_cor9]> when 'true' ->
			      let <_cor11> =
				  apply 't_subst_aux'/2
				      (T, _cor0)
			      in  let <_cor12> =
				      apply 'lc$^0'/1
					  (_cor9)
				  in  ( [_cor11|_cor12]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_29650> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Types})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3156
		  {'c','product',_cor13,'unknown'}
	  %% Line 3157
	  <T = {'c','tuple','any',{'any','any'}},_X_VarMap> when 'true' ->
	      _cor1
	  %% Line 3159
	  <{'c','tuple',Elements,{_X_Arity,_X_Tag}},VarMap> when 'true' ->
	      let <_cor19> =
		  %% Line 3160
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor16) ->
				case _cor16 of
				  <[E|_cor15]> when 'true' ->
				      let <_cor17> =
					  apply 't_subst_aux'/2
					      (E, _cor0)
				      in  let <_cor18> =
					      apply 'lc$^1'/1
						  (_cor15)
					  in  ( [_cor17|_cor18]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_544> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor16})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case Elements of
			  <[E|_cor15]> when 'true' ->
			      let <_cor17> =
				  apply 't_subst_aux'/2
				      (E, _cor0)
			      in  let <_cor18> =
				      apply 'lc$^1'/1
					  (_cor15)
				  in  ( [_cor17|_cor18]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_544> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Elements})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3160
		  apply 't_tuple'/1
		      (_cor19)
	  %% Line 3161
	  <TS = {'c','tuple_set',_cor70,_cor71},VarMap> when 'true' ->
	      let <_cor26> =
		  %% Line 3162
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor23) ->
				case _cor23 of
				  <[T|_cor21]> when 'true' ->
				      let <_cor24> =
					  apply 't_subst_aux'/2
					      (T, _cor0)
				      in  let <_cor25> =
					      apply 'lc$^2'/1
						  (_cor21)
					  in  ( [_cor24|_cor25]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_21843> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor23})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor22> =
			    apply 't_tuple_subtypes'/1
				(_cor1)
			in  case _cor22 of
			      <[T|_cor21]> when 'true' ->
				  let <_cor24> =
				      apply 't_subst_aux'/2
					  (T, _cor0)
				  in  let <_cor25> =
					  apply 'lc$^2'/1
					      (_cor21)
				      in  ( [_cor24|_cor25]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_21843> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor22})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  %% Line 3162
		  apply 't_sup'/1
		      (_cor26)
	  %% Line 3163
	  <{'c','map',Pairs,_cor72},VarMap> when 'true' ->
	      let <_cor33> =
		  %% Line 3164
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[%% Line 3165
				    {K,V}|_cor28]> when 'true' ->
				      let <_cor31> =
					  apply 't_subst_aux'/2
					      (K, _cor0)
				      in  let <_cor30> =
					      apply 't_subst_aux'/2
						  (V, _cor0)
					  in  let <_cor32> =
						  %% Line 3165
						  apply 'lc$^3'/1
						      (_cor28)
					      in  ( [{_cor31,_cor30}|_cor32]
						    -| ['compiler_generated'] )
				  ( <[_cor27|_cor28]> when 'true' ->
					%% Line 3165
					apply 'lc$^3'/1
					    (_cor28)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_26313> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^3'/1
			    (Pairs)
		    -| ['list_comprehension'] )
	      in  %% Line 3164
		  {'c','map',_cor33,'unknown'}
	  %% Line 3166
	  <{'c','opaque',Es,_cor73},VarMap> when 'true' ->
	      let <_cor51> =
		  %% Line 3167
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor37) ->
				case _cor37 of
				  <[Opaque = %% Line 3169
					     {'opaque',_cor74,_cor75,Args,S}|_cor35]> when 'true' ->
				      let <_cor43> =
					  ( letrec
						'lc$^5'/1 =
						    fun (_cor40) ->
							case _cor40 of
							  <[Arg|_cor39]> when 'true' ->
							      let <_cor41> =
								  apply 't_subst_aux'/2
								      (Arg, _cor0)
							      in  let <_cor42> =
								      apply 'lc$^5'/1
									  (_cor39)
								  in  ( [_cor41|_cor42]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_1903> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor40})
								  -| [{'function_name',{'lc$^5',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  case Args of
						  <[Arg|_cor39]> when 'true' ->
						      let <_cor41> =
							  apply 't_subst_aux'/2
							      (Arg, _cor0)
						      in  let <_cor42> =
							      apply 'lc$^5'/1
								  (_cor39)
							  in  ( [_cor41|_cor42]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_1903> when 'true' ->
							primop 'match_fail'
							    ({'function_clause',Args})
						    -| ['compiler_generated'] )
						end
					    -| ['list_comprehension'] )
				      in  let <_rec12> =
					      %% Line 3168
					      apply 't_subst_aux'/2
						  (S, _cor0)
					  in  let <_cor47> =
						  %% Line 3168
						  call 'erlang':'setelement'
						      (5, Opaque, _rec12)
					      in  let <_cor49> =
						      call 'erlang':'setelement'
							  (4, _cor47, _cor43)
						  in  let <_cor50> =
							  %% Line 3169
							  apply 'lc$^4'/1
							      (_cor35)
						      in  ( [_cor49|_cor50]
							    -| ['compiler_generated'] )
				  ( <[_cor34|_cor35]> when 'true' ->
					%% Line 3169
					apply 'lc$^4'/1
					    (_cor35)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_1252> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor37})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor36> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Es)
			in  apply 'lc$^4'/1
				(_cor36)
		    -| ['list_comprehension'] )
	      in  let <_cor53> =
		      %% Line 3170
		      call 'ordsets':'from_list'
			  (_cor51)
		  in  %% Line 3170
		      {'c','opaque',_cor53,'unknown'}
	  %% Line 3171
	  <{'c','union',List = [_cor81|[_cor82|[_cor83|[_cor84|[_cor85|[_cor86|[_cor87|[_cor88|[_cor89|[_cor90|[_cor91|[]]]]]]]]]]]],_cor92},VarMap> when 'true' ->
	      let <_cor59> =
		  %% Line 3172
		  ( letrec
			'lc$^6'/1 =
			    fun (_cor56) ->
				case _cor56 of
				  <[E|_cor55]> when 'true' ->
				      let <_cor57> =
					  apply 't_subst_aux'/2
					      (E, _cor0)
				      in  let <_cor58> =
					      apply 'lc$^6'/1
						  (_cor55)
					  in  ( [_cor57|_cor58]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_3746> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor56})
					  -| [{'function_name',{'lc$^6',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case List of
			  <[E|_cor55]> when 'true' ->
			      let <_cor57> =
				  apply 't_subst_aux'/2
				      (E, _cor0)
			      in  let <_cor58> =
				      apply 'lc$^6'/1
					  (_cor55)
				  in  ( [_cor57|_cor58]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_3746> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',List})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3172
		  case _cor59 of
		    <[_cor93|[_cor94|[_cor95|[_cor96|[_cor97|[_cor98|[_cor99|[_cor100|[_cor101|[_cor102|[_cor103|[]]]]]]]]]]]]> when 'true' ->
			{'c','union',_cor59,'unknown'}
		    ( <_cor60> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor59})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3173
	  <T,_X_VarMap> when 'true' ->
	      _cor1
	end
'subst_all_remote'/2 =
    %% Line 3178
    fun (_cor1,_cor0) ->
	let <Map> =
	    %% Line 3180
	    fun (_cor3) ->
		let <_14726> =
		    %% Line 3181
		    call 'erl_types':'t_is_remote'
			(_cor3)
		in  %% Line 3181
		    case _14726 of
		      %% Line 3182
		      <'true'> when 'true' ->
			  _cor0
		      %% Line 3183
		      <'false'> when 'true' ->
			  _cor3
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_14726})
			-| ['compiler_generated'] )
		    end
	in  %% Line 3186
	    call 'erl_types':'t_map'
		(Map, _cor1)
't_unify'/2 =
    %% Line 3196
    fun (_cor1,_cor0) ->
	let <_40180> =
	    %% Line 3197
	    apply 't_unify'/3
		(_cor1, _cor0, [])
	in  %% Line 3197
	    case _40180 of
	      <{T,VarMap}> when 'true' ->
		  let <_15843> =
		      apply 't_has_var'/1
			  (T)
		  in  let <_cor4> =
			  case _15843 of
			    <'true'> when 'true' ->
				apply 't_subst_aux'/2
				    (T, VarMap)
			    <'false'> when 'true' ->
				T
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_15843})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor3> =
			      %% Line 3198
			      call 'lists':'keysort'
				  (1, VarMap)
			  in  %% Line 3198
			      {_cor4,_cor3}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_40180})
		-| ['compiler_generated'] )
	    end
't_unify'/3 =
    %% Line 3200
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T = {'c','var',Id,_cor43},{'c','var',_cor44,_cor45},VarMap>
	      when call 'erlang':'=:='
		    (_cor44,
		     Id) ->
	      %% Line 3201
	      {_cor2,_cor0}
	  %% Line 3202
	  <T = {'c','var',Id1,_cor46},{'c','var',Id2,_cor47},VarMap> when 'true' ->
	      let <_21958> =
		  %% Line 3203
		  call 'lists':'keyfind'
		      (Id1, 1, _cor0)
	      in  %% Line 3203
		  case _21958 of
		    %% Line 3204
		    <'false'> when 'true' ->
			let <_35401> =
			    %% Line 3205
			    call 'lists':'keyfind'
				(Id2, 1, _cor0)
			in  %% Line 3205
			    case _35401 of
			      %% Line 3206
			      <'false'> when 'true' ->
				  {_cor2,[{Id2,_cor2}|_cor0]}
			      %% Line 3207
			      <{_cor48,Type}>
				  when call 'erlang':'=:='
					(_cor48,
					 Id2) ->
				  apply 't_unify'/3
				      (_cor2, Type, _cor0)
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_35401})
				-| ['compiler_generated'] )
			    end
		    %% Line 3209
		    <{_cor49,Type1}>
			when call 'erlang':'=:='
			      (_cor49,
			       Id1) ->
			let <_28325> =
			    %% Line 3210
			    call 'lists':'keyfind'
				(Id2, 1, _cor0)
			in  %% Line 3210
			    case _28325 of
			      %% Line 3211
			      <'false'> when 'true' ->
				  {Type1,[{Id2,_cor2}|_cor0]}
			      %% Line 3212
			      <{_cor50,Type2}>
				  when call 'erlang':'=:='
					(_cor50,
					 Id2) ->
				  apply 't_unify'/3
				      (Type1, Type2, _cor0)
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_28325})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_21958})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3215
	  <{'c','var',Id,_cor51},Type,VarMap> when 'true' ->
	      let <_39738> =
		  %% Line 3216
		  call 'lists':'keyfind'
		      (Id, 1, _cor0)
	      in  %% Line 3216
		  case _39738 of
		    %% Line 3217
		    <'false'> when 'true' ->
			{_cor1,[{Id,_cor1}|_cor0]}
		    %% Line 3218
		    <{_cor52,VarType}>
			when call 'erlang':'=:='
			      (_cor52,
			       Id) ->
			apply 't_unify'/3
			    (VarType, _cor1, _cor0)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_39738})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3220
	  <Type,{'c','var',Id,_cor53},VarMap> when 'true' ->
	      let <_37502> =
		  %% Line 3221
		  call 'lists':'keyfind'
		      (Id, 1, _cor0)
	      in  %% Line 3221
		  case _37502 of
		    %% Line 3222
		    <'false'> when 'true' ->
			{_cor2,[{Id,_cor2}|_cor0]}
		    %% Line 3223
		    <{_cor54,VarType}>
			when call 'erlang':'=:='
			      (_cor54,
			       Id) ->
			apply 't_unify'/3
			    (VarType, _cor2, _cor0)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_37502})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3225
	  <{'c','function',[Domain1|[Range1|[]]],_cor55},{'c','function',[Domain2|[Range2|[]]],_cor56},VarMap> when 'true' ->
	      let <_2385> =
		  %% Line 3226
		  apply 't_unify'/3
		      (Domain1, Domain2, _cor0)
	      in  %% Line 3226
		  case _2385 of
		    <{Domain,VarMap1}> when 'true' ->
			let <_38459> =
			    %% Line 3227
			    apply 't_unify'/3
				(Range1, Range2, VarMap1)
			in  %% Line 3227
			    case _38459 of
			      <{Range,VarMap2}> when 'true' ->
				  %% Line 3228
				  {{'c','function',[Domain|[Range|[]]],'unknown'},VarMap2}
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_38459})
				-| ['compiler_generated'] )
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2385})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3229
	  <{'c','list',[Contents1|[Termination1|[]]],Size},%% Line 3230
							   {'c','list',[Contents2|[Termination2|[]]],_cor57},VarMap>
	      when call 'erlang':'=:='
		    (_cor57,
		     Size) ->
	      let <_7879> =
		  %% Line 3231
		  apply 't_unify'/3
		      (Contents1, Contents2, _cor0)
	      in  %% Line 3231
		  case _7879 of
		    <{Contents,VarMap1}> when 'true' ->
			let <_26054> =
			    %% Line 3232
			    apply 't_unify'/3
				(Termination1, Termination2, VarMap1)
			in  %% Line 3232
			    case _26054 of
			      <{Termination,VarMap2}> when 'true' ->
				  %% Line 3233
				  {{'c','list',[Contents|[Termination|[]]],Size},VarMap2}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_26054})
				-| ['compiler_generated'] )
			    end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_7879})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3234
	  <{'c','product',Types1,_cor58},{'c','product',Types2,_cor59},VarMap> when 'true' ->
	      let <_22108> =
		  %% Line 3337
		  apply 'unify_lists'/4
		      (Types1, Types2, _cor0, [])
	      in  %% Line 3235
		  case _22108 of
		    <{Types,VarMap1}> when 'true' ->
			%% Line 3236
			{{'c','product',Types,'unknown'},VarMap1}
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_22108})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3237
	  <T = {'c','tuple','any',{'any','any'}},{'c','tuple','any',{'any','any'}},VarMap> when 'true' ->
	      %% Line 3238
	      {_cor2,_cor0}
	  %% Line 3239
	  <{'c','tuple',Elements1,{Arity,_cor60}},%% Line 3240
						  {'c','tuple',Elements2,{_cor61,_cor62}},VarMap>
	      when let <_cor63> =
		    call 'erlang':'=:='
			(_cor61, Arity)
		in  let <_cor64> =
			%% Line 3240
			call 'erlang':'=/='
			    (Arity, 'any')
		    in  call 'erlang':'and'
			    (_cor63, _cor64) ->
	      let <_27252> =
		  %% Line 3337
		  apply 'unify_lists'/4
		      (Elements1, Elements2, _cor0, [])
	      in  %% Line 3241
		  case _27252 of
		    <{NewElements,VarMap1}> when 'true' ->
			let <_cor14> =
			    %% Line 3242
			    apply 't_tuple'/1
				(NewElements)
			in  %% Line 3242
			    {_cor14,VarMap1}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_27252})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3243
	  <T1 = {'c','tuple_set',[{Arity,_cor65}|[]],_cor66},T2 = %% Line 3244
								  {'c','tuple',_cor67,{_cor68,_cor69}},VarMap>
	      when let <_cor70> =
		    call 'erlang':'=:='
			(_cor68, Arity)
		in  let <_cor71> =
			%% Line 3244
			call 'erlang':'=/='
			    (Arity, 'any')
		    in  call 'erlang':'and'
			    (_cor70, _cor71) ->
	      %% Line 3245
	      apply 'unify_tuple_set_and_tuple1'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 3246
	  <T1 = {'c','tuple',_cor72,{Arity,_cor73}},T2 = %% Line 3247
							 {'c','tuple_set',[{_cor74,_cor75}|[]],_cor76},VarMap>
	      when let <_cor77> =
		    call 'erlang':'=:='
			(_cor74, Arity)
		in  let <_cor78> =
			%% Line 3247
			call 'erlang':'=/='
			    (Arity, 'any')
		    in  call 'erlang':'and'
			    (_cor77, _cor78) ->
	      %% Line 3248
	      apply 'unify_tuple_set_and_tuple2'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 3249
	  <T1 = {'c','tuple_set',List1,_cor79},T2 = {'c','tuple_set',List2,_cor80},VarMap> when 'true' ->
	      %% Line 3250
	      try
		  let <_cor25> =
		      %% Line 3251
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor23) ->
				    case _cor23 of
				      <[{_X_Arity,T}|_cor22]> when 'true' ->
					  let <_cor24> =
					      apply 'lc$^1'/1
						  (_cor22)
					  in  ( [T|_cor24]
						-| ['compiler_generated'] )
				      ( <[_cor21|_cor22]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor22)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_3282> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor23})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  case List1 of
			      <[{_X_Arity,T}|_cor22]> when 'true' ->
				  let <_cor24> =
				      apply 'lc$^1'/1
					  (_cor22)
				  in  ( [T|_cor24]
					-| ['compiler_generated'] )
			      ( <[_cor21|_cor22]> when 'true' ->
				    apply 'lc$^1'/1
					(_cor22)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_3282> when 'true' ->
				    primop 'match_fail'
					({'function_clause',List1})
				-| ['compiler_generated'] )
			    end
			-| ['list_comprehension'] )
		  in  let <_cor26> =
			  %% Line 3251
			  call 'lists':'append'
			      (_cor25)
		      in  let <_cor19> =
			      %% Line 3252
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor17) ->
					    case _cor17 of
					      <[{_X_Arity,T}|_cor16]> when 'true' ->
						  let <_cor18> =
						      apply 'lc$^0'/1
							  (_cor16)
						  in  ( [T|_cor18]
							-| ['compiler_generated'] )
					      ( <[_cor15|_cor16]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor16)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_3045> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor17})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  case List2 of
				      <[{_X_Arity,T}|_cor16]> when 'true' ->
					  let <_cor18> =
					      apply 'lc$^0'/1
						  (_cor16)
					  in  ( [T|_cor18]
						-| ['compiler_generated'] )
				      ( <[_cor15|_cor16]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor16)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_3045> when 'true' ->
					    primop 'match_fail'
						({'function_clause',List2})
					-| ['compiler_generated'] )
				    end
				-| ['list_comprehension'] )
			  in  let <_cor20> =
				  %% Line 3252
				  call 'lists':'append'
				      (_cor19)
			      in  %% Line 3337
				  apply 'unify_lists'/4
				      (_cor26, _cor20, _cor0, [])
	      of <_cor27> ->
		  case _cor27 of
		    %% Line 3254
		    <{Tuples,NewVarMap}> when 'true' ->
			let <_cor28> =
			    apply 't_sup'/1
				(Tuples)
			in  {_cor28,NewVarMap}
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor27})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor32,_cor31,_cor30> ->
		  %% Line 3255
		  call 'erlang':'throw'
		      ({'mismatch',_cor2,_cor1})
	  %% Line 3257
	  <T1 = {'c','opaque',_cor84,_cor85},T2 = {'c','opaque',_cor86,_cor87},VarMap> when 'true' ->
	      let <_cor34> =
		  %% Line 3258
		  apply 't_opaque_structure'/1
		      (_cor2)
	      in  let <_cor33> =
		      %% Line 3258
		      apply 't_opaque_structure'/1
			  (_cor1)
		  in  %% Line 3258
		      apply 't_unify'/3
			  (_cor34, _cor33, _cor0)
	  %% Line 3259
	  <T1,T2 = {'c','opaque',_cor88,_cor89},VarMap> when 'true' ->
	      let <_cor35> =
		  %% Line 3260
		  apply 't_opaque_structure'/1
		      (_cor1)
	      in  %% Line 3260
		  apply 't_unify'/3
		      (_cor2, _cor35, _cor0)
	  %% Line 3261
	  <T1 = {'c','opaque',_cor90,_cor91},T2,VarMap> when 'true' ->
	      let <_cor36> =
		  %% Line 3262
		  apply 't_opaque_structure'/1
		      (_cor2)
	      in  %% Line 3262
		  apply 't_unify'/3
		      (_cor36, _cor1, _cor0)
	  %% Line 3263
	  <T,_cor92,VarMap>
	      when call 'erlang':'=:='
		    (_cor1,
		     _cor2) ->
	      %% Line 3264
	      {_cor2,_cor0}
	  %% Line 3265
	  <T1 = {'c','union',_cor93 = [_cor94|[_cor95|[_cor96|[_cor97|[_cor98|[_cor99|[_cor100|[_cor101|[_cor102|[_cor103|[_cor104|[]]]]]]]]]]]],_cor105},T2 = {'c','union',_cor106 = [_cor107|[_cor108|[_cor109|[_cor110|[_cor111|[_cor112|[_cor113|[_cor114|[_cor115|[_cor116|[_cor117|[]]]]]]]]]]]],_cor118},VarMap> when 'true' ->
	      let <_33629> =
		  %% Line 3266
		  apply 'unify_union2'/2
		      (_cor2, _cor1)
	      in  %% Line 3266
		  case _33629 of
		    <{Type1,Type2}> when 'true' ->
			%% Line 3267
			apply 't_unify'/3
			    (Type1, Type2, _cor0)
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_33629})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3268
	  <T1 = {'c','union',_cor119 = [_cor120|[_cor121|[_cor122|[_cor123|[_cor124|[_cor125|[_cor126|[_cor127|[_cor128|[_cor129|[_cor130|[]]]]]]]]]]]],_cor131},T2,VarMap> when 'true' ->
	      let <_cor38> =
		  %% Line 3269
		  apply 'unify_union1'/3
		      (_cor2, _cor2, _cor1)
	      in  %% Line 3269
		  apply 't_unify'/3
		      (_cor38, _cor1, _cor0)
	  %% Line 3270
	  <T1,T2 = {'c','union',_cor132 = [_cor133|[_cor134|[_cor135|[_cor136|[_cor137|[_cor138|[_cor139|[_cor140|[_cor141|[_cor142|[_cor143|[]]]]]]]]]]]],_cor144},VarMap> when 'true' ->
	      let <_cor39> =
		  %% Line 3271
		  apply 'unify_union1'/3
		      (_cor1, _cor2, _cor1)
	      in  %% Line 3271
		  apply 't_unify'/3
		      (_cor2, _cor39, _cor0)
	  %% Line 3272
	  <T1,T2,_cor145> when 'true' ->
	      %% Line 3273
	      call 'erlang':'throw'
		  ({'mismatch',_cor2,_cor1})
	end
'unify_union2'/2 =
    %% Line 3275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1 = {'c','union',List1 = [_cor7|[_cor8|[_cor9|[_cor10|[_cor11|[_cor12|[_cor13|[_cor14|[_cor15|[_cor16|[_cor17|[]]]]]]]]]]]],_cor18},T2 = {'c','union',List2 = [_cor19|[_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[]]]]]]]]]]]],_cor30}> when 'true' ->
	      let <_cor3> =
		  %% Line 3276
		  apply 'unify_union'/1
		      (List1)
	      in  let <_cor2> =
		      %% Line 3276
		      apply 'unify_union'/1
			  (List2)
		  in  %% Line 3276
		      case <_cor3,_cor2> of
			%% Line 3277
			<{'yes',Type1},{'yes',Type2}> when 'true' ->
			    {Type1,Type2}
			%% Line 3278
			<{'yes',Type1},'no'> when 'true' ->
			    {Type1,_cor0}
			%% Line 3279
			<'no',{'yes',Type2}> when 'true' ->
			    {_cor1,Type2}
			%% Line 3280
			<'no','no'> when 'true' ->
			    call 'erlang':'throw'
				({'mismatch',_cor1,_cor0})
			( <_fol804,_fol805> when 'true' ->
			      let <_cor4> = {_cor3,_cor2}
			      in  primop 'match_fail'
				      ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'unify_union2',2}}] )
	    -| ['compiler_generated'] )
	end
'unify_union1'/3 =
    %% Line 3283
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c','union',List = [_cor7|[_cor8|[_cor9|[_cor10|[_cor11|[_cor12|[_cor13|[_cor14|[_cor15|[_cor16|[_cor17|[]]]]]]]]]]]],_cor18},T1,T2> when 'true' ->
	      let <_31739> =
		  %% Line 3284
		  apply 'unify_union'/1
		      (List)
	      in  %% Line 3284
		  case _31739 of
		    %% Line 3285
		    <{'yes',Type}> when 'true' ->
			Type
		    %% Line 3286
		    <'no'> when 'true' ->
			call 'erlang':'throw'
			    ({'mismatch',_cor1,_cor0})
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_31739})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'unify_union1',3}}] )
	    -| ['compiler_generated'] )
	end
'unify_union'/1 =
    %% Line 3289
    fun (_cor0) ->
	%% Line 3290
	case _cor0 of
	  <[A|[B|[F|[I|[L|[N|[T|[M|[O|[R|[Map|[]]]]]]]]]]]]> when 'true' ->
	      %% Line 3291
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (O,
			   'none') ->
		    'no'
		%% Line 3292
		<> when 'true' ->
		    let <S> =
			%% Line 3293
			apply 't_opaque_structure'/1
			    (O)
		    in  let <_cor3> =
			    %% Line 3294
			    apply 't_sup'/1
				([A|[B|[F|[I|[L|[N|[T|[M|[S|[R|[Map|[]]]]]]]]]]]])
			in  %% Line 3294
			    {'yes',_cor3}
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'is_opaque_type'/2 =
    %% Line 3302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','opaque',Elements,_cor7},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 3303
		  fun (_cor2) ->
		      apply 'is_opaque_type2'/2
			  (_cor2, _cor0)
	      in  %% Line 3303
		  call 'lists':'any'
		      (_cor4, Elements)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_opaque_type',2}}] )
	    -| ['compiler_generated'] )
	end
'is_opaque_type2'/2 =
    %% Line 3305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'opaque',Mod1,Name1,Args1,_cor10},Opaques> when 'true' ->
	      let <F1> =
		  %% Line 3306
		  fun (_cor5) ->
		      case _cor5 of
			<{'c','opaque',Es,_cor11}> when 'true' ->
			    let <F2> =
				%% Line 3307
				fun (_cor2) ->
				    case _cor2 of
				      <{'opaque',Mod,Name,Args,_cor12}> when 'true' ->
					  %% Line 3308
					  apply 'is_type_name'/6
					      (Mod1, Name1, Args1, Mod, Name, Args)
				      ( <_cor3> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor2})
					      -| [{'function_name',{'-is_opaque_type2/2-fun-0-',1}}] )
					-| ['compiler_generated'] )
				    end
			    in  %% Line 3310
				call 'lists':'any'
				    (F2, Es)
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'-is_opaque_type2/2-fun-1-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3312
		  call 'lists':'any'
		      (F1, _cor0)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_opaque_type2',2}}] )
	    -| ['compiler_generated'] )
	end
'is_type_name'/6 =
    %% Line 3314
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mod,Name,Args1,_cor14,_cor15,Args2>
	      when let <_cor16> =
		    call 'erlang':'=:='
			(_cor2, _cor5)
		in  let <_cor17> =
			call 'erlang':'=:='
			    (_cor1, _cor4)
		    in  call 'erlang':'and'
			    (_cor16, _cor17) ->
	      let <_cor7> =
		  %% Line 3315
		  call 'erlang':'length'
		      (_cor3)
	      in  let <_cor6> =
		      %% Line 3315
		      call 'erlang':'length'
			  (_cor0)
		  in  %% Line 3315
		      call 'erlang':'=:='
			  (_cor7, _cor6)
	  %% Line 3316
	  <Mod1,Name1,Args1,Mod2,Name2,Args2> when 'true' ->
	      %% Line 3317
	      apply 'is_same_type_name2'/6
		  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	end
'unify_tuple_set_and_tuple1'/3 =
    %% Line 3320
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c','tuple_set',[{Arity,List}|[]],_cor9},%% Line 3321
						     {'c','tuple',Elements2,{_cor10,_cor11}},VarMap>
	      when call 'erlang':'=:='
		    (_cor10,
		     Arity) ->
	      let <_cor3> =
		  %% Line 3325
		  apply 'sup_tuple_elements'/1
		      (List)
	      in  let <_12046> =
		      %% Line 3337
		      apply 'unify_lists'/4
			  (_cor3, Elements2, _cor0, [])
		  in  %% Line 3324
		      case _12046 of
			<{NewElements,VarMap1}> when 'true' ->
			    let <_cor5> =
				%% Line 3326
				apply 't_tuple'/1
				    (NewElements)
			    in  %% Line 3326
				{_cor5,VarMap1}
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_12046})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'unify_tuple_set_and_tuple1',3}}] )
	    -| ['compiler_generated'] )
	end
'unify_tuple_set_and_tuple2'/3 =
    %% Line 3328
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c','tuple',Elements2,{Arity,_cor9}},%% Line 3329
						 {'c','tuple_set',[{_cor10,List}|[]],_cor11},VarMap>
	      when call 'erlang':'=:='
		    (_cor10,
		     Arity) ->
	      let <_cor3> =
		  %% Line 3333
		  apply 'sup_tuple_elements'/1
		      (List)
	      in  let <_10558> =
		      %% Line 3337
		      apply 'unify_lists'/4
			  (Elements2, _cor3, _cor0, [])
		  in  %% Line 3332
		      case _10558 of
			<{NewElements,VarMap1}> when 'true' ->
			    let <_cor5> =
				%% Line 3334
				apply 't_tuple'/1
				    (NewElements)
			    in  %% Line 3334
				{_cor5,VarMap1}
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10558})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'unify_tuple_set_and_tuple2',3}}] )
	    -| ['compiler_generated'] )
	end
'unify_lists'/4 =
    %% Line 3339
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],VarMap,Acc> when 'true' ->
	      let <_3915> =
		  %% Line 3340
		  apply 't_unify'/3
		      (T1, T2, _cor1)
	      in  %% Line 3340
		  case _3915 of
		    <{NewT,NewVarMap}> when 'true' ->
			%% Line 3341
			apply 'unify_lists'/4
			    (Left1, Left2, NewVarMap, [NewT|_cor0])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3915})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3342
	  <[],[],VarMap,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 3343
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 3343
		  {_cor5,_cor1}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'unify_lists',4}}] )
	    -| ['compiler_generated'] )
	end
't_subtract_list'/2 =
    %% Line 3452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1,[T2|Left]> when 'true' ->
	      let <_cor2> =
		  %% Line 3453
		  apply 't_subtract'/2
		      (_cor1, T2)
	      in  %% Line 3453
		  apply 't_subtract_list'/2
		      (_cor2, Left)
	  %% Line 3454
	  <T,[]> when 'true' ->
	      _cor1
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_subtract_list',2}}] )
	    -| ['compiler_generated'] )
	end
't_subtract'/2 =
    %% Line 3459
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor93,'any'> when 'true' ->
	      'none'
	  %% Line 3460
	  <_cor94,{'c','var',_cor95,_cor96}> when 'true' ->
	      'none'
	  %% Line 3461
	  <'any',_cor97> when 'true' ->
	      'any'
	  %% Line 3462
	  <T = {'c','var',_cor98,_cor99},_cor100> when 'true' ->
	      _cor1
	  %% Line 3463
	  <T,'unit'> when 'true' ->
	      _cor1
	  %% Line 3464
	  <'unit',_cor101> when 'true' ->
	      'unit'
	  %% Line 3465
	  <'none',_cor102> when 'true' ->
	      'none'
	  %% Line 3466
	  <T,'none'> when 'true' ->
	      _cor1
	  %% Line 3467
	  <{'c','atom',Set1,_cor103},{'c','atom',Set2,_cor104}> when 'true' ->
	      let <_14303> =
		  %% Line 4800
		  case <Set1,Set2> of
		    <_cor5,'any'> when 'true' ->
			'none'
		    %% Line 4801
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4802
		    <S1,S2> when 'true' ->
			let <_31550> =
			    %% Line 4803
			    call 'ordsets':'subtract'
				(Set1, Set2)
			in  %% Line 4803
			    case _31550 of
			      %% Line 4804
			      <[]> when 'true' ->
				  'none'
			      %% Line 4805
			      <S> when 'true' ->
				  _31550
			    end
		  end
	      in  %% Line 3468
		  case _14303 of
		    %% Line 3469
		    <'none'> when 'true' ->
			'none'
		    %% Line 3470
		    <Set> when 'true' ->
			{'c','atom',_14303,'unknown'}
		  end
	  %% Line 3472
	  <{'c','binary',[U1|[B1|[]]],_cor105},{'c','binary',[U2|[B2|[]]],_cor106}> when 'true' ->
	      let <_cor6> =
		  %% Line 3473
		  apply 't_bitstr'/2
		      (U1, B1)
	      in  let <_14729> =
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (U1,
				   0) ->
			    B1
			<>
			    when try
				  let <_cor3> =
				      call 'erlang':'*'
					  (U1, 9)
				  in  call 'erlang':'>='
					  (B1, _cor3)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor5> =
				call 'erlang':'rem'
				    (B1, U1)
			    in  let <_cor4> =
				    call 'erlang':'*'
					(U1, 8)
				in  call 'erlang':'+'
					(_cor5, _cor4)
			<> when 'true' ->
			    B1
		      end
		  in  let <_cor4> =
			  {'c','binary',[U1|[_14729|[]]],'unknown'}
		      in  let <_14266> =
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (U2,
					   0) ->
				    B2
				<>
				    when try
					  let <_cor3> =
					      call 'erlang':'*'
						  (U2, 9)
					  in  call 'erlang':'>='
						  (B2, _cor3)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    let <_cor5> =
					call 'erlang':'rem'
					    (B2, U2)
				    in  let <_19155> =
					    call 'erlang':'*'
						(U2, 8)
					in  call 'erlang':'+'
						(_cor5, _19155)
				<> when 'true' ->
				    B2
			      end
			  in  let <_cor3> =
				  {'c','binary',[U2|[_14266|[]]],'unknown'}
			      in  let <_cor5> =
				      apply 't_inf'/3
					  (_cor4, _cor3, 'universe')
				  in  %% Line 3473
				      apply 'subtract_bin'/2
					  (_cor6, _cor5)
	  %% Line 3474
	  <T1 = {'c','function',[_cor107|[_cor108|[]]],_cor109},T2 = {'c','function',[_cor110|[_cor111|[]]],_cor112}> when 'true' ->
	      let <_39426> =
		  %% Line 3475
		  apply 't_is_subtype'/2
		      (_cor1, _cor0)
	      in  %% Line 3475
		  case _39426 of
		    %% Line 3476
		    <'true'> when 'true' ->
			'none'
		    %% Line 3477
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_39426})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3479
	  <{'c','identifier',Set1,_cor113},{'c','identifier',Set2,_cor114}> when 'true' ->
	      let <_39068> =
		  %% Line 4800
		  case <Set1,Set2> of
		    <_cor5,'any'> when 'true' ->
			'none'
		    %% Line 4801
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4802
		    <S1,S2> when 'true' ->
			let <_31550> =
			    %% Line 4803
			    call 'ordsets':'subtract'
				(Set1, Set2)
			in  %% Line 4803
			    case _31550 of
			      %% Line 4804
			      <[]> when 'true' ->
				  'none'
			      %% Line 4805
			      <S> when 'true' ->
				  _31550
			    end
		  end
	      in  %% Line 3480
		  case _39068 of
		    %% Line 3481
		    <'none'> when 'true' ->
			'none'
		    %% Line 3482
		    <Set> when 'true' ->
			{'c','identifier',_39068,'unknown'}
		  end
	  %% Line 3484
	  <T1 = {'c','opaque',_cor115,_cor116},T2 = {'c','opaque',_cor117,_cor118}> when 'true' ->
	      let <_cor9> =
		  %% Line 3485
		  apply 't_opaque_structure'/1
		      (_cor0)
	      in  %% Line 3485
		  apply 'opaque_subtract'/2
		      (_cor1, _cor9)
	  %% Line 3486
	  <T1 = {'c','opaque',_cor119,_cor120},T2> when 'true' ->
	      %% Line 3487
	      apply 'opaque_subtract'/2
		  (_cor1, _cor0)
	  %% Line 3488
	  <T1,T2 = {'c','opaque',_cor121,_cor122}> when 'true' ->
	      let <_cor10> =
		  %% Line 3489
		  apply 't_opaque_structure'/1
		      (_cor0)
	      in  %% Line 3489
		  apply 't_subtract'/2
		      (_cor1, _cor10)
	  %% Line 3490
	  <{'c','matchstate',[Pres1|[Slots1|[]]],_cor123},{'c','matchstate',[Pres2|[_X_Slots2|[]]],_cor124}> when 'true' ->
	      let <Pres> =
		  %% Line 3491
		  apply 't_subtract'/2
		      (Pres1, Pres2)
	      in  let <_38555> =
		      case Pres of
			<'none'> when 'true' ->
			    'true'
			<_cor2> when 'true' ->
			    'false'
		      end
		  in  %% Line 3492
		      case _38555 of
			%% Line 3493
			<'true'> when 'true' ->
			    'none'
			%% Line 3494
			<'false'> when 'true' ->
			    {'c','matchstate',[Pres|[Slots1|[]]],'unknown'}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_38555})
			  -| ['compiler_generated'] )
		      end
	  %% Line 3496
	  <{'c','matchstate',[Present|[Slots|[]]],_cor125},_cor126> when 'true' ->
	      %% Line 3497
	      {'c','matchstate',[Present|[Slots|[]]],'unknown'}
	  %% Line 3498
	  <{'c','nil',_cor127,_cor128},{'c','nil',_cor129,_cor130}> when 'true' ->
	      %% Line 3499
	      'none'
	  %% Line 3500
	  <{'c','nil',_cor131,_cor132},{'c','list',[_cor133|[_cor134|[]]],'nonempty'}> when 'true' ->
	      %% Line 3501
	      {'c','nil',[],'unknown'}
	  %% Line 3502
	  <{'c','nil',_cor135,_cor136},{'c','list',[_cor137|[_cor138|[]]],_cor139}> when 'true' ->
	      %% Line 3503
	      'none'
	  %% Line 3504
	  <T = {'c','list',[Contents|[Termination|[]]],_X_Size},{'c','nil',_cor140,_cor141}> when 'true' ->
	      %% Line 3505
	      case <> of
		%% Line 3506
		<>
		    when call 'erlang':'=:='
			  (Termination,
			   {'c','nil',[],'unknown'}) ->
		    {'c','list',[Contents|[Termination|[]]],'nonempty'}
		%% Line 3507
		<> when 'true' ->
		    _cor1
	      end
	  %% Line 3509
	  <T = {'c','list',[Contents1|[Termination1|[]]],Size1},%% Line 3510
								{'c','list',[Contents2|[Termination2|[]]],Size2}> when 'true' ->
	      let <_29872> =
		  %% Line 3511
		  apply 't_is_subtype'/2
		      (Contents1, Contents2)
	      in  %% Line 3511
		  case _29872 of
		    %% Line 3512
		    <'true'> when 'true' ->
			let <_27080> =
			    %% Line 3513
			    apply 't_is_subtype'/2
				(Termination1, Termination2)
			in  %% Line 3513
			    case _27080 of
			      %% Line 3514
			      <'true'> when 'true' ->
				  %% Line 3515
				  case <Size1,Size2> of
				    %% Line 3516
				    <'nonempty','unknown'> when 'true' ->
					'none'
				    %% Line 3517
				    <'unknown','nonempty'> when 'true' ->
					{'c','nil',[],'unknown'}
				    %% Line 3518
				    <S,_cor142>
					when call 'erlang':'=:='
					      (Size2,
					       Size1) ->
					'none'
				    ( <_fol811,_fol812> when 'true' ->
					  let <_cor14> = {Size1,Size2}
					  in  primop 'match_fail'
						  ({'case_clause',_cor14})
				      -| ['compiler_generated'] )
				  end
			      %% Line 3520
			      <'false'> when 'true' ->
				  _cor1
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_27080})
				-| ['compiler_generated'] )
			    end
		    %% Line 3525
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_29872})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3530
	  <{'c','number','any','float'},{'c','number','any','float'}> when 'true' ->
	      'none'
	  %% Line 3531
	  <T1 = {'c','number',_cor143,_cor144},{'c','number','any','float'}> when 'true' ->
	      apply 't_inf'/3
		  (_cor1, {'c','number','any','integer'}, 'universe')
	  %% Line 3532
	  <{'c','number','any','float'},{'c','number',_X_Set,Tag}> when 'true' ->
	      %% Line 3533
	      case Tag of
		%% Line 3534
		<'unknown'> when 'true' ->
		    'none'
		%% Line 3535
		<_cor145> when 'true' ->
		    {'c','number','any','float'}
	      end
	  %% Line 3537
	  <{'c','number',_cor146,_cor147},{'c','number','any','unknown'}> when 'true' ->
	      'none'
	  %% Line 3538
	  <T1 = {'c','number',_cor148,_cor149},{'c','number','any','integer'}> when 'true' ->
	      apply 't_inf'/3
		  ({'c','number','any','float'}, _cor1, 'universe')
	  %% Line 3539
	  <{'c','number',{'int_set',Set1},'integer'},{'c','number',{'int_set',Set2},'integer'}> when 'true' ->
	      let <_10977> =
		  %% Line 4800
		  case <Set1,Set2> of
		    <_cor5,'any'> when 'true' ->
			'none'
		    %% Line 4801
		    <'any',_cor6> when 'true' ->
			'any'
		    %% Line 4802
		    <S1,S2> when 'true' ->
			let <_31550> =
			    %% Line 4803
			    call 'ordsets':'subtract'
				(Set1, Set2)
			in  %% Line 4803
			    case _31550 of
			      %% Line 4804
			      <[]> when 'true' ->
				  'none'
			      %% Line 4805
			      <S> when 'true' ->
				  _31550
			    end
		  end
	      in  %% Line 3540
		  case _10977 of
		    %% Line 3541
		    <'none'> when 'true' ->
			'none'
		    %% Line 3542
		    <Set> when 'true' ->
			{'c','number',{'int_set',_10977},'integer'}
		  end
	  %% Line 3544
	  <T1 = {'c','number',{'int_rng',From1,To1},'integer'},T2 = {'c','number',{'int_rng',_cor150,_cor151},'integer'}> when 'true' ->
	      let <_6628> =
		  apply 't_inf'/3
		      (_cor1, _cor0, 'universe')
	      in  %% Line 3545
		  case _6628 of
		    %% Line 3546
		    <'none'> when 'true' ->
			_cor1
		    %% Line 3547
		    <{'c','number',{'int_rng',_cor152,_cor153},'integer'}>
			when let <_cor154> =
			      call 'erlang':'=:='
				  (_cor152, From1)
			  in  let <_cor155> =
				  call 'erlang':'=:='
				      (_cor153, To1)
			      in  call 'erlang':'and'
				      (_cor154, _cor155) ->
			'none'
		    %% Line 3548
		    <{'c','number',{'int_rng','neg_inf',To},'integer'}> when 'true' ->
			let <_cor20> =
			    call 'erlang':'+'
				(To, 1)
			in  apply 't_from_range'/2
				(_cor20, To1)
		    %% Line 3549
		    <{'c','number',{'int_rng',From,'pos_inf'},'integer'}> when 'true' ->
			let <_cor21> =
			    call 'erlang':'-'
				(From, 1)
			in  apply 't_from_range'/2
				(From1, _cor21)
		    %% Line 3550
		    <{'c','number',{'int_rng',From,To},'integer'}> when 'true' ->
			let <_cor24> =
			    call 'erlang':'-'
				(From, 1)
			in  let <_cor25> =
				apply 't_from_range'/2
				    (From1, _cor24)
			    in  let <_cor22> =
				    %% Line 3551
				    call 'erlang':'+'
					(To, 1)
				in  let <_cor23> =
					%% Line 3551
					apply 't_from_range'/2
					    (_cor22, To)
				    in  apply 't_sup'/2
					    (_cor25, _cor23)
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6628})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3553
	  <T1 = {'c','number',{'int_rng',From,To},'integer'},{'c','number',{'int_set',Set},'integer'}> when 'true' ->
	      let <_20020> =
		  %% Line 4774
		  call 'ordsets':'is_element'
		      (From, Set)
	      in  let <_cor28> =
		      %% Line 3554
		      case _20020 of
			%% Line 3555
			<'true'> when 'true' ->
			    call 'erlang':'+'
				(From, 1)
			%% Line 3556
			<'false'> when 'true' ->
			    From
			( <_cor27> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_20020})
			  -| ['compiler_generated'] )
		      end
		  in  let <_3162> =
			  %% Line 4774
			  call 'ordsets':'is_element'
			      (To, Set)
		      in  let <_cor31> =
			      %% Line 3558
			      case _3162 of
				%% Line 3559
				<'true'> when 'true' ->
				    call 'erlang':'-'
					(To, 1)
				%% Line 3560
				<'false'> when 'true' ->
				    To
				( <_cor30> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_3162})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 3562
			      case <> of
				<>
				    when let <_cor33> =
					  call 'erlang':'=:='
					      (_cor28, From)
				      in  let <_cor34> =
					      call 'erlang':'=:='
						  (_cor31, To)
					  in  call 'erlang':'and'
						  (_cor33, _cor34) ->
				    _cor1
				%% Line 3563
				<> when 'true' ->
				    apply 't_from_range'/2
					(_cor28, _cor31)
			      end
	  %% Line 3565
	  <{'c','number',{'int_set',Set},'integer'},{'c','number',{'int_rng',From,To},'integer'}> when 'true' ->
	      let <_cor40> =
		  %% Line 3566
		  fun (_cor38) ->
		      let <_cor37> =
			  ( case <> of
			      ( <>
				    when call 'erlang':'=<'
					  (_cor38,
					   From) ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call 'erlang':'>='
					(_cor38, To)
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  call 'erlang':'not'
			      (_cor37)
	      in  let <_11577> =
		      %% Line 4818
		      call 'ordsets':'filter'
			  (_cor40, Set)
		  in  let <_11269> =
			  %% Line 4818
			  case _11577 of
			    %% Line 4819
			    <[]> when 'true' ->
				'none'
			    %% Line 4820
			    <NewSet> when 'true' ->
				_11577
			  end
		      in  %% Line 3566
			  case _11269 of
			    %% Line 3567
			    <'none'> when 'true' ->
				'none'
			    %% Line 3568
			    <NewSet> when 'true' ->
				{'c','number',{'int_set',_11269},'integer'}
			  end
	  %% Line 3570
	  <T1 = {'c','number','any','integer'},{'c','number',_cor156,'integer'}> when 'true' ->
	      _cor1
	  %% Line 3571
	  <T1 = {'c','number',_cor157,_cor158},{'c','number',_cor159,_cor160}> when 'true' ->
	      _cor1
	  %% Line 3572
	  <{'c','tuple',_cor161,{_cor162,_cor163}},{'c','tuple','any',{'any','any'}}> when 'true' ->
	      'none'
	  %% Line 3573
	  <{'c','tuple_set',_cor164,_cor165},{'c','tuple','any',{'any','any'}}> when 'true' ->
	      'none'
	  %% Line 3574
	  <T1 = {'c','tuple','any',{'any','any'}},{'c','tuple_set',_cor166,_cor167}> when 'true' ->
	      _cor1
	  %% Line 3575
	  <T1 = {'c','tuple',Elements1,{Arity1,_X_Tag1}},%% Line 3576
							 {'c','tuple',Elements2,{Arity2,_X_Tag2}}> when 'true' ->
	      %% Line 3577
	      case <> of
		<>
		    when call 'erlang':'=/='
			  (Arity1,
			   Arity2) ->
		    _cor1
		%% Line 3578
		<>
		    when call 'erlang':'=:='
			  (Arity1,
			   Arity2) ->
		    let <NewElements> =
			%% Line 3640
			apply 't_subtract_lists'/3
			    (Elements1, Elements2, [])
		    in  let <_cor47> =
			    %% Line 3580
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor45) ->
					  case _cor45 of
					    <[E|_cor44]>
						when call 'erlang':'=/='
						      (E,
						       'none') ->
						let <_cor46> =
						    apply 'lc$^0'/1
							(_cor44)
						in  ( [E|_cor46]
						      -| ['compiler_generated'] )
					    ( <[E|_cor44]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor44)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_21097> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor45})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  case NewElements of
				    <[E|_cor44]>
					when call 'erlang':'=/='
					      (E,
					       'none') ->
					let <_cor46> =
					    apply 'lc$^0'/1
						(_cor44)
					in  ( [E|_cor46]
					      -| ['compiler_generated'] )
				    ( <[E|_cor44]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor44)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_21097> when 'true' ->
					  primop 'match_fail'
					      ({'function_clause',NewElements})
				      -| ['compiler_generated'] )
				  end
			      -| ['list_comprehension'] )
			in  %% Line 3580
			    case _cor47 of
			      %% Line 3581
			      <[]> when 'true' ->
				  'none'
			      %% Line 3582
			      <[_cor168|[]]> when 'true' ->
				  let <_cor48> =
				      %% Line 3681
				      apply 'replace_nontrivial_element'/3
					  (Elements1, NewElements, [])
				  in  apply 't_tuple'/1
					  (_cor48)
			      %% Line 3583
			      <_cor169> when 'true' ->
				  _cor1
			    end
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 3586
	  <T1 = {'c','tuple_set',List1,_cor170},T2 = {'c','tuple',_cor171,{Arity,_cor172}}> when 'true' ->
	      let <_6974> =
		  %% Line 3587
		  call 'orddict':'find'
		      (Arity, List1)
	      in  %% Line 3587
		  case _6974 of
		    %% Line 3588
		    <'error'> when 'true' ->
			_cor1
		    %% Line 3589
		    <{'ok',List2}> when 'true' ->
			let <_cor55> =
			    %% Line 3590
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor53) ->
					  case _cor53 of
					    <[{_X_Arity,Tuple}|_cor51]> when 'true' ->
						let <_cor54> =
						    apply 'lc$^1'/1
							(_cor51)
						in  ( [Tuple|_cor54]
						      -| ['compiler_generated'] )
					    ( <[_cor50|_cor51]> when 'true' ->
						  apply 'lc$^1'/1
						      (_cor51)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_6857> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor53})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor52> =
				      call 'orddict':'erase'
					  (Arity, List1)
				  in  case _cor52 of
					<[{_X_Arity,Tuple}|_cor51]> when 'true' ->
					    let <_cor54> =
						apply 'lc$^1'/1
						    (_cor51)
					    in  ( [Tuple|_cor54]
						  -| ['compiler_generated'] )
					( <[_cor50|_cor51]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor51)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_6857> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor52})
					  -| ['compiler_generated'] )
				      end
			      -| ['list_comprehension'] )
			in  let <TuplesLeft1> =
				%% Line 3591
				call 'lists':'append'
				    (_cor55)
			    in  let <_cor63> =
				    %% Line 3592
				    ( letrec
					  'lc$^2'/1 =
					      fun (_cor60) ->
						  case _cor60 of
						    <[L|_cor59]> when 'true' ->
							let <_cor61> =
							    apply 't_subtract'/2
								(L, _cor0)
							in  let <_cor62> =
								apply 'lc$^2'/1
								    (_cor59)
							    in  ( [_cor61|_cor62]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							TuplesLeft1
						    ( <_7051> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor60})
							    -| [{'function_name',{'lc$^2',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  case List2 of
					    <[L|_cor59]> when 'true' ->
						let <_cor61> =
						    apply 't_subtract'/2
							(L, _cor0)
						in  let <_cor62> =
							apply 'lc$^2'/1
							    (_cor59)
						    in  ( [_cor61|_cor62]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						TuplesLeft1
					    ( <_7051> when 'true' ->
						  primop 'match_fail'
						      ({'function_clause',List2})
					      -| ['compiler_generated'] )
					  end
				      -| ['list_comprehension'] )
				in  %% Line 3592
				    apply 't_sup'/1
					(_cor63)
		    ( <_cor64> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6974})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3594
	  <T1 = {'c','tuple',_cor173,{Arity,_cor174}},{'c','tuple_set',List1,_cor175}> when 'true' ->
	      let <_22542> =
		  %% Line 3595
		  call 'orddict':'find'
		      (Arity, List1)
	      in  %% Line 3595
		  case _22542 of
		    %% Line 3596
		    <'error'> when 'true' ->
			_cor1
		    %% Line 3597
		    <{'ok',List2}> when 'true' ->
			let <_cor70> =
			    ( letrec
				  'lc$^3'/1 =
				      fun (_cor67) ->
					  case _cor67 of
					    <[L|_cor66]> when 'true' ->
						let <_cor68> =
						    apply 't_subtract'/2
							(_cor1, L)
						in  let <_cor69> =
							apply 'lc$^3'/1
							    (_cor66)
						    in  ( [_cor68|_cor69]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_14072> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor67})
						    -| [{'function_name',{'lc$^3',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  case List2 of
				    <[L|_cor66]> when 'true' ->
					let <_cor68> =
					    apply 't_subtract'/2
						(_cor1, L)
					in  let <_cor69> =
						apply 'lc$^3'/1
						    (_cor66)
					    in  ( [_cor68|_cor69]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_14072> when 'true' ->
					  primop 'match_fail'
					      ({'function_clause',List2})
				      -| ['compiler_generated'] )
				  end
			      -| ['list_comprehension'] )
			in  apply 't_inf'/1
				(_cor70)
		    ( <_cor71> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_22542})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3599
	  <T1 = {'c','tuple_set',_cor176,_cor177},T2 = {'c','tuple_set',_cor178,_cor179}> when 'true' ->
	      let <_cor78> =
		  %% Line 3600
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor75) ->
				case _cor75 of
				  <[T|_cor73]> when 'true' ->
				      let <_cor76> =
					  apply 't_subtract'/2
					      (T, _cor0)
				      in  let <_cor77> =
					      apply 'lc$^4'/1
						  (_cor73)
					  in  ( [_cor76|_cor77]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_35123> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor75})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor74> =
			    apply 't_tuple_subtypes'/1
				(_cor1)
			in  case _cor74 of
			      <[T|_cor73]> when 'true' ->
				  let <_cor76> =
				      apply 't_subtract'/2
					  (T, _cor0)
				  in  let <_cor77> =
					  apply 'lc$^4'/1
					      (_cor73)
				      in  ( [_cor76|_cor77]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_35123> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor74})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  %% Line 3600
		  apply 't_sup'/1
		      (_cor78)
	  %% Line 3601
	  <T1 = {'c','product',Elements1,_cor180},{'c','product',Elements2,_cor181}> when 'true' ->
	      let <Arity1> =
		  %% Line 3602
		  call 'erlang':'length'
		      (Elements1)
	      in  let <Arity2> =
		      %% Line 3603
		      call 'erlang':'length'
			  (Elements2)
		  in  %% Line 3604
		      case <> of
			<>
			    when call 'erlang':'=/='
				  (Arity1,
				   Arity2) ->
			    _cor1
			%% Line 3605
			<>
			    when call 'erlang':'=:='
				  (Arity1,
				   Arity2) ->
			    let <NewElements> =
				%% Line 3640
				apply 't_subtract_lists'/3
				    (Elements1, Elements2, [])
			    in  let <_cor86> =
				    %% Line 3607
				    ( letrec
					  'lc$^5'/1 =
					      fun (_cor84) ->
						  case _cor84 of
						    <[E|_cor83]>
							when call 'erlang':'=/='
							      (E,
							       'none') ->
							let <_cor85> =
							    apply 'lc$^5'/1
								(_cor83)
							in  ( [E|_cor85]
							      -| ['compiler_generated'] )
						    ( <[E|_cor83]> when 'true' ->
							  apply 'lc$^5'/1
							      (_cor83)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_9952> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor84})
							    -| [{'function_name',{'lc$^5',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  case NewElements of
					    <[E|_cor83]>
						when call 'erlang':'=/='
						      (E,
						       'none') ->
						let <_cor85> =
						    apply 'lc$^5'/1
							(_cor83)
						in  ( [E|_cor85]
						      -| ['compiler_generated'] )
					    ( <[E|_cor83]> when 'true' ->
						  apply 'lc$^5'/1
						      (_cor83)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_9952> when 'true' ->
						  primop 'match_fail'
						      ({'function_clause',NewElements})
					      -| ['compiler_generated'] )
					  end
				      -| ['list_comprehension'] )
				in  %% Line 3607
				    case _cor86 of
				      %% Line 3608
				      <[]> when 'true' ->
					  'none'
				      %% Line 3609
				      <[_cor182|[]]> when 'true' ->
					  let <_cor87> =
					      %% Line 3681
					      apply 'replace_nontrivial_element'/3
						  (Elements1, NewElements, [])
					  in  case _cor87 of
						<[T|[]]> when 'true' ->
						    T
						<Types>
						    when call 'erlang':'is_list'
							  (_cor87) ->
						    {'c','product',_cor87,'unknown'}
						( <_36015> when 'true' ->
						      primop 'match_fail'
							  ({'function_clause',_cor87})
						  -| ['compiler_generated'] )
					      end
				      %% Line 3610
				      <_cor183> when 'true' ->
					  _cor1
				    end
			( <> when 'true' ->
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
	  %% Line 3613
	  <T = {'c','map',_cor184,_cor185},_cor186> when 'true' ->
	      _cor1
	  %% Line 3615
	  <{'c','product',P1,_cor187},_cor188> when 'true' ->
	      %% Line 3616
	      {'c','product',P1,'unknown'}
	  %% Line 3617
	  <T,{'c','product',_cor189,_cor190}> when 'true' ->
	      _cor1
	  %% Line 3619
	  <{'c','union',U1 = [_cor191|[_cor192|[_cor193|[_cor194|[_cor195|[_cor196|[_cor197|[_cor198|[_cor199|[_cor200|[_cor201|[]]]]]]]]]]]],_cor202},{'c','union',U2 = [_cor203|[_cor204|[_cor205|[_cor206|[_cor207|[_cor208|[_cor209|[_cor210|[_cor211|[_cor212|[_cor213|[]]]]]]]]]]]],_cor214}> when 'true' ->
	      %% Line 3620
	      apply 'subtract_union'/2
		  (U1, U2)
	  %% Line 3621
	  <T1,T2> when 'true' ->
	      let <_38436> =
		  %% Line 3622
		  apply 'force_union'/1
		      (_cor1)
	      in  %% Line 3622
		  case _38436 of
		    <{'c','union',U1 = [_cor215|[_cor216|[_cor217|[_cor218|[_cor219|[_cor220|[_cor221|[_cor222|[_cor223|[_cor224|[_cor225|[]]]]]]]]]]]],_cor226}> when 'true' ->
			let <_35440> =
			    %% Line 3623
			    apply 'force_union'/1
				(_cor0)
			in  %% Line 3623
			    case _35440 of
			      <{'c','union',U2 = [_cor227|[_cor228|[_cor229|[_cor230|[_cor231|[_cor232|[_cor233|[_cor234|[_cor235|[_cor236|[_cor237|[]]]]]]]]]]]],_cor238}> when 'true' ->
				  %% Line 3624
				  apply 'subtract_union'/2
				      (U1, U2)
			      ( <_cor90> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_35440})
				-| ['compiler_generated'] )
			    end
		    ( <_cor89> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_38436})
		      -| ['compiler_generated'] )
		  end
	end
'opaque_subtract'/2 =
    %% Line 3628
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','opaque',Set1,_cor20},T2> when 'true' ->
	      let <_cor14> =
		  %% Line 3629
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[T1 = %% Line 3630
					 {'opaque',_cor21,_cor22,_cor23,S1}|_cor3]> when 'true' ->
				      let <_cor6> =
					  %% Line 3631
					  apply 't_subtract'/2
					      (S1, _cor0)
				      in  let <_13326> =
					      case _cor6 of
						<'none'> when 'true' ->
						    'true'
						<_cor2> when 'true' ->
						    'false'
					      end
					  in  %% Line 3631
					      ( case _13326 of
						  <'false'> when 'true' ->
						      let <_cor11> =
							  call 'erlang':'setelement'
							      (5, T1, _cor6)
						      in  let <_cor12> =
							      apply 'lc$^0'/1
								  (_cor3)
							  in  ( [_cor11|_cor12]
								-| ['compiler_generated'] )
						  ( <'true'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor3)
						    -| ['compiler_generated'] )
						  ( <_cor_variable> when 'true' ->
							call 'erlang':'error'
							    ('badarg')
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					%% Line 3630
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_15128> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set1)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  %% Line 3632
		  case _cor14 of
		    %% Line 3633
		    <[]> when 'true' ->
			'none'
		    %% Line 3634
		    <_cor29> when 'true' ->
			let <_cor16> =
			    call 'ordsets':'from_list'
				(_cor14)
			in  {'c','opaque',_cor16,'unknown'}
		  end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'opaque_subtract',2}}] )
	    -| ['compiler_generated'] )
	end
't_subtract_lists'/3 =
    %% Line 3644
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3645
		  apply 't_subtract'/2
		      (T1, T2)
	      in  %% Line 3645
		  apply 't_subtract_lists'/3
		      (Left1, Left2, [_cor3|_cor0])
	  %% Line 3646
	  <[],[],Acc> when 'true' ->
	      %% Line 3647
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_subtract_lists',3}}] )
	    -| ['compiler_generated'] )
	end
'subtract_union'/2 =
    %% Line 3651
    fun (_cor1,_cor0) ->
	%% Line 3652
	case _cor1 of
	  <[A1|[B1|[F1|[I1|[L1|[N1|[T1|[M1|[O1|[R1|[Map1|[]]]]]]]]]]]]> when 'true' ->
	      %% Line 3653
	      case _cor0 of
		<[A2|[B2|[F2|[I2|[L2|[N2|[T2|[M2|[O2|[R2|[Map2|[]]]]]]]]]]]]> when 'true' ->
		    let <List1> =
			%% Line 3654
			[A1|[B1|[F1|[I1|[L1|[N1|[T1|[M1|['none'|[R1|[Map1|[]]]]]]]]]]]]
		    in  let <List2> =
			    %% Line 3655
			    [A2|[B2|[F2|[I2|[L2|[N2|[T2|[M2|['none'|[R2|[Map2|[]]]]]]]]]]]]
			in  let <Sub1> =
				%% Line 3656
				apply 'subtract_union'/4
				    (List1, List2, 0, [])
			    in  let <_cor8> =
				    %% Line 3657
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(O1,
						 'none') ->
					  O1
				      %% Line 3658
				      <> when 'true' ->
					  case _cor0 of
					    <[_cor15|[_cor16|[_cor17|[_cor18|[_cor19|[_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[]]]]]]]]]]]]> when 'true' ->
						apply 't_subtract'/2
						    (O1, {'c','union',_cor0,'unknown'})
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor0})
					      -| ['compiler_generated'] )
					  end
				    end
				in  let <_cor11> =
					%% Line 3660
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (O2,
						     'none') ->
					      Sub1
					  %% Line 3661
					  <> when 'true' ->
					      let <_cor10> =
						  apply 't_opaque_structure'/1
						      (O2)
					      in  apply 't_subtract'/2
						      (Sub1, _cor10)
					end
				    in  %% Line 3663
					apply 't_sup'/2
					    (_cor8, _cor11)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'subtract_union'/4 =
    %% Line 3667
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],N,Acc> when 'true' ->
	      let <_37499> =
		  %% Line 3668
		  apply 't_subtract'/2
		      (T1, T2)
	      in  %% Line 3668
		  case _37499 of
		    %% Line 3669
		    <'none'> when 'true' ->
			apply 'subtract_union'/4
			    (Left1, Left2, _cor1, ['none'|_cor0])
		    %% Line 3670
		    <T> when 'true' ->
			let <_cor4> =
			    call 'erlang':'+'
				(_cor1, 1)
			in  apply 'subtract_union'/4
				(Left1, Left2, _cor4, [_37499|_cor0])
		  end
	  %% Line 3672
	  <[],[],0,_X_Acc> when 'true' ->
	      %% Line 3673
	      'none'
	  %% Line 3674
	  <[],[],1,Acc> when 'true' ->
	      let <_cor10> =
		  %% Line 3675
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[X|_cor7]>
				      when call 'erlang':'=/='
					    (X,
					     'none') ->
				      let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [X|_cor9]
					    -| ['compiler_generated'] )
				  ( <[X|_cor7]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor7)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_5983> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case _cor0 of
			  <[X|_cor7]>
			      when call 'erlang':'=/='
				    (X,
				     'none') ->
			      let <_cor9> =
				  apply 'lc$^0'/1
				      (_cor7)
			      in  ( [X|_cor9]
				    -| ['compiler_generated'] )
			  ( <[X|_cor7]> when 'true' ->
				apply 'lc$^0'/1
				    (_cor7)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_5983> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',_cor0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3675
		  case _cor10 of
		    <[T|[]]> when 'true' ->
			T
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3677
	  <[],[],N,Acc>
	      when let <_cor12> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor13> =
			call 'erlang':'>'
			    (_cor1, 1)
		    in  call 'erlang':'and'
			    (_cor12, _cor13) ->
	      let <_cor15> =
		  %% Line 3678
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 3678
		  case _cor15 of
		    <[_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[_cor30|[]]]]]]]]]]]]> when 'true' ->
			{'c','union',_cor15,'unknown'}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor15})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'subtract_union',4}}] )
	    -| ['compiler_generated'] )
	end
'replace_nontrivial_element'/3 =
    %% Line 3683
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T1|Left1],['none'|Left2],Acc> when 'true' ->
	      %% Line 3684
	      apply 'replace_nontrivial_element'/3
		  (Left1, Left2, [T1|_cor0])
	  %% Line 3685
	  <[_cor7|Left1],[T2|_cor8],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3686
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 3686
		  call 'erlang':'++'
		      (_cor3, [T2|Left1])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'replace_nontrivial_element',3}}] )
	    -| ['compiler_generated'] )
	end
'subtract_bin'/2 =
    %% Line 3688
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','binary',[U1|[B1|[]]],_cor9},{'c','binary',[_cor10|[_cor11|[]]],_cor12}>
	      when let <_cor13> =
		    call 'erlang':'=:='
			(_cor10, U1)
		in  let <_cor14> =
			call 'erlang':'=:='
			    (_cor11, B1)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      %% Line 3689
	      'none'
	  %% Line 3690
	  <{'c','binary',[U1|[B1|[]]],_cor15},'none'> when 'true' ->
	      %% Line 3691
	      apply 't_bitstr'/2
		  (U1, B1)
	  %% Line 3692
	  <{'c','binary',[U1|[B1|[]]],_cor16},{'c','binary',[0|[_cor17|[]]],_cor18}>
	      when call 'erlang':'=:='
		    (_cor17,
		     B1) ->
	      let <_cor2> =
		  %% Line 3693
		  call 'erlang':'+'
		      (B1, U1)
	      in  %% Line 3693
		  apply 't_bitstr'/2
		      (U1, _cor2)
	  %% Line 3694
	  <{'c','binary',[U1|[B1|[]]],_cor19},{'c','binary',[_cor20|[B2|[]]],_cor21}>
	      when call 'erlang':'=:='
		    (_cor20,
		     U1) ->
	      %% Line 3695
	      case <> of
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'+'
				  (B1, U1)
			  in  call 'erlang':'=/='
				  (_cor3, B2)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    {'c','binary',[0|[B1|[]]],'unknown'}
		%% Line 3696
		<> when 'true' ->
		    apply 't_bitstr'/2
			(U1, B1)
	      end
	  %% Line 3698
	  <{'c','binary',[U1|[B1|[]]],_cor22},{'c','binary',[U2|[B2|[]]],_cor23}> when 'true' ->
	      %% Line 3699
	      case <> of
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'*'
				  (2, U1)
			  in  call 'erlang':'=:='
				  (_cor4, U2)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 3700
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(B1,
				 B2) ->
			  let <_cor5> =
			      %% Line 3701
			      call 'erlang':'+'
				  (B1, U1)
			  in  %% Line 3701
			      apply 't_bitstr'/2
				  (U2, _cor5)
		      %% Line 3702
		      <>
			  when try
				let <_cor6> =
				    call 'erlang':'+'
					(B1, U1)
				in  call 'erlang':'=:='
					(_cor6, B2)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 3703
			  apply 't_bitstr'/2
			      (U2, B1)
		      %% Line 3704
		      <> when 'true' ->
			  %% Line 3705
			  apply 't_bitstr'/2
			      (U1, B1)
		    end
		%% Line 3707
		<> when 'true' ->
		    %% Line 3708
		    apply 't_bitstr'/2
			(U1, B1)
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'subtract_bin',2}}] )
	    -| ['compiler_generated'] )
	end
't_is_equal'/2 =
    %% Line 3717
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_cor4>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      'true'
	  %% Line 3718
	  <_cor5,_cor6> when 'true' ->
	      'false'
	end
't_is_subtype'/2 =
    %% Line 3722
    fun (_cor1,_cor0) ->
	let <Inf> =
	    apply 't_inf'/3
		(_cor1, _cor0, 'universe')
	in  %% Line 3724
	    apply 'subtype_is_equal'/2
		(_cor1, Inf)
'subtype_is_equal'/2 =
    %% Line 3728
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,_cor8>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      'true'
	  %% Line 3729
	  <T1,T2> when 'true' ->
	      let <_37243> =
		  apply 't_contains_opaque'/2
		      (_cor1, [])
	      in  let <_cor5> =
		      %% Line 3730
		      case _37243 of
			%% Line 3731
			<'true'> when 'true' ->
			    %% Line 3748
			    apply 't_unopaque'/2
				(_cor1, 'universe')
			%% Line 3732
			<'false'> when 'true' ->
			    _cor1
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_37243})
			  -| ['compiler_generated'] )
		      end
		  in  let <_23045> =
			  apply 't_contains_opaque'/2
			      (_cor0, [])
		      in  let <_cor3> =
			      %% Line 3734
			      case _23045 of
				%% Line 3735
				<'true'> when 'true' ->
				    %% Line 3748
				    apply 't_unopaque'/2
					(_cor0, 'universe')
				%% Line 3736
				<'false'> when 'true' ->
				    _cor0
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_23045})
				  -| ['compiler_generated'] )
			      end
			  in  case <_cor5,_cor3> of
				<T,_cor4>
				    when call 'erlang':'=:='
					  (_cor3,
					   _cor5) ->
				    'true'
				<_15468,_cor6> when 'true' ->
				    'false'
			      end
	end
't_is_instance'/2 =
    %% Line 3742
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3743
	    apply 't_unopaque'/1
		(_cor0)
	in  %% Line 3743
	    apply 't_is_subtype'/2
		(_cor1, _cor2)
't_unopaque'/1 =
    %% Line 3747
    fun (_cor0) ->
	%% Line 3748
	apply 't_unopaque'/2
	    (_cor0, 'universe')
't_unopaque'/2 =
    %% Line 3752
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = {'c','opaque',_cor47,_cor48},Opaques> when 'true' ->
	      let <_cor4> =
		  %% Line 3753
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (_cor0,
				   'universe') ->
			    'true'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    apply 'is_opaque_type'/2
				(_cor1, _cor0)
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 3753
		  case _cor4 of
		    %% Line 3754
		    <'true'> when 'true' ->
			let <_cor5> =
			    apply 't_opaque_structure'/1
				(_cor1)
			in  apply 't_unopaque'/2
				(_cor5, _cor0)
		    %% Line 3755
		    <'false'> when 'true' ->
			_cor1
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3757
	  <{'c','list',[ElemT|[Termination|[]]],Sz},Opaques> when 'true' ->
	      let <_cor7> =
		  %% Line 3758
		  apply 't_unopaque'/2
		      (ElemT, _cor0)
	      in  let <_cor8> =
		      %% Line 3758
		      apply 't_unopaque'/2
			  (Termination, _cor0)
		  in  %% Line 3758
		      {'c','list',[_cor7|[_cor8|[]]],Sz}
	  %% Line 3759
	  <T = {'c','tuple','any',{_cor49,_cor50}},_cor51> when 'true' ->
	      _cor1
	  %% Line 3760
	  <{'c','tuple',ArgTs,{Sz,Tag}},Opaques>
	      when call 'erlang':'is_list'
		    (ArgTs) ->
	      let <_cor14> =
		  %% Line 3761
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor11) ->
				case _cor11 of
				  <[A|_cor10]> when 'true' ->
				      let <_cor12> =
					  apply 't_unopaque'/2
					      (A, _cor0)
				      in  let <_cor13> =
					      apply 'lc$^0'/1
						  (_cor10)
					  in  ( [_cor12|_cor13]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_12605> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor11})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case ArgTs of
			  <[A|_cor10]> when 'true' ->
			      let <_cor12> =
				  apply 't_unopaque'/2
				      (A, _cor0)
			      in  let <_cor13> =
				      apply 'lc$^0'/1
					  (_cor10)
				  in  ( [_cor12|_cor13]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_12605> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',ArgTs})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3762
		  {'c','tuple',_cor14,{Sz,Tag}}
	  %% Line 3763
	  <{'c','tuple_set',Set,_cor52},Opaques> when 'true' ->
	      let <_cor26> =
		  %% Line 3764
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor18) ->
				case _cor18 of
				  <[%% Line 3765
				    {Sz,Tuples}|_cor17]> when 'true' ->
				      let <_cor24> =
					  ( letrec
						'lc$^2'/1 =
						    fun (_cor21) ->
							case _cor21 of
							  <[T|_cor20]> when 'true' ->
							      let <_cor22> =
								  apply 't_unopaque'/2
								      (T, _cor0)
							      in  let <_cor23> =
								      apply 'lc$^2'/1
									  (_cor20)
								  in  ( [_cor22|_cor23]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_32380> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor21})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  case Tuples of
						  <[T|_cor20]> when 'true' ->
						      let <_cor22> =
							  apply 't_unopaque'/2
							      (T, _cor0)
						      in  let <_cor23> =
							      apply 'lc$^2'/1
								  (_cor20)
							  in  ( [_cor22|_cor23]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_32380> when 'true' ->
							primop 'match_fail'
							    ({'function_clause',Tuples})
						    -| ['compiler_generated'] )
						end
					    -| ['list_comprehension'] )
				      in  let <_cor25> =
					      %% Line 3765
					      apply 'lc$^1'/1
						  (_cor17)
					  in  ( [{Sz,_cor24}|_cor25]
						-| ['compiler_generated'] )
				  ( <[_cor16|_cor17]> when 'true' ->
					%% Line 3765
					apply 'lc$^1'/1
					    (_cor17)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_16103> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor18})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Set)
		    -| ['list_comprehension'] )
	      in  %% Line 3766
		  {'c','tuple_set',_cor26,'unknown'}
	  %% Line 3767
	  <{'c','product',Types,_cor53},Opaques> when 'true' ->
	      let <_cor33> =
		  %% Line 3768
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor30) ->
				case _cor30 of
				  <[T|_cor29]> when 'true' ->
				      let <_cor31> =
					  apply 't_unopaque'/2
					      (T, _cor0)
				      in  let <_cor32> =
					      apply 'lc$^3'/1
						  (_cor29)
					  in  ( [_cor31|_cor32]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_30690> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor30})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case Types of
			  <[T|_cor29]> when 'true' ->
			      let <_cor31> =
				  apply 't_unopaque'/2
				      (T, _cor0)
			      in  let <_cor32> =
				      apply 'lc$^3'/1
					  (_cor29)
				  in  ( [_cor31|_cor32]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_30690> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Types})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 3768
		  {'c','product',_cor33,'unknown'}
	  %% Line 3769
	  <{'c','function',[Domain|[Range|[]]],_cor54},Opaques> when 'true' ->
	      let <_cor34> =
		  %% Line 3770
		  apply 't_unopaque'/2
		      (Domain, _cor0)
	      in  let <_cor35> =
		      %% Line 3770
		      apply 't_unopaque'/2
			  (Range, _cor0)
		  in  %% Line 3770
		      {'c','function',[_cor34|[_cor35|[]]],'unknown'}
	  %% Line 3771
	  <{'c','union',[_cor55 = A|[_cor56 = B|[_cor57 = F|[_cor58 = I|[_cor59 = L|[_cor60 = N|[_cor61 = T|[_cor62 = M|[_cor63 = O|[_cor64 = R|[_cor65 = Map]]]]]]]]]]],_cor66},Opaques> when 'true' ->
	      let <UL> =
		  %% Line 3772
		  apply 't_unopaque'/2
		      (L, _cor0)
	      in  let <UT> =
		      %% Line 3773
		      apply 't_unopaque'/2
			  (T, _cor0)
		  in  let <UF> =
			  %% Line 3774
			  apply 't_unopaque'/2
			      (F, _cor0)
		      in  let <UMap> =
			      %% Line 3775
			      apply 't_unopaque'/2
				  (Map, _cor0)
			  in  let <_15028> =
				  %% Line 3776
				  apply 't_unopaque'/2
				      (O, _cor0)
			      in  let <OF,UO> =
				      %% Line 3776
				      case _15028 of
					%% Line 3777
					<O1 = {'c','opaque',_cor67,_cor68}> when 'true' ->
					    <_15028,[]>
					%% Line 3778
					<Type> when 'true' ->
					    <'none',[_15028|[]]>
				      end
				  in  let <_cor44> =
					  ( [A|%% Line 3780
					       [B|[UF|[I|[UL|[N|[UT|[M|[OF|[R|[UMap|[]]]]]]]]]]]]
					    -| ['compiler_generated'] )
				      in  %% Line 3780
					  apply 't_sup'/1
					      ([{'c','union',_cor44,'unknown'}|UO])
	  %% Line 3781
	  <T,_cor80> when 'true' ->
	      _cor1
	end
't_limit'/2 =
    %% Line 3793
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,K>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 3794
	      apply 't_limit_k'/2
		  (_cor1, _cor0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_limit',2}}] )
	    -| ['compiler_generated'] )
	end
't_limit_k'/2 =
    %% Line 3796
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor55,K>
	      when call 'erlang':'=<'
		    (_cor0,
		     0) ->
	      'any'
	  %% Line 3797
	  <T = {'c','tuple','any',{'any','any'}},_X_K> when 'true' ->
	      _cor1
	  %% Line 3798
	  <{'c','tuple',Elements,{Arity,_cor56}},K> when 'true' ->
	      %% Line 3799
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor0,
			   1) ->
		    apply 't_tuple'/1
			(Arity)
		%% Line 3800
		<> when 'true' ->
		    let <_cor8> =
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[E|_cor3]> when 'true' ->
					    let <_cor5> =
						call 'erlang':'-'
						    (_cor0, 1)
					    in  let <_cor6> =
						    apply 't_limit_k'/2
							(E, _cor5)
						in  let <_cor7> =
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor6|_cor7]
							  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_31226> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Elements)
			  -| ['list_comprehension'] )
		    in  apply 't_tuple'/1
			    (_cor8)
	      end
	  %% Line 3802
	  <T = {'c','tuple_set',_cor57,_cor58},K> when 'true' ->
	      let <_cor15> =
		  %% Line 3803
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor12) ->
				case _cor12 of
				  <[Tuple|_cor10]> when 'true' ->
				      let <_cor13> =
					  apply 't_limit_k'/2
					      (Tuple, _cor0)
				      in  let <_cor14> =
					      apply 'lc$^1'/1
						  (_cor10)
					  in  ( [_cor13|_cor14]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_7295> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor12})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor11> =
			    apply 't_tuple_subtypes'/1
				(_cor1)
			in  apply 'lc$^1'/1
				(_cor11)
		    -| ['list_comprehension'] )
	      in  %% Line 3803
		  apply 't_sup'/1
		      (_cor15)
	  %% Line 3804
	  <{'c','list',[Elements|[Termination|[]]],Size},K> when 'true' ->
	      let <_cor17> =
		  %% Line 3806
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor0,
			       1) ->
			%% Line 3808
			apply 't_limit_k'/2
			    (Termination, _cor0)
		    %% Line 3809
		    <> when 'true' ->
			let <_cor16> =
			    call 'erlang':'-'
				(_cor0, 1)
			in  apply 't_limit_k'/2
				(Termination, _cor16)
		  end
	      in  let <_cor19> =
		      %% Line 3811
		      call 'erlang':'-'
			  (_cor0, 1)
		  in  let <NewElements> =
			  %% Line 3811
			  apply 't_limit_k'/2
			      (Elements, _cor19)
		      in  let <TmpList> =
			      %% Line 3812
			      apply 't_cons'/2
				  (NewElements, _cor17)
			  in  %% Line 3813
			      case Size of
				%% Line 3814
				<'nonempty'> when 'true' ->
				    TmpList
				%% Line 3815
				<'unknown'> when 'true' ->
				    %% Line 3816
				    case TmpList of
				      <{'c','list',[NewElements1|[NewTermination1|[]]],_cor59}> when 'true' ->
					  %% Line 3817
					  {'c','list',[NewElements1|[NewTermination1|[]]],'unknown'}
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'badmatch',TmpList})
					-| ['compiler_generated'] )
				    end
				( <_cor23> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',Size})
				  -| ['compiler_generated'] )
			      end
	  %% Line 3819
	  <{'c','function',[Domain|[Range|[]]],_cor60},K> when 'true' ->
	      let <_cor24> =
		  %% Line 3821
		  apply 't_limit_k'/2
		      (Domain, _cor0)
	      in  let <_cor25> =
		      %% Line 3821
		      call 'erlang':'-'
			  (_cor0, 1)
		  in  let <_cor26> =
			  %% Line 3821
			  apply 't_limit_k'/2
			      (Range, _cor25)
		      in  %% Line 3821
			  {'c','function',[_cor24|[_cor26|[]]],'unknown'}
	  %% Line 3822
	  <{'c','product',Elements,_cor61},K> when 'true' ->
	      let <_cor33> =
		  %% Line 3823
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[X|_cor28]> when 'true' ->
				      let <_cor30> =
					  call 'erlang':'-'
					      (_cor0, 1)
				      in  let <_cor31> =
					      apply 't_limit_k'/2
						  (X, _cor30)
					  in  let <_cor32> =
						  apply 'lc$^2'/1
						      (_cor28)
					      in  ( [_cor31|_cor32]
						    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_6033> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  %% Line 3823
		  {'c','product',_cor33,'unknown'}
	  %% Line 3824
	  <{'c','union',Elements = [_cor62|[_cor63|[_cor64|[_cor65|[_cor66|[_cor67|[_cor68|[_cor69|[_cor70|[_cor71|[_cor72|[]]]]]]]]]]]],_cor73},K> when 'true' ->
	      let <_cor39> =
		  %% Line 3825
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor36) ->
				case _cor36 of
				  <[X|_cor35]> when 'true' ->
				      let <_cor37> =
					  apply 't_limit_k'/2
					      (X, _cor0)
				      in  let <_cor38> =
					      apply 'lc$^3'/1
						  (_cor35)
					  in  ( [_cor37|_cor38]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_23083> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor36})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^3'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  %% Line 3825
		  case _cor39 of
		    <[_cor74|[_cor75|[_cor76|[_cor77|[_cor78|[_cor79|[_cor80|[_cor81|[_cor82|[_cor83|[_cor84|[]]]]]]]]]]]]> when 'true' ->
			{'c','union',_cor39,'unknown'}
		    ( <_cor40> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor39})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3826
	  <{'c','opaque',Es,_cor85},K> when 'true' ->
	      let <_cor50> =
		  %% Line 3827
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor44) ->
				case _cor44 of
				  <[Opaque = %% Line 3830
					     {'opaque',_cor86,_cor87,_cor88,S}|_cor42]> when 'true' ->
				      let <NewS> =
					  %% Line 3828
					  apply 't_limit_k'/2
					      (S, _cor0)
				      in  let <_cor48> =
					      %% Line 3829
					      call 'erlang':'setelement'
						  (5, Opaque, NewS)
					  in  let <_cor49> =
						  %% Line 3830
						  apply 'lc$^4'/1
						      (_cor42)
					      in  ( [_cor48|_cor49]
						    -| ['compiler_generated'] )
				  ( <[_cor41|_cor42]> when 'true' ->
					%% Line 3830
					apply 'lc$^4'/1
					    (_cor42)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_12002> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor44})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor43> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Es)
			in  apply 'lc$^4'/1
				(_cor43)
		    -| ['list_comprehension'] )
	      in  let <_cor52> =
		      %% Line 3831
		      call 'ordsets':'from_list'
			  (_cor50)
		  in  %% Line 3831
		      {'c','opaque',_cor52,'unknown'}
	  %% Line 3832
	  <T,_X_K> when 'true' ->
	      _cor1
	end
't_abstract_records'/2 =
    %% Line 3842
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','list',[Contents|[Termination|[]]],Size},RecDict> when 'true' ->
	      let <_7720> =
		  %% Line 3843
		  apply 't_abstract_records'/2
		      (Contents, _cor0)
	      in  %% Line 3843
		  case _7720 of
		    %% Line 3844
		    <'none'> when 'true' ->
			'none'
		    %% Line 3845
		    <NewContents> when 'true' ->
			let <_26464> =
			    %% Line 3847
			    apply 't_abstract_records'/2
				(Termination, _cor0)
			in  %% Line 3847
			    case _26464 of
			      %% Line 3848
			      <{'c','nil',_cor49,_cor50}> when 'true' ->
				  {'c','list',[_7720|[{'c','nil',[],'unknown'}]],Size}
			      %% Line 3849
			      <'any'> when 'true' ->
				  {'c','list',[_7720|['any']],Size}
			      %% Line 3850
			      <Other> when 'true' ->
				  let <_26690> =
				      %% Line 3851
				      apply 't_cons'/2
					  (_7720, _26464)
				  in  %% Line 3851
				      case _26690 of
					<{'c','list',[NewContents2|[NewTermination|[]]],_cor51}> when 'true' ->
					    %% Line 3852
					    {'c','list',[NewContents2|[NewTermination|[]]],Size}
					( <_cor2> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_26690})
					  -| ['compiler_generated'] )
				      end
			    end
		  end
	  %% Line 3855
	  <{'c','function',[Domain|[Range|[]]],_cor52},RecDict> when 'true' ->
	      let <_cor5> =
		  %% Line 3856
		  apply 't_abstract_records'/2
		      (Domain, _cor0)
	      in  let <_cor6> =
		      %% Line 3857
		      apply 't_abstract_records'/2
			  (Range, _cor0)
		  in  %% Line 3856
		      {'c','function',[_cor5|%% Line 3857
					     [_cor6|[]]],'unknown'}
	  %% Line 3858
	  <{'c','product',Types,_cor53},RecDict> when 'true' ->
	      let <_cor12> =
		  %% Line 3859
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[T|_cor8]> when 'true' ->
				      let <_cor10> =
					  apply 't_abstract_records'/2
					      (T, _cor0)
				      in  let <_cor11> =
					      apply 'lc$^0'/1
						  (_cor8)
					  in  ( [_cor10|_cor11]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_12143> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  %% Line 3859
		  {'c','product',_cor12,'unknown'}
	  %% Line 3860
	  <{'c','union',Types = [_cor54|[_cor55|[_cor56|[_cor57|[_cor58|[_cor59|[_cor60|[_cor61|[_cor62|[_cor63|[_cor64|[]]]]]]]]]]]],_cor65},RecDict> when 'true' ->
	      let <_cor18> =
		  %% Line 3861
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor15) ->
				case _cor15 of
				  <[T|_cor14]> when 'true' ->
				      let <_cor16> =
					  apply 't_abstract_records'/2
					      (T, _cor0)
				      in  let <_cor17> =
					      apply 'lc$^1'/1
						  (_cor14)
					  in  ( [_cor16|_cor17]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_35505> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  %% Line 3861
		  apply 't_sup'/1
		      (_cor18)
	  %% Line 3862
	  <T = {'c','tuple','any',{'any','any'}},_X_RecDict> when 'true' ->
	      _cor1
	  %% Line 3864
	  <{'c','tuple',Elements,{Arity,Tag = {'c','atom',_cor66,_cor67}}},RecDict> when 'true' ->
	      let <_16007> =
		  %% Line 3865
		  apply 'atom_vals'/1
		      (Tag)
	      in  %% Line 3865
		  case _16007 of
		    <[TagAtom|[]]> when 'true' ->
			let <_cor20> =
			    %% Line 3866
			    call 'erlang':'-'
				(Arity, 1)
			in  let <_34829> =
				%% Line 3866
				apply 'lookup_record'/3
				    (TagAtom, _cor20, _cor0)
			    in  %% Line 3866
				case _34829 of
				  %% Line 3867
				  <'error'> when 'true' ->
				      let <_cor26> =
					  ( letrec
						'lc$^2'/1 =
						    fun (_cor23) ->
							case _cor23 of
							  <[E|_cor22]> when 'true' ->
							      let <_cor24> =
								  apply 't_abstract_records'/2
								      (E, _cor0)
							      in  let <_cor25> =
								      apply 'lc$^2'/1
									  (_cor22)
								  in  ( [_cor24|_cor25]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_14216> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor23})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^2'/1
						    (Elements)
					    -| ['list_comprehension'] )
				      in  apply 't_tuple'/1
					      (_cor26)
				  %% Line 3868
				  <{'ok',Fields}> when 'true' ->
				      let <_cor31> =
					  ( letrec
						'lc$^3'/1 =
						    fun (_cor29) ->
							case _cor29 of
							  <[{_X_Name,T}|_cor28]> when 'true' ->
							      let <_cor30> =
								  apply 'lc$^3'/1
								      (_cor28)
							      in  ( [T|_cor30]
								    -| ['compiler_generated'] )
							  ( <[_cor27|_cor28]> when 'true' ->
								apply 'lc$^3'/1
								    (_cor28)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_21857> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor29})
								  -| [{'function_name',{'lc$^3',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^3'/1
						    (Fields)
					    -| ['list_comprehension'] )
				      in  apply 't_tuple'/1
					      ([Tag|_cor31])
				  ( <_cor32> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_34829})
				    -| ['compiler_generated'] )
				end
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_16007})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3870
	  <{'c','tuple',Elements,{_X_Arity,_X_Tag}},RecDict> when 'true' ->
	      let <_cor38> =
		  %% Line 3871
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor35) ->
				case _cor35 of
				  <[E|_cor34]> when 'true' ->
				      let <_cor36> =
					  apply 't_abstract_records'/2
					      (E, _cor0)
				      in  let <_cor37> =
					      apply 'lc$^4'/1
						  (_cor34)
					  in  ( [_cor36|_cor37]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_35890> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor35})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^4'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  %% Line 3871
		  apply 't_tuple'/1
		      (_cor38)
	  %% Line 3872
	  <Tuples = {'c','tuple_set',_cor68,_cor69},RecDict> when 'true' ->
	      let <_cor45> =
		  %% Line 3873
		  ( letrec
			'lc$^5'/1 =
			    fun (_cor42) ->
				case _cor42 of
				  <[T|_cor40]> when 'true' ->
				      let <_cor43> =
					  apply 't_abstract_records'/2
					      (T, _cor0)
				      in  let <_cor44> =
					      apply 'lc$^5'/1
						  (_cor40)
					  in  ( [_cor43|_cor44]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_31100> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor42})
					  -| [{'function_name',{'lc$^5',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor41> =
			    apply 't_tuple_subtypes'/1
				(_cor1)
			in  apply 'lc$^5'/1
				(_cor41)
		    -| ['list_comprehension'] )
	      in  %% Line 3873
		  apply 't_sup'/1
		      (_cor45)
	  %% Line 3874
	  <Type = {'c','opaque',_cor70,_cor71},RecDict> when 'true' ->
	      let <_cor46> =
		  %% Line 3875
		  apply 't_opaque_structure'/1
		      (_cor1)
	      in  %% Line 3875
		  apply 't_abstract_records'/2
		      (_cor46, _cor0)
	  %% Line 3876
	  <T,_X_RecDict> when 'true' ->
	      _cor1
	end
't_map'/2 =
    %% Line 3884
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{'c','list',[Contents|[Termination|[]]],Size}> when 'true' ->
	      let <_cor2> =
		  %% Line 3885
		  apply 't_map'/2
		      (_cor1, Contents)
	      in  let <_cor3> =
		      %% Line 3885
		      apply 't_map'/2
			  (_cor1, Termination)
		  in  %% Line 3885
		      apply _cor1
			  ({'c','list',[_cor2|[_cor3|[]]],Size})
	  %% Line 3886
	  <Fun,{'c','function',[Domain|[Range|[]]],_cor53}> when 'true' ->
	      let <_cor4> =
		  %% Line 3887
		  apply 't_map'/2
		      (_cor1, Domain)
	      in  let <_cor5> =
		      %% Line 3887
		      apply 't_map'/2
			  (_cor1, Range)
		  in  %% Line 3887
		      apply _cor1
			  ({'c','function',[_cor4|[_cor5|[]]],'unknown'})
	  %% Line 3888
	  <Fun,{'c','product',Types,_cor54}> when 'true' ->
	      let <_cor11> =
		  %% Line 3889
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[T|_cor7]> when 'true' ->
				      let <_cor9> =
					  apply 't_map'/2
					      (_cor1, T)
				      in  let <_cor10> =
					      apply 'lc$^0'/1
						  (_cor7)
					  in  ( [_cor9|_cor10]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_14949> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  %% Line 3889
		  apply _cor1
		      ({'c','product',_cor11,'unknown'})
	  %% Line 3890
	  <Fun,{'c','union',Types = [_cor55|[_cor56|[_cor57|[_cor58|[_cor59|[_cor60|[_cor61|[_cor62|[_cor63|[_cor64|[_cor65|[]]]]]]]]]]]],_cor66}> when 'true' ->
	      let <_cor17> =
		  %% Line 3891
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[T|_cor13]> when 'true' ->
				      let <_cor15> =
					  apply 't_map'/2
					      (_cor1, T)
				      in  let <_cor16> =
					      apply 'lc$^1'/1
						  (_cor13)
					  in  ( [_cor15|_cor16]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_40833> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  let <_cor18> =
		      %% Line 3891
		      apply 't_sup'/1
			  (_cor17)
		  in  %% Line 3891
		      apply _cor1
			  (_cor18)
	  %% Line 3892
	  <Fun,T = {'c','tuple','any',{'any','any'}}> when 'true' ->
	      %% Line 3893
	      apply _cor1
		  (_cor0)
	  %% Line 3894
	  <Fun,{'c','tuple',Elements,{_X_Arity,_X_Tag}}> when 'true' ->
	      let <_cor24> =
		  %% Line 3895
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor21) ->
				case _cor21 of
				  <[E|_cor20]> when 'true' ->
				      let <_cor22> =
					  apply 't_map'/2
					      (_cor1, E)
				      in  let <_cor23> =
					      apply 'lc$^2'/1
						  (_cor20)
					  in  ( [_cor22|_cor23]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_10629> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor21})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  let <_cor25> =
		      %% Line 3895
		      apply 't_tuple'/1
			  (_cor24)
		  in  %% Line 3895
		      apply _cor1
			  (_cor25)
	  %% Line 3896
	  <Fun,Tuples = {'c','tuple_set',_cor67,_cor68}> when 'true' ->
	      let <_cor32> =
		  %% Line 3897
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[T|_cor27]> when 'true' ->
				      let <_cor30> =
					  apply 't_map'/2
					      (_cor1, T)
				      in  let <_cor31> =
					      apply 'lc$^3'/1
						  (_cor27)
					  in  ( [_cor30|_cor31]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_17859> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor28> =
			    apply 't_tuple_subtypes'/1
				(_cor0)
			in  apply 'lc$^3'/1
				(_cor28)
		    -| ['list_comprehension'] )
	      in  let <_cor33> =
		      %% Line 3897
		      apply 't_sup'/1
			  (_cor32)
		  in  %% Line 3897
		      apply _cor1
			  (_cor33)
	  %% Line 3898
	  <Fun,{'c','opaque',Set,_cor69}> when 'true' ->
	      let <_cor46> =
		  %% Line 3899
		  ( letrec
			'lc$^4'/1 =
			    fun (_cor40) ->
				case _cor40 of
				  <[Opaque = %% Line 3900
					     {'opaque',_cor70,_cor71,_cor72,S}|_cor35]> when 'true' ->
				      let <_cor38> =
					  %% Line 3901
					  apply 't_map'/2
					      (_cor1, S)
				      in  let <_24404> =
					      case _cor38 of
						<'none'> when 'true' ->
						    'true'
						<_cor2> when 'true' ->
						    'false'
					      end
					  in  %% Line 3901
					      ( case _24404 of
						  <'false'> when 'true' ->
						      let <_cor43> =
							  call 'erlang':'setelement'
							      (5, Opaque, _cor38)
						      in  let <_cor44> =
							      apply 'lc$^4'/1
								  (_cor35)
							  in  ( [_cor43|_cor44]
								-| ['compiler_generated'] )
						  ( <'true'> when 'true' ->
							apply 'lc$^4'/1
							    (_cor35)
						    -| ['compiler_generated'] )
						  ( <_cor_variable> when 'true' ->
							call 'erlang':'error'
							    ('badarg')
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				  ( <[_cor34|_cor35]> when 'true' ->
					%% Line 3900
					apply 'lc$^4'/1
					    (_cor35)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_12666> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor40})
					  -| [{'function_name',{'lc$^4',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor36> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set)
			in  apply 'lc$^4'/1
				(_cor36)
		    -| ['list_comprehension'] )
	      in  let <_cor50> =
		      %% Line 3902
		      case _cor46 of
			%% Line 3903
			<[]> when 'true' ->
			    'none'
			%% Line 3904
			<_cor78> when 'true' ->
			    let <_cor48> =
				call 'ordsets':'from_list'
				    (_cor46)
			    in  {'c','opaque',_cor48,'unknown'}
		      end
		  in  %% Line 3902
		      apply _cor1
			  (_cor50)
	  %% Line 3906
	  <Fun,T> when 'true' ->
	      %% Line 3907
	      apply _cor1
		  (_cor0)
	end
't_to_string'/1 =
    %% Line 3917
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3918
	    call 'dict':'new'
		()
	in  %% Line 3918
	    apply 't_to_string'/2
		(_cor0, _cor1)
't_to_string'/2 =
    %% Line 3922
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'any',_X_RecDict> when 'true' ->
	      %% Line 3923
	      [97|[110|[121|[40|[41]]]]]
	  %% Line 3924
	  <'none',_X_RecDict> when 'true' ->
	      %% Line 3925
	      [110|[111|[110|[101|[40|[41]]]]]]
	  %% Line 3926
	  <'unit',_X_RecDict> when 'true' ->
	      %% Line 3927
	      [110|[111|[95|[114|[101|[116|[117|[114|[110|[40|[41]]]]]]]]]]]
	  %% Line 3928
	  <{'c','atom','any',_cor90},_X_RecDict> when 'true' ->
	      %% Line 3929
	      [97|[116|[111|[109|[40|[41]]]]]]
	  %% Line 3930
	  <{'c','atom',Set,_cor91},_X_RecDict> when 'true' ->
	      %% Line 3931
	      case %% Line 4824
		   call 'ordsets':'size'
		       (Set) of
		%% Line 3932
		<2> when 'true' ->
		    let <_14077> =
			%% Line 4774
			call 'ordsets':'is_element'
			    ('true', Set)
		    in  let <_cor4> =
			    %% Line 3933
			    ( case _14077 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 4774
				      call 'ordsets':'is_element'
					  ('false', Set)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor2> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_14077}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 3933
			    case _cor4 of
			      %% Line 3934
			      <'true'> when 'true' ->
				  [98|[111|[111|[108|[101|[97|[110|[40|[41]]]]]]]]]
			      %% Line 3935
			      <'false'> when 'true' ->
				  let <_cor9> =
				      %% Line 4827
				      ( letrec
					    'lc$^0'/1 =
						fun (_3527) ->
						    case _3527 of
						      <[X|_cor2]> when 'true' ->
							  let <_cor7> =
							      case <> of
								%% Line 4828
								<>
								    when call 'erlang':'is_atom'
									  (X) ->
								    let <_cor5> =
									call 'erlang':'atom_to_list'
									    (X)
								    in  call 'io_lib':'write_string'
									    (_cor5, 39)
								%% Line 4829
								<> when 'true' ->
								    let <_39329> =
									[X|[]]
								    in  let <_21199> =
									    %% Line 4839
									    call 'io_lib':'format'
										([126|[119]], _39329)
									in  %% Line 4839
									    call 'lists':'flatten'
										(_21199)
							      end
							  in  let <_cor8> =
								  %% Line 4830
								  apply 'lc$^0'/1
								      (_cor2)
							      in  ( [_cor7|_cor8]
								    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_19758> when 'true' ->
							    primop 'match_fail'
								({'function_clause',_3527})
							-| ['compiler_generated'] )
						    end
					in  let <_cor3> =
						call 'ordsets':'to_list'
						    (Set)
					    in  apply 'lc$^0'/1
						    (_cor3)
					-| ['list_comprehension'] )
				  in  %% Line 4831
				      call 'string':'join'
					  (_cor9, [32|[124|[32]]])
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor4})
				-| ['compiler_generated'] )
			    end
		%% Line 3937
		<_cor92> when 'true' ->
		    let <_cor9> =
			%% Line 4827
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[X|_cor2]> when 'true' ->
					    let <_cor7> =
						case <> of
						  %% Line 4828
						  <>
						      when call 'erlang':'is_atom'
							    (X) ->
						      let <_cor5> =
							  call 'erlang':'atom_to_list'
							      (X)
						      in  call 'io_lib':'write_string'
							      (_cor5, 39)
						  %% Line 4829
						  <> when 'true' ->
						      let <_39329> =
							  [X|[]]
						      in  let <_21199> =
							      %% Line 4839
							      call 'io_lib':'format'
								  ([126|[119]], _39329)
							  in  %% Line 4839
							      call 'lists':'flatten'
								  (_21199)
						end
					    in  let <_cor8> =
						    %% Line 4830
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [_cor7|_cor8]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_19758> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor3> =
				  call 'ordsets':'to_list'
				      (Set)
			      in  apply 'lc$^0'/1
				      (_cor3)
			  -| ['list_comprehension'] )
		    in  %% Line 4831
			call 'string':'join'
			    (_cor9, [32|[124|[32]]])
	      end
	  %% Line 3940
	  <{'c','binary',[0|[0]],_cor93},_X_RecDict> when 'true' ->
	      %% Line 3941
	      [60|[60|[62|[62]]]]
	  %% Line 3942
	  <{'c','binary',[8|[0]],_cor94},_X_RecDict> when 'true' ->
	      %% Line 3943
	      [98|[105|[110|[97|[114|[121|[40|[41]]]]]]]]
	  %% Line 3944
	  <{'c','binary',[1|[0]],_cor95},_X_RecDict> when 'true' ->
	      %% Line 3945
	      [98|[105|[116|[115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]]]]
	  %% Line 3946
	  <{'c','binary',[0|[B|[]]],_cor96},_X_RecDict> when 'true' ->
	      let <_34861> =
		  %% Line 3947
		  [B|[]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([60|[60|[95|[58|[126|[119|[62|[62]]]]]]]], _34861)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 3948
	  <{'c','binary',[U|[0]],_cor97},_X_RecDict> when 'true' ->
	      let <_31954> =
		  %% Line 3949
		  [U|[]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([60|[60|[95|[58|[95|[42|[126|[119|[62|[62]]]]]]]]]], _31954)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 3950
	  <{'c','binary',[U|[B|[]]],_cor98},_X_RecDict> when 'true' ->
	      let <_35184> =
		  %% Line 3951
		  [B|[U|[]]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([60|[60|[95|[58|[126|[119|[44|[95|[58|[95|[42|[126|[119|[62|[62]]]]]]]]]]]]]]], _35184)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 3952
	  <{'c','function',['any'|['any']],_cor99},_X_RecDict> when 'true' ->
	      %% Line 3953
	      [102|[117|[110|[40|[41]]]]]
	  %% Line 3954
	  <{'c','function',['any'|[Range|[]]],_cor100},RecDict> when 'true' ->
	      let <_cor7> =
		  %% Line 3955
		  apply 't_to_string'/2
		      (Range, _cor0)
	      in  let <_cor8> =
		      %% Line 3955
		      call 'erlang':'++'
			  (_cor7, [41])
		  in  %% Line 3955
		      call 'erlang':'++'
			  ([102|[117|[110|[40|[40|[46|[46|[46|[41|[32|[45|[62|[32]]]]]]]]]]]]], _cor8)
	  %% Line 3956
	  <{'c','function',[{'c','product',ArgList,_cor101}|[Range|[]]],_cor102},RecDict> when 'true' ->
	      let <_cor8> =
		  %% Line 4129
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[T|_cor3]> when 'true' ->
				      let <_cor6> =
					  case <> of
					    %% Line 4130
					    <>
						when call 'erlang':'=:='
						      (T,
						       'any') ->
						[95]
					    %% Line 4131
					    <> when 'true' ->
						apply 't_to_string'/2
						    (T, _cor0)
					  end
				      in  let <_cor7> =
					      %% Line 4132
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_32260> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (ArgList)
		    -| ['list_comprehension'] )
	      in  let <_cor12> =
		      %% Line 4133
		      call 'string':'join'
			  (_cor8, [44])
		  in  let <_cor9> =
			  %% Line 3958
			  apply 't_to_string'/2
			      (Range, _cor0)
		      in  let <_cor10> =
			      %% Line 3958
			      call 'erlang':'++'
				  (_cor9, [41])
			  in  let <_cor11> =
				  %% Line 3958
				  call 'erlang':'++'
				      ([41|[32|[45|[62|[32]]]]], _cor10)
			      in  let <_cor13> =
				      %% Line 3957
				      call 'erlang':'++'
					  (_cor12, _cor11)
				  in  %% Line 3957
				      call 'erlang':'++'
					  ([102|[117|[110|[40|[40]]]]], _cor13)
	  %% Line 3959
	  <{'c','identifier',Set,_cor103},_X_RecDict> when 'true' ->
	      %% Line 3960
	      case Set of
		%% Line 3961
		<'any'> when 'true' ->
		    [105|[100|[101|[110|[116|[105|[102|[105|[101|[114|[40|[41]]]]]]]]]]]]
		%% Line 3962
		<_cor104> when 'true' ->
		    let <_cor20> =
			%% Line 3963
			( letrec
			      'lc$^0'/1 =
				  fun (_cor17) ->
				      case _cor17 of
					<[T|_cor15]> when 'true' ->
					    let <_24831> =
						[T|[]]
					    in  let <_cor2> =
						    %% Line 4839
						    call 'io_lib':'format'
							([126|[119|[40|[41]]]], _24831)
						in  let <_cor18> =
							%% Line 4839
							call 'lists':'flatten'
							    (_cor2)
						    in  let <_cor19> =
							    apply 'lc$^0'/1
								(_cor15)
							in  ( [_cor18|_cor19]
							      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_7447> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor16> =
				  %% Line 4815
				  call 'ordsets':'to_list'
				      (Set)
			      in  apply 'lc$^0'/1
				      (_cor16)
			  -| ['list_comprehension'] )
		    in  %% Line 3963
			call 'string':'join'
			    (_cor20, [32|[124|[32]]])
	      end
	  %% Line 3965
	  <{'c','opaque',Set,_cor105},RecDict> when 'true' ->
	      let <_cor28> =
		  %% Line 3966
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor25) ->
				case _cor25 of
				  <[%% Line 3967
				    {'opaque',Mod,Name,Args,S}|_cor23]> when 'true' ->
				      let <_cor26> =
					  apply 'opaque_type'/5
					      (Mod, Name, Args, S, _cor0)
				      in  let <_cor27> =
					      %% Line 3968
					      apply 'lc$^1'/1
						  (_cor23)
					  in  ( [_cor26|_cor27]
						-| ['compiler_generated'] )
				  ( <[_cor22|_cor23]> when 'true' ->
					%% Line 3968
					apply 'lc$^1'/1
					    (_cor23)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_18519> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor25})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor24> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set)
			in  apply 'lc$^1'/1
				(_cor24)
		    -| ['list_comprehension'] )
	      in  %% Line 3966
		  call 'string':'join'
		      (_cor28, %% Line 3969
			       [32|[124|[32]]])
	  %% Line 3970
	  <{'c','matchstate',[Pres|[Slots|[]]],_cor106},RecDict> when 'true' ->
	      let <_cor29> =
		  %% Line 3971
		  apply 't_to_string'/2
		      (Pres, _cor0)
	      in  let <_cor30> =
		      %% Line 3972
		      apply 't_to_string'/2
			  (Slots, _cor0)
		  in  let <_20891> =
			  %% Line 3971
			  [_cor29|%% Line 3972
				  [_cor30|[]]]
		      in  let <_cor2> =
			      %% Line 4839
			      call 'io_lib':'format'
				  ([109|[115|[40|[126|[115|[44|[126|[115|[41]]]]]]]]], _20891)
			  in  %% Line 4839
			      call 'lists':'flatten'
				  (_cor2)
	  %% Line 3973
	  <{'c','nil',_cor107,_cor108},_X_RecDict> when 'true' ->
	      %% Line 3974
	      [91|[93]]
	  %% Line 3975
	  <{'c','list',[Contents|[Termination|[]]],'nonempty'},RecDict> when 'true' ->
	      let <ContentString> =
		  %% Line 3976
		  apply 't_to_string'/2
		      (Contents, _cor0)
	      in  %% Line 3977
		  case Termination of
		    %% Line 3978
		    <{'c','nil',_cor109,_cor110}> when 'true' ->
			%% Line 3979
			case Contents of
			  %% Line 3980
			  <{'c','number',{'int_rng',0,1114111},'integer'}> when 'true' ->
			      [110|[111|[110|[101|[109|[112|[116|[121|[95|[115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]]]]]]]]]]
			  %% Line 3981
			  <_cor111> when 'true' ->
			      let <_cor32> =
				  call 'erlang':'++'
				      (ContentString, [44|[46|[46|[46|[93]]]]])
			      in  [91|_cor32]
			end
		    %% Line 3983
		    <'any'> when 'true' ->
			%% Line 3992
			[110|[111|[110|[101|[109|[112|[116|[121|[95|[109|[97|[121|[98|[101|[95|[105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 3993
		    <_cor112> when 'true' ->
			let <_28482> =
			    %% Line 3994
			    apply 't_is_subtype'/2
				({'c','nil',[],'unknown'}, Termination)
			in  %% Line 3994
			    case _28482 of
			      %% Line 3995
			      <'true'> when 'true' ->
				  let <_cor36> =
				      %% Line 3997
				      apply 't_to_string'/2
					  (Termination, _cor0)
				  in  let <_cor37> =
					  %% Line 3997
					  call 'erlang':'++'
					      (_cor36, [41])
				      in  let <_cor38> =
					      %% Line 3997
					      [44|_cor37]
					  in  let <_cor39> =
						  %% Line 3996
						  call 'erlang':'++'
						      (ContentString, _cor38)
					      in  %% Line 3996
						  call 'erlang':'++'
						      ([110|[111|[110|[101|[109|[112|[116|[121|[95|[109|[97|[121|[98|[101|[95|[105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor39)
			      %% Line 3998
			      <'false'> when 'true' ->
				  let <_cor40> =
				      %% Line 4000
				      apply 't_to_string'/2
					  (Termination, _cor0)
				  in  let <_cor41> =
					  %% Line 4000
					  call 'erlang':'++'
					      (_cor40, [41])
				      in  let <_cor42> =
					      %% Line 4000
					      [44|_cor41]
					  in  let <_cor43> =
						  %% Line 3999
						  call 'erlang':'++'
						      (ContentString, _cor42)
					      in  %% Line 3999
						  call 'erlang':'++'
						      ([110|[111|[110|[101|[109|[112|[116|[121|[95|[105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40]]]]]]]]]]]]]]]]]]]]]]], _cor43)
			      ( <_cor44> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_28482})
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 4003
	  <{'c','list',[Contents|[Termination|[]]],'unknown'},RecDict> when 'true' ->
	      let <ContentString> =
		  %% Line 4004
		  apply 't_to_string'/2
		      (Contents, _cor0)
	      in  %% Line 4005
		  case Termination of
		    %% Line 4006
		    <{'c','nil',_cor113,_cor114}> when 'true' ->
			%% Line 4007
			case Contents of
			  %% Line 4008
			  <{'c','number',{'int_rng',0,1114111},'integer'}> when 'true' ->
			      [115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]
			  %% Line 4009
			  <_cor115> when 'true' ->
			      let <_cor47> =
				  call 'erlang':'++'
				      (ContentString, [93])
			      in  [91|_cor47]
			end
		    %% Line 4011
		    <'any'> when 'true' ->
			%% Line 4022
			[109|[97|[121|[98|[101|[95|[105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40|[41]]]]]]]]]]]]]]]]]]]]]
		    %% Line 4023
		    <_cor116> when 'true' ->
			let <_32134> =
			    %% Line 4024
			    apply 't_is_subtype'/2
				({'c','nil',[],'unknown'}, Termination)
			in  %% Line 4024
			    case _32134 of
			      %% Line 4025
			      <'true'> when 'true' ->
				  let <_cor51> =
				      %% Line 4027
				      apply 't_to_string'/2
					  (Termination, _cor0)
				  in  let <_cor52> =
					  %% Line 4027
					  call 'erlang':'++'
					      (_cor51, [41])
				      in  let <_cor53> =
					      %% Line 4027
					      [44|_cor52]
					  in  let <_cor54> =
						  %% Line 4026
						  call 'erlang':'++'
						      (ContentString, _cor53)
					      in  %% Line 4026
						  call 'erlang':'++'
						      ([109|[97|[121|[98|[101|[95|[105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40]]]]]]]]]]]]]]]]]]]], _cor54)
			      %% Line 4028
			      <'false'> when 'true' ->
				  let <_cor55> =
				      %% Line 4030
				      apply 't_to_string'/2
					  (Termination, _cor0)
				  in  let <_cor56> =
					  %% Line 4030
					  call 'erlang':'++'
					      (_cor55, [41])
				      in  let <_cor57> =
					      %% Line 4030
					      [44|_cor56]
					  in  let <_cor58> =
						  %% Line 4029
						  call 'erlang':'++'
						      (ContentString, _cor57)
					      in  %% Line 4029
						  call 'erlang':'++'
						      ([105|[109|[112|[114|[111|[112|[101|[114|[95|[108|[105|[115|[116|[40]]]]]]]]]]]]]], _cor58)
			      ( <_cor59> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_32134})
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 4033
	  <{'c','number',{'int_set',Set},'integer'},_X_RecDict> when 'true' ->
	      let <_cor9> =
		  %% Line 4827
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor2]> when 'true' ->
				      let <_cor7> =
					  case <> of
					    %% Line 4828
					    <>
						when call 'erlang':'is_atom'
						      (X) ->
						let <_cor5> =
						    call 'erlang':'atom_to_list'
							(X)
						in  call 'io_lib':'write_string'
							(_cor5, 39)
					    %% Line 4829
					    <> when 'true' ->
						let <_39329> =
						    [X|[]]
						in  let <_21199> =
							%% Line 4839
							call 'io_lib':'format'
							    ([126|[119]], _39329)
						    in  %% Line 4839
							call 'lists':'flatten'
							    (_21199)
					  end
				      in  let <_cor8> =
					      %% Line 4830
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_19758> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'ordsets':'to_list'
				(Set)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 4831
		  call 'string':'join'
		      (_cor9, [32|[124|[32]]])
	  %% Line 4035
	  <{'c','number',{'int_rng',0,255},'integer'},_X_RecDict> when 'true' ->
	      [98|[121|[116|[101|[40|[41]]]]]]
	  %% Line 4036
	  <{'c','number',{'int_rng',0,1114111},'integer'},_X_RecDict> when 'true' ->
	      [99|[104|[97|[114|[40|[41]]]]]]
	  %% Line 4037
	  <{'c','number',{'int_rng',1,'pos_inf'},'integer'},_X_RecDict> when 'true' ->
	      [112|[111|[115|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41]]]]]]]]]]]]]
	  %% Line 4038
	  <{'c','number',{'int_rng',0,'pos_inf'},'integer'},_X_RecDict> when 'true' ->
	      [110|[111|[110|[95|[110|[101|[103|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41]]]]]]]]]]]]]]]]]
	  %% Line 4039
	  <{'c','number',{'int_rng','neg_inf',-1},'integer'},_X_RecDict> when 'true' ->
	      [110|[101|[103|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41]]]]]]]]]]]]]
	  %% Line 4040
	  <{'c','number',{'int_rng',From,To},'integer'},_X_RecDict> when 'true' ->
	      let <_20311> =
		  %% Line 4041
		  [From|[To|[]]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([126|[119|[46|[46|[126|[119]]]]]], _20311)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 4042
	  <{'c','number','any','integer'},_X_RecDict> when 'true' ->
	      [105|[110|[116|[101|[103|[101|[114|[40|[41]]]]]]]]]
	  %% Line 4043
	  <{'c','number','any','float'},_X_RecDict> when 'true' ->
	      [102|[108|[111|[97|[116|[40|[41]]]]]]]
	  %% Line 4044
	  <{'c','number','any','unknown'},_X_RecDict> when 'true' ->
	      [110|[117|[109|[98|[101|[114|[40|[41]]]]]]]]
	  %% Line 4045
	  <{'c','product',List,_cor117},RecDict> when 'true' ->
	      let <_cor8> =
		  %% Line 4129
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[T|_cor3]> when 'true' ->
				      let <_cor6> =
					  case <> of
					    %% Line 4130
					    <>
						when call 'erlang':'=:='
						      (T,
						       'any') ->
						[95]
					    %% Line 4131
					    <> when 'true' ->
						apply 't_to_string'/2
						    (T, _cor0)
					  end
				      in  let <_cor7> =
					      %% Line 4132
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_32260> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  let <_cor61> =
		      %% Line 4133
		      call 'string':'join'
			  (_cor8, [44])
		  in  let <_cor62> =
			  %% Line 4046
			  call 'erlang':'++'
			      (_cor61, [62])
		      in  %% Line 4046
			  [60|_cor62]
	  %% Line 4047
	  <{'c','remote',Set,_cor118},RecDict> when 'true' ->
	      let <_cor71> =
		  %% Line 4048
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor66) ->
				case _cor66 of
				  <[%% Line 4054
				    {'remote',Mod,Name,Args}|_cor64]> when 'true' ->
				      let <_cor69> =
					  case <> of
					    %% Line 4049
					    <>
						when call 'erlang':'=:='
						      (Args,
						       []) ->
						let <_25576> =
						    [Mod|[Name|[]]]
						in  let <_cor2> =
							%% Line 4839
							call 'io_lib':'format'
							    ([126|[119|[58|[126|[119|[40|[41]]]]]]], _25576)
						    in  %% Line 4839
							call 'lists':'flatten'
							    (_cor2)
					    %% Line 4050
					    <> when 'true' ->
						let <_cor8> =
						    %% Line 4129
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor4) ->
								  case _cor4 of
								    <[T|_cor3]> when 'true' ->
									let <_cor6> =
									    case <> of
									      %% Line 4130
									      <>
										  when call 'erlang':'=:='
											(T,
											 'any') ->
										  [95]
									      %% Line 4131
									      <> when 'true' ->
										  apply 't_to_string'/2
										      (T, _cor0)
									    end
									in  let <_cor7> =
										%% Line 4132
										apply 'lc$^0'/1
										    (_cor3)
									    in  ( [_cor6|_cor7]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_32260> when 'true' ->
									  primop 'match_fail'
									      ({'function_clause',_cor4})
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (Args)
						      -| ['list_comprehension'] )
						in  let <ArgString> =
							%% Line 4133
							call 'string':'join'
							    (_cor8, [44])
						    in  let <_32615> =
							    %% Line 4052
							    [Mod|[Name|[ArgString|[]]]]
							in  let <_cor2> =
								%% Line 4839
								call 'io_lib':'format'
								    ([126|[119|[58|[126|[119|[40|[126|[115|[41]]]]]]]]], _32615)
							    in  %% Line 4839
								call 'lists':'flatten'
								    (_cor2)
					  end
				      in  let <_cor70> =
					      %% Line 4054
					      apply 'lc$^2'/1
						  (_cor64)
					  in  ( [_cor69|_cor70]
						-| ['compiler_generated'] )
				  ( <[_cor63|_cor64]> when 'true' ->
					%% Line 4054
					apply 'lc$^2'/1
					    (_cor64)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_18390> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor66})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor65> =
			    %% Line 4815
			    call 'ordsets':'to_list'
				(Set)
			in  apply 'lc$^2'/1
				(_cor65)
		    -| ['list_comprehension'] )
	      in  %% Line 4048
		  call 'string':'join'
		      (_cor71, %% Line 4056
			       [32|[124|[32]]])
	  %% Line 4057
	  <{'c','map',Pairs,_cor119},RecDict> when 'true' ->
	      let <_cor72> =
		  %% Line 4058
		  apply 'map_pairs_to_string'/2
		      (Pairs, _cor0)
	      in  let <_cor73> =
		      %% Line 4058
		      call 'erlang':'++'
			  (_cor72, [125])
		  in  %% Line 4058
		      [35|[123|_cor73]]
	  %% Line 4059
	  <{'c','tuple','any',{'any','any'}},_X_RecDict> when 'true' ->
	      [116|[117|[112|[108|[101|[40|[41]]]]]]]
	  %% Line 4060
	  <{'c','tuple',Elements,{_X_Arity,'any'}},RecDict> when 'true' ->
	      let <_cor8> =
		  %% Line 4129
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[T|_cor3]> when 'true' ->
				      let <_cor6> =
					  case <> of
					    %% Line 4130
					    <>
						when call 'erlang':'=:='
						      (T,
						       'any') ->
						[95]
					    %% Line 4131
					    <> when 'true' ->
						apply 't_to_string'/2
						    (T, _cor0)
					  end
				      in  let <_cor7> =
					      %% Line 4132
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_32260> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Elements)
		    -| ['list_comprehension'] )
	      in  let <_cor74> =
		      %% Line 4133
		      call 'string':'join'
			  (_cor8, [44])
		  in  let <_cor75> =
			  %% Line 4061
			  call 'erlang':'++'
			      (_cor74, [125])
		      in  %% Line 4061
			  [123|_cor75]
	  %% Line 4062
	  <{'c','tuple',Elements,{Arity,Tag}},RecDict> when 'true' ->
	      let <_13143> =
		  %% Line 4063
		  apply 'atom_vals'/1
		      (Tag)
	      in  %% Line 4063
		  case _13143 of
		    <[TagAtom|[]]> when 'true' ->
			let <_cor77> =
			    %% Line 4064
			    call 'erlang':'-'
				(Arity, 1)
			in  let <_7283> =
				%% Line 4064
				apply 'lookup_record'/3
				    (TagAtom, _cor77, _cor0)
			    in  %% Line 4064
				case _7283 of
				  %% Line 4065
				  <'error'> when 'true' ->
				      let <_cor8> =
					  %% Line 4129
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor4) ->
							case _cor4 of
							  <[T|_cor3]> when 'true' ->
							      let <_cor6> =
								  case <> of
								    %% Line 4130
								    <>
									when call 'erlang':'=:='
									      (T,
									       'any') ->
									[95]
								    %% Line 4131
								    <> when 'true' ->
									apply 't_to_string'/2
									    (T, _cor0)
								  end
							      in  let <_cor7> =
								      %% Line 4132
								      apply 'lc$^0'/1
									  (_cor3)
								  in  ( [_cor6|_cor7]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_32260> when 'true' ->
								primop 'match_fail'
								    ({'function_clause',_cor4})
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (Elements)
					    -| ['list_comprehension'] )
				      in  let <_cor78> =
					      %% Line 4133
					      call 'string':'join'
						  (_cor8, [44])
					  in  let <_cor79> =
						  call 'erlang':'++'
						      (_cor78, [125])
					      in  [123|_cor79]
				  %% Line 4066
				  <{'ok',FieldNames}> when 'true' ->
				      %% Line 4067
				      apply 'record_to_string'/4
					  (TagAtom, Elements, FieldNames, _cor0)
				  ( <_cor80> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_7283})
				    -| ['compiler_generated'] )
				end
		    ( <_cor76> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13143})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4069
	  <T = {'c','tuple_set',_cor120,_cor121},RecDict> when 'true' ->
	      let <_cor81> =
		  %% Line 4070
		  apply 't_tuple_subtypes'/1
		      (_cor1)
	      in  let <_cor7> =
		      %% Line 4136
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[_25646|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 't_to_string'/2
						  (_25646, _cor0)
					  in  let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor5|_cor6]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_4239> when 'true' ->
					    primop 'match_fail'
						({'function_clause',_cor4})
					-| ['compiler_generated'] )
				    end
			in  case _cor81 of
			      <[_25646|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 't_to_string'/2
					  (_25646, _cor0)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_4239> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor81})
				-| ['compiler_generated'] )
			    end
			-| ['list_comprehension'] )
		  in  %% Line 4137
		      call 'string':'join'
			  (_cor7, [32|[124|[32]]])
	  %% Line 4071
	  <{'c','union',Types = [_cor122|[_cor123|[_cor124|[_cor125|[_cor126|[_cor127|[_cor128|[_cor129|[_cor130|[_cor131|[_cor132|[]]]]]]]]]]]],_cor133},RecDict> when 'true' ->
	      let <_cor86> =
		  %% Line 4072
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor84) ->
				case _cor84 of
				  <[T|_cor83]>
				      when call 'erlang':'=/='
					    (T,
					     'none') ->
				      let <_cor85> =
					  apply 'lc$^3'/1
					      (_cor83)
				      in  ( [T|_cor85]
					    -| ['compiler_generated'] )
				  ( <[T|_cor83]> when 'true' ->
					apply 'lc$^3'/1
					    (_cor83)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_1069> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor84})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^3'/1
			    (Types)
		    -| ['list_comprehension'] )
	      in  let <_cor7> =
		      %% Line 4136
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[T|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 't_to_string'/2
						  (T, _cor0)
					  in  let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor5|_cor6]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_4239> when 'true' ->
					    primop 'match_fail'
						({'function_clause',_cor4})
					-| ['compiler_generated'] )
				    end
			in  case _cor86 of
			      <[T|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 't_to_string'/2
					  (T, _cor0)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_4239> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor86})
				-| ['compiler_generated'] )
			    end
			-| ['list_comprehension'] )
		  in  %% Line 4137
		      call 'string':'join'
			  (_cor7, [32|[124|[32]]])
	  %% Line 4073
	  <{'c','var',Id,_cor134},_X_RecDict>
	      when call 'erlang':'is_atom'
		    (Id) ->
	      let <_cor87> =
		  %% Line 4074
		  call 'erlang':'atom_to_list'
		      (Id)
	      in  let <_27029> =
		      %% Line 4074
		      [_cor87|[]]
		  in  let <_cor2> =
			  %% Line 4839
			  call 'io_lib':'format'
			      ([126|[115]], _27029)
		      in  %% Line 4839
			  call 'lists':'flatten'
			      (_cor2)
	  %% Line 4075
	  <{'c','var',Id,_cor135},_X_RecDict>
	      when call 'erlang':'is_integer'
		    (Id) ->
	      let <_25155> =
		  %% Line 4076
		  [Id|[]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([118|[97|[114|[40|[126|[119|[41]]]]]]], _25155)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  ( <_cor89,_cor88> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_to_string',2}}] )
	    -| ['compiler_generated'] )
	end
'map_pairs_to_string'/2 =
    %% Line 4079
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor19> when 'true' ->
	      []
	  %% Line 4080
	  <Pairs,RecDict> when 'true' ->
	      let <_cor8> =
		  %% Line 4081
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{K,V}|_cor3]> when 'true' ->
				      let <_cor6> =
					  apply 't_to_string'/2
					      (K, _cor0)
				      in  let <_cor5> =
					      apply 't_to_string'/2
						  (V, _cor0)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [{_cor6,_cor5}|_cor7]
						    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_27933> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      in  let <_cor16> =
		      %% Line 4082
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[{K,V}|_cor11]> when 'true' ->
					  let <_cor13> =
					      [61|[62|V]]
					  in  let <_cor14> =
						  call 'erlang':'++'
						      (K, _cor13)
					      in  let <_cor15> =
						      apply 'lc$^1'/1
							  (_cor11)
						  in  ( [_cor14|_cor15]
							-| ['compiler_generated'] )
				      ( <[_cor10|_cor11]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor11)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_13641> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor8)
			-| ['list_comprehension'] )
		  in  %% Line 4082
		      call 'string':'join'
			  (_cor16, [44|[32]])
	end
'record_to_string'/4 =
    %% Line 4085
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tag,[_cor14|Fields],FieldNames,RecDict> when 'true' ->
	      let <FieldStrings> =
		  %% Line 4086
		  apply 'record_fields_to_string'/4
		      (Fields, _cor1, _cor0, [])
	      in  let <_12547> =
		      %% Line 4636
		      [_cor3|[]]
		  in  let <_23866> =
			  %% Line 4839
			  call 'io_lib':'format'
			      ([126|[119]], _12547)
		      in  let <_cor8> =
			      %% Line 4839
			      call 'lists':'flatten'
				  (_23866)
			  in  let <_cor5> =
				  %% Line 4087
				  call 'string':'join'
				      (FieldStrings, [44])
			      in  let <_cor6> =
				      %% Line 4087
				      call 'erlang':'++'
					  (_cor5, [125])
				  in  let <_cor7> =
					  %% Line 4087
					  [123|_cor6]
				      in  let <_cor9> =
					      %% Line 4087
					      call 'erlang':'++'
						  (_cor8, _cor7)
					  in  %% Line 4087
					      [35|_cor9]
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'record_to_string',4}}] )
	    -| ['compiler_generated'] )
	end
'record_fields_to_string'/4 =
    %% Line 4089
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],[{FName,_X_DefType}|FDefs],RecDict,Acc> when 'true' ->
	      let <_33532> =
		  case F of
		    <T>
			when call 'erlang':'=:='
			      ('any',
			       F) ->
			'true'
		    <_34244> when 'true' ->
			'false'
		  end
	      in  let <_cor7> =
		      %% Line 4091
		      ( case _33532 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 't_is_any_atom'/2
				    ('undefined', F)
			    -| ['compiler_generated'] )
			  ( <_cor4> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_33532}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  let <_cor13> =
			  %% Line 4091
			  case _cor7 of
			    %% Line 4092
			    <'true'> when 'true' ->
				_cor0
			    %% Line 4093
			    <'false'> when 'true' ->
				let <_12547> =
				    %% Line 4636
				    [FName|[]]
				in  let <_28369> =
					%% Line 4839
					call 'io_lib':'format'
					    ([126|[119]], _12547)
				    in  let <_cor10> =
					    %% Line 4839
					    call 'lists':'flatten'
						(_28369)
					in  let <_cor8> =
						%% Line 4094
						apply 't_to_string'/2
						    (F, _cor1)
					    in  let <_cor9> =
						    %% Line 4094
						    [58|[58|_cor8]]
						in  let <StrFV> =
							%% Line 4094
							call 'erlang':'++'
							    (_cor10, _cor9)
						    in  %% Line 4100
							[StrFV|_cor0]
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 4102
			  apply 'record_fields_to_string'/4
			      (Fs, FDefs, _cor1, _cor13)
	  %% Line 4103
	  <[],[],_X_RecDict,Acc> when 'true' ->
	      %% Line 4104
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'record_fields_to_string',4}}] )
	    -| ['compiler_generated'] )
	end
'record_field_diffs_to_string'/2 =
    %% Line 4108
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c','tuple',[_cor8|Fs],{Arity,Tag}},RecDict> when 'true' ->
	      let <_19723> =
		  %% Line 4109
		  apply 'atom_vals'/1
		      (Tag)
	      in  %% Line 4109
		  case _19723 of
		    <[TagAtom|[]]> when 'true' ->
			let <_cor3> =
			    %% Line 4110
			    call 'erlang':'-'
				(Arity, 1)
			in  let <_12833> =
				%% Line 4110
				apply 'lookup_record'/3
				    (TagAtom, _cor3, _cor0)
			    in  %% Line 4110
				case _12833 of
				  <{'ok',FieldNames}> when 'true' ->
				      let <FieldDiffs> =
					  %% Line 4112
					  apply 'field_diffs'/4
					      (Fs, FieldNames, _cor0, [])
				      in  %% Line 4113
					  call 'string':'join'
					      (FieldDiffs, [32|[97|[110|[100|[32]]]]])
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_12833})
				    -| ['compiler_generated'] )
				end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_19723})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'record_field_diffs_to_string',2}}] )
	    -| ['compiler_generated'] )
	end
'field_diffs'/4 =
    %% Line 4115
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],[{FName,DefType}|FDefs],RecDict,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 4118
		  apply 't_inf'/2
		      (F, DefType)
	      in  let <_cor5> =
		      case _cor4 of
			<'none'> when 'true' ->
			    'true'
			<_16867> when 'true' ->
			    'false'
		      end
		  in  let <_cor11> =
			  %% Line 4118
			  case _cor5 of
			    %% Line 4119
			    <'false'> when 'true' ->
				_cor0
			    %% Line 4120
			    <'true'> when 'true' ->
				let <_12547> =
				    %% Line 4636
				    [FName|[]]
				in  let <_9540> =
					%% Line 4839
					call 'io_lib':'format'
					    ([126|[119]], _12547)
				    in  let <_cor8> =
					    %% Line 4839
					    call 'lists':'flatten'
						(_9540)
					in  let <_cor6> =
						%% Line 4121
						apply 't_to_string'/2
						    (DefType, _cor1)
					    in  let <_cor7> =
						    %% Line 4121
						    [58|[58|_cor6]]
						in  let <Str> =
							%% Line 4121
							call 'erlang':'++'
							    (_cor8, _cor7)
						    in  %% Line 4122
							[Str|_cor0]
			    ( <_cor_variable> when 'true' ->
				  call 'erlang':'error'
				      ('badarg')
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 4124
			  apply 'field_diffs'/4
			      (Fs, FDefs, _cor1, _cor11)
	  %% Line 4125
	  <[],[],_cor17,Acc> when 'true' ->
	      %% Line 4126
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'field_diffs',4}}] )
	    -| ['compiler_generated'] )
	end
'opaque_type'/5 =
    %% Line 4145
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    ( letrec
		  'lc$^0'/1 =
		      fun (_34947) ->
			  case _34947 of
			    <[T|_5311]> when 'true' ->
				let <_cor6> =
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(T,
						 'any') ->
					  [95]
				      <> when 'true' ->
					  apply 't_to_string'/2
					      (T, _cor0)
				    end
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_5311)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_32260> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_34947})
			      -| ['compiler_generated'] )
			  end
	      in  case _cor2 of
		    <[T|_5311]> when 'true' ->
			let <_cor6> =
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(T,
					 'any') ->
				  [95]
			      <> when 'true' ->
				  apply 't_to_string'/2
				      (T, _cor0)
			    end
			in  let <_cor7> =
				apply 'lc$^0'/1
				    (_5311)
			    in  ( [_cor6|_cor7]
				  -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_32260> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <ArgsString> =
		call 'string':'join'
		    (_cor8, [44])
	    in  let <_12471> =
		    %% Line 4160
		    case <_cor4,_cor3> of
		      <'digraph','digraph'> when 'true' ->
			  'true'
		      %% Line 4161
		      <'gb_sets','gb_set'> when 'true' ->
			  'true'
		      %% Line 4162
		      <'gb_trees','gb_tree'> when 'true' ->
			  'true'
		      %% Line 4163
		      <_3462,_cor5> when 'true' ->
			  'false'
		    end
		in  let <S> =
			%% Line 4155
			case _12471 of
			  %% Line 4156
			  <'true'> when 'true' ->
			      let <_13376> =
				  [_cor3|[]]
			      in  let <_11291> =
				      %% Line 4839
				      call 'io_lib':'format'
					  ([126|[119]], _13376)
				  in  %% Line 4839
				      call 'lists':'flatten'
					  (_11291)
			  %% Line 4157
			  <'false'> when 'true' ->
			      let <_10228> =
				  [_cor4|[_cor3|[]]]
			      in  let <_17101> =
				      %% Line 4839
				      call 'io_lib':'format'
					  ([126|[119|[58|[126|[119]]]]], _10228)
				  in  %% Line 4839
				      call 'lists':'flatten'
					  (_17101)
			  ( <_34332> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_12471})
			    -| ['compiler_generated'] )
			end
		    in  let <_17787> =
			    %% Line 4152
			    [S|[ArgsString|[]]]
			in  let <_34053> =
				%% Line 4839
				call 'io_lib':'format'
				    ([126|[115|[40|[126|[115|[41]]]]]], _17787)
			    in  %% Line 4839
				call 'lists':'flatten'
				    (_34053)
'mod_name'/2 =
    %% Line 4154
    fun (_cor1,_cor0) ->
	let <_12471> =
	    %% Line 4160
	    case <_cor1,_cor0> of
	      <'digraph','digraph'> when 'true' ->
		  'true'
	      %% Line 4161
	      <'gb_sets','gb_set'> when 'true' ->
		  'true'
	      %% Line 4162
	      <'gb_trees','gb_tree'> when 'true' ->
		  'true'
	      %% Line 4163
	      <_cor4,_cor5> when 'true' ->
		  'false'
	    end
	in  %% Line 4155
	    case _12471 of
	      %% Line 4156
	      <'true'> when 'true' ->
		  apply 'flat_format'/2
		      ([126|[119]], [_cor0|[]])
	      %% Line 4157
	      <'false'> when 'true' ->
		  apply 'flat_format'/2
		      ([126|[119|[58|[126|[119]]]]], [_cor1|[_cor0|[]]])
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_12471})
		-| ['compiler_generated'] )
	    end
't_from_form'/1 =
    %% Line 4173
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4174
	    call 'dict':'new'
		()
	in  %% Line 4174
	    apply 't_from_form'/2
		(_cor0, _cor1)
't_from_form'/2 =
    %% Line 4178
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4179
	    call 'dict':'new'
		()
	in  %% Line 4179
	    apply 't_from_form'/3
		(_cor1, _cor0, _cor2)
't_from_form'/3 =
    %% Line 4183
    fun (_cor2,_cor1,_cor0) ->
	let <_37097> =
	    %% Line 4184
	    apply 't_from_form'/4
		(_cor2, [], _cor1, _cor0)
	in  %% Line 4184
	    case _37097 of
	      <{T,_X_R}> when 'true' ->
		  T
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_37097})
		-| ['compiler_generated'] )
	    end
't_from_form'/4 =
    %% Line 4192
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'var',_X_L,'_'},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4193
	      {'any',[]}
	  %% Line 4194
	  <{'var',_X_L,Name},_X_TypeNames,_X_RecDict,VarDict> when 'true' ->
	      let <_1151> =
		  %% Line 4195
		  call 'dict':'find'
		      (Name, _cor0)
	      in  %% Line 4195
		  case _1151 of
		    %% Line 4196
		    <'error'> when 'true' ->
			let <_cor5> =
			    apply 't_var'/1
				(Name)
			in  {_cor5,[]}
		    %% Line 4197
		    <{'ok',Val}> when 'true' ->
			{Val,[]}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1151})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4199
	  <{'ann_type',_X_L,[_X_Var|[Type|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      %% Line 4200
	      apply 't_from_form'/4
		  (Type, _cor2, _cor1, _cor0)
	  %% Line 4201
	  <{'paren_type',_X_L,[Type|[]]},TypeNames,RecDict,VarDict> when 'true' ->
	      %% Line 4202
	      apply 't_from_form'/4
		  (Type, _cor2, _cor1, _cor0)
	  %% Line 4203
	  <{'remote_type',_X_L,[{'atom',_cor109,Module}|[{'atom',_cor110,Type}|[Args|[]]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_19558> =
		  %% Line 4205
		  apply 'list_from_form'/4
		      (Args, _cor2, _cor1, _cor0)
	      in  %% Line 4205
		  case _19558 of
		    <{L,R}> when 'true' ->
			let <_27901> =
			    {'remote',Module,Type,L}
			in  let <_22134> =
				%% Line 4768
				call 'ordsets':'from_list'
				    ([_27901|[]])
			    in  let <_cor8> =
				    {'c','remote',_22134,'unknown'}
				in  %% Line 4206
				    {_cor8,R}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_19558})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4207
	  <{'atom',_X_L,Atom},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor9> =
		  %% Line 4208
		  apply 't_atom'/1
		      (Atom)
	      in  %% Line 4208
		  {_cor9,[]}
	  %% Line 4209
	  <{'integer',_X_L,Int},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor10> =
		  %% Line 4210
		  apply 't_integer'/1
		      (Int)
	      in  %% Line 4210
		  {_cor10,[]}
	  %% Line 4211
	  <Op = {'op',_X_L,_X_Op,_X_Arg},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4212
	      case call 'erl_eval':'partial_eval'
		       (_cor3) of
		%% Line 4213
		<{'integer',_cor111,Val}> when 'true' ->
		    let <_cor11> =
			%% Line 4214
			apply 't_integer'/1
			    (Val)
		    in  %% Line 4214
			{_cor11,[]}
		%% Line 4215
		<_cor112> when 'true' ->
		    let <_cor12> =
			call 'io_lib':'format'
			    ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[101|[118|[97|[108|[117|[97|[116|[101|[32|[116|[121|[112|[101|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
		    in  call 'erlang':'throw'
			    ({'error',_cor12})
	      end
	  %% Line 4217
	  <Op = {'op',_X_L,_X_Op,_X_Arg1,_X_Arg2},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4219
	      case call 'erl_eval':'partial_eval'
		       (_cor3) of
		%% Line 4220
		<{'integer',_cor113,Val}> when 'true' ->
		    let <_cor14> =
			%% Line 4221
			apply 't_integer'/1
			    (Val)
		    in  %% Line 4221
			{_cor14,[]}
		%% Line 4222
		<_cor114> when 'true' ->
		    let <_cor15> =
			call 'io_lib':'format'
			    ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[101|[118|[97|[108|[117|[97|[116|[101|[32|[116|[121|[112|[101|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
		    in  call 'erlang':'throw'
			    ({'error',_cor15})
	      end
	  %% Line 4224
	  <{'type',_X_L,'any',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4225
	      {'any',[]}
	  %% Line 4226
	  <{'type',_X_L,'arity',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor18> =
		  %% Line 4227
		  apply 't_arity'/0
		      ()
	      in  %% Line 4227
		  {_cor18,[]}
	  %% Line 4228
	  <{'type',_X_L,'array',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor19> =
		  %% Line 4229
		  apply 't_array'/0
		      ()
	      in  %% Line 4229
		  apply 'builtin_type'/5
		      ('array', _cor19, _cor2, _cor1, _cor0)
	  %% Line 4230
	  <{'type',_X_L,'atom',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4231
	      {{'c','atom','any','unknown'},[]}
	  %% Line 4232
	  <{'type',_X_L,'binary',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4233
	      {{'c','binary',[8|[0]],'unknown'},[]}
	  %% Line 4234
	  <Type = {'type',_X_L,'binary',[Base|[Unit|[]]]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor23> =
		  %% Line 4236
		  call 'erl_eval':'partial_eval'
		      (Base)
	      in  let <_cor22> =
		      %% Line 4236
		      call 'erl_eval':'partial_eval'
			  (Unit)
		  in  %% Line 4236
		      case <_cor23,_cor22> of
			%% Line 4237
			<{'integer',_cor115,B},{'integer',_cor116,U}>
			    when let <_cor24> =
				  call 'erlang':'>='
				      (B, 0)
			      in  let <_cor25> =
				      call 'erlang':'>='
					  (U, 0)
				  in  call 'erlang':'and'
					  (_cor24, _cor25) ->
			    let <_cor26> =
				%% Line 4238
				apply 't_bitstr'/2
				    (U, B)
			    in  %% Line 4238
				{_cor26,[]}
			%% Line 4239
			<_fol906,_fol907> when 'true' ->
			    let <_cor27> =
				call 'io_lib':'format'
				    ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[101|[118|[97|[108|[117|[97|[116|[101|[32|[116|[121|[112|[101|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
			    in  call 'erlang':'throw'
				    ({'error',_cor27})
		      end
	  %% Line 4241
	  <{'type',_X_L,'bitstring',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4242
	      {{'c','binary',[1|[0]],'unknown'},[]}
	  %% Line 4243
	  <{'type',_X_L,'bool',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_533> =
		  %% Line 4810
		  call 'ordsets':'from_list'
		      (['false'|['true']])
	      in  let <_cor30> =
		      {'c','atom',_533,'unknown'}
		  in  %% Line 4244
		      {_cor30,[]}
	  %% Line 4245
	  <{'type',_X_L,'boolean',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_7698> =
		  %% Line 4810
		  call 'ordsets':'from_list'
		      (['false'|['true']])
	      in  let <_cor31> =
		      {'c','atom',_7698,'unknown'}
		  in  %% Line 4246
		      {_cor31,[]}
	  %% Line 4247
	  <{'type',_X_L,'byte',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4248
	      {{'c','number',{'int_rng',0,255},'integer'},[]}
	  %% Line 4249
	  <{'type',_X_L,'char',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4250
	      {{'c','number',{'int_rng',0,1114111},'integer'},[]}
	  %% Line 4251
	  <{'type',_X_L,'dict',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor34> =
		  %% Line 4252
		  apply 't_dict'/0
		      ()
	      in  %% Line 4252
		  apply 'builtin_type'/5
		      ('dict', _cor34, _cor2, _cor1, _cor0)
	  %% Line 4253
	  <{'type',_X_L,'digraph',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor35> =
		  %% Line 4254
		  apply 't_digraph'/0
		      ()
	      in  %% Line 4254
		  apply 'builtin_type'/5
		      ('digraph', _cor35, _cor2, _cor1, _cor0)
	  %% Line 4255
	  <{'type',_X_L,'float',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4256
	      {{'c','number','any','float'},[]}
	  %% Line 4257
	  <{'type',_X_L,'function',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4258
	      {{'c','function',['any'|['any']],'unknown'},[]}
	  %% Line 4259
	  <{'type',_X_L,'fun',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4260
	      {{'c','function',['any'|['any']],'unknown'},[]}
	  %% Line 4261
	  <{'type',_X_L,'fun',[{'type',_cor118,'any'}|[Range|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_32068> =
		  %% Line 4263
		  apply 't_from_form'/4
		      (Range, _cor2, _cor1, _cor0)
	      in  %% Line 4263
		  case _32068 of
		    <{T,R}> when 'true' ->
			let <_cor40> =
			    {'c','function',['any'|[T|[]]],'unknown'}
			in  %% Line 4264
			    {_cor40,R}
		    ( <_cor39> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_32068})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4265
	  <{'type',_X_L,'fun',[{'type',_cor119,'product',Domain}|[Range|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_30183> =
		  %% Line 4267
		  apply 'list_from_form'/4
		      (Domain, _cor2, _cor1, _cor0)
	      in  %% Line 4267
		  case _30183 of
		    <{L,R1}> when 'true' ->
			let <_29296> =
			    %% Line 4268
			    apply 't_from_form'/4
				(Range, _cor2, _cor1, _cor0)
			in  %% Line 4268
			    case _29296 of
			      <{T,R2}> when 'true' ->
				  let <_cor44> =
				      %% Line 4269
				      apply 't_fun'/2
					  (L, T)
				  in  let <_cor43> =
					  %% Line 4269
					  call 'erlang':'++'
					      (R1, R2)
				      in  %% Line 4269
					  {_cor44,_cor43}
			      ( <_cor42> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_29296})
				-| ['compiler_generated'] )
			    end
		    ( <_cor41> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_30183})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4270
	  <{'type',_X_L,'gb_set',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor45> =
		  %% Line 4271
		  apply 't_gb_set'/0
		      ()
	      in  %% Line 4271
		  apply 'builtin_type'/5
		      ('gb_set', _cor45, _cor2, _cor1, _cor0)
	  %% Line 4272
	  <{'type',_X_L,'gb_tree',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor46> =
		  %% Line 4273
		  apply 't_gb_tree'/0
		      ()
	      in  %% Line 4273
		  apply 'builtin_type'/5
		      ('gb_tree', _cor46, _cor2, _cor1, _cor0)
	  %% Line 4274
	  <{'type',_X_L,'identifier',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4275
	      {{'c','identifier','any','unknown'},[]}
	  %% Line 4276
	  <{'type',_X_L,'integer',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4277
	      {{'c','number','any','integer'},[]}
	  %% Line 4278
	  <{'type',_X_L,'iodata',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor49> =
		  %% Line 4279
		  apply 't_iodata'/0
		      ()
	      in  %% Line 4279
		  {_cor49,[]}
	  %% Line 4280
	  <{'type',_X_L,'iolist',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor50> =
		  %% Line 4281
		  apply 't_iolist'/0
		      ()
	      in  %% Line 4281
		  {_cor50,[]}
	  %% Line 4282
	  <{'type',_X_L,'list',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4283
	      {{'c','list',['any'|[{'c','nil',[],'unknown'}]],'unknown'},[]}
	  %% Line 4284
	  <{'type',_X_L,'list',[Type|[]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_39889> =
		  %% Line 4285
		  apply 't_from_form'/4
		      (Type, _cor2, _cor1, _cor0)
	      in  %% Line 4285
		  case _39889 of
		    <{T,R}> when 'true' ->
			let <_cor53> =
			    case T of
			      <'none'> when 'true' ->
				  'none'
			      <'unit'> when 'true' ->
				  'none'
			      <Contents> when 'true' ->
				  {'c','list',[T|[{'c','nil',[],'unknown'}]],'unknown'}
			    end
			in  %% Line 4286
			    {_cor53,R}
		    ( <_cor52> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_39889})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4287
	  <{'type',_X_L,'map',_cor120},TypeNames,RecDict,VarDict> when 'true' ->
	      %% Line 4288
	      apply 'builtin_type'/5
		  ('map', {'c','map',[],'unknown'}, _cor2, _cor1, _cor0)
	  %% Line 4289
	  <{'type',_X_L,'mfa',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor55> =
		  %% Line 4290
		  apply 't_mfa'/0
		      ()
	      in  %% Line 4290
		  {_cor55,[]}
	  %% Line 4291
	  <{'type',_X_L,'module',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor56> =
		  %% Line 4292
		  apply 't_module'/0
		      ()
	      in  %% Line 4292
		  {_cor56,[]}
	  %% Line 4293
	  <{'type',_X_L,'nil',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4294
	      {{'c','nil',[],'unknown'},[]}
	  %% Line 4295
	  <{'type',_X_L,'neg_integer',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor58> =
		  %% Line 4296
		  apply 't_neg_integer'/0
		      ()
	      in  %% Line 4296
		  {_cor58,[]}
	  %% Line 4297
	  <{'type',_X_L,'non_neg_integer',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor59> =
		  %% Line 4299
		  apply 't_non_neg_integer'/0
		      ()
	      in  %% Line 4299
		  {_cor59,[]}
	  %% Line 4300
	  <{'type',_X_L,'no_return',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4301
	      {'unit',[]}
	  %% Line 4302
	  <{'type',_X_L,'node',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4303
	      {{'c','atom','any','unknown'},[]}
	  %% Line 4304
	  <{'type',_X_L,'none',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4305
	      {'none',[]}
	  %% Line 4306
	  <{'type',_X_L,'nonempty_list',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4307
	      {{'c','list',['any'|[{'c','nil',[],'unknown'}]],'nonempty'},[]}
	  %% Line 4308
	  <{'type',_X_L,'nonempty_list',[Type|[]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_18446> =
		  %% Line 4309
		  apply 't_from_form'/4
		      (Type, _cor2, _cor1, _cor0)
	      in  %% Line 4309
		  case _18446 of
		    <{T,R}> when 'true' ->
			let <_cor65> =
			    apply 't_cons'/2
				(T, {'c','nil',[],'unknown'})
			in  %% Line 4310
			    {_cor65,R}
		    ( <_cor64> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_18446})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4311
	  <{'type',_X_L,'nonempty_improper_list',[Cont|[Term|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_2067> =
		  %% Line 4313
		  apply 't_from_form'/4
		      (Cont, _cor2, _cor1, _cor0)
	      in  %% Line 4313
		  case _2067 of
		    <{T1,R1}> when 'true' ->
			let <_32669> =
			    %% Line 4314
			    apply 't_from_form'/4
				(Term, _cor2, _cor1, _cor0)
			in  %% Line 4314
			    case _32669 of
			      <{T2,R2}> when 'true' ->
				  let <_cor69> =
				      %% Line 4315
				      apply 't_cons'/2
					  (T1, T2)
				  in  let <_cor68> =
					  %% Line 4315
					  call 'erlang':'++'
					      (R1, R2)
				      in  %% Line 4315
					  {_cor69,_cor68}
			      ( <_cor67> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_32669})
				-| ['compiler_generated'] )
			    end
		    ( <_cor66> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2067})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4316
	  <{'type',_X_L,'nonempty_maybe_improper_list',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor70> =
		  %% Line 4318
		  apply 't_cons'/2
		      ('any', 'any')
	      in  %% Line 4318
		  {_cor70,[]}
	  %% Line 4319
	  <{'type',_X_L,'nonempty_maybe_improper_list',[Cont|[Term|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_20500> =
		  %% Line 4321
		  apply 't_from_form'/4
		      (Cont, _cor2, _cor1, _cor0)
	      in  %% Line 4321
		  case _20500 of
		    <{T1,R1}> when 'true' ->
			let <_36443> =
			    %% Line 4322
			    apply 't_from_form'/4
				(Term, _cor2, _cor1, _cor0)
			in  %% Line 4322
			    case _36443 of
			      <{T2,R2}> when 'true' ->
				  let <_cor74> =
				      %% Line 4323
				      apply 't_cons'/2
					  (T1, T2)
				  in  let <_cor73> =
					  %% Line 4323
					  call 'erlang':'++'
					      (R1, R2)
				      in  %% Line 4323
					  {_cor74,_cor73}
			      ( <_cor72> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_36443})
				-| ['compiler_generated'] )
			    end
		    ( <_cor71> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20500})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4324
	  <{'type',_X_L,'nonempty_string',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor75> =
		  apply 't_cons'/2
		      ({'c','number',{'int_rng',0,1114111},'integer'}, {'c','nil',[],'unknown'})
	      in  %% Line 4326
		  {_cor75,[]}
	  %% Line 4327
	  <{'type',_X_L,'number',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4328
	      {{'c','number','any','unknown'},[]}
	  %% Line 4329
	  <{'type',_X_L,'pid',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_22027> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['pid'])
	      in  let <_cor77> =
		      {'c','identifier',_22027,'unknown'}
		  in  %% Line 4330
		      {_cor77,[]}
	  %% Line 4331
	  <{'type',_X_L,'port',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_36544> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['port'])
	      in  let <_cor78> =
		      {'c','identifier',_36544,'unknown'}
		  in  %% Line 4332
		      {_cor78,[]}
	  %% Line 4333
	  <{'type',_X_L,'pos_integer',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor79> =
		  %% Line 4334
		  apply 't_pos_integer'/0
		      ()
	      in  %% Line 4334
		  {_cor79,[]}
	  %% Line 4335
	  <{'type',_X_L,'maybe_improper_list',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4337
	      {{'c','list',['any'|['any']],'unknown'},[]}
	  %% Line 4338
	  <{'type',_X_L,'maybe_improper_list',[Content|[Termination|[]]]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_27173> =
		  %% Line 4340
		  apply 't_from_form'/4
		      (Content, _cor2, _cor1, _cor0)
	      in  %% Line 4340
		  case _27173 of
		    <{T1,R1}> when 'true' ->
			let <_35436> =
			    %% Line 4341
			    apply 't_from_form'/4
				(Termination, _cor2, _cor1, _cor0)
			in  %% Line 4341
			    case _35436 of
			      <{T2,R2}> when 'true' ->
				  let <_cor84> =
				      case <T1,T2> of
					<_X_Content,'unit'> when 'true' ->
					    'none'
					<'unit',_X_Termination> when 'true' ->
					    'none'
					<_5443,_40757> when 'true' ->
					    {'c','list',[T1|[T2|[]]],'unknown'}
				      end
				  in  let <_cor83> =
					  %% Line 4342
					  call 'erlang':'++'
					      (R1, R2)
				      in  %% Line 4342
					  {_cor84,_cor83}
			      ( <_cor82> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_35436})
				-| ['compiler_generated'] )
			    end
		    ( <_cor81> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_27173})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4343
	  <{'type',_X_L,'product',Elements},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_18281> =
		  %% Line 4344
		  apply 'list_from_form'/4
		      (Elements, _cor2, _cor1, _cor0)
	      in  %% Line 4344
		  case _18281 of
		    <{L,R}> when 'true' ->
			let <_cor86> =
			    %% Line 4345
			    apply 't_product'/1
				(L)
			in  %% Line 4345
			    {_cor86,R}
		    ( <_cor85> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_18281})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4346
	  <{'type',_X_L,'queue',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor87> =
		  %% Line 4347
		  apply 't_queue'/0
		      ()
	      in  %% Line 4347
		  apply 'builtin_type'/5
		      ('queue', _cor87, _cor2, _cor1, _cor0)
	  %% Line 4348
	  <Type = {'type',_X_L,'range',[From|[To|[]]]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor89> =
		  %% Line 4350
		  call 'erl_eval':'partial_eval'
		      (From)
	      in  let <_cor88> =
		      %% Line 4350
		      call 'erl_eval':'partial_eval'
			  (To)
		  in  %% Line 4350
		      case <_cor89,_cor88> of
			%% Line 4351
			<{'integer',_cor121,FromVal},{'integer',_cor122,ToVal}> when 'true' ->
			    let <_cor90> =
				%% Line 4352
				apply 't_from_range'/2
				    (FromVal, ToVal)
			    in  %% Line 4352
				{_cor90,[]}
			%% Line 4353
			<_fol910,_fol911> when 'true' ->
			    let <_cor91> =
				call 'io_lib':'format'
				    ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[101|[118|[97|[108|[117|[97|[116|[101|[32|[116|[121|[112|[101|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
			    in  call 'erlang':'throw'
				    ({'error',_cor91})
		      end
	  %% Line 4355
	  <{'type',_X_L,'record',[Name|Fields]},TypeNames,RecDict,VarDict> when 'true' ->
	      %% Line 4356
	      apply 'record_from_form'/5
		  (Name, Fields, _cor2, _cor1, _cor0)
	  %% Line 4357
	  <{'type',_X_L,'reference',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_21025> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      (['reference'])
	      in  let <_cor93> =
		      {'c','identifier',_21025,'unknown'}
		  in  %% Line 4358
		      {_cor93,[]}
	  %% Line 4359
	  <{'type',_X_L,'set',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor94> =
		  %% Line 4360
		  apply 't_set'/0
		      ()
	      in  %% Line 4360
		  apply 'builtin_type'/5
		      ('set', _cor94, _cor2, _cor1, _cor0)
	  %% Line 4361
	  <{'type',_X_L,'string',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4362
	      {{'c','list',[{'c','number',{'int_rng',0,1114111},'integer'}|[{'c','nil',[],'unknown'}]],'unknown'},[]}
	  %% Line 4363
	  <{'type',_X_L,'term',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4364
	      {'any',[]}
	  %% Line 4365
	  <{'type',_X_L,'tid',[]},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_cor5> =
		  %% Line 4768
		  call 'ordsets':'from_list'
		      ([{'opaque','ets','tid',[],{'c','number','any','integer'}}])
	      in  let <_cor97> =
		      {'c','opaque',_cor5,'unknown'}
		  in  %% Line 4366
		      apply 'builtin_type'/5
			  ('tid', _cor97, _cor2, _cor1, _cor0)
	  %% Line 4367
	  <{'type',_X_L,'timeout',[]},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <_cor98> =
		  %% Line 4368
		  apply 't_timeout'/0
		      ()
	      in  %% Line 4368
		  {_cor98,[]}
	  %% Line 4369
	  <{'type',_X_L,'tuple','any'},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4370
	      {{'c','tuple','any',{'any','any'}},[]}
	  %% Line 4371
	  <{'type',_X_L,'tuple',Args},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_9691> =
		  %% Line 4372
		  apply 'list_from_form'/4
		      (Args, _cor2, _cor1, _cor0)
	      in  %% Line 4372
		  case _9691 of
		    <{L,R}> when 'true' ->
			let <_cor101> =
			    %% Line 4373
			    apply 't_tuple'/1
				(L)
			in  %% Line 4373
			    {_cor101,R}
		    ( <_cor100> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_9691})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4374
	  <{'type',_X_L,'union',Args},TypeNames,RecDict,VarDict> when 'true' ->
	      let <_28223> =
		  %% Line 4375
		  apply 'list_from_form'/4
		      (Args, _cor2, _cor1, _cor0)
	      in  %% Line 4375
		  case _28223 of
		    <{L,R}> when 'true' ->
			let <_cor103> =
			    %% Line 4376
			    apply 't_sup'/1
				(L)
			in  %% Line 4376
			    {_cor103,R}
		    ( <_cor102> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_28223})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4377
	  <{'type',_X_L,Name,Args},TypeNames,RecDict,VarDict> when 'true' ->
	      %% Line 4378
	      apply 'type_from_form'/5
		  (Name, Args, _cor2, _cor1, _cor0)
	  %% Line 4379
	  <{'opaque',_X_L,Name,{Mod,Args,Rep}},_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      let <O> =
		  {'opaque',Mod,Name,Args,Rep}
	      in  let <_cor5> =
		      %% Line 4768
		      call 'ordsets':'from_list'
			  ([O|[]])
		  in  let <_cor104> =
			  {'c','opaque',_cor5,'unknown'}
		      in  %% Line 4381
			  {_cor104,[]}
	  ( <_cor108,_cor107,_cor106,_cor105> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'t_from_form',4}}] )
	    -| ['compiler_generated'] )
	end
'builtin_type'/5 =
    %% Line 4383
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_40128> =
	    %% Line 4384
	    apply 'lookup_type'/3
		(_cor4, 0, _cor1)
	in  %% Line 4384
	    case _40128 of
	      %% Line 4385
	      <{_cor11,{_X_M,_X_T,_X_A}}> when 'true' ->
		  %% Line 4386
		  apply 'type_from_form'/5
		      (_cor4, [], _cor2, _cor1, _cor0)
	      %% Line 4387
	      <'error'> when 'true' ->
		  %% Line 4388
		  {_cor3,[]}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_40128})
		-| ['compiler_generated'] )
	    end
'type_from_form'/5 =
    %% Line 4391
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ArgsLen> =
	    %% Line 4392
	    call 'erlang':'length'
		(_cor3)
	in  let <_13618> =
		%% Line 4432
		apply 'list_from_form'/4
		    (_cor3, _cor2, _cor1, _cor0)
	    in  %% Line 4432
		case _13618 of
		  <{Types,_cor9}> when 'true' ->
		      let <_18108> =
			  apply 'lookup_type'/3
			      (_cor4, ArgsLen, _cor1)
		      in  case _18108 of
			    <{'type',{_X_Module,Type,ArgNames}}> when 'true' ->
				let <TypeName> = {'type',_cor4,ArgsLen}
				in  let <_20788> =
					apply 'can_unfold_more'/2
					    (TypeName, _cor2)
				    in  case _20788 of
					  <'true'> when 'true' ->
					      let <List> =
						  call 'lists':'zip'
						      (ArgNames, Types)
					      in  let <TmpVarDict> =
						      call 'dict':'from_list'
							  (List)
						  in  let <_14950> =
							  apply 't_from_form'/4
							      (Type, [TypeName|_cor2], _cor1, TmpVarDict)
						      in  case _14950 of
							    <{T,R}> when 'true' ->
								let <_29113> =
								    call 'lists':'member'
									(TypeName, R)
								in  case _29113 of
								      <'true'> when 'true' ->
									  let <_cor11> =
									      apply 't_limit'/2
										  (T, 2)
									  in  {_cor11,R}
								      <'false'> when 'true' ->
									  {T,R}
								      ( <_cor12> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_29113})
									-| ['compiler_generated'] )
								    end
							    ( <_cor10> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_14950})
							      -| ['compiler_generated'] )
							  end
					  <'false'> when 'true' ->
					      {'any',[TypeName|[]]}
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_20788})
					    -| ['compiler_generated'] )
					end
			    <{'opaque',{Module,Type,ArgNames}}> when 'true' ->
				let <TypeName> = {'opaque',_cor4,ArgsLen}
				in  let <_10587> =
					apply 'can_unfold_more'/2
					    (TypeName, _cor2)
				    in  let <Rep,Rret> =
					    case _10587 of
					      <'true'> when 'true' ->
						  let <List> =
						      call 'lists':'zip'
							  (ArgNames, Types)
						  in  let <TmpVarDict> =
							  call 'dict':'from_list'
							      (List)
						      in  let <_32609> =
							      apply 't_from_form'/4
								  (Type, [TypeName|_cor2], _cor1, TmpVarDict)
							  in  case _32609 of
								<{T,R}> when 'true' ->
								    let <_5040> =
									call 'lists':'member'
									    (TypeName, R)
								    in  case _5040 of
									  <'true'> when 'true' ->
									      let <_cor19> =
										  apply 't_limit'/2
										      (T, 2)
									      in  <_cor19,R>
									  <'false'> when 'true' ->
									      <T,R>
									  ( <_cor20> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_5040})
									    -| ['compiler_generated'] )
									end
								( <_cor18> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_32609})
								  -| ['compiler_generated'] )
							      end
					      <'false'> when 'true' ->
						  <'any',[TypeName|[]]>
					      ( <_cor22> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_10587})
						-| ['compiler_generated'] )
					    end
					in  let <_cor30> =
						( letrec
						      'lc$^0'/1 =
							  fun (_cor27) ->
							      case _cor27 of
								<[ArgType|_cor26]> when 'true' ->
								    let <_15843> =
									apply 't_has_var'/1
									    (ArgType)
								    in  let <_cor28> =
									    case _15843 of
									      <'true'> when 'true' ->
										  apply 't_subst_aux'/2
										      (ArgType, [])
									      <'false'> when 'true' ->
										  ArgType
									      ( <_18007> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_15843})
										-| ['compiler_generated'] )
									    end
									in  let <_cor29> =
										apply 'lc$^0'/1
										    (_cor26)
									    in  ( [_cor28|_cor29]
										  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_22815> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor27})
									-| [{'function_name',{'lc$^0',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^0'/1
							  (Types)
						  -| ['list_comprehension'] )
					    in  let <_cor32> =
						    apply 'skip_opaque_alias'/4
							(Rep, Module, _cor4, _cor30)
						in  {_cor32,Rret}
			    <'error'> when 'true' ->
				let <Msg> =
				    call 'io_lib':'format'
					([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[102|[105|[110|[100|[32|[116|[121|[112|[101|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[ArgsLen|[]]])
				in  call 'erlang':'throw'
					({'error',Msg})
			    ( <_cor34> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_18108})
			      -| ['compiler_generated'] )
			  end
		  ( <_39347> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_13618})
		    -| ['compiler_generated'] )
		end
'skip_opaque_alias'/4 =
    %% Line 4435
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <T = {'c','opaque',_cor8,_cor9},_X_Mod,_X_Name,_X_Args> when 'true' ->
	      _cor3
	  %% Line 4436
	  <T,Module,Name,Args> when 'true' ->
	      let <O> =
		  {'opaque',_cor2,_cor1,_cor0,_cor3}
	      in  let <_cor5> =
		      %% Line 4768
		      call 'ordsets':'from_list'
			  ([O|[]])
		  in  {'c','opaque',_cor5,'unknown'}
	end
'record_from_form'/5 =
    %% Line 4439
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'atom',_cor40,Name},ModFields,TypeNames,RecDict,VarDict> when 'true' ->
	      let <_16946> =
		  %% Line 4440
		  apply 'can_unfold_more'/2
		      ({'record',Name}, _cor2)
	      in  %% Line 4440
		  case _16946 of
		    %% Line 4441
		    <'true'> when 'true' ->
			let <_18132> =
			    %% Line 4442
			    apply 'lookup_record'/2
				(Name, _cor1)
			in  %% Line 4442
			    case _18132 of
			      %% Line 4443
			      <{'ok',DeclFields}> when 'true' ->
				  let <TypeNames1> =
				      %% Line 4444
				      [{'record',Name}|_cor2]
				  in  let <_cor11> =
					  %% Line 4445
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor8) ->
							case _cor8 of
							  <[%% Line 4446
							    {_X_FieldName,FieldType}|_cor7]> when 'true' ->
							      let <_cor9> =
								  %% Line 4659
								  case FieldType of
								    <'any'> when 'true' ->
									'true'
								    %% Line 4660
								    <'none'> when 'true' ->
									'true'
								    %% Line 4661
								    <'unit'> when 'true' ->
									'true'
								    %% Line 4662
								    <{'c',_35466,_36200,_38529}> when 'true' ->
									'true'
								    %% Line 4663
								    <_cor5> when 'true' ->
									'false'
								  end
							      in  let <_cor10> =
								      %% Line 4446
								      apply 'lc$^0'/1
									  (_cor7)
								  in  ( [_cor9|_cor10]
									-| ['compiler_generated'] )
							  ( <[_cor6|_cor7]> when 'true' ->
								%% Line 4446
								apply 'lc$^0'/1
								    (_cor7)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_3198> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor8})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (DeclFields)
					    -| ['list_comprehension'] )
				      in  let <_cor15> =
					      %% Line 4448
					      fun (_cor13) ->
						  _cor13
					  in  let <_4187> =
						  %% Line 4448
						  call 'lists':'all'
						      (_cor15, _cor11)
					      in  let <_cor18> =
						      %% Line 4448
						      case _4187 of
							%% Line 4449
							<'true'> when 'true' ->
							    {DeclFields,[]}
							%% Line 4450
							<'false'> when 'true' ->
							    let <_cor16> =
								%% Line 4451
								call 'dict':'new'
								    ()
							    in  apply 'fields_from_form'/4
								    (DeclFields, TypeNames1, _cor1, _cor16)
							( <_cor17> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_4187})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 4447
						      case _cor18 of
							<{DeclFields1,R1}> when 'true' ->
							    let <_2416> =
								%% Line 4453
								apply 'get_mod_record'/5
								    (_cor3, DeclFields1, TypeNames1, _cor1, _cor0)
							    in  %% Line 4453
								case _2416 of
								  <{GetModRec,R2}> when 'true' ->
								      %% Line 4456
								      case GetModRec of
									%% Line 4457
									<{'error',FieldName}> when 'true' ->
									    let <_cor21> =
										%% Line 4458
										call 'io_lib':'format'
										    ([73|[108|[108|[101|[103|[97|[108|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[32|[111|[102|[32|[35|[126|[119|[123|[126|[119|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4459
																																      [Name|[FieldName|[]]])
									    in  %% Line 4458
										call 'erlang':'throw'
										    ({'error',_cor21})
									%% Line 4460
									<{'ok',NewFields}> when 'true' ->
									    let <_cor23> =
										%% Line 4462
										apply 't_atom'/1
										    (Name)
									    in  let <_cor28> =
										    %% Line 4462
										    ( letrec
											  'lc$^1'/1 =
											      fun (_cor26) ->
												  case _cor26 of
												    <[{_X_FieldName,Type}|_cor25]> when 'true' ->
													let <_cor27> =
													    apply 'lc$^1'/1
														(_cor25)
													in  ( [Type|_cor27]
													      -| ['compiler_generated'] )
												    ( <[_cor24|_cor25]> when 'true' ->
													  apply 'lc$^1'/1
													      (_cor25)
												      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_36505> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor26})
													    -| [{'function_name',{'lc$^1',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^1'/1
											      (NewFields)
										      -| ['list_comprehension'] )
										in  let <_cor29> =
											%% Line 4461
											apply 't_tuple'/1
											    (%% Line 4462
											     [_cor23|_cor28])
										    in  let <_cor22> =
											    %% Line 4463
											    call 'erlang':'++'
												(R1, R2)
											in  %% Line 4461
											    {_cor29,_cor22}
									( <_cor30> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',GetModRec})
									  -| ['compiler_generated'] )
								      end
								  ( <_cor20> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_2416})
								    -| ['compiler_generated'] )
								end
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor18})
							  -| ['compiler_generated'] )
						      end
			      %% Line 4465
			      <'error'> when 'true' ->
				  let <_cor31> =
				      %% Line 4466
				      call 'io_lib':'format'
					  ([85|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[35|[126|[119|[123|[125|[10]]]]]]]]]]]]]]]]]]]]], [Name|[]])
				  in  %% Line 4466
				      call 'erlang':'throw'
					  ({'error',_cor31})
			      ( <_cor32> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_18132})
				-| ['compiler_generated'] )
			    end
		    %% Line 4468
		    <'false'> when 'true' ->
			{'any',[]}
		    ( <_cor34> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_16946})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor39,_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'record_from_form',5}}] )
	    -| ['compiler_generated'] )
	end
'get_mod_record'/5 =
    %% Line 4471
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],DeclFields,_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4472
	      {{'ok',_cor3},[]}
	  %% Line 4473
	  <ModFields,DeclFields,TypeNames,RecDict,VarDict> when 'true' ->
	      let <DeclFieldsDict> =
		  %% Line 4474
		  call 'orddict':'from_list'
		      (_cor3)
	      in  let <_9116> =
		      %% Line 4486
		      apply 'build_field_dict'/5
			  (_cor4, _cor2, _cor1, _cor0, [])
		  in  %% Line 4475
		      case _9116 of
			<{ModFieldsDict,R}> when 'true' ->
			    let <_7336> =
				%% Line 4477
				apply 'get_mod_record'/3
				    (DeclFieldsDict, ModFieldsDict, [])
			    in  %% Line 4477
				case _7336 of
				  %% Line 4478
				  <Error = {'error',_X_FieldName}> when 'true' ->
				      {_7336,R}
				  %% Line 4479
				  <{'ok',FinalOrdDict}> when 'true' ->
				      let <_cor12> =
					  %% Line 4480
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor9) ->
							case _cor9 of
							  <[%% Line 4481
							    {FieldName,_cor19}|_cor8]> when 'true' ->
							      let <_cor10> =
								  call 'orddict':'fetch'
								      (FieldName, FinalOrdDict)
							      in  let <_cor11> =
								      %% Line 4481
								      apply 'lc$^0'/1
									  (_cor8)
								  in  ( [{FieldName,_cor10}|_cor11]
									-| ['compiler_generated'] )
							  ( <[_cor7|_cor8]> when 'true' ->
								%% Line 4481
								apply 'lc$^0'/1
								    (_cor8)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_24037> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor9})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_cor3)
					    -| ['list_comprehension'] )
				      in  %% Line 4480
					  {{'ok',_cor12},R}
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_7336})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_9116})
			  -| ['compiler_generated'] )
		      end
	end
'build_field_dict'/5 =
    %% Line 4488
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'type',_cor15,'field_type',[{'atom',_cor16,Name}|[Type|[]]]}|Left],TypeNames,RecDict,VarDict,Acc> when 'true' ->
	      let <_353> =
		  %% Line 4490
		  apply 't_from_form'/4
		      (Type, _cor3, _cor2, _cor1)
	      in  %% Line 4490
		  case _353 of
		    <{T,R1}> when 'true' ->
			let <NewAcc> =
			    %% Line 4491
			    [{Name,T}|_cor0]
			in  let <_29171> =
				%% Line 4492
				apply 'build_field_dict'/5
				    (Left, _cor3, _cor2, _cor1, NewAcc)
			    in  %% Line 4492
				case _29171 of
				  <{D,R2}> when 'true' ->
				      let <_cor8> =
					  %% Line 4493
					  call 'erlang':'++'
					      (R1, R2)
				      in  %% Line 4493
					  {D,_cor8}
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_29171})
				    -| ['compiler_generated'] )
				end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_353})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4494
	  <[],_X_TypeNames,_X_RecDict,_X_VarDict,Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 4495
		  call 'orddict':'from_list'
		      (_cor0)
	      in  %% Line 4495
		  {_cor9,[]}
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'build_field_dict',5}}] )
	    -| ['compiler_generated'] )
	end
'get_mod_record'/3 =
    %% Line 4497
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{FieldName,DeclType}|Left1],%% Line 4498
					[{_cor15,ModType}|Left2],Acc>
	      when call 'erlang':'=:='
		    (_cor15,
		     FieldName) ->
	      let <_15843> =
		  apply 't_has_var'/1
		      (ModType)
	      in  let <ModTypeNoVars> =
		      case _15843 of
			<'true'> when 'true' ->
			    apply 't_subst_aux'/2
				(ModType, [])
			<'false'> when 'true' ->
			    ModType
			( <_6703> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_15843})
			  -| ['compiler_generated'] )
		      end
		  in  let <_1429> =
			  %% Line 4501
			  apply 'contains_remote'/1
			      (ModTypeNoVars)
		      in  let <_cor8> =
			      %% Line 4502
			      ( case _1429 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_7833> =
					    apply 'contains_remote'/1
						(DeclType)
					in  %% Line 4503
					    ( case _7833 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      apply 't_is_subtype'/2
							  (ModTypeNoVars, DeclType)
						  -| ['compiler_generated'] )
						( <_cor5> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_7833}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor4> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_1429}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 4500
			      case _cor8 of
				%% Line 4505
				<'false'> when 'true' ->
				    {'error',FieldName}
				%% Line 4506
				<'true'> when 'true' ->
				    apply 'get_mod_record'/3
					(Left1, Left2, [{FieldName,ModType}|_cor0])
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
	  %% Line 4508
	  <[DT = {FieldName1,_X_DeclType}|Left1],List2 = %% Line 4509
							 [{FieldName2,_X_ModType}|_cor16],Acc>
	      when %% Line 4510
		call 'erlang':'<'
		    (FieldName1,
		     FieldName2) ->
	      %% Line 4511
	      apply 'get_mod_record'/3
		  (Left1, _cor1, [DT|_cor0])
	  %% Line 4512
	  <DeclFields,[],Acc> when 'true' ->
	      let <_cor10> =
		  %% Line 4513
		  call 'erlang':'++'
		      (_cor0, _cor2)
	      in  let <_cor11> =
		      %% Line 4513
		      call 'orddict':'from_list'
			  (_cor10)
		  in  %% Line 4513
		      {'ok',_cor11}
	  %% Line 4514
	  <_cor17,[{FieldName2,_X_ModType}|_cor18],_X_Acc> when 'true' ->
	      %% Line 4515
	      {'error',FieldName2}
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'get_mod_record',3}}] )
	    -| ['compiler_generated'] )
	end
'contains_remote'/1 =
    %% Line 4517
    fun (_cor0) ->
	let <Map> =
	    fun (_cor3) ->
		let <_14726> =
		    call 'erl_types':'t_is_remote'
			(_cor3)
		in  case _14726 of
		      <'true'> when 'true' ->
			  'none'
		      <'false'> when 'true' ->
			  _cor3
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_14726})
			-| ['compiler_generated'] )
		    end
	in  let <TypeNoRemote> =
		call 'erl_types':'t_map'
		    (Map, _cor0)
	    in  let <_cor3> =
		    case <_cor0,TypeNoRemote> of
		      <T,_cor4>
			  when call 'erlang':'=:='
				(TypeNoRemote,
				 _cor0) ->
			  'true'
		      <_cor5,_cor6> when 'true' ->
			  'false'
		    end
		in  %% Line 4519
		    call 'erlang':'not'
			(_cor3)
'fields_from_form'/4 =
    %% Line 4521
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4522
	      {[],[]}
	  %% Line 4523
	  <[{Name,Type}|Tail],TypeNames,RecDict,VarDict> when 'true' ->
	      let <_22135> =
		  %% Line 4525
		  apply 't_from_form'/4
		      (Type, _cor2, _cor1, _cor0)
	      in  %% Line 4525
		  case _22135 of
		    <{T,R1}> when 'true' ->
			let <_40507> =
			    %% Line 4526
			    apply 'fields_from_form'/4
				(Tail, _cor2, _cor1, _cor0)
			in  %% Line 4526
			    case _40507 of
			      <{F,R2}> when 'true' ->
				  let <_cor6> =
				      %% Line 4527
				      call 'erlang':'++'
					  (R1, R2)
				  in  %% Line 4527
				      {[{Name,T}|F],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_40507})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_22135})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'fields_from_form',4}}] )
	    -| ['compiler_generated'] )
	end
'list_from_form'/4 =
    %% Line 4529
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_TypeNames,_X_RecDict,_X_VarDict> when 'true' ->
	      %% Line 4530
	      {[],[]}
	  %% Line 4531
	  <[H|Tail],TypeNames,RecDict,VarDict> when 'true' ->
	      let <_20625> =
		  %% Line 4532
		  apply 't_from_form'/4
		      (H, _cor2, _cor1, _cor0)
	      in  %% Line 4532
		  case _20625 of
		    <{T,R1}> when 'true' ->
			let <_32125> =
			    %% Line 4533
			    apply 'list_from_form'/4
				(Tail, _cor2, _cor1, _cor0)
			in  %% Line 4533
			    case _32125 of
			      <{L,R2}> when 'true' ->
				  let <_cor6> =
				      %% Line 4534
				      call 'erlang':'++'
					  (R1, R2)
				  in  %% Line 4534
				      {[T|L],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_32125})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_20625})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'list_from_form',4}}] )
	    -| ['compiler_generated'] )
	end
't_form_to_string'/1 =
    %% Line 4538
    fun (_cor0) ->
	case _cor0 of
	  <{'var',_X_L,'_'}> when 'true' ->
	      [95]
	  %% Line 4539
	  <{'var',_X_L,Name}> when 'true' ->
	      call 'erlang':'atom_to_list'
		  (Name)
	  %% Line 4540
	  <{'atom',_X_L,Atom}> when 'true' ->
	      let <_cor1> =
		  %% Line 4541
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  %% Line 4541
		  call 'io_lib':'write_string'
		      (_cor1, 39)
	  %% Line 4542
	  <{'integer',_X_L,Int}> when 'true' ->
	      call 'erlang':'integer_to_list'
		  (Int)
	  %% Line 4543
	  <Op = {'op',_X_L,_X_Op,_X_Arg}> when 'true' ->
	      let <_20814> =
		  %% Line 4544
		  call 'erl_eval':'partial_eval'
		      (_cor0)
	      in  %% Line 4544
		  case _20814 of
		    %% Line 4545
		    <Int = {'integer',_cor50,_cor51}> when 'true' ->
			apply 't_form_to_string'/1
			    (_20814)
		    %% Line 4546
		    <_cor52> when 'true' ->
			call 'io_lib':'format'
			    ([66|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		  end
	  %% Line 4548
	  <Op = {'op',_X_L,_X_Op,_X_Arg1,_X_Arg2}> when 'true' ->
	      let <_29518> =
		  %% Line 4549
		  call 'erl_eval':'partial_eval'
		      (_cor0)
	      in  %% Line 4549
		  case _29518 of
		    %% Line 4550
		    <Int = {'integer',_cor53,_cor54}> when 'true' ->
			apply 't_form_to_string'/1
			    (_29518)
		    %% Line 4551
		    <_cor55> when 'true' ->
			call 'io_lib':'format'
			    ([66|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		  end
	  %% Line 4553
	  <{'ann_type',_X_L,[Var|[Type|[]]]}> when 'true' ->
	      let <_cor6> =
		  %% Line 4554
		  apply 't_form_to_string'/1
		      (Var)
	      in  let <_cor4> =
		      %% Line 4554
		      apply 't_form_to_string'/1
			  (Type)
		  in  let <_cor5> =
			  %% Line 4554
			  [58|[58|_cor4]]
		      in  %% Line 4554
			  call 'erlang':'++'
			      (_cor6, _cor5)
	  %% Line 4555
	  <{'paren_type',_X_L,[Type|[]]}> when 'true' ->
	      let <_cor7> =
		  %% Line 4556
		  apply 't_form_to_string'/1
		      (Type)
	      in  let <_30857> =
		      %% Line 4556
		      [_cor7|[]]
		  in  let <_cor2> =
			  %% Line 4839
			  call 'io_lib':'format'
			      ([40|[126|[115|[41]]]], _30857)
		      in  %% Line 4839
			  call 'lists':'flatten'
			      (_cor2)
	  %% Line 4557
	  <{'remote_type',_X_L,[{'atom',_cor56,Mod}|[{'atom',_cor57,Name}|[Args|[]]]]}> when 'true' ->
	      let <_cor8> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Args, [])
	      in  let <_cor9> =
		      %% Line 4558
		      call 'string':'join'
			  (_cor8, [44])
		  in  let <_cor10> =
			  %% Line 4558
			  call 'erlang':'++'
			      (_cor9, [41])
		      in  let <ArgString> =
			      %% Line 4558
			      [40|_cor10]
			  in  let <_675> =
				  %% Line 4559
				  [Mod|[Name|[]]]
			      in  let <_cor2> =
				      %% Line 4839
				      call 'io_lib':'format'
					  ([126|[119|[58|[126|[119]]]]], _675)
				  in  let <_cor12> =
					  %% Line 4839
					  call 'lists':'flatten'
					      (_cor2)
				      in  %% Line 4559
					  call 'erlang':'++'
					      (_cor12, ArgString)
	  %% Line 4560
	  <{'type',_X_L,'arity',[]}> when 'true' ->
	      [97|[114|[105|[116|[121|[40|[41]]]]]]]
	  %% Line 4561
	  <{'type',_X_L,'binary',[]}> when 'true' ->
	      [98|[105|[110|[97|[114|[121|[40|[41]]]]]]]]
	  %% Line 4562
	  <Type = {'type',_X_L,'binary',[Base|[Unit|[]]]}> when 'true' ->
	      let <_cor14> =
		  %% Line 4563
		  call 'erl_eval':'partial_eval'
		      (Base)
	      in  let <_cor13> =
		      %% Line 4563
		      call 'erl_eval':'partial_eval'
			  (Unit)
		  in  %% Line 4563
		      case <_cor14,_cor13> of
			%% Line 4564
			<{'integer',_cor58,B},{'integer',_cor59,U}> when 'true' ->
			    %% Line 4566
			    case <U,B> of
			      %% Line 4567
			      <0,0> when 'true' ->
				  [60|[60|[62|[62]]]]
			      %% Line 4568
			      <8,0> when 'true' ->
				  [98|[105|[110|[97|[114|[121|[40|[41]]]]]]]]
			      %% Line 4569
			      <1,0> when 'true' ->
				  [98|[105|[116|[115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]]]]
			      %% Line 4570
			      <0,_cor60> when 'true' ->
				  let <_16868> =
				      [B|[]]
				  in  let <_cor2> =
					  %% Line 4839
					  call 'io_lib':'format'
					      ([60|[60|[95|[58|[126|[119|[62|[62]]]]]]]], _16868)
				      in  %% Line 4839
					  call 'lists':'flatten'
					      (_cor2)
			      %% Line 4571
			      <_cor61,0> when 'true' ->
				  let <_13113> =
				      [U|[]]
				  in  let <_cor2> =
					  %% Line 4839
					  call 'io_lib':'format'
					      ([60|[60|[95|[58|[95|[42|[126|[119|[62|[62]]]]]]]]]], _13113)
				      in  %% Line 4839
					  call 'lists':'flatten'
					      (_cor2)
			      %% Line 4572
			      <_cor62,_cor63> when 'true' ->
				  let <_19662> =
				      [B|[U|[]]]
				  in  let <_cor2> =
					  %% Line 4839
					  call 'io_lib':'format'
					      ([60|[60|[95|[58|[126|[119|[44|[95|[58|[95|[42|[126|[119|[62|[62]]]]]]]]]]]]]]], _19662)
				      in  %% Line 4839
					  call 'lists':'flatten'
					      (_cor2)
			    end
			%% Line 4574
			<_fol934,_fol935> when 'true' ->
			    call 'io_lib':'format'
				([66|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[98|[105|[116|[115|[116|[114|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		      end
	  %% Line 4576
	  <{'type',_X_L,'bitstring',[]}> when 'true' ->
	      [98|[105|[116|[115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]]]]
	  %% Line 4577
	  <{'type',_X_L,'fun',[]}> when 'true' ->
	      [102|[117|[110|[40|[41]]]]]
	  %% Line 4578
	  <{'type',_X_L,'fun',[{'type',_cor67,'any'}|[Range|[]]]}> when 'true' ->
	      let <_cor17> =
		  %% Line 4579
		  apply 't_form_to_string'/1
		      (Range)
	      in  %% Line 4579
		  call 'erlang':'++'
		      ([102|[117|[110|[40|[46|[46|[46|[41|[32|[45|[62|[32]]]]]]]]]]]], _cor17)
	  %% Line 4580
	  <{'type',_X_L,'fun',[{'type',_cor68,'product',Domain}|[Range|[]]]}> when 'true' ->
	      let <_cor21> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Domain, [])
	      in  let <_cor22> =
		      %% Line 4581
		      call 'string':'join'
			  (_cor21, [44])
		  in  let <_cor18> =
			  %% Line 4582
			  apply 't_form_to_string'/1
			      (Range)
		      in  let <_cor19> =
			      %% Line 4582
			      call 'erlang':'++'
				  (_cor18, [41])
			  in  let <_cor20> =
				  %% Line 4582
				  call 'erlang':'++'
				      ([41|[32|[45|[62|[32]]]]], _cor19)
			      in  let <_cor23> =
				      %% Line 4581
				      call 'erlang':'++'
					  (_cor22, _cor20)
				  in  %% Line 4581
				      call 'erlang':'++'
					  ([102|[117|[110|[40|[40]]]]], _cor23)
	  %% Line 4583
	  <{'type',_X_L,'iodata',[]}> when 'true' ->
	      [105|[111|[100|[97|[116|[97|[40|[41]]]]]]]]
	  %% Line 4584
	  <{'type',_X_L,'iolist',[]}> when 'true' ->
	      [105|[111|[108|[105|[115|[116|[40|[41]]]]]]]]
	  %% Line 4585
	  <{'type',_X_L,'list',[Type|[]]}> when 'true' ->
	      let <_cor24> =
		  %% Line 4586
		  apply 't_form_to_string'/1
		      (Type)
	      in  let <_cor25> =
		      %% Line 4586
		      call 'erlang':'++'
			  (_cor24, [93])
		  in  %% Line 4586
		      [91|_cor25]
	  %% Line 4587
	  <{'type',_X_L,'map',_cor69}> when 'true' ->
	      %% Line 4588
	      [35|[123|[125]]]
	  %% Line 4589
	  <{'type',_X_L,'mfa',[]}> when 'true' ->
	      [109|[102|[97|[40|[41]]]]]
	  %% Line 4590
	  <{'type',_X_L,'module',[]}> when 'true' ->
	      [109|[111|[100|[117|[108|[101|[40|[41]]]]]]]]
	  %% Line 4591
	  <{'type',_X_L,'node',[]}> when 'true' ->
	      [110|[111|[100|[101|[40|[41]]]]]]
	  %% Line 4592
	  <{'type',_X_L,'nonempty_list',[Type|[]]}> when 'true' ->
	      let <_cor26> =
		  %% Line 4593
		  apply 't_form_to_string'/1
		      (Type)
	      in  let <_cor27> =
		      %% Line 4593
		      call 'erlang':'++'
			  (_cor26, [44|[46|[46|[46|[93]]]]])
		  in  %% Line 4593
		      [91|_cor27]
	  %% Line 4594
	  <{'type',_X_L,'nonempty_string',[]}> when 'true' ->
	      [110|[111|[110|[101|[109|[112|[116|[121|[95|[115|[116|[114|[105|[110|[103|[40|[41]]]]]]]]]]]]]]]]]
	  %% Line 4595
	  <{'type',_X_L,'product',Elements}> when 'true' ->
	      let <_cor28> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Elements, [])
	      in  let <_cor29> =
		      %% Line 4596
		      call 'string':'join'
			  (_cor28, [44])
		  in  let <_cor30> =
			  %% Line 4596
			  call 'erlang':'++'
			      (_cor29, [62])
		      in  %% Line 4596
			  [60|_cor30]
	  %% Line 4597
	  <Type = {'type',_X_L,'range',[From|[To|[]]]}> when 'true' ->
	      let <_cor32> =
		  %% Line 4598
		  call 'erl_eval':'partial_eval'
		      (From)
	      in  let <_cor31> =
		      %% Line 4598
		      call 'erl_eval':'partial_eval'
			  (To)
		  in  %% Line 4598
		      case <_cor32,_cor31> of
			%% Line 4599
			<{'integer',_cor70,FromVal},{'integer',_cor71,ToVal}> when 'true' ->
			    let <_4504> =
				%% Line 4600
				[FromVal|[ToVal|[]]]
			    in  let <_cor2> =
				    %% Line 4839
				    call 'io_lib':'format'
					([126|[119|[46|[46|[126|[119]]]]]], _4504)
				in  %% Line 4839
				    call 'lists':'flatten'
					(_cor2)
			%% Line 4601
			<_fol940,_fol941> when 'true' ->
			    let <_28317> =
				[_cor0|[]]
			    in  let <_cor2> =
				    %% Line 4839
				    call 'io_lib':'format'
					([66|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[116|[121|[112|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]], _28317)
				in  %% Line 4839
				    call 'lists':'flatten'
					(_cor2)
		      end
	  %% Line 4603
	  <{'type',_X_L,'record',[{'atom',_cor73,Name}|[]]}> when 'true' ->
	      let <_12031> =
		  %% Line 4604
		  [Name|[]]
	      in  let <_cor2> =
		      %% Line 4839
		      call 'io_lib':'format'
			  ([35|[126|[119|[123|[125]]]]], _12031)
		  in  %% Line 4839
		      call 'lists':'flatten'
			  (_cor2)
	  %% Line 4605
	  <{'type',_X_L,'record',[{'atom',_cor74,Name}|Fields]}> when 'true' ->
	      let <_cor34> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Fields, [])
	      in  let <FieldString> =
		      %% Line 4606
		      call 'string':'join'
			  (_cor34, [44])
		  in  let <_24405> =
			  %% Line 4607
			  [Name|[FieldString|[]]]
		      in  let <_cor2> =
			      %% Line 4839
			      call 'io_lib':'format'
				  ([35|[126|[119|[123|[126|[115|[125]]]]]]], _24405)
			  in  %% Line 4839
			      call 'lists':'flatten'
				  (_cor2)
	  %% Line 4608
	  <{'type',_X_L,'field_type',[{'atom',_cor75,Name}|[Type|[]]]}> when 'true' ->
	      let <_cor36> =
		  %% Line 4609
		  apply 't_form_to_string'/1
		      (Type)
	      in  let <_35363> =
		      %% Line 4609
		      [Name|[_cor36|[]]]
		  in  let <_cor2> =
			  %% Line 4839
			  call 'io_lib':'format'
			      ([126|[119|[58|[58|[126|[115]]]]]], _35363)
		      in  %% Line 4839
			  call 'lists':'flatten'
			      (_cor2)
	  %% Line 4610
	  <{'type',_X_L,'term',[]}> when 'true' ->
	      [116|[101|[114|[109|[40|[41]]]]]]
	  %% Line 4611
	  <{'type',_X_L,'timeout',[]}> when 'true' ->
	      [116|[105|[109|[101|[111|[117|[116|[40|[41]]]]]]]]]
	  %% Line 4612
	  <{'type',_X_L,'tuple','any'}> when 'true' ->
	      [116|[117|[112|[108|[101|[40|[41]]]]]]]
	  %% Line 4613
	  <{'type',_X_L,'tuple',Args}> when 'true' ->
	      let <_cor37> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Args, [])
	      in  let <_cor38> =
		      %% Line 4614
		      call 'string':'join'
			  (_cor37, [44])
		  in  let <_cor39> =
			  %% Line 4614
			  call 'erlang':'++'
			      (_cor38, [125])
		      in  %% Line 4614
			  [123|_cor39]
	  %% Line 4615
	  <{'type',_X_L,'union',Args}> when 'true' ->
	      let <_cor40> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (Args, [])
	      in  %% Line 4616
		  call 'string':'join'
		      (_cor40, [32|[124|[32]]])
	  %% Line 4617
	  <T = {'type',_X_L,Name,[]}> when 'true' ->
	      %% Line 4618
	      try
		  let <_cor41> =
		      apply 't_from_form'/1
			  (_cor0)
		  in  apply 't_to_string'/1
			  (_cor41)
	      of <_cor42> ->
		  _cor42
	      catch <_cor45,_cor44,_cor43> ->
		  case <_cor45,_cor44,_cor43> of
		    %% Line 4619
		    <'throw',{'error',_cor76},_cor77> when 'true' ->
			let <_12547> =
			    %% Line 4636
			    [Name|[]]
			in  let <_cor2> =
				%% Line 4839
				call 'io_lib':'format'
				    ([126|[119]], _12547)
			    in  let <_cor46> =
				    %% Line 4839
				    call 'lists':'flatten'
					(_cor2)
				in  call 'erlang':'++'
					(_cor46, [40|[41]])
		    ( <_27877,_30101,_16474> when 'true' ->
			  primop 'raise'
			      (_cor43, _cor44)
		      -| ['compiler_generated'] )
		  end
	  %% Line 4621
	  <{'type',_X_L,Name,List}> when 'true' ->
	      let <_cor47> =
		  %% Line 4626
		  apply 't_form_to_string_list'/2
		      (List, [])
	      in  let <_cor48> =
		      %% Line 4623
		      call 'string':'join'
			  (_cor47, [44])
		  in  let <_13626> =
			  %% Line 4623
			  [Name|[_cor48|[]]]
		      in  let <_cor2> =
			      %% Line 4839
			      call 'io_lib':'format'
				  ([126|[119|[40|[126|[115|[41]]]]]], _13626)
			  in  %% Line 4839
			      call 'lists':'flatten'
				  (_cor2)
	  ( <_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'t_form_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
't_form_to_string_list'/2 =
    %% Line 4628
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 4629
		  apply 't_form_to_string'/1
		      (H)
	      in  %% Line 4629
		  apply 't_form_to_string_list'/2
		      (T, [_cor2|_cor0])
	  %% Line 4630
	  <[],Acc> when 'true' ->
	      %% Line 4631
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'t_form_to_string_list',2}}] )
	    -| ['compiler_generated'] )
	end
'atom_to_string'/1 =
    %% Line 4635
    fun (_cor0) ->
	let <_12547> =
	    %% Line 4636
	    [_cor0|[]]
	in  let <_cor2> =
		%% Line 4839
		call 'io_lib':'format'
		    ([126|[119]], _12547)
	    in  %% Line 4839
		call 'lists':'flatten'
		    (_cor2)
'any_none'/1 =
    %% Line 4646
    fun (_cor0) ->
	case _cor0 of
	  <['none'|_X_Left]> when 'true' ->
	      'true'
	  %% Line 4647
	  <[_cor2|Left]> when 'true' ->
	      apply 'any_none'/1
		  (Left)
	  %% Line 4648
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'any_none',1}}] )
	    -| ['compiler_generated'] )
	end
'any_none_or_unit'/1 =
    %% Line 4652
    fun (_cor0) ->
	case _cor0 of
	  <['none'|_cor2]> when 'true' ->
	      'true'
	  %% Line 4653
	  <['unit'|_cor3]> when 'true' ->
	      'true'
	  %% Line 4654
	  <[_cor4|Left]> when 'true' ->
	      apply 'any_none_or_unit'/1
		  (Left)
	  %% Line 4655
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'any_none_or_unit',1}}] )
	    -| ['compiler_generated'] )
	end
'is_erl_type'/1 =
    %% Line 4659
    fun (_cor0) ->
	case _cor0 of
	  <'any'> when 'true' ->
	      'true'
	  %% Line 4660
	  <'none'> when 'true' ->
	      'true'
	  %% Line 4661
	  <'unit'> when 'true' ->
	      'true'
	  %% Line 4662
	  <{'c',_cor2,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 4663
	  <_cor5> when 'true' ->
	      'false'
	end
'lookup_record'/2 =
    %% Line 4668
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tag,RecDict>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      let <_32381> =
		  %% Line 4669
		  call 'dict':'find'
		      ({'record',_cor1}, _cor0)
	      in  %% Line 4669
		  case _32381 of
		    %% Line 4670
		    <{'ok',[{_X_Arity,Fields}|[]]}> when 'true' ->
			%% Line 4671
			{'ok',Fields}
		    %% Line 4672
		    <{'ok',List}>
			when call 'erlang':'is_list'
			      (List) ->
			%% Line 4675
			'error'
		    %% Line 4676
		    <'error'> when 'true' ->
			%% Line 4677
			'error'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_32381})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'lookup_record',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_record'/3 =
    %% Line 4683
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tag,Arity,RecDict>
	      when call 'erlang':'is_atom'
		    (_cor2) ->
	      let <_4501> =
		  %% Line 4684
		  call 'dict':'find'
		      ({'record',_cor2}, _cor0)
	      in  %% Line 4684
		  case _4501 of
		    %% Line 4685
		    <{'ok',[{_cor7,Fields}|[]]}>
			when call 'erlang':'=:='
			      (_cor7,
			       _cor1) ->
			{'ok',Fields}
		    %% Line 4686
		    <{'ok',OrdDict}> when 'true' ->
			call 'orddict':'find'
			    (_cor1, OrdDict)
		    %% Line 4687
		    <'error'> when 'true' ->
			'error'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4501})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'lookup_record',3}}] )
	    -| ['compiler_generated'] )
	end
'lookup_type'/3 =
    %% Line 4690
    fun (_cor2,_cor1,_cor0) ->
	let <_30109> =
	    %% Line 4691
	    call 'dict':'find'
		({'type',_cor2,_cor1}, _cor0)
	in  %% Line 4691
	    case _30109 of
	      %% Line 4692
	      <'error'> when 'true' ->
		  let <_26132> =
		      %% Line 4693
		      call 'dict':'find'
			  ({'opaque',_cor2,_cor1}, _cor0)
		  in  %% Line 4693
		      case _26132 of
			%% Line 4694
			<'error'> when 'true' ->
			    'error'
			%% Line 4695
			<{'ok',Found}> when 'true' ->
			    {'opaque',Found}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_26132})
			  -| ['compiler_generated'] )
		      end
	      %% Line 4697
	      <{'ok',Found}> when 'true' ->
		  {'type',Found}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_30109})
		-| ['compiler_generated'] )
	    end
'type_is_defined'/4 =
    %% Line 4703
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4704
	call 'dict':'is_key'
	    ({_cor3,_cor2,_cor1}, _cor0)
'can_unfold_more'/2 =
    %% Line 4706
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 4707
	    fun (_cor4,_cor3) ->
		case _cor4 of
		  <_cor11>
		      when call 'erlang':'=:='
			    (_cor4,
			     _cor1) ->
		      call 'erlang':'+'
			  (_cor3, 1)
		  <_cor12> when 'true' ->
		      _cor3
		end
	in  let <_cor8> =
		%% Line 4708
		call 'lists':'foldl'
		    (Fun, 0, _cor0)
	    in  %% Line 4708
		call 'erlang':'<'
		    (_cor8, 2)
'do_opaque'/3 =
    %% Line 4714
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type = {'c','opaque',_cor18,_cor19},Opaques,Pred> when 'true' ->
	      let <_cor5> =
		  %% Line 4715
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (_cor1,
				   'universe') ->
			    'true'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    apply 'is_opaque_type'/2
				(_cor2, _cor1)
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 4715
		  case _cor5 of
		    %% Line 4716
		    <'true'> when 'true' ->
			let <_cor6> =
			    apply 't_opaque_structure'/1
				(_cor2)
			in  apply 'do_opaque'/3
				(_cor6, _cor1, _cor0)
		    %% Line 4717
		    <'false'> when 'true' ->
			apply _cor0
			    (_cor2)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4719
	  <Type = {'c','union',List = [_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[_cor27|[_cor28|[_cor29|[_cor30|[]]]]]]]]]]]],_cor31},Opaques,Pred> when 'true' ->
	      %% Line 4720
	      case List of
		<[A|[B|[F|[I|[L|[N|[T|[M|[O|[R|[Map|[]]]]]]]]]]]]> when 'true' ->
		    %% Line 4721
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(O,
				 'none') ->
			  apply _cor0
			      (_cor2)
		      %% Line 4722
		      <> when 'true' ->
			  let <_cor11> =
			      %% Line 4723
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (_cor1,
					       'universe') ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					apply 'is_opaque_type'/2
					    (O, _cor1)
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 4723
			      case _cor11 of
				%% Line 4724
				<'true'> when 'true' ->
				    let <S> =
					%% Line 4725
					apply 't_opaque_structure'/1
					    (O)
				    in  let <_cor13> =
					    %% Line 4726
					    apply 't_sup'/1
						([A|[B|[F|[I|[L|[N|[T|[M|[S|[R|[Map|[]]]]]]]]]]]])
					in  %% Line 4726
					    apply 'do_opaque'/3
						(_cor13, _cor1, _cor0)
				%% Line 4727
				<'false'> when 'true' ->
				    apply _cor0
					(_cor2)
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor11})
				  -| ['compiler_generated'] )
			      end
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',List})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4730
	  <Type,_X_Opaques,Pred> when 'true' ->
	      %% Line 4731
	      apply _cor0
		  (_cor2)
	end
'is_same_type_name'/2 =
    %% Line 4733
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ModNameArgs,_cor6>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      'true'
	  %% Line 4734
	  <{Mod,Name,Args1},{_cor7,_cor8,Args2}>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(_cor7, Mod)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (_cor8, Name)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      let <_11508> =
		  %% Line 4739
		  case Args1 of
		    <[]> when 'true' ->
			'true'
		    %% Line 4740
		    <[T|L]> when 'true' ->
			let <_34842> =
			    apply 'do_opaque'/3
				(T, 'universe', 'is_any'/1)
			in  %% Line 4741
			    ( case _34842 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      case L of
					<[]> when 'true' ->
					    'true'
					<[_39862|_502]> when 'true' ->
					    let <_21450> =
						apply 'do_opaque'/3
						    (_39862, 'universe', 'is_any'/1)
					    in  ( case _21450 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  apply 'all_any'/1
							      (_502)
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_2042> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_21450}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					%% Line 4742
					<_cor4> when 'true' ->
					    'false'
				      end
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_3132> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_34842}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 4742
		    <_cor4> when 'true' ->
			'false'
		  end
	      in  %% Line 4735
		  ( case _11508 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 4739
			    case Args2 of
			      <[]> when 'true' ->
				  'true'
			      %% Line 4740
			      <[T|L]> when 'true' ->
				  let <_34842> =
				      apply 'do_opaque'/3
					  (T, 'universe', 'is_any'/1)
				  in  %% Line 4741
				      ( case _34842 of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'all_any'/1
						    (L)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_36203> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_34842}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      %% Line 4742
			      <_cor4> when 'true' ->
				  'false'
			    end
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_11508}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 4736
	  <{Mod1,Name1,Args1},{Mod2,Name2,Args2}> when 'true' ->
	      %% Line 4737
	      apply 'is_same_type_name2'/6
		  (Mod1, Name1, Args1, Mod2, Name2, Args2)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_same_type_name',2}}] )
	    -| ['compiler_generated'] )
	end
'all_any'/1 =
    %% Line 4739
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 4740
	  <[T|L]> when 'true' ->
	      let <_34842> =
		  apply 'do_opaque'/3
		      (T, 'universe', 'is_any'/1)
	      in  %% Line 4741
		  ( case _34842 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'all_any'/1
				(L)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_34842}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 4742
	  <_cor4> when 'true' ->
	      'false'
	end
'is_same_type_name2'/6 =
    %% Line 4749
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'digraph','digraph',[],'digraph','graph',[]> when 'true' ->
	      'true'
	  %% Line 4750
	  <'digraph','graph',[],'digraph','digraph',[]> when 'true' ->
	      'true'
	  %% Line 4751
	  <'gb_sets','gb_set',[],'gb_sets','set',[_cor12|[]]> when 'true' ->
	      'true'
	  %% Line 4752
	  <'gb_sets','set',[_cor13|[]],'gb_sets','gb_set',[]> when 'true' ->
	      'true'
	  %% Line 4753
	  <'gb_trees','gb_tree',[],'gb_trees','tree',[_cor14|[_cor15|[]]]> when 'true' ->
	      'true'
	  %% Line 4754
	  <'gb_trees','tree',[_cor16|[_cor17|[]]],'gb_trees','gb_tree',[]> when 'true' ->
	      'true'
	  %% Line 4755
	  <_cor18,_cor19,_cor20,_cor21,_cor22,_cor23> when 'true' ->
	      'false'
	end
'map_keys'/1 =
    %% Line 4757
    fun (_cor0) ->
	case _cor0 of
	  <{'c','map',Pairs,_cor6}> when 'true' ->
	      %% Line 4758
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[{K,_cor7}|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [K|_cor4]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_31665> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  case Pairs of
		      <[{K,_cor7}|_cor2]> when 'true' ->
			  let <_cor4> =
			      apply 'lc$^0'/1
				  (_cor2)
			  in  ( [K|_cor4]
				-| ['compiler_generated'] )
		      ( <[_cor1|_cor2]> when 'true' ->
			    apply 'lc$^0'/1
				(_cor2)
			-| ['compiler_generated'] )
		      <[]> when 'true' ->
			  []
		      ( <_31665> when 'true' ->
			    primop 'match_fail'
				({'function_clause',Pairs})
			-| ['compiler_generated'] )
		    end
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_keys',1}}] )
	    -| ['compiler_generated'] )
	end
'map_values'/1 =
    %% Line 4760
    fun (_cor0) ->
	case _cor0 of
	  <{'c','map',Pairs,_cor6}> when 'true' ->
	      %% Line 4761
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[{_cor7,V}|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [V|_cor4]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_14240> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  case Pairs of
		      <[{_cor7,V}|_cor2]> when 'true' ->
			  let <_cor4> =
			      apply 'lc$^0'/1
				  (_cor2)
			  in  ( [V|_cor4]
				-| ['compiler_generated'] )
		      ( <[_cor1|_cor2]> when 'true' ->
			    apply 'lc$^0'/1
				(_cor2)
			-| ['compiler_generated'] )
		      <[]> when 'true' ->
			  []
		      ( <_14240> when 'true' ->
			    primop 'match_fail'
				({'function_clause',Pairs})
			-| ['compiler_generated'] )
		    end
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_values',1}}] )
	    -| ['compiler_generated'] )
	end
'flat_format'/2 =
    %% Line 4838
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4839
	    call 'io_lib':'format'
		(_cor1, _cor0)
	in  %% Line 4839
	    call 'lists':'flatten'
		(_cor2)
'gcd'/2 =
    %% Line 4849
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,B>
	      when call 'erlang':'>'
		    (_cor0,
		     _cor1) ->
	      %% Line 4856
	      case <_cor0,_cor1> of
		<_29311,0> when 'true' ->
		    _cor0
		%% Line 4857
		<_18205,_7555> when 'true' ->
		    let <_4001> =
			%% Line 4858
			call 'erlang':'rem'
			    (_cor0, _cor1)
		    in  %% Line 4858
			case _4001 of
			  %% Line 4859
			  <0> when 'true' ->
			      _cor1
			  %% Line 4860
			  <X> when 'true' ->
			      apply 'gcd1'/2
				  (_cor1, _4001)
			end
	      end
	  %% Line 4851
	  <A,B> when 'true' ->
	      %% Line 4856
	      case <_cor1,_cor0> of
		<_4571,0> when 'true' ->
		    _cor1
		%% Line 4857
		<_15659,_16661> when 'true' ->
		    let <_4001> =
			%% Line 4858
			call 'erlang':'rem'
			    (_cor1, _cor0)
		    in  %% Line 4858
			case _4001 of
			  %% Line 4859
			  <0> when 'true' ->
			      _cor0
			  %% Line 4860
			  <X> when 'true' ->
			      apply 'gcd1'/2
				  (_cor0, _4001)
			end
	      end
	end
'gcd1'/2 =
    %% Line 4856
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,0> when 'true' ->
	      _cor1
	  %% Line 4857
	  <A,B> when 'true' ->
	      let <_4001> =
		  %% Line 4858
		  call 'erlang':'rem'
		      (_cor1, _cor0)
	      in  %% Line 4858
		  case _4001 of
		    %% Line 4859
		    <0> when 'true' ->
			_cor0
		    %% Line 4860
		    <X> when 'true' ->
			apply 'gcd1'/2
			    (_cor0, _4001)
		  end
	end
'bitstr_concat'/2 =
    %% Line 4865
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',_cor6> when 'true' ->
	      'none'
	  %% Line 4866
	  <_cor7,'none'> when 'true' ->
	      'none'
	  %% Line 4867
	  <{'c','binary',[U1|[B1|[]]],_cor8},{'c','binary',[U2|[B2|[]]],_cor9}> when 'true' ->
	      let <_cor3> =
		  %% Line 4868
		  apply 'gcd'/2
		      (U1, U2)
	      in  let <_cor2> =
		      %% Line 4868
		      call 'erlang':'+'
			  (B1, B2)
		  in  %% Line 4868
		      apply 't_bitstr'/2
			  (_cor3, _cor2)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bitstr_concat',2}}] )
	    -| ['compiler_generated'] )
	end
'bitstr_match'/2 =
    %% Line 4872
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',_cor11> when 'true' ->
	      'none'
	  %% Line 4873
	  <_cor12,'none'> when 'true' ->
	      'none'
	  %% Line 4874
	  <{'c','binary',[0|[B1|[]]],_cor13},{'c','binary',[0|[B2|[]]],_cor14}>
	      when call 'erlang':'=<'
		    (B1,
		     B2) ->
	      let <_cor2> =
		  %% Line 4875
		  call 'erlang':'-'
		      (B2, B1)
	      in  {'c','binary',[%% Line 4875
				 0|[_cor2|[]]],'unknown'}
	  %% Line 4876
	  <{'c','binary',[0|[_X_B1|[]]],_cor15},{'c','binary',[0|[_X_B2|[]]],_cor16}> when 'true' ->
	      %% Line 4877
	      'none'
	  %% Line 4878
	  <{'c','binary',[0|[B1|[]]],_cor17},{'c','binary',[U2|[B2|[]]],_cor18}>
	      when call 'erlang':'=<'
		    (B1,
		     B2) ->
	      let <_cor3> =
		  %% Line 4879
		  call 'erlang':'-'
		      (B2, B1)
	      in  %% Line 4879
		  apply 't_bitstr'/2
		      (U2, _cor3)
	  %% Line 4880
	  <{'c','binary',[0|[B1|[]]],_cor19},{'c','binary',[U2|[B2|[]]],_cor20}> when 'true' ->
	      let <_cor4> =
		  %% Line 4881
		  call 'erlang':'-'
		      (B2, B1)
	      in  let <_cor5> =
		      %% Line 4881
		      apply 'handle_base'/2
			  (U2, _cor4)
		  in  %% Line 4881
		      apply 't_bitstr'/2
			  (U2, _cor5)
	  %% Line 4882
	  <{'c','binary',[_cor21|[B1|[]]],_cor22},{'c','binary',[0|[B2|[]]],_cor23}>
	      when call 'erlang':'>'
		    (B1,
		     B2) ->
	      %% Line 4883
	      'none'
	  %% Line 4884
	  <{'c','binary',[U1|[B1|[]]],_cor24},{'c','binary',[U2|[B2|[]]],_cor25}> when 'true' ->
	      let <GCD> =
		  %% Line 4885
		  apply 'gcd'/2
		      (U1, U2)
	      in  let <_cor7> =
		      %% Line 4886
		      call 'erlang':'-'
			  (B2, B1)
		  in  let <_cor8> =
			  %% Line 4886
			  apply 'handle_base'/2
			      (GCD, _cor7)
		      in  %% Line 4886
			  apply 't_bitstr'/2
			      (GCD, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bitstr_match',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_base'/2 =
    %% Line 4890
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Unit,Pos>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      %% Line 4891
	      call 'erlang':'rem'
		  (_cor0, _cor1)
	  %% Line 4892
	  <Unit,Neg> when 'true' ->
	      let <_cor2> =
		  %% Line 4893
		  call 'erlang':'rem'
		      (_cor0, _cor1)
	      in  let <_cor3> =
		      %% Line 4893
		      call 'erlang':'+'
			  (_cor1, _cor2)
		  in  %% Line 4893
		      call 'erlang':'rem'
			  (_cor3, _cor1)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_types')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_types', _cor0)
end