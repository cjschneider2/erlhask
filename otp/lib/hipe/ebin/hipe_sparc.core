module 'hipe_sparc' ['defun_code'/1,
		     'defun_data'/1,
		     'defun_formals'/1,
		     'defun_is_closure'/1,
		     'defun_is_leaf'/1,
		     'defun_mfa'/1,
		     'defun_var_range'/1,
		     'is_label'/1,
		     'is_prim'/1,
		     'is_pseudo_fmove'/1,
		     'is_pseudo_move'/1,
		     'is_temp'/1,
		     'label_label'/1,
		     'mk_addi'/4,
		     'mk_alu'/4,
		     'mk_b_label'/1,
		     'mk_bp'/3,
		     'mk_call_rec'/3,
		     'mk_call_tail'/2,
		     'mk_comment'/1,
		     'mk_defun'/8,
		     'mk_fload'/4,
		     'mk_fp_binary'/4,
		     'mk_fp_unary'/3,
		     'mk_fstore'/4,
		     'mk_g0'/0,
		     'mk_jmp'/3,
		     'mk_jmpl'/2,
		     'mk_label'/1,
		     'mk_load'/6,
		     'mk_mfa'/3,
		     'mk_mov'/2,
		     'mk_new_nonallocatable_temp'/1,
		     'mk_new_temp'/1,
		     'mk_nop'/0,
		     'mk_prim'/1,
		     'mk_pseudo_bp'/4,
		     'mk_pseudo_call'/4,
		     'mk_pseudo_call_prepare'/1,
		     'mk_pseudo_fload'/4,
		     'mk_pseudo_fmove'/2,
		     'mk_pseudo_fstore'/3,
		     'mk_pseudo_move'/2,
		     'mk_pseudo_ret'/0,
		     'mk_pseudo_set'/2,
		     'mk_pseudo_tailcall'/4,
		     'mk_pseudo_tailcall_prepare'/0,
		     'mk_ra'/0,
		     'mk_rdy'/1,
		     'mk_rv'/0,
		     'mk_sdesc'/4,
		     'mk_set'/2,
		     'mk_set'/3,
		     'mk_simm13'/1,
		     'mk_sp'/0,
		     'mk_store'/4,
		     'mk_store'/6,
		     'mk_temp'/2,
		     'mk_temp1'/0,
		     'mk_temp2'/0,
		     'mk_uimm5'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'negate_cond'/1,
		     'prim_prim'/1,
		     'pseudo_call_contlab'/1,
		     'pseudo_call_funv'/1,
		     'pseudo_call_linkage'/1,
		     'pseudo_call_prepare_nrstkargs'/1,
		     'pseudo_call_sdesc'/1,
		     'pseudo_fmove_dst'/1,
		     'pseudo_fmove_src'/1,
		     'pseudo_move_dst'/1,
		     'pseudo_move_src'/1,
		     'pseudo_tailcall_funv'/1,
		     'pseudo_tailcall_linkage'/1,
		     'pseudo_tailcall_stkargs'/1,
		     'temp_is_allocatable'/1,
		     'temp_is_precoloured'/1,
		     'temp_reg'/1,
		     'temp_type'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'mk_temp'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	%% Line 142
	{'sparc_temp',_cor2,_cor1,_cor0}
'mk_temp'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	apply 'mk_temp'/3
	    (_cor1, _cor0, 'true')
'mk_new_temp'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 145
	    call 'hipe_gensym':'get_next_var'
		('sparc')
	in  %% Line 145
	    apply 'mk_temp'/3
		(_cor2, _cor1, _cor0)
'mk_new_temp'/1 =
    %% Line 146
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'true')
'mk_new_nonallocatable_temp'/1 =
    %% Line 147
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'false')
'is_temp'/1 =
    %% Line 148
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',_cor3,_cor4,_cor5}> when 'true' ->
	      'true'
	  <_cor6> when 'true' ->
	      'false'
	end
'temp_reg'/1 =
    %% Line 149
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',Reg,_cor2,_cor3}> when 'true' ->
	      Reg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_type'/1 =
    %% Line 150
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',_cor2,Type,_cor3}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_type',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_allocatable'/1 =
    %% Line 151
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',_cor2,_cor3,A}> when 'true' ->
	      A
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_is_allocatable',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_precoloured'/1 =
    %% Line 152
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_temp',Reg,Type,_cor3}> when 'true' ->
	      %% Line 155
	      call 'hipe_sparc_registers':'is_precoloured_gpr'
		  (Reg)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'temp_is_precoloured',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_g0'/0 =
    %% Line 158
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'g0'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_ra'/0 =
    %% Line 159
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'return_address'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_rv'/0 =
    %% Line 160
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'return_value'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'tagged')
'mk_sp'/0 =
    %% Line 161
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'stack_pointer'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_temp1'/0 =
    %% Line 162
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'temp1'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_temp2'/0 =
    %% Line 163
    fun () ->
	let <_cor0> =
	    call 'hipe_sparc_registers':'temp2'
		()
	in  apply 'mk_temp'/2
		(_cor0, 'untagged')
'mk_simm13'/1 =
    %% Line 165
    fun (_cor0) ->
	{'sparc_simm13',_cor0}
'mk_uimm5'/1 =
    %% Line 166
    fun (_cor0) ->
	{'sparc_uimm5',_cor0}
'mk_uimm22'/1 =
    %% Line 167
    fun (_cor0) ->
	{'sparc_uimm22',_cor0}
'mk_mfa'/3 =
    %% Line 169
    fun (_cor2,_cor1,_cor0) ->
	{'sparc_mfa',_cor2,_cor1,_cor0}
'mk_prim'/1 =
    %% Line 171
    fun (_cor0) ->
	{'sparc_prim',_cor0}
'is_prim'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_prim',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'prim_prim'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <{'sparc_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'prim_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_sdesc'/4 =
    %% Line 175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 176
	{'sparc_sdesc',_cor3,_cor2,_cor1,_cor0}
'mk_alu'/4 =
    %% Line 178
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 179
	{'alu',_cor3,_cor2,_cor1,_cor0}
'mk_mov'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'mk_g0'/0
		()
	in  apply 'mk_alu'/4
		('or', _cor2, _cor1, _cor0)
'mk_bp'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	{'bp',_cor2,_cor1,_cor0}
'mk_b_label'/1 =
    %% Line 183
    fun (_cor0) ->
	apply 'mk_bp'/3
	    ('a', _cor0, 1.00000000000000000000e+00)
'mk_call_rec'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	%% Line 191
	{'call_rec',_cor2,_cor1,_cor0}
'mk_call_tail'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	{'call_tail',_cor1,_cor0}
'mk_comment'/1 =
    %% Line 195
    fun (_cor0) ->
	{'comment',_cor0}
'mk_label'/1 =
    %% Line 197
    fun (_cor0) ->
	{'label',_cor0}
'is_label'/1 =
    %% Line 198
    fun (_cor0) ->
	case _cor0 of
	  <{'label',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'label_label'/1 =
    %% Line 199
    fun (_cor0) ->
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      Label
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'label_label',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_jmp'/3 =
    %% Line 201
    fun (_cor2,_cor1,_cor0) ->
	{'jmp',_cor2,_cor1,_cor0}
'mk_jmpl'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	{'jmpl',_cor1,_cor0}
'mk_pseudo_bp'/4 =
    %% Line 205
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 206
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor0,
		     5.00000000000000000000e-01) ->
	      let <_cor5> =
		  %% Line 207
		  apply 'negate_cond'/1
		      (_cor3)
	      in  let <_cor4> =
		      %% Line 208
		      call 'erlang':'-'
			  (1.00000000000000000000e+00, _cor0)
		  in  %% Line 207
		      apply 'mk_pseudo_bp_simple'/4
			  (_cor5, _cor1, _cor2, _cor4)
	  %% Line 209
	  <> when 'true' ->
	      %% Line 210
	      apply 'mk_pseudo_bp_simple'/4
		  (_cor3, _cor2, _cor1, _cor0)
	end
'mk_pseudo_bp_simple'/4 =
    %% Line 213
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cond,TrueLab,FalseLab,Pred>
	      when call 'erlang':'=<'
		    (Pred,
		     5.00000000000000000000e-01) ->
	      %% Line 214
	      {'pseudo_bp',Cond,TrueLab,%% Line 215
					FalseLab,%% Line 215
						 Pred}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_pseudo_bp_simple',4}}] )
	    -| ['compiler_generated'] )
	end
'negate_cond'/1 =
    %% Line 217
    fun (_cor0) ->
	%% Line 218
	case _cor0 of
	  %% Line 219
	  <'l'> when 'true' ->
	      'ge'
	  %% Line 220
	  <'ge'> when 'true' ->
	      'l'
	  %% Line 221
	  <'g'> when 'true' ->
	      'le'
	  %% Line 222
	  <'le'> when 'true' ->
	      'g'
	  %% Line 223
	  <'e'> when 'true' ->
	      'ne'
	  %% Line 224
	  <'ne'> when 'true' ->
	      'e'
	  %% Line 225
	  <'gu'> when 'true' ->
	      'leu'
	  %% Line 226
	  <'leu'> when 'true' ->
	      'gu'
	  %% Line 227
	  <'geu'> when 'true' ->
	      'lu'
	  %% Line 228
	  <'lu'> when 'true' ->
	      'geu'
	  %% Line 229
	  <'vs'> when 'true' ->
	      'vc'
	  %% Line 230
	  <'vc'> when 'true' ->
	      'vs'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call'/4 =
    %% Line 257
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 258
	{'pseudo_call',_cor3,_cor2,_cor1,_cor0}
'pseudo_call_funv'/1 =
    %% Line 259
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',FunV,_cor2,_cor3,_cor4}> when 'true' ->
	      FunV
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_funv',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_contlab'/1 =
    %% Line 260
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,ContLab,_cor4}> when 'true' ->
	      ContLab
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_contlab',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_linkage'/1 =
    %% Line 261
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_sdesc'/1 =
    %% Line 262
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,SDesc,_cor3,_cor4}> when 'true' ->
	      SDesc
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_sdesc',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call_prepare'/1 =
    %% Line 264
    fun (_cor0) ->
	%% Line 265
	{'pseudo_call_prepare',_cor0}
'pseudo_call_prepare_nrstkargs'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call_prepare',NrStkArgs}> when 'true' ->
	      %% Line 267
	      NrStkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_prepare_nrstkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_move'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	{'pseudo_move',_cor1,_cor0}
'is_pseudo_move'/1 =
    %% Line 270
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor3,_cor4}> when 'true' ->
	      'true'
	  <_cor5> when 'true' ->
	      'false'
	end
'pseudo_move_dst'/1 =
    %% Line 271
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor2,Dst}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_move_src'/1 =
    %% Line 272
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',Src,_cor2}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_src',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_ret'/0 =
    %% Line 274
    fun () ->
	{'pseudo_ret'}
'mk_pseudo_set'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	{'pseudo_set',_cor1,_cor0}
'mk_pseudo_tailcall'/4 =
    %% Line 278
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 279
	{'pseudo_tailcall',_cor3,_cor2,_cor1,_cor0}
'pseudo_tailcall_funv'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',FunV,_cor2,_cor3,_cor4}> when 'true' ->
	      FunV
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_funv',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_linkage'/1 =
    %% Line 281
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_stkargs'/1 =
    %% Line 282
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,StkArgs,_cor4}> when 'true' ->
	      StkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_stkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_tailcall_prepare'/0 =
    %% Line 284
    fun () ->
	{'pseudo_tailcall_prepare'}
'mk_rdy'/1 =
    %% Line 286
    fun (_cor0) ->
	{'rdy',_cor0}
'mk_sethi'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	{'sethi',_cor1,_cor0}
'mk_nop'/0 =
    %% Line 289
    fun () ->
	let <_cor1> =
	    apply 'mk_uimm22'/1
		(0)
	in  let <_cor0> =
		apply 'mk_g0'/0
		    ()
	    in  apply 'mk_sethi'/2
		    (_cor1, _cor0)
'mk_set'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	apply 'mk_set'/3
	    (_cor1, _cor0, [])
'mk_set'/3 =
    %% Line 294
    fun (_cor2,_cor1,_cor0) ->
	%% Line 295
	case <> of
	  <>
	      when let <_cor4> =
		    call 'erlang':'=<'
			(-4096, _cor2)
		in  let <_cor5> =
			call 'erlang':'<'
			    (_cor2, 4096)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor7> =
		  %% Line 296
		  apply 'mk_g0'/0
		      ()
	      in  let <_cor6> =
		      %% Line 296
		      apply 'mk_simm13'/1
			  (_cor2)
		  in  let <_cor8> =
			  %% Line 296
			  apply 'mk_alu'/4
			      ('or', _cor7, _cor6, _cor1)
		      in  %% Line 296
			  [_cor8|_cor0]
	  %% Line 297
	  <> when 'true' ->
	      let <_cor9> =
		  %% Line 298
		  call 'erlang':'bsr'
		      (_cor2, 10)
	      in  let <_cor10> =
		      %% Line 298
		      call 'erlang':'band'
			  (_cor9, 4194303)
		  in  let <Hi22> =
			  %% Line 298
			  apply 'mk_uimm22'/1
			      (_cor10)
		      in  %% Line 299
			  case call 'erlang':'band'
				   (_cor2, 1023) of
			    %% Line 300
			    <0> when 'true' ->
				let <_cor12> =
				    %% Line 301
				    apply 'mk_sethi'/2
					(Hi22, _cor1)
				in  %% Line 301
				    [_cor12|_cor0]
			    %% Line 302
			    <Lo10> when 'true' ->
				let <_cor13> =
				    %% Line 303
				    apply 'mk_sethi'/2
					(Hi22, _cor1)
				in  let <_cor14> =
					%% Line 304
					apply 'mk_simm13'/1
					    (Lo10)
				    in  let <_cor15> =
					    %% Line 304
					    apply 'mk_alu'/4
						('or', _cor1, _cor14, _cor1)
					in  %% Line 303
					    [_cor13|%% Line 304
						    [_cor15|_cor0]]
			  end
	end
'mk_addi'/4 =
    %% Line 311
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 312
	case <> of
	  <>
	      when let <_cor5> =
		    call 'erlang':'=<'
			(-4096, _cor2)
		in  let <_cor6> =
			call 'erlang':'<'
			    (_cor2, 4096)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 313
		  apply 'mk_simm13'/1
		      (_cor2)
	      in  let <_cor8> =
		      %% Line 313
		      apply 'mk_alu'/4
			  ('add', _cor3, _cor7, _cor1)
		  in  %% Line 313
		      [_cor8|_cor0]
	  %% Line 314
	  <> when 'true' ->
	      let <DstReg> =
		  %% Line 317
		  apply 'temp_reg'/1
		      (_cor1)
	      in  let <SrcReg> =
		      %% Line 318
		      apply 'temp_reg'/1
			  (_cor3)
		  in  let <_cor11> =
			  %% Line 319
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (DstReg,
				       SrcReg) ->
				apply 'mk_temp2'/0
				    ()
			    %% Line 320
			    <> when 'true' ->
				_cor1
			  end
		      in  let <_cor13> =
			      %% Line 323
			      apply 'mk_alu'/4
				  ('add', _cor3, _cor11, _cor1)
			  in  %% Line 323
			      apply 'mk_set'/3
				  (_cor2, _cor11, [_cor13|_cor0])
	end
'mk_store'/4 =
    %% Line 326
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 327
	{'store',_cor3,_cor2,_cor1,_cor0}
'mk_store'/6 =
    %% Line 329
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <StOp,Src,Base,Offset,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 330
	      case <> of
		<>
		    when let <_cor7> =
			  call 'erlang':'=<'
			      (-4096, Offset)
		      in  let <_cor8> =
			      call 'erlang':'<'
				  (Offset, 4096)
			  in  call 'erlang':'and'
				  (_cor7, _cor8) ->
		    let <_cor9> =
			%% Line 331
			apply 'mk_simm13'/1
			    (Offset)
		    in  let <_cor10> =
			    %% Line 331
			    apply 'mk_store'/4
				(StOp, Src, Base, _cor9)
			in  %% Line 331
			    [_cor10|Rest]
		%% Line 332
		<> when 'true' ->
		    let <Index> =
			%% Line 333
			apply 'mk_scratch'/1
			    (Scratch)
		    in  let <_cor12> =
			    %% Line 334
			    apply 'mk_store'/4
				(StOp, Src, Base, Index)
			in  %% Line 334
			    apply 'mk_set'/3
				(Offset, Index, [_cor12|Rest])
	      end
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'mk_store',6}}] )
	    -| ['compiler_generated'] )
	end
'mk_load'/4 =
    %% Line 337
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 338
	apply 'mk_alu'/4
	    (_cor3, _cor2, _cor1, _cor0)
'mk_load'/6 =
    %% Line 340
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <LdOp,Base,Offset,Dst,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 341
	      case <> of
		<>
		    when let <_cor7> =
			  call 'erlang':'=<'
			      (-4096, Offset)
		      in  let <_cor8> =
			      call 'erlang':'<'
				  (Offset, 4096)
			  in  call 'erlang':'and'
				  (_cor7, _cor8) ->
		    let <_cor9> =
			%% Line 342
			apply 'mk_simm13'/1
			    (Offset)
		    in  let <_cor10> =
			    %% Line 342
			    apply 'mk_load'/4
				(LdOp, Base, _cor9, Dst)
			in  %% Line 342
			    [_cor10|Rest]
		%% Line 343
		<> when 'true' ->
		    let <DstReg> =
			%% Line 346
			apply 'temp_reg'/1
			    (Dst)
		    in  let <BaseReg> =
			    %% Line 347
			    apply 'temp_reg'/1
				(Base)
			in  let <_cor13> =
				%% Line 348
				case <> of
				  <>
				      when call 'erlang':'=/='
					    (DstReg,
					     BaseReg) ->
				      Dst
				  %% Line 349
				  <> when 'true' ->
				      apply 'mk_scratch'/1
					  (Scratch)
				end
			    in  let <_cor15> =
				    %% Line 352
				    apply 'mk_load'/4
					(LdOp, Base, _cor13, Dst)
				in  %% Line 352
				    apply 'mk_set'/3
					(Offset, _cor13, [_cor15|Rest])
	      end
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'mk_load',6}}] )
	    -| ['compiler_generated'] )
	end
'mk_scratch'/1 =
    %% Line 355
    fun (_cor0) ->
	%% Line 356
	case _cor0 of
	  %% Line 357
	  <'temp2'> when 'true' ->
	      apply 'mk_temp2'/0
		  ()
	  %% Line 358
	  <'new'> when 'true' ->
	      apply 'mk_new_temp'/1
		  ('untagged')
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_fp_binary'/4 =
    %% Line 361
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 362
	{'fp_binary',_cor3,_cor2,_cor1,_cor0}
'mk_fp_unary'/3 =
    %% Line 364
    fun (_cor2,_cor1,_cor0) ->
	{'fp_unary',_cor2,_cor1,_cor0}
'mk_pseudo_fload'/4 =
    %% Line 366
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 367
	{'pseudo_fload',_cor3,_cor2,_cor1,_cor0}
'mk_fload'/4 =
    %% Line 369
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Base,Disp,Dst,Scratch>
	      when call 'erlang':'is_integer'
		    (Disp) ->
	      %% Line 370
	      case <> of
		<>
		    when let <_cor5> =
			  call 'erlang':'=<'
			      (-4096, Disp)
		      in  let <_cor7> =
			      call 'erlang':'<'
				  (Disp, 4092)
			  in  call 'erlang':'and'
				  (_cor5, _cor7) ->
		    let <_cor8> =
			%% Line 371
			apply 'mk_simm13'/1
			    (Disp)
		    in  let <_cor9> =
			    %% Line 371
			    apply 'mk_pseudo_fload'/4
				(Base, _cor8, Dst, 'false')
			in  %% Line 371
			    [_cor9|[]]
		%% Line 372
		<> when 'true' ->
		    let <Tmp> =
			%% Line 373
			apply 'mk_scratch'/1
			    (Scratch)
		    in  let <_cor11> =
			    %% Line 375
			    apply 'mk_alu'/4
				('add', Tmp, Base, Tmp)
			in  let <_cor12> =
				%% Line 376
				apply 'mk_simm13'/1
				    (0)
			    in  let <_cor13> =
				    %% Line 376
				    apply 'mk_pseudo_fload'/4
					(Tmp, _cor12, Dst, 'false')
				in  %% Line 374
				    apply 'mk_set'/3
					(Disp, Tmp, %% Line 375
						    [_cor11|%% Line 376
							    [_cor13|[]]])
	      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'mk_fload',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_fmove'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	{'pseudo_fmove',_cor1,_cor0}
'is_pseudo_fmove'/1 =
    %% Line 380
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',_cor3,_cor4}> when 'true' ->
	      'true'
	  <_cor5> when 'true' ->
	      'false'
	end
'pseudo_fmove_src'/1 =
    %% Line 381
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',Src,_cor2}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_fmove_src',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_fmove_dst'/1 =
    %% Line 382
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',_cor2,Dst}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_fmove_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_fstore'/3 =
    %% Line 384
    fun (_cor2,_cor1,_cor0) ->
	%% Line 385
	{'pseudo_fstore',_cor2,_cor1,_cor0}
'mk_fstore'/4 =
    %% Line 387
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Src,Base,Disp,Scratch>
	      when call 'erlang':'is_integer'
		    (Disp) ->
	      %% Line 388
	      case <> of
		<>
		    when let <_cor5> =
			  call 'erlang':'=<'
			      (-4096, Disp)
		      in  let <_cor7> =
			      call 'erlang':'<'
				  (Disp, 4092)
			  in  call 'erlang':'and'
				  (_cor5, _cor7) ->
		    let <_cor8> =
			%% Line 389
			call 'hipe_sparc':'mk_simm13'
			    (Disp)
		    in  let <_cor9> =
			    %% Line 389
			    apply 'mk_pseudo_fstore'/3
				(Src, Base, _cor8)
			in  %% Line 389
			    [_cor9|[]]
		%% Line 390
		<> when 'true' ->
		    let <Tmp> =
			%% Line 391
			apply 'mk_scratch'/1
			    (Scratch)
		    in  let <_cor11> =
			    %% Line 393
			    apply 'mk_alu'/4
				('add', Tmp, Base, Tmp)
			in  let <_cor12> =
				%% Line 394
				apply 'mk_simm13'/1
				    (0)
			    in  let <_cor13> =
				    %% Line 394
				    apply 'mk_pseudo_fstore'/3
					(Src, Tmp, _cor12)
				in  %% Line 392
				    apply 'mk_set'/3
					(Disp, Tmp, %% Line 393
						    [_cor11|%% Line 394
							    [_cor13|[]]])
	      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'mk_fstore',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_defun'/8 =
    %% Line 397
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 398
	{'defun',_cor7,_cor6,_cor3,_cor2,_cor5,_cor4,_cor1,_cor0}
'defun_code'/1 =
    %% Line 401
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,Code,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_code',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_data'/1 =
    %% Line 402
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,Data,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Data
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_data',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_formals'/1 =
    %% Line 403
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,Formals,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Formals
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_formals',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_closure'/1 =
    %% Line 404
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,IsClosure,_cor6,_cor7,_cor8}> when 'true' ->
	      IsClosure
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_closure',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_leaf'/1 =
    %% Line 405
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,IsLeaf,_cor7,_cor8}> when 'true' ->
	      IsLeaf
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_leaf',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_mfa'/1 =
    %% Line 406
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',MFA,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_var_range'/1 =
    %% Line 407
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,VarRange,_cor8}> when 'true' ->
	      VarRange
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_var_range',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc', _cor0)
end