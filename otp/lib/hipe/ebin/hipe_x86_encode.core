module 'hipe_x86_encode' ['cc'/1,
			  'ea_base'/1,
			  'ea_disp32'/1,
			  'ea_disp32_base'/2,
			  'ea_disp32_sib'/2,
			  'ea_disp32_sindex'/2,
			  'ea_disp8_base'/2,
			  'ea_disp8_sib'/2,
			  'ea_sib'/1,
			  'insn_encode'/3,
			  'insn_sizeof'/2,
			  'module_info'/0,
			  'module_info'/1,
			  'rm_mem'/1,
			  'rm_reg'/1,
			  'sib'/1,
			  'sib'/2,
			  'sindex'/2]
    attributes [%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','sib'},[{'record_field',173,{'atom',173,'sindex_opt'}}|[{'typed_record_field',{'record_field',173,{'atom',173,'base'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'integer',[]}]]}}]],[]}]]
'cc'/1 =
    %% Line 108
    fun (_cor0) ->
	case _cor0 of
	  <'o'> when 'true' ->
	      0
	  %% Line 109
	  <'no'> when 'true' ->
	      1
	  %% Line 110
	  <'b'> when 'true' ->
	      2
	  %% Line 111
	  <'ae'> when 'true' ->
	      3
	  %% Line 112
	  <'e'> when 'true' ->
	      4
	  %% Line 113
	  <'ne'> when 'true' ->
	      5
	  %% Line 114
	  <'be'> when 'true' ->
	      6
	  %% Line 115
	  <'a'> when 'true' ->
	      7
	  %% Line 116
	  <'s'> when 'true' ->
	      8
	  %% Line 117
	  <'ns'> when 'true' ->
	      9
	  %% Line 118
	  <'pe'> when 'true' ->
	      10
	  %% Line 119
	  <'po'> when 'true' ->
	      11
	  %% Line 120
	  <'l'> when 'true' ->
	      12
	  %% Line 121
	  <'ge'> when 'true' ->
	      13
	  %% Line 122
	  <'le'> when 'true' ->
	      14
	  %% Line 123
	  <'g'> when 'true' ->
	      15
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cc',1}}] )
	    -| ['compiler_generated'] )
	end
'sindex'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Scale,Index>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Scale)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Index)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 168
		  case <> of
		    <>
			when call 'erlang':'>='
			      (Scale,
			       0) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_encode','sindex'})
		  end
		  do  %% Line 169
		      case <> of
			<>
			    when call 'erlang':'=<'
				  (Scale,
				   3) ->
			    []
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_x86_encode','sindex'})
		      end
		      do  %% Line 170
			  case <> of
			    <>
				when call 'erlang':'=/='
				      (Index,
				       4) ->
				[]
			    <> when 'true' ->
				call 'erlang':'exit'
				    ({'hipe_x86_encode','sindex'})
			  end
			  %% Line 171
			  {'sindex',Scale,Index}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sindex',2}}] )
	    -| ['compiler_generated'] )
	end
'sib'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <Base>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      {'sib','none',Base}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sib',1}}] )
	    -| ['compiler_generated'] )
	end
'sib'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Base,Sindex>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      {'sib',Sindex,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sib',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_base'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Disp32,Base>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      do  %% Line 178
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_encode','ea_disp32_base'})
		  end
		  %% Line 179
		  {'ea_disp32_base',Disp32,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ea_disp32_base',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_sib'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	{'ea_disp32_sib',_cor1,_cor0}
'ea_disp8_base'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Disp8,Base>
	      when call 'erlang':'is_integer'
		    (Base) ->
	      do  %% Line 182
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_encode','ea_disp8_base'})
		  end
		  %% Line 183
		  {'ea_disp8_base',Disp8,Base}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ea_disp8_base',2}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp8_sib'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	{'ea_disp8_sib',_cor1,_cor0}
'ea_base'/1 =
    %% Line 185
    fun (_cor0) ->
	case _cor0 of
	  <Base>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      do  %% Line 186
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (Base,
			       4) ->
			[]
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_encode','ea_base'})
		  end
		  do  %% Line 187
		      case <> of
			<>
			    when call 'erlang':'=/='
				  (Base,
				   5) ->
			    []
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_x86_encode','ea_base'})
		      end
		      %% Line 188
		      {'ea_base',Base}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ea_base',1}}] )
	    -| ['compiler_generated'] )
	end
'ea_disp32_sindex'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	{'ea_disp32_sindex',_cor1,_cor0}
'ea_sib'/1 =
    %% Line 191
    fun (_cor0) ->
	do  %% Line 192
	    case <> of
	      <>
		  when ( try
			  ( case <> of
			      ( <>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_record'
									     -| ['compiler_generated'] )
					    (_cor0,
					     ( 'sib'
					       -| ['compiler_generated'] ),
					     ( 3
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    let <_cor5> =
					( call 'erlang':'element'
					      (3, _cor0)
					  -| ['compiler_generated'] )
				    in  ( call 'erlang':'=/='
					      (_cor5, 5)
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] ) ->
		  []
	      <> when 'true' ->
		  call 'erlang':'exit'
		      ({'hipe_x86_encode','ea_sib'})
	    end
	    %% Line 193
	    {'ea_sib',_cor0}
'ea_disp32'/1 =
    %% Line 194
    fun (_cor0) ->
	{'ea_disp32',_cor0}
'rm_reg'/1 =
    %% Line 196
    fun (_cor0) ->
	{'rm_reg',_cor0}
'rm_mem'/1 =
    %% Line 197
    fun (_cor0) ->
	{'rm_mem',_cor0}
'mk_modrm'/3 =
    %% Line 199
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 200
	    call 'erlang':'bsl'
		(_cor2, 6)
	in  let <_cor3> =
		%% Line 200
		call 'erlang':'bsl'
		    (_cor1, 3)
	    in  let <_cor5> =
		    %% Line 200
		    call 'erlang':'bor'
			(_cor4, _cor3)
		in  %% Line 200
		    call 'erlang':'bor'
			(_cor5, _cor0)
'mk_sib'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 203
	    call 'erlang':'bsl'
		(_cor2, 6)
	in  let <_cor3> =
		%% Line 203
		call 'erlang':'bsl'
		    (_cor1, 3)
	    in  let <_cor5> =
		    %% Line 203
		    call 'erlang':'bor'
			(_cor4, _cor3)
		in  %% Line 203
		    call 'erlang':'bor'
			(_cor5, _cor0)
'le16'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 206
	    call 'erlang':'band'
		(_cor1, 255)
	in  let <_cor3> =
		%% Line 206
		call 'erlang':'bsr'
		    (_cor1, 8)
	    in  let <_cor4> =
		    %% Line 206
		    call 'erlang':'band'
			(_cor3, 255)
		in  %% Line 206
		    [_cor2|[_cor4|_cor0]]
'le32'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Word,Tail>
	      when call 'erlang':'is_integer'
		    (Word) ->
	      let <_cor2> =
		  %% Line 209
		  call 'erlang':'band'
		      (Word, 255)
	      in  let <_cor3> =
		      %% Line 209
		      call 'erlang':'bsr'
			  (Word, 8)
		  in  let <_cor4> =
			  %% Line 209
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  let <_cor5> =
			      %% Line 210
			      call 'erlang':'bsr'
				  (Word, 16)
			  in  let <_cor6> =
				  %% Line 210
				  call 'erlang':'band'
				      (_cor5, 255)
			      in  let <_cor7> =
				      %% Line 210
				      call 'erlang':'bsr'
					  (Word, 24)
				  in  let <_cor8> =
					  %% Line 210
					  call 'erlang':'band'
					      (_cor7, 255)
				      in  %% Line 209
					  [_cor2|[_cor4|%% Line 210
							[_cor6|[_cor8|Tail]]]]
	  %% Line 211
	  <{Tag,Val},Tail> when 'true' ->
	      %% Line 212
	      [{'le32',Tag,Val}|Tail]
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'le32',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_sindex_opt'/1 =
    %% Line 214
    fun (_cor0) ->
	case _cor0 of
	  <{'sindex',Scale,Index}> when 'true' ->
	      {Scale,Index}
	  %% Line 215
	  <'none'> when 'true' ->
	      {0,4}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enc_sindex_opt',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_sib'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <{'sib',SindexOpt,Base}> when 'true' ->
	      %% Line 218
	      case apply 'enc_sindex_opt'/1
		       (SindexOpt) of
		<{Scale,Index}> when 'true' ->
		    %% Line 219
		    apply 'mk_sib'/3
			(Scale, Index, Base)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enc_sib',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_ea'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	%% Line 222
	case _cor2 of
	  %% Line 223
	  <{'ea_disp32_base',Disp32,Base}> when 'true' ->
	      let <_cor3> =
		  %% Line 224
		  apply 'mk_modrm'/3
		      (2, _cor1, Base)
	      in  let <_cor4> =
		      %% Line 224
		      apply 'le32'/2
			  (Disp32, _cor0)
		  in  %% Line 224
		      [_cor3|_cor4]
	  %% Line 225
	  <{'ea_disp32_sib',Disp32,SIB}> when 'true' ->
	      let <_cor5> =
		  %% Line 226
		  apply 'mk_modrm'/3
		      (2, _cor1, 4)
	      in  let <_cor6> =
		      %% Line 226
		      apply 'enc_sib'/1
			  (SIB)
		  in  let <_cor7> =
			  %% Line 226
			  apply 'le32'/2
			      (Disp32, _cor0)
		      in  %% Line 226
			  [_cor5|[_cor6|_cor7]]
	  %% Line 227
	  <{'ea_disp8_base',Disp8,Base}> when 'true' ->
	      let <_cor8> =
		  %% Line 228
		  apply 'mk_modrm'/3
		      (1, _cor1, Base)
	      in  %% Line 228
		  [_cor8|[Disp8|_cor0]]
	  %% Line 229
	  <{'ea_disp8_sib',Disp8,SIB}> when 'true' ->
	      let <_cor9> =
		  %% Line 230
		  apply 'mk_modrm'/3
		      (1, _cor1, 4)
	      in  let <_cor10> =
		      %% Line 230
		      apply 'enc_sib'/1
			  (SIB)
		  in  %% Line 230
		      [_cor9|[_cor10|[Disp8|_cor0]]]
	  %% Line 231
	  <{'ea_base',Base}> when 'true' ->
	      let <_cor11> =
		  %% Line 232
		  apply 'mk_modrm'/3
		      (0, _cor1, Base)
	      in  %% Line 232
		  [_cor11|_cor0]
	  %% Line 233
	  <{'ea_disp32_sindex',Disp32,SindexOpt}> when 'true' ->
	      %% Line 234
	      case apply 'enc_sindex_opt'/1
		       (SindexOpt) of
		<{Scale,Index}> when 'true' ->
		    let <SIB> =
			%% Line 235
			apply 'mk_sib'/3
			    (Scale, Index, 5)
		    in  let <MODRM> =
			    %% Line 236
			    apply 'mk_modrm'/3
				(0, _cor1, 4)
			in  let <_cor15> =
				%% Line 237
				apply 'le32'/2
				    (Disp32, _cor0)
			    in  %% Line 237
				[MODRM|[SIB|_cor15]]
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 238
	  <{'ea_sib',SIB}> when 'true' ->
	      let <_cor16> =
		  %% Line 239
		  apply 'mk_modrm'/3
		      (0, _cor1, 4)
	      in  let <_cor17> =
		      %% Line 239
		      apply 'enc_sib'/1
			  (SIB)
		  in  %% Line 239
		      [_cor16|[_cor17|_cor0]]
	  %% Line 240
	  <{'ea_disp32',Disp32}> when 'true' ->
	      let <_cor18> =
		  %% Line 241
		  apply 'mk_modrm'/3
		      (0, _cor1, 5)
	      in  let <_cor19> =
		      %% Line 241
		      apply 'le32'/2
			  (Disp32, _cor0)
		  in  %% Line 241
		      [_cor18|_cor19]
	  ( <_cor20> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor20})
	    -| ['compiler_generated'] )
	end
'encode_rm'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	%% Line 245
	case _cor2 of
	  %% Line 246
	  <{'rm_reg',Reg}> when 'true' ->
	      let <_cor3> =
		  apply 'mk_modrm'/3
		      (3, _cor1, Reg)
	      in  [_cor3|_cor0]
	  %% Line 247
	  <{'rm_mem',EA}> when 'true' ->
	      apply 'enc_ea'/3
		  (EA, _cor1, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'sizeof_ea'/1 =
    %% Line 250
    fun (_cor0) ->
	%% Line 251
	case call 'erlang':'element'
		 (1, _cor0) of
	  %% Line 252
	  <'ea_disp32_base'> when 'true' ->
	      5
	  %% Line 253
	  <'ea_disp32_sib'> when 'true' ->
	      6
	  %% Line 254
	  <'ea_disp8_base'> when 'true' ->
	      2
	  %% Line 255
	  <'ea_disp8_sib'> when 'true' ->
	      3
	  %% Line 256
	  <'ea_base'> when 'true' ->
	      1
	  %% Line 257
	  <'ea_disp32_sindex'> when 'true' ->
	      6
	  %% Line 258
	  <'ea_sib'> when 'true' ->
	      2
	  %% Line 259
	  <'ea_disp32'> when 'true' ->
	      5
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'sizeof_rm'/1 =
    %% Line 262
    fun (_cor0) ->
	%% Line 263
	case _cor0 of
	  %% Line 264
	  <{'rm_reg',_cor3}> when 'true' ->
	      1
	  %% Line 265
	  <{'rm_mem',EA}> when 'true' ->
	      apply 'sizeof_ea'/1
		  (EA)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'st'/1 =
    %% Line 279
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      0
	  %% Line 280
	  <1> when 'true' ->
	      1
	  %% Line 281
	  <2> when 'true' ->
	      2
	  %% Line 282
	  <3> when 'true' ->
	      3
	  %% Line 283
	  <4> when 'true' ->
	      4
	  %% Line 284
	  <5> when 'true' ->
	      5
	  %% Line 285
	  <6> when 'true' ->
	      6
	  %% Line 286
	  <7> when 'true' ->
	      7
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'st',1}}] )
	    -| ['compiler_generated'] )
	end
'arith_binop_encode'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	%% Line 306
	case _cor0 of
	  %% Line 307
	  <{'eax',{'imm32',Imm32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 308
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor3> =
		      %% Line 308
		      call 'erlang':'bor'
			  (5, _cor2)
		  in  let <_cor4> =
			  %% Line 308
			  apply 'le32'/2
			      (Imm32, [])
		      in  %% Line 308
			  [_cor3|_cor4]
	  %% Line 309
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor5> =
		  %% Line 310
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor6> =
		      %% Line 310
		      apply 'encode_rm'/3
			  (RM32, _cor1, _cor5)
		  in  %% Line 310
		      [129|_cor6]
	  %% Line 311
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor7> =
		  %% Line 312
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 312
		  [131|_cor7]
	  %% Line 313
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor8> =
		  %% Line 314
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor9> =
		      %% Line 314
		      call 'erlang':'bor'
			  (1, _cor8)
		  in  let <_cor10> =
			  %% Line 314
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 314
			  [_cor9|_cor10]
	  %% Line 315
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor11> =
		  %% Line 316
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor12> =
		      %% Line 316
		      call 'erlang':'bor'
			  (3, _cor11)
		  in  let <_cor13> =
			  %% Line 316
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 316
			  [_cor12|_cor13]
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'arith_binop_sizeof'/1 =
    %% Line 319
    fun (_cor0) ->
	%% Line 321
	case _cor0 of
	  %% Line 322
	  <{'eax',{'imm32',_cor9}}> when 'true' ->
	      5
	  %% Line 324
	  <{{'rm32',RM32},{'imm32',_cor10}}> when 'true' ->
	      let <_cor1> =
		  %% Line 325
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor2> =
		      %% Line 325
		      call 'erlang':'+'
			  (1, _cor1)
		  in  %% Line 325
		      call 'erlang':'+'
			  (_cor2, 4)
	  %% Line 326
	  <{{'rm32',RM32},{'imm8',_cor11}}> when 'true' ->
	      let <_cor3> =
		  %% Line 327
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor4> =
		      %% Line 327
		      call 'erlang':'+'
			  (1, _cor3)
		  in  %% Line 327
		      call 'erlang':'+'
			  (_cor4, 1)
	  %% Line 328
	  <{{'rm32',RM32},{'reg32',_cor12}}> when 'true' ->
	      let <_cor5> =
		  %% Line 329
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 329
		  call 'erlang':'+'
		      (1, _cor5)
	  %% Line 330
	  <{{'reg32',_cor13},{'rm32',RM32}}> when 'true' ->
	      let <_cor6> =
		  %% Line 331
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 331
		  call 'erlang':'+'
		      (1, _cor6)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'bs_op_encode'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 335
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 335
		  [15|[Opcode|_cor2]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'bs_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'bs_op_sizeof'/1 =
    %% Line 337
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',_cor3},{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 338
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 338
		  call 'erlang':'+'
		      (2, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'bs_op_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'bswap_encode'/1 =
    %% Line 340
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',Reg32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 341
		  call 'erlang':'bor'
		      (200, Reg32)
	      in  %% Line 341
		  [15|[_cor1|[]]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'bswap_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'bswap_sizeof'/1 =
    %% Line 343
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',_cor2}}> when 'true' ->
	      %% Line 344
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'bswap_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'bt_op_encode'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	%% Line 347
	case _cor0 of
	  %% Line 348
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 349
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor3> =
		      %% Line 349
		      call 'erlang':'bor'
			  (163, _cor2)
		  in  let <_cor4> =
			  %% Line 349
			  apply 'encode_rm'/3
			      (RM32, Reg32, [])
		      in  %% Line 349
			  [15|[_cor3|_cor4]]
	  %% Line 350
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor5> =
		  %% Line 351
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 351
		  [15|[186|_cor5]]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'bt_op_sizeof'/1 =
    %% Line 354
    fun (_cor0) ->
	%% Line 355
	case _cor0 of
	  %% Line 356
	  <{{'rm32',RM32},{'reg32',_cor6}}> when 'true' ->
	      let <_cor1> =
		  %% Line 357
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 357
		  call 'erlang':'+'
		      (2, _cor1)
	  %% Line 358
	  <{{'rm32',RM32},{'imm8',_cor7}}> when 'true' ->
	      let <_cor2> =
		  %% Line 359
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor3> =
		      %% Line 359
		      call 'erlang':'+'
			  (2, _cor2)
		  in  %% Line 359
		      call 'erlang':'+'
			  (_cor3, 1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'call_encode'/1 =
    %% Line 362
    fun (_cor0) ->
	%% Line 363
	case _cor0 of
	  %% Line 364
	  <{{'rel32',Rel32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 365
		  apply 'le32'/2
		      (Rel32, [])
	      in  %% Line 365
		  [232|_cor1]
	  %% Line 366
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 367
		  apply 'encode_rm'/3
		      (RM32, 2, [])
	      in  %% Line 367
		  [255|_cor2]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'call_sizeof'/1 =
    %% Line 370
    fun (_cor0) ->
	%% Line 371
	case _cor0 of
	  %% Line 372
	  <{{'rel32',_cor4}}> when 'true' ->
	      5
	  %% Line 374
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 375
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 375
		  call 'erlang':'+'
		      (1, _cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'cbw_encode'/1 =
    %% Line 378
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 379
	      [102|[152]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cbw_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'cbw_sizeof'/1 =
    %% Line 381
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 382
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cbw_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'nullary_op_encode'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{}> when 'true' ->
	      %% Line 386
	      [Opcode|[]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'nullary_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'nullary_op_sizeof'/1 =
    %% Line 388
    fun (_cor0) ->
	case _cor0 of
	  <{}> when 'true' ->
	      %% Line 390
	      1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nullary_op_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'cmovcc_encode'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',CC},{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 393
		  call 'erlang':'bor'
		      (64, CC)
	      in  let <_cor2> =
		      %% Line 393
		      apply 'encode_rm'/3
			  (RM32, Reg32, [])
		  in  %% Line 393
		      [15|[_cor1|_cor2]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'cmovcc_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'cmovcc_sizeof'/1 =
    %% Line 395
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',_cor3},{'reg32',_cor4},{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 396
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 396
		  call 'erlang':'+'
		      (2, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'cmovcc_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'incdec_encode'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	%% Line 399
	case _cor0 of
	  %% Line 400
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 401
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 401
		  [255|_cor2]
	  %% Line 402
	  <{{'reg32',Reg32}}> when 'true' ->
	      let <_cor3> =
		  %% Line 403
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor4> =
		      %% Line 403
		      call 'erlang':'bor'
			  (64, _cor3)
		  in  let <_cor5> =
			  %% Line 403
			  call 'erlang':'bor'
			      (_cor4, Reg32)
		      in  %% Line 403
			  [_cor5|[]]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'incdec_sizeof'/1 =
    %% Line 406
    fun (_cor0) ->
	%% Line 407
	case _cor0 of
	  %% Line 408
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 409
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 409
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 410
	  <{{'reg32',_cor4}}> when 'true' ->
	      %% Line 411
	      1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'arith_unop_encode'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 415
		  apply 'encode_rm'/3
		      (RM32, Opcode, [])
	      in  %% Line 415
		  [247|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'arith_unop_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'arith_unop_sizeof'/1 =
    %% Line 417
    fun (_cor0) ->
	case _cor0 of
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 418
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 418
		  call 'erlang':'+'
		      (1, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'arith_unop_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'enter_encode'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <{{'imm16',Imm16},{'imm8',Imm8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 421
		  apply 'le16'/2
		      (Imm16, [Imm8|[]])
	      in  %% Line 421
		  [200|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enter_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'enter_sizeof'/1 =
    %% Line 423
    fun (_cor0) ->
	case _cor0 of
	  <{{'imm16',_cor3},{'imm8',_cor4}}> when 'true' ->
	      4
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'enter_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'imul_encode'/1 =
    %% Line 426
    fun (_cor0) ->
	%% Line 427
	case _cor0 of
	  %% Line 428
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 429
		  apply 'encode_rm'/3
		      (RM32, 5, [])
	      in  %% Line 429
		  [247|_cor1]
	  %% Line 430
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 431
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 431
		  [15|[175|_cor2]]
	  %% Line 432
	  <{{'reg32',Reg32},{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor3> =
		  %% Line 433
		  apply 'encode_rm'/3
		      (RM32, Reg32, [Imm8|[]])
	      in  %% Line 433
		  [107|_cor3]
	  %% Line 434
	  <{{'reg32',Reg32},{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor4> =
		  %% Line 435
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor5> =
		      %% Line 435
		      apply 'encode_rm'/3
			  (RM32, Reg32, _cor4)
		  in  %% Line 435
		      [105|_cor5]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'imul_sizeof'/1 =
    %% Line 438
    fun (_cor0) ->
	%% Line 439
	case _cor0 of
	  %% Line 440
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 441
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 441
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 442
	  <{{'reg32',_cor9},{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 443
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 443
		  call 'erlang':'+'
		      (2, _cor2)
	  %% Line 444
	  <{{'reg32',_cor10},{'rm32',RM32},{'imm8',_cor11}}> when 'true' ->
	      let <_cor3> =
		  %% Line 445
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor4> =
		      %% Line 445
		      call 'erlang':'+'
			  (1, _cor3)
		  in  %% Line 445
		      call 'erlang':'+'
			  (_cor4, 1)
	  %% Line 446
	  <{{'reg32',_cor12},{'rm32',RM32},{'imm32',_cor13}}> when 'true' ->
	      let <_cor5> =
		  %% Line 447
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor6> =
		      %% Line 447
		      call 'erlang':'+'
			  (1, _cor5)
		  in  %% Line 447
		      call 'erlang':'+'
			  (_cor6, 4)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'jcc_encode'/1 =
    %% Line 450
    fun (_cor0) ->
	%% Line 451
	case _cor0 of
	  %% Line 452
	  <{{'cc',CC},{'rel8',Rel8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 453
		  call 'erlang':'bor'
		      (112, CC)
	      in  %% Line 453
		  [_cor1|[Rel8|[]]]
	  %% Line 454
	  <{{'cc',CC},{'rel32',Rel32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 455
		  call 'erlang':'bor'
		      (128, CC)
	      in  let <_cor3> =
		      %% Line 455
		      apply 'le32'/2
			  (Rel32, [])
		  in  %% Line 455
		      [15|[_cor2|_cor3]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'jcc_sizeof'/1 =
    %% Line 458
    fun (_cor0) ->
	%% Line 459
	case _cor0 of
	  %% Line 460
	  <{{'cc',_cor3},{'rel8',_cor4}}> when 'true' ->
	      %% Line 461
	      2
	  %% Line 462
	  <{{'cc',_cor5},{'rel32',_cor6}}> when 'true' ->
	      6
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'jmp8_op_encode'/2 =
    %% Line 466
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opcode,{{'rel8',Rel8}}> when 'true' ->
	      %% Line 467
	      [Opcode|[Rel8|[]]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'jmp8_op_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'jmp8_op_sizeof'/1 =
    %% Line 469
    fun (_cor0) ->
	case _cor0 of
	  <{{'rel8',_cor2}}> when 'true' ->
	      %% Line 470
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'jmp8_op_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'jmp_encode'/1 =
    %% Line 472
    fun (_cor0) ->
	%% Line 473
	case _cor0 of
	  %% Line 474
	  <{{'rel8',Rel8}}> when 'true' ->
	      %% Line 475
	      [235|[Rel8|[]]]
	  %% Line 476
	  <{{'rel32',Rel32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 477
		  apply 'le32'/2
		      (Rel32, [])
	      in  %% Line 477
		  [233|_cor1]
	  %% Line 478
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 479
		  apply 'encode_rm'/3
		      (RM32, 4, [])
	      in  %% Line 479
		  [255|_cor2]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'jmp_sizeof'/1 =
    %% Line 482
    fun (_cor0) ->
	%% Line 483
	case _cor0 of
	  %% Line 484
	  <{{'rel8',_cor4}}> when 'true' ->
	      %% Line 485
	      2
	  %% Line 486
	  <{{'rel32',_cor5}}> when 'true' ->
	      5
	  %% Line 488
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 489
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 489
		  call 'erlang':'+'
		      (1, _cor1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'lea_encode'/1 =
    %% Line 492
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',Reg32},{'ea',EA}}> when 'true' ->
	      let <_cor1> =
		  %% Line 493
		  apply 'enc_ea'/3
		      (EA, Reg32, [])
	      in  %% Line 493
		  [141|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'lea_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'lea_sizeof'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <{{'reg32',_cor3},{'ea',EA}}> when 'true' ->
	      let <_cor1> =
		  %% Line 496
		  apply 'sizeof_ea'/1
		      (EA)
	      in  %% Line 496
		  call 'erlang':'+'
		      (1, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'lea_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'mov_encode'/1 =
    %% Line 498
    fun (_cor0) ->
	%% Line 499
	case _cor0 of
	  %% Line 500
	  <{{'rm8',RM8},{'reg8',Reg8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 501
		  apply 'encode_rm'/3
		      (RM8, Reg8, [])
	      in  %% Line 501
		  [136|_cor1]
	  %% Line 502
	  <{{'rm16',RM16},{'reg16',Reg16}}> when 'true' ->
	      let <_cor2> =
		  %% Line 503
		  apply 'encode_rm'/3
		      (RM16, Reg16, [])
	      in  %% Line 503
		  [102|[137|_cor2]]
	  %% Line 504
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor3> =
		  %% Line 505
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 505
		  [137|_cor3]
	  %% Line 506
	  <{{'reg8',Reg8},{'rm8',RM8}}> when 'true' ->
	      let <_cor4> =
		  %% Line 507
		  apply 'encode_rm'/3
		      (RM8, Reg8, [])
	      in  %% Line 507
		  [138|_cor4]
	  %% Line 508
	  <{{'reg16',Reg16},{'rm16',RM16}}> when 'true' ->
	      let <_cor5> =
		  %% Line 509
		  apply 'encode_rm'/3
		      (RM16, Reg16, [])
	      in  %% Line 509
		  [102|[139|_cor5]]
	  %% Line 510
	  <{{'reg32',Reg32},{'rm32',RM32}}> when 'true' ->
	      let <_cor6> =
		  %% Line 511
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 511
		  [139|_cor6]
	  %% Line 512
	  <{'al',{'moffs8',Moffs8}}> when 'true' ->
	      let <_cor7> =
		  %% Line 513
		  apply 'le32'/2
		      (Moffs8, [])
	      in  %% Line 513
		  [160|_cor7]
	  %% Line 514
	  <{'ax',{'moffs16',Moffs16}}> when 'true' ->
	      let <_cor8> =
		  %% Line 515
		  apply 'le32'/2
		      (Moffs16, [])
	      in  %% Line 515
		  [102|[161|_cor8]]
	  %% Line 516
	  <{'eax',{'moffs32',Moffs32}}> when 'true' ->
	      let <_cor9> =
		  %% Line 517
		  apply 'le32'/2
		      (Moffs32, [])
	      in  %% Line 517
		  [161|_cor9]
	  %% Line 518
	  <{{'moffs8',Moffs8},'al'}> when 'true' ->
	      let <_cor10> =
		  %% Line 519
		  apply 'le32'/2
		      (Moffs8, [])
	      in  %% Line 519
		  [162|_cor10]
	  %% Line 520
	  <{{'moffs16',Moffs16},'ax'}> when 'true' ->
	      let <_cor11> =
		  %% Line 521
		  apply 'le32'/2
		      (Moffs16, [])
	      in  %% Line 521
		  [102|[163|_cor11]]
	  %% Line 522
	  <{{'moffs32',Moffs32},'eax'}> when 'true' ->
	      let <_cor12> =
		  %% Line 523
		  apply 'le32'/2
		      (Moffs32, [])
	      in  %% Line 523
		  [163|_cor12]
	  %% Line 524
	  <{{'reg8',Reg8},{'imm8',Imm8}}> when 'true' ->
	      let <_cor13> =
		  %% Line 525
		  call 'erlang':'bor'
		      (176, Reg8)
	      in  %% Line 525
		  [_cor13|[Imm8|[]]]
	  %% Line 526
	  <{{'reg16',Reg16},{'imm16',Imm16}}> when 'true' ->
	      let <_cor14> =
		  %% Line 527
		  call 'erlang':'bor'
		      (184, Reg16)
	      in  let <_cor15> =
		      %% Line 527
		      apply 'le16'/2
			  (Imm16, [])
		  in  %% Line 527
		      [102|[_cor14|_cor15]]
	  %% Line 528
	  <{{'reg32',Reg32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor16> =
		  %% Line 529
		  call 'erlang':'bor'
		      (184, Reg32)
	      in  let <_cor17> =
		      %% Line 529
		      apply 'le32'/2
			  (Imm32, [])
		  in  %% Line 529
		      [_cor16|_cor17]
	  %% Line 530
	  <{{'rm8',RM8},{'imm8',Imm8}}> when 'true' ->
	      let <_cor18> =
		  %% Line 531
		  apply 'encode_rm'/3
		      (RM8, 0, [Imm8|[]])
	      in  %% Line 531
		  [198|_cor18]
	  %% Line 532
	  <{{'rm16',RM16},{'imm16',Imm16}}> when 'true' ->
	      let <_cor19> =
		  %% Line 533
		  apply 'le16'/2
		      (Imm16, [])
	      in  let <_cor20> =
		      %% Line 533
		      apply 'encode_rm'/3
			  (RM16, 0, _cor19)
		  in  %% Line 533
		      [102|[199|_cor20]]
	  %% Line 534
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor21> =
		  %% Line 535
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor22> =
		      %% Line 535
		      apply 'encode_rm'/3
			  (RM32, 0, _cor21)
		  in  %% Line 535
		      [199|_cor22]
	  ( <_cor23> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor23})
	    -| ['compiler_generated'] )
	end
'mov_sizeof'/1 =
    %% Line 538
    fun (_cor0) ->
	%% Line 539
	case _cor0 of
	  %% Line 540
	  <{{'rm8',RM8},{'reg8',_cor15}}> when 'true' ->
	      let <_cor1> =
		  %% Line 541
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  %% Line 541
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 542
	  <{{'rm16',RM16},{'reg16',_cor16}}> when 'true' ->
	      let <_cor2> =
		  %% Line 543
		  apply 'sizeof_rm'/1
		      (RM16)
	      in  %% Line 543
		  call 'erlang':'+'
		      (2, _cor2)
	  %% Line 544
	  <{{'rm32',RM32},{'reg32',_cor17}}> when 'true' ->
	      let <_cor3> =
		  %% Line 545
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 545
		  call 'erlang':'+'
		      (1, _cor3)
	  %% Line 546
	  <{{'reg8',_cor18},{'rm8',RM8}}> when 'true' ->
	      let <_cor4> =
		  %% Line 547
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  %% Line 547
		  call 'erlang':'+'
		      (1, _cor4)
	  %% Line 548
	  <{{'reg16',_cor19},{'rm16',RM16}}> when 'true' ->
	      let <_cor5> =
		  %% Line 549
		  apply 'sizeof_rm'/1
		      (RM16)
	      in  %% Line 549
		  call 'erlang':'+'
		      (2, _cor5)
	  %% Line 550
	  <{{'reg32',_cor20},{'rm32',RM32}}> when 'true' ->
	      let <_cor6> =
		  %% Line 551
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 551
		  call 'erlang':'+'
		      (1, _cor6)
	  %% Line 552
	  <{'al',{'moffs8',_cor21}}> when 'true' ->
	      5
	  %% Line 554
	  <{'ax',{'moffs16',_cor22}}> when 'true' ->
	      6
	  %% Line 556
	  <{'eax',{'moffs32',_cor23}}> when 'true' ->
	      5
	  %% Line 558
	  <{{'moffs8',_cor24},'al'}> when 'true' ->
	      5
	  %% Line 560
	  <{{'moffs16',_cor25},'ax'}> when 'true' ->
	      6
	  %% Line 562
	  <{{'moffs32',_cor26},'eax'}> when 'true' ->
	      5
	  %% Line 564
	  <{{'reg8',_cor27},{'imm8',_cor28}}> when 'true' ->
	      %% Line 565
	      2
	  %% Line 566
	  <{{'reg16',_cor29},{'imm16',_cor30}}> when 'true' ->
	      4
	  %% Line 568
	  <{{'reg32',_cor31},{'imm32',_cor32}}> when 'true' ->
	      5
	  %% Line 570
	  <{{'rm8',RM8},{'imm8',_cor33}}> when 'true' ->
	      let <_cor7> =
		  %% Line 571
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  let <_cor8> =
		      %% Line 571
		      call 'erlang':'+'
			  (1, _cor7)
		  in  %% Line 571
		      call 'erlang':'+'
			  (_cor8, 1)
	  %% Line 572
	  <{{'rm16',RM16},{'imm16',_cor34}}> when 'true' ->
	      let <_cor9> =
		  %% Line 573
		  apply 'sizeof_rm'/1
		      (RM16)
	      in  let <_cor10> =
		      %% Line 573
		      call 'erlang':'+'
			  (2, _cor9)
		  in  %% Line 573
		      call 'erlang':'+'
			  (_cor10, 2)
	  %% Line 574
	  <{{'rm32',RM32},{'imm32',_cor35}}> when 'true' ->
	      let <_cor11> =
		  %% Line 575
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor12> =
		      %% Line 575
		      call 'erlang':'+'
			  (1, _cor11)
		  in  %% Line 575
		      call 'erlang':'+'
			  (_cor12, 4)
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'movx_op_encode'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	%% Line 579
	case _cor0 of
	  %% Line 580
	  <{{'reg16',Reg16},{'rm8',RM8}}> when 'true' ->
	      let <_cor2> =
		  %% Line 581
		  apply 'encode_rm'/3
		      (RM8, Reg16, [])
	      in  %% Line 581
		  [102|[15|[_cor1|_cor2]]]
	  %% Line 582
	  <{{'reg32',Reg32},{'rm8',RM8}}> when 'true' ->
	      let <_cor3> =
		  %% Line 583
		  apply 'encode_rm'/3
		      (RM8, Reg32, [])
	      in  %% Line 583
		  [15|[_cor1|_cor3]]
	  %% Line 584
	  <{{'reg32',Reg32},{'rm16',RM16}}> when 'true' ->
	      let <_cor4> =
		  %% Line 585
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor5> =
		      %% Line 585
		      apply 'encode_rm'/3
			  (RM16, Reg32, [])
		  in  %% Line 585
		      [15|[_cor4|_cor5]]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'movx_op_sizeof'/1 =
    %% Line 588
    fun (_cor0) ->
	%% Line 589
	case _cor0 of
	  %% Line 590
	  <{{'reg16',_cor6},{'rm8',RM8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 591
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  %% Line 591
		  call 'erlang':'+'
		      (3, _cor1)
	  %% Line 592
	  <{{'reg32',_cor7},{'rm8',RM8}}> when 'true' ->
	      let <_cor2> =
		  %% Line 593
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  %% Line 593
		  call 'erlang':'+'
		      (2, _cor2)
	  %% Line 594
	  <{{'reg32',_cor8},{'rm16',RM16}}> when 'true' ->
	      let <_cor3> =
		  %% Line 595
		  apply 'sizeof_rm'/1
		      (RM16)
	      in  %% Line 595
		  call 'erlang':'+'
		      (2, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'pop_encode'/1 =
    %% Line 598
    fun (_cor0) ->
	%% Line 599
	case _cor0 of
	  %% Line 600
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 601
		  apply 'encode_rm'/3
		      (RM32, 0, [])
	      in  %% Line 601
		  [143|_cor1]
	  %% Line 602
	  <{{'reg32',Reg32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 603
		  call 'erlang':'bor'
		      (88, Reg32)
	      in  %% Line 603
		  [_cor2|[]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'pop_sizeof'/1 =
    %% Line 606
    fun (_cor0) ->
	%% Line 607
	case _cor0 of
	  %% Line 608
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 609
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 609
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 610
	  <{{'reg32',_cor4}}> when 'true' ->
	      %% Line 611
	      1
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'push_encode'/1 =
    %% Line 614
    fun (_cor0) ->
	%% Line 615
	case _cor0 of
	  %% Line 616
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 617
		  apply 'encode_rm'/3
		      (RM32, 6, [])
	      in  %% Line 617
		  [255|_cor1]
	  %% Line 618
	  <{{'reg32',Reg32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 619
		  call 'erlang':'bor'
		      (80, Reg32)
	      in  %% Line 619
		  [_cor2|[]]
	  %% Line 620
	  <{{'imm8',Imm8}}> when 'true' ->
	      %% Line 621
	      [106|[Imm8|[]]]
	  %% Line 622
	  <{{'imm32',Imm32}}> when 'true' ->
	      let <_cor3> =
		  %% Line 623
		  apply 'le32'/2
		      (Imm32, [])
	      in  %% Line 623
		  [104|_cor3]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'push_sizeof'/1 =
    %% Line 626
    fun (_cor0) ->
	%% Line 627
	case _cor0 of
	  %% Line 628
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 629
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 629
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 630
	  <{{'reg32',_cor4}}> when 'true' ->
	      %% Line 631
	      1
	  %% Line 632
	  <{{'imm8',_cor5}}> when 'true' ->
	      %% Line 633
	      2
	  %% Line 634
	  <{{'imm32',_cor6}}> when 'true' ->
	      5
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'shift_op_encode'/2 =
    %% Line 638
    fun (_cor1,_cor0) ->
	%% Line 639
	case _cor0 of
	  %% Line 640
	  <{{'rm32',RM32},1}> when 'true' ->
	      let <_cor2> =
		  %% Line 641
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 641
		  [209|_cor2]
	  %% Line 642
	  <{{'rm32',RM32},'cl'}> when 'true' ->
	      let <_cor3> =
		  %% Line 643
		  apply 'encode_rm'/3
		      (RM32, _cor1, [])
	      in  %% Line 643
		  [211|_cor3]
	  %% Line 644
	  <{{'rm32',RM32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor4> =
		  %% Line 645
		  apply 'encode_rm'/3
		      (RM32, _cor1, [Imm8|[]])
	      in  %% Line 645
		  [193|_cor4]
	  %% Line 646
	  <{{'rm16',RM16},{'imm8',Imm8}}> when 'true' ->
	      let <_cor5> =
		  %% Line 647
		  apply 'encode_rm'/3
		      (RM16, _cor1, [Imm8|[]])
	      in  %% Line 647
		  [102|[193|_cor5]]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'shift_op_sizeof'/1 =
    %% Line 650
    fun (_cor0) ->
	%% Line 651
	case _cor0 of
	  %% Line 652
	  <{{'rm32',RM32},1}> when 'true' ->
	      let <_cor1> =
		  %% Line 653
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 653
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 654
	  <{{'rm32',RM32},'cl'}> when 'true' ->
	      let <_cor2> =
		  %% Line 655
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 655
		  call 'erlang':'+'
		      (1, _cor2)
	  %% Line 656
	  <{{'rm32',RM32},{'imm8',_X_Imm8}}> when 'true' ->
	      let <_cor3> =
		  %% Line 657
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor4> =
		      %% Line 657
		      call 'erlang':'+'
			  (1, _cor3)
		  in  %% Line 657
		      call 'erlang':'+'
			  (_cor4, 1)
	  %% Line 658
	  <{{'rm16',RM16},{'imm8',_X_Imm8}}> when 'true' ->
	      let <_cor5> =
		  %% Line 659
		  apply 'sizeof_rm'/1
		      (RM16)
	      in  let <_cor7> =
		      %% Line 659
		      call 'erlang':'+'
			  (2, _cor5)
		  in  %% Line 659
		      call 'erlang':'+'
			  (_cor7, 1)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'ret_encode'/1 =
    %% Line 662
    fun (_cor0) ->
	%% Line 663
	case _cor0 of
	  %% Line 664
	  <{}> when 'true' ->
	      %% Line 665
	      [195]
	  %% Line 666
	  <{{'imm16',Imm16}}> when 'true' ->
	      let <_cor1> =
		  %% Line 667
		  apply 'le16'/2
		      (Imm16, [])
	      in  %% Line 667
		  [194|_cor1]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'ret_sizeof'/1 =
    %% Line 670
    fun (_cor0) ->
	%% Line 671
	case _cor0 of
	  %% Line 672
	  <{}> when 'true' ->
	      %% Line 673
	      1
	  %% Line 674
	  <{{'imm16',_cor3}}> when 'true' ->
	      3
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'setcc_encode'/1 =
    %% Line 678
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',CC},{'rm8',RM8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 679
		  call 'erlang':'bor'
		      (144, CC)
	      in  let <_cor2> =
		      %% Line 679
		      apply 'encode_rm'/3
			  (RM8, 0, [])
		  in  %% Line 679
		      [15|[_cor1|_cor2]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'setcc_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'setcc_sizeof'/1 =
    %% Line 681
    fun (_cor0) ->
	case _cor0 of
	  <{{'cc',_cor3},{'rm8',RM8}}> when 'true' ->
	      let <_cor1> =
		  %% Line 682
		  apply 'sizeof_rm'/1
		      (RM8)
	      in  %% Line 682
		  call 'erlang':'+'
		      (2, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'setcc_sizeof',1}}] )
	    -| ['compiler_generated'] )
	end
'shd_op_encode'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	%% Line 685
	case _cor0 of
	  %% Line 686
	  <{{'rm32',RM32},{'reg32',Reg32},{'imm8',Imm8}}> when 'true' ->
	      let <_cor2> =
		  %% Line 687
		  apply 'encode_rm'/3
		      (RM32, Reg32, [Imm8|[]])
	      in  %% Line 687
		  [15|[_cor1|_cor2]]
	  %% Line 688
	  <{{'rm32',RM32},{'reg32',Reg32},'cl'}> when 'true' ->
	      let <_cor3> =
		  %% Line 689
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor4> =
		      %% Line 689
		      apply 'encode_rm'/3
			  (RM32, Reg32, [])
		  in  %% Line 689
		      [15|[_cor3|_cor4]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'shd_op_sizeof'/1 =
    %% Line 692
    fun (_cor0) ->
	%% Line 693
	case _cor0 of
	  %% Line 694
	  <{{'rm32',RM32},{'reg32',_cor6},{'imm8',_cor7}}> when 'true' ->
	      let <_cor1> =
		  %% Line 695
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor2> =
		      %% Line 695
		      call 'erlang':'+'
			  (2, _cor1)
		  in  %% Line 695
		      call 'erlang':'+'
			  (_cor2, 1)
	  %% Line 696
	  <{{'rm32',RM32},{'reg32',_cor8},'cl'}> when 'true' ->
	      let <_cor3> =
		  %% Line 697
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 697
		  call 'erlang':'+'
		      (2, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'test_encode'/1 =
    %% Line 700
    fun (_cor0) ->
	%% Line 701
	case _cor0 of
	  %% Line 702
	  <{'eax',{'imm32',Imm32}}> when 'true' ->
	      let <_cor1> =
		  %% Line 703
		  apply 'le32'/2
		      (Imm32, [])
	      in  %% Line 703
		  [169|_cor1]
	  %% Line 704
	  <{{'rm32',RM32},{'imm32',Imm32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 705
		  apply 'le32'/2
		      (Imm32, [])
	      in  let <_cor3> =
		      %% Line 705
		      apply 'encode_rm'/3
			  (RM32, 0, _cor2)
		  in  %% Line 705
		      [247|_cor3]
	  %% Line 706
	  <{{'rm32',RM32},{'reg32',Reg32}}> when 'true' ->
	      let <_cor4> =
		  %% Line 707
		  apply 'encode_rm'/3
		      (RM32, Reg32, [])
	      in  %% Line 707
		  [133|_cor4]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'test_sizeof'/1 =
    %% Line 710
    fun (_cor0) ->
	%% Line 711
	case _cor0 of
	  %% Line 712
	  <{'eax',{'imm32',_cor6}}> when 'true' ->
	      5
	  %% Line 714
	  <{{'rm32',RM32},{'imm32',_cor7}}> when 'true' ->
	      let <_cor1> =
		  %% Line 715
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  let <_cor2> =
		      %% Line 715
		      call 'erlang':'+'
			  (1, _cor1)
		  in  %% Line 715
		      call 'erlang':'+'
			  (_cor2, 4)
	  %% Line 716
	  <{{'rm32',RM32},{'reg32',_cor8}}> when 'true' ->
	      let <_cor3> =
		  %% Line 717
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 717
		  call 'erlang':'+'
		      (1, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'fild_encode'/1 =
    %% Line 720
    fun (_cor0) ->
	%% Line 722
	case _cor0 of
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 723
		  apply 'encode_rm'/3
		      (RM32, 0, [])
	      in  %% Line 723
		  [219|_cor2]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'fild_sizeof'/1 =
    %% Line 725
    fun (_cor0) ->
	%% Line 726
	case _cor0 of
	  <{{'rm32',RM32}}> when 'true' ->
	      let <_cor2> =
		  %% Line 727
		  apply 'sizeof_rm'/1
		      (RM32)
	      in  %% Line 727
		  call 'erlang':'+'
		      (1, _cor2)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'fld_encode'/1 =
    %% Line 729
    fun (_cor0) ->
	%% Line 730
	case _cor0 of
	  %% Line 731
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor1> =
		  %% Line 732
		  apply 'encode_rm'/3
		      (RM64fp, 0, [])
	      in  %% Line 732
		  [221|_cor1]
	  %% Line 733
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor2> =
		  %% Line 734
		  apply 'st'/1
		      (St)
	      in  let <_cor3> =
		      %% Line 734
		      call 'erlang':'bor'
			  (192, _cor2)
		  in  %% Line 734
		      [217|[_cor3|[]]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'fld_sizeof'/1 =
    %% Line 737
    fun (_cor0) ->
	%% Line 738
	case _cor0 of
	  %% Line 739
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor1> =
		  %% Line 740
		  apply 'sizeof_rm'/1
		      (RM64fp)
	      in  %% Line 740
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 741
	  <{{'fpst',_cor4}}> when 'true' ->
	      %% Line 742
	      2
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'fp_comm_arith_encode'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	%% Line 747
	case _cor0 of
	  %% Line 748
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 749
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 749
		  [220|_cor2]
	  %% Line 750
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <_cor4> =
		  %% Line 751
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor5> =
		      %% Line 751
		      call 'erlang':'bor'
			  (192, _cor4)
		  in  let <_cor3> =
			  %% Line 751
			  apply 'st'/1
			      (St)
		      in  let <_cor6> =
			      %% Line 751
			      call 'erlang':'bor'
				  (_cor5, _cor3)
			  in  %% Line 751
			      [216|[_cor6|[]]]
	  %% Line 752
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <_cor8> =
		  %% Line 753
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor9> =
		      %% Line 753
		      call 'erlang':'bor'
			  (192, _cor8)
		  in  let <_cor7> =
			  %% Line 753
			  apply 'st'/1
			      (St)
		      in  let <_cor10> =
			      %% Line 753
			      call 'erlang':'bor'
				  (_cor9, _cor7)
			  in  %% Line 753
			      [220|[_cor10|[]]]
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'fp_comm_arith_pop_encode'/2 =
    %% Line 756
    fun (_cor1,_cor0) ->
	%% Line 758
	case _cor0 of
	  %% Line 759
	  <[]> when 'true' ->
	      let <_cor3> =
		  %% Line 760
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor4> =
		      %% Line 760
		      call 'erlang':'bor'
			  (192, _cor3)
		  in  let <_cor2> =
			  %% Line 760
			  apply 'st'/1
			      (1)
		      in  let <_cor5> =
			      %% Line 760
			      call 'erlang':'bor'
				  (_cor4, _cor2)
			  in  %% Line 760
			      [222|[_cor5|[]]]
	  %% Line 761
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <_cor7> =
		  %% Line 762
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor8> =
		      %% Line 762
		      call 'erlang':'bor'
			  (192, _cor7)
		  in  let <_cor6> =
			  %% Line 762
			  apply 'st'/1
			      (St)
		      in  let <_cor9> =
			      %% Line 762
			      call 'erlang':'bor'
				  (_cor8, _cor6)
			  in  %% Line 762
			      [222|[_cor9|[]]]
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'fp_arith_encode'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	%% Line 767
	case _cor0 of
	  %% Line 768
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 769
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 769
		  [220|_cor2]
	  %% Line 770
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 771
		  call 'erlang':'band'
		      (_cor1, 6)
	      in  let <_cor5> =
		      %% Line 772
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor6> =
			  %% Line 772
			  call 'erlang':'bor'
			      (192, _cor5)
		      in  let <_cor4> =
			      %% Line 772
			      apply 'st'/1
				  (St)
			  in  let <_cor7> =
				  %% Line 772
				  call 'erlang':'bor'
				      (_cor6, _cor4)
			      in  %% Line 772
				  [216|[_cor7|[]]]
	  %% Line 773
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 774
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor10> =
		      %% Line 775
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor11> =
			  %% Line 775
			  call 'erlang':'bor'
			      (192, _cor10)
		      in  let <_cor9> =
			      %% Line 775
			      apply 'st'/1
				  (St)
			  in  let <_cor12> =
				  %% Line 775
				  call 'erlang':'bor'
				      (_cor11, _cor9)
			      in  %% Line 775
				  [220|[_cor12|[]]]
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'fp_arith_pop_encode'/2 =
    %% Line 778
    fun (_cor1,_cor0) ->
	let <OpCode0> =
	    %% Line 780
	    call 'erlang':'bor'
		(_cor1, 1)
	in  %% Line 781
	    case _cor0 of
	      %% Line 782
	      <[]> when 'true' ->
		  let <_cor4> =
		      %% Line 783
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor5> =
			  %% Line 783
			  call 'erlang':'bor'
			      (200, _cor4)
		      in  let <_cor3> =
			      %% Line 783
			      apply 'st'/1
				  (1)
			  in  let <_cor6> =
				  %% Line 783
				  call 'erlang':'bor'
				      (_cor5, _cor3)
			      in  %% Line 783
				  [222|[_cor6|[]]]
	      %% Line 784
	      <{{'fpst',St},{'fpst',0}}> when 'true' ->
		  let <_cor8> =
		      %% Line 785
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor9> =
			  %% Line 785
			  call 'erlang':'bor'
			      (200, _cor8)
		      in  let <_cor7> =
			      %% Line 785
			      apply 'st'/1
				  (St)
			  in  let <_cor10> =
				  %% Line 785
				  call 'erlang':'bor'
				      (_cor9, _cor7)
			      in  %% Line 785
				  [222|[_cor10|[]]]
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'fp_arith_rev_encode'/2 =
    %% Line 788
    fun (_cor1,_cor0) ->
	%% Line 790
	case _cor0 of
	  %% Line 791
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 792
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 792
		  [220|_cor2]
	  %% Line 793
	  <{{'fpst',0},{'fpst',St}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 794
		  call 'erlang':'bor'
		      (_cor1, 1)
	      in  let <_cor5> =
		      %% Line 795
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor6> =
			  %% Line 795
			  call 'erlang':'bor'
			      (192, _cor5)
		      in  let <_cor4> =
			      %% Line 795
			      apply 'st'/1
				  (St)
			  in  let <_cor7> =
				  %% Line 795
				  call 'erlang':'bor'
				      (_cor6, _cor4)
			      in  %% Line 795
				  [216|[_cor7|[]]]
	  %% Line 796
	  <{{'fpst',St},{'fpst',0}}> when 'true' ->
	      let <OpCode0> =
		  %% Line 797
		  call 'erlang':'band'
		      (_cor1, 6)
	      in  let <_cor10> =
		      %% Line 798
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor11> =
			  %% Line 798
			  call 'erlang':'bor'
			      (192, _cor10)
		      in  let <_cor9> =
			      %% Line 798
			      apply 'st'/1
				  (St)
			  in  let <_cor12> =
				  %% Line 798
				  call 'erlang':'bor'
				      (_cor11, _cor9)
			      in  %% Line 798
				  [220|[_cor12|[]]]
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'fp_arith_rev_pop_encode'/2 =
    %% Line 801
    fun (_cor1,_cor0) ->
	let <OpCode0> =
	    %% Line 803
	    call 'erlang':'band'
		(_cor1, 6)
	in  %% Line 804
	    case _cor0 of
	      %% Line 805
	      <[]> when 'true' ->
		  let <_cor4> =
		      %% Line 806
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor5> =
			  %% Line 806
			  call 'erlang':'bor'
			      (192, _cor4)
		      in  let <_cor3> =
			      %% Line 806
			      apply 'st'/1
				  (1)
			  in  let <_cor6> =
				  %% Line 806
				  call 'erlang':'bor'
				      (_cor5, _cor3)
			      in  %% Line 806
				  [222|[_cor6|[]]]
	      %% Line 807
	      <{{'fpst',St},{'fpst',0}}> when 'true' ->
		  let <_cor8> =
		      %% Line 808
		      call 'erlang':'bsl'
			  (OpCode0, 3)
		  in  let <_cor9> =
			  %% Line 808
			  call 'erlang':'bor'
			      (192, _cor8)
		      in  let <_cor7> =
			      %% Line 808
			      apply 'st'/1
				  (St)
			  in  let <_cor10> =
				  %% Line 808
				  call 'erlang':'bor'
				      (_cor9, _cor7)
			      in  %% Line 808
				  [222|[_cor10|[]]]
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'fp_arith_sizeof'/1 =
    %% Line 811
    fun (_cor0) ->
	%% Line 812
	case _cor0 of
	  %% Line 813
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor1> =
		  %% Line 814
		  apply 'sizeof_rm'/1
		      (RM64fp)
	      in  %% Line 814
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 815
	  <{{'fpst',0},{'fpst',_cor4}}> when 'true' ->
	      %% Line 816
	      2
	  %% Line 817
	  <{{'fpst',_cor5},{'fpst',0}}> when 'true' ->
	      %% Line 818
	      2
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'fst_encode'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	%% Line 822
	case _cor0 of
	  %% Line 823
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor2> =
		  %% Line 824
		  apply 'encode_rm'/3
		      (RM64fp, _cor1, [])
	      in  %% Line 824
		  [221|_cor2]
	  %% Line 825
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor4> =
		  %% Line 826
		  call 'erlang':'bsl'
		      (_cor1, 3)
	      in  let <_cor5> =
		      %% Line 826
		      call 'erlang':'bor'
			  (192, _cor4)
		  in  let <_cor3> =
			  %% Line 826
			  apply 'st'/1
			      (St)
		      in  let <_cor6> =
			      %% Line 826
			      call 'erlang':'bor'
				  (_cor5, _cor3)
			  in  %% Line 826
			      [221|[_cor6|[]]]
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'fst_sizeof'/1 =
    %% Line 829
    fun (_cor0) ->
	%% Line 830
	case _cor0 of
	  %% Line 831
	  <{{'rm64fp',RM64fp}}> when 'true' ->
	      let <_cor1> =
		  %% Line 832
		  apply 'sizeof_rm'/1
		      (RM64fp)
	      in  %% Line 832
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 833
	  <{{'fpst',_cor4}}> when 'true' ->
	      %% Line 834
	      2
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'fchs_encode'/0 =
    %% Line 837
    fun () ->
	%% Line 838
	[217|[224]]
'fchs_sizeof'/0 =
    %% Line 839
    fun () ->
	%% Line 840
	2
'ffree_encode'/1 =
    %% Line 842
    fun (_cor0) ->
	case _cor0 of
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor1> =
		  %% Line 843
		  apply 'st'/1
		      (St)
	      in  let <_cor2> =
		      %% Line 843
		      call 'erlang':'bor'
			  (192, _cor1)
		  in  %% Line 843
		      [221|[_cor2|[]]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'ffree_encode',1}}] )
	    -| ['compiler_generated'] )
	end
'ffree_sizeof'/0 =
    %% Line 844
    fun () ->
	%% Line 845
	2
'fwait_encode'/0 =
    %% Line 847
    fun () ->
	%% Line 848
	[155]
'fwait_sizeof'/0 =
    %% Line 849
    fun () ->
	%% Line 850
	1
'fxch_encode'/1 =
    %% Line 852
    fun (_cor0) ->
	%% Line 853
	case _cor0 of
	  %% Line 854
	  <[]> when 'true' ->
	      let <_cor1> =
		  %% Line 855
		  apply 'st'/1
		      (1)
	      in  let <_cor2> =
		      %% Line 855
		      call 'erlang':'bor'
			  (200, _cor1)
		  in  %% Line 855
		      [217|[_cor2|[]]]
	  %% Line 856
	  <{{'fpst',St}}> when 'true' ->
	      let <_cor3> =
		  %% Line 857
		  apply 'st'/1
		      (St)
	      in  let <_cor4> =
		      %% Line 857
		      call 'erlang':'bor'
			  (200, _cor3)
		  in  %% Line 857
		      [217|[_cor4|[]]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'fxch_sizeof'/0 =
    %% Line 859
    fun () ->
	%% Line 860
	2
'insn_encode'/3 =
    %% Line 862
    fun (_cor2,_cor1,_cor0) ->
	let <Bytes> =
	    %% Line 863
	    apply 'insn_encode_internal'/2
		(_cor2, _cor1)
	in  %% Line 864
	    case apply 'has_relocs'/1
		     (Bytes) of
	      %% Line 865
	      <'false'> when 'true' ->
		  %% Line 866
		  {Bytes,[]}
	      %% Line 867
	      <_cor8> when 'true' ->
		  %% Line 868
		  apply 'fix_relocs'/4
		      (Bytes, _cor0, [], [])
	    end
'has_relocs'/1 =
    %% Line 871
    fun (_cor0) ->
	case _cor0 of
	  <[{'le32',_cor2,_cor3}|_cor4]> when 'true' ->
	      'true'
	  %% Line 872
	  <[_cor5|Bytes]> when 'true' ->
	      apply 'has_relocs'/1
		  (Bytes)
	  %% Line 873
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'has_relocs',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_relocs'/4 =
    %% Line 875
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'le32',Tag,Val}|Bytes],Offset,Code,Relocs> when 'true' ->
	      let <_cor4> =
		  %% Line 876
		  call 'erlang':'+'
		      (Offset, 4)
	      in  %% Line 876
		  apply 'fix_relocs'/4
		      (Bytes, _cor4, %% Line 877
				     [0|[0|[0|[0|Code]]]], %% Line 878
							   [{Tag,Offset,Val}|Relocs])
	  %% Line 879
	  <[Byte|Bytes],Offset,Code,Relocs> when 'true' ->
	      let <_cor5> =
		  %% Line 880
		  call 'erlang':'+'
		      (Offset, 1)
	      in  %% Line 880
		  apply 'fix_relocs'/4
		      (Bytes, _cor5, [Byte|Code], Relocs)
	  %% Line 881
	  <[],_X_Offset,Code,Relocs> when 'true' ->
	      let <_cor7> =
		  %% Line 882
		  call 'lists':'reverse'
		      (Code)
	      in  let <_cor6> =
		      %% Line 882
		      call 'lists':'reverse'
			  (Relocs)
		  in  %% Line 882
		      {_cor7,_cor6}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fix_relocs',4}}] )
	    -| ['compiler_generated'] )
	end
'insn_encode_internal'/2 =
    %% Line 884
    fun (_cor1,_cor0) ->
	%% Line 885
	case _cor1 of
	  %% Line 886
	  <'adc'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (2, _cor0)
	  %% Line 887
	  <'add'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (0, _cor0)
	  %% Line 888
	  <'and'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (4, _cor0)
	  %% Line 889
	  <'bsf'> when 'true' ->
	      apply 'bs_op_encode'/2
		  (188, _cor0)
	  %% Line 890
	  <'bsr'> when 'true' ->
	      apply 'bs_op_encode'/2
		  (189, _cor0)
	  %% Line 891
	  <'bswap'> when 'true' ->
	      apply 'bswap_encode'/1
		  (_cor0)
	  %% Line 892
	  <'bt'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (4, _cor0)
	  %% Line 893
	  <'btc'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (7, _cor0)
	  %% Line 894
	  <'btr'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (6, _cor0)
	  %% Line 895
	  <'bts'> when 'true' ->
	      apply 'bt_op_encode'/2
		  (5, _cor0)
	  %% Line 896
	  <'call'> when 'true' ->
	      apply 'call_encode'/1
		  (_cor0)
	  %% Line 897
	  <'cbw'> when 'true' ->
	      apply 'cbw_encode'/1
		  (_cor0)
	  %% Line 898
	  <'cdq'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (153, _cor0)
	  %% Line 899
	  <'clc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (248, _cor0)
	  %% Line 900
	  <'cld'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (252, _cor0)
	  %% Line 901
	  <'cmc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (245, _cor0)
	  %% Line 902
	  <'cmovcc'> when 'true' ->
	      apply 'cmovcc_encode'/1
		  (_cor0)
	  %% Line 903
	  <'cmp'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (7, _cor0)
	  %% Line 904
	  <'cwde'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (152, _cor0)
	  %% Line 905
	  <'dec'> when 'true' ->
	      apply 'incdec_encode'/2
		  (1, _cor0)
	  %% Line 906
	  <'div'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (6, _cor0)
	  %% Line 907
	  <'enter'> when 'true' ->
	      apply 'enter_encode'/1
		  (_cor0)
	  %% Line 908
	  <'fadd'> when 'true' ->
	      apply 'fp_comm_arith_encode'/2
		  (0, _cor0)
	  %% Line 909
	  <'faddp'> when 'true' ->
	      apply 'fp_comm_arith_pop_encode'/2
		  (0, _cor0)
	  %% Line 910
	  <'fchs'> when 'true' ->
	      apply 'fchs_encode'/0
		  ()
	  %% Line 911
	  <'fdiv'> when 'true' ->
	      apply 'fp_arith_encode'/2
		  (6, _cor0)
	  %% Line 912
	  <'fdivp'> when 'true' ->
	      apply 'fp_arith_pop_encode'/2
		  (6, _cor0)
	  %% Line 913
	  <'fdivr'> when 'true' ->
	      apply 'fp_arith_rev_encode'/2
		  (7, _cor0)
	  %% Line 914
	  <'fdivrp'> when 'true' ->
	      apply 'fp_arith_rev_pop_encode'/2
		  (7, _cor0)
	  %% Line 915
	  <'ffree'> when 'true' ->
	      apply 'ffree_encode'/1
		  (_cor0)
	  %% Line 916
	  <'fild'> when 'true' ->
	      apply 'fild_encode'/1
		  (_cor0)
	  %% Line 917
	  <'fld'> when 'true' ->
	      apply 'fld_encode'/1
		  (_cor0)
	  %% Line 918
	  <'fmul'> when 'true' ->
	      apply 'fp_comm_arith_encode'/2
		  (1, _cor0)
	  %% Line 919
	  <'fmulp'> when 'true' ->
	      apply 'fp_comm_arith_pop_encode'/2
		  (1, _cor0)
	  %% Line 920
	  <'fst'> when 'true' ->
	      apply 'fst_encode'/2
		  (2, _cor0)
	  %% Line 921
	  <'fstp'> when 'true' ->
	      apply 'fst_encode'/2
		  (3, _cor0)
	  %% Line 922
	  <'fsub'> when 'true' ->
	      apply 'fp_arith_encode'/2
		  (4, _cor0)
	  %% Line 923
	  <'fsubp'> when 'true' ->
	      apply 'fp_arith_pop_encode'/2
		  (4, _cor0)
	  %% Line 924
	  <'fsubr'> when 'true' ->
	      apply 'fp_arith_rev_encode'/2
		  (5, _cor0)
	  %% Line 925
	  <'fsubrp'> when 'true' ->
	      apply 'fp_arith_rev_pop_encode'/2
		  (5, _cor0)
	  %% Line 926
	  <'fwait'> when 'true' ->
	      apply 'fwait_encode'/0
		  ()
	  %% Line 927
	  <'fxch'> when 'true' ->
	      apply 'fxch_encode'/1
		  (_cor0)
	  %% Line 928
	  <'idiv'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (7, _cor0)
	  %% Line 929
	  <'imul'> when 'true' ->
	      apply 'imul_encode'/1
		  (_cor0)
	  %% Line 930
	  <'inc'> when 'true' ->
	      apply 'incdec_encode'/2
		  (0, _cor0)
	  %% Line 931
	  <'into'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (206, _cor0)
	  %% Line 932
	  <'jcc'> when 'true' ->
	      apply 'jcc_encode'/1
		  (_cor0)
	  %% Line 933
	  <'jecxz'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (227, _cor0)
	  %% Line 934
	  <'jmp'> when 'true' ->
	      apply 'jmp_encode'/1
		  (_cor0)
	  %% Line 935
	  <'lea'> when 'true' ->
	      apply 'lea_encode'/1
		  (_cor0)
	  %% Line 936
	  <'leave'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (201, _cor0)
	  %% Line 937
	  <'loop'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (226, _cor0)
	  %% Line 938
	  <'loope'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (225, _cor0)
	  %% Line 939
	  <'loopne'> when 'true' ->
	      apply 'jmp8_op_encode'/2
		  (224, _cor0)
	  %% Line 940
	  <'mov'> when 'true' ->
	      apply 'mov_encode'/1
		  (_cor0)
	  %% Line 941
	  <'movsx'> when 'true' ->
	      apply 'movx_op_encode'/2
		  (190, _cor0)
	  %% Line 942
	  <'movzx'> when 'true' ->
	      apply 'movx_op_encode'/2
		  (182, _cor0)
	  %% Line 943
	  <'mul'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (4, _cor0)
	  %% Line 944
	  <'neg'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (3, _cor0)
	  %% Line 945
	  <'nop'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (144, _cor0)
	  %% Line 946
	  <'not'> when 'true' ->
	      apply 'arith_unop_encode'/2
		  (2, _cor0)
	  %% Line 947
	  <'or'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (1, _cor0)
	  %% Line 948
	  <'pop'> when 'true' ->
	      apply 'pop_encode'/1
		  (_cor0)
	  %% Line 949
	  <'prefix_fs'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (100, _cor0)
	  %% Line 950
	  <'push'> when 'true' ->
	      apply 'push_encode'/1
		  (_cor0)
	  %% Line 951
	  <'rcl'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (2, _cor0)
	  %% Line 952
	  <'rcr'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (3, _cor0)
	  %% Line 953
	  <'ret'> when 'true' ->
	      apply 'ret_encode'/1
		  (_cor0)
	  %% Line 954
	  <'rol'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (0, _cor0)
	  %% Line 955
	  <'ror'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (1, _cor0)
	  %% Line 956
	  <'sar'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (7, _cor0)
	  %% Line 957
	  <'sbb'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (3, _cor0)
	  %% Line 958
	  <'setcc'> when 'true' ->
	      apply 'setcc_encode'/1
		  (_cor0)
	  %% Line 959
	  <'shl'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (4, _cor0)
	  %% Line 960
	  <'shld'> when 'true' ->
	      apply 'shd_op_encode'/2
		  (164, _cor0)
	  %% Line 961
	  <'shr'> when 'true' ->
	      apply 'shift_op_encode'/2
		  (5, _cor0)
	  %% Line 962
	  <'shrd'> when 'true' ->
	      apply 'shd_op_encode'/2
		  (172, _cor0)
	  %% Line 963
	  <'stc'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (249, _cor0)
	  %% Line 964
	  <'std'> when 'true' ->
	      apply 'nullary_op_encode'/2
		  (253, _cor0)
	  %% Line 965
	  <'sub'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (5, _cor0)
	  %% Line 966
	  <'test'> when 'true' ->
	      apply 'test_encode'/1
		  (_cor0)
	  %% Line 967
	  <'xor'> when 'true' ->
	      apply 'arith_binop_encode'/2
		  (6, _cor0)
	  %% Line 968
	  <_cor5> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_x86_encode','insn_encode',_cor1})
	end
'insn_sizeof'/2 =
    %% Line 971
    fun (_cor1,_cor0) ->
	%% Line 972
	case _cor1 of
	  %% Line 973
	  <'adc'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 974
	  <'add'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 975
	  <'and'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 976
	  <'bsf'> when 'true' ->
	      apply 'bs_op_sizeof'/1
		  (_cor0)
	  %% Line 977
	  <'bsr'> when 'true' ->
	      apply 'bs_op_sizeof'/1
		  (_cor0)
	  %% Line 978
	  <'bswap'> when 'true' ->
	      apply 'bswap_sizeof'/1
		  (_cor0)
	  %% Line 979
	  <'bt'> when 'true' ->
	      apply 'bt_op_sizeof'/1
		  (_cor0)
	  %% Line 980
	  <'btc'> when 'true' ->
	      apply 'bt_op_sizeof'/1
		  (_cor0)
	  %% Line 981
	  <'btr'> when 'true' ->
	      apply 'bt_op_sizeof'/1
		  (_cor0)
	  %% Line 982
	  <'bts'> when 'true' ->
	      apply 'bt_op_sizeof'/1
		  (_cor0)
	  %% Line 983
	  <'call'> when 'true' ->
	      apply 'call_sizeof'/1
		  (_cor0)
	  %% Line 984
	  <'cbw'> when 'true' ->
	      apply 'cbw_sizeof'/1
		  (_cor0)
	  %% Line 985
	  <'cdq'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 986
	  <'clc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 987
	  <'cld'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 988
	  <'cmc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 989
	  <'cmovcc'> when 'true' ->
	      apply 'cmovcc_sizeof'/1
		  (_cor0)
	  %% Line 990
	  <'cmp'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 991
	  <'cwde'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 992
	  <'dec'> when 'true' ->
	      apply 'incdec_sizeof'/1
		  (_cor0)
	  %% Line 993
	  <'div'> when 'true' ->
	      apply 'arith_unop_sizeof'/1
		  (_cor0)
	  %% Line 994
	  <'enter'> when 'true' ->
	      apply 'enter_sizeof'/1
		  (_cor0)
	  %% Line 995
	  <'fadd'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 996
	  <'faddp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 997
	  <'fchs'> when 'true' ->
	      apply 'fchs_sizeof'/0
		  ()
	  %% Line 998
	  <'fdiv'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 999
	  <'fdivp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1000
	  <'fdivr'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1001
	  <'fdivrp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1002
	  <'ffree'> when 'true' ->
	      apply 'ffree_sizeof'/0
		  ()
	  %% Line 1003
	  <'fild'> when 'true' ->
	      apply 'fild_sizeof'/1
		  (_cor0)
	  %% Line 1004
	  <'fld'> when 'true' ->
	      apply 'fld_sizeof'/1
		  (_cor0)
	  %% Line 1005
	  <'fmul'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1006
	  <'fmulp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1007
	  <'fst'> when 'true' ->
	      apply 'fst_sizeof'/1
		  (_cor0)
	  %% Line 1008
	  <'fstp'> when 'true' ->
	      apply 'fst_sizeof'/1
		  (_cor0)
	  %% Line 1009
	  <'fsub'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1010
	  <'fsubp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1011
	  <'fsubr'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1012
	  <'fsubrp'> when 'true' ->
	      apply 'fp_arith_sizeof'/1
		  (_cor0)
	  %% Line 1013
	  <'fwait'> when 'true' ->
	      apply 'fwait_sizeof'/0
		  ()
	  %% Line 1014
	  <'fxch'> when 'true' ->
	      apply 'fxch_sizeof'/0
		  ()
	  %% Line 1015
	  <'idiv'> when 'true' ->
	      apply 'arith_unop_sizeof'/1
		  (_cor0)
	  %% Line 1016
	  <'imul'> when 'true' ->
	      apply 'imul_sizeof'/1
		  (_cor0)
	  %% Line 1017
	  <'inc'> when 'true' ->
	      apply 'incdec_sizeof'/1
		  (_cor0)
	  %% Line 1018
	  <'into'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1019
	  <'jcc'> when 'true' ->
	      apply 'jcc_sizeof'/1
		  (_cor0)
	  %% Line 1020
	  <'jecxz'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1021
	  <'jmp'> when 'true' ->
	      apply 'jmp_sizeof'/1
		  (_cor0)
	  %% Line 1022
	  <'lea'> when 'true' ->
	      apply 'lea_sizeof'/1
		  (_cor0)
	  %% Line 1023
	  <'leave'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1024
	  <'loop'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1025
	  <'loope'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1026
	  <'loopne'> when 'true' ->
	      apply 'jmp8_op_sizeof'/1
		  (_cor0)
	  %% Line 1027
	  <'mov'> when 'true' ->
	      apply 'mov_sizeof'/1
		  (_cor0)
	  %% Line 1028
	  <'movsx'> when 'true' ->
	      apply 'movx_op_sizeof'/1
		  (_cor0)
	  %% Line 1029
	  <'movzx'> when 'true' ->
	      apply 'movx_op_sizeof'/1
		  (_cor0)
	  %% Line 1030
	  <'mul'> when 'true' ->
	      apply 'arith_unop_sizeof'/1
		  (_cor0)
	  %% Line 1031
	  <'neg'> when 'true' ->
	      apply 'arith_unop_sizeof'/1
		  (_cor0)
	  %% Line 1032
	  <'nop'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1033
	  <'not'> when 'true' ->
	      apply 'arith_unop_sizeof'/1
		  (_cor0)
	  %% Line 1034
	  <'or'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 1035
	  <'pop'> when 'true' ->
	      apply 'pop_sizeof'/1
		  (_cor0)
	  %% Line 1036
	  <'prefix_fs'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1037
	  <'push'> when 'true' ->
	      apply 'push_sizeof'/1
		  (_cor0)
	  %% Line 1038
	  <'rcl'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1039
	  <'rcr'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1040
	  <'ret'> when 'true' ->
	      apply 'ret_sizeof'/1
		  (_cor0)
	  %% Line 1041
	  <'rol'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1042
	  <'ror'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1043
	  <'sar'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1044
	  <'sbb'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 1045
	  <'setcc'> when 'true' ->
	      apply 'setcc_sizeof'/1
		  (_cor0)
	  %% Line 1046
	  <'shl'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1047
	  <'shld'> when 'true' ->
	      apply 'shd_op_sizeof'/1
		  (_cor0)
	  %% Line 1048
	  <'shr'> when 'true' ->
	      apply 'shift_op_sizeof'/1
		  (_cor0)
	  %% Line 1049
	  <'shrd'> when 'true' ->
	      apply 'shd_op_sizeof'/1
		  (_cor0)
	  %% Line 1050
	  <'stc'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1051
	  <'std'> when 'true' ->
	      apply 'nullary_op_sizeof'/1
		  (_cor0)
	  %% Line 1052
	  <'sub'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 1053
	  <'test'> when 'true' ->
	      apply 'test_sizeof'/1
		  (_cor0)
	  %% Line 1054
	  <'xor'> when 'true' ->
	      apply 'arith_binop_sizeof'/1
		  (_cor0)
	  %% Line 1055
	  <_cor5> when 'true' ->
	      call 'erlang':'exit'
		  ({'hipe_x86_encode','insn_sizeof',_cor1})
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_encode')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_encode', _cor0)
end