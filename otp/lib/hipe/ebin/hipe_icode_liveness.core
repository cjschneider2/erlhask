module 'hipe_icode_liveness' ['analyze'/1,
			      'livein'/2,
			      'module_info'/0,
			      'module_info'/1,
			      'pp'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'analyze',1},[{'type',74,'fun',[{'type',74,'product',[{'type',74,'cfg',[]}]}|[{'remote_type',74,[{'atom',74,'gb_trees'}|[{'atom',74,'tree'}|[[]]]]}]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'livein',2},[{'type',212,'fun',[{'type',212,'product',[{'remote_type',212,[{'atom',212,'gb_trees'}|[{'atom',212,'tree'}|[[]]]]}|[{'var',212,'_'}]]}|[{'type',212,'list',[{'var',212,'_'}]}]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'pp',1},[{'type',315,'fun',[{'type',315,'product',[{'type',315,'cfg',[]}]}|[{'atom',315,'ok'}]]}]}]]
'analyze'/1 =
    %% Line 96
    fun (_cor0) ->
	let <PO> =
	    %% Line 97
	    apply 'cfg_postorder'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 98
		apply 'init'/2
		    (PO, _cor0)
	    in  let <InitLiveness> =
		    %% Line 98
		    apply 'liveness_init'/1
			(_cor2)
		in  %% Line 99
		    apply 'merry_go_around'/3
			(PO, InitLiveness, 0)
'merry_go_around'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	%% Line 108
	case apply 'doit_once'/3
		 (_cor2, _cor1, 0) of
	  %% Line 109
	  <{NewLiveness,0}> when 'true' ->
	      %% Line 111
	      NewLiveness
	  %% Line 112
	  <{NewLiveness,_X_Changed}> when 'true' ->
	      let <_cor3> =
		  %% Line 113
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 113
		  apply 'merry_go_around'/3
		      (_cor2, NewLiveness, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'doit_once'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Liveness,Changed> when 'true' ->
	      %% Line 138
	      {Liveness,Changed}
	  %% Line 139
	  <[L|Ls],Liveness,Changed> when 'true' ->
	      let <LiveOut> =
		  %% Line 140
		  apply 'liveout'/2
		      (Liveness, L)
	      in  let <_cor4> =
		      %% Line 141
		      apply 'kill'/2
			  (L, Liveness)
		  in  let <Kill> =
			  %% Line 141
			  call 'ordsets':'subtract'
			      (LiveOut, _cor4)
		      in  let <_cor6> =
			      %% Line 142
			      apply 'gen'/2
				  (L, Liveness)
			  in  let <LiveIn> =
				  %% Line 142
				  call 'ordsets':'union'
				      (Kill, _cor6)
			      in  %% Line 143
				  case apply 'update_livein'/3
					   (L, LiveIn, Liveness) of
				    <{NewLiveness,ChangedP}> when 'true' ->
					let <_cor9> =
					    %% Line 144
					    call 'erlang':'+'
						(Changed, ChangedP)
					in  %% Line 144
					    apply 'doit_once'/3
						(Ls, NewLiveness, _cor9)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'doit_once',3}}] )
	    -| ['compiler_generated'] )
	end
'update_livein'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	%% Line 178
	case apply 'liveness_lookup'/2
		 (_cor2, _cor0) of
	  <{GK,LiveIn,Successors}> when 'true' ->
	      let <NewLiveness> =
		  %% Line 179
		  apply 'liveness_update'/3
		      (_cor2, {GK,_cor1,Successors}, _cor0)
	      in  %% Line 180
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (LiveIn,
			       _cor1) ->
			%% Line 181
			{NewLiveness,0}
		    %% Line 182
		    <> when 'true' ->
			%% Line 183
			{NewLiveness,1}
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'liveout'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	let <Succ> =
	    %% Line 192
	    apply 'successors'/2
		(_cor0, _cor1)
	in  %% Line 193
	    case Succ of
	      %% Line 194
	      <[]> when 'true' ->
		  %% Line 195
		  apply 'liveout_no_succ'/0
		      ()
	      %% Line 196
	      <_cor6> when 'true' ->
		  %% Line 197
		  apply 'liveout1'/2
		      (Succ, _cor1)
	    end
'liveout1'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 201
	    call 'ordsets':'new'
		()
	in  %% Line 201
	    apply 'liveout1'/3
		(_cor1, _cor0, _cor2)
'liveout1'/3 =
    %% Line 203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Liveness,Live> when 'true' ->
	      %% Line 204
	      Live
	  %% Line 205
	  <[L|Ls],Liveness,Live> when 'true' ->
	      let <_cor3> =
		  %% Line 206
		  apply 'livein'/2
		      (Liveness, L)
	      in  let <_cor4> =
		      %% Line 206
		      call 'ordsets':'union'
			  (_cor3, Live)
		  in  %% Line 206
		      apply 'liveout1'/3
			  (Ls, Liveness, _cor4)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'liveout1',3}}] )
	    -| ['compiler_generated'] )
	end
'successors'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	%% Line 209
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{_X_GK,_X_LiveIn,Successors}> when 'true' ->
	      %% Line 210
	      Successors
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'livein'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	%% Line 215
	case apply 'liveness_lookup'/2
		 (_cor0, _cor1) of
	  <{_X_GK,LiveIn,_X_Successors}> when 'true' ->
	      %% Line 216
	      LiveIn
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'kill'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	%% Line 219
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{{_X_Gen,Kill},_X_LiveIn,_X_Successors}> when 'true' ->
	      %% Line 220
	      Kill
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'gen'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	%% Line 223
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{{Gen,_X_Kill},_X_LiveIn,_X_Successors}> when 'true' ->
	      %% Line 224
	      Gen
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'init'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor10> when 'true' ->
	      %% Line 238
	      []
	  %% Line 239
	  <[L|Ls],CFG> when 'true' ->
	      let <BB> =
		  %% Line 240
		  apply 'cfg_bb'/2
		      (CFG, L)
	      in  let <Code> =
		      %% Line 241
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <Succ> =
			  %% Line 242
			  apply 'cfg_succ'/2
			      (CFG, L)
		      in  let <Transfer> =
			      %% Line 243
			      apply 'make_bb_transfer'/2
				  (Code, Succ)
			  in  let <_cor6> =
				  %% Line 244
				  call 'ordsets':'new'
				      ()
			      in  let <_cor7> =
				      %% Line 244
				      apply 'init'/2
					  (Ls, CFG)
				  in  %% Line 244
				      [{L,{Transfer,_cor6,Succ}}|_cor7]
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'make_bb_transfer'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Succ> when 'true' ->
	      let <_cor3> =
		  %% Line 248
		  call 'ordsets':'new'
		      ()
	      in  let <_cor2> =
		      %% Line 248
		      call 'ordsets':'new'
			  ()
		  in  %% Line 248
		      {_cor3,_cor2}
	  %% Line 249
	  <[I|Is],Succ> when 'true' ->
	      %% Line 250
	      case apply 'make_bb_transfer'/2
		       (Is, Succ) of
		<{Gen,Kill}> when 'true' ->
		    let <_cor5> =
			%% Line 251
			apply 'uses'/1
			    (I)
		    in  let <InstrGen> =
			    %% Line 251
			    call 'ordsets':'from_list'
				(_cor5)
			in  let <_cor7> =
				%% Line 252
				apply 'defines'/1
				    (I)
			    in  let <InstrKill> =
				    %% Line 252
				    call 'ordsets':'from_list'
					(_cor7)
				in  let <Gen1> =
					%% Line 253
					call 'ordsets':'subtract'
					    (Gen, InstrKill)
				    in  let <Gen2> =
					    %% Line 254
					    call 'ordsets':'union'
						(Gen1, InstrGen)
					in  let <Kill1> =
						%% Line 255
						call 'ordsets':'union'
						    (Kill, InstrKill)
					    in  let <Kill2> =
						    %% Line 256
						    call 'ordsets':'subtract'
							(Kill1, InstrGen)
						in  %% Line 257
						    {Gen2,Kill2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'make_bb_transfer',2}}] )
	    -| ['compiler_generated'] )
	end
'liveness_init'/1 =
    %% Line 294
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 295
	    call 'gb_trees':'empty'
		()
	in  %% Line 295
	    apply 'liveness_init'/2
		(_cor0, _cor1)
'liveness_init'/2 =
    %% Line 297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Lbl,Data}|Left],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 298
		  call 'gb_trees':'insert'
		      (Lbl, Data, Acc)
	      in  %% Line 298
		  apply 'liveness_init'/2
		      (Left, _cor2)
	  %% Line 299
	  <[],Acc> when 'true' ->
	      %% Line 300
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'liveness_init',2}}] )
	    -| ['compiler_generated'] )
	end
'liveness_lookup'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	%% Line 303
	call 'gb_trees':'get'
	    (_cor1, _cor0)
'liveness_update'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	%% Line 305
	call 'gb_trees':'update'
	    (_cor2, _cor1, _cor0)
'pp'/1 =
    %% Line 316
    fun (_cor0) ->
	let <Liveness> =
	    %% Line 317
	    apply 'analyze'/1
		(_cor0)
	in  let <Labels> =
		%% Line 318
		apply 'cfg_labels'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 319
		    apply 'print_blocks'/3
			(Labels, Liveness, _cor0)
		in  %% Line 319
		    case _cor5 of
		      <'ok'> when 'true' ->
			  ( _cor5
			    -| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
'print_blocks'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lbl|Rest],Liveness,Cfg> when 'true' ->
	      do  %% Line 322
		  call 'io':'format'
		      ([126|[110|[76|[105|[118|[101|[105|[110|[58]]]]]]]]], [])
		  let <_cor3> =
		      %% Line 323
		      apply 'livein'/2
			  (Liveness, Lbl)
		  in  do  %% Line 323
			  apply 'pp_liveness_info'/1
			      (_cor3)
			  do  %% Line 324
			      call 'io':'format'
				  ([76|[97|[98|[101|[108|[32|[126|[119|[58|[126|[110]]]]]]]]]]], [Lbl|[]])
			      do  %% Line 325
				  apply 'pp_block'/2
				      (Lbl, Cfg)
				  do  %% Line 326
				      call 'io':'format'
					  ([76|[105|[118|[101|[111|[117|[116|[58]]]]]]]], [])
				      let <_cor4> =
					  %% Line 327
					  apply 'liveout'/2
					      (Liveness, Lbl)
				      in  do  %% Line 327
					      apply 'pp_liveness_info'/1
						  (_cor4)
					      %% Line 328
					      apply 'print_blocks'/3
						  (Rest, Liveness, Cfg)
	  %% Line 329
	  <[],_X_Liveness,_X_Cfg> when 'true' ->
	      %% Line 330
	      'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'print_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'cfg_bb'/2 =
    %% Line 37
    fun (_cor1,_cor0) ->
	%% Line 38
	call 'hipe_icode_cfg':'bb'
	    (_cor1, _cor0)
'cfg_postorder'/1 =
    %% Line 40
    fun (_cor0) ->
	%% Line 41
	call 'hipe_icode_cfg':'postorder'
	    (_cor0)
'cfg_succ'/2 =
    %% Line 43
    fun (_cor1,_cor0) ->
	%% Line 44
	call 'hipe_icode_cfg':'succ'
	    (_cor1, _cor0)
'uses'/1 =
    %% Line 46
    fun (_cor0) ->
	%% Line 47
	call 'hipe_icode':'uses'
	    (_cor0)
'defines'/1 =
    %% Line 49
    fun (_cor0) ->
	%% Line 50
	call 'hipe_icode':'defines'
	    (_cor0)
'cfg_labels'/1 =
    %% Line 55
    fun (_cor0) ->
	%% Line 56
	call 'hipe_icode_cfg':'labels'
	    (_cor0)
'liveout_no_succ'/0 =
    %% Line 58
    fun () ->
	%% Line 59
	call 'ordsets':'new'
	    ()
'pp_liveness_info'/1 =
    %% Line 61
    fun (_cor0) ->
	%% Line 62
	apply 'print_live_list'/1
	    (_cor0)
'print_live_list'/1 =
    %% Line 64
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 65
	      call 'io':'format'
		  ([32|[110|[111|[110|[101|[126|[110]]]]]]], [])
	  %% Line 66
	  <[Last|[]]> when 'true' ->
	      do  %% Line 67
		  call 'io':'format'
		      ([32], [])
		  do  %% Line 68
		      apply 'print_var'/1
			  (Last)
		      %% Line 69
		      call 'io':'format'
			  ([126|[110]], [])
	  %% Line 70
	  <[Var|Rest]> when 'true' ->
	      do  %% Line 71
		  call 'io':'format'
		      ([32], [])
		  do  %% Line 72
		      apply 'print_var'/1
			  (Var)
		      do  %% Line 73
			  call 'io':'format'
			      ([44], [])
			  %% Line 74
			  apply 'print_live_list'/1
			      (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'print_live_list',1}}] )
	    -| ['compiler_generated'] )
	end
'pp_block'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	let <BB> =
	    %% Line 77
	    call 'hipe_icode_cfg':'bb'
		(_cor0, _cor1)
	in  let <Code> =
		%% Line 78
		call 'hipe_bb':'code'
		    (BB)
	    in  %% Line 79
		call 'hipe_icode_pp':'pp_block'
		    (Code)
'print_var'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',V,Kind,T}> when 'true' ->
	      do  %% Line 82
		  case Kind of
		    %% Line 83
		    <'var'> when 'true' ->
			call 'io':'format'
			    ([118|[126|[112]]], [V|[]])
		    %% Line 84
		    <'reg'> when 'true' ->
			call 'io':'format'
			    ([114|[126|[112]]], [V|[]])
		    %% Line 85
		    <'fvar'> when 'true' ->
			call 'io':'format'
			    ([102|[118|[126|[112]]]], [V|[]])
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
		  %% Line 87
		  case T of
		    %% Line 88
		    <[]> when 'true' ->
			'ok'
		    %% Line 89
		    <{_cor5,X,F}> when 'true' ->
			let <_cor2> =
			    apply F
				(X)
			in  call 'io':'format'
				([32|[40|[126|[115|[41]]]]], _cor2)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'print_var',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_liveness')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_liveness', _cor0)
end