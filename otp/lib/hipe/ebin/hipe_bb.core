module 'hipe_bb' ['butlast'/1,
		  'code'/1,
		  'code_update'/2,
		  'is_bb'/1,
		  'last'/1,
		  'mk_bb'/1,
		  'module_info'/0,
		  'module_info'/1]
    attributes [%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','bb'},[{'typed_record_field',{'record_field',28,{'atom',28,'code'},{'nil',28}},{'type',28,'list',[{'var',28,'_'}]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'bb',{'type',30,'record',[{'atom',30,'bb'}]},[]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'mk_bb',1},[{'type',48,'fun',[{'type',48,'product',[{'type',48,'list',[{'var',48,'_'}]}]}|[{'type',48,'bb',[]}]]}]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'is_bb',1},[{'type',53,'fun',[{'type',53,'product',[{'var',53,'_'}]}|[{'type',53,'boolean',[]}]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'code_update',2},[{'type',58,'fun',[{'type',58,'product',[{'type',58,'bb',[]}|[{'type',58,'list',[{'var',58,'_'}]}]]}|[{'type',58,'bb',[]}]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'code',1},[{'type',63,'fun',[{'type',63,'product',[{'type',63,'bb',[]}]}|[{'type',63,'list',[{'var',63,'_'}]}]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'last',1},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'bb',[]}]}|[{'var',68,'_'}]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'butlast',1},[{'type',73,'fun',[{'type',73,'product',[{'type',73,'bb',[]}]}|[{'type',73,'list',[{'var',73,'_'}]}]]}]}]]
'mk_bb'/1 =
    %% Line 50
    fun (_cor0) ->
	%% Line 51
	{'bb',_cor0}
'is_bb'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <{'bb',_cor2}> when 'true' ->
	      'true'
	  %% Line 56
	  <_cor3> when 'true' ->
	      'false'
	end
'code_update'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	%% Line 61
	case _cor1 of
	  <{'bb',_rec1}> when 'true' ->
	      {'bb',_cor0}
	  ( <_cor6> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','bb'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'code'/1 =
    %% Line 65
    fun (_cor0) ->
	case _cor0 of
	  <{'bb',Code}> when 'true' ->
	      %% Line 66
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'code',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <{'bb',Code}> when 'true' ->
	      %% Line 71
	      call 'lists':'last'
		  (Code)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'last',1}}] )
	    -| ['compiler_generated'] )
	end
'butlast'/1 =
    %% Line 75
    fun (_cor0) ->
	case _cor0 of
	  <{'bb',Code}> when 'true' ->
	      %% Line 76
	      apply 'butlast_1'/1
		  (Code)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'butlast',1}}] )
	    -| ['compiler_generated'] )
	end
'butlast_1'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <[X|Xs]> when 'true' ->
	      apply 'butlast_1'/2
		  (Xs, X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'butlast_1',1}}] )
	    -| ['compiler_generated'] )
	end
'butlast_1'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],Y> when 'true' ->
	      let <_cor2> =
		  apply 'butlast_1'/2
		      (Xs, X)
	      in  [Y|_cor2]
	  %% Line 81
	  <[],_cor5> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'butlast_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_bb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_bb', _cor0)
end