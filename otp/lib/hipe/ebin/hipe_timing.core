module 'hipe_timing' ['module_info'/0,
		      'module_info'/1,
		      'start'/2,
		      'start_optional_timer'/2,
		      'stop'/2,
		      'stop_optional_timer'/2]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'start',2},[{'type',39,'fun',[{'type',39,'product',[{'type',39,'string',[]}|[{'type',39,'atom',[]}]]}|[{'atom',39,'ok'}]]}]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'stop',2},[{'type',52,'fun',[{'type',52,'product',[{'type',52,'string',[]}|[{'type',52,'atom',[]}]]}|[{'atom',52,'ok'}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'start_optional_timer',2},[{'type',66,'fun',[{'type',66,'product',[{'type',66,'string',[]}|[{'type',66,'atom',[]}]]}|[{'atom',66,'ok'}]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'stop_optional_timer',2},[{'type',81,'fun',[{'type',81,'product',[{'type',81,'string',[]}|[{'type',81,'atom',[]}]]}|[{'atom',81,'ok'}]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'start_timer',0},[{'type',96,'fun',[{'type',96,'product',[]}|[{'type',96,'non_neg_integer',[]}]]}]}]]
'start'/2 =
    %% Line 41
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Text,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor3> =
		  %% Line 43
		  case call 'erlang':'get'
			   ('hipe_timers') of
		    %% Line 44
		    <'undefined'> when 'true' ->
			[]
		    %% Line 45
		    <Ts> when 'true' ->
			Ts
		  end
	      in  let <_cor9> =
		      %% Line 47
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor7) ->
				    case _cor7 of
				      <[_cor19|_cor6]> when 'true' ->
					  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor6)
					  in  ( [124|_cor8]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor7> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor7})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor3)
			-| ['list_comprehension'] )
		  in  let <Total> =
			  %% Line 48
			  apply 'start_timer'/0
			      ()
		      in  do  %% Line 49
			      call 'erlang':'put'
				  ('hipe_timers', [Total|_cor3])
			      let <_cor12> =
				  %% Line 50
				  call 'erlang':'++'
				      (_cor9, [62|[32|[126|[115|[126|[110]]]]]])
			      in  let <_cor13> =
				      %% Line 50
				      call 'erlang':'++'
					  ([91|[64|[126|[55|[119|[93]]]]]], _cor12)
				  in  let <_cor14> =
					  %% Line 50
					  [41|[62|[32|_cor13]]]
				      in  let <_cor15> =
					      %% Line 50
					      [51|[46|[49|[49|_cor14]]]]
					  in  let <_cor16> =
						  %% Line 50
						  call 'erlang':'++'
						      ([60|[72|[105|[80|[69|[32|[40|[118|[32]]]]]]]]], _cor15)
					      in  %% Line 50
						  call 'io':'format'
						      (_cor16, [Total|[Text|[]]])
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'start',2}}] )
	    -| ['compiler_generated'] )
	end
'stop'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Text,Mod>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 55
	      case call 'erlang':'statistics'
		       ('runtime') of
		<{Total,_X_Last}> when 'true' ->
		    %% Line 56
		    case call 'erlang':'get'
			     ('hipe_timers') of
		      %% Line 57
		      <[StartTime|Timers]> when 'true' ->
			  let <_cor7> =
			      %% Line 58
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor5) ->
					    case _cor5 of
					      <[_cor21|_cor4]> when 'true' ->
						  let <_cor6> =
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [124|_cor6]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor5> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor5})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Timers)
				-| ['list_comprehension'] )
			  in  do  %% Line 59
				  call 'erlang':'put'
				      ('hipe_timers', Timers)
				  let <_cor10> =
				      %% Line 60
				      call 'erlang':'++'
					  (_cor7, [60|[32|[126|[115|[58|[32|[126|[119|[126|[110]]]]]]]]]])
				  in  let <_cor11> =
					  %% Line 60
					  call 'erlang':'++'
					      ([91|[64|[126|[55|[119|[93]]]]]], _cor10)
				      in  let <_cor12> =
					      %% Line 60
					      [41|[62|[32|_cor11]]]
					  in  let <_cor13> =
						  %% Line 60
						  [51|[46|[49|[49|_cor12]]]]
					      in  let <_cor14> =
						      %% Line 60
						      call 'erlang':'++'
							  ([60|[72|[105|[80|[69|[32|[40|[118|[32]]]]]]]]], _cor13)
						  in  let <_cor9> =
							  %% Line 60
							  call 'erlang':'-'
							      (Total, StartTime)
						      in  %% Line 60
							  call 'io':'format'
							      (_cor14, [Total|[Text|[_cor9|[]]]])
		      %% Line 61
		      <_cor22> when 'true' ->
			  do  %% Line 62
			      call 'erlang':'put'
				  ('hipe_timers', [])
			      %% Line 63
			      call 'io':'format'
				  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[91|[64|[126|[55|[119|[93|[60|[32|[126|[115|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Total|[Text|[Total|[]]]])
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'stop',2}}] )
	    -| ['compiler_generated'] )
	end
'start_optional_timer'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	%% Line 69
	case call 'erlang':'get'
		 ('hipe_time') of
	  %% Line 70
	  <'true'> when 'true' ->
	      apply 'start'/2
		  (_cor1, _cor0)
	  %% Line 71
	  <'all'> when 'true' ->
	      apply 'start'/2
		  (_cor1, _cor0)
	  %% Line 72
	  <_cor6>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      apply 'start'/2
		  (_cor1, _cor0)
	  %% Line 73
	  <List>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 74
	      case call 'lists':'member'
		       (_cor0, List) of
		%% Line 75
		<'true'> when 'true' ->
		    apply 'start'/2
			(_cor1, _cor0)
		%% Line 76
		<'false'> when 'true' ->
		    'ok'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 78
	  <_cor7> when 'true' ->
	      'ok'
	end
'stop_optional_timer'/2 =
    %% Line 83
    fun (_cor1,_cor0) ->
	%% Line 84
	case call 'erlang':'get'
		 ('hipe_time') of
	  %% Line 85
	  <'true'> when 'true' ->
	      apply 'stop'/2
		  (_cor1, _cor0)
	  %% Line 86
	  <'all'> when 'true' ->
	      apply 'stop'/2
		  (_cor1, _cor0)
	  %% Line 87
	  <_cor6>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor0) ->
	      apply 'stop'/2
		  (_cor1, _cor0)
	  %% Line 88
	  <List>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 89
	      case call 'lists':'member'
		       (_cor0, List) of
		%% Line 90
		<'true'> when 'true' ->
		    apply 'stop'/2
			(_cor1, _cor0)
		%% Line 91
		<'false'> when 'true' ->
		    'ok'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 93
	  <_cor7> when 'true' ->
	      'ok'
	end
'start_timer'/0 =
    %% Line 98
    fun () ->
	%% Line 99
	case call 'erlang':'statistics'
		 ('runtime') of
	  <{Total,_X_Last}> when 'true' ->
	      %% Line 100
	      Total
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_timing')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_timing', _cor0)
end