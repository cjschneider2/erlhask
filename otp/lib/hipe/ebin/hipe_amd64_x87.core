module 'hipe_amd64_x87' ['map'/1,
			 'module_info'/0,
			 'module_info'/1]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'map'/1 =
    %% Line 43
    fun (_cor0) ->
	let <CFG0> =
	    %% Line 44
	    call 'hipe_x86_cfg':'init'
		(_cor0)
	in  let <Liveness> =
		%% Line 46
		call 'hipe_amd64_liveness':'analyse'
		    (CFG0)
	    in  let <StartLabel> =
		    %% Line 47
		    call 'hipe_x86_cfg':'start_label'
			(CFG0)
		in  let <_cor4> =
			%% Line 48
			call 'gb_trees':'empty'
			    ()
		    in  %% Line 48
			case apply 'do_blocks'/6
				 ([], [StartLabel|[]], CFG0, Liveness, [], _cor4) of
			  <{CFG1,_cor7}> when 'true' ->
			      %% Line 49
			      call 'hipe_x86_cfg':'linearise'
				  (CFG1)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
'do_blocks'/6 =
    %% Line 51
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Pred,[Lbl|Lbls],CFG,Liveness,Map,BlockMap> when 'true' ->
	      %% Line 52
	      case call 'gb_trees':'lookup'
		       (Lbl, BlockMap) of
		%% Line 53
		<'none'> when 'true' ->
		    let <Block> =
			%% Line 55
			call 'hipe_x86_cfg':'bb'
			    (CFG, Lbl)
		    in  let <Succ> =
			    %% Line 56
			    call 'hipe_x86_cfg':'succ'
				(CFG, Lbl)
			in  let <NewBlockMap> =
				%% Line 57
				call 'gb_trees':'insert'
				    (Lbl, Map, BlockMap)
			    in  let <_cor15> =
				    %% Line 58
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor12) ->
						  case _cor12 of
						    <[X|_cor10]> when 'true' ->
							%% Line 59
							( case apply 'is_fp'/1
								   (X) of
							    <'true'> when 'true' ->
								let <_cor13> =
								    apply 'lc$^0'/1
									(_cor10)
								in  ( [X|_cor13]
								      -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor10)
							      -| ['compiler_generated'] )
							    ( <_cor14> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor14})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor12> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor12})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor11> =
					      call 'hipe_amd64_liveness':'liveout'
						  (Liveness, Lbl)
					  in  apply 'lc$^0'/1
						  (_cor11)
				      -| ['list_comprehension'] )
				in  let <Code> =
					%% Line 60
					call 'hipe_bb':'code'
					    (Block)
				    in  let <ReverseCode> =
					    %% Line 61
					    call 'lists':'reverse'
						(Code)
					in  %% Line 62
					    case %% Line 63
						 apply 'do_block'/4
						     (ReverseCode, _cor15, Map, NewBlockMap) of
					      <{NewCode0,NewMap,NewBlockMap1,Dirty}> when 'true' ->
						  let <_cor22> =
						      %% Line 65
						      case Dirty of
							%% Line 66
							<'true'> when 'true' ->
							    let <NewBlock> =
								%% Line 67
								call 'hipe_bb':'code_update'
								    (Block, NewCode0)
							    in  %% Line 68
								call 'hipe_x86_cfg':'bb_add'
								    (CFG, Lbl, NewBlock)
							%% Line 69
							<_cor33> when 'true' ->
							    %% Line 70
							    CFG
						      end
						  in  %% Line 72
						      case %% Line 73
							   apply 'do_blocks'/6
							       (Lbl, Succ, _cor22, Liveness, NewMap, NewBlockMap1) of
							<{NewCFG3,NewBlockMap2}> when 'true' ->
							    %% Line 74
							    apply 'do_blocks'/6
								(Pred, Lbls, NewCFG3, Liveness, Map, NewBlockMap2)
							( <_cor24> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor24})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor19> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor19})
						-| ['compiler_generated'] )
					    end
		%% Line 75
		<{'value','fail'}> when 'true' ->
		    %% Line 77
		    apply 'do_blocks'/6
			(Pred, Lbls, CFG, Liveness, Map, BlockMap)
		%% Line 78
		<{'value',ExistingMap}> when 'true' ->
		    %% Line 82
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(ExistingMap,
				 Map) ->
			  %% Line 83
			  apply 'do_blocks'/6
			      (Pred, Lbls, CFG, Liveness, Map, BlockMap)
		      %% Line 84
		      <> when 'true' ->
			  let <NewCFG> =
			      %% Line 85
			      apply 'do_shuffle'/5
				  (Pred, Lbl, CFG, Map, ExistingMap)
			  in  %% Line 86
			      apply 'do_blocks'/6
				  (Pred, Lbls, NewCFG, Liveness, Map, BlockMap)
		    end
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 89
	  <_X_Pred,[],CFG,_X_Liveness,_X_Map,BlockMap> when 'true' ->
	      %% Line 90
	      {CFG,BlockMap}
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'do_blocks',6}}] )
	    -| ['compiler_generated'] )
	end
'do_block'/4 =
    %% Line 92
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 93
	apply 'do_block'/5
	    (_cor3, _cor2, _cor1, _cor0, 'false')
'do_block'/5 =
    %% Line 95
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],LiveOut,Map,BlockMap,Dirty> when 'true' ->
	      %% Line 96
	      case apply 'handle_insn'/1
		       (I) of
		%% Line 97
		<'false'> when 'true' ->
		    %% Line 98
		    case %% Line 99
			 apply 'do_block'/5
			     (Is, LiveOut, Map, BlockMap, Dirty) of
		      <{NewCode,NewMap,NewBlockMap,NewDirty}> when 'true' ->
			  let <_cor6> =
			      %% Line 100
			      call 'erlang':'++'
				  (NewCode, [I|[]])
			  in  %% Line 100
			      {_cor6,NewMap,NewBlockMap,NewDirty}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 101
		<'true'> when 'true' ->
		    let <_cor7> =
			%% Line 102
			call 'hipe_amd64_defuse':'insn_def'
			    (I)
		    in  let <Def> =
			    %% Line 102
			    call 'ordsets':'from_list'
				(_cor7)
			in  let <_cor9> =
				%% Line 103
				call 'hipe_amd64_defuse':'insn_use'
				    (I)
			    in  let <Use> =
				    %% Line 103
				    call 'ordsets':'from_list'
					(_cor9)
				in  let <_cor15> =
					%% Line 105
					( fun (_cor13) ->
					      apply 'is_fp'/1
						  (_cor13)
					  -| [{'id',{0,0,'-do_block/5-fun-0-'}}] )
				    in  let <_cor11> =
					    %% Line 106
					    call 'ordsets':'subtract'
						(LiveOut, Def)
					in  let <_cor12> =
						%% Line 106
						call 'ordsets':'union'
						    (_cor11, Use)
					    in  let <NewLiveOut> =
						    %% Line 105
						    call 'ordsets':'filter'
							(_cor15, _cor12)
						in  %% Line 107
						    case %% Line 108
							 apply 'do_block'/5
							     (Is, NewLiveOut, Map, BlockMap, Dirty) of
						      <{NewCode,NewMap,NewBlockMap,NewDirty}> when 'true' ->
							  %% Line 109
							  case %% Line 110
							       apply 'do_insn'/4
								   (I, LiveOut, NewMap, NewBlockMap) of
							    <{NewI,NewMap1,NewBlockMap1}> when 'true' ->
								let <_cor19> =
								    %% Line 112
								    case <> of
								      <>
									  when call 'erlang':'=:='
										(NewDirty,
										 'true') ->
									  'true'
								      %% Line 113
								      <>
									  when call 'erlang':'=:='
										(NewI,
										 [I|[]]) ->
									  'false'
								      %% Line 114
								      <> when 'true' ->
									  'true'
								    end
								in  let <_cor21> =
									%% Line 116
									call 'erlang':'++'
									    (NewCode, NewI)
								    in  %% Line 116
									{_cor21,NewMap1,NewBlockMap1,_cor19}
							    ( <_cor18> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor18})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor17> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor17})
							-| ['compiler_generated'] )
						    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 118
	  <[],LiveOut,Map,BlockMap,Dirty> when 'true' ->
	      let <_cor29> =
		  %% Line 119
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor26) ->
				case _cor26 of
				  <[X|_cor24]> when 'true' ->
				      ( case call 'lists':'member'
						 (X, LiveOut) of
					  <'false'> when 'true' ->
					      let <_cor27> =
						  apply 'lc$^0'/1
						      (_cor24)
					      in  ( [X|_cor27]
						    -| ['compiler_generated'] )
					  ( <'true'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor24)
					    -| ['compiler_generated'] )
					  ( <_cor_variable> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor26> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor26})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Map)
		    -| ['list_comprehension'] )
	      in  %% Line 119
		  case _cor29 of
		    %% Line 120
		    <[]> when 'true' ->
			%% Line 121
			{[],Map,BlockMap,Dirty}
		    %% Line 122
		    <Pop> when 'true' ->
			%% Line 123
			case apply 'pop_dead'/2
				 (Pop, Map) of
			  <{PopIns,NewMap}> when 'true' ->
			      %% Line 124
			      {PopIns,NewMap,BlockMap,'true'}
			  ( <_cor30> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor30})
			    -| ['compiler_generated'] )
			end
		  end
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'do_block',5}}] )
	    -| ['compiler_generated'] )
	end
'do_shuffle'/5 =
    %% Line 127
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Push> =
	    %% Line 129
	    call 'erlang':'--'
		(_cor0, _cor1)
	in  let <Pop> =
		%% Line 130
		call 'erlang':'--'
		    (_cor1, _cor0)
	    in  %% Line 131
		case apply 'pop_dead'/2
			 (Pop, _cor1) of
		  <{PopInsn,OldMap0}> when 'true' ->
		      let <_cor10> =
			  %% Line 133
			  case Push of
			    %% Line 134
			    <[]> when 'true' ->
				{[],OldMap0}
			    %% Line 135
			    <_cor36> when 'true' ->
				let <_cor8> =
				    call 'lists':'reverse'
					(Push)
				in  apply 'push_list'/2
					(_cor8, OldMap0)
			  end
		      in  %% Line 132
			  case _cor10 of
			    <{PushInsn,OldMap1}> when 'true' ->
				let <_cor19> =
				    %% Line 138
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(OldMap1,
						 _cor0) ->
					  let <_cor12> =
					      %% Line 140
					      call 'hipe_x86':'mk_jmp_label'
						  (_cor3)
					  in  let <_cor13> =
						  %% Line 140
						  call 'erlang':'++'
						      (PushInsn, [_cor12|[]])
					      in  %% Line 140
						  call 'erlang':'++'
						      (PopInsn, _cor13)
				      %% Line 141
				      <> when 'true' ->
					  let <Cycles> =
					      %% Line 143
					      apply 'find_swap_cycles'/2
						  (OldMap1, _cor0)
					  in  let <SwitchInsns> =
						  %% Line 144
						  apply 'do_switching'/1
						      (Cycles)
					      in  let <_cor16> =
						      %% Line 145
						      call 'hipe_x86':'mk_jmp_label'
							  (_cor3)
						  in  let <_cor17> =
							  %% Line 145
							  call 'erlang':'++'
							      (SwitchInsns, [_cor16|[]])
						      in  let <_cor18> =
							      %% Line 145
							      call 'erlang':'++'
								  (PushInsn, _cor17)
							  in  %% Line 145
							      call 'erlang':'++'
								  (PopInsn, _cor18)
				    end
				in  let <NewLabel> =
					%% Line 148
					call 'hipe_gensym':'get_next_label'
					    ('x86')
				    in  let <_cor22> =
					    %% Line 149
					    call 'hipe_bb':'mk_bb'
						(_cor19)
					in  let <NewCFG1> =
						%% Line 149
						call 'hipe_x86_cfg':'bb_add'
						    (_cor2, NewLabel, _cor22)
					    in  let <OldPred> =
						    %% Line 150
						    call 'hipe_x86_cfg':'bb'
							(NewCFG1, _cor4)
						in  let <PredCode> =
							%% Line 151
							call 'hipe_bb':'code'
							    (OldPred)
						    in  let <_cor26> =
							    %% Line 152
							    call 'lists':'last'
								(PredCode)
							in  let <NewLast> =
								%% Line 152
								apply 'redirect'/3
								    (_cor26, _cor3, NewLabel)
							    in  let <_cor28> =
								    %% Line 153
								    apply 'butlast'/1
									(PredCode)
								in  let <NewPredCode> =
									%% Line 153
									call 'erlang':'++'
									    (_cor28, [NewLast|[]])
								    in  let <NewPredBB> =
									    %% Line 154
									    call 'hipe_bb':'code_update'
										(OldPred, NewPredCode)
									in  %% Line 155
									    call 'hipe_x86_cfg':'bb_add'
										(NewCFG1, _cor4, NewPredBB)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'find_swap_cycles'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 158
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[X|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'get_pos'/3
					(X, _cor0, 1)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor9> =
		%% Line 159
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor10> =
		    %% Line 159
		    call 'lists':'seq'
			(1, _cor9)
		in  %% Line 159
		    apply 'find_swap_cycles'/4
			(_cor1, _cor7, _cor10, [])
'find_swap_cycles'/4 =
    %% Line 161
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 162
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor1,
		     []) ->
	      _cor0
	  %% Line 163
	  <> when 'true' ->
	      let <_cor4> =
		  %% Line 164
		  call 'erlang':'hd'
		      (_cor1)
	      in  let <Cycle> =
		      %% Line 164
		      apply 'find_cycle'/2
			  (_cor2, [_cor4|[]])
		  in  let <NewNotHandled> =
			  %% Line 165
			  call 'erlang':'--'
			      (_cor1, Cycle)
		      in  %% Line 166
			  case call 'lists':'member'
				   (1, Cycle) of
			    %% Line 167
			    <'true'> when 'true' ->
				let <NewCycle> =
				    %% Line 170
				    apply 'format_cycle'/1
					(Cycle)
				in  let <_cor8> =
					%% Line 171
					call 'erlang':'++'
					    (_cor0, [NewCycle|[]])
				    in  %% Line 171
					apply 'find_swap_cycles'/4
					    (_cor3, _cor2, NewNotHandled, _cor8)
			    %% Line 172
			    <_cor15> when 'true' ->
				let <NewCycle> =
				    %% Line 173
				    apply 'format_cycle'/1
					(Cycle)
				in  %% Line 174
				    apply 'find_swap_cycles'/4
					(_cor3, _cor2, NewNotHandled, [NewCycle|_cor0])
			  end
	end
'find_cycle'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 179
	    call 'lists':'last'
		(_cor0)
	in  let <To> =
		%% Line 179
		call 'lists':'nth'
		    (_cor2, _cor1)
	    in  %% Line 180
		case <> of
		  <>
		      when try
			    let <_cor4> =
				call 'erlang':'hd'
				    (_cor0)
			    in  call 'erlang':'=:='
				    (To, _cor4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      _cor0
		  %% Line 181
		  <> when 'true' ->
		      let <_cor5> =
			  call 'erlang':'++'
			      (_cor0, [To|[]])
		      in  apply 'find_cycle'/2
			      (_cor1, _cor5)
		end
'format_cycle'/1 =
    %% Line 184
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 189
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[X|_cor2]> when 'true' ->
				let <_cor4> =
				    call 'erlang':'-'
					(X, 1)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 190
	    case call 'lists':'member'
		     (0, _cor6) of
	      %% Line 191
	      <'true'> when 'true' ->
		  apply 'format_cycle'/2
		      (_cor6, [])
	      %% Line 192
	      <_cor11> when 'true' ->
		  let <_cor8> =
		      call 'erlang':'hd'
			  (_cor6)
		  in  call 'erlang':'++'
			  (_cor6, [_cor8|[]])
	    end
'format_cycle'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],NewCycle> when 'true' ->
	      %% Line 196
	      case H of
		%% Line 197
		<0> when 'true' ->
		    call 'erlang':'++'
			(T, NewCycle)
		%% Line 198
		<_cor6> when 'true' ->
		    let <_cor2> =
			call 'erlang':'++'
			    (NewCycle, [H|[]])
		    in  apply 'format_cycle'/2
			    (T, _cor2)
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'format_cycle',2}}] )
	    -| ['compiler_generated'] )
	end
'do_switching'/1 =
    %% Line 201
    fun (_cor0) ->
	%% Line 202
	apply 'do_switching'/2
	    (_cor0, [])
'do_switching'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cycles],Insns> when 'true' ->
	      let <_cor8> =
		  %% Line 205
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'mk_st'/1
					      (X)
				      in  let <_cor6> =
					      call 'hipe_x86':'mk_fp_unop'
						  ('fxch', _cor5)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (C)
		    -| ['list_comprehension'] )
	      in  let <NewInsns> =
		      %% Line 205
		      call 'erlang':'++'
			  (Insns, _cor8)
		  in  %% Line 206
		      apply 'do_switching'/2
			  (Cycles, NewInsns)
	  %% Line 207
	  <[],Insns> when 'true' ->
	      %% Line 208
	      Insns
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'do_switching',2}}] )
	    -| ['compiler_generated'] )
	end
'redirect'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	%% Line 211
	case _cor2 of
	  %% Line 212
	  <{'pseudo_call',_cor16,SDesc,ContLab,_cor17}> when 'true' ->
	      %% Line 213
	      case SDesc of
		<{'x86_sdesc',ExnLab,_cor18,_cor19,_cor20}> when 'true' ->
		    %% Line 214
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(ContLab,
				 _cor1) ->
			  %% Line 215
			  call 'erlang':'setelement'
			      (4, _cor2, _cor0)
		      %% Line 216
		      <>
			  when call 'erlang':'=:='
				(ExnLab,
				 _cor1) ->
			  let <_cor8> =
			      %% Line 217
			      call 'erlang':'setelement'
				  (2, SDesc, _cor0)
			  in  %% Line 217
			      call 'erlang':'setelement'
				  (3, _cor2, _cor8)
		      ( <> when 'true' ->
			    primop 'match_fail'
				('if_clause')
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 219
	  <_cor36> when 'true' ->
	      %% Line 220
	      call 'hipe_x86_cfg':'redirect_jmp'
		  (_cor2, _cor1, _cor0)
	end
'do_insn'/4 =
    %% Line 223
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 224
	case _cor3 of
	  %% Line 225
	  <{'pseudo_call',Fun,_cor25,ContLab,_cor26}> when 'true' ->
	      %% Line 226
	      case Fun of
		%% Line 228
		<{_cor27,'handle_fp_exception'}> when 'true' ->
		    let <_cor5> =
			%% Line 230
			case call 'gb_trees':'lookup'
				 (ContLab, _cor0) of
			  %% Line 231
			  <{'value','fail'}> when 'true' ->
			      _cor0
			  %% Line 233
			  <{'value',_cor28}> when 'true' ->
			      %% Line 234
			      call 'gb_trees':'update'
				  (ContLab, 'fail', _cor0)
			  %% Line 235
			  <'none'> when 'true' ->
			      %% Line 236
			      call 'gb_trees':'insert'
				  (ContLab, 'fail', _cor0)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 238
			{[_cor3|[]],[],_cor5}
		%% Line 239
		<_cor29> when 'true' ->
		    let <_cor7> =
			%% Line 240
			apply 'pop_all'/1
			    (_cor1)
		    in  let <_cor8> =
			    %% Line 240
			    call 'erlang':'++'
				(_cor7, [_cor3|[]])
			in  %% Line 240
			    {_cor8,[],_cor0}
	      end
	  %% Line 242
	  <{'fp_unop','fwait',_cor30}> when 'true' ->
	      let <Store> =
		  %% Line 243
		  apply 'pseudo_pop'/1
		      (_cor1)
	      in  let <_cor11> =
		      %% Line 244
		      call 'erlang':'++'
			  (Store, [_cor3|[]])
		  in  %% Line 244
		      {_cor11,_cor1,_cor0}
	  %% Line 245
	  <{'fp_unop',_cor31,_cor32}> when 'true' ->
	      %% Line 246
	      case apply 'do_fp_unop'/3
		       (_cor3, _cor2, _cor1) of
		<{NewI,NewMap}> when 'true' ->
		    %% Line 247
		    {NewI,NewMap,_cor0}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 248
	  <{'fp_binop',_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 249
	      case apply 'do_fp_binop'/3
		       (_cor3, _cor2, _cor1) of
		<{NewI,NewMap}> when 'true' ->
		    %% Line 250
		    {NewI,NewMap,_cor0}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 251
	  <{'fmove',Src,Dst}> when 'true' ->
	      %% Line 252
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Src,
			   Dst) ->
		    %% Line 255
		    case apply 'is_liveOut'/2
			     (Src, _cor2) of
		      %% Line 256
		      <'true'> when 'true' ->
			  %% Line 257
			  {[],_cor1,_cor0}
		      %% Line 258
		      <'false'> when 'true' ->
			  %% Line 259
			  case apply 'switch_first'/2
				   (Dst, _cor1) of
			    <{SwitchInsn,NewMap0}> when 'true' ->
				let <NewMap> =
				    %% Line 260
				    apply 'pop'/1
					(NewMap0)
				in  let <_cor16> =
					%% Line 261
					apply 'pop_insn'/0
					    ()
				    in  let <_cor17> =
					    %% Line 261
					    call 'erlang':'++'
						(SwitchInsn, _cor16)
					in  %% Line 261
					    {_cor17,NewMap,_cor0}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor18})
			-| ['compiler_generated'] )
		    end
		%% Line 263
		<> when 'true' ->
		    %% Line 264
		    case apply 'do_fmove'/4
			     (Src, Dst, _cor2, _cor1) of
		      <{NewI,NewMap}> when 'true' ->
			  %% Line 265
			  {NewI,NewMap,_cor0}
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor19})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 267
	  <_cor36> when 'true' ->
	      %% Line 268
	      {[_cor3|[]],_cor1,_cor0}
	end
'do_fmove'/4 =
    %% Line 271
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Src,Dst = {'x86_mem',_cor39,_cor40,_cor41},LiveOut,Map> when 'true' ->
	      %% Line 273
	      case apply 'switch_first'/2
		       (Src, Map) of
		<{SwitchInsn,NewMap0}> when 'true' ->
		    %% Line 274
		    case apply 'is_liveOut'/2
			     (Src, LiveOut) of
		      %% Line 275
		      <'true'> when 'true' ->
			  let <_cor5> =
			      %% Line 276
			      call 'hipe_x86':'mk_fp_unop'
				  ('fst', Dst)
			  in  let <_cor6> =
				  %% Line 276
				  call 'erlang':'++'
				      (SwitchInsn, [_cor5|[]])
			      in  %% Line 276
				  {_cor6,NewMap0}
		      %% Line 277
		      <_cor42> when 'true' ->
			  let <NewMap1> =
			      %% Line 278
			      apply 'pop'/1
				  (NewMap0)
			  in  let <_cor8> =
				  %% Line 279
				  call 'hipe_x86':'mk_fp_unop'
				      ('fstp', Dst)
			      in  let <_cor9> =
				      %% Line 279
				      call 'erlang':'++'
					  (SwitchInsn, [_cor8|[]])
				  in  %% Line 279
				      {_cor9,NewMap1}
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 281
	  <Src = {'x86_mem',_cor43,_cor44,_cor45},Dst,_X_LiveOut,Map> when 'true' ->
	      do  %% Line 283
		  case apply 'in_map'/2
			   (Dst, Map) of
		    %% Line 284
		    <'true'> when 'true' ->
			do  call 'io':'format'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'loadingExistingFpVariable',{Src,Dst}}|['hipe_amd64_x87'|[284]]])
			    call 'erlang':'error'
				({'hipe_amd64_x87',284,{'loadingExistingFpVariable',{Src,Dst}}})
		    %% Line 285
		    <_cor46> when 'true' ->
			'ok'
		  end
		  %% Line 287
		  case apply 'push'/2
			   (Src, Map) of
		    <{PushOp,[_cor47|NewMap0]}> when 'true' ->
			let <NewMap> =
			    %% Line 289
			    [Dst|NewMap0]
			in  %% Line 290
			    {PushOp,NewMap}
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 291
	  <Src,Dst,LiveOut,Map> when 'true' ->
	      do  %% Line 294
		  case apply 'in_map'/2
			   (Dst, Map) of
		    %% Line 295
		    <'true'> when 'true' ->
			do  call 'io':'format'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'copyingToExistingFpVariable',{Src,Dst}}|['hipe_amd64_x87'|[295]]])
			    call 'erlang':'error'
				({'hipe_amd64_x87',295,{'copyingToExistingFpVariable',{Src,Dst}}})
		    %% Line 296
		    <_cor48> when 'true' ->
			'ok'
		  end
		  let <_cor22> =
		      %% Line 299
		      case Src of
			%% Line 300
			<{'x86_temp',_cor49,Type,_cor50}> when 'true' ->
			    call 'erlang':'=/='
				(Type, 'double')
			%% Line 301
			<_cor51> when 'true' ->
			    'false'
		      end
		  in  %% Line 303
		      case _cor22 of
			%% Line 304
			<'true'> when 'true' ->
			    %% Line 305
			    apply 'do_conv'/3
				(Src, Dst, Map)
			%% Line 306
			<_cor52> when 'true' ->
			    let <_cor25> =
				%% Line 308
				apply 'is_liveOut'/2
				    (Src, LiveOut)
			    in  let <_cor24> =
				    %% Line 308
				    apply 'in_map'/2
					(Src, Map)
				in  %% Line 308
				    case <_cor25,_cor24> of
				      %% Line 309
				      <'false','true'> when 'true' ->
					  let <_cor28> =
					      %% Line 311
					      ( fun (_cor26) ->
						    call 'erlang':'=/='
							(_cor26, Src)
						-| [{'id',{0,0,'-do_fmove/4-fun-0-'}}] )
					  in  %% Line 311
					      case call 'lists':'splitwith'
						       (_cor28, Map) of
						<{Head,[_cor53|T]}> when 'true' ->
						    let <_cor30> =
							%% Line 312
							call 'erlang':'++'
							    (Head, [Dst|T])
						    in  %% Line 312
							{[],_cor30}
						( <_cor29> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor29})
						  -| ['compiler_generated'] )
					      end
				      %% Line 313
				      <_fol101,_fol102> when 'true' ->
					  %% Line 314
					  case apply 'push'/2
						   (Src, Map) of
					    <{PushOp,[_cor55|NewMap0]}> when 'true' ->
						let <NewMap> =
						    %% Line 316
						    [Dst|NewMap0]
						in  %% Line 317
						    {PushOp,NewMap}
					    ( <_cor31> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor31})
					      -| ['compiler_generated'] )
					  end
				    end
		      end
	end
'do_conv'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Src = {'x86_temp',Reg,_cor20,_cor21},Dst,Map> when 'true' ->
	      let <Move,NewSrc> =
		  %% Line 325
		  case call 'hipe_amd64_registers':'is_precoloured'
			   (Reg) of
		    %% Line 326
		    <'true'> when 'true' ->
			let <Temp> =
			    %% Line 327
			    call 'hipe_x86':'mk_new_temp'
				('untagged')
			in  let <_cor4> =
				%% Line 328
				call 'hipe_x86':'mk_move'
				    (Src, Temp)
			    in  %% Line 328
				<[_cor4|[]],Temp>
		    %% Line 329
		    <_cor22> when 'true' ->
			%% Line 330
			<[],Src>
		  end
	      in  %% Line 332
		  case apply 'push'/2
			   (NewSrc, Map) of
		    <{PushOp,[_cor23|NewMap0]}> when 'true' ->
			let <NewMap> =
			    %% Line 334
			    [Dst|NewMap0]
			in  %% Line 335
			    case call 'erlang':'length'
				     (PushOp) of
			      %% Line 336
			      <1> when 'true' ->
				  let <_cor10> =
				      %% Line 337
				      call 'hipe_x86':'mk_fp_unop'
					  ('fild', NewSrc)
				  in  let <_cor11> =
					  %% Line 337
					  call 'erlang':'++'
					      (Move, [_cor10|[]])
				      in  %% Line 337
					  {_cor11,NewMap}
			      %% Line 338
			      <_cor24> when 'true' ->
				  let <Head> =
				      %% Line 339
				      apply 'butlast'/1
					  (PushOp)
				  in  let <_cor13> =
					  %% Line 340
					  call 'hipe_x86':'mk_fp_unop'
					      ('fild', NewSrc)
				      in  let <_cor14> =
					      %% Line 340
					      call 'erlang':'++'
						  (Head, [_cor13|[]])
					  in  let <_cor15> =
						  %% Line 340
						  call 'erlang':'++'
						      (Move, _cor14)
					      in  %% Line 340
						  {_cor15,NewMap}
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'do_conv',3}}] )
	    -| ['compiler_generated'] )
	end
'do_fp_unop'/3 =
    %% Line 343
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'fp_unop','fchs',Arg},Liveout,Map> when 'true' ->
	      %% Line 346
	      case apply 'is_liveOut'/2
		       (Arg, Liveout) of
		%% Line 347
		<'true'> when 'true' ->
		    %% Line 348
		    case apply 'switch_first'/2
			     (Arg, Map) of
		      <{SwitchIns,NewMap}> when 'true' ->
			  let <_cor6> =
			      %% Line 349
			      call 'erlang':'setelement'
				  (3, I, [])
			  in  let <_cor7> =
				  %% Line 349
				  call 'erlang':'++'
				      (SwitchIns, [_cor6|[]])
			      in  %% Line 349
				  {_cor7,NewMap}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 350
		<'false'> when 'true' ->
		    %% Line 353
		    case apply 'in_map'/2
			     (Arg, Map) of
		      %% Line 354
		      <'true'> when 'true' ->
			  %% Line 355
			  case apply 'switch_first'/2
				   (Arg, Map) of
			    <{SwitchInsn,NewMap0}> when 'true' ->
				let <NewMap> =
				    %% Line 356
				    apply 'pop'/1
					(NewMap0)
				in  let <_cor10> =
					%% Line 357
					apply 'pop_insn'/0
					    ()
				    in  let <_cor11> =
					    %% Line 357
					    call 'erlang':'++'
						(SwitchInsn, _cor10)
					in  %% Line 357
					    {_cor11,NewMap}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 358
		      <_cor20> when 'true' ->
			  %% Line 359
			  {[],Map}
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_fp_unop',3}}] )
	    -| ['compiler_generated'] )
	end
'do_fp_binop'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'fp_binop',Op,Src,Dst},LiveOut,Map> when 'true' ->
	      let <_cor4> =
		  %% Line 364
		  apply 'is_liveOut'/2
		      (Src, LiveOut)
	      in  let <_cor3> =
		      %% Line 364
		      apply 'is_liveOut'/2
			  (Dst, LiveOut)
		  in  %% Line 364
		      case <_cor4,_cor3> of
			%% Line 365
			<'true','true'> when 'true' ->
			    %% Line 366
			    apply 'keep_both'/4
				(Op, Src, Dst, Map)
			%% Line 367
			<'true','false'> when 'true' ->
			    %% Line 368
			    apply 'keep_src'/4
				(Op, Src, Dst, Map)
			%% Line 369
			<'false','true'> when 'true' ->
			    %% Line 370
			    apply 'keep_dst'/4
				(Op, Src, Dst, Map)
			%% Line 371
			<'false','false'> when 'true' ->
			    %% Line 373
			    apply 'keep_none'/4
				(Op, Src, Dst, Map)
			( <_fol110,_fol111> when 'true' ->
			      let <_cor5> = {_fol110,_fol111}
			      in  primop 'match_fail'
				      ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'do_fp_binop',3}}] )
	    -| ['compiler_generated'] )
	end
'keep_both'/4 =
    %% Line 376
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 378
	case apply 'switch_first'/2
		 (_cor1, _cor0) of
	  <{SwitchInsn,NewMap}> when 'true' ->
	      let <NewSrc> =
		  %% Line 379
		  apply 'get_new_opnd'/2
		      (_cor2, NewMap)
	      in  let <_cor6> =
		      %% Line 380
		      apply 'mk_st'/1
			  (0)
		  in  let <Insn> =
			  %% Line 380
			  apply 'format_fp_binop'/3
			      (_cor3, NewSrc, _cor6)
		      in  let <_cor8> =
			      %% Line 381
			      call 'erlang':'++'
				  (SwitchInsn, Insn)
			  in  %% Line 381
			      {_cor8,NewMap}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'keep_src'/4 =
    %% Line 383
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 385
	case apply 'switch_first'/2
		 (_cor1, _cor0) of
	  <{SwitchInsn,NewMap0}> when 'true' ->
	      let <NewSrc> =
		  %% Line 386
		  apply 'get_new_opnd'/2
		      (_cor2, NewMap0)
	      in  let <NewMap> =
		      %% Line 387
		      apply 'pop'/1
			  (NewMap0)
		  in  let <_cor7> =
			  %% Line 388
			  apply 'mk_st'/1
			      (0)
		      in  let <Insn> =
			      %% Line 388
			      apply 'format_fp_binop'/3
				  (_cor3, NewSrc, _cor7)
			  in  let <_cor9> =
				  %% Line 389
				  apply 'pop_insn'/0
				      ()
			      in  let <_cor10> =
				      %% Line 389
				      call 'erlang':'++'
					  (Insn, _cor9)
				  in  let <_cor11> =
					  %% Line 389
					  call 'erlang':'++'
					      (SwitchInsn, _cor10)
				      in  %% Line 389
					  {_cor11,NewMap}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'keep_dst'/4 =
    %% Line 391
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <DstInMap> =
	    %% Line 394
	    apply 'in_map'/2
		(_cor1, _cor0)
	in  %% Line 396
	    case apply 'in_map'/2
		     (_cor2, _cor0) of
	      %% Line 397
	      <'true'> when 'true' ->
		  %% Line 398
		  case DstInMap of
		    %% Line 399
		    <'true'> when 'true' ->
			let <SwitchInsn,Insn,NewMap> =
			    %% Line 403
			    case <> of
			      <>
				  when try
					let <_cor6> =
					    call 'erlang':'hd'
						(_cor0)
					in  call 'erlang':'=:='
						(_cor6, _cor1)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor7> =
				      %% Line 404
				      apply 'reverse_op'/1
					  (_cor3)
				  in  let <NewOp> =
					  %% Line 404
					  apply 'mk_op_pop'/1
					      (_cor7)
				      in  let <NewDst> =
					      %% Line 405
					      apply 'get_new_opnd'/2
						  (_cor2, _cor0)
					  in  let <_cor12> =
						  %% Line 406
						  ( fun (_cor10) ->
							%% Line 407
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (_cor10,
								     _cor2) ->
							      _cor1
							  <> when 'true' ->
							      _cor10
							end
						    -| [{'id',{0,0,'-keep_dst/4-fun-0-'}}] )
					      in  let <TmpMap> =
						      %% Line 406
						      call 'lists':'map'
							  (_cor12, _cor0)
						  in  let <_cor15> =
							  %% Line 409
							  apply 'mk_st'/1
							      (0)
						      in  let <_cor16> =
							      %% Line 409
							      apply 'format_fp_binop'/3
								  (NewOp, _cor15, NewDst)
							  in  let <_cor14> =
								  %% Line 409
								  apply 'pop'/1
								      (TmpMap)
							      in  %% Line 409
								  <[],_cor16,_cor14>
			      %% Line 410
			      <> when 'true' ->
				  %% Line 411
				  case apply 'switch_first'/2
					   (_cor2, _cor0) of
				    <{SwitchInsn1,NewMap0}> when 'true' ->
					let <NewDst> =
					    %% Line 412
					    apply 'get_new_opnd'/2
						(_cor1, NewMap0)
					in  let <NewOp> =
						%% Line 413
						apply 'mk_op_pop'/1
						    (_cor3)
					    in  let <_cor21> =
						    %% Line 414
						    apply 'mk_st'/1
							(0)
						in  let <_cor22> =
							%% Line 414
							apply 'format_fp_binop'/3
							    (NewOp, _cor21, NewDst)
						    in  let <_cor20> =
							    %% Line 414
							    apply 'pop'/1
								(NewMap0)
							in  %% Line 414
							    <SwitchInsn1,_cor22,_cor20>
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor17})
				      -| ['compiler_generated'] )
				  end
			    end
			in  let <_cor25> =
				%% Line 416
				call 'erlang':'++'
				    (SwitchInsn, Insn)
			    in  %% Line 416
				{_cor25,NewMap}
		    %% Line 417
		    <_cor41> when 'true' ->
			%% Line 420
			case apply 'switch_first'/2
				 (_cor2, _cor0) of
			  <{SwitchInsn,NewMap0}> when 'true' ->
			      let <NewOp> =
				  %% Line 421
				  apply 'reverse_op'/1
				      (_cor3)
			      in  let <_cor28> =
				      %% Line 422
				      call 'erlang':'tl'
					  (NewMap0)
				  in  let <NewMap> =
					  %% Line 422
					  [_cor1|_cor28]
				      in  let <_cor30> =
					      %% Line 423
					      apply 'mk_st'/1
						  (0)
					  in  let <Insn> =
						  %% Line 423
						  apply 'format_fp_binop'/3
						      (NewOp, _cor1, _cor30)
					      in  let <_cor32> =
						      %% Line 424
						      call 'erlang':'++'
							  (SwitchInsn, Insn)
						  in  %% Line 424
						      {_cor32,NewMap}
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor26})
			    -| ['compiler_generated'] )
			end
		  end
	      %% Line 426
	      <_cor42> when 'true' ->
		  %% Line 428
		  case apply 'switch_first'/2
			   (_cor1, _cor0) of
		    <{SwitchInsn,NewMap}> when 'true' ->
			let <_cor35> =
			    %% Line 429
			    call 'erlang':'++'
				(SwitchInsn, [{'fp_unop',_cor3,_cor2}|[]])
			in  %% Line 429
			    {_cor35,NewMap}
		    ( <_cor34> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor34})
		      -| ['compiler_generated'] )
		  end
	    end
'keep_none'/4 =
    %% Line 432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 435
	    case apply 'in_map'/2
		     (_cor1, _cor0) of
	      %% Line 436
	      <'true'> when 'true' ->
		  {[],_cor0}
	      %% Line 437
	      <_cor27> when 'true' ->
		  apply 'push'/2
		      (_cor1, _cor0)
	    end
	in  %% Line 434
	    case _cor5 of
	      <{PushInsn,NewMap0}> when 'true' ->
		  %% Line 439
		  case apply 'in_map'/2
			   (_cor2, NewMap0) of
		    %% Line 440
		    <'true'> when 'true' ->
			%% Line 442
			case apply 'switch_first'/2
				 (_cor2, NewMap0) of
			  <{SwitchInsn1,NewMap1}> when 'true' ->
			      let <NewOp> =
				  %% Line 443
				  apply 'mk_op_pop'/1
				      (_cor3)
			      in  let <NewDst> =
				      %% Line 444
				      apply 'get_new_opnd'/2
					  (_cor1, NewMap1)
				  in  let <NewMap2> =
					  %% Line 445
					  apply 'pop'/1
					      (NewMap1)
				      in  %% Line 447
					  case apply 'pop_member'/2
						   (_cor1, NewMap2) of
					    <{PopInsn,NewMap}> when 'true' ->
						let <_cor12> =
						    %% Line 448
						    apply 'mk_st'/1
							(0)
						in  let <Insn> =
							%% Line 448
							apply 'format_fp_binop'/3
							    (NewOp, _cor12, NewDst)
						    in  let <_cor14> =
							    %% Line 449
							    call 'erlang':'++'
								(Insn, PopInsn)
							in  let <_cor15> =
								%% Line 449
								call 'erlang':'++'
								    (SwitchInsn1, _cor14)
							    in  let <_cor16> =
								    %% Line 449
								    call 'erlang':'++'
									(PushInsn, _cor15)
								in  %% Line 449
								    {_cor16,NewMap}
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 450
		    <_cor28> when 'true' ->
			%% Line 452
			case apply 'switch_first'/2
				 (_cor1, NewMap0) of
			  <{SwitchInsn,NewMap1}> when 'true' ->
			      let <NewMap> =
				  %% Line 453
				  apply 'pop'/1
				      (NewMap1)
			      in  let <_cor19> =
				      %% Line 454
				      apply 'pop_insn'/0
					  ()
				  in  let <_cor20> =
					  %% Line 454
					  [{'fp_unop',_cor3,_cor2}|_cor19]
				      in  let <_cor21> =
					      %% Line 454
					      call 'erlang':'++'
						  (SwitchInsn, _cor20)
					  in  %% Line 454
					      {_cor21,NewMap}
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor17})
			    -| ['compiler_generated'] )
			end
		  end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'format_fp_binop'/3 =
    %% Line 457
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Op,Src = {'x86_temp',_cor9,_cor10,_cor11},Dst = {'x86_fpreg',Reg,_cor12}> when 'true' ->
	      %% Line 459
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Reg,
			   0) ->
		    let <_cor3> =
			call 'hipe_x86':'mk_fp_unop'
			    (Op, Src)
		    in  [_cor3|[]]
		%% Line 460
		<> when 'true' ->
		    let <_cor4> =
			call 'hipe_x86':'mk_fp_binop'
			    (Op, Src, Dst)
		    in  [_cor4|[]]
	      end
	  %% Line 462
	  <Op,Src,Dst> when 'true' ->
	      let <_cor5> =
		  %% Line 463
		  call 'hipe_x86':'mk_fp_binop'
		      (Op, Src, Dst)
	      in  %% Line 463
		  [_cor5|[]]
	end
'in_map'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	%% Line 466
	call 'lists':'member'
	    (_cor1, _cor0)
'push_list'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	%% Line 469
	apply 'push_list'/3
	    (_cor1, _cor0, [])
'push_list'/3 =
    %% Line 470
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Map,Acc> when 'true' ->
	      %% Line 471
	      case apply 'push'/2
		       (H, Map) of
		<{Insn,NewMap}> when 'true' ->
		    let <_cor4> =
			%% Line 472
			call 'erlang':'++'
			    (Acc, Insn)
		    in  %% Line 472
			apply 'push_list'/3
			    (T, NewMap, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 473
	  <[],Map,Acc> when 'true' ->
	      %% Line 474
	      {Acc,Map}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'push_list',3}}] )
	    -| ['compiler_generated'] )
	end
'push'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 478
	    case <> of
	      <>
		  when try
			let <_cor2> =
			    call 'erlang':'length'
				(_cor0)
			in  call 'erlang':'>'
				(_cor2, 7)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  apply 'pop_a_temp'/1
		      (_cor0)
	      %% Line 479
	      <> when 'true' ->
		  {[],_cor0}
	    end
	in  %% Line 477
	    case _cor3 of
	      <{PopInsn,Map}> when 'true' ->
		  let <NewX> =
		      %% Line 481
		      apply 'get_new_opnd'/2
			  (_cor1, Map)
		  in  let <NewMap> =
			  %% Line 482
			  [_cor1|Map]
		      in  let <_cor7> =
			      %% Line 483
			      call 'hipe_x86':'mk_fp_unop'
				  ('fld', NewX)
			  in  let <PushOp> =
				  %% Line 483
				  [_cor7|[]]
			      in  let <_cor9> =
				      %% Line 484
				      call 'erlang':'++'
					  (PopInsn, PushOp)
				  in  %% Line 484
				      {_cor9,NewMap}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'pop'/1 =
    %% Line 486
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|Map]> when 'true' ->
	      %% Line 487
	      Map
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pop',1}}] )
	    -| ['compiler_generated'] )
	end
'pop_insn'/0 =
    %% Line 489
    fun () ->
	let <_cor0> =
	    %% Line 490
	    apply 'mk_st'/1
		(0)
	in  let <_cor1> =
		%% Line 490
		call 'hipe_x86':'mk_fp_unop'
		    ('fstp', _cor0)
	    in  %% Line 490
		[_cor1|[]]
'pop_dead'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 493
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[X|_cor3]> when 'true' ->
				( case call 'lists':'member'
					   (X, _cor1) of
				    <'true'> when 'true' ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [X|_cor5]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 494
	    apply 'pop_dead'/3
		(_cor7, _cor0, [])
'pop_dead'/3 =
    %% Line 496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[D|Dead],Map,Code> when 'true' ->
	      %% Line 497
	      case apply 'switch_first'/2
		       (D, Map) of
		<{I,NewMap0}> when 'true' ->
		    let <NewMap> =
			%% Line 498
			apply 'pop'/1
			    (NewMap0)
		    in  let <_cor7> =
			    %% Line 499
			    case D of
			      %% Line 500
			      <{'x86_temp',_cor14,_cor15,_cor16}> when 'true' ->
				  let <_cor5> =
				      call 'hipe_x86':'mk_fp_unop'
					  ('fstp', D)
				  in  [_cor5|[]]
			      %% Line 501
			      <_cor17> when 'true' ->
				  apply 'pop_insn'/0
				      ()
			    end
			in  let <_cor9> =
				%% Line 503
				call 'erlang':'++'
				    (I, _cor7)
			    in  let <_cor10> =
				    %% Line 503
				    call 'erlang':'++'
					(Code, _cor9)
				in  %% Line 503
				    apply 'pop_dead'/3
					(Dead, NewMap, _cor10)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 504
	  <[],Map,Code> when 'true' ->
	      %% Line 505
	      {Code,Map}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'pop_dead',3}}] )
	    -| ['compiler_generated'] )
	end
'pop_all'/1 =
    %% Line 507
    fun (_cor0) ->
	%% Line 508
	case apply 'pop_dead'/2
		 (_cor0, _cor0) of
	  <{Code,_cor3}> when 'true' ->
	      %% Line 509
	      Code
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'pop_member'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 512
	    ( fun (_cor2) ->
		  call 'erlang':'=/='
		      (_cor2, _cor1)
	      -| [{'id',{0,0,'-pop_member/2-fun-0-'}}] )
	in  %% Line 512
	    case call 'lists':'splitwith'
		     (_cor4, _cor0) of
	      <{Head,[_cor12|T]}> when 'true' ->
		  let <_cor7> =
		      %% Line 513
		      apply 'get_pos'/3
			  (_cor1, _cor0, 0)
		  in  let <_cor8> =
			  %% Line 513
			  apply 'mk_st'/1
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 513
			      call 'hipe_x86':'mk_fp_unop'
				  ('fstp', _cor8)
			  in  let <_cor6> =
				  %% Line 514
				  call 'erlang':'++'
				      (Head, T)
			      in  %% Line 513
				  {[_cor9|[]],_cor6}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'pop_a_temp'/1 =
    %% Line 516
    fun (_cor0) ->
	let <Temp> =
	    %% Line 517
	    apply 'find_a_temp'/1
		(_cor0)
	in  %% Line 518
	    case apply 'switch_first'/2
		     (Temp, _cor0) of
	      <{SwitchInsn,NewMap0}> when 'true' ->
		  let <NewMap> =
		      %% Line 519
		      apply 'pop'/1
			  (NewMap0)
		  in  let <_cor4> =
			  %% Line 520
			  call 'hipe_x86':'mk_fp_unop'
			      ('fstp', Temp)
		      in  let <_cor5> =
			      %% Line 520
			      call 'erlang':'++'
				  (SwitchInsn, [_cor4|[]])
			  in  %% Line 520
			      {_cor5,NewMap}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'find_a_temp'/1 =
    %% Line 522
    fun (_cor0) ->
	case _cor0 of
	  <[H = {'x86_temp',_cor5,_cor6,_cor7}|_cor8]> when 'true' ->
	      %% Line 523
	      H
	  %% Line 524
	  <[_cor9|T]> when 'true' ->
	      %% Line 525
	      apply 'find_a_temp'/1
		  (T)
	  %% Line 526
	  <[]> when 'true' ->
	      do  %% Line 527
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'noTempOnFPStack',{}}|['hipe_amd64_x87'|[527]]])
		  %% Line 527
		  call 'erlang':'error'
		      ({'hipe_amd64_x87',527,{'noTempOnFPStack',{}}})
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'find_a_temp',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_first'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,Map = [H|_cor13]> when 'true' ->
	      let <Pos> =
		  %% Line 530
		  apply 'get_pos'/3
		      (X, Map, 0)
	      in  %% Line 531
		  case Pos of
		    %% Line 532
		    <0> when 'true' ->
			%% Line 533
			{[],Map}
		    %% Line 534
		    <'notFound'> when 'true' ->
			%% Line 535
			apply 'push'/2
			    (X, Map)
		    %% Line 536
		    <_cor14> when 'true' ->
			let <_cor5> =
			    %% Line 537
			    ( fun (_cor3) ->
				  call 'erlang':'=/='
				      (_cor3, X)
			      -| [{'id',{0,0,'-switch_first/2-fun-0-'}}] )
			in  %% Line 537
			    case call 'lists':'splitwith'
				     (_cor5, Map) of
			      <{[_cor15|Head],[_cor16|Tail]}> when 'true' ->
				  let <NewMap> =
				      %% Line 538
				      [X|call 'erlang':'++'
					     (Head, [H|Tail])]
				  in  let <_cor8> =
					  %% Line 539
					  apply 'mk_st'/1
					      (Pos)
				      in  let <Ins> =
					      %% Line 539
					      call 'hipe_x86':'mk_fp_unop'
						  ('fxch', _cor8)
					  in  %% Line 540
					      {[Ins|[]],NewMap}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		  end
	  %% Line 542
	  <X,Map> when 'true' ->
	      %% Line 543
	      apply 'push'/2
		  (X, Map)
	end
'get_pos'/3 =
    %% Line 545
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,[H|T],Pos> when 'true' ->
	      %% Line 546
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (X,
			   H) ->
		    Pos
		%% Line 547
		<> when 'true' ->
		    let <_cor3> =
			call 'erlang':'+'
			    (Pos, 1)
		    in  apply 'get_pos'/3
			    (X, T, _cor3)
	      end
	  %% Line 549
	  <_cor7,[],_cor8> when 'true' ->
	      %% Line 550
	      'notFound'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_pos',3}}] )
	    -| ['compiler_generated'] )
	end
'get_new_opnd'/2 =
    %% Line 552
    fun (_cor1,_cor0) ->
	let <I> =
	    %% Line 553
	    apply 'get_pos'/3
		(_cor1, _cor0, 0)
	in  %% Line 554
	    case I of
	      %% Line 555
	      <'notFound'> when 'true' ->
		  _cor1
	      %% Line 558
	      <_cor6> when 'true' ->
		  %% Line 559
		  apply 'mk_st'/1
		      (I)
	    end
'is_fp'/1 =
    %% Line 562
    fun (_cor0) ->
	case _cor0 of
	  <{'x86_fpreg',_cor2,_cor3}> when 'true' ->
	      %% Line 563
	      'true'
	  %% Line 564
	  <{'x86_mem',_cor4,_cor5,Type}> when 'true' ->
	      %% Line 565
	      call 'erlang':'=:='
		  (Type, 'double')
	  %% Line 566
	  <{'x86_temp',_cor6,Type,_cor7}> when 'true' ->
	      %% Line 567
	      call 'erlang':'=:='
		  (Type, 'double')
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_fp',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_insn'/1 =
    %% Line 569
    fun (_cor0) ->
	%% Line 570
	case _cor0 of
	  %% Line 571
	  <{'fmove',_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 572
	  <{'fp_unop',_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 573
	  <{'fp_binop',_cor7,_cor8,_cor9}> when 'true' ->
	      'true'
	  %% Line 574
	  <{'pseudo_call',_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      'true'
	  %% Line 576
	  <_cor14> when 'true' ->
	      'false'
	end
'is_liveOut'/2 =
    %% Line 579
    fun (_cor1,_cor0) ->
	%% Line 580
	call 'ordsets':'is_element'
	    (_cor1, _cor0)
'mk_st'/1 =
    %% Line 582
    fun (_cor0) ->
	%% Line 583
	call 'hipe_x86':'mk_fpreg'
	    (_cor0, 'false')
'reverse_op'/1 =
    %% Line 585
    fun (_cor0) ->
	%% Line 586
	case _cor0 of
	  %% Line 587
	  <'fsub'> when 'true' ->
	      'fsubr'
	  %% Line 588
	  <'fdiv'> when 'true' ->
	      'fdivr'
	  %% Line 589
	  <'fsubr'> when 'true' ->
	      'fsub'
	  %% Line 590
	  <'fdivr'> when 'true' ->
	      'fdiv'
	  %% Line 591
	  <_cor3> when 'true' ->
	      _cor0
	end
'mk_op_pop'/1 =
    %% Line 594
    fun (_cor0) ->
	%% Line 595
	case _cor0 of
	  %% Line 596
	  <'fadd'> when 'true' ->
	      'faddp'
	  %% Line 597
	  <'fdiv'> when 'true' ->
	      'fdivp'
	  %% Line 598
	  <'fdivr'> when 'true' ->
	      'fdivrp'
	  %% Line 599
	  <'fmul'> when 'true' ->
	      'fmulp'
	  %% Line 600
	  <'fsub'> when 'true' ->
	      'fsubp'
	  %% Line 601
	  <'fsubr'> when 'true' ->
	      'fsubrp'
	  %% Line 602
	  <_cor6> when 'true' ->
	      do  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'operandHasNoPopVariant',{_cor0}}|['hipe_amd64_x87'|[602]]])
		  call 'erlang':'error'
		      ({'hipe_amd64_x87',602,{'operandHasNoPopVariant',{_cor0}}})
	end
'butlast'/1 =
    %% Line 605
    fun (_cor0) ->
	case _cor0 of
	  <[X|Xs]> when 'true' ->
	      apply 'butlast'/2
		  (Xs, X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'butlast',1}}] )
	    -| ['compiler_generated'] )
	end
'butlast'/2 =
    %% Line 607
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor5> when 'true' ->
	      []
	  %% Line 608
	  <[X|Xs],Y> when 'true' ->
	      let <_cor2> =
		  apply 'butlast'/2
		      (Xs, X)
	      in  [Y|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'butlast',2}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_pop'/1 =
    %% Line 619
    fun (_cor0) ->
	case _cor0 of
	  <Map>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (_cor0)
		    in  call 'erlang':'>'
			    (_cor1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Dst> =
		  %% Line 620
		  call 'hipe_x86':'mk_new_temp'
		      ('double')
	      in  let <_cor3> =
		      %% Line 621
		      call 'erlang':'length'
			  (Map)
		  in  %% Line 621
		      apply 'pseudo_pop'/3
			  (Dst, _cor3, [])
	  %% Line 622
	  <_cor5> when 'true' ->
	      %% Line 623
	      []
	end
'pseudo_pop'/3 =
    %% Line 625
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dst,St,Acc>
	      when call 'erlang':'>'
		    (St,
		     1) ->
	      let <_cor10> =
		  %% Line 629
		  call 'erlang':'-'
		      (St, 1)
	      in  let <_cor3> =
		      %% Line 630
		      call 'erlang':'-'
			  (St, 1)
		  in  let <_cor4> =
			  %% Line 630
			  apply 'mk_st'/1
			      (_cor3)
		      in  let <_cor5> =
			      %% Line 630
			      call 'hipe_x86':'mk_fp_unop'
				  ('fxch', _cor4)
			  in  let <_cor6> =
				  %% Line 631
				  call 'hipe_x86':'mk_fp_unop'
				      ('fst', Dst)
			      in  let <_cor7> =
				      %% Line 632
				      call 'erlang':'-'
					  (St, 1)
				  in  let <_cor8> =
					  %% Line 632
					  apply 'mk_st'/1
					      (_cor7)
				      in  let <_cor9> =
					      %% Line 632
					      call 'hipe_x86':'mk_fp_unop'
						  ('fxch', _cor8)
					  in  %% Line 629
					      apply 'pseudo_pop'/3
						  (Dst, _cor10, %% Line 630
								[_cor5|%% Line 631
								       [_cor6|%% Line 632
									      [_cor9|%% Line 633
										     Acc]]])
	  %% Line 634
	  <Dst,_X_St,Acc> when 'true' ->
	      let <_cor11> =
		  %% Line 635
		  call 'hipe_x86':'mk_fp_unop'
		      ('fst', Dst)
	      in  %% Line 635
		  [_cor11|Acc]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_x87')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_x87', _cor0)
end