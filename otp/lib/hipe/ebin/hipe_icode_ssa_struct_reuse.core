module 'hipe_icode_ssa_struct_reuse' ['module_info'/0,
				      'module_info'/1,
				      'struct_reuse'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'struct_type',{'type',53,'tuple',[{'type',53,'union',[{'atom',53,'cons'}|[{'atom',53,'mktuple'}]]}|[{'type',53,'icode_term_arg',[]}|[{'type',53,'any',[]}]]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'struct_elems',{'type',54,'tuple',[{'type',54,'icode_var',[]}|[{'type',54,'non_neg_integer',[]}|[{'type',54,'icode_term_arg',[]}]]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','maps'},[{'typed_record_field',{'record_field',73,{'atom',73,'var'},{'call',73,{'remote',73,{'atom',73,'gb_trees'},{'atom',73,'empty'}},[]}},{'remote_type',73,[{'atom',73,'gb_trees'}|[{'atom',73,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'instr'},{'call',74,{'remote',74,{'atom',74,'gb_trees'},{'atom',74,'empty'}},[]}},{'remote_type',74,[{'atom',74,'gb_trees'}|[{'atom',74,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'expr'},{'call',75,{'remote',75,{'atom',75,'gb_trees'},{'atom',75,'empty'}},[]}},{'remote_type',75,[{'atom',75,'gb_trees'}|[{'atom',75,'tree'}|[[]]]]}}]]],[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{{'record','expr'},[{'typed_record_field',{'record_field',128,{'atom',128,'id'},{'atom',128,'none'}},{'type',128,'union',[{'atom',128,'none'}|[{'type',128,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'key'},{'atom',129,'none'}},{'type',129,'union',[{'atom',129,'none'}|[{'type',129,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'defs'},{'atom',130,'none'}},{'type',130,'union',[{'atom',130,'none'}|[{'type',130,'list',[{'type',130,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'direct_replace'},{'atom',131,'false'}},{'type',131,'boolean',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'inserts'},{'call',132,{'remote',132,{'atom',132,'ordsets'},{'atom',132,'new'}},[]}},{'remote_type',132,[{'atom',132,'ordsets'}|[{'atom',132,'ordset'}|[[{'var',132,'_'}]]]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'use'},{'call',133,{'remote',133,{'atom',133,'ordsets'},{'atom',133,'new'}},[]}},{'remote_type',133,[{'atom',133,'ordsets'}|[{'atom',133,'ordset'}|[[{'var',133,'_'}]]]]}}]]]]]],[]}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{{'record','varinfo'},[{'typed_record_field',{'record_field',172,{'atom',172,'use'},{'call',172,{'remote',172,{'atom',172,'ordsets'},{'atom',172,'new'}},[]}},{'remote_type',172,[{'atom',172,'ordsets'}|[{'atom',172,'ordset'}|[[{'var',172,'_'}]]]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'ref'},{'atom',173,'none'}},{'type',173,'union',[{'atom',173,'none'}|[{'type',173,'tuple',[{'type',173,'non_neg_integer',[]}|[{'type',173,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'elem'},{'atom',174,'none'}},{'type',174,'union',[{'atom',174,'none'}|[{'type',174,'tuple',[{'type',174,'icode_var',[]}|[{'type',174,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'exprid'},{'atom',175,'none'}},{'type',175,'union',[{'atom',175,'none'}|[{'type',175,'non_neg_integer',[]}]]}}]]]],[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{{'record','node'},[{'typed_record_field',{'record_field',210,{'atom',210,'label'},{'atom',210,'none'}},{'type',210,'union',[{'atom',210,'none'}|[{'type',210,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',211,{'atom',211,'pred'},{'atom',211,'none'}},{'type',211,'union',[{'atom',211,'none'}|[{'type',211,'list',[{'type',211,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',212,{'atom',212,'succ'},{'atom',212,'none'}},{'type',212,'union',[{'atom',212,'none'}|[{'type',212,'list',[{'type',212,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',213,{'atom',213,'code'},{'nil',213}},{'type',213,'list',[{'type',213,'tuple','any'}]}}|[{'typed_record_field',{'record_field',214,{'atom',214,'phi'},{'call',214,{'remote',214,{'atom',214,'gb_trees'},{'atom',214,'empty'}},[]}},{'remote_type',214,[{'atom',214,'gb_trees'}|[{'atom',214,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',215,{'atom',215,'varmap'},{'nil',215}},{'type',215,'list',[{'type',215,'tuple',[{'type',215,'icode_var',[]}|[{'type',215,'icode_var',[]}]]}]}}|[{'typed_record_field',{'record_field',216,{'atom',216,'pre_loop'},{'atom',216,'false'}},{'type',216,'boolean',[]}}|[{'typed_record_field',{'record_field',217,{'atom',217,'non_struct_defs'},{'call',217,{'remote',217,{'atom',217,'gb_sets'},{'atom',217,'new'}},[]}},{'remote_type',217,[{'atom',217,'gb_sets'}|[{'atom',217,'set'}|[[]]]]}}|[{'typed_record_field',{'record_field',218,{'atom',218,'up_expr'},{'atom',218,'none'}},{'type',218,'union',[{'atom',218,'none'}|[{'remote_type',218,[{'atom',218,'ordsets'}|[{'atom',218,'ordset'}|[[{'var',218,'_'}]]]]}]]}}|[{'typed_record_field',{'record_field',219,{'atom',219,'killed_expr'},{'atom',219,'none'}},{'type',219,'union',[{'atom',219,'none'}|[{'remote_type',219,[{'atom',219,'ordsets'}|[{'atom',219,'ordset'}|[[{'var',219,'_'}]]]]}]]}}|[{'typed_record_field',{'record_field',220,{'atom',220,'sub_inserts'},{'call',220,{'remote',220,{'atom',220,'ordsets'},{'atom',220,'new'}},[]}},{'remote_type',220,[{'atom',220,'ordsets'}|[{'atom',220,'ordset'}|[[{'var',220,'_'}]]]]}}|[{'typed_record_field',{'record_field',221,{'atom',221,'inserts'},{'call',221,{'remote',221,{'atom',221,'ordsets'},{'atom',221,'new'}},[]}},{'remote_type',221,[{'atom',221,'ordsets'}|[{'atom',221,'ordset'}|[[{'var',221,'_'}]]]]}}|[{'typed_record_field',{'record_field',222,{'atom',222,'antic_in'},{'atom',222,'none'}},{'type',222,'union',[{'atom',222,'none'}|[{'remote_type',222,[{'atom',222,'ordsets'}|[{'atom',222,'ordset'}|[[{'var',222,'_'}]]]]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'antic_out'},{'atom',223,'none'}},{'type',223,'union',[{'atom',223,'none'}|[{'remote_type',223,[{'atom',223,'ordsets'}|[{'atom',223,'ordset'}|[[{'var',223,'_'}]]]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'struct_type'},{'nil',224}},{'type',224,'list',[{'type',224,'struct_type',[]}]}}|[{'typed_record_field',{'record_field',225,{'atom',225,'struct_elems'},{'nil',225}},{'type',225,'list',[{'type',225,'struct_elems',[]}]}}]]]]]]]]]]]]]]]],[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{{'record','nodes'},[{'typed_record_field',{'record_field',316,{'atom',316,'domtree'}},{'type',316,'union',[{'atom',316,'undefined'}|[{'remote_type',316,[{'atom',316,'hipe_dominators'}|[{'atom',316,'domTree'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',317,{'atom',317,'labels'},{'atom',317,'none'}},{'type',317,'union',[{'atom',317,'none'}|[{'type',317,'list',[{'type',317,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'postorder'},{'atom',318,'none'}},{'type',318,'union',[{'atom',318,'none'}|[{'type',318,'list',[{'type',318,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'start_label'},{'atom',319,'none'}},{'type',319,'union',[{'atom',319,'none'}|[{'type',319,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'rev_postorder'},{'atom',320,'none'}},{'type',320,'union',[{'atom',320,'none'}|[{'type',320,'list',[{'type',320,'icode_lbl',[]}]}]]}}|[{'typed_record_field',{'record_field',321,{'atom',321,'all_expr'},{'atom',321,'none'}},{'type',321,'union',[{'atom',321,'none'}|[{'type',321,'list',[{'type',321,'non_neg_integer',[]}]}]]}}|[{'typed_record_field',{'record_field',322,{'atom',322,'tree'},{'call',322,{'remote',322,{'atom',322,'gb_trees'},{'atom',322,'empty'}},[]}},{'remote_type',322,[{'atom',322,'gb_trees'}|[{'atom',322,'tree'}|[[]]]]}}]]]]]]],[]}],
		%% Line 359
		'type' =
		    %% Line 359
		    [{{'record','update'},[{'typed_record_field',{'record_field',359,{'atom',359,'inserted'},{'call',359,{'remote',359,{'atom',359,'gb_trees'},{'atom',359,'empty'}},[]}},{'remote_type',359,[{'atom',359,'gb_trees'}|[{'atom',359,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',360,{'atom',360,'del_red_test'},{'atom',360,'false'}},{'type',360,'boolean',[]}}]],[]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'struct_reuse',1},[{'type',392,'fun',[{'type',392,'product',[{'type',392,'record',[{'atom',392,'cfg'}]}]}|[{'type',392,'record',[{'atom',392,'cfg'}]}]]}]}],
		%% Line 1327
		'spec' =
		    %% Line 1327
		    [{{'new_expr_id',0},[{'type',1327,'fun',[{'type',1327,'product',[]}|[{'type',1327,'non_neg_integer',[]}]]}]}]]
'maps_var'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <{'maps',Out,_cor2,_cor3}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'maps_var',1}}] )
	    -| ['compiler_generated'] )
	end
'maps_instr'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <{'maps',_cor2,Out,_cor3}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'maps_instr',1}}] )
	    -| ['compiler_generated'] )
	end
'maps_expr'/1 =
    %% Line 79
    fun (_cor0) ->
	case _cor0 of
	  <{'maps',_cor2,_cor3,Out}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'maps_expr',1}}] )
	    -| ['compiler_generated'] )
	end
'maps_expr_keys'/1 =
    %% Line 81
    fun (_cor0) ->
	let <_cor1> =
	    apply 'maps_expr'/1
		(_cor0)
	in  call 'gb_trees':'keys'
		(_cor1)
'maps_expr_values'/1 =
    %% Line 82
    fun (_cor0) ->
	let <_cor1> =
	    apply 'maps_expr'/1
		(_cor0)
	in  call 'gb_trees':'values'
		(_cor1)
'maps_instr_lookup'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'maps_instr'/1
		(_cor0)
	in  call 'gb_trees':'lookup'
		(_cor1, _cor2)
'maps_instr_enter'/3 =
    %% Line 85
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 86
	    apply 'maps_instr'/1
		(_cor0)
	in  let <NewInstr> =
		%% Line 86
		call 'gb_trees':'enter'
		    (_cor2, _cor1, _cor3)
	    in  %% Line 87
		case _cor0 of
		  <{'maps',_cor10,_cor11,_cor12}> when 'true' ->
		      call 'erlang':'setelement'
			  (3, _cor0, NewInstr)
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','maps'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'maps_expr_get'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'maps_expr'/1
		(_cor0)
	in  call 'gb_trees':'get'
		(_cor1, _cor2)
'maps_expr_enter'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 91
	    apply 'expr_id'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 91
		apply 'maps_expr'/1
		    (_cor0)
	    in  let <NewExprMap> =
		    %% Line 91
		    call 'gb_trees':'enter'
			(_cor3, _cor1, _cor2)
		in  %% Line 92
		    case _cor0 of
		      <{'maps',_cor9,_cor10,_cor11}> when 'true' ->
			  call 'erlang':'setelement'
			      (4, _cor0, NewExprMap)
		      ( <_cor12> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','maps'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'maps_var_get'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'maps_var'/1
		(_cor0)
	in  call 'gb_trees':'get'
		(_cor1, _cor2)
'maps_var_lookup'/2 =
    %% Line 95
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,{'maps',VarMap,_cor4,_cor5}> when 'true' ->
	      call 'gb_trees':'lookup'
		  (Var, VarMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'maps_var_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'maps_var_enter'/3 =
    %% Line 96
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var,Info,Maps = {'maps',VarMap,_cor9,_cor10}> when 'true' ->
	      let <NewMap> =
		  %% Line 97
		  call 'gb_trees':'enter'
		      (Var, Info, VarMap)
	      in  %% Line 98
		  call 'erlang':'setelement'
		      (2, Maps, NewMap)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'maps_var_enter',3}}] )
	    -| ['compiler_generated'] )
	end
'maps_var_insert'/3 =
    %% Line 99
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var,Info,Maps = {'maps',VarMap,_cor9,_cor10}> when 'true' ->
	      let <NewMap> =
		  %% Line 100
		  call 'gb_trees':'insert'
		      (Var, Info, VarMap)
	      in  %% Line 101
		  call 'erlang':'setelement'
		      (2, Maps, NewMap)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'maps_var_insert',3}}] )
	    -| ['compiler_generated'] )
	end
'maps_balance'/1 =
    %% Line 103
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 104
	    apply 'maps_instr'/1
		(_cor0)
	in  let <_rec4> =
		%% Line 104
		call 'gb_trees':'balance'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 105
		    apply 'maps_expr'/1
			(_cor0)
		in  let <_rec5> =
			%% Line 105
			call 'gb_trees':'balance'
			    (_cor3)
		    in  let <_cor5> =
			    %% Line 106
			    apply 'maps_var'/1
				(_cor0)
			in  let <_rec6> =
				%% Line 106
				call 'gb_trees':'balance'
				    (_cor5)
			    in  %% Line 106
				case _cor0 of
				  <{'maps',_rec8,_rec9,_rec10}> when 'true' ->
				      {'maps',_rec6,_rec4,_rec5}
				  ( <_cor10> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','maps'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
'maps_expr_key_enter'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 109
	    apply 'expr_key'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 109
		apply 'expr_id'/1
		    (_cor1)
	    in  let <NewMaps> =
		    %% Line 109
		    apply 'maps_instr_enter'/3
			(_cor3, _cor2, _cor0)
		in  %% Line 110
		    apply 'maps_expr_enter'/2
			(_cor1, NewMaps)
'expr_id'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',Out,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_id',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_defs'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',_cor2,_cor3,Out,_cor4,_cor5,_cor6}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_key'/1 =
    %% Line 137
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',_cor2,Out,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_key',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_inserts'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',_cor2,_cor3,_cor4,_cor5,Out,_cor6}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_inserts',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_use'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',_cor2,_cor3,_cor4,_cor5,_cor6,Out}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_use',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_direct_replace'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <{'expr',_cor2,_cor3,_cor4,Out,_cor5,_cor6}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'expr_direct_replace',1}}] )
	    -| ['compiler_generated'] )
	end
'expr_use_add'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Expr = {'expr',_cor7,_cor8,_cor9,_cor10,_cor11,UseSet},Use> when 'true' ->
	      let <_rec11> =
		  %% Line 143
		  call 'ordsets':'add_element'
		      (Use, UseSet)
	      in  %% Line 143
		  call 'erlang':'setelement'
		      (7, Expr, _rec11)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'expr_use_add',2}}] )
	    -| ['compiler_generated'] )
	end
'expr_direct_replace_set'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'expr',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','expr'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'expr_inserts_set'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'expr',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (6, _cor1, _cor0)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','expr'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'expr_create'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	let <NewExprId> =
	    %% Line 150
	    apply 'new_expr_id'/0
		()
	in  let <_cor4> =
		call 'ordsets':'new'
		    ()
	    in  let <_cor3> =
		    call 'ordsets':'new'
			()
		in  %% Line 151
		    {'expr',NewExprId,_cor1,_cor0,'false',_cor4,_cor3}
'varinfo_exprid'/1 =
    %% Line 177
    fun (_cor0) ->
	case _cor0 of
	  <{'varinfo',_cor2,_cor3,_cor4,Out}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'varinfo_exprid',1}}] )
	    -| ['compiler_generated'] )
	end
'varinfo_use_add'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'varinfo',UseSet,_cor7,_cor8,_cor9},Use> when 'true' ->
	      let <_rec15> =
		  %% Line 180
		  call 'ordsets':'add_element'
		      (Use, UseSet)
	      in  %% Line 180
		  call 'erlang':'setelement'
		      (2, I, _rec15)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'varinfo_use_add',2}}] )
	    -| ['compiler_generated'] )
	end
'node_sub_inserts'/1 =
    %% Line 227
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Out,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_sub_inserts',1}}] )
	    -| ['compiler_generated'] )
	end
'node_inserts'/1 =
    %% Line 228
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Out,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_inserts',1}}] )
	    -| ['compiler_generated'] )
	end
'node_antic_out'/1 =
    %% Line 229
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Out,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_antic_out',1}}] )
	    -| ['compiler_generated'] )
	end
'node_antic_in'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Out,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_antic_in',1}}] )
	    -| ['compiler_generated'] )
	end
'node_killed_expr'/1 =
    %% Line 231
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Out,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_killed_expr',1}}] )
	    -| ['compiler_generated'] )
	end
'node_pred'/1 =
    %% Line 232
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,Out,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_pred',1}}] )
	    -| ['compiler_generated'] )
	end
'node_succ'/1 =
    %% Line 233
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,Out,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_succ',1}}] )
	    -| ['compiler_generated'] )
	end
'node_label'/1 =
    %% Line 234
    fun (_cor0) ->
	case _cor0 of
	  <{'node',Out,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_label',1}}] )
	    -| ['compiler_generated'] )
	end
'node_code'/1 =
    %% Line 235
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,Out,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_code',1}}] )
	    -| ['compiler_generated'] )
	end
'node_non_struct_defs'/1 =
    %% Line 236
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Out,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_non_struct_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'node_up_expr'/1 =
    %% Line 237
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Out,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_up_expr',1}}] )
	    -| ['compiler_generated'] )
	end
'node_pre_loop'/1 =
    %% Line 238
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Out,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_pre_loop',1}}] )
	    -| ['compiler_generated'] )
	end
'node_struct_type'/1 =
    %% Line 239
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,Out,_cor16}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_struct_type',1}}] )
	    -| ['compiler_generated'] )
	end
'node_struct_elems'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Out}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'node_struct_elems',1}}] )
	    -| ['compiler_generated'] )
	end
'node_pre_loop_set'/1 =
    %% Line 243
    fun (_cor0) ->
	case _cor0 of
	  <{'node',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      call 'erlang':'setelement'
		  (8, _cor0, 'true')
	  ( <_cor20> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','node'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'node_phi_add'/3 =
    %% Line 245
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node = {'node',_cor12,_cor13,_cor14,_cor15,Phi,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},Pred,Value> when 'true' ->
	      let <_cor4> =
		  %% Line 247
		  case call 'gb_trees':'lookup'
			   (Pred, Phi) of
		    %% Line 248
		    <{'value',List}> when 'true' ->
			[Value|List]
		    %% Line 249
		    <'none'> when 'true' ->
			[Value|[]]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_rec18> =
		      %% Line 251
		      call 'gb_trees':'enter'
			  (Pred, _cor4, Phi)
		  in  %% Line 251
		      call 'erlang':'setelement'
			  (6, Node, _rec18)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'node_phi_add',3}}] )
	    -| ['compiler_generated'] )
	end
'node_phi_get'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'node',_cor5,_cor6,_cor7,_cor8,Phi,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Pred> when 'true' ->
	      %% Line 254
	      case call 'gb_trees':'lookup'
		       (Pred, Phi) of
		%% Line 255
		<{'value',List}> when 'true' ->
		    List
		%% Line 256
		<'none'> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'node_phi_get',2}}] )
	    -| ['compiler_generated'] )
	end
'node_code_add'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node = {'node',_cor7,_cor8,_cor9,Code,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},Instr> when 'true' ->
	      let <_rec20> =
		  %% Line 260
		  [Instr|Code]
	      in  %% Line 260
		  call 'erlang':'setelement'
		      (5, Node, _rec20)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'node_code_add',2}}] )
	    -| ['compiler_generated'] )
	end
'node_code_rev'/1 =
    %% Line 262
    fun (_cor0) ->
	case _cor0 of
	  <Node = {'node',_cor5,_cor6,_cor7,Code,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <_rec22> =
		  %% Line 263
		  call 'lists':'reverse'
		      (Code)
	      in  %% Line 263
		  call 'erlang':'setelement'
		      (5, Node, _rec22)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'node_code_rev',1}}] )
	    -| ['compiler_generated'] )
	end
'node_struct_type_add'/2 =
    %% Line 265
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node = {'node',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,T,_cor21},Value> when 'true' ->
	      let <_rec24> =
		  %% Line 266
		  [Value|T]
	      in  %% Line 266
		  call 'erlang':'setelement'
		      (16, Node, _rec24)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'node_struct_type_add',2}}] )
	    -| ['compiler_generated'] )
	end
'node_struct_elems_add'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node = {'node',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,T},Value> when 'true' ->
	      let <_rec26> =
		  %% Line 272
		  [Value|T]
	      in  %% Line 272
		  call 'erlang':'setelement'
		      (17, Node, _rec26)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'node_struct_elems_add',2}}] )
	    -| ['compiler_generated'] )
	end
'node_non_struct_defs_list'/1 =
    %% Line 274
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 275
	    apply 'node_non_struct_defs'/1
		(_cor0)
	in  %% Line 275
	    call 'gb_sets':'to_list'
		(_cor1)
'node_non_struct_instr_add'/2 =
    %% Line 277
    fun (_cor1,_cor0) ->
	let <DefList> =
	    %% Line 278
	    call 'hipe_icode':'defines'
		(_cor0)
	in  let <_cor4> =
		%% Line 279
		apply 'node_non_struct_defs'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 279
		    call 'gb_sets':'from_list'
			(DefList)
		in  let <Tmp> =
			%% Line 279
			call 'gb_sets':'union'
			    (_cor4, _cor3)
		    in  %% Line 280
			case _cor1 of
			  <{'node',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
			      call 'erlang':'setelement'
				  (9, _cor1, Tmp)
			  ( <_cor26> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','node'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
'node_set_sub_inserts'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'node',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      call 'erlang':'setelement'
		  (12, _cor1, _cor0)
	  ( <_cor22> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','node'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'node_add_insert'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 285
	    apply 'node_inserts'/1
		(_cor1)
	in  let <NewIns> =
		%% Line 285
		call 'ordsets':'add_element'
		    (_cor0, _cor2)
	    in  %% Line 286
		case _cor1 of
		  <{'node',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
		      call 'erlang':'setelement'
			  (13, _cor1, NewIns)
		  ( <_cor24> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','node'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'node_union_sub_inserts'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 289
	    apply 'node_sub_inserts'/1
		(_cor1)
	in  let <NewSubIns> =
		%% Line 289
		call 'ordsets':'union'
		    (_cor0, _cor2)
	    in  %% Line 290
		apply 'node_set_sub_inserts'/2
		    (_cor1, NewSubIns)
'node_varmap_set'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	%% Line 293
	case _cor1 of
	  <{'node',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor1, _cor0)
	  ( <_cor22> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','node'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'node_varmap_lookup'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'node',_cor5,_cor6,_cor7,_cor8,_cor9,Varmap,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Var> when 'true' ->
	      %% Line 296
	      case call 'lists':'keyfind'
		       (Var, 1, Varmap) of
		%% Line 297
		<{_cor20,NewVar}> when 'true' ->
		    NewVar
		%% Line 298
		<'false'> when 'true' ->
		    Var
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'node_varmap_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'node_create'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    call 'gb_trees':'empty'
		()
	in  let <_cor5> =
		call 'gb_sets':'new'
		    ()
	    in  let <_cor4> =
		    call 'ordsets':'new'
			()
		in  let <_cor3> =
			call 'ordsets':'new'
			    ()
		    in  %% Line 302
			{'node',_cor2,_cor1,_cor0,[],_cor6,[],'false',_cor5,'none','none',_cor4,_cor3,'none','none',[],[]}
'nodes_postorder'/1 =
    %% Line 324
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',_cor2,_cor3,Out,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_postorder',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_rev_postorder'/1 =
    %% Line 325
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',_cor2,_cor3,_cor4,_cor5,Out,_cor6,_cor7}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_rev_postorder',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_tree'/1 =
    %% Line 326
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Out}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_tree',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_domtree'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',Out,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_domtree',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_start_label'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',_cor2,_cor3,_cor4,Out,_cor5,_cor6,_cor7}> when 'true' ->
	      Out
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_start_label',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_tree_is_empty'/1 =
    %% Line 330
    fun (_cor0) ->
	case _cor0 of
	  <{'nodes',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Tree}> when 'true' ->
	      %% Line 331
	      call 'gb_trees':'is_empty'
		  (Tree)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nodes_tree_is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'nodes_tree_set'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	case _cor0 of
	  <{'nodes',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      call 'erlang':'setelement'
		  (8, _cor0, _cor1)
	  ( <_cor13> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','nodes'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'nodes_all_expr_set'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	case _cor0 of
	  <{'nodes',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor0, _cor1)
	  ( <_cor13> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','nodes'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'nodes_tree_values'/1 =
    %% Line 336
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 337
	    apply 'nodes_tree'/1
		(_cor0)
	in  %% Line 337
	    call 'gb_trees':'values'
		(_cor1)
'get_node'/2 =
    %% Line 339
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 340
	    apply 'nodes_tree'/1
		(_cor0)
	in  %% Line 340
	    call 'gb_trees':'get'
		(_cor1, _cor2)
'enter_node'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 343
	    apply 'node_label'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 343
		apply 'nodes_tree'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 343
		    call 'gb_trees':'enter'
			(_cor3, _cor1, _cor2)
		in  %% Line 343
		    apply 'nodes_tree_set'/2
			(_cor4, _cor0)
'remove_node'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 346
	    apply 'node_label'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 346
		apply 'nodes_tree'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 346
		    call 'gb_trees':'delete'
			(_cor3, _cor2)
		in  %% Line 346
		    apply 'nodes_tree_set'/2
			(_cor4, _cor0)
'nodes_create'/0 =
    %% Line 348
    fun () ->
	let <_cor0> =
	    call 'gb_trees':'empty'
		()
	in  {'nodes','undefined','none','none','none','none','none',_cor0}
'update_inserted_lookup'/2 =
    %% Line 362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'update',Inserted,_cor4},ExprId> when 'true' ->
	      %% Line 363
	      call 'gb_trees':'lookup'
		  (ExprId, Inserted)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'update_inserted_lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'update_inserted_add_new'/3 =
    %% Line 365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Update = {'update',Inserted,_cor20},ExprId,Defs> when 'true' ->
	      let <_cor11> =
		  %% Line 366
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[%% Line 375
				    Def|_cor4]> when 'true' ->
				      let <_cor9> =
					  case call 'hipe_icode':'is_var'
						   (Def) of
					    %% Line 367
					    <'true'> when 'true' ->
						call 'hipe_icode':'mk_new_var'
						    ()
					    %% Line 368
					    <'false'> when 'true' ->
						%% Line 369
						case call 'hipe_icode':'is_reg'
							 (Def) of
						  %% Line 370
						  <'true'> when 'true' ->
						      call 'hipe_icode':'mk_new_reg'
							  ()
						  %% Line 371
						  <'false'> when 'true' ->
						      %% Line 372
						      case call 'hipe_icode':'is_fvar'
							       (Def) of
							<'true'> when 'true' ->
							    %% Line 373
							    call 'hipe_icode':'mk_new_fvar'
								()
							( <_cor6> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor6})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor7> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor7})
						    -| ['compiler_generated'] )
						end
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor8})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor10> =
					      %% Line 375
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor9|_cor10]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 375
			     Defs)
		    -| ['list_comprehension'] )
	      in  let <NewInserted> =
		      %% Line 376
		      call 'gb_trees':'enter'
			  (ExprId, _cor11, Inserted)
		  in  let <_cor16> =
			  %% Line 377
			  call 'erlang':'setelement'
			      (2, Update, NewInserted)
		      in  %% Line 377
			  {_cor16,_cor11}
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'update_inserted_add_new',3}}] )
	    -| ['compiler_generated'] )
	end
'update_inserted_add'/3 =
    %% Line 379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Update = {'update',Inserted,_cor9},ExprId,Defs> when 'true' ->
	      let <_rec35> =
		  %% Line 380
		  call 'gb_trees':'enter'
		      (ExprId, Defs, Inserted)
	      in  %% Line 380
		  call 'erlang':'setelement'
		      (2, Update, _rec35)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update_inserted_add',3}}] )
	    -| ['compiler_generated'] )
	end
'update_del_red_test'/1 =
    %% Line 382
    fun (_cor0) ->
	case _cor0 of
	  <{'update',_cor2,DelRed}> when 'true' ->
	      DelRed
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'update_del_red_test',1}}] )
	    -| ['compiler_generated'] )
	end
'update_del_red_test_set'/1 =
    %% Line 383
    fun (_cor0) ->
	%% Line 384
	case _cor0 of
	  <{'update',_cor4,_cor5}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, 'true')
	  ( <_cor6> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','update'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'struct_reuse'/1 =
    %% Line 394
    fun (_cor0) ->
	do  %% Line 404
	    apply 'init_expr_id'/0
		()
	    let <Nodes> =
		%% Line 406
		apply 'construct_nodes'/1
		    (_cor0)
	    in  %% Line 408
		case apply 'nodes_tree_is_empty'/1
			 (Nodes) of
		  %% Line 409
		  <'false'> when 'true' ->
		      let <Maps> =
			  %% Line 410
			  apply 'create_maps'/1
			      (Nodes)
		      in  let <Nodes3> =
			      %% Line 412
			      apply 'init_nodes'/2
				  (Nodes, Maps)
			  in  let <Nodes4> =
				  %% Line 413
				  apply 'calc_anticipated'/1
				      (Nodes3)
			      in  %% Line 415
				  case apply 'calc_inserts'/2
					   (Nodes4, Maps) of
				    <{Nodes5,Maps3}> when 'true' ->
					let <Nodes6> =
					    %% Line 417
					    apply 'update_nodes_inserts'/2
						(Nodes5, Maps3)
					in  let <CFG1> =
						%% Line 424
						apply 'rewrite_cfg'/3
						    (_cor0, Nodes6, Maps3)
					    in  let <CFG2> =
						    %% Line 425
						    call 'hipe_icode_ssa':'remove_dead_code'
							(CFG1)
						in  %% Line 426
						    call 'hipe_icode_ssa_copy_prop':'cfg'
							(CFG2)
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
		  %% Line 438
		  <'true'> when 'true' ->
		      _cor0
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor10})
		    -| ['compiler_generated'] )
		end
'construct_nodes'/1 =
    %% Line 445
    fun (_cor0) ->
	let <DomTree> =
	    %% Line 447
	    call 'hipe_dominators':'domTree_create'
		(_cor0)
	in  %% Line 450
	    case apply 'nodes_from_cfg'/2
		     (_cor0, DomTree) of
	      <{Nodes,NonFailSet}> when 'true' ->
		  let <NewNodes> =
		      %% Line 453
		      apply 'prune_nodes'/2
			  (Nodes, NonFailSet)
		  in  let <_cor10> =
			  %% Line 456
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor7) ->
					case _cor7 of
					  <[Label|_cor5]> when 'true' ->
					      %% Line 457
					      ( case call 'gb_sets':'is_member'
							 (Label, NonFailSet) of
						  <'true'> when 'true' ->
						      let <_cor8> =
							  apply 'lc$^0'/1
							      (_cor5)
						      in  ( [Label|_cor8]
							    -| ['compiler_generated'] )
						  ( <'false'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor5)
						    -| ['compiler_generated'] )
						  ( <_cor9> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor9})
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor7> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor7})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor6> =
				    call 'hipe_icode_cfg':'postorder'
					(_cor0)
				in  apply 'lc$^0'/1
					(_cor6)
			    -| ['list_comprehension'] )
		      in  let <PostOrderTmp> =
			      %% Line 460
			      call 'hipe_icode_cfg':'postorder'
				  (_cor0)
			  in  let <LabelsTmp> =
				  %% Line 461
				  call 'hipe_icode_cfg':'labels'
				      (_cor0)
			      in  let <_cor15> =
				      %% Line 462
				      call 'erlang':'length'
					  (PostOrderTmp)
				  in  let <_cor14> =
					  %% Line 462
					  call 'erlang':'length'
					      (LabelsTmp)
				      in  do  %% Line 462
					      case <> of
						%% Line 463
						<>
						    when call 'erlang':'=/='
							  (_cor15,
							   _cor14) ->
						    do  %% Line 464
							apply 'print'/1
							    ([87|[97|[114|[110|[105|[110|[103|[44|[32|[80|[111|[115|[116|[111|[114|[100|[101|[114|[32|[97|[110|[100|[32|[76|[97|[98|[101|[108|[115|[32|[100|[105|[102|[102|[101|[114|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							do  %% Line 465
							    apply 'print_struct'/2
								([80|[111|[115|[116|[111|[114|[100|[101|[114|[58|[32]]]]]]]]]]], PostOrderTmp)
							    %% Line 466
							    apply 'print_struct'/2
								([76|[97|[98|[101|[108|[115|[58|[32]]]]]]]], LabelsTmp)
						%% Line 467
						<> when 'true' ->
						    'ok'
					      end
					      let <RevPostorder> =
						  %% Line 471
						  call 'lists':'reverse'
						      (_cor10)
					      in  let <StartLabel> =
						      %% Line 473
						      call 'hipe_icode_cfg':'start_label'
							  (_cor0)
						  in  let <_cor19> =
							  %% Line 474
							  apply 'nodes_tree'/1
							      (NewNodes)
						      in  let <NewTree> =
							      %% Line 474
							      call 'gb_trees':'balance'
								  (_cor19)
							  in  %% Line 480
							      case NewNodes of
								<{'nodes',_rec39,_rec40,_rec41,_rec42,_rec43,_rec44,_rec45}> when 'true' ->
								    {'nodes',DomTree,_rec40,_cor10,StartLabel,RevPostorder,_rec44,NewTree}
								( <_cor24> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','nodes'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'nodes_from_cfg'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	let <_cor66> =
	    %% Line 486
	    ( fun (_cor63,_cor62) ->
		  case <_cor63,_cor62> of
		    <Label,{NodesAcc,NonFailAcc}> when 'true' ->
			let <_cor5> =
			    %% Line 487
			    call 'hipe_icode_cfg':'bb'
				(_cor1, Label)
			in  let <Code> =
				%% Line 487
				call 'hipe_bb':'code'
				    (_cor5)
			    in  let <Pred> =
				    %% Line 488
				    call 'hipe_icode_cfg':'pred'
					(_cor1, Label)
				in  let <Succ> =
					%% Line 489
					call 'hipe_icode_cfg':'succ'
					    (_cor1, Label)
				    in  let <Node> =
					    %% Line 500
					    apply 'node_create'/3
						(Label, Pred, Succ)
					in  let <_cor48> =
						%% Line 503
						( fun (_cor45,_cor44) ->
						      case <_cor45,_cor44> of
							<Instr,{NodeAcc,NFAcc,PLPAcc}> when 'true' ->
							    %% Line 504
							    case apply 'instr_type'/1
								     (Instr) of
							      %% Line 505
							      <'struct'> when 'true' ->
								  let <_cor11> =
								      %% Line 506
								      apply 'node_code_add'/2
									  (NodeAcc, Instr)
								  in  %% Line 506
								      {_cor11,NFAcc,PLPAcc}
							      %% Line 507
							      <'return'> when 'true' ->
								  let <_cor12> =
								      %% Line 508
								      apply 'get_back_trace_rec'/3
									  (_cor1, Label, NFAcc)
								  in  %% Line 508
								      {NodeAcc,_cor12,PLPAcc}
							      %% Line 509
							      <{'struct_elems',NumElem,DstVar,SrcVar}> when 'true' ->
								  let <NewNodeAcc> =
								      %% Line 510
								      apply 'node_struct_elems_add'/2
									  (NodeAcc, {DstVar,NumElem,SrcVar})
								  in  let <_cor14> =
									  %% Line 511
									  apply 'node_non_struct_instr_add'/2
									      (NewNodeAcc, Instr)
								      in  %% Line 511
									  {_cor14,NFAcc,PLPAcc}
							      %% Line 512
							      <{'struct_type',NumElems,Var,Type}> when 'true' ->
								  let <_cor15> =
								      %% Line 513
								      apply 'node_struct_type_add'/2
									  (NodeAcc, {Type,Var,NumElems})
								  in  %% Line 513
								      {_cor15,NFAcc,PLPAcc}
							      %% Line 514
							      <{'tuple_arity',Var,Cases}> when 'true' ->
								  let <_cor22> =
								      %% Line 516
								      ( fun (_cor19,_cor18) ->
									    %% Line 517
									    case _cor19 of
									      %% Line 518
									      <{{'const',{'flat',Arity}},_cor69}> when 'true' ->
										  let <Tuple> = {%% Line 519
										       'mktuple',%% Line 519
												 Var,%% Line 519
												     Arity}
										  in  %% Line 520
										      apply 'node_struct_type_add'/2
											  (_cor18, Tuple)
									      %% Line 521
									      <_cor70> when 'true' ->
										  _cor18
									    end
									-| [{'id',{0,0,'-nodes_from_cfg/2-fun-0-'}}] )
								  in  let <NewNodeAcc> =
									  %% Line 516
									  call 'lists':'foldl'
									      (_cor22, %% Line 523
										       NodeAcc, %% Line 523
												Cases)
								      in  %% Line 524
									  {NewNodeAcc,NFAcc,PLPAcc}
							      %% Line 527
							      <'phi'> when 'true' ->
								  let <Def> =
								      %% Line 528
								      call 'hipe_icode':'phi_dst'
									  (Instr)
								  in  let <_cor34> =
									  %% Line 529
									  ( fun (_cor31,_cor30) ->
										case <_cor31,_cor30> of
										  <P = {Pr,PredVar},{IsDef,NotDom}> when 'true' ->
										      %% Line 530
										      case call 'hipe_dominators':'domTree_dominates'
											       (Label, Pr, _cor0) of
											%% Line 531
											<'false'> when 'true' ->
											    %% Line 532
											    {IsDef,[P|NotDom]}
											%% Line 533
											<'true'> when 'true' ->
											    let <_cor28> =
												%% Line 534
												( case IsDef of
												    ( <( 'true'
													 -| ['compiler_generated'] )> when 'true' ->
													  call 'erlang':'=:='
													      (PredVar, Def)
												      -| ['compiler_generated'] )
												    ( <( 'false'
													 -| ['compiler_generated'] )> when 'true' ->
													  'false'
												      -| ['compiler_generated'] )
												    ( <_cor26> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {( 'badarg'
														      -| ['compiler_generated'] ),_cor26}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    in  %% Line 534
												{_cor28,NotDom}
											( <_cor29> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor29})
											  -| ['compiler_generated'] )
										      end
										  ( <_cor33,_cor32> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor33,_cor32})
											  -| [{'function_name',{'-nodes_from_cfg/2-fun-1-',2}}] )
										    -| ['compiler_generated'] )
										end
									    -| [{'id',{0,0,'-nodes_from_cfg/2-fun-1-'}}] )
								      in  let <_cor25> =
									      %% Line 536
									      call 'hipe_icode':'phi_arglist'
										  (Instr)
									  in  %% Line 538
									      case call 'lists':'foldl'
										       (_cor34, {'true',[]}, _cor25) of
										%% Line 539
										<{'true',[{P,V}|[]]}> when 'true' ->
										    let <_cor37> =
											%% Line 543
											apply 'node_phi_add'/3
											    (NodeAcc, P, {Def,V})
										    in  let <_cor36> =
											    %% Line 544
											    call 'ordsets':'add_element'
												(P, PLPAcc)
											in  %% Line 543
											    {_cor37,%% Line 544
												    NFAcc,_cor36}
										%% Line 546
										<{'false',[{P,_cor71}|[]]}> when 'true' ->
										    let <_cor39> =
											%% Line 547
											apply 'node_non_struct_instr_add'/2
											    (NodeAcc, Instr)
										    in  let <_cor38> =
											    %% Line 548
											    call 'ordsets':'add_element'
												(P, PLPAcc)
											in  %% Line 547
											    {_cor39,%% Line 548
												    NFAcc,_cor38}
										%% Line 550
										<_cor72> when 'true' ->
										    let <_cor40> =
											%% Line 551
											apply 'node_non_struct_instr_add'/2
											    (NodeAcc, Instr)
										    in  %% Line 551
											{_cor40,NFAcc,PLPAcc}
									      end
							      %% Line 553
							      <_cor73> when 'true' ->
								  let <_cor42> =
								      %% Line 554
								      apply 'node_non_struct_instr_add'/2
									  (NodeAcc, Instr)
								  in  %% Line 554
								      {_cor42,NFAcc,PLPAcc}
							    end
							( <_cor47,_cor46> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor47,_cor46})
								-| [{'function_name',{'-nodes_from_cfg/2-fun-2-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-nodes_from_cfg/2-fun-2-'}}] )
					    in  let <_cor10> =
						    %% Line 556
						    call 'ordsets':'new'
							()
						in  %% Line 502
						    case %% Line 503
							 call 'lists':'foldl'
							     (_cor48, %% Line 556
								      {Node,NonFailAcc,_cor10}, %% Line 556
												Code) of
						      <{NewNode,NewNonFailAcc,PreLoopPreds}> when 'true' ->
							  let <_cor50> =
							      %% Line 559
							      apply 'node_code_rev'/1
								  (NewNode)
							  in  let <NewNodesAcc> =
								  %% Line 559
								  apply 'enter_node'/2
								      (_cor50, NodesAcc)
							      in  let <_cor60> =
								      %% Line 564
								      ( fun (_cor57,_cor56) ->
									    let <PredNode> =
										%% Line 565
										apply 'get_node'/2
										    (_cor57, _cor56)
									    in  let <NewPredNode> =
										    %% Line 566
										    apply 'node_pre_loop_set'/1
											(PredNode)
										in  let <_cor54> =
											%% Line 567
											apply 'node_phi_get'/2
											    (NewNode, _cor57)
										    in  let <NewPredNode2> =
											    %% Line 567
											    apply 'node_varmap_set'/2
												(NewPredNode, _cor54)
											in  %% Line 569
											    apply 'enter_node'/2
												(NewPredNode2, _cor56)
									-| [{'id',{0,0,'-nodes_from_cfg/2-fun-3-'}}] )
								  in  let <NewNodesAcc2> =
									  %% Line 564
									  call 'lists':'foldl'
									      (_cor60, %% Line 570
										       NewNodesAcc, %% Line 570
												    PreLoopPreds)
								      in  %% Line 572
									  {NewNodesAcc2,NewNonFailAcc}
						      ( <_cor49> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor49})
							-| ['compiler_generated'] )
						    end
		    ( <_cor65,_cor64> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor65,_cor64})
			    -| [{'function_name',{'-nodes_from_cfg/2-fun-4-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-nodes_from_cfg/2-fun-4-'}}] )
	in  let <_cor4> =
		%% Line 573
		apply 'nodes_create'/0
		    ()
	    in  let <_cor3> =
		    %% Line 573
		    call 'gb_sets':'new'
			()
		in  let <_cor2> =
			%% Line 573
			call 'hipe_icode_cfg':'reverse_postorder'
			    (_cor1)
		    in  %% Line 486
			call 'lists':'foldl'
			    (_cor66, %% Line 573
				     {_cor4,_cor3}, _cor2)
'get_back_trace_rec'/3 =
    %% Line 578
    fun (_cor2,_cor1,_cor0) ->
	%% Line 581
	case call 'gb_sets':'is_member'
		 (_cor1, _cor0) of
	  %% Line 582
	  <'false'> when 'true' ->
	      let <Preds> =
		  %% Line 583
		  call 'hipe_icode_cfg':'pred'
		      (_cor2, _cor1)
	      in  let <_cor9> =
		      %% Line 584
		      ( fun (_cor6,_cor5) ->
			    %% Line 585
			    apply 'get_back_trace_rec'/3
				(_cor2, _cor6, _cor5)
			-| [{'id',{0,0,'-get_back_trace_rec/3-fun-0-'}}] )
		  in  let <_cor4> =
			  %% Line 586
			  call 'gb_sets':'add'
			      (_cor1, _cor0)
		      in  %% Line 584
			  call 'lists':'foldl'
			      (_cor9, _cor4, %% Line 586
					     Preds)
	  %% Line 587
	  <'true'> when 'true' ->
	      _cor0
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'prune_nodes'/2 =
    %% Line 594
    fun (_cor1,_cor0) ->
	let <_cor29> =
	    %% Line 595
	    ( fun (_cor26,_cor25) ->
		  let <_cor3> =
		      %% Line 596
		      apply 'node_label'/1
			  (_cor26)
		  in  %% Line 596
		      case call 'gb_sets':'is_member'
			       (_cor3, _cor0) of
			%% Line 597
			<'true'> when 'true' ->
			    let <_cor10> =
				%% Line 598
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[L|_cor5]> when 'true' ->
						    ( case call 'gb_sets':'is_member'
							       (L, _cor0) of
							<'true'> when 'true' ->
							    let <_cor8> =
								apply 'lc$^0'/1
								    (_cor5)
							    in  ( [L|_cor8]
								  -| ['compiler_generated'] )
							( <'false'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor5)
							  -| ['compiler_generated'] )
							( <_cor9> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor9})
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor6> =
					  apply 'node_succ'/1
					      (_cor26)
				      in  apply 'lc$^0'/1
					      (_cor6)
				  -| ['list_comprehension'] )
			    in  let <_cor18> =
				    %% Line 599
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor15) ->
						  case _cor15 of
						    <[L|_cor13]> when 'true' ->
							( case call 'gb_sets':'is_member'
								   (L, _cor0) of
							    <'true'> when 'true' ->
								let <_cor16> =
								    apply 'lc$^1'/1
									(_cor13)
								in  ( [L|_cor16]
								      -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor13)
							      -| ['compiler_generated'] )
							    ( <_cor17> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor17})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor15> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor15})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor14> =
					      apply 'node_pred'/1
						  (_cor26)
					  in  apply 'lc$^1'/1
						  (_cor14)
				      -| ['list_comprehension'] )
				in  %% Line 600
				    case _cor26 of
				      <{'node',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}> when 'true' ->
					  let <_cor21> =
					      call 'erlang':'setelement'
						  (4, _cor26, _cor10)
					  in  let <_cor23> =
						  call 'erlang':'setelement'
						      (3, _cor21, _cor18)
					      in  apply 'enter_node'/2
						      (_cor23, _cor25)
				      ( <_cor48> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','node'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			%% Line 601
			<'false'> when 'true' ->
			    %% Line 602
			    apply 'remove_node'/2
				(_cor26, _cor25)
			( <_cor24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor24})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-prune_nodes/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 604
		apply 'nodes_tree_values'/1
		    (_cor1)
	    in  %% Line 595
		call 'lists':'foldl'
		    (_cor29, _cor1, _cor2)
'create_maps'/1 =
    %% Line 612
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 613
	    ( fun (_cor9,_cor8) ->
		  let <Node> =
		      %% Line 614
		      apply 'get_node'/2
			  (_cor9, _cor0)
		  in  let <NewMapsAcc> =
			  %% Line 615
			  apply 'maps_from_node_struct_type'/2
			      (_cor8, Node)
		      in  let <NewMapsAcc2> =
			      %% Line 616
			      apply 'maps_from_node_struct_elems'/2
				  (NewMapsAcc, Node)
			  in  %% Line 618
			      apply 'maps_from_node_code'/2
				  (NewMapsAcc2, Node)
	      -| [{'id',{0,0,'-create_maps/1-fun-0-'}}] )
	in  let <_cor4> =
		call 'gb_trees':'empty'
		    ()
	    in  let <_cor3> =
		    call 'gb_trees':'empty'
			()
		in  let <_cor2> =
			call 'gb_trees':'empty'
			    ()
		    in  let <_cor1> =
			    %% Line 619
			    apply 'nodes_rev_postorder'/1
				(_cor0)
			in  let <Maps> =
				%% Line 613
				call 'lists':'foldl'
				    (_cor12, %% Line 619
					     {'maps',_cor4,_cor3,_cor2}, _cor1)
			    in  %% Line 620
				apply 'maps_balance'/1
				    (Maps)
'maps_from_node_struct_type'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 628
	    ( fun (_cor8,_cor7) ->
		  case <_cor8,_cor7> of
		    <{Type,Var,Size},MapsAcc> when 'true' ->
			let <Key> =
			    %% Line 629
			    apply 'create_elem_expr_key'/3
				(Size, Var, [])
			in  let <InstrKey> =
				%% Line 630
				call 'hipe_icode':'mk_primop'
				    ([], Type, Key)
			    in  let <NewExpr2> =
				    %% Line 631
				    apply 'expr_create'/2
					(InstrKey, [Var|[]])
				in  let <NewExpr3> =
					%% Line 632
					apply 'expr_direct_replace_set'/2
					    (NewExpr2, 'true')
				    in  %% Line 633
					apply 'maps_expr_key_enter'/2
					    (NewExpr3, MapsAcc)
		    ( <_cor10,_cor9> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor10,_cor9})
			    -| [{'function_name',{'-maps_from_node_struct_type/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-maps_from_node_struct_type/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 634
		apply 'node_struct_type'/1
		    (_cor0)
	    in  %% Line 628
		call 'lists':'foldl'
		    (_cor11, _cor1, _cor2)
'create_elem_expr_key'/3 =
    %% Line 636
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor7,Key> when 'true' ->
	      Key
	  %% Line 637
	  <N,Var,Key> when 'true' ->
	      let <_cor3> =
		  %% Line 638
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 638
		  apply 'create_elem_expr_key'/3
		      (_cor3, Var, [{Var,N}|Key])
	end
'maps_from_node_struct_elems'/2 =
    %% Line 669
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 670
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{Dst,Num,Src},MapsAcc> when 'true' ->
			let <_cor3> =
			    call 'ordsets':'new'
				()
			in  let <VarInfo> =
				%% Line 671
				{'varinfo',_cor3,'none',{Src,Num},'none'}
			    in  %% Line 672
				apply 'maps_var_insert'/3
				    (Dst, VarInfo, MapsAcc)
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-maps_from_node_struct_elems/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-maps_from_node_struct_elems/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 673
		apply 'node_struct_elems'/1
		    (_cor0)
	    in  %% Line 670
		call 'lists':'foldl'
		    (_cor9, _cor1, _cor2)
'maps_from_node_code'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 683
	    ( fun (_cor13,_cor12) ->
		  let <InstrKey> =
		      %% Line 687
		      call 'hipe_icode':'call_dstlist_update'
			  (_cor13, [])
		  in  %% Line 690
		      case %% Line 691
			   apply 'replace_call_vars_elems'/2
			       (_cor12, InstrKey) of
			<{HasElems,RefKey,ElemKey}> when 'true' ->
			    %% Line 694
			    case HasElems of
			      %% Line 695
			      <'true'> when 'true' ->
				  %% Line 698
				  case apply 'maps_instr_lookup'/2
					   (ElemKey, _cor12) of
				    %% Line 699
				    <{'value',ExprId}> when 'true' ->
					%% Line 708
					case apply 'maps_expr_get'/2
						 (ExprId, _cor12) of
					  <{'expr',_cor19,_cor20,[Var|[]],_cor21,_cor22,_cor23}> when 'true' ->
					      let <_cor7> =
						  %% Line 710
						  case apply 'maps_var_lookup'/2
							   (Var, _cor12) of
						    %% Line 711
						    <{'value',{'varinfo',_cor24,_cor25,Elem,'none'}}>
							when call 'erlang':'=/='
							      (Elem,
							       'none') ->
							%% Line 712
							Elem
						    %% Line 713
						    <_cor26> when 'true' ->
							'none'
						  end
					      in  let <Defines> =
						      %% Line 715
						      call 'hipe_icode':'defines'
							  (_cor13)
						  in  %% Line 716
						      apply 'maps_varinfos_create'/4
							  (Defines, ExprId, _cor7, _cor12)
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor5})
					    -| ['compiler_generated'] )
					end
				    %% Line 717
				    <'none'> when 'true' ->
					%% Line 719
					apply 'maps_expr_varinfos_create'/3
					    (_cor13, RefKey, _cor12)
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor10})
				      -| ['compiler_generated'] )
				  end
			      %% Line 721
			      <'false'> when 'true' ->
				  %% Line 723
				  apply 'maps_expr_varinfos_create'/3
				      (_cor13, RefKey, _cor12)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-maps_from_node_code/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 725
		apply 'node_code'/1
		    (_cor0)
	    in  %% Line 683
		call 'lists':'foldl'
		    (_cor16, _cor1, _cor2)
'maps_varinfos_create'/4 =
    %% Line 731
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'ordsets':'new'
		()
	in  let <VarInfo> =
		%% Line 732
		{'varinfo',_cor4,'none',_cor1,_cor2}
	    in  let <_cor17> =
		    %% Line 734
		    ( fun (_cor14,_cor13) ->
			  case <_cor14,_cor13> of
			    <Def,{Maps,NumAcc}> when 'true' ->
				let <_rec47> = {_cor2,%% Line 735
					   NumAcc}
				in  %% Line 735
				    case VarInfo of
				      <{'varinfo',_cor23,_cor24,_cor25,_cor26}> when 'true' ->
					  let <_cor9> =
					      call 'erlang':'setelement'
						  (3, VarInfo, _rec47)
					  in  let <_cor12> =
						  %% Line 736
						  apply 'maps_var_insert'/3
						      (Def, _cor9, Maps)
					      in  let <_cor11> =
						      %% Line 736
						      call 'erlang':'+'
							  (NumAcc, 1)
						  in  %% Line 736
						      {_cor12,_cor11}
				      ( <_cor27> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','varinfo'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			    ( <_cor16,_cor15> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor16,_cor15})
				    -| [{'function_name',{'-maps_varinfos_create/4-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-maps_varinfos_create/4-fun-0-'}}] )
		in  %% Line 733
		    case %% Line 734
			 call 'lists':'foldl'
			     (_cor17, %% Line 737
				      {_cor0,1}, _cor3) of
		      <{MapsOut,_cor28}> when 'true' ->
			  %% Line 738
			  MapsOut
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor18})
			-| ['compiler_generated'] )
		    end
'maps_expr_varinfos_create'/3 =
    %% Line 745
    fun (_cor2,_cor1,_cor0) ->
	let <Defines> =
	    %% Line 746
	    call 'hipe_icode':'defines'
		(_cor2)
	in  let <ExprId,Maps2> =
		%% Line 748
		case apply 'maps_instr_lookup'/2
			 (_cor1, _cor0) of
		  %% Line 749
		  <{'value',EId}> when 'true' ->
		      %% Line 750
		      <EId,_cor0>
		  %% Line 751
		  <'none'> when 'true' ->
		      let <NewExpr> =
			  %% Line 752
			  apply 'expr_create'/2
			      (_cor1, Defines)
		      in  let <_cor6> =
			      %% Line 753
			      apply 'expr_id'/1
				  (NewExpr)
			  in  let <_cor5> =
				  %% Line 753
				  apply 'maps_expr_key_enter'/2
				      (NewExpr, _cor0)
			      in  <_cor6,_cor5>
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
	    in  let <Maps3> =
		    %% Line 755
		    apply 'maps_varinfos_create'/4
			(Defines, ExprId, 'none', Maps2)
		in  %% Line 756
		    apply 'update_maps_var_use'/3
			(_cor2, ExprId, Maps3)
'replace_call_vars_elems'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	let <VarMap> =
	    %% Line 766
	    apply 'maps_var'/1
		(_cor1)
	in  let <_cor10> =
		%% Line 768
		( fun (_cor7,_cor6) ->
		      case <_cor7,_cor6> of
			<Arg,{HasElems,Vars,Elems}> when 'true' ->
			    %% Line 769
			    case call 'hipe_icode':'is_const'
				     (Arg) of
			      %% Line 770
			      <'false'> when 'true' ->
				  %% Line 771
				  case call 'gb_trees':'lookup'
					   (Arg, VarMap) of
				    %% Line 772
				    <'none'> when 'true' ->
					%% Line 773
					{HasElems,[Arg|Vars],[Arg|Elems]}
				    %% Line 774
				    <{'value',{'varinfo',_cor16,'none','none',_cor17}}> when 'true' ->
					%% Line 775
					{HasElems,[Arg|Vars],[Arg|Elems]}
				    %% Line 776
				    <{'value',{'varinfo',_cor18,Ref,'none',_cor19}}> when 'true' ->
					%% Line 777
					{HasElems,[Ref|Vars],[Ref|Elems]}
				    %% Line 778
				    <{'value',{'varinfo',_cor20,'none',Elem,_cor21}}> when 'true' ->
					%% Line 779
					{'true',[Arg|Vars],[Elem|Elems]}
				    %% Line 780
				    <{'value',{'varinfo',_cor22,Ref,Elem,_cor23}}> when 'true' ->
					%% Line 781
					{'true',[Ref|Vars],[Elem|Elems]}
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			      %% Line 783
			      <'true'> when 'true' ->
				  %% Line 784
				  {HasElems,[Arg|Vars],[Arg|Elems]}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			( <_cor9,_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9,_cor8})
				-| [{'function_name',{'-replace_call_vars_elems/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-replace_call_vars_elems/2-fun-0-'}}] )
	    in  let <_cor3> =
		    %% Line 785
		    call 'hipe_icode':'args'
			(_cor0)
		in  %% Line 767
		    case %% Line 768
			 call 'lists':'foldr'
			     (_cor10, %% Line 785
				      {'false',[],[]}, _cor3) of
		      <{HasElems,Vars,Elems}> when 'true' ->
			  let <_cor13> =
			      %% Line 786
			      call 'hipe_icode':'call_args_update'
				  (_cor0, Vars)
			  in  let <_cor12> =
				  %% Line 787
				  call 'hipe_icode':'call_args_update'
				      (_cor0, Elems)
			      in  %% Line 786
				  {HasElems,_cor13,_cor12}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
'update_maps_var_use'/3 =
    %% Line 795
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 796
	    ( fun (_cor11,_cor10) ->
		  let <VarInfo> =
		      %% Line 797
		      apply 'get_varinfo'/2
			  (_cor11, _cor10)
		  in  let <NewVarInfo> =
			  %% Line 798
			  apply 'varinfo_use_add'/2
			      (VarInfo, _cor1)
		      in  let <MapsAcc2> =
			      %% Line 799
			      apply 'maps_var_enter'/3
				  (_cor11, NewVarInfo, _cor10)
			  in  %% Line 800
			      case apply 'varinfo_exprid'/1
				       (VarInfo) of
				%% Line 801
				<'none'> when 'true' ->
				    %% Line 802
				    MapsAcc2
				%% Line 803
				<VarExprId> when 'true' ->
				    let <Expr> =
					%% Line 804
					apply 'maps_expr_get'/2
					    (VarExprId, MapsAcc2)
				    in  let <NewExpr> =
					    %% Line 805
					    apply 'expr_use_add'/2
						(Expr, _cor1)
					in  %% Line 806
					    apply 'maps_expr_enter'/2
						(NewExpr, MapsAcc2)
			      end
	      -| [{'id',{0,0,'-update_maps_var_use/3-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 808
		call 'hipe_icode':'uses'
		    (_cor2)
	    in  %% Line 796
		call 'lists':'foldl'
		    (_cor14, _cor0, _cor3)
'get_varinfo'/2 =
    %% Line 813
    fun (_cor1,_cor0) ->
	%% Line 814
	case apply 'maps_var_lookup'/2
		 (_cor1, _cor0) of
	  %% Line 815
	  <{'value',Info}> when 'true' ->
	      %% Line 816
	      Info
	  %% Line 817
	  <'none'> when 'true' ->
	      let <_cor2> =
		  call 'ordsets':'new'
		      ()
	      in  %% Line 818
		  {'varinfo',_cor2,'none','none','none'}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'replace_call_variables'/2 =
    %% Line 826
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 827
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 830
			      Arg|_cor3]> when 'true' ->
				let <_cor7> =
				    case call 'hipe_icode':'is_const'
					     (Arg) of
				      %% Line 828
				      <'false'> when 'true' ->
					  apply _cor1
					      (Arg)
				      %% Line 829
				      <'true'> when 'true' ->
					  Arg
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				in  let <_cor8> =
					%% Line 830
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor7|_cor8]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      %% Line 830
		      call 'hipe_icode':'args'
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 831
	    call 'hipe_icode':'call_args_update'
		(_cor0, _cor9)
'init_nodes'/2 =
    %% Line 836
    fun (_cor1,_cor0) ->
	let <AllExpr> =
	    %% Line 837
	    apply 'maps_expr_keys'/1
		(_cor0)
	in  let <_cor20> =
		%% Line 838
		( fun (_cor17,_cor16) ->
		      let <_cor5> =
			  %% Line 839
			  apply 'maps_var'/1
			      (_cor0)
		      in  let <UEExpr> =
			      %% Line 839
			      apply 'calc_up_exposed_expr'/2
				  (_cor5, _cor17)
			  in  let <KilledExpr> =
				  %% Line 842
				  apply 'calc_killed_expr'/2
				      (_cor17, _cor0)
			      in  let <_cor9> =
				      %% Line 847
				      case apply 'node_succ'/1
					       (_cor17) of
					%% Line 848
					<[]> when 'true' ->
					    %% Line 849
					    call 'ordsets':'new'
						()
					%% Line 850
					<_cor23> when 'true' ->
					    %% Line 851
					    AllExpr
				      end
				  in  %% Line 853
				      case _cor17 of
					<{'node',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
					    let <_cor12> =
						%% Line 855
						call 'erlang':'setelement'
						    (15, _cor17, _cor9)
					    in  let <_cor13> =
						    %% Line 854
						    call 'erlang':'setelement'
							(11, _cor12, KilledExpr)
						in  let <_cor15> =
							call 'erlang':'setelement'
							    (10, _cor13, UEExpr)
						    in  apply 'enter_node'/2
							    (_cor15, _cor16)
					( <_cor40> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','node'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
		  -| [{'id',{0,0,'-init_nodes/2-fun-0-'}}] )
	    in  let <_cor4> =
		    %% Line 856
		    apply 'nodes_all_expr_set'/2
			(AllExpr, _cor1)
		in  let <_cor3> =
			%% Line 856
			apply 'nodes_tree_values'/1
			    (_cor1)
		    in  %% Line 838
			call 'lists':'foldl'
			    (_cor20, _cor4, _cor3)
'calc_up_exposed_expr'/2 =
    %% Line 861
    fun (_cor1,_cor0) ->
	let <NonStructDefs> =
	    %% Line 863
	    apply 'node_non_struct_defs'/1
		(_cor0)
	in  let <_cor25> =
		%% Line 865
		( fun (_cor22,_cor21) ->
		      case <_cor22,_cor21> of
			<Instr,{NotToUseAcc,ExprIdAcc}> when 'true' ->
			    let <Defs> =
				%% Line 866
				call 'hipe_icode':'defines'
				    (Instr)
			    in  let <Uses> =
				    %% Line 867
				    call 'hipe_icode':'uses'
					(Instr)
				in  let <_cor9> =
					%% Line 869
					( fun (_cor7) ->
					      call 'gb_sets':'is_member'
						  (_cor7, NotToUseAcc)
					  -| [{'id',{0,0,'-calc_up_exposed_expr/2-fun-0-'}}] )
				    in  %% Line 870
					case call 'lists':'any'
						 (_cor9, Uses) of
					  %% Line 871
					  <'false'> when 'true' ->
					      let <_cor16> =
						  %% Line 873
						  ( fun (_cor13,_cor12) ->
							%% Line 874
							case call 'gb_trees':'get'
								 (_cor13, _cor1) of
							  <{'varinfo',_cor29,_cor30,_cor31,Id}> when 'true' ->
							      %% Line 875
							      call 'ordsets':'add_element'
								  (Id, _cor12)
							  ( <_cor11> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor11})
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-calc_up_exposed_expr/2-fun-1-'}}] )
					      in  let <NewExprIdAcc> =
						      %% Line 873
						      call 'lists':'foldl'
							  (_cor16, %% Line 875
								   ExprIdAcc, %% Line 875
									      Defs)
						  in  %% Line 876
						      {NotToUseAcc,NewExprIdAcc}
					  %% Line 877
					  <'true'> when 'true' ->
					      let <_cor18> =
						  %% Line 879
						  call 'gb_sets':'from_list'
						      (Defs)
					      in  let <NewNotToUse> =
						      %% Line 879
						      call 'gb_sets':'union'
							  (_cor18, NotToUseAcc)
						  in  %% Line 880
						      {NewNotToUse,ExprIdAcc}
					  ( <_cor20> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor20})
					    -| ['compiler_generated'] )
					end
			( <_cor24,_cor23> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor24,_cor23})
				-| [{'function_name',{'-calc_up_exposed_expr/2-fun-2-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-calc_up_exposed_expr/2-fun-2-'}}] )
	    in  let <_cor4> =
		    %% Line 882
		    call 'ordsets':'new'
			()
		in  let <_cor3> =
			%% Line 882
			apply 'node_code'/1
			    (_cor0)
		    in  %% Line 864
			case %% Line 865
			     call 'lists':'foldl'
				 (_cor25, %% Line 882
					  {NonStructDefs,_cor4}, _cor3) of
			  <{_cor32,ExprIdSet}> when 'true' ->
			      %% Line 883
			      ExprIdSet
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor26})
			    -| ['compiler_generated'] )
			end
'calc_killed_expr'/2 =
    %% Line 888
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 889
	    apply 'node_non_struct_defs_list'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 889
		call 'ordsets':'new'
		    ()
	    in  %% Line 889
		apply 'calc_killed_expr_defs'/3
		    (_cor3, _cor2, _cor0)
'calc_killed_expr_defs'/3 =
    %% Line 891
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 892
	    ( fun (_cor6,_cor5) ->
		  %% Line 893
		  case apply 'maps_var_lookup'/2
			   (_cor6, _cor0) of
		    %% Line 894
		    <'none'> when 'true' ->
			_cor5
		    %% Line 896
		    <{'value',{'varinfo',Use,_cor13,_cor14,_cor15}}> when 'true' ->
			let <_cor3> =
			    %% Line 897
			    apply 'calc_killed_expr_use'/2
				(Use, _cor0)
			in  %% Line 897
			    call 'ordsets':'union'
				(_cor5, _cor3)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-calc_killed_expr_defs/3-fun-0-'}}] )
	in  %% Line 892
	    call 'lists':'foldl'
		(_cor9, _cor1, _cor2)
'calc_killed_expr_use'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 902
	    ( fun (_cor6,_cor5) ->
		  let <Expr> =
		      %% Line 903
		      apply 'maps_expr_get'/2
			  (_cor6, _cor0)
		  in  let <_cor3> =
			  %% Line 904
			  apply 'expr_use'/1
			      (Expr)
		      in  let <_cor4> =
			      %% Line 904
			      apply 'calc_killed_expr_use'/2
				  (_cor3, _cor0)
			  in  %% Line 904
			      call 'ordsets':'union'
				  (_cor5, _cor4)
	      -| [{'id',{0,0,'-calc_killed_expr_use/2-fun-0-'}}] )
	in  %% Line 902
	    call 'ordsets':'fold'
		(_cor9, _cor1, _cor1)
'calc_anticipated'/1 =
    %% Line 910
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 911
	    apply 'nodes_postorder'/1
		(_cor0)
	in  %% Line 911
	    apply 'calc_anticipated_rec'/2
		(_cor0, _cor1)
'calc_anticipated_rec'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NodesIn,[]> when 'true' ->
	      NodesIn
	  %% Line 914
	  <NodesIn,WorkIn> when 'true' ->
	      let <_cor33> =
		  %% Line 916
		  ( fun (_cor30,_cor29) ->
			case <_cor30,_cor29> of
			  <Label,{NodesAcc,WorkAcc}> when 'true' ->
			      let <Node> =
				  %% Line 917
				  apply 'get_node'/2
				      (Label, NodesAcc)
			      in  let <_cor7> =
				      %% Line 921
				      apply 'node_up_expr'/1
					  (Node)
				  in  let <_cor5> =
					  %% Line 922
					  apply 'node_antic_out'/1
					      (Node)
				      in  let <_cor4> =
					      %% Line 922
					      apply 'node_killed_expr'/1
						  (Node)
					  in  let <_cor6> =
						  %% Line 922
						  call 'ordsets':'subtract'
						      (_cor5, _cor4)
					      in  let <AnticIn> =
						      %% Line 921
						      call 'ordsets':'union'
							  (_cor7, _cor6)
						  in  let <_cor9> =
							  %% Line 925
							  apply 'node_antic_in'/1
							      (Node)
						      in  %% Line 925
							  case <> of
							    %% Line 945
							    <>
								when call 'erlang':'=:='
								      (_cor9,
								       AnticIn) ->
								%% Line 946
								{NodesAcc,WorkAcc}
							    %% Line 926
							    <> when 'true' ->
								%% Line 927
								case Node of
								  <{'node',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
								      let <_cor12> =
									  call 'erlang':'setelement'
									      (14, Node, AnticIn)
								      in  let <NewNodes1> =
									      apply 'enter_node'/2
										  (_cor12, NodesAcc)
									  in  let <Preds> =
										  %% Line 928
										  apply 'node_pred'/1
										      (Node)
									      in  let <_cor25> =
										      %% Line 932
										      ( fun (_cor22,_cor21) ->
											    let <PredNode> =
												%% Line 933
												apply 'get_node'/2
												    (_cor22, _cor21)
											    in  let <_cor16> =
												    %% Line 934
												    apply 'node_antic_out'/1
													(PredNode)
												in  let <AnticOut> =
													%% Line 934
													call 'ordsets':'intersection'
													    (AnticIn, _cor16)
												    in  %% Line 938
													case PredNode of
													  <{'node',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
													      let <_cor20> =
														  call 'erlang':'setelement'
														      (15, PredNode, AnticOut)
													      in  apply 'enter_node'/2
														      (_cor20, _cor21)
													  ( <_cor71> when 'true' ->
														( call ( 'erlang'
															 -| ['compiler_generated'] ):( 'error'
																		       -| ['compiler_generated'] )
														      (( {'badrecord','node'}
															 -| ['compiler_generated'] ))
														  -| ['compiler_generated'] )
													    -| ['compiler_generated'] )
													end
											-| [{'id',{0,0,'-calc_anticipated_rec/2-fun-0-'}}] )
										  in  let <NewNodes2> =
											  %% Line 932
											  call 'lists':'foldl'
											      (_cor25, %% Line 939
												       NewNodes1, %% Line 939
														  Preds)
										      in  let <NewWork> =
											      %% Line 941
											      apply 'add_work_list'/2
												  (Preds, WorkAcc)
											  in  %% Line 944
											      {NewNodes2,NewWork}
								  ( <_cor54> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','node'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							  end
			  ( <_cor32,_cor31> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor32,_cor31})
				  -| [{'function_name',{'-calc_anticipated_rec/2-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-calc_anticipated_rec/2-fun-1-'}}] )
	      in  let <_cor2> =
		      %% Line 948
		      apply 'new_work'/0
			  ()
		  in  %% Line 915
		      case %% Line 916
			   call 'lists':'foldl'
			       (_cor33, %% Line 948
					{NodesIn,_cor2}, %% Line 948
							 WorkIn) of
			<{NodesOut,WorkOut}> when 'true' ->
			    let <_cor35> =
				%% Line 950
				apply 'get_work_list'/1
				    (WorkOut)
			    in  %% Line 950
				apply 'calc_anticipated_rec'/2
				    (NodesOut, _cor35)
			( <_cor34> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor34})
			  -| ['compiler_generated'] )
		      end
	end
'calc_inserts'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	let <DomTree> =
	    %% Line 960
	    apply 'nodes_domtree'/1
		(_cor1)
	in  let <_cor49> =
		%% Line 962
		( fun (_cor46,_cor45) ->
		      case <_cor46,_cor45> of
			<Label,{NodesAcc,MapsAcc}> when 'true' ->
			    let <Node> =
				%% Line 963
				apply 'get_node'/2
				    (Label, NodesAcc)
			    in  let <UpExpr> =
				    %% Line 966
				    apply 'node_up_expr'/1
					(Node)
				in  let <AnticOut> =
					%% Line 967
					apply 'node_antic_out'/1
					    (Node)
				    in  let <SubIns> =
					    %% Line 968
					    apply 'node_sub_inserts'/1
						(Node)
					in  let <_cor31> =
						%% Line 973
						( fun (_cor28,_cor27) ->
						      case <_cor28,_cor27> of
							<ExprId,{HasInsAcc,MapsAcc2}> when 'true' ->
							    let <Expr> =
								%% Line 974
								apply 'maps_expr_get'/2
								    (ExprId, MapsAcc2)
							    in  let <ExprIns> =
								    %% Line 976
								    apply 'expr_inserts'/1
									(Expr)
								in  let <ExprSubIns> =
									%% Line 977
									call 'ordsets':'intersection'
									    (ExprIns, SubIns)
								    in  let <_cor13> =
									    %% Line 986
									    call 'erlang':'length'
										(ExprSubIns)
									in  let <_cor17> =
										%% Line 986
										( case <> of
										    ( <>
											  when call 'erlang':'>'
												(_cor13,
												 1) ->
											  'true'
										      -| ['compiler_generated'] )
										    ( <> when 'true' ->
											  %% Line 987
											  ( case call 'ordsets':'is_element'
												     (ExprId, UpExpr) of
											      ( <( 'true'
												   -| ['compiler_generated'] )> when 'true' ->
												    'true'
												-| ['compiler_generated'] )
											      ( <( 'false'
												   -| ['compiler_generated'] )> when 'true' ->
												    apply 'node_pre_loop'/1
													(Node)
												-| ['compiler_generated'] )
											      ( <_cor14> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {( 'badarg'
														-| ['compiler_generated'] ),_cor14}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
									    in  %% Line 986
										case _cor17 of
										  %% Line 988
										  <'true'> when 'true' ->
										      let <_cor20> =
											  %% Line 992
											  ( fun (_cor18) ->
												%% Line 993
												call 'hipe_dominators':'domTree_dominates'
												    (Label, _cor18, DomTree)
											    -| [{'id',{0,0,'-calc_inserts/2-fun-0-'}}] )
										      in  let <Dominates> =
											      %% Line 992
											      call 'ordsets':'filter'
												  (_cor20, %% Line 994
													   ExprSubIns)
											  in  let <NewIns> =
												  %% Line 997
												  call 'ordsets':'subtract'
												      (ExprIns, Dominates)
											      in  let <NewIns2> =
												      %% Line 998
												      call 'ordsets':'add_element'
													  (Label, NewIns)
												  in  let <_cor24> =
													  %% Line 1002
													  apply 'expr_inserts_set'/2
													      (Expr, NewIns2)
												      in  let <NewMaps> =
													      %% Line 1002
													      apply 'maps_expr_enter'/2
														  (_cor24, MapsAcc2)
													  in  %% Line 1003
													      {'true',NewMaps}
										  %% Line 1004
										  <'false'> when 'true' ->
										      %% Line 1005
										      {HasInsAcc,MapsAcc2}
										  ( <_cor26> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor26})
										    -| ['compiler_generated'] )
										end
							( <_cor30,_cor29> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor30,_cor29})
								-| [{'function_name',{'-calc_inserts/2-fun-1-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-calc_inserts/2-fun-1-'}}] )
					    in  let <_cor8> =
						    %% Line 1007
						    call 'ordsets':'union'
							(AnticOut, UpExpr)
						in  %% Line 972
						    case %% Line 973
							 call 'ordsets':'fold'
							     (_cor31, %% Line 1007
								      {'false',MapsAcc}, _cor8) of
						      <{HasIns,NewMapsAcc}> when 'true' ->
							  let <_cor34> =
							      %% Line 1012
							      case HasIns of
								%% Line 1013
								<'true'> when 'true' ->
								    %% Line 1014
								    call 'ordsets':'add_element'
									(Label, SubIns)
								%% Line 1015
								<'false'> when 'true' ->
								    %% Line 1016
								    SubIns
								( <_cor33> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor33})
								  -| ['compiler_generated'] )
							      end
							  in  let <_cor43> =
								  %% Line 1021
								  ( fun (_cor40,_cor39) ->
									let <PredNode> =
									    %% Line 1022
									    apply 'get_node'/2
										(_cor40, _cor39)
									in  let <_cor38> =
										%% Line 1023
										apply 'node_union_sub_inserts'/2
										    (PredNode, _cor34)
									    in  %% Line 1023
										apply 'enter_node'/2
										    (_cor38, _cor39)
								    -| [{'id',{0,0,'-calc_inserts/2-fun-2-'}}] )
							      in  let <_cor36> =
								      %% Line 1024
								      apply 'node_pred'/1
									  (Node)
								  in  let <NewNodes2> =
									  %% Line 1021
									  call 'lists':'foldl'
									      (_cor43, %% Line 1024
										       NodesAcc, _cor36)
								      in  %% Line 1026
									  {NewNodes2,NewMapsAcc}
						      ( <_cor32> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor32})
							-| ['compiler_generated'] )
						    end
			( <_cor48,_cor47> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor48,_cor47})
				-| [{'function_name',{'-calc_inserts/2-fun-3-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-calc_inserts/2-fun-3-'}}] )
	    in  let <_cor3> =
		    %% Line 1028
		    apply 'nodes_postorder'/1
			(_cor1)
		in  %% Line 962
		    call 'lists':'foldl'
			(_cor49, %% Line 1028
				 {_cor1,_cor0}, _cor3)
'update_nodes_inserts'/2 =
    %% Line 1035
    fun (_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 1036
	    ( fun (_cor13,_cor12) ->
		  let <ExprId> =
		      %% Line 1037
		      apply 'expr_id'/1
			  (_cor13)
		  in  let <_cor11> =
			  %% Line 1038
			  ( fun (_cor8,_cor7) ->
				let <Nd> =
				    %% Line 1039
				    apply 'get_node'/2
					(_cor8, _cor7)
				in  let <_cor6> =
					%% Line 1040
					apply 'node_add_insert'/2
					    (Nd, ExprId)
				    in  %% Line 1040
					apply 'enter_node'/2
					    (_cor6, _cor7)
			    -| [{'id',{0,0,'-update_nodes_inserts/2-fun-0-'}}] )
		      in  let <_cor4> =
			      %% Line 1041
			      apply 'expr_inserts'/1
				  (_cor13)
			  in  %% Line 1038
			      call 'ordsets':'fold'
				  (_cor11, _cor12, _cor4)
	      -| [{'id',{0,0,'-update_nodes_inserts/2-fun-1-'}}] )
	in  let <_cor2> =
		%% Line 1042
		apply 'maps_expr_values'/1
		    (_cor0)
	    in  %% Line 1036
		call 'lists':'foldl'
		    (_cor16, _cor1, _cor2)
'rewrite_cfg'/3 =
    %% Line 1050
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1052
	    call 'ordsets':'new'
		()
	in  let <_cor4> =
		call 'gb_trees':'empty'
		    ()
	    in  let <_cor3> =
		    %% Line 1052
		    apply 'nodes_start_label'/1
			(_cor1)
		in  %% Line 1051
		    case %% Line 1052
			 apply 'rewrite_cfg'/6
			     (_cor2, _cor5, {'update',_cor4,'false'}, _cor1, _cor0, [_cor3|[]]) of
		      <{NewCFG,_X_Visited}> when 'true' ->
			  %% Line 1054
			  NewCFG
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'rewrite_cfg'/6 =
    %% Line 1062
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 1063
	    ( fun (_cor12,_cor11) ->
		  case <_cor12,_cor11> of
		    <Label,{CFGAcc,VisitedAcc}> when 'true' ->
			%% Line 1064
			case call 'ordsets':'is_element'
				 (Label, VisitedAcc) of
			  %% Line 1065
			  <'false'> when 'true' ->
			      let <Node> =
				  %% Line 1067
				  apply 'get_node'/2
				      (Label, _cor2)
			      in  let <NewVisitedAcc> =
				      %% Line 1068
				      call 'ordsets':'add_element'
					  (Label, VisitedAcc)
				  in  %% Line 1069
				      case apply 'rewrite_bb'/4
					       (CFGAcc, _cor3, _cor1, Node) of
					<{NewCFGAcc,NewUpdate}> when 'true' ->
					    let <_cor9> =
						%% Line 1071
						apply 'node_succ'/1
						    (Node)
					    in  %% Line 1071
						apply 'rewrite_cfg'/6
						    (NewCFGAcc, NewVisitedAcc, NewUpdate, _cor2, _cor1, _cor9)
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			  %% Line 1072
			  <'true'> when 'true' ->
			      %% Line 1073
			      {CFGAcc,VisitedAcc}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    ( <_cor14,_cor13> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor14,_cor13})
			    -| [{'function_name',{'-rewrite_cfg/6-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-rewrite_cfg/6-fun-0-'}}] )
	in  %% Line 1063
	    call 'lists':'foldl'
		(_cor15, %% Line 1075
			 {_cor5,_cor4}, _cor0)
'rewrite_bb'/4 =
    %% Line 1082
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1083
	case _cor0 of
	  <{'node',Label,_cor77,_cor78,_cor79,_cor80,_cor81,PreLoop,_cor82,UpExpr,_cor83,_cor84,Inserts,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
	      let <_cor5> =
		  %% Line 1085
		  call 'hipe_icode_cfg':'bb'
		      (_cor3, Label)
	      in  let <Code> =
		      %% Line 1085
		      call 'hipe_bb':'code'
			  (_cor5)
		  in  let <DelRed> =
			  %% Line 1090
			  apply 'update_del_red_test'/1
			      (_cor2)
		      in  let <Delete> =
			      %% Line 1091
			      call 'ordsets':'subtract'
				  (UpExpr, Inserts)
			  in  let <GetInstrFunc> =
				  %% Line 1095
				  ( fun (_cor16) ->
					let <Instr> =
					    %% Line 1096
					    apply 'expr_key'/1
						(_cor16)
					in  let <Defs> =
						%% Line 1097
						apply 'expr_defs'/1
						    (_cor16)
					    in  let <_cor14> =
						    %% Line 1099
						    case <> of
						      %% Line 1100
						      <>
							  when call 'erlang':'=:='
								(PreLoop,
								 'true') ->
							  let <_cor13> =
							      %% Line 1101
							      ( fun (_cor11) ->
								    %% Line 1102
								    apply 'node_varmap_lookup'/2
									(_cor0, _cor11)
								-| [{'id',{0,0,'-rewrite_bb/4-fun-0-'}}] )
							  in  %% Line 1101
							      apply 'replace_call_variables'/2
								  (_cor13, %% Line 1105
									   Instr)
						      %% Line 1106
						      <> when 'true' ->
							  %% Line 1107
							  Instr
						    end
						in  %% Line 1109
						    {_cor14,Defs}
				    -| [{'id',{0,0,'-rewrite_bb/4-fun-1-'}}] )
			      in  let <_cor42> =
				      %% Line 1116
				      ( fun (_cor39,_cor38) ->
					    case <_cor39,_cor38> of
					      <Instr,{CodeAcc,UpdateAcc,LocalAcc}> when 'true' ->
						  %% Line 1117
						  case apply 'struct_instr_type'/1
							   (Instr) of
						    %% Line 1118
						    <'struct'> when 'true' ->
							let <Defs> =
							    %% Line 1119
							    call 'hipe_icode':'defines'
								(Instr)
							in  let <_cor21> =
								%% Line 1121
								call 'erlang':'hd'
								    (Defs)
							    in  %% Line 1121
								case apply 'maps_var_get'/2
									 (_cor21, _cor1) of
								  <{'varinfo',_cor89,_cor90,_cor91,ExprId}> when 'true' ->
								      let <Expr> =
									  %% Line 1123
									  apply 'maps_expr_get'/2
									      (ExprId, _cor1)
								      in  let <DirectReplace> =
									      %% Line 1124
									      apply 'expr_direct_replace'/1
										  (Expr)
									  in  let <RemoveFuncVars> =
										  %% Line 1127
										  ( fun (_cor26) ->
											let <CodeAcc2> =
											    %% Line 1128
											    apply 'mk_defs_moves'/3
												(CodeAcc, Defs, _cor26)
											in  %% Line 1129
											    {CodeAcc2,UpdateAcc,LocalAcc}
										    -| [{'id',{0,0,'-rewrite_bb/4-fun-2-'}}] )
									      in  let <RemoveFunc> =
										      %% Line 1133
										      ( fun () ->
											    %% Line 1134
											    case apply 'update_inserted_lookup'/2
												     (UpdateAcc, ExprId) of
											      <{'value',Vars}> when 'true' ->
												  %% Line 1135
												  apply RemoveFuncVars
												      (Vars)
											      ( <_cor29> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor29})
												-| ['compiler_generated'] )
											    end
											-| [{'id',{0,0,'-rewrite_bb/4-fun-3-'}}] )
										  in  let <IsLocal> =
											  %% Line 1138
											  call 'ordsets':'is_element'
											      (ExprId, LocalAcc)
										      in  %% Line 1140
											  case DirectReplace of
											    %% Line 1141
											    <'true'> when 'true' ->
												let <_cor32> =
												    %% Line 1145
												    apply 'expr_defs'/1
													(Expr)
												in  %% Line 1145
												    apply RemoveFuncVars
													(_cor32)
											    %% Line 1146
											    <'false'>
												when call 'erlang':'=:='
												      (IsLocal,
												       'true') ->
												%% Line 1148
												apply RemoveFunc
												    ()
											    %% Line 1149
											    <_cor92> when 'true' ->
												%% Line 1150
												case call 'ordsets':'is_element'
													 (ExprId, Delete) of
												  %% Line 1151
												  <'true'> when 'true' ->
												      %% Line 1153
												      apply RemoveFunc
													  ()
												  %% Line 1154
												  <_cor93> when 'true' ->
												      let <UpdateAcc2> =
													  %% Line 1156
													  apply 'update_inserted_add'/3
													      (UpdateAcc, ExprId, Defs)
												      in  let <LocalAcc2> =
													      %% Line 1157
													      call 'ordsets':'add_element'
														  (ExprId, LocalAcc)
													  in  %% Line 1158
													      {[Instr|CodeAcc],UpdateAcc2,LocalAcc2}
												end
											  end
								  ( <_cor22> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor22})
								    -| ['compiler_generated'] )
								end
						    %% Line 1161
						    <'redtest'>
							when call 'erlang':'=:='
							      (DelRed,
							       'true') ->
							%% Line 1163
							{CodeAcc,UpdateAcc,LocalAcc}
						    %% Line 1164
						    <_cor94> when 'true' ->
							%% Line 1165
							{[Instr|CodeAcc],UpdateAcc,LocalAcc}
						  end
					      ( <_cor41,_cor40> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor41,_cor40})
						      -| [{'function_name',{'-rewrite_bb/4-fun-4-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-rewrite_bb/4-fun-4-'}}] )
				  in  let <_cor19> =
					  %% Line 1167
					  call 'ordsets':'new'
					      ()
				      in  %% Line 1115
					  case %% Line 1116
					       call 'lists':'foldl'
						   (_cor42, %% Line 1167
							    {[],_cor2,_cor19}, %% Line 1167
									       Code) of
					    <{[CodeLast|CodeRest],NewUpdate,LocalAcc}> when 'true' ->
						let <_cor44> =
						    %% Line 1175
						    call 'ordsets':'subtract'
							(Inserts, UpExpr)
						in  let <NewInserts> =
							%% Line 1175
							call 'ordsets':'subtract'
							    (_cor44, LocalAcc)
						    in  let <_cor57> =
							    %% Line 1178
							    ( fun (_cor54,_cor53) ->
								  case <_cor54,_cor53> of
								    <ExprId,{CodeAcc,UpdateAcc}> when 'true' ->
									let <Expr> =
									    %% Line 1179
									    apply 'maps_expr_get'/2
										(ExprId, _cor1)
									in  %% Line 1180
									    case apply GetInstrFunc
										     (Expr) of
									      <{ExprInstr,Defs}> when 'true' ->
										  %% Line 1181
										  case apply 'update_inserted_add_new'/3
											   (UpdateAcc, ExprId, Defs) of
										    <{UpdateAcc2,NewDefs}> when 'true' ->
											let <_cor51> =
											    %% Line 1186
											    case apply 'expr_direct_replace'/1
												     (Expr) of
											      %% Line 1187
											      <'false'> when 'true' ->
												  let <NewInstr> =
												      %% Line 1188
												      apply 'rewrite_expr'/3
													  (UpdateAcc2, ExprInstr, NewDefs)
												  in  %% Line 1189
												      [NewInstr|CodeAcc]
											      %% Line 1190
											      <'true'> when 'true' ->
												  %% Line 1191
												  apply 'mk_defs_moves'/3
												      (CodeAcc, NewDefs, Defs)
											      ( <_cor50> when 'true' ->
												    primop 'match_fail'
													({'case_clause',_cor50})
												-| ['compiler_generated'] )
											    end
											in  %% Line 1193
											    {_cor51,UpdateAcc2}
										    ( <_cor48> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor48})
										      -| ['compiler_generated'] )
										  end
									      ( <_cor47> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor47})
										-| ['compiler_generated'] )
									    end
								    ( <_cor56,_cor55> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor56,_cor55})
									    -| [{'function_name',{'-rewrite_bb/4-fun-5-',2}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-rewrite_bb/4-fun-5-'}}] )
							in  %% Line 1177
							    case %% Line 1178
								 call 'ordsets':'fold'
								     (_cor57, %% Line 1194
									      {CodeRest,NewUpdate}, %% Line 1194
												    NewInserts) of
							      <{NewCodeRest,NewUpdate2}> when 'true' ->
								  let <NewCode> =
								      %% Line 1196
								      call 'lists':'reverse'
									  ([CodeLast|NewCodeRest])
								  in  let <_cor65> =
									  %% Line 1200
									  ( case PreLoop of
									      ( <( 'true'
										   -| ['compiler_generated'] )> when 'true' ->
										    let <_cor62> =
											call 'ordsets':'size'
											    (Inserts)
										    in  ( case <> of
											    ( <>
												  when call 'erlang':'>'
													(_cor62,
													 0) ->
												  call 'erlang':'not'
												      (DelRed)
											      -| ['compiler_generated'] )
											    ( <> when 'true' ->
												  'false'
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <( 'false'
										   -| ['compiler_generated'] )> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									      ( <_cor60> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {( 'badarg'
												-| ['compiler_generated'] ),_cor60}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      in  let <NewCode2,NewUpdate3> =
									      %% Line 1200
									      case _cor65 of
										%% Line 1201
										<'true'> when 'true' ->
										    let <_cor67> =
											%% Line 1202
											call 'hipe_icode':'mk_primop'
											    ([], 'redtest', [])
										    in  let <_cor66> =
											    %% Line 1202
											    apply 'update_del_red_test_set'/1
												(NewUpdate2)
											in  %% Line 1202
											    <[_cor67|NewCode],_cor66>
										%% Line 1203
										<'false'> when 'true' ->
										    %% Line 1204
										    <NewCode,NewUpdate2>
										( <_cor68> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor68})
										  -| ['compiler_generated'] )
									      end
									  in  let <NewBB> =
										  %% Line 1207
										  call 'hipe_bb':'mk_bb'
										      (NewCode2)
									      in  let <NewCFG> =
										      %% Line 1208
										      call 'hipe_icode_cfg':'bb_add'
											  (_cor3, Label, NewBB)
										  in  %% Line 1210
										      {NewCFG,NewUpdate3}
							      ( <_cor58> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor58})
								-| ['compiler_generated'] )
							    end
					    ( <_cor43> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor43})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'rewrite_expr'/3 =
    %% Line 1216
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1218
	    ( fun (_cor5) ->
		  %% Line 1219
		  case _cor5 of
		    %% Line 1220
		    <{ExprId,Num}>
			when call 'erlang':'is_integer'
			      (ExprId) ->
			%% Line 1221
			case apply 'update_inserted_lookup'/2
				 (_cor2, ExprId) of
			  <{'value',DefList}> when 'true' ->
			      %% Line 1222
			      call 'lists':'nth'
				  (Num, DefList)
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1223
		    <_cor12> when 'true' ->
			_cor5
		  end
	      -| [{'id',{0,0,'-rewrite_expr/3-fun-0-'}}] )
	in  let <NewInstr> =
		%% Line 1218
		apply 'replace_call_variables'/2
		    (_cor7, _cor1)
	    in  %% Line 1225
		call 'hipe_icode':'call_dstlist_update'
		    (NewInstr, _cor0)
'mk_defs_moves'/3 =
    %% Line 1231
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Code,[],[]> when 'true' ->
	      Code
	  %% Line 1232
	  <Code,[Ref|Refs],[Def|Defs]> when 'true' ->
	      let <_cor3> =
		  %% Line 1233
		  call 'hipe_icode':'mk_move'
		      (Ref, Def)
	      in  %% Line 1233
		  apply 'mk_defs_moves'/3
		      ([_cor3|Code], Refs, Defs)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_defs_moves',3}}] )
	    -| ['compiler_generated'] )
	end
'new_work'/0 =
    %% Line 1238
    fun () ->
	let <_cor0> =
	    %% Line 1239
	    call 'gb_sets':'new'
		()
	in  %% Line 1239
	    {[],_cor0}
'add_work_list'/2 =
    %% Line 1241
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1242
	    ( fun (_cor3,_cor2) ->
		  %% Line 1243
		  apply 'add_work_label'/2
		      (_cor3, _cor2)
	      -| [{'id',{0,0,'-add_work_list/2-fun-0-'}}] )
	in  %% Line 1242
	    call 'lists':'foldl'
		(_cor6, _cor0, _cor1)
'add_work_label'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{List,Set}> when 'true' ->
	      %% Line 1246
	      case call 'gb_sets':'is_member'
		       (Label, Set) of
		%% Line 1247
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 1248
			call 'gb_sets':'add'
			    (Label, Set)
		    in  %% Line 1248
			{[Label|List],_cor2}
		%% Line 1249
		<'true'> when 'true' ->
		    %% Line 1250
		    {List,Set}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_work_label',2}}] )
	    -| ['compiler_generated'] )
	end
'get_work_list'/1 =
    %% Line 1253
    fun (_cor0) ->
	case _cor0 of
	  <{List,_cor2}> when 'true' ->
	      %% Line 1254
	      call 'lists':'reverse'
		  (List)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_work_list',1}}] )
	    -| ['compiler_generated'] )
	end
'struct_instr_type'/1 =
    %% Line 1260
    fun (_cor0) ->
	%% Line 1261
	case _cor0 of
	  %% Line 1262
	  <{'icode_call',_cor3,'mktuple',_cor4,'primop',_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 1264
	      'struct'
	  %% Line 1265
	  <{'icode_call',_cor8,'cons',_cor9,'primop',_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 1267
	      'struct'
	  %% Line 1268
	  <{'icode_call',_cor13,'redtest',_cor14,'primop',_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 1270
	      'redtest'
	  %% Line 1271
	  <_cor18> when 'true' ->
	      %% Line 1273
	      'other'
	end
'instr_type'/1 =
    %% Line 1276
    fun (_cor0) ->
	%% Line 1277
	case _cor0 of
	  %% Line 1279
	  <{'icode_call',[DstVar|[]],{'unsafe_element',Elem},[SrcVar|[]],'primop',_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 1281
	      {'struct_elems',Elem,DstVar,SrcVar}
	  %% Line 1282
	  <{'icode_phi',_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 1284
	      'phi'
	  %% Line 1285
	  <{'icode_enter',_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 1287
	      'return'
	  %% Line 1288
	  <{'icode_return',_cor12}> when 'true' ->
	      %% Line 1290
	      'return'
	  %% Line 1291
	  <{'icode_call',_cor13,'mktuple',_cor14,'primop',_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 1293
	      'struct'
	  %% Line 1294
	  <{'icode_call',_cor18,'cons',_cor19,'primop',_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 1296
	      'struct'
	  %% Line 1297
	  <{'icode_call',_cor23,'redtest',_cor24,'primop',_cor25,_cor26,_cor27}> when 'true' ->
	      %% Line 1299
	      'redtest'
	  %% Line 1300
	  <{'icode_type',{'tuple',Size},[Var|[]],_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 1302
	      {'struct_type',Size,Var,'mktuple'}
	  %% Line 1303
	  <{'icode_type','cons',[Var|[]],_cor31,_cor32,_cor33}> when 'true' ->
	      %% Line 1305
	      {'struct_type',2,Var,'cons'}
	  %% Line 1307
	  <{'icode_call',%% Line 1308
			 [DstVar|[]],'unsafe_hd',%% Line 1308
						 [SrcVar|[]],'primop',_cor34,_cor35,_cor36}> when 'true' ->
	      %% Line 1310
	      {'struct_elems',1,DstVar,SrcVar}
	  %% Line 1311
	  <{'icode_call',%% Line 1312
			 [DstVar|[]],'unsafe_tl',%% Line 1312
						 [SrcVar|[]],'primop',_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 1314
	      {'struct_elems',2,DstVar,SrcVar}
	  %% Line 1315
	  <{'icode_switch_tuple_arity',Var,_cor40,_cor41,Cases}> when 'true' ->
	      %% Line 1317
	      {'tuple_arity',Var,Cases}
	  %% Line 1318
	  <_cor42> when 'true' ->
	      'other'
	end
'init_expr_id'/0 =
    %% Line 1324
    fun () ->
	%% Line 1325
	call 'erlang':'put'
	    ({'struct_reuse','expr_id_count'}, 0)
'new_expr_id'/0 =
    %% Line 1328
    fun () ->
	let <V> =
	    %% Line 1329
	    call 'erlang':'get'
		({'struct_reuse','expr_id_count'})
	in  let <_cor1> =
		%% Line 1330
		call 'erlang':'+'
		    (V, 1)
	    in  do  %% Line 1330
		    call 'erlang':'put'
			({'struct_reuse','expr_id_count'}, _cor1)
		    %% Line 1331
		    V
'print_struct'/2 =
    %% Line 1336
    fun (_cor1,_cor0) ->
	do  %% Line 1337
	    call 'io':'format'
		(_cor1)
	    %% Line 1338
	    call 'erlang':'display'
		(_cor0)
'print'/1 =
    %% Line 1340
    fun (_cor0) ->
	%% Line 1341
	call 'io':'format'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_ssa_struct_reuse')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_ssa_struct_reuse', _cor0)
end