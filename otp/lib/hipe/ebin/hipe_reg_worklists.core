module 'hipe_reg_worklists' ['add_coalesced'/2,
			     'add_coalesced'/3,
			     'add_freeze'/2,
			     'add_simplify'/2,
			     'add_spill'/2,
			     'freeze'/1,
			     'is_empty_freeze'/1,
			     'is_empty_simplify'/1,
			     'is_empty_spill'/1,
			     'member_coalesced_to'/2,
			     'member_freeze'/2,
			     'member_stack_or_coalesced'/2,
			     'module_info'/0,
			     'module_info'/1,
			     'new'/5,
			     'new'/6,
			     'non_stacked_or_coalesced_nodes'/2,
			     'push_stack'/3,
			     'remove_freeze'/2,
			     'remove_simplify'/2,
			     'remove_spill'/2,
			     'simplify'/1,
			     'spill'/1,
			     'stack'/1,
			     'transfer_freeze_simplify'/2,
			     'transfer_freeze_spill'/2]
    attributes [%% Line 31
		'author' =
		    %% Line 31
		    ['Andreas Wallin'|['Thorild SelÃ©n']],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','worklists'},[{'record_field',62,{'atom',62,'simplify'}}|[{'record_field',63,{'atom',63,'stack'}}|[{'record_field',64,{'atom',64,'membership'}}|[{'record_field',65,{'atom',65,'coalesced_to'}}|[{'record_field',66,{'atom',66,'spill'}}|[{'record_field',67,{'atom',67,'freeze'}}]]]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'new'/5 =
    %% Line 92
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CoalescedTo> =
	    %% Line 93
	    call 'hipe_bifs':'array'
		(_cor0, 'none')
	in  let <_cor7> =
		%% Line 94
		apply 'initial'/2
		    (_cor3, _cor2)
	    in  let <_cor6> =
		    %% Line 94
		    apply 'empty'/2
			(_cor0, CoalescedTo)
		in  %% Line 94
		    apply 'init'/4
			(_cor7, _cor1, _cor4, _cor6)
'new'/6 =
    %% Line 96
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 97
	    apply 'initial'/2
		(_cor4, _cor3)
	in  let <_cor6> =
		%% Line 97
		apply 'empty'/2
		    (_cor0, [])
	    in  %% Line 97
		apply 'init'/5
		    (_cor7, _cor1, _cor5, _cor2, _cor6)
'initial'/2 =
    %% Line 99
    fun (_cor1,_cor0) ->
	%% Line 100
	case call _cor1:'var_range'
		 (_cor0) of
	  <{Min_temporary,Max_temporary}> when 'true' ->
	      let <NonAlloc> =
		  %% Line 101
		  call _cor1:'non_alloc'
		      (_cor0)
	      in  let <_cor10> =
		      %% Line 102
		      apply 'non_precoloured'/4
			  (_cor1, Min_temporary, Max_temporary, [])
		  in  let <_cor9> =
			  %% Line 103
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[X|_cor5]> when 'true' ->
					      let <_cor7> =
						  call _cor1:'reg_nr'
						      (X)
					      in  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [_cor7|_cor8]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (NonAlloc)
			    -| ['list_comprehension'] )
		      in  %% Line 103
			  call 'erlang':'--'
			      (_cor10, _cor9)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'non_precoloured'/4 =
    %% Line 105
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 106
	case <> of
	  <>
	      when call 'erlang':'>'
		    (_cor2,
		     _cor1) ->
	      _cor0
	  %% Line 108
	  <> when 'true' ->
	      let <_cor5> =
		  %% Line 110
		  case call _cor3:'is_precoloured'
			   (_cor2) of
		    %% Line 111
		    <'true'> when 'true' ->
			_cor0
		    %% Line 112
		    <'false'> when 'true' ->
			[_cor2|_cor0]
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 114
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  %% Line 114
		      apply 'non_precoloured'/4
			  (_cor3, _cor7, _cor1, _cor5)
	end
'empty'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 122
	    call 'ordsets':'new'
		()
	in  let <_cor4> =
		%% Line 120
		call 'hipe_bifs':'array'
		    (_cor1, 'none')
	    in  let <_cor3> =
		    %% Line 124
		    call 'ordsets':'new'
			()
		in  let <_cor2> =
			%% Line 125
			call 'ordsets':'new'
			    ()
		    in  %% Line 119
			{'worklists',_cor5,%% Line 123
					   [],_cor4,_cor0,_cor3,_cor2}
'simplify'/1 =
    %% Line 130
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'worklists',_rec0,_cor3,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'spill'/1 =
    %% Line 131
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'worklists',_cor3,_cor4,_cor5,_cor6,_rec1,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec1
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'freeze'/1 =
    %% Line 132
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'worklists',_cor3,_cor4,_cor5,_cor6,_cor7,_rec2}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec2
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'stack'/1 =
    %% Line 133
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'worklists',_cor3,_rec3,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec3
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_simplify'/2 =
    %% Line 137
    fun (_cor1,_cor0) ->
	%% Line 138
	case _cor0 of
	  <{'worklists',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','worklists'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_spill'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	%% Line 140
	case _cor0 of
	  <{'worklists',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (6, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','worklists'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_freeze'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	%% Line 142
	case _cor0 of
	  <{'worklists',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','worklists'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'init'/4 =
    %% Line 162
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor11,_cor12,Worklists> when 'true' ->
	      Worklists
	  %% Line 163
	  <[Initial|Initials],K,IG,Worklists> when 'true' ->
	      %% Line 164
	      case call 'hipe_ig':'is_trivially_colourable'
		       (Initial, K, IG) of
		%% Line 165
		<'false'> when 'true' ->
		    let <New_worklists> =
			%% Line 166
			apply 'add_spill'/2
			    (Initial, Worklists)
		    in  %% Line 167
			apply 'init'/4
			    (Initials, K, IG, New_worklists)
		%% Line 168
		<_cor13> when 'true' ->
		    let <New_worklists> =
			%% Line 169
			apply 'add_simplify'/2
			    (Initial, Worklists)
		    in  %% Line 170
			apply 'init'/4
			    (Initials, K, IG, New_worklists)
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'init',4}}] )
	    -| ['compiler_generated'] )
	end
'init'/5 =
    %% Line 173
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor15,_cor16,_cor17,Worklists> when 'true' ->
	      Worklists
	  %% Line 174
	  <[Initial|Initials],K,IG,Move_sets,Worklists> when 'true' ->
	      %% Line 175
	      case call 'hipe_ig':'is_trivially_colourable'
		       (Initial, K, IG) of
		%% Line 176
		<'false'> when 'true' ->
		    let <New_worklists> =
			%% Line 177
			apply 'add_spill'/2
			    (Initial, Worklists)
		    in  %% Line 178
			apply 'init'/5
			    (Initials, K, IG, Move_sets, New_worklists)
		%% Line 179
		<_cor18> when 'true' ->
		    %% Line 180
		    case call 'hipe_moves':'move_related'
			     (Initial, Move_sets) of
		      %% Line 181
		      <'true'> when 'true' ->
			  let <New_worklists> =
			      %% Line 182
			      apply 'add_freeze'/2
				  (Initial, Worklists)
			  in  %% Line 183
			      apply 'init'/5
				  (Initials, K, IG, Move_sets, New_worklists)
		      %% Line 184
		      <_cor19> when 'true' ->
			  let <New_worklists> =
			      %% Line 185
			      apply 'add_simplify'/2
				  (Initial, Worklists)
			  in  %% Line 186
			      apply 'init'/5
				  (Initials, K, IG, Move_sets, New_worklists)
		    end
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'init',5}}] )
	    -| ['compiler_generated'] )
	end
'is_empty_simplify'/1 =
    %% Line 204
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 205
	    apply 'simplify'/1
		(_cor0)
	in  %% Line 205
	    call 'erlang':'=:='
		(_cor1, [])
'is_empty_spill'/1 =
    %% Line 207
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 208
	    apply 'spill'/1
		(_cor0)
	in  %% Line 208
	    call 'erlang':'=:='
		(_cor1, [])
'is_empty_freeze'/1 =
    %% Line 210
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 211
	    apply 'freeze'/1
		(_cor0)
	in  %% Line 211
	    call 'erlang':'=:='
		(_cor1, [])
'add_coalesced'/2 =
    %% Line 229
    fun (_cor1,_cor0) ->
	%% Line 230
	( case _cor0 of
	    ( <( {'worklists',_cor7,_cor8,_rec7,_cor9,_cor10,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 231
		      call 'hipe_bifs':'array_update'
			  (_rec7, _cor1, 'stack_or_coalesced')
		      _cor0
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_coalesced'/3 =
    %% Line 234
    fun (_cor2,_cor1,_cor0) ->
	%% Line 235
	( case _cor0 of
	    ( <( {'worklists',_cor12,_cor13,_rec8,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 236
		      call 'hipe_bifs':'array_update'
			  (_rec8, _cor2, 'stack_or_coalesced')
		      do  %% Line 238
			  call 'hipe_bifs':'array_update'
			      (_cor14, _cor1, 'coalesced_to')
			  _cor0
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_simplify'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	%% Line 242
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec10,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 243
		      call 'hipe_bifs':'array_update'
			  (_rec10, _cor1, 'simplify')
		      let <_cor5> =
			  %% Line 244
			  apply 'simplify'/1
			      (_cor0)
		      in  let <Simplify> =
			      %% Line 244
			      call 'ordsets':'add_element'
				  (_cor1, _cor5)
			  in  %% Line 245
			      apply 'set_simplify'/2
				  (Simplify, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_spill'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	%% Line 248
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec11,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 249
		      call 'hipe_bifs':'array_update'
			  (_rec11, _cor1, 'spill')
		      let <_cor5> =
			  %% Line 250
			  apply 'spill'/1
			      (_cor0)
		      in  let <Spill> =
			      %% Line 250
			      call 'ordsets':'add_element'
				  (_cor1, _cor5)
			  in  %% Line 251
			      apply 'set_spill'/2
				  (Spill, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_freeze'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	%% Line 254
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec12,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 255
		      call 'hipe_bifs':'array_update'
			  (_rec12, _cor1, 'freeze')
		      let <_cor5> =
			  %% Line 256
			  apply 'freeze'/1
			      (_cor0)
		      in  let <Freeze> =
			      %% Line 256
			      call 'ordsets':'add_element'
				  (_cor1, _cor5)
			  in  %% Line 257
			      apply 'set_freeze'/2
				  (Freeze, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'push_stack'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	%% Line 260
	( case _cor0 of
	    ( <( {'worklists',_cor15,_cor16,_rec13,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 261
		      call 'hipe_bifs':'array_update'
			  (_rec13, _cor2, 'stack_or_coalesced')
		      let <_rec15> =
			  %% Line 263
			  [{_cor2,_cor1}|_cor16]
		      in  %% Line 263
			  call 'erlang':'setelement'
			      (3, _cor0, _rec15)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_simplify'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	%% Line 282
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec17,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 283
		      call 'hipe_bifs':'array_update'
			  (_rec17, _cor1, 'none')
		      let <_cor5> =
			  %% Line 284
			  apply 'simplify'/1
			      (_cor0)
		      in  let <Simplify> =
			      %% Line 284
			      call 'ordsets':'del_element'
				  (_cor1, _cor5)
			  in  %% Line 285
			      apply 'set_simplify'/2
				  (Simplify, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_spill'/2 =
    %% Line 287
    fun (_cor1,_cor0) ->
	%% Line 288
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec18,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 289
		      call 'hipe_bifs':'array_update'
			  (_rec18, _cor1, 'none')
		      let <_cor5> =
			  %% Line 290
			  apply 'spill'/1
			      (_cor0)
		      in  let <Spill> =
			      %% Line 290
			      call 'ordsets':'del_element'
				  (_cor1, _cor5)
			  in  %% Line 291
			      apply 'set_spill'/2
				  (Spill, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_freeze'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	%% Line 294
	( case _cor0 of
	    ( <( {'worklists',_cor9,_cor10,_rec19,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 295
		      call 'hipe_bifs':'array_update'
			  (_rec19, _cor1, 'none')
		      let <_cor5> =
			  %% Line 296
			  apply 'freeze'/1
			      (_cor0)
		      in  let <Freeze> =
			      %% Line 296
			      call 'ordsets':'del_element'
				  (_cor1, _cor5)
			  in  %% Line 297
			      apply 'set_freeze'/2
				  (Freeze, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'transfer_freeze_simplify'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 306
	    apply 'remove_freeze'/2
		(_cor1, _cor0)
	in  %% Line 306
	    apply 'add_simplify'/2
		(_cor1, _cor2)
'transfer_freeze_spill'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 309
	    apply 'remove_freeze'/2
		(_cor1, _cor0)
	in  %% Line 309
	    apply 'add_spill'/2
		(_cor1, _cor2)
'member_coalesced_to'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	%% Line 328
	( case _cor0 of
	    ( <( {'worklists',_cor7,_cor8,_cor9,_rec20,_cor10,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_bifs':'array_sub'
			  (_rec20, _cor1)
		  in  call 'erlang':'=:='
			  (_cor4, 'coalesced_to')
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'member_freeze'/2 =
    %% Line 330
    fun (_cor1,_cor0) ->
	%% Line 331
	( case _cor0 of
	    ( <( {'worklists',_cor7,_cor8,_rec21,_cor9,_cor10,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_bifs':'array_sub'
			  (_rec21, _cor1)
		  in  call 'erlang':'=:='
			  (_cor4, 'freeze')
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'member_stack_or_coalesced'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	%% Line 334
	( case _cor0 of
	    ( <( {'worklists',_cor7,_cor8,_rec22,_cor9,_cor10,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_bifs':'array_sub'
			  (_rec22, _cor1)
		  in  call 'erlang':'=:='
			  (_cor4, 'stack_or_coalesced')
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'non_stacked_or_coalesced_nodes'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	%% Line 337
	( case _cor0 of
	    ( <( {'worklists',_cor13,_cor14,_rec23,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 338
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[Node|_cor6]> when 'true' ->
				      let <_cor7> =
					  %% Line 339
					  call 'hipe_bifs':'array_sub'
					      (_rec23, Node)
				      in  %% Line 339
					  ( case <> of
					      <>
						  when call 'erlang':'=/='
							(_cor7,
							 'stack_or_coalesced') ->
						  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor6)
						  in  ( [Node|_cor9]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_cor6)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','worklists'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_reg_worklists')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_reg_worklists', _cor0)
end