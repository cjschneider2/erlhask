module 'hipe_icode_bincomp' ['cfg'/1,
			     'module_info'/0,
			     'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'cfg',1},[{'type',39,'fun',[{'type',39,'product',[{'type',39,'cfg',[]}]}|[{'type',39,'cfg',[]}]]}]}]]
'cfg'/1 =
    %% Line 41
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 42
	    call 'hipe_icode_cfg':'start_label'
		(_cor0)
	in  let <StartLbls> =
		%% Line 42
		call 'ordsets':'from_list'
		    ([_cor1|[]])
	    in  %% Line 43
		apply 'find_bs_get_integer'/3
		    (StartLbls, _cor0, StartLbls)
'find_bs_get_integer'/3 =
    %% Line 45
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lbl|Rest],Cfg,Visited> when 'true' ->
	      let <BB> =
		  %% Line 46
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Lbl)
	      in  let <Last> =
		      %% Line 47
		      call 'hipe_bb':'last'
			  (BB)
		  in  let <_cor7> =
			  %% Line 49
			  case apply 'ok'/2
				   (Last, Cfg) of
			    %% Line 50
			    <{'ok',{Type,FakeFail,RealFail,SuccLbl,MsIn,MsOut}}> when 'true' ->
				%% Line 51
				case %% Line 52
				     apply 'collect_info'/6
					 (SuccLbl, Cfg, [Type|[]], Lbl, RealFail, MsOut) of
				  <{Cont,Info,OldLbl,LastMsOut}> when 'true' ->
				      %% Line 53
				      apply 'update_code'/8
					  (Lbl, OldLbl, Cfg, Info, Cont, FakeFail, MsIn, LastMsOut)
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor5})
				    -| ['compiler_generated'] )
				end
			    %% Line 54
			    <'not_ok'> when 'true' ->
				%% Line 55
				Cfg
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor6})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor9> =
			      %% Line 57
			      call 'hipe_icode_cfg':'succ'
				  (_cor7, Lbl)
			  in  let <Succs> =
				  %% Line 57
				  call 'ordsets':'from_list'
				      (_cor9)
			      in  let <NewSuccs> =
				      %% Line 58
				      call 'ordsets':'subtract'
					  (Succs, Visited)
				  in  let <NewLbls> =
					  %% Line 59
					  call 'ordsets':'union'
					      (NewSuccs, Rest)
				      in  let <NewVisited> =
					      %% Line 60
					      call 'ordsets':'union'
						  (NewSuccs, Visited)
					  in  %% Line 61
					      apply 'find_bs_get_integer'/3
						  (NewLbls, _cor7, NewVisited)
	  %% Line 62
	  <[],Cfg,_cor17> when 'true' ->
	      %% Line 63
	      Cfg
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'find_bs_get_integer',3}}] )
	    -| ['compiler_generated'] )
	end
'ok'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	%% Line 66
	case call 'hipe_icode':'is_call'
		 (_cor1) of
	  %% Line 67
	  <'true'> when 'true' ->
	      %% Line 68
	      case call 'hipe_icode':'call_fun'
		       (_cor1) of
		%% Line 69
		<{'hipe_bs_primop',{'bs_get_integer',Size,Flags}}>
		    when try
			  let <_cor2> =
			      call 'erlang':'band'
				  (Flags, 6)
			  in  call 'erlang':'=:='
				  (_cor2, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor4> =
			%% Line 70
			call 'hipe_icode':'call_dstlist'
			    (_cor1)
		    in  let <_cor3> =
			    %% Line 70
			    call 'hipe_icode':'call_args'
				(_cor1)
			in  %% Line 70
			    case <_cor4,_cor3> of
			      %% Line 71
			      <DstList = [Dst|[MsOut|[]]],[MsIn|[]]> when 'true' ->
				  let <Cont> =
				      %% Line 72
				      call 'hipe_icode':'call_continuation'
					  (_cor1)
				  in  let <FirstFail> =
					  %% Line 73
					  call 'hipe_icode':'call_fail_label'
					      (_cor1)
				      in  let <FirstFailBB> =
					      %% Line 74
					      call 'hipe_icode_cfg':'bb'
						  (_cor0, FirstFail)
					  in  %% Line 75
					      case apply 'check_for_restore_block'/2
						       (FirstFailBB, DstList) of
						%% Line 76
						<{'restore_block',RealFail}> when 'true' ->
						    %% Line 77
						    {'ok',{{Dst,Size},FirstFail,RealFail,Cont,MsIn,MsOut}}
						%% Line 78
						<'not_restore_block'> when 'true' ->
						    %% Line 79
						    'not_ok'
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor8})
						  -| ['compiler_generated'] )
					      end
			      %% Line 81
			      <_fol1,_fol2> when 'true' ->
				  %% Line 82
				  'not_ok'
			    end
		%% Line 84
		<_cor15> when 'true' ->
		    %% Line 85
		    'not_ok'
	      end
	  %% Line 87
	  <'false'> when 'true' ->
	      %% Line 88
	      'not_ok'
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'check_for_restore_block'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <Moves> =
	    %% Line 92
	    call 'hipe_bb':'butlast'
		(_cor1)
	in  let <_cor8> =
		%% Line 93
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[Instr|_cor4]> when 'true' ->
				    ( case apply 'is_badinstr'/2
					       (Instr, _cor0) of
					<'true'> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [Instr|_cor6]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Moves)
		  -| ['list_comprehension'] )
	    in  %% Line 93
		case _cor8 of
		  %% Line 94
		  <[]> when 'true' ->
		      let <Last> =
			  %% Line 95
			  call 'hipe_bb':'last'
			      (_cor1)
		      in  %% Line 96
			  case call 'hipe_icode':'is_goto'
				   (Last) of
			    %% Line 97
			    <'true'> when 'true' ->
				let <_cor10> =
				    %% Line 98
				    call 'hipe_icode':'goto_label'
					(Last)
				in  %% Line 98
				    {'restore_block',_cor10}
			    %% Line 99
			    <'false'> when 'true' ->
				%% Line 100
				'not_restore_block'
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		  %% Line 102
		  <[_cor15|_cor16]> when 'true' ->
		      %% Line 103
		      'not_restore_block'
		  ( <_cor12> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor12})
		    -| ['compiler_generated'] )
		end
'is_badinstr'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 107
	    ( case call 'hipe_icode':'is_move'
		       (_cor1) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor3> =
			  %% Line 108
			  call 'hipe_icode':'move_dst'
			      (_cor1)
		      in  %% Line 108
			  call 'lists':'member'
			      (_cor3, _cor0)
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor2> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor2}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 107
	    call 'erlang':'not'
		(_cor5)
'collect_info'/6 =
    %% Line 110
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 111
	case apply 'do_collect_info'/5
		 (_cor5, _cor4, _cor3, _cor1, _cor0) of
	  %% Line 112
	  <'done'> when 'true' ->
	      %% Line 113
	      {_cor5,_cor3,_cor2,_cor0}
	  %% Line 114
	  <{'cont',NewAcc,NewLbl,NewMsOut}> when 'true' ->
	      %% Line 115
	      apply 'collect_info'/6
		  (NewLbl, _cor4, NewAcc, _cor5, _cor1, NewMsOut)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'do_collect_info'/5 =
    %% Line 118
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <BB> =
	    %% Line 119
	    call 'hipe_icode_cfg':'bb'
		(_cor3, _cor4)
	in  %% Line 120
	    case call 'hipe_bb':'code'
		     (BB) of
	      %% Line 121
	      <[I|[]]> when 'true' ->
		  %% Line 122
		  case call 'hipe_icode_cfg':'pred'
			   (_cor3, _cor4) of
		    %% Line 123
		    <[_cor19|[]]> when 'true' ->
			%% Line 124
			case apply 'ok'/2
				 (I, _cor3) of
			  %% Line 125
			  <{'ok',{Type,_X_FakeFail,_cor20,SuccLbl,_cor21,NewMsOut}}>
			      when let <_cor22> =
				    call 'erlang':'=:='
					(_cor20, _cor1)
				in  let <_cor23> =
					call 'erlang':'=:='
					    (_cor21, _cor0)
				    in  call 'erlang':'and'
					    (_cor22, _cor23) ->
			      let <NewAcc> =
				  %% Line 126
				  [Type|_cor2]
			      in  let <_cor7> =
				      %% Line 127
				      call 'hipe_rtl_arch':'word_size'
					  ()
				  in  let <_cor8> =
					  %% Line 127
					  call 'erlang':'*'
					      (_cor7, 8)
				      in  let <MaxSize> =
					      %% Line 127
					      call 'erlang':'-'
						  (_cor8, 5)
					  in  %% Line 128
					      case apply 'calc_size'/1
						       (NewAcc) of
						%% Line 129
						<Size>
						    when call 'erlang':'=<'
							  (Size,
							   MaxSize) ->
						    %% Line 130
						    {'cont',NewAcc,SuccLbl,NewMsOut}
						%% Line 131
						<_cor24> when 'true' ->
						    %% Line 132
						    'done'
					      end
			  %% Line 134
			  <_cor25> when 'true' ->
			      %% Line 135
			      'done'
			end
		    %% Line 137
		    <_cor26> when 'true' ->
			%% Line 138
			'done'
		  end
	      %% Line 140
	      <_cor27> when 'true' ->
		  %% Line 141
		  'done'
	    end
'calc_size'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor3,Size}|Rest]>
	      when call 'erlang':'is_integer'
		    (Size) ->
	      let <_cor1> =
		  %% Line 145
		  apply 'calc_size'/1
		      (Rest)
	      in  %% Line 145
		  call 'erlang':'+'
		      (Size, _cor1)
	  %% Line 146
	  <[]> when 'true' ->
	      0
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'calc_size',1}}] )
	    -| ['compiler_generated'] )
	end
'update_code'/8 =
    %% Line 148
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Lbl,_cor24,Cfg,[_X_Info|[]],_X_Cont,_X_LastFail,_X_MsIn,_X_MsOut> when 'true' ->
	      %% Line 149
	      Cfg
	  %% Line 150
	  <Lbl,OldLbl,Cfg,Info,Cont,LastFail,MsIn,MsOut> when 'true' ->
	      let <BB> =
		  %% Line 151
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Lbl)
	      in  let <ButLast> =
		      %% Line 152
		      call 'hipe_bb':'butlast'
			  (BB)
		  in  let <NewVar> =
			  %% Line 153
			  call 'hipe_icode':'mk_new_var'
			      ()
		      in  let <Size> =
			      %% Line 154
			      apply 'calc_size'/1
				  (Info)
			  in  let <NewLast> =
				  %% Line 156
				  call 'hipe_icode':'mk_primop'
				      ([NewVar|[MsOut|[]]], %% Line 157
							    {'hipe_bs_primop',{'bs_get_integer',Size,0}}, %% Line 158
													  [MsIn|[]], %% Line 159
														     OldLbl, %% Line 160
															     LastFail)
			      in  let <_cor13> =
				      %% Line 161
				      call 'erlang':'++'
					  (ButLast, [NewLast|[]])
				  in  let <NewBB> =
					  %% Line 161
					  call 'hipe_bb':'mk_bb'
					      (_cor13)
				      in  let <NewCfg> =
					      %% Line 162
					      call 'hipe_icode_cfg':'bb_add'
						  (Cfg, Lbl, NewBB)
					  in  %% Line 163
					      apply 'fix_rest'/5
						  (Info, NewVar, OldLbl, Cont, NewCfg)
	end
'fix_rest'/5 =
    %% Line 165
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ButLast> =
	    %% Line 166
	    apply 'make_butlast'/2
		(_cor4, _cor3)
	in  let <Last> =
		%% Line 167
		call 'hipe_icode':'mk_goto'
		    (_cor1)
	    in  let <_cor7> =
		    %% Line 168
		    call 'erlang':'++'
			(ButLast, [Last|[]])
		in  let <NewBB> =
			%% Line 168
			call 'hipe_bb':'mk_bb'
			    (_cor7)
		    in  %% Line 169
			call 'hipe_icode_cfg':'bb_add'
			    (_cor0, _cor2, NewBB)
'make_butlast'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Res,_X_Size}|[]],Var> when 'true' ->
	      let <_cor2> =
		  %% Line 172
		  call 'hipe_icode':'mk_move'
		      (Res, Var)
	      in  %% Line 172
		  [_cor2|[]]
	  %% Line 173
	  <[{Res,Size}|Rest],Var> when 'true' ->
	      let <NewVar> =
		  %% Line 174
		  call 'hipe_icode':'mk_new_var'
		      ()
	      in  let <_cor4> =
		      %% Line 176
		      call 'erlang':'bsl'
			  (1, Size)
		  in  let <_cor5> =
			  %% Line 176
			  call 'erlang':'-'
			      (_cor4, 1)
		      in  let <_cor6> =
			      %% Line 176
			      call 'hipe_icode':'mk_const'
				  (_cor5)
			  in  let <_cor7> =
				  %% Line 175
				  call 'hipe_icode':'mk_primop'
				      ([Res|[]], 'band', %% Line 176
							 [Var|[_cor6|[]]])
			      in  let <_cor8> =
				      %% Line 177
				      call 'hipe_icode':'mk_const'
					  (Size)
				  in  let <_cor9> =
					  %% Line 177
					  call 'hipe_icode':'mk_primop'
					      ([NewVar|[]], 'bsr', [Var|[_cor8|[]]])
				      in  let <_cor10> =
					      %% Line 178
					      apply 'make_butlast'/2
						  (Rest, NewVar)
					  in  %% Line 175
					      [_cor7|%% Line 177
						     [_cor9|_cor10]]
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'make_butlast',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_bincomp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_bincomp', _cor0)
end