module 'hipe_amd64_ra_naive' ['module_info'/0,
			      'module_info'/1,
			      'ra'/3]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'ra'/3 =
    %% Line 41
    fun (_cor2,_cor1,_cor0) ->
	%% Line 42
	case _cor2 of
	  <{'defun',_cor25,_cor26,Code0,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      let <Code1> =
		  %% Line 43
		  apply 'do_insns'/1
		      (Code0)
	      in  let <NofSpilledFloats> =
		      %% Line 44
		      apply 'count_non_float_spills'/1
			  (_cor1)
		  in  let <NofFloats> =
			  %% Line 45
			  call 'erlang':'length'
			      (_cor1)
		      in  do  %% Line 46
			      case call 'proplists':'get_bool'
				       ('count_spills', _cor0) of
				<'true'> when 'true' ->
				    let <_cor9> =
					call 'erlang':'get'
					    ('spilledtemps')
				    in  let <_cor8> =
					    call 'hipe_gensym':'get_var'
						('x86')
					in  let <_cor10> =
						call 'erlang':'+'
						    (_cor9, _cor8)
					    in  let <_cor7> =
						    %% Line 47
						    call 'hipe_amd64_registers':'first_virtual'
							()
						in  let <_cor11> =
							call 'erlang':'-'
							    (_cor10, _cor7)
						    in  let <_cor12> =
							    %% Line 47
							    call 'erlang':'-'
								(_cor11, %% Line 48
									 NofSpilledFloats)
							in  let <_cor13> =
								%% Line 48
								call 'erlang':'-'
								    (_cor12, %% Line 49
									     NofFloats)
							    in  call 'erlang':'put'
								    ('spilledtemps', _cor13)
				%% Line 49
				<'false'> when 'true' ->
				    'ok'
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor14})
				  -| ['compiler_generated'] )
			      end
			      let <_cor16> =
				  %% Line 52
				  call 'hipe_gensym':'get_var'
				      ('x86')
			      in  let <_rec0> = {%% Line 52
				       0,_cor16}
				  in  let <_cor19> =
					  %% Line 52
					  call 'erlang':'setelement'
					      (8, _cor2, _rec0)
				      in  let <_cor21> =
					      %% Line 51
					      call 'erlang':'setelement'
						  (4, _cor19, Code1)
					  in  %% Line 51
					      {_cor21,[]}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'count_non_float_spills'/1 =
    %% Line 55
    fun (_cor0) ->
	%% Line 56
	apply 'count_non_float_spills'/2
	    (_cor0, 0)
'count_non_float_spills'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor6,To}|Tail],Num> when 'true' ->
	      %% Line 59
	      case call 'hipe_amd64_specific_sse2':'is_precoloured'
		       (To) of
		%% Line 60
		<'true'> when 'true' ->
		    %% Line 61
		    apply 'count_non_float_spills'/2
			(Tail, Num)
		%% Line 62
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 63
			call 'erlang':'+'
			    (Num, 1)
		    in  %% Line 63
			apply 'count_non_float_spills'/2
			    (Tail, _cor2)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 65
	  <[],Num> when 'true' ->
	      %% Line 66
	      Num
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'count_non_float_spills',2}}] )
	    -| ['compiler_generated'] )
	end
'do_insns'/1 =
    %% Line 68
    fun (_cor0) ->
	case _cor0 of
	  <[I|Insns]> when 'true' ->
	      let <_cor2> =
		  %% Line 69
		  apply 'do_insn'/1
		      (I)
	      in  let <_cor1> =
		      %% Line 69
		      apply 'do_insns'/1
			  (Insns)
		  in  %% Line 69
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  %% Line 70
	  <[]> when 'true' ->
	      %% Line 71
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'do_insns',1}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/1 =
    %% Line 73
    fun (_cor0) ->
	%% Line 74
	case _cor0 of
	  %% Line 75
	  <{'alu',_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 76
	      apply 'do_alu'/1
		  (_cor0)
	  %% Line 77
	  <{'cmp',_cor6,_cor7}> when 'true' ->
	      %% Line 78
	      apply 'do_cmp'/1
		  (_cor0)
	  %% Line 79
	  <{'imul',_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 80
	      apply 'do_imul'/1
		  (_cor0)
	  %% Line 81
	  <{'jmp_switch',_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 82
	      apply 'do_jmp_switch'/1
		  (_cor0)
	  %% Line 83
	  <{'lea',_cor14,_cor15}> when 'true' ->
	      %% Line 84
	      apply 'do_lea'/1
		  (_cor0)
	  %% Line 85
	  <{'move',_cor16,_cor17}> when 'true' ->
	      %% Line 86
	      apply 'do_move'/1
		  (_cor0)
	  %% Line 87
	  <{'move64',_cor18,_cor19}> when 'true' ->
	      %% Line 88
	      apply 'do_move64'/1
		  (_cor0)
	  %% Line 89
	  <{'movzx',_cor20,_cor21}> when 'true' ->
	      %% Line 90
	      apply 'do_movx'/1
		  (_cor0)
	  %% Line 91
	  <{'movsx',_cor22,_cor23}> when 'true' ->
	      %% Line 92
	      apply 'do_movx'/1
		  (_cor0)
	  %% Line 93
	  <{'fmove',_cor24,_cor25}> when 'true' ->
	      %% Line 94
	      apply 'do_fmove'/1
		  (_cor0)
	  %% Line 95
	  <{'fp_unop',_cor26,_cor27}> when 'true' ->
	      %% Line 96
	      apply 'do_fp_unop'/1
		  (_cor0)
	  %% Line 97
	  <{'fp_binop',_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 98
	      apply 'do_fp_binop'/1
		  (_cor0)
	  %% Line 99
	  <{'shift',_cor31,_cor32,_cor33}> when 'true' ->
	      %% Line 100
	      apply 'do_shift'/1
		  (_cor0)
	  %% Line 101
	  <{'label',_cor34}> when 'true' ->
	      %% Line 102
	      [_cor0|[]]
	  %% Line 103
	  <{'pseudo_jcc',_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      %% Line 104
	      [_cor0|[]]
	  %% Line 105
	  <{'pseudo_call',_cor39,_cor40,_cor41,_cor42}> when 'true' ->
	      %% Line 106
	      [_cor0|[]]
	  %% Line 107
	  <{'ret',_cor43}> when 'true' ->
	      %% Line 108
	      [_cor0|[]]
	  %% Line 109
	  <{'pseudo_tailcall_prepare'}> when 'true' ->
	      %% Line 110
	      [_cor0|[]]
	  %% Line 111
	  <{'pseudo_tailcall',_cor44,_cor45,_cor46,_cor47}> when 'true' ->
	      %% Line 112
	      [_cor0|[]]
	  %% Line 113
	  <{'push',_cor48}> when 'true' ->
	      %% Line 114
	      [_cor0|[]]
	  %% Line 115
	  <{'jmp_label',_cor49}> when 'true' ->
	      %% Line 116
	      [_cor0|[]]
	  %% Line 117
	  <{'comment',_cor50}> when 'true' ->
	      %% Line 118
	      [_cor0|[]]
	  %% Line 119
	  <_cor51> when 'true' ->
	      do  %% Line 120
		  call 'io':'format'
		      ([85|[110|[107|[110|[111|[119|[110|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[61|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		  %% Line 121
		  call 'erlang':'exit'
		      ({'hipe_amd64_ra_naive','unknown_instruction',_cor0})
	end
'do_alu'/1 =
    %% Line 126
    fun (_cor0) ->
	%% Line 127
	case _cor0 of
	  <{'alu',_cor8,Src0,Dst0}> when 'true' ->
	      %% Line 128
	      case apply 'do_binary'/2
		       (Src0, Dst0) of
		<{FixSrc,Src,FixDst,Dst}> when 'true' ->
		    let <_cor5> =
			%% Line 129
			{'alu',_cor8,Src,Dst}
		    in  let <_cor6> =
			    %% Line 129
			    call 'erlang':'++'
				(FixDst, [_cor5|[]])
			in  %% Line 129
			    call 'erlang':'++'
				(FixSrc, _cor6)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_cmp'/1 =
    %% Line 133
    fun (_cor0) ->
	%% Line 134
	case _cor0 of
	  <{'cmp',Src0,Dst0}> when 'true' ->
	      %% Line 135
	      case apply 'do_binary'/2
		       (Src0, Dst0) of
		<{FixSrc,Src,FixDst,Dst}> when 'true' ->
		    let <_cor5> = {%% Line 136
			 'cmp',%% Line 136
			       Src,%% Line 136
				   Dst}
		    in  let <_cor6> =
			    %% Line 136
			    call 'erlang':'++'
				(FixDst, [_cor5|[]])
			in  %% Line 136
			    call 'erlang':'++'
				(FixSrc, _cor6)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_imul'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 141
	case _cor0 of
	  <{'imul',ImmOpt,Src0,Temp0}> when 'true' ->
	      %% Line 142
	      case apply 'fix_src_operand'/1
		       (Src0) of
		<{FixSrc,Src}> when 'true' ->
		    let <FixTempSrc,Temp,FixTempDst> =
			%% Line 144
			case apply 'temp_is_pseudo'/1
				 (Temp0) of
			  %% Line 145
			  <'false'> when 'true' ->
			      %% Line 146
			      <[],Temp0,[]>
			  %% Line 147
			  <'true'> when 'true' ->
			      let <_cor3> =
				  %% Line 148
				  call 'hipe_amd64_registers':'temp1'
				      ()
			      in  let <Reg> =
				      %% Line 148
				      call 'hipe_x86':'mk_temp'
					  (_cor3, 'untagged')
				  in  let <_cor8> =
					  %% Line 149
					  case ImmOpt of
					    %% Line 150
					    <[]> when 'true' ->
						let <_cor6> =
						    call 'hipe_x86':'mk_move'
							(Temp0, Reg)
						in  [_cor6|[]]
					    %% Line 151
					    <_cor18> when 'true' ->
						[]
					  end
				      in  let <_cor5> =
					      %% Line 154
					      call 'hipe_x86':'mk_move'
						  (Reg, Temp0)
					  in  <_cor8,%% Line 153
						     Reg,%% Line 154
							 [_cor5|[]]>
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor14> =
			    %% Line 156
			    {'imul',ImmOpt,Src,Temp}
			in  let <_cor15> =
				%% Line 156
				[_cor14|FixTempDst]
			    in  let <_cor16> =
				    %% Line 156
				    call 'erlang':'++'
					(FixTempSrc, _cor15)
				in  %% Line 156
				    call 'erlang':'++'
					(FixSrc, _cor16)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_jmp_switch'/1 =
    %% Line 161
    fun (_cor0) ->
	%% Line 162
	case _cor0 of
	  <{'jmp_switch',Temp,Tab,_cor25}> when 'true' ->
	      %% Line 163
	      case apply 'temp_is_pseudo'/1
		       (Temp) of
		%% Line 164
		<'false'> when 'true' ->
		    %% Line 165
		    case apply 'temp_is_pseudo'/1
			     (Tab) of
		      %% Line 166
		      <'false'> when 'true' ->
			  %% Line 167
			  [_cor0|[]]
		      %% Line 168
		      <'true'> when 'true' ->
			  let <_cor2> =
			      %% Line 169
			      call 'hipe_amd64_registers':'temp0'
				  ()
			  in  let <Reg> =
				  %% Line 169
				  call 'hipe_x86':'mk_temp'
				      (_cor2, 'untagged')
			      in  let <_cor4> =
				      %% Line 170
				      call 'hipe_x86':'mk_move'
					  (Temp, Reg)
				  in  let <_cor7> =
					  %% Line 170
					  call 'erlang':'setelement'
					      (3, _cor0, Reg)
				      in  %% Line 170
					  [_cor4|[_cor7|[]]]
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 172
		<'true'> when 'true' ->
		    let <_cor9> =
			%% Line 173
			call 'hipe_amd64_registers':'temp1'
			    ()
		    in  let <Reg> =
			    %% Line 173
			    call 'hipe_x86':'mk_temp'
				(_cor9, 'untagged')
			in  %% Line 174
			    case apply 'temp_is_pseudo'/1
				     (Tab) of
			      %% Line 175
			      <'false'> when 'true' ->
				  let <_cor11> =
				      %% Line 176
				      call 'hipe_x86':'mk_move'
					  (Temp, Reg)
				  in  let <_cor14> =
					  %% Line 176
					  call 'erlang':'setelement'
					      (2, _cor0, Reg)
				      in  %% Line 176
					  [_cor11|[_cor14|[]]]
			      %% Line 177
			      <'true'> when 'true' ->
				  let <_cor15> =
				      %% Line 178
				      call 'hipe_amd64_registers':'temp0'
					  ()
				  in  let <Reg2> =
					  %% Line 178
					  call 'hipe_x86':'mk_temp'
					      (_cor15, 'untagged')
				      in  let <_cor17> =
					      %% Line 179
					      call 'hipe_x86':'mk_move'
						  (Temp, Reg)
					  in  let <_cor18> =
						  %% Line 180
						  call 'hipe_x86':'mk_move'
						      (Tab, Reg2)
					      in  let <_cor21> =
						      %% Line 181
						      {'jmp_switch',Reg,Reg2,_cor25}
						  in  %% Line 179
						      [_cor17|%% Line 180
							      [_cor18|%% Line 181
								      [_cor21|[]]]]
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor22})
				-| ['compiler_generated'] )
			    end
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor23})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_lea'/1 =
    %% Line 198
    fun (_cor0) ->
	%% Line 199
	case _cor0 of
	  <{'lea',_cor10,Temp}> when 'true' ->
	      %% Line 200
	      case apply 'temp_is_pseudo'/1
		       (Temp) of
		%% Line 201
		<'false'> when 'true' ->
		    %% Line 202
		    [_cor0|[]]
		%% Line 203
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 204
			call 'hipe_amd64_registers':'temp0'
			    ()
		    in  let <Reg> =
			    %% Line 204
			    call 'hipe_x86':'mk_temp'
				(_cor2, 'untagged')
			in  let <_cor6> =
				%% Line 205
				call 'erlang':'setelement'
				    (3, _cor0, Reg)
			    in  let <_cor7> =
				    %% Line 205
				    call 'hipe_x86':'mk_move'
					(Reg, Temp)
				in  %% Line 205
				    [_cor6|[_cor7|[]]]
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_move'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	case _cor0 of
	  <{'move',Src0,Dst0}> when 'true' ->
	      %% Line 212
	      case apply 'do_binary'/2
		       (Src0, Dst0) of
		<{FixSrc,Src,FixDst,Dst}> when 'true' ->
		    let <_cor5> = {%% Line 213
			 'move',%% Line 213
				Src,%% Line 213
				    Dst}
		    in  let <_cor6> =
			    %% Line 213
			    call 'erlang':'++'
				(FixDst, [_cor5|[]])
			in  %% Line 213
			    call 'erlang':'++'
				(FixSrc, _cor6)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_move64'/1 =
    %% Line 216
    fun (_cor0) ->
	%% Line 217
	case _cor0 of
	  <{'move64',_cor10,Dst}> when 'true' ->
	      %% Line 218
	      case apply 'is_mem_opnd'/1
		       (Dst) of
		%% Line 219
		<'false'> when 'true' ->
		    %% Line 220
		    [_cor0|[]]
		%% Line 221
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 222
			call 'hipe_amd64_registers':'temp1'
			    ()
		    in  let <NewDst> =
			    %% Line 223
			    apply 'clone'/2
				(Dst, Reg)
			in  let <_cor6> =
				%% Line 224
				call 'erlang':'setelement'
				    (3, _cor0, NewDst)
			    in  let <_cor7> =
				    %% Line 224
				    call 'hipe_x86':'mk_move'
					(NewDst, Dst)
				in  %% Line 224
				    [_cor6|[_cor7|[]]]
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_movx'/1 =
    %% Line 230
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 232
	    case _cor0 of
	      %% Line 233
	      <{'movsx',Src0,Dst0}> when 'true' ->
		  let <_cor2> =
		      %% Line 234
		      apply 'fix_src_operand'/1
			  (Src0)
		  in  let <_cor1> =
			  %% Line 234
			  apply 'fix_dst_operand'/1
			      (Dst0)
		      in  %% Line 234
			  {_cor2,_cor1}
	      %% Line 235
	      <{'movzx',Src0,Dst0}> when 'true' ->
		  let <_cor4> =
		      %% Line 236
		      apply 'fix_src_operand'/1
			  (Src0)
		  in  let <_cor3> =
			  %% Line 236
			  apply 'fix_dst_operand'/1
			      (Dst0)
		      in  %% Line 236
			  {_cor4,_cor3}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  %% Line 231
	    case _cor6 of
	      <{{FixSrc,Src},{FixDst,Dst}}> when 'true' ->
		  let <Reg> =
		      %% Line 238
		      call 'hipe_amd64_registers':'temp0'
			  ()
		  in  let <Dst2> =
			  %% Line 239
			  apply 'clone'/2
			      (Dst, Reg)
		      in  let <_cor21> =
			      %% Line 240
			      case apply 'is_mem_opnd'/1
				       (Dst) of
				%% Line 241
				<'true'> when 'true' ->
				    %% Line 242
				    case call 'hipe_amd64_registers':'temp0'
					     () of
				      <_cor25>
					  when call 'erlang':'=:='
						(_cor25,
						 Reg) ->
					  %% Line 243
					  case apply 'clone'/2
						   (Dst, Reg) of
					    <_cor26>
						when call 'erlang':'=:='
						      (_cor26,
						       Dst2) ->
						%% Line 244
						case _cor0 of
						  %% Line 245
						  <{'movsx',_cor27,_cor28}> when 'true' ->
						      let <_cor12> =
							  %% Line 246
							  call 'hipe_x86':'mk_movsx'
							      (Src, Dst2)
						      in  let <_cor13> =
							      %% Line 246
							      call 'hipe_x86':'mk_move'
								  (Dst2, Dst)
							  in  %% Line 246
							      [_cor12|[_cor13|[]]]
						  %% Line 247
						  <{'movzx',_cor29,_cor30}> when 'true' ->
						      let <_cor14> =
							  %% Line 248
							  call 'hipe_x86':'mk_movzx'
							      (Src, Dst2)
						      in  let <_cor15> =
							      %% Line 248
							      call 'hipe_x86':'mk_move'
								  (Dst2, Dst)
							  in  %% Line 248
							      [_cor14|[_cor15|[]]]
						  ( <_cor16> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor16})
						    -| ['compiler_generated'] )
						end
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor10})
					-| ['compiler_generated'] )
				    end
				%% Line 250
				<'false'> when 'true' ->
				    %% Line 251
				    case _cor0 of
				      %% Line 252
				      <{'movsx',_cor31,_cor32}> when 'true' ->
					  let <_cor17> =
					      %% Line 253
					      call 'hipe_x86':'mk_movsx'
						  (Src, Dst)
					  in  %% Line 253
					      [_cor17|[]]
				      %% Line 254
				      <{'movzx',_cor33,_cor34}> when 'true' ->
					  let <_cor18> =
					      %% Line 255
					      call 'hipe_x86':'mk_movzx'
						  (Src, Dst)
					  in  %% Line 255
					      [_cor18|[]]
				      ( <_cor19> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor19})
					-| ['compiler_generated'] )
				    end
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor20})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor23> =
				  %% Line 258
				  call 'erlang':'++'
				      (FixDst, _cor21)
			      in  %% Line 258
				  call 'erlang':'++'
				      (FixSrc, _cor23)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'do_fmove'/1 =
    %% Line 263
    fun (_cor0) ->
	case _cor0 of
	  <I = {'fmove',{'x86_temp',_cor18,'untagged',_cor19},%% Line 264
							      {'x86_temp',_cor20,'double',_cor21}}> when 'true' ->
	      let <Dst0> =
		  %% Line 265
		  ( {'x86_temp',_cor20,'double',_cor21}
		    -| ['compiler_generated'] )
	      in  let <Src0> =
		      %% Line 265
		      ( {'x86_temp',_cor18,'untagged',_cor19}
			-| ['compiler_generated'] )
		  in  let <_cor2> =
			  %% Line 266
			  call 'hipe_amd64_registers':'temp0'
			      ()
		      in  let <Src> =
			      %% Line 266
			      apply 'clone'/2
				  (Src0, _cor2)
			  in  let <_cor4> =
				  %% Line 267
				  call 'hipe_amd64_registers':'temp1'
				      ()
			      in  let <Dst> =
				      %% Line 267
				      apply 'clone'/2
					  (Dst0, _cor4)
				  in  let <_cor6> =
					  %% Line 268
					  call 'hipe_x86':'mk_move'
					      (Src0, Src)
				      in  let <_cor9> = {%% Line 269
					       'fmove',%% Line 269
						       Src,%% Line 269
							   Dst}
					  in  let <_cor10> =
						  %% Line 270
						  call 'hipe_x86':'mk_fmove'
						      (Dst, Dst0)
					      in  %% Line 268
						  [_cor6|%% Line 269
							 [_cor9|%% Line 270
								[_cor10|[]]]]
	  %% Line 272
	  <I> when 'true' ->
	      %% Line 273
	      case I of
		<{'fmove',Src0,Dst0}> when 'true' ->
		    %% Line 274
		    case apply 'do_binary'/2
			     (Src0, Dst0) of
		      <{FixSrc,Src,FixDst,Dst}> when 'true' ->
			  let <_cor15> = {%% Line 275
			       'fmove',%% Line 275
				       Src,%% Line 275
					   Dst}
			  in  let <_cor16> =
				  %% Line 275
				  call 'erlang':'++'
				      (FixDst, [_cor15|[]])
			      in  %% Line 275
				  call 'erlang':'++'
				      (FixSrc, _cor16)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	end
'do_fp_unop'/1 =
    %% Line 277
    fun (_cor0) ->
	%% Line 278
	case _cor0 of
	  <{'fp_unop',_cor11,Arg}> when 'true' ->
	      %% Line 279
	      case apply 'is_mem_opnd'/1
		       (Arg) of
		%% Line 280
		<'false'> when 'true' ->
		    %% Line 281
		    [_cor0|[]]
		%% Line 282
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 283
			call 'hipe_amd64_registers':'temp1'
			    ()
		    in  let <NewArg> =
			    %% Line 284
			    apply 'clone'/2
				(Arg, Reg)
			in  let <_cor4> =
				%% Line 285
				call 'hipe_x86':'mk_fmove'
				    (Arg, NewArg)
			    in  let <_cor7> =
				    %% Line 286
				    call 'erlang':'setelement'
					(3, _cor0, NewArg)
				in  let <_cor8> =
					%% Line 287
					call 'hipe_x86':'mk_fmove'
					    (NewArg, Arg)
				    in  %% Line 285
					[_cor4|%% Line 286
					       [_cor7|%% Line 287
						      [_cor8|[]]]]
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_fp_binop'/1 =
    %% Line 290
    fun (_cor0) ->
	%% Line 291
	case _cor0 of
	  <{'fp_binop',_cor13,Src0,Dst0}> when 'true' ->
	      %% Line 292
	      case apply 'fix_src_operand'/1
		       (Src0) of
		<{FixSrc,Src}> when 'true' ->
		    %% Line 293
		    case apply 'fix_dst_operand'/1
			     (Dst0) of
		      <{FixDst,Dst}> when 'true' ->
			  let <Reg> =
			      %% Line 294
			      call 'hipe_amd64_registers':'temp1'
				  ()
			  in  let <Dst2> =
				  %% Line 295
				  apply 'clone'/2
				      (Dst, Reg)
			      in  let <_cor6> =
				      %% Line 296
				      call 'hipe_x86':'mk_fmove'
					  (Dst, Dst2)
				  in  let <_cor9> =
					  %% Line 297
					  {'fp_binop',_cor13,Src,Dst2}
				      in  let <_cor10> =
					      %% Line 298
					      call 'hipe_x86':'mk_fmove'
						  (Dst2, Dst)
					  in  let <_cor11> =
						  %% Line 296
						  call 'erlang':'++'
						      (FixDst, [_cor6|%% Line 297
								      [_cor9|%% Line 298
									     [_cor10|[]]]])
					      in  %% Line 296
						  call 'erlang':'++'
						      (FixSrc, _cor11)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_shift'/1 =
    %% Line 300
    fun (_cor0) ->
	%% Line 301
	case _cor0 of
	  <{'shift',_cor12,Src0,Dst0}> when 'true' ->
	      %% Line 302
	      case apply 'fix_dst_operand'/1
		       (Dst0) of
		<{FixDst,Dst}> when 'true' ->
		    let <Reg> =
			%% Line 303
			call 'hipe_amd64_registers':'rcx'
			    ()
		    in  %% Line 304
			case Src0 of
			  %% Line 305
			  <{'x86_imm',_cor13}> when 'true' ->
			      let <_cor6> =
				  %% Line 306
				  call 'erlang':'setelement'
				      (4, _cor0, Dst)
			      in  %% Line 306
				  call 'erlang':'++'
				      (FixDst, [_cor6|[]])
			  %% Line 307
			  <{'x86_temp',_cor18,_cor19,_cor20}>
			      when call 'erlang':'=:='
				    (_cor18,
				     Reg) ->
			      let <_cor9> =
				  %% Line 308
				  call 'erlang':'setelement'
				      (4, _cor0, Dst)
			      in  %% Line 308
				  call 'erlang':'++'
				      (FixDst, [_cor9|[]])
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_binary'/2 =
    %% Line 316
    fun (_cor1,_cor0) ->
	%% Line 317
	case apply 'fix_src_operand'/1
		 (_cor1) of
	  <{FixSrc,Src}> when 'true' ->
	      %% Line 318
	      case apply 'fix_dst_operand'/1
		       (_cor0) of
		<{FixDst,Dst}> when 'true' ->
		    let <FixSrc3,Src3> =
			%% Line 320
			case apply 'is_mem_opnd'/1
				 (Src) of
			  %% Line 321
			  <'false'> when 'true' ->
			      %% Line 322
			      <FixSrc,Src>
			  %% Line 323
			  <'true'> when 'true' ->
			      %% Line 324
			      case apply 'is_mem_opnd'/1
				       (Dst) of
				%% Line 325
				<'false'> when 'true' ->
				    %% Line 326
				    <FixSrc,Src>
				%% Line 327
				<'true'> when 'true' ->
				    let <Reg> =
					%% Line 328
					call 'hipe_amd64_registers':'temp0'
					    ()
				    in  let <Src2> =
					    %% Line 329
					    apply 'clone'/2
						(Src, Reg)
					in  let <_cor6> =
						%% Line 330
						apply 'mk_move'/2
						    (Src, Src2)
					    in  let <FixSrc2> =
						    %% Line 330
						    call 'erlang':'++'
							(FixSrc, [_cor6|[]])
						in  %% Line 331
						    <FixSrc2,Src2>
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 334
			{FixSrc3,Src3,FixDst,Dst}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fix_src_operand'/1 =
    %% Line 341
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 342
	    call 'hipe_amd64_registers':'temp0'
		()
	in  %% Line 342
	    apply 'fix_mem_operand'/2
		(_cor0, _cor1)
'fix_dst_operand'/1 =
    %% Line 344
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 345
	    call 'hipe_amd64_registers':'temp1'
		()
	in  %% Line 345
	    apply 'fix_mem_operand'/2
		(_cor0, _cor1)
'fix_mem_operand'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	case _cor1 of
	  %% Line 349
	  <{'x86_mem',Base,Off,_cor24}> when 'true' ->
	      %% Line 350
	      case apply 'is_mem_opnd'/1
		       (Base) of
		%% Line 351
		<'false'> when 'true' ->
		    %% Line 352
		    case apply 'src_is_pseudo'/1
			     (Off) of
		      %% Line 353
		      <'false'> when 'true' ->
			  %% Line 354
			  {[],_cor1}
		      %% Line 355
		      <'true'> when 'true' ->
			  let <Temp> =
			      %% Line 356
			      apply 'clone'/2
				  (Off, _cor0)
			  in  let <_cor6> =
				  %% Line 357
				  call 'hipe_x86':'mk_move'
				      (Off, Temp)
			      in  let <_cor5> =
				      %% Line 358
				      call 'erlang':'setelement'
					  (3, _cor1, Temp)
				  in  %% Line 357
				      {[_cor6|[]],_cor5}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 360
		<'true'> when 'true' ->
		    let <Temp> =
			%% Line 361
			apply 'clone'/2
			    (Base, _cor0)
		    in  %% Line 362
			case apply 'src_is_pseudo'/1
				 (Off) of
			  %% Line 363
			  <'false'> when 'true' ->
			      let <_cor12> =
				  %% Line 364
				  call 'hipe_x86':'mk_move'
				      (Base, Temp)
			      in  let <_cor11> =
				      %% Line 365
				      call 'erlang':'setelement'
					  (2, _cor1, Temp)
				  in  %% Line 364
				      {[_cor12|[]],_cor11}
			  %% Line 366
			  <'true'> when 'true' ->
			      let <_cor17> =
				  %% Line 367
				  call 'hipe_x86':'mk_move'
				      (Base, Temp)
			      in  let <_cor18> =
				      %% Line 368
				      call 'hipe_x86':'mk_alu'
					  ('add', Off, Temp)
				  in  let <_rec39> =
					  %% Line 369
					  call 'hipe_x86':'mk_imm'
					      (0)
				      in  let <_cor16> =
					      %% Line 369
					      {'x86_mem',Temp,_rec39,_cor24}
					  in  %% Line 367
					      {[_cor17|%% Line 368
						       [_cor18|[]]],_cor16}
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor19})
			    -| ['compiler_generated'] )
			end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 372
	  <_cor34> when 'true' ->
	      %% Line 373
	      {[],_cor1}
	end
'is_mem_opnd'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	case _cor0 of
	  %% Line 380
	  <{'x86_mem',_cor3,_cor4,_cor5}> when 'true' ->
	      'true'
	  %% Line 381
	  <{'x86_temp',_cor6,_cor7,_cor8}> when 'true' ->
	      apply 'temp_is_pseudo'/1
		  (_cor0)
	  %% Line 382
	  <_cor9> when 'true' ->
	      'false'
	end
'src_is_pseudo'/1 =
    %% Line 387
    fun (_cor0) ->
	%% Line 388
	case call 'hipe_x86':'is_temp'
		 (_cor0) of
	  %% Line 389
	  <'true'> when 'true' ->
	      apply 'temp_is_pseudo'/1
		  (_cor0)
	  %% Line 390
	  <'false'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'temp_is_pseudo'/1 =
    %% Line 393
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 394
	    call 'hipe_x86':'temp_reg'
		(_cor0)
	in  let <_cor2> =
		%% Line 394
		call 'hipe_amd64_registers':'is_precoloured'
		    (_cor1)
	    in  %% Line 394
		call 'erlang':'not'
		    (_cor2)
'clone'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 400
	    case _cor1 of
	      %% Line 401
	      <{'x86_mem',_cor7,_cor8,_cor9}> when 'true' ->
		  call 'hipe_x86':'mem_type'
		      (_cor1)
	      %% Line 402
	      <{'x86_temp',_cor10,_cor11,_cor12}> when 'true' ->
		  call 'hipe_x86':'temp_type'
		      (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 404
	    call 'hipe_x86':'mk_temp'
		(_cor0, _cor3)
'mk_move'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Src,Dst = {'x86_temp',_cor4,'double',_cor5}> when 'true' ->
	      %% Line 407
	      call 'hipe_x86':'mk_fmove'
		  (Src, Dst)
	  %% Line 408
	  <Src,Dst> when 'true' ->
	      %% Line 409
	      call 'hipe_x86':'mk_move'
		  (Src, Dst)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_ra_naive')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_ra_naive', _cor0)
end