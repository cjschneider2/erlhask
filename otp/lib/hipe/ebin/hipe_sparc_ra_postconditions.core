module 'hipe_sparc_ra_postconditions' ['check_and_rewrite'/3,
				       'check_and_rewrite2'/3,
				       'module_info'/0,
				       'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'check_and_rewrite'/3 =
    %% Line 27
    fun (_cor2,_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 28
	    call 'hipe_temp_map':'cols2tuple'
		(_cor1, 'hipe_sparc_specific')
	in  %% Line 29
	    apply 'check_and_rewrite2'/3
		(_cor2, TempMap, _cor0)
'check_and_rewrite2'/3 =
    %% Line 31
    fun (_cor2,_cor1,_cor0) ->
	let <Strategy> =
	    %% Line 32
	    apply 'strategy'/1
		(_cor0)
	in  %% Line 33
	    case _cor2 of
	      <{'defun',_cor15,_cor16,Code0,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		  %% Line 34
		  case apply 'do_insns'/5
			   (Code0, _cor1, Strategy, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor6> =
			    %% Line 35
			    call 'hipe_gensym':'get_var'
				('sparc')
			in  let <VarRange> = {%% Line 35
				 0,_cor6}
			    in  let <_cor9> =
				    %% Line 36
				    call 'erlang':'setelement'
					(8, _cor2, VarRange)
				in  let <_cor11> =
					%% Line 36
					call 'erlang':'setelement'
					    (4, _cor9, Code1)
				    in  %% Line 36
					{_cor11,%% Line 37
						DidSpill}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'strategy'/1 =
    %% Line 39
    fun (_cor0) ->
	%% Line 40
	case _cor0 of
	  %% Line 41
	  <'normal'> when 'true' ->
	      'new'
	  %% Line 42
	  <'linearscan'> when 'true' ->
	      'fixed'
	  %% Line 43
	  <'naive'> when 'true' ->
	      'fixed'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_insns'/5 =
    %% Line 46
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Strategy,Accum,DidSpill0> when 'true' ->
	      %% Line 47
	      case apply 'do_insn'/3
		       (I, TempMap, Strategy) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor7> =
			%% Line 48
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor6> =
			    %% Line 48
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 48
			    apply 'do_insns'/5
				(Insns, TempMap, Strategy, _cor7, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 49
	  <[],_X_TempMap,_X_Strategy,Accum,DidSpill> when 'true' ->
	      let <_cor8> =
		  %% Line 50
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 50
		  {_cor8,DidSpill}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_insns',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/3 =
    %% Line 52
    fun (_cor2,_cor1,_cor0) ->
	%% Line 53
	case _cor2 of
	  %% Line 54
	  <{'alu',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'do_alu'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 55
	  <{'jmp',_cor11,_cor12,_cor13}> when 'true' ->
	      apply 'do_jmp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 57
	  <{'pseudo_call',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      apply 'do_pseudo_call'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 58
	  <{'pseudo_move',_cor18,_cor19}> when 'true' ->
	      apply 'do_pseudo_move'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 59
	  <{'pseudo_set',_cor20,_cor21}> when 'true' ->
	      apply 'do_pseudo_set'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 60
	  <{'pseudo_tailcall',_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      apply 'do_pseudo_tailcall'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 61
	  <{'rdy',_cor26}> when 'true' ->
	      apply 'do_rdy'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 62
	  <{'sethi',_cor27,_cor28}> when 'true' ->
	      apply 'do_sethi'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 63
	  <{'store',_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      apply 'do_store'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 64
	  <{'pseudo_fload',_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      apply 'do_pseudo_fload'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 65
	  <{'pseudo_fstore',_cor37,_cor38,_cor39}> when 'true' ->
	      apply 'do_pseudo_fstore'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 66
	  <_cor40> when 'true' ->
	      {[_cor2|[]],'false'}
	end
'do_alu'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'alu',_cor17,Src1,Src2,Dst},TempMap,Strategy> when 'true' ->
	      %% Line 72
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 73
		    case apply 'fix_src1'/3
			     (Src1, TempMap, Strategy) of
		      <{FixSrc1,NewSrc1,DidSpill2}> when 'true' ->
			  %% Line 74
			  case apply 'fix_src2_or_imm'/3
				   (Src2, TempMap, Strategy) of
			    <{FixSrc2,NewSrc2,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 75
				    {'alu',_cor17,NewSrc1,NewSrc2,NewDst}
				in  let <_cor12> =
					%% Line 76
					call 'erlang':'++'
					    (FixSrc2, [_cor8|FixDst])
				    in  let <_cor13> =
					    %% Line 76
					    call 'erlang':'++'
						(FixSrc1, _cor12)
					in  let <_cor10> =
						%% Line 76
						call 'erlang':'or'
						    (DidSpill1, DidSpill2)
					    in  let <_cor11> =
						    %% Line 76
						    call 'erlang':'or'
							(_cor10, DidSpill3)
						in  %% Line 76
						    {_cor13,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_alu',3}}] )
	    -| ['compiler_generated'] )
	end
'do_jmp'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'jmp',Src1,Src2,_cor15},TempMap,Strategy> when 'true' ->
	      %% Line 79
	      case apply 'fix_src1'/3
		       (Src1, TempMap, Strategy) of
		<{FixSrc1,NewSrc1,DidSpill1}> when 'true' ->
		    %% Line 80
		    case apply 'fix_src2_or_imm'/3
			     (Src2, TempMap, Strategy) of
		      <{FixSrc2,NewSrc2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 81
			      {'jmp',NewSrc1,NewSrc2,_cor15}
			  in  let <_cor10> =
				  %% Line 82
				  call 'erlang':'++'
				      (FixSrc2, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 82
				      call 'erlang':'++'
					  (FixSrc1, _cor10)
				  in  let <_cor9> =
					  %% Line 82
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 82
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_jmp',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_call'/3 =
    %% Line 91
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_call',FunV,_cor12,_cor13,_cor14},TempMap,Strategy> when 'true' ->
	      %% Line 92
	      case apply 'fix_funv'/3
		       (FunV, TempMap, Strategy) of
		<{FixFunV,NewFunV,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 93
			call 'erlang':'setelement'
			    (2, I, NewFunV)
		    in  let <_cor8> =
			    %% Line 94
			    call 'erlang':'++'
				(FixFunV, [_cor6|[]])
			in  %% Line 94
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_call',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_move'/3 =
    %% Line 96
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_move',Src,Dst},TempMap,Strategy> when 'true' ->
	      %% Line 101
	      case apply 'temp_is_spilled'/2
		       (Dst, TempMap) of
		%% Line 102
		<'true'> when 'true' ->
		    %% Line 103
		    case apply 'fix_src1'/3
			     (Src, TempMap, Strategy) of
		      <{FixSrc,NewSrc,DidSpill}> when 'true' ->
			  let <_cor6> =
			      %% Line 104
			      call 'erlang':'setelement'
				  (2, I, NewSrc)
			  in  let <_cor8> =
				  %% Line 105
				  call 'erlang':'++'
				      (FixSrc, [_cor6|[]])
			      in  %% Line 105
				  {_cor8,DidSpill}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 106
		<_cor16> when 'true' ->
		    %% Line 107
		    {[I|[]],'false'}
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_pseudo_move',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_set'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_set',_cor11,Dst},TempMap,Strategy> when 'true' ->
	      %% Line 111
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 112
			call 'erlang':'setelement'
			    (3, I, NewDst)
		    in  %% Line 113
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_pseudo_set',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_tailcall'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_tailcall',FunV,_cor12,_cor13,_cor14},TempMap,Strategy> when 'true' ->
	      %% Line 116
	      case apply 'fix_funv'/3
		       (FunV, TempMap, Strategy) of
		<{FixFunV,NewFunV,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 117
			call 'erlang':'setelement'
			    (2, I, NewFunV)
		    in  let <_cor8> =
			    %% Line 118
			    call 'erlang':'++'
				(FixFunV, [_cor6|[]])
			in  %% Line 118
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_tailcall',3}}] )
	    -| ['compiler_generated'] )
	end
'do_rdy'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'rdy',Dst},TempMap,Strategy> when 'true' ->
	      %% Line 121
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> = {%% Line 122
			 'rdy',%% Line 122
			       NewDst}
		    in  %% Line 123
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_rdy',3}}] )
	    -| ['compiler_generated'] )
	end
'do_sethi'/3 =
    %% Line 125
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'sethi',_cor11,Dst},TempMap,Strategy> when 'true' ->
	      %% Line 126
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 127
			call 'erlang':'setelement'
			    (3, I, NewDst)
		    in  %% Line 128
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_sethi',3}}] )
	    -| ['compiler_generated'] )
	end
'do_store'/3 =
    %% Line 130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'store',_cor18,Src,Base,Disp},TempMap,Strategy> when 'true' ->
	      %% Line 131
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 132
		    case apply 'fix_src2'/3
			     (Base, TempMap, Strategy) of
		      <{FixBase,NewBase,DidSpill2}> when 'true' ->
			  %% Line 133
			  case apply 'fix_src3_or_imm'/3
				   (Disp, TempMap, Strategy) of
			    <{FixDisp,NewDisp,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 134
				    {'store',_cor18,NewSrc,NewBase,NewDisp}
				in  let <_cor12> =
					%% Line 135
					call 'erlang':'++'
					    (FixDisp, [_cor8|[]])
				    in  let <_cor13> =
					    %% Line 135
					    call 'erlang':'++'
						(FixBase, _cor12)
					in  let <_cor14> =
						%% Line 135
						call 'erlang':'++'
						    (FixSrc, _cor13)
					    in  let <_cor10> =
						    %% Line 135
						    call 'erlang':'or'
							(DidSpill1, DidSpill2)
						in  let <_cor11> =
							%% Line 135
							call 'erlang':'or'
							    (_cor10, DidSpill3)
						    in  %% Line 135
							{_cor14,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'do_store',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_fload'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_fload',Base,_cor12,_cor13,_cor14},TempMap,Strategy> when 'true' ->
	      %% Line 138
	      case apply 'fix_src1'/3
		       (Base, TempMap, Strategy) of
		<{FixBase,NewBase,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 139
			call 'erlang':'setelement'
			    (2, I, NewBase)
		    in  let <_cor8> =
			    %% Line 140
			    call 'erlang':'++'
				(FixBase, [_cor6|[]])
			in  %% Line 140
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_fload',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_fstore'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_fstore',_cor12,Base,_cor13},TempMap,Strategy> when 'true' ->
	      %% Line 143
	      case apply 'fix_src1'/3
		       (Base, TempMap, Strategy) of
		<{FixBase,NewBase,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 144
			call 'erlang':'setelement'
			    (3, I, NewBase)
		    in  let <_cor8> =
			    %% Line 145
			    call 'erlang':'++'
				(FixBase, [_cor6|[]])
			in  %% Line 145
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_fstore',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_funv'/3 =
    %% Line 149
    fun (_cor2,_cor1,_cor0) ->
	%% Line 150
	case _cor2 of
	  %% Line 151
	  <{'sparc_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src3'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 152
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_src2_or_imm'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	%% Line 156
	case _cor2 of
	  %% Line 157
	  <{'sparc_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src2'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 158
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_src3_or_imm'/3 =
    %% Line 161
    fun (_cor2,_cor1,_cor0) ->
	%% Line 162
	case _cor2 of
	  %% Line 163
	  <{'sparc_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src3'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 164
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_src1'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 168
	    apply 'temp1'/1
		(_cor0)
	in  %% Line 168
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp1'/1 =
    %% Line 170
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 171
	  <'fixed'> when 'true' ->
	      call 'hipe_sparc_registers':'temp1'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp1',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src2'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 174
	    apply 'temp2'/1
		(_cor0)
	in  %% Line 174
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp2'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 177
	  <'fixed'> when 'true' ->
	      call 'hipe_sparc_registers':'temp2'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp2',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src3'/3 =
    %% Line 179
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 180
	    apply 'temp3'/1
		(_cor0)
	in  %% Line 180
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp3'/1 =
    %% Line 182
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 183
	  <'fixed'> when 'true' ->
	      call 'hipe_sparc_registers':'temp3'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp3',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	%% Line 186
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 187
	  <'true'> when 'true' ->
	      let <NewSrc> =
		  %% Line 188
		  apply 'clone'/2
		      (_cor2, _cor0)
	      in  let <_cor4> =
		      %% Line 189
		      call 'hipe_sparc':'mk_pseudo_move'
			  (_cor2, NewSrc)
		  in  %% Line 189
		      {[_cor4|[]],NewSrc,'true'}
	  %% Line 190
	  <_cor9> when 'true' ->
	      %% Line 191
	      {[],_cor2,'false'}
	end
'fix_dst'/3 =
    %% Line 194
    fun (_cor2,_cor1,_cor0) ->
	%% Line 195
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 196
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 197
		  apply 'temp1'/1
		      (_cor0)
	      in  let <NewDst> =
		      %% Line 197
		      apply 'clone'/2
			  (_cor2, _cor3)
		  in  let <_cor5> =
			  %% Line 198
			  call 'hipe_sparc':'mk_pseudo_move'
			      (NewDst, _cor2)
		      in  %% Line 198
			  {[_cor5|[]],NewDst,'true'}
	  %% Line 199
	  <_cor10> when 'true' ->
	      %% Line 200
	      {[],_cor2,'false'}
	end
'temp_is_spilled'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Temp,[]> when 'true' ->
	      let <_cor2> =
		  %% Line 206
		  call 'hipe_sparc':'temp_is_precoloured'
		      (Temp)
	      in  %% Line 206
		  call 'erlang':'not'
		      (_cor2)
	  %% Line 207
	  <Temp,TempMap> when 'true' ->
	      %% Line 208
	      case call 'hipe_sparc':'temp_is_allocatable'
		       (Temp) of
		%% Line 209
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 210
			call 'hipe_sparc':'temp_reg'
			    (Temp)
		    in  let <_cor5> =
			    %% Line 211
			    call 'erlang':'tuple_size'
				(TempMap)
			in  %% Line 211
			    ( case <> of
				( <>
				      when call 'erlang':'>'
					    (_cor5,
					     Reg) ->
				      call 'hipe_temp_map':'is_spilled'
					  (Reg, TempMap)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 212
		<'false'> when 'true' ->
		    'true'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'clone'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <Type> =
	    %% Line 218
	    call 'hipe_sparc':'temp_type'
		(_cor1)
	in  %% Line 219
	    case _cor0 of
	      %% Line 220
	      <[]> when 'true' ->
		  call 'hipe_sparc':'mk_new_temp'
		      (Type)
	      %% Line 221
	      <Reg> when 'true' ->
		  call 'hipe_sparc':'mk_temp'
		      (Reg, Type)
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_postconditions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_postconditions', _cor0)
end