module 'hipe_arm_frame' ['frame'/1,
			 'module_info'/0,
			 'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}],
		%% Line 337
		'type' =
		    %% Line 337
		    [{{'record','context'},[{'record_field',337,{'atom',337,'liveness'}}|[{'record_field',337,{'atom',337,'framesize'}}|[{'record_field',337,{'atom',337,'arity'}}|[{'record_field',337,{'atom',337,'map'}}|[{'record_field',337,{'atom',337,'clobbers_lr'}}|[{'record_field',337,{'atom',337,'ref_maxstack'}}]]]]]],[]}]]
'frame'/1 =
    %% Line 29
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 30
	    call 'hipe_arm':'defun_formals'
		(_cor0)
	in  let <Formals> =
		%% Line 30
		apply 'fix_formals'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 31
		    call 'hipe_arm':'defun_code'
			(_cor0)
		in  let <Temps0> =
			%% Line 31
			apply 'all_temps'/2
			    (_cor3, Formals)
		    in  let <MinFrame> =
			    %% Line 32
			    apply 'defun_minframe'/1
				(_cor0)
			in  let <Temps> =
				%% Line 33
				apply 'ensure_minframe'/2
				    (MinFrame, Temps0)
			    in  let <_cor7> =
				    %% Line 34
				    call 'hipe_arm':'defun_code'
					(_cor0)
				in  let <ClobbersLR> =
					%% Line 34
					apply 'clobbers_lr'/1
					    (_cor7)
				    in  let <CFG0> =
					    %% Line 35
					    call 'hipe_arm_cfg':'init'
						(_cor0)
					in  let <Liveness> =
						%% Line 36
						call 'hipe_arm_liveness_gpr':'analyse'
						    (CFG0)
					    in  let <CFG1> =
						    %% Line 37
						    apply 'do_body'/5
							(CFG0, Liveness, Formals, Temps, ClobbersLR)
						in  %% Line 38
						    call 'hipe_arm_cfg':'linearise'
							(CFG1)
'fix_formals'/1 =
    %% Line 40
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 41
	    call 'hipe_arm_registers':'nr_args'
		()
	in  %% Line 41
	    apply 'fix_formals'/2
		(_cor1, _cor0)
'fix_formals'/2 =
    %% Line 43
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Rest> when 'true' ->
	      Rest
	  %% Line 44
	  <N,[_cor5|Rest]> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'fix_formals'/2
		      (_cor2, Rest)
	  %% Line 45
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fix_formals',2}}] )
	    -| ['compiler_generated'] )
	end
'do_body'/5 =
    %% Line 47
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Context> =
	    %% Line 48
	    apply 'mk_context'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  let <CFG1> =
		%% Line 49
		apply 'do_blocks'/2
		    (_cor4, Context)
	    in  %% Line 50
		apply 'do_prologue'/2
		    (CFG1, Context)
'do_blocks'/2 =
    %% Line 52
    fun (_cor1,_cor0) ->
	let <Labels> =
	    %% Line 53
	    call 'hipe_arm_cfg':'labels'
		(_cor1)
	in  %% Line 54
	    apply 'do_blocks'/3
		(Labels, _cor1, _cor0)
'do_blocks'/3 =
    %% Line 56
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Labels],CFG,Context> when 'true' ->
	      let <Liveness> =
		  %% Line 57
		  apply 'context_liveness'/1
		      (Context)
	      in  let <LiveOut> =
		      %% Line 58
		      call 'hipe_arm_liveness_gpr':'liveout'
			  (Liveness, Label)
		  in  let <Block> =
			  %% Line 59
			  call 'hipe_arm_cfg':'bb'
			      (CFG, Label)
		      in  let <Code> =
			      %% Line 60
			      call 'hipe_bb':'code'
				  (Block)
			  in  let <NewCode> =
				  %% Line 61
				  apply 'do_block'/3
				      (Code, LiveOut, Context)
			      in  let <NewBlock> =
				      %% Line 62
				      call 'hipe_bb':'code_update'
					  (Block, NewCode)
				  in  let <NewCFG> =
					  %% Line 63
					  call 'hipe_arm_cfg':'bb_add'
					      (CFG, Label, NewBlock)
				      in  %% Line 64
					  apply 'do_blocks'/3
					      (Labels, NewCFG, Context)
	  %% Line 65
	  <[],CFG,_cor13> when 'true' ->
	      %% Line 66
	      CFG
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'do_block'/3 =
    %% Line 68
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 69
	    apply 'context_framesize'/1
		(_cor0)
	in  %% Line 69
	    apply 'do_block'/5
		(_cor2, _cor1, _cor0, _cor3, [])
'do_block'/5 =
    %% Line 71
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],LiveOut,Context,FPoff0,RevCode> when 'true' ->
	      %% Line 72
	      case apply 'do_insn'/4
		       (I, LiveOut, Context, FPoff0) of
		<{NewIs,FPoff1}> when 'true' ->
		    let <_cor6> =
			%% Line 73
			call 'lists':'reverse'
			    (NewIs, RevCode)
		    in  %% Line 73
			apply 'do_block'/5
			    (Insns, LiveOut, Context, FPoff1, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 74
	  <[],_cor13,Context,FPoff,RevCode> when 'true' ->
	      let <FPoff0> =
		  %% Line 75
		  apply 'context_framesize'/1
		      (Context)
	      in  do  %% Line 76
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (FPoff,
				   FPoff0) ->
			    []
			%% Line 77
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_arm_frame','do_block',FPoff})
		      end
		      %% Line 79
		      call 'lists':'reverse'
			  (RevCode, [])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_block',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/4 =
    %% Line 81
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 82
	case _cor3 of
	  %% Line 83
	  <{'pseudo_blr'}> when 'true' ->
	      let <_cor5> =
		  %% Line 84
		  apply 'do_pseudo_blr'/3
		      (_cor3, _cor1, _cor0)
	      in  let <_cor4> =
		      %% Line 84
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 84
		      {_cor5,_cor4}
	  %% Line 85
	  <{'pseudo_call',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 86
	      apply 'do_pseudo_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 87
	  <{'pseudo_call_prepare',_cor18}> when 'true' ->
	      %% Line 88
	      apply 'do_pseudo_call_prepare'/2
		  (_cor3, _cor0)
	  %% Line 89
	  <{'pseudo_move',_cor19,_cor20}> when 'true' ->
	      let <_cor6> =
		  %% Line 90
		  apply 'do_pseudo_move'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 90
		  {_cor6,_cor0}
	  %% Line 91
	  <{'pseudo_tailcall',_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor8> =
		  %% Line 92
		  apply 'do_pseudo_tailcall'/2
		      (_cor3, _cor1)
	      in  let <_cor7> =
		      %% Line 92
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 92
		      {_cor8,_cor7}
	  %% Line 93
	  <_cor25> when 'true' ->
	      %% Line 94
	      {[_cor3|[]],_cor0}
	end
'do_pseudo_move'/3 =
    %% Line 101
    fun (_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 102
	    call 'hipe_arm':'pseudo_move_dst'
		(_cor2)
	in  let <Src> =
		%% Line 103
		call 'hipe_arm':'pseudo_move_src'
		    (_cor2)
	    in  %% Line 104
		case apply 'temp_is_pseudo'/1
			 (Dst) of
		  %% Line 105
		  <'true'> when 'true' ->
		      let <Offset> =
			  %% Line 106
			  apply 'pseudo_offset'/3
			      (Dst, _cor0, _cor1)
		      in  let <_cor6> =
			      %% Line 107
			      apply 'mk_sp'/0
				  ()
			  in  %% Line 107
			      apply 'mk_store'/5
				  ('str', Src, Offset, _cor6, [])
		  %% Line 108
		  <_cor15> when 'true' ->
		      %% Line 109
		      case apply 'temp_is_pseudo'/1
			       (Src) of
			%% Line 110
			<'true'> when 'true' ->
			    let <Offset> =
				%% Line 111
				apply 'pseudo_offset'/3
				    (Src, _cor0, _cor1)
			    in  let <_cor8> =
				    %% Line 112
				    apply 'mk_sp'/0
					()
				in  %% Line 112
				    apply 'mk_load'/5
					('ldr', Dst, Offset, _cor8, [])
			%% Line 113
			<_cor16> when 'true' ->
			    let <_cor9> =
				%% Line 114
				call 'hipe_arm':'mk_move'
				    (Dst, Src)
			    in  %% Line 114
				[_cor9|[]]
		      end
		end
'pseudo_offset'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 119
	    apply 'context_offset'/2
		(_cor0, _cor2)
	in  %% Line 119
	    call 'erlang':'+'
		(_cor1, _cor3)
'do_pseudo_blr'/3 =
    %% Line 125
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 131
	    apply 'word_size'/0
		()
	in  let <_cor3> =
		%% Line 131
		apply 'context_arity'/1
		    (_cor1)
	    in  let <_cor5> =
		    %% Line 131
		    call 'erlang':'*'
			(_cor4, _cor3)
		in  let <_cor6> =
			%% Line 131
			call 'erlang':'+'
			    (_cor0, _cor5)
		    in  let <_cor7> =
			    %% Line 131
			    apply 'adjust_sp'/2
				(_cor6, %% Line 132
					[_cor2|[]])
			in  %% Line 130
			    apply 'restore_lr'/3
				(_cor0, _cor1, _cor7)
'restore_lr'/3 =
    %% Line 134
    fun (_cor2,_cor1,_cor0) ->
	%% Line 135
	case apply 'context_clobbers_lr'/1
		 (_cor1) of
	  %% Line 136
	  <'false'> when 'true' ->
	      _cor0
	  %% Line 137
	  <'true'> when 'true' ->
	      let <LR> =
		  %% Line 138
		  call 'hipe_arm':'mk_lr'
		      ()
	      in  let <_cor5> =
		      %% Line 139
		      apply 'word_size'/0
			  ()
		  in  let <_cor6> =
			  %% Line 139
			  call 'erlang':'-'
			      (_cor2, _cor5)
		      in  let <_cor4> =
			      %% Line 139
			      apply 'mk_sp'/0
				  ()
			  in  %% Line 139
			      apply 'mk_load'/5
				  ('ldr', LR, _cor6, _cor4, _cor0)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'adjust_sp'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	%% Line 144
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor1,
		     0) ->
	      _cor0
	  %% Line 146
	  <> when 'true' ->
	      let <SP> =
		  %% Line 147
		  apply 'mk_sp'/0
		      ()
	      in  %% Line 148
		  call 'hipe_arm':'mk_addi'
		      (SP, SP, _cor1, _cor0)
	end
'do_pseudo_call_prepare'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	let <NrStkArgs> =
	    %% Line 157
	    call 'hipe_arm':'pseudo_call_prepare_nrstkargs'
		(_cor1)
	in  let <_cor3> =
		%% Line 158
		apply 'word_size'/0
		    ()
	    in  let <Offset> =
		    %% Line 158
		    call 'erlang':'*'
			(NrStkArgs, _cor3)
		in  let <_cor6> =
			%% Line 159
			call 'erlang':'-'
			    (Offset)
		    in  let <_cor7> =
			    %% Line 159
			    apply 'adjust_sp'/2
				(_cor6, [])
			in  let <_cor5> =
				%% Line 159
				call 'erlang':'+'
				    (_cor0, Offset)
			    in  %% Line 159
				{_cor7,_cor5}
'do_pseudo_call'/4 =
    %% Line 161
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 162
	case call 'hipe_arm':'pseudo_call_sdesc'
		 (_cor3) of
	  <{'arm_sdesc',ExnLab,_cor29,OrigArity,_cor30}> when 'true' ->
	      let <FunV> =
		  %% Line 163
		  call 'hipe_arm':'pseudo_call_funv'
		      (_cor3)
	      in  let <_cor11> =
		      %% Line 164
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[Temp|_cor7]> when 'true' ->
					  ( case apply 'temp_is_pseudo'/1
						     (Temp) of
					      <'true'> when 'true' ->
						  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor7)
						  in  ( [Temp|_cor9]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						-| ['compiler_generated'] )
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor2)
			-| ['list_comprehension'] )
		  in  let <SDesc> =
			  %% Line 165
			  apply 'mk_sdesc'/3
			      (ExnLab, _cor1, _cor11)
		      in  let <ContLab> =
			      %% Line 166
			      call 'hipe_arm':'pseudo_call_contlab'
				  (_cor3)
			  in  let <Linkage> =
				  %% Line 167
				  call 'hipe_arm':'pseudo_call_linkage'
				      (_cor3)
			      in  let <_cor16> =
				      %% Line 168
				      call 'hipe_arm':'mk_pseudo_call'
					  (FunV, SDesc, ContLab, Linkage)
				  in  let <CallCode> =
					  %% Line 168
					  [_cor16|[]]
				      in  let <_cor18> =
					      %% Line 169
					      call 'hipe_arm_registers':'nr_args'
						  ()
					  in  let <_cor19> =
						  %% Line 169
						  call 'erlang':'-'
						      (OrigArity, _cor18)
					      in  let <StkArity> =
						      %% Line 169
						      call 'erlang':'max'
							  (0, _cor19)
						  in  let <_cor21> =
							  %% Line 170
							  apply 'stack_need'/3
							      (_cor0, StkArity, FunV)
						      in  do  %% Line 170
							      apply 'context_need_stack'/2
								  (_cor1, _cor21)
							      let <_cor22> =
								  %% Line 171
								  apply 'word_size'/0
								      ()
							      in  let <ArgsBytes> =
								      %% Line 171
								      call 'erlang':'*'
									  (_cor22, StkArity)
								  in  let <_cor24> =
									  %% Line 172
									  call 'erlang':'-'
									      (_cor0, ArgsBytes)
								      in  %% Line 172
									  {CallCode,_cor24}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'stack_need'/3 =
    %% Line 174
    fun (_cor2,_cor1,_cor0) ->
	%% Line 175
	case _cor0 of
	  %% Line 176
	  <{'arm_prim',_cor8}> when 'true' ->
	      _cor2
	  %% Line 177
	  <{'arm_mfa',M,F,A}> when 'true' ->
	      %% Line 178
	      case call 'erlang':'is_builtin'
		       (M, F, A) of
		%% Line 179
		<'true'> when 'true' ->
		    _cor2
		%% Line 180
		<'false'> when 'true' ->
		    apply 'stack_need_general'/2
			(_cor2, _cor1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 182
	  <_cor9> when 'true' ->
	      apply 'stack_need_general'/2
		  (_cor2, _cor1)
	end
'stack_need_general'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 186
	    call 'erlang':'-'
		(16, _cor0)
	in  let <_cor2> =
		%% Line 186
		apply 'word_size'/0
		    ()
	    in  let <_cor4> =
		    %% Line 186
		    call 'erlang':'*'
			(_cor3, _cor2)
		in  let <_cor5> =
			%% Line 186
			call 'erlang':'+'
			    (_cor1, _cor4)
		    in  %% Line 186
			call 'erlang':'max'
			    (_cor1, _cor5)
'mk_sdesc'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	let <Temps0> =
	    %% Line 193
	    apply 'only_tagged'/1
		(_cor0)
	in  let <Live> =
		%% Line 194
		apply 'mk_live'/2
		    (_cor1, Temps0)
	    in  let <Arity> =
		    %% Line 195
		    apply 'context_arity'/1
			(_cor1)
		in  let <FSize> =
			%% Line 196
			apply 'context_framesize'/1
			    (_cor1)
		    in  let <_cor8> =
			    %% Line 197
			    apply 'word_size'/0
				()
			in  let <_cor9> =
				%% Line 197
				call 'erlang':'div'
				    (FSize, _cor8)
			    in  let <_cor10> =
				    %% Line 197
				    call 'erlang':'-'
					(_cor9, 1)
				in  let <_cor7> =
					%% Line 198
					call 'erlang':'list_to_tuple'
					    (Live)
				    in  %% Line 197
					call 'hipe_arm':'mk_sdesc'
					    (_cor2, _cor10, Arity, _cor7)
'only_tagged'/1 =
    %% Line 200
    fun (_cor0) ->
	%% Line 201
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor2]> when 'true' ->
			    let <_cor3> =
				call 'hipe_arm':'temp_type'
				    (X)
			    in  ( case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor3,
					       'tagged') ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [X|_cor5]
					      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'mk_live'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 204
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Temp|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'temp_to_slot'/2
					(_cor1, Temp)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 204
	    call 'lists':'sort'
		(_cor7)
'temp_to_slot'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 207
	    apply 'context_framesize'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 207
		apply 'context_offset'/2
		    (_cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 207
		    call 'erlang':'+'
			(_cor4, _cor3)
		in  let <_cor2> =
			%% Line 208
			apply 'word_size'/0
			    ()
		    in  %% Line 208
			call 'erlang':'div'
			    (_cor5, _cor2)
'mk_minimal_sdesc'/1 =
    %% Line 210
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 211
	    apply 'context_arity'/1
		(_cor0)
	in  %% Line 211
	    call 'hipe_arm':'mk_sdesc'
		([], 0, _cor1, {})
'do_pseudo_tailcall'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <Arity> =
	    %% Line 218
	    apply 'context_arity'/1
		(_cor0)
	in  let <Args> =
		%% Line 219
		call 'hipe_arm':'pseudo_tailcall_stkargs'
		    (_cor1)
	    in  let <FunV> =
		    %% Line 220
		    call 'hipe_arm':'pseudo_tailcall_funv'
			(_cor1)
		in  let <Linkage> =
			%% Line 221
			call 'hipe_arm':'pseudo_tailcall_linkage'
			    (_cor1)
		    in  %% Line 222
			case apply 'do_tailcall_args'/2
				 (Args, _cor0) of
			  <{Insns,FPoff1}> when 'true' ->
			      do  %% Line 223
				  apply 'context_need_stack'/2
				      (_cor0, FPoff1)
				  let <StkArity> =
				      %% Line 224
				      call 'erlang':'length'
					  (Args)
				  in  let <_cor9> =
					  %% Line 225
					  call 'erlang':'-'
					      (Arity, StkArity)
				      in  let <_cor8> =
					      %% Line 225
					      apply 'word_size'/0
						  ()
					  in  let <_cor10> =
						  %% Line 225
						  call 'erlang':'*'
						      (_cor9, _cor8)
					      in  let <FPoff2> =
						      %% Line 225
						      call 'erlang':'+'
							  (FPoff1, _cor10)
						  in  let <_cor12> =
							  %% Line 226
							  apply 'stack_need'/3
							      (FPoff2, StkArity, FunV)
						      in  do  %% Line 226
							      apply 'context_need_stack'/2
								  (_cor0, _cor12)
							      let <_cor14> =
								  %% Line 228
								  case FunV of
								    %% Line 229
								    <{'arm_temp',_cor21,_cor22,_cor23}> when 'true' ->
									%% Line 230
									call 'hipe_arm':'mk_bx'
									    (FunV)
								    %% Line 231
								    <Fun> when 'true' ->
									%% Line 232
									call 'hipe_arm':'mk_b_fun'
									    (Fun, Linkage)
								  end
							      in  let <_cor18> =
								      %% Line 235
								      apply 'context_framesize'/1
									  (_cor0)
								  in  let <_cor16> =
									  %% Line 236
									  apply 'adjust_sp'/2
									      (FPoff2, [_cor14|[]])
								      in  let <_cor17> =
									      %% Line 236
									      call 'erlang':'++'
										  (Insns, _cor16)
									  in  %% Line 235
									      apply 'restore_lr'/3
										  (_cor18, _cor0, _cor17)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
'do_tailcall_args'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	let <FPoff0> =
	    %% Line 239
	    apply 'context_framesize'/1
		(_cor0)
	in  let <Arity> =
		%% Line 240
		apply 'context_arity'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 241
		    apply 'word_size'/0
			()
		in  let <FrameTop> =
			%% Line 241
			call 'erlang':'*'
			    (_cor4, Arity)
		    in  let <_cor7> =
			    %% Line 242
			    apply 'word_size'/0
				()
			in  let <_cor6> =
				%% Line 242
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor8> =
				    %% Line 242
				    call 'erlang':'*'
					(_cor7, _cor6)
				in  let <DangerOff> =
					%% Line 242
					call 'erlang':'-'
					    (FrameTop, _cor8)
				    in  let <Moves> =
					    %% Line 244
					    apply 'mk_moves'/3
						(_cor1, FrameTop, [])
					in  %% Line 246
					    case %% Line 247
						 apply 'split_moves'/6
						     (Moves, _cor0, DangerOff, [], [], []) of
					      <{Stores,Simple,Conflict}> when 'true' ->
						  do  %% Line 249
						      case <> of
							<>
							    when try
								  let <_cor12> =
								      call 'erlang':'-'
									  (FPoff0)
								  in  call 'erlang':'<'
									  (DangerOff, _cor12)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_cor13> =
								%% Line 250
								call 'erlang':'-'
								    (FPoff0)
							    in  %% Line 250
								call 'erlang':'exit'
								    ({'hipe_arm_frame','do_tailcall_args',DangerOff,_cor13})
							%% Line 251
							<> when 'true' ->
							    []
						      end
						      %% Line 255
						      case apply 'split_conflict'/4
							       (Conflict, FPoff0, [], []) of
							<{Pushes,Pops,FPoff2}> when 'true' ->
							    let <TempReg> =
								%% Line 257
								call 'hipe_arm_registers':'temp1'
								    ()
							    in  let <_cor21> =
								    %% Line 259
								    call 'erlang':'-'
									(FPoff2, FPoff0)
								in  let <_cor22> =
									%% Line 259
									call 'erlang':'-'
									    (_cor21)
								    in  let <_cor17> =
									    %% Line 263
									    apply 'simple_moves'/4
										(Pops, FPoff2, TempReg, %% Line 264
													[])
									in  let <_cor18> =
										%% Line 262
										apply 'simple_moves'/4
										    (Simple, FPoff2, TempReg, _cor17)
									    in  let <_cor19> =
										    %% Line 261
										    apply 'store_moves'/4
											(Stores, FPoff2, TempReg, _cor18)
										in  let <_cor20> =
											%% Line 260
											apply 'simple_moves'/4
											    (Pushes, FPoff2, TempReg, _cor19)
										    in  let <_cor23> =
											    %% Line 259
											    apply 'adjust_sp'/2
												(_cor22, _cor20)
											in  %% Line 259
											    {_cor23,%% Line 265
												    FPoff2}
							( <_cor15> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor15})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor11})
						-| ['compiler_generated'] )
					    end
'mk_moves'/3 =
    %% Line 267
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|Args],Off,Moves> when 'true' ->
	      let <_cor3> =
		  %% Line 268
		  apply 'word_size'/0
		      ()
	      in  let <Off1> =
		      %% Line 268
		      call 'erlang':'-'
			  (Off, _cor3)
		  in  %% Line 269
		      apply 'mk_moves'/3
			  (Args, Off1, [{Arg,Off1}|Moves])
	  %% Line 270
	  <[],_cor8,Moves> when 'true' ->
	      %% Line 271
	      Moves
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mk_moves',3}}] )
	    -| ['compiler_generated'] )
	end
'split_moves'/6 =
    %% Line 273
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Move|Moves],Context,DangerOff,Stores,Simple,Conflict> when 'true' ->
	      %% Line 274
	      case Move of
		<{Src,DstOff}> when 'true' ->
		    %% Line 275
		    case apply 'src_is_pseudo'/1
			     (Src) of
		      %% Line 276
		      <'false'> when 'true' ->
			  %% Line 277
			  apply 'split_moves'/6
			      (Moves, Context, DangerOff, [Move|Stores], %% Line 278
									 Simple, %% Line 278
										 Conflict)
		      %% Line 279
		      <'true'> when 'true' ->
			  let <SrcOff> =
			      %% Line 280
			      apply 'context_offset'/2
				  (Context, Src)
			  in  let <Type> =
				  %% Line 281
				  apply 'typeof_temp'/1
				      (Src)
			      in  %% Line 282
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (SrcOff,
					       DstOff) ->
					%% Line 283
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 284
										Simple, %% Line 284
											Conflict)
				    %% Line 285
				    <>
					when call 'erlang':'>='
					      (SrcOff,
					       DangerOff) ->
					%% Line 286
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 287
										Simple, %% Line 287
											[{SrcOff,DstOff,Type}|Conflict])
				    %% Line 288
				    <> when 'true' ->
					%% Line 289
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 290
										[{SrcOff,DstOff,Type}|Simple], %% Line 290
													       Conflict)
				  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 293
	  <[],_cor16,_cor17,Stores,Simple,Conflict> when 'true' ->
	      %% Line 294
	      {Stores,Simple,Conflict}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'split_moves',6}}] )
	    -| ['compiler_generated'] )
	end
'split_conflict'/4 =
    %% Line 296
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Conflict],FPoff,Pushes,Pops> when 'true' ->
	      let <_cor4> =
		  %% Line 297
		  apply 'word_size'/0
		      ()
	      in  let <FPoff1> =
		      %% Line 297
		      call 'erlang':'+'
			  (FPoff, _cor4)
		  in  let <_cor6> =
			  %% Line 298
			  call 'erlang':'-'
			      (FPoff1)
		      in  let <Push> = {%% Line 298
			       SrcOff,_cor6,%% Line 298
					    Type}
			  in  let <_cor8> =
				  %% Line 299
				  call 'erlang':'-'
				      (FPoff1)
			      in  let <Pop> = {_cor8,%% Line 299
					     DstOff,%% Line 299
						    Type}
				  in  %% Line 300
				      apply 'split_conflict'/4
					  (Conflict, FPoff1, [Push|Pushes], [Pop|Pops])
	  %% Line 301
	  <[],FPoff,Pushes,Pops> when 'true' ->
	      let <_cor10> =
		  %% Line 302
		  call 'lists':'reverse'
		      (Pushes)
	      in  %% Line 302
		  {_cor10,Pops,FPoff}
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'split_conflict',4}}] )
	    -| ['compiler_generated'] )
	end
'simple_moves'/4 =
    %% Line 304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Moves],FPoff,TempReg,Rest> when 'true' ->
	      let <Temp> =
		  %% Line 305
		  call 'hipe_arm':'mk_temp'
		      (TempReg, Type)
	      in  let <SP> =
		      %% Line 306
		      apply 'mk_sp'/0
			  ()
		  in  let <LoadOff> =
			  %% Line 307
			  call 'erlang':'+'
			      (FPoff, SrcOff)
		      in  let <StoreOff> =
			      %% Line 308
			      call 'erlang':'+'
				  (FPoff, DstOff)
			  in  let <_cor8> =
				  %% Line 311
				  apply 'mk_store'/5
				      ('str', Temp, StoreOff, SP, %% Line 312
								  Rest)
			      in  let <_cor9> =
				      %% Line 310
				      apply 'mk_load'/5
					  ('ldr', Temp, LoadOff, SP, _cor8)
				  in  %% Line 309
				      apply 'simple_moves'/4
					  (Moves, FPoff, TempReg, _cor9)
	  %% Line 313
	  <[],_cor14,_cor15,Rest> when 'true' ->
	      %% Line 314
	      Rest
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'simple_moves',4}}] )
	    -| ['compiler_generated'] )
	end
'store_moves'/4 =
    %% Line 316
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Src,DstOff}|Moves],FPoff,TempReg,Rest> when 'true' ->
	      let <SP> =
		  %% Line 318
		  apply 'mk_sp'/0
		      ()
	      in  let <StoreOff> =
		      %% Line 319
		      call 'erlang':'+'
			  (FPoff, DstOff)
		  in  let <NewSrc,FixSrc> =
			  %% Line 321
			  case call 'hipe_arm':'is_temp'
				   (Src) of
			    %% Line 322
			    <'true'> when 'true' ->
				%% Line 323
				<Src,[]>
			    %% Line 324
			    <_cor17> when 'true' ->
				let <Temp> =
				    %% Line 325
				    call 'hipe_arm':'mk_temp'
					(TempReg, 'untagged')
				in  let <_cor7> =
					%% Line 326
					call 'hipe_arm':'mk_li'
					    (Temp, Src)
				    in  %% Line 326
					<Temp,_cor7>
			  end
		      in  let <_cor11> =
			      %% Line 329
			      apply 'mk_store'/5
				  ('str', NewSrc, StoreOff, SP, Rest)
			  in  let <_cor12> =
				  %% Line 329
				  call 'erlang':'++'
				      (FixSrc, _cor11)
			      in  %% Line 328
				  apply 'store_moves'/4
				      (Moves, FPoff, TempReg, _cor12)
	  %% Line 330
	  <[],_cor18,_cor19,Rest> when 'true' ->
	      %% Line 331
	      Rest
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'store_moves',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_context'/4 =
    %% Line 339
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 340
	case apply 'mk_temp_map'/3
		 (_cor2, _cor0, _cor1) of
	  <{Map,MinOff}> when 'true' ->
	      let <FrameSize> =
		  %% Line 341
		  call 'erlang':'-'
		      (MinOff)
	      in  let <RefMaxStack> =
		      %% Line 342
		      call 'hipe_bifs':'ref'
			  (FrameSize)
		  in  let <_cor7> =
			  %% Line 344
			  call 'erlang':'length'
			      (_cor2)
		      in  %% Line 343
			  {'context',_cor3,%% Line 344
					   FrameSize,_cor7,%% Line 345
							   Map,_cor0,%% Line 345
								     RefMaxStack}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'context_need_stack'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor5,_cor6,_cor7,_cor8,_cor9,RM},N> when 'true' ->
	      let <M> =
		  %% Line 348
		  call 'hipe_bifs':'ref_get'
		      (RM)
	      in  %% Line 349
		  case <> of
		    <>
			when call 'erlang':'>'
			      (N,
			       M) ->
			call 'hipe_bifs':'ref_set'
			    (RM, N)
		    %% Line 350
		    <> when 'true' ->
			[]
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'context_need_stack',2}}] )
	    -| ['compiler_generated'] )
	end
'context_maxstack'/1 =
    %% Line 353
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,_cor6,RM}> when 'true' ->
	      %% Line 354
	      call 'hipe_bifs':'ref_get'
		  (RM)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_maxstack',1}}] )
	    -| ['compiler_generated'] )
	end
'context_arity'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,Arity,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 357
	      Arity
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'context_framesize'/1 =
    %% Line 359
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,FrameSize,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 360
	      FrameSize
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_framesize',1}}] )
	    -| ['compiler_generated'] )
	end
'context_liveness'/1 =
    %% Line 362
    fun (_cor0) ->
	case _cor0 of
	  <{'context',Liveness,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 363
	      Liveness
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_liveness',1}}] )
	    -| ['compiler_generated'] )
	end
'context_offset'/2 =
    %% Line 365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor4,_cor5,_cor6,Map,_cor7,_cor8},Temp> when 'true' ->
	      %% Line 366
	      apply 'tmap_lookup'/2
		  (Map, Temp)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'context_offset',2}}] )
	    -| ['compiler_generated'] )
	end
'context_clobbers_lr'/1 =
    %% Line 368
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,ClobbersLR,_cor6}> when 'true' ->
	      ClobbersLR
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_clobbers_lr',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_temp_map'/3 =
    %% Line 370
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 371
	    apply 'word_size'/0
		()
	in  let <_cor4> =
		%% Line 371
		call 'erlang':'length'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 371
		    call 'erlang':'*'
			(_cor5, _cor4)
		in  let <_cor3> =
			%% Line 372
			apply 'tmap_empty'/0
			    ()
		    in  %% Line 371
			case apply 'enter_vars'/3
				 (_cor2, _cor6, _cor3) of
			  <{Map,0}> when 'true' ->
			      let <TempsList> =
				  %% Line 373
				  apply 'tset_to_list'/1
				      (_cor0)
			      in  let <_cor11> =
				      %% Line 375
				      case _cor1 of
					%% Line 376
					<'false'> when 'true' ->
					    TempsList
					%% Line 377
					<'true'> when 'true' ->
					    let <RA> =
						%% Line 378
						call 'hipe_arm':'mk_new_temp'
						    ('untagged')
					    in  %% Line 379
						[RA|TempsList]
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor10})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 381
				      apply 'enter_vars'/3
					  (_cor11, 0, Map)
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'enter_vars'/3 =
    %% Line 383
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[V|Vs],PrevOff,Map> when 'true' ->
	      let <_cor7> =
		  %% Line 385
		  case call 'hipe_arm':'temp_type'
			   (V) of
		    %% Line 386
		    <'double'> when 'true' ->
			let <_cor3> =
			    apply 'word_size'/0
				()
			in  let <_cor4> =
				call 'erlang':'*'
				    (2, _cor3)
			    in  call 'erlang':'-'
				    (PrevOff, _cor4)
		    %% Line 387
		    <_cor13> when 'true' ->
			let <_cor5> =
			    apply 'word_size'/0
				()
			in  call 'erlang':'-'
				(PrevOff, _cor5)
		  end
	      in  let <_cor9> =
		      %% Line 389
		      apply 'tmap_bind'/3
			  (Map, V, _cor7)
		  in  %% Line 389
		      apply 'enter_vars'/3
			  (Vs, _cor7, _cor9)
	  %% Line 390
	  <[],Off,Map> when 'true' ->
	      %% Line 391
	      {Map,Off}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'enter_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'tmap_empty'/0 =
    %% Line 393
    fun () ->
	%% Line 394
	call 'gb_trees':'empty'
	    ()
'tmap_bind'/3 =
    %% Line 396
    fun (_cor2,_cor1,_cor0) ->
	%% Line 397
	call 'gb_trees':'insert'
	    (_cor1, _cor0, _cor2)
'tmap_lookup'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	%% Line 400
	call 'gb_trees':'get'
	    (_cor0, _cor1)
'do_prologue'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	let <MaxStack> =
	    %% Line 424
	    apply 'context_maxstack'/1
		(_cor0)
	in  %% Line 425
	    case <> of
	      <>
		  when call 'erlang':'>'
			(MaxStack,
			 0) ->
		  let <FrameSize> =
		      %% Line 426
		      apply 'context_framesize'/1
			  (_cor0)
		  in  let <OldStartLab> =
			  %% Line 427
			  call 'hipe_arm_cfg':'start_label'
			      (_cor1)
		      in  let <NewStartLab> =
			      %% Line 428
			      call 'hipe_gensym':'get_next_label'
				  ('arm')
			  in  let <_cor6> =
				  %% Line 430
				  call 'hipe_arm_registers':'proc_pointer'
				      ()
			      in  let <P> =
				      %% Line 430
				      call 'hipe_arm':'mk_temp'
					  (_cor6, 'untagged')
				  in  let <Temp1> =
					  %% Line 431
					  apply 'mk_temp1'/0
					      ()
				      in  let <SP> =
					      %% Line 432
					      apply 'mk_sp'/0
						  ()
					  in  let <LR> =
						  %% Line 434
						  call 'hipe_arm':'mk_lr'
						      ()
					      in  let <ClobbersLR> =
						      %% Line 435
						      apply 'context_clobbers_lr'/1
							  (_cor0)
						  in  let <_cor12> =
							  %% Line 436
							  call 'hipe_arm':'mk_b_label'
							      (OldStartLab)
						      in  let <GotoOldStartCode> =
							      %% Line 436
							      [_cor12|[]]
							  in  let <_cor17> =
								  %% Line 438
								  case ClobbersLR of
								    %% Line 439
								    <'false'> when 'true' ->
									GotoOldStartCode
								    %% Line 440
								    <'true'> when 'true' ->
									let <_cor14> =
									    apply 'word_size'/0
										()
									in  let <_cor15> =
										call 'erlang':'-'
										    (FrameSize, _cor14)
									    in  apply 'mk_store'/5
										    ('str', LR, _cor15, SP, GotoOldStartCode)
								    ( <_cor16> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor16})
								      -| ['compiler_generated'] )
								  end
							      in  let <Arity> =
								      %% Line 443
								      apply 'context_arity'/1
									  (_cor0)
								  in  let <_cor21> =
									  %% Line 444
									  call 'erlang':'-'
									      (16, Arity)
								      in  let <_cor20> =
									      %% Line 444
									      apply 'word_size'/0
										  ()
									  in  let <_cor22> =
										  %% Line 444
										  call 'erlang':'*'
										      (_cor21, _cor20)
									      in  let <Guaranteed> =
										      %% Line 444
										      call 'erlang':'max'
											  (0, _cor22)
										  in  let <CFG1,NewStartCode> =
											  %% Line 447
											  case <> of
											    <>
												when call 'erlang':'=<'
												      (MaxStack,
												       Guaranteed) ->
												let <_cor24> =
												    %% Line 449
												    call 'erlang':'-'
													(FrameSize)
												in  let <AllocFrameCode> =
													%% Line 449
													apply 'adjust_sp'/2
													    (_cor24, _cor17)
												    in  %% Line 451
													<_cor1,AllocFrameCode>
											    %% Line 452
											    <> when 'true' ->
												let <AllocFrameLab> =
												    %% Line 454
												    call 'hipe_gensym':'get_next_label'
													('arm')
												in  let <IncStackLab> =
													%% Line 455
													call 'hipe_gensym':'get_next_label'
													    ('arm')
												    in  let <Temp2> =
													    %% Line 456
													    apply 'mk_temp2'/0
														()
													in  let <_cor30> =
														%% Line 459
														call 'hipe_arm':'mk_pseudo_bc'
														    ('lo', IncStackLab, AllocFrameLab, 1.00000000000000002082e-02)
													    in  let <NewStartCodeTail2> =
														    %% Line 459
														    [_cor30|[]]
														in  let <_cor36> =
															%% Line 462
															call 'hipe_bifs':'get_rts_param'
															    (43)
														    in  let <_cor34> =
															    %% Line 463
															    call 'erlang':'-'
																(MaxStack)
															in  let <_cor33> =
																%% Line 464
																call 'hipe_arm':'mk_cmp'
																    ('cmp', Temp2, Temp1)
															    in  let <_cor35> =
																    %% Line 463
																    call 'hipe_arm':'mk_addi'
																	(Temp2, SP, _cor34, %% Line 464
																			    [_cor33|NewStartCodeTail2])
																in  let <NewStartCode0> =
																	%% Line 462
																	apply 'mk_load'/5
																	    ('ldr', Temp1, _cor36, P, _cor35)
																    in  let <_cor40> =
																	    %% Line 468
																	    case <> of
																	      <>
																		  when call 'erlang':'=:='
																			(MaxStack,
																			 FrameSize) ->
																		  let <_cor38> =
																		      %% Line 470
																		      call 'hipe_arm':'mk_move'
																			  (SP, Temp2)
																		  in  %% Line 470
																		      [_cor38|_cor17]
																	      %% Line 472
																	      <> when 'true' ->
																		  let <_cor39> =
																		      %% Line 474
																		      call 'erlang':'-'
																			  (FrameSize)
																		  in  %% Line 474
																		      apply 'adjust_sp'/2
																			  (_cor39, _cor17)
																	    end
																	in  let <_cor43> =
																		%% Line 478
																		call 'hipe_arm':'mk_prim'
																		    ('inc_stack_0')
																	    in  let <_cor42> =
																		    %% Line 479
																		    apply 'mk_minimal_sdesc'/1
																			(_cor0)
																		in  let <_cor44> =
																			%% Line 478
																			call 'hipe_arm':'mk_bl'
																			    (_cor43, _cor42, %% Line 479
																					     'not_remote')
																		    in  let <_cor45> =
																			    %% Line 480
																			    call 'hipe_arm':'mk_mtlr'
																				(Temp1)
																			in  let <_cor46> =
																				%% Line 481
																				call 'hipe_arm':'mk_b_label'
																				    (NewStartLab)
																			    in  let <IncStackCodeTail> =
																				    %% Line 478
																				    [_cor44|%% Line 480
																					    [_cor45|%% Line 481
																						    [_cor46|[]]]]
																				in  let <_cor48> =
																					%% Line 483
																					call 'hipe_arm':'mk_mflr'
																					    (Temp1)
																				    in  let <IncStackCode> =
																					    %% Line 483
																					    [_cor48|IncStackCodeTail]
																					in  let <_cor50> =
																						%% Line 486
																						call 'hipe_bb':'mk_bb'
																						    (_cor40)
																					    in  let <CFG0a> =
																						    %% Line 485
																						    call 'hipe_arm_cfg':'bb_add'
																							(_cor1, AllocFrameLab, _cor50)
																						in  let <_cor52> =
																							%% Line 488
																							call 'hipe_bb':'mk_bb'
																							    (IncStackCode)
																						    in  let <CFG0b> =
																							    %% Line 487
																							    call 'hipe_arm_cfg':'bb_add'
																								(CFG0a, IncStackLab, _cor52)
																							in  %% Line 490
																							    <CFG0b,NewStartCode0>
											  end
										      in  let <_cor56> =
											      %% Line 494
											      call 'hipe_bb':'mk_bb'
												  (NewStartCode)
											  in  let <CFG2> =
												  %% Line 493
												  call 'hipe_arm_cfg':'bb_add'
												      (CFG1, NewStartLab, _cor56)
											      in  %% Line 495
												  call 'hipe_arm_cfg':'start_label_update'
												      (CFG2, NewStartLab)
	      %% Line 496
	      <> when 'true' ->
		  _cor1
	    end
'mk_load'/5 =
    %% Line 504
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 505
	call 'hipe_arm':'mk_load'
	    (_cor4, _cor3, _cor1, _cor2, 'error', _cor0)
'mk_store'/5 =
    %% Line 510
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 511
	call 'hipe_arm':'mk_store'
	    (_cor4, _cor3, _cor1, _cor2, 'temp2', _cor0)
'typeof_temp'/1 =
    %% Line 515
    fun (_cor0) ->
	%% Line 516
	call 'hipe_arm':'temp_type'
	    (_cor0)
'mk_sp'/0 =
    %% Line 520
    fun () ->
	let <_cor0> =
	    %% Line 521
	    call 'hipe_arm_registers':'stack_pointer'
		()
	in  %% Line 521
	    call 'hipe_arm':'mk_temp'
		(_cor0, 'untagged')
'mk_temp1'/0 =
    %% Line 525
    fun () ->
	let <_cor0> =
	    %% Line 526
	    call 'hipe_arm_registers':'temp1'
		()
	in  %% Line 526
	    call 'hipe_arm':'mk_temp'
		(_cor0, 'untagged')
'mk_temp2'/0 =
    %% Line 530
    fun () ->
	let <_cor0> =
	    %% Line 531
	    call 'hipe_arm_registers':'temp2'
		()
	in  %% Line 531
	    call 'hipe_arm':'mk_temp'
		(_cor0, 'untagged')
'src_is_pseudo'/1 =
    %% Line 535
    fun (_cor0) ->
	%% Line 536
	( case call 'hipe_arm':'is_temp'
		   (_cor0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'temp_is_pseudo'/1
		      (_cor0)
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'temp_is_pseudo'/1 =
    %% Line 538
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 539
	    call 'hipe_arm':'temp_is_precoloured'
		(_cor0)
	in  %% Line 539
	    call 'erlang':'not'
		(_cor1)
'clobbers_lr'/1 =
    %% Line 545
    fun (_cor0) ->
	let <LRreg> =
	    %% Line 546
	    call 'hipe_arm_registers':'lr'
		()
	in  let <LRtagged> =
		%% Line 547
		call 'hipe_arm':'mk_temp'
		    (LRreg, 'tagged')
	    in  let <LRuntagged> =
		    %% Line 548
		    call 'hipe_arm':'mk_temp'
			(LRreg, 'untagged')
		in  %% Line 549
		    apply 'clobbers_lr'/3
			(_cor0, LRtagged, LRuntagged)
'clobbers_lr'/3 =
    %% Line 551
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Insns],LRtagged,LRuntagged> when 'true' ->
	      let <Defs> =
		  %% Line 552
		  call 'hipe_arm_defuse':'insn_def_gpr'
		      (I)
	      in  %% Line 553
		  case call 'lists':'member'
			   (LRtagged, Defs) of
		    %% Line 554
		    <'true'> when 'true' ->
			'true'
		    %% Line 555
		    <'false'> when 'true' ->
			%% Line 556
			case call 'lists':'member'
				 (LRuntagged, Defs) of
			  %% Line 557
			  <'true'> when 'true' ->
			      'true'
			  %% Line 558
			  <'false'> when 'true' ->
			      apply 'clobbers_lr'/3
				  (Insns, LRtagged, LRuntagged)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 561
	  <[],_X_LRtagged,_X_LRuntagged> when 'true' ->
	      'false'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'clobbers_lr',3}}] )
	    -| ['compiler_generated'] )
	end
'all_temps'/2 =
    %% Line 567
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 568
	    apply 'tset_empty'/0
		()
	in  let <S0> =
		%% Line 568
		apply 'find_temps'/2
		    (_cor1, _cor2)
	    in  let <S1> =
		    %% Line 569
		    apply 'tset_del_list'/2
			(S0, _cor0)
		in  let <_cor7> =
			%% Line 570
			( fun (_cor5) ->
			      apply 'temp_is_pseudo'/1
				  (_cor5)
			  -| [{'id',{0,0,'-all_temps/2-fun-0-'}}] )
		    in  %% Line 570
			apply 'tset_filter'/2
			    (S1, _cor7)
'find_temps'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Insns],S0> when 'true' ->
	      let <_cor2> =
		  %% Line 573
		  call 'hipe_arm_defuse':'insn_def_all'
		      (I)
	      in  let <S1> =
		      %% Line 573
		      apply 'tset_add_list'/2
			  (S0, _cor2)
		  in  let <_cor4> =
			  %% Line 574
			  call 'hipe_arm_defuse':'insn_use_all'
			      (I)
		      in  let <S2> =
			      %% Line 574
			      apply 'tset_add_list'/2
				  (S1, _cor4)
			  in  %% Line 575
			      apply 'find_temps'/2
				  (Insns, S2)
	  %% Line 576
	  <[],S> when 'true' ->
	      %% Line 577
	      S
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'find_temps',2}}] )
	    -| ['compiler_generated'] )
	end
'tset_empty'/0 =
    %% Line 579
    fun () ->
	%% Line 580
	call 'gb_sets':'new'
	    ()
'tset_size'/1 =
    %% Line 582
    fun (_cor0) ->
	%% Line 583
	call 'gb_sets':'size'
	    (_cor0)
'tset_insert'/2 =
    %% Line 585
    fun (_cor1,_cor0) ->
	%% Line 586
	call 'gb_sets':'add_element'
	    (_cor0, _cor1)
'tset_add_list'/2 =
    %% Line 588
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 589
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 589
	    call 'gb_sets':'union'
		(_cor1, _cor2)
'tset_del_list'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 592
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 592
	    call 'gb_sets':'subtract'
		(_cor1, _cor2)
'tset_filter'/2 =
    %% Line 594
    fun (_cor1,_cor0) ->
	%% Line 595
	call 'gb_sets':'filter'
	    (_cor0, _cor1)
'tset_to_list'/1 =
    %% Line 597
    fun (_cor0) ->
	%% Line 598
	call 'gb_sets':'to_list'
	    (_cor0)
'defun_minframe'/1 =
    %% Line 606
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 607
	    call 'hipe_arm':'defun_code'
		(_cor0)
	in  let <MaxTailArity> =
		%% Line 607
		apply 'body_mta'/2
		    (_cor1, 0)
	    in  let <_cor3> =
		    %% Line 608
		    call 'hipe_arm':'defun_formals'
			(_cor0)
		in  let <_cor4> =
			%% Line 608
			apply 'fix_formals'/1
			    (_cor3)
		    in  let <MyArity> =
			    %% Line 608
			    call 'erlang':'length'
				(_cor4)
			in  let <_cor6> =
				%% Line 609
				call 'erlang':'-'
				    (MaxTailArity, MyArity)
			    in  %% Line 609
				call 'erlang':'max'
				    (_cor6, 0)
'body_mta'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Code],MTA> when 'true' ->
	      let <_cor2> =
		  %% Line 612
		  apply 'insn_mta'/2
		      (I, MTA)
	      in  %% Line 612
		  apply 'body_mta'/2
		      (Code, _cor2)
	  %% Line 613
	  <[],MTA> when 'true' ->
	      %% Line 614
	      MTA
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'body_mta',2}}] )
	    -| ['compiler_generated'] )
	end
'insn_mta'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	%% Line 617
	case _cor1 of
	  %% Line 618
	  <{'pseudo_tailcall',_cor7,Arity,_cor8,_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 619
		  call 'hipe_arm_registers':'nr_args'
		      ()
	      in  let <_cor3> =
		      %% Line 619
		      call 'erlang':'-'
			  (Arity, _cor2)
		  in  %% Line 619
		      call 'erlang':'max'
			  (_cor0, _cor3)
	  %% Line 620
	  <_cor10> when 'true' ->
	      _cor0
	end
'ensure_minframe'/2 =
    %% Line 628
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 629
	    apply 'tset_size'/1
		(_cor0)
	in  %% Line 629
	    apply 'ensure_minframe'/3
		(_cor1, _cor2, _cor0)
'ensure_minframe'/3 =
    %% Line 631
    fun (_cor2,_cor1,_cor0) ->
	%% Line 632
	case <> of
	  <>
	      when call 'erlang':'>'
		    (_cor2,
		     _cor1) ->
	      let <Temp> =
		  %% Line 633
		  call 'hipe_arm':'mk_new_temp'
		      ('untagged')
	      in  let <_cor5> =
		      %% Line 634
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  let <_cor4> =
			  %% Line 634
			  apply 'tset_insert'/2
			      (_cor0, Temp)
		      in  %% Line 634
			  apply 'ensure_minframe'/3
			      (_cor2, _cor5, _cor4)
	  %% Line 635
	  <> when 'true' ->
	      _cor0
	end
'word_size'/0 =
    %% Line 638
    fun () ->
	%% Line 639
	4
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_frame')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_frame', _cor0)
end