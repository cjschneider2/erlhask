module 'hipe_icode_inline_bifs' ['cfg'/1,
				 'module_info'/0,
				 'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'cfg',1},[{'type',44,'fun',[{'type',44,'product',[{'type',44,'record',[{'atom',44,'cfg'}]}]}|[{'type',44,'record',[{'atom',44,'cfg'}]}]]}]}]]
'cfg'/1 =
    %% Line 46
    fun (_cor0) ->
	let <Linear> =
	    %% Line 47
	    call 'hipe_icode_cfg':'cfg_to_linear'
		(_cor0)
	in  %% Line 48
	    case Linear of
	      <{'icode',_cor15,_cor16,_cor17,_cor18,_cor19,StraightCode,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
		  let <_cor8> =
		      %% Line 49
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[I|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'inline_bif'/1
						  (I)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(StraightCode)
			-| ['list_comprehension'] )
		  in  let <FinalCode> =
			  %% Line 49
			  call 'lists':'flatten'
			      (_cor8)
		      in  let <_cor12> =
			      %% Line 50
			      call 'erlang':'setelement'
				  (7, Linear, FinalCode)
			  in  let <Cfg1> =
				  %% Line 50
				  call 'hipe_icode_cfg':'linear_to_cfg'
				      (_cor12)
			      in  %% Line 51
				  call 'hipe_icode_cfg':'remove_unreachable_code'
				      (Cfg1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'inline_bif'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <I = {'icode_call',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 54
	      apply 'try_conditional'/1
		  (I)
	  %% Line 55
	  <I> when 'true' ->
	      %% Line 56
	      I
	end
'try_conditional'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <I = {'icode_call',[Dst|[]],{'erlang',Name,2},%% Line 59
							[Arg1|[Arg2|[]]],_cor3,%% Line 60
									       Cont,_cor4,_cor5}> when 'true' ->
	      %% Line 61
	      case apply 'is_conditional'/1
		       (Name) of
		%% Line 62
		<'true'> when 'true' ->
		    %% Line 63
		    apply 'inline_conditional'/5
			(Dst, Name, Arg1, Arg2, Cont)
		%% Line 64
		<'false'> when 'true' ->
		    %% Line 65
		    apply 'try_bool'/1
			(I)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 67
	  <I> when 'true' ->
	      %% Line 68
	      apply 'try_bool'/1
		  (I)
	end
'is_conditional'/1 =
    %% Line 70
    fun (_cor0) ->
	%% Line 71
	case _cor0 of
	  %% Line 72
	  <'=:='> when 'true' ->
	      'true'
	  %% Line 73
	  <'=/='> when 'true' ->
	      'true'
	  %% Line 74
	  <'=='> when 'true' ->
	      'true'
	  %% Line 75
	  <'/='> when 'true' ->
	      'true'
	  %% Line 76
	  <'>'> when 'true' ->
	      'true'
	  %% Line 77
	  <'<'> when 'true' ->
	      'true'
	  %% Line 78
	  <'>='> when 'true' ->
	      'true'
	  %% Line 79
	  <'=<'> when 'true' ->
	      'true'
	  %% Line 80
	  <_cor3> when 'true' ->
	      'false'
	end
'try_bool'/1 =
    %% Line 83
    fun (_cor0) ->
	case _cor0 of
	  <I = {'icode_call',[Dst|[]],Name,%% Line 84
					   [Arg1|[Arg2|[]]],_cor3,%% Line 85
								  Cont,%% Line 85
								       Fail,_cor4}> when 'true' ->
	      %% Line 86
	      case apply 'is_binary_bool'/1
		       (Name) of
		%% Line 87
		<{'true',Results,ResLbls}> when 'true' ->
		    %% Line 88
		    apply 'inline_binary_bool'/8
			(Dst, Results, ResLbls, Arg1, Arg2, Cont, Fail, I)
		%% Line 89
		<'false'> when 'true' ->
		    %% Line 90
		    apply 'try_type_tests'/1
			(I)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 92
	  <I = {'icode_call',[Dst|[]],{'erlang','not',1},%% Line 93
							 [Arg1|[]],_cor5,%% Line 94
									 Cont,%% Line 95
									      Fail,_cor6}> when 'true' ->
	      %% Line 96
	      apply 'inline_unary_bool'/6
		  (Dst, {'false','true'}, Arg1, Cont, Fail, I)
	  %% Line 97
	  <I> when 'true' ->
	      apply 'try_type_tests'/1
		  (I)
	end
'is_binary_bool'/1 =
    %% Line 99
    fun (_cor0) ->
	case _cor0 of
	  <{'erlang',Name,2}> when 'true' ->
	      let <ResTLbl> =
		  %% Line 100
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <ResFLbl> =
		      %% Line 101
		      call 'hipe_icode':'mk_new_label'
			  ()
		  in  let <ResTL> =
			  %% Line 102
			  call 'hipe_icode':'label_name'
			      (ResTLbl)
		      in  let <ResFL> =
			      %% Line 103
			      call 'hipe_icode':'label_name'
				  (ResFLbl)
			  in  %% Line 104
			      case Name of
				%% Line 105
				<'and'> when 'true' ->
				    {'true',{ResTL,ResFL,ResFL},{ResTLbl,ResFLbl}}
				%% Line 106
				<'or'> when 'true' ->
				    {'true',{ResTL,ResTL,ResFL},{ResTLbl,ResFLbl}}
				%% Line 107
				<'xor'> when 'true' ->
				    {'true',{ResFL,ResTL,ResFL},{ResTLbl,ResFLbl}}
				%% Line 108
				<_cor7> when 'true' ->
				    'false'
			      end
	  %% Line 110
	  <_cor8> when 'true' ->
	      'false'
	end
'try_type_tests'/1 =
    %% Line 112
    fun (_cor0) ->
	case _cor0 of
	  <I = {'icode_call',[Dst|[]],{'erlang',Name,1},%% Line 113
							Args,_cor3,%% Line 113
								   Cont,_cor4,_cor5}> when 'true' ->
	      %% Line 114
	      case apply 'is_type_test'/1
		       (Name) of
		%% Line 115
		<{'true',Type}> when 'true' ->
		    %% Line 116
		    apply 'inline_type_test'/4
			(Dst, Type, Args, Cont)
		%% Line 117
		<'false'> when 'true' ->
		    %% Line 118
		    I
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 120
	  <I> when 'true' ->
	      I
	end
'is_type_test'/1 =
    %% Line 122
    fun (_cor0) ->
	%% Line 123
	case _cor0 of
	  %% Line 124
	  <'is_integer'> when 'true' ->
	      {'true','integer'}
	  %% Line 125
	  <'is_float'> when 'true' ->
	      {'true','float'}
	  %% Line 126
	  <'is_tuple'> when 'true' ->
	      {'true','tuple'}
	  %% Line 127
	  <'is_binary'> when 'true' ->
	      {'true','binary'}
	  %% Line 128
	  <'is_list'> when 'true' ->
	      {'true','list'}
	  %% Line 129
	  <'is_pid'> when 'true' ->
	      {'true','pid'}
	  %% Line 130
	  <'is_atom'> when 'true' ->
	      {'true','atom'}
	  %% Line 131
	  <'is_boolean'> when 'true' ->
	      {'true','boolean'}
	  %% Line 132
	  <'is_function'> when 'true' ->
	      {'true','function'}
	  %% Line 133
	  <'is_reference'> when 'true' ->
	      {'true','reference'}
	  %% Line 134
	  <'is_port'> when 'true' ->
	      {'true','port'}
	  %% Line 135
	  <_cor3> when 'true' ->
	      'false'
	end
'inline_type_test'/4 =
    %% Line 138
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 139
	case apply 'get_cont_lbl'/1
		 (_cor0) of
	  <{NewCont,NewEnd}> when 'true' ->
	      let <TLbl> =
		  %% Line 140
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <FLbl> =
		      %% Line 141
		      call 'hipe_icode':'mk_new_label'
			  ()
		  in  let <TL> =
			  %% Line 142
			  call 'hipe_icode':'label_name'
			      (TLbl)
		      in  let <FL> =
			      %% Line 143
			      call 'hipe_icode':'label_name'
				  (FLbl)
			  in  let <_cor9> =
				  %% Line 144
				  call 'hipe_icode':'mk_type'
				      (_cor1, _cor2, TL, FL)
			      in  let <_cor10> =
				      %% Line 146
				      call 'hipe_icode':'mk_const'
					  ('true')
				  in  let <_cor11> =
					  %% Line 146
					  call 'hipe_icode':'mk_move'
					      (_cor3, _cor10)
				      in  let <_cor12> =
					      %% Line 147
					      call 'hipe_icode':'mk_goto'
						  (NewCont)
					  in  let <_cor13> =
						  %% Line 149
						  call 'hipe_icode':'mk_const'
						      ('false')
					      in  let <_cor14> =
						      %% Line 149
						      call 'hipe_icode':'mk_move'
							  (_cor3, _cor13)
						  in  let <_cor15> =
							  %% Line 150
							  call 'hipe_icode':'mk_goto'
							      (NewCont)
						      in  %% Line 144
							  [_cor9|%% Line 145
								 [TLbl|%% Line 146
								       [_cor11|%% Line 147
									       [_cor12|%% Line 148
										       [FLbl|%% Line 149
											     [_cor14|%% Line 150
												     [_cor15|%% Line 151
													     NewEnd]]]]]]]
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'inline_conditional'/5 =
    %% Line 153
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 154
	case apply 'get_cont_lbl'/1
		 (_cor0) of
	  <{NewCont,NewEnd}> when 'true' ->
	      let <TLbl> =
		  %% Line 155
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <FLbl> =
		      %% Line 156
		      call 'hipe_icode':'mk_new_label'
			  ()
		  in  let <TL> =
			  %% Line 157
			  call 'hipe_icode':'label_name'
			      (TLbl)
		      in  let <FL> =
			      %% Line 158
			      call 'hipe_icode':'label_name'
				  (FLbl)
			  in  let <_cor10> =
				  %% Line 159
				  call 'hipe_icode':'mk_if'
				      (_cor3, [_cor2|[_cor1|[]]], TL, FL)
			      in  let <_cor11> =
				      %% Line 161
				      call 'hipe_icode':'mk_const'
					  ('true')
				  in  let <_cor12> =
					  %% Line 161
					  call 'hipe_icode':'mk_move'
					      (_cor4, _cor11)
				      in  let <_cor13> =
					      %% Line 162
					      call 'hipe_icode':'mk_goto'
						  (NewCont)
					  in  let <_cor14> =
						  %% Line 164
						  call 'hipe_icode':'mk_const'
						      ('false')
					      in  let <_cor15> =
						      %% Line 164
						      call 'hipe_icode':'mk_move'
							  (_cor4, _cor14)
						  in  let <_cor16> =
							  %% Line 165
							  call 'hipe_icode':'mk_goto'
							      (NewCont)
						      in  %% Line 159
							  [_cor10|%% Line 160
								  [TLbl|%% Line 161
									[_cor12|%% Line 162
										[_cor13|%% Line 163
											[FLbl|%% Line 164
											      [_cor15|%% Line 165
												      [_cor16|%% Line 166
													      NewEnd]]]]]]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'inline_binary_bool'/8 =
    %% Line 173
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Dst,{TTL,TFL,FFL},{ResTLbl,ResFLbl},%% Line 174
					       Arg1,%% Line 174
						    Arg2,%% Line 174
							 Cont,%% Line 174
							      Fail,%% Line 174
								   I> when 'true' ->
	      %% Line 175
	      case apply 'get_cont_lbl'/1
		       (Cont) of
		<{NewCont,NewEnd}> when 'true' ->
		    %% Line 176
		    case apply 'get_fail_lbl'/2
			     (Fail, I) of
		      <{NewFail,FailCode}> when 'true' ->
			  let <EndCode> =
			      %% Line 177
			      call 'erlang':'++'
				  (FailCode, NewEnd)
			  in  let <TLbl> =
				  %% Line 178
				  call 'hipe_icode':'mk_new_label'
				      ()
			      in  let <FLbl> =
				      %% Line 179
				      call 'hipe_icode':'mk_new_label'
					  ()
				  in  let <NotTLbl> =
					  %% Line 180
					  call 'hipe_icode':'mk_new_label'
					      ()
				      in  let <NotTTLbl> =
					      %% Line 181
					      call 'hipe_icode':'mk_new_label'
						  ()
					  in  let <NotTFLbl> =
						  %% Line 182
						  call 'hipe_icode':'mk_new_label'
						      ()
					      in  let <TL> =
						      %% Line 183
						      call 'hipe_icode':'label_name'
							  (TLbl)
						  in  let <FL> =
							  %% Line 184
							  call 'hipe_icode':'label_name'
							      (FLbl)
						      in  let <NotTL> =
							      %% Line 185
							      call 'hipe_icode':'label_name'
								  (NotTLbl)
							  in  let <NotTTL> =
								  %% Line 186
								  call 'hipe_icode':'label_name'
								      (NotTTLbl)
							      in  let <NotTFL> =
								      %% Line 187
								      call 'hipe_icode':'label_name'
									  (NotTFLbl)
								  in  let <_cor21> =
									  %% Line 188
									  call 'hipe_icode':'mk_type'
									      ([Arg1|[]], {'atom','true'}, TL, NotTL, 5.00000000000000000000e-01)
								      in  let <_cor22> =
									      %% Line 190
									      call 'hipe_icode':'mk_type'
										  ([Arg1|[]], {'atom','false'}, FL, NewFail, 9.89999999999999991118e-01)
									  in  let <_cor23> =
										  %% Line 192
										  call 'hipe_icode':'mk_type'
										      ([Arg2|[]], {'atom','true'}, TTL, NotTTL, 5.00000000000000000000e-01)
									      in  let <_cor24> =
										      %% Line 194
										      call 'hipe_icode':'mk_type'
											  ([Arg2|[]], {'atom','false'}, TFL, NewFail, 9.89999999999999991118e-01)
										  in  let <_cor25> =
											  %% Line 196
											  call 'hipe_icode':'mk_type'
											      ([Arg2|[]], {'atom','true'}, TFL, NotTFL, 5.00000000000000000000e-01)
										      in  let <_cor26> =
											      %% Line 198
											      call 'hipe_icode':'mk_type'
												  ([Arg2|[]], {'atom','false'}, FFL, NewFail, 9.89999999999999991118e-01)
											  in  let <_cor27> =
												  %% Line 200
												  call 'hipe_icode':'mk_const'
												      ('true')
											      in  let <_cor28> =
												      %% Line 200
												      call 'hipe_icode':'mk_move'
													  (Dst, _cor27)
												  in  let <_cor29> =
													  %% Line 201
													  call 'hipe_icode':'mk_goto'
													      (NewCont)
												      in  let <_cor30> =
													      %% Line 203
													      call 'hipe_icode':'mk_const'
														  ('false')
													  in  let <_cor31> =
														  %% Line 203
														  call 'hipe_icode':'mk_move'
														      (Dst, _cor30)
													      in  let <_cor32> =
														      %% Line 204
														      call 'hipe_icode':'mk_goto'
															  (NewCont)
														  in  %% Line 188
														      [_cor21|%% Line 189
															      [NotTLbl|%% Line 190
																       [_cor22|%% Line 191
																	       [TLbl|%% Line 192
																		     [_cor23|%% Line 193
																			     [NotTTLbl|%% Line 194
																				       [_cor24|%% Line 195
																					       [FLbl|%% Line 196
																						     [_cor25|%% Line 197
																							     [NotTFLbl|%% Line 198
																								       [_cor26|%% Line 199
																									       [ResTLbl|%% Line 200
																											[_cor28|%% Line 201
																												[_cor29|%% Line 202
																													[ResFLbl|%% Line 203
																														 [_cor31|%% Line 204
																															 [_cor32|%% Line 205
																																 EndCode]]]]]]]]]]]]]]]]]
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'inline_binary_bool',8}}] )
	    -| ['compiler_generated'] )
	end
'inline_unary_bool'/6 =
    %% Line 207
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Dst,{T,F},Arg1,Cont,Fail,I> when 'true' ->
	      let <TLbl> =
		  %% Line 208
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <NotTLbl> =
		      %% Line 209
		      call 'hipe_icode':'mk_new_label'
			  ()
		  in  let <FLbl> =
			  %% Line 210
			  call 'hipe_icode':'mk_new_label'
			      ()
		      in  let <TL> =
			      %% Line 211
			      call 'hipe_icode':'label_name'
				  (TLbl)
			  in  let <NotTL> =
				  %% Line 212
				  call 'hipe_icode':'label_name'
				      (NotTLbl)
			      in  let <FL> =
				      %% Line 213
				      call 'hipe_icode':'label_name'
					  (FLbl)
				  in  %% Line 214
				      case apply 'get_cont_lbl'/1
					       (Cont) of
					<{NewCont,NewEnd}> when 'true' ->
					    %% Line 215
					    case apply 'get_fail_lbl'/2
						     (Fail, I) of
					      <{NewFail,FailCode}> when 'true' ->
						  let <EndCode> =
						      %% Line 216
						      call 'erlang':'++'
							  (FailCode, NewEnd)
						  in  let <Arg1L> =
							  %% Line 217
							  [Arg1|[]]
						      in  let <_cor16> =
							      %% Line 218
							      call 'hipe_icode':'mk_type'
								  (Arg1L, {'atom','true'}, TL, NotTL, 5.00000000000000000000e-01)
							  in  let <_cor17> =
								  %% Line 220
								  call 'hipe_icode':'mk_type'
								      (Arg1L, {'atom','false'}, FL, NewFail, 9.89999999999999991118e-01)
							      in  let <_cor18> =
								      %% Line 222
								      call 'hipe_icode':'mk_const'
									  (T)
								  in  let <_cor19> =
									  %% Line 222
									  call 'hipe_icode':'mk_move'
									      (Dst, _cor18)
								      in  let <_cor20> =
									      %% Line 223
									      call 'hipe_icode':'mk_goto'
										  (NewCont)
									  in  let <_cor21> =
										  %% Line 225
										  call 'hipe_icode':'mk_const'
										      (F)
									      in  let <_cor22> =
										      %% Line 225
										      call 'hipe_icode':'mk_move'
											  (Dst, _cor21)
										  in  let <_cor23> =
											  %% Line 226
											  call 'hipe_icode':'mk_goto'
											      (NewCont)
										      in  %% Line 218
											  [_cor16|%% Line 219
												  [NotTLbl|%% Line 220
													   [_cor17|%% Line 221
														   [TLbl|%% Line 222
															 [_cor19|%% Line 223
																 [_cor20|%% Line 224
																	 [FLbl|%% Line 225
																	       [_cor22|%% Line 226
																		       [_cor23|%% Line 227
																			       EndCode]]]]]]]]]
					      ( <_cor13> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor13})
						-| ['compiler_generated'] )
					    end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'inline_unary_bool',6}}] )
	    -| ['compiler_generated'] )
	end
'get_cont_lbl'/1 =
    %% Line 229
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      let <NL> =
		  %% Line 230
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <_cor2> =
		      %% Line 231
		      call 'hipe_icode':'label_name'
			  (NL)
		  in  %% Line 231
		      {_cor2,[NL|[]]}
	  %% Line 232
	  <Cont> when 'true' ->
	      %% Line 233
	      {Cont,[]}
	end
'get_fail_lbl'/2 =
    %% Line 235
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],I> when 'true' ->
	      let <NL> =
		  %% Line 236
		  call 'hipe_icode':'mk_new_label'
		      ()
	      in  let <_cor3> =
		      %% Line 237
		      call 'hipe_icode':'label_name'
			  (NL)
		  in  %% Line 237
		      {_cor3,[NL|[I|[]]]}
	  %% Line 238
	  <Fail,_cor6> when 'true' ->
	      %% Line 239
	      {Fail,[]}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_inline_bifs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_inline_bifs', _cor0)
end