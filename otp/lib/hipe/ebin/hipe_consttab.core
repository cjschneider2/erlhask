module 'hipe_consttab' ['const_align'/1,
			'const_data'/1,
			'const_exported'/1,
			'const_size'/1,
			'const_type'/1,
			'decompose'/1,
			'insert_block'/3,
			'insert_sorted_block'/2,
			'insert_sorted_block'/4,
			'insert_term'/2,
			'labels'/1,
			'lookup'/2,
			'module_info'/0,
			'module_info'/1,
			'new'/0,
			'referred_labels'/1,
			'size_of'/1,
			'update_referred_labels'/2]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'code_label',{'type',113,'term',[]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{'label_ref',{'type',114,'tuple',[{'atom',114,'label'}|[{'type',114,'code_label',[]}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{'block',{'type',115,'list',[{'type',115,'union',[{'type',115,'hipe_constlbl',[]}|[{'type',115,'label_ref',[]}]]}]},[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'ctab_array',{'type',117,'tuple',[{'atom',117,'ctab_array'}|[{'type',117,'union',[{'atom',117,'byte'}|[{'atom',117,'word'}]]}|[{'type',117,'pos_integer',[]}]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'element_type',{'type',118,'union',[{'atom',118,'byte'}|[{'atom',118,'word'}|[{'type',118,'ctab_array',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{'sort_order',{'type',120,'term',[]},[]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'new',0},[{'type',125,'fun',[{'type',125,'product',[]}|[{'type',125,'hipe_consttab',[]}]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'insert_term',2},[{'type',134,'fun',[{'type',134,'product',[{'type',134,'hipe_consttab',[]}|[{'type',134,'term',[]}]]}|[{'type',134,'tuple',[{'type',134,'hipe_consttab',[]}|[{'type',134,'hipe_constlbl',[]}]]}]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'insert_sorted_block',2},[{'type',158,'fun',[{'type',158,'product',[{'type',158,'hipe_consttab',[]}|[{'type',158,'list',[{'type',158,'term',[]}]}]]}|[{'type',158,'tuple',[{'type',158,'hipe_consttab',[]}|[{'type',158,'hipe_constlbl',[]}]]}]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'insert_block',3},[{'type',188,'fun',[{'type',188,'product',[{'type',188,'hipe_consttab',[]}|[{'type',188,'element_type',[]}|[{'type',188,'block',[]}]]]}|[{'type',189,'tuple',[{'type',189,'hipe_consttab',[]}|[{'type',189,'hipe_constlbl',[]}]]}]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'insert_sorted_block',4},[{'type',207,'fun',[{'type',207,'product',[{'type',207,'hipe_consttab',[]}|[{'type',207,'element_type',[]}|[{'type',207,'block',[]}|[{'type',207,'sort_order',[]}]]]]}|[{'type',208,'tuple',[{'type',208,'hipe_consttab',[]}|[{'type',208,'hipe_constlbl',[]}]]}]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'size_of',1},[{'type',255,'fun',[{'type',255,'product',[{'type',255,'element_type',[]}]}|[{'type',255,'pos_integer',[]}]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'decompose',1},[{'type',264,'fun',[{'type',264,'product',[{'type',264,'tuple',[{'type',264,'element_type',[]}|[{'type',264,'block',[]}]]}]}|[{'type',264,'list',[{'type',264,'byte',[]}]}]]}]}],
		%% Line 291
		'type' =
		    %% Line 291
		    [{'ct_type',{'type',291,'union',[{'atom',291,'block'}|[{'atom',291,'ref'}|[{'atom',291,'sorted_block'}|[{'atom',291,'term'}]]]]},[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{{'record','ctdata'},[{'typed_record_field',{'record_field',293,{'atom',293,'type'}},{'type',293,'union',[{'atom',293,'undefined'}|[{'type',293,'ct_type',[]}]]}}|[{'typed_record_field',{'record_field',294,{'atom',294,'alignment'}},{'type',294,'union',[{'atom',294,'undefined'}|[{'type',294,'ct_alignment',[]}]]}}|[{'typed_record_field',{'record_field',295,{'atom',295,'exported'}},{'type',295,'union',[{'atom',295,'undefined'}|[{'type',295,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',296,{'atom',296,'data'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'term',[]}]]}}]]]],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'ctdata',{'type',297,'record',[{'atom',297,'ctdata'}]},[]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'mk_ctdata',4},[{'type',299,'fun',[{'type',299,'product',[{'ann_type',299,[{'var',299,'Type'}|[{'type',299,'ct_type',[]}]]}|[{'ann_type',299,[{'var',299,'Alignment'}|[{'type',299,'ct_alignment',[]}]]}|[{'ann_type',300,[{'var',300,'Exported'}|[{'type',300,'boolean',[]}]]}|[{'ann_type',300,[{'var',300,'Data'}|[{'type',300,'term',[]}]]}]]]]}|[{'type',300,'ctdata',[]}]]}]}],
		%% Line 304
		'spec' =
		    %% Line 304
		    [{{'const_type',1},[{'type',304,'fun',[{'type',304,'product',[{'type',304,'ctdata',[]}]}|[{'type',304,'ct_type',[]}]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'const_align',1},[{'type',307,'fun',[{'type',307,'product',[{'type',307,'ctdata',[]}]}|[{'type',307,'ct_alignment',[]}]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'const_exported',1},[{'type',310,'fun',[{'type',310,'product',[{'type',310,'ctdata',[]}]}|[{'type',310,'boolean',[]}]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'const_data',1},[{'type',313,'fun',[{'type',313,'product',[{'type',313,'ctdata',[]}]}|[{'type',313,'term',[]}]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'update_const_data',2},[{'type',316,'fun',[{'type',316,'product',[{'type',316,'ctdata',[]}|[{'type',316,'union',[{'type',316,'tuple',[{'var',316,'_'}|[{'type',316,'list',[{'var',316,'_'}]}]]}|[{'type',316,'tuple',[{'var',316,'_'}|[{'type',316,'list',[{'var',316,'_'}]}|[{'var',316,'_'}]]]}]]}]]}|[{'type',316,'ctdata',[]}]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'const_size',1},[{'type',321,'fun',[{'type',321,'product',[{'type',321,'ctdata',[]}]}|[{'type',321,'non_neg_integer',[]}]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'word_size',0},[{'type',329,'fun',[{'type',329,'product',[]}|[{'type',329,'ct_alignment',[]}]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'lookup',2},[{'type',396,'fun',[{'type',396,'product',[{'type',396,'hipe_constlbl',[]}|[{'type',396,'hipe_consttab',[]}]]}|[{'type',396,'ctdata',[]}]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'labels',1},[{'type',407,'fun',[{'type',407,'product',[{'type',407,'hipe_consttab',[]}]}|[{'type',407,'list',[{'type',407,'union',[{'type',407,'hipe_constlbl',[]}|[{'type',407,'tuple',[{'type',407,'hipe_constlbl',[]}|[{'atom',407,'ref'}]]}]]}]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'referred_labels',1},[{'type',413,'fun',[{'type',413,'product',[{'type',413,'hipe_consttab',[]}]}|[{'type',413,'list',[{'type',413,'hipe_constlbl',[]}]}]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'update_referred_labels',2},[{'type',421,'fun',[{'type',421,'product',[{'type',421,'hipe_consttab',[]}|[{'type',422,'list',[{'type',422,'tuple',[{'type',422,'hipe_constlbl',[]}|[{'type',422,'hipe_constlbl',[]}]]}]}]]}|[{'type',423,'hipe_consttab',[]}]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'tree_to_list',1},[{'type',465,'fun',[{'type',465,'product',[{'remote_type',465,[{'atom',465,'dict'}|[{'atom',465,'dict'}|[[]]]]}]}|[{'type',465,'list',[{'type',465,'tuple',[{'var',465,'_'}|[{'var',465,'_'}]]}]}]]}]}],
		%% Line 489
		'spec' =
		    %% Line 489
		    [{{'tree_empty',0},[{'type',489,'fun',[{'type',489,'product',[]}|[{'remote_type',489,[{'atom',489,'dict'}|[{'atom',489,'dict'}|[[]]]]}]]}]}],
		%% Line 493
		'spec' =
		    %% Line 493
		    [{{'tree_lookup_key_for_value',2},[{'type',493,'fun',[{'type',493,'product',[{'type',493,'ctdata',[]}|[{'remote_type',493,[{'atom',493,'dict'}|[{'atom',493,'dict'}|[[]]]]}]]}|[{'type',493,'union',[{'atom',493,'none'}|[{'type',493,'tuple',[{'atom',493,'value'}|[{'var',493,'_'}]]}]]}]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'tree_lookup_key_for_value_1',2},[{'type',497,'fun',[{'type',497,'product',[{'type',497,'list',[{'type',497,'tuple',[{'var',497,'_'}|[{'var',497,'_'}]]}]}|[{'type',497,'ctdata',[]}]]}|[{'type',497,'union',[{'atom',497,'none'}|[{'type',497,'tuple',[{'atom',497,'value'}|[{'var',497,'_'}]]}]]}]]}]}]]
'new'/0 =
    %% Line 126
    fun () ->
	let <_cor0> =
	    apply 'tree_empty'/0
		()
	in  {_cor0,[],0}
'insert_term'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 136
	    apply 'word_size'/0
		()
	in  %% Line 136
	    case apply 'lookup_const'/5
		     (_cor1, 'term', _cor2, 'false', _cor0) of
	      %% Line 137
	      <{'value',Label}> when 'true' ->
		  %% Line 138
		  {_cor1,Label}
	      %% Line 139
	      <'none'> when 'true' ->
		  let <_cor3> =
		      %% Line 140
		      apply 'word_size'/0
			  ()
		  in  %% Line 140
		      apply 'insert_const'/5
			  (_cor1, 'term', _cor3, 'false', _cor0)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'insert_sorted_block'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 160
	    apply 'word_size'/0
		()
	in  %% Line 160
	    apply 'insert_const'/5
		(_cor1, 'sorted_block', _cor2, 'false', _cor0)
'insert_block'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{ConstTab,RefToLabels,NextLabel},ElementType,InitList> when 'true' ->
	      let <ReferredLabels> =
		  %% Line 191
		  apply 'get_labels'/2
		      (InitList, [])
	      in  let <NewRefTo> =
		      %% Line 192
		      call 'erlang':'++'
			  (ReferredLabels, RefToLabels)
		  in  let <_cor5> =
			  %% Line 194
			  apply 'word_size'/0
			      ()
		      in  %% Line 193
			  case apply 'insert_const'/5
				   ({ConstTab,NewRefTo,NextLabel}, %% Line 194
								   'block', _cor5, %% Line 194
										   'false', %% Line 195
											    {ElementType,InitList}) of
			    <{NewTa,Id}> when 'true' ->
				let <_cor7> =
				    %% Line 196
				    apply 'insert_backrefs'/3
					(NewTa, Id, ReferredLabels)
				in  %% Line 196
				    {_cor7,Id}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insert_block',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_sorted_block'/4 =
    %% Line 209
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{ConstTab,RefToLabels,NextLabel},%% Line 210
					    ElementType,%% Line 210
							InitList,%% Line 210
								 SortOrder> when 'true' ->
	      let <ReferredLabels> =
		  %% Line 211
		  apply 'get_labels'/2
		      (InitList, [])
	      in  let <NewRefTo> =
		      %% Line 212
		      call 'erlang':'++'
			  (ReferredLabels, RefToLabels)
		  in  let <_cor6> =
			  %% Line 214
			  apply 'word_size'/0
			      ()
		      in  %% Line 213
			  case apply 'insert_const'/5
				   ({ConstTab,NewRefTo,NextLabel}, %% Line 214
								   'block', _cor6, %% Line 214
										   'false', %% Line 215
											    {ElementType,InitList,SortOrder}) of
			    <{NewTa,Id}> when 'true' ->
				let <_cor8> =
				    %% Line 216
				    apply 'insert_backrefs'/3
					(NewTa, Id, ReferredLabels)
				in  %% Line 216
				    {_cor8,Id}
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'insert_sorted_block',4}}] )
	    -| ['compiler_generated'] )
	end
'insert_backrefs'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 219
	    ( fun (_cor4,_cor3) ->
		  %% Line 220
		  apply 'insert_ref'/3
		      (_cor3, _cor1, _cor4)
	      -| [{'id',{0,0,'-insert_backrefs/3-fun-0-'}}] )
	in  %% Line 219
	    call 'lists':'foldl'
		(_cor7, _cor2, _cor0)
'insert_ref'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Table,RefToLabels,NextLblNr},From,To> when 'true' ->
	      let <Ref> = {%% Line 224
		   To,%% Line 224
		      'ref'}
	      in  %% Line 225
		  case apply 'tree_lookup'/2
			   (Ref, Table) of
		    %% Line 226
		    <'none'> when 'true' ->
			let <_cor4> =
			    %% Line 227
			    apply 'tree_insert'/3
				(Ref, [From|[]], Table)
			in  %% Line 227
			    {_cor4,RefToLabels,NextLblNr}
		    %% Line 228
		    <{'value',RefList}> when 'true' ->
			let <_cor5> =
			    %% Line 229
			    apply 'tree_update'/3
				(Ref, [From|RefList], Table)
			in  %% Line 229
			    {_cor5,RefToLabels,NextLblNr}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'insert_ref',3}}] )
	    -| ['compiler_generated'] )
	end
'find_refs'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <To,{Table,_cor4,_cor5}> when 'true' ->
	      %% Line 234
	      apply 'tree_lookup'/2
		  ({To,'ref'}, Table)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_refs',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_ref'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <To,{ConstTab,RefToLabels,NextLabel}> when 'true' ->
	      let <_cor2> =
		  %% Line 237
		  apply 'tree_delete'/2
		      ({To,'ref'}, ConstTab)
	      in  %% Line 237
		  {_cor2,RefToLabels,NextLabel}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete_ref',2}}] )
	    -| ['compiler_generated'] )
	end
'get_labels'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'label',L}|Rest],Acc> when 'true' ->
	      %% Line 245
	      apply 'get_labels'/2
		  (Rest, [L|Acc])
	  %% Line 246
	  <[I|Rest],Acc>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 247
	      apply 'get_labels'/2
		  (Rest, Acc)
	  %% Line 248
	  <[],Acc> when 'true' ->
	      %% Line 249
	      Acc
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_labels',2}}] )
	    -| ['compiler_generated'] )
	end
'size_of'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <'byte'> when 'true' ->
	      1
	  %% Line 257
	  <'word'> when 'true' ->
	      apply 'word_size'/0
		  ()
	  %% Line 258
	  <{'ctab_array',S,N}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (S)
		    in  let <_cor2> =
			    call 'erlang':'is_integer'
				(N)
			in  let <_cor3> =
				call 'erlang':'>'
				    (N, 0)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 259
		  apply 'size_of'/1
		      (S)
	      in  %% Line 259
		  call 'erlang':'*'
		      (N, _cor5)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'size_of',1}}] )
	    -| ['compiler_generated'] )
	end
'decompose'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <{ElementType,Data}> when 'true' ->
	      let <_cor1> =
		  %% Line 266
		  apply 'size_of'/1
		      (ElementType)
	      in  %% Line 266
		  apply 'decompose'/2
		      (_cor1, Data)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'decompose',1}}] )
	    -| ['compiler_generated'] )
	end
'decompose'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Bytes,[]> when 'true' ->
	      %% Line 269
	      []
	  %% Line 270
	  <Bytes,[X|Xs]> when 'true' ->
	      let <_cor2> =
		  %% Line 271
		  apply 'decompose'/2
		      (Bytes, Xs)
	      in  %% Line 271
		  apply 'number_to_bytes'/3
		      (Bytes, X, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'decompose',2}}] )
	    -| ['compiler_generated'] )
	end
'number_to_bytes'/3 =
    %% Line 273
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,X,Bytes>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 274
	      Bytes
	  %% Line 275
	  <N,X,Bytes> when 'true' ->
	      let <Byte> =
		  %% Line 276
		  call 'erlang':'band'
		      (X, 255)
	      in  let <_cor5> =
		      %% Line 277
		      call 'erlang':'-'
			  (N, 1)
		  in  let <_cor4> =
			  %% Line 277
			  call 'erlang':'bsr'
			      (X, 8)
		      in  %% Line 277
			  apply 'number_to_bytes'/3
			      (_cor5, _cor4, [Byte|Bytes])
	end
'block_size'/1 =
    %% Line 281
    fun (_cor0) ->
	case _cor0 of
	  <{ElementType,Block}> when 'true' ->
	      let <_cor2> =
		  %% Line 282
		  call 'erlang':'length'
		      (Block)
	      in  let <_cor1> =
		      %% Line 282
		      apply 'size_of'/1
			  (ElementType)
		  in  %% Line 282
		      call 'erlang':'*'
			  (_cor2, _cor1)
	  %% Line 283
	  <{ElementType,Block,_X_SortOrder}> when 'true' ->
	      let <_cor4> =
		  %% Line 284
		  call 'erlang':'length'
		      (Block)
	      in  let <_cor3> =
		      %% Line 284
		      apply 'size_of'/1
			  (ElementType)
		  in  %% Line 284
		      call 'erlang':'*'
			  (_cor4, _cor3)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'block_size',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_ctdata'/4 =
    %% Line 301
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 302
	{'ctdata',_cor3,_cor2,_cor1,_cor0}
'const_type'/1 =
    %% Line 305
    fun (_cor0) ->
	case _cor0 of
	  <{'ctdata',Type,_cor2,_cor3,_cor4}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'const_type',1}}] )
	    -| ['compiler_generated'] )
	end
'const_align'/1 =
    %% Line 308
    fun (_cor0) ->
	case _cor0 of
	  <{'ctdata',_cor2,Alignment,_cor3,_cor4}> when 'true' ->
	      Alignment
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'const_align',1}}] )
	    -| ['compiler_generated'] )
	end
'const_exported'/1 =
    %% Line 311
    fun (_cor0) ->
	case _cor0 of
	  <{'ctdata',_cor2,_cor3,Exported,_cor4}> when 'true' ->
	      Exported
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'const_exported',1}}] )
	    -| ['compiler_generated'] )
	end
'const_data'/1 =
    %% Line 314
    fun (_cor0) ->
	case _cor0 of
	  <{'ctdata',_cor2,_cor3,_cor4,Data}> when 'true' ->
	      Data
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'const_data',1}}] )
	    -| ['compiler_generated'] )
	end
'update_const_data'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	%% Line 318
	case _cor1 of
	  <{'ctdata',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ctdata'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'const_size'/1 =
    %% Line 322
    fun (_cor0) ->
	%% Line 323
	case apply 'const_type'/1
		 (_cor0) of
	  %% Line 325
	  <'block'> when 'true' ->
	      let <_cor1> =
		  apply 'const_data'/1
		      (_cor0)
	      in  apply 'block_size'/1
		      (_cor1)
	  %% Line 326
	  <'sorted_block'> when 'true' ->
	      let <_cor3> =
		  apply 'const_data'/1
		      (_cor0)
	      in  let <_cor4> =
		      call 'erlang':'length'
			  (_cor3)
		  in  let <_cor2> =
			  apply 'word_size'/0
			      ()
		      in  call 'erlang':'*'
			      (_cor4, _cor2)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'word_size'/0 =
    %% Line 330
    fun () ->
	%% Line 331
	call 'hipe_rtl_arch':'word_size'
	    ()
'update_block_labels'/4 =
    %% Line 356
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Const> =
	    %% Line 357
	    apply 'lookup'/2
		(_cor2, _cor3)
	in  let <Old> = {%% Line 358
		 'label',_cor1}
	    in  %% Line 359
		case apply 'const_data'/1
			 (Const) of
		  %% Line 360
		  <{Type,Data}> when 'true' ->
		      let <NewData> =
			  %% Line 361
			  apply 'update_data'/3
			      (Data, Old, _cor0)
		      in  let <_cor7> =
			      %% Line 362
			      apply 'update_const_data'/2
				  (Const, {Type,NewData})
			  in  %% Line 362
			      apply 'update'/3
				  (_cor3, _cor2, _cor7)
		  %% Line 363
		  <{Type,Data,Order}> when 'true' ->
		      let <NewData> =
			  %% Line 364
			  apply 'update_data'/3
			      (Data, Old, _cor0)
		      in  let <_cor9> =
			      %% Line 365
			      apply 'update_const_data'/2
				  (Const, {Type,NewData,Order})
			  in  %% Line 365
			      apply 'update'/3
				  (_cor3, _cor2, _cor9)
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor10})
		    -| ['compiler_generated'] )
		end
'update_data'/3 =
    %% Line 368
    fun (_cor2,_cor1,_cor0) ->
	%% Line 369
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[Lbl|_cor4]> when 'true' ->
			    let <_cor6> =
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Lbl,
					     _cor1) ->
				      {'label',_cor0}
				  <> when 'true' ->
				      Lbl
				end
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'insert_const'/5 =
    %% Line 379
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Table,RefToLabels,NextLblNr},Type,Alignment,Exported,Data> when 'true' ->
	      let <Const> =
		  %% Line 380
		  apply 'mk_ctdata'/4
		      (Type, Alignment, Exported, Data)
	      in  let <_cor7> =
		      %% Line 381
		      apply 'tree_insert'/3
			  (NextLblNr, Const, Table)
		  in  let <_cor6> =
			  %% Line 381
			  call 'erlang':'+'
			      (NextLblNr, 1)
		      in  %% Line 381
			  {{_cor7,RefToLabels,_cor6},%% Line 382
						     NextLblNr}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insert_const',5}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Table,RefToLabels,NextLblNr},Label,NewConst> when 'true' ->
	      let <_cor3> =
		  %% Line 392
		  apply 'tree_update'/3
		      (Label, NewConst, Table)
	      in  %% Line 392
		  {_cor3,RefToLabels,NextLblNr}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'update',3}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Lbl,{Table,_X_RefToLabels,_X_NextLblNr}> when 'true' ->
	      %% Line 398
	      apply 'tree_get'/2
		  (Lbl, Table)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_const'/5 =
    %% Line 401
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Table,_X_RefToLabels,_X_NextLblNr},%% Line 402
					       Type,%% Line 402
						    Alignment,%% Line 402
							      Exported,%% Line 402
								       Data> when 'true' ->
	      let <Const> =
		  %% Line 403
		  apply 'mk_ctdata'/4
		      (Type, Alignment, Exported, Data)
	      in  %% Line 404
		  apply 'tree_lookup_key_for_value'/2
		      (Const, Table)
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'lookup_const',5}}] )
	    -| ['compiler_generated'] )
	end
'labels'/1 =
    %% Line 408
    fun (_cor0) ->
	case _cor0 of
	  <{Table,_X_RefToLabels,_X_NextLblNr}> when 'true' ->
	      %% Line 409
	      apply 'tree_keys'/1
		  (Table)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'labels',1}}] )
	    -| ['compiler_generated'] )
	end
'referred_labels'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Table,RefToLabels,_X_NextLblNr}> when 'true' ->
	      %% Line 415
	      RefToLabels
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'referred_labels',1}}] )
	    -| ['compiler_generated'] )
	end
'update_referred_labels'/2 =
    %% Line 424
    fun (_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 428
	    ( fun (_cor12,_cor11) ->
		  case <_cor12,_cor11> of
		    <{OldLbl,NewLbl},Tbl> when 'true' ->
			%% Line 429
			case apply 'find_refs'/2
				 (OldLbl, Tbl) of
			  %% Line 430
			  <'none'> when 'true' ->
			      %% Line 431
			      Tbl
			  %% Line 432
			  <{'value',DataLbls}> when 'true' ->
			      let <UniqueLbls> =
				  %% Line 434
				  call 'ordsets':'from_list'
				      (DataLbls)
			      in  let <_cor9> =
				      %% Line 435
				      ( fun (_cor6,_cor5) ->
					    let <_cor3> =
						%% Line 438
						apply 'update_block_labels'/4
						    (_cor5, _cor6, OldLbl, NewLbl)
					    in  let <_cor4> =
						    %% Line 437
						    apply 'delete_ref'/2
							(OldLbl, _cor3)
						in  %% Line 436
						    apply 'insert_ref'/3
							(_cor4, _cor6, %% Line 439
								       NewLbl)
					-| [{'id',{0,0,'-update_referred_labels/2-fun-0-'}}] )
				  in  %% Line 435
				      call 'lists':'foldl'
					  (_cor9, %% Line 441
						  Tbl, %% Line 442
						       UniqueLbls)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    ( <_cor14,_cor13> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor14,_cor13})
			    -| [{'function_name',{'-update_referred_labels/2-fun-1-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-update_referred_labels/2-fun-1-'}}] )
	in  %% Line 426
	    case %% Line 427
		 call 'lists':'foldl'
		     (_cor15, _cor1, _cor0) of
	      <{Tb,Refs,Next}> when 'true' ->
		  let <_cor23> =
		      %% Line 447
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor19) ->
				    case _cor19 of
				      <[%% Line 450
					Lbl|_cor18]> when 'true' ->
					  let <_cor21> =
					      case call 'lists':'keyfind'
						       (Lbl, 1, _cor0) of
						%% Line 448
						<{_cor27,New}> when 'true' ->
						    New
						%% Line 449
						<'false'> when 'true' ->
						    Lbl
						( <_cor20> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor20})
						  -| ['compiler_generated'] )
					      end
					  in  let <_cor22> =
						  %% Line 450
						  apply 'lc$^0'/1
						      (_cor18)
					      in  ( [_cor21|_cor22]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor19> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor19})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(%% Line 450
				 Refs)
			-| ['list_comprehension'] )
		  in  %% Line 452
		      {Tb,_cor23,Next}
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor16})
		-| ['compiler_generated'] )
	    end
'tree_keys'/1 =
    %% Line 462
    fun (_cor0) ->
	%% Line 463
	call 'dict':'fetch_keys'
	    (_cor0)
'tree_to_list'/1 =
    %% Line 466
    fun (_cor0) ->
	%% Line 467
	call 'dict':'to_list'
	    (_cor0)
'tree_get'/2 =
    %% Line 469
    fun (_cor1,_cor0) ->
	%% Line 470
	call 'dict':'fetch'
	    (_cor1, _cor0)
'tree_update'/3 =
    %% Line 472
    fun (_cor2,_cor1,_cor0) ->
	%% Line 473
	call 'dict':'store'
	    (_cor2, _cor1, _cor0)
'tree_insert'/3 =
    %% Line 475
    fun (_cor2,_cor1,_cor0) ->
	%% Line 476
	call 'dict':'store'
	    (_cor2, _cor1, _cor0)
'tree_delete'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	%% Line 479
	call 'dict':'erase'
	    (_cor1, _cor0)
'tree_lookup'/2 =
    %% Line 481
    fun (_cor1,_cor0) ->
	%% Line 482
	case call 'dict':'find'
		 (_cor1, _cor0) of
	  %% Line 483
	  <{'ok',Val}> when 'true' ->
	      %% Line 484
	      {'value',Val}
	  %% Line 485
	  <'error'> when 'true' ->
	      %% Line 486
	      'none'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'tree_empty'/0 =
    %% Line 490
    fun () ->
	%% Line 491
	call 'dict':'new'
	    ()
'tree_lookup_key_for_value'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 495
	    apply 'tree_to_list'/1
		(_cor0)
	in  %% Line 495
	    apply 'tree_lookup_key_for_value_1'/2
		(_cor2, _cor1)
'tree_lookup_key_for_value_1'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Key,Val}|_cor4],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     Val) ->
	      %% Line 499
	      {'value',Key}
	  %% Line 500
	  <[_cor6|Left],Val> when 'true' ->
	      %% Line 501
	      apply 'tree_lookup_key_for_value_1'/2
		  (Left, Val)
	  %% Line 502
	  <[],_X_Val> when 'true' ->
	      %% Line 503
	      'none'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'tree_lookup_key_for_value_1',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_consttab')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_consttab', _cor0)
end