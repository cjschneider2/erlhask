module 'hipe_moves' ['add_active'/2,
		     'add_worklist'/2,
		     'get_move'/2,
		     'is_empty_worklist'/1,
		     'member_active'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'move_related'/2,
		     'new'/1,
		     'node_movelist'/2,
		     'node_moves'/2,
		     'remove_active'/2,
		     'remove_worklist'/2,
		     'update_movelist'/3,
		     'worklist_get_and_remove'/1]
    attributes [%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','movesets'},[{'record_field',41,{'atom',41,'worklist'}}|[{'record_field',42,{'atom',42,'membership'}}|[{'record_field',43,{'atom',43,'moveinsns'}}|[{'record_field',44,{'atom',44,'movelist'}}]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'worklist'/1 =
    %% Line 52
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'movesets',_rec0,_cor3,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'movelist'/1 =
    %% Line 53
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'movesets',_cor3,_cor4,_cor5,_rec1}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec1
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_worklist'/2 =
    %% Line 55
    fun (_cor1,_cor0) ->
	%% Line 56
	case _cor0 of
	  <{'movesets',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','movesets'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_movelist'/2 =
    %% Line 57
    fun (_cor1,_cor0) ->
	%% Line 58
	case _cor0 of
	  <{'movesets',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor0, _cor1)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','movesets'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'update_movelist'/3 =
    %% Line 60
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 61
	    apply 'movelist'/1
		(_cor0)
	in  let <_cor4> =
		%% Line 61
		call 'hipe_vectors':'set'
		    (_cor3, _cor2, _cor1)
	    in  %% Line 61
		apply 'set_movelist'/2
		    (_cor4, _cor0)
'new'/1 =
    %% Line 64
    fun (_cor0) ->
	%% Line 65
	case call 'hipe_ig':'get_moves'
		 (_cor0) of
	  <{MoveList,NrMoves,MoveInsns}> when 'true' ->
	      let <_cor4> =
		  %% Line 66
		  case NrMoves of
		    <0> when 'true' ->
			[]
		    <_cor8> when 'true' ->
			let <_cor2> =
			    call 'erlang':'-'
				(NrMoves, 1)
			in  call 'lists':'seq'
				(0, _cor2)
		  end
	      in  let <_cor6> =
		      %% Line 68
		      call 'hipe_bifs':'array'
			  (NrMoves, 'worklist')
		  in  %% Line 67
		      {'movesets',_cor4,_cor6,%% Line 69
					      MoveInsns,%% Line 70
							MoveList}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'remove_worklist'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	( case _cor0 of
	    ( <( {'movesets',_cor7,_rec4,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 75
		      call 'hipe_bifs':'array_update'
			  (_rec4, _cor1, 'none')
		      _cor0
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_active'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	%% Line 85
	( case _cor0 of
	    ( <( {'movesets',_cor7,_rec5,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 87
		      call 'hipe_bifs':'array_update'
			  (_rec5, _cor1, 'none')
		      _cor0
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_worklist'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	%% Line 91
	( case _cor0 of
	    ( <( {'movesets',_cor8,_rec6,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 93
		      call 'hipe_bifs':'array_update'
			  (_rec6, _cor1, 'worklist')
		      let <_cor5> =
			  %% Line 94
			  apply 'worklist'/1
			      (_cor0)
		      in  %% Line 94
			  apply 'set_worklist'/2
			      ([_cor1|_cor5], _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_active'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	%% Line 97
	( case _cor0 of
	    ( <( {'movesets',_cor7,_rec7,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 99
		      call 'hipe_bifs':'array_update'
			  (_rec7, _cor1, 'active')
		      _cor0
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'member_active'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	%% Line 103
	( case _cor0 of
	    ( <( {'movesets',_cor7,_rec8,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'hipe_bifs':'array_sub'
			  (_rec8, _cor1)
		  in  call 'erlang':'=:='
			  (_cor4, 'active')
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','movesets'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_empty_worklist'/1 =
    %% Line 105
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 107
	    apply 'worklist'/1
		(_cor0)
	in  %% Line 107
	    call 'erlang':'=:='
		(_cor1, [])
'worklist_get_and_remove'/1 =
    %% Line 109
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 110
	    apply 'worklist'/1
		(_cor0)
	in  %% Line 110
	    ( case _cor0 of
		( <( {'movesets',_cor5,_rec9,_cor6,_cor7}
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'worklist_get_and_remove'/3
			  (_cor3, _rec9, _cor0)
		  -| ['compiler_generated'] )
		( <_cor8> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','movesets'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'worklist_get_and_remove'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Membership,MoveSets> when 'true' ->
	      let <_cor3> =
		  %% Line 113
		  apply 'set_worklist'/2
		      ([], MoveSets)
	      in  %% Line 113
		  {[],_cor3}
	  %% Line 114
	  <[Move|Worklist],Membership,MoveSets> when 'true' ->
	      %% Line 115
	      case call 'hipe_bifs':'array_sub'
		       (Membership, Move) of
		%% Line 116
		<'worklist'> when 'true' ->
		    do  %% Line 117
			call 'hipe_bifs':'array_update'
			    (Membership, Move, 'none')
			let <_cor4> =
			    %% Line 118
			    apply 'set_worklist'/2
				(Worklist, MoveSets)
			in  %% Line 118
			    {Move,_cor4}
		%% Line 119
		<_cor9> when 'true' ->
		    %% Line 120
		    apply 'worklist_get_and_remove'/3
			(Worklist, Membership, MoveSets)
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'worklist_get_and_remove',3}}] )
	    -| ['compiler_generated'] )
	end
'node_moves'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	let <Associated> =
	    %% Line 124
	    apply 'node_movelist'/2
		(_cor1, _cor0)
	in  %% Line 125
	    ( case _cor0 of
		( <( {'movesets',_cor14,_rec10,_cor15,_cor16}
		     -| ['compiler_generated'] )> when 'true' ->
		      %% Line 128
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor9) ->
				    case _cor9 of
				      <[X|_cor7]> when 'true' ->
					  let <_cor8> =
					      call 'hipe_bifs':'array_sub'
						  (_rec10, X)
					  in  ( case <> of
						  <>
						      when call 'erlang':'=/='
							    (_cor8,
							     'none') ->
						      let <_cor10> =
							  apply 'lc$^0'/1
							      (_cor7)
						      in  ( [X|_cor10]
							    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							apply 'lc$^0'/1
							    (_cor7)
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor9> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Associated)
			-| ['list_comprehension'] )
		  -| ['compiler_generated'] )
		( <_cor17> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','movesets'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'move_related'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 133
	    apply 'node_movelist'/2
		(_cor1, _cor0)
	in  %% Line 133
	    ( case _cor0 of
		( <( {'movesets',_cor7,_rec11,_cor8,_cor9}
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'move_related2'/2
			  (_cor4, _rec11)
		  -| ['compiler_generated'] )
		( <_cor10> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','movesets'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'move_related2'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Membership> when 'true' ->
	      'false'
	  %% Line 136
	  <[Move|MoveSets],Membership> when 'true' ->
	      %% Line 137
	      case call 'hipe_bifs':'array_sub'
		       (Membership, Move) of
		%% Line 138
		<'none'> when 'true' ->
		    apply 'move_related2'/2
			(MoveSets, Membership)
		%% Line 139
		<_cor5> when 'true' ->
		    'true'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'move_related2',2}}] )
	    -| ['compiler_generated'] )
	end
'node_movelist'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 143
	    apply 'movelist'/1
		(_cor0)
	in  %% Line 143
	    call 'hipe_vectors':'get'
		(_cor2, _cor1)
'get_move'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 146
	    call 'erlang':'+'
		(_cor1, 1)
	in  %% Line 146
	    ( case _cor0 of
		( <( {'movesets',_cor7,_cor8,_rec12,_cor9}
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'erlang':'element'
			  (_cor4, _rec12)
		  -| ['compiler_generated'] )
		( <_cor10> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','movesets'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_moves')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_moves', _cor0)
end