module 'hipe_jit' ['module_info'/0,
		   'module_info'/1,
		   'start'/0]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','state'},[{'typed_record_field',{'record_field',38,{'atom',38,'mode'},{'atom',38,'start'}},{'type',38,'union',[{'atom',38,'sleep'}|[{'atom',38,'start'}|[{'atom',38,'wait'}]]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'threshold'},{'integer',39,5000}},{'type',39,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'sleep'},{'integer',40,5000}},{'type',40,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'time'},{'integer',41,1000}},{'type',41,'non_neg_integer',[]}}]]]],[]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'start',0},[{'type',45,'fun',[{'type',45,'product',[]}|[{'type',45,'pid',[]}]]}]}]]
'start'/0 =
    %% Line 50
    fun () ->
	let <_cor0> =
	    %% Line 51
	    ( fun () ->
		  apply 'loop'/1
		      ({'state','start',5000,5000,1000})
	      -| [{'id',{0,0,'-start/0-fun-0-'}}] )
	in  %% Line 51
	    call 'erlang':'spawn'
		(_cor0)
'loop'/1 =
    %% Line 53
    fun (_cor0) ->
	%% Line 54
	( case _cor0 of
	    ( <( {'state',_rec0,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec0 of
		    %% Line 55
		    <'start'> when 'true' ->
			%% Line 56
			apply 'start'/1
			    (_cor0)
		    %% Line 57
		    <'wait'> when 'true' ->
			%% Line 58
			apply 'wait'/1
			    (_cor0)
		    %% Line 59
		    <_cor9> when 'true' ->
			%% Line 60
			apply 'sleep'/1
			    (_cor0)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'sleep'/1 =
    %% Line 63
    fun (_cor0) ->
	%% Line 66
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_rec1,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  receive
		    <'quit'> when 'true' ->
			'ok'
		  after _rec1 ->
		    let <_cor5> =
			%% Line 67
			call 'erlang':'setelement'
			    (2, _cor0, 'start')
		    in  %% Line 67
			apply 'loop'/1
			    (_cor5)
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start'/1 =
    %% Line 70
    fun (_cor0) ->
	do  catch
		%% Line 71
		call 'hipe_profile':'prof'
		    ()
	    do  catch
		    %% Line 72
		    call 'hipe_profile':'clear'
			()
		%% Line 73
		case _cor0 of
		  <{'state',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
		      let <_cor3> =
			  call 'erlang':'setelement'
			      (2, _cor0, 'wait')
		      in  apply 'loop'/1
			      (_cor3)
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'wait'/1 =
    %% Line 75
    fun (_cor0) ->
	%% Line 78
	( case _cor0 of
	    ( <( {'state',_cor23,_cor24,_cor25,_rec4}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  receive
			<'quit'> when 'true' ->
			    'ok'
		      after _rec4 ->
			let <_cor14> =
			    %% Line 79
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor12) ->
					  case _cor12 of
					    <[{M,C}|_cor4]>
						when %% Line 80
						  ( call 'erlang':'>'
							(C,
							 _cor24)
						    -| ['compiler_generated'] ) ->
						let <_cor13> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [M|_cor13]
						      -| ['compiler_generated'] )
					    ( <[_cor3|_cor4]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor4)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor12> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor12})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor11> =
				      catch
					  call 'hipe_profile':'mods_res'
					      ()
				  in  apply 'lc$^0'/1
					  (_cor11)
			      -| ['list_comprehension'] )
			in  do  catch
				    %% Line 81
				    call 'hipe_profile':'prof_off'
					()
				let <_cor18> =
				    %% Line 82
				    ( fun (_cor16) ->
					  do  %% Line 83
					      call 'io':'format'
						  ([67|[111|[109|[112|[105|[108|[101|[32|[126|[119|[10]]]]]]]]]]], [_cor16|[]])
					      %% Line 84
					      call 'hipe':'c'
						  (_cor16, ['o2'|['verbose']])
				      -| [{'id',{0,0,'-wait/1-fun-0-'}}] )
				in  %% Line 82
				    call 'lists':'foreach'
					(_cor18, _cor14)
		      let <_cor21> =
			  %% Line 87
			  call 'erlang':'setelement'
			      (2, _cor0, 'sleep')
		      in  %% Line 87
			  apply 'loop'/1
			      (_cor21)
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_jit')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_jit', _cor0)
end