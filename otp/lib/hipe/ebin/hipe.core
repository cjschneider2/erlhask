module 'hipe' ['c'/1,
	       'c'/2,
	       'compile'/1,
	       'compile'/2,
	       'compile'/4,
	       'compile_core'/4,
	       'f'/1,
	       'f'/2,
	       'file'/1,
	       'file'/2,
	       'help'/0,
	       'help_debug_options'/0,
	       'help_hiper'/0,
	       'help_option'/1,
	       'help_options'/0,
	       'llvm_support_available'/0,
	       'load'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'version'/0]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{'beam_instr',{'type',26,'union',[{'atom',26,'bs_init_writable'}|[{'atom',26,'fclearerror'}|[{'atom',26,'if_end'}|[{'atom',27,'remove_message'}|[{'atom',27,'return'}|[{'atom',27,'send'}|[{'atom',27,'timeout'}|[{'type',28,'tuple','any'}]]]]]]]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','function'},[{'typed_record_field',{'record_field',34,{'atom',34,'name'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'atom',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'arity'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'byte',[]}]]}}|[{'record_field',36,{'atom',36,'entry'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'code'},{'nil',37}},{'type',37,'list',[{'type',37,'beam_instr',[]}]}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','beam_file'},[{'typed_record_field',{'record_field',39,{'atom',39,'module'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'module',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'labeled_exports'},{'nil',40}},{'type',40,'list',[{'remote_type',40,[{'atom',40,'beam_lib'}|[{'atom',40,'labeled_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'attributes'},{'nil',41}},{'type',41,'list',[{'remote_type',41,[{'atom',41,'beam_lib'}|[{'atom',41,'attrib_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'compile_info'},{'nil',42}},{'type',42,'list',[{'remote_type',42,[{'atom',42,'beam_lib'}|[{'atom',42,'compinfo_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'code'},{'nil',43}},{'type',43,'list',[{'type',43,'record',[{'atom',43,'function'}]}]}}]]]]],[]}],
		%% Line 223
		'type' =
		    %% Line 223
		    [{'mod',{'type',223,'atom',[]},[]}],
		%% Line 224
		'type' =
		    %% Line 224
		    [{'f_unit',{'type',224,'union',[{'type',224,'mod',[]}|[{'type',224,'binary',[]}]]},[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'ret_rtl',{'type',225,'list',[{'var',225,'_'}]},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'c_ret',{'type',226,'union',[{'type',226,'tuple',[{'atom',226,'ok'}|[{'type',226,'mod',[]}]]}|[{'type',226,'tuple',[{'atom',226,'error'}|[{'type',226,'term',[]}]]}|[{'type',227,'tuple',[{'atom',227,'ok'}|[{'type',227,'mod',[]}|[{'type',227,'ret_rtl',[]}]]]}]]]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{'compile_file',{'type',228,'union',[{'type',228,'atom',[]}|[{'type',228,'string',[]}|[{'type',228,'binary',[]}]]]},[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'compile_ret',{'type',229,'union',[{'type',229,'tuple',[{'type',229,'hipe_architecture',[]}|[{'type',229,'binary',[]}]]}|[{'type',229,'list',[]}]]},[]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'load',1},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'Mod'}]}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'module'}|[{'var',246,'Mod'}]]}|[{'type',246,'tuple',[{'atom',246,'error'}|[{'type',246,'term',[]}]]}]]}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Mod'}|[{'type',246,'mod',[]}]]]]}]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'load',2},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'Mod'}|[{'type',267,'string',[]}]]}|[{'type',267,'union',[{'type',267,'tuple',[{'atom',267,'module'}|[{'var',267,'Mod'}]]}|[{'type',267,'tuple',[{'atom',267,'error'}|[{'type',267,'term',[]}]]}]]}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Mod'}|[{'type',268,'mod',[]}]]]]}]]]}]}],
		%% Line 284
		'spec' =
		    %% Line 284
		    [{{'c',1},[{'type',284,'fun',[{'type',284,'product',[{'type',284,'mod',[]}]}|[{'type',284,'c_ret',[]}]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'c',2},[{'type',310,'fun',[{'type',310,'product',[{'type',310,'mod',[]}|[{'type',310,'comp_options',[]}]]}|[{'type',310,'c_ret',[]}]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'f',1},[{'type',345,'fun',[{'type',345,'product',[{'type',345,'f_unit',[]}]}|[{'type',345,'union',[{'type',345,'tuple',[{'atom',345,'ok'}|[{'type',345,'mod',[]}]]}|[{'type',345,'tuple',[{'atom',345,'error'}|[{'type',345,'term',[]}]]}]]}]]}]}],
		%% Line 360
		'spec' =
		    %% Line 360
		    [{{'f',2},[{'type',360,'fun',[{'type',360,'product',[{'type',360,'f_unit',[]}|[{'type',360,'comp_options',[]}]]}|[{'type',360,'union',[{'type',360,'tuple',[{'atom',360,'ok'}|[{'type',360,'mod',[]}]]}|[{'type',360,'tuple',[{'atom',360,'error'}|[{'type',360,'term',[]}]]}]]}]]}]}],
		%% Line 383
		'spec' =
		    %% Line 383
		    [{{'compile',1},[{'type',383,'fun',[{'type',383,'product',[{'type',383,'mod',[]}]}|[{'type',383,'union',[{'type',383,'tuple',[{'atom',383,'ok'}|[{'type',383,'compile_ret',[]}]]}|[{'type',383,'tuple',[{'atom',383,'error'}|[{'type',383,'term',[]}]]}]]}]]}]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'compile',2},[{'type',408,'fun',[{'type',408,'product',[{'type',408,'mod',[]}|[{'type',408,'comp_options',[]}]]}|[{'type',408,'union',[{'type',408,'tuple',[{'atom',408,'ok'}|[{'type',408,'compile_ret',[]}]]}|[{'type',408,'tuple',[{'atom',408,'error'}|[{'var',408,'_'}]]}]]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'beam_file',1},[{'type',413,'fun',[{'type',413,'product',[{'type',413,'mod',[]}]}|[{'type',413,'string',[]}]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'compile',3},[{'type',436,'fun',[{'type',436,'product',[{'type',436,'mod',[]}|[{'type',436,'compile_file',[]}|[{'type',436,'comp_options',[]}]]]}|[{'type',437,'union',[{'type',437,'tuple',[{'atom',437,'ok'}|[{'type',437,'compile_ret',[]}]]}|[{'type',437,'tuple',[{'atom',437,'error'}|[{'type',437,'term',[]}]]}]]}]]}]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'compile_core',4},[{'type',480,'fun',[{'type',480,'product',[{'type',480,'mod',[]}|[{'remote_type',480,[{'atom',480,'cerl'}|[{'atom',480,'c_module'}|[[]]]]}|[{'type',480,'compile_file',[]}|[{'type',480,'comp_options',[]}]]]]}|[{'type',481,'union',[{'type',481,'tuple',[{'atom',481,'ok'}|[{'type',481,'compile_ret',[]}]]}|[{'type',481,'tuple',[{'atom',481,'error'}|[{'type',481,'term',[]}]]}]]}]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'compile',4},[{'type',504,'fun',[{'type',504,'product',[{'type',504,'mod',[]}|[{'type',504,'union',[{'remote_type',504,[{'atom',504,'cerl'}|[{'atom',504,'c_module'}|[[]]]]}|[{'type',504,'nil',[]}]]}|[{'type',504,'compile_file',[]}|[{'type',504,'comp_options',[]}]]]]}|[{'type',505,'union',[{'type',505,'tuple',[{'atom',505,'ok'}|[{'type',505,'compile_ret',[]}]]}|[{'type',505,'tuple',[{'atom',505,'error'}|[{'type',505,'term',[]}]]}]]}]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'file',1},[{'type',524,'bounded_fun',[{'type',524,'fun',[{'type',524,'product',[{'var',524,'Mod'}]}|[{'type',524,'union',[{'type',524,'tuple',[{'atom',524,'ok'}|[{'var',524,'Mod'}|[{'type',524,'compile_ret',[]}]]]}|[{'type',524,'tuple',[{'atom',524,'error'}|[{'type',524,'term',[]}]]}]]}]]}|[[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'Mod'}|[{'type',525,'mod',[]}]]]]}]]]}]}],
		%% Line 543
		'spec' =
		    %% Line 543
		    [{{'file',2},[{'type',543,'bounded_fun',[{'type',543,'fun',[{'type',543,'product',[{'var',543,'Mod'}|[{'type',543,'comp_options',[]}]]}|[{'type',543,'union',[{'type',543,'tuple',[{'atom',543,'ok'}|[{'var',543,'Mod'}|[{'type',543,'compile_ret',[]}]]]}|[{'type',544,'tuple',[{'atom',544,'error'}|[{'type',544,'term',[]}]]}]]}]]}|[[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Mod'}|[{'type',545,'mod',[]}]]]]}]]]}]}],
		%% Line 1029
		'spec' =
		    %% Line 1029
		    [{{'version',0},[{'type',1029,'fun',[{'type',1029,'product',[]}|[{'type',1029,'nonempty_string',[]}]]}]}],
		%% Line 1039
		'spec' =
		    %% Line 1039
		    [{{'help',0},[{'type',1039,'fun',[{'type',1039,'product',[]}|[{'atom',1039,'ok'}]]}]}],
		%% Line 1070
		'spec' =
		    %% Line 1070
		    [{{'help_hiper',0},[{'type',1070,'fun',[{'type',1070,'product',[]}|[{'atom',1070,'ok'}]]}]}],
		%% Line 1105
		'spec' =
		    %% Line 1105
		    [{{'help_options',0},[{'type',1105,'fun',[{'type',1105,'product',[]}|[{'atom',1105,'ok'}]]}]}],
		%% Line 1146
		'spec' =
		    %% Line 1146
		    [{{'option_text',1},[{'type',1146,'fun',[{'type',1146,'product',[{'type',1146,'atom',[]}]}|[{'type',1146,'string',[]}]]}]}],
		%% Line 1232
		'spec' =
		    %% Line 1232
		    [{{'help_option',1},[{'type',1232,'fun',[{'type',1232,'product',[{'type',1232,'comp_option',[]}]}|[{'atom',1232,'ok'}]]}]}],
		%% Line 1260
		'spec' =
		    %% Line 1260
		    [{{'help_debug_options',0},[{'type',1260,'fun',[{'type',1260,'product',[]}|[{'atom',1260,'ok'}]]}]}],
		%% Line 1512
		'spec' =
		    %% Line 1512
		    [{{'expand_basic_options',1},[{'type',1512,'fun',[{'type',1512,'product',[{'type',1512,'comp_options',[]}]}|[{'type',1512,'comp_options',[]}]]}]}],
		%% Line 1519
		'spec' =
		    %% Line 1519
		    [{{'expand_kt2',1},[{'type',1519,'fun',[{'type',1519,'product',[{'type',1519,'comp_options',[]}]}|[{'type',1519,'comp_options',[]}]]}]}],
		%% Line 1531
		'spec' =
		    %% Line 1531
		    [{{'expand_options',1},[{'type',1531,'fun',[{'type',1531,'product',[{'type',1531,'comp_options',[]}]}|[{'type',1531,'comp_options',[]}]]}]}],
		%% Line 1539
		'spec' =
		    %% Line 1539
		    [{{'check_options',1},[{'type',1539,'fun',[{'type',1539,'product',[{'type',1539,'comp_options',[]}]}|[{'atom',1539,'ok'}]]}]}],
		%% Line 1552
		'spec' =
		    %% Line 1552
		    [{{'llvm_support_available',0},[{'type',1552,'fun',[{'type',1552,'product',[]}|[{'type',1552,'boolean',[]}]]}]}]]
'load'/1 =
    %% Line 248
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 249
	    apply 'beam_file'/1
		(_cor0)
	in  %% Line 249
	    apply 'load'/2
		(_cor0, _cor1)
'load'/2 =
    %% Line 270
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,BeamFileName>
	      when call 'erlang':'is_list'
		    (BeamFileName) ->
	      let <Architecture> =
		  %% Line 271
		  call 'erlang':'system_info'
		      ('hipe_architecture')
	      in  let <ChunkName> =
		      %% Line 272
		      call 'hipe_unified_loader':'chunk_name'
			  (Architecture)
		  in  %% Line 273
		      case call 'beam_lib':'chunks'
			       (BeamFileName, [ChunkName|[]]) of
			%% Line 274
			<{'ok',{_cor7,[{_cor8,Bin}|[]]}}>
			    when call 'erlang':'is_binary'
				  (Bin) ->
			    apply 'do_load'/3
				(Mod, Bin, BeamFileName)
			%% Line 275
			<Error> when 'true' ->
			    {'error',Error}
		      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'load',2}}] )
	    -| ['compiler_generated'] )
	end
'c'/1 =
    %% Line 286
    fun (_cor0) ->
	%% Line 287
	apply 'c'/2
	    (_cor0, [])
'c'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 313
	    apply 'beam_file'/1
		(_cor1)
	in  %% Line 313
	    apply 'c'/3
		(_cor1, _cor2, _cor0)
'c'/3 =
    %% Line 326
    fun (_cor2,_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 327
	    apply 'user_compile_opts'/1
		(_cor0)
	in  %% Line 328
	    case apply 'compile'/3
		     (_cor2, _cor1, Opts1) of
	      %% Line 329
	      <{'ok',Res}> when 'true' ->
		  %% Line 330
		  case call 'proplists':'get_bool'
			   ('to_rtl', Opts1) of
		    %% Line 331
		    <'true'> when 'true' ->
			{'ok',_cor2,Res}
		    %% Line 332
		    <'false'> when 'true' ->
			{'ok',_cor2}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 334
	      <Other> when 'true' ->
		  %% Line 335
		  Other
	    end
'f'/1 =
    %% Line 347
    fun (_cor0) ->
	%% Line 348
	apply 'f'/2
	    (_cor0, [])
'f'/2 =
    %% Line 362
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 363
	    apply 'user_compile_opts'/1
		(_cor0)
	in  %% Line 363
	    case apply 'file'/2
		     (_cor1, _cor2) of
	      %% Line 364
	      <{'ok',Name,_cor6}> when 'true' ->
		  %% Line 365
		  {'ok',Name}
	      %% Line 366
	      <Other> when 'true' ->
		  %% Line 367
		  Other
	    end
'user_compile_opts'/1 =
    %% Line 372
    fun (_cor0) ->
	%% Line 373
	call 'erlang':'++'
	    (_cor0, ['load'])
'compile'/1 =
    %% Line 385
    fun (_cor0) ->
	%% Line 386
	apply 'compile'/2
	    (_cor0, [])
'compile'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 411
	    apply 'beam_file'/1
		(_cor1)
	in  %% Line 411
	    apply 'compile'/3
		(_cor1, _cor2, _cor0)
'beam_file'/1 =
    %% Line 415
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 416
	      case call 'code':'which'
		       (Module) of
		%% Line 417
		<'non_existing'> when 'true' ->
		    do  %% Line 418
			call 'code_server':'error_msg'
			    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[67|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[126|[119|[46|[98|[101|[97|[109|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[418|[Module|[]]]])
			do  %% Line 419
			    call 'io':'format'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'cant_find_beam_file',Module}|['hipe'|[419]]])
			    %% Line 419
			    call 'erlang':'error'
				({'hipe',419,{'cant_find_beam_file',Module}})
		%% Line 420
		<File> when 'true' ->
		    %% Line 421
		    File
	      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'beam_file',1}}] )
	    -| ['compiler_generated'] )
	end
'compile'/3 =
    %% Line 439
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,File,Opts0>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <Opts> =
		  %% Line 440
		  apply 'expand_kt2'/1
		      (Opts0)
	      in  %% Line 441
		  case call 'proplists':'get_value'
			   ('core', Opts) of
		    %% Line 442
		    <'true'>
			when call 'erlang':'is_binary'
			      (File) ->
			do  %% Line 443
			    call 'code_server':'error_msg'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[67|[97|[110|[110|[111|[116|[32|[103|[101|[116|[32|[67|[111|[114|[101|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[32|[102|[114|[111|[109|[32|[66|[69|[65|[77|[32|[98|[105|[110|[97|[114|[121|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[443]])
			    do  %% Line 444
				call 'io':'format'
				    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'cant_compile_core_from_binary'}|['hipe'|[444]]])
				%% Line 444
				call 'erlang':'error'
				    ({'hipe',444,{'cant_compile_core_from_binary'}})
		    %% Line 445
		    <'true'> when 'true' ->
			let <_cor11> =
			    %% Line 446
			    call 'filename':'rootname'
				(File, [46|[98|[101|[97|[109]]]]])
			in  %% Line 446
			    case call 'filename':'find_src'
				     (_cor11) of
			      %% Line 447
			      <{'error',_cor64}> when 'true' ->
				  do  %% Line 448
				      call 'code_server':'error_msg'
					  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[67|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[115|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[32|[102|[111|[114|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[448|[File|[]]]])
				      do  %% Line 449
					  call 'io':'format'
					      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'cant_find_source_code'}|['hipe'|[449]]])
					  %% Line 449
					  call 'erlang':'error'
					      ({'hipe',449,{'cant_find_source_code'}})
			      %% Line 450
			      <{Source,CompOpts}> when 'true' ->
				  let <_cor23> =
				      %% Line 451
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor21) ->
						    case _cor21 of
						      <[X = {'core_transform',_cor65}|_cor20]> when 'true' ->
							  let <_cor22> =
							      apply 'lc$^0'/1
								  (_cor20)
							  in  ( [X|_cor22]
								-| ['compiler_generated'] )
						      ( <[_cor19|_cor20]> when 'true' ->
							    apply 'lc$^0'/1
								(_cor20)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor21> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor21})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(Opts)
					-| ['list_comprehension'] )
				  in  let <_cor25> =
					  %% Line 453
					  call 'erlang':'++'
					      (_cor23, ['to_core'|['binary'|CompOpts]])
				      in  %% Line 453
					  case call 'compile':'file'
						   (Source, _cor25) of
					    %% Line 454
					    <{'ok',_cor66,Core}> when 'true' ->
						%% Line 455
						apply 'compile_core'/4
						    (Name, Core, File, Opts)
					    %% Line 456
					    <Error> when 'true' ->
						do  %% Line 457
						    call 'code_server':'error_msg'
							([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[69|[114|[114|[111|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[112|[58|[10|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[457|[File|[Error|[]]]]])
						    do  %% Line 458
							call 'io':'format'
							    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'cant_compile_source_code'}|['hipe'|[458]]])
							%% Line 458
							call 'erlang':'error'
							    ({'hipe',458,{'cant_compile_source_code'}})
					  end
			      ( <_cor34> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor34})
				-| ['compiler_generated'] )
			    end
		    %% Line 461
		    <{'src_file',Source}> when 'true' ->
			let <_cor39> =
			    %% Line 462
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor37) ->
					  case _cor37 of
					    <[X = {'core_transform',_cor67}|_cor36]> when 'true' ->
						let <_cor38> =
						    apply 'lc$^1'/1
							(_cor36)
						in  ( [X|_cor38]
						      -| ['compiler_generated'] )
					    ( <[_cor35|_cor36]> when 'true' ->
						  apply 'lc$^1'/1
						      (_cor36)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor37> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor37})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (Opts)
			      -| ['list_comprehension'] )
			in  let <CoreOpts2> =
				%% Line 463
				['report_errors'|['to_core'|['binary'|[{'i',[46|[46|[47|[105|[110|[99|[108|[117|[100|[101]]]]]]]]]]}|_cor39]]]]
			    in  %% Line 465
				case call 'compile':'file'
					 (Source, CoreOpts2) of
				  %% Line 466
				  <{'ok',_cor68,Core}> when 'true' ->
				      %% Line 467
				      apply 'compile_core'/4
					  (Name, Core, File, Opts)
				  %% Line 468
				  <Error> when 'true' ->
				      do  %% Line 469
					  call 'code_server':'error_msg'
					      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[69|[114|[114|[111|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[112|[58|[10|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[469|[Source|[Error|[]]]]])
					  do  %% Line 470
					      call 'io':'format'
						  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'cant_compile_source_code',Error}|['hipe'|[470]]])
					      %% Line 470
					      call 'erlang':'error'
						  ({'hipe',470,{'cant_compile_source_code',Error}})
				end
		    %% Line 472
		    <Other>
			when let <_cor50> =
			      call 'erlang':'=:='
				  (Other, 'false')
			  in  let <_cor51> =
				  call 'erlang':'=:='
				      (Other, 'undefined')
			      in  call 'erlang':'or'
				      (_cor50, _cor51) ->
			let <DisasmFun> =
			    %% Line 473
			    ( fun (_cor52) ->
				  apply 'disasm'/1
				      (File)
			      -| [{'id',{0,0,'-compile/3-fun-0-'}}] )
			in  let <IcodeFun> =
				%% Line 474
				( fun (_cor56,_cor55) ->
				      %% Line 475
				      apply 'get_beam_icode'/4
					  (Name, _cor56, File, _cor55)
				  -| [{'id',{0,0,'-compile/3-fun-1-'}}] )
			    in  %% Line 477
				apply 'run_compiler'/4
				    (Name, DisasmFun, IcodeFun, Opts)
		    ( <_cor60> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor60})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor63,_cor62,_cor61> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor63,_cor62,_cor61})
		  -| [{'function_name',{'compile',3}}] )
	    -| ['compiler_generated'] )
	end
'compile_core'/4 =
    %% Line 483
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Core> =
	    %% Line 484
	    call 'cerl':'from_records'
		(_cor2)
	in  %% Line 485
	    apply 'compile'/4
		(_cor3, Core, _cor1, _cor0)
'compile'/4 =
    %% Line 507
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,[],File,Opts> when 'true' ->
	      %% Line 508
	      apply 'compile'/3
		  (Name, File, Opts)
	  %% Line 509
	  <Name,Core,File,Opts>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <DisasmFun> =
		  %% Line 510
		  ( fun (_cor4) ->
			{'false',[]}
		    -| [{'id',{0,0,'-compile/4-fun-0-'}}] )
	      in  let <IcodeFun> =
		      %% Line 511
		      ( fun (_cor8,_cor7) ->
			    %% Line 512
			    apply 'get_core_icode'/4
				(Name, Core, File, _cor7)
			-| [{'id',{0,0,'-compile/4-fun-1-'}}] )
		  in  %% Line 514
		      apply 'run_compiler'/4
			  (Name, DisasmFun, IcodeFun, Opts)
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'compile',4}}] )
	    -| ['compiler_generated'] )
	end
'file'/1 =
    %% Line 527
    fun (_cor0) ->
	%% Line 528
	apply 'file'/2
	    (_cor0, [])
'file'/2 =
    %% Line 546
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Options>
	      when call 'erlang':'is_atom'
		    (File) ->
	      %% Line 547
	      case call 'beam_lib':'info'
		       (File) of
		%% Line 548
		<L>
		    when call 'erlang':'is_list'
			  (L) ->
		    %% Line 549
		    case call 'lists':'keyfind'
			     ('module', 1, L) of
		      <{'module',Mod}> when 'true' ->
			  %% Line 550
			  case apply 'compile'/3
				   (Mod, File, Options) of
			    %% Line 551
			    <{'ok',CompRet}> when 'true' ->
				%% Line 552
				{'ok',Mod,CompRet}
			    %% Line 553
			    <Other> when 'true' ->
				%% Line 554
				Other
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 556
		<Error> when 'true' ->
		    %% Line 557
		    Error
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'file',2}}] )
	    -| ['compiler_generated'] )
	end
'disasm'/1 =
    %% Line 569
    fun (_cor0) ->
	%% Line 570
	case call 'beam_disasm':'file'
		 (_cor0) of
	  %% Line 571
	  <{'beam_file',_cor12,LabeledExports,_cor13,%% Line 572
						     CompInfo,%% Line 573
							      BeamCode}> when 'true' ->
	      let <CompOpts> =
		  %% Line 574
		  call 'proplists':'get_value'
		      ('options', CompInfo, [])
	      in  let <_cor3> =
		      %% Line 575
		      case call 'lists':'keyfind'
			       ('hipe', 1, CompOpts) of
			%% Line 576
			<{'hipe',L}>
			    when call 'erlang':'is_list'
				  (L) ->
			    L
			%% Line 577
			<{'hipe',X}> when 'true' ->
			    [X|[]]
			%% Line 578
			<_cor14> when 'true' ->
			    []
		      end
		  in  let <Exports> =
			  %% Line 580
			  apply 'fix_beam_exports'/1
			      (LabeledExports)
		      in  %% Line 581
			  {{BeamCode,Exports},_cor3}
	  %% Line 582
	  <{'error',_X_Mod,Error}> when 'true' ->
	      let <_cor6> =
		  %% Line 583
		  call 'beam_lib':'format_error'
		      (Error)
	      in  do  %% Line 583
		      call 'io':'format'
			  ([126|[115|[10]]], [_cor6|[]])
		      do  %% Line 584
			  call 'io':'format'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['no_beam_code'|['hipe'|[584]]])
			  %% Line 584
			  call 'erlang':'error'
			      ({'hipe',584,'no_beam_code'})
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'fix_beam_exports'/1 =
    %% Line 587
    fun (_cor0) ->
	%% Line 588
	apply 'fix_beam_exports'/2
	    (_cor0, [])
'fix_beam_exports'/2 =
    %% Line 590
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{F,A,_cor4}|BeamExports],Exports> when 'true' ->
	      %% Line 591
	      apply 'fix_beam_exports'/2
		  (BeamExports, [{F,A}|Exports])
	  %% Line 592
	  <[],Exports> when 'true' ->
	      %% Line 593
	      Exports
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fix_beam_exports',2}}] )
	    -| ['compiler_generated'] )
	end
'get_beam_icode'/4 =
    %% Line 595
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,{BeamCode,Exports},File,Options> when 'true' ->
	      do  %% Line 596
		  case call 'proplists':'get_bool'
			   ('time', %% Line 598
				    Options) of
		    %% Line 598
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([66|[69|[65|[77|[45|[116|[111|[45|[73|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe')
		    %% Line 598
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
		  let <_cor8> =
		      %% Line 598
		      ( fun (_cor6) ->
			    do  case call 'proplists':'get_bool'
					 ('time', Options) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([66|[69|[65|[77|[45|[116|[111|[45|[73|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
				_cor6
			-| [{'id',{0,0,'-get_beam_icode/4-fun-0-'}}] )
		  in  let <_cor10> =
			  catch
			      let <_cor9> =
				  %% Line 597
				  call 'hipe_beam_to_icode':'module'
				      (BeamCode, Options)
			      in  %% Line 597
				  {'ok',_cor9}
		      in  %% Line 596
			  case _cor10 of
			    <{'ok',Icode}> when 'true' ->
				let <_cor17> =
				    %% Line 598
				    apply _cor8
					(_cor10)
				in  let <BeamBin> =
					%% Line 599
					apply 'get_beam_code'/1
					    (File)
				    in  %% Line 600
					{{Mod,Exports,Icode},BeamBin}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'get_beam_icode',4}}] )
	    -| ['compiler_generated'] )
	end
'get_core_icode'/4 =
    %% Line 602
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 603
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 605
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([66|[69|[65|[77|[45|[116|[111|[45|[73|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe')
	      %% Line 605
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	    let <_cor8> =
		%% Line 605
		( fun (_cor6) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([66|[69|[65|[77|[45|[116|[111|[45|[73|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
			  _cor6
		  -| [{'id',{0,0,'-get_core_icode/4-fun-0-'}}] )
	    in  let <_cor10> =
		    catch
			let <_cor9> =
			    %% Line 604
			    call 'cerl_to_icode':'module'
				(_cor2, _cor0)
			in  %% Line 604
			    {'ok',_cor9}
		in  %% Line 603
		    case _cor10 of
		      <{'ok',Icode}> when 'true' ->
			  let <_cor29> =
			      %% Line 605
			      apply _cor8
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 606
				  call 'proplists':'get_bool'
				      ('load', _cor0)
			      in  let <NeedBeamCode> =
				      %% Line 606
				      call 'erlang':'not'
					  (_cor12)
				  in  let <_cor15> =
					  %% Line 608
					  case NeedBeamCode of
					    %% Line 609
					    <'true'> when 'true' ->
						[]
					    %% Line 610
					    <'false'> when 'true' ->
						apply 'get_beam_code'/1
						    (_cor1)
					    ( <_cor14> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor14})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor23> =
					      %% Line 612
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor20) ->
							    case _cor20 of
							      <[V|_cor18]> when 'true' ->
								  let <_cor21> =
								      call 'cerl':'var_name'
									  (V)
								  in  let <_cor22> =
									  apply 'lc$^0'/1
									      (_cor18)
								      in  ( [_cor21|_cor22]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor20> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor20})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor19> =
							call 'cerl':'module_exports'
							    (_cor2)
						    in  apply 'lc$^0'/1
							    (_cor19)
						-| ['list_comprehension'] )
					  in  %% Line 613
					      {{_cor3,_cor23,Icode},_cor15}
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
'get_beam_code'/1 =
    %% Line 615
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      Bin
	  %% Line 616
	  <FileName> when 'true' ->
	      %% Line 617
	      case call 'erl_prim_loader':'get_file'
		       (FileName) of
		%% Line 618
		<{'ok',Bin,_cor6}> when 'true' ->
		    %% Line 619
		    Bin
		%% Line 620
		<'error'> when 'true' ->
		    do  %% Line 621
			call 'io':'format'
			    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['no_beam_file'|['hipe'|[621]]])
			%% Line 621
			call 'erlang':'error'
			    ({'hipe',621,'no_beam_file'})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'run_compiler'/4 =
    %% Line 631
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 632
	    call 'erlang':'++'
		(_cor0, ['o2'])
	in  let <Opts> =
		%% Line 632
		apply 'expand_basic_options'/1
		    (_cor4)
	    in  do  %% Line 633
		    case call 'proplists':'get_bool'
			     ('verbose', Opts) of
		      <'true'> when 'true' ->
			  call 'io':'format'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[67|[111|[109|[112|[105|[108|[105|[110|[103|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
		      <'false'> when 'true' ->
			  'ok'
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		    do  %% Line 634
			case call 'proplists':'get_bool'
				 ('time', Opts) of
			  <'true'> when 'true' ->
			      call 'hipe_timing':'start'
				  ([67|[111|[109|[112|[105|[108|[101]]]]]]], 'hipe')
			  <'false'> when 'true' ->
			      'ok'
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
			let <Res> =
			    %% Line 635
			    apply 'run_compiler_1'/3
				(_cor2, _cor1, Opts)
			in  do  %% Line 636
				case call 'proplists':'get_bool'
					 ('time', Opts) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([67|[111|[109|[112|[105|[108|[101]]]]]]], 'hipe')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
				%% Line 637
				Res
'run_compiler_1'/3 =
    %% Line 639
    fun (_cor2,_cor1,_cor0) ->
	let <Parent> =
	    %% Line 640
	    call 'erlang':'self'
		()
	in  %% Line 641
	    case call 'erlang':'process_info'
		     (Parent, 'trap_exit') of
	      <{'trap_exit',TrapExit}> when 'true' ->
		  do  %% Line 644
		      call 'erlang':'process_flag'
			  ('trap_exit', 'true')
		      let <_cor28> =
			  %% Line 645
			  ( fun () ->
				do  %% Line 647
				    apply 'set_architecture'/1
					(_cor0)
				    do  %% Line 648
					apply 'pre_init'/1
					    (_cor0)
					%% Line 651
					case apply _cor2
						 (_cor0) of
					  <{Code,CompOpts}> when 'true' ->
					      let <_cor6> =
						  %% Line 652
						  call 'erlang':'++'
						      (_cor0, CompOpts)
					      in  let <Opts0> =
						      %% Line 652
						      apply 'expand_options'/1
							  (_cor6)
						  in  let <_cor11> =
							  %% Line 654
							  ( case call 'proplists':'get_bool'
								     ('to_llvm', Opts0) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor9> =
									%% Line 655
									apply 'llvm_support_available'/0
									    ()
								    in  %% Line 655
									call 'erlang':'not'
									    (_cor9)
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							      ( <_cor8> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor8}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  let <_cor20> =
							      %% Line 654
							      case _cor11 of
								%% Line 656
								<'true'> when 'true' ->
								    do  %% Line 657
									call 'code_server':'error_msg'
									    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[78|[111|[32|[76|[76|[86|[77|[32|[118|[101|[114|[115|[105|[111|[110|[32|[51|[46|[52|[32|[111|[114|[32|[103|[114|[101|[97|[116|[101|[114|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[36|[80|[65|[84|[72|[59|[32|[97|[98|[111|[114|[116|[105|[110|[103|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 659
																																																																																							   ['hipe'|[659]])
									do  %% Line 660
									    call 'io':'format'
										([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['cant_find_required_llvm_version'|['hipe'|[660]]])
									    %% Line 660
									    call 'erlang':'error'
										({'hipe',660,'cant_find_required_llvm_version'})
								%% Line 661
								<'false'> when 'true' ->
								    %% Line 662
								    Opts0
								( <_cor19> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor19})
								  -| ['compiler_generated'] )
							      end
							  in  do  %% Line 664
								  apply 'check_options'/1
								      (_cor20)
								  do  %% Line 665
								      case call 'proplists':'get_bool'
									       ('verbose', _cor0) of
									<'true'> when 'true' ->
									    %% Line 666
									    call 'io':'format'
										([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[79|[112|[116|[105|[111|[110|[115|[58|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor20|[]])
									%% Line 666
									<'false'> when 'true' ->
									    'ok'
									( <_cor25> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor25})
									  -| ['compiler_generated'] )
								      end
								      do  %% Line 667
									  apply 'init'/1
									      (_cor20)
									  %% Line 668
									  case apply _cor1
										   (Code, _cor20) of
									    <{Icode,WholeModule}> when 'true' ->
										let <CompRes> =
										    %% Line 669
										    apply 'compile_finish'/3
											(Icode, WholeModule, _cor20)
										in  %% Line 670
										    apply 'compiler_return'/2
											(CompRes, Parent)
									    ( <_cor26> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor26})
									      -| ['compiler_generated'] )
									  end
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor5})
					    -| ['compiler_generated'] )
					end
			    -| [{'id',{0,0,'-run_compiler_1/3-fun-0-'}}] )
		      in  let <CompProc> =
			      %% Line 645
			      call 'erlang':'spawn_link'
				  (_cor28)
			  in  let <_cor37> =
				  %% Line 672
				  case call 'proplists':'get_value'
					   ('timeout', _cor0) of
				    %% Line 673
				    <N>
					when let <_cor30> =
					      call 'erlang':'is_integer'
						  (N)
					  in  let <_cor31> =
						  call 'erlang':'>='
						      (N, 0)
					      in  call 'erlang':'and'
						      (_cor30, _cor31) ->
					N
				    %% Line 674
				    <'undefined'> when 'true' ->
					'infinity'
				    %% Line 675
				    <'infinity'> when 'true' ->
					'infinity'
				    %% Line 676
				    <Other> when 'true' ->
					do  %% Line 677
					    call 'io':'format'
						([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[66|[97|[100|[32|[116|[105|[109|[101|[111|[117|[116|[32|[118|[97|[108|[117|[101|[58|[32|[126|[80|[10|[85|[115|[105|[110|[103|[32|[100|[101|[102|[97|[117|[108|[116|[32|[116|[105|[109|[101|[111|[117|[116|[32|[108|[105|[109|[105|[116|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 678
																																																																	 ['hipe'|[678|%% Line 679
																																																																		      [Other|[5]]]])
					    %% Line 680
					    'infinity'
				  end
			      in  do  %% Line 682
				      receive
					%% Line 683
					<{'EXIT',_cor48,'normal'}>
					    when call 'erlang':'=:='
						  (_cor48,
						   CompProc) ->
					    'ok'
					%% Line 684
					<{'EXIT',_cor49,Reason}>
					    when call 'erlang':'=:='
						  (_cor49,
						   CompProc) ->
					    call 'erlang':'exit'
						(Reason)
				      after _cor37 ->
					do  %% Line 687
					    call 'erlang':'exit'
						(CompProc, 'kill')
					    do  %% Line 688
						receive
						  <{'EXIT',_cor50,_cor51}>
						      when call 'erlang':'=:='
							    (_cor50,
							     CompProc) ->
						      'ok'
						after 'infinity' ->
						  'ok'
						do  %% Line 689
						    apply 'flush'/0
							()
						    do  %% Line 690
							call 'code_server':'error_msg'
							    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[69|[82|[82|[79|[82|[58|[32|[67|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[116|[105|[109|[101|[100|[32|[111|[117|[116|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[690]])
							%% Line 691
							call 'erlang':'exit'
							    ('timed_out')
				      let <_cor43> =
					  %% Line 693
					  receive
					    <{_cor52,Res}>
						when call 'erlang':'=:='
						      (_cor52,
						       CompProc) ->
						Res
					  after 'infinity' ->
					    'true'
				      in  do  %% Line 694
					      call 'erlang':'process_flag'
						  ('trap_exit', TrapExit)
					      _cor43
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'flush'/0 =
    %% Line 697
    fun () ->
	%% Line 698
	receive
	  %% Line 699
	  <_cor0> when 'true' ->
	      apply 'flush'/0
		  ()
	after %% Line 700
	      0 ->
	  %% Line 701
	  'ok'
'compiler_return'/2 =
    %% Line 704
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 705
	    call 'erlang':'self'
		()
	in  %% Line 705
	    call 'erlang':'!'
		(_cor0, {_cor2,_cor1})
'compile_finish'/3 =
    %% Line 707
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Mod,Exports,Icode},WholeModule,Options> when 'true' ->
	      let <Res> =
		  %% Line 708
		  apply 'finalize'/5
		      (Icode, Mod, Exports, WholeModule, Options)
	      in  %% Line 709
		  apply 'post'/3
		      (Res, Icode, Options)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'compile_finish',3}}] )
	    -| ['compiler_generated'] )
	end
'finalize'/5 =
    %% Line 717
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <List> =
	    %% Line 718
	    apply 'icode_multret'/4
		(_cor4, _cor3, _cor0, _cor2)
	in  %% Line 719
	    case call 'erlang':'statistics'
		     ('runtime') of
	      <{T1Compile,_cor50}> when 'true' ->
		  let <_cor11> =
		      %% Line 721
		      case call 'proplists':'get_value'
			       ('use_callgraph', _cor0) of
			%% Line 722
			<'true'> when 'true' ->
			    let <CallGraph> =
				%% Line 724
				call 'hipe_icode_callgraph':'construct'
				    (List)
			    in  let <OrdList> =
				    %% Line 725
				    call 'hipe_icode_callgraph':'to_list'
					(CallGraph)
				in  %% Line 726
				    apply 'finalize_fun'/3
					(OrdList, _cor2, _cor0)
			%% Line 727
			<_cor51> when 'true' ->
			    let <OrdList> =
				%% Line 729
				call 'lists':'reverse'
				    (List)
			    in  %% Line 730
				apply 'finalize_fun'/3
				    (OrdList, _cor2, _cor0)
		      end
		  in  %% Line 732
		      case call 'erlang':'statistics'
			       ('runtime') of
			<{T2Compile,_cor52}> when 'true' ->
			    do  %% Line 733
				case call 'proplists':'get_bool'
					 ('verbose', _cor0) of
				  <'true'> when 'true' ->
				      let <_cor14> =
					  %% Line 735
					  call 'erlang':'-'
					      (T2Compile, T1Compile)
				      in  let <_cor15> =
					      %% Line 735
					      call 'erlang':'/'
						  (_cor14, 1000)
					  in  %% Line 734
					      call 'io':'format'
						  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[67|[111|[109|[112|[105|[108|[101|[100|[32|[126|[112|[32|[105|[110|[32|[126|[46|[50|[102|[32|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 735
																																  [_cor3|[_cor15|[]]])
				  %% Line 735
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor19> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor19})
				    -| ['compiler_generated'] )
				end
				%% Line 736
				case call 'proplists':'get_bool'
					 ('to_rtl', _cor0) of
				  %% Line 737
				  <'true'> when 'true' ->
				      %% Line 738
				      {'ok',_cor11}
				  %% Line 739
				  <'false'> when 'true' ->
				      let <_cor25> =
					  %% Line 741
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor22) ->
							case _cor22 of
							  <[{MFA,Icode}|_cor21]> when 'true' ->
							      %% Line 742
							      ( case call 'hipe_icode':'icode_is_closure'
									 (Icode) of
								  <'true'> when 'true' ->
								      let <_cor23> =
									  apply 'lc$^0'/1
									      (_cor21)
								      in  ( [MFA|_cor23]
									    -| ['compiler_generated'] )
								  ( <'false'> when 'true' ->
									apply 'lc$^0'/1
									    (_cor21)
								    -| ['compiler_generated'] )
								  ( <_cor24> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor24})
								    -| ['compiler_generated'] )
								end
								-| ['list_comprehension'] )
							  ( <[_cor20|_cor21]> when 'true' ->
								apply 'lc$^0'/1
								    (_cor21)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor22> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor22})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (List)
					    -| ['list_comprehension'] )
				      in  %% Line 743
					  case call 'erlang':'statistics'
						   ('runtime') of
					    <{T1,_cor53}> when 'true' ->
						do  %% Line 744
						    case call 'proplists':'get_bool'
							     ('verbose', _cor0) of
						      <'true'> when 'true' ->
							  call 'io':'format'
							      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[65|[115|[115|[101|[109|[98|[108|[105|[110|[103|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
						      <'false'> when 'true' ->
							  'ok'
						      ( <_cor31> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor31})
							-| ['compiler_generated'] )
						    end
						    %% Line 745
						    try
							apply 'assemble'/4
							    (_cor11, _cor25, _cor2, _cor0)
						    of <_cor32> ->
							%% Line 747
							case call 'erlang':'statistics'
								 ('runtime') of
							  <{T2,_cor54}> when 'true' ->
							      do  %% Line 748
								  case call 'proplists':'get_bool'
									   ('verbose', _cor0) of
								    <'true'> when 'true' ->
									let <_cor34> =
									    %% Line 750
									    call 'erlang':'-'
										(T2, T1)
									in  let <_cor35> =
										%% Line 750
										call 'erlang':'/'
										    (_cor34, 1000)
									    in  %% Line 749
										call 'io':'format'
										    ([32|[105|[110|[32|[126|[46|[50|[102|[32|[115|[10]]]]]]]]]]], %% Line 750
																		  [_cor35|[]])
								    %% Line 750
								    <'false'> when 'true' ->
									'ok'
								    ( <_cor36> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor36})
								      -| ['compiler_generated'] )
								  end
								  %% Line 751
								  case apply 'maybe_load'/4
									   (_cor3, _cor32, _cor1, _cor0) of
								    <{'module',_cor55}>
									when call 'erlang':'=:='
									      (_cor55,
									       _cor3) ->
									let <TargetArch> =
									    %% Line 752
									    call 'erlang':'get'
										('hipe_target_arch')
									in  %% Line 753
									    {'ok',{TargetArch,_cor32}}
								    ( <_cor37> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor37})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor33> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor33})
							    -| ['compiler_generated'] )
							end
						    catch <_cor42,_cor41,_cor40> ->
							case <_cor42,_cor41,_cor40> of
							  %% Line 755
							  <'error',Error,_cor56> when 'true' ->
							      let <_cor43> =
								  %% Line 756
								  call 'erlang':'get_stacktrace'
								      ()
							      in  %% Line 756
								  {'error',Error,_cor43}
							  ( <_cor42,_cor41,_cor40> when 'true' ->
								primop 'raise'
								    (_cor40, _cor41)
							    -| ['compiler_generated'] )
							end
					    ( <_cor27> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor27})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor44> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor44})
				    -| ['compiler_generated'] )
				end
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor13})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'finalize_fun'/3 =
    %% Line 760
    fun (_cor2,_cor1,_cor0) ->
	%% Line 761
	case call 'proplists':'get_value'
		 ('concurrent_comp', _cor0) of
	  %% Line 762
	  <FalseVal>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (FalseVal,
				     'undefined') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (FalseVal, 'false')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 763
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor8) ->
			    case _cor8 of
			      <[MFAIcode = %% Line 764
					   {_X_MFA,_X_Icode}|_cor7]> when 'true' ->
				  let <_cor9> =
				      apply 'finalize_fun_sequential'/3
					  (MFAIcode, _cor0, {'comp_servers','undefined','undefined','undefined'})
				  in  let <_cor10> =
					  %% Line 764
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [_cor9|_cor10]
					    -| ['compiler_generated'] )
			      ( <[_cor6|_cor7]> when 'true' ->
				    %% Line 764
				    apply 'lc$^0'/1
					(_cor7)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(_cor2)
		-| ['list_comprehension'] )
	  %% Line 765
	  <TrueVal>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (TrueVal,
				     'true') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (TrueVal, 'debug')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 766
	      apply 'finalize_fun_concurrent'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'finalize_fun_concurrent'/3 =
    %% Line 769
    fun (_cor2,_cor1,_cor0) ->
	let <Self> =
	    %% Line 770
	    call 'erlang':'self'
		()
	in  %% Line 771
	    case _cor2 of
	      %% Line 772
	      <[{{M,_cor63,_cor64},_cor65}|_cor66]> when 'true' ->
		  let <CallGraph> =
		      %% Line 773
		      call 'hipe_icode_callgraph':'construct_callgraph'
			  (_cor2)
		  in  let <_cor9> =
			  %% Line 774
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor7) ->
					case _cor7 of
					  <[{F,A}|_cor6]> when 'true' ->
					      let <_cor8> =
						  apply 'lc$^0'/1
						      (_cor6)
					      in  ( [{M,F,A}|_cor8]
						    -| ['compiler_generated'] )
					  ( <[_cor5|_cor6]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor6)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor7> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor7})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor1)
			    -| ['list_comprehension'] )
		      in  let <_cor16> =
			      %% Line 775
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor13) ->
					    case _cor13 of
					      <[{MFA,Icode}|_cor12]> when 'true' ->
						  %% Line 776
						  ( case call 'hipe_icode':'icode_is_closure'
							     (Icode) of
						      <'true'> when 'true' ->
							  let <_cor14> =
							      apply 'lc$^1'/1
								  (_cor12)
							  in  ( [MFA|_cor14]
								-| ['compiler_generated'] )
						      ( <'false'> when 'true' ->
							    apply 'lc$^1'/1
								(_cor12)
							-| ['compiler_generated'] )
						      ( <_cor15> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor15})
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
					      ( <[_cor11|_cor12]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor12)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(_cor2)
				-| ['list_comprehension'] )
			  in  let <_cor18> =
				  %% Line 779
				  call 'erlang':'++'
				      (_cor9, _cor16)
			      in  let <Escaping> =
				      %% Line 779
				      call 'ordsets':'from_list'
					  (_cor18)
				  in  let <_cor28> =
					  %% Line 780
					  ( letrec
						'lc$^2'/1 =
						    fun (_cor24) ->
							case _cor24 of
							  <[{MFA = {_X_M,F,A},Icode}|_cor21]> when 'true' ->
							      %% Line 781
							      ( case call 'lists':'member'
									 ({F,A}, _cor1) of
								  <'false'> when 'true' ->
								      %% Line 782
								      ( case call 'hipe_icode':'icode_is_closure'
										 (Icode) of
									  <'false'> when 'true' ->
									      let <_cor25> =
										  apply 'lc$^2'/1
										      (_cor21)
									      in  ( [MFA|_cor25]
										    -| ['compiler_generated'] )
									  ( <'true'> when 'true' ->
										apply 'lc$^2'/1
										    (_cor21)
									    -| ['compiler_generated'] )
									  ( <_cor_variable> when 'true' ->
										call 'erlang':'error'
										    ('badarg')
									    -| ['compiler_generated'] )
									end
									-| ['list_comprehension'] )
								  ( <'true'> when 'true' ->
									apply 'lc$^2'/1
									    (_cor21)
								    -| ['compiler_generated'] )
								  ( <_cor_variable> when 'true' ->
									call 'erlang':'error'
									    ('badarg')
								    -| ['compiler_generated'] )
								end
								-| ['list_comprehension'] )
							  ( <[_cor20|_cor21]> when 'true' ->
								apply 'lc$^2'/1
								    (_cor21)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor24> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor24})
								  -| [{'function_name',{'lc$^2',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^2'/1
						    (_cor2)
					    -| ['list_comprehension'] )
				      in  let <TypeServerFun> =
					      %% Line 784
					      ( fun () ->
						    %% Line 785
						    call 'hipe_icode_coordinator':'coordinate'
							(CallGraph, Escaping, _cor28, %% Line 786
										      'hipe_icode_type')
						-| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-0-'}}] )
					  in  let <TypeServer> =
						  %% Line 788
						  call 'erlang':'spawn_link'
						      (TypeServerFun)
					      in  let <PPServerFun> =
						      %% Line 790
						      ( fun () ->
							    %% Line 791
							    apply 'pp_server_start'/1
								(_cor0)
							-| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-1-'}}] )
						  in  let <PPServer> =
							  %% Line 793
							  call 'erlang':'spawn_link'
							      (PPServerFun)
						      in  let <RangeServerFun> =
							      %% Line 795
							      ( fun () ->
								    %% Line 796
								    call 'hipe_icode_coordinator':'coordinate'
									(CallGraph, Escaping, _cor28, %% Line 797
												      'hipe_icode_range')
								-| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-2-'}}] )
							  in  let <RangeServer> =
								  %% Line 799
								  call 'erlang':'spawn_link'
								      (RangeServerFun)
							      in  let <Servers> =
								      %% Line 800
								      {'comp_servers',PPServer,%% Line 801
											       RangeServer,%% Line 802
													   TypeServer}
								  in  let <_cor43> =
									  %% Line 804
									  ( letrec
										'lc$^3'/1 =
										    fun (_cor39) ->
											case _cor39 of
											  <[%% Line 809
											    IcodeFun|_cor38]> when 'true' ->
											      let <_cor41> =
												  ( fun () ->
													do  %% Line 805
													    apply 'set_architecture'/1
														(_cor0)
													    do  %% Line 806
														apply 'pre_init'/1
														    (_cor0)
														do  %% Line 807
														    apply 'init'/1
															(_cor0)
														    let <_cor40> =
															%% Line 808
															apply 'finalize_fun_sequential'/3
															    (IcodeFun, _cor0, Servers)
														    in  %% Line 808
															call 'erlang':'!'
															    (Self, _cor40)
												    -| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-3-'}}] )
											      in  let <_cor42> =
												      %% Line 809
												      apply 'lc$^3'/1
													  (_cor38)
												  in  ( [_cor41|_cor42]
													-| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor39> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor39})
												  -| [{'function_name',{'lc$^3',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^3'/1
										    (_cor2)
									    -| ['list_comprehension'] )
								      in  let <_cor47> =
									      %% Line 810
									      ( fun (_cor45) ->
										    call 'erlang':'spawn_link'
											(_cor45)
										-| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-4-'}}] )
									  in  do  %% Line 810
										  call 'lists':'foreach'
										      (_cor47, _cor43)
										  let <_cor54> =
										      %% Line 811
										      ( letrec
											    'lc$^4'/1 =
												fun (_cor50) ->
												    case _cor50 of
												      <[%% Line 812
													{MFA,_cor67}|_cor49]> when 'true' ->
													  let <_cor52> =
													      receive
														<Res>
														    when try
															  let <_cor51> =
															      call 'erlang':'element'
																  (1, Res)
															  in  call 'erlang':'=:='
																  (_cor51, MFA)
														      of <Try> ->
															  Try
														      catch <T,R> ->
															  'false' ->
														    Res
													      after 'infinity' ->
														'true'
													  in  let <_cor53> =
														  %% Line 812
														  apply 'lc$^4'/1
														      (_cor49)
													      in  ( [_cor52|_cor53]
														    -| ['compiler_generated'] )
												      ( <[_cor48|_cor49]> when 'true' ->
													    %% Line 812
													    apply 'lc$^4'/1
														(_cor49)
													-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  []
												      ( <_cor50> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_cor50})
													      -| [{'function_name',{'lc$^4',1}}] )
													-| ['compiler_generated'] )
												    end
											in  apply 'lc$^4'/1
												(_cor2)
											-| ['list_comprehension'] )
										  in  let <_cor58> =
											  %% Line 813
											  ( fun (_cor56) ->
												apply 'stop_and_wait'/1
												    (_cor56)
											    -| [{'id',{0,0,'-finalize_fun_concurrent/3-fun-5-'}}] )
										      in  do  %% Line 813
											      call 'lists':'foreach'
												  (_cor58, %% Line 814
													   [PPServer|[TypeServer|[RangeServer|[]]]])
											      _cor54
	      %% Line 816
	      <[]> when 'true' ->
		  %% Line 817
		  []
	      ( <_cor59> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor59})
		-| ['compiler_generated'] )
	    end
'stop_and_wait'/1 =
    %% Line 820
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 821
	    call 'erlang':'self'
		()
	in  do  %% Line 821
		call 'erlang':'!'
		    (_cor0, {'stop',_cor1})
		%% Line 822
		receive
		  %% Line 823
		  <_cor3> when 'true' ->
		      'ok'
		after 'infinity' ->
		  'true'
'finalize_fun_sequential'/3 =
    %% Line 826
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{MFA,Icode},Opts,Servers> when 'true' ->
	      %% Line 827
	      case call 'erlang':'statistics'
		       ('runtime') of
		<{T1,_cor33}> when 'true' ->
		    do  %% Line 828
			case call 'proplists':'get_bool'
				 ('verbose', Opts) of
			  <'true'> when 'true' ->
			      call 'io':'format'
				  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[67|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MFA|[]])
			  <'false'> when 'true' ->
			      'ok'
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
			%% Line 829
			try
			    call 'hipe_main':'compile_icode'
				(MFA, Icode, Opts, Servers)
			of <_cor8> ->
			    case _cor8 of
			      %% Line 830
			      <{'native',_X_Platform,{'unprofiled',Code}}> when 'true' ->
				  %% Line 831
				  case call 'erlang':'statistics'
					   ('runtime') of
				    <{T2,_cor34}> when 'true' ->
					do  %% Line 832
					    case call 'proplists':'get_bool'
						     ('verbose', Opts) of
					      <'true'> when 'true' ->
						  let <_cor10> =
						      %% Line 833
						      call 'erlang':'-'
							  (T2, T1)
						  in  let <_cor11> =
							  %% Line 833
							  call 'erlang':'/'
							      (_cor10, 1000)
						      in  %% Line 833
							  call 'io':'format'
							      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[67|[111|[109|[112|[105|[108|[101|[100|[32|[126|[119|[32|[105|[110|[32|[126|[46|[50|[102|[32|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MFA|[_cor11|[]]])
					      %% Line 833
					      <'false'> when 'true' ->
						  'ok'
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor15})
						-| ['compiler_generated'] )
					    end
					    %% Line 834
					    {MFA,Code}
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      %% Line 835
			      <{'rtl',LinearRtl}> when 'true' ->
				  %% Line 836
				  {MFA,LinearRtl}
			      %% Line 837
			      <{'llvm_binary',Binary}> when 'true' ->
				  %% Line 838
				  {MFA,Binary}
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'try_clause',_cor16})
				-| ['compiler_generated'] )
			    end
			catch <_cor19,_cor18,_cor17> ->
			    case <_cor19,_cor18,_cor17> of
			      %% Line 840
			      <'error',Error,_cor35> when 'true' ->
				  do  %% Line 841
				      case call 'proplists':'get_bool'
					       ('verbose', Opts) of
					<'true'> when 'true' ->
					    call 'io':'format'
						([10], [])
					<'false'> when 'true' ->
					    'ok'
					( <_cor20> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor20})
					  -| ['compiler_generated'] )
				      end
				      let <_cor21> =
					  %% Line 842
					  call 'erlang':'get_stacktrace'
					      ()
				      in  let <ErrorInfo> = {%% Line 842
					       Error,_cor21}
					  in  do  %% Line 843
						  call 'code_server':'error_msg'
						      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[69|[82|[82|[79|[82|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[843|[ErrorInfo|[]]]])
						  do  %% Line 844
						      call 'io':'format'
							  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ErrorInfo|['hipe'|[844]]])
						      %% Line 844
						      call 'erlang':'error'
							  ({'hipe',844,ErrorInfo})
			      ( <_cor19,_cor18,_cor17> when 'true' ->
				    primop 'raise'
					(_cor17, _cor18)
				-| ['compiler_generated'] )
			    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'finalize_fun_sequential',3}}] )
	    -| ['compiler_generated'] )
	end
'pp_server_start'/1 =
    %% Line 847
    fun (_cor0) ->
	do  %% Line 848
	    apply 'set_architecture'/1
		(_cor0)
	    do  %% Line 849
		call 'erlang':'garbage_collect'
		    ()
		%% Line 850
		apply 'pp_server'/0
		    ()
'pp_server'/0 =
    %% Line 852
    fun () ->
	%% Line 853
	receive
	  %% Line 854
	  <{'print',Fun}> when 'true' ->
	      do  %% Line 855
		  apply Fun
		      ()
		  %% Line 855
		  apply 'pp_server'/0
		      ()
	  %% Line 856
	  <{'stop',Pid}> when 'true' ->
	      let <_cor0> =
		  %% Line 857
		  call 'erlang':'self'
		      ()
	      in  %% Line 857
		  call 'erlang':'!'
		      (Pid, {'done',_cor0})
	  %% Line 858
	  <_cor1> when 'true' ->
	      %% Line 859
	      apply 'pp_server'/0
		  ()
	after 'infinity' ->
	  'true'
'icode_multret'/4 =
    %% Line 862
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 863
	case call 'proplists':'get_bool'
		 ('icode_multret', _cor1) of
	  %% Line 864
	  <'true'> when 'true' ->
	      %% Line 865
	      call 'hipe_icode_mulret':'mult_ret'
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 866
	  <'false'> when 'true' ->
	      _cor3
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'maybe_load'/4 =
    %% Line 870
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 871
	case call 'proplists':'get_bool'
		 ('load', _cor0) of
	  %% Line 872
	  <'false'> when 'true' ->
	      %% Line 873
	      {'module',_cor3}
	  %% Line 874
	  <'true'> when 'true' ->
	      do  %% Line 875
		  case call 'proplists':'get_bool'
			   ('verbose', _cor0) of
		    <'true'> when 'true' ->
			call 'io':'format'
			    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[76|[111|[97|[100|[105|[110|[103|[47|[108|[105|[110|[107|[105|[110|[103|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
		  %% Line 876
		  apply 'do_load'/3
		      (_cor3, _cor2, _cor1)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'do_load'/3 =
    %% Line 879
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Bin,BeamBinOrPath>
	      when let <_cor3> =
		    call 'erlang':'is_binary'
			(BeamBinOrPath)
		in  let <_cor4> =
			%% Line 880
			call 'erlang':'is_list'
			    (BeamBinOrPath)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <HostArch> =
		  %% Line 881
		  call 'erlang':'get'
		      ('hipe_host_arch')
	      in  let <TargetArch> =
		      %% Line 882
		      call 'erlang':'get'
			  ('hipe_target_arch')
		  in  do  %% Line 884
			  case <> of
			    <>
				when call 'erlang':'=/='
				      (HostArch,
				       TargetArch) ->
				do  %% Line 885
				    call 'io':'format'
					([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'host_and_target_arch_differ',HostArch,TargetArch}|['hipe'|[885]]])
				    %% Line 885
				    call 'erlang':'error'
					({'hipe',885,{'host_and_target_arch_differ',HostArch,TargetArch}})
			    %% Line 886
			    <> when 'true' ->
				'ok'
			  end
			  %% Line 888
			  case call 'code':'is_sticky'
				   (Mod) of
			    %% Line 889
			    <'true'> when 'true' ->
				%% Line 892
				case call 'beam_lib':'all_chunks'
					 (BeamBinOrPath) of
				  <{'ok',_cor23,Chunks}> when 'true' ->
				      %% Line 893
				      case call 'beam_lib':'build_module'
					       (Chunks) of
					<{'ok',Beam}> when 'true' ->
					    %% Line 895
					    call 'code':'load_native_sticky'
						(Mod, Bin, Beam)
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			    %% Line 896
			    <'false'> when 'true' ->
				let <Architecture> =
				    %% Line 898
				    call 'erlang':'system_info'
					('hipe_architecture')
				in  let <ChunkName> =
					%% Line 899
					call 'hipe_unified_loader':'chunk_name'
					    (Architecture)
				    in  %% Line 900
					case call 'beam_lib':'all_chunks'
						 (BeamBinOrPath) of
					  <{'ok',_cor24,Chunks0}> when 'true' ->
					      let <_cor15> =
						  %% Line 901
						  call 'lists':'keydelete'
						      (ChunkName, 1, Chunks0)
					      in  let <Chunks> =
						      %% Line 901
						      [{ChunkName,Bin}|_cor15]
						  in  %% Line 902
						      case call 'beam_lib':'build_module'
							       (Chunks) of
							<{'ok',BeamPlusNative}> when 'true' ->
							    let <_cor18> =
								%% Line 903
								call 'code':'which'
								    (Mod)
							    in  %% Line 903
								call 'code':'load_binary'
								    (Mod, _cor18, BeamPlusNative)
							( <_cor17> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor17})
							  -| ['compiler_generated'] )
						      end
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor14})
					    -| ['compiler_generated'] )
					end
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor19})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'do_load',3}}] )
	    -| ['compiler_generated'] )
	end
'assemble'/4 =
    %% Line 906
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 907
	case call 'proplists':'get_bool'
		 ('to_llvm', _cor0) of
	  %% Line 908
	  <'false'> when 'true' ->
	      %% Line 909
	      case call 'erlang':'get'
		       ('hipe_target_arch') of
		%% Line 910
		<'ultrasparc'> when 'true' ->
		    %% Line 911
		    call 'hipe_sparc_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 912
		<'powerpc'> when 'true' ->
		    %% Line 913
		    call 'hipe_ppc_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 914
		<'ppc64'> when 'true' ->
		    %% Line 915
		    call 'hipe_ppc_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 916
		<'arm'> when 'true' ->
		    %% Line 917
		    call 'hipe_arm_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 918
		<'x86'> when 'true' ->
		    %% Line 919
		    call 'hipe_x86_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 920
		<'amd64'> when 'true' ->
		    %% Line 921
		    call 'hipe_amd64_assemble':'assemble'
			(_cor3, _cor2, _cor1, _cor0)
		%% Line 922
		<Arch> when 'true' ->
		    do  %% Line 923
			call 'io':'format'
			    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'executing_on_an_unsupported_architecture',Arch}|['hipe'|[923]]])
			%% Line 923
			call 'erlang':'error'
			    ({'hipe',923,{'executing_on_an_unsupported_architecture',Arch}})
	      end
	  %% Line 925
	  <'true'> when 'true' ->
	      %% Line 927
	      call 'hipe_llvm_merge':'finalize'
		  (_cor3, _cor2, _cor1)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'set_architecture'/1 =
    %% Line 935
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 936
	    call 'erlang':'system_info'
		('hipe_architecture')
	in  do  %% Line 936
		call 'erlang':'put'
		    ('hipe_host_arch', _cor1)
		let <_cor2> =
		    %% Line 938
		    call 'erlang':'get'
			('hipe_host_arch')
		in  let <_cor3> =
			%% Line 938
			call 'proplists':'get_value'
			    ('target', _cor0, _cor2)
		    in  do  %% Line 937
			    call 'erlang':'put'
				('hipe_target_arch', _cor3)
			    %% Line 939
			    'ok'
'pre_init'/1 =
    %% Line 945
    fun (_cor0) ->
	let <Options> =
	    %% Line 946
	    apply 'expand_options'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 951
		case call 'proplists':'get_value'
			 ('time', Options, 'false') of
		  %% Line 952
		  <'true'> when 'true' ->
		      ['hipe'|['hipe_main']]
		  %% Line 953
		  <OptTime> when 'true' ->
		      OptTime
		end
	    in  do  %% Line 950
		    call 'erlang':'put'
			('hipe_time', _cor3)
		    let <_cor7> =
			%% Line 955
			( fun (_cor5) ->
			      call 'erlang':'put'
				  (_cor5, 0)
			  -| [{'id',{0,0,'-pre_init/1-fun-0-'}}] )
		    in  let <_cor4> =
			    %% Line 955
			    apply 'hipe_timers'/0
				()
			in  do  %% Line 955
				call 'lists':'foreach'
				    (_cor7, _cor4)
				let <_cor12> =
				    %% Line 956
				    ( fun (_cor10) ->
					  %% Line 957
					  case _cor10 of
					    %% Line 958
					    <{CounterName,InitVal}> when 'true' ->
						call 'erlang':'put'
						    (CounterName, InitVal)
					    %% Line 959
					    <CounterName> when 'true' ->
						call 'erlang':'put'
						    (CounterName, 0)
					  end
				      -| [{'id',{0,0,'-pre_init/1-fun-1-'}}] )
				in  let <_cor8> =
					%% Line 962
					call 'proplists':'get_value'
					    ('counters', Options, [])
				    in  do  %% Line 956
					    call 'lists':'foreach'
						(_cor12, _cor8)
					    let <_cor13> =
						%% Line 963
						call 'proplists':'get_bool'
						    ('debug', Options)
					    in  do  %% Line 963
						    call 'erlang':'put'
							('hipe_debug', _cor13)
						    let <_cor14> =
							%% Line 964
							call 'proplists':'get_bool'
							    ('inline_fp', Options)
						    in  do  %% Line 964
							    call 'erlang':'put'
								('hipe_inline_fp', _cor14)
							    %% Line 965
							    'ok'
'init'/1 =
    %% Line 970
    fun (_cor0) ->
	do  %% Line 971
	    call 'erlang':'put'
		('callersavetime', 0)
	    do  %% Line 972
		call 'erlang':'put'
		    ('totalspill', {0,0})
		do  %% Line 973
		    call 'erlang':'put'
			('spilledtemps', 0)
		    do  %% Line 974
			call 'erlang':'put'
			    ('pre_ra_instrs', 0)
			do  %% Line 975
			    call 'erlang':'put'
				('post_ra_instrs', 0)
			    do  %% Line 976
				call 'erlang':'put'
				    ('pre_ra_temps', 0)
				do  %% Line 977
				    call 'erlang':'put'
					('post_ra_temps', 0)
				    do  %% Line 978
					call 'erlang':'put'
					    ('noregs', 0)
					do  %% Line 979
					    call 'erlang':'put'
						('bbs', 0)
					    %% Line 980
					    'ok'
'post'/3 =
    %% Line 984
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 986
	    case call 'proplists':'get_value'
		     ('timers', _cor0) of
	      %% Line 987
	      <Timers>
		  when call 'erlang':'is_list'
			(Timers) ->
		  %% Line 988
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[Timer|_cor4]> when 'true' ->
				      let <_cor6> =
					  call 'erlang':'get'
					      (Timer)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{Timer,_cor6}|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Timers)
		    -| ['list_comprehension'] )
	      %% Line 989
	      <_cor34> when 'true' ->
		  []
	    end
	in  let <_cor20> =
		%% Line 992
		case call 'proplists':'get_value'
			 ('counters', _cor0) of
		  %% Line 993
		  <Counters>
		      when call 'erlang':'is_list'
			    (Counters) ->
		      %% Line 994
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor13) ->
				    case _cor13 of
				      <[%% Line 998
					Counter|_cor12]> when 'true' ->
					  let <_cor17> =
					      case Counter of
						%% Line 995
						<{CounterName,_X_InitVal}> when 'true' ->
						    let <_cor14> =
							call 'erlang':'get'
							    (CounterName)
						    in  {CounterName,_cor14}
						%% Line 996
						<CounterName> when 'true' ->
						    let <_cor15> =
							call 'erlang':'get'
							    (CounterName)
						    in  {CounterName,_cor15}
					      end
					  in  let <_cor18> =
						  %% Line 998
						  apply 'lc$^1'/1
						      (_cor12)
					      in  ( [_cor17|_cor18]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor13> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor13})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(%% Line 998
				 Counters)
			-| ['list_comprehension'] )
		  %% Line 999
		  <_cor35> when 'true' ->
		      []
		end
	    in  let <_cor23> =
		    %% Line 1002
		    case call 'proplists':'get_bool'
			     ('measure_regalloc', _cor0) of
		      %% Line 1003
		      <'true'> when 'true' ->
			  %% Line 1004
			  call 'erlang':'get'
			      ()
		      %% Line 1005
		      <'false'> when 'true' ->
			  []
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		in  let <_cor25> =
			%% Line 1007
			call 'erlang':'++'
			    (_cor20, _cor23)
		    in  let <Info> =
			    %% Line 1007
			    call 'erlang':'++'
				(_cor9, _cor25)
			in  %% Line 1008
			    case call 'proplists':'get_bool'
				     ('get_called_modules', _cor0) of
			      %% Line 1009
			      <'true'> when 'true' ->
				  let <CalledMods> =
				      %% Line 1010
				      call 'hipe_icode_callgraph':'get_called_modules'
					  (_cor1)
				  in  %% Line 1011
				      case Info of
					%% Line 1012
					<[]> when 'true' ->
					    %% Line 1013
					    {_cor2,{'called_modules',CalledMods}}
					%% Line 1014
					<_cor36> when 'true' ->
					    %% Line 1015
					    {_cor2,{'info',Info},{'called_modules',CalledMods}}
				      end
			      %% Line 1017
			      <'false'> when 'true' ->
				  %% Line 1018
				  case Info of
				    %% Line 1019
				    <[]> when 'true' ->
					_cor2
				    %% Line 1021
				    <_cor37> when 'true' ->
					%% Line 1022
					{_cor2,{'info',Info}}
				  end
			      ( <_cor30> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor30})
				-| ['compiler_generated'] )
			    end
'version'/0 =
    %% Line 1031
    fun () ->
	%% Line 1032
	[51|[46|[49|[49]]]]
'help'/0 =
    %% Line 1041
    fun () ->
	do  %% Line 1067
	    call 'io':'put_chars'
		([84|[104|[101|[32|[72|[105|[80|[69|[32|[67|[111|[109|[112|[105|[108|[101|[114|[32|[40|[86|[101|[114|[115|[105|[111|[110|[32|[51|[46|[49|[49|[41|[10|[10|[32|[84|[104|[101|[32|[110|[111|[114|[109|[97|[108|[32|[119|[97|[121|[32|[116|[111|[32|[110|[97|[116|[105|[118|[101|[45|[99|[111|[109|[112|[105|[108|[101|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[32|[117|[115|[105|[110|[103|[32|[72|[105|[80|[69|[32|[105|[115|[32|[116|[111|[10|[32|[105|[110|[99|[108|[117|[100|[101|[32|[96|[110|[97|[116|[105|[118|[101|[39|[32|[105|[110|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[111|[112|[116|[105|[111|[110|[115|[44|[32|[97|[115|[32|[105|[110|[58|[10|[32|[32|[32|[32|[32|[49|[62|[32|[99|[40|[109|[121|[95|[109|[111|[100|[117|[108|[101|[44|[32|[91|[110|[97|[116|[105|[118|[101|[93|[41|[46|[10|[32|[79|[112|[116|[105|[111|[110|[115|[32|[116|[111|[32|[116|[104|[101|[32|[72|[105|[80|[69|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[109|[117|[115|[116|[32|[116|[104|[101|[110|[32|[98|[101|[32|[112|[97|[115|[115|[101|[100|[32|[97|[115|[32|[102|[111|[108|[108|[111|[119|[115|[58|[10|[32|[32|[32|[32|[32|[49|[62|[32|[99|[40|[109|[121|[95|[109|[111|[100|[117|[108|[101|[44|[32|[91|[110|[97|[116|[105|[118|[101|[44|[123|[104|[105|[112|[101|[44|[79|[112|[116|[105|[111|[110|[115|[125|[93|[41|[46|[10|[32|[85|[115|[101|[32|[96|[104|[101|[108|[112|[95|[111|[112|[116|[105|[111|[110|[115|[40|[41|[39|[32|[102|[111|[114|[32|[100|[101|[116|[97|[105|[108|[115|[46|[10|[10|[32|[85|[116|[105|[108|[105|[116|[121|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[58|[10|[32|[32|[32|[104|[101|[108|[112|[40|[41|[10|[32|[32|[32|[32|[32|[80|[114|[105|[110|[116|[115|[32|[116|[104|[105|[115|[32|[109|[101|[115|[115|[97|[103|[101|[46|[10|[32|[32|[32|[104|[101|[108|[112|[95|[111|[112|[116|[105|[111|[110|[115|[40|[41|[10|[32|[32|[32|[32|[32|[80|[114|[105|[110|[116|[115|[32|[97|[32|[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110|[32|[111|[102|[32|[111|[112|[116|[105|[111|[110|[115|[32|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[98|[121|[32|[116|[104|[101|[10|[32|[32|[32|[32|[32|[72|[105|[80|[69|[32|[99|[111|[109|[112|[105|[108|[101|[114|[46|[10|[32|[32|[32|[104|[101|[108|[112|[95|[111|[112|[116|[105|[111|[110|[40|[79|[112|[116|[105|[111|[110|[41|[10|[32|[32|[32|[32|[32|[80|[114|[105|[110|[116|[115|[32|[97|[32|[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110|[32|[111|[102|[32|[116|[104|[97|[116|[32|[111|[112|[116|[105|[111|[110|[46|[10|[32|[32|[32|[104|[101|[108|[112|[95|[100|[101|[98|[117|[103|[95|[111|[112|[116|[105|[111|[110|[115|[40|[41|[10|[32|[32|[32|[32|[32|[80|[114|[105|[110|[116|[115|[32|[97|[32|[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110|[32|[111|[102|[32|[100|[101|[98|[117|[103|[32|[111|[112|[116|[105|[111|[110|[115|[46|[10|[32|[32|[32|[118|[101|[114|[115|[105|[111|[110|[40|[41|[32|[45|[62|[10|[32|[32|[32|[32|[32|[82|[101|[116|[117|[114|[110|[115|[32|[116|[104|[101|[32|[72|[105|[80|[69|[32|[118|[101|[114|[115|[105|[111|[110|[32|[97|[115|[32|[97|[32|[115|[116|[114|[105|[110|[103|[39|[46|[10|[10|[32|[70|[111|[114|[32|[72|[105|[80|[69|[32|[100|[101|[118|[101|[108|[111|[112|[101|[114|[115|[32|[111|[110|[108|[121|[58|[10|[32|[32|[85|[115|[101|[32|[96|[104|[101|[108|[112|[95|[104|[105|[112|[101|[114|[40|[41|[39|[32|[102|[111|[114|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[97|[98|[111|[117|[116|[32|[72|[105|[80|[69|[39|[115|[32|[108|[111|[119|[45|[108|[101|[118|[101|[108|[32|[105|[110|[116|[101|[114|[102|[97|[99|[101|
	    %% Line 1068
	    'ok'
'help_hiper'/0 =
    %% Line 1072
    fun () ->
	do  %% Line 1098
	    call 'io':'put_chars'
		([32|[84|[104|[105|[115|[32|[105|[110|[116|[101|[114|[102|[97|[99|[101|[32|[105|[115|[32|[115|[117|[112|[112|[111|[115|[101|[100|[32|[116|[111|[32|[98|[101|[32|[117|[115|[101|[100|[32|[98|[121|[32|[72|[105|[80|[69|[45|[100|[101|[118|[101|[108|[111|[112|[101|[114|[115|[32|[111|[110|[108|[121|[33|[10|[32|[78|[111|[116|[101|[32|[116|[104|[97|[116|[32|[97|[108|[108|[32|[111|[112|[116|[105|[111|[110|[115|[32|[97|[114|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[32|[116|[111|[32|[116|[104|[101|[32|[72|[105|[80|[69|[32|[99|[111|[109|[112|[105|[108|[101|[114|[46|[10|[32|[32|[32|[99|[40|[78|[97|[109|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[10|[32|[32|[32|[32|[32|[67|[111|[109|[112|[105|[108|[101|[115|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[78|[97|[109|[101|[32|[97|[110|[100|[32|[108|[111|[97|[100|[115|[32|[105|[116|[10|[32|[32|[32|[32|[32|[116|[111|[32|[109|[101|[109|[111|[114|[121|[46|[32|[78|[97|[109|[101|[32|[105|[115|[32|[97|[110|[32|[97|[116|[111|[109|[32|[111|[114|[32|[97|[32|[116|[117|[112|[108|[101|[32|[123|[77|[44|[70|[44|[65|[125|[46|[10|[32|[32|[32|[99|[40|[78|[97|[109|[101|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[97|[98|[111|[118|[101|[44|[32|[98|[117|[116|[32|[117|[115|[105|[110|[103|[32|[111|[110|[108|[121|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[46|[10|[32|[32|[32|[102|[40|[70|[105|[108|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[99|[40|[78|[97|[109|[101|[44|[70|[105|[108|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[44|[32|[98|[117|[116|[32|[116|[97|[107|[105|[110|[103|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[10|[32|[32|[32|[32|[32|[102|[114|[111|[109|[32|[70|[105|[108|[101|[46|[10|[32|[32|[32|[102|[40|[70|[105|[108|[101|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[97|[98|[111|[118|[101|[44|[32|[98|[117|[116|[32|[117|[115|[105|[110|[103|[32|[111|[110|[108|[121|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[46|[10|[32|[32|[32|[99|[111|[109|[112|[105|[108|[101|[40|[78|[97|[109|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[10|[32|[32|[32|[32|[32|[67|[111|[109|[112|[105|[108|[101|[115|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[78|[97|[109|[101|[32|[116|[111|[32|[97|[32|[98|[105|[110|[97|[114|[121|[46|[10|[32|[32|[32|[32|[32|[66|[121|[32|[100|[101|[102|[97|[117|[108|[116|[44|[32|[116|[104|[105|[115|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[108|[111|[97|[100|[32|[116|[111|[32|[109|[101|[109|[111|[114|[121|[46|[10|[32|[32|[32|[99|[111|[109|[112|[105|[108|[101|[40|[78|[97|[109|[101|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[97|[98|[111|[118|[101|[44|[32|[98|[117|[116|[32|[117|[115|[105|[110|[103|[32|[111|[110|[108|[121|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[46|[10|[32|[32|[32|[102|[105|[108|[101|[40|[70|[105|[108|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[99|[111|[109|[112|[105|[108|[101|[40|[78|[97|[109|[101|[44|[70|[105|[108|[101|[44|[79|[112|[116|[105|[111|[110|[115|[41|[44|[32|[98|[117|[116|[32|[116|[97|[107|[105|[110|[103|[32|[116|[104|[101|[10|[32|[32|[32|[32|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[102|[114|[111|[109|[32|[70|[105|[108|[101|[46|[10|[32|[32|[32|[102|[105|[108|[101|[40|[70|[105|[108|[101|[41|[10|[32|[32|[32|[32|[32|[65|[115|[32|[97|[98|[111|[118|[101|[44|[32|[98|[117|[116|[32|[117|[115|[105|[110|[103|[32|[111|[110|[108|[121|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[46|[10|[32|[32|[32|[108|[111|[97|[100|[40|[77|[111|[100|[117|[108|[101|[41|[10|[32|[32|[32|[32|[32|[76|[111|[97|[100|[115|[32|[116|[104|[101|[32|[110|[97|[109|[101|[100|[32|[109|[111|[100|[117|[108|[101|[32|[105|[110|[116|[111|[32|[109|[101|[109|[111|[114|[121|[46|
	    %% Line 1099
	    'ok'
'help_options'/0 =
    %% Line 1107
    fun () ->
	do  %% Line 1108
	    apply 'set_architecture'/1
		([])
	    let <O1> =
		%% Line 1109
		apply 'expand_options'/1
		    (['o1'])
	    in  let <O2> =
		    %% Line 1110
		    apply 'expand_options'/1
			(['o2'])
		in  let <O3> =
			%% Line 1111
			apply 'expand_options'/1
			    (['o3'])
		    in  let <_cor3> =
			    %% Line 1134
			    call 'ordsets':'from_list'
				(['verbose'|['debug'|['time'|['load'|['pp_beam'|['pp_icode'|['pp_rtl'|['pp_native'|['pp_asm'|['timeout']]]]]]]]]])
			in  let <_cor4> =
				%% Line 1137
				apply 'expand_options'/1
				    (['pp_all'])
			    in  let <_cor5> =
				    %% Line 1138
				    call 'erlang':'--'
					(O1, ['o1'])
				in  let <_cor6> =
					%% Line 1139
					call 'erlang':'--'
					    (O2, O1)
				    in  let <_cor7> =
					    %% Line 1139
					    call 'erlang':'--'
						(_cor6, ['o2'])
					in  let <_cor8> =
						%% Line 1140
						call 'erlang':'--'
						    (O3, O2)
					    in  let <_cor9> =
						    %% Line 1140
						    call 'erlang':'--'
							(_cor8, ['o3'])
						in  do  %% Line 1112
							call 'io':'format'
							    ([72|[105|[80|[69|[32|[67|[111|[109|[112|[105|[108|[101|[114|[32|[79|[112|[116|[105|[111|[110|[115|[10|[32|[66|[111|[111|[108|[101|[97|[110|[45|[118|[97|[108|[117|[101|[100|[32|[111|[112|[116|[105|[111|[110|[115|[32|[103|[101|[110|[101|[114|[97|[108|[108|[121|[32|[104|[97|[118|[101|[32|[99|[111|[114|[114|[101|[115|[112|[111|[110|[100|[105|[110|[103|[32|[97|[108|[105|[97|[115|[101|[115|[32|[96|[110|[111|[95|[46|[46|[46|[39|[44|[10|[32|[97|[110|[100|[32|[99|[97|[110|[32|[97|[108|[115|[111|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[115|[32|[96|[123|[79|[112|[116|[105|[111|[110|[44|[32|[116|[114|[117|[101|[125|[39|[32|[111|[114|[32|[96|[123|[79|[112|[116|[105|[111|[110|[44|[32|[102|[97|[108|[115|[101|[125|[46|[10|[10|[32|[71|[101|[110|[101|[114|[97|[108|[32|[98|[111|[111|[108|[101|[97|[110|[32|[111|[112|[116|[105|[111|[110|[115|[58|[10|[32|[32|[32|[126|[112|[46|[10|[10|[32|[78|[111|[110|[45|[98|[111|[111|[108|[101|[97|[110|[32|[111|[112|[116|[105|[111|[110|[115|[58|[10|[32|[32|[32|[111|[35|[44|[32|[119|[104|[101|[114|[101|[32|[48|[32|[61|[60|[32|[35|[32|[61|[60|[32|[51|[58|[10|[32|[32|[32|[32|[32|[83|[101|[108|[101|[99|[116|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[32|[108|[101|[118|[101|[108|[32|[40|[116|[104|[101|[32|[100|[101|[102|[97|[117|[108|[116|[32|[105|[115|[32|[50|[41|[46|[10|[10|[32|[70|[117|[114|[116|[104|[101|[114|[32|[111|[112|[116|[105|[111|[110|[115|[32|[99|[97|[110|[32|[98|[101|[32|[102|[111|[117|[110|[100|[32|[98|[101|[108|[111|[119|[59|[32|[117|[115|[101|[32|[96|[104|[105|[112|[101|[58|[104|[101|[108|[112|[95|[111|[112|[116|[105|[111|[110|[40|[78|[97|[109|[101|[41|[39|[32|[102|[111|[114|[32|[100|[101|[116|[97|[105|[108|[115|[46|[10|[10|[32|[65|[108|[105|[97|[115|[101|[115|[58|[10|[32|[32|[32|[112|[112|[95|[97|[108|[108|[32|[61|[32|[126|[112|[44|[10|[32|[32|[32|[112|[112|[95|[115|[112|[97|[114|[99|[32|[61|[32|[112|[112|[95|[110|[97|[116|[105|[118|[101|[44|[10|[32|[32|[32|[112|[112|[95|[120|[56|[54|[32|[61|[32|[112|[112|[95|[110|[97|[116|[105|[118|[101|[44|[10|[32|[32|[32|[112|[112|[95|[97|[109|[100|[54|[52|[32|[61|[32|[112|[112|[95|[110|[97|[116|[105|[118|[101|[44|[10|[32|[32|[32|[112|[112|[95|[112|[112|[99|[32|[61|[32|[112|[112|[95|[110|[97|[116|[105|[118|[101|[44|[10|[32|[32|[32|[111|[48|[44|[10|[32|[32|[32|[111|[49|[32|[61|[32|[126|[112|[44|[10|[32|[32|[32|[111|[50|[32|[61|[32|[126|[112|[32|[43|[43|[32|[111|[49|[44|[10|[32|[32|[32|[111|[51|[32|[61|[32|[126|[112|[32|[43|[43|[32|[111|[50|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1134
																																																																																																																																																																																																																																																																																																																																																																																																					     [_cor3|%% Line 1137
																																																																																																																																																																																																																																																																																																																																																																																																						    [_cor4|%% Line 1138
																																																																																																																																																																																																																																																																																																																																																																																																							   [_cor5|%% Line 1139
																																																																																																																																																																																																																																																																																																																																																																																																								  [_cor7|%% Line 1140
																																																																																																																																																																																																																																																																																																																																																																																																									 [_cor9|[]]]]]])
							%% Line 1141
							'ok'
'option_text'/1 =
    %% Line 1148
    fun (_cor0) ->
	case _cor0 of
	  <'O'> when 'true' ->
	      [83|[112|[101|[99|[105|[102|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[32|[108|[101|[118|[101|[108|[46|[32|[85|[115|[101|[100|[32|[97|[115|[32|[111|[49|[44|[32|[111|[50|[44|[32|[111|[51|[46|[10|[32|[32|[32|[32|[65|[116|[32|[116|[104|[101|[32|[109|[111|[109|[101|[110|[116|[32|[108|[101|[118|[101|[108|[115|[32|[48|[32|[45|[32|[51|[32|[97|[114|[101|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[46|[10|[32|[32|[32|[32|[65|[108|[105|[97|[115|[101|[115|[58|[32|[39|[79|[49|[39|[44|[32|[39|[79|[50|[39|[44|[32|[79|[51|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1152
	  <'caller_save_spill_restore'> when 'true' ->
	      %% Line 1153
	      [65|[99|[116|[105|[118|[97|[116|[101|[115|[32|[99|[97|[108|[108|[101|[114|[32|[115|[97|[118|[101|[32|[114|[101|[103|[105|[115|[116|[101|[114|[32|[115|[112|[105|[108|[108|[115|[32|[97|[110|[100|[32|[114|[101|[115|[116|[111|[114|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1154
	  <'debug'> when 'true' ->
	      %% Line 1155
	      [79|[117|[116|[112|[117|[116|[115|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[100|[101|[98|[117|[103|[103|[105|[110|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[100|[117|[114|[105|[110|[103|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1156
	  <'icode_range'> when 'true' ->
	      %% Line 1157
	      [80|[101|[114|[102|[111|[114|[109|[115|[32|[105|[110|[116|[101|[103|[101|[114|[32|[114|[97|[110|[103|[101|[32|[97|[110|[97|[108|[121|[115|[105|[115|[32|[111|[110|[32|[116|[104|[101|[32|[73|[99|[111|[100|[101|[32|[108|[101|[118|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1158
	  <'icode_ssa_check'> when 'true' ->
	      %% Line 1159
	      [67|[104|[101|[99|[107|[115|[32|[119|[104|[101|[116|[104|[101|[114|[32|[73|[99|[111|[100|[101|[32|[105|[115|[32|[111|[110|[32|[83|[83|[65|[32|[102|[111|[114|[109|[32|[111|[114|[32|[110|[111|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1160
	  <'icode_ssa_copy_prop'> when 'true' ->
	      %% Line 1161
	      [80|[101|[114|[102|[111|[114|[109|[115|[32|[99|[111|[112|[121|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110|[32|[111|[110|[32|[73|[99|[111|[100|[101|[32|[83|[83|[65]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1162
	  <'icode_ssa_const_prop'> when 'true' ->
	      %% Line 1163
	      [80|[101|[114|[102|[111|[114|[109|[115|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110|[32|[111|[110|[32|[73|[99|[111|[100|[101|[32|[83|[83|[65]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1164
	  <'icode_ssa_struct_reuse'> when 'true' ->
	      %% Line 1165
	      [70|[97|[99|[116|[111|[114|[115|[32|[111|[117|[116|[32|[99|[111|[109|[109|[111|[110|[32|[116|[117|[112|[108|[101|[32|[97|[110|[100|[32|[108|[105|[115|[116|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[115|[32|[111|[110|[32|[73|[99|[111|[100|[101|[32|[83|[83|[65]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1166
	  <'icode_type'> when 'true' ->
	      [80|[101|[114|[102|[111|[114|[109|[115|[32|[116|[121|[112|[101|[32|[97|[110|[97|[108|[121|[115|[105|[115|[32|[111|[110|[32|[116|[104|[101|[32|[73|[99|[111|[100|[101|[32|[108|[101|[118|[101|[108|[10|[97|[110|[100|[32|[116|[104|[101|[110|[32|[115|[105|[109|[112|[108|[105|[102|[105|[101|[115|[32|[116|[104|[101|[32|[99|[111|[100|[101|[32|[98|[97|[115|[101|[100|[32|[111|[110|[32|[116|[104|[101|[32|[114|[101|[115|[117|[108|[116|[115|[32|[111|[102|[32|[116|[104|[105|[115|[32|[97|[110|[97|[108|[121|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1169
	  <'load'> when 'true' ->
	      %% Line 1170
	      [65|[117|[116|[111|[109|[97|[116|[105|[99|[97|[108|[108|[121|[32|[108|[111|[97|[100|[32|[116|[104|[101|[32|[112|[114|[111|[100|[117|[99|[101|[100|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101|[32|[105|[110|[116|[111|[32|[109|[101|[109|[111|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1171
	  <'peephole'> when 'true' ->
	      %% Line 1172
	      [69|[110|[97|[98|[108|[101|[115|[32|[112|[101|[101|[112|[104|[111|[108|[101|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1173
	  <'pmatch'> when 'true' ->
	      [69|[110|[97|[98|[108|[101|[115|[32|[112|[97|[116|[116|[101|[114|[110|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[119|[104|[101|[110|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[102|[114|[111|[109|[32|[67|[111|[114|[101|[59|[10|[104|[97|[115|[32|[110|[111|[32|[101|[102|[102|[101|[99|[116|[32|[119|[104|[101|[110|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[102|[114|[111|[109|[32|[66|[69|[65|[77|[32|[98|[121|[116|[101|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1176
	  <'pp_asm'> when 'true' ->
	      [68|[105|[115|[112|[108|[97|[121|[115|[32|[97|[115|[115|[101|[109|[98|[108|[121|[32|[108|[105|[115|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32|[97|[100|[100|[114|[101|[115|[115|[101|[115|[32|[97|[110|[100|[32|[98|[121|[116|[101|[99|[111|[100|[101|[10|[67|[117|[114|[114|[101|[110|[116|[108|[121|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[32|[102|[111|[114|[32|[120|[56|[54|[32|[111|[110|[108|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1179
	  <'pp_beam'> when 'true' ->
	      %% Line 1180
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[105|[110|[112|[117|[116|[32|[66|[69|[65|[77|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1181
	  <'pp_icode'> when 'true' ->
	      %% Line 1182
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[116|[101|[32|[72|[105|[80|[69|[45|[73|[67|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1183
	  <'pp_rtl'> when 'true' ->
	      %% Line 1184
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[116|[101|[32|[72|[105|[80|[69|[45|[82|[84|[76|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1185
	  <'pp_rtl_lcm'> when 'true' ->
	      %% Line 1186
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[116|[101|[32|[72|[105|[80|[69|[45|[82|[84|[76|[32|[108|[97|[122|[121|[32|[99|[111|[100|[101|[32|[109|[111|[116|[105|[111|[110|[32|[115|[101|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1187
	  <'pp_rtl_ssapre'> when 'true' ->
	      %% Line 1188
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[116|[101|[32|[72|[105|[80|[69|[45|[82|[84|[76|[32|[65|[45|[83|[83|[65|[80|[82|[69|[32|[115|[101|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1189
	  <'pp_native'> when 'true' ->
	      %% Line 1190
	      [68|[105|[115|[112|[108|[97|[121|[32|[116|[104|[101|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[40|[98|[97|[99|[107|[45|[101|[110|[100|[32|[115|[112|[101|[99|[105|[102|[105|[99|[41|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1191
	  <'regalloc'> when 'true' ->
	      [83|[101|[108|[101|[99|[116|[32|[114|[101|[103|[105|[115|[116|[101|[114|[32|[97|[108|[108|[111|[99|[97|[116|[105|[111|[110|[32|[97|[108|[103|[111|[114|[105|[116|[104|[109|[46|[32|[85|[115|[101|[100|[32|[97|[115|[32|[123|[114|[101|[103|[97|[108|[108|[111|[99|[44|[32|[77|[69|[84|[72|[79|[68|[125|[46|[10|[32|[32|[67|[117|[114|[114|[101|[110|[116|[108|[121|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[32|[109|[101|[116|[104|[111|[100|[115|[58|[10|[32|[32|[32|[32|[110|[97|[105|[118|[101|[32|[45|[32|[115|[112|[105|[108|[108|[115|[32|[101|[118|[101|[114|[121|[116|[104|[105|[110|[103|[32|[40|[102|[111|[114|[32|[100|[101|[98|[117|[103|[103|[105|[110|[103|[32|[97|[110|[100|[32|[116|[101|[115|[116|[105|[110|[103|[41|[10|[32|[32|[32|[32|[108|[105|[110|[101|[97|[114|[95|[115|[99|[97|[110|[32|[45|[32|[102|[97|[115|[116|[59|[32|[110|[111|[116|[32|[115|[111|[32|[103|[111|[111|[100|[32|[105|[102|[32|[102|[101|[119|[32|[114|[101|[103|[105|[115|[116|[101|[114|[115|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[10|[32|[32|[32|[32|[103|[114|[97|[112|[104|[95|[99|[111|[108|[111|[114|[32|[45|[32|[115|[108|[111|[119|[44|[32|[98|[117|[116|[32|[103|[105|[118|[101|[115|[32|[79|[75|[32|[112|[101|[114|[102|[111|[114|[109|[97|[110|[99|[101|[10|[32|[32|[32|[32|[99|[111|[97|[108|[101|[115|[99|[105|[110|[103|[32|[45|[32|[115|[108|[111|[119|[101|[114|[44|[32|[116|[114|[105|[101|[115|[32|[104|[97|[114|[100|[32|[116|[111|[32|[117|[115|[101|[32|[114|[101|[103|[105|[115|[116|[101|[114|[115|[10|[32|[32|[32|[32|[111|[112|[116|[105|[109|[105|[115|[116|[105|[99|[32|[45|[32|[97|[110|[111|[116|[104|[101|[114|[32|[118|[97|[114|[105|[97|[110|[116|[32|[111|[102|[32|[97|[32|[99|[111|[97|[108|[101|[115|[99|[105|[110|[103|[32|[97|[108|[108|[111|[99|[97|[116|[111|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1199
	  <'remove_comments'> when 'true' ->
	      %% Line 1200
	      [83|[116|[114|[105|[112|[32|[99|[111|[109|[109|[101|[110|[116|[115|[32|[102|[114|[111|[109|[32|[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[116|[101|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1201
	  <'rtl_ssa'> when 'true' ->
	      %% Line 1202
	      [80|[101|[114|[102|[111|[114|[109|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110|[32|[111|[110|[32|[116|[104|[101|[32|[82|[84|[76|[32|[108|[101|[118|[101|[108|[32|[45|[45|[32|[100|[101|[102|[97|[117|[108|[116|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[97|[116|[32|[79|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1203
	  <'rtl_ssa_const_prop'> when 'true' ->
	      %% Line 1204
	      [80|[101|[114|[102|[111|[114|[109|[115|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110|[32|[111|[110|[32|[82|[84|[76|[32|[83|[83|[65]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1205
	  <'rtl_lcm'> when 'true' ->
	      %% Line 1206
	      [80|[101|[114|[102|[111|[114|[109|[32|[76|[97|[122|[121|[32|[67|[111|[100|[101|[32|[77|[111|[116|[105|[111|[110|[32|[111|[110|[32|[82|[84|[76]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1207
	  <'rtl_ssapre'> when 'true' ->
	      %% Line 1208
	      [80|[101|[114|[102|[111|[114|[109|[32|[65|[45|[83|[83|[65|[80|[82|[69|[32|[111|[110|[32|[82|[84|[76]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1209
	  <'time'> when 'true' ->
	      [82|[101|[112|[111|[114|[116|[115|[32|[116|[104|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[116|[105|[109|[101|[115|[32|[102|[111|[114|[32|[116|[104|[101|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[115|[116|[97|[103|[101|[115|[10|[111|[102|[32|[116|[104|[101|[32|[99|[111|[109|[112|[105|[108|[101|[114|[46|[10|[32|[32|[32|[32|[123|[116|[105|[109|[101|[44|[32|[77|[111|[100|[117|[108|[101|[125|[32|[32|[32|[32|[32|[32|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[105|[109|[105|[110|[103|[115|[32|[102|[111|[114|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[77|[111|[100|[117|[108|[101|[46|[10|[32|[32|[32|[32|[123|[116|[105|[109|[101|[44|[32|[91|[77|[49|[44|[32|[77|[50|[44|[32|[77|[51|[93|[125|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[105|[109|[105|[110|[103|[115|[32|[102|[111|[114|[32|[116|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[46|[10|[32|[32|[32|[32|[123|[116|[105|[109|[101|[44|[32|[97|[108|[108|[125|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[105|[109|[105|[110|[103|[115|[32|[97|[108|[108|[32|[109|[111|[100|[117|[108|[101|[115|[46|[10|[32|[32|[32|[32|[116|[105|[109|[101|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[105|[109|[105|[110|[103|[115|[32|[102|[111|[114|[32|[116|[104|[101|[32|[109|[97|[105|[110|[32|[109|[111|[100|[117|[108|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1216
	  <'timeout'> when 'true' ->
	      [83|[112|[101|[99|[105|[102|[121|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[116|[105|[109|[101|[32|[108|[105|[109|[105|[116|[32|[105|[110|[32|[109|[115|[46|[32|[85|[115|[101|[100|[32|[97|[115|[32|[123|[116|[105|[109|[101|[111|[117|[116|[44|[32|[76|[73|[77|[73|[84|[125|[46|[10|[32|[32|[32|[32|[84|[104|[101|[32|[108|[105|[109|[105|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[110|[111|[110|[45|[110|[101|[103|[97|[116|[105|[118|[101|[32|[105|[110|[116|[101|[103|[101|[114|[32|[111|[114|[32|[116|[104|[101|[32|[97|[116|[111|[109|[32|[39|[105|[110|[102|[105|[110|[105|[116|[121|[39|[46|[10|[32|[32|[32|[32|[84|[104|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[100|[101|[102|[97|[117|[108|[116|[32|[108|[105|[109|[105|[116|[32|[105|[115|[32|[49|[53|[32|[109|[105|[110|[117|[116|[101|[115|[32|[40|[57|[48|[48|[48|[48|[48|[32|[109|[115|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1220
	  <'use_indexing'> when 'true' ->
	      %% Line 1221
	      [85|[115|[101|[32|[105|[110|[100|[101|[120|[105|[110|[103|[32|[102|[111|[114|[32|[109|[117|[108|[116|[105|[112|[108|[101|[45|[99|[104|[111|[105|[99|[101|[32|[98|[114|[97|[110|[99|[104|[32|[115|[101|[108|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1222
	  <'use_callgraph'> when 'true' ->
	      [67|[111|[109|[112|[105|[108|[101|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[105|[110|[32|[97|[32|[109|[111|[100|[117|[108|[101|[32|[97|[99|[99|[111|[114|[100|[105|[110|[103|[32|[116|[111|[32|[97|[32|[114|[101|[118|[101|[114|[115|[101|[100|[32|[116|[111|[112|[111|[108|[111|[103|[105|[99|[97|[108|[10|[115|[111|[114|[116|[101|[100|[32|[111|[114|[100|[101|[114|[32|[116|[111|[32|[103|[97|[105|[110|[32|[109|[111|[114|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[119|[104|[101|[110|[32|[117|[115|[105|[110|[103|[32|[97|[32|[112|[101|[114|[115|[105|[115|[116|[101|[110|[116|[32|[108|[111|[111|[107|[117|[112|[10|[116|[97|[98|[108|[101|[32|[102|[111|[114|[32|[115|[116|[111|[114|[105|[110|[103|[32|[105|[110|[116|[114|[97|[45|[109|[111|[100|[117|[108|[97|[114|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1226
	  <'verbose'> when 'true' ->
	      %% Line 1227
	      [79|[117|[116|[112|[117|[116|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[97|[98|[111|[117|[116|[32|[119|[104|[97|[116|[32|[105|[115|[32|[98|[101|[105|[110|[103|[32|[100|[111|[110|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1228
	  <Opt>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1229
	      []
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'option_text',1}}] )
	    -| ['compiler_generated'] )
	end
'help_option'/1 =
    %% Line 1234
    fun (_cor0) ->
	do  %% Line 1235
	    apply 'set_architecture'/1
		([])
	    do  %% Line 1236
		case apply 'expand_options'/1
			 ([_cor0|[]]) of
		  %% Line 1237
		  <[_cor9|[]]>
		      when call 'erlang':'=:='
			    (_cor9,
			     _cor0) ->
		      let <_cor2> =
			  %% Line 1238
			  case <> of
			    <>
				when call 'erlang':'is_atom'
				      (_cor0) ->
				_cor0
			    %% Line 1239
			    <>
				when try
				      let <_cor1> =
					  call 'erlang':'tuple_size'
					      (_cor0)
				      in  call 'erlang':'=:='
					      (_cor1, 2)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				call 'erlang':'element'
				    (1, _cor0)
			    ( <> when 'true' ->
				  primop 'match_fail'
				      ('if_clause')
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1241
			  case apply 'option_text'/1
				   (_cor2) of
			    %% Line 1242
			    <[]> when 'true' ->
				let <_cor4> =
				    %% Line 1243
				    apply 'opt_keys'/0
					()
				in  %% Line 1243
				    case call 'lists':'member'
					     (_cor2, _cor4) of
				      %% Line 1244
				      <'true'> when 'true' ->
					  %% Line 1245
					  call 'io':'format'
					      ([126|[119|[32|[45|[32|[83|[111|[114|[114|[121|[44|[32|[116|[104|[105|[115|[32|[111|[112|[116|[105|[111|[110|[32|[105|[115|[32|[110|[111|[116|[32|[100|[111|[99|[117|[109|[101|[110|[116|[101|[100|[32|[121|[101|[116|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1246
																																							    [_cor2|[]])
				      %% Line 1247
				      <_cor10> when 'true' ->
					  %% Line 1248
					  call 'io':'format'
					      ([85|[110|[107|[110|[111|[119|[110|[32|[111|[112|[116|[105|[111|[110|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]], [_cor2|[]])
				    end
			    %% Line 1250
			    <Txt> when 'true' ->
				%% Line 1251
				call 'io':'fwrite'
				    ([126|[119|[32|[45|[32|[126|[115|[10]]]]]]]], [_cor2|[Txt|[]]])
			  end
		  %% Line 1253
		  <Opts> when 'true' ->
		      %% Line 1254
		      call 'io':'fwrite'
			  ([84|[104|[105|[115|[32|[105|[115|[32|[97|[110|[32|[97|[108|[105|[97|[115|[32|[102|[111|[114|[58|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]], [Opts|[]])
		end
		%% Line 1256
		'ok'
'help_debug_options'/0 =
    %% Line 1262
    fun () ->
	do  %% Line 1263
	    call 'io':'format'
		([72|[105|[80|[69|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[100|[101|[98|[117|[103|[32|[111|[112|[116|[105|[111|[110|[115|[58|[10|[32|[32|[77|[105|[103|[104|[116|[32|[114|[101|[113|[117|[105|[114|[101|[32|[116|[104|[97|[116|[32|[115|[111|[109|[101|[32|[109|[111|[100|[117|[108|[101|[115|[32|[104|[97|[118|[101|[32|[98|[101|[101|[110|[32|[99|[111|[109|[112|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[100|[101|[98|[117|[103|[32|[102|[108|[97|[103|[46|[10|[32|[32|[32|[32|[114|[116|[108|[95|[115|[104|[111|[119|[95|[116|[114|[97|[110|[115|[108|[97|[116|[105|[111|[110|[32|[45|[32|[80|[114|[105|[110|[116|[115|[32|[101|[97|[99|[104|[32|[115|[116|[101|[112|[32|[105|[110|[32|[116|[104|[101|[10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[116|[114|[97|[110|[115|[108|[97|[116|[105|[111|[110|[32|[102|[114|[111|[109|[32|[73|[99|[111|[100|[101|[32|[116|[111|[32|[82|[84|[76|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1268
																																																																																																																																																					  [])
	    %% Line 1269
	    'ok'
'hipe_timers'/0 =
    %% Line 1271
    fun () ->
	%% Line 1272
	['time_ra']
'opt_keys'/0 =
    %% Line 1293
    fun () ->
	%% Line 1294
	['binary_opt'|['bitlevel_binaries'|['caller_save_spill_restore'|['concurrent_comp'|['core'|['core_transform'|['counters'|['count_instrs'|['count_spills'|['count_temps'|['debug'|['get_called_modules'|['split_arith'|['split_arith_unsafe'|['icode_inline_bifs'|['icode_ssa_check'|['icode_ssa_copy_prop'|['icode_ssa_const_prop'|['icode_ssa_struct_reuse'|['icode_type'|['icode_range'|['icode_multret'|['inline_fp'|['ls_order'|['load'|['measure_regalloc'|['peephole'|['pmatch'|['pp_asm'|['pp_beam'|['pp_icode'|['pp_icode_ssa'|['pp_icode_split_arith'|['pp_opt_icode'|['pp_range_icode'|['pp_typed_icode'|['pp_icode_liveness'|['pp_native'|['pp_rtl'|['pp_rtl_liveness'|['pp_rtl_ssa'|['pp_rtl_lcm'|['pp_rtl_ssapre'|['pp_rtl_linear'|['regalloc'|['remove_comments'|['rtl_ssa'|['rtl_ssa_const_prop'|['rtl_lcm'|['rtl_ssapre'|['rtl_show_translation'|['spillmin_color'|['target'|['time'|['timeout'|['timeregalloc'|['timers'|['to_rtl'|['to_llvm'|['llvm_save_temps'|['llvm_llc'|['llvm_opt'|['use_indexing'|['use_inline_atom_search'|['use_callgraph'|['use_clusters'|['use_jumptable'|['verbose'|['x87']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'o1_opts'/0 =
    %% Line 1369
    fun () ->
	%% Line 1371
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 1372
	  <'ultrasparc'> when 'true' ->
	      ['inline_fp'|['pmatch'|['peephole']]]
	  %% Line 1374
	  <'powerpc'> when 'true' ->
	      ['inline_fp'|['pmatch'|['peephole']]]
	  %% Line 1376
	  <'ppc64'> when 'true' ->
	      ['inline_fp'|['pmatch'|['peephole']]]
	  %% Line 1378
	  <'arm'> when 'true' ->
	      ['pmatch'|['peephole']]
	  %% Line 1380
	  <'x86'> when 'true' ->
	      %% Line 1381
	      ['x87'|['inline_fp'|['pmatch'|['peephole']]]]
	  %% Line 1382
	  <'amd64'> when 'true' ->
	      ['inline_fp'|['pmatch'|['peephole']]]
	  %% Line 1384
	  <Arch> when 'true' ->
	      do  %% Line 1385
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'executing_on_an_unsupported_architecture',Arch}|['hipe'|[1385]]])
		  %% Line 1385
		  call 'erlang':'error'
		      ({'hipe',1385,{'executing_on_an_unsupported_architecture',Arch}})
	end
'o2_opts'/0 =
    %% Line 1388
    fun () ->
	let <_cor0> =
	    %% Line 1393
	    apply 'o1_opts'/0
		()
	in  let <Common> =
		%% Line 1389
		['icode_ssa_const_prop'|['icode_ssa_copy_prop'|%% Line 1390
							       ['icode_type'|['icode_inline_bifs'|['rtl_lcm'|%% Line 1391
													     ['rtl_ssa'|['rtl_ssa_const_prop'|%% Line 1392
																	      ['spillmin_color'|['use_indexing'|['remove_comments'|%% Line 1393
																								   ['concurrent_comp'|['binary_opt'|_cor0]]]]]]]]]]]]
	    in  %% Line 1394
		case call 'erlang':'get'
			 ('hipe_target_arch') of
		  %% Line 1395
		  <'ultrasparc'> when 'true' ->
		      %% Line 1396
		      Common
		  %% Line 1397
		  <'powerpc'> when 'true' ->
		      %% Line 1398
		      Common
		  %% Line 1399
		  <'ppc64'> when 'true' ->
		      %% Line 1400
		      Common
		  %% Line 1401
		  <'arm'> when 'true' ->
		      %% Line 1402
		      Common
		  %% Line 1403
		  <'x86'> when 'true' ->
		      %% Line 1404
		      Common
		  %% Line 1406
		  <'amd64'> when 'true' ->
		      %% Line 1407
		      ['icode_range'|Common]
		  %% Line 1408
		  <Arch> when 'true' ->
		      do  %% Line 1409
			  call 'io':'format'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'executing_on_an_unsupported_architecture',Arch}|['hipe'|[1409]]])
			  %% Line 1409
			  call 'erlang':'error'
			      ({'hipe',1409,{'executing_on_an_unsupported_architecture',Arch}})
		end
'o3_opts'/0 =
    %% Line 1412
    fun () ->
	let <_cor0> =
	    %% Line 1413
	    apply 'o2_opts'/0
		()
	in  let <Common> =
		%% Line 1413
		['icode_range'|[{'regalloc','coalescing'}|_cor0]]
	    in  %% Line 1414
		case call 'erlang':'get'
			 ('hipe_target_arch') of
		  %% Line 1415
		  <'ultrasparc'> when 'true' ->
		      %% Line 1416
		      Common
		  %% Line 1417
		  <'powerpc'> when 'true' ->
		      %% Line 1418
		      Common
		  %% Line 1419
		  <'ppc64'> when 'true' ->
		      %% Line 1420
		      Common
		  %% Line 1421
		  <'arm'> when 'true' ->
		      %% Line 1422
		      Common
		  %% Line 1423
		  <'x86'> when 'true' ->
		      %% Line 1424
		      Common
		  %% Line 1425
		  <'amd64'> when 'true' ->
		      %% Line 1426
		      Common
		  %% Line 1427
		  <Arch> when 'true' ->
		      do  %% Line 1428
			  call 'io':'format'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'executing_on_an_unsupported_architecture',Arch}|['hipe'|[1428]]])
			  %% Line 1428
			  call 'erlang':'error'
			      ({'hipe',1428,{'executing_on_an_unsupported_architecture',Arch}})
		end
'opt_negations'/0 =
    %% Line 1435
    fun () ->
	%% Line 1436
	[{'no_binary_opt','binary_opt'}|[{'no_bitlevel_binaries','bitlevel_binaries'}|[{'no_core','core'}|[{'no_debug','debug'}|[{'no_get_called_modules','get_called_modules'}|[{'no_split_arith','split_arith'}|[{'no_concurrent_comp','concurrent_comp'}|[{'no_icode_inline_bifs','icode_inline_bifs'}|[{'no_icode_range','icode_range'}|[{'no_icode_split_arith','icode_split_arith'}|[{'no_icode_ssa_check','icode_ssa_check'}|[{'no_icode_ssa_copy_prop','icode_ssa_copy_prop'}|[{'no_icode_ssa_const_prop','icode_ssa_const_prop'}|[{'no_icode_ssa_struct_reuse','icode_ssa_struct_reuse'}|[{'no_icode_type','icode_type'}|[{'no_inline_fp','inline_fp'}|[{'no_load','load'}|[{'no_peephole','peephole'}|[{'no_pmatch','pmatch'}|[{'no_pp_beam','pp_beam'}|[{'no_pp_icode','pp_icode'}|[{'no_pp_icode_ssa','pp_icode_ssa'}|[{'no_pp_opt_icode','pp_opt_icode'}|[{'no_pp_typed_icode','pp_typed_icode'}|[{'no_pp_rtl','pp_rtl'}|[{'no_pp_native','pp_native'}|[{'no_pp_rtl_lcm','pp_rtl_lcm'}|[{'no_pp_rtl_ssapre','pp_rtl_ssapre'}|[{'no_remove_comments','remove_comments'}|[{'no_rtl_ssa','rtl_ssa'}|[{'no_rtl_ssa_const_prop','rtl_ssa_const_prop'}|[{'no_rtl_lcm','rtl_lcm'}|[{'no_rtl_ssapre','rtl_ssapre'}|[{'no_rtl_show_translation','rtl_show_translation'}|[{'no_time','time'}|[{'no_use_callgraph','use_callgraph'}|[{'no_use_clusters','use_clusters'}|[{'no_use_inline_atom_search','use_inline_atom_search'}|[{'no_use_indexing','use_indexing'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'opt_aliases'/0 =
    %% Line 1479
    fun () ->
	%% Line 1480
	[{'O0','o0'}|[{'O1','o1'}|[{'O2','o2'}|[{'O3','o3'}|[{'pp_sparc','pp_native'}|[{'pp_x86','pp_native'}|[{'pp_amd64','pp_native'}|[{'pp_ppc','pp_native'}]]]]]]]]
'opt_basic_expansions'/0 =
    %% Line 1489
    fun () ->
	%% Line 1490
	[{'pp_all',['pp_beam'|['pp_icode'|['pp_rtl'|['pp_native']]]]}]
'opt_expansions'/0 =
    %% Line 1492
    fun () ->
	let <_cor0> =
	    %% Line 1493
	    apply 'o1_opts'/0
		()
	in  let <_cor1> =
		%% Line 1494
		apply 'o2_opts'/0
		    ()
	    in  let <_cor2> =
		    %% Line 1495
		    apply 'o3_opts'/0
			()
		in  let <_cor3> =
			%% Line 1496
			apply 'llvm_opts'/1
			    ('o3')
		    in  let <_cor4> =
			    %% Line 1497
			    apply 'llvm_opts'/1
				('o0')
			in  let <_cor5> =
				%% Line 1498
				apply 'llvm_opts'/1
				    ('o1')
			    in  let <_cor6> =
				    %% Line 1499
				    apply 'llvm_opts'/1
					('o2')
				in  let <_cor7> =
					%% Line 1500
					apply 'llvm_opts'/1
					    ('o3')
				    in  let <_cor9> =
					    %% Line 1502
					    case call 'erlang':'get'
						     ('hipe_target_arch') of
					      %% Line 1503
					      <'x86'> when 'true' ->
						  ['x87'|['inline_fp']]
					      %% Line 1504
					      <_cor10> when 'true' ->
						  ['inline_fp']
					    end
					in  %% Line 1493
					    [{'o1',_cor0}|%% Line 1494
							  [{'o2',_cor1}|%% Line 1495
									[{'o3',_cor2}|%% Line 1496
										      [{'to_llvm',_cor3}|%% Line 1497
													 [{{'to_llvm','o0'},_cor4}|%% Line 1498
																   [{{'to_llvm','o1'},_cor5}|%% Line 1499
																			     [{{'to_llvm','o2'},_cor6}|%% Line 1500
																						       [{{'to_llvm','o3'},_cor7}|%% Line 1501
																										 [{'x87',['x87'|['inline_fp']]}|%% Line 1502
																														[{'inline_fp',_cor9}|%% Line 1504
																																     []]]]]]]]]]]
'llvm_opts'/1 =
    %% Line 1506
    fun (_cor0) ->
	%% Line 1507
	['to_llvm'|[{'llvm_opt',_cor0}|[{'llvm_llc',_cor0}|[]]]]
'expand_basic_options'/1 =
    %% Line 1514
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1515
	    apply 'opt_negations'/0
		()
	in  let <_cor2> =
		%% Line 1516
		apply 'opt_aliases'/0
		    ()
	    in  let <_cor3> =
		    %% Line 1517
		    apply 'opt_basic_expansions'/0
			()
		in  %% Line 1515
		    call 'proplists':'normalize'
			(_cor0, [{'negations',_cor1}|%% Line 1516
						     [{'aliases',_cor2}|%% Line 1517
									[{'expand',_cor3}|[]]]])
'expand_kt2'/1 =
    %% Line 1521
    fun (_cor0) ->
	%% Line 1522
	call 'proplists':'normalize'
	    (_cor0, [{'expand',[{'kt2_type',[{'use_callgraph','fixpoint'}|['core'|[{'core_transform','cerl_typean'}]]]}]}])
'expand_options'/1 =
    %% Line 1533
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1534
	    apply 'opt_negations'/0
		()
	in  let <_cor2> =
		%% Line 1535
		apply 'opt_aliases'/0
		    ()
	    in  let <_cor3> =
		    %% Line 1536
		    apply 'opt_basic_expansions'/0
			()
		in  let <_cor4> =
			%% Line 1537
			apply 'opt_expansions'/0
			    ()
		    in  %% Line 1534
			call 'proplists':'normalize'
			    (_cor0, [{'negations',_cor1}|%% Line 1535
							 [{'aliases',_cor2}|%% Line 1536
									    [{'expand',_cor3}|%% Line 1537
											      [{'expand',_cor4}|[]]]]])
'check_options'/1 =
    %% Line 1541
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1542
	    apply 'opt_keys'/0
		()
	in  let <Keys> =
		%% Line 1542
		call 'ordsets':'from_list'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1543
		    call 'proplists':'get_keys'
			(_cor0)
		in  let <Used> =
			%% Line 1543
			call 'ordsets':'from_list'
			    (_cor3)
		    in  %% Line 1544
			case call 'ordsets':'subtract'
				 (Used, Keys) of
			  %% Line 1545
			  <[]> when 'true' ->
			      %% Line 1546
			      'ok'
			  %% Line 1547
			  <L> when 'true' ->
			      do  %% Line 1548
				  call 'io':'format'
				      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[85|[110|[107|[110|[111|[119|[110|[32|[111|[112|[116|[105|[111|[110|[115|[58|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe'|[1548|[L|[]]]])
				  %% Line 1549
				  'ok'
			end
'llvm_support_available'/0 =
    %% Line 1554
    fun () ->
	let <_cor0> =
	    %% Line 1555
	    apply 'get_llvm_version'/0
		()
	in  %% Line 1555
	    call 'erlang':'>='
		(_cor0, 3.39999999999999991118e+00)
'get_llvm_version'/0 =
    %% Line 1557
    fun () ->
	let <OptStr> =
	    %% Line 1558
	    call 'os':'cmd'
		([111|[112|[116|[32|[45|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]])
	in  %% Line 1560
	    case call 'string':'str'
		     (OptStr, [76|[76|[86|[77|[32|[118|[101|[114|[115|[105|[111|[110|[32]]]]]]]]]]]]]) of
	      %% Line 1561
	      <0> when 'true' ->
		  %% Line 1562
		  0.00000000000000000000e+00
	      %% Line 1563
	      <S> when 'true' ->
		  let <_cor3> =
		      %% Line 1564
		      call 'erlang':'+'
			  (S, 13)
		  in  let <_cor4> =
			  %% Line 1564
			  call 'string':'sub_string'
			      (OptStr, _cor3)
		      in  %% Line 1564
			  case call 'string':'to_float'
				   (_cor4) of
			    %% Line 1565
			    <{'error',_cor7}> when 'true' ->
				0.00000000000000000000e+00
			    %% Line 1566
			    <{Float,_cor8}> when 'true' ->
				Float
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe', _cor0)
end