module 'hipe_icode_cfg' ['bb'/2,
			 'bb_add'/3,
			 'cfg_to_linear'/1,
			 'closure_arity'/1,
			 'is_closure'/1,
			 'is_visited'/2,
			 'labels'/1,
			 'linear_to_cfg'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'none_visited'/0,
			 'params'/1,
			 'params_update'/2,
			 'postorder'/1,
			 'pp'/1,
			 'pp'/2,
			 'pred'/2,
			 'redirect'/4,
			 'remove_trivial_bbs'/1,
			 'remove_unreachable_code'/1,
			 'reverse_postorder'/1,
			 'start_label'/1,
			 'start_label_update'/2,
			 'succ'/2,
			 'visit'/2]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','bb'},[{'typed_record_field',{'record_field',28,{'atom',28,'code'},{'nil',28}},{'type',28,'list',[{'var',28,'_'}]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'bb',{'type',30,'record',[{'atom',30,'bb'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'start_label',1},[{'type',141,'fun',[{'type',141,'product',[{'type',141,'cfg',[]}]}|[{'type',141,'cfg_lbl',[]}]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'start_label_update',2},[{'type',145,'fun',[{'type',145,'product',[{'type',145,'cfg',[]}|[{'type',145,'cfg_lbl',[]}]]}|[{'type',145,'cfg',[]}]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'function',1},[{'type',150,'fun',[{'type',150,'product',[{'type',150,'cfg',[]}]}|[{'type',150,'mfa',[]}]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'is_closure',1},[{'type',153,'fun',[{'type',153,'product',[{'type',153,'cfg',[]}]}|[{'type',153,'boolean',[]}]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'is_leaf',1},[{'type',156,'fun',[{'type',156,'product',[{'type',156,'cfg',[]}]}|[{'type',156,'boolean',[]}]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'update_data',2},[{'type',171,'fun',[{'type',171,'product',[{'type',171,'cfg',[]}|[{'type',171,'cfg_data',[]}]]}|[{'type',171,'cfg',[]}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'closure_arity',1},[{'type',187,'fun',[{'type',187,'product',[{'type',187,'cfg',[]}]}|[{'type',187,'arity',[]}]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'closure_arity_update',2},[{'type',192,'fun',[{'type',192,'product',[{'type',192,'cfg',[]}|[{'type',192,'arity',[]}]]}|[{'type',192,'cfg',[]}]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'other_entrypoints',1},[{'type',216,'fun',[{'type',216,'product',[{'type',216,'cfg',[]}]}|[{'type',216,'list',[{'type',216,'cfg_lbl',[]}]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'remove_duplicates',1},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'list',[{'type',239,'cfg_lbl',[]}]}]}|[{'type',239,'list',[{'type',239,'cfg_lbl',[]}]}]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'remove_duplicates',2},[{'type',243,'fun',[{'type',243,'product',[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}|[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}]]}|[{'type',243,'list',[{'type',243,'cfg_lbl',[]}]}]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'none_visited',0},[{'type',537,'fun',[{'type',537,'product',[]}|[{'remote_type',537,[{'atom',537,'gb_sets'}|[{'atom',537,'set'}|[[]]]]}]]}]}],
		%% Line 661
		'spec' =
		    %% Line 661
		    [{{'remove_trivial_bbs',1},[{'type',661,'fun',[{'type',661,'product',[{'type',661,'cfg',[]}]}|[{'type',661,'cfg',[]}]]}]}],
		%% Line 818
		'spec' =
		    %% Line 818
		    [{{'rewrite_trivial_branches',1},[{'type',818,'fun',[{'type',818,'product',[{'type',818,'cfg',[]}]}|[{'type',818,'cfg',[]}]]}]}],
		%% Line 925
		'spec' =
		    %% Line 925
		    [{{'remove_unreachable_code',1},[{'type',925,'fun',[{'type',925,'product',[{'type',925,'cfg',[]}]}|[{'type',925,'cfg',[]}]]}]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'labels',1},[{'type',53,'fun',[{'type',53,'product',[{'type',53,'cfg',[]}]}|[{'type',53,'list',[{'type',53,'icode_lbl',[]}]}]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'postorder',1},[{'type',54,'fun',[{'type',54,'product',[{'type',54,'cfg',[]}]}|[{'type',54,'list',[{'type',54,'icode_lbl',[]}]}]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'reverse_postorder',1},[{'type',55,'fun',[{'type',55,'product',[{'type',55,'cfg',[]}]}|[{'type',55,'list',[{'type',55,'icode_lbl',[]}]}]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'is_visited',2},[{'type',57,'fun',[{'type',57,'product',[{'type',57,'icode_lbl',[]}|[{'remote_type',57,[{'atom',57,'gb_sets'}|[{'atom',57,'set'}|[[]]]]}]]}|[{'type',57,'boolean',[]}]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'visit',2},[{'type',58,'fun',[{'type',58,'product',[{'type',58,'icode_lbl',[]}|[{'remote_type',58,[{'atom',58,'gb_sets'}|[{'atom',58,'set'}|[[]]]]}]]}|[{'remote_type',58,[{'atom',58,'gb_sets'}|[{'atom',58,'set'}|[[]]]]}]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'bb',2},[{'type',60,'fun',[{'type',60,'product',[{'type',60,'cfg',[]}|[{'type',60,'icode_lbl',[]}]]}|[{'type',60,'union',[{'atom',60,'not_found'}|[{'type',60,'bb',[]}]]}]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'bb_add',3},[{'type',61,'fun',[{'type',61,'product',[{'type',61,'cfg',[]}|[{'type',61,'icode_lbl',[]}|[{'type',61,'bb',[]}]]]}|[{'type',61,'cfg',[]}]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'pred',2},[{'type',62,'fun',[{'type',62,'product',[{'type',62,'cfg',[]}|[{'type',62,'icode_lbl',[]}]]}|[{'type',62,'list',[{'type',62,'icode_lbl',[]}]}]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'succ',2},[{'type',63,'fun',[{'type',63,'product',[{'type',63,'cfg',[]}|[{'type',63,'icode_lbl',[]}]]}|[{'type',63,'list',[{'type',63,'icode_lbl',[]}]}]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'redirect',4},[{'type',64,'fun',[{'type',64,'product',[{'type',64,'cfg',[]}|[{'type',64,'icode_lbl',[]}|[{'type',64,'icode_lbl',[]}|[{'type',64,'icode_lbl',[]}]]]]}|[{'type',64,'cfg',[]}]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'linear_to_cfg',1},[{'type',71,'fun',[{'type',71,'product',[{'type',71,'record',[{'atom',71,'icode'}]}]}|[{'type',71,'cfg',[]}]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'is_label',1},[{'type',102,'fun',[{'type',102,'product',[{'type',102,'icode_instr',[]}]}|[{'type',102,'boolean',[]}]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'is_comment',1},[{'type',122,'fun',[{'type',122,'product',[{'type',122,'icode_instr',[]}]}|[{'type',122,'boolean',[]}]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'is_goto',1},[{'type',127,'fun',[{'type',127,'product',[{'type',127,'icode_instr',[]}]}|[{'type',127,'boolean',[]}]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'is_branch',1},[{'type',131,'fun',[{'type',131,'product',[{'type',131,'icode_instr',[]}]}|[{'type',131,'boolean',[]}]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'is_pure_branch',1},[{'type',135,'fun',[{'type',135,'product',[{'type',135,'icode_instr',[]}]}|[{'type',135,'boolean',[]}]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'is_phi',1},[{'type',157,'fun',[{'type',157,'product',[{'type',157,'icode_instr',[]}]}|[{'type',157,'boolean',[]}]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'pp',1},[{'type',175,'fun',[{'type',175,'product',[{'type',175,'cfg',[]}]}|[{'atom',175,'ok'}]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'pp',2},[{'type',180,'fun',[{'type',180,'product',[{'remote_type',180,[{'atom',180,'io'}|[{'atom',180,'device'}|[[]]]]}|[{'type',180,'cfg',[]}]]}|[{'atom',180,'ok'}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'cfg_to_linear',1},[{'type',187,'fun',[{'type',187,'product',[{'type',187,'cfg',[]}]}|[{'type',187,'record',[{'atom',187,'icode'}]}]]}]}]]
'start_label'/1 =
    %% Line 142
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec0
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_label_update'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	%% Line 147
	( case _cor1 of
	    ( <( {'cfg',_cor13,_rec2,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 148
		  case _rec2 of
		    <{'cfg_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(3, _rec2, _cor0)
			in  call 'erlang':'setelement'
				(3, _cor1, _cor7)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','cfg_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'function'/1 =
    %% Line 151
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec7,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec7 of
		      ( <( {'cfg_info',_rec6,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec6
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_closure'/1 =
    %% Line 154
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec9,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec9 of
		      ( <( {'cfg_info',_cor8,_cor9,_rec8,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec8
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_leaf'/1 =
    %% Line 157
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec11,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec11 of
		      ( <( {'cfg_info',_cor8,_cor9,_cor10,_cor11,_rec10,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec10
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'params'/1 =
    %% Line 177
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec15,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec15 of
		      ( <( {'cfg_info',_cor8,_cor9,_cor10,_cor11,_cor12,_rec14,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec14
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'params_update'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	%% Line 182
	( case _cor1 of
	    ( <( {'cfg',_cor13,_rec16,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 183
		  case _rec16 of
		    <{'cfg_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(7, _rec16, _cor0)
			in  call 'erlang':'setelement'
				(3, _cor1, _cor7)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','cfg_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'closure_arity'/1 =
    %% Line 188
    fun (_cor0) ->
	%% Line 189
	( case _cor0 of
	    ( <( {'cfg',_cor6,_rec20,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 190
		  ( case _rec20 of
		      ( <( {'cfg_info',_cor9,_cor10,_cor11,_rec21,_cor12,_cor13,_cor14}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec21
			-| ['compiler_generated'] )
		      ( <_cor15> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'closure_arity_update'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	%% Line 194
	( case _cor1 of
	    ( <( {'cfg',_cor13,_rec22,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 195
		  case _rec22 of
		    <{'cfg_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(5, _rec22, _cor0)
			in  call 'erlang':'setelement'
				(3, _cor1, _cor7)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','cfg_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'info'/1 =
    %% Line 203
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec27,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec27 of
		      ( <( {'cfg_info',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec26}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec26
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'info_update'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	%% Line 209
	( case _cor1 of
	    ( <( {'cfg',_cor13,_rec28,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 210
		  case _rec28 of
		    <{'cfg_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(8, _rec28, _cor0)
			in  call 'erlang':'setelement'
				(3, _cor1, _cor7)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','cfg_info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bb'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	( case _cor1 of
	    ( <( {'cfg',_rec32,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_6002> =
		      %% Line 230
		      call 'gb_trees':'lookup'
			  (_cor0, _rec32)
		  in  %% Line 230
		      case _6002 of
			%% Line 231
			<{'value',{Block,_X_Succ,_X_Pred}}> when 'true' ->
			    Block
			%% Line 233
			<'none'> when 'true' ->
			    %% Line 234
			    'not_found'
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6002})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_duplicates'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc> when 'true' ->
	      let <_3474> =
		  %% Line 246
		  call 'lists':'member'
		      (H, _cor0)
	      in  let <_cor3> =
		      %% Line 246
		      case _3474 of
			%% Line 247
			<'false'> when 'true' ->
			    [H|_cor0]
			%% Line 248
			<'true'> when 'true' ->
			    _cor0
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_3474})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 250
		      apply 'remove_duplicates'/2
			  (T, _cor3)
	  %% Line 251
	  <[],Acc> when 'true' ->
	      %% Line 252
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'remove_duplicates',2}}] )
	    -| ['compiler_generated'] )
	end
'bb_add'/3 =
    %% Line 307
    fun (_cor2,_cor1,_cor0) ->
	let <Last> =
	    %% Line 309
	    call 'hipe_bb':'last'
		(_cor0)
	in  do  let <_4900> =
		    call 'hipe_icode':'is_branch'
			(Last)
		in  %% Line 310
		    case _4900 of
		      %% Line 311
		      <'true'> when 'true' ->
			  'ok'
		      %% Line 312
		      <'false'> when 'true' ->
			  call 'erlang':'throw'
			      ({'hipe_icode_cfg',{[66|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[101|[110|[100|[115|[32|[119|[105|[116|[104|[111|[117|[116|[32|[98|[114|[97|[110|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Last}})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_4900})
			-| ['compiler_generated'] )
		    end
		let <_cor5> =
		    call 'hipe_icode':'successors'
			(Last)
		in  let <Succ> =
			apply 'remove_duplicates'/2
			    (_cor5, [])
		    in  %% Line 319
			( case _cor2 of
			    ( <( {'cfg',_rec33,_cor33,_cor34}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_4056> =
				      %% Line 320
				      call 'gb_trees':'lookup'
					  (_cor1, _rec33)
				  in  let <OldSucc,OldPred> =
					  %% Line 320
					  case _4056 of
					    %% Line 321
					    <{'value',{_X_Block,OSucc,OPred}}> when 'true' ->
						%% Line 322
						<OSucc,OPred>
					    %% Line 323
					    <'none'> when 'true' ->
						%% Line 324
						<[],[]>
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_4056})
					      -| ['compiler_generated'] )
					  end
				      in  let <HT1> =
					      %% Line 328
					      call 'gb_trees':'enter'
						  (_cor1, {_cor0,Succ,OldPred}, _rec33)
					  in  let <_cor19> =
						  %% Line 330
						  fun (_cor16,_cor15) ->
						      %% Line 331
						      apply 'add_pred'/3
							  (_cor15, _cor16, _cor1)
					      in  let <_cor14> =
						      %% Line 333
						      call 'erlang':'--'
							  (Succ, OldSucc)
						  in  let <HT2> =
							  %% Line 330
							  call 'lists':'foldl'
							      (_cor19, HT1, _cor14)
						      in  let <_cor26> =
							      %% Line 335
							      fun (_cor23,_cor22) ->
								  %% Line 336
								  apply 'remove_pred'/3
								      (_cor22, _cor23, _cor1)
							  in  let <_cor21> =
								  %% Line 338
								  call 'erlang':'--'
								      (OldSucc, Succ)
							      in  let <HT3> =
								      %% Line 335
								      call 'lists':'foldl'
									  (_cor26, HT2, _cor21)
								  in  %% Line 339
								      call 'erlang':'setelement'
									  (2, _cor2, HT3)
			      -| ['compiler_generated'] )
			    ( <_cor35> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cfg'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'remove_pred'/3 =
    %% Line 341
    fun (_cor2,_cor1,_cor0) ->
	let <_1159> =
	    %% Line 342
	    call 'gb_trees':'lookup'
		(_cor1, _cor2)
	in  %% Line 342
	    case _1159 of
	      %% Line 343
	      <{'value',{Block,Succ,Preds}}> when 'true' ->
		  let <Code> =
		      %% Line 344
		      call 'hipe_bb':'code'
			  (Block)
		  in  let <NewCode> =
			  %% Line 345
			  apply 'remove_pred_from_phis'/3
			      (Code, _cor0, [])
		      in  let <NewBlock> =
			      %% Line 346
			      call 'hipe_bb':'code_update'
				  (Block, NewCode)
			  in  let <_cor6> =
				  %% Line 347
				  call 'lists':'delete'
				      (_cor0, Preds)
			      in  %% Line 347
				  call 'gb_trees':'update'
				      (_cor1, {NewBlock,Succ,_cor6}, _cor2)
	      %% Line 348
	      <'none'> when 'true' ->
		  _cor2
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1159})
		-| ['compiler_generated'] )
	    end
'add_pred'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	let <_4873> =
	    %% Line 353
	    call 'gb_trees':'lookup'
		(_cor1, _cor2)
	in  %% Line 353
	    case _4873 of
	      %% Line 354
	      <{'value',{Block,Succ,Preds}}> when 'true' ->
		  let <_cor3> =
		      %% Line 355
		      call 'lists':'delete'
			  (_cor0, Preds)
		  in  %% Line 355
		      call 'gb_trees':'update'
			  (_cor1, {Block,Succ,[_cor0|_cor3]}, _cor2)
	      %% Line 356
	      <'none'> when 'true' ->
		  %% Line 357
		  call 'gb_trees':'insert'
		      (_cor1, {[],[],[_cor0|[]]}, _cor2)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_4873})
		-| ['compiler_generated'] )
	    end
'remove_pred_from_phis'/3 =
    %% Line 376
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <List = [I|Left],Label,Acc> when 'true' ->
	      let <_52> =
		  call 'hipe_icode':'is_phi'
		      (I)
	      in  %% Line 377
		  case _52 of
		    %% Line 378
		    <'true'> when 'true' ->
			let <_cor3> =
			    call 'hipe_icode':'phi_remove_pred'
				(I, _cor1)
			in  let <NewAcc> =
				%% Line 379
				[_cor3|_cor0]
			    in  %% Line 380
				apply 'remove_pred_from_phis'/3
				    (Left, _cor1, NewAcc)
		    %% Line 381
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 382
			    call 'lists':'reverse'
				(_cor0)
			in  %% Line 382
			    call 'erlang':'++'
				(_cor5, _cor2)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_52})
		      -| ['compiler_generated'] )
		  end
	  %% Line 384
	  <[],_X_Label,Acc> when 'true' ->
	      %% Line 385
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'remove_pred_from_phis',3}}] )
	    -| ['compiler_generated'] )
	end
'take_bbs'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],CFG> when 'true' ->
	      _cor0
	  %% Line 401
	  <Xs,CFG> when 'true' ->
	      let <Lbl> =
		  %% Line 402
		  call 'erlang':'hd'
		      (_cor1)
	      in  let <_2612> =
		      call 'hipe_icode':'is_label'
			  (Lbl)
		  in  %% Line 403
		      case _2612 of
			%% Line 404
			<'true'> when 'true' ->
			    let <_cor3> =
				%% Line 405
				call 'erlang':'tl'
				    (_cor1)
			    in  let <_4267> =
				    %% Line 405
				    apply 'take_bb'/2
					(_cor3, [])
				in  %% Line 405
				    case _4267 of
				      %% Line 406
				      <{Code,Rest}> when 'true' ->
					  let <_cor5> =
					      call 'hipe_icode':'label_name'
						  (Lbl)
					  in  let <_cor4> =
						  %% Line 407
						  call 'hipe_bb':'mk_bb'
						      (Code)
					      in  let <NewCFG> =
						      %% Line 407
						      apply 'bb_add'/3
							  (_cor0, _cor5, _cor4)
						  in  %% Line 408
						      apply 'take_bbs'/2
							  (Rest, NewCFG)
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_4267})
					-| ['compiler_generated'] )
				    end
			%% Line 410
			<'false'> when 'true' ->
			    %% Line 411
			    call 'erlang':'error'
				({'hipe_icode_cfg',[98|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[100|[111|[101|[115|[110|[39|[116|[32|[115|[116|[97|[114|[116|[32|[119|[105|[116|[104|[32|[97|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor1})
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2612})
			  -| ['compiler_generated'] )
		      end
	end
'take_bb'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Code> when 'true' ->
	      let <_cor2> =
		  %% Line 422
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 422
		  {_cor2,[]}
	  %% Line 423
	  <[X|[Y|Xs]],Code> when 'true' ->
	      let <_8009> =
		  call 'hipe_icode':'is_label'
		      (X)
	      in  %% Line 424
		  case _8009 of
		    %% Line 425
		    <'true'> when 'true' ->
			let <_cor3> =
			    call 'hipe_icode':'label_name'
				(X)
			in  let <_cor4> =
				call 'hipe_icode':'mk_goto'
				    (_cor3)
			    in  %% Line 426
				{[_cor4|[]],[X|[Y|Xs]]}
		    %% Line 427
		    <'false'> when 'true' ->
			let <_405> =
			    call 'hipe_icode':'is_branch'
				(X)
			in  %% Line 428
			    case _405 of
			      %% Line 429
			      <'true'> when 'true' ->
				  let <_6187> =
				      call 'hipe_icode':'is_label'
					  (Y)
				  in  %% Line 430
				      case _6187 of
					%% Line 431
					<'true'> when 'true' ->
					    let <_cor5> =
						%% Line 432
						call 'lists':'reverse'
						    ([X|_cor0])
					    in  %% Line 432
						{_cor5,[Y|Xs]}
					%% Line 433
					<'false'> when 'true' ->
					    let <_cor6> =
						%% Line 436
						call 'lists':'reverse'
						    ([X|_cor0])
					    in  %% Line 436
						{_cor6,[Y|Xs]}
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_6187})
					  -| ['compiler_generated'] )
				      end
			      %% Line 438
			      <'false'> when 'true' ->
				  let <_3754> =
				      call 'hipe_icode':'is_label'
					  (Y)
				  in  %% Line 439
				      case _3754 of
					%% Line 440
					<'true'> when 'true' ->
					    let <_cor8> =
						call 'hipe_icode':'label_name'
						    (Y)
					    in  let <_cor9> =
						    call 'hipe_icode':'mk_goto'
							(_cor8)
						in  let <_cor10> =
							%% Line 441
							call 'lists':'reverse'
							    ([_cor9|[X|_cor0]])
						    in  %% Line 441
							{_cor10,[Y|Xs]}
					%% Line 442
					<'false'> when 'true' ->
					    %% Line 443
					    apply 'take_bb'/2
						([Y|Xs], [X|_cor0])
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_3754})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_405})
				-| ['compiler_generated'] )
			    end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8009})
		      -| ['compiler_generated'] )
		  end
	  %% Line 447
	  <[X|[]],[]> when 'true' ->
	      let <_6045> =
		  call 'hipe_icode':'is_label'
		      (X)
	      in  %% Line 448
		  case _6045 of
		    %% Line 449
		    <'true'> when 'true' ->
			let <_cor14> =
			    call 'hipe_icode':'label_name'
				(X)
			in  let <_cor15> =
				call 'hipe_icode':'mk_goto'
				    (_cor14)
			    in  %% Line 452
				{[X|[_cor15|[]]],[]}
		    %% Line 453
		    <'false'> when 'true' ->
			%% Line 454
			{[X|[]],[]}
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6045})
		      -| ['compiler_generated'] )
		  end
	  %% Line 456
	  <[X|[]],Code> when 'true' ->
	      let <_294> =
		  call 'hipe_icode':'is_label'
		      (X)
	      in  %% Line 457
		  case _294 of
		    %% Line 458
		    <'true'> when 'true' ->
			let <_cor19> =
			    %% Line 461
			    call 'lists':'reverse'
				(_cor0)
			in  let <_cor17> =
				call 'hipe_icode':'label_name'
				    (X)
			    in  let <_cor18> =
				    call 'hipe_icode':'mk_goto'
					(_cor17)
				in  %% Line 461
				    {_cor19,[X|[_cor18|[]]]}
		    %% Line 462
		    <'false'> when 'true' ->
			let <_cor20> =
			    %% Line 463
			    call 'lists':'reverse'
				([X|_cor0])
			in  %% Line 463
			    {_cor20,[]}
		    ( <_cor21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_294})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'take_bb',2}}] )
	    -| ['compiler_generated'] )
	end
'labels'/1 =
    %% Line 472
    fun (_cor0) ->
	%% Line 473
	( case _cor0 of
	    ( <( {'cfg',_rec35,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 474
		  call 'gb_trees':'keys'
		      (_rec35)
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'postorder'/1 =
    %% Line 476
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 477
	    apply 'reverse_postorder'/1
		(_cor0)
	in  %% Line 477
	    call 'lists':'reverse'
		(_cor1)
'reverse_postorder'/1 =
    %% Line 479
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor3> =
				call 'hipe_consttab':'referred_labels'
				    (_cor6)
			    in  let <_cor2> =
				    %% Line 539
				    call 'gb_sets':'empty'
					()
				in  let <_3564> =
					%% Line 482
					apply 'depth_search'/4
					    ([_rec0|_cor3], _cor2, _cor0, [])
				    in  %% Line 481
					case _3564 of
					  <{Ordering,_X_Visited}> when 'true' ->
					      Ordering
					  ( <_cor4> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_3564})
					    -| ['compiler_generated'] )
					end
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'depth_search'/4 =
    %% Line 485
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[N|Ns],Visited,CFG,Acc> when 'true' ->
	      let <_3417> =
		  %% Line 545
		  call 'gb_sets':'is_member'
		      (N, _cor2)
	      in  %% Line 486
		  case _3417 of
		    %% Line 487
		    <'true'> when 'true' ->
			%% Line 488
			apply 'depth_search'/4
			    (Ns, _cor2, _cor1, _cor0)
		    %% Line 489
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 490
			    apply 'succ'/2
				(_cor1, N)
			in  let <_cor4> =
				%% Line 542
				call 'gb_sets':'add'
				    (N, _cor2)
			    in  let <_6265> =
				    %% Line 490
				    apply 'depth_search'/4
					(_cor5, _cor4, _cor1, _cor0)
				in  %% Line 490
				    case _6265 of
				      <{Order,Vis}> when 'true' ->
					  %% Line 491
					  apply 'depth_search'/4
					      (Ns, Vis, _cor1, [N|Order])
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_6265})
					-| ['compiler_generated'] )
				    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3417})
		      -| ['compiler_generated'] )
		  end
	  %% Line 493
	  <[],Visited,_cor12,Ordering> when 'true' ->
	      %% Line 494
	      {_cor0,_cor2}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'depth_search',4}}] )
	    -| ['compiler_generated'] )
	end
'none_visited'/0 =
    %% Line 538
    fun () ->
	%% Line 539
	call 'gb_sets':'empty'
	    ()
'visit'/2 =
    %% Line 541
    fun (_cor1,_cor0) ->
	%% Line 542
	call 'gb_sets':'add'
	    (_cor1, _cor0)
'is_visited'/2 =
    %% Line 544
    fun (_cor1,_cor0) ->
	%% Line 545
	call 'gb_sets':'is_member'
	    (_cor1, _cor0)
'succ'/2 =
    %% Line 551
    fun (_cor1,_cor0) ->
	%% Line 552
	( case _cor1 of
	    ( <( {'cfg',_rec36,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_123> =
		      %% Line 553
		      call 'gb_trees':'lookup'
			  (_cor0, _rec36)
		  in  %% Line 553
		      case _123 of
			%% Line 554
			<{'value',{_X_Block,Succ,_X_Pred}}> when 'true' ->
			    Succ
			%% Line 556
			<'none'> when 'true' ->
			    %% Line 557
			    call 'erlang':'error'
				({[115|[117|[99|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_123})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pred'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	%% Line 562
	( case _cor1 of
	    ( <( {'cfg',_rec37,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_516> =
		      %% Line 563
		      call 'gb_trees':'lookup'
			  (_cor0, _rec37)
		  in  %% Line 563
		      case _516 of
			%% Line 564
			<{'value',{_X_Block,_X_Succ,Pred}}> when 'true' ->
			    Pred
			%% Line 566
			<'none'> when 'true' ->
			    %% Line 567
			    call 'erlang':'error'
				({[112|[114|[101|[100|[101|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_516})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fallthrough'/2 =
    %% Line 572
    fun (_cor1,_cor0) ->
	%% Line 573
	( case _cor1 of
	    ( <( {'cfg',_rec38,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_2791> =
		      %% Line 574
		      call 'gb_trees':'lookup'
			  (_cor0, _rec38)
		  in  %% Line 574
		      case _2791 of
			%% Line 575
			<{'value',{_X_Block,Succ,_cor12}}> when 'true' ->
			    %% Line 576
			    case Succ of
			      %% Line 577
			      <[X|_cor13]> when 'true' ->
				  X
			      %% Line 578
			      <_cor14> when 'true' ->
				  'none'
			    end
			%% Line 580
			<'none'> when 'true' ->
			    %% Line 581
			    call 'erlang':'error'
				({[102|[97|[108|[108|[116|[104|[114|[111|[117|[103|[104|[32|[108|[97|[98|[101|[108|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor0})
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2791})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'conditional'/2 =
    %% Line 584
    fun (_cor1,_cor0) ->
	%% Line 585
	( case _cor1 of
	    ( <( {'cfg',_rec39,_cor9,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_3727> =
		      %% Line 586
		      call 'gb_trees':'lookup'
			  (_cor0, _rec39)
		  in  %% Line 586
		      case _3727 of
			<{'value',{_X_Block,Succ,_cor12}}> when 'true' ->
			    %% Line 587
			    case Succ of
			      %% Line 588
			      <[]> when 'true' ->
				  'none'
			      %% Line 589
			      <[_cor13|[]]> when 'true' ->
				  'none'
			      %% Line 590
			      <[_cor14|Labels]> when 'true' ->
				  Labels
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',Succ})
				-| ['compiler_generated'] )
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3727})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'linearize_cfg'/1 =
    %% Line 601
    fun (_cor0) ->
	let <Start> =
	    %% Line 602
	    apply 'start_label'/1
		(_cor0)
	in  let <Vis> =
		call 'gb_sets':'empty'
		    ()
	    in  let <_3362> =
		    %% Line 604
		    apply 'lin_succ'/3
			(Start, _cor0, Vis)
		in  %% Line 604
		    case _3362 of
		      <{Vis0,NestedCode}> when 'true' ->
			  ( case _cor0 of
			      ( <( {'cfg',_cor3,_cor4,_rec12}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <BlocksInData> =
					%% Line 605
					call 'hipe_consttab':'referred_labels'
					    (_rec12)
				    in  let <AllCode> =
					    %% Line 606
					    apply 'lin_other_entries'/4
						(NestedCode, _cor0, BlocksInData, Vis0)
					in  %% Line 607
					    call 'lists':'flatten'
						(AllCode)
				-| ['compiler_generated'] )
			      ( <_cor5> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','cfg'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_3362})
			-| ['compiler_generated'] )
		    end
'lin_succ'/3 =
    %% Line 609
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',_X_CFG,Vis> when 'true' ->
	      %% Line 610
	      {_cor0,[]}
	  %% Line 611
	  <[Label|Labels],CFG,Vis> when 'true' ->
	      let <_2820> =
		  %% Line 612
		  apply 'lin_succ'/3
		      (Label, _cor1, _cor0)
	      in  %% Line 612
		  case _2820 of
		    <{Vis1,Code1}> when 'true' ->
			let <_4478> =
			    %% Line 613
			    apply 'lin_succ'/3
				(Labels, _cor1, Vis1)
			in  %% Line 613
			    case _4478 of
			      <{Vis2,Code2}> when 'true' ->
				  %% Line 614
				  {Vis2,[Code1|[Code2|[]]]}
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_4478})
				-| ['compiler_generated'] )
			    end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2820})
		      -| ['compiler_generated'] )
		  end
	  %% Line 615
	  <[],_X_CFG,Vis> when 'true' ->
	      %% Line 616
	      {_cor0,[]}
	  %% Line 617
	  <Label,CFG,Vis> when 'true' ->
	      let <_839> =
		  call 'gb_sets':'is_member'
		      (_cor2, _cor0)
	      in  %% Line 618
		  case _839 of
		    %% Line 619
		    <'true'> when 'true' ->
			%% Line 620
			{_cor0,[]}
		    %% Line 621
		    <'false'> when 'true' ->
			let <Vis0> =
			    call 'gb_sets':'add'
				(_cor2, _cor0)
			in  let <_847> =
				%% Line 623
				apply 'bb'/2
				    (_cor1, _cor2)
			    in  %% Line 623
				case _847 of
				  %% Line 624
				  <'not_found'> when 'true' ->
				      %% Line 625
				      call 'erlang':'error'
					  ({'hipe_icode_cfg',[78|[111|[32|[98|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[119|[105|[116|[104|[32|[108|[97|[98|[101|[108]]]]]]]]]]]]]]]]]]]]]]]]],_cor2})
				  %% Line 626
				  <BB> when 'true' ->
				      let <Fallthrough> =
					  %% Line 627
					  apply 'fallthrough'/2
					      (_cor1, _cor2)
				      in  let <Cond> =
					      %% Line 628
					      apply 'conditional'/2
						  (_cor1, _cor2)
					  in  let <LblInstr> =
						  call 'hipe_icode':'mk_label'
						      (_cor2)
					      in  let <_5062> =
						      %% Line 630
						      apply 'lin_succ'/3
							  (Fallthrough, _cor1, Vis0)
						  in  %% Line 630
						      case _5062 of
							<{Vis1,Code1}> when 'true' ->
							    let <_610> =
								%% Line 631
								apply 'lin_succ'/3
								    (Cond, _cor1, Vis1)
							    in  %% Line 631
								case _610 of
								  <{Vis2,Code2}> when 'true' ->
								      let <_cor11> =
									  %% Line 632
									  call 'hipe_bb':'code'
									      (_847)
								      in  %% Line 632
									  {Vis2,[[LblInstr|_cor11]|[Code1|[Code2|[]]]]}
								  ( <_cor10> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_610})
								    -| ['compiler_generated'] )
								end
							( <_cor9> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_5062})
							  -| ['compiler_generated'] )
						      end
				end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_839})
		      -| ['compiler_generated'] )
		  end
	end
'lin_other_entries'/4 =
    %% Line 636
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Code,_X_CFG,[],_X_Vis> when 'true' ->
	      _cor3
	  %% Line 638
	  <Code,CFG,[E|Es],Vis> when 'true' ->
	      let <_4429> =
		  %% Line 639
		  apply 'lin_succ'/3
		      (E, _cor2, _cor0)
	      in  %% Line 639
		  case _4429 of
		    <{Vis0,MoreCode}> when 'true' ->
			%% Line 640
			apply 'lin_other_entries'/4
			    ([_cor3|[MoreCode|[]]], _cor2, Es, Vis0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4429})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'lin_other_entries',4}}] )
	    -| ['compiler_generated'] )
	end
'remove_trivial_bbs'/1 =
    %% Line 662
    fun (_cor0) ->
	do  %% Line 663
	    call 'hipe_timing':'start_optional_timer'
		([77|[101|[114|[103|[101|[32|[66|[66|[115]]]]]]]]], 'hipe_icode_cfg')
	    let <_cor1> =
		%% Line 664
		apply 'rewrite_trivial_branches'/1
		    (_cor0)
	    in  let <CFG0> =
		    %% Line 664
		    apply 'merge_bbs'/1
			(_cor1)
		in  do  do  %% Line 665
			    call 'hipe_timing':'stop_optional_timer'
				([77|[101|[114|[103|[101|[32|[66|[66|[115]]]]]]]]], 'hipe_icode_cfg')
			    %% Line 667
			    call 'hipe_timing':'start_optional_timer'
				([70|[105|[110|[100|[68|[101|[97|[100]]]]]]]], 'hipe_icode_cfg')
			( case CFG0 of
			    ( <( {'cfg',_rec35,_cor5,_cor6}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor4> =
				      call 'gb_trees':'keys'
					  (_rec35)
				  in  let <_cor3> =
					  %% Line 774
					  call 'gb_trees':'empty'
					      ()
				      in  let <_6064> =
					      %% Line 668
					      apply 'remap'/3
						  (_cor4, _cor3, CFG0)
					  in  %% Line 668
					      case _6064 of
						<{NewMap,CFG1}> when 'true' ->
						    do  do  %% Line 669
							    call 'hipe_timing':'stop_optional_timer'
								([70|[105|[110|[100|[68|[101|[97|[100]]]]]]]], 'hipe_icode_cfg')
							    do  %% Line 670
								call 'hipe_timing':'start_optional_timer'
								    ([76|[97|[98|[101|[108|[115]]]]]], 'hipe_icode_cfg')
								do  ( case CFG1 of
									( <( {'cfg',_rec35,_cor5,_cor6}
									     -| ['compiler_generated'] )> when 'true' ->
									      call 'gb_trees':'keys'
										  (_rec35)
									  -| ['compiler_generated'] )
									( <_cor7> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','cfg'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								    do  %% Line 672
									call 'hipe_timing':'stop_optional_timer'
									    ([76|[97|[98|[101|[108|[115]]]]]], 'hipe_icode_cfg')
									%% Line 673
									call 'hipe_timing':'start_optional_timer'
									    ([82|[101|[100|[105|[114|[101|[99|[116|[66|[114|[97|[110|[99|[104|[101|[115]]]]]]]]]]]]]]]], 'hipe_icode_cfg')
							let <CFG2> =
							    %% Line 674
							    apply 'redirect_branches'/2
								(NewMap, CFG1)
							in  do  do  %% Line 675
								    call 'hipe_timing':'stop_optional_timer'
									([82|[101|[100|[105|[114|[101|[99|[116|[66|[114|[97|[110|[99|[104|[101|[115]]]]]]]]]]]]]]]], 'hipe_icode_cfg')
								    do  %% Line 676
									call 'hipe_timing':'start_optional_timer'
									    ([82|[101|[100|[105|[114|[101|[99|[116|[79|[112|[115]]]]]]]]]]], 'hipe_icode_cfg')
									do  %% Line 678
									    call 'hipe_timing':'stop_optional_timer'
										([82|[101|[100|[105|[114|[101|[99|[116|[79|[112|[115]]]]]]]]]]], 'hipe_icode_cfg')
									    %% Line 679
									    call 'hipe_timing':'start_optional_timer'
										([82|[101|[100|[105|[114|[101|[99|[116|[68|[97|[116|[97]]]]]]]]]]]], 'hipe_icode_cfg')
								let <CFG4> =
								    %% Line 680
								    apply 'redirect_data'/2
									(CFG2, NewMap)
								in  do  do  %% Line 681
									    call 'hipe_timing':'stop_optional_timer'
										([82|[101|[100|[105|[114|[101|[99|[116|[68|[97|[116|[97]]]]]]]]]]]], 'hipe_icode_cfg')
									    %% Line 682
									    call 'hipe_timing':'start_optional_timer'
										([82|[101|[100|[105|[114|[101|[99|[116|[83|[116|[97|[114|[116]]]]]]]]]]]]], 'hipe_icode_cfg')
									let <CFG5> =
									    %% Line 683
									    apply 'redirect_start'/2
										(CFG4, NewMap)
									in  do  %% Line 684
										call 'hipe_timing':'stop_optional_timer'
										    ([82|[101|[100|[105|[114|[101|[99|[116|[83|[116|[97|[114|[116]]]]]]]]]]]]], 'hipe_icode_cfg')
										CFG5
						( <_cor5> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_6064})
						  -| ['compiler_generated'] )
					      end
			      -| ['compiler_generated'] )
			    ( <_cor7> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cfg'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'redirect_start'/2 =
    %% Line 688
    fun (_cor1,_cor0) ->
	let <Start> =
	    %% Line 689
	    apply 'start_label'/1
		(_cor1)
	in  let <_6320> =
		%% Line 763
		call 'gb_trees':'lookup'
		    (Start, _cor0)
	    in  let <_489> =
		    %% Line 763
		    case _6320 of
		      %% Line 764
		      <{'value',{'dead',To}}> when 'true' ->
			  case call 'gb_trees':'lookup'
				   (To, _cor0) of
			    <{'value',{'dead',_2545}}> when 'true' ->
				%% Line 765
				apply 'forward'/2
				    (_2545, _cor0)
			    %% Line 766
			    <_cor5> when 'true' ->
				To
			  end
		      %% Line 766
		      <_cor5> when 'true' ->
			  Start
		    end
		in  %% Line 690
		    case _489 of
		      %% Line 691
		      <_cor6>
			  when call 'erlang':'=:='
				(_489,
				 Start) ->
			  _cor1
		      %% Line 692
		      <NewStart> when 'true' ->
			  %% Line 693
			  apply 'start_label_update'/2
			      (_cor1, _489)
		    end
'redirect_data'/2 =
    %% Line 696
    fun (_cor1,_cor0) ->
	( case _cor1 of
	    ( <( {'cfg',_cor3,_cor4,_rec12}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      %% Line 698
		      apply 'rd_succs'/1
			  (_cor0)
		  in  let <NewData> =
			  %% Line 698
			  call 'hipe_consttab':'update_referred_labels'
			      (_rec12, _cor3)
		      in  case _cor1 of
			    <{'cfg',_cor6,_cor7,_cor8}> when 'true' ->
				call 'erlang':'setelement'
				    (4, _cor1, NewData)
			    ( <_cor9> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cfg'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'redirect_branches'/2 =
    %% Line 701
    fun (_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 702
	    fun (_cor11,_cor10) ->
		case <_cor11,_cor10> of
		  <{From,{'newsuccs',Redirects}},CFGAcc> when 'true' ->
		      let <_cor9> =
			  %% Line 704
			  fun (_cor6,_cor5) ->
			      case <_cor6,_cor5> of
				<{ToOld,ToNew},CFG1> when 'true' ->
				    %% Line 705
				    case apply 'bb'/2
					     (_cor5, From) of
				      %% Line 706
				      <'not_found'> when 'true' ->
					  _cor5
				      %% Line 708
				      <_cor17> when 'true' ->
					  let <_6320> =
					      %% Line 763
					      call 'gb_trees':'lookup'
						  (ToNew, _cor1)
					  in  let <To> =
						  %% Line 763
						  case _6320 of
						    %% Line 764
						    <{'value',{'dead',To}}> when 'true' ->
							%% Line 765
							apply 'forward'/2
							    (To, _cor1)
						    %% Line 766
						    <_8884> when 'true' ->
							ToNew
						  end
					      in  %% Line 710
						  apply 'redirect'/4
						      (_cor5, From, ToOld, To)
				    end
				( <_cor8,_cor7> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6,_cor5})
					-| [{'function_name',{'-redirect_branches/2-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
		      in  %% Line 703
			  call 'lists':'foldl'
			      (_cor9, _cor10, Redirects)
		  %% Line 715
		  <_cor18,CFGAcc> when 'true' ->
		      _cor10
		end
	in  let <_cor2> =
		%% Line 718
		call 'gb_trees':'to_list'
		    (_cor1)
	    in  %% Line 702
		call 'lists':'foldl'
		    (_cor14, _cor0, _cor2)
'redirect'/4 =
    %% Line 720
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <BB> =
	    %% Line 721
	    apply 'bb'/2
		(_cor3, _cor2)
	in  let <LastInstr> =
		%% Line 722
		call 'hipe_bb':'last'
		    (BB)
	    in  let <NewLastInstr> =
		    call 'hipe_icode':'redirect_jmp'
			(LastInstr, _cor1, _cor0)
		in  let <_cor7> =
			%% Line 724
			call 'hipe_bb':'butlast'
			    (BB)
		    in  let <_cor8> =
			    %% Line 724
			    call 'erlang':'++'
				(_cor7, [NewLastInstr|[]])
			in  let <NewBB> =
				%% Line 724
				call 'hipe_bb':'mk_bb'
				    (_cor8)
			    in  %% Line 725
				apply 'bb_add'/3
				    (_cor3, _cor2, NewBB)
'bb_remove'/2 =
    %% Line 727
    fun (_cor1,_cor0) ->
	%% Line 728
	( case _cor1 of
	    ( <( {'cfg',_rec40,_cor17,_cor18}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_6105> =
		      %% Line 729
		      call 'gb_trees':'lookup'
			  (_cor0, _rec40)
		  in  %% Line 729
		      case _6105 of
			%% Line 730
			<{'value',{_X_Block,Succ,_X_Preds}}> when 'true' ->
			    let <_cor9> =
				%% Line 732
				fun (_cor6,_cor5) ->
				    %% Line 733
				    apply 'remove_pred'/3
					(_cor5, _cor6, _cor0)
			    in  let <HT1> =
				    %% Line 732
				    call 'lists':'foldl'
					(_cor9, _rec40, Succ)
				in  let <_rec41> =
					%% Line 736
					call 'gb_trees':'delete'
					    (_cor0, HT1)
				    in  %% Line 736
					call 'erlang':'setelement'
					    (2, _cor1, _rec41)
			%% Line 737
			<'none'> when 'true' ->
			    _cor1
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6105})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remap'/3 =
    %% Line 741
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[L|Rest],Map,CFG> when 'true' ->
	      let <_cor3> =
		  %% Line 742
		  apply 'bb'/2
		      (_cor0, L)
	      in  let <_6481> =
		      %% Line 801
		      call 'hipe_bb':'code'
			  (_cor3)
		  in  let <_840> =
			  %% Line 801
			  apply 'is_empty_bb'/1
			      (_6481)
		      in  %% Line 742
			  case _840 of
			    %% Line 743
			    <'true'> when 'true' ->
				let <_1366> =
				    %% Line 744
				    apply 'succ'/2
					(_cor0, L)
				in  %% Line 744
				    case _1366 of
				      %% Line 745
				      <[_cor11|[]]>
					  when call 'erlang':'=:='
						(_cor11,
						 L) ->
					  %% Line 746
					  apply 'remap'/3
					      (Rest, _cor1, _cor0)
				      %% Line 747
				      <[SuccL|[]]> when 'true' ->
					  let <CFG1> =
					      %% Line 748
					      apply 'bb_remove'/2
						  (_cor0, L)
					  in  let <NewMap> =
						  %% Line 749
						  apply 'remap_to_succ'/4
						      (L, SuccL, _cor1, _cor0)
					      in  %% Line 750
						  apply 'remap'/3
						      (Rest, NewMap, CFG1)
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_1366})
					-| ['compiler_generated'] )
				    end
			    %% Line 752
			    <'false'> when 'true' ->
				%% Line 753
				apply 'remap'/3
				    (Rest, _cor1, _cor0)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_840})
			      -| ['compiler_generated'] )
			  end
	  %% Line 755
	  <[],Map,CFG> when 'true' ->
	      %% Line 756
	      {_cor1,_cor0}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'remap',3}}] )
	    -| ['compiler_generated'] )
	end
'remap_to_succ'/4 =
    %% Line 758
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_6320> =
	    %% Line 763
	    call 'gb_trees':'lookup'
		(_cor2, _cor1)
	in  let <_cor5> =
		%% Line 763
		case _6320 of
		  %% Line 764
		  <{'value',{'dead',To}}> when 'true' ->
		      %% Line 765
		      apply 'forward'/2
			  (To, _cor1)
		  %% Line 766
		  <_cor5> when 'true' ->
		      _cor2
		end
	    in  let <_cor4> =
		    %% Line 759
		    apply 'pred'/2
			(_cor0, _cor3)
		in  let <Map2> =
			%% Line 793
			call 'gb_trees':'enter'
			    (_cor3, {'dead',_cor5}, _cor1)
		    in  let <_cor9> =
			    %% Line 794
			    fun (_cor6,_7751) ->
				%% Line 795
				apply 'add_redirectedto'/4
				    (_cor6, _cor3, _cor5, _7751)
			in  %% Line 794
			    call 'lists':'foldl'
				(_cor9, Map2, _cor4)
'forward'/2 =
    %% Line 762
    fun (_cor1,_cor0) ->
	%% Line 763
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 764
	  <{'value',{'dead',To}}> when 'true' ->
	      %% Line 765
	      apply 'forward'/2
		  (To, _cor0)
	  %% Line 766
	  <_cor5> when 'true' ->
	      _cor1
	end
'rd_succs'/1 =
    %% Line 776
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 777
	    fun (_cor4,_cor3) ->
		case <_cor4,_cor3> of
		  <{From,{'dead',To}},Acc> when 'true' ->
		      let <_6320> =
			  call 'gb_trees':'lookup'
			      (To, _cor0)
		      in  let <_cor2> =
			      case _6320 of
				<{'value',{'dead',_5018}}> when 'true' ->
				    apply 'forward'/2
					(_5018, _cor0)
				<_cor5> when 'true' ->
				    To
			      end
			  in  [{From,_cor2}|_cor3]
		  %% Line 778
		  <_cor9,Acc> when 'true' ->
		      _cor3
		end
	in  let <_cor1> =
		%% Line 781
		call 'gb_trees':'to_list'
		    (_cor0)
	    in  %% Line 777
		call 'lists':'foldl'
		    (_cor7, %% Line 780
			    [], _cor1)
'add_redirectedto'/4 =
    %% Line 783
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_2941> =
	    %% Line 784
	    call 'gb_trees':'lookup'
		(_cor3, _cor0)
	in  %% Line 784
	    case _2941 of
	      %% Line 785
	      <{'value',{'newsuccs',NS}}> when 'true' ->
		  let <_cor4> =
		      %% Line 786
		      call 'lists':'keydelete'
			  (_cor2, 1, NS)
		  in  %% Line 786
		      call 'gb_trees':'update'
			  (_cor3, {'newsuccs',[{_cor2,_cor1}|_cor4]}, _cor0)
	      %% Line 787
	      <{'value',{'dead',_cor10}}> when 'true' ->
		  _cor0
	      %% Line 788
	      <'none'> when 'true' ->
		  %% Line 789
		  call 'gb_trees':'insert'
		      (_cor3, {'newsuccs',[{_cor2,_cor1}|[]]}, _cor0)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_2941})
		-| ['compiler_generated'] )
	    end
'is_empty_bb'/1 =
    %% Line 803
    fun (_cor0) ->
	case _cor0 of
	  <[I|[]]> when 'true' ->
	      call 'hipe_icode':'is_goto'
		  (I)
	  %% Line 805
	  <[I|Is]> when 'true' ->
	      let <_3446> =
		  call 'hipe_icode':'is_comment'
		      (I)
	      in  %% Line 806
		  case _3446 of
		    %% Line 807
		    <'true'> when 'true' ->
			%% Line 808
			apply 'is_empty_bb'/1
			    (Is)
		    %% Line 809
		    <'false'> when 'true' ->
			%% Line 810
			'false'
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3446})
		      -| ['compiler_generated'] )
		  end
	  %% Line 812
	  <[]> when 'true' ->
	      %% Line 813
	      'true'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_empty_bb',1}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_trivial_branches'/1 =
    %% Line 819
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 820
	    apply 'postorder'/1
		(_cor0)
	in  %% Line 820
	    apply 'rewrite_trivial_branches'/2
		(_cor1, _cor0)
'rewrite_trivial_branches'/2 =
    %% Line 822
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[L|Left],CFG> when 'true' ->
	      let <BB> =
		  %% Line 823
		  apply 'bb'/2
		      (_cor0, L)
	      in  let <Last> =
		      %% Line 824
		      call 'hipe_bb':'last'
			  (BB)
		  in  let <_6037> =
			  call 'hipe_icode':'is_goto'
			      (Last)
		      in  %% Line 825
			  case _6037 of
			    %% Line 826
			    <'true'> when 'true' ->
				%% Line 827
				apply 'rewrite_trivial_branches'/2
				    (Left, _cor0)
			    %% Line 828
			    <'false'> when 'true' ->
				let <_5818> =
				    %% Line 829
				    apply 'is_pure_branch'/1
					(Last)
				in  %% Line 829
				    case _5818 of
				      %% Line 830
				      <'false'> when 'true' ->
					  %% Line 831
					  apply 'rewrite_trivial_branches'/2
					      (Left, _cor0)
				      %% Line 832
				      <'true'> when 'true' ->
					  %% Line 833
					  case apply 'succ'/2
						   (_cor0, L) of
					    %% Line 834
					    <[Successor|[]]> when 'true' ->
						let <Head> =
						    %% Line 835
						    call 'hipe_bb':'butlast'
							(BB)
						in  let <_cor5> =
							call 'hipe_icode':'mk_goto'
							    (Successor)
						    in  let <_cor6> =
							    %% Line 836
							    call 'erlang':'++'
								(Head, [_cor5|[]])
							in  let <NewBB> =
								%% Line 836
								call 'hipe_bb':'mk_bb'
								    (_cor6)
							    in  let <NewCFG> =
								    %% Line 837
								    apply 'bb_add'/3
									(_cor0, L, NewBB)
								in  %% Line 838
								    apply 'rewrite_trivial_branches'/2
									(Left, NewCFG)
					    %% Line 839
					    <_cor14> when 'true' ->
						%% Line 840
						apply 'rewrite_trivial_branches'/2
						    (Left, _cor0)
					  end
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_5818})
					-| ['compiler_generated'] )
				    end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_6037})
			      -| ['compiler_generated'] )
			  end
	  %% Line 844
	  <[],CFG> when 'true' ->
	      _cor0
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'rewrite_trivial_branches',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_bbs'/1 =
    %% Line 860
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 861
	    apply 'postorder'/1
		(_cor0)
	in  %% Line 861
	    call 'lists':'foldl'
		('merge_successor'/2, _cor0, _cor1)
'merge_successor'/2 =
    %% Line 864
    fun (_cor1,_cor0) ->
	let <_7619> =
	    %% Line 866
	    apply 'bb'/2
		(_cor0, _cor1)
	in  %% Line 866
	    case _7619 of
	      %% Line 867
	      <'not_found'> when 'true' ->
		  _cor0
	      %% Line 868
	      <BB> when 'true' ->
		  let <StartLabel> =
		      %% Line 869
		      apply 'start_label'/1
			  (_cor0)
		  in  let <Last> =
			  %% Line 870
			  call 'hipe_bb':'last'
			      (_7619)
		      in  let <_cor5> =
			      call 'hipe_icode':'successors'
				  (Last)
			  in  let <_cor4> =
				  call 'hipe_icode':'fails_to'
				      (Last)
			      in  %% Line 873
				  case <_cor5,_cor4> of
				    %% Line 874
				    <[Successor|[]],[_cor16|[]]>
					when call 'erlang':'=:='
					      (_cor16,
					       Successor) ->
					_cor0
				    %% Line 877
				    <[Successor|[]],_cor17>
					when call 'erlang':'=/='
					      (Successor,
					       StartLabel) ->
					let <_cor6> =
					    %% Line 879
					    apply 'pred'/2
						(_cor0, Successor)
					in  %% Line 879
					    case <> of
					      %% Line 880
					      <>
						  when call 'erlang':'=:='
							([_cor1|[]],
							 _cor6) ->
						  ( case _cor0 of
						      ( <( {'cfg',_rec32,_cor8,_cor9}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_6002> =
								call 'gb_trees':'lookup'
								    (Successor, _rec32)
							    in  let <_cor7> =
								    case _6002 of
								      <{'value',{Block,_X_Succ,_X_Pred}}> when 'true' ->
									  Block
								      <'none'> when 'true' ->
									  'not_found'
								      ( <_1003> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_6002})
									-| ['compiler_generated'] )
								    end
								in  let <NewCode> =
									%% Line 882
									apply 'merge'/3
									    (_7619, _cor7, Successor)
								    in  let <NewBB> =
									    %% Line 883
									    call 'hipe_bb':'mk_bb'
										(NewCode)
									in  let <_cor10> =
										%% Line 884
										apply 'bb_remove'/2
										    (_cor0, Successor)
									    in  %% Line 884
										apply 'bb_add'/3
										    (_cor10, _cor1, NewBB)
							-| ['compiler_generated'] )
						      ( <_cor10> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','cfg'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      %% Line 885
					      <> when 'true' ->
						  _cor0
					    end
				    %% Line 888
				    <_fol222,_fol223> when 'true' ->
					_cor0
				  end
	    end
'merge'/3 =
    %% Line 896
    fun (_cor2,_cor1,_cor0) ->
	let <Head> =
	    %% Line 897
	    call 'hipe_bb':'butlast'
		(_cor2)
	in  let <Last> =
		%% Line 898
		call 'hipe_bb':'last'
		    (_cor2)
	    in  let <Tail> =
		    %% Line 899
		    call 'hipe_bb':'code'
			(_cor1)
		in  let <_7998> =
			call 'hipe_icode':'is_goto'
			    (Last)
		    in  %% Line 900
			case _7998 of
			  %% Line 901
			  <'true'> when 'true' ->
			      %% Line 903
			      call 'erlang':'++'
				  (Head, Tail)
			  %% Line 904
			  <'false'> when 'true' ->
			      let <_cor6> =
				  call 'hipe_icode':'redirect_jmp'
				      (Last, _cor0, %% Line 908
						    [])
			      in  %% Line 908
				  call 'erlang':'++'
				      (Head, [_cor6|Tail])
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_7998})
			    -| ['compiler_generated'] )
			end
'remove_unreachable_code'/1 =
    %% Line 927
    fun (_cor0) ->
	let <Start> =
	    %% Line 928
	    apply 'start_label'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 929
		call 'gb_sets':'from_list'
		    ([Start|[]])
	    in  let <Reachable> =
		    %% Line 929
		    apply 'find_reachable'/3
			([Start|[]], _cor0, _cor2)
		in  ( case _cor0 of
			( <( {'cfg',_rec35,_cor5,_cor6}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor4> =
				  call 'gb_trees':'keys'
				      (_rec35)
			      in  let <Labels> =
				      %% Line 932
				      call 'ordsets':'from_list'
					  (_cor4)
				  in  let <_4792> =
					  %% Line 933
					  call 'ordsets':'subtract'
					      (Labels, Reachable)
				      in  %% Line 933
					  case _4792 of
					    %% Line 934
					    <[]> when 'true' ->
						_cor0
					    %% Line 936
					    <Remove> when 'true' ->
						let <_cor10> =
						    %% Line 937
						    fun (_cor7,_cor6) ->
							apply 'bb_remove'/2
							    (_cor6, _cor7)
						in  let <NewCFG> =
							%% Line 937
							call 'lists':'foldl'
							    (_cor10, _cor0, _4792)
						    in  %% Line 938
							apply 'remove_unreachable_code'/1
							    (NewCFG)
					  end
			  -| ['compiler_generated'] )
			( <_cor7> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cfg'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'find_reachable'/3 =
    %% Line 941
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Left],CFG,Acc> when 'true' ->
	      let <NewAcc> =
		  %% Line 942
		  call 'gb_sets':'add'
		      (Label, _cor0)
	      in  let <Succ> =
		      %% Line 943
		      apply 'succ'/2
			  (_cor1, Label)
		  in  let <_cor11> =
			  %% Line 944
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor8) ->
					case _cor8 of
					  <[X|_cor6]> when 'true' ->
					      ( case call 'gb_sets':'is_member'
							 (X, _cor0) of
						  <'false'> when 'true' ->
						      let <_cor9> =
							  apply 'lc$^0'/1
							      (_cor6)
						      in  ( [X|_cor9]
							    -| ['compiler_generated'] )
						  ( <'true'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor6)
						    -| ['compiler_generated'] )
						  ( <_cor_variable> when 'true' ->
							call 'erlang':'error'
							    ('badarg')
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      Left
					  ( <_4357> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor8})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Succ)
			    -| ['list_comprehension'] )
		      in  %% Line 944
			  apply 'find_reachable'/3
			      (_cor11, _cor1, NewAcc)
	  %% Line 946
	  <[],_X_CFG,Acc> when 'true' ->
	      %% Line 947
	      call 'gb_sets':'to_list'
		  (_cor0)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'find_reachable',3}}] )
	    -| ['compiler_generated'] )
	end
'linear_to_cfg'/1 =
    %% Line 73
    fun (_cor0) ->
	let <Code> =
	    %% Line 75
	    call 'hipe_icode':'icode_code'
		(_cor0)
	in  let <IsClosure> =
		%% Line 76
		call 'hipe_icode':'icode_is_closure'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 77
		    call 'erlang':'hd'
			(Code)
		in  let <StartLabel> =
			%% Line 77
			call 'hipe_icode':'label_name'
			    (_cor3)
		    in  let <_cor8> =
			    %% Line 78
			    call 'hipe_icode':'icode_fun'
				(_cor0)
			in  let <_cor7> =
				%% Line 80
				call 'hipe_icode':'icode_data'
				    (_cor0)
			    in  let <_cor6> =
				    %% Line 82
				    call 'hipe_icode':'icode_is_leaf'
					(_cor0)
				in  let <_cor5> =
					%% Line 83
					call 'hipe_icode':'icode_params'
					    (_cor0)
				    in  let <Info> =
					    %% Line 160
					    {'cfg_info',_cor8,StartLabel,IsClosure,'undefined',_cor6,_cor5,[]}
					in  let <_3922> =
						%% Line 165
						call 'gb_trees':'empty'
						    ()
					    in  let <CFG0> =
						    %% Line 165
						    {'cfg',_3922,Info,_cor7}
						in  let <_cor10> =
							%% Line 84
							call 'hipe_icode':'icode_info'
							    (_cor0)
						    in  let <CFG1> =
							    %% Line 84
							    apply 'info_update'/2
								(CFG0, _cor10)
							in  let <_cor14> =
								%% Line 85
								case IsClosure of
								  %% Line 86
								  <'true'> when 'true' ->
								      let <_cor12> =
									  %% Line 88
									  call 'hipe_icode':'icode_closure_arity'
									      (_cor0)
								      in  %% Line 87
									  apply 'closure_arity_update'/2
									      (CFG1, _cor12)
								  %% Line 89
								  <'false'> when 'true' ->
								      CFG1
								  ( <_cor13> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',IsClosure})
								    -| ['compiler_generated'] )
								end
							    in  do  %% Line 92
								    call 'hipe_timing':'start_optional_timer'
									([71|[101|[116|[32|[66|[66|[115|[32|[105|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe_icode_cfg')
								    let <FullCFG> =
									%% Line 93
									apply 'take_bbs'/2
									    (Code, _cor14)
								    in  do  %% Line 94
									    call 'hipe_timing':'stop_optional_timer'
										([71|[101|[116|[32|[66|[66|[115|[32|[105|[99|[111|[100|[101]]]]]]]]]]]]], 'hipe_icode_cfg')
									    FullCFG
'is_pure_branch'/1 =
    %% Line 136
    fun (_cor0) ->
	%% Line 137
	case _cor0 of
	  %% Line 138
	  <{'icode_if',_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      'true'
	  %% Line 139
	  <{'icode_goto',_cor8}> when 'true' ->
	      'true'
	  %% Line 140
	  <{'icode_switch_val',_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      'true'
	  %% Line 141
	  <{'icode_switch_tuple_arity',_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      'true'
	  %% Line 142
	  <{'icode_type',_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      'true'
	  %% Line 144
	  <{'icode_label',_cor22}> when 'true' ->
	      'false'
	  %% Line 145
	  <{'icode_move',_cor23,_cor24}> when 'true' ->
	      'false'
	  %% Line 146
	  <{'icode_phi',_cor25,_cor26,_cor27}> when 'true' ->
	      'false'
	  %% Line 147
	  <{'icode_call',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      'false'
	  %% Line 148
	  <{'icode_enter',_cor35,_cor36,_cor37}> when 'true' ->
	      'false'
	  %% Line 149
	  <{'icode_return',_cor38}> when 'true' ->
	      'false'
	  %% Line 150
	  <{'icode_begin_try',_cor39,_cor40}> when 'true' ->
	      'false'
	  %% Line 151
	  <{'icode_end_try'}> when 'true' ->
	      'false'
	  %% Line 152
	  <{'icode_begin_handler',_cor41}> when 'true' ->
	      'false'
	  %% Line 153
	  <{'icode_fail',_cor42,_cor43,_cor44}> when 'true' ->
	      'false'
	  %% Line 154
	  <{'icode_comment',_cor45}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'pp'/1 =
    %% Line 177
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 178
	    apply 'cfg_to_linear'/1
		(_cor0)
	in  %% Line 178
	    call 'hipe_icode_pp':'pp'
		(_cor1)
'pp'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 183
	    apply 'cfg_to_linear'/1
		(_cor0)
	in  %% Line 183
	    call 'hipe_icode_pp':'pp'
		(_cor1, _cor2)
'cfg_to_linear'/1 =
    %% Line 188
    fun (_cor0) ->
	let <Code> =
	    %% Line 189
	    apply 'linearize_cfg'/1
		(_cor0)
	in  let <IsClosure> =
		%% Line 190
		apply 'is_closure'/1
		    (_cor0)
	    in  let <_cor8> =
		    %% Line 191
		    apply 'function'/1
			(_cor0)
		in  let <_cor7> =
			%% Line 192
			apply 'params'/1
			    (_cor0)
		    in  let <_cor6> =
			    %% Line 194
			    apply 'is_leaf'/1
				(_cor0)
			in  ( case _cor0 of
				( <( {'cfg',_cor3,_cor4,_rec12}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor4> =
					  %% Line 197
					  call 'hipe_gensym':'var_range'
					      ('icode')
				      in  let <_cor3> =
					      %% Line 198
					      call 'hipe_gensym':'label_range'
						  ('icode')
					  in  let <Icode> =
						  %% Line 191
						  call 'hipe_icode':'mk_icode'
						      (_cor8, _cor7, IsClosure, _cor6, Code, _rec12, _cor4, _cor3)
					      in  let <_cor10> =
						      %% Line 199
						      apply 'info'/1
							  (_cor0)
						  in  let <Icode1> =
							  %% Line 199
							  call 'hipe_icode':'icode_info_update'
							      (Icode, _cor10)
						      in  %% Line 200
							  case IsClosure of
							    %% Line 201
							    <'true'> when 'true' ->
								let <_cor12> =
								    apply 'closure_arity'/1
									(_cor0)
								in  call 'hipe_icode':'icode_closure_arity_update'
									(Icode1, _cor12)
							    %% Line 202
							    <'false'> when 'true' ->
								Icode1
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',IsClosure})
							      -| ['compiler_generated'] )
							  end
				  -| ['compiler_generated'] )
				( <_cor5> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','cfg'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_cfg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_cfg', _cor0)
end