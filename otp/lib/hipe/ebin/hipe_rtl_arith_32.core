module 'hipe_rtl_arith_32' ['eval_alu'/3,
			    'eval_alub'/4,
			    'eval_cond'/3,
			    'eval_cond_bits'/5,
			    'module_info'/0,
			    'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'eval_cond_bits',5},[{'type',122,'fun',[{'type',122,'product',[{'remote_type',122,[{'atom',122,'hipe_rtl'}|[{'atom',122,'alub_cond'}|[[]]]]}|[{'type',122,'boolean',[]}|[{'type',123,'boolean',[]}|[{'type',123,'boolean',[]}|[{'type',123,'boolean',[]}]]]]]}|[{'type',123,'boolean',[]}]]}]}]]
'eval_alu'/3 =
    %% Line 35
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Op,Arg1,Arg2>
	      when %% Line 36
		try
		    let <_cor3> =
			call 'erlang':'=<'
			    (_cor1, 2147483647)
		    in  let <_cor5> =
			    %% Line 37
			    call 'erlang':'>='
				(_cor1, -2147483648)
			in  let <_cor6> =
				%% Line 38
				call 'erlang':'=<'
				    (_cor0, 2147483647)
			    in  let <_cor8> =
				    %% Line 39
				    call 'erlang':'>='
					(_cor0, -2147483648)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor6, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor5, _cor9)
					in  call 'erlang':'and'
						(_cor3, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_346> =
		  %% Line 162
		  call 'erlang':'bsr'
		      (_cor1, 31)
	      in  let <_1186> =
		      %% Line 162
		      call 'erlang':'band'
			  (_346, 1)
		  in  let <Sign1> =
			  %% Line 162
			  call 'erlang':'=:='
			      (_1186, 1)
		      in  let <_950> =
			      %% Line 162
			      call 'erlang':'bsr'
				  (_cor0, 31)
			  in  let <_377> =
				  %% Line 162
				  call 'erlang':'band'
				      (_950, 1)
			      in  let <Sign2> =
				      %% Line 162
				      call 'erlang':'=:='
					  (_377, 1)
				  in  let <_cor112,C,N,Res,V,Z> =
					  %% Line 44
					  case _cor2 of
					    %% Line 45
					    <'sub'> when 'true' ->
						let <_cor13> =
						    %% Line 46
						    call 'erlang':'-'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 46
							call 'erlang':'band'
							    (_cor13, 4294967295)
						    in  let <_801> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_12> =
								%% Line 162
								call 'erlang':'band'
								    (_801, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_12, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  let <_cor21> =
									    %% Line 49
									    call 'erlang':'not'
										(Sign2)
									in  let <_cor22> =
										%% Line 49
										call 'erlang':'and'
										    (Sign1, _cor21)
									    in  let <_cor20> =
										    %% Line 49
										    call 'erlang':'not'
											(N)
										in  let <_cor23> =
											%% Line 49
											call 'erlang':'and'
											    (_cor22, _cor20)
										    in  let <_cor17> =
											    %% Line 51
											    call 'erlang':'not'
												(Sign1)
											in  let <_cor18> =
												%% Line 51
												call 'erlang':'and'
												    (_cor17, Sign2)
											    in  let <_cor19> =
												    %% Line 51
												    call 'erlang':'and'
													(_cor18, N)
												in  let <V> =
													%% Line 50
													call 'erlang':'or'
													    (_cor23, _cor19)
												    in  let <_cor28> =
													    %% Line 52
													    call 'erlang':'not'
														(Sign1)
													in  let <_cor29> =
														%% Line 52
														call 'erlang':'and'
														    (_cor28, Sign2)
													    in  let <_cor25> =
														    %% Line 54
														    call 'erlang':'not'
															(Sign1)
														in  let <_cor26> =
															%% Line 54
															call 'erlang':'or'
															    (_cor25, Sign2)
														    in  let <_cor27> =
															    %% Line 54
															    call 'erlang':'and'
																(N, _cor26)
															in  let <C> =
																%% Line 53
																call 'erlang':'or'
																    (_cor29, _cor27)
															    in  <C,C,N,Res,V,Z>
					    %% Line 55
					    <'add'> when 'true' ->
						let <_cor31> =
						    %% Line 56
						    call 'erlang':'+'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 56
							call 'erlang':'band'
							    (_cor31, 4294967295)
						    in  let <_762> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_604> =
								%% Line 162
								call 'erlang':'band'
								    (_762, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_604, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  let <_cor40> =
									    %% Line 59
									    call 'erlang':'and'
										(Sign1, Sign2)
									in  let <_cor39> =
										%% Line 59
										call 'erlang':'not'
										    (N)
									    in  let <_cor41> =
										    %% Line 59
										    call 'erlang':'and'
											(_cor40, _cor39)
										in  let <_cor36> =
											%% Line 61
											call 'erlang':'not'
											    (Sign1)
										    in  let <_cor35> =
											    %% Line 61
											    call 'erlang':'not'
												(Sign2)
											in  let <_cor37> =
												%% Line 61
												call 'erlang':'and'
												    (_cor36, _cor35)
											    in  let <_cor38> =
												    %% Line 61
												    call 'erlang':'and'
													(_cor37, N)
												in  let <V> =
													%% Line 60
													call 'erlang':'or'
													    (_cor41, _cor38)
												    in  let <_cor46> =
													    %% Line 62
													    call 'erlang':'and'
														(Sign1, Sign2)
													in  let <_cor44> =
														%% Line 64
														call 'erlang':'not'
														    (N)
													    in  let <_cor43> =
														    %% Line 64
														    call 'erlang':'or'
															(Sign1, Sign2)
														in  let <_cor45> =
															%% Line 64
															call 'erlang':'and'
															    (_cor44, _cor43)
														    in  let <C> =
															    %% Line 63
															    call 'erlang':'or'
																(_cor46, _cor45)
															in  <C,C,N,Res,V,Z>
					    %% Line 65
					    <'mul'> when 'true' ->
						let <FullRes> =
						    %% Line 66
						    call 'erlang':'*'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 67
							call 'erlang':'band'
							    (FullRes, 4294967295)
						    in  let <ResHi> =
							    %% Line 68
							    call 'erlang':'bsr'
								(FullRes, 32)
							in  let <_1930> =
								%% Line 162
								call 'erlang':'bsr'
								    (Res, 31)
							    in  let <_661> =
								    %% Line 162
								    call 'erlang':'band'
									(_1930, 1)
								in  let <N> =
									%% Line 162
									call 'erlang':'=:='
									    (_661, 1)
								    in  let <Z> =
									    %% Line 175
									    call 'erlang':'=:='
										(Res, 0)
									in  let <_cor57> =
										%% Line 71
										call 'erlang':'=/='
										    (ResHi, -1)
									    in  let <_cor58> =
										    %% Line 71
										    call 'erlang':'and'
											(N, _cor57)
										in  let <_cor54> =
											%% Line 71
											call 'erlang':'not'
											    (N)
										    in  let <_cor53> =
											    %% Line 71
											    call 'erlang':'=/='
												(ResHi, 0)
											in  let <_cor55> =
												%% Line 71
												call 'erlang':'and'
												    (_cor54, _cor53)
											    in  let <V> =
												    %% Line 71
												    call 'erlang':'or'
													(_cor58, _cor55)
												in  <V,V,N,Res,V,Z>
					    %% Line 73
					    <'sra'> when 'true' ->
						let <_cor61> =
						    %% Line 74
						    call 'erlang':'bsr'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 74
							call 'erlang':'band'
							    (_cor61, 4294967295)
						    in  let <_64> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_1734> =
								%% Line 162
								call 'erlang':'band'
								    (_64, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_1734, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  <%% Line 78
									 0,%% Line 78
									   0,N,Res,%% Line 77
										   0,Z>
					    %% Line 79
					    <'srl'> when 'true' ->
						let <_cor68> =
						    %% Line 80
						    call 'erlang':'bsr'
							(_cor1, _cor0)
						in  let <Setbits> =
							%% Line 171
							call 'erlang':'-'
							    (32, _cor0)
						    in  let <_36> =
							    %% Line 172
							    call 'erlang':'bsl'
								(1, Setbits)
							in  let <_cor67> =
								%% Line 172
								call 'erlang':'-'
								    (_36, 1)
							    in  let <Res> =
								    %% Line 80
								    call 'erlang':'band'
									(_cor68, _cor67)
								in  let <_640> =
									%% Line 162
									call 'erlang':'bsr'
									    (Res, 31)
								    in  let <_508> =
									    %% Line 162
									    call 'erlang':'band'
										(_640, 1)
									in  let <N> =
										%% Line 162
										call 'erlang':'=:='
										    (_508, 1)
									    in  let <Z> =
										    %% Line 175
										    call 'erlang':'=:='
											(Res, 0)
										in  <%% Line 84
										     0,%% Line 84
										       0,N,Res,%% Line 83
											       0,Z>
					    %% Line 85
					    <'sll'> when 'true' ->
						let <_cor74> =
						    %% Line 86
						    call 'erlang':'bsl'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 86
							call 'erlang':'band'
							    (_cor74, 4294967295)
						    in  let <_104> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_1927> =
								%% Line 162
								call 'erlang':'band'
								    (_104, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_1927, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  <%% Line 90
									 0,%% Line 90
									   0,N,Res,%% Line 89
										   0,Z>
					    %% Line 91
					    <'or'> when 'true' ->
						let <_cor80> =
						    %% Line 92
						    call 'erlang':'bor'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 92
							call 'erlang':'band'
							    (_cor80, 4294967295)
						    in  let <_739> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_1301> =
								%% Line 162
								call 'erlang':'band'
								    (_739, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_1301, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  <%% Line 96
									 0,%% Line 96
									   0,N,Res,%% Line 95
										   0,Z>
					    %% Line 97
					    <'and'> when 'true' ->
						let <_cor86> =
						    %% Line 98
						    call 'erlang':'band'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 98
							call 'erlang':'band'
							    (_cor86, 4294967295)
						    in  let <_1511> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_1137> =
								%% Line 162
								call 'erlang':'band'
								    (_1511, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_1137, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  <%% Line 102
									 0,%% Line 102
									   0,N,Res,%% Line 101
										   0,Z>
					    %% Line 103
					    <'xor'> when 'true' ->
						let <_cor92> =
						    %% Line 104
						    call 'erlang':'bxor'
							(_cor1, _cor0)
						in  let <Res> =
							%% Line 104
							call 'erlang':'band'
							    (_cor92, 4294967295)
						    in  let <_762> =
							    %% Line 162
							    call 'erlang':'bsr'
								(Res, 31)
							in  let <_1549> =
								%% Line 162
								call 'erlang':'band'
								    (_762, 1)
							    in  let <N> =
								    %% Line 162
								    call 'erlang':'=:='
									(_1549, 1)
								in  let <Z> =
									%% Line 175
									call 'erlang':'=:='
									    (Res, 0)
								    in  <%% Line 108
									 0,%% Line 108
									   0,N,Res,%% Line 107
										   0,Z>
					    %% Line 109
					    <_cor110> when 'true' ->
						do  %% Line 111
						    call 'io':'format'
							([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{[117|[110|[107|[110|[111|[119|[110|[32|[97|[108|[117|[32|[111|[112]]]]]]]]]]]]]],_cor2}|['hipe_rtl_arith_32'|[111]]])
						    %% Line 111
						    call 'erlang':'error'
							({'hipe_rtl_arith_32',111,{[117|[110|[107|[110|[111|[119|[110|[32|[97|[108|[117|[32|[111|[112]]]]]]]]]]]]]],_cor2}})
					  end
				      in  let <_cor103> =
					      %% Line 165
					      case <> of
						<>
						    when call 'erlang':'>'
							  (Res,
							   2147483647) ->
						    let <_1388> =
							%% Line 166
							call 'erlang':'-'
							    (4294967296, Res)
						    in  %% Line 166
							call 'erlang':'-'
							    (_1388)
						%% Line 167
						<> when 'true' ->
						    Res
					      end
					  in  %% Line 113
					      {_cor103,N,Z,V,C}
	  %% Line 114
	  <Op,Arg1,Arg2> when 'true' ->
	      do  %% Line 115
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'argument_overflow',_cor2,_cor1,_cor0}|['hipe_rtl_arith_32'|[115]]])
		  %% Line 115
		  call 'erlang':'error'
		      ({'hipe_rtl_arith_32',115,{'argument_overflow',_cor2,_cor1,_cor0}})
	end
'eval_cond_bits'/5 =
    %% Line 125
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 126
	case _cor4 of
	  %% Line 127
	  <'eq'> when 'true' ->
	      _cor2
	  %% Line 129
	  <'ne'> when 'true' ->
	      %% Line 130
	      call 'erlang':'not'
		  (_cor2)
	  %% Line 131
	  <'gt'> when 'true' ->
	      let <_cor5> =
		  %% Line 132
		  call 'erlang':'xor'
		      (_cor3, _cor1)
	      in  let <_cor6> =
		      %% Line 132
		      call 'erlang':'or'
			  (_cor2, _cor5)
		  in  %% Line 132
		      call 'erlang':'not'
			  (_cor6)
	  %% Line 133
	  <'gtu'> when 'true' ->
	      let <_cor7> =
		  %% Line 134
		  call 'erlang':'or'
		      (_cor0, _cor2)
	      in  %% Line 134
		  call 'erlang':'not'
		      (_cor7)
	  %% Line 135
	  <'ge'> when 'true' ->
	      let <_cor8> =
		  %% Line 136
		  call 'erlang':'xor'
		      (_cor3, _cor1)
	      in  %% Line 136
		  call 'erlang':'not'
		      (_cor8)
	  %% Line 137
	  <'geu'> when 'true' ->
	      %% Line 138
	      call 'erlang':'not'
		  (_cor0)
	  %% Line 139
	  <'lt'> when 'true' ->
	      %% Line 140
	      call 'erlang':'xor'
		  (_cor3, _cor1)
	  %% Line 141
	  <'ltu'> when 'true' ->
	      _cor0
	  %% Line 143
	  <'le'> when 'true' ->
	      let <_cor9> =
		  %% Line 144
		  call 'erlang':'xor'
		      (_cor3, _cor1)
	      in  %% Line 144
		  call 'erlang':'or'
		      (_cor2, _cor9)
	  %% Line 145
	  <'leu'> when 'true' ->
	      %% Line 146
	      call 'erlang':'or'
		  (_cor0, _cor2)
	  %% Line 147
	  <'overflow'> when 'true' ->
	      _cor1
	  %% Line 149
	  <'not_overflow'> when 'true' ->
	      %% Line 150
	      call 'erlang':'not'
		  (_cor1)
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'eval_alub'/4 =
    %% Line 153
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_293> =
	    %% Line 154
	    apply 'eval_alu'/3
		(_cor3, _cor1, _cor0)
	in  %% Line 154
	    case _293 of
	      <{Res,N,Z,V,C}> when 'true' ->
		  let <_cor5> =
		      %% Line 155
		      apply 'eval_cond_bits'/5
			  (_cor2, N, Z, V, C)
		  in  %% Line 155
		      {Res,_cor5}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_293})
		-| ['compiler_generated'] )
	    end
'eval_cond'/3 =
    %% Line 157
    fun (_cor2,_cor1,_cor0) ->
	let <_867> =
	    %% Line 158
	    apply 'eval_alub'/4
		('sub', _cor2, _cor1, _cor0)
	in  %% Line 158
	    case _867 of
	      <{_cor7,Bool}> when 'true' ->
		  Bool
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_867})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_arith_32')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_arith_32', _cor0)
end