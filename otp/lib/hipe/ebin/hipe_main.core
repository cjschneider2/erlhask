module 'hipe_main' ['compile_icode'/4,
		    'module_info'/0,
		    'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'comp_icode_ret',{'type',51,'union',[{'type',51,'tuple',[{'atom',51,'native'}|[{'type',51,'hipe_architecture',[]}|[{'type',51,'tuple',[{'atom',51,'unprofiled'}|[{'var',51,'_'}]]}]]]}|[{'type',52,'tuple',[{'atom',52,'rtl'}|[{'type',52,'tuple','any'}]]}|[{'type',52,'tuple',[{'atom',52,'llvm_binary'}|[{'type',52,'term',[]}]]}]]]},[]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'compile_icode',4},[{'type',71,'fun',[{'type',71,'product',[{'type',71,'mfa',[]}|[{'type',71,'record',[{'atom',71,'icode'}]}|[{'type',71,'comp_options',[]}|[{'type',71,'record',[{'atom',71,'comp_servers'}]}]]]]}|[{'type',72,'comp_icode_ret',[]}]]}]}]]
'compile_icode'/4 =
    %% Line 74
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 75
	    call 'erlang':'get'
		('hipe_debug')
	in  %% Line 75
	    apply 'compile_icode'/5
		(_cor3, _cor2, _cor1, _cor0, _cor4)
'compile_icode'/5 =
    %% Line 95
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 97
	case call 'hipe_icode':'icode_label_range'
		 (_cor3) of
	  <{LMin,LMax}> when 'true' ->
	      let <_cor6> =
		  %% Line 98
		  call 'erlang':'+'
		      (LMax, 1)
	      in  do  %% Line 98
		      call 'hipe_gensym':'set_label_range'
			  ('icode', LMin, _cor6)
		      %% Line 99
		      case call 'hipe_icode':'icode_var_range'
			       (_cor3) of
			<{VMin,VMax}> when 'true' ->
			    let <_cor8> =
				%% Line 100
				call 'erlang':'+'
				    (VMax, 1)
			    in  do  %% Line 100
				    call 'hipe_gensym':'set_var_range'
					('icode', VMin, _cor8)
				    do  %% Line 102
					call 'hipe_timing':'start_optional_timer'
					    ([73|[99|[111|[100|[101]]]]], 'hipe_main')
					let <LinearIcode1> =
					    %% Line 103
					    apply 'icode_no_comment'/2
						(_cor3, _cor2)
					in  let <IcodeCfg0> =
						%% Line 104
						apply 'icode_linear_to_cfg'/2
						    (LinearIcode1, _cor2)
					    in  let <IcodeCfg1> =
						    %% Line 106
						    apply 'icode_handle_exceptions'/3
							(IcodeCfg0, _cor4, _cor2)
						in  let <IcodeCfg3> =
							%% Line 107
							apply 'icode_inline_bifs'/2
							    (IcodeCfg1, _cor2)
						    in  do  %% Line 108
							    apply 'pp'/6
								(IcodeCfg3, _cor4, 'icode', 'pp_icode', _cor2, _cor1)
							    let <IcodeCfg4> =
								%% Line 109
								apply 'icode_ssa'/4
								    (IcodeCfg3, _cor4, _cor2, _cor1)
							    in  let <IcodeCfg5> =
								    %% Line 110
								    apply 'icode_split_arith'/3
									(IcodeCfg4, _cor4, _cor2)
								in  do  %% Line 111
									apply 'pp'/6
									    (IcodeCfg5, _cor4, 'icode', 'pp_icode_split_arith', _cor2, _cor1)
									let <IcodeCfg6> =
									    %% Line 112
									    apply 'icode_heap_test'/2
										(IcodeCfg5, _cor2)
									in  let <IcodeCfg7> =
										%% Line 113
										apply 'icode_remove_trivial_bbs'/2
										    (IcodeCfg6, _cor2)
									    in  do  %% Line 114
										    apply 'pp'/6
											(IcodeCfg7, _cor4, 'icode', 'pp_opt_icode', _cor2, _cor1)
										    do  %% Line 115
											apply 'pp'/6
											    (IcodeCfg7, _cor4, 'icode_liveness', 'pp_icode_liveness', _cor2, _cor1)
											let <FinalIcode> =
											    %% Line 116
											    call 'hipe_icode_cfg':'cfg_to_linear'
												(IcodeCfg7)
											in  do  %% Line 117
												call 'hipe_timing':'stop_optional_timer'
												    ([73|[99|[111|[100|[101]]]]], 'hipe_main')
												do  %% Line 118
												    case call 'proplists':'get_bool'
													     ('time', _cor2) of
												      %% Line 119
												      <'true'> when 'true' ->
													  call 'hipe_timing':'start'
													      ([82|[84|[76]]], 'hipe_main')
												      %% Line 119
												      <'false'> when 'true' ->
													  'ok'
												      ( <_cor18> when 'true' ->
													    primop 'match_fail'
														({'case_clause',_cor18})
													-| ['compiler_generated'] )
												    end
												    let <_cor22> =
													%% Line 119
													( fun (_cor20) ->
													      do  case call 'proplists':'get_bool'
															   ('time', _cor2) of
														    <'true'> when 'true' ->
															call 'hipe_timing':'stop'
															    ([82|[84|[76]]], 'hipe_main')
														    <'false'> when 'true' ->
															'ok'
														    ( <_cor19> when 'true' ->
															  primop 'match_fail'
															      ({'case_clause',_cor19})
														      -| ['compiler_generated'] )
														  end
														  _cor20
													  -| [{'id',{0,0,'-compile_icode/5-fun-0-'}}] )
												    in  let <_cor23> =
													    %% Line 118
													    apply 'icode_to_rtl'/4
														(_cor4, FinalIcode, _cor2, _cor1)
													in  %% Line 118
													    case %% Line 119
														 apply _cor22
														     (_cor23) of
													      <{LinearRTL,Roots}> when 'true' ->
														  %% Line 120
														  case call 'proplists':'get_bool'
															   ('to_rtl', _cor2) of
														    %% Line 121
														    <'false'> when 'true' ->
															%% Line 122
															case call 'proplists':'get_bool'
																 ('to_llvm', _cor2) of
															  %% Line 123
															  <'false'> when 'true' ->
															      %% Line 124
															      apply 'rtl_to_native'/4
																  (_cor4, LinearRTL, _cor2, _cor0)
															  %% Line 125
															  <'true'> when 'true' ->
															      %% Line 128
															      apply 'rtl_to_llvm_to_binary'/5
																  (_cor4, LinearRTL, Roots, _cor2, _cor0)
															  ( <_cor26> when 'true' ->
																primop 'match_fail'
																    ({'case_clause',_cor26})
															    -| ['compiler_generated'] )
															end
														    %% Line 130
														    <'true'> when 'true' ->
															do  %% Line 131
															    call 'erlang':'put'
																('hipe_debug', _cor0)
															    %% Line 132
															    {'rtl',LinearRTL}
														    ( <_cor27> when 'true' ->
															  primop 'match_fail'
															      ({'case_clause',_cor27})
														      -| ['compiler_generated'] )
														  end
													      ( <_cor25> when 'true' ->
														    primop 'match_fail'
															({'badmatch',_cor25})
														-| ['compiler_generated'] )
													    end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'icode_no_comment'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	%% Line 142
	case call 'proplists':'get_bool'
		 ('remove_comments', _cor0) of
	  %% Line 143
	  <'true'> when 'true' ->
	      do  %% Line 144
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 145
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[114|[101|[109|[111|[118|[101|[32|[99|[111|[109|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 145
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 145
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[114|[101|[109|[111|[118|[101|[32|[99|[111|[109|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_no_comment/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 144
			  call 'hipe_icode':'strip_comments'
			      (_cor1)
		      in  %% Line 145
			  apply _cor6
			      (_cor7)
	  %% Line 146
	  <_cor11> when 'true' ->
	      _cor1
	end
'icode_linear_to_cfg'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	do  %% Line 151
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 152
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[108|[105|[110|[101|[97|[114|[32|[73|[99|[111|[100|[101|[32|[116|[111|[32|[67|[70|[71]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 152
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 152
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[108|[105|[110|[101|[97|[114|[32|[73|[99|[111|[100|[101|[32|[116|[111|[32|[67|[70|[71]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_linear_to_cfg/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 151
		    call 'hipe_icode_cfg':'linear_to_cfg'
			(_cor1)
		in  %% Line 152
		    apply _cor6
			(_cor7)
'icode_ssa_binary_pass'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	%% Line 155
	case call 'proplists':'get_bool'
		 ('binary_opt', _cor0) of
	  %% Line 156
	  <'true'> when 'true' ->
	      do  %% Line 157
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 158
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[115|[115]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 158
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 158
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[115|[115]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_ssa_binary_pass/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 157
			  call 'hipe_icode_bincomp':'cfg'
			      (_cor1)
		      in  %% Line 158
			  apply _cor6
			      (_cor7)
	  %% Line 159
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'icode_handle_exceptions'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 164
	    apply 'debug'/3
		([73|[99|[111|[100|[101|[32|[102|[105|[120|[32|[99|[97|[116|[99|[104|[101|[115|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]], _cor0)
	    do  %% Line 165
		case call 'proplists':'get_bool'
			 ('time', _cor0) of
		  %% Line 166
		  <'true'> when 'true' ->
		      call 'hipe_timing':'start'
			  ([73|[99|[111|[100|[101|[32|[102|[105|[120|[32|[99|[97|[116|[99|[104|[101|[115]]]]]]]]]]]]]]]]], 'hipe_main')
		  %% Line 166
		  <'false'> when 'true' ->
		      'ok'
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
		let <_cor7> =
		    %% Line 166
		    ( fun (_cor5) ->
			  do  case call 'proplists':'get_bool'
				       ('time', _cor0) of
				<'true'> when 'true' ->
				    call 'hipe_timing':'stop'
					([73|[99|[111|[100|[101|[32|[102|[105|[120|[32|[99|[97|[116|[99|[104|[101|[115]]]]]]]]]]]]]]]]], 'hipe_main')
				<'false'> when 'true' ->
				    'ok'
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			      _cor5
		      -| [{'id',{0,0,'-icode_handle_exceptions/3-fun-0-'}}] )
		in  let <_cor8> =
			%% Line 165
			call 'hipe_icode_exceptions':'fix_catches'
			    (_cor2)
		    in  %% Line 166
			apply _cor7
			    (_cor8)
'icode_inline_bifs'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	%% Line 169
	case call 'proplists':'get_bool'
		 ('icode_inline_bifs', _cor0) of
	  %% Line 170
	  <'true'> when 'true' ->
	      do  %% Line 171
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 172
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[105|[110|[108|[105|[110|[101|[32|[98|[105|[102|[115]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 172
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 172
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[105|[110|[108|[105|[110|[101|[32|[98|[105|[102|[115]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_inline_bifs/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 171
			  call 'hipe_icode_inline_bifs':'cfg'
			      (_cor1)
		      in  %% Line 172
			  apply _cor6
			      (_cor7)
	  %% Line 173
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'icode_split_arith'/3 =
    %% Line 179
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 180
	    ( case call 'proplists':'get_bool'
		       ('split_arith', _cor0) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      'true'
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      %% Line 181
		      call 'proplists':'get_bool'
			  ('split_arith_unsafe', _cor0)
		  -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 180
	    case _cor5 of
	      %% Line 182
	      <'true'> when 'true' ->
		  do  %% Line 183
		      case call 'proplists':'get_bool'
			       ('time', _cor0) of
			%% Line 184
			<'true'> when 'true' ->
			    call 'hipe_timing':'start'
				([73|[99|[111|[100|[101|[32|[115|[112|[108|[105|[116|[32|[97|[114|[105|[116|[104]]]]]]]]]]]]]]]]], 'hipe_main')
			%% Line 184
			<'false'> when 'true' ->
			    'ok'
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		      let <_cor10> =
			  %% Line 184
			  ( fun (_cor8) ->
				do  case call 'proplists':'get_bool'
					     ('time', _cor0) of
				      <'true'> when 'true' ->
					  call 'hipe_timing':'stop'
					      ([73|[99|[111|[100|[101|[32|[115|[112|[108|[105|[116|[32|[97|[114|[105|[116|[104]]]]]]]]]]]]]]]]], 'hipe_main')
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor7})
					-| ['compiler_generated'] )
				    end
				    _cor8
			    -| [{'id',{0,0,'-icode_split_arith/3-fun-0-'}}] )
		      in  let <_cor11> =
			      %% Line 183
			      call 'hipe_icode_split_arith':'cfg'
				  (_cor2, _cor1, _cor0)
			  in  %% Line 184
			      apply _cor10
				  (_cor11)
	      %% Line 185
	      <'false'> when 'true' ->
		  _cor2
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor12})
		-| ['compiler_generated'] )
	    end
'icode_heap_test'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	do  %% Line 190
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 191
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([73|[99|[111|[100|[101|[32|[104|[101|[97|[112|[95|[116|[101|[115|[116]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 191
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 191
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([73|[99|[111|[100|[101|[32|[104|[101|[97|[112|[95|[116|[101|[115|[116]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_heap_test/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 190
		    call 'hipe_icode_heap_test':'cfg'
			(_cor1)
		in  %% Line 191
		    apply _cor6
			(_cor7)
'icode_remove_trivial_bbs'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	do  %% Line 194
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 195
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([73|[99|[111|[100|[101|[32|[116|[114|[105|[118|[105|[97|[108|[32|[66|[66|[32|[114|[101|[109|[111|[118|[97|[108]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 195
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 195
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([73|[99|[111|[100|[101|[32|[116|[114|[105|[118|[105|[97|[108|[32|[66|[66|[32|[114|[101|[109|[111|[118|[97|[108]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_remove_trivial_bbs/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 194
		    call 'hipe_icode_cfg':'remove_trivial_bbs'
			(_cor1)
		in  %% Line 195
		    apply _cor6
			(_cor7)
'pp'/6 =
    %% Line 197
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 198
	    apply 'get_pp_module'/1
		(_cor3)
	in  let <_cor8> =
		%% Line 199
		call 'proplists':'get_value'
		    (_cor2, _cor1)
	    in  let <_cor10> =
		    %% Line 198
		    apply 'pp_fun'/4
			(_cor5, _cor4, _cor9, _cor8)
		in  %% Line 200
		    ( case _cor0 of
			( <( {'comp_servers',_rec0,_cor17,_cor18}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'perform_io'/2
				  (_cor10, _rec0)
			  -| ['compiler_generated'] )
			( <_cor19> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','comp_servers'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'pp_fun'/4 =
    %% Line 202
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 203
	case _cor0 of
	  %% Line 204
	  <'true'> when 'true' ->
	      %% Line 205
	      ( fun () ->
		    call _cor1:'pp'
			(_cor3)
		-| [{'id',{0,0,'-pp_fun/4-fun-0-'}}] )
	  %% Line 206
	  <{'only',Lst}>
	      when call 'erlang':'is_list'
		    (Lst) ->
	      %% Line 207
	      case call 'lists':'member'
		       (_cor2, Lst) of
		%% Line 208
		<'true'> when 'true' ->
		    %% Line 209
		    ( fun () ->
			  call _cor1:'pp'
			      (_cor3)
		      -| [{'id',{0,0,'-pp_fun/4-fun-1-'}}] )
		%% Line 210
		<'false'> when 'true' ->
		    %% Line 211
		    'no_fun'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 213
	  <{'only',_cor11}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor2) ->
	      %% Line 214
	      ( fun () ->
		    call _cor1:'pp'
			(_cor3)
		-| [{'id',{0,0,'-pp_fun/4-fun-2-'}}] )
	  %% Line 215
	  <{'file',FileName}> when 'true' ->
	      %% Line 216
	      ( fun () ->
		    %% Line 217
		    case call 'file':'open'
			     (FileName, ['write'|['append']]) of
		      <{'ok',File}> when 'true' ->
			  do  %% Line 218
			      call _cor1:'pp'
				  (File, _cor3)
			      %% Line 219
			      call 'file':'close'
				  (File)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-pp_fun/4-fun-3-'}}] )
	  %% Line 221
	  <_cor12> when 'true' ->
	      %% Line 222
	      'no_fun'
	end
'get_pp_module'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <'icode'> when 'true' ->
	      'hipe_icode_cfg'
	  %% Line 226
	  <'rtl'> when 'true' ->
	      'hipe_rtl_cfg'
	  %% Line 227
	  <'rtl_linear'> when 'true' ->
	      'hipe_rtl'
	  %% Line 228
	  <'icode_liveness'> when 'true' ->
	      'hipe_icode_liveness'
	  %% Line 229
	  <'rtl_liveness'> when 'true' ->
	      'hipe_rtl_liveness'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_pp_module',1}}] )
	    -| ['compiler_generated'] )
	end
'perform_io'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'no_fun',_cor4> when 'true' ->
	      'ok'
	  %% Line 232
	  <Fun,PPServer>
	      when call 'erlang':'is_pid'
		    (PPServer) ->
	      %% Line 233
	      call 'erlang':'!'
		  (PPServer, {'print',Fun})
	  %% Line 234
	  <Fun,'undefined'> when 'true' ->
	      %% Line 235
	      apply Fun
		  ()
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'perform_io',2}}] )
	    -| ['compiler_generated'] )
	end
'icode_ssa'/4 =
    %% Line 254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 255
	    call 'hipe_timing':'start_optional_timer'
		([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[112|[97|[115|[115|[101|[115]]]]]]]]]]]]]]]], 'hipe_main')
	    let <IcodeSSA0> =
		%% Line 256
		apply 'icode_ssa_convert'/2
		    (_cor3, _cor1)
	    in  do  %% Line 257
		    apply 'pp'/6
			(IcodeSSA0, _cor2, 'icode', 'pp_icode_ssa', _cor1, _cor0)
		    let <IcodeSSA1> =
			%% Line 258
			apply 'icode_ssa_const_prop'/2
			    (IcodeSSA0, _cor1)
		    in  let <IcodeSSA2> =
			    %% Line 259
			    apply 'icode_ssa_dead_code_elimination'/2
				(IcodeSSA1, _cor1)
			in  let <IcodeSSA3> =
				%% Line 260
				apply 'icode_ssa_copy_prop'/2
				    (IcodeSSA2, _cor1)
			    in  let <IcodeSSA3a> =
				    %% Line 261
				    apply 'icode_ssa_binary_pass'/2
					(IcodeSSA3, _cor1)
				in  let <IcodeSSA4> =
					%% Line 262
					apply 'icode_ssa_type'/4
					    (IcodeSSA3a, _cor2, _cor1, _cor0)
				    in  let <IcodeSSA5> =
					    %% Line 263
					    apply 'icode_ssa_dead_code_elimination'/2
						(IcodeSSA4, _cor1)
					in  let <IcodeSSA6> =
						%% Line 264
						apply 'icode_ssa_struct_reuse'/2
						    (IcodeSSA5, _cor1)
					    in  do  %% Line 265
						    apply 'icode_ssa_check'/2
							(IcodeSSA6, _cor1)
						    do  %% Line 266
							apply 'pp'/6
							    (IcodeSSA6, _cor2, 'icode', 'pp_icode_ssa', _cor1, _cor0)
							let <IcodeCfg> =
							    %% Line 267
							    apply 'icode_ssa_unconvert'/2
								(IcodeSSA6, _cor1)
							in  do  %% Line 268
								call 'hipe_timing':'stop_optional_timer'
								    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[112|[97|[115|[115|[101|[115]]]]]]]]]]]]]]]], 'hipe_main')
								%% Line 269
								IcodeCfg
'icode_ssa_type'/4 =
    %% Line 271
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 272
	case call 'proplists':'get_value'
		 ('icode_type', _cor1) of
	  %% Line 273
	  <'false'> when 'true' ->
	      _cor3
	  %% Line 274
	  <'undefined'> when 'true' ->
	      _cor3
	  %% Line 275
	  <'true'> when 'true' ->
	      let <AnnIcode1> =
		  %% Line 276
		  apply 'icode_ssa_type_info'/4
		      (_cor3, _cor2, _cor1, _cor0)
	      in  do  %% Line 277
		      apply 'pp'/6
			  (AnnIcode1, _cor2, 'icode', 'pp_typed_icode', _cor1, _cor0)
		      let <_cor6> =
			  %% Line 279
			  case call 'proplists':'get_bool'
				   ('inline_fp', _cor1) of
			    %% Line 280
			    <'true'> when 'true' ->
				call 'hipe_icode_fp':'cfg'
				    (AnnIcode1)
			    %% Line 281
			    <'false'> when 'true' ->
				AnnIcode1
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
		      in  let <AnnIcode3> =
			      %% Line 283
			      apply 'icode_range_analysis'/4
				  (_cor6, _cor2, _cor1, _cor0)
			  in  do  %% Line 284
				  apply 'pp'/6
				      (AnnIcode3, _cor2, 'icode', 'pp_range_icode', _cor1, _cor0)
				  %% Line 285
				  call 'hipe_icode_type':'unannotate_cfg'
				      (AnnIcode3)
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'icode_ssa_convert'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	do  %% Line 289
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 290
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 290
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 290
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_ssa_convert/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 289
		    call 'hipe_icode_ssa':'convert'
			(_cor1)
		in  %% Line 290
		    apply _cor6
			(_cor7)
'icode_ssa_const_prop'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	%% Line 293
	case call 'proplists':'get_bool'
		 ('icode_ssa_const_prop', _cor0) of
	  %% Line 294
	  <'true'> when 'true' ->
	      do  %% Line 295
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 296
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 296
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 296
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_ssa_const_prop/2-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 295
			  call 'hipe_icode_ssa_const_prop':'propagate'
			      (_cor1)
		      in  let <_cor18> =
			      %% Line 296
			      apply _cor6
				  (_cor8)
			  in  do  %% Line 297
				  case call 'proplists':'get_bool'
					   ('time', _cor0) of
				    %% Line 298
				    <'true'> when 'true' ->
					call 'hipe_timing':'start'
					    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[112|[97|[115|[115|[32|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				    %% Line 298
				    <'false'> when 'true' ->
					'ok'
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
				  let <_cor13> =
				      %% Line 298
				      ( fun (_cor11) ->
					    do  case call 'proplists':'get_bool'
							 ('time', _cor0) of
						  <'true'> when 'true' ->
						      call 'hipe_timing':'stop'
							  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[112|[97|[115|[115|[32|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
						  <'false'> when 'true' ->
						      'ok'
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor10})
						    -| ['compiler_generated'] )
						end
						_cor11
					-| [{'id',{0,0,'-icode_ssa_const_prop/2-fun-1-'}}] )
				  in  let <_cor14> =
					  %% Line 297
					  call 'hipe_icode_ssa':'remove_dead_code'
					      (_cor8)
				      in  %% Line 298
					  apply _cor13
					      (_cor14)
	  %% Line 299
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'icode_ssa_copy_prop'/2 =
    %% Line 303
    fun (_cor1,_cor0) ->
	%% Line 304
	case call 'proplists':'get_bool'
		 ('icode_ssa_copy_prop', _cor0) of
	  %% Line 305
	  <'true'> when 'true' ->
	      do  %% Line 306
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 307
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[99|[111|[112|[121|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 307
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 307
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[99|[111|[112|[121|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_ssa_copy_prop/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 306
			  call 'hipe_icode_ssa_copy_prop':'cfg'
			      (_cor1)
		      in  %% Line 307
			  apply _cor6
			      (_cor7)
	  %% Line 308
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'icode_ssa_struct_reuse'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	%% Line 313
	case call 'proplists':'get_value'
		 ('icode_ssa_struct_reuse', _cor0) of
	  %% Line 314
	  <'true'> when 'true' ->
	      do  %% Line 315
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 316
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[114|[101|[117|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 316
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 316
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[114|[101|[117|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_ssa_struct_reuse/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 315
			  call 'hipe_icode_ssa_struct_reuse':'struct_reuse'
			      (_cor1)
		      in  %% Line 316
			  apply _cor6
			      (_cor7)
	  %% Line 317
	  <_cor11> when 'true' ->
	      _cor1
	end
'icode_ssa_type_info'/4 =
    %% Line 321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 322
	    case call 'proplists':'get_bool'
		     ('time', _cor1) of
	      %% Line 323
	      <'true'> when 'true' ->
		  let <_cor4> =
		      call 'io_lib':'format'
			  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[32|[102|[111|[114|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
		  in  call 'hipe_timing':'start'
			  (_cor4, 'hipe_main')
	      %% Line 323
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	    let <_cor10> =
		%% Line 323
		( fun (_cor8) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor1) of
			    <'true'> when 'true' ->
				let <_cor6> =
				    call 'io_lib':'format'
					([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[32|[102|[111|[114|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
				in  call 'hipe_timing':'stop'
					(_cor6, 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
			  _cor8
		  -| [{'id',{0,0,'-icode_ssa_type_info/4-fun-0-'}}] )
	    in  let <_cor11> =
		    %% Line 322
		    call 'hipe_icode_type':'cfg'
			(_cor3, _cor2, _cor1, _cor0)
		in  %% Line 323
		    apply _cor10
			(_cor11)
'icode_range_analysis'/4 =
    %% Line 325
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 326
	case call 'proplists':'get_bool'
		 ('icode_range', _cor1) of
	  %% Line 327
	  <'true'> when 'true' ->
	      do  %% Line 328
		  case call 'proplists':'get_bool'
			   ('time', _cor1) of
		    %% Line 329
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[105|[110|[116|[101|[103|[101|[114|[32|[114|[97|[110|[103|[101|[32|[97|[110|[97|[108|[121|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 329
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
		  let <_cor8> =
		      %% Line 329
		      ( fun (_cor6) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor1) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[105|[110|[116|[101|[103|[101|[114|[32|[114|[97|[110|[103|[101|[32|[97|[110|[97|[108|[121|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
				_cor6
			-| [{'id',{0,0,'-icode_range_analysis/4-fun-0-'}}] )
		  in  let <_cor9> =
			  %% Line 328
			  call 'hipe_icode_range':'cfg'
			      (_cor3, _cor2, _cor1, _cor0)
		      in  %% Line 329
			  apply _cor8
			      (_cor9)
	  %% Line 330
	  <'false'> when 'true' ->
	      _cor3
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'icode_ssa_dead_code_elimination'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	do  %% Line 335
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 337
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[112|[97|[115|[115|[32|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 336
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 336
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    %% Line 337
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[112|[97|[115|[115|[32|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_ssa_dead_code_elimination/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 335
		    call 'hipe_icode_ssa':'remove_dead_code'
			(_cor1)
		in  let <_cor8> =
			%% Line 336
			apply _cor6
			    (_cor7)
		    in  %% Line 338
			call 'hipe_icode_cfg':'remove_unreachable_code'
			    (_cor8)
'icode_ssa_check'/2 =
    %% Line 340
    fun (_cor1,_cor0) ->
	%% Line 341
	case call 'proplists':'get_bool'
		 ('icode_ssa_check', _cor0) of
	  <'true'> when 'true' ->
	      do  %% Line 342
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 343
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([73|[99|[111|[100|[101|[32|[99|[104|[101|[99|[107|[32|[102|[111|[114|[32|[83|[83|[65|[45|[110|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 343
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 343
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([73|[99|[111|[100|[101|[32|[99|[104|[101|[99|[107|[32|[102|[111|[114|[32|[83|[83|[65|[45|[110|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-icode_ssa_check/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 342
			  call 'hipe_icode_ssa':'check'
			      (_cor1)
		      in  %% Line 343
			  apply _cor6
			      (_cor7)
	  %% Line 343
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'icode_ssa_unconvert'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	do  %% Line 346
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 347
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[117|[110|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 347
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 347
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([73|[99|[111|[100|[101|[32|[83|[83|[65|[32|[117|[110|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-icode_ssa_unconvert/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 346
		    call 'hipe_icode_ssa':'unconvert'
			(_cor1)
		in  %% Line 347
		    apply _cor6
			(_cor7)
'icode_to_rtl'/4 =
    %% Line 381
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 382
	    apply 'hash'/1
		(_cor2)
	in  do  %% Line 382
		apply 'debug'/3
		    ([73|[67|[79|[68|[69|[32|[45|[62|[32|[82|[84|[76|[58|[32|[126|[119|[44|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]], [_cor3|[_cor4|[]]], _cor1)
		let <LinearRTL> =
		    %% Line 383
		    apply 'translate_to_rtl'/2
			(_cor2, _cor1)
		in  do  %% Line 384
			apply 'pp'/6
			    (LinearRTL, _cor3, 'rtl_linear', 'pp_rtl_linear', _cor1, _cor0)
			let <RtlCfg> =
			    %% Line 385
			    apply 'initialize_rtl_cfg'/2
				(LinearRTL, _cor1)
			in  let <RtlCfg0> =
				%% Line 387
				call 'hipe_rtl_cfg':'remove_unreachable_code'
				    (RtlCfg)
			    in  let <RtlCfg1> =
				    %% Line 388
				    call 'hipe_rtl_cfg':'remove_trivial_bbs'
					(RtlCfg0)
				in  let <RtlCfg2> =
					%% Line 390
					apply 'rtl_ssa'/2
					    (RtlCfg1, _cor1)
				    in  let <RtlCfg3> =
					    %% Line 391
					    apply 'rtl_symbolic'/2
						(RtlCfg2, _cor1)
					in  do  %% Line 393
						apply 'pp'/6
						    (RtlCfg3, _cor3, 'rtl_liveness', 'pp_rtl_liveness', _cor1, _cor0)
						let <RtlCfg4> =
						    %% Line 394
						    apply 'rtl_lcm'/2
							(RtlCfg3, _cor1)
						in  let <_cor13> =
							%% Line 399
							case call 'proplists':'get_bool'
								 ('to_llvm', _cor1) of
							  %% Line 400
							  <'false'> when 'true' ->
							      %% Line 401
							      {RtlCfg4,[]}
							  %% Line 402
							  <'true'> when 'true' ->
							      %% Line 403
							      call 'hipe_llvm_liveness':'analyze'
								  (RtlCfg4)
							  ( <_cor12> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor12})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 398
							case _cor13 of
							  <{RtlCfg5,Roots}> when 'true' ->
							      do  %% Line 405
								  apply 'pp'/6
								      (RtlCfg5, _cor3, 'rtl', 'pp_rtl', _cor1, _cor0)
								  let <LinearRTL1> =
								      %% Line 406
								      call 'hipe_rtl_cfg':'linearize'
									  (RtlCfg5)
								  in  let <LinearRTL2> =
									  %% Line 407
									  call 'hipe_rtl_cleanup_const':'cleanup'
									      (LinearRTL1)
								      in  %% Line 409
									  {LinearRTL2,Roots}
							  ( <_cor14> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor14})
							    -| ['compiler_generated'] )
							end
'translate_to_rtl'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	do  %% Line 413
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 414
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([116|[114|[97|[110|[115|[108|[97|[116|[101]]]]]]]]], 'hipe_main')
	      %% Line 414
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 414
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([116|[114|[97|[110|[115|[108|[97|[116|[101]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-translate_to_rtl/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 413
		    call 'hipe_icode2rtl':'translate'
			(_cor1, _cor0)
		in  %% Line 414
		    apply _cor6
			(_cor7)
'initialize_rtl_cfg'/2 =
    %% Line 416
    fun (_cor1,_cor0) ->
	do  %% Line 417
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([116|[111|[32|[99|[102|[103]]]]]], 'hipe_main')
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 417
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([116|[111|[32|[99|[102|[103]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-initialize_rtl_cfg/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 417
		    call 'hipe_rtl_cfg':'init'
			(_cor1)
		in  %% Line 417
		    apply _cor6
			(_cor7)
'rtl_symbolic'/2 =
    %% Line 419
    fun (_cor1,_cor0) ->
	do  %% Line 420
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 421
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([69|[120|[112|[97|[110|[115|[105|[111|[110|[32|[111|[102|[32|[115|[121|[109|[98|[111|[108|[105|[99|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 421
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 421
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([69|[120|[112|[97|[110|[115|[105|[111|[110|[32|[111|[102|[32|[115|[121|[109|[98|[111|[108|[105|[99|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-rtl_symbolic/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 420
		    call 'hipe_rtl_symbolic':'expand'
			(_cor1)
		in  %% Line 421
		    apply _cor6
			(_cor7)
'rtl_ssa'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	%% Line 444
	case call 'proplists':'get_bool'
		 ('rtl_ssa', _cor0) of
	  %% Line 445
	  <'true'> when 'true' ->
	      do  %% Line 446
		  call 'hipe_timing':'start_optional_timer'
		      ([82|[84|[76|[32|[83|[83|[65|[32|[112|[97|[115|[115|[101|[115]]]]]]]]]]]]]], 'hipe_main')
		  let <RtlSSA0> =
		      %% Line 447
		      apply 'rtl_ssa_convert'/2
			  (_cor1, _cor0)
		  in  let <RtlSSA1> =
			  %% Line 448
			  apply 'rtl_ssa_const_prop'/2
			      (RtlSSA0, _cor0)
		      in  let <RtlSSA2> =
			      %% Line 450
			      apply 'rtl_ssa_dead_code_elimination'/2
				  (RtlSSA1, _cor0)
			  in  let <RtlSSA3> =
				  %% Line 451
				  apply 'rtl_ssa_avail_expr'/2
				      (RtlSSA2, _cor0)
			      in  let <RtlSSA4> =
				      %% Line 452
				      apply 'rtl_ssapre'/2
					  (RtlSSA3, _cor0)
				  in  let <RtlCfg> =
					  %% Line 454
					  apply 'rtl_ssa_unconvert'/2
					      (RtlSSA4, _cor0)
				      in  do  %% Line 455
					      case call 'proplists':'get_bool'
						       ('pp_rtl_ssa', _cor0) of
						%% Line 456
						<'true'> when 'true' ->
						    do  %% Line 457
							call 'io':'format'
							    ([37|[37|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[32|[65|[102|[116|[101|[114|[32|[32|[83|[83|[65|[32|[117|[110|[45|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110|[32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							%% Line 458
							call 'hipe_rtl_cfg':'pp'
							    (RtlCfg)
						%% Line 459
						<'false'> when 'true' ->
						    'ok'
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor8})
						  -| ['compiler_generated'] )
					      end
					      do  %% Line 462
						  call 'hipe_timing':'stop_optional_timer'
						      ([82|[84|[76|[32|[83|[83|[65|[32|[112|[97|[115|[115|[101|[115]]]]]]]]]]]]]], 'hipe_main')
						  %% Line 463
						  RtlCfg
	  %% Line 464
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'rtl_ssa_convert'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	%% Line 469
	case call 'proplists':'get_bool'
		 ('pp_rtl_ssa', _cor0) of
	  %% Line 470
	  <'true'> when 'true' ->
	      do  %% Line 471
		  call 'io':'format'
		      ([37|[37|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[32|[66|[101|[102|[111|[114|[101|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110|[32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  do  %% Line 472
		      call 'hipe_rtl_cfg':'pp'
			  (_cor1)
		      do  %% Line 473
			  call 'io':'format'
			      ([37|[37|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[32|[65|[102|[116|[101|[114|[32|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110|[32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  let <RtlCfgSSA> =
			      %% Line 474
			      call 'hipe_rtl_ssa':'convert'
				  (_cor1)
			  in  do  %% Line 475
				  call 'hipe_rtl_cfg':'pp'
				      (RtlCfgSSA)
				  do  %% Line 476
				      call 'io':'format'
					  ([37|[37|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[32|[83|[83|[65|[32|[99|[104|[101|[99|[107|[32|[119|[97|[114|[110|[105|[110|[103|[115|[32|[98|[101|[108|[111|[119|[32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				      do  %% Line 477
					  call 'hipe_rtl_ssa':'check'
					      (RtlCfgSSA)
					  %% Line 478
					  RtlCfgSSA
	  %% Line 479
	  <'false'> when 'true' ->
	      do  %% Line 480
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 481
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([82|[84|[76|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 481
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
		  let <_cor7> =
		      %% Line 481
		      ( fun (_cor5) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([82|[84|[76|[32|[83|[83|[65|[32|[99|[111|[110|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor4})
				    -| ['compiler_generated'] )
				end
				_cor5
			-| [{'id',{0,0,'-rtl_ssa_convert/2-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 480
			  call 'hipe_rtl_ssa':'convert'
			      (_cor1)
		      in  %% Line 481
			  apply _cor7
			      (_cor8)
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'rtl_ssa_const_prop'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	%% Line 485
	case call 'proplists':'get_bool'
		 ('rtl_ssa_const_prop', _cor0) of
	  %% Line 486
	  <'true'> when 'true' ->
	      do  %% Line 487
		  case call 'proplists':'get_bool'
			   ('time', _cor0) of
		    %% Line 488
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([82|[84|[76|[32|[83|[83|[65|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		    %% Line 488
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  let <_cor6> =
		      %% Line 488
		      ( fun (_cor4) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor0) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([82|[84|[76|[32|[83|[83|[65|[32|[115|[112|[97|[114|[115|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116|[32|[112|[114|[111|[112|[97|[103|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor3})
				    -| ['compiler_generated'] )
				end
				_cor4
			-| [{'id',{0,0,'-rtl_ssa_const_prop/2-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 487
			  call 'hipe_rtl_ssa_const_prop':'propagate'
			      (_cor1)
		      in  %% Line 488
			  apply _cor6
			      (_cor7)
	  %% Line 489
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'rtl_ssa_dead_code_elimination'/2 =
    %% Line 493
    fun (_cor1,_cor0) ->
	do  %% Line 494
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 495
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([82|[84|[76|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 495
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 495
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([82|[84|[76|[32|[83|[83|[65|[32|[100|[101|[97|[100|[32|[99|[111|[100|[101|[32|[101|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-rtl_ssa_dead_code_elimination/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 494
		    call 'hipe_rtl_ssa':'remove_dead_code'
			(_cor1)
		in  %% Line 495
		    apply _cor6
			(_cor7)
'rtl_ssa_avail_expr'/2 =
    %% Line 497
    fun (_cor1,_cor0) ->
	do  %% Line 498
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 499
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([82|[84|[76|[32|[83|[83|[65|[32|[104|[101|[97|[112|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 499
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 499
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([82|[84|[76|[32|[83|[83|[65|[32|[104|[101|[97|[112|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-rtl_ssa_avail_expr/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 498
		    call 'hipe_rtl_ssa_avail_expr':'cfg'
			(_cor1)
		in  %% Line 499
		    apply _cor6
			(_cor7)
'rtl_ssapre'/2 =
    %% Line 503
    fun (_cor1,_cor0) ->
	%% Line 504
	case call 'proplists':'get_bool'
		 ('rtl_ssapre', _cor0) of
	  %% Line 505
	  <'true'> when 'true' ->
	      do  %% Line 506
		  call 'hipe_timing':'start_optional_timer'
		      ([80|[97|[114|[116|[105|[97|[108|[32|[82|[101|[100|[117|[110|[100|[97|[110|[99|[121|[32|[69|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[40|[65|[45|[83|[83|[65|[80|[82|[69|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		  let <NewRtlCfg> =
		      %% Line 507
		      call 'hipe_rtl_ssapre':'rtl_ssapre'
			  (_cor1, _cor0)
		  in  do  %% Line 508
			  call 'hipe_timing':'stop_optional_timer'
			      ([80|[97|[114|[116|[105|[97|[108|[32|[82|[101|[100|[117|[110|[100|[97|[110|[99|[121|[32|[69|[108|[105|[109|[105|[110|[97|[116|[105|[111|[110|[32|[40|[65|[45|[83|[83|[65|[80|[82|[69|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			  %% Line 509
			  NewRtlCfg
	  %% Line 510
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'rtl_ssa_unconvert'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	do  %% Line 517
	    case call 'proplists':'get_bool'
		     ('time', _cor0) of
	      %% Line 518
	      <'true'> when 'true' ->
		  call 'hipe_timing':'start'
		      ([82|[84|[76|[32|[83|[83|[65|[32|[117|[110|[45|[99|[111|[110|[118|[101|[114|[116]]]]]]]]]]]]]]]]]], 'hipe_main')
	      %% Line 518
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    let <_cor6> =
		%% Line 518
		( fun (_cor4) ->
		      do  case call 'proplists':'get_bool'
				   ('time', _cor0) of
			    <'true'> when 'true' ->
				call 'hipe_timing':'stop'
				    ([82|[84|[76|[32|[83|[83|[65|[32|[117|[110|[45|[99|[111|[110|[118|[101|[114|[116]]]]]]]]]]]]]]]]]], 'hipe_main')
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
			  _cor4
		  -| [{'id',{0,0,'-rtl_ssa_unconvert/2-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 517
		    call 'hipe_rtl_ssa':'unconvert'
			(_cor1)
		in  %% Line 518
		    apply _cor6
			(_cor7)
'rtl_lcm'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	%% Line 523
	case call 'proplists':'get_bool'
		 ('rtl_lcm', _cor0) of
	  %% Line 524
	  <'true'> when 'true' ->
	      do  %% Line 525
		  call 'hipe_timing':'start_optional_timer'
		      ([82|[84|[76|[32|[108|[97|[122|[121|[32|[99|[111|[100|[101|[32|[109|[111|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]], 'hipe_main')
		  let <RtlCfg1> =
		      %% Line 528
		      call 'hipe_rtl_lcm':'rtl_lcm'
			  (_cor1, _cor0)
		  in  do  %% Line 529
			  call 'hipe_timing':'stop_optional_timer'
			      ([82|[84|[76|[32|[108|[97|[122|[121|[32|[99|[111|[100|[101|[32|[109|[111|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]], 'hipe_main')
			  %% Line 530
			  RtlCfg1
	  %% Line 531
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'rtl_to_native'/4 =
    %% Line 539
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 540
	    call 'hipe_timing':'start_optional_timer'
		([78|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101]]]]]]]]]]], 'hipe_main')
	    let <_cor5> =
		%% Line 542
		case call 'erlang':'get'
			 ('hipe_target_arch') of
		  %% Line 543
		  <'ultrasparc'> when 'true' ->
		      %% Line 544
		      call 'hipe_sparc_main':'rtl_to_sparc'
			  (_cor3, _cor2, _cor1)
		  %% Line 545
		  <'powerpc'> when 'true' ->
		      %% Line 546
		      call 'hipe_ppc_main':'rtl_to_ppc'
			  (_cor3, _cor2, _cor1)
		  %% Line 547
		  <'ppc64'> when 'true' ->
		      %% Line 548
		      call 'hipe_ppc_main':'rtl_to_ppc'
			  (_cor3, _cor2, _cor1)
		  %% Line 549
		  <'arm'> when 'true' ->
		      %% Line 550
		      call 'hipe_arm_main':'rtl_to_arm'
			  (_cor3, _cor2, _cor1)
		  %% Line 551
		  <'x86'> when 'true' ->
		      %% Line 552
		      call 'hipe_x86_main':'rtl_to_x86'
			  (_cor3, _cor2, _cor1)
		  %% Line 553
		  <'amd64'> when 'true' ->
		      %% Line 554
		      call 'hipe_amd64_main':'rtl_to_amd64'
			  (_cor3, _cor2, _cor1)
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor4})
		    -| ['compiler_generated'] )
		end
	    in  do  %% Line 556
		    call 'hipe_timing':'stop_optional_timer'
			([78|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101]]]]]]]]]]], 'hipe_main')
		    do  %% Line 557
			call 'erlang':'put'
			    ('hipe_debug', _cor0)
			_cor5
'rtl_to_llvm_to_binary'/5 =
    %% Line 561
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 562
	    call 'hipe_timing':'start_optional_timer'
		([76|[76|[86|[77|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]], 'hipe_main')
	    let <BinaryCode> =
		%% Line 566
		call 'hipe_llvm_main':'rtl_to_native'
		    (_cor4, _cor3, _cor2, _cor1)
	    in  do  %% Line 567
		    call 'hipe_timing':'stop_optional_timer'
			([76|[76|[86|[77|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]], 'hipe_main')
		    do  %% Line 568
			call 'erlang':'put'
			    ('hipe_debug', _cor0)
			%% Line 569
			{'llvm_binary',BinaryCode}
'debug'/3 =
    %% Line 575
    fun (_cor2,_cor1,_cor0) ->
	%% Line 576
	case call 'proplists':'get_bool'
		 ('debug', _cor0) of
	  <'true'> when 'true' ->
	      let <_cor3> =
		  [41|[62|[32|_cor2]]]
	      in  let <_cor4> =
		      [51|[46|[49|[49|_cor3]]]]
		  in  let <_cor5> =
			  call 'erlang':'++'
			      ([60|[72|[105|[80|[69|[32|[40|[118|[32]]]]]]]]], _cor4)
		      in  call 'io':'format'
			      (_cor5, _cor1)
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'hash'/1 =
    %% Line 578
    fun (_cor0) ->
	%% Line 579
	call 'erlang':'phash'
	    (_cor0, 133428721)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_main')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_main', _cor0)
end