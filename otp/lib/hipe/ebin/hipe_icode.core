module 'hipe_icode' ['annotate_variable'/2,
		     'args'/1,
		     'begin_handler_dstlist'/1,
		     'begin_try_label'/1,
		     'begin_try_successor'/1,
		     'call_args'/1,
		     'call_args_update'/2,
		     'call_continuation'/1,
		     'call_dstlist'/1,
		     'call_dstlist_update'/2,
		     'call_fail_label'/1,
		     'call_fun'/1,
		     'call_fun_update'/2,
		     'call_in_guard'/1,
		     'call_set_continuation'/2,
		     'call_set_fail_label'/2,
		     'call_type'/1,
		     'comment_text'/1,
		     'const_value'/1,
		     'defines'/1,
		     'enter_args'/1,
		     'enter_args_update'/2,
		     'enter_fun'/1,
		     'enter_fun_update'/2,
		     'enter_type'/1,
		     'fail_args'/1,
		     'fail_class'/1,
		     'fail_label'/1,
		     'fail_set_label'/2,
		     'fails_to'/1,
		     'fvar_name'/1,
		     'goto_label'/1,
		     'highest_label'/1,
		     'highest_var'/1,
		     'icode_closure_arity'/1,
		     'icode_closure_arity_update'/2,
		     'icode_code'/1,
		     'icode_code_update'/2,
		     'icode_data'/1,
		     'icode_fun'/1,
		     'icode_info'/1,
		     'icode_info_update'/2,
		     'icode_is_closure'/1,
		     'icode_is_leaf'/1,
		     'icode_label_range'/1,
		     'icode_params'/1,
		     'icode_params_update'/2,
		     'icode_var_range'/1,
		     'if_args'/1,
		     'if_false_label'/1,
		     'if_op'/1,
		     'if_op_update'/2,
		     'if_pred'/1,
		     'if_true_label'/1,
		     'is_annotated_variable'/1,
		     'is_branch'/1,
		     'is_call'/1,
		     'is_comment'/1,
		     'is_const'/1,
		     'is_enter'/1,
		     'is_fvar'/1,
		     'is_goto'/1,
		     'is_label'/1,
		     'is_move'/1,
		     'is_phi'/1,
		     'is_reg'/1,
		     'is_return'/1,
		     'is_safe'/1,
		     'is_type'/1,
		     'is_var'/1,
		     'is_variable'/1,
		     'label_name'/1,
		     'mk_begin_handler'/1,
		     'mk_begin_try'/2,
		     'mk_call'/5,
		     'mk_call'/8,
		     'mk_comment'/1,
		     'mk_const'/1,
		     'mk_end_try'/0,
		     'mk_enter'/4,
		     'mk_enter_primop'/2,
		     'mk_fail'/2,
		     'mk_fvar'/1,
		     'mk_goto'/1,
		     'mk_guardop'/5,
		     'mk_icode'/7,
		     'mk_icode'/8,
		     'mk_if'/4,
		     'mk_label'/1,
		     'mk_move'/2,
		     'mk_new_fvar'/0,
		     'mk_new_label'/0,
		     'mk_new_reg'/0,
		     'mk_new_var'/0,
		     'mk_phi'/1,
		     'mk_phi'/2,
		     'mk_primop'/3,
		     'mk_primop'/5,
		     'mk_reg'/1,
		     'mk_return'/1,
		     'mk_switch_tuple_arity'/4,
		     'mk_switch_val'/4,
		     'mk_type'/4,
		     'mk_type'/5,
		     'mk_var'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'move_dst'/1,
		     'move_src'/1,
		     'move_src_update'/2,
		     'phi_arg'/2,
		     'phi_arglist'/1,
		     'phi_dst'/1,
		     'phi_enter_pred'/3,
		     'phi_id'/1,
		     'phi_redirect_pred'/3,
		     'phi_remove_pred'/2,
		     'redirect_jmp'/3,
		     'reg_is_gcsafe'/1,
		     'reg_name'/1,
		     'return_vars'/1,
		     'strip_comments'/1,
		     'subst'/2,
		     'subst_defines'/2,
		     'subst_uses'/2,
		     'successors'/1,
		     'switch_tuple_arity_cases'/1,
		     'switch_tuple_arity_cases_update'/2,
		     'switch_tuple_arity_fail_label'/1,
		     'switch_tuple_arity_fail_label_update'/2,
		     'switch_tuple_arity_term'/1,
		     'switch_val_cases'/1,
		     'switch_val_cases_update'/2,
		     'switch_val_fail_label'/1,
		     'switch_val_term'/1,
		     'type_args'/1,
		     'type_false_label'/1,
		     'type_pred'/1,
		     'type_test'/1,
		     'type_true_label'/1,
		     'unannotate_variable'/1,
		     'uses'/1,
		     'var_name'/1,
		     'variable_annotation'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 612
		'export_type' =
		    %% Line 612
		    [{'icode',0}],
		%% Line 620
		'spec' =
		    %% Line 620
		    [{{'mk_icode',7},[{'type',620,'fun',[{'type',620,'product',[{'type',620,'mfa',[]}|[{'type',620,'list',[{'type',620,'icode_var',[]}]}|[{'type',620,'boolean',[]}|[{'type',620,'boolean',[]}|[{'type',620,'list',[{'type',620,'icode_instr',[]}]}|[{'type',621,'tuple',[{'type',621,'non_neg_integer',[]}|[{'type',621,'non_neg_integer',[]}]]}|[{'type',622,'tuple',[{'type',622,'icode_lbl',[]}|[{'type',622,'icode_lbl',[]}]]}]]]]]]]}|[{'type',622,'icode',[]}]]}]}],
		%% Line 631
		'spec' =
		    %% Line 631
		    [{{'mk_icode',8},[{'type',631,'fun',[{'type',631,'product',[{'type',631,'mfa',[]}|[{'type',631,'list',[{'type',631,'icode_var',[]}]}|[{'type',631,'boolean',[]}|[{'type',631,'boolean',[]}|[{'type',631,'list',[{'type',631,'icode_instr',[]}]}|[{'type',632,'hipe_consttab',[]}|[{'type',632,'tuple',[{'type',632,'non_neg_integer',[]}|[{'type',632,'non_neg_integer',[]}]]}|[{'type',633,'tuple',[{'type',633,'icode_lbl',[]}|[{'type',633,'icode_lbl',[]}]]}]]]]]]]]}|[{'type',633,'record',[{'atom',633,'icode'}]}]]}]}],
		%% Line 639
		'spec' =
		    %% Line 639
		    [{{'icode_fun',1},[{'type',639,'fun',[{'type',639,'product',[{'type',639,'record',[{'atom',639,'icode'}]}]}|[{'type',639,'mfa',[]}]]}]}],
		%% Line 642
		'spec' =
		    %% Line 642
		    [{{'icode_params',1},[{'type',642,'fun',[{'type',642,'product',[{'type',642,'record',[{'atom',642,'icode'}]}]}|[{'type',642,'list',[{'type',642,'icode_var',[]}]}]]}]}],
		%% Line 645
		'spec' =
		    %% Line 645
		    [{{'icode_params_update',2},[{'type',645,'fun',[{'type',645,'product',[{'type',645,'record',[{'atom',645,'icode'}]}|[{'type',645,'list',[{'type',645,'icode_var',[]}]}]]}|[{'type',645,'record',[{'atom',645,'icode'}]}]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'icode_is_closure',1},[{'type',649,'fun',[{'type',649,'product',[{'type',649,'record',[{'atom',649,'icode'}]}]}|[{'type',649,'boolean',[]}]]}]}],
		%% Line 652
		'spec' =
		    %% Line 652
		    [{{'icode_is_leaf',1},[{'type',652,'fun',[{'type',652,'product',[{'type',652,'record',[{'atom',652,'icode'}]}]}|[{'type',652,'boolean',[]}]]}]}],
		%% Line 655
		'spec' =
		    %% Line 655
		    [{{'icode_code',1},[{'type',655,'fun',[{'type',655,'product',[{'type',655,'record',[{'atom',655,'icode'}]}]}|[{'type',655,'icode_instrs',[]}]]}]}],
		%% Line 658
		'spec' =
		    %% Line 658
		    [{{'icode_code_update',2},[{'type',658,'fun',[{'type',658,'product',[{'type',658,'record',[{'atom',658,'icode'}]}|[{'type',658,'icode_instrs',[]}]]}|[{'type',658,'record',[{'atom',658,'icode'}]}]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'icode_data',1},[{'type',664,'fun',[{'type',664,'product',[{'type',664,'record',[{'atom',664,'icode'}]}]}|[{'type',664,'hipe_consttab',[]}]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'icode_var_range',1},[{'type',670,'fun',[{'type',670,'product',[{'type',670,'record',[{'atom',670,'icode'}]}]}|[{'type',670,'tuple',[{'type',670,'non_neg_integer',[]}|[{'type',670,'non_neg_integer',[]}]]}]]}]}],
		%% Line 673
		'spec' =
		    %% Line 673
		    [{{'icode_label_range',1},[{'type',673,'fun',[{'type',673,'product',[{'type',673,'record',[{'atom',673,'icode'}]}]}|[{'type',673,'tuple',[{'type',673,'non_neg_integer',[]}|[{'type',673,'non_neg_integer',[]}]]}]]}]}],
		%% Line 676
		'spec' =
		    %% Line 676
		    [{{'icode_info',1},[{'type',676,'fun',[{'type',676,'product',[{'type',676,'record',[{'atom',676,'icode'}]}]}|[{'type',676,'icode_info',[]}]]}]}],
		%% Line 679
		'spec' =
		    %% Line 679
		    [{{'icode_info_update',2},[{'type',679,'fun',[{'type',679,'product',[{'type',679,'record',[{'atom',679,'icode'}]}|[{'type',679,'icode_info',[]}]]}|[{'type',679,'record',[{'atom',679,'icode'}]}]]}]}],
		%% Line 682
		'spec' =
		    %% Line 682
		    [{{'icode_closure_arity',1},[{'type',682,'fun',[{'type',682,'product',[{'type',682,'record',[{'atom',682,'icode'}]}]}|[{'type',682,'arity',[]}]]}]}],
		%% Line 685
		'spec' =
		    %% Line 685
		    [{{'icode_closure_arity_update',2},[{'type',685,'fun',[{'type',685,'product',[{'type',685,'record',[{'atom',685,'icode'}]}|[{'type',685,'arity',[]}]]}|[{'type',685,'record',[{'atom',685,'icode'}]}]]}]}],
		%% Line 697
		'spec' =
		    %% Line 697
		    [{{'mk_if',4},[{'type',697,'fun',[{'type',697,'product',[{'type',697,'icode_if_op',[]}|[{'type',697,'list',[{'type',697,'icode_term_arg',[]}]}|[{'type',698,'icode_lbl',[]}|[{'type',698,'icode_lbl',[]}]]]]}|[{'type',698,'record',[{'atom',698,'icode_if'}]}]]}]}],
		%% Line 704
		'spec' =
		    %% Line 704
		    [{{'if_op',1},[{'type',704,'fun',[{'type',704,'product',[{'type',704,'record',[{'atom',704,'icode_if'}]}]}|[{'type',704,'icode_if_op',[]}]]}]}],
		%% Line 707
		'spec' =
		    %% Line 707
		    [{{'if_op_update',2},[{'type',707,'fun',[{'type',707,'product',[{'type',707,'record',[{'atom',707,'icode_if'}]}|[{'type',707,'icode_if_op',[]}]]}|[{'type',707,'record',[{'atom',707,'icode_if'}]}]]}]}],
		%% Line 710
		'spec' =
		    %% Line 710
		    [{{'if_args',1},[{'type',710,'fun',[{'type',710,'product',[{'type',710,'record',[{'atom',710,'icode_if'}]}]}|[{'type',710,'list',[{'type',710,'icode_term_arg',[]}]}]]}]}],
		%% Line 713
		'spec' =
		    %% Line 713
		    [{{'if_true_label',1},[{'type',713,'fun',[{'type',713,'product',[{'type',713,'record',[{'atom',713,'icode_if'}]}]}|[{'type',713,'icode_lbl',[]}]]}]}],
		%% Line 716
		'spec' =
		    %% Line 716
		    [{{'if_true_label_update',2},[{'type',716,'fun',[{'type',716,'product',[{'type',716,'record',[{'atom',716,'icode_if'}]}|[{'type',716,'icode_lbl',[]}]]}|[{'type',716,'record',[{'atom',716,'icode_if'}]}]]}]}],
		%% Line 719
		'spec' =
		    %% Line 719
		    [{{'if_false_label',1},[{'type',719,'fun',[{'type',719,'product',[{'type',719,'record',[{'atom',719,'icode_if'}]}]}|[{'type',719,'icode_lbl',[]}]]}]}],
		%% Line 722
		'spec' =
		    %% Line 722
		    [{{'if_false_label_update',2},[{'type',722,'fun',[{'type',722,'product',[{'type',722,'record',[{'atom',722,'icode_if'}]}|[{'type',722,'icode_lbl',[]}]]}|[{'type',722,'record',[{'atom',722,'icode_if'}]}]]}]}],
		%% Line 725
		'spec' =
		    %% Line 725
		    [{{'if_pred',1},[{'type',725,'fun',[{'type',725,'product',[{'type',725,'record',[{'atom',725,'icode_if'}]}]}|[{'type',725,'float',[]}]]}]}],
		%% Line 732
		'spec' =
		    %% Line 732
		    [{{'mk_switch_val',4},[{'type',732,'fun',[{'type',732,'product',[{'type',732,'icode_var',[]}|[{'type',732,'icode_lbl',[]}|[{'type',733,'non_neg_integer',[]}|[{'type',733,'list',[{'type',733,'icode_switch_case',[]}]}]]]]}|[{'type',734,'record',[{'atom',734,'icode_switch_val'}]}]]}]}],
		%% Line 738
		'spec' =
		    %% Line 738
		    [{{'switch_val_term',1},[{'type',738,'fun',[{'type',738,'product',[{'type',738,'record',[{'atom',738,'icode_switch_val'}]}]}|[{'type',738,'icode_var',[]}]]}]}],
		%% Line 741
		'spec' =
		    %% Line 741
		    [{{'switch_val_fail_label',1},[{'type',741,'fun',[{'type',741,'product',[{'type',741,'record',[{'atom',741,'icode_switch_val'}]}]}|[{'type',741,'icode_lbl',[]}]]}]}],
		%% Line 744
		'spec' =
		    %% Line 744
		    [{{'switch_val_fail_label_update',2},[{'type',744,'fun',[{'type',744,'product',[{'type',744,'record',[{'atom',744,'icode_switch_val'}]}|[{'type',744,'icode_lbl',[]}]]}|[{'type',745,'record',[{'atom',745,'icode_switch_val'}]}]]}]}],
		%% Line 751
		'spec' =
		    %% Line 751
		    [{{'switch_val_cases',1},[{'type',751,'fun',[{'type',751,'product',[{'type',751,'record',[{'atom',751,'icode_switch_val'}]}]}|[{'type',751,'list',[{'type',751,'icode_switch_case',[]}]}]]}]}],
		%% Line 754
		'spec' =
		    %% Line 754
		    [{{'switch_val_cases_update',2},[{'type',754,'fun',[{'type',754,'product',[{'type',754,'record',[{'atom',754,'icode_switch_val'}]}|[{'type',754,'list',[{'type',754,'icode_switch_case',[]}]}]]}|[{'type',755,'record',[{'atom',755,'icode_switch_val'}]}]]}]}],
		%% Line 763
		'spec' =
		    %% Line 763
		    [{{'mk_switch_tuple_arity',4},[{'type',763,'fun',[{'type',763,'product',[{'type',763,'icode_var',[]}|[{'type',763,'icode_lbl',[]}|[{'type',764,'non_neg_integer',[]}|[{'type',764,'list',[{'type',764,'icode_switch_case',[]}]}]]]]}|[{'type',765,'record',[{'atom',765,'icode_switch_tuple_arity'}]}]]}]}],
		%% Line 770
		'spec' =
		    %% Line 770
		    [{{'switch_tuple_arity_term',1},[{'type',770,'fun',[{'type',770,'product',[{'type',770,'record',[{'atom',770,'icode_switch_tuple_arity'}]}]}|[{'type',770,'icode_var',[]}]]}]}],
		%% Line 773
		'spec' =
		    %% Line 773
		    [{{'switch_tuple_arity_fail_label',1},[{'type',773,'fun',[{'type',773,'product',[{'type',773,'record',[{'atom',773,'icode_switch_tuple_arity'}]}]}|[{'type',773,'icode_lbl',[]}]]}]}],
		%% Line 777
		'spec' =
		    %% Line 777
		    [{{'switch_tuple_arity_fail_label_update',2},[{'type',777,'fun',[{'type',777,'product',[{'type',777,'record',[{'atom',777,'icode_switch_tuple_arity'}]}|[{'type',777,'icode_lbl',[]}]]}|[{'type',778,'record',[{'atom',778,'icode_switch_tuple_arity'}]}]]}]}],
		%% Line 784
		'spec' =
		    %% Line 784
		    [{{'switch_tuple_arity_cases',1},[{'type',784,'fun',[{'type',784,'product',[{'type',784,'record',[{'atom',784,'icode_switch_tuple_arity'}]}]}|[{'type',784,'list',[{'type',784,'icode_switch_case',[]}]}]]}]}],
		%% Line 787
		'spec' =
		    %% Line 787
		    [{{'switch_tuple_arity_cases_update',2},[{'type',787,'fun',[{'type',787,'product',[{'type',787,'record',[{'atom',787,'icode_switch_tuple_arity'}]}|[{'type',788,'list',[{'type',788,'icode_switch_case',[]}]}]]}|[{'type',789,'record',[{'atom',789,'icode_switch_tuple_arity'}]}]]}]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'mk_type',4},[{'type',797,'fun',[{'type',797,'product',[{'type',797,'list',[{'type',797,'icode_term_arg',[]}]}|[{'type',797,'icode_type_test',[]}|[{'type',797,'icode_lbl',[]}|[{'type',797,'icode_lbl',[]}]]]]}|[{'type',798,'record',[{'atom',798,'icode_type'}]}]]}]}],
		%% Line 802
		'spec' =
		    %% Line 802
		    [{{'mk_type',5},[{'type',802,'fun',[{'type',802,'product',[{'type',802,'list',[{'type',802,'icode_term_arg',[]}]}|[{'type',802,'icode_type_test',[]}|[{'type',803,'icode_lbl',[]}|[{'type',803,'icode_lbl',[]}|[{'type',803,'float',[]}]]]]]}|[{'type',803,'record',[{'atom',803,'icode_type'}]}]]}]}],
		%% Line 808
		'spec' =
		    %% Line 808
		    [{{'type_test',1},[{'type',808,'fun',[{'type',808,'product',[{'type',808,'record',[{'atom',808,'icode_type'}]}]}|[{'type',808,'icode_type_test',[]}]]}]}],
		%% Line 811
		'spec' =
		    %% Line 811
		    [{{'type_args',1},[{'type',811,'fun',[{'type',811,'product',[{'type',811,'record',[{'atom',811,'icode_type'}]}]}|[{'type',811,'list',[{'type',811,'icode_term_arg',[]}]}]]}]}],
		%% Line 816
		'spec' =
		    %% Line 816
		    [{{'type_true_label',1},[{'type',816,'fun',[{'type',816,'product',[{'type',816,'record',[{'atom',816,'icode_type'}]}]}|[{'type',816,'icode_lbl',[]}]]}]}],
		%% Line 819
		'spec' =
		    %% Line 819
		    [{{'type_false_label',1},[{'type',819,'fun',[{'type',819,'product',[{'type',819,'record',[{'atom',819,'icode_type'}]}]}|[{'type',819,'icode_lbl',[]}]]}]}],
		%% Line 822
		'spec' =
		    %% Line 822
		    [{{'type_pred',1},[{'type',822,'fun',[{'type',822,'product',[{'type',822,'record',[{'atom',822,'icode_type'}]}]}|[{'type',822,'float',[]}]]}]}],
		%% Line 825
		'spec' =
		    %% Line 825
		    [{{'is_type',1},[{'type',825,'fun',[{'type',825,'product',[{'type',825,'icode_instr',[]}]}|[{'type',825,'boolean',[]}]]}]}],
		%% Line 833
		'spec' =
		    %% Line 833
		    [{{'mk_goto',1},[{'type',833,'fun',[{'type',833,'product',[{'type',833,'icode_lbl',[]}]}|[{'type',833,'record',[{'atom',833,'icode_goto'}]}]]}]}],
		%% Line 836
		'spec' =
		    %% Line 836
		    [{{'goto_label',1},[{'type',836,'fun',[{'type',836,'product',[{'type',836,'record',[{'atom',836,'icode_goto'}]}]}|[{'type',836,'icode_lbl',[]}]]}]}],
		%% Line 839
		'spec' =
		    %% Line 839
		    [{{'is_goto',1},[{'type',839,'fun',[{'type',839,'product',[{'type',839,'icode_instr',[]}]}|[{'type',839,'boolean',[]}]]}]}],
		%% Line 847
		'spec' =
		    %% Line 847
		    [{{'mk_return',1},[{'type',847,'fun',[{'type',847,'product',[{'type',847,'list',[{'type',847,'icode_var',[]}]}]}|[{'type',847,'record',[{'atom',847,'icode_return'}]}]]}]}],
		%% Line 850
		'spec' =
		    %% Line 850
		    [{{'return_vars',1},[{'type',850,'fun',[{'type',850,'product',[{'type',850,'record',[{'atom',850,'icode_return'}]}]}|[{'type',850,'list',[{'type',850,'icode_var',[]}]}]]}]}],
		%% Line 853
		'spec' =
		    %% Line 853
		    [{{'is_return',1},[{'type',853,'fun',[{'type',853,'product',[{'type',853,'icode_instr',[]}]}|[{'type',853,'boolean',[]}]]}]}],
		%% Line 863
		'spec' =
		    %% Line 863
		    [{{'mk_fail',2},[{'type',863,'fun',[{'type',863,'product',[{'type',863,'list',[{'type',863,'icode_term_arg',[]}]}|[{'type',863,'icode_exit_class',[]}]]}|[{'type',863,'record',[{'atom',863,'icode_fail'}]}]]}]}],
		%% Line 876
		'spec' =
		    %% Line 876
		    [{{'fail_class',1},[{'type',876,'fun',[{'type',876,'product',[{'type',876,'record',[{'atom',876,'icode_fail'}]}]}|[{'type',876,'icode_exit_class',[]}]]}]}],
		%% Line 879
		'spec' =
		    %% Line 879
		    [{{'fail_args',1},[{'type',879,'fun',[{'type',879,'product',[{'type',879,'record',[{'atom',879,'icode_fail'}]}]}|[{'type',879,'list',[{'type',879,'icode_term_arg',[]}]}]]}]}],
		%% Line 882
		'spec' =
		    %% Line 882
		    [{{'fail_label',1},[{'type',882,'fun',[{'type',882,'product',[{'type',882,'record',[{'atom',882,'icode_fail'}]}]}|[{'type',882,'union',[{'type',882,'nil',[]}|[{'type',882,'icode_lbl',[]}]]}]]}]}],
		%% Line 885
		'spec' =
		    %% Line 885
		    [{{'fail_set_label',2},[{'type',885,'fun',[{'type',885,'product',[{'type',885,'record',[{'atom',885,'icode_fail'}]}|[{'type',885,'union',[{'type',885,'nil',[]}|[{'type',885,'icode_lbl',[]}]]}]]}|[{'type',885,'record',[{'atom',885,'icode_fail'}]}]]}]}],
		%% Line 893
		'spec' =
		    %% Line 893
		    [{{'mk_move',2},[{'type',893,'fun',[{'type',893,'product',[{'type',893,'record',[{'atom',893,'icode_variable'}]}|[{'type',893,'union',[{'type',893,'record',[{'atom',893,'icode_variable'}]}|[{'type',893,'record',[{'atom',893,'icode_const'}]}]]}]]}|[{'type',894,'record',[{'atom',894,'icode_move'}]}]]}]}],
		%% Line 902
		'spec' =
		    %% Line 902
		    [{{'move_dst',1},[{'type',902,'fun',[{'type',902,'product',[{'type',902,'record',[{'atom',902,'icode_move'}]}]}|[{'type',902,'record',[{'atom',902,'icode_variable'}]}]]}]}],
		%% Line 905
		'spec' =
		    %% Line 905
		    [{{'move_src',1},[{'type',905,'fun',[{'type',905,'product',[{'type',905,'record',[{'atom',905,'icode_move'}]}]}|[{'type',905,'union',[{'type',905,'record',[{'atom',905,'icode_variable'}]}|[{'type',905,'record',[{'atom',905,'icode_const'}]}]]}]]}]}],
		%% Line 908
		'spec' =
		    %% Line 908
		    [{{'move_src_update',2},[{'type',908,'fun',[{'type',908,'product',[{'type',908,'record',[{'atom',908,'icode_move'}]}|[{'type',908,'union',[{'type',908,'record',[{'atom',908,'icode_variable'}]}|[{'type',908,'record',[{'atom',908,'icode_const'}]}]]}]]}|[{'type',909,'record',[{'atom',909,'icode_move'}]}]]}]}],
		%% Line 912
		'spec' =
		    %% Line 912
		    [{{'is_move',1},[{'type',912,'fun',[{'type',912,'product',[{'type',912,'icode_instr',[]}]}|[{'type',912,'boolean',[]}]]}]}],
		%% Line 922
		'spec' =
		    %% Line 922
		    [{{'mk_phi',1},[{'type',922,'fun',[{'type',922,'product',[{'type',922,'record',[{'atom',922,'icode_variable'}]}]}|[{'type',922,'record',[{'atom',922,'icode_phi'}]}]]}]}],
		%% Line 925
		'spec' =
		    %% Line 925
		    [{{'mk_phi',2},[{'type',925,'fun',[{'type',925,'product',[{'type',925,'record',[{'atom',925,'icode_variable'}]}|[{'type',925,'list',[{'type',925,'tuple',[{'type',925,'icode_lbl',[]}|[{'type',925,'record',[{'atom',925,'icode_variable'}]}]]}]}]]}|[{'type',926,'record',[{'atom',926,'icode_phi'}]}]]}]}],
		%% Line 929
		'spec' =
		    %% Line 929
		    [{{'phi_dst',1},[{'type',929,'fun',[{'type',929,'product',[{'type',929,'record',[{'atom',929,'icode_phi'}]}]}|[{'type',929,'record',[{'atom',929,'icode_variable'}]}]]}]}],
		%% Line 932
		'spec' =
		    %% Line 932
		    [{{'phi_id',1},[{'type',932,'fun',[{'type',932,'product',[{'type',932,'record',[{'atom',932,'icode_phi'}]}]}|[{'type',932,'record',[{'atom',932,'icode_variable'}]}]]}]}],
		%% Line 935
		'spec' =
		    %% Line 935
		    [{{'phi_arglist',1},[{'type',935,'fun',[{'type',935,'product',[{'type',935,'record',[{'atom',935,'icode_phi'}]}]}|[{'type',935,'list',[{'type',935,'tuple',[{'type',935,'icode_lbl',[]}|[{'type',935,'record',[{'atom',935,'icode_variable'}]}]]}]}]]}]}],
		%% Line 938
		'spec' =
		    %% Line 938
		    [{{'phi_args',1},[{'type',938,'fun',[{'type',938,'product',[{'type',938,'record',[{'atom',938,'icode_phi'}]}]}|[{'type',938,'list',[{'type',938,'record',[{'atom',938,'icode_variable'}]}]}]]}]}],
		%% Line 941
		'spec' =
		    %% Line 941
		    [{{'phi_arg',2},[{'type',941,'fun',[{'type',941,'product',[{'type',941,'record',[{'atom',941,'icode_phi'}]}|[{'type',941,'icode_lbl',[]}]]}|[{'type',941,'record',[{'atom',941,'icode_variable'}]}]]}]}],
		%% Line 948
		'spec' =
		    %% Line 948
		    [{{'is_phi',1},[{'type',948,'fun',[{'type',948,'product',[{'type',948,'icode_instr',[]}]}|[{'type',948,'boolean',[]}]]}]}],
		%% Line 952
		'spec' =
		    %% Line 952
		    [{{'phi_enter_pred',3},[{'type',952,'fun',[{'type',952,'product',[{'type',952,'record',[{'atom',952,'icode_phi'}]}|[{'type',952,'icode_lbl',[]}|[{'type',952,'record',[{'atom',952,'icode_variable'}]}]]]}|[{'type',953,'record',[{'atom',953,'icode_phi'}]}]]}]}],
		%% Line 958
		'spec' =
		    %% Line 958
		    [{{'phi_remove_pred',2},[{'type',958,'fun',[{'type',958,'product',[{'type',958,'record',[{'atom',958,'icode_phi'}]}|[{'type',958,'icode_lbl',[]}]]}|[{'type',958,'union',[{'type',958,'record',[{'atom',958,'icode_move'}]}|[{'type',958,'record',[{'atom',958,'icode_phi'}]}]]}]]}]}],
		%% Line 973
		'spec' =
		    %% Line 973
		    [{{'phi_redirect_pred',3},[{'type',973,'fun',[{'type',973,'product',[{'type',973,'record',[{'atom',973,'icode_phi'}]}|[{'type',973,'icode_lbl',[]}|[{'type',973,'icode_lbl',[]}]]]}|[{'type',973,'record',[{'atom',973,'icode_phi'}]}]]}]}],
		%% Line 991
		'spec' =
		    %% Line 991
		    [{{'mk_primop',3},[{'type',991,'fun',[{'type',991,'product',[{'type',991,'list',[{'type',991,'record',[{'atom',991,'icode_variable'}]}]}|[{'type',991,'icode_funcall',[]}|[{'type',992,'list',[{'type',992,'icode_argument',[]}]}]]]}|[{'type',992,'record',[{'atom',992,'icode_call'}]}]]}]}],
		%% Line 996
		'spec' =
		    %% Line 996
		    [{{'mk_primop',5},[{'type',996,'fun',[{'type',996,'product',[{'type',996,'list',[{'type',996,'record',[{'atom',996,'icode_variable'}]}]}|[{'type',996,'icode_funcall',[]}|[{'type',997,'list',[{'type',997,'icode_argument',[]}]}|[{'type',997,'union',[{'type',997,'nil',[]}|[{'type',997,'icode_lbl',[]}]]}|[{'type',997,'union',[{'type',997,'nil',[]}|[{'type',997,'icode_lbl',[]}]]}]]]]]}|[{'type',998,'record',[{'atom',998,'icode_call'}]}]]}]}],
		%% Line 1006
		'spec' =
		    %% Line 1006
		    [{{'mk_guardop',5},[{'type',1006,'fun',[{'type',1006,'product',[{'type',1006,'list',[{'type',1006,'record',[{'atom',1006,'icode_variable'}]}]}|[{'type',1006,'icode_funcall',[]}|[{'type',1007,'list',[{'type',1007,'icode_argument',[]}]}|[{'type',1007,'icode_lbl',[]}|[{'type',1007,'icode_lbl',[]}]]]]]}|[{'type',1007,'record',[{'atom',1007,'icode_call'}]}]]}]}],
		%% Line 1026
		'spec' =
		    %% Line 1026
		    [{{'mk_call',5},[{'type',1026,'fun',[{'type',1026,'product',[{'type',1026,'list',[{'type',1026,'record',[{'atom',1026,'icode_variable'}]}]}|[{'type',1026,'atom',[]}|[{'type',1026,'atom',[]}|[{'type',1027,'list',[{'type',1027,'icode_argument',[]}]}|[{'type',1027,'union',[{'atom',1027,'local'}|[{'atom',1027,'remote'}]]}]]]]]}|[{'type',1027,'record',[{'atom',1027,'icode_call'}]}]]}]}],
		%% Line 1034
		'spec' =
		    %% Line 1034
		    [{{'mk_call',8},[{'type',1034,'fun',[{'type',1034,'product',[{'type',1034,'list',[{'type',1034,'record',[{'atom',1034,'icode_variable'}]}]}|[{'type',1034,'atom',[]}|[{'type',1034,'atom',[]}|[{'type',1034,'list',[{'type',1034,'icode_argument',[]}]}|[{'type',1035,'union',[{'atom',1035,'local'}|[{'atom',1035,'remote'}]]}|[{'type',1035,'union',[{'type',1035,'nil',[]}|[{'type',1035,'icode_lbl',[]}]]}|[{'type',1035,'union',[{'type',1035,'nil',[]}|[{'type',1035,'icode_lbl',[]}]]}|[{'type',1035,'boolean',[]}]]]]]]]]}|[{'type',1036,'record',[{'atom',1036,'icode_call'}]}]]}]}],
		%% Line 1051
		'spec' =
		    %% Line 1051
		    [{{'make_call',7},[{'type',1051,'fun',[{'type',1051,'product',[{'type',1051,'list',[{'type',1051,'record',[{'atom',1051,'icode_variable'}]}]}|[{'type',1051,'icode_funcall',[]}|[{'type',1051,'list',[{'type',1051,'icode_argument',[]}]}|[{'type',1052,'icode_call_type',[]}|[{'type',1052,'union',[{'type',1052,'nil',[]}|[{'type',1052,'icode_lbl',[]}]]}|[{'type',1052,'union',[{'type',1052,'nil',[]}|[{'type',1052,'icode_lbl',[]}]]}|[{'type',1052,'boolean',[]}]]]]]]]}|[{'type',1053,'record',[{'atom',1053,'icode_call'}]}]]}]}],
		%% Line 1058
		'spec' =
		    %% Line 1058
		    [{{'call_dstlist',1},[{'type',1058,'fun',[{'type',1058,'product',[{'type',1058,'record',[{'atom',1058,'icode_call'}]}]}|[{'type',1058,'list',[{'type',1058,'record',[{'atom',1058,'icode_variable'}]}]}]]}]}],
		%% Line 1061
		'spec' =
		    %% Line 1061
		    [{{'call_dstlist_update',2},[{'type',1061,'fun',[{'type',1061,'product',[{'type',1061,'record',[{'atom',1061,'icode_call'}]}|[{'type',1061,'list',[{'type',1061,'record',[{'atom',1061,'icode_variable'}]}]}]]}|[{'type',1061,'record',[{'atom',1061,'icode_call'}]}]]}]}],
		%% Line 1064
		'spec' =
		    %% Line 1064
		    [{{'call_type',1},[{'type',1064,'fun',[{'type',1064,'product',[{'type',1064,'record',[{'atom',1064,'icode_call'}]}]}|[{'type',1064,'icode_call_type',[]}]]}]}],
		%% Line 1070
		'spec' =
		    %% Line 1070
		    [{{'call_args',1},[{'type',1070,'fun',[{'type',1070,'product',[{'type',1070,'record',[{'atom',1070,'icode_call'}]}]}|[{'type',1070,'list',[{'type',1070,'icode_argument',[]}]}]]}]}],
		%% Line 1073
		'spec' =
		    %% Line 1073
		    [{{'call_args_update',2},[{'type',1073,'fun',[{'type',1073,'product',[{'type',1073,'record',[{'atom',1073,'icode_call'}]}|[{'type',1073,'list',[{'type',1073,'icode_argument',[]}]}]]}|[{'type',1073,'record',[{'atom',1073,'icode_call'}]}]]}]}],
		%% Line 1076
		'spec' =
		    %% Line 1076
		    [{{'call_fun',1},[{'type',1076,'fun',[{'type',1076,'product',[{'type',1076,'record',[{'atom',1076,'icode_call'}]}]}|[{'type',1076,'icode_funcall',[]}]]}]}],
		%% Line 1081
		'spec' =
		    %% Line 1081
		    [{{'call_fun_update',2},[{'type',1081,'fun',[{'type',1081,'product',[{'type',1081,'record',[{'atom',1081,'icode_call'}]}|[{'type',1081,'icode_funcall',[]}]]}|[{'type',1081,'record',[{'atom',1081,'icode_call'}]}]]}]}],
		%% Line 1089
		'spec' =
		    %% Line 1089
		    [{{'call_continuation',1},[{'type',1089,'fun',[{'type',1089,'product',[{'type',1089,'record',[{'atom',1089,'icode_call'}]}]}|[{'type',1089,'union',[{'type',1089,'nil',[]}|[{'type',1089,'icode_lbl',[]}]]}]]}]}],
		%% Line 1092
		'spec' =
		    %% Line 1092
		    [{{'call_fail_label',1},[{'type',1092,'fun',[{'type',1092,'product',[{'type',1092,'record',[{'atom',1092,'icode_call'}]}]}|[{'type',1092,'union',[{'type',1092,'nil',[]}|[{'type',1092,'icode_lbl',[]}]]}]]}]}],
		%% Line 1095
		'spec' =
		    %% Line 1095
		    [{{'call_set_continuation',2},[{'type',1095,'fun',[{'type',1095,'product',[{'type',1095,'record',[{'atom',1095,'icode_call'}]}|[{'type',1095,'union',[{'type',1095,'nil',[]}|[{'type',1095,'icode_lbl',[]}]]}]]}|[{'type',1095,'record',[{'atom',1095,'icode_call'}]}]]}]}],
		%% Line 1099
		'spec' =
		    %% Line 1099
		    [{{'call_set_fail_label',2},[{'type',1099,'fun',[{'type',1099,'product',[{'type',1099,'record',[{'atom',1099,'icode_call'}]}|[{'type',1099,'union',[{'type',1099,'nil',[]}|[{'type',1099,'icode_lbl',[]}]]}]]}|[{'type',1099,'record',[{'atom',1099,'icode_call'}]}]]}]}],
		%% Line 1108
		'spec' =
		    %% Line 1108
		    [{{'is_call',1},[{'type',1108,'fun',[{'type',1108,'product',[{'type',1108,'icode_instr',[]}]}|[{'type',1108,'boolean',[]}]]}]}],
		%% Line 1112
		'spec' =
		    %% Line 1112
		    [{{'call_in_guard',1},[{'type',1112,'fun',[{'type',1112,'product',[{'type',1112,'record',[{'atom',1112,'icode_call'}]}]}|[{'type',1112,'boolean',[]}]]}]}],
		%% Line 1119
		'spec' =
		    %% Line 1119
		    [{{'mk_enter',4},[{'type',1119,'fun',[{'type',1119,'product',[{'type',1119,'atom',[]}|[{'type',1119,'atom',[]}|[{'type',1119,'list',[{'type',1119,'icode_term_arg',[]}]}|[{'type',1119,'union',[{'atom',1119,'local'}|[{'atom',1119,'remote'}]]}]]]]}|[{'type',1120,'record',[{'atom',1120,'icode_enter'}]}]]}]}],
		%% Line 1128
		'spec' =
		    %% Line 1128
		    [{{'enter_fun',1},[{'type',1128,'fun',[{'type',1128,'product',[{'type',1128,'record',[{'atom',1128,'icode_enter'}]}]}|[{'type',1128,'icode_funcall',[]}]]}]}],
		%% Line 1131
		'spec' =
		    %% Line 1131
		    [{{'enter_fun_update',2},[{'type',1131,'fun',[{'type',1131,'product',[{'type',1131,'record',[{'atom',1131,'icode_enter'}]}|[{'type',1131,'icode_funcall',[]}]]}|[{'type',1132,'record',[{'atom',1132,'icode_enter'}]}]]}]}],
		%% Line 1140
		'spec' =
		    %% Line 1140
		    [{{'enter_args',1},[{'type',1140,'fun',[{'type',1140,'product',[{'type',1140,'record',[{'atom',1140,'icode_enter'}]}]}|[{'type',1140,'list',[{'type',1140,'icode_term_arg',[]}]}]]}]}],
		%% Line 1143
		'spec' =
		    %% Line 1143
		    [{{'enter_args_update',2},[{'type',1143,'fun',[{'type',1143,'product',[{'type',1143,'record',[{'atom',1143,'icode_enter'}]}|[{'type',1143,'list',[{'type',1143,'icode_term_arg',[]}]}]]}|[{'type',1143,'record',[{'atom',1143,'icode_enter'}]}]]}]}],
		%% Line 1146
		'spec' =
		    %% Line 1146
		    [{{'enter_type',1},[{'type',1146,'fun',[{'type',1146,'product',[{'type',1146,'record',[{'atom',1146,'icode_enter'}]}]}|[{'type',1146,'icode_call_type',[]}]]}]}],
		%% Line 1149
		'spec' =
		    %% Line 1149
		    [{{'is_enter',1},[{'type',1149,'fun',[{'type',1149,'product',[{'type',1149,'icode_instr',[]}]}|[{'type',1149,'boolean',[]}]]}]}],
		%% Line 1153
		'spec' =
		    %% Line 1153
		    [{{'mk_enter_primop',2},[{'type',1153,'fun',[{'type',1153,'product',[{'type',1153,'icode_primop',[]}|[{'type',1153,'list',[{'type',1153,'icode_term_arg',[]}]}]]}|[{'type',1154,'record',[{'atom',1154,'icode_enter'}|[{'type',1154,'field_type',[{'atom',1154,'type'}|[{'atom',1154,'primop'}]]}]]}]]}]}],
		%% Line 1166
		'spec' =
		    %% Line 1166
		    [{{'mk_begin_try',2},[{'type',1166,'fun',[{'type',1166,'product',[{'type',1166,'icode_lbl',[]}|[{'type',1166,'icode_lbl',[]}]]}|[{'type',1166,'record',[{'atom',1166,'icode_begin_try'}]}]]}]}],
		%% Line 1170
		'spec' =
		    %% Line 1170
		    [{{'begin_try_label',1},[{'type',1170,'fun',[{'type',1170,'product',[{'type',1170,'record',[{'atom',1170,'icode_begin_try'}]}]}|[{'type',1170,'icode_lbl',[]}]]}]}],
		%% Line 1173
		'spec' =
		    %% Line 1173
		    [{{'begin_try_successor',1},[{'type',1173,'fun',[{'type',1173,'product',[{'type',1173,'record',[{'atom',1173,'icode_begin_try'}]}]}|[{'type',1173,'icode_lbl',[]}]]}]}],
		%% Line 1180
		'spec' =
		    %% Line 1180
		    [{{'mk_end_try',0},[{'type',1180,'fun',[{'type',1180,'product',[]}|[{'type',1180,'record',[{'atom',1180,'icode_end_try'}]}]]}]}],
		%% Line 1187
		'spec' =
		    %% Line 1187
		    [{{'mk_begin_handler',1},[{'type',1187,'fun',[{'type',1187,'product',[{'type',1187,'list',[{'type',1187,'icode_var',[]}]}]}|[{'type',1187,'record',[{'atom',1187,'icode_begin_handler'}]}]]}]}],
		%% Line 1191
		'spec' =
		    %% Line 1191
		    [{{'begin_handler_dstlist',1},[{'type',1191,'fun',[{'type',1191,'product',[{'type',1191,'record',[{'atom',1191,'icode_begin_handler'}]}]}|[{'type',1191,'list',[{'type',1191,'icode_var',[]}]}]]}]}],
		%% Line 1202
		'spec' =
		    %% Line 1202
		    [{{'mk_label',1},[{'type',1202,'fun',[{'type',1202,'product',[{'type',1202,'icode_lbl',[]}]}|[{'type',1202,'record',[{'atom',1202,'icode_label'}]}]]}]}],
		%% Line 1205
		'spec' =
		    %% Line 1205
		    [{{'label_name',1},[{'type',1205,'fun',[{'type',1205,'product',[{'type',1205,'record',[{'atom',1205,'icode_label'}]}]}|[{'type',1205,'icode_lbl',[]}]]}]}],
		%% Line 1208
		'spec' =
		    %% Line 1208
		    [{{'is_label',1},[{'type',1208,'fun',[{'type',1208,'product',[{'type',1208,'icode_instr',[]}]}|[{'type',1208,'boolean',[]}]]}]}],
		%% Line 1216
		'spec' =
		    %% Line 1216
		    [{{'mk_comment',1},[{'type',1216,'fun',[{'type',1216,'product',[{'type',1216,'icode_comment_text',[]}]}|[{'type',1216,'record',[{'atom',1216,'icode_comment'}]}]]}]}],
		%% Line 1221
		'spec' =
		    %% Line 1221
		    [{{'comment_text',1},[{'type',1221,'fun',[{'type',1221,'product',[{'type',1221,'record',[{'atom',1221,'icode_comment'}]}]}|[{'type',1221,'icode_comment_text',[]}]]}]}],
		%% Line 1224
		'spec' =
		    %% Line 1224
		    [{{'is_comment',1},[{'type',1224,'fun',[{'type',1224,'product',[{'type',1224,'icode_instr',[]}]}|[{'type',1224,'boolean',[]}]]}]}],
		%% Line 1237
		'spec' =
		    %% Line 1237
		    [{{'mk_const',1},[{'type',1237,'fun',[{'type',1237,'product',[{'type',1237,'union',[{'type',1237,'simple_const',[]}|[{'type',1237,'structured_const',[]}|[{'type',1237,'binary',[]}]]]}]}|[{'type',1237,'record',[{'atom',1237,'icode_const'}]}]]}]}],
		%% Line 1240
		'spec' =
		    %% Line 1240
		    [{{'const_value',1},[{'type',1240,'fun',[{'type',1240,'product',[{'type',1240,'record',[{'atom',1240,'icode_const'}]}]}|[{'type',1240,'union',[{'type',1240,'simple_const',[]}|[{'type',1240,'structured_const',[]}|[{'type',1240,'binary',[]}]]]}]]}]}],
		%% Line 1243
		'spec' =
		    %% Line 1243
		    [{{'is_const',1},[{'type',1243,'fun',[{'type',1243,'product',[{'type',1243,'icode_argument',[]}]}|[{'type',1243,'boolean',[]}]]}]}],
		%% Line 1251
		'spec' =
		    %% Line 1251
		    [{{'mk_var',1},[{'type',1251,'fun',[{'type',1251,'product',[{'type',1251,'non_neg_integer',[]}]}|[{'type',1251,'record',[{'atom',1251,'icode_variable'}|[{'type',1251,'field_type',[{'atom',1251,'kind'}|[{'atom',1251,'var'}]]}]]}]]}]}],
		%% Line 1254
		'spec' =
		    %% Line 1254
		    [{{'var_name',1},[{'type',1254,'fun',[{'type',1254,'product',[{'type',1254,'record',[{'atom',1254,'icode_variable'}|[{'type',1254,'field_type',[{'atom',1254,'kind'}|[{'atom',1254,'var'}]]}]]}]}|[{'type',1254,'non_neg_integer',[]}]]}]}],
		%% Line 1257
		'spec' =
		    %% Line 1257
		    [{{'is_var',1},[{'type',1257,'fun',[{'type',1257,'product',[{'type',1257,'icode_argument',[]}]}|[{'type',1257,'boolean',[]}]]}]}],
		%% Line 1261
		'spec' =
		    %% Line 1261
		    [{{'mk_reg',1},[{'type',1261,'fun',[{'type',1261,'product',[{'type',1261,'non_neg_integer',[]}]}|[{'type',1261,'record',[{'atom',1261,'icode_variable'}|[{'type',1261,'field_type',[{'atom',1261,'kind'}|[{'atom',1261,'reg'}]]}]]}]]}]}],
		%% Line 1264
		'spec' =
		    %% Line 1264
		    [{{'reg_name',1},[{'type',1264,'fun',[{'type',1264,'product',[{'type',1264,'record',[{'atom',1264,'icode_variable'}|[{'type',1264,'field_type',[{'atom',1264,'kind'}|[{'atom',1264,'reg'}]]}]]}]}|[{'type',1264,'non_neg_integer',[]}]]}]}],
		%% Line 1267
		'spec' =
		    %% Line 1267
		    [{{'reg_is_gcsafe',1},[{'type',1267,'fun',[{'type',1267,'product',[{'type',1267,'record',[{'atom',1267,'icode_variable'}|[{'type',1267,'field_type',[{'atom',1267,'kind'}|[{'atom',1267,'reg'}]]}]]}]}|[{'atom',1267,'false'}]]}]}],
		%% Line 1270
		'spec' =
		    %% Line 1270
		    [{{'is_reg',1},[{'type',1270,'fun',[{'type',1270,'product',[{'type',1270,'icode_argument',[]}]}|[{'type',1270,'boolean',[]}]]}]}],
		%% Line 1274
		'spec' =
		    %% Line 1274
		    [{{'mk_fvar',1},[{'type',1274,'fun',[{'type',1274,'product',[{'type',1274,'non_neg_integer',[]}]}|[{'type',1274,'record',[{'atom',1274,'icode_variable'}|[{'type',1274,'field_type',[{'atom',1274,'kind'}|[{'atom',1274,'fvar'}]]}]]}]]}]}],
		%% Line 1277
		'spec' =
		    %% Line 1277
		    [{{'fvar_name',1},[{'type',1277,'fun',[{'type',1277,'product',[{'type',1277,'record',[{'atom',1277,'icode_variable'}|[{'type',1277,'field_type',[{'atom',1277,'kind'}|[{'atom',1277,'fvar'}]]}]]}]}|[{'type',1277,'non_neg_integer',[]}]]}]}],
		%% Line 1280
		'spec' =
		    %% Line 1280
		    [{{'is_fvar',1},[{'type',1280,'fun',[{'type',1280,'product',[{'type',1280,'icode_argument',[]}]}|[{'type',1280,'boolean',[]}]]}]}],
		%% Line 1284
		'spec' =
		    %% Line 1284
		    [{{'is_variable',1},[{'type',1284,'fun',[{'type',1284,'product',[{'type',1284,'icode_argument',[]}]}|[{'type',1284,'boolean',[]}]]}]}],
		%% Line 1288
		'spec' =
		    %% Line 1288
		    [{{'annotate_variable',2},[{'type',1288,'fun',[{'type',1288,'product',[{'type',1288,'record',[{'atom',1288,'icode_variable'}]}|[{'type',1288,'variable_annotation',[]}]]}|[{'type',1289,'record',[{'atom',1289,'icode_variable'}]}]]}]}],
		%% Line 1293
		'spec' =
		    %% Line 1293
		    [{{'is_annotated_variable',1},[{'type',1293,'fun',[{'type',1293,'product',[{'type',1293,'icode_argument',[]}]}|[{'type',1293,'boolean',[]}]]}]}],
		%% Line 1301
		'spec' =
		    %% Line 1301
		    [{{'unannotate_variable',1},[{'type',1301,'fun',[{'type',1301,'product',[{'type',1301,'record',[{'atom',1301,'icode_variable'}]}]}|[{'type',1301,'record',[{'atom',1301,'icode_variable'}]}]]}]}],
		%% Line 1305
		'spec' =
		    %% Line 1305
		    [{{'variable_annotation',1},[{'type',1305,'fun',[{'type',1305,'product',[{'type',1305,'record',[{'atom',1305,'icode_variable'}]}]}|[{'type',1305,'variable_annotation',[]}]]}]}],
		%% Line 1318
		'spec' =
		    %% Line 1318
		    [{{'uses',1},[{'type',1318,'fun',[{'type',1318,'product',[{'type',1318,'icode_instr',[]}]}|[{'type',1318,'list',[{'type',1318,'record',[{'atom',1318,'icode_variable'}]}]}]]}]}],
		%% Line 1322
		'spec' =
		    %% Line 1322
		    [{{'args',1},[{'type',1322,'fun',[{'type',1322,'product',[{'type',1322,'icode_instr',[]}]}|[{'type',1322,'list',[{'type',1322,'icode_argument',[]}]}]]}]}],
		%% Line 1343
		'spec' =
		    %% Line 1343
		    [{{'defines',1},[{'type',1343,'fun',[{'type',1343,'product',[{'type',1343,'icode_instr',[]}]}|[{'type',1343,'list',[{'type',1343,'record',[{'atom',1343,'icode_variable'}]}]}]]}]}],
		%% Line 1364
		'spec' =
		    %% Line 1364
		    [{{'remove_constants',1},[{'type',1364,'fun',[{'type',1364,'product',[{'type',1364,'list',[{'type',1364,'icode_argument',[]}]}]}|[{'type',1364,'list',[{'type',1364,'record',[{'atom',1364,'icode_variable'}]}]}]]}]}],
		%% Line 1378
		'spec' =
		    %% Line 1378
		    [{{'subst',2},[{'type',1378,'bounded_fun',[{'type',1378,'fun',[{'type',1378,'product',[{'type',1378,'list',[{'type',1378,'tuple',[{'var',1378,'_'}|[{'var',1378,'_'}]]}]}|[{'var',1378,'I'}]]}|[{'var',1378,'I'}]]}|[[{'type',1378,'constraint',[{'atom',1378,'is_subtype'}|[[{'var',1378,'I'}|[{'type',1378,'icode_instr',[]}]]]]}]]]}]}],
		%% Line 1383
		'spec' =
		    %% Line 1383
		    [{{'subst_uses',2},[{'type',1383,'bounded_fun',[{'type',1383,'fun',[{'type',1383,'product',[{'type',1383,'list',[{'type',1383,'tuple',[{'var',1383,'_'}|[{'var',1383,'_'}]]}]}|[{'var',1383,'I'}]]}|[{'var',1383,'I'}]]}|[[{'type',1383,'constraint',[{'atom',1383,'is_subtype'}|[[{'var',1383,'I'}|[{'type',1383,'icode_instr',[]}]]]]}]]]}]}],
		%% Line 1407
		'spec' =
		    %% Line 1407
		    [{{'subst_defines',2},[{'type',1407,'bounded_fun',[{'type',1407,'fun',[{'type',1407,'product',[{'type',1407,'list',[{'type',1407,'tuple',[{'var',1407,'_'}|[{'var',1407,'_'}]]}]}|[{'var',1407,'I'}]]}|[{'var',1407,'I'}]]}|[[{'type',1407,'constraint',[{'atom',1407,'is_subtype'}|[[{'var',1407,'I'}|[{'type',1407,'icode_instr',[]}]]]]}]]]}]}],
		%% Line 1446
		'spec' =
		    %% Line 1446
		    [{{'successors',1},[{'type',1446,'fun',[{'type',1446,'product',[{'type',1446,'icode_instr',[]}]}|[{'type',1446,'list',[{'type',1446,'icode_lbl',[]}]}]]}]}],
		%% Line 1482
		'spec' =
		    %% Line 1482
		    [{{'fails_to',1},[{'type',1482,'fun',[{'type',1482,'product',[{'type',1482,'icode_instr',[]}]}|[{'type',1482,'list',[{'type',1482,'icode_lbl',[]}]}]]}]}],
		%% Line 1507
		'spec' =
		    %% Line 1507
		    [{{'redirect_jmp',3},[{'type',1507,'fun',[{'type',1507,'product',[{'type',1507,'icode_instr',[]}|[{'type',1507,'icode_lbl',[]}|[{'type',1507,'union',[{'type',1507,'nil',[]}|[{'type',1507,'icode_lbl',[]}]]}]]]}|[{'type',1507,'icode_instr',[]}]]}]}],
		%% Line 1629
		'spec' =
		    %% Line 1629
		    [{{'is_branch',1},[{'type',1629,'fun',[{'type',1629,'product',[{'type',1629,'icode_instr',[]}]}|[{'type',1629,'boolean',[]}]]}]}],
		%% Line 1659
		'spec' =
		    %% Line 1659
		    [{{'mk_new_var',0},[{'type',1659,'fun',[{'type',1659,'product',[]}|[{'type',1659,'icode_var',[]}]]}]}],
		%% Line 1667
		'spec' =
		    %% Line 1667
		    [{{'mk_new_fvar',0},[{'type',1667,'fun',[{'type',1667,'product',[]}|[{'type',1667,'icode_fvar',[]}]]}]}],
		%% Line 1675
		'spec' =
		    %% Line 1675
		    [{{'mk_new_reg',0},[{'type',1675,'fun',[{'type',1675,'product',[]}|[{'type',1675,'icode_reg',[]}]]}]}],
		%% Line 1683
		'spec' =
		    %% Line 1683
		    [{{'mk_new_label',0},[{'type',1683,'fun',[{'type',1683,'product',[]}|[{'type',1683,'record',[{'atom',1683,'icode_label'}]}]]}]}],
		%% Line 1711
		'spec' =
		    %% Line 1711
		    [{{'strip_comments',1},[{'type',1711,'fun',[{'type',1711,'product',[{'type',1711,'record',[{'atom',1711,'icode'}]}]}|[{'type',1711,'record',[{'atom',1711,'icode'}]}]]}]}],
		%% Line 1717
		'spec' =
		    %% Line 1717
		    [{{'no_comments',1},[{'type',1717,'fun',[{'type',1717,'product',[{'type',1717,'icode_instrs',[]}]}|[{'type',1717,'icode_instrs',[]}]]}]}],
		%% Line 1732
		'spec' =
		    %% Line 1732
		    [{{'is_safe',1},[{'type',1732,'fun',[{'type',1732,'product',[{'type',1732,'icode_instr',[]}]}|[{'type',1732,'boolean',[]}]]}]}],
		%% Line 1767
		'spec' =
		    %% Line 1767
		    [{{'highest_var',1},[{'type',1767,'fun',[{'type',1767,'product',[{'type',1767,'icode_instrs',[]}]}|[{'type',1767,'non_neg_integer',[]}]]}]}],
		%% Line 1771
		'spec' =
		    %% Line 1771
		    [{{'highest_var',2},[{'type',1771,'fun',[{'type',1771,'product',[{'type',1771,'icode_instrs',[]}|[{'type',1771,'non_neg_integer',[]}]]}|[{'type',1771,'non_neg_integer',[]}]]}]}],
		%% Line 1779
		'spec' =
		    %% Line 1779
		    [{{'new_max',2},[{'type',1779,'fun',[{'type',1779,'product',[{'type',1779,'list',[{'type',1779,'record',[{'atom',1779,'icode_variable'}]}]}|[{'type',1779,'non_neg_integer',[]}]]}|[{'type',1779,'non_neg_integer',[]}]]}]}],
		%% Line 1799
		'spec' =
		    %% Line 1799
		    [{{'highest_label',1},[{'type',1799,'fun',[{'type',1799,'product',[{'type',1799,'icode_instrs',[]}]}|[{'type',1799,'icode_lbl',[]}]]}]}],
		%% Line 1803
		'spec' =
		    %% Line 1803
		    [{{'highest_label',2},[{'type',1803,'fun',[{'type',1803,'product',[{'type',1803,'icode_instrs',[]}|[{'type',1803,'icode_lbl',[]}]]}|[{'type',1803,'icode_lbl',[]}]]}]}]]
'mk_icode'/7 =
    %% Line 623
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 627
	    call 'hipe_consttab':'new'
		()
	in  %% Line 624
	    {'icode',_cor6,_cor5,_cor4,'undefined',_cor3,_cor2,_cor7,_cor1,_cor0,[]}
'mk_icode'/8 =
    %% Line 634
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 635
	{'icode',_cor7,_cor6,_cor5,'undefined',_cor4,_cor3,_cor2,_cor1,_cor0,[]}
'icode_fun'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',MFA,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_params'/1 =
    %% Line 643
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,Params,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      Params
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_params',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_params_update'/2 =
    %% Line 646
    fun (_cor1,_cor0) ->
	%% Line 647
	case _cor1 of
	  <{'icode',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor16> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'icode_is_closure'/1 =
    %% Line 650
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,Closure,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      Closure
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_is_closure',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_is_leaf'/1 =
    %% Line 653
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,Leaf,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      Leaf
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_is_leaf',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_code'/1 =
    %% Line 656
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,_cor6,Code,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_code',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_code_update'/2 =
    %% Line 659
    fun (_cor1,_cor0) ->
	let <Vmax> =
	    %% Line 660
	    apply 'highest_var'/1
		(_cor0)
	in  let <Lmax> =
		%% Line 661
		apply 'highest_label'/1
		    (_cor0)
	    in  let <_rec1> = {%% Line 662
		     0,%% Line 662
		       Vmax}
		in  let <_rec2> = {%% Line 662
			 0,%% Line 662
			   Lmax}
		    in  %% Line 662
			case _cor1 of
			  <{'icode',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'setelement'
				      (10, _cor1, _rec2)
			      in  let <_cor8> =
				      call 'erlang':'setelement'
					  (9, _cor7, _rec1)
				  in  call 'erlang':'setelement'
					  (7, _cor8, _cor0)
			  ( <_cor22> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','icode'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
'icode_data'/1 =
    %% Line 665
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Data,_cor8,_cor9,_cor10}> when 'true' ->
	      Data
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_data',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_var_range'/1 =
    %% Line 671
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,VarRange,_cor9,_cor10}> when 'true' ->
	      VarRange
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_var_range',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_label_range'/1 =
    %% Line 674
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,LabelRange,_cor10}> when 'true' ->
	      LabelRange
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_label_range',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_info'/1 =
    %% Line 677
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Info}> when 'true' ->
	      Info
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_info',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_info_update'/2 =
    %% Line 680
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      call 'erlang':'setelement'
		  (11, _cor1, _cor0)
	  ( <_cor16> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'icode_closure_arity'/1 =
    %% Line 683
    fun (_cor0) ->
	case _cor0 of
	  <{'icode',_cor2,_cor3,_cor4,Arity,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      Arity
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'icode_closure_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'icode_closure_arity_update'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor16> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'mk_if'/4 =
    %% Line 699
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 700
	{'icode_if',_cor3,_cor2,_cor1,_cor0,5.00000000000000000000e-01}
'if_op'/1 =
    %% Line 705
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_if',Op,_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      Op
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'if_op',1}}] )
	    -| ['compiler_generated'] )
	end
'if_op_update'/2 =
    %% Line 708
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_if',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor1, _cor0)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_if'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'if_args'/1 =
    %% Line 711
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_if',_cor2,Args,_cor3,_cor4,_cor5}> when 'true' ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'if_args',1}}] )
	    -| ['compiler_generated'] )
	end
'if_true_label'/1 =
    %% Line 714
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_if',_cor2,_cor3,TrueLbl,_cor4,_cor5}> when 'true' ->
	      TrueLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'if_true_label',1}}] )
	    -| ['compiler_generated'] )
	end
'if_true_label_update'/2 =
    %% Line 717
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_if',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor1, _cor0)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_if'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'if_false_label'/1 =
    %% Line 720
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_if',_cor2,_cor3,_cor4,FalseLbl,_cor5}> when 'true' ->
	      FalseLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'if_false_label',1}}] )
	    -| ['compiler_generated'] )
	end
'if_false_label_update'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_if',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_if'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'if_pred'/1 =
    %% Line 726
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_if',_cor2,_cor3,_cor4,_cor5,P}> when 'true' ->
	      P
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'if_pred',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_switch_val'/4 =
    %% Line 735
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Term = {'icode_variable',_cor8,'var',_cor9},FailLbl,Length,Cases> when 'true' ->
	      %% Line 736
	      {'icode_switch_val',Term,FailLbl,Length,Cases}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_switch_val',4}}] )
	    -| ['compiler_generated'] )
	end
'switch_val_term'/1 =
    %% Line 739
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_val',Term,_cor2,_cor3,_cor4}> when 'true' ->
	      Term
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_val_term',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_val_fail_label'/1 =
    %% Line 742
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_val',_cor2,FailLbl,_cor3,_cor4}> when 'true' ->
	      FailLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_val_fail_label',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_val_fail_label_update'/2 =
    %% Line 746
    fun (_cor1,_cor0) ->
	%% Line 747
	case _cor1 of
	  <{'icode_switch_val',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_switch_val'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'switch_val_cases'/1 =
    %% Line 752
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_val',_cor2,_cor3,_cor4,Cases}> when 'true' ->
	      Cases
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_val_cases',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_val_cases_update'/2 =
    %% Line 756
    fun (_cor1,_cor0) ->
	%% Line 757
	case _cor1 of
	  <{'icode_switch_val',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_switch_val'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'mk_switch_tuple_arity'/4 =
    %% Line 766
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Term = {'icode_variable',_cor8,'var',_cor9},FailLbl,Length,Cases> when 'true' ->
	      %% Line 767
	      {'icode_switch_tuple_arity',Term,FailLbl,%% Line 768
						       Length,%% Line 768
							      Cases}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_switch_tuple_arity',4}}] )
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_term'/1 =
    %% Line 771
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_tuple_arity',Term,_cor2,_cor3,_cor4}> when 'true' ->
	      Term
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_tuple_arity_term',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_fail_label'/1 =
    %% Line 774
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_tuple_arity',_cor2,FailLbl,_cor3,_cor4}> when 'true' ->
	      %% Line 775
	      FailLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_tuple_arity_fail_label',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_fail_label_update'/2 =
    %% Line 779
    fun (_cor1,_cor0) ->
	%% Line 780
	case _cor1 of
	  <{'icode_switch_tuple_arity',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_switch_tuple_arity'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_cases'/1 =
    %% Line 785
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_switch_tuple_arity',_cor2,_cor3,_cor4,Cases}> when 'true' ->
	      Cases
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'switch_tuple_arity_cases',1}}] )
	    -| ['compiler_generated'] )
	end
'switch_tuple_arity_cases_update'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	%% Line 791
	case _cor1 of
	  <{'icode_switch_tuple_arity',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor10> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_switch_tuple_arity'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'mk_type'/4 =
    %% Line 799
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 800
	apply 'mk_type'/5
	    (_cor3, _cor2, _cor1, _cor0, 5.00000000000000000000e-01)
'mk_type'/5 =
    %% Line 804
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 805
	{'icode_type',_cor3,_cor4,_cor2,_cor1,_cor0}
'type_test'/1 =
    %% Line 809
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',Test,_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      Test
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_test',1}}] )
	    -| ['compiler_generated'] )
	end
'type_args'/1 =
    %% Line 812
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',_cor2,Args,_cor3,_cor4,_cor5}> when 'true' ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_args',1}}] )
	    -| ['compiler_generated'] )
	end
'type_true_label'/1 =
    %% Line 817
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',_cor2,_cor3,TrueLbl,_cor4,_cor5}> when 'true' ->
	      TrueLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_true_label',1}}] )
	    -| ['compiler_generated'] )
	end
'type_false_label'/1 =
    %% Line 820
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',_cor2,_cor3,_cor4,FalseLbl,_cor5}> when 'true' ->
	      FalseLbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_false_label',1}}] )
	    -| ['compiler_generated'] )
	end
'type_pred'/1 =
    %% Line 823
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',_cor2,_cor3,_cor4,_cor5,P}> when 'true' ->
	      P
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type_pred',1}}] )
	    -| ['compiler_generated'] )
	end
'is_type'/1 =
    %% Line 826
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_type',_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 827
	  <_cor7> when 'true' ->
	      'false'
	end
'mk_goto'/1 =
    %% Line 834
    fun (_cor0) ->
	{'icode_goto',_cor0}
'goto_label'/1 =
    %% Line 837
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_goto',Lbl}> when 'true' ->
	      Lbl
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'goto_label',1}}] )
	    -| ['compiler_generated'] )
	end
'is_goto'/1 =
    %% Line 840
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_goto',_cor2}> when 'true' ->
	      'true'
	  %% Line 841
	  <_cor3> when 'true' ->
	      'false'
	end
'mk_return'/1 =
    %% Line 848
    fun (_cor0) ->
	{'icode_return',_cor0}
'return_vars'/1 =
    %% Line 851
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_return',Vars}> when 'true' ->
	      Vars
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'return_vars',1}}] )
	    -| ['compiler_generated'] )
	end
'is_return'/1 =
    %% Line 854
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_return',_cor2}> when 'true' ->
	      'true'
	  %% Line 855
	  <_cor3> when 'true' ->
	      'false'
	end
'mk_fail'/2 =
    %% Line 864
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Args,Class>
	      when call 'erlang':'is_list'
		    (Args) ->
	      do  %% Line 865
		  case Class of
		    %% Line 866
		    <'error'> when 'true' ->
			'ok'
		    %% Line 867
		    <'exit'> when 'true' ->
			'ok'
		    %% Line 868
		    <'rethrow'> when 'true' ->
			'ok'
		    %% Line 869
		    <'throw'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  %% Line 871
		  {'icode_fail',Class,Args,[]}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'mk_fail',2}}] )
	    -| ['compiler_generated'] )
	end
'fail_class'/1 =
    %% Line 877
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_fail',Class,_cor2,_cor3}> when 'true' ->
	      Class
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fail_class',1}}] )
	    -| ['compiler_generated'] )
	end
'fail_args'/1 =
    %% Line 880
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_fail',_cor2,Args,_cor3}> when 'true' ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fail_args',1}}] )
	    -| ['compiler_generated'] )
	end
'fail_label'/1 =
    %% Line 883
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_fail',_cor2,_cor3,Label}> when 'true' ->
	      Label
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fail_label',1}}] )
	    -| ['compiler_generated'] )
	end
'fail_set_label'/2 =
    %% Line 886
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'icode_fail',_cor6,_cor7,_cor8},Label> when 'true' ->
	      %% Line 887
	      call 'erlang':'setelement'
		  (4, I, Label)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'fail_set_label',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_move'/2 =
    %% Line 895
    fun (_cor1,_cor0) ->
	do  %% Line 896
	    case _cor0 of
	      %% Line 897
	      <{'icode_variable',_cor5,_cor6,_cor7}> when 'true' ->
		  'ok'
	      %% Line 898
	      <{'icode_const',_cor8}> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	    %% Line 900
	    {'icode_move',_cor1,_cor0}
'move_dst'/1 =
    %% Line 903
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_move',Dst,_cor2}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'move_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'move_src'/1 =
    %% Line 906
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_move',_cor2,Src}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'move_src',1}}] )
	    -| ['compiler_generated'] )
	end
'move_src_update'/2 =
    %% Line 910
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_move',_cor6,_cor7}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor8> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_move'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'is_move'/1 =
    %% Line 913
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_move',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 914
	  <_cor4> when 'true' ->
	      'false'
	end
'mk_phi'/1 =
    %% Line 923
    fun (_cor0) ->
	{'icode_phi',_cor0,_cor0,[]}
'mk_phi'/2 =
    %% Line 927
    fun (_cor1,_cor0) ->
	{'icode_phi',_cor1,_cor1,_cor0}
'phi_dst'/1 =
    %% Line 930
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_phi',Dst,_cor2,_cor3}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'phi_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'phi_id'/1 =
    %% Line 933
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_phi',_cor2,Id,_cor3}> when 'true' ->
	      Id
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'phi_id',1}}] )
	    -| ['compiler_generated'] )
	end
'phi_arglist'/1 =
    %% Line 936
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_phi',_cor2,_cor3,ArgList}> when 'true' ->
	      ArgList
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'phi_arglist',1}}] )
	    -| ['compiler_generated'] )
	end
'phi_args'/1 =
    %% Line 939
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{_cor7,Var}|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [Var|_cor5]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  apply 'phi_arglist'/1
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'phi_arg'/2 =
    %% Line 942
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 943
	    apply 'phi_arglist'/1
		(_cor1)
	in  %% Line 943
	    case call 'lists':'keyfind'
		     (_cor0, 1, _cor2) of
	      %% Line 944
	      <{_cor6,Var}> when 'true' ->
		  Var
	      %% Line 945
	      <'false'> when 'true' ->
		  call 'erlang':'exit'
		      ({'No such predecessor to phi',{_cor0,_cor1}})
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'is_phi'/1 =
    %% Line 949
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_phi',_cor2,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 950
	  <_cor5> when 'true' ->
	      'false'
	end
'phi_enter_pred'/3 =
    %% Line 954
    fun (_cor2,_cor1,_cor0) ->
	let <NewArg> = {_cor1,_cor0}
	in  let <_cor4> =
		%% Line 956
		apply 'phi_arglist'/1
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 956
		    call 'lists':'keydelete'
			(_cor1, 1, _cor4)
		in  let <_rec15> =
			%% Line 956
			[NewArg|_cor5]
		    in  %% Line 956
			case _cor2 of
			  <{'icode_phi',_cor12,_cor13,_cor14}> when 'true' ->
			      call 'erlang':'setelement'
				  (4, _cor2, _rec15)
			  ( <_cor15> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','icode_phi'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
'phi_remove_pred'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 960
	    apply 'phi_arglist'/1
		(_cor1)
	in  let <NewArgList> =
		%% Line 960
		call 'lists':'keydelete'
		    (_cor0, 1, _cor2)
	    in  %% Line 961
		case NewArgList of
		  %% Line 962
		  <[Arg|[]]> when 'true' ->
		      %% Line 963
		      case Arg of
			<{_X_Label,Var = {'icode_variable',_cor11,_cor12,_cor13}}> when 'true' ->
			    let <_cor5> =
				%% Line 964
				apply 'phi_dst'/1
				    (_cor1)
			    in  %% Line 964
				apply 'mk_move'/2
				    (_cor5, Var)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
		  %% Line 965
		  <[_cor14|_cor15]> when 'true' ->
		      %% Line 966
		      case _cor1 of
			<{'icode_phi',_cor16,_cor17,_cor18}> when 'true' ->
			    call 'erlang':'setelement'
				(4, _cor1, NewArgList)
			( <_cor19> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','icode_phi'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
'phi_argvar_subst'/2 =
    %% Line 969
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 970
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{Pred,Var}|_cor3]> when 'true' ->
				let <_cor6> =
				    apply 'subst1'/2
					(_cor0, Var)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [{Pred,_cor6}|_cor7]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      apply 'phi_arglist'/1
			  (_cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 971
	    case _cor1 of
	      <{'icode_phi',_cor14,_cor15,_cor16}> when 'true' ->
		  call 'erlang':'setelement'
		      (4, _cor1, _cor8)
	      ( <_cor17> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','icode_phi'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'phi_redirect_pred'/3 =
    %% Line 974
    fun (_cor2,_cor1,_cor0) ->
	let <Subst> =
	    %% Line 975
	    [{_cor1,_cor0}|[]]
	in  let <_cor10> =
		%% Line 976
		( letrec
		      'lc$^0'/1 =
			  fun (_cor7) ->
			      case _cor7 of
				<[{Pred,Var}|_cor5]> when 'true' ->
				    let <_cor8> =
					apply 'subst1'/2
					    (Subst, Pred)
				    in  let <_cor9> =
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [{_cor8,Var}|_cor9]
					      -| ['compiler_generated'] )
				( <[_cor4|_cor5]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor7> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor7})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor6> =
			  apply 'phi_arglist'/1
			      (_cor2)
		      in  apply 'lc$^0'/1
			      (_cor6)
		  -| ['list_comprehension'] )
	    in  %% Line 977
		case _cor2 of
		  <{'icode_phi',_cor17,_cor18,_cor19}> when 'true' ->
		      call 'erlang':'setelement'
			  (4, _cor2, _cor10)
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','icode_phi'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'mk_primop'/3 =
    %% Line 993
    fun (_cor2,_cor1,_cor0) ->
	%% Line 994
	apply 'mk_primop'/5
	    (_cor2, _cor1, _cor0, [], [])
'mk_primop'/5 =
    %% Line 999
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Type> =
	    %% Line 1000
	    apply 'op_type'/1
		(_cor3)
	in  %% Line 1001
	    apply 'make_call'/7
		(_cor4, _cor3, _cor2, Type, _cor1, _cor0, 'false')
'mk_guardop'/5 =
    %% Line 1008
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Type> =
	    %% Line 1009
	    apply 'op_type'/1
		(_cor3)
	in  %% Line 1010
	    apply 'make_call'/7
		(_cor4, _cor3, _cor2, Type, _cor1, _cor0, 'true')
'op_type'/1 =
    %% Line 1012
    fun (_cor0) ->
	%% Line 1013
	case apply 'is_mfa'/1
		 (_cor0) of
	  %% Line 1014
	  <'true'> when 'true' ->
	      'remote'
	  %% Line 1015
	  <'false'> when 'true' ->
	      'primop'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'is_mfa'/1 =
    %% Line 1018
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				%% Line 1019
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    %% Line 1019
				    call 'erlang':'=<'
					(0, A)
				in  let <_cor5> =
					%% Line 1019
					call 'erlang':'=<'
					    (A, 255)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor4, _cor5)
					in  let <_cor7> =
						call 'erlang':'and'
						    (_cor3, _cor6)
					    in  let <_cor8> =
						    call 'erlang':'and'
							(_cor2, _cor7)
						in  call 'erlang':'and'
							(_cor1, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1019
	      'true'
	  %% Line 1020
	  <_cor10> when 'true' ->
	      'false'
	end
'mk_call'/5 =
    %% Line 1028
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1029
	apply 'mk_call'/8
	    (_cor4, _cor3, _cor2, _cor1, _cor0, [], [], 'false')
'mk_call'/8 =
    %% Line 1037
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <DstList,M,F,ArgList,Type,Continuation,Fail,InGuard>
	      when let <_cor8> =
		    %% Line 1038
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor9> =
			%% Line 1038
			call 'erlang':'is_atom'
			    (F)
		    in  %% Line 1038
			call 'erlang':'and'
			    (_cor8, _cor9) ->
	      do  %% Line 1039
		  case Type of
		    %% Line 1040
		    <'local'> when 'true' ->
			'ok'
		    %% Line 1041
		    <'remote'> when 'true' ->
			'ok'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
		  let <_cor11> =
		      %% Line 1043
		      call 'erlang':'length'
			  (ArgList)
		  in  let <Fun> = {%% Line 1043
			   M,%% Line 1043
			     F,_cor11}
		      in  %% Line 1044
			  apply 'make_call'/7
			      (DstList, Fun, ArgList, Type, Continuation, Fail, InGuard)
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'mk_call',8}}] )
	    -| ['compiler_generated'] )
	end
'make_call'/7 =
    %% Line 1054
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1055
	{'icode_call',_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0}
'call_dstlist'/1 =
    %% Line 1059
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',DstList,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      DstList
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_dstlist',1}}] )
	    -| ['compiler_generated'] )
	end
'call_dstlist_update'/2 =
    %% Line 1062
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_call',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor1, _cor0)
	  ( <_cor13> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_call'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'call_type'/1 =
    %% Line 1065
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,_cor4,Type,_cor5,_cor6,_cor7}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_type',1}}] )
	    -| ['compiler_generated'] )
	end
'call_args'/1 =
    %% Line 1071
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,Args,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_args',1}}] )
	    -| ['compiler_generated'] )
	end
'call_args_update'/2 =
    %% Line 1074
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_call',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor1, _cor0)
	  ( <_cor13> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_call'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'call_fun'/1 =
    %% Line 1077
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,Fun,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      Fun
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'call_fun_update'/2 =
    %% Line 1082
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1083
	    case apply 'is_mfa'/1
		     (_cor0) of
	      %% Line 1084
	      <'true'> when 'true' ->
		  apply 'call_type'/1
		      (_cor1)
	      %% Line 1085
	      <'false'> when 'true' ->
		  'primop'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1087
	    case _cor1 of
	      <{'icode_call',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		  let <_cor6> =
		      call 'erlang':'setelement'
			  (5, _cor1, _cor3)
		  in  call 'erlang':'setelement'
			  (3, _cor6, _cor0)
	      ( <_cor17> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','icode_call'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'call_continuation'/1 =
    %% Line 1090
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,_cor4,_cor5,Continuation,_cor6,_cor7}> when 'true' ->
	      Continuation
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_continuation',1}}] )
	    -| ['compiler_generated'] )
	end
'call_fail_label'/1 =
    %% Line 1093
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,_cor4,_cor5,_cor6,Fail,_cor7}> when 'true' ->
	      Fail
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_fail_label',1}}] )
	    -| ['compiler_generated'] )
	end
'call_set_continuation'/2 =
    %% Line 1096
    fun (_cor1,_cor0) ->
	%% Line 1097
	case _cor1 of
	  <{'icode_call',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      call 'erlang':'setelement'
		  (6, _cor1, _cor0)
	  ( <_cor13> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_call'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'call_set_fail_label'/2 =
    %% Line 1100
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'icode_call',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},Fail> when 'true' ->
	      %% Line 1101
	      case Fail of
		%% Line 1102
		<[]> when 'true' ->
		    let <_cor3> =
			%% Line 1103
			call 'erlang':'setelement'
			    (8, I, 'false')
		    in  %% Line 1103
			call 'erlang':'setelement'
			    (7, _cor3, Fail)
		%% Line 1104
		<_cor25> when 'true' ->
		    %% Line 1105
		    call 'erlang':'setelement'
			(7, I, Fail)
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'call_set_fail_label',2}}] )
	    -| ['compiler_generated'] )
	end
'is_call'/1 =
    %% Line 1109
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      'true'
	  %% Line 1110
	  <_cor9> when 'true' ->
	      'false'
	end
'call_in_guard'/1 =
    %% Line 1113
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_call',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,InGuard}> when 'true' ->
	      InGuard
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'call_in_guard',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_enter'/4 =
    %% Line 1121
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,Args,Type>
	      when let <_cor4> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor5> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 1122
		  case Type of
		    %% Line 1123
		    <'local'> when 'true' ->
			'ok'
		    %% Line 1124
		    <'remote'> when 'true' ->
			'ok'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
		  let <_cor7> =
		      %% Line 1126
		      call 'erlang':'length'
			  (Args)
		  in  %% Line 1126
		      {'icode_enter',{M,F,_cor7},Args,Type}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'mk_enter',4}}] )
	    -| ['compiler_generated'] )
	end
'enter_fun'/1 =
    %% Line 1129
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_enter',Fun,_cor2,_cor3}> when 'true' ->
	      Fun
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enter_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'enter_fun_update'/2 =
    %% Line 1133
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1134
	    case apply 'is_mfa'/1
		     (_cor0) of
	      %% Line 1135
	      <'true'> when 'true' ->
		  apply 'enter_type'/1
		      (_cor1)
	      %% Line 1136
	      <'false'> when 'true' ->
		  'primop'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1138
	    case _cor1 of
	      <{'icode_enter',_rec27,_rec28,_rec29}> when 'true' ->
		  {'icode_enter',_cor0,_rec28,_cor3}
	      ( <_cor9> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','icode_enter'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'enter_args'/1 =
    %% Line 1141
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_enter',_cor2,Args,_cor3}> when 'true' ->
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enter_args',1}}] )
	    -| ['compiler_generated'] )
	end
'enter_args_update'/2 =
    %% Line 1144
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'icode_enter',_cor6,_cor7,_cor8}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor9> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_enter'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'enter_type'/1 =
    %% Line 1147
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_enter',_cor2,_cor3,Type}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enter_type',1}}] )
	    -| ['compiler_generated'] )
	end
'is_enter'/1 =
    %% Line 1150
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_enter',_cor2,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 1151
	  <_cor5> when 'true' ->
	      'false'
	end
'mk_enter_primop'/2 =
    %% Line 1155
    fun (_cor1,_cor0) ->
	%% Line 1156
	{'icode_enter',_cor1,_cor0,'primop'}
'mk_begin_try'/2 =
    %% Line 1167
    fun (_cor1,_cor0) ->
	%% Line 1168
	{'icode_begin_try',_cor1,_cor0}
'begin_try_label'/1 =
    %% Line 1171
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_begin_try',Label,_cor2}> when 'true' ->
	      Label
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'begin_try_label',1}}] )
	    -| ['compiler_generated'] )
	end
'begin_try_successor'/1 =
    %% Line 1174
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_begin_try',_cor2,Successor}> when 'true' ->
	      Successor
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'begin_try_successor',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_end_try'/0 =
    %% Line 1181
    fun () ->
	{'icode_end_try'}
'mk_begin_handler'/1 =
    %% Line 1188
    fun (_cor0) ->
	%% Line 1189
	{'icode_begin_handler',_cor0}
'begin_handler_dstlist'/1 =
    %% Line 1192
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_begin_handler',Dstlist}> when 'true' ->
	      Dstlist
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'begin_handler_dstlist',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_label'/1 =
    %% Line 1203
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      {'icode_label',Name}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'mk_label',1}}] )
	    -| ['compiler_generated'] )
	end
'label_name'/1 =
    %% Line 1206
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_label',Name}> when 'true' ->
	      Name
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'label_name',1}}] )
	    -| ['compiler_generated'] )
	end
'is_label'/1 =
    %% Line 1209
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_label',_cor2}> when 'true' ->
	      'true'
	  %% Line 1210
	  <_cor3> when 'true' ->
	      'false'
	end
'mk_comment'/1 =
    %% Line 1219
    fun (_cor0) ->
	{'icode_comment',_cor0}
'comment_text'/1 =
    %% Line 1222
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_comment',Txt}> when 'true' ->
	      Txt
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'comment_text',1}}] )
	    -| ['compiler_generated'] )
	end
'is_comment'/1 =
    %% Line 1225
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_comment',_cor2}> when 'true' ->
	      'true'
	  %% Line 1226
	  <_cor3> when 'true' ->
	      'false'
	end
'mk_const'/1 =
    %% Line 1238
    fun (_cor0) ->
	{'icode_const',{'flat',_cor0}}
'const_value'/1 =
    %% Line 1241
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_const',{'flat',X}}> when 'true' ->
	      X
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'const_value',1}}] )
	    -| ['compiler_generated'] )
	end
'is_const'/1 =
    %% Line 1244
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_const',_cor2}> when 'true' ->
	      'true'
	  %% Line 1245
	  <_cor3> when 'true' ->
	      'false'
	end
'mk_var'/1 =
    %% Line 1252
    fun (_cor0) ->
	{'icode_variable',_cor0,'var',[]}
'var_name'/1 =
    %% Line 1255
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',Name,'var',_cor2}> when 'true' ->
	      Name
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'var_name',1}}] )
	    -| ['compiler_generated'] )
	end
'is_var'/1 =
    %% Line 1258
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,'var',_cor3}> when 'true' ->
	      'true'
	  %% Line 1259
	  <_cor4> when 'true' ->
	      'false'
	end
'mk_reg'/1 =
    %% Line 1262
    fun (_cor0) ->
	{'icode_variable',_cor0,'reg',[]}
'reg_name'/1 =
    %% Line 1265
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',Name,'reg',_cor2}> when 'true' ->
	      Name
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reg_name',1}}] )
	    -| ['compiler_generated'] )
	end
'reg_is_gcsafe'/1 =
    %% Line 1268
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,'reg',_cor3}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reg_is_gcsafe',1}}] )
	    -| ['compiler_generated'] )
	end
'is_reg'/1 =
    %% Line 1271
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,'reg',_cor3}> when 'true' ->
	      'true'
	  %% Line 1272
	  <_cor4> when 'true' ->
	      'false'
	end
'mk_fvar'/1 =
    %% Line 1275
    fun (_cor0) ->
	{'icode_variable',_cor0,'fvar',[]}
'fvar_name'/1 =
    %% Line 1278
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',Name,'fvar',_cor2}> when 'true' ->
	      Name
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fvar_name',1}}] )
	    -| ['compiler_generated'] )
	end
'is_fvar'/1 =
    %% Line 1281
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,'fvar',_cor3}> when 'true' ->
	      'true'
	  %% Line 1282
	  <_cor4> when 'true' ->
	      'false'
	end
'is_variable'/1 =
    %% Line 1285
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 1286
	  <_cor5> when 'true' ->
	      'false'
	end
'annotate_variable'/2 =
    %% Line 1290
    fun (_cor1,_cor0) ->
	%% Line 1291
	case _cor1 of
	  <{'icode_variable',_cor6,_cor7,_cor8}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor1, _cor0)
	  ( <_cor9> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_variable'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'is_annotated_variable'/1 =
    %% Line 1294
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,_cor3,[]}> when 'true' ->
	      %% Line 1295
	      'false'
	  %% Line 1296
	  <{'icode_variable',_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 1297
	      'true'
	  %% Line 1298
	  <_cor7> when 'true' ->
	      %% Line 1299
	      'false'
	end
'unannotate_variable'/1 =
    %% Line 1302
    fun (_cor0) ->
	%% Line 1303
	case _cor0 of
	  <{'icode_variable',_cor4,_cor5,_cor6}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor0, [])
	  ( <_cor7> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','icode_variable'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'variable_annotation'/1 =
    %% Line 1306
    fun (_cor0) ->
	case _cor0 of
	  <{'icode_variable',_cor2,_cor3,Anno}> when 'true' ->
	      %% Line 1307
	      Anno
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'variable_annotation',1}}] )
	    -| ['compiler_generated'] )
	end
'uses'/1 =
    %% Line 1319
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1320
	    apply 'args'/1
		(_cor0)
	in  %% Line 1320
	    apply 'remove_constants'/1
		(_cor1)
'args'/1 =
    %% Line 1323
    fun (_cor0) ->
	%% Line 1324
	case _cor0 of
	  %% Line 1325
	  <{'icode_if',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      apply 'if_args'/1
		  (_cor0)
	  %% Line 1326
	  <{'icode_switch_val',_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      let <_cor1> =
		  apply 'switch_val_term'/1
		      (_cor0)
	      in  [_cor1|[]]
	  %% Line 1327
	  <{'icode_switch_tuple_arity',_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor2> =
		  apply 'switch_tuple_arity_term'/1
		      (_cor0)
	      in  [_cor2|[]]
	  %% Line 1328
	  <{'icode_type',_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      apply 'type_args'/1
		  (_cor0)
	  %% Line 1329
	  <{'icode_move',_cor24,_cor25}> when 'true' ->
	      let <_cor3> =
		  apply 'move_src'/1
		      (_cor0)
	      in  [_cor3|[]]
	  %% Line 1330
	  <{'icode_fail',_cor26,_cor27,_cor28}> when 'true' ->
	      apply 'fail_args'/1
		  (_cor0)
	  %% Line 1331
	  <{'icode_call',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      apply 'call_args'/1
		  (_cor0)
	  %% Line 1332
	  <{'icode_enter',_cor36,_cor37,_cor38}> when 'true' ->
	      apply 'enter_args'/1
		  (_cor0)
	  %% Line 1333
	  <{'icode_return',_cor39}> when 'true' ->
	      apply 'return_vars'/1
		  (_cor0)
	  %% Line 1334
	  <{'icode_phi',_cor40,_cor41,_cor42}> when 'true' ->
	      apply 'phi_args'/1
		  (_cor0)
	  %% Line 1335
	  <{'icode_goto',_cor43}> when 'true' ->
	      []
	  %% Line 1336
	  <{'icode_begin_try',_cor44,_cor45}> when 'true' ->
	      []
	  %% Line 1337
	  <{'icode_begin_handler',_cor46}> when 'true' ->
	      []
	  %% Line 1338
	  <{'icode_end_try'}> when 'true' ->
	      []
	  %% Line 1339
	  <{'icode_comment',_cor47}> when 'true' ->
	      []
	  %% Line 1340
	  <{'icode_label',_cor48}> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'defines'/1 =
    %% Line 1344
    fun (_cor0) ->
	%% Line 1345
	case _cor0 of
	  %% Line 1346
	  <{'icode_move',_cor7,_cor8}> when 'true' ->
	      let <_cor1> =
		  apply 'move_dst'/1
		      (_cor0)
	      in  apply 'remove_constants'/1
		      ([_cor1|[]])
	  %% Line 1347
	  <{'icode_call',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor2> =
		  apply 'call_dstlist'/1
		      (_cor0)
	      in  apply 'remove_constants'/1
		      (_cor2)
	  %% Line 1348
	  <{'icode_begin_handler',_cor16}> when 'true' ->
	      let <_cor3> =
		  apply 'begin_handler_dstlist'/1
		      (_cor0)
	      in  apply 'remove_constants'/1
		      (_cor3)
	  %% Line 1349
	  <{'icode_phi',_cor17,_cor18,_cor19}> when 'true' ->
	      let <_cor4> =
		  apply 'phi_dst'/1
		      (_cor0)
	      in  apply 'remove_constants'/1
		      ([_cor4|[]])
	  %% Line 1350
	  <{'icode_if',_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      []
	  %% Line 1351
	  <{'icode_switch_val',_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      []
	  %% Line 1352
	  <{'icode_switch_tuple_arity',_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      []
	  %% Line 1353
	  <{'icode_type',_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      []
	  %% Line 1354
	  <{'icode_goto',_cor38}> when 'true' ->
	      []
	  %% Line 1355
	  <{'icode_fail',_cor39,_cor40,_cor41}> when 'true' ->
	      []
	  %% Line 1356
	  <{'icode_enter',_cor42,_cor43,_cor44}> when 'true' ->
	      []
	  %% Line 1357
	  <{'icode_return',_cor45}> when 'true' ->
	      []
	  %% Line 1358
	  <{'icode_begin_try',_cor46,_cor47}> when 'true' ->
	      []
	  %% Line 1359
	  <{'icode_end_try'}> when 'true' ->
	      []
	  %% Line 1360
	  <{'icode_comment',_cor48}> when 'true' ->
	      []
	  %% Line 1361
	  <{'icode_label',_cor49}> when 'true' ->
	      []
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'remove_constants'/1 =
    %% Line 1365
    fun (_cor0) ->
	%% Line 1366
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[V|_cor2]> when 'true' ->
			    ( case apply 'is_const'/1
				       (V) of
				<'false'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [V|_cor5]
					  -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'subst'/2 =
    %% Line 1380
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1381
	    apply 'subst_uses'/2
		(_cor1, _cor0)
	in  %% Line 1381
	    apply 'subst_defines'/2
		(_cor1, _cor2)
'subst_uses'/2 =
    %% Line 1385
    fun (_cor1,_cor0) ->
	%% Line 1386
	case _cor0 of
	  %% Line 1387
	  <{'icode_if',_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      let <_cor2> =
		  apply 'if_args'/1
		      (_cor0)
	      in  let <_rec33> =
		      apply 'subst_list'/2
			  (_cor1, _cor2)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec33)
	  %% Line 1388
	  <{'icode_switch_val',_cor52,_cor53,_cor54,_cor55}> when 'true' ->
	      let <_cor6> =
		  %% Line 1389
		  apply 'switch_val_term'/1
		      (_cor0)
	      in  let <_rec35> =
		      %% Line 1389
		      apply 'subst1'/2
			  (_cor1, _cor6)
		  in  %% Line 1389
		      call 'erlang':'setelement'
			  (2, _cor0, _rec35)
	  %% Line 1390
	  <{'icode_switch_tuple_arity',_cor61,_cor62,_cor63,_cor64}> when 'true' ->
	      let <_cor10> =
		  %% Line 1391
		  apply 'switch_tuple_arity_term'/1
		      (_cor0)
	      in  let <_rec37> =
		      %% Line 1391
		      apply 'subst1'/2
			  (_cor1, _cor10)
		  in  %% Line 1391
		      call 'erlang':'setelement'
			  (2, _cor0, _rec37)
	  %% Line 1392
	  <{'icode_type',_cor70,_cor71,_cor72,_cor73,_cor74}> when 'true' ->
	      let <_cor14> =
		  apply 'type_args'/1
		      (_cor0)
	      in  let <_rec39> =
		      apply 'subst_list'/2
			  (_cor1, _cor14)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec39)
	  %% Line 1393
	  <{'icode_move',_cor81,_cor82}> when 'true' ->
	      let <_cor18> =
		  apply 'move_src'/1
		      (_cor0)
	      in  let <_rec41> =
		      apply 'subst1'/2
			  (_cor1, _cor18)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec41)
	  %% Line 1394
	  <{'icode_fail',_cor86,_cor87,_cor88}> when 'true' ->
	      let <_cor22> =
		  apply 'fail_args'/1
		      (_cor0)
	      in  let <_rec43> =
		      apply 'subst_list'/2
			  (_cor1, _cor22)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec43)
	  %% Line 1395
	  <{'icode_call',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99}> when 'true' ->
	      let <_cor26> =
		  apply 'call_args'/1
		      (_cor0)
	      in  let <_rec45> =
		      apply 'subst_list'/2
			  (_cor1, _cor26)
		  in  call 'erlang':'setelement'
			  (4, _cor0, _rec45)
	  %% Line 1396
	  <{'icode_enter',_cor108,_cor109,_cor110}> when 'true' ->
	      let <_cor30> =
		  apply 'enter_args'/1
		      (_cor0)
	      in  let <_rec47> =
		      apply 'subst_list'/2
			  (_cor1, _cor30)
		  in  call 'erlang':'setelement'
			  (3, _cor0, _rec47)
	  %% Line 1397
	  <{'icode_return',_cor115}> when 'true' ->
	      let <_cor34> =
		  apply 'return_vars'/1
		      (_cor0)
	      in  let <_rec49> =
		      apply 'subst_list'/2
			  (_cor1, _cor34)
		  in  {'icode_return',_rec49}
	  %% Line 1398
	  <{'icode_phi',_cor117,_cor118,_cor119}> when 'true' ->
	      apply 'phi_argvar_subst'/2
		  (_cor0, _cor1)
	  %% Line 1399
	  <{'icode_goto',_cor120}> when 'true' ->
	      _cor0
	  %% Line 1400
	  <{'icode_begin_try',_cor121,_cor122}> when 'true' ->
	      _cor0
	  %% Line 1401
	  <{'icode_begin_handler',_cor123}> when 'true' ->
	      _cor0
	  %% Line 1402
	  <{'icode_end_try'}> when 'true' ->
	      _cor0
	  %% Line 1403
	  <{'icode_comment',_cor124}> when 'true' ->
	      _cor0
	  %% Line 1404
	  <{'icode_label',_cor125}> when 'true' ->
	      _cor0
	  ( <_cor38> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor38})
	    -| ['compiler_generated'] )
	end
'subst_defines'/2 =
    %% Line 1409
    fun (_cor1,_cor0) ->
	%% Line 1410
	case _cor0 of
	  %% Line 1411
	  <{'icode_move',_cor21,_cor22}> when 'true' ->
	      let <_cor2> =
		  apply 'move_dst'/1
		      (_cor0)
	      in  let <_rec52> =
		      apply 'subst1'/2
			  (_cor1, _cor2)
		  in  call 'erlang':'setelement'
			  (2, _cor0, _rec52)
	  %% Line 1412
	  <{'icode_call',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      let <_cor6> =
		  %% Line 1413
		  apply 'call_dstlist'/1
		      (_cor0)
	      in  let <_rec54> =
		      %% Line 1413
		      apply 'subst_list'/2
			  (_cor1, _cor6)
		  in  %% Line 1413
		      call 'erlang':'setelement'
			  (2, _cor0, _rec54)
	  %% Line 1414
	  <{'icode_begin_handler',_cor41}> when 'true' ->
	      let <_cor10> =
		  %% Line 1416
		  apply 'begin_handler_dstlist'/1
		      (_cor0)
	      in  let <_rec56> =
		      %% Line 1415
		      apply 'subst_list'/2
			  (_cor1, _cor10)
		  in  %% Line 1415
		      {'icode_begin_handler',_rec56}
	  %% Line 1417
	  <{'icode_phi',_cor43,_cor44,_cor45}> when 'true' ->
	      let <_cor14> =
		  apply 'phi_dst'/1
		      (_cor0)
	      in  let <_rec59> =
		      apply 'subst1'/2
			  (_cor1, _cor14)
		  in  call 'erlang':'setelement'
			  (2, _cor0, _rec59)
	  %% Line 1418
	  <{'icode_if',_cor50,_cor51,_cor52,_cor53,_cor54}> when 'true' ->
	      _cor0
	  %% Line 1419
	  <{'icode_switch_val',_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      _cor0
	  %% Line 1420
	  <{'icode_switch_tuple_arity',_cor59,_cor60,_cor61,_cor62}> when 'true' ->
	      _cor0
	  %% Line 1421
	  <{'icode_type',_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
	      _cor0
	  %% Line 1422
	  <{'icode_goto',_cor68}> when 'true' ->
	      _cor0
	  %% Line 1423
	  <{'icode_fail',_cor69,_cor70,_cor71}> when 'true' ->
	      _cor0
	  %% Line 1424
	  <{'icode_enter',_cor72,_cor73,_cor74}> when 'true' ->
	      _cor0
	  %% Line 1425
	  <{'icode_return',_cor75}> when 'true' ->
	      _cor0
	  %% Line 1426
	  <{'icode_begin_try',_cor76,_cor77}> when 'true' ->
	      _cor0
	  %% Line 1427
	  <{'icode_end_try'}> when 'true' ->
	      _cor0
	  %% Line 1428
	  <{'icode_comment',_cor78}> when 'true' ->
	      _cor0
	  %% Line 1429
	  <{'icode_label',_cor79}> when 'true' ->
	      _cor0
	  ( <_cor18> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor18})
	    -| ['compiler_generated'] )
	end
'subst_list'/2 =
    %% Line 1432
    fun (_cor1,_cor0) ->
	%% Line 1433
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[I|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'subst1'/2
				    (_cor1, I)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'subst1'/2 =
    %% Line 1435
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],I> when 'true' ->
	      I
	  %% Line 1436
	  <[{I,Y}|_cor4],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     I) ->
	      Y
	  %% Line 1437
	  <[_cor6|Pairs],I> when 'true' ->
	      apply 'subst1'/2
		  (Pairs, I)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'subst1',2}}] )
	    -| ['compiler_generated'] )
	end
'successors'/1 =
    %% Line 1448
    fun (_cor0) ->
	%% Line 1449
	case _cor0 of
	  %% Line 1450
	  <{'icode_if',_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <_cor1> =
		  %% Line 1451
		  apply 'if_true_label'/1
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 1451
		      apply 'if_false_label'/1
			  (_cor0)
		  in  %% Line 1451
		      [_cor1|[_cor2|[]]]
	  %% Line 1452
	  <{'icode_goto',_cor36}> when 'true' ->
	      let <_cor3> =
		  %% Line 1453
		  apply 'goto_label'/1
		      (_cor0)
	      in  %% Line 1453
		  [_cor3|[]]
	  %% Line 1454
	  <{'icode_switch_val',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      let <_cor9> =
		  %% Line 1455
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[{_cor41,L}|_cor5]> when 'true' ->
				      let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [L|_cor8]
					    -| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    apply 'switch_val_cases'/1
				(_cor0)
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 1456
		      apply 'switch_val_fail_label'/1
			  (_cor0)
		  in  %% Line 1456
		      [_cor11|_cor9]
	  %% Line 1457
	  <{'icode_switch_tuple_arity',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      let <_cor17> =
		  %% Line 1458
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor15) ->
				case _cor15 of
				  <[{_cor46,L}|_cor13]> when 'true' ->
				      let <_cor16> =
					  apply 'lc$^1'/1
					      (_cor13)
				      in  ( [L|_cor16]
					    -| ['compiler_generated'] )
				  ( <[_cor12|_cor13]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor13)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor15> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor14> =
			    apply 'switch_tuple_arity_cases'/1
				(_cor0)
			in  apply 'lc$^1'/1
				(_cor14)
		    -| ['list_comprehension'] )
	      in  let <_cor19> =
		      %% Line 1459
		      apply 'switch_tuple_arity_fail_label'/1
			  (_cor0)
		  in  %% Line 1459
		      [_cor19|_cor17]
	  %% Line 1460
	  <{'icode_type',_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
	      let <_cor20> =
		  %% Line 1461
		  apply 'type_true_label'/1
		      (_cor0)
	      in  let <_cor21> =
		      %% Line 1461
		      apply 'type_false_label'/1
			  (_cor0)
		  in  %% Line 1461
		      [_cor20|[_cor21|[]]]
	  %% Line 1462
	  <{'icode_call',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      let <_cor25> =
		  %% Line 1463
		  case apply 'call_continuation'/1
			   (_cor0) of
		    <[]> when 'true' ->
			[]
		    <L>
			when call 'erlang':'is_integer'
			      (L) ->
			[L|[]]
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor23> =
		      %% Line 1465
		      case apply 'call_fail_label'/1
			       (_cor0) of
			<[]> when 'true' ->
			    []
			<L>
			    when call 'erlang':'is_integer'
				  (L) ->
			    [L|[]]
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1464
		      call 'erlang':'++'
			  (_cor25, _cor23)
	  %% Line 1466
	  <{'icode_begin_try',_cor59,_cor60}> when 'true' ->
	      let <_cor26> =
		  %% Line 1467
		  apply 'begin_try_successor'/1
		      (_cor0)
	      in  let <_cor27> =
		      %% Line 1467
		      apply 'begin_try_label'/1
			  (_cor0)
		  in  %% Line 1467
		      [_cor26|[_cor27|[]]]
	  %% Line 1468
	  <{'icode_fail',_cor61,_cor62,_cor63}> when 'true' ->
	      %% Line 1469
	      case apply 'fail_label'/1
		       (_cor0) of
		<[]> when 'true' ->
		    []
		<L>
		    when call 'erlang':'is_integer'
			  (L) ->
		    [L|[]]
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1470
	  <{'icode_enter',_cor64,_cor65,_cor66}> when 'true' ->
	      []
	  %% Line 1471
	  <{'icode_return',_cor67}> when 'true' ->
	      []
	  %% Line 1472
	  <{'icode_comment',_cor68}> when 'true' ->
	      []
	  %% Line 1474
	  <{'icode_move',_cor69,_cor70}> when 'true' ->
	      []
	  %% Line 1475
	  <{'icode_begin_handler',_cor71}> when 'true' ->
	      []
	  ( <_cor29> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor29})
	    -| ['compiler_generated'] )
	end
'fails_to'/1 =
    %% Line 1484
    fun (_cor0) ->
	%% Line 1485
	case _cor0 of
	  %% Line 1486
	  <{'icode_switch_val',_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor1> =
		  apply 'switch_val_fail_label'/1
		      (_cor0)
	      in  [_cor1|[]]
	  %% Line 1487
	  <{'icode_switch_tuple_arity',_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor2> =
		  apply 'switch_tuple_arity_fail_label'/1
		      (_cor0)
	      in  [_cor2|[]]
	  %% Line 1488
	  <{'icode_call',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 1489
	      case apply 'call_fail_label'/1
		       (_cor0) of
		<[]> when 'true' ->
		    []
		<L>
		    when call 'erlang':'is_integer'
			  (L) ->
		    [L|[]]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1490
	  <{'icode_begin_try',_cor23,_cor24}> when 'true' ->
	      let <_cor4> =
		  apply 'begin_try_label'/1
		      (_cor0)
	      in  [_cor4|[]]
	  %% Line 1491
	  <{'icode_fail',_cor25,_cor26,_cor27}> when 'true' ->
	      %% Line 1492
	      case apply 'fail_label'/1
		       (_cor0) of
		<[]> when 'true' ->
		    []
		<L>
		    when call 'erlang':'is_integer'
			  (L) ->
		    [L|[]]
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1493
	  <{'icode_if',_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      []
	  %% Line 1494
	  <{'icode_enter',_cor33,_cor34,_cor35}> when 'true' ->
	      []
	  %% Line 1495
	  <{'icode_goto',_cor36}> when 'true' ->
	      []
	  %% Line 1496
	  <{'icode_type',_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      []
	  %% Line 1497
	  <{'icode_return',_cor42}> when 'true' ->
	      []
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'redirect_jmp'/3 =
    %% Line 1509
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Jmp,ToOld,_cor78>
	      when call 'erlang':'=:='
		    (_cor78,
		     ToOld) ->
	      %% Line 1510
	      Jmp
	  %% Line 1511
	  <Jmp,ToOld,ToNew> when 'true' ->
	      let <_cor69> =
		  %% Line 1513
		  case Jmp of
		    %% Line 1514
		    <{'icode_if',_cor79,_cor80,_cor81,_cor82,_cor83}> when 'true' ->
			let <_cor4> =
			    %% Line 1515
			    case apply 'if_true_label'/1
				     (Jmp) of
			      %% Line 1516
			      <_cor84>
				  when call 'erlang':'=:='
					(_cor84,
					 ToOld) ->
				  apply 'if_true_label_update'/2
				      (Jmp, ToNew)
			      %% Line 1517
			      <_cor85> when 'true' ->
				  Jmp
			    end
			in  %% Line 1519
			    case apply 'if_false_label'/1
				     (_cor4) of
			      %% Line 1520
			      <_cor86>
				  when call 'erlang':'=:='
					(_cor86,
					 ToOld) ->
				  apply 'if_false_label_update'/2
				      (_cor4, ToNew)
			      %% Line 1521
			      <_cor87> when 'true' ->
				  _cor4
			    end
		    %% Line 1523
		    <{'icode_goto',_cor88}> when 'true' ->
			%% Line 1524
			case apply 'goto_label'/1
				 (Jmp) of
			  %% Line 1525
			  <_cor89>
			      when call 'erlang':'=:='
				    (_cor89,
				     ToOld) ->
			      {'icode_goto',ToNew}
			  %% Line 1526
			  <_cor91> when 'true' ->
			      Jmp
			end
		    %% Line 1528
		    <{'icode_switch_val',_cor92,_cor93,_cor94,_cor95}> when 'true' ->
			let <_cor11> =
			    %% Line 1529
			    case apply 'switch_val_fail_label'/1
				     (Jmp) of
			      %% Line 1530
			      <_cor96>
				  when call 'erlang':'=:='
					(_cor96,
					 ToOld) ->
				  apply 'switch_val_fail_label_update'/2
				      (Jmp, ToNew)
			      %% Line 1531
			      <_cor97> when 'true' ->
				  Jmp
			    end
			in  let <_cor20> =
				%% Line 1533
				( letrec
				      'lc$^0'/1 =
					  fun (_cor16) ->
					      case _cor16 of
						<[%% Line 1536
						  Pair|_cor14]> when 'true' ->
						    let <_cor18> =
							case Pair of
							  %% Line 1534
							  <{Val,_cor98}>
							      when call 'erlang':'=:='
								    (_cor98,
								     ToOld) ->
							      {Val,ToNew}
							  %% Line 1535
							  <Unchanged> when 'true' ->
							      Unchanged
							end
						    in  let <_cor19> =
							    %% Line 1536
							    apply 'lc$^0'/1
								(_cor14)
							in  ( [_cor18|_cor19]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor16> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor16})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor15> =
					  %% Line 1536
					  apply 'switch_val_cases'/1
					      (_cor11)
				      in  apply 'lc$^0'/1
					      (_cor15)
				  -| ['list_comprehension'] )
			    in  %% Line 1537
				case _cor11 of
				  <{'icode_switch_val',_cor99,_cor100,_cor101,_cor102}> when 'true' ->
				      call 'erlang':'setelement'
					  (5, _cor11, _cor20)
				  ( <_cor103> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','icode_switch_val'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    %% Line 1538
		    <{'icode_switch_tuple_arity',_cor104,_cor105,_cor106,_cor107}> when 'true' ->
			let <_cor27> =
			    %% Line 1539
			    case apply 'switch_tuple_arity_fail_label'/1
				     (Jmp) of
			      %% Line 1540
			      <_cor108>
				  when call 'erlang':'=:='
					(_cor108,
					 ToOld) ->
				  %% Line 1541
				  call 'erlang':'setelement'
				      (3, Jmp, ToNew)
			      %% Line 1542
			      <_cor114> when 'true' ->
				  Jmp
			    end
			in  let <_cor36> =
				%% Line 1544
				( letrec
				      'lc$^1'/1 =
					  fun (_cor32) ->
					      case _cor32 of
						<[%% Line 1547
						  Pair|_cor30]> when 'true' ->
						    let <_cor34> =
							case Pair of
							  %% Line 1545
							  <{Val,_cor115}>
							      when call 'erlang':'=:='
								    (_cor115,
								     ToOld) ->
							      {Val,ToNew}
							  %% Line 1546
							  <Unchanged> when 'true' ->
							      Unchanged
							end
						    in  let <_cor35> =
							    %% Line 1547
							    apply 'lc$^1'/1
								(_cor30)
							in  ( [_cor34|_cor35]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor32> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor32})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor31> =
					  %% Line 1547
					  apply 'switch_tuple_arity_cases'/1
					      (_cor27)
				      in  apply 'lc$^1'/1
					      (_cor31)
				  -| ['list_comprehension'] )
			    in  %% Line 1548
				case _cor27 of
				  <{'icode_switch_tuple_arity',_cor116,_cor117,_cor118,_cor119}> when 'true' ->
				      call 'erlang':'setelement'
					  (5, _cor27, _cor36)
				  ( <_cor120> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','icode_switch_tuple_arity'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    %% Line 1549
		    <{'icode_type',_cor121,_cor122,_cor123,_cor124,_cor125}> when 'true' ->
			let <_cor43> =
			    %% Line 1550
			    case apply 'type_true_label'/1
				     (Jmp) of
			      %% Line 1551
			      <_cor126>
				  when call 'erlang':'=:='
					(_cor126,
					 ToOld) ->
				  call 'erlang':'setelement'
				      (4, Jmp, ToNew)
			      %% Line 1552
			      <_cor133> when 'true' ->
				  Jmp
			    end
			in  %% Line 1554
			    case apply 'type_false_label'/1
				     (_cor43) of
			      %% Line 1555
			      <_cor134>
				  when call 'erlang':'=:='
					(_cor134,
					 ToOld) ->
				  case _cor43 of
				    <{'icode_type',_cor135,_cor136,_cor137,_cor138,_cor139}> when 'true' ->
					call 'erlang':'setelement'
					    (5, _cor43, ToNew)
				    ( <_cor140> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','icode_type'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 1556
			      <_cor141> when 'true' ->
				  _cor43
			    end
		    %% Line 1558
		    <{'icode_call',_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148}> when 'true' ->
			let <_cor49> =
			    %% Line 1559
			    case apply 'call_continuation'/1
				     (Jmp) of
			      %% Line 1560
			      <_cor149>
				  when call 'erlang':'=:='
					(_cor149,
					 ToOld) ->
				  ToNew
			      %% Line 1561
			      <OldCont> when 'true' ->
				  OldCont
			    end
			in  let <_cor52> =
				%% Line 1563
				case apply 'call_fail_label'/1
					 (Jmp) of
				  %% Line 1564
				  <_cor150>
				      when call 'erlang':'=:='
					    (_cor150,
					     ToOld) ->
				      ToNew
				  %% Line 1565
				  <OldFail> when 'true' ->
				      OldFail
				end
			    in  let <_cor55> =
				    %% Line 1568
				    call 'erlang':'setelement'
					(7, Jmp, _cor52)
				in  %% Line 1567
				    call 'erlang':'setelement'
					(6, _cor55, _cor49)
		    %% Line 1569
		    <{'icode_begin_try',_cor159,_cor160}> when 'true' ->
			let <_cor58> =
			    %% Line 1570
			    case apply 'begin_try_label'/1
				     (Jmp) of
			      %% Line 1571
			      <_cor161>
				  when call 'erlang':'=:='
					(_cor161,
					 ToOld) ->
				  ToNew
			      %% Line 1572
			      <OldLab> when 'true' ->
				  OldLab
			    end
			in  let <_cor61> =
				%% Line 1574
				case apply 'begin_try_successor'/1
					 (Jmp) of
				  %% Line 1575
				  <_cor162>
				      when call 'erlang':'=:='
					    (_cor162,
					     ToOld) ->
				      ToNew
				  %% Line 1576
				  <OldSucc> when 'true' ->
				      OldSucc
				end
			    in  %% Line 1578
				{'icode_begin_try',_cor58,_cor61}
		    %% Line 1579
		    <{'icode_fail',_cor164,_cor165,_cor166}> when 'true' ->
			%% Line 1580
			case apply 'fail_label'/1
				 (Jmp) of
			  %% Line 1581
			  <_cor167>
			      when call 'erlang':'=:='
				    (_cor167,
				     ToOld) ->
			      call 'erlang':'setelement'
				  (4, Jmp, ToNew)
			  %% Line 1582
			  <_cor172> when 'true' ->
			      Jmp
			end
		    ( <_cor68> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor68})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor71> =
		      %% Line 1587
		      apply 'successors'/1
			  (_cor69)
		  in  %% Line 1587
		      case call 'ordsets':'from_list'
			       (_cor71) of
			%% Line 1588
			<[Label|[]]> when 'true' ->
			    let <Goto> =
				%% Line 1589
				apply 'mk_goto'/1
				    (Label)
			    in  %% Line 1590
				case _cor69 of
				  %% Line 1591
				  <{'icode_if',_cor173,_cor174,_cor175,_cor176,_cor177}> when 'true' ->
				      Goto
				  %% Line 1592
				  <{'icode_switch_tuple_arity',_cor178,_cor179,_cor180,_cor181}> when 'true' ->
				      Goto
				  %% Line 1593
				  <{'icode_switch_val',_cor182,_cor183,_cor184,_cor185}> when 'true' ->
				      Goto
				  %% Line 1594
				  <{'icode_type',_cor186,_cor187,_cor188,_cor189,_cor190}> when 'true' ->
				      Goto
				  %% Line 1595
				  <_cor191> when 'true' ->
				      _cor69
				end
			%% Line 1597
			<_cor192> when 'true' ->
			    _cor69
		      end
	end
'is_branch'/1 =
    %% Line 1630
    fun (_cor0) ->
	%% Line 1631
	case _cor0 of
	  %% Line 1632
	  <{'icode_if',_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      'true'
	  %% Line 1633
	  <{'icode_switch_val',_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      'true'
	  %% Line 1634
	  <{'icode_switch_tuple_arity',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      'true'
	  %% Line 1635
	  <{'icode_type',_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      'true'
	  %% Line 1636
	  <{'icode_goto',_cor23}> when 'true' ->
	      'true'
	  %% Line 1637
	  <{'icode_fail',_cor24,_cor25,_cor26}> when 'true' ->
	      'true'
	  %% Line 1638
	  <{'icode_call',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      %% Line 1639
	      case apply 'call_fail_label'/1
		       (_cor0) of
		%% Line 1640
		<[]> when 'true' ->
		    let <_cor1> =
			apply 'call_continuation'/1
			    (_cor0)
		    in  call 'erlang':'=/='
			    (_cor1, [])
		%% Line 1641
		<_cor34> when 'true' ->
		    'true'
	      end
	  %% Line 1643
	  <{'icode_enter',_cor35,_cor36,_cor37}> when 'true' ->
	      'true'
	  %% Line 1644
	  <{'icode_return',_cor38}> when 'true' ->
	      'true'
	  %% Line 1645
	  <{'icode_begin_try',_cor39,_cor40}> when 'true' ->
	      'true'
	  %% Line 1647
	  <{'icode_move',_cor41,_cor42}> when 'true' ->
	      'false'
	  %% Line 1648
	  <{'icode_begin_handler',_cor43}> when 'true' ->
	      'false'
	  %% Line 1649
	  <{'icode_end_try'}> when 'true' ->
	      'false'
	  %% Line 1650
	  <{'icode_comment',_cor44}> when 'true' ->
	      'false'
	  %% Line 1651
	  <{'icode_label',_cor45}> when 'true' ->
	      'false'
	  %% Line 1652
	  <{'icode_phi',_cor46,_cor47,_cor48}> when 'true' ->
	      'false'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'mk_new_var'/0 =
    %% Line 1660
    fun () ->
	let <_cor0> =
	    %% Line 1661
	    call 'hipe_gensym':'get_next_var'
		('icode')
	in  %% Line 1661
	    apply 'mk_var'/1
		(_cor0)
'mk_new_fvar'/0 =
    %% Line 1668
    fun () ->
	let <_cor0> =
	    %% Line 1669
	    call 'hipe_gensym':'get_next_var'
		('icode')
	in  %% Line 1669
	    apply 'mk_fvar'/1
		(_cor0)
'mk_new_reg'/0 =
    %% Line 1676
    fun () ->
	let <_cor0> =
	    %% Line 1677
	    call 'hipe_gensym':'get_next_var'
		('icode')
	in  %% Line 1677
	    apply 'mk_reg'/1
		(_cor0)
'mk_new_label'/0 =
    %% Line 1684
    fun () ->
	let <_cor0> =
	    %% Line 1685
	    call 'hipe_gensym':'get_next_label'
		('icode')
	in  %% Line 1685
	    apply 'mk_label'/1
		(_cor0)
'strip_comments'/1 =
    %% Line 1712
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1713
	    apply 'icode_code'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1713
		apply 'no_comments'/1
		    (_cor1)
	    in  %% Line 1713
		apply 'icode_code_update'/2
		    (_cor0, _cor2)
'no_comments'/1 =
    %% Line 1718
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1719
	      []
	  %% Line 1720
	  <[I|Xs]> when 'true' ->
	      %% Line 1721
	      case apply 'is_comment'/1
		       (I) of
		%% Line 1722
		<'true'> when 'true' ->
		    apply 'no_comments'/1
			(Xs)
		%% Line 1723
		<'false'> when 'true' ->
		    let <_cor1> =
			apply 'no_comments'/1
			    (Xs)
		    in  [I|_cor1]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'no_comments',1}}] )
	    -| ['compiler_generated'] )
	end
'is_safe'/1 =
    %% Line 1734
    fun (_cor0) ->
	%% Line 1735
	case _cor0 of
	  %% Line 1737
	  <{'icode_move',_cor4,_cor5}> when 'true' ->
	      'true'
	  %% Line 1738
	  <{'icode_phi',_cor6,_cor7,_cor8}> when 'true' ->
	      'true'
	  %% Line 1739
	  <{'icode_begin_handler',_cor9}> when 'true' ->
	      'true'
	  %% Line 1740
	  <{'icode_call',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 1741
	      case apply 'call_fun'/1
		       (_cor0) of
		%% Line 1742
		<{M,F,A}> when 'true' ->
		    %% Line 1743
		    call 'erl_bifs':'is_safe'
			(M, F, A)
		%% Line 1744
		<Op> when 'true' ->
		    %% Line 1745
		    call 'hipe_icode_primops':'is_safe'
			(Op)
	      end
	  %% Line 1748
	  <{'icode_if',_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      'false'
	  %% Line 1749
	  <{'icode_switch_val',_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      'false'
	  %% Line 1750
	  <{'icode_switch_tuple_arity',_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      'false'
	  %% Line 1751
	  <{'icode_type',_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      'false'
	  %% Line 1752
	  <{'icode_goto',_cor35}> when 'true' ->
	      'false'
	  %% Line 1753
	  <{'icode_label',_cor36}> when 'true' ->
	      'false'
	  %% Line 1755
	  <{'icode_return',_cor37}> when 'true' ->
	      'false'
	  %% Line 1756
	  <{'icode_fail',_cor38,_cor39,_cor40}> when 'true' ->
	      'false'
	  %% Line 1757
	  <{'icode_enter',_cor41,_cor42,_cor43}> when 'true' ->
	      'false'
	  %% Line 1760
	  <{'icode_comment',_cor44}> when 'true' ->
	      'false'
	  %% Line 1761
	  <{'icode_begin_try',_cor45,_cor46}> when 'true' ->
	      'false'
	  %% Line 1762
	  <{'icode_end_try'}> when 'true' ->
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'highest_var'/1 =
    %% Line 1768
    fun (_cor0) ->
	%% Line 1769
	apply 'highest_var'/2
	    (_cor0, 0)
'highest_var'/2 =
    %% Line 1772
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Is],Max> when 'true' ->
	      let <Defs> =
		  %% Line 1773
		  apply 'defines'/1
		      (I)
	      in  let <Uses> =
		      %% Line 1774
		      apply 'uses'/1
			  (I)
		  in  let <_cor4> =
			  %% Line 1775
			  call 'erlang':'++'
			      (Defs, Uses)
		      in  let <_cor5> =
			      %% Line 1775
			      apply 'new_max'/2
				  (_cor4, Max)
			  in  %% Line 1775
			      apply 'highest_var'/2
				  (Is, _cor5)
	  %% Line 1776
	  <[],Max> when 'true' ->
	      %% Line 1777
	      Max
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'highest_var',2}}] )
	    -| ['compiler_generated'] )
	end
'new_max'/2 =
    %% Line 1780
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[V|Vs],Max> when 'true' ->
	      let <_cor4> =
		  %% Line 1782
		  case apply 'is_var'/1
			   (V) of
		    %% Line 1783
		    <'true'> when 'true' ->
			%% Line 1784
			apply 'var_name'/1
			    (V)
		    %% Line 1785
		    <'false'> when 'true' ->
			%% Line 1786
			case apply 'is_fvar'/1
				 (V) of
			  %% Line 1787
			  <'true'> when 'true' ->
			      %% Line 1788
			      apply 'fvar_name'/1
				  (V)
			  %% Line 1789
			  <_cor9> when 'true' ->
			      %% Line 1790
			      apply 'reg_name'/1
				  (V)
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 1793
		      call 'erlang':'max'
			  (_cor4, Max)
		  in  %% Line 1793
		      apply 'new_max'/2
			  (Vs, _cor6)
	  %% Line 1794
	  <[],Max>
	      when call 'erlang':'is_integer'
		    (Max) ->
	      %% Line 1795
	      Max
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'new_max',2}}] )
	    -| ['compiler_generated'] )
	end
'highest_label'/1 =
    %% Line 1800
    fun (_cor0) ->
	%% Line 1801
	apply 'highest_label'/2
	    (_cor0, 0)
'highest_label'/2 =
    %% Line 1804
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Is],Max> when 'true' ->
	      %% Line 1805
	      case apply 'is_label'/1
		       (I) of
		%% Line 1806
		<'true'> when 'true' ->
		    let <L> =
			%% Line 1807
			apply 'label_name'/1
			    (I)
		    in  let <NewMax> =
			    %% Line 1808
			    call 'erlang':'max'
				(L, Max)
			in  %% Line 1809
			    apply 'highest_label'/2
				(Is, NewMax)
		%% Line 1810
		<'false'> when 'true' ->
		    %% Line 1811
		    apply 'highest_label'/2
			(Is, Max)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1813
	  <[],Max>
	      when call 'erlang':'is_integer'
		    (Max) ->
	      %% Line 1814
	      Max
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'highest_label',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode', _cor0)
end