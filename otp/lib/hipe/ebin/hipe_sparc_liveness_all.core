module 'hipe_sparc_liveness_all' ['analyse'/1,
				  'analyze'/1,
				  'livein'/2,
				  'liveout'/2,
				  'module_info'/0,
				  'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'analyze',1},[{'type',74,'fun',[{'type',74,'product',[{'type',74,'cfg',[]}]}|[{'remote_type',74,[{'atom',74,'gb_trees'}|[{'atom',74,'tree'}|[[]]]]}]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'livein',2},[{'type',212,'fun',[{'type',212,'product',[{'remote_type',212,[{'atom',212,'gb_trees'}|[{'atom',212,'tree'}|[[]]]]}|[{'var',212,'_'}]]}|[{'type',212,'list',[{'var',212,'_'}]}]]}]}]]
'analyze'/1 =
    %% Line 96
    fun (_cor0) ->
	let <PO> =
	    %% Line 97
	    apply 'cfg_postorder'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 98
		apply 'init'/2
		    (PO, _cor0)
	    in  let <InitLiveness> =
		    %% Line 98
		    apply 'liveness_init'/1
			(_cor2)
		in  %% Line 99
		    apply 'merry_go_around'/3
			(PO, InitLiveness, 0)
'merry_go_around'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	%% Line 108
	case apply 'doit_once'/3
		 (_cor2, _cor1, 0) of
	  %% Line 109
	  <{NewLiveness,0}> when 'true' ->
	      %% Line 111
	      NewLiveness
	  %% Line 112
	  <{NewLiveness,_X_Changed}> when 'true' ->
	      let <_cor3> =
		  %% Line 113
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 113
		  apply 'merry_go_around'/3
		      (_cor2, NewLiveness, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'doit_once'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Liveness,Changed> when 'true' ->
	      %% Line 138
	      {Liveness,Changed}
	  %% Line 139
	  <[L|Ls],Liveness,Changed> when 'true' ->
	      let <LiveOut> =
		  %% Line 140
		  apply 'liveout'/2
		      (Liveness, L)
	      in  let <_cor4> =
		      %% Line 141
		      apply 'kill'/2
			  (L, Liveness)
		  in  let <Kill> =
			  %% Line 141
			  call 'ordsets':'subtract'
			      (LiveOut, _cor4)
		      in  let <_cor6> =
			      %% Line 142
			      apply 'gen'/2
				  (L, Liveness)
			  in  let <LiveIn> =
				  %% Line 142
				  call 'ordsets':'union'
				      (Kill, _cor6)
			      in  %% Line 143
				  case apply 'update_livein'/3
					   (L, LiveIn, Liveness) of
				    <{NewLiveness,ChangedP}> when 'true' ->
					let <_cor9> =
					    %% Line 144
					    call 'erlang':'+'
						(Changed, ChangedP)
					in  %% Line 144
					    apply 'doit_once'/3
						(Ls, NewLiveness, _cor9)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'doit_once',3}}] )
	    -| ['compiler_generated'] )
	end
'update_livein'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	%% Line 178
	case apply 'liveness_lookup'/2
		 (_cor2, _cor0) of
	  <{GK,LiveIn,Successors}> when 'true' ->
	      let <NewLiveness> =
		  %% Line 179
		  apply 'liveness_update'/3
		      (_cor2, {GK,_cor1,Successors}, _cor0)
	      in  %% Line 180
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (LiveIn,
			       _cor1) ->
			%% Line 181
			{NewLiveness,0}
		    %% Line 182
		    <> when 'true' ->
			%% Line 183
			{NewLiveness,1}
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'liveout'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	let <Succ> =
	    %% Line 192
	    apply 'successors'/2
		(_cor0, _cor1)
	in  %% Line 193
	    case Succ of
	      %% Line 194
	      <[]> when 'true' ->
		  %% Line 195
		  apply 'liveout_no_succ'/0
		      ()
	      %% Line 196
	      <_cor6> when 'true' ->
		  %% Line 197
		  apply 'liveout1'/2
		      (Succ, _cor1)
	    end
'liveout1'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 201
	    call 'ordsets':'new'
		()
	in  %% Line 201
	    apply 'liveout1'/3
		(_cor1, _cor0, _cor2)
'liveout1'/3 =
    %% Line 203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Liveness,Live> when 'true' ->
	      %% Line 204
	      Live
	  %% Line 205
	  <[L|Ls],Liveness,Live> when 'true' ->
	      let <_cor3> =
		  %% Line 206
		  apply 'livein'/2
		      (Liveness, L)
	      in  let <_cor4> =
		      %% Line 206
		      call 'ordsets':'union'
			  (_cor3, Live)
		  in  %% Line 206
		      apply 'liveout1'/3
			  (Ls, Liveness, _cor4)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'liveout1',3}}] )
	    -| ['compiler_generated'] )
	end
'successors'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	%% Line 209
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{_X_GK,_X_LiveIn,Successors}> when 'true' ->
	      %% Line 210
	      Successors
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'livein'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	%% Line 215
	case apply 'liveness_lookup'/2
		 (_cor0, _cor1) of
	  <{_X_GK,LiveIn,_X_Successors}> when 'true' ->
	      %% Line 216
	      LiveIn
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'kill'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	%% Line 219
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{{_X_Gen,Kill},_X_LiveIn,_X_Successors}> when 'true' ->
	      %% Line 220
	      Kill
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'gen'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	%% Line 223
	case apply 'liveness_lookup'/2
		 (_cor1, _cor0) of
	  <{{Gen,_X_Kill},_X_LiveIn,_X_Successors}> when 'true' ->
	      %% Line 224
	      Gen
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'init'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor10> when 'true' ->
	      %% Line 238
	      []
	  %% Line 239
	  <[L|Ls],CFG> when 'true' ->
	      let <BB> =
		  %% Line 240
		  apply 'cfg_bb'/2
		      (CFG, L)
	      in  let <Code> =
		      %% Line 241
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <Succ> =
			  %% Line 242
			  apply 'cfg_succ'/2
			      (CFG, L)
		      in  let <Transfer> =
			      %% Line 243
			      apply 'make_bb_transfer'/2
				  (Code, Succ)
			  in  let <_cor6> =
				  %% Line 244
				  call 'ordsets':'new'
				      ()
			      in  let <_cor7> =
				      %% Line 244
				      apply 'init'/2
					  (Ls, CFG)
				  in  %% Line 244
				      [{L,{Transfer,_cor6,Succ}}|_cor7]
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'make_bb_transfer'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Succ> when 'true' ->
	      let <_cor3> =
		  %% Line 248
		  call 'ordsets':'new'
		      ()
	      in  let <_cor2> =
		      %% Line 248
		      call 'ordsets':'new'
			  ()
		  in  %% Line 248
		      {_cor3,_cor2}
	  %% Line 249
	  <[I|Is],Succ> when 'true' ->
	      %% Line 250
	      case apply 'make_bb_transfer'/2
		       (Is, Succ) of
		<{Gen,Kill}> when 'true' ->
		    let <_cor5> =
			%% Line 251
			apply 'uses'/1
			    (I)
		    in  let <InstrGen> =
			    %% Line 251
			    call 'ordsets':'from_list'
				(_cor5)
			in  let <_cor7> =
				%% Line 252
				apply 'defines'/1
				    (I)
			    in  let <InstrKill> =
				    %% Line 252
				    call 'ordsets':'from_list'
					(_cor7)
				in  let <Gen1> =
					%% Line 253
					call 'ordsets':'subtract'
					    (Gen, InstrKill)
				    in  let <Gen2> =
					    %% Line 254
					    call 'ordsets':'union'
						(Gen1, InstrGen)
					in  let <Kill1> =
						%% Line 255
						call 'ordsets':'union'
						    (Kill, InstrKill)
					    in  let <Kill2> =
						    %% Line 256
						    call 'ordsets':'subtract'
							(Kill1, InstrGen)
						in  %% Line 257
						    {Gen2,Kill2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'make_bb_transfer',2}}] )
	    -| ['compiler_generated'] )
	end
'liveness_init'/1 =
    %% Line 294
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 295
	    call 'gb_trees':'empty'
		()
	in  %% Line 295
	    apply 'liveness_init'/2
		(_cor0, _cor1)
'liveness_init'/2 =
    %% Line 297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Lbl,Data}|Left],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 298
		  call 'gb_trees':'insert'
		      (Lbl, Data, Acc)
	      in  %% Line 298
		  apply 'liveness_init'/2
		      (Left, _cor2)
	  %% Line 299
	  <[],Acc> when 'true' ->
	      %% Line 300
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'liveness_init',2}}] )
	    -| ['compiler_generated'] )
	end
'liveness_lookup'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	%% Line 303
	call 'gb_trees':'get'
	    (_cor1, _cor0)
'liveness_update'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	%% Line 305
	call 'gb_trees':'update'
	    (_cor2, _cor1, _cor0)
'analyse'/1 =
    %% Line 28
    fun (_cor0) ->
	apply 'analyze'/1
	    (_cor0)
'cfg_bb'/2 =
    %% Line 29
    fun (_cor1,_cor0) ->
	call 'hipe_sparc_cfg':'bb'
	    (_cor1, _cor0)
'cfg_postorder'/1 =
    %% Line 30
    fun (_cor0) ->
	call 'hipe_sparc_cfg':'postorder'
	    (_cor0)
'cfg_succ'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	call 'hipe_sparc_cfg':'succ'
	    (_cor1, _cor0)
'uses'/1 =
    %% Line 32
    fun (_cor0) ->
	call 'hipe_sparc_defuse':'insn_use_all'
	    (_cor0)
'defines'/1 =
    %% Line 33
    fun (_cor0) ->
	call 'hipe_sparc_defuse':'insn_def_all'
	    (_cor0)
'liveout_no_succ'/0 =
    %% Line 34
    fun () ->
	let <_cor3> =
	    %% Line 35
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Reg,Type}> when 'true' ->
			%% Line 36
			call 'hipe_sparc':'mk_temp'
			    (Reg, Type)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-liveout_no_succ/0-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-liveout_no_succ/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 38
		call 'hipe_sparc_registers':'live_at_return'
		    ()
	    in  let <_cor4> =
		    %% Line 35
		    call 'lists':'map'
			(_cor3, _cor0)
		in  %% Line 35
		    call 'ordsets':'from_list'
			(_cor4)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_liveness_all')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_liveness_all', _cor0)
end