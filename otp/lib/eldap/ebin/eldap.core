module 'eldap' ['add'/3,
		'and'/1,
		'approxMatch'/2,
		'baseObject'/0,
		'close'/1,
		'controlling_process'/2,
		'delete'/2,
		'derefAlways'/0,
		'derefFindingBaseObj'/0,
		'derefInSearching'/0,
		'equalityMatch'/2,
		'greaterOrEqual'/2,
		'lessOrEqual'/2,
		'loop'/2,
		'mod_add'/2,
		'mod_delete'/2,
		'mod_replace'/2,
		'modify'/3,
		'modify_dn'/5,
		'module_info'/0,
		'module_info'/1,
		'neverDerefAliases'/0,
		'not'/1,
		'open'/1,
		'open'/2,
		'or'/1,
		'parse_dn'/1,
		'parse_ldap_url'/1,
		'present'/1,
		'search'/2,
		'simple_bind'/3,
		'singleLevel'/0,
		'start_tls'/2,
		'start_tls'/3,
		'substrings'/2,
		'wholeSubtree'/0]
    attributes [%% Line 12
		'vc' =
		    %% Line 12
		    ['$Id$ ']]
'open'/1 =
    %% Line 76
    fun (_cor0) ->
	%% Line 77
	apply 'open'/2
	    (_cor0, [])
'open'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Hosts,Opts>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Hosts)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Opts)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Self> =
		  %% Line 80
		  call 'erlang':'self'
		      ()
	      in  let <_cor5> =
		      %% Line 81
		      ( fun () ->
			    apply 'init'/3
				(Hosts, Opts, Self)
			-| [{'id',{0,0,'-open/2-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 81
			  call 'erlang':'spawn_link'
			      (_cor5)
		      in  %% Line 82
			  apply 'recv'/1
			      (Pid)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'open',2}}] )
	    -| ['compiler_generated'] )
	end
'start_tls'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	%% Line 88
	apply 'start_tls'/3
	    (_cor1, _cor0, 'infinity')
'start_tls'/3 =
    %% Line 90
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 91
	    apply 'send'/2
		(_cor2, {'start_tls',_cor1,_cor0})
	    %% Line 92
	    apply 'recv'/1
		(_cor2)
'close'/1 =
    %% Line 98
    fun (_cor0) ->
	case _cor0 of
	  <Handle>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 99
	      apply 'send'/2
		  (Handle, 'close')
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'controlling_process'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Handle,Pid>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(Handle)
		in  let <_cor3> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 106
		  call 'erlang':'link'
		      (Pid)
		  do  %% Line 107
		      apply 'send'/2
			  (Handle, {'cnt_proc',Pid})
		      %% Line 108
		      apply 'recv'/1
			  (Handle)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'controlling_process',2}}] )
	    -| ['compiler_generated'] )
	end
'simple_bind'/3 =
    %% Line 119
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle,Dn,Passwd>
	      when call 'erlang':'is_pid'
		    (Handle) ->
	      do  %% Line 120
		  apply 'send'/2
		      (Handle, {'simple_bind',Dn,Passwd})
		  %% Line 121
		  apply 'recv'/1
		      (Handle)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'simple_bind',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 136
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle,Entry,Attributes>
	      when try
		    let <_cor3> =
			call 'erlang':'is_pid'
			    (Handle)
		    in  let <_cor4> =
			    call 'erlang':'is_list'
				(Entry)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Attributes)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 137
		  apply 'add_attrs'/1
		      (Attributes)
	      in  do  %% Line 137
		      apply 'send'/2
			  (Handle, {'add',Entry,_cor7})
		      %% Line 138
		      apply 'recv'/1
			  (Handle)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'add_attrs'/1 =
    %% Line 141
    fun (_cor0) ->
	let <F> =
	    %% Line 142
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{Type,Vals}>
			when let <_cor1> =
			      call 'erlang':'is_list'
				  (Type)
			  in  let <_cor2> =
				  call 'erlang':'is_list'
				      (Vals)
			      in  call 'erlang':'and'
				      (_cor1, _cor2) ->
			%% Line 144
			{'AddRequest_attributes',Type,Vals}
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-add_attrs/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_attrs/1-fun-0-'}}] )
	in  let <_cor6> =
		catch
		    %% Line 146
		    call 'lists':'map'
			(F, _cor0)
	    in  %% Line 146
		case _cor6 of
		  %% Line 147
		  <{'EXIT',_cor9}> when 'true' ->
		      call 'erlang':'throw'
			  ({'error','attribute_values'})
		  %% Line 148
		  <Else> when 'true' ->
		      Else
		end
'delete'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Handle,Entry>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(Handle)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Entry)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 161
		  apply 'send'/2
		      (Handle, {'delete',Entry})
		  %% Line 162
		  apply 'recv'/1
		      (Handle)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'modify'/3 =
    %% Line 175
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle,Object,Mods>
	      when try
		    let <_cor3> =
			call 'erlang':'is_pid'
			    (Handle)
		    in  let <_cor4> =
			    call 'erlang':'is_list'
				(Object)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Mods)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 176
		  apply 'send'/2
		      (Handle, {'modify',Object,Mods})
		  %% Line 177
		  apply 'recv'/1
		      (Handle)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'modify',3}}] )
	    -| ['compiler_generated'] )
	end
'mod_add'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,Values>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Type)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Values)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'm'/3
		  ('add', Type, Values)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'mod_add',2}}] )
	    -| ['compiler_generated'] )
	end
'mod_delete'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,Values>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Type)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Values)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'm'/3
		  ('delete', Type, Values)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'mod_delete',2}}] )
	    -| ['compiler_generated'] )
	end
'mod_replace'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,Values>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Type)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Values)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'm'/3
		  ('replace', Type, Values)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'mod_replace',2}}] )
	    -| ['compiler_generated'] )
	end
'm'/3 =
    %% Line 188
    fun (_cor2,_cor1,_cor0) ->
	%% Line 189
	{'ModifyRequest_changes_SEQOF',_cor2,%% Line 191
					     {'PartialAttribute',_cor1,_cor0}}
'modify_dn'/5 =
    %% Line 207
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Handle,Entry,NewRDN,DelOldRDN,NewSup>
	      when %% Line 208
		try
		    let <_cor5> =
			call 'erlang':'is_pid'
			    (Handle)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(Entry)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (NewRDN)
			    in  let <_cor8> =
				    call 'erlang':'is_atom'
					(DelOldRDN)
				in  let <_cor9> =
					call 'erlang':'is_list'
					    (NewSup)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor7, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor6, _cor11)
						in  call 'erlang':'and'
							(_cor5, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor14> =
		  %% Line 210
		  apply 'bool_p'/1
		      (DelOldRDN)
	      in  let <_cor13> =
		      %% Line 210
		      apply 'optional'/1
			  (NewSup)
		  in  do  %% Line 209
			  apply 'send'/2
			      (Handle, {'modify_dn',Entry,NewRDN,_cor14,_cor13})
			  %% Line 211
			  apply 'recv'/1
			      (Handle)
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'modify_dn',5}}] )
	    -| ['compiler_generated'] )
	end
'bool_p'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <Bool>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'true')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (_cor0, 'false')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      Bool
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'bool_p',1}}] )
	    -| ['compiler_generated'] )
	end
'optional'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'asn1_NOVALUE'
	  %% Line 218
	  <Value> when 'true' ->
	      Value
	end
'search'/2 =
    %% Line 245
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Handle,A = {'eldap_search',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}>
	      when call 'erlang':'is_pid'
		    (Handle) ->
	      %% Line 246
	      apply 'call_search'/2
		  (Handle, A)
	  %% Line 247
	  <Handle,L>
	      when let <_cor3> =
		    call 'erlang':'is_pid'
			(Handle)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (L)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  catch
		      %% Line 248
		      apply 'parse_search_args'/1
			  (L)
	      in  %% Line 248
		  case _cor5 of
		    %% Line 249
		    <{'error',Emsg}> when 'true' ->
			{'error',Emsg}
		    %% Line 250
		    <A = {'eldap_search',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when ( 'true'
												   -| ['compiler_generated'] ) ->
			apply 'call_search'/2
			    (Handle, A)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
'call_search'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	do  %% Line 254
	    apply 'send'/2
		(_cor1, {'search',_cor0})
	    %% Line 255
	    apply 'recv'/1
		(_cor1)
'parse_search_args'/1 =
    %% Line 257
    fun (_cor0) ->
	%% Line 258
	apply 'parse_search_args'/2
	    (_cor0, %% Line 259
		    {'eldap_search',[],[],'wholeSubtree','derefAlways',[],'false',0})
'parse_search_args'/2 =
    %% Line 262
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'base',Base}|T],A> when 'true' ->
	      %% Line 263
	      case A of
		<{'eldap_search',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (2, A, Base)
		    in  apply 'parse_search_args'/2
			    (T, _cor4)
		( <_cor32> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 264
	  <[{'filter',Filter}|T],A> when 'true' ->
	      %% Line 265
	      case A of
		<{'eldap_search',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (3, A, Filter)
		    in  apply 'parse_search_args'/2
			    (T, _cor7)
		( <_cor40> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 266
	  <[{'scope',Scope}|T],A> when 'true' ->
	      %% Line 267
	      case A of
		<{'eldap_search',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (4, A, Scope)
		    in  apply 'parse_search_args'/2
			    (T, _cor10)
		( <_cor48> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 268
	  <[{'deref',Deref}|T],A> when 'true' ->
	      %% Line 269
	      case A of
		<{'eldap_search',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
		    let <_cor13> =
			call 'erlang':'setelement'
			    (5, A, Deref)
		    in  apply 'parse_search_args'/2
			    (T, _cor13)
		( <_cor56> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 270
	  <[{'attributes',Attrs}|T],A> when 'true' ->
	      %% Line 271
	      case A of
		<{'eldap_search',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}> when 'true' ->
		    let <_cor16> =
			call 'erlang':'setelement'
			    (6, A, Attrs)
		    in  apply 'parse_search_args'/2
			    (T, _cor16)
		( <_cor64> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 272
	  <[{'types_only',TypesOnly}|T],A> when 'true' ->
	      %% Line 273
	      case A of
		<{'eldap_search',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
		    let <_cor19> =
			call 'erlang':'setelement'
			    (7, A, TypesOnly)
		    in  apply 'parse_search_args'/2
			    (T, _cor19)
		( <_cor72> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 274
	  <[{'timeout',Timeout}|T],A>
	      when call 'erlang':'is_integer'
		    (Timeout) ->
	      %% Line 275
	      case A of
		<{'eldap_search',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
		    let <_cor22> =
			call 'erlang':'setelement'
			    (8, A, Timeout)
		    in  apply 'parse_search_args'/2
			    (T, _cor22)
		( <_cor80> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap_search'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 276
	  <[H|_cor81],_cor82> when 'true' ->
	      %% Line 277
	      call 'erlang':'throw'
		  ({'error',{'unknown_arg',H}})
	  %% Line 278
	  <[],A> when 'true' ->
	      %% Line 279
	      A
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'parse_search_args',2}}] )
	    -| ['compiler_generated'] )
	end
'baseObject'/0 =
    %% Line 284
    fun () ->
	'baseObject'
'singleLevel'/0 =
    %% Line 285
    fun () ->
	'singleLevel'
'wholeSubtree'/0 =
    %% Line 286
    fun () ->
	'wholeSubtree'
'neverDerefAliases'/0 =
    %% Line 291
    fun () ->
	'neverDerefAliases'
'derefInSearching'/0 =
    %% Line 292
    fun () ->
	'derefInSearching'
'derefFindingBaseObj'/0 =
    %% Line 293
    fun () ->
	'derefFindingBaseObj'
'derefAlways'/0 =
    %% Line 294
    fun () ->
	'derefAlways'
'and'/1 =
    %% Line 299
    fun (_cor0) ->
	case _cor0 of
	  <ListOfFilters>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      {'and',ListOfFilters}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'and',1}}] )
	    -| ['compiler_generated'] )
	end
'or'/1 =
    %% Line 300
    fun (_cor0) ->
	case _cor0 of
	  <ListOfFilters>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      {'or',ListOfFilters}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'or',1}}] )
	    -| ['compiler_generated'] )
	end
'not'/1 =
    %% Line 301
    fun (_cor0) ->
	case _cor0 of
	  <Filter>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      {'not',Filter}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'not',1}}] )
	    -| ['compiler_generated'] )
	end
'equalityMatch'/2 =
    %% Line 307
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'av_assert'/2
		(_cor1, _cor0)
	in  {'equalityMatch',_cor2}
'greaterOrEqual'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'av_assert'/2
		(_cor1, _cor0)
	in  {'greaterOrEqual',_cor2}
'lessOrEqual'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'av_assert'/2
		(_cor1, _cor0)
	in  {'lessOrEqual',_cor2}
'approxMatch'/2 =
    %% Line 310
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'av_assert'/2
		(_cor1, _cor0)
	in  {'approxMatch',_cor2}
'av_assert'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	%% Line 313
	{'AttributeValueAssertion',_cor1,_cor0}
'present'/1 =
    %% Line 319
    fun (_cor0) ->
	case _cor0 of
	  <Attribute>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 320
	      {'present',Attribute}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'present',1}}] )
	    -| ['compiler_generated'] )
	end
'substrings'/2 =
    %% Line 338
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,SubStr>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Type)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (SubStr)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Ss> =
		  %% Line 339
		  apply 'v_substr'/1
		      (SubStr)
	      in  %% Line 340
		  {'substrings',{'SubstringFilter',Type,%% Line 341
							Ss}}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'substrings',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	let <Data> =
	    %% Line 349
	    apply 'parse_args'/3
		(_cor1, _cor0, {'eldap',3,'undefined',389,'undefined','undefined',[],'undefined',0,'undefined','infinity','false','false','false',[],[]})
	in  %% Line 350
	    case apply 'try_connect'/2
		     (_cor2, Data) of
	      %% Line 351
	      <{'ok',Data2}> when 'true' ->
		  let <_cor4> =
		      %% Line 352
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 352
			  apply 'send'/2
			      (_cor0, {'ok',_cor4})
			  %% Line 353
			  call 'eldap':'loop'
			      (_cor0, Data2)
	      %% Line 354
	      <Else> when 'true' ->
		  do  %% Line 355
		      apply 'send'/2
			  (_cor0, Else)
		      do  %% Line 356
			  call 'erlang':'unlink'
			      (_cor0)
			  %% Line 357
			  call 'erlang':'exit'
			      (Else)
	    end
'parse_args'/3 =
    %% Line 360
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'port',Port}|T],Cpid,Data>
	      when call 'erlang':'is_integer'
		    (Port) ->
	      %% Line 361
	      case Data of
		<{'eldap',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
		    let <_cor5> =
			call 'erlang':'setelement'
			    (4, Data, Port)
		    in  apply 'parse_args'/3
			    (T, Cpid, _cor5)
		( <_cor54> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 362
	  <[{'timeout',Timeout}|T],Cpid,Data>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor7> =
			call 'erlang':'>'
			    (Timeout, 0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 363
	      case Data of
		<{'eldap',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (11, Data, Timeout)
		    in  apply 'parse_args'/3
			    (T, Cpid, _cor10)
		( <_cor70> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 364
	  <[{'anon_auth','true'}|T],Cpid,Data> when 'true' ->
	      %% Line 365
	      case Data of
		<{'eldap',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
		    let <_cor13> =
			call 'erlang':'setelement'
			    (12, Data, 'false')
		    in  apply 'parse_args'/3
			    (T, Cpid, _cor13)
		( <_cor86> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 366
	  <[{'anon_auth',_cor87}|T],Cpid,Data> when 'true' ->
	      %% Line 367
	      apply 'parse_args'/3
		  (T, Cpid, Data)
	  %% Line 368
	  <[{'ssl','true'}|T],Cpid,Data> when 'true' ->
	      %% Line 369
	      case Data of
		<{'eldap',_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}> when 'true' ->
		    let <_cor15> =
			call 'erlang':'setelement'
			    (14, Data, 'true')
		    in  let <_cor17> =
			    call 'erlang':'setelement'
				(13, _cor15, 'true')
			in  apply 'parse_args'/3
				(T, Cpid, _cor17)
		( <_cor103> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 370
	  <[{'ssl',_cor104}|T],Cpid,Data> when 'true' ->
	      %% Line 371
	      apply 'parse_args'/3
		  (T, Cpid, Data)
	  %% Line 372
	  <[{'sslopts',Opts}|T],Cpid,Data>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 373
	      ( case Data of
		  ( <( {'eldap',_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_rec13,_cor118}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec11> =
			    call 'erlang':'++'
				(Opts, _rec13)
			in  let <_cor22> =
				call 'erlang':'setelement'
				    (15, Data, _rec11)
			    in  let <_cor23> =
				    call 'erlang':'setelement'
					(14, _cor22, 'true')
				in  let <_cor25> =
					call 'erlang':'setelement'
					    (13, _cor23, 'true')
				    in  apply 'parse_args'/3
					    (T, Cpid, _cor25)
		    -| ['compiler_generated'] )
		  ( <_cor119> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','eldap'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 374
	  <[{'sslopts',_cor136}|T],Cpid,Data> when 'true' ->
	      %% Line 375
	      apply 'parse_args'/3
		  (T, Cpid, Data)
	  %% Line 376
	  <[{'tcpopts',Opts}|T],Cpid,Data>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_cor28> =
		  %% Line 377
		  apply 'inet6_opt'/1
		      (Opts)
	      in  %% Line 377
		  ( case Data of
		      ( <( {'eldap',_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_rec16}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec14> =
				call 'erlang':'++'
				    (_cor28, _rec16)
			    in  let <_cor32> =
				    call 'erlang':'setelement'
					(16, Data, _rec14)
				in  apply 'parse_args'/3
					(T, Cpid, _cor32)
			-| ['compiler_generated'] )
		      ( <_cor151> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','eldap'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 378
	  <[{'log',F}|T],Cpid,Data>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 379
	      case Data of
		<{'eldap',_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}> when 'true' ->
		    let <_cor35> =
			call 'erlang':'setelement'
			    (10, Data, F)
		    in  apply 'parse_args'/3
			    (T, Cpid, _cor35)
		( <_cor183> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 380
	  <[{'log',_cor184}|T],Cpid,Data> when 'true' ->
	      %% Line 381
	      apply 'parse_args'/3
		  (T, Cpid, Data)
	  %% Line 382
	  <[H|_cor185],Cpid,_cor186> when 'true' ->
	      do  %% Line 383
		  apply 'send'/2
		      (Cpid, {'error',{'wrong_option',H}})
		  %% Line 384
		  call 'erlang':'exit'
		      ('wrong_option')
	  %% Line 385
	  <[],_cor187,Data> when 'true' ->
	      %% Line 386
	      Data
	  ( <_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36})
		  -| [{'function_name',{'parse_args',3}}] )
	    -| ['compiler_generated'] )
	end
'inet6_opt'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	case call 'proplists':'get_value'
		 ('inet6', _cor0) of
	  %% Line 390
	  <'true'> when 'true' ->
	      %% Line 391
	      ['inet6']
	  %% Line 392
	  <_cor3> when 'true' ->
	      %% Line 393
	      []
	end
'try_connect'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Host|Hosts],Data> when 'true' ->
	      %% Line 402
	      try
		  apply 'do_connect'/3
		      (Host, Data, [{'packet','asn1'}|[{'active','false'}]])
	      of <_cor3> ->
		  case _cor3 of
		    %% Line 403
		    <{'ok',Fd}> when 'true' ->
			case Data of
			  <{'eldap',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
			      let <_cor5> =
				  call 'erlang':'setelement'
				      (5, Data, Fd)
			      in  let <_cor7> =
				      call 'erlang':'setelement'
					  (3, _cor5, Host)
				  in  {'ok',_cor7}
			  ( <_cor29> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','eldap'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 404
		    <Err> when 'true' ->
			do  %% Line 405
			    apply 'log2'/3
				(Data, [67|[111|[110|[110|[101|[99|[116|[58|[32|[126|[112|[32|[102|[97|[105|[108|[101|[100|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [Host|[Err|[]]])
			    %% Line 406
			    apply 'try_connect'/2
				(Hosts, Data)
		  end
	      catch <_cor11,_cor10,_cor9> ->
		  do  %% Line 408
		      apply 'log2'/3
			  (Data, [67|[111|[110|[110|[101|[99|[116|[58|[32|[126|[112|[32|[102|[97|[105|[108|[101|[100|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [Host|[_cor10|[]]])
		      %% Line 409
		      apply 'try_connect'/2
			  (Hosts, Data)
	  %% Line 411
	  <[],_cor32> when 'true' ->
	      %% Line 412
	      {'error',[99|[111|[110|[110|[101|[99|[116|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'try_connect',2}}] )
	    -| ['compiler_generated'] )
	end
'do_connect'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Host,Data = {'eldap',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47},Opts>
	      when call 'erlang':'=:='
		    (_cor44,
		     'false') ->
	      let <_cor13> =
		  %% Line 415
		  call 'erlang':'++'
		      (Opts, _cor47)
	      in  %% Line 415
		  call 'gen_tcp':'connect'
		      (Host, _cor35, _cor13, _cor42)
	  %% Line 417
	  <Host,Data = {'eldap',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107},Opts>
	      when call 'erlang':'=:='
		    (_cor104,
		     'true') ->
	      let <_cor26> =
		  %% Line 419
		  call 'erlang':'++'
		      (_cor106, _cor107)
	      in  let <_cor27> =
		      %% Line 419
		      call 'erlang':'++'
			  (Opts, _cor26)
		  in  %% Line 418
		      call 'ssl':'connect'
			  (Host, _cor95, _cor27)
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'do_connect',3}}] )
	    -| ['compiler_generated'] )
	end
'loop'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	%% Line 422
	receive
	  %% Line 424
	  <{From,{'search',A}}> when 'true' ->
	      %% Line 425
	      case apply 'do_search'/2
		       (_cor0, A) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 426
			apply 'send'/2
			    (From, Res)
			%% Line 427
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 429
	  <{From,{'modify',Obj,Mod}}> when 'true' ->
	      %% Line 430
	      case apply 'do_modify'/3
		       (_cor0, Obj, Mod) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 431
			apply 'send'/2
			    (From, Res)
			%% Line 432
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 434
	  <{From,{'modify_dn',Obj,NewRDN,DelOldRDN,NewSup}}> when 'true' ->
	      %% Line 435
	      case apply 'do_modify_dn'/5
		       (_cor0, Obj, NewRDN, DelOldRDN, NewSup) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 436
			apply 'send'/2
			    (From, Res)
			%% Line 437
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 439
	  <{From,{'add',Entry,Attrs}}> when 'true' ->
	      %% Line 440
	      case apply 'do_add'/3
		       (_cor0, Entry, Attrs) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 441
			apply 'send'/2
			    (From, Res)
			%% Line 442
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 444
	  <{From,{'delete',Entry}}> when 'true' ->
	      %% Line 445
	      case apply 'do_delete'/2
		       (_cor0, Entry) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 446
			apply 'send'/2
			    (From, Res)
			%% Line 447
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 449
	  <{From,{'simple_bind',Dn,Passwd}}> when 'true' ->
	      %% Line 450
	      case apply 'do_simple_bind'/3
		       (_cor0, Dn, Passwd) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 451
			apply 'send'/2
			    (From, Res)
			%% Line 452
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 454
	  <{From,{'cnt_proc',NewCpid}}> when 'true' ->
	      do  %% Line 455
		  call 'erlang':'unlink'
		      (_cor1)
		  do  %% Line 456
		      apply 'send'/2
			  (From, 'ok')
		      %% Line 458
		      call 'eldap':'loop'
			  (NewCpid, _cor0)
	  %% Line 460
	  <{From,{'start_tls',TlsOptions,Timeout}}> when 'true' ->
	      %% Line 461
	      case apply 'do_start_tls'/3
		       (_cor0, TlsOptions, Timeout) of
		<{Res,NewData}> when 'true' ->
		    do  %% Line 462
			apply 'send'/2
			    (From, Res)
			%% Line 463
			call 'eldap':'loop'
			    (_cor1, NewData)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 465
	  <{_X_From,'close'}> when 'true' ->
	      do  %% Line 466
		  call 'erlang':'unlink'
		      (_cor1)
		  %% Line 467
		  call 'erlang':'exit'
		      ('closed')
	  %% Line 469
	  <{_cor11,'EXIT',Reason}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor1) ->
	      %% Line 471
	      call 'erlang':'exit'
		  (Reason)
	  %% Line 473
	  <_X_XX> when 'true' ->
	      %% Line 475
	      call 'eldap':'loop'
		  (_cor1, _cor0)
	after 'infinity' ->
	  'true'
'do_start_tls'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Data = {'eldap',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,'true',_cor26,_cor27},_cor28,_cor29> when 'true' ->
	      %% Line 485
	      {{'error','tls_already_started'},Data}
	  %% Line 486
	  <Data = {'eldap',_cor30,_cor31,_cor32,FD,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43},TlsOptions,Timeout> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 487
		      apply 'exec_start_tls'/1
			  (Data)
	      in  %% Line 487
		  case _cor3 of
		    %% Line 488
		    <{'ok',NewData}> when 'true' ->
			%% Line 489
			case call 'ssl':'connect'
				 (FD, TlsOptions, Timeout) of
			  %% Line 490
			  <{'ok',SslSocket}> when 'true' ->
			      %% Line 492
			      case NewData of
				<{'eldap',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
				    let <_cor5> =
					%% Line 493
					call 'erlang':'setelement'
					    (14, NewData, 'true')
				    in  let <_cor6> =
					    call 'erlang':'setelement'
						(6, _cor5, FD)
					in  let <_cor8> =
						call 'erlang':'setelement'
						    (5, _cor6, SslSocket)
					    in  {'ok',_cor8}
				( <_cor59> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','eldap'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 495
			  <{'error',Error}> when 'true' ->
			      %% Line 496
			      {{'error',Error},Data}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 498
		    <{'error',Error}> when 'true' ->
			{{'error',Error},Data}
		    %% Line 499
		    <Else> when 'true' ->
			{{'error',Else},Data}
		  end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_start_tls',3}}] )
	    -| ['compiler_generated'] )
	end
'exec_start_tls'/1 =
    %% Line 504
    fun (_cor0) ->
	%% Line 506
	( case _cor0 of
	    ( <( {'eldap',_cor8,_cor9,_cor10,_rec26,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Reply> =
		      apply 'request'/4
			  (_rec26, _cor0, _cor14, {'extendedReq',{'ExtendedRequest',[49|[46|[51|[46|[54|[46|[49|[46|[52|[46|[49|[46|[49|[52|[54|[54|[46|[50|[48|[48|[51|[55]]]]]]]]]]]]]]]]]]]]]],'asn1_NOVALUE'}})
		  in  %% Line 507
		      apply 'exec_extended_req_reply'/2
			  (_cor0, Reply)
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'exec_extended_req_reply'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data = {'eldap',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37},{'ok',Msg = {'LDAPMessage',_cor38,_cor39,_cor40}}>
	      when %% Line 510
		call 'erlang':'=='
		    (_cor38,
		     _cor30) ->
	      %% Line 511
	      case _cor39 of
		%% Line 512
		<{'extendedResp',Result}> when 'true' ->
		    %% Line 513
		    ( case Result of
			( <( {'ExtendedResponse',_rec29,_cor44,_cor45,_cor46,_cor47,_cor48}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec29 of
				%% Line 514
				<'success'> when 'true' ->
				    %% Line 515
				    {'ok',Data}
				%% Line 516
				<Error> when 'true' ->
				    %% Line 517
				    {'error',{'response',Error}}
			      end
			  -| ['compiler_generated'] )
			( <_cor49> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ExtendedResponse'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 519
		<Other> when 'true' ->
		    {'error',Other}
	      end
	  %% Line 521
	  <_cor50,Error> when 'true' ->
	      %% Line 522
	      {'error',Error}
	end
'do_simple_bind'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Data,'anon','anon'> when 'true' ->
	      %% Line 532
	      apply 'do_the_simple_bind'/3
		  (Data, [], [])
	  %% Line 533
	  <Data = {'eldap',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36},Dn,_X_Passwd>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(Dn, [])
		in  let <_cor9> =
			call 'erlang':'=:='
			    (_cor32, 'false')
		    in  call 'erlang':'and'
			    (_cor3, _cor9) ->
	      %% Line 534
	      {{'error','anonymous_auth'},Data}
	  %% Line 535
	  <Data = {'eldap',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51},_X_Dn,Passwd>
	      when let <_cor11> =
		    call 'erlang':'=:='
			(Passwd, [])
		in  let <_cor17> =
			call 'erlang':'=:='
			    (_cor47, 'false')
		    in  call 'erlang':'and'
			    (_cor11, _cor17) ->
	      %% Line 536
	      {{'error','anonymous_auth'},Data}
	  %% Line 537
	  <Data,Dn,Passwd> when 'true' ->
	      %% Line 538
	      apply 'do_the_simple_bind'/3
		  (Data, Dn, Passwd)
	end
'do_the_simple_bind'/3 =
    %% Line 540
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    catch
		let <_rec30> =
		    %% Line 543
		    apply 'bump_id'/1
			(_cor2)
		in  %% Line 541
		    case _cor2 of
		      <{'eldap',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
			  let <_cor5> =
			      %% Line 543
			      call 'erlang':'setelement'
				  (9, _cor2, _rec30)
			  in  let <_cor6> =
				  %% Line 542
				  call 'erlang':'setelement'
				      (8, _cor5, _cor0)
			      in  let <_cor8> =
				      call 'erlang':'setelement'
					  (7, _cor6, _cor1)
				  in  apply 'exec_simple_bind'/1
					  (_cor8)
		      ( <_cor29> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','eldap'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	in  %% Line 541
	    case _cor9 of
	      %% Line 544
	      <{'ok',NewData}> when 'true' ->
		  {'ok',NewData}
	      %% Line 545
	      <{'error',Emsg}> when 'true' ->
		  {{'error',Emsg},_cor2}
	      %% Line 546
	      <Else> when 'true' ->
		  {{'error',Else},_cor2}
	    end
'exec_simple_bind'/1 =
    %% Line 549
    fun (_cor0) ->
	%% Line 550
	( case _cor0 of
	    ( <( {'eldap',_rec32,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Req> =
		      {'BindRequest',_rec32,_cor18,%% Line 552
						   {'simple',_cor19}}
		  in  do  %% Line 553
			  apply 'log2'/3
			      (_cor0, [98|[105|[110|[100|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Req|[]])
			  let <Reply> =
			      %% Line 554
			      apply 'request'/4
				  (_cor16, _cor0, _cor20, {'bindRequest',Req})
			  in  do  %% Line 555
				  apply 'log2'/3
				      (_cor0, [98|[105|[110|[100|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]], [Reply|[]])
				  %% Line 556
				  apply 'exec_simple_bind_reply'/2
				      (_cor0, Reply)
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'exec_simple_bind_reply'/2 =
    %% Line 558
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data = {'eldap',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37},{'ok',Msg = {'LDAPMessage',_cor38,_cor39,_cor40}}>
	      when %% Line 559
		call 'erlang':'=='
		    (_cor38,
		     _cor30) ->
	      %% Line 560
	      case _cor39 of
		%% Line 561
		<{'bindResponse',Result}> when 'true' ->
		    %% Line 562
		    ( case Result of
			( <( {'BindResponse',_rec38,_cor44,_cor45,_cor46,_cor47}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec38 of
				%% Line 563
				<'success'> when 'true' ->
				    {'ok',Data}
				%% Line 564
				<Error> when 'true' ->
				    {'error',Error}
			      end
			  -| ['compiler_generated'] )
			( <_cor48> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','BindResponse'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 566
		<Other> when 'true' ->
		    {'error',Other}
	      end
	  %% Line 568
	  <_cor49,Error> when 'true' ->
	      %% Line 569
	      {'error',Error}
	end
'do_search'/2 =
    %% Line 576
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 577
		apply 'do_search_0'/2
		    (_cor1, _cor0)
	in  %% Line 577
	    case _cor2 of
	      %% Line 578
	      <{'error',Emsg}> when 'true' ->
		  let <_cor3> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Emsg)
		  in  {_cor3,_cor1}
	      %% Line 579
	      <{'EXIT',Error}> when 'true' ->
		  let <_cor4> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Error)
		  in  {_cor4,_cor1}
	      %% Line 580
	      <{'ok',Res,Ref,NewData}> when 'true' ->
		  let <_cor5> =
		      apply 'polish'/2
			  (Res, Ref)
		  in  {{'ok',_cor5},NewData}
	      %% Line 581
	      <{{'error',Reason},NewData}> when 'true' ->
		  {{'error',Reason},NewData}
	      %% Line 582
	      <Else> when 'true' ->
		  let <_cor6> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Else)
		  in  {_cor6,_cor1}
	    end
'polish'/2 =
    %% Line 589
    fun (_cor1,_cor0) ->
	let <R> =
	    %% Line 590
	    apply 'polish_result'/1
		(_cor1)
	in  %% Line 592
	    {'eldap_search_result',R,_cor0}
'polish_result'/1 =
    %% Line 595
    fun (_cor0) ->
	case _cor0 of
	  <[H = {'SearchResultEntry',_cor12,_cor13}|T]> when ( 'true'
							       -| ['compiler_generated'] ) ->
	      let <F> =
		  %% Line 597
		  ( fun (_cor4) ->
			case _cor4 of
			  <{_cor16,A,V}> when 'true' ->
			      {A,V}
			  ( <_cor5> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor5})
				  -| [{'function_name',{'-polish_result/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-polish_result/1-fun-0-'}}] )
	      in  let <Attrs> =
		      %% Line 598
		      call 'lists':'map'
			  (F, _cor13)
		  in  let <_cor10> =
			  %% Line 601
			  apply 'polish_result'/1
			      (T)
		      in  %% Line 599
			  [{'eldap_entry',_cor12,%% Line 600
						 Attrs}|_cor10]
	  %% Line 602
	  <[]> when 'true' ->
	      %% Line 603
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'polish_result',1}}] )
	    -| ['compiler_generated'] )
	end
'do_search_0'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	%% Line 606
	( case _cor0 of
	    ( <( {'eldap_search',_rec41,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor19> =
		      %% Line 607
		      apply 'v_scope'/1
			  (_cor30)
		  in  let <_cor16> =
			  %% Line 608
			  apply 'v_deref'/1
			      (_cor31)
		      in  let <_cor13> =
			      %% Line 610
			      apply 'v_timeout'/1
				  (_cor34)
			  in  let <_cor10> =
				  %% Line 611
				  apply 'v_bool'/1
				      (_cor33)
			      in  let <_cor7> =
				      %% Line 612
				      apply 'v_filter'/1
					  (_cor29)
				  in  let <_cor4> =
					  %% Line 613
					  apply 'v_attributes'/1
					      (_cor32)
				      in  let <Req> =
					      {'SearchRequest',_rec41,_cor19,_cor16,%% Line 609
										    0,_cor13,_cor10,_cor7,_cor4}
					  in  let <Id> =
						  %% Line 615
						  apply 'bump_id'/1
						      (_cor1)
					      in  %% Line 616
						  case _cor1 of
						    <{'eldap',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}> when 'true' ->
							let <_cor26> =
							    call 'erlang':'setelement'
								(9, _cor1, Id)
							in  apply 'collect_search_responses'/3
								(_cor26, Req, Id)
						    ( <_cor93> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','eldap'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
	      -| ['compiler_generated'] )
	    ( <_cor35> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap_search'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'collect_search_responses'/3 =
    %% Line 621
    fun (_cor2,_cor1,_cor0) ->
	%% Line 622
	( case _cor2 of
	    ( <( {'eldap',_cor10,_cor11,_cor12,_rec49,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 623
		      apply 'log2'/3
			  (_cor2, [115|[101|[97|[114|[99|[104|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
		      do  %% Line 624
			  apply 'send_request'/4
			      (_rec49, _cor2, _cor0, {'searchRequest',_cor1})
			  let <Resp> =
			      %% Line 625
			      apply 'recv_response'/2
				  (_rec49, _cor2)
			  in  do  %% Line 626
				  apply 'log2'/3
				      (_cor2, [115|[101|[97|[114|[99|[104|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Resp|[]])
				  %% Line 627
				  apply 'collect_search_responses'/6
				      (_cor2, _rec49, _cor0, Resp, [], [])
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'collect_search_responses'/6 =
    %% Line 629
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Data,S,ID,{'ok',Msg = {'LDAPMessage',_cor20,_cor21,_cor22}},Acc,Ref> when %% Line 630
										     ( 'true'
										       -| ['compiler_generated'] ) ->
	      %% Line 631
	      case _cor21 of
		%% Line 632
		<{'searchResDone',R}> when 'true' ->
		    %% Line 633
		    ( case R of
			( <( {'LDAPResult',_rec51,_cor26,_cor27,_cor28}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec51 of
				%% Line 634
				<'success'> when 'true' ->
				    do  %% Line 635
					apply 'log2'/3
					    (Data, [115|[101|[97|[114|[99|[104|[32|[114|[101|[112|[108|[121|[32|[61|[32|[115|[101|[97|[114|[99|[104|[82|[101|[115|[68|[111|[110|[101|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
					%% Line 636
					{'ok',Acc,Ref,Data}
				%% Line 637
				<Reason> when 'true' ->
				    %% Line 638
				    {{'error',Reason},Data}
			      end
			  -| ['compiler_generated'] )
			( <_cor29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','LDAPResult'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 640
		<{'searchResEntry',R = {'SearchResultEntry',_cor30,_cor31}}> when ( 'true'
										    -| ['compiler_generated'] ) ->
		    let <Resp> =
			%% Line 641
			apply 'recv_response'/2
			    (S, Data)
		    in  do  %% Line 642
			    apply 'log2'/3
				(Data, [115|[101|[97|[114|[99|[104|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Resp|[]])
			    %% Line 643
			    apply 'collect_search_responses'/6
				(Data, S, ID, Resp, [R|Acc], Ref)
		%% Line 644
		<{'searchResRef',R}> when 'true' ->
		    let <Resp> =
			%% Line 648
			apply 'recv_response'/2
			    (S, Data)
		    in  do  %% Line 649
			    apply 'log2'/3
				(Data, [115|[101|[97|[114|[99|[104|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Resp|[]])
			    %% Line 650
			    apply 'collect_search_responses'/6
				(Data, S, ID, Resp, Acc, [R|Ref])
		%% Line 651
		<Else> when 'true' ->
		    %% Line 652
		    call 'erlang':'throw'
			({'error',Else})
	      end
	  %% Line 654
	  <_cor32,_cor33,_cor34,Else,_cor35,_cor36> when 'true' ->
	      %% Line 655
	      call 'erlang':'throw'
		  ({'error',Else})
	end
'do_add'/3 =
    %% Line 661
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 662
		apply 'do_add_0'/3
		    (_cor2, _cor1, _cor0)
	in  %% Line 662
	    case _cor3 of
	      %% Line 663
	      <{'error',Emsg}> when 'true' ->
		  let <_cor4> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Emsg)
		  in  {_cor4,_cor2}
	      %% Line 664
	      <{'EXIT',Error}> when 'true' ->
		  let <_cor5> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Error)
		  in  {_cor5,_cor2}
	      %% Line 665
	      <{'ok',NewData}> when 'true' ->
		  {'ok',NewData}
	      %% Line 666
	      <Else> when 'true' ->
		  let <_cor6> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Else)
		  in  {_cor6,_cor2}
	    end
'do_add_0'/3 =
    %% Line 669
    fun (_cor2,_cor1,_cor0) ->
	let <Req> = {%% Line 670
	     'AddRequest',_cor1,_cor0}
	in  %% Line 672
	    ( case _cor2 of
		( <( {'eldap',_cor15,_cor16,_cor17,_rec52,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Id> =
			  %% Line 673
			  apply 'bump_id'/1
			      (_cor2)
		      in  do  %% Line 674
			      apply 'log2'/3
				  (_cor2, [97|[100|[100|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]], [Req|[]])
			      let <Resp> =
				  %% Line 675
				  apply 'request'/4
				      (_rec52, _cor2, Id, {'addRequest',Req})
			      in  do  %% Line 676
				      apply 'log2'/3
					  (_cor2, [97|[100|[100|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [Resp|[]])
				      let <_cor11> =
					  %% Line 677
					  call 'erlang':'setelement'
					      (9, _cor2, Id)
				      in  %% Line 677
					  apply 'check_reply'/3
					      (_cor11, Resp, 'addResponse')
		  -| ['compiler_generated'] )
		( <_cor29> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'do_delete'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 685
		apply 'do_delete_0'/2
		    (_cor1, _cor0)
	in  %% Line 685
	    case _cor2 of
	      %% Line 686
	      <{'error',Emsg}> when 'true' ->
		  let <_cor3> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Emsg)
		  in  {_cor3,_cor1}
	      %% Line 687
	      <{'EXIT',Error}> when 'true' ->
		  let <_cor4> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Error)
		  in  {_cor4,_cor1}
	      %% Line 688
	      <{'ok',NewData}> when 'true' ->
		  {'ok',NewData}
	      %% Line 689
	      <Else> when 'true' ->
		  let <_cor5> =
		      apply 'ldap_closed_p'/2
			  (_cor1, Else)
		  in  {_cor5,_cor1}
	    end
'do_delete_0'/2 =
    %% Line 692
    fun (_cor1,_cor0) ->
	%% Line 693
	( case _cor1 of
	    ( <( {'eldap',_cor12,_cor13,_cor14,_rec54,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Id> =
		      %% Line 694
		      apply 'bump_id'/1
			  (_cor1)
		  in  do  %% Line 695
			  apply 'log2'/3
			      (_cor1, [100|[101|[108|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]], [_cor0|[]])
			  let <Resp> =
			      %% Line 696
			      apply 'request'/4
				  (_rec54, _cor1, Id, {'delRequest',_cor0})
			  in  do  %% Line 697
				  apply 'log2'/3
				      (_cor1, [100|[101|[108|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [Resp|[]])
				  let <_cor9> =
				      %% Line 698
				      call 'erlang':'setelement'
					  (9, _cor1, Id)
				  in  %% Line 698
				      apply 'check_reply'/3
					  (_cor9, Resp, 'delResponse')
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_modify'/3 =
    %% Line 705
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 706
		apply 'do_modify_0'/3
		    (_cor2, _cor1, _cor0)
	in  %% Line 706
	    case _cor3 of
	      %% Line 707
	      <{'error',Emsg}> when 'true' ->
		  let <_cor4> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Emsg)
		  in  {_cor4,_cor2}
	      %% Line 708
	      <{'EXIT',Error}> when 'true' ->
		  let <_cor5> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Error)
		  in  {_cor5,_cor2}
	      %% Line 709
	      <{'ok',NewData}> when 'true' ->
		  {'ok',NewData}
	      %% Line 710
	      <Else> when 'true' ->
		  let <_cor6> =
		      apply 'ldap_closed_p'/2
			  (_cor2, Else)
		  in  {_cor6,_cor2}
	    end
'do_modify_0'/3 =
    %% Line 713
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 714
	    apply 'v_modifications'/1
		(_cor0)
	    let <Req> = {%% Line 715
		 'ModifyRequest',_cor1,_cor0}
	    in  %% Line 717
		( case _cor2 of
		    ( <( {'eldap',_cor15,_cor16,_cor17,_rec56,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Id> =
			      %% Line 718
			      apply 'bump_id'/1
				  (_cor2)
			  in  do  %% Line 719
				  apply 'log2'/3
				      (_cor2, [109|[111|[100|[105|[102|[121|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [Req|[]])
				  let <Resp> =
				      %% Line 720
				      apply 'request'/4
					  (_rec56, _cor2, Id, {'modifyRequest',Req})
				  in  do  %% Line 721
					  apply 'log2'/3
					      (_cor2, [109|[111|[100|[105|[102|[121|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]], [Resp|[]])
					  let <_cor11> =
					      %% Line 722
					      call 'erlang':'setelement'
						  (9, _cor2, Id)
					  in  %% Line 722
					      apply 'check_reply'/3
						  (_cor11, Resp, 'modifyResponse')
		      -| ['compiler_generated'] )
		    ( <_cor29> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','eldap'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'do_modify_dn'/5 =
    %% Line 728
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    catch
		%% Line 729
		apply 'do_modify_dn_0'/5
		    (_cor4, _cor3, _cor2, _cor1, _cor0)
	in  %% Line 729
	    case _cor5 of
	      %% Line 730
	      <{'error',Emsg}> when 'true' ->
		  let <_cor6> =
		      apply 'ldap_closed_p'/2
			  (_cor4, Emsg)
		  in  {_cor6,_cor4}
	      %% Line 731
	      <{'EXIT',Error}> when 'true' ->
		  let <_cor7> =
		      apply 'ldap_closed_p'/2
			  (_cor4, Error)
		  in  {_cor7,_cor4}
	      %% Line 732
	      <{'ok',NewData}> when 'true' ->
		  {'ok',NewData}
	      %% Line 733
	      <Else> when 'true' ->
		  let <_cor8> =
		      apply 'ldap_closed_p'/2
			  (_cor4, Else)
		  in  {_cor8,_cor4}
	    end
'do_modify_dn_0'/5 =
    %% Line 736
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Req> =
	    %% Line 737
	    {'ModifyDNRequest',_cor3,_cor2,_cor1,_cor0}
	in  %% Line 741
	    ( case _cor4 of
		( <( {'eldap',_cor19,_cor20,_cor21,_rec58,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Id> =
			  %% Line 742
			  apply 'bump_id'/1
			      (_cor4)
		      in  do  %% Line 743
			      apply 'log2'/3
				  (_cor4, [109|[111|[100|[105|[102|[121|[32|[68|[78|[32|[114|[101|[113|[117|[101|[115|[116|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [Req|[]])
			      let <Resp> =
				  %% Line 744
				  apply 'request'/4
				      (_rec58, _cor4, Id, {'modDNRequest',Req})
			      in  do  %% Line 745
				      apply 'log2'/3
					  (_cor4, [109|[111|[100|[105|[102|[121|[32|[68|[78|[32|[114|[101|[112|[108|[121|[32|[61|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]], [Resp|[]])
				      let <_cor13> =
					  %% Line 746
					  call 'erlang':'setelement'
					      (9, _cor4, Id)
				      in  %% Line 746
					  apply 'check_reply'/3
					      (_cor13, Resp, 'modDNResponse')
		  -| ['compiler_generated'] )
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eldap'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'request'/4 =
    %% Line 752
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 753
	    apply 'send_request'/4
		(_cor3, _cor2, _cor1, _cor0)
	    %% Line 754
	    apply 'recv_response'/2
		(_cor3, _cor2)
'send_request'/4 =
    %% Line 756
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Message> =
	    %% Line 757
	    {'LDAPMessage',_cor1,_cor0,'asn1_NOVALUE'}
	in  %% Line 759
	    case call 'ELDAPv3':'encode'
		     ('LDAPMessage', Message) of
	      <{'ok',Bytes}> when 'true' ->
		  %% Line 760
		  case apply 'do_send'/3
			   (_cor3, _cor2, Bytes) of
		    %% Line 761
		    <{'error',Reason}> when 'true' ->
			call 'erlang':'throw'
			    ({'gen_tcp_error',Reason})
		    %% Line 762
		    <Else> when 'true' ->
			Else
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'do_send'/3 =
    %% Line 765
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Data = {'eldap',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},Bytes>
	      when call 'erlang':'=:='
		    (_cor30,
		     'false') ->
	      %% Line 766
	      call 'gen_tcp':'send'
		  (S, Bytes)
	  %% Line 767
	  <S,Data = {'eldap',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47},Bytes>
	      when call 'erlang':'=:='
		    (_cor45,
		     'true') ->
	      %% Line 768
	      call 'ssl':'send'
		  (S, Bytes)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'do_send',3}}] )
	    -| ['compiler_generated'] )
	end
'do_recv'/3 =
    %% Line 770
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,{'eldap',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Timeout,_cor15,_cor16,'false',_cor17,_cor18},Len> when 'true' ->
	      %% Line 771
	      call 'gen_tcp':'recv'
		  (S, Len, Timeout)
	  %% Line 772
	  <S,{'eldap',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,Timeout,_cor28,_cor29,'true',_cor30,_cor31},Len> when 'true' ->
	      %% Line 773
	      call 'ssl':'recv'
		  (S, Len, Timeout)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_recv',3}}] )
	    -| ['compiler_generated'] )
	end
'recv_response'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	%% Line 776
	case apply 'do_recv'/3
		 (_cor1, _cor0, 0) of
	  %% Line 777
	  <{'ok',Packet}> when 'true' ->
	      %% Line 778
	      case call 'ELDAPv3':'decode'
		       ('LDAPMessage', Packet) of
		%% Line 779
		<{'ok',Resp}> when 'true' ->
		    {'ok',Resp}
		%% Line 780
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 782
	  <{'error',Reason}> when 'true' ->
	      %% Line 783
	      call 'erlang':'throw'
		  ({'gen_tcp_error',Reason})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'check_reply'/3 =
    %% Line 787
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Data = {'eldap',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},{'ok',Msg = {'LDAPMessage',_cor40,_cor41,_cor42}},Op>
	      when %% Line 788
		call 'erlang':'=='
		    (_cor40,
		     _cor32) ->
	      %% Line 789
	      case _cor41 of
		%% Line 790
		<{_cor46,Result}>
		    when call 'erlang':'=:='
			  (_cor46,
			   Op) ->
		    %% Line 791
		    ( case Result of
			( <( {'LDAPResult',_rec61,_cor47,_cor48,_cor49}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec61 of
				%% Line 792
				<'success'> when 'true' ->
				    {'ok',Data}
				%% Line 793
				<Error> when 'true' ->
				    {'error',Error}
			      end
			  -| ['compiler_generated'] )
			( <_cor50> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','LDAPResult'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 795
		<Other> when 'true' ->
		    {'error',Other}
	      end
	  %% Line 797
	  <_cor51,Error,_cor52> when 'true' ->
	      %% Line 798
	      {'error',Error}
	end
'v_filter'/1 =
    %% Line 805
    fun (_cor0) ->
	case _cor0 of
	  <{'and',L}> when 'true' ->
	      {'and',L}
	  %% Line 806
	  <{'or',L}> when 'true' ->
	      {'or',L}
	  %% Line 807
	  <{'not',L}> when 'true' ->
	      {'not',L}
	  %% Line 808
	  <{'equalityMatch',AV}> when 'true' ->
	      {'equalityMatch',AV}
	  %% Line 809
	  <{'greaterOrEqual',AV}> when 'true' ->
	      {'greaterOrEqual',AV}
	  %% Line 810
	  <{'lessOrEqual',AV}> when 'true' ->
	      {'lessOrEqual',AV}
	  %% Line 811
	  <{'approxMatch',AV}> when 'true' ->
	      {'approxMatch',AV}
	  %% Line 812
	  <{'present',A}> when 'true' ->
	      {'present',A}
	  %% Line 813
	  <{'substrings',S = {'SubstringFilter',_cor3,_cor4}}> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      {'substrings',S}
	  %% Line 814
	  <_X_Filter> when 'true' ->
	      let <_cor1> =
		  call 'lists':'concat'
		      ([[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[108|[116|[101|[114|[58|[32]]]]]]]]]]]]]]]]|[_X_Filter|[]]])
	      in  call 'erlang':'throw'
		      ({'error',_cor1})
	end
'v_modifications'/1 =
    %% Line 816
    fun (_cor0) ->
	let <F> =
	    %% Line 817
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{_cor6,Op,_cor7}> when 'true' ->
			%% Line 818
			case call 'lists':'member'
				 (Op, ['add'|['delete'|['replace']]]) of
			  %% Line 819
			  <'true'> when 'true' ->
			      'true'
			  %% Line 820
			  <_cor8> when 'true' ->
			      call 'erlang':'throw'
				  ({'error',{'mod_operation',Op}})
			end
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-v_modifications/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-v_modifications/1-fun-0-'}}] )
	in  %% Line 823
	    call 'lists':'foreach'
		(F, _cor0)
'v_substr'/1 =
    %% Line 825
    fun (_cor0) ->
	case _cor0 of
	  <[{Key,Str}|T]>
	      when let <_cor3> =
		    let <_cor1> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor2> =
			    call 'erlang':'=:='
				(Key, 'initial')
			in  call 'erlang':'and'
				(_cor1, _cor2)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (Key, 'any')
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(Key, 'final')
			in  let <_cor6> =
				call 'erlang':'or'
				    (_cor4, _cor5)
			    in  call 'erlang':'or'
				    (_cor3, _cor6) ->
	      let <_cor7> =
		  %% Line 826
		  apply 'v_substr'/1
		      (T)
	      in  %% Line 826
		  [{Key,Str}|_cor7]
	  %% Line 827
	  <[H|_cor9]> when 'true' ->
	      %% Line 828
	      call 'erlang':'throw'
		  ({'error',{'substring_arg',H}})
	  %% Line 829
	  <[]> when 'true' ->
	      %% Line 830
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'v_substr',1}}] )
	    -| ['compiler_generated'] )
	end
'v_scope'/1 =
    %% Line 831
    fun (_cor0) ->
	case _cor0 of
	  <'baseObject'> when 'true' ->
	      'baseObject'
	  %% Line 832
	  <'singleLevel'> when 'true' ->
	      'singleLevel'
	  %% Line 833
	  <'wholeSubtree'> when 'true' ->
	      'wholeSubtree'
	  %% Line 834
	  <_X_Scope> when 'true' ->
	      let <_cor1> =
		  call 'lists':'concat'
		      ([[117|[110|[107|[110|[111|[119|[110|[32|[115|[99|[111|[112|[101|[58|[32]]]]]]]]]]]]]]]|[_X_Scope|[]]])
	      in  call 'erlang':'throw'
		      ({'error',_cor1})
	end
'v_deref'/1 =
    %% Line 836
    fun (_cor0) ->
	case _cor0 of
	  <DR = 'neverDerefAliases'> when 'true' ->
	      DR
	  %% Line 837
	  <DR = 'derefInSearching'> when 'true' ->
	      DR
	  %% Line 838
	  <DR = 'derefFindingBaseObj'> when 'true' ->
	      DR
	  %% Line 839
	  <DR = 'derefAlways'> when 'true' ->
	      DR
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'v_deref',1}}] )
	    -| ['compiler_generated'] )
	end
'v_bool'/1 =
    %% Line 841
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      'true'
	  %% Line 842
	  <'false'> when 'true' ->
	      'false'
	  %% Line 843
	  <_X_Bool> when 'true' ->
	      let <_cor1> =
		  call 'lists':'concat'
		      ([[110|[111|[116|[32|[66|[111|[111|[108|[101|[97|[110|[58|[32]]]]]]]]]]]]]|[_X_Bool|[]]])
	      in  call 'erlang':'throw'
		      ({'error',_cor1})
	end
'v_timeout'/1 =
    %% Line 845
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      I
	  %% Line 846
	  <_X_I> when 'true' ->
	      let <_cor3> =
		  call 'lists':'concat'
		      ([[116|[105|[109|[101|[111|[117|[116|[32|[110|[111|[116|[32|[112|[111|[115|[105|[116|[105|[118|[101|[32|[105|[110|[116|[101|[103|[101|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_X_I|[]]])
	      in  call 'erlang':'throw'
		      ({'error',_cor3})
	end
'v_attributes'/1 =
    %% Line 848
    fun (_cor0) ->
	let <F> =
	    %% Line 849
	    ( fun (_cor2) ->
		  case _cor2 of
		    <A>
			when call 'erlang':'is_list'
			      (_cor2) ->
			A
		    %% Line 850
		    <A> when 'true' ->
			let <_cor1> =
			    call 'lists':'concat'
				([[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[110|[111|[116|[32|[83|[116|[114|[105|[110|[103|[58|[32]]]]]]]]]]]]]]]]]]]]]]|[A|[]]])
			in  call 'erlang':'throw'
				({'error',_cor1})
		  end
	      -| [{'id',{0,0,'-v_attributes/1-fun-0-'}}] )
	in  %% Line 852
	    call 'lists':'map'
		(F, _cor0)
'log2'/3 =
    %% Line 860
    fun (_cor2,_cor1,_cor0) ->
	apply 'log'/4
	    (_cor2, _cor1, _cor0, 2)
'log'/4 =
    %% Line 862
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Data = {'eldap',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30},Str,Args,Level>
	      when call 'erlang':'is_function'
		    (_cor24) ->
	      catch
		  %% Line 863
		  apply _cor24
		      (Level, Str, Args)
	  %% Line 864
	  <_cor46,_cor47,_cor48,_cor49> when 'true' ->
	      %% Line 865
	      'ok'
	end
'send'/2 =
    %% Line 872
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'self'
		()
	in  call 'erlang':'!'
		(_cor1, {_cor2,_cor0})
'recv'/1 =
    %% Line 873
    fun (_cor0) ->
	%% Line 874
	receive
	  %% Line 875
	  <{_cor2,Msg}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      Msg
	  %% Line 876
	  <{'EXIT',_cor3,Reason}>
	      when call 'erlang':'=:='
		    (_cor3,
		     _cor0) ->
	      %% Line 877
	      {'error',{'internal_error',Reason}}
	after 'infinity' ->
	  'true'
'ldap_closed_p'/2 =
    %% Line 880
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data = {'eldap',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33},Emsg>
	      when call 'erlang':'=:='
		    (_cor31,
		     'true') ->
	      let <_cor10> =
		  catch
		      %% Line 882
		      call 'ssl':'sockname'
			  (_cor22)
	      in  %% Line 882
		  case _cor10 of
		    %% Line 883
		    <{'error',_cor49}> when 'true' ->
			do  %% Line 884
			    call 'ssl':'close'
				(_cor22)
			    %% Line 885
			    {'error','ldap_closed'}
		    %% Line 886
		    <{'ok',_cor65}> when 'true' ->
			%% Line 887
			{'error',Emsg}
		    %% Line 888
		    <_cor66> when 'true' ->
			%% Line 890
			{'error','ldap_closed'}
		  end
	  %% Line 892
	  <Data,Emsg> when 'true' ->
	      %% Line 894
	      ( case Data of
		  ( <( {'eldap',_cor67,_cor68,_cor69,_rec65,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'inet':'port'
				 (_rec65) of
			  %% Line 895
			  <{'error',_cor82}> when 'true' ->
			      {'error','ldap_closed'}
			  %% Line 896
			  <_cor83> when 'true' ->
			      {'error',Emsg}
			end
		    -| ['compiler_generated'] )
		  ( <_cor81> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','eldap'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'bump_id'/1 =
    %% Line 899
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'eldap',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_rec66,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'erlang':'+'
		      (_rec66, 1)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eldap'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'parse_dn'/1 =
    %% Line 954
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 955
	      {'ok',[]}
	  %% Line 956
	  <Str = [H|_cor4]>
	      when call 'erlang':'=/='
		    (H,
		     44) ->
	      let <_cor1> =
		  catch
		      %% Line 957
		      apply 'parse_name'/2
			  (Str, [])
	      in  %% Line 957
		  case _cor1 of
		    %% Line 958
		    <{'EXIT',Reason}> when 'true' ->
			{'parse_error','internal_error',Reason}
		    %% Line 959
		    <Else> when 'true' ->
			Else
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'parse_dn',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_name'/2 =
    %% Line 962
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 963
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 963
		  {'ok',_cor2}
	  %% Line 964
	  <[44|T],Acc> when 'true' ->
	      %% Line 965
	      apply 'parse_name'/2
		  (T, Acc)
	  %% Line 966
	  <Str,Acc> when 'true' ->
	      %% Line 967
	      case apply 'parse_name_component'/1
		       (Str) of
		<{Rest,NameComponent}> when 'true' ->
		    %% Line 968
		    apply 'parse_name'/2
			(Rest, [NameComponent|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'parse_name_component'/1 =
    %% Line 970
    fun (_cor0) ->
	%% Line 971
	apply 'parse_name_component'/2
	    (_cor0, [])
'parse_name_component'/2 =
    %% Line 973
    fun (_cor1,_cor0) ->
	%% Line 974
	case apply 'parse_attribute_type_and_value'/1
		 (_cor1) of
	  %% Line 975
	  <{[43|Rest],ATV}> when 'true' ->
	      %% Line 976
	      apply 'parse_name_component'/2
		  (Rest, [ATV|_cor0])
	  %% Line 977
	  <{Rest,ATV}> when 'true' ->
	      let <_cor2> =
		  %% Line 978
		  call 'lists':'reverse'
		      ([ATV|_cor0])
	      in  %% Line 978
		  {Rest,_cor2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'parse_attribute_type_and_value'/1 =
    %% Line 981
    fun (_cor0) ->
	%% Line 982
	case apply 'parse_attribute_type'/1
		 (_cor0) of
	  %% Line 983
	  <{_X_Rest,[]}> when 'true' ->
	      %% Line 984
	      apply 'parse_error'/2
		  ('expecting_attribute_type', _cor0)
	  %% Line 985
	  <{Rest,Type}> when 'true' ->
	      let <Rest2> =
		  %% Line 986
		  apply 'parse_equal_sign'/1
		      (Rest)
	      in  %% Line 987
		  case apply 'parse_attribute_value'/1
			   (Rest2) of
		    <{Rest3,Value}> when 'true' ->
			%% Line 988
			{Rest3,{'attribute_type_and_value',Type,Value}}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'parse_attribute_type'/1 =
    %% Line 999
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]>
	      when let <_cor3> =
		    let <_cor1> =
			call 'erlang':'>='
			    (H, 97)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		in  let <_cor6> =
			let <_cor4> =
			    call 'erlang':'>='
				(H, 65)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor4, _cor5)
		    in  call 'erlang':'or'
			    (_cor3, _cor6) ->
	      %% Line 1002
	      case apply 'parse_keychars'/1
		       (T) of
		<{Rest,KeyChars}> when 'true' ->
		    %% Line 1003
		    {Rest,[H|KeyChars]}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1004
	  <Str = [H|_cor11]>
	      when let <_cor8> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 1005
	      apply 'parse_oid'/1
		  (Str)
	  %% Line 1006
	  <Str> when 'true' ->
	      %% Line 1007
	      apply 'parse_error'/2
		  ('invalid_attribute_type', Str)
	end
'parse_attribute_value'/1 =
    %% Line 1012
    fun (_cor0) ->
	case _cor0 of
	  <[35|[X|[Y|T]]]>
	      when let <_cor3> =
		    let <_cor1> =
			call 'erlang':'>='
			    (X, 48)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(X, 57)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		in  let <_cor6> =
			let <_cor4> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (X, 102)
			    in  call 'erlang':'and'
				    (_cor4, _cor5)
		    in  let <_cor13> =
			    try
				let <_cor7> =
				    call 'erlang':'>='
					(X, 65)
				in  let <_cor8> =
					call 'erlang':'=<'
					    (X, 70)
				    in  let <_cor9> =
					    call 'erlang':'>='
						(Y, 48)
					in  let <_cor10> =
						call 'erlang':'=<'
						    (Y, 57)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor9, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor8, _cor11)
						    in  call 'erlang':'and'
							    (_cor7, _cor12)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor16> =
				let <_cor14> =
				    call 'erlang':'>='
					(Y, 97)
				in  let <_cor15> =
					call 'erlang':'=<'
					    (Y, 102)
				    in  call 'erlang':'and'
					    (_cor14, _cor15)
			    in  let <_cor19> =
				    let <_cor17> =
					call 'erlang':'>='
					    (Y, 65)
				    in  let <_cor18> =
					    call 'erlang':'=<'
						(Y, 70)
					in  call 'erlang':'and'
						(_cor17, _cor18)
				in  let <_cor20> =
					call 'erlang':'or'
					    (_cor16, _cor19)
				    in  let <_cor21> =
					    call 'erlang':'or'
						(_cor13, _cor20)
					in  let <_cor22> =
						call 'erlang':'or'
						    (_cor6, _cor21)
					    in  call 'erlang':'or'
						    (_cor3, _cor22) ->
	      %% Line 1013
	      case apply 'parse_hexstring'/1
		       (T) of
		<{Rest,HexString}> when 'true' ->
		    %% Line 1014
		    {Rest,[35|[X|[Y|HexString]]]}
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1016
	  <[34|T]> when 'true' ->
	      %% Line 1017
	      case apply 'parse_quotation'/1
		       (T) of
		<{Rest,Quotation}> when 'true' ->
		    %% Line 1018
		    {Rest,[34|Quotation]}
		( <_cor24> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor24})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1020
	  <Str> when 'true' ->
	      %% Line 1021
	      apply 'parse_string'/1
		  (Str)
	end
'parse_hexstring'/1 =
    %% Line 1023
    fun (_cor0) ->
	%% Line 1024
	apply 'parse_hexstring'/2
	    (_cor0, [])
'parse_hexstring'/2 =
    %% Line 1026
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|[Y|T]],Acc>
	      when let <_cor4> =
		    let <_cor2> =
			call 'erlang':'>='
			    (X, 48)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(X, 57)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		in  let <_cor7> =
			let <_cor5> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (X, 102)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		    in  let <_cor14> =
			    try
				let <_cor8> =
				    call 'erlang':'>='
					(X, 65)
				in  let <_cor9> =
					call 'erlang':'=<'
					    (X, 70)
				    in  let <_cor10> =
					    call 'erlang':'>='
						(Y, 48)
					in  let <_cor11> =
						call 'erlang':'=<'
						    (Y, 57)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor10, _cor11)
						in  let <_cor13> =
							call 'erlang':'and'
							    (_cor9, _cor12)
						    in  call 'erlang':'and'
							    (_cor8, _cor13)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor17> =
				let <_cor15> =
				    call 'erlang':'>='
					(Y, 97)
				in  let <_cor16> =
					call 'erlang':'=<'
					    (Y, 102)
				    in  call 'erlang':'and'
					    (_cor15, _cor16)
			    in  let <_cor20> =
				    let <_cor18> =
					call 'erlang':'>='
					    (Y, 65)
				    in  let <_cor19> =
					    call 'erlang':'=<'
						(Y, 70)
					in  call 'erlang':'and'
						(_cor18, _cor19)
				in  let <_cor21> =
					call 'erlang':'or'
					    (_cor17, _cor20)
				    in  let <_cor22> =
					    call 'erlang':'or'
						(_cor14, _cor21)
					in  let <_cor23> =
						call 'erlang':'or'
						    (_cor7, _cor22)
					    in  call 'erlang':'or'
						    (_cor4, _cor23) ->
	      %% Line 1027
	      apply 'parse_hexstring'/2
		  (T, [Y|[X|Acc]])
	  %% Line 1028
	  <T,Acc> when 'true' ->
	      let <_cor24> =
		  %% Line 1029
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1029
		  {T,_cor24}
	end
'parse_quotation'/1 =
    %% Line 1031
    fun (_cor0) ->
	case _cor0 of
	  <[34|T]> when 'true' ->
	      %% Line 1032
	      {T,[34]}
	  %% Line 1033
	  <Str> when 'true' ->
	      %% Line 1034
	      apply 'parse_quotation'/2
		  (Str, [])
	end
'parse_quotation'/2 =
    %% Line 1037
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[34|T],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1038
		  call 'lists':'reverse'
		      ([34|Acc])
	      in  %% Line 1038
		  {T,_cor2}
	  %% Line 1039
	  <[X|T],Acc>
	      when let <_cor3> =
		    call 'erlang':'=/='
			(X, 92)
		in  let <_cor4> =
			call 'erlang':'=/='
			    (X, 34)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1040
	      apply 'parse_quotation'/2
		  (T, [X|Acc])
	  %% Line 1041
	  <[92|[X|T]],Acc>
	      when let <_cor5> =
		    call 'erlang':'=='
			(X, 44)
		in  let <_cor6> =
			call 'erlang':'=='
			    (X, 61)
		    in  let <_cor7> =
			    call 'erlang':'=='
				(X, 43)
			in  let <_cor8> =
				call 'erlang':'=='
				    (X, 60)
			    in  let <_cor9> =
				    call 'erlang':'=='
					(X, 62)
				in  let <_cor10> =
					call 'erlang':'=='
					    (X, 35)
				    in  let <_cor11> =
					    call 'erlang':'=='
						(X, 59)
					in  let <_cor12> =
						call 'erlang':'or'
						    (_cor10, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'or'
							(_cor9, _cor12)
						in  let <_cor14> =
							call 'erlang':'or'
							    (_cor8, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'or'
								(_cor7, _cor14)
							in  let <_cor16> =
								call 'erlang':'or'
								    (_cor6, _cor15)
							    in  call 'erlang':'or'
								    (_cor5, _cor16) ->
	      %% Line 1042
	      apply 'parse_quotation'/2
		  (T, [X|[92|Acc]])
	  %% Line 1043
	  <[92|[92|T]],Acc> when 'true' ->
	      %% Line 1044
	      apply 'parse_quotation'/2
		  (T, [92|[92|Acc]])
	  %% Line 1045
	  <[92|[34|T]],Acc> when 'true' ->
	      %% Line 1046
	      apply 'parse_quotation'/2
		  (T, [34|[92|Acc]])
	  %% Line 1047
	  <[92|[X|[Y|T]]],Acc>
	      when let <_cor19> =
		    let <_cor17> =
			call 'erlang':'>='
			    (X, 48)
		    in  let <_cor18> =
			    call 'erlang':'=<'
				(X, 57)
			in  call 'erlang':'and'
				(_cor17, _cor18)
		in  let <_cor22> =
			let <_cor20> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor21> =
				call 'erlang':'=<'
				    (X, 102)
			    in  call 'erlang':'and'
				    (_cor20, _cor21)
		    in  let <_cor29> =
			    try
				let <_cor23> =
				    call 'erlang':'>='
					(X, 65)
				in  let <_cor24> =
					call 'erlang':'=<'
					    (X, 70)
				    in  let <_cor25> =
					    call 'erlang':'>='
						(Y, 48)
					in  let <_cor26> =
						call 'erlang':'=<'
						    (Y, 57)
					    in  let <_cor27> =
						    call 'erlang':'and'
							(_cor25, _cor26)
						in  let <_cor28> =
							call 'erlang':'and'
							    (_cor24, _cor27)
						    in  call 'erlang':'and'
							    (_cor23, _cor28)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor32> =
				let <_cor30> =
				    call 'erlang':'>='
					(Y, 97)
				in  let <_cor31> =
					call 'erlang':'=<'
					    (Y, 102)
				    in  call 'erlang':'and'
					    (_cor30, _cor31)
			    in  let <_cor35> =
				    let <_cor33> =
					call 'erlang':'>='
					    (Y, 65)
				    in  let <_cor34> =
					    call 'erlang':'=<'
						(Y, 70)
					in  call 'erlang':'and'
						(_cor33, _cor34)
				in  let <_cor36> =
					call 'erlang':'or'
					    (_cor32, _cor35)
				    in  let <_cor37> =
					    call 'erlang':'or'
						(_cor29, _cor36)
					in  let <_cor38> =
						call 'erlang':'or'
						    (_cor22, _cor37)
					    in  call 'erlang':'or'
						    (_cor19, _cor38) ->
	      %% Line 1048
	      apply 'parse_quotation'/2
		  (T, [Y|[X|[92|Acc]]])
	  %% Line 1049
	  <T,_cor41> when 'true' ->
	      %% Line 1050
	      apply 'parse_error'/2
		  ('expecting_double_quote_mark', T)
	end
'parse_string'/1 =
    %% Line 1052
    fun (_cor0) ->
	%% Line 1053
	apply 'parse_string'/2
	    (_cor0, [])
'parse_string'/2 =
    %% Line 1055
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1056
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1056
		  {[],_cor2}
	  %% Line 1057
	  <[H|T],Acc>
	      when try
		    let <_cor3> =
			call 'erlang':'=/='
			    (H, 44)
		    in  let <_cor4> =
			    call 'erlang':'=/='
				(H, 61)
			in  let <_cor5> =
				call 'erlang':'=/='
				    (H, 43)
			    in  let <_cor6> =
				    call 'erlang':'=/='
					(H, 60)
				in  let <_cor7> =
					call 'erlang':'=/='
					    (H, 62)
				    in  let <_cor8> =
					    call 'erlang':'=/='
						(H, 35)
					in  let <_cor9> =
						call 'erlang':'=/='
						    (H, 59)
					    in  let <_cor10> =
						    call 'erlang':'=/='
							(H, 92)
						in  let <_cor11> =
							call 'erlang':'=/='
							    (H, 34)
						    in  let <_cor12> =
							    call 'erlang':'and'
								(_cor10, _cor11)
							in  let <_cor13> =
								call 'erlang':'and'
								    (_cor9, _cor12)
							    in  let <_cor14> =
								    call 'erlang':'and'
									(_cor8, _cor13)
								in  let <_cor15> =
									call 'erlang':'and'
									    (_cor7, _cor14)
								    in  let <_cor16> =
									    call 'erlang':'and'
										(_cor6, _cor15)
									in  let <_cor17> =
										call 'erlang':'and'
										    (_cor5, _cor16)
									    in  let <_cor18> =
										    call 'erlang':'and'
											(_cor4, _cor17)
										in  call 'erlang':'and'
											(_cor3, _cor18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1058
	      apply 'parse_string'/2
		  (T, [H|Acc])
	  %% Line 1059
	  <[92|[X|T]],Acc>
	      when let <_cor19> =
		    call 'erlang':'=='
			(X, 44)
		in  let <_cor20> =
			call 'erlang':'=='
			    (X, 61)
		    in  let <_cor21> =
			    call 'erlang':'=='
				(X, 43)
			in  let <_cor22> =
				call 'erlang':'=='
				    (X, 60)
			    in  let <_cor23> =
				    call 'erlang':'=='
					(X, 62)
				in  let <_cor24> =
					call 'erlang':'=='
					    (X, 35)
				    in  let <_cor25> =
					    call 'erlang':'=='
						(X, 59)
					in  let <_cor26> =
						call 'erlang':'or'
						    (_cor24, _cor25)
					    in  let <_cor27> =
						    call 'erlang':'or'
							(_cor23, _cor26)
						in  let <_cor28> =
							call 'erlang':'or'
							    (_cor22, _cor27)
						    in  let <_cor29> =
							    call 'erlang':'or'
								(_cor21, _cor28)
							in  let <_cor30> =
								call 'erlang':'or'
								    (_cor20, _cor29)
							    in  call 'erlang':'or'
								    (_cor19, _cor30) ->
	      %% Line 1060
	      apply 'parse_string'/2
		  (T, [X|[92|Acc]])
	  %% Line 1061
	  <[92|[92|T]],Acc> when 'true' ->
	      %% Line 1062
	      apply 'parse_string'/2
		  (T, [92|[92|Acc]])
	  %% Line 1063
	  <[92|[34|T]],Acc> when 'true' ->
	      %% Line 1064
	      apply 'parse_string'/2
		  (T, [34|[92|Acc]])
	  %% Line 1065
	  <[92|[X|[Y|T]]],Acc>
	      when let <_cor33> =
		    let <_cor31> =
			call 'erlang':'>='
			    (X, 48)
		    in  let <_cor32> =
			    call 'erlang':'=<'
				(X, 57)
			in  call 'erlang':'and'
				(_cor31, _cor32)
		in  let <_cor36> =
			let <_cor34> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor35> =
				call 'erlang':'=<'
				    (X, 102)
			    in  call 'erlang':'and'
				    (_cor34, _cor35)
		    in  let <_cor43> =
			    try
				let <_cor37> =
				    call 'erlang':'>='
					(X, 65)
				in  let <_cor38> =
					call 'erlang':'=<'
					    (X, 70)
				    in  let <_cor39> =
					    call 'erlang':'>='
						(Y, 48)
					in  let <_cor40> =
						call 'erlang':'=<'
						    (Y, 57)
					    in  let <_cor41> =
						    call 'erlang':'and'
							(_cor39, _cor40)
						in  let <_cor42> =
							call 'erlang':'and'
							    (_cor38, _cor41)
						    in  call 'erlang':'and'
							    (_cor37, _cor42)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor46> =
				let <_cor44> =
				    call 'erlang':'>='
					(Y, 97)
				in  let <_cor45> =
					call 'erlang':'=<'
					    (Y, 102)
				    in  call 'erlang':'and'
					    (_cor44, _cor45)
			    in  let <_cor49> =
				    let <_cor47> =
					call 'erlang':'>='
					    (Y, 65)
				    in  let <_cor48> =
					    call 'erlang':'=<'
						(Y, 70)
					in  call 'erlang':'and'
						(_cor47, _cor48)
				in  let <_cor50> =
					call 'erlang':'or'
					    (_cor46, _cor49)
				    in  let <_cor51> =
					    call 'erlang':'or'
						(_cor43, _cor50)
					in  let <_cor52> =
						call 'erlang':'or'
						    (_cor36, _cor51)
					    in  call 'erlang':'or'
						    (_cor33, _cor52) ->
	      %% Line 1066
	      apply 'parse_string'/2
		  (T, [Y|[X|[92|Acc]]])
	  %% Line 1067
	  <T,Acc> when 'true' ->
	      let <_cor53> =
		  %% Line 1068
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1068
		  {T,_cor53}
	end
'parse_equal_sign'/1 =
    %% Line 1070
    fun (_cor0) ->
	case _cor0 of
	  <[61|T]> when 'true' ->
	      T
	  %% Line 1071
	  <T> when 'true' ->
	      apply 'parse_error'/2
		  ('expecting_equal_sign', T)
	end
'parse_keychars'/1 =
    %% Line 1073
    fun (_cor0) ->
	apply 'parse_keychars'/2
	    (_cor0, [])
'parse_keychars'/2 =
    %% Line 1075
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc>
	      when let <_cor4> =
		    let <_cor2> =
			call 'erlang':'>='
			    (H, 97)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		in  let <_cor7> =
			let <_cor5> =
			    call 'erlang':'>='
				(H, 65)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		    in  call 'erlang':'or'
			    (_cor4, _cor7) ->
	      apply 'parse_keychars'/2
		  (T, [H|Acc])
	  %% Line 1076
	  <[H|T],Acc>
	      when let <_cor8> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      apply 'parse_keychars'/2
		  (T, [H|Acc])
	  %% Line 1077
	  <[45|T],Acc> when 'true' ->
	      apply 'parse_keychars'/2
		  (T, [45|Acc])
	  %% Line 1078
	  <T,Acc> when 'true' ->
	      let <_cor10> =
		  call 'lists':'reverse'
		      (Acc)
	      in  {T,_cor10}
	end
'parse_oid'/1 =
    %% Line 1080
    fun (_cor0) ->
	apply 'parse_oid'/2
	    (_cor0, [])
'parse_oid'/2 =
    %% Line 1082
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|[46|T]],Acc>
	      when let <_cor2> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1083
	      apply 'parse_oid'/2
		  (T, [46|[H|Acc]])
	  %% Line 1084
	  <[H|T],Acc>
	      when let <_cor4> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 1085
	      apply 'parse_oid'/2
		  (T, [H|Acc])
	  %% Line 1086
	  <T,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 1087
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1087
		  {T,_cor6}
	end
'parse_error'/2 =
    %% Line 1089
    fun (_cor1,_cor0) ->
	%% Line 1090
	call 'erlang':'throw'
	    ({'parse_error',_cor1,_cor0})
'parse_ldap_url'/1 =
    %% Line 1107
    fun (_cor0) ->
	case _cor0 of
	  <Str = [108|[100|[97|[112|[58|[47|[47|Rest1]]]]]]]> when 'true' ->
	      %% Line 1108
	      case apply 'parse_hostport'/1
		       (Rest1) of
		<{Rest2,HostPort}> when 'true' ->
		    let <_cor2> =
			%% Line 1110
			apply 'rm_leading_slash'/1
			    (Rest2)
		    in  %% Line 1110
			case apply 'split_string'/2
				 (_cor2, 63) of
			  <{Sdn,Rest3}> when 'true' ->
			      %% Line 1111
			      case apply 'parse_dn'/1
				       (Sdn) of
				%% Line 1112
				<{'parse_error','internal_error',_X_Reason}> when 'true' ->
				    %% Line 1113
				    {'parse_error','internal_error',{Str,[]}}
				%% Line 1114
				<{'parse_error',Emsg,Tail}> when 'true' ->
				    let <Head> =
					%% Line 1115
					apply 'get_head'/2
					    (Str, Tail)
				    in  %% Line 1116
					{'parse_error',Emsg,{Head,Tail}}
				%% Line 1117
				<{'ok',DN}> when 'true' ->
				    %% Line 1121
				    case apply 'parse_attributes'/1
					     (Rest3) of
				      <{_X_Rest4,Attributes}> when 'true' ->
					  %% Line 1122
					  {'ok',HostPort,DN,Attributes}
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'parse_ldap_url',1}}] )
	    -| ['compiler_generated'] )
	end
'rm_leading_slash'/1 =
    %% Line 1125
    fun (_cor0) ->
	case _cor0 of
	  <[47|Tail]> when 'true' ->
	      Tail
	  %% Line 1126
	  <Tail> when 'true' ->
	      Tail
	end
'parse_attributes'/1 =
    %% Line 1128
    fun (_cor0) ->
	case _cor0 of
	  <[63|Tail]> when 'true' ->
	      %% Line 1129
	      case apply 'split_string'/2
		       (Tail, 63) of
		%% Line 1130
		<{[],Attributes}> when 'true' ->
		    let <_cor1> =
			%% Line 1131
			call 'string':'tokens'
			    (Attributes, [44])
		    in  %% Line 1131
			{[],{'attributes',_cor1}}
		%% Line 1132
		<{Attributes,Rest}> when 'true' ->
		    let <_cor2> =
			%% Line 1133
			call 'string':'tokens'
			    (Attributes, [44])
		    in  %% Line 1133
			{Rest,{'attributes',_cor2}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'parse_attributes',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_hostport'/1 =
    %% Line 1136
    fun (_cor0) ->
	%% Line 1137
	case apply 'split_string'/2
		 (_cor0, 47) of
	  <{HostPort,Rest}> when 'true' ->
	      %% Line 1138
	      case apply 'split_string'/2
		       (HostPort, 58) of
		%% Line 1139
		<{Shost,[]}> when 'true' ->
		    let <_cor2> =
			%% Line 1140
			apply 'parse_host'/2
			    (Rest, Shost)
		    in  %% Line 1140
			{Rest,{_cor2,389}}
		%% Line 1141
		<{Shost,[58|Sport]}> when 'true' ->
		    let <_cor4> =
			%% Line 1142
			apply 'parse_host'/2
			    (Rest, Shost)
		    in  let <_cor3> =
			    %% Line 1143
			    apply 'parse_port'/2
				(Rest, Sport)
			in  %% Line 1142
			    {Rest,{_cor4,_cor3}}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_port'/2 =
    %% Line 1146
    fun (_cor1,_cor0) ->
	%% Line 1147
	try
	    call 'erlang':'list_to_integer'
		(_cor0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 1148
	    apply 'parse_error'/2
		('parsing_port', _cor1)
'parse_host'/2 =
    %% Line 1151
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 1152
		apply 'validate_host'/1
		    (_cor0)
	in  %% Line 1152
	    case _cor2 of
	      %% Line 1153
	      <{'parse_error',Emsg,_cor6}> when 'true' ->
		  apply 'parse_error'/2
		      (Emsg, _cor1)
	      %% Line 1154
	      <Host> when 'true' ->
		  Host
	    end
'validate_host'/1 =
    %% Line 1157
    fun (_cor0) ->
	%% Line 1158
	case call 'inet_parse':'address'
		 (_cor0) of
	  %% Line 1159
	  <{'ok',Host}> when 'true' ->
	      Host
	  %% Line 1160
	  <_cor4> when 'true' ->
	      %% Line 1161
	      case call 'inet_parse':'domain'
		       (_cor0) of
		%% Line 1162
		<'true'> when 'true' ->
		    _cor0
		%% Line 1163
		<_cor5> when 'true' ->
		    apply 'parse_error'/2
			('parsing_host', _cor0)
	      end
	end
'split_string'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	let <Pred> =
	    %% Line 1169
	    ( fun (_cor2) ->
		  case _cor2 of
		    <X>
			when call 'erlang':'=='
			      (_cor2,
			       _cor0) ->
			'false'
		    <_cor7> when 'true' ->
			'true'
		  end
	      -| [{'id',{0,0,'-split_string/2-fun-0-'}}] )
	in  %% Line 1170
	    call 'lists':'splitwith'
		(Pred, _cor1)
'get_head'/2 =
    %% Line 1172
    fun (_cor1,_cor0) ->
	%% Line 1173
	apply 'get_head'/3
	    (_cor1, _cor0, [])
'get_head'/3 =
    %% Line 1176
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|Tail],_cor6,Rhead>
	      when call 'erlang':'=:='
		    (_cor6,
		     Tail) ->
	      call 'lists':'reverse'
		  ([H|Rhead])
	  %% Line 1177
	  <[H|Rest],Tail,Rhead> when 'true' ->
	      apply 'get_head'/3
		  (Rest, Tail, [H|Rhead])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'get_head',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eldap')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eldap', _cor0)
end