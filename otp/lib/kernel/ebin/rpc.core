module 'rpc' ['abcast'/2,
	      'abcast'/3,
	      'async_call'/4,
	      'block_call'/4,
	      'block_call'/5,
	      'call'/4,
	      'call'/5,
	      'cast'/4,
	      'code_change'/3,
	      'eval_everywhere'/3,
	      'eval_everywhere'/4,
	      'handle_call'/3,
	      'handle_cast'/2,
	      'handle_info'/2,
	      'init'/1,
	      'module_info'/0,
	      'module_info'/1,
	      'multi_server_call'/2,
	      'multi_server_call'/3,
	      'multicall'/3,
	      'multicall'/4,
	      'multicall'/5,
	      'nb_yield'/1,
	      'nb_yield'/2,
	      'parallel_eval'/1,
	      'pinfo'/1,
	      'pinfo'/2,
	      'pmap'/3,
	      'proxy_user_flush'/0,
	      'safe_multi_server_call'/2,
	      'safe_multi_server_call'/3,
	      'sbcast'/2,
	      'sbcast'/3,
	      'server_call'/4,
	      'start'/0,
	      'start_link'/0,
	      'stop'/0,
	      'terminate'/2,
	      'yield'/1]
    attributes [%% Line 29
		'behaviour' =
		    %% Line 29
		    ['gen_server'],
		%% Line 55
		'deprecated' =
		    %% Line 55
		    [{'safe_multi_server_call',2}|[{'safe_multi_server_call',3}]],
		%% Line 65
		'export_type' =
		    %% Line 65
		    [{'key',0}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'state',{'remote_type',69,[{'atom',69,'gb_trees'}|[{'atom',69,'tree'}|[[{'type',69,'pid',[]}|[{'type',69,'tuple',[{'type',69,'pid',[]}|[{'type',69,'reference',[]}]]}]]]]]},[]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'start',0},[{'type',75,'fun',[{'type',75,'product',[]}|[{'type',75,'union',[{'type',75,'tuple',[{'atom',75,'ok'}|[{'type',75,'pid',[]}]]}|[{'atom',75,'ignore'}|[{'type',75,'tuple',[{'atom',75,'error'}|[{'type',75,'term',[]}]]}]]]}]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'start_link',0},[{'type',80,'fun',[{'type',80,'product',[]}|[{'type',80,'union',[{'type',80,'tuple',[{'atom',80,'ok'}|[{'type',80,'pid',[]}]]}|[{'atom',80,'ignore'}|[{'type',80,'tuple',[{'atom',80,'error'}|[{'type',80,'term',[]}]]}]]]}]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'stop',0},[{'type',85,'fun',[{'type',85,'product',[]}|[{'type',85,'term',[]}]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'init',1},[{'type',93,'fun',[{'type',93,'product',[{'type',93,'nil',[]}]}|[{'type',93,'tuple',[{'atom',93,'ok'}|[{'type',93,'state',[]}]]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'handle_call',3},[{'type',99,'fun',[{'type',99,'product',[{'type',99,'term',[]}|[{'type',99,'term',[]}|[{'type',99,'state',[]}]]]}|[{'type',100,'union',[{'type',100,'tuple',[{'atom',100,'noreply'}|[{'type',100,'state',[]}]]}|[{'type',101,'tuple',[{'atom',101,'reply'}|[{'type',101,'term',[]}|[{'type',101,'state',[]}]]]}|[{'type',102,'tuple',[{'atom',102,'stop'}|[{'atom',102,'normal'}|[{'atom',102,'stopped'}|[{'type',102,'state',[]}]]]]}]]]}]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'handle_cast',2},[{'type',123,'fun',[{'type',123,'product',[{'type',123,'term',[]}|[{'type',123,'state',[]}]]}|[{'type',123,'tuple',[{'atom',123,'noreply'}|[{'type',123,'state',[]}]]}]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'handle_info',2},[{'type',134,'fun',[{'type',134,'product',[{'type',134,'term',[]}|[{'type',134,'state',[]}]]}|[{'type',134,'tuple',[{'atom',134,'noreply'}|[{'type',134,'state',[]}]]}]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'terminate',2},[{'type',182,'fun',[{'type',182,'product',[{'type',182,'term',[]}|[{'type',182,'state',[]}]]}|[{'atom',182,'ok'}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'code_change',3},[{'type',187,'fun',[{'type',187,'product',[{'type',187,'term',[]}|[{'type',187,'state',[]}|[{'type',187,'term',[]}]]]}|[{'type',187,'tuple',[{'atom',187,'ok'}|[{'type',187,'state',[]}]]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'proxy_user_flush',0},[{'type',252,'fun',[{'type',252,'product',[]}|[{'type',252,'no_return',[]}]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'call',4},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Node'}|[{'var',268,'Module'}|[{'var',268,'Function'}|[{'var',268,'Args'}]]]]}|[{'type',268,'union',[{'var',268,'Res'}|[{'type',268,'tuple',[{'atom',268,'badrpc'}|[{'var',268,'Reason'}]]}]]}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Node'}|[{'type',269,'node',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Module'}|[{'type',270,'module',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Function'}|[{'type',271,'atom',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Args'}|[{'type',272,'list',[{'type',272,'term',[]}]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Res'}|[{'type',273,'term',[]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Reason'}|[{'type',274,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 281
		'spec' =
		    %% Line 281
		    [{{'call',5},[{'type',281,'bounded_fun',[{'type',281,'fun',[{'type',281,'product',[{'var',281,'Node'}|[{'var',281,'Module'}|[{'var',281,'Function'}|[{'var',281,'Args'}|[{'var',281,'Timeout'}]]]]]}|[{'type',282,'union',[{'var',282,'Res'}|[{'type',282,'tuple',[{'atom',282,'badrpc'}|[{'var',282,'Reason'}]]}]]}]]}|[[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'Node'}|[{'type',283,'node',[]}]]]]}|[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Module'}|[{'type',284,'module',[]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Function'}|[{'type',285,'atom',[]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Args'}|[{'type',286,'list',[{'type',286,'term',[]}]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Res'}|[{'type',287,'term',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Reason'}|[{'type',288,'term',[]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Timeout'}|[{'type',289,'timeout',[]}]]]]}]]]]]]]]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'block_call',4},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'var',298,'Node'}|[{'var',298,'Module'}|[{'var',298,'Function'}|[{'var',298,'Args'}]]]]}|[{'type',298,'union',[{'var',298,'Res'}|[{'type',298,'tuple',[{'atom',298,'badrpc'}|[{'var',298,'Reason'}]]}]]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Node'}|[{'type',299,'node',[]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Module'}|[{'type',300,'module',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Function'}|[{'type',301,'atom',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Args'}|[{'type',302,'list',[{'type',302,'term',[]}]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Res'}|[{'type',303,'term',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Reason'}|[{'type',304,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'block_call',5},[{'type',311,'bounded_fun',[{'type',311,'fun',[{'type',311,'product',[{'var',311,'Node'}|[{'var',311,'Module'}|[{'var',311,'Function'}|[{'var',311,'Args'}|[{'var',311,'Timeout'}]]]]]}|[{'type',312,'union',[{'var',312,'Res'}|[{'type',312,'tuple',[{'atom',312,'badrpc'}|[{'var',312,'Reason'}]]}]]}]]}|[[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Node'}|[{'type',313,'node',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Module'}|[{'type',314,'module',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Function'}|[{'type',315,'atom',[]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Args'}|[{'type',316,'list',[{'type',316,'term',[]}]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Res'}|[{'type',317,'term',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Reason'}|[{'type',318,'term',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Timeout'}|[{'type',319,'timeout',[]}]]]]}]]]]]]]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'server_call',4},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'Node'}|[{'var',372,'Name'}|[{'var',372,'ReplyWrapper'}|[{'var',372,'Msg'}]]]]}|[{'type',372,'union',[{'var',372,'Reply'}|[{'type',372,'tuple',[{'atom',372,'error'}|[{'var',372,'Reason'}]]}]]}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Node'}|[{'type',373,'node',[]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Name'}|[{'type',374,'atom',[]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'ReplyWrapper'}|[{'type',375,'term',[]}]]]]}|[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'Msg'}|[{'type',376,'term',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Reply'}|[{'type',377,'term',[]}]]]]}|[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'Reason'}|[{'atom',378,'nodedown'}]]]]}]]]]]]]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'cast',4},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'Node'}|[{'var',396,'Module'}|[{'var',396,'Function'}|[{'var',396,'Args'}]]]]}|[{'atom',396,'true'}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Node'}|[{'type',397,'node',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Module'}|[{'type',398,'module',[]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Function'}|[{'type',399,'atom',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Args'}|[{'type',400,'list',[{'type',400,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 411
		'spec' =
		    %% Line 411
		    [{{'abcast',2},[{'type',411,'bounded_fun',[{'type',411,'fun',[{'type',411,'product',[{'var',411,'Name'}|[{'var',411,'Msg'}]]}|[{'atom',411,'abcast'}]]}|[[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Name'}|[{'type',412,'atom',[]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Msg'}|[{'type',413,'term',[]}]]]]}]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'abcast',3},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'Nodes'}|[{'var',418,'Name'}|[{'var',418,'Msg'}]]]}|[{'atom',418,'abcast'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Nodes'}|[{'type',419,'list',[{'type',419,'node',[]}]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Name'}|[{'type',420,'atom',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Msg'}|[{'type',421,'term',[]}]]]]}]]]]]}]}],
		%% Line 439
		'spec' =
		    %% Line 439
		    [{{'sbcast',2},[{'type',439,'bounded_fun',[{'type',439,'fun',[{'type',439,'product',[{'var',439,'Name'}|[{'var',439,'Msg'}]]}|[{'type',439,'tuple',[{'var',439,'GoodNodes'}|[{'var',439,'BadNodes'}]]}]]}|[[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Name'}|[{'type',440,'atom',[]}]]]]}|[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Msg'}|[{'type',441,'term',[]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'GoodNodes'}|[{'type',442,'list',[{'type',442,'node',[]}]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'BadNodes'}|[{'type',443,'list',[{'type',443,'node',[]}]}]]]]}]]]]]]}]}],
		%% Line 448
		'spec' =
		    %% Line 448
		    [{{'sbcast',3},[{'type',448,'bounded_fun',[{'type',448,'fun',[{'type',448,'product',[{'var',448,'Nodes'}|[{'var',448,'Name'}|[{'var',448,'Msg'}]]]}|[{'type',448,'tuple',[{'var',448,'GoodNodes'}|[{'var',448,'BadNodes'}]]}]]}|[[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'Name'}|[{'type',449,'atom',[]}]]]]}|[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'Msg'}|[{'type',450,'term',[]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Nodes'}|[{'type',451,'list',[{'type',451,'node',[]}]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'GoodNodes'}|[{'type',452,'list',[{'type',452,'node',[]}]}]]]]}|[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'BadNodes'}|[{'type',453,'list',[{'type',453,'node',[]}]}]]]]}]]]]]]]}]}],
		%% Line 459
		'spec' =
		    %% Line 459
		    [{{'eval_everywhere',3},[{'type',459,'bounded_fun',[{'type',459,'fun',[{'type',459,'product',[{'var',459,'Module'}|[{'var',459,'Function'}|[{'var',459,'Args'}]]]}|[{'atom',459,'abcast'}]]}|[[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Module'}|[{'type',460,'module',[]}]]]]}|[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'Function'}|[{'type',461,'atom',[]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Args'}|[{'type',462,'list',[{'type',462,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'eval_everywhere',4},[{'type',467,'bounded_fun',[{'type',467,'fun',[{'type',467,'product',[{'var',467,'Nodes'}|[{'var',467,'Module'}|[{'var',467,'Function'}|[{'var',467,'Args'}]]]]}|[{'atom',467,'abcast'}]]}|[[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'Nodes'}|[{'type',468,'list',[{'type',468,'node',[]}]}]]]]}|[{'type',469,'constraint',[{'atom',469,'is_subtype'}|[[{'var',469,'Module'}|[{'type',469,'module',[]}]]]]}|[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'Function'}|[{'type',470,'atom',[]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Args'}|[{'type',471,'list',[{'type',471,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 501
		'spec' =
		    %% Line 501
		    [{{'multicall',3},[{'type',501,'bounded_fun',[{'type',501,'fun',[{'type',501,'product',[{'var',501,'Module'}|[{'var',501,'Function'}|[{'var',501,'Args'}]]]}|[{'type',501,'tuple',[{'var',501,'ResL'}|[{'var',501,'BadNodes'}]]}]]}|[[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Module'}|[{'type',502,'module',[]}]]]]}|[{'type',503,'constraint',[{'atom',503,'is_subtype'}|[[{'var',503,'Function'}|[{'type',503,'atom',[]}]]]]}|[{'type',504,'constraint',[{'atom',504,'is_subtype'}|[[{'var',504,'Args'}|[{'type',504,'list',[{'type',504,'term',[]}]}]]]]}|[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'ResL'}|[{'type',505,'list',[{'type',505,'term',[]}]}]]]]}|[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'BadNodes'}|[{'type',506,'list',[{'type',506,'node',[]}]}]]]]}]]]]]]]}]}],
		%% Line 511
		'spec' =
		    %% Line 511
		    [{{'multicall',4},[{'type',511,'bounded_fun',[{'type',511,'fun',[{'type',511,'product',[{'var',511,'Nodes'}|[{'var',511,'Module'}|[{'var',511,'Function'}|[{'var',511,'Args'}]]]]}|[{'type',511,'tuple',[{'var',511,'ResL'}|[{'var',511,'BadNodes'}]]}]]}|[[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Nodes'}|[{'type',512,'list',[{'type',512,'node',[]}]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Module'}|[{'type',513,'module',[]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Function'}|[{'type',514,'atom',[]}]]]]}|[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Args'}|[{'type',515,'list',[{'type',515,'term',[]}]}]]]]}|[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'ResL'}|[{'type',516,'list',[{'type',516,'term',[]}]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'BadNodes'}|[{'type',517,'list',[{'type',517,'node',[]}]}]]]]}]]]]]]]]}|[{'type',518,'bounded_fun',[{'type',518,'fun',[{'type',518,'product',[{'var',518,'Module'}|[{'var',518,'Function'}|[{'var',518,'Args'}|[{'var',518,'Timeout'}]]]]}|[{'type',518,'tuple',[{'var',518,'ResL'}|[{'var',518,'BadNodes'}]]}]]}|[[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'Module'}|[{'type',519,'module',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Function'}|[{'type',520,'atom',[]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Args'}|[{'type',521,'list',[{'type',521,'term',[]}]}]]]]}|[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'Timeout'}|[{'type',522,'timeout',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'ResL'}|[{'type',523,'list',[{'type',523,'term',[]}]}]]]]}|[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'BadNodes'}|[{'type',524,'list',[{'type',524,'node',[]}]}]]]]}]]]]]]]]}]]}],
		%% Line 531
		'spec' =
		    %% Line 531
		    [{{'multicall',5},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'Nodes'}|[{'var',531,'Module'}|[{'var',531,'Function'}|[{'var',531,'Args'}|[{'var',531,'Timeout'}]]]]]}|[{'type',532,'tuple',[{'var',532,'ResL'}|[{'var',532,'BadNodes'}]]}]]}|[[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Nodes'}|[{'type',533,'list',[{'type',533,'node',[]}]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Module'}|[{'type',534,'module',[]}]]]]}|[{'type',535,'constraint',[{'atom',535,'is_subtype'}|[[{'var',535,'Function'}|[{'type',535,'atom',[]}]]]]}|[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'Args'}|[{'type',536,'list',[{'type',536,'term',[]}]}]]]]}|[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'Timeout'}|[{'type',537,'timeout',[]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'ResL'}|[{'type',538,'list',[{'type',538,'term',[]}]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'BadNodes'}|[{'type',539,'list',[{'type',539,'node',[]}]}]]]]}]]]]]]]]]}]}],
		%% Line 568
		'spec' =
		    %% Line 568
		    [{{'multi_server_call',2},[{'type',568,'bounded_fun',[{'type',568,'fun',[{'type',568,'product',[{'var',568,'Name'}|[{'var',568,'Msg'}]]}|[{'type',568,'tuple',[{'var',568,'Replies'}|[{'var',568,'BadNodes'}]]}]]}|[[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'Name'}|[{'type',569,'atom',[]}]]]]}|[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'Msg'}|[{'type',570,'term',[]}]]]]}|[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'Replies'}|[{'type',571,'list',[{'ann_type',571,[{'var',571,'Reply'}|[{'type',571,'term',[]}]]}]}]]]]}|[{'type',572,'constraint',[{'atom',572,'is_subtype'}|[[{'var',572,'BadNodes'}|[{'type',572,'list',[{'type',572,'node',[]}]}]]]]}]]]]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'multi_server_call',3},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'Nodes'}|[{'var',577,'Name'}|[{'var',577,'Msg'}]]]}|[{'type',577,'tuple',[{'var',577,'Replies'}|[{'var',577,'BadNodes'}]]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Nodes'}|[{'type',578,'list',[{'type',578,'node',[]}]}]]]]}|[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'Name'}|[{'type',579,'atom',[]}]]]]}|[{'type',580,'constraint',[{'atom',580,'is_subtype'}|[[{'var',580,'Msg'}|[{'type',580,'term',[]}]]]]}|[{'type',581,'constraint',[{'atom',581,'is_subtype'}|[[{'var',581,'Replies'}|[{'type',581,'list',[{'ann_type',581,[{'var',581,'Reply'}|[{'type',581,'term',[]}]]}]}]]]]}|[{'type',582,'constraint',[{'atom',582,'is_subtype'}|[[{'var',582,'BadNodes'}|[{'type',582,'list',[{'type',582,'node',[]}]}]]]]}]]]]]]]}]}],
		%% Line 591
		'spec' =
		    %% Line 591
		    [{{'safe_multi_server_call',2},[{'type',591,'bounded_fun',[{'type',591,'fun',[{'type',591,'product',[{'var',591,'Name'}|[{'var',591,'Msg'}]]}|[{'type',591,'tuple',[{'var',591,'Replies'}|[{'var',591,'BadNodes'}]]}]]}|[[{'type',592,'constraint',[{'atom',592,'is_subtype'}|[[{'var',592,'Name'}|[{'type',592,'atom',[]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Msg'}|[{'type',593,'term',[]}]]]]}|[{'type',594,'constraint',[{'atom',594,'is_subtype'}|[[{'var',594,'Replies'}|[{'type',594,'list',[{'ann_type',594,[{'var',594,'Reply'}|[{'type',594,'term',[]}]]}]}]]]]}|[{'type',595,'constraint',[{'atom',595,'is_subtype'}|[[{'var',595,'BadNodes'}|[{'type',595,'list',[{'type',595,'node',[]}]}]]]]}]]]]]]}]}],
		%% Line 600
		'spec' =
		    %% Line 600
		    [{{'safe_multi_server_call',3},[{'type',600,'bounded_fun',[{'type',600,'fun',[{'type',600,'product',[{'var',600,'Nodes'}|[{'var',600,'Name'}|[{'var',600,'Msg'}]]]}|[{'type',600,'tuple',[{'var',600,'Replies'}|[{'var',600,'BadNodes'}]]}]]}|[[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'Nodes'}|[{'type',601,'list',[{'type',601,'node',[]}]}]]]]}|[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'Name'}|[{'type',602,'atom',[]}]]]]}|[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'Msg'}|[{'type',603,'term',[]}]]]]}|[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Replies'}|[{'type',604,'list',[{'ann_type',604,[{'var',604,'Reply'}|[{'type',604,'term',[]}]]}]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'BadNodes'}|[{'type',605,'list',[{'type',605,'node',[]}]}]]]]}]]]]]]]}]}],
		%% Line 634
		'opaque' =
		    %% Line 634
		    [{'key',{'type',634,'pid',[]},[]}],
		%% Line 636
		'spec' =
		    %% Line 636
		    [{{'async_call',4},[{'type',636,'bounded_fun',[{'type',636,'fun',[{'type',636,'product',[{'var',636,'Node'}|[{'var',636,'Module'}|[{'var',636,'Function'}|[{'var',636,'Args'}]]]]}|[{'var',636,'Key'}]]}|[[{'type',637,'constraint',[{'atom',637,'is_subtype'}|[[{'var',637,'Node'}|[{'type',637,'node',[]}]]]]}|[{'type',638,'constraint',[{'atom',638,'is_subtype'}|[[{'var',638,'Module'}|[{'type',638,'module',[]}]]]]}|[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'Function'}|[{'type',639,'atom',[]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Args'}|[{'type',640,'list',[{'type',640,'term',[]}]}]]]]}|[{'type',641,'constraint',[{'atom',641,'is_subtype'}|[[{'var',641,'Key'}|[{'type',641,'key',[]}]]]]}]]]]]]]}]}],
		%% Line 651
		'spec' =
		    %% Line 651
		    [{{'yield',1},[{'type',651,'bounded_fun',[{'type',651,'fun',[{'type',651,'product',[{'var',651,'Key'}]}|[{'type',651,'union',[{'var',651,'Res'}|[{'type',651,'tuple',[{'atom',651,'badrpc'}|[{'var',651,'Reason'}]]}]]}]]}|[[{'type',652,'constraint',[{'atom',652,'is_subtype'}|[[{'var',652,'Key'}|[{'type',652,'key',[]}]]]]}|[{'type',653,'constraint',[{'atom',653,'is_subtype'}|[[{'var',653,'Res'}|[{'type',653,'term',[]}]]]]}|[{'type',654,'constraint',[{'atom',654,'is_subtype'}|[[{'var',654,'Reason'}|[{'type',654,'term',[]}]]]]}]]]]]}]}],
		%% Line 660
		'spec' =
		    %% Line 660
		    [{{'nb_yield',2},[{'type',660,'bounded_fun',[{'type',660,'fun',[{'type',660,'product',[{'var',660,'Key'}|[{'var',660,'Timeout'}]]}|[{'type',660,'union',[{'type',660,'tuple',[{'atom',660,'value'}|[{'var',660,'Val'}]]}|[{'atom',660,'timeout'}]]}]]}|[[{'type',661,'constraint',[{'atom',661,'is_subtype'}|[[{'var',661,'Key'}|[{'type',661,'key',[]}]]]]}|[{'type',662,'constraint',[{'atom',662,'is_subtype'}|[[{'var',662,'Timeout'}|[{'type',662,'timeout',[]}]]]]}|[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'Val'}|[{'type',663,'union',[{'paren_type',663,[{'ann_type',663,[{'var',663,'Res'}|[{'type',663,'term',[]}]]}]}|[{'type',663,'tuple',[{'atom',663,'badrpc'}|[{'ann_type',663,[{'var',663,'Reason'}|[{'type',663,'term',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'nb_yield',1},[{'type',670,'bounded_fun',[{'type',670,'fun',[{'type',670,'product',[{'var',670,'Key'}]}|[{'type',670,'union',[{'type',670,'tuple',[{'atom',670,'value'}|[{'var',670,'Val'}]]}|[{'atom',670,'timeout'}]]}]]}|[[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'Key'}|[{'type',671,'key',[]}]]]]}|[{'type',672,'constraint',[{'atom',672,'is_subtype'}|[[{'var',672,'Val'}|[{'type',672,'union',[{'paren_type',672,[{'ann_type',672,[{'var',672,'Res'}|[{'type',672,'term',[]}]]}]}|[{'type',672,'tuple',[{'atom',672,'badrpc'}|[{'ann_type',672,[{'var',672,'Reason'}|[{'type',672,'term',[]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 677
		'spec' =
		    %% Line 677
		    [{{'do_yield',2},[{'type',677,'fun',[{'type',677,'product',[{'type',677,'pid',[]}|[{'type',677,'timeout',[]}]]}|[{'type',677,'union',[{'type',677,'tuple',[{'atom',677,'value'}|[{'var',677,'_'}]]}|[{'atom',677,'timeout'}]]}]]}]}],
		%% Line 692
		'spec' =
		    %% Line 692
		    [{{'parallel_eval',1},[{'type',692,'bounded_fun',[{'type',692,'fun',[{'type',692,'product',[{'var',692,'FuncCalls'}]}|[{'var',692,'ResL'}]]}|[[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'FuncCalls'}|[{'type',693,'list',[{'type',693,'tuple',[{'var',693,'Module'}|[{'var',693,'Function'}|[{'var',693,'Args'}]]]}]}]]]]}|[{'type',694,'constraint',[{'atom',694,'is_subtype'}|[[{'var',694,'Module'}|[{'type',694,'module',[]}]]]]}|[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'Function'}|[{'type',695,'atom',[]}]]]]}|[{'type',696,'constraint',[{'atom',696,'is_subtype'}|[[{'var',696,'Args'}|[{'type',696,'list',[{'type',696,'term',[]}]}]]]]}|[{'type',697,'constraint',[{'atom',697,'is_subtype'}|[[{'var',697,'ResL'}|[{'type',697,'list',[{'type',697,'term',[]}]}]]]]}]]]]]]]}]}],
		%% Line 714
		'spec' =
		    %% Line 714
		    [{{'pmap',3},[{'type',714,'bounded_fun',[{'type',714,'fun',[{'type',714,'product',[{'var',714,'FuncSpec'}|[{'var',714,'ExtraArgs'}|[{'var',714,'List1'}]]]}|[{'var',714,'List2'}]]}|[[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'FuncSpec'}|[{'type',715,'tuple',[{'var',715,'Module'}|[{'var',715,'Function'}]]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Module'}|[{'type',716,'module',[]}]]]]}|[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Function'}|[{'type',717,'atom',[]}]]]]}|[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'ExtraArgs'}|[{'type',718,'list',[{'type',718,'term',[]}]}]]]]}|[{'type',719,'constraint',[{'atom',719,'is_subtype'}|[[{'var',719,'List1'}|[{'type',719,'list',[{'ann_type',719,[{'var',719,'Elem'}|[{'type',719,'term',[]}]]}]}]]]]}|[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'List2'}|[{'type',720,'list',[{'type',720,'term',[]}]}]]]]}]]]]]]]]}]}],
		%% Line 737
		'spec' =
		    %% Line 737
		    [{{'pinfo',1},[{'type',737,'bounded_fun',[{'type',737,'fun',[{'type',737,'product',[{'var',737,'Pid'}]}|[{'type',737,'union',[{'type',737,'list',[{'type',737,'tuple',[{'var',737,'Item'}|[{'var',737,'Info'}]]}]}|[{'atom',737,'undefined'}]]}]]}|[[{'type',738,'constraint',[{'atom',738,'is_subtype'}|[[{'var',738,'Pid'}|[{'type',738,'pid',[]}]]]]}|[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Item'}|[{'type',739,'atom',[]}]]]]}|[{'type',740,'constraint',[{'atom',740,'is_subtype'}|[[{'var',740,'Info'}|[{'type',740,'term',[]}]]]]}]]]]]}]}],
		%% Line 747
		'spec' =
		    %% Line 747
		    [{{'pinfo',2},[{'type',747,'bounded_fun',[{'type',747,'fun',[{'type',747,'product',[{'var',747,'Pid'}|[{'var',747,'Item'}]]}|[{'type',747,'union',[{'type',747,'tuple',[{'var',747,'Item'}|[{'var',747,'Info'}]]}|[{'atom',747,'undefined'}|[{'type',747,'nil',[]}]]]}]]}|[[{'type',748,'constraint',[{'atom',748,'is_subtype'}|[[{'var',748,'Pid'}|[{'type',748,'pid',[]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'Item'}|[{'type',749,'atom',[]}]]]]}|[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Info'}|[{'type',750,'term',[]}]]]]}]]]]]}]}]]
'start'/0 =
    %% Line 77
    fun () ->
	%% Line 78
	call 'gen_server':'start'
	    ({'local','rex'}, 'rpc', [], [])
'start_link'/0 =
    %% Line 82
    fun () ->
	%% Line 83
	call 'gen_server':'start_link'
	    ({'local','rex'}, 'rpc', [], [])
'stop'/0 =
    %% Line 87
    fun () ->
	%% Line 88
	apply 'stop'/1
	    ('rex')
'stop'/1 =
    %% Line 90
    fun (_cor0) ->
	%% Line 91
	call 'gen_server':'call'
	    (_cor0, 'stop', 'infinity')
'init'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 96
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <_cor1> =
		      %% Line 97
		      call 'gb_trees':'empty'
			  ()
		  in  %% Line 97
		      {'ok',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'call',Mod,Fun,Args,Gleader},To,S> when 'true' ->
	      %% Line 105
	      apply 'handle_call_call'/6
		  (Mod, Fun, Args, Gleader, To, S)
	  %% Line 106
	  <{'block_call',Mod,Fun,Args,Gleader},_X_To,S> when 'true' ->
	      let <MyGL> =
		  %% Line 107
		  call 'erlang':'group_leader'
		      ()
	      in  do  %% Line 108
		      apply 'set_group_leader'/1
			  (Gleader)
		      let <_cor4> =
			  catch
			      %% Line 110
			      call 'erlang':'apply'
				  (Mod, Fun, Args)
		      in  let <_cor6> =
			      %% Line 110
			      case _cor4 of
				%% Line 111
				<Exit = {'EXIT',_cor12}> when 'true' ->
				    %% Line 112
				    {'badrpc',Exit}
				%% Line 113
				<Other> when 'true' ->
				    %% Line 114
				    Other
			      end
			  in  let <_cor8> =
				  %% Line 116
				  call 'erlang':'self'
				      ()
			      in  do  %% Line 116
				      call 'erlang':'group_leader'
					  (MyGL, _cor8)
				      %% Line 117
				      {'reply',_cor6,S}
	  %% Line 118
	  <'stop',_X_To,S> when 'true' ->
	      %% Line 119
	      {'stop','normal','stopped',S}
	  %% Line 120
	  <_cor13,_X_To,S> when 'true' ->
	      %% Line 121
	      {'noreply',S}
	end
'handle_cast'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cast',Mod,Fun,Args,Gleader},S> when 'true' ->
	      let <_cor2> =
		  %% Line 126
		  ( fun () ->
			do  %% Line 127
			    apply 'set_group_leader'/1
				(Gleader)
			    %% Line 128
			    call 'erlang':'apply'
				(Mod, Fun, Args)
		    -| [{'id',{0,0,'-handle_cast/2-fun-0-'}}] )
	      in  do  %% Line 126
		      call 'erlang':'spawn'
			  (_cor2)
		      %% Line 130
		      {'noreply',S}
	  %% Line 131
	  <_cor5,S> when 'true' ->
	      %% Line 132
	      {'noreply',S}
	end
'handle_info'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'DOWN',_cor20,'process',Caller,Reason},S> when 'true' ->
	      %% Line 137
	      case call 'gb_trees':'lookup'
		       (Caller, S) of
		%% Line 138
		<{'value',To}> when 'true' ->
		    do  %% Line 139
			receive
			  %% Line 140
			  <{_cor21,{'reply',Reply}}>
			      when call 'erlang':'=:='
				    (_cor21,
				     Caller) ->
			      %% Line 141
			      call 'gen_server':'reply'
				  (To, Reply)
			after %% Line 142
			      0 ->
			  %% Line 143
			  call 'gen_server':'reply'
			      (To, {'badrpc',{'EXIT',Reason}})
			let <_cor2> =
			    %% Line 145
			    call 'gb_trees':'delete'
				(Caller, S)
			in  %% Line 145
			    {'noreply',_cor2}
		%% Line 146
		<'none'> when 'true' ->
		    %% Line 147
		    {'noreply',S}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 149
	  <{Caller,{'reply',Reply}},S> when 'true' ->
	      %% Line 150
	      case call 'gb_trees':'lookup'
		       (Caller, S) of
		%% Line 151
		<{'value',To}> when 'true' ->
		    %% Line 152
		    receive
		      %% Line 153
		      <{'DOWN',_cor22,'process',_cor23,_cor24}>
			  when call 'erlang':'=:='
				(_cor23,
				 Caller) ->
			  do  %% Line 154
			      call 'gen_server':'reply'
				  (To, Reply)
			      let <_cor4> =
				  %% Line 155
				  call 'gb_trees':'delete'
				      (Caller, S)
			      in  %% Line 155
				  {'noreply',_cor4}
		    after 'infinity' ->
		      'true'
		%% Line 157
		<'none'> when 'true' ->
		    %% Line 158
		    {'noreply',S}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 160
	  <{From,{'sbcast',Name,Msg}},S> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 161
		      call 'erlang':'!'
			  (Name, Msg)
	      in  let <_cor11> =
		      %% Line 161
		      case _cor6 of
			%% Line 162
			<{'EXIT',_cor25}> when 'true' ->
			    let <_cor7> =
				%% Line 163
				( call 'erlang':'node'
				      ()
				  -| ['result_not_wanted'] )
			    in  %% Line 163
				call 'erlang':'!'
				    (From, {'rex',_cor7,{'nonexisting_name',Name}})
			%% Line 164
			<_cor26> when 'true' ->
			    let <_cor9> =
				%% Line 165
				( call 'erlang':'node'
				      ()
				  -| ['result_not_wanted'] )
			    in  let <_cor8> =
				    %% Line 165
				    ( call 'erlang':'node'
					  ()
				      -| ['result_not_wanted'] )
				in  %% Line 165
				    call 'erlang':'!'
					(From, {'rex',_cor9,_cor8})
		      end
		  in  %% Line 167
		      {'noreply',S}
	  %% Line 168
	  <{From,{'send',Name,Msg}},S> when 'true' ->
	      let <_cor13> =
		  catch
		      %% Line 169
		      call 'erlang':'!'
			  (Name, {From,Msg})
	      in  let <_cor16> =
		      %% Line 169
		      case _cor13 of
			%% Line 170
			<{'EXIT',_cor27}> when 'true' ->
			    let <_cor14> =
				%% Line 171
				( call 'erlang':'node'
				      ()
				  -| ['result_not_wanted'] )
			    in  %% Line 171
				call 'erlang':'!'
				    (From, {'rex',_cor14,{'nonexisting_name',Name}})
			%% Line 172
			<_cor28> when 'true' ->
			    %% Line 173
			    'ok'
		      end
		  in  %% Line 175
		      {'noreply',S}
	  %% Line 176
	  <{From,{'call',Mod,Fun,Args,Gleader}},S> when 'true' ->
	      %% Line 178
	      apply 'handle_call_call'/6
		  (Mod, Fun, Args, Gleader, {From,'rex'}, S)
	  %% Line 179
	  <_cor29,S> when 'true' ->
	      %% Line 180
	      {'noreply',S}
	end
'terminate'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	%% Line 185
	'ok'
'code_change'/3 =
    %% Line 189
    fun (_cor2,_cor1,_cor0) ->
	%% Line 190
	{'ok',_cor1}
'handle_call_call'/6 =
    %% Line 195
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <RpcServer> =
	    %% Line 196
	    call 'erlang':'self'
		()
	in  let <_cor12> =
		%% Line 200
		( fun () ->
		      do  %% Line 201
			  apply 'set_group_leader'/1
			      (_cor2)
			  let <_cor7> =
			      catch
				  %% Line 205
				  call 'erlang':'apply'
				      (_cor5, _cor4, _cor3)
			  in  let <_cor9> =
				  %% Line 205
				  case _cor7 of
				    %% Line 206
				    <Exit = {'EXIT',_cor21}> when 'true' ->
					%% Line 207
					{'badrpc',Exit}
				    %% Line 208
				    <Result> when 'true' ->
					%% Line 209
					Result
				  end
			      in  let <_cor11> =
				      %% Line 211
				      call 'erlang':'self'
					  ()
				  in  %% Line 211
				      call 'erlang':'!'
					  (RpcServer, {_cor11,{'reply',_cor9}})
		  -| [{'id',{0,0,'-handle_call_call/6-fun-0-'}}] )
	    in  %% Line 198
		case %% Line 199
		     call 'erlang':'spawn_monitor'
			 (_cor12) of
		  <{Caller,_cor22}> when 'true' ->
		      let <_cor14> =
			  %% Line 213
			  call 'gb_trees':'insert'
			      (Caller, _cor1, _cor0)
		      in  %% Line 213
			  {'noreply',_cor14}
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor13})
		    -| ['compiler_generated'] )
		end
'set_group_leader'/1 =
    %% Line 218
    fun (_cor0) ->
	case _cor0 of
	  <Gleader>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 219
		  call 'erlang':'self'
		      ()
	      in  %% Line 219
		  call 'erlang':'group_leader'
		      (Gleader, _cor1)
	  %% Line 220
	  <'user'> when 'true' ->
	      let <_cor3> =
		  %% Line 222
		  case call 'erlang':'whereis'
			   ('user') of
		    %% Line 223
		    <Pid>
			when call 'erlang':'is_pid'
			      (Pid) ->
			Pid
		    %% Line 224
		    <'undefined'> when 'true' ->
			apply 'proxy_user'/0
			    ()
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 226
		      call 'erlang':'self'
			  ()
		  in  %% Line 226
		      call 'erlang':'group_leader'
			  (_cor3, _cor5)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'set_group_leader',1}}] )
	    -| ['compiler_generated'] )
	end
'proxy_user'/0 =
    %% Line 231
    fun () ->
	%% Line 232
	case call 'erlang':'whereis'
		 ('rex_proxy_user') of
	  %% Line 233
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      Pid
	  %% Line 234
	  <'undefined'> when 'true' ->
	      let <_cor0> =
		  %% Line 235
		  ( fun () ->
			apply 'proxy_user_loop'/0
			    ()
		    -| [{'id',{0,0,'-proxy_user/0-fun-0-'}}] )
	      in  let <Pid> =
		      %% Line 235
		      call 'erlang':'spawn'
			  (_cor0)
		  in  %% Line 236
		      try
			  call 'erlang':'register'
			      ('rex_proxy_user', Pid)
		      of <_cor2> ->
			  case _cor2 of
			    %% Line 237
			    <'true'> when 'true' ->
				Pid
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'try_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
		      catch <_cor6,_cor5,_cor4> ->
			  case <_cor6,_cor5,_cor4> of
			    %% Line 238
			    <'error',_cor8,_cor9> when 'true' ->
				do  %% Line 239
				    call 'erlang':'exit'
					(Pid, 'kill')
				    %% Line 240
				    apply 'proxy_user'/0
					()
			    ( <_cor6,_cor5,_cor4> when 'true' ->
				  primop 'raise'
				      (_cor4, _cor5)
			      -| ['compiler_generated'] )
			  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'proxy_user_loop'/0 =
    %% Line 244
    fun () ->
	do  %% Line 246
	    call 'timer':'sleep'
		(200)
	    %% Line 247
	    case call 'erlang':'whereis'
		     ('user') of
	      %% Line 248
	      <Pid>
		  when call 'erlang':'is_pid'
			(Pid) ->
		  apply 'proxy_user_flush'/0
		      ()
	      %% Line 249
	      <'undefined'> when 'true' ->
		  apply 'proxy_user_loop'/0
		      ()
	      ( <_cor0> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor0})
		-| ['compiler_generated'] )
	    end
'proxy_user_flush'/0 =
    %% Line 254
    fun () ->
	do  %% Line 256
	    receive
	      <Msg> when 'true' ->
		  %% Line 257
		  call 'erlang':'!'
		      ('user', Msg)
	    after 10000 ->
	      %% Line 261
	      call 'erlang':'hibernate'
		  ('rpc', 'proxy_user_flush', [])
	    %% Line 263
	    apply 'proxy_user_flush'/0
		()
'call'/4 =
    %% Line 276
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (_cor4, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 277
	      apply 'local_call'/3
		  (M, F, A)
	  %% Line 278
	  <N,M,F,A> when 'true' ->
	      let <_cor5> =
		  %% Line 279
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 279
		  apply 'do_call'/3
		      (N, {'call',M,F,A,_cor5}, 'infinity')
	end
'call'/5 =
    %% Line 291
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A,'infinity'>
	      when try
		    let <_cor5> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (_cor5, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 292
	      apply 'local_call'/3
		  (M, F, A)
	  %% Line 293
	  <N,M,F,A,'infinity'> when 'true' ->
	      let <_cor6> =
		  %% Line 294
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 294
		  apply 'do_call'/3
		      (N, {'call',M,F,A,_cor6}, 'infinity')
	  %% Line 295
	  <N,M,F,A,Timeout>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor8> =
			call 'erlang':'>='
			    (Timeout, 0)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor9> =
		  %% Line 296
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 296
		  apply 'do_call'/3
		      (N, {'call',M,F,A,_cor9}, Timeout)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'call',5}}] )
	    -| ['compiler_generated'] )
	end
'block_call'/4 =
    %% Line 306
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (_cor4, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 307
	      apply 'local_call'/3
		  (M, F, A)
	  %% Line 308
	  <N,M,F,A> when 'true' ->
	      let <_cor5> =
		  %% Line 309
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 309
		  apply 'do_call'/3
		      (N, {'block_call',M,F,A,_cor5}, 'infinity')
	end
'block_call'/5 =
    %% Line 321
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A,_X_Timeout>
	      when try
		    let <_cor5> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (_cor5, N)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 322
	      apply 'local_call'/3
		  (M, F, A)
	  %% Line 323
	  <N,M,F,A,'infinity'> when 'true' ->
	      let <_cor6> =
		  %% Line 324
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 324
		  apply 'do_call'/3
		      (N, {'block_call',M,F,A,_cor6}, 'infinity')
	  %% Line 325
	  <N,M,F,A,Timeout>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor8> =
			call 'erlang':'>='
			    (Timeout, 0)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor9> =
		  %% Line 326
		  call 'erlang':'group_leader'
		      ()
	      in  %% Line 326
		  apply 'do_call'/3
		      (N, {'block_call',M,F,A,_cor9}, Timeout)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'block_call',5}}] )
	    -| ['compiler_generated'] )
	end
'local_call'/3 =
    %% Line 328
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  catch
		      %% Line 329
		      call 'erlang':'apply'
			  (M, F, A)
	      in  %% Line 329
		  case _cor7 of
		    %% Line 330
		    <V = {'EXIT',_cor12}> when 'true' ->
			{'badrpc',V}
		    %% Line 331
		    <Other> when 'true' ->
			Other
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'local_call',3}}] )
	    -| ['compiler_generated'] )
	end
'do_call'/3 =
    %% Line 334
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,Request,'infinity'> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 335
		      call 'gen_server':'call'
			  ({'rex',Node}, Request, 'infinity')
	      in  %% Line 335
		  apply 'rpc_check'/1
		      (_cor3)
	  %% Line 336
	  <Node,Request,Timeout> when 'true' ->
	      let <Tag> =
		  %% Line 337
		  call 'erlang':'make_ref'
		      ()
	      in  let <_cor7> =
		      %% Line 340
		      ( fun () ->
			    do  %% Line 343
				call 'erlang':'process_flag'
				    ('trap_exit', 'true')
				let <Result> =
				    %% Line 344
				    call 'gen_server':'call'
					({'rex',Node}, Request, Timeout)
				in  let <_cor6> =
					%% Line 345
					call 'erlang':'self'
					    ()
				    in  %% Line 345
					call 'erlang':'exit'
					    ({_cor6,Tag,Result})
			-| [{'id',{0,0,'-do_call/3-fun-0-'}}] )
		  in  %% Line 338
		      case %% Line 339
			   call 'erlang':'spawn_monitor'
			       (_cor7) of
			<{Receiver,Mref}> when 'true' ->
			    %% Line 347
			    receive
			      %% Line 348
			      <{'DOWN',_cor12,_cor13,_cor14,{_cor15,_cor16,Result}}>
				  when let <_cor19> =
					call 'erlang':'=:='
					    (_cor12, Mref)
				    in  let <_cor17> =
					    call 'erlang':'=:='
						(_cor15, Receiver)
					in  let <_cor18> =
						call 'erlang':'=:='
						    (_cor16, Tag)
					    in  let <_cor20> =
						    call 'erlang':'and'
							(_cor17, _cor18)
						in  call 'erlang':'and'
							(_cor19, _cor20) ->
				  %% Line 349
				  apply 'rpc_check'/1
				      (Result)
			      %% Line 350
			      <{'DOWN',_cor21,_cor22,_cor23,Reason}>
				  when call 'erlang':'=:='
					(_cor21,
					 Mref) ->
				  %% Line 353
				  apply 'rpc_check_t'/1
				      ({'EXIT',Reason})
			    after 'infinity' ->
			      'true'
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	end
'rpc_check_t'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <{'EXIT',{'timeout',_cor2}}> when 'true' ->
	      {'badrpc','timeout'}
	  %% Line 357
	  <X> when 'true' ->
	      apply 'rpc_check'/1
		  (X)
	end
'rpc_check'/1 =
    %% Line 359
    fun (_cor0) ->
	case _cor0 of
	  <{'EXIT',{{'nodedown',_cor2},_cor3}}> when 'true' ->
	      {'badrpc','nodedown'}
	  %% Line 360
	  <{'EXIT',X}> when 'true' ->
	      call 'erlang':'exit'
		  (X)
	  %% Line 361
	  <X> when 'true' ->
	      X
	end
'server_call'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,Name,ReplyWrapper,Msg>
	      when let <_cor4> =
		    %% Line 381
		    call 'erlang':'is_atom'
			(Node)
		in  let <_cor5> =
			%% Line 381
			call 'erlang':'is_atom'
			    (Name)
		    in  %% Line 381
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 382
	      case <> of
		<>
		    when try
			  let <_cor6> =
			      call 'erlang':'node'
				  ()
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (_cor6, 'nonode@nohost')
			      in  let <_cor8> =
				      call 'erlang':'=/='
					  (Node, 'nonode@nohost')
				  in  call 'erlang':'and'
					  (_cor7, _cor8)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 383
		    {'error','nodedown'}
		%% Line 384
		<> when 'true' ->
		    let <Ref> =
			%% Line 385
			call 'erlang':'monitor'
			    ('process', {Name,Node})
		    in  let <_cor10> =
			    %% Line 386
			    call 'erlang':'self'
				()
			in  do  %% Line 386
				call 'erlang':'!'
				    ({Name,Node}, {_cor10,Msg})
				%% Line 387
				receive
				  %% Line 388
				  <{'DOWN',_cor15,_cor16,_cor17,_cor18}>
				      when call 'erlang':'=:='
					    (_cor15,
					     Ref) ->
				      %% Line 389
				      {'error','nodedown'}
				  %% Line 390
				  <{_cor19,_cor20,Reply}>
				      when let <_cor21> =
					    call 'erlang':'=:='
						(_cor19, ReplyWrapper)
					in  let <_cor22> =
						call 'erlang':'=:='
						    (_cor20, Node)
					    in  call 'erlang':'and'
						    (_cor21, _cor22) ->
				      do  %% Line 391
					  call 'erlang':'demonitor'
					      (Ref, ['flush'])
					  %% Line 392
					  Reply
				after 'infinity' ->
				  'true'
	      end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'server_call',4}}] )
	    -| ['compiler_generated'] )
	end
'cast'/4 =
    %% Line 402
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,Mod,Fun,Args>
	      when try
		    let <_cor4> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (Node, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  catch
		      %% Line 403
		      call 'erlang':'spawn'
			  (Mod, Fun, Args)
		  %% Line 404
		  'true'
	  %% Line 405
	  <Node,Mod,Fun,Args> when 'true' ->
	      let <_cor5> =
		  %% Line 406
		  call 'erlang':'group_leader'
		      ()
	      in  do  %% Line 406
		      call 'gen_server':'cast'
			  ({'rex',Node}, {'cast',Mod,Fun,Args,_cor5})
		      %% Line 407
		      'true'
	end
'abcast'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 416
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		%% Line 416
		call 'erlang':'nodes'
		    ()
	    in  %% Line 416
		apply 'abcast'/3
		    ([_cor2|_cor3], _cor1, _cor0)
'abcast'/3 =
    %% Line 423
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Node|Tail],Name,Mess> when 'true' ->
	      let <Dest> = {%% Line 424
		   Name,%% Line 424
			Node}
	      in  let <_cor4> =
		      catch
			  %% Line 425
			  call 'erlang':'send'
			      (Dest, Mess, ['noconnect'])
		  in  do  %% Line 425
			  case _cor4 of
			    %% Line 426
			    <'noconnect'> when 'true' ->
				do  call 'erlang':'spawn'
					('erlang', 'send', [Dest|[Mess|[]]])
				    'ok'
			    %% Line 427
			    <_cor9> when 'true' ->
				'ok'
			  end
			  %% Line 429
			  apply 'abcast'/3
			      (Tail, Name, Mess)
	  %% Line 430
	  <[],_cor10,_cor11> when 'true' ->
	      'abcast'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'abcast',3}}] )
	    -| ['compiler_generated'] )
	end
'sbcast'/2 =
    %% Line 445
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 446
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		%% Line 446
		call 'erlang':'nodes'
		    ()
	    in  %% Line 446
		apply 'sbcast'/3
		    ([_cor2|_cor3], _cor1, _cor0)
'sbcast'/3 =
    %% Line 455
    fun (_cor2,_cor1,_cor0) ->
	let <Monitors> =
	    %% Line 456
	    apply 'send_nodes'/4
		(_cor2, 'rex', {'sbcast',_cor1,_cor0}, [])
	in  %% Line 457
	    apply 'rec_nodes'/2
		('rex', Monitors)
'eval_everywhere'/3 =
    %% Line 464
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 465
	    call 'erlang':'node'
		()
	in  let <_cor4> =
		%% Line 465
		call 'erlang':'nodes'
		    ()
	    in  %% Line 465
		apply 'eval_everywhere'/4
		    ([_cor3|_cor4], _cor2, _cor1, _cor0)
'eval_everywhere'/4 =
    %% Line 473
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 474
	    call 'erlang':'group_leader'
		()
	in  %% Line 474
	    call 'gen_server':'abcast'
		(_cor3, 'rex', {'cast',_cor2,_cor1,_cor0,_cor4})
'send_nodes'/4 =
    %% Line 477
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Node|Tail],Name,Msg,Monitors>
	      when call 'erlang':'is_atom'
		    (Node) ->
	      let <Monitor> =
		  %% Line 478
		  apply 'start_monitor'/2
		      (Node, Name)
	      in  do  catch
			  let <_cor5> =
			      %% Line 480
			      call 'erlang':'self'
				  ()
			  in  %% Line 480
			      call 'erlang':'!'
				  ({Name,Node}, {_cor5,Msg})
		      %% Line 481
		      apply 'send_nodes'/4
			  (Tail, Name, Msg, [Monitor|Monitors])
	  %% Line 482
	  <[_X_Node|Tail],Name,Msg,Monitors> when 'true' ->
	      %% Line 484
	      apply 'send_nodes'/4
		  (Tail, Name, Msg, Monitors)
	  %% Line 485
	  <[],_X_Name,_X_Req,Monitors> when 'true' ->
	      %% Line 486
	      Monitors
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'send_nodes',4}}] )
	    -| ['compiler_generated'] )
	end
'start_monitor'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	%% Line 491
	case <> of
	  <>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(_cor2, 'nonode@nohost')
			in  let <_cor4> =
				call 'erlang':'=/='
				    (_cor1, 'nonode@nohost')
			    in  call 'erlang':'and'
				    (_cor3, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Ref> =
		  %% Line 492
		  call 'erlang':'make_ref'
		      ()
	      in  let <_cor6> =
		      %% Line 493
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 493
			  call 'erlang':'!'
			      (_cor6, {'DOWN',Ref,'process',{_cor0,_cor1},'noconnection'})
			  %% Line 494
			  {_cor1,Ref}
	  %% Line 495
	  <> when 'true' ->
	      let <_cor7> =
		  %% Line 496
		  call 'erlang':'monitor'
		      ('process', {_cor0,_cor1})
	      in  %% Line 496
		  {_cor1,_cor7}
	end
'multicall'/3 =
    %% Line 508
    fun (_cor2,_cor1,_cor0) ->
	%% Line 509
	apply 'multicall'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'multicall'/4 =
    %% Line 526
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Nodes,M,F,A>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 527
	      apply 'multicall'/5
		  (Nodes, M, F, A, 'infinity')
	  %% Line 528
	  <M,F,A,Timeout> when 'true' ->
	      let <_cor4> =
		  %% Line 529
		  call 'erlang':'node'
		      ()
	      in  let <_cor5> =
		      %% Line 529
		      call 'erlang':'nodes'
			  ()
		  in  %% Line 529
		      apply 'multicall'/5
			  ([_cor4|_cor5], M, F, A, Timeout)
	end
'multicall'/5 =
    %% Line 541
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Nodes,M,F,A,'infinity'>
	      when %% Line 542
		try
		    let <_cor5> =
			call 'erlang':'is_list'
			    (Nodes)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor7> =
				call 'erlang':'is_atom'
				    (F)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(A)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 543
	      apply 'do_multicall'/5
		  (Nodes, M, F, A, 'infinity')
	  %% Line 544
	  <Nodes,M,F,A,Timeout>
	      when %% Line 545
		try
		    let <_cor11> =
			call 'erlang':'is_list'
			    (Nodes)
		    in  let <_cor12> =
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor13> =
				call 'erlang':'is_atom'
				    (F)
			    in  let <_cor14> =
				    call 'erlang':'is_list'
					(A)
				in  let <_cor15> =
					call 'erlang':'is_integer'
					    (Timeout)
				    in  let <_cor16> =
					    %% Line 546
					    call 'erlang':'>='
						(Timeout, 0)
					in  let <_cor17> =
						call 'erlang':'and'
						    (_cor15, _cor16)
					    in  let <_cor18> =
						    call 'erlang':'and'
							(_cor14, _cor17)
						in  let <_cor19> =
							call 'erlang':'and'
							    (_cor13, _cor18)
						    in  let <_cor20> =
							    call 'erlang':'and'
								(_cor12, _cor19)
							in  call 'erlang':'and'
								(_cor11, _cor20)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 547
	      apply 'do_multicall'/5
		  (Nodes, M, F, A, Timeout)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'multicall',5}}] )
	    -| ['compiler_generated'] )
	end
'do_multicall'/5 =
    %% Line 549
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 551
	    call 'erlang':'group_leader'
		()
	in  %% Line 550
	    case call 'gen_server':'multi_call'
		     (_cor4, 'rex', %% Line 551
				    {'call',_cor3,_cor2,_cor1,_cor5}, _cor0) of
	      <{Rep,Bad}> when 'true' ->
		  let <_cor9> =
		      %% Line 553
		      ( fun (_cor7) ->
			    case _cor7 of
			      <{_cor16,R}> when 'true' ->
				  R
			      ( <_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'-do_multicall/5-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-do_multicall/5-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 553
			  call 'lists':'map'
			      (_cor9, Rep)
		      in  %% Line 553
			  {_cor10,Bad}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'multi_server_call'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 575
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		%% Line 575
		call 'erlang':'nodes'
		    ()
	    in  %% Line 575
		apply 'multi_server_call'/3
		    ([_cor2|_cor3], _cor1, _cor0)
'multi_server_call'/3 =
    %% Line 584
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Nodes,Name,Msg>
	      when let <_cor3> =
		    %% Line 585
		    call 'erlang':'is_list'
			(Nodes)
		in  let <_cor4> =
			%% Line 585
			call 'erlang':'is_atom'
			    (Name)
		    in  %% Line 585
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <Monitors> =
		  %% Line 586
		  apply 'send_nodes'/4
		      (Nodes, Name, Msg, [])
	      in  %% Line 587
		  apply 'rec_nodes'/2
		      (Name, Monitors)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'multi_server_call',3}}] )
	    -| ['compiler_generated'] )
	end
'safe_multi_server_call'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	%% Line 598
	apply 'multi_server_call'/2
	    (_cor1, _cor0)
'safe_multi_server_call'/3 =
    %% Line 607
    fun (_cor2,_cor1,_cor0) ->
	%% Line 608
	apply 'multi_server_call'/3
	    (_cor2, _cor1, _cor0)
'rec_nodes'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	%% Line 612
	apply 'rec_nodes'/4
	    (_cor1, _cor0, [], [])
'rec_nodes'/4 =
    %% Line 614
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Name,[],Badnodes,Replies> when 'true' ->
	      %% Line 615
	      {Replies,Badnodes}
	  %% Line 616
	  <Name,[{N,R}|Tail],Badnodes,Replies> when 'true' ->
	      %% Line 617
	      receive
		%% Line 618
		<{'DOWN',_cor8,_cor9,_cor10,_cor11}>
		    when call 'erlang':'=:='
			  (_cor8,
			   R) ->
		    %% Line 619
		    apply 'rec_nodes'/4
			(Name, Tail, [N|Badnodes], Replies)
		%% Line 620
		<{'rex',_cor12,{'nonexisting_name',_cor13}}>
		    when call 'erlang':'=:='
			  (_cor12,
			   N) ->
		    do  %% Line 622
			call 'erlang':'demonitor'
			    (R, ['flush'])
			%% Line 623
			apply 'rec_nodes'/4
			    (Name, Tail, [N|Badnodes], Replies)
		%% Line 624
		<{_cor14,_cor15,Reply}>
		    when let <_cor16> =
			  call 'erlang':'=:='
			      (_cor14, Name)
		      in  let <_cor17> =
			      call 'erlang':'=:='
				  (_cor15, N)
			  in  call 'erlang':'and'
				  (_cor16, _cor17) ->
		    do  %% Line 625
			call 'erlang':'demonitor'
			    (R, ['flush'])
			%% Line 626
			apply 'rec_nodes'/4
			    (Name, Tail, Badnodes, [Reply|Replies])
	      after 'infinity' ->
		'true'
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rec_nodes',4}}] )
	    -| ['compiler_generated'] )
	end
'async_call'/4 =
    %% Line 643
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ReplyTo> =
	    %% Line 644
	    call 'erlang':'self'
		()
	in  let <_cor7> =
		%% Line 646
		( fun () ->
		      let <R> =
			  %% Line 647
			  apply 'call'/4
			      (_cor3, _cor2, _cor1, _cor0)
		      in  let <_cor6> =
			      %% Line 648
			      call 'erlang':'self'
				  ()
			  in  %% Line 648
			      call 'erlang':'!'
				  (ReplyTo, {_cor6,{'promise_reply',R}})
		  -| [{'id',{0,0,'-async_call/4-fun-0-'}}] )
	    in  %% Line 645
		call 'erlang':'spawn'
		    (_cor7)
'yield'/1 =
    %% Line 656
    fun (_cor0) ->
	case _cor0 of
	  <Key>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 657
	      case apply 'do_yield'/2
		       (Key, 'infinity') of
		<{'value',R}> when 'true' ->
		    %% Line 658
		    R
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'yield',1}}] )
	    -| ['compiler_generated'] )
	end
'nb_yield'/2 =
    %% Line 665
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,Inf = 'infinity'>
	      when call 'erlang':'is_pid'
		    (Key) ->
	      %% Line 666
	      apply 'do_yield'/2
		  (Key, Inf)
	  %% Line 667
	  <Key,Timeout>
	      when try
		    let <_cor2> =
			call 'erlang':'is_pid'
			    (Key)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Timeout)
			in  let <_cor4> =
				call 'erlang':'>='
				    (Timeout, 0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 668
	      apply 'do_yield'/2
		  (Key, Timeout)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'nb_yield',2}}] )
	    -| ['compiler_generated'] )
	end
'nb_yield'/1 =
    %% Line 674
    fun (_cor0) ->
	case _cor0 of
	  <Key>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 675
	      apply 'do_yield'/2
		  (Key, 0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'nb_yield',1}}] )
	    -| ['compiler_generated'] )
	end
'do_yield'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	%% Line 680
	receive
	  %% Line 681
	  <{_cor4,{'promise_reply',R}}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      %% Line 682
	      {'value',R}
	after _cor0 ->
	  %% Line 684
	  'timeout'
'parallel_eval'/1 =
    %% Line 699
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 700
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 700
		call 'erlang':'nodes'
		    ()
	    in  let <Nodes> =
		    %% Line 700
		    [_cor1|_cor2]
		in  let <Keys> =
			%% Line 701
			apply 'map_nodes'/3
			    (_cor0, Nodes, Nodes)
		    in  %% Line 702
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[K|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'yield'/1
						    (K)
					    in  let <_cor9> =
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [_cor8|_cor9]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Keys)
			  -| ['list_comprehension'] )
'map_nodes'/3 =
    %% Line 704
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor8,_cor9> when 'true' ->
	      []
	  %% Line 705
	  <ArgL,[],Original> when 'true' ->
	      %% Line 706
	      apply 'map_nodes'/3
		  (ArgL, Original, Original)
	  %% Line 707
	  <[{M,F,A}|Tail],[Node|MoreNodes],Original> when 'true' ->
	      let <_cor3> =
		  %% Line 708
		  call 'rpc':'async_call'
		      (Node, M, F, A)
	      in  let <_cor4> =
		      %% Line 709
		      apply 'map_nodes'/3
			  (Tail, MoreNodes, Original)
		  in  %% Line 708
		      [_cor3|_cor4]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'map_nodes',3}}] )
	    -| ['compiler_generated'] )
	end
'pmap'/3 =
    %% Line 722
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{M,F},As,List> when 'true' ->
	      let <_cor3> =
		  %% Line 723
		  apply 'build_args'/5
		      (M, F, As, List, [])
	      in  let <_cor4> =
		      %% Line 723
		      apply 'parallel_eval'/1
			  (_cor3)
		  in  %% Line 723
		      apply 'check'/2
			  (_cor4, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pmap',3}}] )
	    -| ['compiler_generated'] )
	end
'build_args'/5 =
    %% Line 726
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <M,F,As,[Arg|Tail],Acc> when 'true' ->
	      %% Line 727
	      apply 'build_args'/5
		  (M, F, As, Tail, [{M,F,[Arg|As]}|Acc])
	  %% Line 728
	  <M,F,_cor12,[],Acc>
	      when let <_cor5> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor6> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      Acc
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'build_args',5}}] )
	    -| ['compiler_generated'] )
	end
'check'/2 =
    %% Line 731
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'badrpc',_cor4}|_cor5],_cor6> when 'true' ->
	      call 'erlang':'exit'
		  ('badrpc')
	  %% Line 732
	  <[X|T],Ack> when 'true' ->
	      apply 'check'/2
		  (T, [X|Ack])
	  %% Line 733
	  <[],Ack> when 'true' ->
	      Ack
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check',2}}] )
	    -| ['compiler_generated'] )
	end
'pinfo'/1 =
    %% Line 742
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    (_cor0)
		    in  let <_cor1> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=:='
				(_cor2, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 743
	      call 'erlang':'process_info'
		  (Pid)
	  %% Line 744
	  <Pid> when 'true' ->
	      let <_cor3> =
		  %% Line 745
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 745
		  apply 'call'/4
		      (_cor3, 'erlang', 'process_info', [Pid|[]])
	end
'pinfo'/2 =
    %% Line 752
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Item>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (Pid)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=:='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 753
	      call 'erlang':'process_info'
		  (Pid, Item)
	  %% Line 754
	  <Pid,Item> when 'true' ->
	      let <_cor4> =
		  %% Line 755
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 755
		  apply 'block_call'/4
		      (_cor4, 'erlang', 'process_info', [Pid|[Item|[]]])
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('rpc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('rpc', _cor0)
end