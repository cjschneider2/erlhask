module 'inet' ['close'/1,
	       'connect_options'/2,
	       'fdopen'/6,
	       'format_error'/1,
	       'get_rc'/0,
	       'getaddr'/2,
	       'getaddr'/3,
	       'getaddr_tm'/3,
	       'getaddrs'/2,
	       'getaddrs'/3,
	       'getaddrs_tm'/3,
	       'getfd'/1,
	       'gethostbyaddr'/1,
	       'gethostbyaddr'/2,
	       'gethostbyaddr_tm'/2,
	       'gethostbyname'/1,
	       'gethostbyname'/2,
	       'gethostbyname'/3,
	       'gethostbyname_self'/2,
	       'gethostbyname_string'/2,
	       'gethostbyname_tm'/3,
	       'gethostname'/0,
	       'gethostname'/1,
	       'getif'/0,
	       'getif'/1,
	       'getifaddrs'/0,
	       'getifaddrs'/1,
	       'getiflist'/0,
	       'getiflist'/1,
	       'getll'/1,
	       'getopts'/2,
	       'getservbyname'/2,
	       'getservbyport'/2,
	       'getstat'/1,
	       'getstat'/2,
	       'i'/0,
	       'i'/1,
	       'i'/2,
	       'ifget'/2,
	       'ifget'/3,
	       'ifset'/2,
	       'ifset'/3,
	       'ip'/1,
	       'listen_options'/2,
	       'lock_socket'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'ntoa'/1,
	       'open'/8,
	       'options'/0,
	       'parse_address'/1,
	       'parse_ipv4_address'/1,
	       'parse_ipv4strict_address'/1,
	       'parse_ipv6_address'/1,
	       'parse_ipv6strict_address'/1,
	       'parse_strict_address'/1,
	       'peername'/1,
	       'peernames'/1,
	       'peernames'/2,
	       'popf'/1,
	       'port'/1,
	       'pushf'/3,
	       'sctp_options'/2,
	       'send'/2,
	       'setopts'/2,
	       'setpeername'/2,
	       'setsockname'/2,
	       'sockname'/1,
	       'socknames'/1,
	       'socknames'/2,
	       'start_timer'/1,
	       'stats'/0,
	       'stop_timer'/1,
	       'tcp_close'/1,
	       'tcp_controlling_process'/2,
	       'timeout'/1,
	       'timeout'/2,
	       'translate_ip'/2,
	       'udp_close'/1,
	       'udp_controlling_process'/2,
	       'udp_options'/2]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','hostent'},[{'typed_record_field',{'record_field',24,{'atom',24,'h_name'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'remote_type',24,[{'atom',24,'inet'}|[{'atom',24,'hostname'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'h_aliases'},{'nil',25}},{'type',25,'list',[{'remote_type',25,[{'atom',25,'inet'}|[{'atom',25,'hostname'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'h_addrtype'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'inet'}|[{'atom',26,'inet6'}]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'h_length'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'h_addr_list'},{'nil',28}},{'type',28,'list',[{'remote_type',28,[{'atom',28,'inet'}|[{'atom',28,'ip_address'}|[[]]]]}]}}]]]]],[]}],
		%% Line 374
		'type' =
		    %% Line 374
		    [{{'record','connect_opts'},[{'record_field',376,{'atom',376,'ifaddr'},{'atom',376,'any'}}|[{'record_field',377,{'atom',377,'port'},{'integer',377,0}}|[{'record_field',378,{'atom',378,'fd'},{'op',378,'-',{'integer',378,1}}}|[{'record_field',379,{'atom',379,'opts'},{'nil',379}}]]]],[]}],
		%% Line 382
		'type' =
		    %% Line 382
		    [{{'record','listen_opts'},[{'record_field',384,{'atom',384,'ifaddr'},{'atom',384,'any'}}|[{'record_field',385,{'atom',385,'port'},{'integer',385,0}}|[{'record_field',386,{'atom',386,'backlog'},{'integer',386,5}}|[{'record_field',387,{'atom',387,'fd'},{'op',387,'-',{'integer',387,1}}}|[{'record_field',388,{'atom',388,'opts'},{'nil',388}}]]]]],[]}],
		%% Line 392
		'type' =
		    %% Line 392
		    [{{'record','udp_opts'},[{'record_field',394,{'atom',394,'ifaddr'},{'atom',394,'any'}}|[{'record_field',395,{'atom',395,'port'},{'integer',395,0}}|[{'record_field',396,{'atom',396,'fd'},{'op',396,'-',{'integer',396,1}}}|[{'record_field',397,{'atom',397,'opts'},{'cons',397,{'tuple',397,[{'atom',397,'active'}|[{'atom',397,'true'}]]},{'nil',397}}}]]]],[]}],
		%% Line 402
		'type' =
		    %% Line 402
		    [{{'record','sctp_opts'},[{'record_field',404,{'atom',404,'ifaddr'}}|[{'record_field',405,{'atom',405,'port'},{'integer',405,0}}|[{'record_field',406,{'atom',406,'fd'},{'op',406,'-',{'integer',406,1}}}|[{'record_field',407,{'atom',407,'type'},{'atom',407,'seqpacket'}}|[{'record_field',408,{'atom',408,'opts'},{'cons',408,{'tuple',408,[{'atom',408,'mode'}|[{'atom',408,'binary'}]]},{'cons',409,{'tuple',409,[{'atom',409,'buffer'}|[{'integer',409,65536}]]},{'cons',410,{'tuple',410,[{'atom',410,'sndbuf'}|[{'integer',410,65536}]]},{'cons',411,{'tuple',411,[{'atom',411,'recbuf'}|[{'integer',411,1024}]]},{'cons',412,{'tuple',412,[{'atom',412,'sctp_events'}|[{'atom',412,'undefined'}]]},{'nil',414}}}}}}}]]]]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','sctp_initmsg'},[{'record_field',31,{'atom',31,'num_ostreams'}}|[{'record_field',32,{'atom',32,'max_instreams'}}|[{'record_field',33,{'atom',33,'max_attempts'}}|[{'record_field',34,{'atom',34,'max_init_timeo'}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sctp_sndrcvinfo'},[{'record_field',41,{'atom',41,'stream'}}|[{'record_field',42,{'atom',42,'ssn'}}|[{'record_field',43,{'atom',43,'flags'}}|[{'record_field',47,{'atom',47,'ppid'}}|[{'record_field',48,{'atom',48,'context'}}|[{'record_field',49,{'atom',49,'timetolive'}}|[{'record_field',50,{'atom',50,'tsn'}}|[{'record_field',51,{'atom',51,'cumtsn'}}|[{'record_field',52,{'atom',52,'assoc_id'}}]]]]]]]]],[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{{'record','sctp_assoc_change'},[{'record_field',65,{'atom',65,'state'},{'atom',65,'cant_assoc'}}|[{'record_field',66,{'atom',66,'error'},{'integer',66,0}}|[{'record_field',67,{'atom',67,'outbound_streams'},{'integer',67,0}}|[{'record_field',68,{'atom',68,'inbound_streams'},{'integer',68,0}}|[{'record_field',69,{'atom',69,'assoc_id'},{'integer',69,0}}]]]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','sctp_paddr_change'},[{'record_field',78,{'atom',78,'addr'},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'nil',78}}}}}}|[{'record_field',79,{'atom',79,'state'},{'atom',79,'addr_available'}}|[{'record_field',80,{'atom',80,'error'},{'integer',80,0}}|[{'record_field',81,{'atom',81,'assoc_id'},{'integer',81,0}}]]]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','sctp_remote_error'},[{'record_field',88,{'atom',88,'error'},{'integer',88,0}}|[{'record_field',89,{'atom',89,'assoc_id'},{'integer',89,0}}|[{'record_field',90,{'atom',90,'data'},{'nil',90}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','sctp_send_failed'},[{'record_field',100,{'atom',100,'flags'},{'atom',100,'false'}}|[{'record_field',101,{'atom',101,'error'},{'integer',101,0}}|[{'record_field',102,{'atom',102,'info'},{'record',102,'sctp_sndrcvinfo',[]}}|[{'record_field',103,{'atom',103,'assoc_id'},{'integer',103,0}}|[{'record_field',104,{'atom',104,'data'},{'bin',104,[]}}]]]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','sctp_shutdown_event'},[{'record_field',111,{'atom',111,'assoc_id'},{'integer',111,0}}],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','sctp_adaptation_event'},[{'record_field',117,{'atom',117,'adaptation_ind'},{'integer',117,0}}|[{'record_field',118,{'atom',118,'assoc_id'},{'integer',118,0}}]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{{'record','sctp_pdapi_event'},[{'record_field',127,{'atom',127,'indication'},{'atom',127,'partial_delivery_aborted'}}|[{'record_field',128,{'atom',128,'assoc_id'},{'integer',128,0}}]],[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{{'record','sctp_rtoinfo'},[{'record_field',138,{'atom',138,'assoc_id'}}|[{'record_field',139,{'atom',139,'initial'}}|[{'record_field',140,{'atom',140,'max'}}|[{'record_field',141,{'atom',141,'min'}}]]]],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','sctp_assocparams'},[{'record_field',146,{'atom',146,'assoc_id'}}|[{'record_field',147,{'atom',147,'asocmaxrxt'}}|[{'record_field',148,{'atom',148,'number_peer_destinations'}}|[{'record_field',149,{'atom',149,'peer_rwnd'}}|[{'record_field',150,{'atom',150,'local_rwnd'}}|[{'record_field',151,{'atom',151,'cookie_life'}}]]]]]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{{'record','sctp_prim'},[{'record_field',158,{'atom',158,'assoc_id'}}|[{'record_field',159,{'atom',159,'addr'}}]],[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{{'record','sctp_setpeerprim'},[{'record_field',164,{'atom',164,'assoc_id'}}|[{'record_field',165,{'atom',165,'addr'}}]],[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','sctp_setadaptation'},[{'record_field',170,{'atom',170,'adaptation_ind'}}],[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','sctp_paddrparams'},[{'record_field',175,{'atom',175,'assoc_id'}}|[{'record_field',176,{'atom',176,'address'}}|[{'record_field',177,{'atom',177,'hbinterval'}}|[{'record_field',178,{'atom',178,'pathmaxrxt'}}|[{'record_field',179,{'atom',179,'pathmtu'}}|[{'record_field',180,{'atom',180,'sackdelay'}}|[{'record_field',181,{'atom',181,'flags'}}]]]]]]],[]}],
		%% Line 196
		'type' =
		    %% Line 196
		    [{{'record','sctp_event_subscribe'},[{'record_field',198,{'atom',198,'data_io_event'}}|[{'record_field',199,{'atom',199,'association_event'}}|[{'record_field',200,{'atom',200,'address_event'}}|[{'record_field',201,{'atom',201,'send_failure_event'}}|[{'record_field',202,{'atom',202,'peer_error_event'}}|[{'record_field',203,{'atom',203,'shutdown_event'}}|[{'record_field',204,{'atom',204,'partial_delivery_event'}}|[{'record_field',205,{'atom',205,'adaptation_layer_event'}}|[{'record_field',206,{'atom',206,'authentication_event'}}]]]]]]]]],[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{{'record','sctp_assoc_value'},[{'record_field',211,{'atom',211,'assoc_id'}}|[{'record_field',212,{'atom',212,'assoc_value'}}]],[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','sctp_paddrinfo'},[{'record_field',220,{'atom',220,'assoc_id'}}|[{'record_field',221,{'atom',221,'address'}}|[{'record_field',222,{'atom',222,'state'}}|[{'record_field',223,{'atom',223,'cwnd'}}|[{'record_field',224,{'atom',224,'srtt'}}|[{'record_field',225,{'atom',225,'rto'}}|[{'record_field',226,{'atom',226,'mtu'}}]]]]]]],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{{'record','sctp_status'},[{'record_field',231,{'atom',231,'assoc_id'}}|[{'record_field',232,{'atom',232,'state'}}|[{'record_field',240,{'atom',240,'rwnd'}}|[{'record_field',241,{'atom',241,'unackdata'}}|[{'record_field',242,{'atom',242,'penddata'}}|[{'record_field',243,{'atom',243,'instrms'}}|[{'record_field',244,{'atom',244,'outstrms'}}|[{'record_field',245,{'atom',245,'fragmentation_point'}}|[{'record_field',246,{'atom',246,'primary'}}]]]]]]]]],[]}],
		%% Line 73
		'export_type' =
		    %% Line 73
		    [{'address_family',0}|[{'hostent',0}|[{'hostname',0}|[{'ip4_address',0}|[{'ip6_address',0}|[{'ip_address',0}|[{'posix',0}|[{'socket',0}|[{'port_number',0}]]]]]]]]],
		%% Line 92
		'type' =
		    %% Line 92
		    [{'hostent',{'type',92,'record',[{'atom',92,'hostent'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'hostname',{'type',93,'union',[{'type',93,'atom',[]}|[{'type',93,'string',[]}]]},[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'ip4_address',{'type',94,'tuple',[{'type',94,'range',[{'integer',94,0}|[{'integer',94,255}]]}|[{'type',94,'range',[{'integer',94,0}|[{'integer',94,255}]]}|[{'type',94,'range',[{'integer',94,0}|[{'integer',94,255}]]}|[{'type',94,'range',[{'integer',94,0}|[{'integer',94,255}]]}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'ip6_address',{'type',95,'tuple',[{'type',95,'range',[{'integer',95,0}|[{'integer',95,65535}]]}|[{'type',95,'range',[{'integer',95,0}|[{'integer',95,65535}]]}|[{'type',95,'range',[{'integer',95,0}|[{'integer',95,65535}]]}|[{'type',95,'range',[{'integer',95,0}|[{'integer',95,65535}]]}|[{'type',96,'range',[{'integer',96,0}|[{'integer',96,65535}]]}|[{'type',96,'range',[{'integer',96,0}|[{'integer',96,65535}]]}|[{'type',96,'range',[{'integer',96,0}|[{'integer',96,65535}]]}|[{'type',96,'range',[{'integer',96,0}|[{'integer',96,65535}]]}]]]]]]]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'ip_address',{'type',97,'union',[{'type',97,'ip4_address',[]}|[{'type',97,'ip6_address',[]}]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'port_number',{'type',98,'range',[{'integer',98,0}|[{'integer',98,65535}]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'posix',{'type',99,'union',[{'atom',99,'exbadport'}|[{'atom',99,'exbadseq'}|[{'remote_type',99,[{'atom',99,'file'}|[{'atom',99,'posix'}|[[]]]]}]]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'socket',{'type',100,'port',[]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'socket_setopt',{'type',103,'union',[{'remote_type',103,[{'atom',103,'gen_sctp'}|[{'atom',103,'option'}|[[]]]]}|[{'remote_type',103,[{'atom',103,'gen_tcp'}|[{'atom',103,'option'}|[[]]]]}|[{'remote_type',103,[{'atom',103,'gen_udp'}|[{'atom',103,'option'}|[[]]]]}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'socket_getopt',{'type',106,'union',[{'remote_type',106,[{'atom',106,'gen_sctp'}|[{'atom',106,'option_name'}|[[]]]]}|[{'remote_type',106,[{'atom',106,'gen_tcp'}|[{'atom',106,'option_name'}|[[]]]]}|[{'remote_type',106,[{'atom',106,'gen_udp'}|[{'atom',106,'option_name'}|[[]]]]}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'ether_address',{'type',107,'list',[{'type',107,'range',[{'integer',107,0}|[{'integer',107,255}]]}]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'if_setopt',{'type',110,'union',[{'type',110,'tuple',[{'atom',110,'addr'}|[{'type',110,'ip_address',[]}]]}|[{'type',111,'tuple',[{'atom',111,'broadaddr'}|[{'type',111,'ip_address',[]}]]}|[{'type',112,'tuple',[{'atom',112,'dstaddr'}|[{'type',112,'ip_address',[]}]]}|[{'type',113,'tuple',[{'atom',113,'mtu'}|[{'type',113,'non_neg_integer',[]}]]}|[{'type',114,'tuple',[{'atom',114,'netmask'}|[{'type',114,'ip_address',[]}]]}|[{'type',115,'tuple',[{'atom',115,'flags'}|[{'type',115,'list',[{'type',115,'union',[{'atom',115,'up'}|[{'atom',115,'down'}|[{'atom',115,'broadcast'}|[{'atom',115,'no_broadcast'}|[{'atom',116,'pointtopoint'}|[{'atom',116,'no_pointtopoint'}|[{'atom',117,'running'}|[{'atom',117,'multicast'}]]]]]]]]}]}]]}|[{'type',118,'tuple',[{'atom',118,'hwaddr'}|[{'type',118,'ether_address',[]}]]}]]]]]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{'if_getopt',{'type',121,'union',[{'atom',121,'addr'}|[{'atom',121,'broadaddr'}|[{'atom',121,'dstaddr'}|[{'atom',122,'mtu'}|[{'atom',122,'netmask'}|[{'atom',122,'flags'}|[{'atom',122,'hwaddr'}]]]]]]]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{'if_getopt_result',{'type',125,'union',[{'type',125,'tuple',[{'atom',125,'addr'}|[{'type',125,'ip_address',[]}]]}|[{'type',126,'tuple',[{'atom',126,'broadaddr'}|[{'type',126,'ip_address',[]}]]}|[{'type',127,'tuple',[{'atom',127,'dstaddr'}|[{'type',127,'ip_address',[]}]]}|[{'type',128,'tuple',[{'atom',128,'mtu'}|[{'type',128,'non_neg_integer',[]}]]}|[{'type',129,'tuple',[{'atom',129,'netmask'}|[{'type',129,'ip_address',[]}]]}|[{'type',130,'tuple',[{'atom',130,'flags'}|[{'type',130,'list',[{'type',130,'union',[{'atom',130,'up'}|[{'atom',130,'down'}|[{'atom',130,'broadcast'}|[{'atom',130,'no_broadcast'}|[{'atom',131,'pointtopoint'}|[{'atom',131,'no_pointtopoint'}|[{'atom',132,'running'}|[{'atom',132,'multicast'}|[{'atom',132,'loopback'}]]]]]]]]]}]}]]}|[{'type',133,'tuple',[{'atom',133,'hwaddr'}|[{'type',133,'ether_address',[]}]]}]]]]]]]},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'address_family',{'type',135,'union',[{'atom',135,'inet'}|[{'atom',135,'inet6'}]]},[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'socket_protocol',{'type',136,'union',[{'atom',136,'tcp'}|[{'atom',136,'udp'}|[{'atom',136,'sctp'}]]]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{'socket_type',{'type',137,'union',[{'atom',137,'stream'}|[{'atom',137,'dgram'}|[{'atom',137,'seqpacket'}]]]},[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'stat_option',{'type',139,'union',[{'atom',139,'recv_cnt'}|[{'atom',139,'recv_max'}|[{'atom',139,'recv_avg'}|[{'atom',139,'recv_oct'}|[{'atom',139,'recv_dvi'}|[{'atom',140,'send_cnt'}|[{'atom',140,'send_max'}|[{'atom',140,'send_avg'}|[{'atom',140,'send_oct'}|[{'atom',140,'send_pend'}]]]]]]]]]]},[]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'get_rc',0},[{'type',144,'fun',[{'type',144,'product',[]}|[{'type',144,'list',[{'type',144,'tuple',[{'ann_type',144,[{'var',144,'Par'}|[{'type',144,'any',[]}]]}|[{'ann_type',144,[{'var',144,'Val'}|[{'type',144,'any',[]}]]}]]}]}]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'close',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Socket'}]}|[{'atom',149,'ok'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Socket'}|[{'type',150,'socket',[]}]]]]}]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'peername',1},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'Socket'}]}|[{'type',162,'union',[{'type',162,'tuple',[{'atom',162,'ok'}|[{'type',162,'tuple',[{'var',162,'Address'}|[{'var',162,'Port'}]]}]]}|[{'type',162,'tuple',[{'atom',162,'error'}|[{'type',162,'posix',[]}]]}]]}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Socket'}|[{'type',163,'socket',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Address'}|[{'type',164,'ip_address',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Port'}|[{'type',165,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'setpeername',2},[{'type',170,'fun',[{'type',170,'product',[{'ann_type',170,[{'var',170,'Socket'}|[{'type',170,'socket',[]}]]}|[{'ann_type',170,[{'var',170,'Address'}|[{'type',170,'tuple',[{'type',170,'ip_address',[]}|[{'type',170,'port_number',[]}]]}]]}]]}|[{'type',171,'union',[{'atom',171,'ok'}|[{'type',171,'tuple',[{'atom',171,'error'}|[{'type',171,'any',[]}]]}]]}]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'peernames',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Socket'}]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'type',178,'list',[{'type',178,'tuple',[{'var',178,'Address'}|[{'var',178,'Port'}]]}]}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'type',178,'posix',[]}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Socket'}|[{'type',179,'socket',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Address'}|[{'type',180,'ip_address',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Port'}|[{'type',181,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'peernames',2},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'Socket'}|[{'var',186,'Assoc'}]]}|[{'type',187,'union',[{'type',187,'tuple',[{'atom',187,'ok'}|[{'type',187,'list',[{'type',187,'tuple',[{'var',187,'Address'}|[{'var',187,'Port'}]]}]}]]}|[{'type',187,'tuple',[{'atom',187,'error'}|[{'type',187,'posix',[]}]]}]]}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Socket'}|[{'type',188,'socket',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Assoc'}|[{'type',189,'union',[{'type',189,'record',[{'atom',189,'sctp_assoc_change'}]}|[{'remote_type',189,[{'atom',189,'gen_sctp'}|[{'atom',189,'assoc_id'}|[[]]]]}]]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Address'}|[{'type',190,'ip_address',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Port'}|[{'type',191,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'sockname',1},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Socket'}]}|[{'type',197,'union',[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'tuple',[{'var',197,'Address'}|[{'var',197,'Port'}]]}]]}|[{'type',197,'tuple',[{'atom',197,'error'}|[{'type',197,'posix',[]}]]}]]}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Socket'}|[{'type',198,'socket',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Address'}|[{'type',199,'ip_address',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Port'}|[{'type',200,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'setsockname',2},[{'type',205,'fun',[{'type',205,'product',[{'ann_type',205,[{'var',205,'Socket'}|[{'type',205,'socket',[]}]]}|[{'ann_type',205,[{'var',205,'Address'}|[{'type',205,'tuple',[{'type',205,'ip_address',[]}|[{'type',205,'port_number',[]}]]}]]}]]}|[{'type',206,'union',[{'atom',206,'ok'}|[{'type',206,'tuple',[{'atom',206,'error'}|[{'type',206,'any',[]}]]}]]}]]}]}],
		%% Line 213
		'spec' =
		    %% Line 213
		    [{{'socknames',1},[{'type',213,'bounded_fun',[{'type',213,'fun',[{'type',213,'product',[{'var',213,'Socket'}]}|[{'type',213,'union',[{'type',213,'tuple',[{'atom',213,'ok'}|[{'type',213,'list',[{'type',213,'tuple',[{'var',213,'Address'}|[{'var',213,'Port'}]]}]}]]}|[{'type',213,'tuple',[{'atom',213,'error'}|[{'type',213,'posix',[]}]]}]]}]]}|[[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Socket'}|[{'type',214,'socket',[]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Address'}|[{'type',215,'ip_address',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Port'}|[{'type',216,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'socknames',2},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Socket'}|[{'var',221,'Assoc'}]]}|[{'type',222,'union',[{'type',222,'tuple',[{'atom',222,'ok'}|[{'type',222,'list',[{'type',222,'tuple',[{'var',222,'Address'}|[{'var',222,'Port'}]]}]}]]}|[{'type',222,'tuple',[{'atom',222,'error'}|[{'type',222,'posix',[]}]]}]]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Socket'}|[{'type',223,'socket',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Assoc'}|[{'type',224,'union',[{'type',224,'record',[{'atom',224,'sctp_assoc_change'}]}|[{'remote_type',224,[{'atom',224,'gen_sctp'}|[{'atom',224,'assoc_id'}|[[]]]]}]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Address'}|[{'type',225,'ip_address',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Port'}|[{'type',226,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'port',1},[{'type',232,'bounded_fun',[{'type',232,'fun',[{'type',232,'product',[{'var',232,'Socket'}]}|[{'type',232,'union',[{'type',232,'tuple',[{'atom',232,'ok'}|[{'var',232,'Port'}]]}|[{'type',232,'tuple',[{'atom',232,'error'}|[{'type',232,'any',[]}]]}]]}]]}|[[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Socket'}|[{'type',233,'socket',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Port'}|[{'type',234,'port_number',[]}]]]]}]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'send',2},[{'type',242,'fun',[{'type',242,'product',[{'ann_type',242,[{'var',242,'Socket'}|[{'type',242,'socket',[]}]]}|[{'ann_type',242,[{'var',242,'Packet'}|[{'type',242,'iolist',[]}]]}]]}|[{'type',243,'union',[{'atom',243,'ok'}|[{'type',243,'tuple',[{'atom',243,'error'}|[{'type',243,'posix',[]}]]}]]}]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'setopts',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'Socket'}|[{'var',248,'Options'}]]}|[{'type',248,'union',[{'atom',248,'ok'}|[{'type',248,'tuple',[{'atom',248,'error'}|[{'type',248,'posix',[]}]]}]]}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Socket'}|[{'type',249,'socket',[]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Options'}|[{'type',250,'list',[{'type',250,'socket_setopt',[]}]}]]]]}]]]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'getopts',2},[{'type',262,'bounded_fun',[{'type',262,'fun',[{'type',262,'product',[{'var',262,'Socket'}|[{'var',262,'Options'}]]}|[{'type',263,'union',[{'type',263,'tuple',[{'atom',263,'ok'}|[{'var',263,'OptionValues'}]]}|[{'type',263,'tuple',[{'atom',263,'error'}|[{'type',263,'posix',[]}]]}]]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Socket'}|[{'type',264,'socket',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Options'}|[{'type',265,'list',[{'type',265,'socket_getopt',[]}]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'OptionValues'}|[{'type',266,'list',[{'type',266,'socket_setopt',[]}]}]]]]}]]]]]}]}],
		%% Line 282
		'spec' =
		    %% Line 282
		    [{{'getifaddrs',1},[{'type',282,'fun',[{'type',282,'product',[{'ann_type',282,[{'var',282,'Socket'}|[{'type',282,'socket',[]}]]}]}|[{'type',283,'union',[{'type',283,'tuple',[{'atom',283,'ok'}|[{'type',283,'list',[{'type',283,'string',[]}]}]]}|[{'type',283,'tuple',[{'atom',283,'error'}|[{'type',283,'posix',[]}]]}]]}]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'getifaddrs',0},[{'type',288,'bounded_fun',[{'type',288,'fun',[{'type',288,'product',[]}|[{'type',288,'union',[{'type',288,'tuple',[{'atom',288,'ok'}|[{'var',288,'Iflist'}]]}|[{'type',288,'tuple',[{'atom',288,'error'}|[{'type',288,'posix',[]}]]}]]}]]}|[[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Iflist'}|[{'type',289,'list',[{'type',289,'tuple',[{'var',289,'Ifname'}|[{'type',289,'list',[{'var',289,'Ifopt'}]}]]}]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Ifname'}|[{'type',290,'string',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Ifopt'}|[{'type',291,'union',[{'type',291,'tuple',[{'atom',291,'flag'}|[{'type',291,'list',[{'var',291,'Flag'}]}]]}|[{'type',291,'tuple',[{'atom',291,'addr'}|[{'var',291,'Addr'}]]}|[{'type',291,'tuple',[{'atom',291,'netmask'}|[{'var',291,'Netmask'}]]}|[{'type',292,'tuple',[{'atom',292,'broadaddr'}|[{'var',292,'Broadaddr'}]]}|[{'type',292,'tuple',[{'atom',292,'dstaddr'}|[{'var',292,'Dstaddr'}]]}|[{'type',293,'tuple',[{'atom',293,'hwaddr'}|[{'var',293,'Hwaddr'}]]}]]]]]]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'Flag'}|[{'type',294,'union',[{'atom',294,'up'}|[{'atom',294,'broadcast'}|[{'atom',294,'loopback'}|[{'atom',294,'pointtopoint'}|[{'atom',295,'running'}|[{'atom',295,'multicast'}]]]]]]}]]]]}|[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'Addr'}|[{'type',296,'ip_address',[]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Netmask'}|[{'type',297,'ip_address',[]}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'Broadaddr'}|[{'type',298,'ip_address',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Dstaddr'}|[{'type',299,'ip_address',[]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Hwaddr'}|[{'type',300,'list',[{'type',300,'byte',[]}]}]]]]}]]]]]]]]]]]}]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'getiflist',1},[{'type',305,'fun',[{'type',305,'product',[{'ann_type',305,[{'var',305,'Socket'}|[{'type',305,'socket',[]}]]}]}|[{'type',306,'union',[{'type',306,'tuple',[{'atom',306,'ok'}|[{'type',306,'list',[{'type',306,'string',[]}]}]]}|[{'type',306,'tuple',[{'atom',306,'error'}|[{'type',306,'posix',[]}]]}]]}]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'getiflist',0},[{'type',311,'fun',[{'type',311,'product',[]}|[{'type',311,'union',[{'type',311,'tuple',[{'atom',311,'ok'}|[{'type',311,'list',[{'type',311,'string',[]}]}]]}|[{'type',311,'tuple',[{'atom',311,'error'}|[{'type',311,'posix',[]}]]}]]}]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'ifget',3},[{'type',316,'fun',[{'type',316,'product',[{'ann_type',316,[{'var',316,'Socket'}|[{'type',316,'socket',[]}]]}|[{'ann_type',317,[{'var',317,'Name'}|[{'type',317,'union',[{'type',317,'string',[]}|[{'type',317,'atom',[]}]]}]]}|[{'ann_type',318,[{'var',318,'Opts'}|[{'type',318,'list',[{'type',318,'if_getopt',[]}]}]]}]]]}|[{'type',319,'union',[{'type',319,'tuple',[{'atom',319,'ok'}|[{'type',319,'list',[{'type',319,'if_getopt_result',[]}]}]]}|[{'type',319,'tuple',[{'atom',319,'error'}|[{'type',319,'posix',[]}]]}]]}]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'ifget',2},[{'type',324,'fun',[{'type',324,'product',[{'ann_type',324,[{'var',324,'Name'}|[{'type',324,'union',[{'type',324,'string',[]}|[{'type',324,'atom',[]}]]}]]}|[{'ann_type',324,[{'var',324,'Opts'}|[{'type',324,'list',[{'type',324,'if_getopt',[]}]}]]}]]}|[{'type',325,'union',[{'type',325,'tuple',[{'atom',325,'ok'}|[{'type',325,'list',[{'type',325,'if_getopt_result',[]}]}]]}|[{'type',325,'tuple',[{'atom',325,'error'}|[{'type',325,'posix',[]}]]}]]}]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'ifset',3},[{'type',330,'fun',[{'type',330,'product',[{'ann_type',330,[{'var',330,'Socket'}|[{'type',330,'socket',[]}]]}|[{'ann_type',331,[{'var',331,'Name'}|[{'type',331,'union',[{'type',331,'string',[]}|[{'type',331,'atom',[]}]]}]]}|[{'ann_type',332,[{'var',332,'Opts'}|[{'type',332,'list',[{'type',332,'if_setopt',[]}]}]]}]]]}|[{'type',333,'union',[{'atom',333,'ok'}|[{'type',333,'tuple',[{'atom',333,'error'}|[{'type',333,'posix',[]}]]}]]}]]}]}],
		%% Line 338
		'spec' =
		    %% Line 338
		    [{{'ifset',2},[{'type',338,'fun',[{'type',338,'product',[{'ann_type',338,[{'var',338,'Name'}|[{'type',338,'union',[{'type',338,'string',[]}|[{'type',338,'atom',[]}]]}]]}|[{'ann_type',338,[{'var',338,'Opts'}|[{'type',338,'list',[{'type',338,'if_setopt',[]}]}]]}]]}|[{'type',339,'union',[{'atom',339,'ok'}|[{'type',339,'tuple',[{'atom',339,'error'}|[{'type',339,'posix',[]}]]}]]}]]}]}],
		%% Line 344
		'spec' =
		    %% Line 344
		    [{{'getif',0},[{'type',344,'fun',[{'type',344,'product',[]}|[{'type',345,'union',[{'type',345,'tuple',[{'atom',345,'ok'}|[{'type',345,'list',[{'type',345,'tuple',[{'type',345,'ip_address',[]}|[{'type',345,'union',[{'type',345,'ip_address',[]}|[{'atom',345,'undefined'}]]}|[{'type',345,'ip_address',[]}]]]}]}]]}|[{'type',346,'tuple',[{'atom',346,'error'}|[{'type',346,'posix',[]}]]}]]}]]}]}],
		%% Line 352
		'spec' =
		    %% Line 352
		    [{{'getif',1},[{'type',352,'fun',[{'type',352,'product',[{'ann_type',352,[{'var',352,'Socket'}|[{'type',352,'socket',[]}]]}]}|[{'type',353,'union',[{'type',353,'tuple',[{'atom',353,'ok'}|[{'type',353,'list',[{'type',353,'tuple',[{'type',353,'ip_address',[]}|[{'type',353,'union',[{'type',353,'ip_address',[]}|[{'atom',353,'undefined'}]]}|[{'type',353,'ip_address',[]}]]]}]}]]}|[{'type',354,'tuple',[{'atom',354,'error'}|[{'type',354,'posix',[]}]]}]]}]]}]}],
		%% Line 399
		'spec' =
		    %% Line 399
		    [{{'gethostname',0},[{'type',399,'bounded_fun',[{'type',399,'fun',[{'type',399,'product',[]}|[{'type',399,'tuple',[{'atom',399,'ok'}|[{'var',399,'Hostname'}]]}]]}|[[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Hostname'}|[{'type',400,'string',[]}]]]]}]]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'gethostname',1},[{'type',413,'fun',[{'type',413,'product',[{'ann_type',413,[{'var',413,'Socket'}|[{'type',413,'socket',[]}]]}]}|[{'type',414,'union',[{'type',414,'tuple',[{'atom',414,'ok'}|[{'type',414,'string',[]}]]}|[{'type',414,'tuple',[{'atom',414,'error'}|[{'type',414,'posix',[]}]]}]]}]]}]}],
		%% Line 419
		'spec' =
		    %% Line 419
		    [{{'getstat',1},[{'type',419,'bounded_fun',[{'type',419,'fun',[{'type',419,'product',[{'var',419,'Socket'}]}|[{'type',420,'union',[{'type',420,'tuple',[{'atom',420,'ok'}|[{'var',420,'OptionValues'}]]}|[{'type',420,'tuple',[{'atom',420,'error'}|[{'type',420,'posix',[]}]]}]]}]]}|[[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Socket'}|[{'type',421,'socket',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'OptionValues'}|[{'type',422,'list',[{'type',422,'tuple',[{'type',422,'stat_option',[]}|[{'type',422,'integer',[]}]]}]}]]]]}]]]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'getstat',2},[{'type',427,'bounded_fun',[{'type',427,'fun',[{'type',427,'product',[{'var',427,'Socket'}|[{'var',427,'Options'}]]}|[{'type',428,'union',[{'type',428,'tuple',[{'atom',428,'ok'}|[{'var',428,'OptionValues'}]]}|[{'type',428,'tuple',[{'atom',428,'error'}|[{'type',428,'posix',[]}]]}]]}]]}|[[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'Socket'}|[{'type',429,'socket',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Options'}|[{'type',430,'list',[{'type',430,'stat_option',[]}]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'OptionValues'}|[{'type',431,'list',[{'type',431,'tuple',[{'type',431,'stat_option',[]}|[{'type',431,'integer',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'gethostbyname',1},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'Hostname'}]}|[{'type',436,'union',[{'type',436,'tuple',[{'atom',436,'ok'}|[{'var',436,'Hostent'}]]}|[{'type',436,'tuple',[{'atom',436,'error'}|[{'type',436,'posix',[]}]]}]]}]]}|[[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Hostname'}|[{'type',437,'hostname',[]}]]]]}|[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Hostent'}|[{'type',438,'hostent',[]}]]]]}]]]]}]}],
		%% Line 443
		'spec' =
		    %% Line 443
		    [{{'gethostbyname',2},[{'type',443,'bounded_fun',[{'type',443,'fun',[{'type',443,'product',[{'var',443,'Hostname'}|[{'var',443,'Family'}]]}|[{'type',444,'union',[{'type',444,'tuple',[{'atom',444,'ok'}|[{'var',444,'Hostent'}]]}|[{'type',444,'tuple',[{'atom',444,'error'}|[{'type',444,'posix',[]}]]}]]}]]}|[[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'Hostname'}|[{'type',445,'hostname',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'Family'}|[{'type',446,'address_family',[]}]]]]}|[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'Hostent'}|[{'type',447,'hostent',[]}]]]]}]]]]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'gethostbyname',3},[{'type',452,'fun',[{'type',452,'product',[{'ann_type',452,[{'var',452,'Name'}|[{'type',452,'hostname',[]}]]}|[{'ann_type',453,[{'var',453,'Family'}|[{'type',453,'address_family',[]}]]}|[{'ann_type',454,[{'var',454,'Timeout'}|[{'type',454,'union',[{'type',454,'non_neg_integer',[]}|[{'atom',454,'infinity'}]]}]]}]]]}|[{'type',455,'union',[{'type',455,'tuple',[{'atom',455,'ok'}|[{'type',455,'record',[{'atom',455,'hostent'}]}]]}|[{'type',455,'tuple',[{'atom',455,'error'}|[{'type',455,'posix',[]}]]}]]}]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'gethostbyaddr',1},[{'type',477,'bounded_fun',[{'type',477,'fun',[{'type',477,'product',[{'var',477,'Address'}]}|[{'type',477,'union',[{'type',477,'tuple',[{'atom',477,'ok'}|[{'var',477,'Hostent'}]]}|[{'type',477,'tuple',[{'atom',477,'error'}|[{'type',477,'posix',[]}]]}]]}]]}|[[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'Address'}|[{'type',478,'union',[{'type',478,'string',[]}|[{'type',478,'ip_address',[]}]]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Hostent'}|[{'type',479,'hostent',[]}]]]]}]]]]}]}],
		%% Line 484
		'spec' =
		    %% Line 484
		    [{{'gethostbyaddr',2},[{'type',484,'fun',[{'type',484,'product',[{'ann_type',484,[{'var',484,'Address'}|[{'type',484,'union',[{'type',484,'string',[]}|[{'type',484,'ip_address',[]}]]}]]}|[{'ann_type',485,[{'var',485,'Timeout'}|[{'type',485,'union',[{'type',485,'non_neg_integer',[]}|[{'atom',485,'infinity'}]]}]]}]]}|[{'type',486,'union',[{'type',486,'tuple',[{'atom',486,'ok'}|[{'type',486,'record',[{'atom',486,'hostent'}]}]]}|[{'type',486,'tuple',[{'atom',486,'error'}|[{'type',486,'posix',[]}]]}]]}]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'ip',1},[{'type',497,'fun',[{'type',497,'product',[{'ann_type',497,[{'var',497,'Ip'}|[{'type',497,'union',[{'type',497,'ip_address',[]}|[{'type',497,'string',[]}|[{'type',497,'atom',[]}]]]}]]}]}|[{'type',498,'union',[{'type',498,'tuple',[{'atom',498,'ok'}|[{'type',498,'ip_address',[]}]]}|[{'type',498,'tuple',[{'atom',498,'error'}|[{'type',498,'posix',[]}]]}]]}]]}]}],
		%% Line 511
		'spec' =
		    %% Line 511
		    [{{'getll',1},[{'type',511,'fun',[{'type',511,'product',[{'ann_type',511,[{'var',511,'Socket'}|[{'type',511,'socket',[]}]]}]}|[{'type',511,'tuple',[{'atom',511,'ok'}|[{'type',511,'socket',[]}]]}]]}]}],
		%% Line 520
		'spec' =
		    %% Line 520
		    [{{'getfd',1},[{'type',520,'fun',[{'type',520,'product',[{'ann_type',520,[{'var',520,'Socket'}|[{'type',520,'socket',[]}]]}]}|[{'type',521,'union',[{'type',521,'tuple',[{'atom',521,'ok'}|[{'type',521,'non_neg_integer',[]}]]}|[{'type',521,'tuple',[{'atom',521,'error'}|[{'type',521,'posix',[]}]]}]]}]]}]}],
		%% Line 530
		'spec' =
		    %% Line 530
		    [{{'getaddr',2},[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[{'var',530,'Host'}|[{'var',530,'Family'}]]}|[{'type',530,'union',[{'type',530,'tuple',[{'atom',530,'ok'}|[{'var',530,'Address'}]]}|[{'type',530,'tuple',[{'atom',530,'error'}|[{'type',530,'posix',[]}]]}]]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Host'}|[{'type',531,'union',[{'type',531,'ip_address',[]}|[{'type',531,'hostname',[]}]]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Family'}|[{'type',532,'address_family',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Address'}|[{'type',533,'ip_address',[]}]]]]}]]]]]}]}],
		%% Line 538
		'spec' =
		    %% Line 538
		    [{{'getaddr',3},[{'type',538,'fun',[{'type',538,'product',[{'ann_type',538,[{'var',538,'Host'}|[{'type',538,'union',[{'type',538,'ip_address',[]}|[{'type',538,'hostname',[]}]]}]]}|[{'ann_type',539,[{'var',539,'Family'}|[{'type',539,'address_family',[]}]]}|[{'ann_type',540,[{'var',540,'Timeout'}|[{'type',540,'union',[{'type',540,'non_neg_integer',[]}|[{'atom',540,'infinity'}]]}]]}]]]}|[{'type',541,'union',[{'type',541,'tuple',[{'atom',541,'ok'}|[{'type',541,'ip_address',[]}]]}|[{'type',541,'tuple',[{'atom',541,'error'}|[{'type',541,'posix',[]}]]}]]}]]}]}],
		%% Line 555
		'spec' =
		    %% Line 555
		    [{{'getaddrs',2},[{'type',555,'bounded_fun',[{'type',555,'fun',[{'type',555,'product',[{'var',555,'Host'}|[{'var',555,'Family'}]]}|[{'type',556,'union',[{'type',556,'tuple',[{'atom',556,'ok'}|[{'var',556,'Addresses'}]]}|[{'type',556,'tuple',[{'atom',556,'error'}|[{'type',556,'posix',[]}]]}]]}]]}|[[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'Host'}|[{'type',557,'union',[{'type',557,'ip_address',[]}|[{'type',557,'hostname',[]}]]}]]]]}|[{'type',558,'constraint',[{'atom',558,'is_subtype'}|[[{'var',558,'Family'}|[{'type',558,'address_family',[]}]]]]}|[{'type',559,'constraint',[{'atom',559,'is_subtype'}|[[{'var',559,'Addresses'}|[{'type',559,'list',[{'type',559,'ip_address',[]}]}]]]]}]]]]]}]}],
		%% Line 564
		'spec' =
		    %% Line 564
		    [{{'getaddrs',3},[{'type',564,'fun',[{'type',564,'product',[{'ann_type',564,[{'var',564,'Host'}|[{'type',564,'union',[{'type',564,'ip_address',[]}|[{'type',564,'string',[]}|[{'type',564,'atom',[]}]]]}]]}|[{'ann_type',565,[{'var',565,'Family'}|[{'type',565,'address_family',[]}]]}|[{'ann_type',566,[{'var',566,'Timeout'}|[{'type',566,'union',[{'type',566,'non_neg_integer',[]}|[{'atom',566,'infinity'}]]}]]}]]]}|[{'type',567,'union',[{'type',567,'tuple',[{'atom',567,'ok'}|[{'type',567,'list',[{'type',567,'ip_address',[]}]}]]}|[{'type',567,'tuple',[{'atom',567,'error'}|[{'type',567,'posix',[]}]]}]]}]]}]}],
		%% Line 575
		'spec' =
		    %% Line 575
		    [{{'getservbyport',2},[{'type',575,'fun',[{'type',575,'product',[{'ann_type',575,[{'var',575,'Port'}|[{'type',575,'port_number',[]}]]}|[{'ann_type',575,[{'var',575,'Protocol'}|[{'type',575,'union',[{'type',575,'atom',[]}|[{'type',575,'string',[]}]]}]]}]]}|[{'type',576,'union',[{'type',576,'tuple',[{'atom',576,'ok'}|[{'type',576,'string',[]}]]}|[{'type',576,'tuple',[{'atom',576,'error'}|[{'type',576,'posix',[]}]]}]]}]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'getservbyname',2},[{'type',587,'fun',[{'type',587,'product',[{'ann_type',587,[{'var',587,'Name'}|[{'type',587,'union',[{'type',587,'atom',[]}|[{'type',587,'string',[]}]]}]]}|[{'ann_type',588,[{'var',588,'Protocol'}|[{'type',588,'union',[{'type',588,'atom',[]}|[{'type',588,'string',[]}]]}]]}]]}|[{'type',589,'union',[{'type',589,'tuple',[{'atom',589,'ok'}|[{'type',589,'port_number',[]}]]}|[{'type',589,'tuple',[{'atom',589,'error'}|[{'type',589,'posix',[]}]]}]]}]]}]}],
		%% Line 600
		'spec' =
		    %% Line 600
		    [{{'ntoa',1},[{'type',600,'bounded_fun',[{'type',600,'fun',[{'type',600,'product',[{'var',600,'IpAddress'}]}|[{'type',600,'union',[{'var',600,'Address'}|[{'type',600,'tuple',[{'atom',600,'error'}|[{'atom',600,'einval'}]]}]]}]]}|[[{'type',601,'constraint',[{'atom',601,'is_subtype'}|[[{'var',601,'Address'}|[{'type',601,'string',[]}]]]]}|[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'IpAddress'}|[{'type',602,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 606
		'spec' =
		    %% Line 606
		    [{{'parse_ipv4_address',1},[{'type',606,'bounded_fun',[{'type',606,'fun',[{'type',606,'product',[{'var',606,'Address'}]}|[{'type',607,'union',[{'type',607,'tuple',[{'atom',607,'ok'}|[{'var',607,'IPv4Address'}]]}|[{'type',607,'tuple',[{'atom',607,'error'}|[{'atom',607,'einval'}]]}]]}]]}|[[{'type',608,'constraint',[{'atom',608,'is_subtype'}|[[{'var',608,'Address'}|[{'type',608,'string',[]}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'IPv4Address'}|[{'type',609,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 613
		'spec' =
		    %% Line 613
		    [{{'parse_ipv6_address',1},[{'type',613,'bounded_fun',[{'type',613,'fun',[{'type',613,'product',[{'var',613,'Address'}]}|[{'type',614,'union',[{'type',614,'tuple',[{'atom',614,'ok'}|[{'var',614,'IPv6Address'}]]}|[{'type',614,'tuple',[{'atom',614,'error'}|[{'atom',614,'einval'}]]}]]}]]}|[[{'type',615,'constraint',[{'atom',615,'is_subtype'}|[[{'var',615,'Address'}|[{'type',615,'string',[]}]]]]}|[{'type',616,'constraint',[{'atom',616,'is_subtype'}|[[{'var',616,'IPv6Address'}|[{'type',616,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 620
		'spec' =
		    %% Line 620
		    [{{'parse_ipv4strict_address',1},[{'type',620,'bounded_fun',[{'type',620,'fun',[{'type',620,'product',[{'var',620,'Address'}]}|[{'type',621,'union',[{'type',621,'tuple',[{'atom',621,'ok'}|[{'var',621,'IPv4Address'}]]}|[{'type',621,'tuple',[{'atom',621,'error'}|[{'atom',621,'einval'}]]}]]}]]}|[[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Address'}|[{'type',622,'string',[]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'IPv4Address'}|[{'type',623,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 627
		'spec' =
		    %% Line 627
		    [{{'parse_ipv6strict_address',1},[{'type',627,'bounded_fun',[{'type',627,'fun',[{'type',627,'product',[{'var',627,'Address'}]}|[{'type',628,'union',[{'type',628,'tuple',[{'atom',628,'ok'}|[{'var',628,'IPv6Address'}]]}|[{'type',628,'tuple',[{'atom',628,'error'}|[{'atom',628,'einval'}]]}]]}]]}|[[{'type',629,'constraint',[{'atom',629,'is_subtype'}|[[{'var',629,'Address'}|[{'type',629,'string',[]}]]]]}|[{'type',630,'constraint',[{'atom',630,'is_subtype'}|[[{'var',630,'IPv6Address'}|[{'type',630,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 634
		'spec' =
		    %% Line 634
		    [{{'parse_address',1},[{'type',634,'bounded_fun',[{'type',634,'fun',[{'type',634,'product',[{'var',634,'Address'}]}|[{'type',635,'union',[{'type',635,'tuple',[{'atom',635,'ok'}|[{'var',635,'IPAddress'}]]}|[{'type',635,'tuple',[{'atom',635,'error'}|[{'atom',635,'einval'}]]}]]}]]}|[[{'type',636,'constraint',[{'atom',636,'is_subtype'}|[[{'var',636,'Address'}|[{'type',636,'string',[]}]]]]}|[{'type',637,'constraint',[{'atom',637,'is_subtype'}|[[{'var',637,'IPAddress'}|[{'type',637,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 641
		'spec' =
		    %% Line 641
		    [{{'parse_strict_address',1},[{'type',641,'bounded_fun',[{'type',641,'fun',[{'type',641,'product',[{'var',641,'Address'}]}|[{'type',642,'union',[{'type',642,'tuple',[{'atom',642,'ok'}|[{'var',642,'IPAddress'}]]}|[{'type',642,'tuple',[{'atom',642,'error'}|[{'atom',642,'einval'}]]}]]}]]}|[[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'Address'}|[{'type',643,'string',[]}]]]]}|[{'type',644,'constraint',[{'atom',644,'is_subtype'}|[[{'var',644,'IPAddress'}|[{'type',644,'ip_address',[]}]]]]}]]]]}]}],
		%% Line 662
		'spec' =
		    %% Line 662
		    [{{'stats',0},[{'type',662,'fun',[{'type',662,'product',[]}|[{'type',662,'nonempty_list',[{'type',662,'stat_option',[]}]}]]}]}],
		%% Line 1220
		'spec' =
		    %% Line 1220
		    [{{'open',8},[{'type',1220,'fun',[{'type',1220,'product',[{'ann_type',1220,[{'var',1220,'Fd_or_OpenOpts'}|[{'type',1220,'union',[{'type',1220,'integer',[]}|[{'type',1220,'list',[]}]]}]]}|[{'ann_type',1221,[{'var',1221,'Addr'}|[{'type',1221,'ip_address',[]}]]}|[{'ann_type',1222,[{'var',1222,'Port'}|[{'type',1222,'port_number',[]}]]}|[{'ann_type',1223,[{'var',1223,'Opts'}|[{'type',1223,'list',[{'type',1223,'socket_setopt',[]}]}]]}|[{'ann_type',1224,[{'var',1224,'Protocol'}|[{'type',1224,'socket_protocol',[]}]]}|[{'ann_type',1225,[{'var',1225,'Family'}|[{'type',1225,'address_family',[]}]]}|[{'ann_type',1226,[{'var',1226,'Type'}|[{'type',1226,'socket_type',[]}]]}|[{'ann_type',1227,[{'var',1227,'Module'}|[{'type',1227,'atom',[]}]]}]]]]]]]]}|[{'type',1228,'union',[{'type',1228,'tuple',[{'atom',1228,'ok'}|[{'type',1228,'socket',[]}]]}|[{'type',1228,'tuple',[{'atom',1228,'error'}|[{'type',1228,'posix',[]}]]}]]}]]}]}],
		%% Line 1292
		'spec' =
		    %% Line 1292
		    [{{'fdopen',6},[{'type',1292,'fun',[{'type',1292,'product',[{'ann_type',1292,[{'var',1292,'Fd'}|[{'type',1292,'non_neg_integer',[]}]]}|[{'ann_type',1293,[{'var',1293,'Opts'}|[{'type',1293,'list',[{'type',1293,'socket_setopt',[]}]}]]}|[{'ann_type',1294,[{'var',1294,'Protocol'}|[{'type',1294,'socket_protocol',[]}]]}|[{'ann_type',1295,[{'var',1295,'Family'}|[{'type',1295,'address_family',[]}]]}|[{'ann_type',1296,[{'var',1296,'Type'}|[{'type',1296,'socket_type',[]}]]}|[{'ann_type',1297,[{'var',1297,'Module'}|[{'type',1297,'atom',[]}]]}]]]]]]}|[{'type',1298,'union',[{'type',1298,'tuple',[{'atom',1298,'ok'}|[{'type',1298,'socket',[]}]]}|[{'type',1298,'tuple',[{'atom',1298,'error'}|[{'type',1298,'posix',[]}]]}]]}]]}]}],
		%% Line 1470
		'spec' =
		    %% Line 1470
		    [{{'format_error',1},[{'type',1470,'bounded_fun',[{'type',1470,'fun',[{'type',1470,'product',[{'var',1470,'Reason'}]}|[{'type',1470,'string',[]}]]}|[[{'type',1471,'constraint',[{'atom',1471,'is_subtype'}|[[{'var',1471,'Reason'}|[{'type',1471,'union',[{'type',1471,'posix',[]}|[{'atom',1471,'system_limit'}]]}]]]]}]]]}]}]]
'get_rc'/0 =
    %% Line 146
    fun () ->
	%% Line 147
	call 'inet_db':'get_rc'
	    ()
'close'/1 =
    %% Line 152
    fun (_cor0) ->
	do  %% Line 153
	    call 'prim_inet':'close'
		(_cor0)
	    %% Line 154
	    receive
	      %% Line 155
	      <{Closed,_cor4}>
		  when let <_cor5> =
			call 'erlang':'=:='
			    (_cor4, _cor0)
		    in  let <_cor1> =
			    call 'erlang':'=:='
				(Closed, 'tcp_closed')
			in  let <_cor2> =
				call 'erlang':'=:='
				    (Closed, 'udp_closed')
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor1, _cor2)
				in  call 'erlang':'and'
					(_cor5, _cor6) ->
		  %% Line 156
		  'ok'
	    after %% Line 157
		  0 ->
	      %% Line 158
	      'ok'
'peername'/1 =
    %% Line 167
    fun (_cor0) ->
	%% Line 168
	call 'prim_inet':'peername'
	    (_cor0)
'setpeername'/2 =
    %% Line 173
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Socket,{IP,Port}> when 'true' ->
	      %% Line 174
	      call 'prim_inet':'setpeername'
		  (Socket, {IP,Port})
	  %% Line 175
	  <Socket,'undefined'> when 'true' ->
	      %% Line 176
	      call 'prim_inet':'setpeername'
		  (Socket, 'undefined')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setpeername',2}}] )
	    -| ['compiler_generated'] )
	end
'peernames'/1 =
    %% Line 183
    fun (_cor0) ->
	%% Line 184
	call 'prim_inet':'peernames'
	    (_cor0)
'peernames'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	%% Line 194
	call 'prim_inet':'peernames'
	    (_cor1, _cor0)
'sockname'/1 =
    %% Line 202
    fun (_cor0) ->
	%% Line 203
	call 'prim_inet':'sockname'
	    (_cor0)
'setsockname'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Socket,{IP,Port}> when 'true' ->
	      %% Line 209
	      call 'prim_inet':'setsockname'
		  (Socket, {IP,Port})
	  %% Line 210
	  <Socket,'undefined'> when 'true' ->
	      %% Line 211
	      call 'prim_inet':'setsockname'
		  (Socket, 'undefined')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setsockname',2}}] )
	    -| ['compiler_generated'] )
	end
'socknames'/1 =
    %% Line 218
    fun (_cor0) ->
	%% Line 219
	call 'prim_inet':'socknames'
	    (_cor0)
'socknames'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	call 'prim_inet':'socknames'
	    (_cor1, _cor0)
'port'/1 =
    %% Line 236
    fun (_cor0) ->
	%% Line 237
	case call 'prim_inet':'sockname'
		 (_cor0) of
	  %% Line 238
	  <{'ok',{_cor3,Port}}> when 'true' ->
	      {'ok',Port}
	  %% Line 239
	  <Error> when 'true' ->
	      Error
	end
'send'/2 =
    %% Line 245
    fun (_cor1,_cor0) ->
	%% Line 246
	call 'prim_inet':'send'
	    (_cor1, _cor0)
'setopts'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 254
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 259
			      Opt|_cor3]> when 'true' ->
				let <_cor7> =
				    case Opt of
				      %% Line 255
				      <{'netns',NS}> when 'true' ->
					  let <_cor5> =
					      %% Line 256
					      apply 'filename2binary'/1
						  (NS)
					  in  %% Line 256
					      {'netns',_cor5}
				      %% Line 257
				      <_cor13> when 'true' ->
					  %% Line 258
					  Opt
				    end
				in  let <_cor8> =
					%% Line 259
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor7|_cor8]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 260
	    call 'prim_inet':'setopts'
		(_cor1, _cor9)
'getopts'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	%% Line 269
	case call 'prim_inet':'getopts'
		 (_cor1, _cor0) of
	  %% Line 270
	  <{'ok',OptionValues}> when 'true' ->
	      let <_cor9> =
		  %% Line 272
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[%% Line 277
				    OptionValue|_cor3]> when 'true' ->
				      let <_cor7> =
					  case OptionValue of
					    %% Line 273
					    <{'netns',Bin}> when 'true' ->
						let <_cor5> =
						    %% Line 274
						    apply 'binary2filename'/1
							(Bin)
						in  %% Line 274
						    {'netns',_cor5}
					    %% Line 275
					    <_cor13> when 'true' ->
						%% Line 276
						OptionValue
					  end
				      in  let <_cor8> =
					      %% Line 277
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 277
			     OptionValues)
		    -| ['list_comprehension'] )
	      in  %% Line 271
		  {'ok',_cor9}
	  %% Line 278
	  <Other> when 'true' ->
	      %% Line 279
	      Other
	end
'getifaddrs'/1 =
    %% Line 285
    fun (_cor0) ->
	%% Line 286
	call 'prim_inet':'getifaddrs'
	    (_cor0)
'getifaddrs'/0 =
    %% Line 302
    fun () ->
	let <_cor2> =
	    %% Line 303
	    ( fun (_cor0) ->
		  call 'prim_inet':'getifaddrs'
		      (_cor0)
	      -| [{'id',{0,0,'-getifaddrs/0-fun-0-'}}] )
	in  %% Line 303
	    apply 'withsocket'/1
		(_cor2)
'getiflist'/1 =
    %% Line 308
    fun (_cor0) ->
	%% Line 309
	call 'prim_inet':'getiflist'
	    (_cor0)
'getiflist'/0 =
    %% Line 313
    fun () ->
	let <_cor2> =
	    %% Line 314
	    ( fun (_cor0) ->
		  call 'prim_inet':'getiflist'
		      (_cor0)
	      -| [{'id',{0,0,'-getiflist/0-fun-0-'}}] )
	in  %% Line 314
	    apply 'withsocket'/1
		(_cor2)
'ifget'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	%% Line 322
	call 'prim_inet':'ifget'
	    (_cor2, _cor1, _cor0)
'ifget'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 328
	    ( fun (_cor2) ->
		  call 'prim_inet':'ifget'
		      (_cor2, _cor1, _cor0)
	      -| [{'id',{0,0,'-ifget/2-fun-0-'}}] )
	in  %% Line 328
	    apply 'withsocket'/1
		(_cor4)
'ifset'/3 =
    %% Line 335
    fun (_cor2,_cor1,_cor0) ->
	%% Line 336
	call 'prim_inet':'ifset'
	    (_cor2, _cor1, _cor0)
'ifset'/2 =
    %% Line 341
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 342
	    ( fun (_cor2) ->
		  call 'prim_inet':'ifset'
		      (_cor2, _cor1, _cor0)
	      -| [{'id',{0,0,'-ifset/2-fun-0-'}}] )
	in  %% Line 342
	    apply 'withsocket'/1
		(_cor4)
'getif'/0 =
    %% Line 348
    fun () ->
	let <_cor2> =
	    %% Line 349
	    ( fun (_cor0) ->
		  apply 'getif'/1
		      (_cor0)
	      -| [{'id',{0,0,'-getif/0-fun-0-'}}] )
	in  %% Line 349
	    apply 'withsocket'/1
		(_cor2)
'getif'/1 =
    %% Line 356
    fun (_cor0) ->
	%% Line 357
	case call 'prim_inet':'getiflist'
		 (_cor0) of
	  %% Line 358
	  <{'ok',IfList}> when 'true' ->
	      let <_cor6> =
		  %% Line 360
		  ( fun (_cor3,_cor2) ->
			%% Line 361
			case call 'prim_inet':'ifget'
				 (_cor0, _cor3, %% Line 362
						['addr'|['broadaddr'|['netmask']]]) of
			  %% Line 363
			  <{'ok',[{'addr',A}|[{'broadaddr',B}|[{'netmask',M}|[]]]]}> when 'true' ->
			      %% Line 364
			      [{A,B,M}|_cor2]
			  %% Line 366
			  <{'ok',[{'addr',A}|[{'netmask',M}|[]]]}> when 'true' ->
			      %% Line 367
			      [{A,'undefined',M}|_cor2]
			  %% Line 368
			  <_cor10> when 'true' ->
			      _cor2
			end
		    -| [{'id',{0,0,'-getif/1-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 359
		      call 'lists':'foldl'
			  (_cor6, %% Line 371
				  [], %% Line 371
				      IfList)
		  in  %% Line 359
		      {'ok',_cor7}
	  %% Line 372
	  <Error> when 'true' ->
	      Error
	end
'withsocket'/1 =
    %% Line 375
    fun (_cor0) ->
	%% Line 376
	case call 'inet_udp':'open'
		 (0, []) of
	  %% Line 377
	  <{'ok',Socket}> when 'true' ->
	      let <Res> =
		  %% Line 378
		  apply _cor0
		      (Socket)
	      in  do  %% Line 379
		      call 'inet_udp':'close'
			  (Socket)
		      %% Line 380
		      Res
	  %% Line 381
	  <Error> when 'true' ->
	      %% Line 382
	      Error
	end
'pushf'/3 =
    %% Line 385
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Socket,Fun,_X_State>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 386
	      {'error','einval'}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'pushf',3}}] )
	    -| ['compiler_generated'] )
	end
'popf'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	{'error','einval'}
'gethostname'/0 =
    %% Line 402
    fun () ->
	%% Line 403
	case call 'inet_udp':'open'
		 (0, []) of
	  %% Line 404
	  <{'ok',U}> when 'true' ->
	      %% Line 405
	      case apply 'gethostname'/1
		       (U) of
		<{'ok',Res}> when 'true' ->
		    do  %% Line 406
			call 'inet_udp':'close'
			    (U)
			let <_cor3> =
			    %% Line 407
			    ( fun (_cor1) ->
				  case _cor1 of
				    <46> when 'true' ->
					'false'
				    <_cor6> when 'true' ->
					'true'
				  end
			      -| [{'id',{0,0,'-gethostname/0-fun-0-'}}] )
			in  %% Line 407
			    case call 'lists':'splitwith'
				     (_cor3, Res) of
			      <{Res2,_cor7}> when 'true' ->
				  %% Line 408
				  {'ok',Res2}
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		( <_cor0> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 409
	  <_cor8> when 'true' ->
	      %% Line 410
	      {'ok',[110|[111|[104|[111|[115|[116|[46|[110|[111|[100|[111|[109|[97|[105|[110]]]]]]]]]]]]]]]}
	end
'gethostname'/1 =
    %% Line 416
    fun (_cor0) ->
	%% Line 417
	call 'prim_inet':'gethostname'
	    (_cor0)
'getstat'/1 =
    %% Line 424
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 425
	    apply 'stats'/0
		()
	in  %% Line 425
	    call 'prim_inet':'getstat'
		(_cor0, _cor1)
'getstat'/2 =
    %% Line 433
    fun (_cor1,_cor0) ->
	%% Line 434
	call 'prim_inet':'getstat'
	    (_cor1, _cor0)
'gethostbyname'/1 =
    %% Line 440
    fun (_cor0) ->
	%% Line 441
	apply 'gethostbyname_tm'/3
	    (_cor0, 'inet', 'false')
'gethostbyname'/2 =
    %% Line 449
    fun (_cor1,_cor0) ->
	%% Line 450
	apply 'gethostbyname_tm'/3
	    (_cor1, _cor0, 'false')
'gethostbyname'/3 =
    %% Line 457
    fun (_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 458
	    apply 'start_timer'/1
		(_cor0)
	in  let <Res> =
		%% Line 459
		apply 'gethostbyname_tm'/3
		    (_cor2, _cor1, Timer)
	    in  do  %% Line 460
		    apply 'stop_timer'/1
			(Timer)
		    %% Line 461
		    Res
'gethostbyname_tm'/3 =
    %% Line 463
    fun (_cor2,_cor1,_cor0) ->
	let <Opts0> =
	    %% Line 464
	    call 'inet_db':'res_option'
		('lookup')
	in  let <_cor8> =
		%% Line 466
		( case call 'lists':'member'
			   ('native', Opts0) of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  'true'
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  %% Line 467
			  ( case call 'lists':'member'
				     ('string', Opts0) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 468
				    call 'lists':'member'
					('nostring', Opts0)
				-| ['compiler_generated'] )
			      ( <_cor5> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor5}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_cor4}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  let <_cor10> =
		    %% Line 466
		    case _cor8 of
		      %% Line 469
		      <'true'> when 'true' ->
			  %% Line 470
			  Opts0
		      %% Line 471
		      <'false'> when 'true' ->
			  %% Line 472
			  ['string'|Opts0]
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		in  %% Line 474
		    apply 'gethostbyname_tm'/4
			(_cor2, _cor1, _cor0, _cor10)
'gethostbyaddr'/1 =
    %% Line 481
    fun (_cor0) ->
	%% Line 482
	apply 'gethostbyaddr_tm'/2
	    (_cor0, 'false')
'gethostbyaddr'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	let <Timer> =
	    %% Line 489
	    apply 'start_timer'/1
		(_cor0)
	in  let <Res> =
		%% Line 490
		apply 'gethostbyaddr_tm'/2
		    (_cor1, Timer)
	    in  do  %% Line 491
		    apply 'stop_timer'/1
			(Timer)
		    %% Line 492
		    Res
'gethostbyaddr_tm'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 495
	    call 'inet_db':'res_option'
		('lookup')
	in  %% Line 495
	    apply 'gethostbyaddr_tm'/3
		(_cor1, _cor0, _cor2)
'ip'/1 =
    %% Line 500
    fun (_cor0) ->
	case _cor0 of
	  <{A,B,C,D}>
	      when try
		    let <_cor2> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor3> =
			    call 'erlang':'bor'
				(_cor2, C)
			in  let <_cor4> =
				call 'erlang':'bor'
				    (_cor3, D)
			    in  let <_cor5> =
				    call 'erlang':'band'
					(_cor4, -256)
				in  call 'erlang':'=:='
					(_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 501
	      {'ok',{A,B,C,D}}
	  %% Line 502
	  <Name> when 'true' ->
	      %% Line 503
	      case apply 'gethostbyname'/1
		       (Name) of
		%% Line 504
		<{'ok',Ent}> when 'true' ->
		    %% Line 505
		    ( case Ent of
			( <( {'hostent',_cor11,_cor12,_cor13,_cor14,_rec0}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor8> =
				  call 'erlang':'hd'
				      (_rec0)
			      in  {'ok',_cor8}
			  -| ['compiler_generated'] )
			( <_cor15> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','hostent'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 506
		<Error> when 'true' ->
		    Error
	      end
	end
'getll'/1 =
    %% Line 513
    fun (_cor0) ->
	case _cor0 of
	  <Socket>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 514
	      {'ok',Socket}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getll',1}}] )
	    -| ['compiler_generated'] )
	end
'getfd'/1 =
    %% Line 523
    fun (_cor0) ->
	%% Line 524
	call 'prim_inet':'getfd'
	    (_cor0)
'getaddr'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	%% Line 536
	apply 'getaddr'/3
	    (_cor1, _cor0, 'infinity')
'getaddr'/3 =
    %% Line 543
    fun (_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 544
	    apply 'start_timer'/1
		(_cor0)
	in  let <Res> =
		%% Line 545
		apply 'getaddr_tm'/3
		    (_cor2, _cor1, Timer)
	    in  do  %% Line 546
		    apply 'stop_timer'/1
			(Timer)
		    %% Line 547
		    Res
'getaddr_tm'/3 =
    %% Line 549
    fun (_cor2,_cor1,_cor0) ->
	%% Line 550
	case apply 'getaddrs_tm'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 551
	  <{'ok',[IP|_cor7]}> when 'true' ->
	      {'ok',IP}
	  %% Line 552
	  <Error> when 'true' ->
	      Error
	end
'getaddrs'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	%% Line 562
	apply 'getaddrs'/3
	    (_cor1, _cor0, 'infinity')
'getaddrs'/3 =
    %% Line 569
    fun (_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 570
	    apply 'start_timer'/1
		(_cor0)
	in  let <Res> =
		%% Line 571
		apply 'getaddrs_tm'/3
		    (_cor2, _cor1, Timer)
	    in  do  %% Line 572
		    apply 'stop_timer'/1
			(Timer)
		    %% Line 573
		    Res
'getservbyport'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	%% Line 579
	case call 'inet_udp':'open'
		 (0, []) of
	  %% Line 580
	  <{'ok',U}> when 'true' ->
	      let <Res> =
		  %% Line 581
		  call 'prim_inet':'getservbyport'
		      (U, _cor1, _cor0)
	      in  do  %% Line 582
		      call 'inet_udp':'close'
			  (U)
		      %% Line 583
		      Res
	  %% Line 584
	  <Error> when 'true' ->
	      Error
	end
'getservbyname'/2 =
    %% Line 591
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Protocol>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 592
	      case call 'inet_udp':'open'
		       (0, []) of
		%% Line 593
		<{'ok',U}> when 'true' ->
		    let <Res> =
			%% Line 594
			call 'prim_inet':'getservbyname'
			    (U, Name, Protocol)
		    in  do  %% Line 595
			    call 'inet_udp':'close'
				(U)
			    %% Line 596
			    Res
		%% Line 597
		<Error> when 'true' ->
		    Error
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'getservbyname',2}}] )
	    -| ['compiler_generated'] )
	end
'ntoa'/1 =
    %% Line 603
    fun (_cor0) ->
	%% Line 604
	call 'inet_parse':'ntoa'
	    (_cor0)
'parse_ipv4_address'/1 =
    %% Line 610
    fun (_cor0) ->
	%% Line 611
	call 'inet_parse':'ipv4_address'
	    (_cor0)
'parse_ipv6_address'/1 =
    %% Line 617
    fun (_cor0) ->
	%% Line 618
	call 'inet_parse':'ipv6_address'
	    (_cor0)
'parse_ipv4strict_address'/1 =
    %% Line 624
    fun (_cor0) ->
	%% Line 625
	call 'inet_parse':'ipv4strict_address'
	    (_cor0)
'parse_ipv6strict_address'/1 =
    %% Line 631
    fun (_cor0) ->
	%% Line 632
	call 'inet_parse':'ipv6strict_address'
	    (_cor0)
'parse_address'/1 =
    %% Line 638
    fun (_cor0) ->
	%% Line 639
	call 'inet_parse':'address'
	    (_cor0)
'parse_strict_address'/1 =
    %% Line 645
    fun (_cor0) ->
	%% Line 646
	call 'inet_parse':'strict_address'
	    (_cor0)
'options'/0 =
    %% Line 649
    fun () ->
	%% Line 650
	['tos'|['priority'|['reuseaddr'|['keepalive'|['dontroute'|['linger'|['broadcast'|['sndbuf'|['recbuf'|['nodelay'|['ipv6_v6only'|['buffer'|['header'|['active'|['packet'|['deliver'|['mode'|['multicast_if'|['multicast_ttl'|['multicast_loop'|['exit_on_close'|['high_watermark'|['low_watermark'|['high_msgq_watermark'|['low_msgq_watermark'|['send_timeout'|['send_timeout_close']]]]]]]]]]]]]]]]]]]]]]]]]]]
'stats'/0 =
    %% Line 664
    fun () ->
	%% Line 665
	['recv_oct'|['recv_cnt'|['recv_max'|['recv_avg'|['recv_dvi'|['send_oct'|['send_cnt'|['send_max'|['send_avg'|['send_pend']]]]]]]]]]
'connect_options'/0 =
    %% Line 671
    fun () ->
	%% Line 672
	['tos'|['priority'|['reuseaddr'|['keepalive'|['linger'|['sndbuf'|['recbuf'|['nodelay'|['header'|['active'|['packet'|['packet_size'|['buffer'|['mode'|['deliver'|['exit_on_close'|['high_watermark'|['low_watermark'|['high_msgq_watermark'|['low_msgq_watermark'|['send_timeout'|['send_timeout_close'|['delay_send'|['raw']]]]]]]]]]]]]]]]]]]]]]]]
'connect_options'/2 =
    %% Line 677
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 679
	    case call 'application':'get_env'
		     ('kernel', 'inet_default_connect_options') of
	      %% Line 680
	      <{'ok',List}>
		  when call 'erlang':'is_list'
			(List) ->
		  let <_cor2> =
		      %% Line 681
		      call 'lists':'keydelete'
			  ('active', 1, List)
		  in  let <NList> =
			  %% Line 681
			  [{'active','true'}|_cor2]
		      in  %% Line 682
			  {'connect_opts','any',0,-1,NList}
	      %% Line 683
	      <{'ok',{'active',_X_Bool}}> when 'true' ->
		  %% Line 684
		  {'connect_opts','any',0,-1,[{'active','true'}]}
	      %% Line 685
	      <{'ok',Option}> when 'true' ->
		  %% Line 686
		  {'connect_opts','any',0,-1,[{'active','true'}|[Option|[]]]}
	      %% Line 687
	      <_cor21> when 'true' ->
		  %% Line 688
		  {'connect_opts','any',0,-1,[{'active','true'}]}
	    end
	in  let <_cor11> =
		%% Line 690
		apply 'connect_options'/0
		    ()
	    in  %% Line 690
		case apply 'con_opt'/3
			 (_cor1, _cor9, _cor11) of
		  %% Line 691
		  <{'ok',R}> when 'true' ->
		      %% Line 693
		      ( case R of
			  ( <( {'connect_opts',_rec3,_cor22,_cor23,_cor24}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_rec1> =
				    apply 'translate_ip'/2
					(_rec3, _cor0)
				in  let <_cor17> =
					call 'erlang':'setelement'
					    (2, R, _rec1)
				    in  {'ok',_cor17}
			    -| ['compiler_generated'] )
			  ( <_cor25> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','connect_opts'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 695
		  <Error> when 'true' ->
		      Error
		end
'con_opt'/3 =
    %% Line 698
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'raw',A,B,C}|Opts],R,As> when 'true' ->
	      %% Line 699
	      apply 'con_opt'/3
		  ([{'raw',{A,B,C}}|Opts], R, As)
	  %% Line 700
	  <[Opt|Opts],R,As> when 'true' ->
	      %% Line 701
	      case Opt of
		%% Line 702
		<{'ip',IP}> when 'true' ->
		    case R of
		      <{'connect_opts',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'con_opt'/3
				  (Opts, _cor5, As)
		      ( <_cor41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','connect_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 703
		<{'ifaddr',IP}> when 'true' ->
		    case R of
		      <{'connect_opts',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
			  let <_cor8> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'con_opt'/3
				  (Opts, _cor8, As)
		      ( <_cor46> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','connect_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 704
		<{'port',P}> when 'true' ->
		    case R of
		      <{'connect_opts',_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			  let <_cor11> =
			      call 'erlang':'setelement'
				  (3, R, P)
			  in  apply 'con_opt'/3
				  (Opts, _cor11, As)
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','connect_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 705
		<{'fd',Fd}> when 'true' ->
		    case R of
		      <{'connect_opts',_cor52,_cor53,_cor54,_cor55}> when 'true' ->
			  let <_cor14> =
			      call 'erlang':'setelement'
				  (4, R, Fd)
			  in  apply 'con_opt'/3
				  (Opts, _cor14, As)
		      ( <_cor56> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','connect_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 706
		<'binary'> when 'true' ->
		    apply 'con_add'/5
			('mode', 'binary', R, Opts, As)
		%% Line 707
		<'list'> when 'true' ->
		    apply 'con_add'/5
			('mode', 'list', R, Opts, As)
		%% Line 708
		<{'tcp_module',_cor57}> when 'true' ->
		    apply 'con_opt'/3
			(Opts, R, As)
		%% Line 709
		<'inet'> when 'true' ->
		    apply 'con_opt'/3
			(Opts, R, As)
		%% Line 710
		<'inet6'> when 'true' ->
		    apply 'con_opt'/3
			(Opts, R, As)
		%% Line 711
		<{'netns',NS}> when 'true' ->
		    let <BinNS> =
			%% Line 712
			apply 'filename2binary'/1
			    (NS)
		    in  %% Line 713
			case call 'prim_inet':'is_sockopt_val'
				 ('netns', BinNS) of
			  %% Line 714
			  <'true'> when 'true' ->
			      let <_rec8> =
				  %% Line 715
				  [{'netns',BinNS}|[]]
			      in  %% Line 715
				  case R of
				    <{'connect_opts',_cor58,_cor59,_cor60,_cor61}> when 'true' ->
					let <_cor19> =
					    call 'erlang':'setelement'
						(4, R, _rec8)
					in  apply 'con_opt'/3
						(Opts, _cor19, As)
				    ( <_cor62> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','connect_opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  %% Line 716
			  <'false'> when 'true' ->
			      %% Line 717
			      {'error','badarg'}
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		%% Line 719
		<{'active',N}>
		    when try
			  let <_cor21> =
			      call 'erlang':'is_integer'
				  (N)
			  in  let <_cor22> =
				  call 'erlang':'<'
				      (N, 32768)
			      in  let <_cor24> =
				      call 'erlang':'>='
					  (N, -32768)
				  in  let <_cor25> =
					  call 'erlang':'and'
					      (_cor22, _cor24)
				      in  call 'erlang':'and'
					      (_cor21, _cor25)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 720
		    ( case R of
			( <( {'connect_opts',_cor63,_cor64,_cor65,_rec10}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NOpts> =
				  call 'lists':'keydelete'
				      ('active', 1, _rec10)
			      in  let <_rec11> =
				      %% Line 721
				      [{'active',N}|NOpts]
				  in  let <_cor32> =
					  %% Line 721
					  call 'erlang':'setelement'
					      (5, R, _rec11)
				      in  %% Line 721
					  apply 'con_opt'/3
					      (Opts, _cor32, As)
			  -| ['compiler_generated'] )
			( <_cor66> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','connect_opts'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 722
		<{Name,Val}>
		    when call 'erlang':'is_atom'
			  (Name) ->
		    apply 'con_add'/5
			(Name, Val, R, Opts, As)
		%% Line 723
		<_cor72> when 'true' ->
		    {'error','badarg'}
	      end
	  %% Line 725
	  <[],R,_cor73> when 'true' ->
	      %% Line 726
	      {'ok',R}
	  ( <_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34})
		  -| [{'function_name',{'con_opt',3}}] )
	    -| ['compiler_generated'] )
	end
'con_add'/5 =
    %% Line 728
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 729
	( case _cor2 of
	    ( <( {'connect_opts',_cor16,_cor17,_cor18,_rec13}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'add_opt'/4
			   (_cor4, _cor3, _rec13, _cor0) of
		    %% Line 730
		    <{'ok',SOpts}> when 'true' ->
			let <_cor9> =
			    %% Line 731
			    call 'erlang':'setelement'
				(5, _cor2, SOpts)
			in  %% Line 731
			    apply 'con_opt'/3
				(_cor1, _cor9, _cor0)
		    %% Line 732
		    <Error> when 'true' ->
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','connect_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'listen_options'/0 =
    %% Line 738
    fun () ->
	%% Line 739
	['tos'|['priority'|['reuseaddr'|['keepalive'|['linger'|['sndbuf'|['recbuf'|['nodelay'|['header'|['active'|['packet'|['buffer'|['mode'|['deliver'|['backlog'|['ipv6_v6only'|['exit_on_close'|['high_watermark'|['low_watermark'|['high_msgq_watermark'|['low_msgq_watermark'|['send_timeout'|['send_timeout_close'|['delay_send'|['packet_size'|['raw']]]]]]]]]]]]]]]]]]]]]]]]]]
'listen_options'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 747
	    case call 'application':'get_env'
		     ('kernel', 'inet_default_listen_options') of
	      %% Line 748
	      <{'ok',List}>
		  when call 'erlang':'is_list'
			(List) ->
		  let <_cor2> =
		      %% Line 749
		      call 'lists':'keydelete'
			  ('active', 1, List)
		  in  let <NList> =
			  %% Line 749
			  [{'active','true'}|_cor2]
		      in  %% Line 750
			  {'listen_opts','any',0,5,-1,NList}
	      %% Line 751
	      <{'ok',{'active',_X_Bool}}> when 'true' ->
		  %% Line 752
		  {'listen_opts','any',0,5,-1,[{'active','true'}]}
	      %% Line 753
	      <{'ok',Option}> when 'true' ->
		  %% Line 754
		  {'listen_opts','any',0,5,-1,[{'active','true'}|[Option|[]]]}
	      %% Line 755
	      <_cor21> when 'true' ->
		  %% Line 756
		  {'listen_opts','any',0,5,-1,[{'active','true'}]}
	    end
	in  let <_cor11> =
		%% Line 758
		apply 'listen_options'/0
		    ()
	    in  %% Line 758
		case apply 'list_opt'/3
			 (_cor1, _cor9, _cor11) of
		  %% Line 759
		  <{'ok',R}> when 'true' ->
		      %% Line 761
		      ( case R of
			  ( <( {'listen_opts',_rec17,_cor22,_cor23,_cor24,_cor25}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_rec15> =
				    apply 'translate_ip'/2
					(_rec17, _cor0)
				in  let <_cor17> =
					call 'erlang':'setelement'
					    (2, R, _rec15)
				    in  {'ok',_cor17}
			    -| ['compiler_generated'] )
			  ( <_cor26> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','listen_opts'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 763
		  <Error> when 'true' ->
		      Error
		end
'list_opt'/3 =
    %% Line 766
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'raw',A,B,C}|Opts],R,As> when 'true' ->
	      %% Line 767
	      apply 'list_opt'/3
		  ([{'raw',{A,B,C}}|Opts], R, As)
	  %% Line 768
	  <[Opt|Opts],R,As> when 'true' ->
	      %% Line 769
	      case Opt of
		%% Line 770
		<{'ip',IP}> when 'true' ->
		    case R of
		      <{'listen_opts',_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'list_opt'/3
				  (Opts, _cor5, As)
		      ( <_cor45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','listen_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 771
		<{'ifaddr',IP}> when 'true' ->
		    case R of
		      <{'listen_opts',_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			  let <_cor8> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'list_opt'/3
				  (Opts, _cor8, As)
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','listen_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 772
		<{'port',P}> when 'true' ->
		    case R of
		      <{'listen_opts',_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
			  let <_cor11> =
			      call 'erlang':'setelement'
				  (3, R, P)
			  in  apply 'list_opt'/3
				  (Opts, _cor11, As)
		      ( <_cor57> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','listen_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 773
		<{'fd',Fd}> when 'true' ->
		    case R of
		      <{'listen_opts',_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
			  let <_cor14> =
			      call 'erlang':'setelement'
				  (5, R, Fd)
			  in  apply 'list_opt'/3
				  (Opts, _cor14, As)
		      ( <_cor63> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','listen_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 774
		<{'backlog',BL}> when 'true' ->
		    case R of
		      <{'listen_opts',_cor64,_cor65,_cor66,_cor67,_cor68}> when 'true' ->
			  let <_cor17> =
			      call 'erlang':'setelement'
				  (4, R, BL)
			  in  apply 'list_opt'/3
				  (Opts, _cor17, As)
		      ( <_cor69> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','listen_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 775
		<'binary'> when 'true' ->
		    apply 'list_add'/5
			('mode', 'binary', R, Opts, As)
		%% Line 776
		<'list'> when 'true' ->
		    apply 'list_add'/5
			('mode', 'list', R, Opts, As)
		%% Line 777
		<{'tcp_module',_cor70}> when 'true' ->
		    apply 'list_opt'/3
			(Opts, R, As)
		%% Line 778
		<'inet'> when 'true' ->
		    apply 'list_opt'/3
			(Opts, R, As)
		%% Line 779
		<'inet6'> when 'true' ->
		    apply 'list_opt'/3
			(Opts, R, As)
		%% Line 780
		<{'netns',NS}> when 'true' ->
		    let <BinNS> =
			%% Line 781
			apply 'filename2binary'/1
			    (NS)
		    in  %% Line 782
			case call 'prim_inet':'is_sockopt_val'
				 ('netns', BinNS) of
			  %% Line 783
			  <'true'> when 'true' ->
			      let <_rec23> =
				  %% Line 784
				  [{'netns',BinNS}|[]]
			      in  %% Line 784
				  case R of
				    <{'listen_opts',_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
					let <_cor22> =
					    call 'erlang':'setelement'
						(5, R, _rec23)
					in  apply 'list_opt'/3
						(Opts, _cor22, As)
				    ( <_cor76> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','listen_opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  %% Line 785
			  <'false'> when 'true' ->
			      %% Line 786
			      {'error','badarg'}
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
		%% Line 788
		<{'active',N}>
		    when try
			  let <_cor24> =
			      call 'erlang':'is_integer'
				  (N)
			  in  let <_cor25> =
				  call 'erlang':'<'
				      (N, 32768)
			      in  let <_cor27> =
				      call 'erlang':'>='
					  (N, -32768)
				  in  let <_cor28> =
					  call 'erlang':'and'
					      (_cor25, _cor27)
				      in  call 'erlang':'and'
					      (_cor24, _cor28)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 789
		    ( case R of
			( <( {'listen_opts',_cor77,_cor78,_cor79,_cor80,_rec25}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NOpts> =
				  call 'lists':'keydelete'
				      ('active', 1, _rec25)
			      in  let <_rec26> =
				      %% Line 790
				      [{'active',N}|NOpts]
				  in  let <_cor35> =
					  %% Line 790
					  call 'erlang':'setelement'
					      (6, R, _rec26)
				      in  %% Line 790
					  apply 'list_opt'/3
					      (Opts, _cor35, As)
			  -| ['compiler_generated'] )
			( <_cor81> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','listen_opts'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 791
		<{Name,Val}>
		    when call 'erlang':'is_atom'
			  (Name) ->
		    apply 'list_add'/5
			(Name, Val, R, Opts, As)
		%% Line 792
		<_cor88> when 'true' ->
		    {'error','badarg'}
	      end
	  %% Line 794
	  <[],R,_X_SockOpts> when 'true' ->
	      %% Line 795
	      {'ok',R}
	  ( <_cor39,_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38,_cor37})
		  -| [{'function_name',{'list_opt',3}}] )
	    -| ['compiler_generated'] )
	end
'list_add'/5 =
    %% Line 797
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 798
	( case _cor2 of
	    ( <( {'listen_opts',_cor16,_cor17,_cor18,_cor19,_rec28}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'add_opt'/4
			   (_cor4, _cor3, _rec28, _cor0) of
		    %% Line 799
		    <{'ok',SOpts}> when 'true' ->
			let <_cor9> =
			    %% Line 800
			    call 'erlang':'setelement'
				(6, _cor2, SOpts)
			in  %% Line 800
			    apply 'list_opt'/3
				(_cor1, _cor9, _cor0)
		    %% Line 801
		    <Error> when 'true' ->
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','listen_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'udp_options'/0 =
    %% Line 807
    fun () ->
	%% Line 808
	['tos'|['priority'|['reuseaddr'|['sndbuf'|['recbuf'|['header'|['active'|['buffer'|['mode'|['deliver'|['ipv6_v6only'|['broadcast'|['dontroute'|['multicast_if'|['multicast_ttl'|['multicast_loop'|['add_membership'|['drop_membership'|['read_packets'|['raw'|['high_msgq_watermark'|['low_msgq_watermark']]]]]]]]]]]]]]]]]]]]]]
'udp_options'/2 =
    %% Line 815
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 816
	    apply 'udp_options'/0
		()
	in  %% Line 816
	    case apply 'udp_opt'/3
		     (_cor1, {'udp_opts','any',0,-1,[{'active','true'}]}, _cor2) of
	      %% Line 817
	      <{'ok',R}> when 'true' ->
		  %% Line 819
		  ( case R of
		      ( <( {'udp_opts',_rec32,_cor13,_cor14,_cor15}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec30> =
				apply 'translate_ip'/2
				    (_rec32, _cor0)
			    in  let <_cor9> =
				    call 'erlang':'setelement'
					(2, R, _rec30)
				in  {'ok',_cor9}
			-| ['compiler_generated'] )
		      ( <_cor16> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','udp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 821
	      <Error> when 'true' ->
		  Error
	    end
'udp_opt'/3 =
    %% Line 824
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'raw',A,B,C}|Opts],R,As> when 'true' ->
	      %% Line 825
	      apply 'udp_opt'/3
		  ([{'raw',{A,B,C}}|Opts], R, As)
	  %% Line 826
	  <[Opt|Opts],R,As> when 'true' ->
	      %% Line 827
	      case Opt of
		%% Line 828
		<{'ip',IP}> when 'true' ->
		    case R of
		      <{'udp_opts',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'udp_opt'/3
				  (Opts, _cor5, As)
		      ( <_cor41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','udp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 829
		<{'ifaddr',IP}> when 'true' ->
		    case R of
		      <{'udp_opts',_cor42,_cor43,_cor44,_cor45}> when 'true' ->
			  let <_cor8> =
			      call 'erlang':'setelement'
				  (2, R, IP)
			  in  apply 'udp_opt'/3
				  (Opts, _cor8, As)
		      ( <_cor46> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','udp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 830
		<{'port',P}> when 'true' ->
		    case R of
		      <{'udp_opts',_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			  let <_cor11> =
			      call 'erlang':'setelement'
				  (3, R, P)
			  in  apply 'udp_opt'/3
				  (Opts, _cor11, As)
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','udp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 831
		<{'fd',Fd}> when 'true' ->
		    case R of
		      <{'udp_opts',_cor52,_cor53,_cor54,_cor55}> when 'true' ->
			  let <_cor14> =
			      call 'erlang':'setelement'
				  (4, R, Fd)
			  in  apply 'udp_opt'/3
				  (Opts, _cor14, As)
		      ( <_cor56> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','udp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 832
		<'binary'> when 'true' ->
		    apply 'udp_add'/5
			('mode', 'binary', R, Opts, As)
		%% Line 833
		<'list'> when 'true' ->
		    apply 'udp_add'/5
			('mode', 'list', R, Opts, As)
		%% Line 834
		<{'udp_module',_cor57}> when 'true' ->
		    apply 'udp_opt'/3
			(Opts, R, As)
		%% Line 835
		<'inet'> when 'true' ->
		    apply 'udp_opt'/3
			(Opts, R, As)
		%% Line 836
		<'inet6'> when 'true' ->
		    apply 'udp_opt'/3
			(Opts, R, As)
		%% Line 837
		<{'netns',NS}> when 'true' ->
		    let <BinNS> =
			%% Line 838
			apply 'filename2binary'/1
			    (NS)
		    in  %% Line 839
			case call 'prim_inet':'is_sockopt_val'
				 ('netns', BinNS) of
			  %% Line 840
			  <'true'> when 'true' ->
			      let <_rec37> =
				  %% Line 841
				  [{'netns',BinNS}|[]]
			      in  %% Line 841
				  case R of
				    <{'udp_opts',_cor58,_cor59,_cor60,_cor61}> when 'true' ->
					let <_cor19> =
					    call 'erlang':'setelement'
						(4, R, _rec37)
					in  apply 'list_opt'/3
						(Opts, _cor19, As)
				    ( <_cor62> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','udp_opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  %% Line 842
			  <'false'> when 'true' ->
			      %% Line 843
			      {'error','badarg'}
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		%% Line 845
		<{'active',N}>
		    when try
			  let <_cor21> =
			      call 'erlang':'is_integer'
				  (N)
			  in  let <_cor22> =
				  call 'erlang':'<'
				      (N, 32768)
			      in  let <_cor24> =
				      call 'erlang':'>='
					  (N, -32768)
				  in  let <_cor25> =
					  call 'erlang':'and'
					      (_cor22, _cor24)
				      in  call 'erlang':'and'
					      (_cor21, _cor25)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 846
		    ( case R of
			( <( {'udp_opts',_cor63,_cor64,_cor65,_rec39}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NOpts> =
				  call 'lists':'keydelete'
				      ('active', 1, _rec39)
			      in  let <_rec40> =
				      %% Line 847
				      [{'active',N}|NOpts]
				  in  let <_cor32> =
					  %% Line 847
					  call 'erlang':'setelement'
					      (5, R, _rec40)
				      in  %% Line 847
					  apply 'udp_opt'/3
					      (Opts, _cor32, As)
			  -| ['compiler_generated'] )
			( <_cor66> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','udp_opts'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 848
		<{Name,Val}>
		    when call 'erlang':'is_atom'
			  (Name) ->
		    apply 'udp_add'/5
			(Name, Val, R, Opts, As)
		%% Line 849
		<_cor72> when 'true' ->
		    {'error','badarg'}
	      end
	  %% Line 851
	  <[],R,_X_SockOpts> when 'true' ->
	      %% Line 852
	      {'ok',R}
	  ( <_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34})
		  -| [{'function_name',{'udp_opt',3}}] )
	    -| ['compiler_generated'] )
	end
'udp_add'/5 =
    %% Line 854
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 855
	( case _cor2 of
	    ( <( {'udp_opts',_cor16,_cor17,_cor18,_rec42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'add_opt'/4
			   (_cor4, _cor3, _rec42, _cor0) of
		    %% Line 856
		    <{'ok',SOpts}> when 'true' ->
			let <_cor9> =
			    %% Line 857
			    call 'erlang':'setelement'
				(5, _cor2, SOpts)
			in  %% Line 857
			    apply 'udp_opt'/3
				(_cor1, _cor9, _cor0)
		    %% Line 858
		    <Error> when 'true' ->
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','udp_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'sctp_options'/0 =
    %% Line 874
    fun () ->
	%% Line 875
	['mode'|['active'|['buffer'|['tos'|['priority'|['dontroute'|['reuseaddr'|['linger'|['sndbuf'|['recbuf'|['ipv6_v6only'|['high_msgq_watermark'|['low_msgq_watermark'|['sctp_rtoinfo'|['sctp_associnfo'|['sctp_initmsg'|['sctp_autoclose'|['sctp_nodelay'|['sctp_disable_fragments'|['sctp_i_want_mapped_v4_addr'|['sctp_maxseg'|['sctp_primary_addr'|['sctp_set_peer_primary_addr'|['sctp_adaptation_layer'|['sctp_peer_addr_params'|['sctp_default_send_param'|['sctp_events'|['sctp_delayed_ack_time'|['sctp_status'|['sctp_get_peer_addr_info']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'sctp_options'/2 =
    %% Line 889
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 890
	    apply 'sctp_options'/0
		()
	in  %% Line 890
	    case apply 'sctp_opt'/4
		     (_cor1, _cor0, {'sctp_opts','undefined',0,-1,'seqpacket',[{'mode','binary'}|[{'buffer',65536}|[{'sndbuf',65536}|[{'recbuf',1024}|[{'sctp_events','undefined'}]]]]]}, _cor2) of
	      %% Line 891
	      <{'ok',SO = {'sctp_opts','undefined',_cor11,_cor12,_cor13,_cor14}}> when 'true' ->
		  let <_rec44> =
		      %% Line 892
		      call _cor0:'translate_ip'
			  ('any')
		  in  let <_cor7> =
			  %% Line 892
			  call 'erlang':'setelement'
			      (2, SO, _rec44)
		      in  %% Line 892
			  {'ok',_cor7}
	      %% Line 893
	      <OK = {'ok',_cor21}> when 'true' ->
		  %% Line 894
		  OK
	      %% Line 895
	      <Error> when 'true' ->
		  Error
	    end
'sctp_opt'/4 =
    %% Line 898
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Opt|Opts],Mod,R,As> when 'true' ->
	      %% Line 899
	      case Opt of
		%% Line 900
		<{'ip',IP}> when 'true' ->
		    %% Line 901
		    apply 'sctp_opt_ifaddr'/5
			(Opts, Mod, R, As, IP)
		%% Line 902
		<{'ifaddr',IP}> when 'true' ->
		    %% Line 903
		    apply 'sctp_opt_ifaddr'/5
			(Opts, Mod, R, As, IP)
		%% Line 904
		<{'port',Port}> when 'true' ->
		    %% Line 905
		    case call Mod:'getserv'
			     (Port) of
		      %% Line 906
		      <{'ok',P}> when 'true' ->
			  %% Line 907
			  case R of
			    <{'sctp_opts',_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
				let <_cor6> =
				    call 'erlang':'setelement'
					(3, R, P)
				in  apply 'sctp_opt'/4
					(Opts, Mod, _cor6, As)
			    ( <_cor45> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','sctp_opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 908
		      <Error> when 'true' ->
			  Error
		    end
		%% Line 910
		<{'type',Type}>
		    when let <_cor8> =
			  call 'erlang':'=:='
			      (Type, 'seqpacket')
		      in  let <_cor9> =
			      call 'erlang':'=:='
				  (Type, 'stream')
			  in  call 'erlang':'or'
				  (_cor8, _cor9) ->
		    %% Line 911
		    case R of
		      <{'sctp_opts',_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
			  let <_cor12> =
			      call 'erlang':'setelement'
				  (5, R, Type)
			  in  apply 'sctp_opt'/4
				  (Opts, Mod, _cor12, As)
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','sctp_opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 912
		<'binary'> when 'true' ->
		    apply 'sctp_opt'/6
			(Opts, Mod, R, As, 'mode', 'binary')
		%% Line 913
		<'list'> when 'true' ->
		    apply 'sctp_opt'/6
			(Opts, Mod, R, As, 'mode', 'list')
		%% Line 914
		<{'sctp_module',_cor52}> when 'true' ->
		    apply 'sctp_opt'/4
			(Opts, Mod, R, As)
		%% Line 915
		<'inet'> when 'true' ->
		    apply 'sctp_opt'/4
			(Opts, Mod, R, As)
		%% Line 916
		<'inet6'> when 'true' ->
		    apply 'sctp_opt'/4
			(Opts, Mod, R, As)
		%% Line 917
		<{'netns',NS}> when 'true' ->
		    let <BinNS> =
			%% Line 918
			apply 'filename2binary'/1
			    (NS)
		    in  %% Line 919
			case call 'prim_inet':'is_sockopt_val'
				 ('netns', BinNS) of
			  %% Line 920
			  <'true'> when 'true' ->
			      let <_rec48> =
				  %% Line 923
				  [{'netns',BinNS}|[]]
			      in  %% Line 923
				  case R of
				    <{'sctp_opts',_cor53,_cor54,_cor55,_cor56,_cor57}> when 'true' ->
					let <_cor17> =
					    call 'erlang':'setelement'
						(4, R, _rec48)
					in  apply 'sctp_opt'/4
						(Opts, Mod, _cor17, %% Line 924
								    As)
				    ( <_cor58> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','sctp_opts'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  %% Line 925
			  <'false'> when 'true' ->
			      %% Line 926
			      {'error','badarg'}
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor18})
			    -| ['compiler_generated'] )
			end
		%% Line 928
		<{'active',N}>
		    when try
			  let <_cor19> =
			      call 'erlang':'is_integer'
				  (N)
			  in  let <_cor20> =
				  call 'erlang':'<'
				      (N, 32768)
			      in  let <_cor22> =
				      call 'erlang':'>='
					  (N, -32768)
				  in  let <_cor23> =
					  call 'erlang':'and'
					      (_cor20, _cor22)
				      in  call 'erlang':'and'
					      (_cor19, _cor23)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 929
		    ( case R of
			( <( {'sctp_opts',_cor59,_cor60,_cor61,_cor62,_rec50}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NOpts> =
				  call 'lists':'keydelete'
				      ('active', 1, _rec50)
			      in  let <_rec51> =
				      %% Line 930
				      [{'active',N}|NOpts]
				  in  let <_cor30> =
					  %% Line 930
					  call 'erlang':'setelement'
					      (6, R, _rec51)
				      in  %% Line 930
					  apply 'sctp_opt'/4
					      (Opts, Mod, _cor30, As)
			  -| ['compiler_generated'] )
			( <_cor63> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','sctp_opts'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 931
		<{Name,Val}> when 'true' ->
		    apply 'sctp_opt'/6
			(Opts, Mod, R, As, Name, Val)
		%% Line 932
		<_cor70> when 'true' ->
		    {'error','badarg'}
	      end
	  %% Line 934
	  <[],_X_Mod,R = {'sctp_opts',IfAddr,_cor71,_cor72,_cor73,_cor74},_X_SockOpts> when 'true' ->
	      %% Line 935
	      case <> of
		<>
		    when call 'erlang':'is_list'
			  (IfAddr) ->
		    let <_rec53> =
			%% Line 936
			call 'lists':'reverse'
			    (IfAddr)
		    in  let <_cor35> =
			    %% Line 936
			    call 'erlang':'setelement'
				(2, R, _rec53)
			in  %% Line 936
			    {'ok',_cor35}
		%% Line 937
		<> when 'true' ->
		    %% Line 938
		    {'ok',R}
	      end
	  ( <_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'sctp_opt',4}}] )
	    -| ['compiler_generated'] )
	end
'sctp_opt'/6 =
    %% Line 941
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 942
	( case _cor3 of
	    ( <( {'sctp_opts',_cor18,_cor19,_cor20,_cor21,_rec55}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'add_opt'/4
			   (_cor1, _cor0, _rec55, _cor2) of
		    %% Line 943
		    <{'ok',SocketOpts}> when 'true' ->
			let <_cor10> =
			    %% Line 944
			    call 'erlang':'setelement'
				(6, _cor3, SocketOpts)
			in  %% Line 944
			    apply 'sctp_opt'/4
				(_cor5, _cor4, _cor10, _cor2)
		    %% Line 945
		    <Error> when 'true' ->
			Error
		  end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','sctp_opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'sctp_opt_ifaddr'/5 =
    %% Line 948
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Opts,Mod,R = {'sctp_opts',IfAddr,_cor17,_cor18,_cor19,_cor20},As,Addr> when 'true' ->
	      let <IP> =
		  %% Line 949
		  call Mod:'translate_ip'
		      (Addr)
	      in  let <_cor7> =
		      %% Line 952
		      case IfAddr of
			%% Line 953
			<'undefined'> when 'true' ->
			    IP
			%% Line 954
			<_cor21>
			    when call 'erlang':'is_list'
				  (IfAddr) ->
			    [IP|IfAddr]
			%% Line 955
			<_cor22> when 'true' ->
			    [IP|[IfAddr|[]]]
		      end
		  in  let <_cor11> =
			  %% Line 952
			  call 'erlang':'setelement'
			      (2, R, _cor7)
		      in  %% Line 950
			  apply 'sctp_opt'/4
			      (Opts, Mod, _cor11, %% Line 956
						  As)
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'sctp_opt_ifaddr',5}}] )
	    -| ['compiler_generated'] )
	end
'add_opt'/4 =
    %% Line 962
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 963
	case call 'lists':'member'
		 (_cor3, _cor0) of
	  %% Line 964
	  <'true'> when 'true' ->
	      %% Line 965
	      case call 'prim_inet':'is_sockopt_val'
		       (_cor3, _cor2) of
		%% Line 966
		<'true'> when 'true' ->
		    let <Opts1> =
			%% Line 967
			call 'lists':'keydelete'
			    (_cor3, 1, _cor1)
		    in  %% Line 968
			{'ok',[{_cor3,_cor2}|Opts1]}
		%% Line 969
		<'false'> when 'true' ->
		    {'error','badarg'}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 971
	  <'false'> when 'true' ->
	      {'error','badarg'}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'filename2binary'/1 =
    %% Line 976
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <OutEncoding> =
		  %% Line 977
		  call 'file':'native_name_encoding'
		      ()
	      in  %% Line 978
		  try
		      call 'unicode':'characters_to_binary'
			  (List, 'unicode', OutEncoding)
		  of <_cor2> ->
		      case _cor2 of
			%% Line 979
			<Bin>
			    when call 'erlang':'is_binary'
				  (_cor2) ->
			    %% Line 980
			    Bin
			%% Line 981
			<_cor8> when 'true' ->
			    %% Line 982
			    List
		      end
		  catch <_cor6,_cor5,_cor4> ->
		      case <_cor6,_cor5,_cor4> of
			%% Line 984
			<'error','badarg',_cor9> when 'true' ->
			    %% Line 985
			    List
			( <_cor6,_cor5,_cor4> when 'true' ->
			      primop 'raise'
				  (_cor4, _cor5)
			  -| ['compiler_generated'] )
		      end
	  %% Line 987
	  <Bin> when 'true' ->
	      %% Line 988
	      Bin
	end
'binary2filename'/1 =
    %% Line 990
    fun (_cor0) ->
	let <InEncoding> =
	    %% Line 991
	    call 'file':'native_name_encoding'
		()
	in  %% Line 992
	    case call 'unicode':'characters_to_list'
		     (_cor0, InEncoding) of
	      %% Line 993
	      <Filename>
		  when call 'erlang':'is_list'
			(Filename) ->
		  %% Line 994
		  Filename
	      %% Line 995
	      <_cor4> when 'true' ->
		  _cor0
	    end
'translate_ip'/2 =
    %% Line 1008
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'any','inet'> when 'true' ->
	      {0,0,0,0}
	  %% Line 1009
	  <'loopback','inet'> when 'true' ->
	      {127,0,0,1}
	  %% Line 1010
	  <'any','inet6'> when 'true' ->
	      {0,0,0,0,0,0,0,0}
	  %% Line 1011
	  <'loopback','inet6'> when 'true' ->
	      {0,0,0,0,0,0,0,1}
	  %% Line 1012
	  <IP,_cor4> when 'true' ->
	      IP
	end
'getaddrs_tm'/3 =
    %% Line 1015
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <IP = {A,B,C,D},Fam,_cor25> when 'true' ->
	      %% Line 1017
	      case <> of
		%% Line 1018
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'bor'
				  (A, B)
			  in  let <_cor5> =
				  call 'erlang':'bor'
				      (_cor4, C)
			      in  let <_cor6> =
				      call 'erlang':'bor'
					  (_cor5, D)
				  in  let <_cor7> =
					  call 'erlang':'band'
					      (_cor6, -256)
				      in  call 'erlang':'=:='
					      (_cor7, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1019
		    case <> of
		      %% Line 1020
		      <>
			  when call 'erlang':'=:='
				(Fam,
				 'inet') ->
			  {'ok',[IP|[]]}
		      %% Line 1021
		      <> when 'true' ->
			  {'error','eafnosupport'}
		    end
		%% Line 1023
		<> when 'true' ->
		    {'error','einval'}
	      end
	  %% Line 1025
	  <IP = {A,B,C,D,E,F,G,H},Fam,_cor26> when 'true' ->
	      %% Line 1028
	      case <> of
		%% Line 1029
		<>
		    when try
			  let <_cor9> =
			      call 'erlang':'bor'
				  (A, B)
			  in  let <_cor10> =
				  call 'erlang':'bor'
				      (_cor9, C)
			      in  let <_cor11> =
				      call 'erlang':'bor'
					  (_cor10, D)
				  in  let <_cor12> =
					  call 'erlang':'bor'
					      (_cor11, E)
				      in  let <_cor13> =
					      call 'erlang':'bor'
						  (_cor12, F)
					  in  let <_cor14> =
						  call 'erlang':'bor'
						      (_cor13, G)
					      in  let <_cor15> =
						      call 'erlang':'bor'
							  (_cor14, H)
						  in  let <_cor16> =
							  call 'erlang':'band'
							      (_cor15, -65536)
						      in  call 'erlang':'=:='
							      (_cor16, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1030
		    case <> of
		      %% Line 1031
		      <>
			  when call 'erlang':'=:='
				(Fam,
				 'inet6') ->
			  {'ok',[IP|[]]}
		      %% Line 1032
		      <> when 'true' ->
			  {'error','eafnosupport'}
		    end
		%% Line 1034
		<> when 'true' ->
		    {'error','einval'}
	      end
	  %% Line 1036
	  <Address,Family,Timer>
	      when call 'erlang':'is_atom'
		    (Address) ->
	      let <_cor17> =
		  %% Line 1037
		  call 'erlang':'atom_to_list'
		      (Address)
	      in  %% Line 1037
		  apply 'getaddrs_tm'/3
		      (_cor17, Family, Timer)
	  %% Line 1038
	  <Address,Family,Timer> when 'true' ->
	      %% Line 1039
	      case call 'inet_parse':'visible_string'
		       (Address) of
		%% Line 1040
		<'false'> when 'true' ->
		    %% Line 1041
		    {'error','einval'}
		%% Line 1042
		<'true'> when 'true' ->
		    %% Line 1045
		    case apply 'gethostbyname_tm'/3
			     (Address, Family, Timer) of
		      %% Line 1046
		      <{'ok',Ent}> when 'true' ->
			  ( case Ent of
			      ( <( {'hostent',_cor27,_cor28,_cor29,_cor30,_rec59}
				   -| ['compiler_generated'] )> when 'true' ->
				    {'ok',_rec59}
				-| ['compiler_generated'] )
			      ( <_cor31> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','hostent'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1047
		      <Error> when 'true' ->
			  Error
		    end
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	end
'gethostbyname_tm'/4 =
    %% Line 1054
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Type,Timer,Opts = ['string'|_cor12]> when 'true' ->
	      let <Result> =
		  %% Line 1055
		  apply 'gethostbyname_string'/2
		      (Name, Type)
	      in  %% Line 1056
		  apply 'gethostbyname_tm'/5
		      (Name, Type, Timer, Opts, Result)
	  %% Line 1057
	  <Name,Type,Timer,Opts = ['dns'|_cor13]> when 'true' ->
	      let <Result> =
		  %% Line 1058
		  call 'inet_res':'gethostbyname_tm'
		      (Name, Type, Timer)
	      in  %% Line 1059
		  apply 'gethostbyname_tm'/5
		      (Name, Type, Timer, Opts, Result)
	  %% Line 1060
	  <Name,Type,Timer,Opts = ['file'|_cor14]> when 'true' ->
	      let <Result> =
		  %% Line 1061
		  call 'inet_hosts':'gethostbyname'
		      (Name, Type)
	      in  %% Line 1062
		  apply 'gethostbyname_tm'/5
		      (Name, Type, Timer, Opts, Result)
	  %% Line 1063
	  <Name,Type,Timer,Opts = ['yp'|_cor15]> when 'true' ->
	      %% Line 1064
	      apply 'gethostbyname_tm_native'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1065
	  <Name,Type,Timer,Opts = ['nis'|_cor16]> when 'true' ->
	      %% Line 1066
	      apply 'gethostbyname_tm_native'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1067
	  <Name,Type,Timer,Opts = ['nisplus'|_cor17]> when 'true' ->
	      %% Line 1068
	      apply 'gethostbyname_tm_native'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1069
	  <Name,Type,Timer,Opts = ['wins'|_cor18]> when 'true' ->
	      %% Line 1070
	      apply 'gethostbyname_tm_native'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1071
	  <Name,Type,Timer,Opts = ['native'|_cor19]> when 'true' ->
	      %% Line 1072
	      apply 'gethostbyname_tm_native'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1073
	  <Name,Type,Timer,Opts = [_cor20|_cor21]> when 'true' ->
	      %% Line 1074
	      apply 'gethostbyname_tm'/4
		  (Name, Type, Timer, Opts)
	  %% Line 1076
	  <Name,Type,Timer,[]> when 'true' ->
	      let <Result> =
		  %% Line 1077
		  apply 'gethostbyname_self'/2
		      (Name, Type)
	      in  %% Line 1078
		  apply 'gethostbyname_tm'/5
		      (Name, Type, Timer, [], Result)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'gethostbyname_tm',4}}] )
	    -| ['compiler_generated'] )
	end
'gethostbyname_tm'/5 =
    %% Line 1080
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1081
	case _cor0 of
	  %% Line 1082
	  <{'ok',_cor12}> when 'true' ->
	      _cor0
	  %% Line 1084
	  <{'error','formerr'}> when 'true' ->
	      %% Line 1085
	      {'error','einval'}
	  %% Line 1086
	  <{'error',_cor13}>
	      when call 'erlang':'=:='
		    (_cor1,
		     []) ->
	      %% Line 1087
	      {'error','nxdomain'}
	  %% Line 1088
	  <{'error',_cor14}> when 'true' ->
	      let <_cor5> =
		  %% Line 1089
		  call 'erlang':'tl'
		      (_cor1)
	      in  %% Line 1089
		  apply 'gethostbyname_tm'/4
		      (_cor4, _cor3, _cor2, _cor5)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'gethostbyname_tm_native'/4 =
    %% Line 1092
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Result> =
	    %% Line 1094
	    call 'inet_gethost_native':'gethostbyname'
		(_cor3, _cor2)
	in  %% Line 1095
	    apply 'gethostbyname_tm'/5
		(_cor3, _cor2, _cor1, _cor0, Result)
'gethostbyname_self'/2 =
    %% Line 1099
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Type>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor2> =
		  %% Line 1100
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 1100
		  apply 'gethostbyname_self'/2
		      (_cor2, Type)
	  %% Line 1101
	  <Name,Type>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 1102
			call 'erlang':'is_list'
			    (Name)
		    in  let <_cor4> =
			    %% Line 1102
			    call 'erlang':'=:='
				(Type, 'inet')
			in  %% Line 1102
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor8> =
			let <_cor6> =
			    %% Line 1103
			    call 'erlang':'is_list'
				(Name)
			in  let <_cor7> =
				%% Line 1103
				call 'erlang':'=:='
				    (Type, 'inet6')
			    in  %% Line 1103
				call 'erlang':'and'
				    (_cor6, _cor7)
		    in  %% Line 1102
			call 'erlang':'or'
			    (_cor5, _cor8) ->
	      let <N> =
		  %% Line 1104
		  call 'inet_db':'tolower'
		      (Name)
	      in  let <Self> =
		      %% Line 1105
		      call 'inet_db':'gethostname'
			  ()
		  in  %% Line 1113
		      case call 'inet_db':'tolower'
			       (Self) of
			%% Line 1114
			<_cor21>
			    when call 'erlang':'=:='
				  (_cor21,
				   N) ->
			    let <_cor11> =
				%% Line 1117
				apply 'translate_ip'/2
				    ('loopback', Type)
			    in  let <_cor12> =
				    %% Line 1116
				    apply 'make_hostent'/4
					(%% Line 1117
					 Self, %% Line 1117
					       [_cor11|[]], %% Line 1117
							    [], %% Line 1117
								Type)
				in  %% Line 1115
				    {'ok',_cor12}
			%% Line 1118
			<_cor22> when 'true' ->
			    %% Line 1119
			    case call 'inet_db':'res_option'
				     ('domain') of
			      %% Line 1120
			      <[]> when 'true' ->
				  %% Line 1121
				  {'error','nxdomain'}
			      %% Line 1122
			      <Domain> when 'true' ->
				  let <FQDN> =
				      %% Line 1123
				      call 'lists':'append'
					  ([Self|[[46]|[Domain|[]]]])
				  in  %% Line 1124
				      case call 'inet_db':'tolower'
					       (FQDN) of
					%% Line 1125
					<_cor23>
					    when call 'erlang':'=:='
						  (_cor23,
						   N) ->
					    let <_cor14> =
						%% Line 1129
						apply 'translate_ip'/2
						    ('loopback', Type)
					    in  let <_cor15> =
						    %% Line 1127
						    apply 'make_hostent'/4
							(%% Line 1128
							 FQDN, %% Line 1129
							       [_cor14|[]], %% Line 1129
									    [], %% Line 1129
										Type)
						in  %% Line 1126
						    {'ok',_cor15}
					%% Line 1130
					<_cor24> when 'true' ->
					    %% Line 1131
					    {'error','nxdomain'}
				      end
			    end
		      end
	  %% Line 1135
	  <_cor25,_cor26> when 'true' ->
	      %% Line 1136
	      {'error','formerr'}
	end
'gethostbyname_string'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Type>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor2> =
		  %% Line 1139
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 1139
		  apply 'gethostbyname_string'/2
		      (_cor2, Type)
	  %% Line 1140
	  <Name,Type>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 1141
			call 'erlang':'is_list'
			    (Name)
		    in  let <_cor4> =
			    %% Line 1141
			    call 'erlang':'=:='
				(Type, 'inet')
			in  %% Line 1141
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor8> =
			let <_cor6> =
			    %% Line 1142
			    call 'erlang':'is_list'
				(Name)
			in  let <_cor7> =
				%% Line 1142
				call 'erlang':'=:='
				    (Type, 'inet6')
			    in  %% Line 1142
				call 'erlang':'and'
				    (_cor6, _cor7)
		    in  %% Line 1141
			call 'erlang':'or'
			    (_cor5, _cor8) ->
	      let <_cor10> =
		  %% Line 1144
		  case Type of
		    %% Line 1145
		    <'inet'> when 'true' ->
			%% Line 1146
			call 'inet_parse':'ipv4_address'
			    (Name)
		    %% Line 1147
		    <'inet6'> when 'true' ->
			%% Line 1150
			call 'inet_parse':'ipv6_address'
			    (Name)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1143
		  case _cor10 of
		    %% Line 1152
		    <{'ok',IP}> when 'true' ->
			let <_cor11> =
			    %% Line 1153
			    apply 'make_hostent'/4
				(Name, [IP|[]], [], Type)
			in  %% Line 1153
			    {'ok',_cor11}
		    %% Line 1154
		    <{'error','einval'}> when 'true' ->
			%% Line 1155
			{'error','nxdomain'}
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1157
	  <_cor15,_cor16> when 'true' ->
	      %% Line 1158
	      {'error','formerr'}
	end
'make_hostent'/4 =
    %% Line 1160
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1164
	    case _cor0 of
	      <'inet'> when 'true' ->
		  4
	      <'inet6'> when 'true' ->
		  16
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1161
	    {'hostent',_cor3,_cor1,_cor0,_cor5,_cor2}
'gethostbyaddr_tm'/3 =
    %% Line 1170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Addr,Timer,['dns'|Opts]> when 'true' ->
	      let <Res> =
		  %% Line 1171
		  call 'inet_res':'gethostbyaddr_tm'
		      (Addr, Timer)
	      in  %% Line 1172
		  case Res of
		    %% Line 1173
		    <{'ok',_cor9}> when 'true' ->
			Res
		    %% Line 1174
		    <{'error','timeout'}> when 'true' ->
			Res
		    %% Line 1175
		    <{'error','formerr'}> when 'true' ->
			{'error','einval'}
		    %% Line 1176
		    <{'error',_cor10}> when 'true' ->
			apply 'gethostbyaddr_tm'/3
			    (Addr, Timer, Opts)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1178
	  <Addr,Timer,['file'|Opts]> when 'true' ->
	      %% Line 1179
	      case call 'inet_hosts':'gethostbyaddr'
		       (Addr) of
		%% Line 1180
		<{'error','formerr'}> when 'true' ->
		    {'error','einval'}
		%% Line 1181
		<{'error',_cor11}> when 'true' ->
		    apply 'gethostbyaddr_tm'/3
			(Addr, Timer, Opts)
		%% Line 1182
		<Result> when 'true' ->
		    Result
	      end
	  %% Line 1184
	  <Addr,Timer,['yp'|Opts]> when 'true' ->
	      %% Line 1185
	      apply 'gethostbyaddr_tm_native'/3
		  (Addr, Timer, Opts)
	  %% Line 1186
	  <Addr,Timer,['nis'|Opts]> when 'true' ->
	      %% Line 1187
	      apply 'gethostbyaddr_tm_native'/3
		  (Addr, Timer, Opts)
	  %% Line 1188
	  <Addr,Timer,['nisplus'|Opts]> when 'true' ->
	      %% Line 1189
	      apply 'gethostbyaddr_tm_native'/3
		  (Addr, Timer, Opts)
	  %% Line 1190
	  <Addr,Timer,['wins'|Opts]> when 'true' ->
	      %% Line 1191
	      apply 'gethostbyaddr_tm_native'/3
		  (Addr, Timer, Opts)
	  %% Line 1192
	  <Addr,Timer,['native'|Opts]> when 'true' ->
	      %% Line 1193
	      apply 'gethostbyaddr_tm_native'/3
		  (Addr, Timer, Opts)
	  %% Line 1194
	  <Addr,Timer,[_cor12|Opts]> when 'true' ->
	      %% Line 1195
	      apply 'gethostbyaddr_tm'/3
		  (Addr, Timer, Opts)
	  %% Line 1196
	  <IP = {127,0,0,1},_X_Timer,[]> when 'true' ->
	      %% Line 1197
	      apply 'gethostbyaddr_self'/2
		  (IP, 'inet')
	  %% Line 1198
	  <IP = {0,0,0,0,0,0,0,1},_X_Timer,[]> when 'true' ->
	      %% Line 1199
	      apply 'gethostbyaddr_self'/2
		  (IP, 'inet6')
	  %% Line 1200
	  <_X_Addr,_X_Timer,[]> when 'true' ->
	      %% Line 1201
	      {'error','nxdomain'}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gethostbyaddr_tm',3}}] )
	    -| ['compiler_generated'] )
	end
'gethostbyaddr_self'/2 =
    %% Line 1203
    fun (_cor1,_cor0) ->
	let <Name> =
	    %% Line 1204
	    call 'inet_db':'gethostname'
		()
	in  %% Line 1205
	    case call 'inet_db':'res_option'
		     ('domain') of
	      %% Line 1206
	      <[]> when 'true' ->
		  let <_cor3> =
		      %% Line 1207
		      apply 'make_hostent'/4
			  (Name, [_cor1|[]], [], _cor0)
		  in  %% Line 1207
		      {'ok',_cor3}
	      %% Line 1208
	      <Domain> when 'true' ->
		  let <_cor4> =
		      %% Line 1209
		      [46|Domain]
		  in  let <_cor5> =
			  %% Line 1209
			  call 'erlang':'++'
			      (Name, _cor4)
		      in  let <_cor6> =
			      %% Line 1209
			      apply 'make_hostent'/4
				  (_cor5, [_cor1|[]], [Name|[]], _cor0)
			  in  %% Line 1209
			      {'ok',_cor6}
	    end
'gethostbyaddr_tm_native'/3 =
    %% Line 1212
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1214
	case call 'inet_gethost_native':'gethostbyaddr'
		 (_cor2) of
	  %% Line 1215
	  <{'error','formerr'}> when 'true' ->
	      {'error','einval'}
	  %% Line 1216
	  <{'error',_cor7}> when 'true' ->
	      apply 'gethostbyaddr_tm'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1217
	  <Result> when 'true' ->
	      Result
	end
'open'/8 =
    %% Line 1230
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <FdO,Addr,Port,Opts,Protocol,Family,Type,Module>
	      when let <_cor10> =
		    let <_cor8> =
			%% Line 1231
			call 'erlang':'is_integer'
			    (FdO)
		    in  let <_cor9> =
			    %% Line 1231
			    call 'erlang':'<'
				(FdO, 0)
			in  %% Line 1231
			    call 'erlang':'and'
				(_cor8, _cor9)
		in  let <_cor11> =
			%% Line 1232
			call 'erlang':'is_list'
			    (FdO)
		    in  %% Line 1231
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      let <_cor12> =
		  %% Line 1234
		  case <> of
		    <>
			when call 'erlang':'is_list'
			      (FdO) ->
			FdO
		    %% Line 1235
		    <> when 'true' ->
			[]
		  end
	      in  %% Line 1237
		  case call 'prim_inet':'open'
			   (Protocol, Family, Type, _cor12) of
		    %% Line 1238
		    <{'ok',S}> when 'true' ->
			%% Line 1239
			case call 'prim_inet':'setopts'
				 (S, Opts) of
			  %% Line 1240
			  <'ok'> when 'true' ->
			      let <_cor14> =
				  %% Line 1241
				  case <> of
				    <>
					when call 'erlang':'is_list'
					      (Addr) ->
					%% Line 1242
					apply 'bindx'/3
					    (S, Addr, Port)
				    %% Line 1243
				    <> when 'true' ->
					%% Line 1244
					call 'prim_inet':'bind'
					    (S, Addr, Port)
				  end
			      in  %% Line 1241
				  case _cor14 of
				    %% Line 1246
				    <{'ok',_cor26}> when 'true' ->
					do  %% Line 1247
					    call 'inet_db':'register_socket'
						(S, Module)
					    %% Line 1248
					    {'ok',S}
				    %% Line 1249
				    <Error> when 'true' ->
					do  %% Line 1250
					    call 'prim_inet':'close'
						(S)
					    %% Line 1251
					    Error
				  end
			  %% Line 1253
			  <Error> when 'true' ->
			      do  %% Line 1254
				  call 'prim_inet':'close'
				      (S)
				  %% Line 1255
				  Error
			end
		    %% Line 1257
		    <Error> when 'true' ->
			%% Line 1258
			Error
		  end
	  %% Line 1260
	  <Fd,_X_Addr,_X_Port,Opts,Protocol,Family,Type,Module>
	      when %% Line 1261
		call 'erlang':'is_integer'
		    (Fd) ->
	      %% Line 1262
	      apply 'fdopen'/6
		  (Fd, Opts, Protocol, Family, Type, Module)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'open',8}}] )
	    -| ['compiler_generated'] )
	end
'bindx'/3 =
    %% Line 1264
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,[Addr|[]],Port0> when 'true' ->
	      %% Line 1265
	      case apply 'set_bindx_port'/2
		       (Addr, Port0) of
		<{IP,Port}> when 'true' ->
		    %% Line 1266
		    call 'prim_inet':'bind'
			(S, IP, Port)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1267
	  <S,Addrs,Port0> when 'true' ->
	      let <_cor9> =
		  %% Line 1268
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[Addr|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'set_bindx_port'/2
					      (Addr, Port0)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Addrs)
		    -| ['list_comprehension'] )
	      in  %% Line 1268
		  case _cor9 of
		    <[{IP,Port}|Rest]> when 'true' ->
			%% Line 1269
			case call 'prim_inet':'bind'
				 (S, IP, Port) of
			  %% Line 1270
			  <{'ok',AssignedPort}>
			      when call 'erlang':'=:='
				    (Port,
				     0) ->
			      let <_cor16> =
				  %% Line 1273
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor13) ->
						case _cor13 of
						  <[Addr|_cor12]> when 'true' ->
						      let <_cor14> =
							  apply 'change_bindx_0_port'/2
							      (Addr, AssignedPort)
						      in  let <_cor15> =
							      apply 'lc$^1'/1
								  (_cor12)
							  in  ( [_cor14|_cor15]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor13> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor13})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (Rest)
				    -| ['list_comprehension'] )
			      in  %% Line 1274
				  call 'prim_inet':'bind'
				      (S, 'add', _cor16)
			  %% Line 1275
			  <{'ok',_cor22}> when 'true' ->
			      %% Line 1276
			      call 'prim_inet':'bind'
				  (S, 'add', Rest)
			  %% Line 1277
			  <Error> when 'true' ->
			      %% Line 1278
			      Error
			end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	end
'set_bindx_port'/2 =
    %% Line 1281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Addr = {_X_IP,_X_Port},_X_OtherPort> when 'true' ->
	      %% Line 1282
	      Addr
	  %% Line 1283
	  <IP,Port> when 'true' ->
	      %% Line 1284
	      {IP,Port}
	end
'change_bindx_0_port'/2 =
    %% Line 1286
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{IP,0},AssignedPort> when 'true' ->
	      %% Line 1287
	      {IP,AssignedPort}
	  %% Line 1288
	  <Addr = {_X_IP,_X_Port},_X_AssignedPort> when 'true' ->
	      %% Line 1289
	      Addr
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_bindx_0_port',2}}] )
	    -| ['compiler_generated'] )
	end
'fdopen'/6 =
    %% Line 1300
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1301
	case call 'prim_inet':'fdopen'
		 (_cor3, _cor2, _cor1, _cor5) of
	  %% Line 1302
	  <{'ok',S}> when 'true' ->
	      %% Line 1303
	      case call 'prim_inet':'setopts'
		       (S, _cor4) of
		%% Line 1304
		<'ok'> when 'true' ->
		    do  %% Line 1305
			call 'inet_db':'register_socket'
			    (S, _cor0)
			%% Line 1306
			{'ok',S}
		%% Line 1307
		<Error> when 'true' ->
		    do  %% Line 1308
			call 'prim_inet':'close'
			    (S)
			%% Line 1308
			Error
	      end
	  %% Line 1310
	  <Error> when 'true' ->
	      Error
	end
'i'/0 =
    %% Line 1317
    fun () ->
	do  apply 'i'/1
		('tcp')
	    do  apply 'i'/1
		    ('udp')
		apply 'i'/1
		    ('sctp')
'i'/1 =
    %% Line 1319
    fun (_cor0) ->
	apply 'i'/2
	    (_cor0, ['port'|['module'|['recv'|['sent'|['owner'|['local_address'|['foreign_address'|['state'|['type']]]]]]]]])
'i'/2 =
    %% Line 1322
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'tcp',Fs> when 'true' ->
	      let <_cor2> =
		  %% Line 1323
		  apply 'tcp_sockets'/0
		      ()
	      in  %% Line 1323
		  apply 'ii'/3
		      (_cor2, Fs, 'tcp')
	  %% Line 1324
	  <'udp',Fs> when 'true' ->
	      let <_cor3> =
		  %% Line 1325
		  apply 'udp_sockets'/0
		      ()
	      in  %% Line 1325
		  apply 'ii'/3
		      (_cor3, Fs, 'udp')
	  %% Line 1326
	  <'sctp',Fs> when 'true' ->
	      let <_cor4> =
		  %% Line 1327
		  apply 'sctp_sockets'/0
		      ()
	      in  %% Line 1327
		  apply 'ii'/3
		      (_cor4, Fs, 'sctp')
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'i',2}}] )
	    -| ['compiler_generated'] )
	end
'ii'/3 =
    %% Line 1329
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1331
	    case apply 'info_lines'/3
		     (_cor2, _cor1, _cor0) of
	      %% Line 1332
	      <[]> when 'true' ->
		  []
	      %% Line 1333
	      <InfoLines> when 'true' ->
		  let <_cor3> =
		      apply 'h_line'/1
			  (_cor1)
		  in  [_cor3|InfoLines]
	    end
	in  let <_cor13> =
		%% Line 1336
		( fun (_cor10,_cor9) ->
		      apply 'smax'/2
			  (_cor9, _cor10)
		  -| [{'id',{0,0,'-ii/3-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 1337
		    call 'erlang':'length'
			(_cor1)
		in  let <_cor8> =
			%% Line 1337
			call 'lists':'duplicate'
			    (_cor7, 0)
		    in  let <Maxs> =
			    %% Line 1335
			    call 'lists':'foldl'
				(_cor13, _cor8, _cor5)
			in  let <_cor22> =
				%% Line 1338
				( letrec
				      'lc$^0'/1 =
					  fun (_cor17) ->
					      case _cor17 of
						<[N|_cor16]> when 'true' ->
						    let <_cor18> =
							call 'erlang':'integer_to_list'
							    (N)
						    in  let <_cor19> =
							    call 'erlang':'++'
								(_cor18, [115|[32]])
							in  let <_cor20> =
								[126|[45|_cor19]]
							    in  let <_cor21> =
								    apply 'lc$^0'/1
									(_cor16)
								in  ( [_cor20|_cor21]
								      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor17> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor17})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Maxs)
				  -| ['list_comprehension'] )
			    in  let <_cor23> =
				    %% Line 1338
				    call 'lists':'append'
					(_cor22)
				in  let <Fmt> =
					%% Line 1338
					call 'erlang':'++'
					    (_cor23, [10])
				    in  let <_cor27> =
					    %% Line 1339
					    ( fun (_cor25) ->
						  call 'io':'format'
						      (Fmt, _cor25)
					      -| [{'id',{0,0,'-ii/3-fun-1-'}}] )
					in  %% Line 1339
					    call 'lists':'foreach'
						(_cor27, _cor5)
'smax'/2 =
    %% Line 1341
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Max|Ms],[Str|Strs]> when 'true' ->
	      let <N> =
		  %% Line 1342
		  call 'erlang':'length'
		      (Str)
	      in  let <_cor3> =
		      %% Line 1343
		      case <> of
			<>
			    when call 'erlang':'>'
				  (N,
				   Max) ->
			    N
			<> when 'true' ->
			    Max
		      end
		  in  let <_cor4> =
			  %% Line 1343
			  apply 'smax'/2
			      (Ms, Strs)
		      in  %% Line 1343
			  [_cor3|_cor4]
	  %% Line 1344
	  <[],[]> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'smax',2}}] )
	    -| ['compiler_generated'] )
	end
'info_lines'/3 =
    %% Line 1346
    fun (_cor2,_cor1,_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[S|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'i_line'/3
				    (S, _cor1, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'i_line'/3 =
    %% Line 1347
    fun (_cor2,_cor1,_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[F|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'info'/3
				    (_cor2, F, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'h_line'/1 =
    %% Line 1349
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[F|_cor2]> when 'true' ->
			    let <_cor4> =
				call 'erlang':'atom_to_list'
				    (F)
			    in  let <_cor5> =
				    apply 'h_field'/1
					(_cor4)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'h_field'/1 =
    %% Line 1351
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]> when 'true' ->
	      let <_cor1> =
		  apply 'upper'/1
		      (C)
	      in  let <_cor2> =
		      apply 'hh_field'/1
			  (Cs)
		  in  [_cor1|_cor2]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'h_field',1}}] )
	    -| ['compiler_generated'] )
	end
'hh_field'/1 =
    %% Line 1353
    fun (_cor0) ->
	case _cor0 of
	  <[95|[C|Cs]]> when 'true' ->
	      let <_cor1> =
		  apply 'upper'/1
		      (C)
	      in  let <_cor2> =
		      apply 'hh_field'/1
			  (Cs)
		  in  [32|[_cor1|_cor2]]
	  %% Line 1354
	  <[C|Cs]> when 'true' ->
	      let <_cor3> =
		  apply 'hh_field'/1
		      (Cs)
	      in  [C|_cor3]
	  %% Line 1355
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hh_field',1}}] )
	    -| ['compiler_generated'] )
	end
'upper'/1 =
    %% Line 1357
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  call 'erlang':'-'
		      (C, 97)
	      in  call 'erlang':'+'
		      (_cor3, 65)
	  %% Line 1358
	  <C> when 'true' ->
	      C
	end
'info'/3 =
    %% Line 1361
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1362
	case _cor1 of
	  %% Line 1363
	  <'owner'> when 'true' ->
	      %% Line 1364
	      case call 'erlang':'port_info'
		       (_cor2, 'connected') of
		%% Line 1365
		<{'connected',Owner}> when 'true' ->
		    call 'erlang':'pid_to_list'
			(Owner)
		%% Line 1366
		<_cor18> when 'true' ->
		    [32]
	      end
	  %% Line 1368
	  <'port'> when 'true' ->
	      %% Line 1369
	      case call 'erlang':'port_info'
		       (_cor2, 'id') of
		%% Line 1370
		<{'id',Id}> when 'true' ->
		    call 'erlang':'integer_to_list'
			(Id)
		%% Line 1371
		<'undefined'> when 'true' ->
		    [32]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1373
	  <'sent'> when 'true' ->
	      %% Line 1374
	      case call 'prim_inet':'getstat'
		       (_cor2, ['send_oct']) of
		%% Line 1375
		<{'ok',[{'send_oct',N}|[]]}> when 'true' ->
		    call 'erlang':'integer_to_list'
			(N)
		%% Line 1376
		<_cor19> when 'true' ->
		    [32]
	      end
	  %% Line 1378
	  <'recv'> when 'true' ->
	      %% Line 1379
	      case call 'prim_inet':'getstat'
		       (_cor2, ['recv_oct']) of
		%% Line 1380
		<{'ok',[{'recv_oct',N}|[]]}> when 'true' ->
		    call 'erlang':'integer_to_list'
			(N)
		%% Line 1381
		<_cor20> when 'true' ->
		    [32]
	      end
	  %% Line 1383
	  <'local_address'> when 'true' ->
	      let <_cor7> =
		  %% Line 1384
		  call 'prim_inet':'sockname'
		      (_cor2)
	      in  %% Line 1384
		  apply 'fmt_addr'/2
		      (_cor7, _cor0)
	  %% Line 1385
	  <'foreign_address'> when 'true' ->
	      let <_cor8> =
		  %% Line 1386
		  call 'prim_inet':'peername'
		      (_cor2)
	      in  %% Line 1386
		  apply 'fmt_addr'/2
		      (_cor8, _cor0)
	  %% Line 1387
	  <'state'> when 'true' ->
	      %% Line 1388
	      case call 'prim_inet':'getstatus'
		       (_cor2) of
		%% Line 1389
		<{'ok',Status}> when 'true' ->
		    apply 'fmt_status'/1
			(Status)
		%% Line 1390
		<_cor21> when 'true' ->
		    [32]
	      end
	  %% Line 1392
	  <'packet'> when 'true' ->
	      %% Line 1393
	      case call 'prim_inet':'getopt'
		       (_cor2, 'packet') of
		%% Line 1394
		<{'ok',Type}>
		    when call 'erlang':'is_atom'
			  (Type) ->
		    call 'erlang':'atom_to_list'
			(Type)
		%% Line 1395
		<{'ok',Type}>
		    when call 'erlang':'is_integer'
			  (Type) ->
		    call 'erlang':'integer_to_list'
			(Type)
		%% Line 1396
		<_cor22> when 'true' ->
		    [32]
	      end
	  %% Line 1398
	  <'type'> when 'true' ->
	      %% Line 1399
	      case call 'prim_inet':'gettype'
		       (_cor2) of
		%% Line 1400
		<{'ok',{_cor23,'stream'}}> when 'true' ->
		    [83|[84|[82|[69|[65|[77]]]]]]
		%% Line 1401
		<{'ok',{_cor24,'dgram'}}> when 'true' ->
		    [68|[71|[82|[65|[77]]]]]
		%% Line 1402
		<{'ok',{_cor25,'seqpacket'}}> when 'true' ->
		    [83|[69|[81|[80|[65|[67|[75|[69|[84]]]]]]]]]
		%% Line 1403
		<_cor26> when 'true' ->
		    [32]
	      end
	  %% Line 1405
	  <'fd'> when 'true' ->
	      %% Line 1406
	      case call 'prim_inet':'getfd'
		       (_cor2) of
		%% Line 1407
		<{'ok',Fd}> when 'true' ->
		    call 'erlang':'integer_to_list'
			(Fd)
		%% Line 1408
		<_cor27> when 'true' ->
		    [32]
	      end
	  %% Line 1410
	  <'module'> when 'true' ->
	      %% Line 1411
	      case call 'inet_db':'lookup_socket'
		       (_cor2) of
		%% Line 1412
		<{'ok',Mod}> when 'true' ->
		    call 'erlang':'atom_to_list'
			(Mod)
		%% Line 1413
		<_cor28> when 'true' ->
		    [112|[114|[105|[109|[95|[105|[110|[101|[116]]]]]]]]]
	      end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'fmt_status'/1 =
    %% Line 1419
    fun (_cor0) ->
	%% Line 1420
	case call 'lists':'sort'
		 (_cor0) of
	  %% Line 1421
	  <['accepting'|_cor3]> when 'true' ->
	      [65|[67|[67|[69|[80|[84|[73|[78|[71]]]]]]]]]
	  %% Line 1422
	  <['bound'|['busy'|['connected'|_cor4]]]> when 'true' ->
	      [67|[79|[78|[78|[69|[67|[84|[69|[68|[42]]]]]]]]]]
	  %% Line 1423
	  <['bound'|['connected'|_cor5]]> when 'true' ->
	      [67|[79|[78|[78|[69|[67|[84|[69|[68]]]]]]]]]
	  %% Line 1424
	  <['bound'|['listen'|['listening'|_cor6]]]> when 'true' ->
	      [76|[73|[83|[84|[69|[78|[73|[78|[71]]]]]]]]]
	  %% Line 1425
	  <['bound'|['listen'|_cor7]]> when 'true' ->
	      [76|[73|[83|[84|[69|[78]]]]]]
	  %% Line 1426
	  <['bound'|['connecting'|_cor8]]> when 'true' ->
	      [67|[79|[78|[78|[69|[67|[84|[73|[78|[71]]]]]]]]]]
	  %% Line 1427
	  <['bound'|['open']]> when 'true' ->
	      [66|[79|[85|[78|[68]]]]]
	  %% Line 1428
	  <['open']> when 'true' ->
	      [73|[68|[76|[69]]]]
	  %% Line 1429
	  <[]> when 'true' ->
	      [67|[76|[79|[83|[69|[68]]]]]]
	  %% Line 1430
	  <_cor9> when 'true' ->
	      [63|[63|[63|[63]]]]
	end
'fmt_addr'/2 =
    %% Line 1433
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'error','enotconn'},_cor12> when 'true' ->
	      [42|[58|[42]]]
	  %% Line 1434
	  <{'error',_cor13},_cor14> when 'true' ->
	      [32]
	  %% Line 1435
	  <{'ok',Addr},Proto> when 'true' ->
	      %% Line 1436
	      case Addr of
		%% Line 1438
		<{{0,0,0,0},Port}> when 'true' ->
		    let <_cor2> =
			apply 'fmt_port'/2
			    (Port, Proto)
		    in  [42|[58|_cor2]]
		%% Line 1439
		<{{0,0,0,0,0,0,0,0},Port}> when 'true' ->
		    let <_cor3> =
			apply 'fmt_port'/2
			    (Port, Proto)
		    in  [42|[58|_cor3]]
		%% Line 1440
		<{{127,0,0,1},Port}> when 'true' ->
		    let <_cor4> =
			apply 'fmt_port'/2
			    (Port, Proto)
		    in  call 'erlang':'++'
			    ([108|[111|[99|[97|[108|[104|[111|[115|[116|[58]]]]]]]]]], _cor4)
		%% Line 1441
		<{{0,0,0,0,0,0,0,1},Port}> when 'true' ->
		    let <_cor5> =
			apply 'fmt_port'/2
			    (Port, Proto)
		    in  call 'erlang':'++'
			    ([108|[111|[99|[97|[108|[104|[111|[115|[116|[58]]]]]]]]]], _cor5)
		%% Line 1442
		<{IP,Port}> when 'true' ->
		    let <_cor8> =
			call 'inet_parse':'ntoa'
			    (IP)
		    in  let <_cor6> =
			    apply 'fmt_port'/2
				(Port, Proto)
			in  let <_cor7> =
				[58|_cor6]
			    in  call 'erlang':'++'
				    (_cor8, _cor7)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'fmt_addr',2}}] )
	    -| ['compiler_generated'] )
	end
'fmt_port'/2 =
    %% Line 1445
    fun (_cor1,_cor0) ->
	%% Line 1446
	case call 'inet':'getservbyport'
		 (_cor1, _cor0) of
	  %% Line 1447
	  <{'ok',Name}> when 'true' ->
	      Name
	  %% Line 1448
	  <_cor5> when 'true' ->
	      call 'erlang':'integer_to_list'
		  (_cor1)
	end
'tcp_sockets'/0 =
    %% Line 1452
    fun () ->
	apply 'port_list'/1
	    ([116|[99|[112|[95|[105|[110|[101|[116]]]]]]]])
'udp_sockets'/0 =
    %% Line 1453
    fun () ->
	apply 'port_list'/1
	    ([117|[100|[112|[95|[105|[110|[101|[116]]]]]]]])
'sctp_sockets'/0 =
    %% Line 1454
    fun () ->
	apply 'port_list'/1
	    ([115|[99|[116|[112|[95|[105|[110|[101|[116]]]]]]]]])
'port_list'/1 =
    %% Line 1457
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1459
	    ( fun (_cor3) ->
		  %% Line 1460
		  case call 'erlang':'port_info'
			   (_cor3, 'name') of
		    %% Line 1461
		    <{'name',_cor7}>
			when call 'erlang':'=:='
			      (_cor7,
			       _cor0) ->
			'true'
		    %% Line 1462
		    <_cor8> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-port_list/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 1464
		call 'erlang':'ports'
		    ()
	    in  %% Line 1458
		call 'lists':'filter'
		    (_cor5, _cor1)
'format_error'/1 =
    %% Line 1473
    fun (_cor0) ->
	case _cor0 of
	  <'exbadport'> when 'true' ->
	      [105|[110|[118|[97|[108|[105|[100|[32|[112|[111|[114|[116|[32|[115|[116|[97|[116|[101]]]]]]]]]]]]]]]]]]
	  %% Line 1474
	  <'exbadseq'> when 'true' ->
	      [98|[97|[100|[32|[99|[111|[109|[109|[97|[110|[100|[32|[115|[101|[113|[117|[101|[110|[99|[101]]]]]]]]]]]]]]]]]]]]
	  %% Line 1475
	  <'system_limit'> when 'true' ->
	      %% Line 1476
	      [97|[32|[115|[121|[115|[116|[101|[109|[32|[108|[105|[109|[105|[116|[32|[119|[97|[115|[32|[104|[105|[116|[44|[32|[112|[114|[111|[98|[97|[98|[108|[121|[32|[110|[111|[116|[32|[101|[110|[111|[117|[103|[104|[32|[112|[111|[114|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 1477
	  <Tag> when 'true' ->
	      %% Line 1478
	      call 'erl_posix_msg':'message'
		  (Tag)
	end
'tcp_close'/1 =
    %% Line 1481
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      do  %% Line 1483
		  call 'prim_inet':'close'
		      (S)
		  %% Line 1484
		  receive
		    <{'tcp_closed',_cor2}>
			when call 'erlang':'=:='
			      (_cor2,
			       S) ->
			'ok'
		  after 0 ->
		    'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'tcp_close',1}}] )
	    -| ['compiler_generated'] )
	end
'udp_close'/1 =
    %% Line 1487
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 1488
	      receive
		%% Line 1489
		<{'udp_closed',_cor2}>
		    when call 'erlang':'=:='
			  (_cor2,
			   S) ->
		    'ok'
	      after %% Line 1490
		    0 ->
		do  %% Line 1491
		    call 'prim_inet':'close'
			(S)
		    %% Line 1492
		    receive
		      <{'udp_closed',_cor3}>
			  when call 'erlang':'=:='
				(_cor3,
				 S) ->
			  'ok'
		    after 0 ->
		      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'udp_close',1}}] )
	    -| ['compiler_generated'] )
	end
'tcp_controlling_process'/2 =
    %% Line 1496
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,NewOwner>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_pid'
			    (NewOwner)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1497
	      case call 'erlang':'port_info'
		       (S, 'connected') of
		%% Line 1498
		<{'connected',_cor19}>
		    when call 'erlang':'=:='
			  (_cor19,
			   NewOwner) ->
		    %% Line 1499
		    'ok'
		%% Line 1500
		<{'connected',Pid}>
		    when try
			  let <_cor4> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=/='
				  (Pid, _cor4)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1501
		    {'error','not_owner'}
		%% Line 1502
		<'undefined'> when 'true' ->
		    %% Line 1503
		    {'error','einval'}
		%% Line 1504
		<_cor20> when 'true' ->
		    %% Line 1505
		    case call 'prim_inet':'getopt'
			     (S, 'active') of
		      %% Line 1506
		      <{'ok',A0}> when 'true' ->
			  do  %% Line 1507
			      case A0 of
				%% Line 1508
				<'false'> when 'true' ->
				    'ok'
				%% Line 1509
				<_cor21> when 'true' ->
				    case call 'prim_inet':'setopt'
					     (S, 'active', 'false') of
				      <'ok'> when 'true' ->
					  'ok'
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
			      end
			      %% Line 1511
			      case apply 'tcp_sync_input'/3
				       (S, NewOwner, 'false') of
				%% Line 1512
				<'true'> when 'true' ->
				    %% Line 1513
				    'ok'
				%% Line 1514
				<'false'> when 'true' ->
				    %% Line 1515
				    try
					call 'erlang':'port_connect'
					    (S, NewOwner)
				    of <_cor7> ->
					case _cor7 of
					  %% Line 1516
					  <'true'> when 'true' ->
					      do  %% Line 1517
						  call 'erlang':'unlink'
						      (S)
						  do  %% Line 1518
						      case A0 of
							%% Line 1519
							<'false'> when 'true' ->
							    'ok'
							%% Line 1520
							<_cor23> when 'true' ->
							    case call 'prim_inet':'setopt'
								     (S, 'active', A0) of
							      <'ok'> when 'true' ->
								  'ok'
							      ( <_cor8> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor8})
								-| ['compiler_generated'] )
							    end
						      end
						      %% Line 1522
						      'ok'
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'try_clause',_cor10})
					    -| ['compiler_generated'] )
					end
				    catch <_cor13,_cor12,_cor11> ->
					case <_cor13,_cor12,_cor11> of
					  %% Line 1524
					  <'error',Reason,_cor25> when 'true' ->
					      %% Line 1525
					      {'error',Reason}
					  ( <_cor13,_cor12,_cor11> when 'true' ->
						primop 'raise'
						    (_cor11, _cor12)
					    -| ['compiler_generated'] )
					end
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor14})
				  -| ['compiler_generated'] )
			      end
		      %% Line 1528
		      <Error> when 'true' ->
			  %% Line 1529
			  Error
		    end
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'tcp_controlling_process',2}}] )
	    -| ['compiler_generated'] )
	end
'tcp_sync_input'/3 =
    %% Line 1533
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1534
	receive
	  %% Line 1535
	  <{'tcp',_cor6,Data}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor2) ->
	      do  %% Line 1536
		  call 'erlang':'!'
		      (_cor1, {'tcp',_cor2,Data})
		  %% Line 1537
		  apply 'tcp_sync_input'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 1538
	  <{'tcp_closed',_cor7}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      do  %% Line 1539
		  call 'erlang':'!'
		      (_cor1, {'tcp_closed',_cor2})
		  %% Line 1540
		  apply 'tcp_sync_input'/3
		      (_cor2, _cor1, 'true')
	  %% Line 1541
	  <{_cor8,{'data',Data}}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor2) ->
	      do  %% Line 1542
		  call 'erlang':'!'
		      (_cor1, {_cor2,{'data',Data}})
		  %% Line 1543
		  apply 'tcp_sync_input'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 1544
	  <{'inet_async',_cor9,Ref,Status}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor2) ->
	      do  %% Line 1545
		  call 'erlang':'!'
		      (_cor1, {'inet_async',_cor2,Ref,Status})
		  %% Line 1546
		  apply 'tcp_sync_input'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 1547
	  <{'inet_reply',_cor10,Status}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor2) ->
	      do  %% Line 1548
		  call 'erlang':'!'
		      (_cor1, {'inet_reply',_cor2,Status})
		  %% Line 1549
		  apply 'tcp_sync_input'/3
		      (_cor2, _cor1, _cor0)
	after %% Line 1550
	      0 ->
	  _cor0
'udp_controlling_process'/2 =
    %% Line 1555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,NewOwner>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_pid'
			    (NewOwner)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1556
	      case call 'erlang':'port_info'
		       (S, 'connected') of
		%% Line 1557
		<{'connected',_cor16}>
		    when call 'erlang':'=:='
			  (_cor16,
			   NewOwner) ->
		    %% Line 1558
		    'ok'
		%% Line 1559
		<{'connected',Pid}>
		    when try
			  let <_cor4> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=/='
				  (Pid, _cor4)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1560
		    {'error','not_owner'}
		%% Line 1561
		<_cor17> when 'true' ->
		    %% Line 1562
		    case call 'prim_inet':'getopt'
			     (S, 'active') of
		      <{'ok',A0}> when 'true' ->
			  %% Line 1563
			  case call 'prim_inet':'setopt'
				   (S, 'active', 'false') of
			    <'ok'> when 'true' ->
				do  %% Line 1564
				    apply 'udp_sync_input'/2
					(S, NewOwner)
				    %% Line 1565
				    try
					call 'erlang':'port_connect'
					    (S, NewOwner)
				    of <_cor7> ->
					case _cor7 of
					  %% Line 1566
					  <'true'> when 'true' ->
					      do  %% Line 1567
						  call 'erlang':'unlink'
						      (S)
						  let <_cor18> =
						      %% Line 1568
						      call 'prim_inet':'setopt'
							  (S, 'active', A0)
						  in  %% Line 1568
						      case _cor18 of
							<'ok'> when 'true' ->
							    ( _cor18
							      -| ['compiler_generated'] )
							( <_cor8> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor8})
							  -| ['compiler_generated'] )
						      end
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'try_clause',_cor9})
					    -| ['compiler_generated'] )
					end
				    catch <_cor12,_cor11,_cor10> ->
					case <_cor12,_cor11,_cor10> of
					  %% Line 1570
					  <'error',Reason,_cor19> when 'true' ->
					      %% Line 1571
					      {'error',Reason}
					  ( <_cor12,_cor11,_cor10> when 'true' ->
						primop 'raise'
						    (_cor10, _cor11)
					    -| ['compiler_generated'] )
					end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'udp_controlling_process',2}}] )
	    -| ['compiler_generated'] )
	end
'udp_sync_input'/2 =
    %% Line 1575
    fun (_cor1,_cor0) ->
	%% Line 1576
	receive
	  %% Line 1577
	  <Msg = {'sctp',_cor4,_cor5,_cor6,_cor7}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	  %% Line 1578
	  <Msg = {'udp',_cor8,_cor9,_cor10,_cor11}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	  %% Line 1579
	  <Msg = {'udp_closed',_cor12}>
	      when call 'erlang':'=:='
		    (_cor12,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	  %% Line 1580
	  <Msg = {_cor13,{'data',_cor14}}>
	      when call 'erlang':'=:='
		    (_cor13,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	  %% Line 1581
	  <Msg = {'inet_async',_cor15,_cor16,_cor17}>
	      when call 'erlang':'=:='
		    (_cor15,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	  %% Line 1582
	  <Msg = {'inet_reply',_cor18,_cor19}>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor1) ->
	      apply 'udp_sync_input'/3
		  (_cor1, _cor0, Msg)
	after %% Line 1583
	      0 ->
	  %% Line 1584
	  'ok'
'udp_sync_input'/3 =
    %% Line 1587
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1588
	    call 'erlang':'!'
		(_cor1, _cor0)
	    %% Line 1589
	    apply 'udp_sync_input'/2
		(_cor2, _cor1)
'start_timer'/1 =
    %% Line 1591
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      'false'
	  %% Line 1592
	  <Timeout> when 'true' ->
	      let <_cor1> =
		  %% Line 1593
		  call 'erlang':'self'
		      ()
	      in  %% Line 1593
		  call 'erlang':'start_timer'
		      (Timeout, _cor1, 'inet')
	end
'timeout'/1 =
    %% Line 1595
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      'infinity'
	  %% Line 1596
	  <Timer> when 'true' ->
	      %% Line 1597
	      case call 'erlang':'read_timer'
		       (Timer) of
		%% Line 1598
		<'false'> when 'true' ->
		    0
		%% Line 1599
		<Time> when 'true' ->
		    Time
	      end
	end
'timeout'/2 =
    %% Line 1602
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Time,'false'> when 'true' ->
	      Time
	  %% Line 1603
	  <Time,Timer> when 'true' ->
	      let <TimerTime> =
		  %% Line 1604
		  apply 'timeout'/1
		      (Timer)
	      in  %% Line 1605
		  case <> of
		    <>
			when call 'erlang':'<'
			      (TimerTime,
			       Time) ->
			TimerTime
		    %% Line 1606
		    <> when 'true' ->
			Time
		  end
	end
'stop_timer'/1 =
    %% Line 1609
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      'false'
	  %% Line 1610
	  <Timer> when 'true' ->
	      %% Line 1611
	      case call 'erlang':'cancel_timer'
		       (Timer) of
		%% Line 1612
		<'false'> when 'true' ->
		    %% Line 1613
		    receive
		      %% Line 1614
		      <{'timeout',_cor3,_cor4}>
			  when call 'erlang':'=:='
				(_cor3,
				 Timer) ->
			  'false'
		    after %% Line 1615
			  0 ->
		      %% Line 1616
		      'false'
		%% Line 1618
		<T> when 'true' ->
		    T
	      end
	end
'lock_socket'/2 =
    %% Line 1622
    fun (_cor1,_cor0) ->
	%% Line 1623
	case call 'erlang':'port_info'
		 (_cor1, 'connected') of
	  %% Line 1624
	  <{'connected',Pid}>
	      when try
		    let <_cor2> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=/='
			    (Pid, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1625
	      {'error','not_owner'}
	  %% Line 1626
	  <'undefined'> when 'true' ->
	      %% Line 1627
	      {'error','einval'}
	  %% Line 1628
	  <_cor6> when 'true' ->
	      %% Line 1629
	      call 'prim_inet':'ignorefd'
		  (_cor1, _cor0)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('inet')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('inet', _cor0)
end