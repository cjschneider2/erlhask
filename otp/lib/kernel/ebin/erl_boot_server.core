module 'erl_boot_server' ['add_slave'/1,
			  'add_subnet'/2,
			  'boot_accept'/3,
			  'boot_init'/1,
			  'code_change'/3,
			  'delete_slave'/1,
			  'delete_subnet'/2,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_info'/2,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'start'/1,
			  'start_link'/1,
			  'terminate'/2,
			  'which_slaves'/0,
			  'would_be_booted'/1]
    attributes [%% Line 29
		'behaviour' =
		    %% Line 29
		    ['gen_server'],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','state'},[{'record_field',46,{'atom',46,'priority'},{'integer',46,0}}|[{'typed_record_field',{'record_field',47,{'atom',47,'version'},{'string',47,[]}},{'type',47,'string',[]}}|[{'record_field',48,{'atom',48,'udp_sock'}}|[{'record_field',49,{'atom',49,'udp_port'}}|[{'record_field',50,{'atom',50,'listen_sock'}}|[{'record_field',51,{'atom',51,'listen_port'}}|[{'record_field',52,{'atom',52,'slaves'}}|[{'typed_record_field',{'record_field',53,{'atom',53,'bootp'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'pid',[]}]]}}|[{'record_field',54,{'atom',54,'prim_state'}}]]]]]]]]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'state',{'type',56,'record',[{'atom',56,'state'}]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'ip4_address',{'type',60,'tuple',[{'type',60,'range',[{'integer',60,0}|[{'integer',60,255}]]}|[{'type',60,'range',[{'integer',60,0}|[{'integer',60,255}]]}|[{'type',60,'range',[{'integer',60,0}|[{'integer',60,255}]]}|[{'type',60,'range',[{'integer',60,0}|[{'integer',60,255}]]}]]]]},[]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'start',1},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'Slaves'}]}|[{'type',62,'union',[{'type',62,'tuple',[{'atom',62,'ok'}|[{'var',62,'Pid'}]]}|[{'type',62,'tuple',[{'atom',62,'error'}|[{'var',62,'What'}]]}]]}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Slaves'}|[{'type',63,'list',[{'var',63,'Host'}]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Host'}|[{'type',64,'atom',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Pid'}|[{'type',65,'pid',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'What'}|[{'type',66,'any',[]}]]]]}]]]]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'start_link',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Slaves'}]}|[{'type',76,'union',[{'type',76,'tuple',[{'atom',76,'ok'}|[{'var',76,'Pid'}]]}|[{'type',76,'tuple',[{'atom',76,'error'}|[{'var',76,'What'}]]}]]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Slaves'}|[{'type',77,'list',[{'var',77,'Host'}]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Host'}|[{'type',78,'atom',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Pid'}|[{'type',79,'pid',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'What'}|[{'type',80,'any',[]}]]]]}]]]]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'add_slave',1},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'Slave'}]}|[{'type',106,'union',[{'atom',106,'ok'}|[{'type',106,'tuple',[{'atom',106,'error'}|[{'var',106,'What'}]]}]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Slave'}|[{'var',107,'Host'}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Host'}|[{'type',108,'atom',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'What'}|[{'type',109,'any',[]}]]]]}]]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'delete_slave',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Slave'}]}|[{'type',119,'union',[{'atom',119,'ok'}|[{'type',119,'tuple',[{'atom',119,'error'}|[{'var',119,'What'}]]}]]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Slave'}|[{'var',120,'Host'}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Host'}|[{'type',121,'atom',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'What'}|[{'type',122,'any',[]}]]]]}]]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'add_subnet',2},[{'type',132,'fun',[{'type',132,'product',[{'ann_type',132,[{'var',132,'Mask'}|[{'type',132,'ip4_address',[]}]]}|[{'ann_type',132,[{'var',132,'Addr'}|[{'type',132,'ip4_address',[]}]]}]]}|[{'type',133,'union',[{'atom',133,'ok'}|[{'type',133,'tuple',[{'atom',133,'error'}|[{'type',133,'any',[]}]]}]]}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'delete_subnet',2},[{'type',143,'fun',[{'type',143,'product',[{'ann_type',143,[{'var',143,'Mask'}|[{'type',143,'ip4_address',[]}]]}|[{'ann_type',143,[{'var',143,'Addr'}|[{'type',143,'ip4_address',[]}]]}]]}|[{'atom',143,'ok'}]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'which_slaves',0},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[]}|[{'var',148,'Slaves'}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Slaves'}|[{'type',149,'list',[{'var',149,'Host'}]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Host'}|[{'type',150,'atom',[]}]]]]}]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'init',1},[{'type',185,'fun',[{'type',185,'product',[{'type',185,'list',[{'type',185,'atom',[]}]}]}|[{'type',185,'tuple',[{'atom',185,'ok'}|[{'type',185,'state',[]}]]}]]}]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'handle_call',3},[{'type',208,'fun',[{'type',208,'product',[{'type',208,'union',[{'atom',208,'which'}|[{'type',208,'tuple',[{'atom',208,'add'}|[{'type',208,'atom',[]}]]}|[{'type',208,'tuple',[{'atom',208,'delete'}|[{'type',208,'atom',[]}]]}]]]}|[{'var',208,'_'}|[{'type',208,'state',[]}]]]}|[{'type',209,'tuple',[{'atom',209,'reply'}|[{'type',209,'union',[{'atom',209,'ok'}|[{'type',209,'list',[{'type',209,'atom',[]}]}]]}|[{'type',209,'state',[]}]]]}]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'handle_cast',2},[{'type',222,'fun',[{'type',222,'product',[{'type',222,'term',[]}|[{'type',222,'list',[{'type',222,'atom',[]}]}]]}|[{'type',222,'tuple',[{'atom',222,'noreply'}|[{'type',222,'list',[{'type',222,'atom',[]}]}]]}]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'handle_info',2},[{'type',227,'fun',[{'type',227,'product',[{'type',227,'term',[]}|[{'type',227,'state',[]}]]}|[{'type',227,'tuple',[{'atom',227,'noreply'}|[{'type',227,'state',[]}]]}]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'terminate',2},[{'type',269,'fun',[{'type',269,'product',[{'type',269,'term',[]}|[{'type',269,'state',[]}]]}|[{'atom',269,'ok'}]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'code_change',3},[{'type',274,'fun',[{'type',274,'product',[{'type',274,'term',[]}|[{'type',274,'state',[]}|[{'type',274,'term',[]}]]]}|[{'type',274,'tuple',[{'atom',274,'ok'}|[{'type',274,'state',[]}]]}]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'boot_init',1},[{'type',285,'fun',[{'type',285,'product',[{'type',285,'reference',[]}]}|[{'type',285,'no_return',[]}]]}]}]]
'start'/1 =
    %% Line 68
    fun (_cor0) ->
	%% Line 69
	case apply 'check_arg'/1
		 (_cor0) of
	  %% Line 70
	  <{'ok',AL}> when 'true' ->
	      %% Line 71
	      call 'gen_server':'start'
		  ({'local','boot_server'}, 'erl_boot_server', AL, [])
	  %% Line 72
	  <_cor3> when 'true' ->
	      %% Line 73
	      {'error',{'badarg',_cor0}}
	end
'start_link'/1 =
    %% Line 82
    fun (_cor0) ->
	%% Line 83
	case apply 'check_arg'/1
		 (_cor0) of
	  %% Line 84
	  <{'ok',AL}> when 'true' ->
	      %% Line 85
	      call 'gen_server':'start_link'
		  ({'local','boot_server'}, %% Line 86
					    'erl_boot_server', %% Line 86
							       AL, %% Line 86
								   [])
	  %% Line 87
	  <_cor3> when 'true' ->
	      %% Line 88
	      {'error',{'badarg',_cor0}}
	end
'check_arg'/1 =
    %% Line 91
    fun (_cor0) ->
	%% Line 92
	apply 'check_arg'/2
	    (_cor0, [])
'check_arg'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Slave|Rest],Result> when 'true' ->
	      %% Line 95
	      case call 'inet':'getaddr'
		       (Slave, 'inet') of
		%% Line 96
		<{'ok',IP}> when 'true' ->
		    %% Line 97
		    apply 'check_arg'/2
			(Rest, [{{255,255,255,255},IP}|Result])
		%% Line 98
		<_cor5> when 'true' ->
		    %% Line 99
		    'error'
	      end
	  %% Line 101
	  <[],Result> when 'true' ->
	      %% Line 102
	      {'ok',Result}
	  %% Line 103
	  <_cor6,_X_Result> when 'true' ->
	      %% Line 104
	      'error'
	end
'add_slave'/1 =
    %% Line 111
    fun (_cor0) ->
	%% Line 112
	case call 'inet':'getaddr'
		 (_cor0, 'inet') of
	  %% Line 113
	  <{'ok',IP}> when 'true' ->
	      %% Line 114
	      call 'gen_server':'call'
		  ('boot_server', {'add',{{255,255,255,255},IP}})
	  %% Line 115
	  <_cor3> when 'true' ->
	      %% Line 116
	      {'error',{'badarg',_cor0}}
	end
'delete_slave'/1 =
    %% Line 124
    fun (_cor0) ->
	%% Line 125
	case call 'inet':'getaddr'
		 (_cor0, 'inet') of
	  %% Line 126
	  <{'ok',IP}> when 'true' ->
	      %% Line 127
	      call 'gen_server':'call'
		  ('boot_server', {'delete',{{255,255,255,255},IP}})
	  %% Line 128
	  <_cor3> when 'true' ->
	      %% Line 129
	      {'error',{'badarg',_cor0}}
	end
'add_subnet'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mask,Addr>
	      when let <_cor2> =
		    call 'erlang':'is_tuple'
			(Mask)
		in  let <_cor3> =
			call 'erlang':'is_tuple'
			    (Addr)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 136
	      case apply 'member_address'/2
		       (Addr, [{Mask,Addr}|[]]) of
		%% Line 137
		<'true'> when 'true' ->
		    %% Line 138
		    call 'gen_server':'call'
			('boot_server', {'add',{Mask,Addr}})
		%% Line 139
		<'false'> when 'true' ->
		    %% Line 140
		    {'error','empty_subnet'}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_subnet',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_subnet'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mask,Addr>
	      when let <_cor2> =
		    call 'erlang':'is_tuple'
			(Mask)
		in  let <_cor3> =
			call 'erlang':'is_tuple'
			    (Addr)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 146
	      call 'gen_server':'call'
		  ('boot_server', {'delete',{Mask,Addr}})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_subnet',2}}] )
	    -| ['compiler_generated'] )
	end
'which_slaves'/0 =
    %% Line 152
    fun () ->
	%% Line 153
	call 'gen_server':'call'
	    ('boot_server', 'which')
'would_be_booted'/1 =
    %% Line 159
    fun (_cor0) ->
	%% Line 160
	case call 'inet':'getaddr'
		 (_cor0, 'inet') of
	  <{'ok',IP}> when 'true' ->
	      let <_cor2> =
		  %% Line 161
		  apply 'which_slaves'/0
		      ()
	      in  %% Line 161
		  apply 'member_address'/2
		      (IP, _cor2)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'int16'/1 =
    %% Line 163
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 164
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor2> =
		      %% Line 164
		      call 'erlang':'band'
			  (_cor1, 255)
		  in  let <_cor3> =
			  %% Line 164
			  call 'erlang':'band'
			      (X, 255)
		      in  %% Line 164
			  [_cor2|[_cor3|[]]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'int16',1}}] )
	    -| ['compiler_generated'] )
	end
'member_address'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <IP,[{{MA,MB,MC,MD},{EA,EB,EC,ED}}|Rest]> when 'true' ->
	      %% Line 169
	      case IP of
		<{A,B,C,D}> when 'true' ->
		    %% Line 170
		    case <> of
		      <>
			  when try
				let <_cor3> =
				    call 'erlang':'band'
					(A, MA)
				in  let <_cor4> =
					call 'erlang':'=:='
					    (_cor3, EA)
				    in  let <_cor5> =
					    %% Line 171
					    call 'erlang':'band'
						(B, MB)
					in  let <_cor6> =
						%% Line 171
						call 'erlang':'=:='
						    (_cor5, EB)
					    in  let <_cor7> =
						    %% Line 172
						    call 'erlang':'band'
							(C, MC)
						in  let <_cor8> =
							%% Line 172
							call 'erlang':'=:='
							    (_cor7, EC)
						    in  let <_cor9> =
							    %% Line 173
							    call 'erlang':'band'
								(D, MD)
							in  let <_cor10> =
								%% Line 173
								call 'erlang':'=:='
								    (_cor9, ED)
							    in  let <_cor11> =
								    call 'erlang':'and'
									(_cor8, _cor10)
								in  let <_cor12> =
									call 'erlang':'and'
									    (_cor6, _cor11)
								    in  call 'erlang':'and'
									    (_cor4, _cor12)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 174
			  'true'
		      %% Line 175
		      <> when 'true' ->
			  %% Line 176
			  apply 'member_address'/2
			      (IP, Rest)
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 178
	  <_cor15,[]> when 'true' ->
	      %% Line 179
	      'false'
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'member_address',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	case call 'gen_udp':'open'
		 (4368, []) of
	  <{'ok',U}> when 'true' ->
	      %% Line 189
	      case call 'gen_tcp':'listen'
		       (0, ['binary'|[{'packet',4}]]) of
		<{'ok',L}> when 'true' ->
		    %% Line 190
		    case call 'inet':'port'
			     (L) of
		      <{'ok',Port}> when 'true' ->
			  %% Line 191
			  case call 'inet':'port'
				   (U) of
			    <{'ok',UPort}> when 'true' ->
				let <Ref> =
				    %% Line 192
				    call 'erlang':'make_ref'
					()
				in  let <Pid> =
					%% Line 193
					call 'proc_lib':'spawn_link'
					    ('erl_boot_server', 'boot_init', [Ref|[]])
				    in  %% Line 194
					case call 'gen_tcp':'controlling_process'
						 (L, Pid) of
					  <'ok'> when 'true' ->
					      do  %% Line 195
						  call 'erlang':'!'
						      (Pid, {Ref,L})
						  do  %% Line 197
						      call 'erlang':'process_flag'
							  ('trap_exit', 'true')
						      let <_cor9> =
							  %% Line 199
							  call 'erlang':'system_info'
							      ('version')
						      in  let <_cor8> =
							      %% Line 204
							      call 'ordsets':'from_list'
								  (_cor0)
							  in  %% Line 198
							      {'ok',{'state',0,_cor9,%% Line 200
										     U,%% Line 201
										       UPort,%% Line 202
											     L,%% Line 203
											       Port,_cor8,%% Line 205
													  Pid,'undefined'}}
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor7})
					    -| ['compiler_generated'] )
					end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'add',Address},_cor25,S0> when 'true' ->
	      %% Line 212
	      ( case S0 of
		  ( <( {'state',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec0,_cor32,_cor33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Slaves> =
			    call 'ordsets':'add_element'
				(Address, _rec0)
			in  do  %% Line 213
				call 'erlang':'!'
				    (_cor32, {'slaves',Slaves})
				let <_cor10> =
				    %% Line 214
				    call 'erlang':'setelement'
					(8, S0, Slaves)
				in  %% Line 214
				    {'reply','ok',_cor10}
		    -| ['compiler_generated'] )
		  ( <_cor34> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 215
	  <{'delete',Address},_cor54,S0> when 'true' ->
	      %% Line 216
	      ( case S0 of
		  ( <( {'state',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_rec3,_cor61,_cor62}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Slaves> =
			    call 'ordsets':'del_element'
				(Address, _rec3)
			in  do  %% Line 217
				call 'erlang':'!'
				    (_cor61, {'slaves',Slaves})
				let <_cor18> =
				    %% Line 218
				    call 'erlang':'setelement'
					(8, S0, Slaves)
				in  %% Line 218
				    {'reply','ok',_cor18}
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 219
	  <'which',_cor83,S0> when 'true' ->
	      %% Line 220
	      ( case S0 of
		  ( <( {'state',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_rec6,_cor90,_cor91}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor21> =
			    call 'ordsets':'to_list'
				(_rec6)
			in  {'reply',_cor21,S0}
		    -| ['compiler_generated'] )
		  ( <_cor92> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	%% Line 225
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 229
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'udp',U,IP,Port,Data},S0> when 'true' ->
	      %% Line 230
	      ( case S0 of
		  ( <( {'state',_cor28,_rec7,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Token> =
			    call 'erlang':'++'
				([69|[66|[79|[79|[84|[81]]]]]], _rec7)
			in  let <_cor7> =
				%% Line 231
				call 'ordsets':'to_list'
				    (_cor33)
			    in  let <Valid> =
				    %% Line 231
				    apply 'member_address'/2
					(IP, _cor7)
				in  %% Line 234
				    case <Valid,Data,Token> of
				      %% Line 235
				      <'true',_cor46,_cor47>
					  when let <_cor48> =
						call 'erlang':'=:='
						    (_cor46, Token)
					    in  let <_cor49> =
						    call 'erlang':'=:='
							(_cor47, Token)
						in  call 'erlang':'and'
							(_cor48, _cor49) ->
					  let <_cor13> =
					      %% Line 237
					      apply 'int16'/1
						  (_cor32)
					  in  do  %% Line 236
						  case call 'gen_udp':'send'
							   (U, IP, Port, [[69|[66|[79|[79|[84|[82]]]]]]|[_cor28|%% Line 237
														[_cor13|%% Line 238
															[_rec7|[]]]]]) of
						    %% Line 240
						    <'ok'> when 'true' ->
							'ok'
						    %% Line 241
						    <{'error','not_owner'}> when 'true' ->
							%% Line 242
							call 'error_logger':'error_msg'
							    ([42|[42|[32|[73|[108|[108|[101|[103|[97|[108|[32|[98|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[58|[32|[110|[111|[116|[32|[111|[119|[110|[101|[114|[32|[111|[102|[32|[126|[119|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 243
																																																					[U|[]])
						    %% Line 244
						    <{'error',Reason}> when 'true' ->
							let <Err> =
							    %% Line 245
							    call 'file':'format_error'
								(Reason)
							in  %% Line 246
							    call 'error_logger':'error_msg'
								([42|[42|[32|[73|[108|[108|[101|[103|[97|[108|[32|[98|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[58|[32|[126|[119|[32|[80|[79|[83|[73|[88|[32|[101|[114|[114|[111|[114|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 247
																																																				  [U|[Err|[]]])
						    ( <_cor17> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor17})
						      -| ['compiler_generated'] )
						  end
						  %% Line 249
						  {'noreply',S0}
				      %% Line 250
				      <'false',_cor77,_cor78> when 'true' ->
					  do  %% Line 251
					      call 'error_logger':'error_msg'
						  ([42|[42|[32|[73|[108|[108|[101|[103|[97|[108|[32|[98|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[58|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[118|[97|[108|[105|[100|[32|[97|[100|[100|[114|[101|[115|[115|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 252
																																																										     [IP|[]])
					      %% Line 253
					      {'noreply',S0}
				      %% Line 254
				      <'true',_cor79,_cor80> when 'true' ->
					  let <_cor19> =
					      catch
						  %% Line 255
						  call 'string':'substr'
						      (Data, 1, 6)
					  in  do  %% Line 255
						  case _cor19 of
						    %% Line 256
						    <[69|[66|[79|[79|[84|[81]]]]]]> when 'true' ->
							let <_cor20> =
							    %% Line 257
							    call 'erlang':'length'
								(Data)
							in  let <Vsn> =
								%% Line 257
								call 'string':'substr'
								    (Data, 7, _cor20)
							    in  %% Line 258
								call 'error_logger':'error_msg'
								    ([42|[42|[32|[73|[108|[108|[101|[103|[97|[108|[32|[98|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[58|[32|[99|[108|[105|[101|[110|[116|[32|[118|[101|[114|[115|[105|[111|[110|[32|[105|[115|[32|[126|[115|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 259
																																																									     [Vsn|[]])
						    %% Line 260
						    <_cor81> when 'true' ->
							%% Line 261
							call 'error_logger':'error_msg'
							    ([42|[42|[32|[73|[108|[108|[101|[103|[97|[108|[32|[98|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[58|[32|[117|[110|[114|[101|[99|[111|[103|[110|[105|[122|[97|[98|[108|[101|[32|[114|[101|[113|[117|[101|[115|[116|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 262
																																																										 [])
						  end
						  %% Line 264
						  {'noreply',S0}
				      ( <_fol85,_fol86,_fol87> when 'true' ->
					    let <_cor25> = {_fol85,_fol86,_fol87}
					    in  primop 'match_fail'
						    ({'case_clause',_cor25})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 266
	  <_X_Info,S0> when 'true' ->
	      %% Line 267
	      {'noreply',S0}
	end
'terminate'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	%% Line 272
	'ok'
'code_change'/3 =
    %% Line 276
    fun (_cor2,_cor1,_cor0) ->
	%% Line 277
	{'ok',_cor1}
'boot_init'/1 =
    %% Line 287
    fun (_cor0) ->
	%% Line 288
	receive
	  %% Line 289
	  <{_cor2,Listen}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      do  %% Line 290
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 291
		  apply 'boot_main'/1
		      (Listen)
	after 'infinity' ->
	  'true'
'boot_main'/1 =
    %% Line 294
    fun (_cor0) ->
	let <Tag> =
	    %% Line 295
	    call 'erlang':'make_ref'
		()
	in  let <_cor2> =
		%% Line 296
		call 'erlang':'self'
		    ()
	    in  let <Pid> =
		    %% Line 296
		    call 'proc_lib':'spawn_link'
			('erl_boot_server', 'boot_accept', [_cor2|[_cor0|[Tag|[]]]])
		in  %% Line 297
		    apply 'boot_main'/3
			(_cor0, Tag, Pid)
'boot_main'/3 =
    %% Line 299
    fun (_cor2,_cor1,_cor0) ->
	%% Line 300
	receive
	  %% Line 301
	  <{_cor6,_cor7}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 302
	      apply 'boot_main'/1
		  (_cor2)
	  %% Line 303
	  <{'EXIT',_cor8,_cor9}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor0) ->
	      %% Line 304
	      apply 'boot_main'/1
		  (_cor2)
	  %% Line 305
	  <{'EXIT',_cor10,Reason}> when 'true' ->
	      do  %% Line 306
		  call 'erlang':'exit'
		      (_cor0, 'kill')
		  %% Line 307
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 308
	  <{'tcp_closed',_cor11}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor2) ->
	      %% Line 309
	      call 'erlang':'exit'
		  ('closed')
	after 'infinity' ->
	  'true'
'boot_accept'/3 =
    %% Line 312
    fun (_cor2,_cor1,_cor0) ->
	let <Reply> =
	    %% Line 313
	    call 'gen_tcp':'accept'
		(_cor1)
	in  do  %% Line 314
		call 'erlang':'unlink'
		    (_cor2)
		do  %% Line 315
		    call 'erlang':'!'
			(_cor2, {_cor0,'continue'})
		    %% Line 316
		    case Reply of
		      %% Line 317
		      <{'ok',Socket}> when 'true' ->
			  %% Line 318
			  case call 'inet':'peername'
				   (Socket) of
			    <{'ok',{IP,_X_Port}}> when 'true' ->
				let <_cor5> =
				    %% Line 319
				    apply 'which_slaves'/0
					()
				in  %% Line 319
				    case apply 'member_address'/2
					     (IP, _cor5) of
				      <'true'> when 'true' ->
					  let <PS> =
					      %% Line 320
					      call 'erl_prim_loader':'prim_init'
						  ()
					  in  %% Line 321
					      apply 'boot_loop'/2
						  (Socket, PS)
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
'boot_loop'/2 =
    %% Line 324
    fun (_cor1,_cor0) ->
	%% Line 325
	receive
	  %% Line 326
	  <{'tcp',_cor5,Data}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      let <PS2> =
		  %% Line 327
		  apply 'handle_command'/3
		      (_cor1, _cor0, Data)
	      in  %% Line 328
		  apply 'boot_loop'/2
		      (_cor1, PS2)
	  %% Line 329
	  <{'tcp_closed',_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 330
	      'true'
	after 'infinity' ->
	  'true'
'handle_command'/3 =
    %% Line 333
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 334
		call 'erlang':'binary_to_term'
		    (_cor0)
	in  %% Line 334
	    case _cor3 of
	      %% Line 335
	      <{'get',File}> when 'true' ->
		  %% Line 336
		  case call 'erl_prim_loader':'prim_get_file'
			   (_cor1, File) of
		    <{Res,PS2}> when 'true' ->
			do  %% Line 337
			    apply 'send_file_result'/3
				(_cor2, 'get', Res)
			    %% Line 338
			    PS2
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 339
	      <{'list_dir',Dir}> when 'true' ->
		  %% Line 340
		  case call 'erl_prim_loader':'prim_list_dir'
			   (_cor1, Dir) of
		    <{Res,PS2}> when 'true' ->
			do  %% Line 341
			    apply 'send_file_result'/3
				(_cor2, 'list_dir', Res)
			    %% Line 342
			    PS2
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      %% Line 343
	      <{'read_file_info',File}> when 'true' ->
		  %% Line 344
		  case call 'erl_prim_loader':'prim_read_file_info'
			   (_cor1, File) of
		    <{Res,PS2}> when 'true' ->
			do  %% Line 345
			    apply 'send_file_result'/3
				(_cor2, 'read_file_info', Res)
			    %% Line 346
			    PS2
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 347
	      <'get_cwd'> when 'true' ->
		  %% Line 348
		  case call 'erl_prim_loader':'prim_get_cwd'
			   (_cor1, []) of
		    <{Res,PS2}> when 'true' ->
			do  %% Line 349
			    apply 'send_file_result'/3
				(_cor2, 'get_cwd', Res)
			    %% Line 350
			    PS2
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      %% Line 351
	      <{'get_cwd',Drive}> when 'true' ->
		  %% Line 352
		  case call 'erl_prim_loader':'prim_get_cwd'
			   (_cor1, [Drive|[]]) of
		    <{Res,PS2}> when 'true' ->
			do  %% Line 353
			    apply 'send_file_result'/3
				(_cor2, 'get_cwd', Res)
			    %% Line 354
			    PS2
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	      %% Line 355
	      <{'EXIT',Reason}> when 'true' ->
		  do  %% Line 356
		      apply 'send_result'/2
			  (_cor2, {'error',Reason})
		      _cor1
	      %% Line 358
	      <_X_Other> when 'true' ->
		  do  %% Line 359
		      apply 'send_result'/2
			  (_cor2, {'error','unknown_command'})
		      _cor1
	    end
'send_file_result'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	%% Line 364
	apply 'send_result'/2
	    (_cor2, {_cor1,_cor0})
'send_result'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 367
	    call 'erlang':'term_to_binary'
		(_cor0)
	in  %% Line 367
	    case call 'gen_tcp':'send'
		     (_cor1, _cor2) of
	      %% Line 368
	      <'ok'> when 'true' ->
		  %% Line 369
		  'ok'
	      %% Line 370
	      <Error> when 'true' ->
		  do  %% Line 371
		      call 'error_logger':'error_msg'
			  ([42|[42|[32|[66|[111|[111|[116|[32|[115|[101|[114|[118|[101|[114|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[101|[110|[100|[32|[114|[101|[115|[117|[108|[116|[32|[116|[111|[32|[115|[111|[99|[107|[101|[116|[58|[32|[126|[119|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 372
																																										    [Error|[]])
		      %% Line 373
		      'ok'
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_boot_server')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_boot_server', _cor0)
end