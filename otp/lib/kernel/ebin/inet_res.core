module 'inet_res' ['dns_msg'/1,
		   'getbyname'/2,
		   'getbyname'/3,
		   'getbyname_tm'/3,
		   'gethostbyaddr'/1,
		   'gethostbyaddr'/2,
		   'gethostbyaddr_tm'/2,
		   'gethostbyname'/1,
		   'gethostbyname'/2,
		   'gethostbyname'/3,
		   'gethostbyname_tm'/3,
		   'lookup'/3,
		   'lookup'/4,
		   'lookup'/5,
		   'module_info'/0,
		   'module_info'/1,
		   'nnslookup'/4,
		   'nnslookup'/5,
		   'nslookup'/3,
		   'nslookup'/4,
		   'resolve'/3,
		   'resolve'/4,
		   'resolve'/5]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','hostent'},[{'typed_record_field',{'record_field',24,{'atom',24,'h_name'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'remote_type',24,[{'atom',24,'inet'}|[{'atom',24,'hostname'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'h_aliases'},{'nil',25}},{'type',25,'list',[{'remote_type',25,[{'atom',25,'inet'}|[{'atom',25,'hostname'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'h_addrtype'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'inet'}|[{'atom',26,'inet6'}]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'h_length'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'h_addr_list'},{'nil',28}},{'type',28,'list',[{'remote_type',28,[{'atom',28,'inet'}|[{'atom',28,'ip_address'}|[[]]]]}]}}]]]]],[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','dns_header'},[{'record_field',152,{'atom',152,'id'},{'integer',152,0}}|[{'record_field',154,{'atom',154,'qr'},{'integer',154,0}}|[{'record_field',155,{'atom',155,'opcode'},{'integer',155,0}}|[{'record_field',156,{'atom',156,'aa'},{'integer',156,0}}|[{'record_field',157,{'atom',157,'tc'},{'integer',157,0}}|[{'record_field',158,{'atom',158,'rd'},{'integer',158,0}}|[{'record_field',160,{'atom',160,'ra'},{'integer',160,0}}|[{'record_field',161,{'atom',161,'pr'},{'integer',161,0}}|[{'record_field',163,{'atom',163,'rcode'},{'integer',163,0}}]]]]]]]]],[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{{'record','dns_rec'},[{'record_field',168,{'atom',168,'header'}}|[{'record_field',169,{'atom',169,'qdlist'},{'nil',169}}|[{'record_field',170,{'atom',170,'anlist'},{'nil',170}}|[{'record_field',171,{'atom',171,'nslist'},{'nil',171}}|[{'record_field',172,{'atom',172,'arlist'},{'nil',172}}]]]]],[]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{{'record','dns_rr'},[{'record_field',178,{'atom',178,'domain'},{'string',178,[]}}|[{'record_field',179,{'atom',179,'type'},{'atom',179,'any'}}|[{'record_field',180,{'atom',180,'class'},{'atom',180,'in'}}|[{'record_field',181,{'atom',181,'cnt'},{'integer',181,0}}|[{'record_field',182,{'atom',182,'ttl'},{'integer',182,0}}|[{'record_field',183,{'atom',183,'data'},{'nil',183}}|[{'record_field',185,{'atom',185,'tm'}}|[{'record_field',186,{'atom',186,'bm'},{'nil',186}}|[{'record_field',187,{'atom',187,'func'},{'atom',187,'false'}}]]]]]]]]],[]}],
		%% Line 192
		'type' =
		    %% Line 192
		    [{{'record','dns_rr_opt'},[{'record_field',194,{'atom',194,'domain'},{'string',194,[]}}|[{'record_field',195,{'atom',195,'type'},{'atom',195,'opt'}}|[{'record_field',196,{'atom',196,'udp_payload_size'},{'integer',196,1280}}|[{'record_field',197,{'atom',197,'ext_rcode'},{'integer',197,0}}|[{'record_field',198,{'atom',198,'version'},{'integer',198,0}}|[{'record_field',199,{'atom',199,'z'},{'integer',199,0}}|[{'record_field',200,{'atom',200,'data'},{'nil',200}}]]]]]]],[]}],
		%% Line 203
		'type' =
		    %% Line 203
		    [{{'record','dns_query'},[{'record_field',205,{'atom',205,'domain'}}|[{'record_field',206,{'atom',206,'type'}}|[{'record_field',207,{'atom',207,'class'}}]]],[]}],
		%% Line 374
		'type' =
		    %% Line 374
		    [{{'record','connect_opts'},[{'record_field',376,{'atom',376,'ifaddr'},{'atom',376,'any'}}|[{'record_field',377,{'atom',377,'port'},{'integer',377,0}}|[{'record_field',378,{'atom',378,'fd'},{'op',378,'-',{'integer',378,1}}}|[{'record_field',379,{'atom',379,'opts'},{'nil',379}}]]]],[]}],
		%% Line 382
		'type' =
		    %% Line 382
		    [{{'record','listen_opts'},[{'record_field',384,{'atom',384,'ifaddr'},{'atom',384,'any'}}|[{'record_field',385,{'atom',385,'port'},{'integer',385,0}}|[{'record_field',386,{'atom',386,'backlog'},{'integer',386,5}}|[{'record_field',387,{'atom',387,'fd'},{'op',387,'-',{'integer',387,1}}}|[{'record_field',388,{'atom',388,'opts'},{'nil',388}}]]]]],[]}],
		%% Line 392
		'type' =
		    %% Line 392
		    [{{'record','udp_opts'},[{'record_field',394,{'atom',394,'ifaddr'},{'atom',394,'any'}}|[{'record_field',395,{'atom',395,'port'},{'integer',395,0}}|[{'record_field',396,{'atom',396,'fd'},{'op',396,'-',{'integer',396,1}}}|[{'record_field',397,{'atom',397,'opts'},{'cons',397,{'tuple',397,[{'atom',397,'active'}|[{'atom',397,'true'}]]},{'nil',397}}}]]]],[]}],
		%% Line 402
		'type' =
		    %% Line 402
		    [{{'record','sctp_opts'},[{'record_field',404,{'atom',404,'ifaddr'}}|[{'record_field',405,{'atom',405,'port'},{'integer',405,0}}|[{'record_field',406,{'atom',406,'fd'},{'op',406,'-',{'integer',406,1}}}|[{'record_field',407,{'atom',407,'type'},{'atom',407,'seqpacket'}}|[{'record_field',408,{'atom',408,'opts'},{'cons',408,{'tuple',408,[{'atom',408,'mode'}|[{'atom',408,'binary'}]]},{'cons',409,{'tuple',409,[{'atom',409,'buffer'}|[{'integer',409,65536}]]},{'cons',410,{'tuple',410,[{'atom',410,'sndbuf'}|[{'integer',410,65536}]]},{'cons',411,{'tuple',411,[{'atom',411,'recbuf'}|[{'integer',411,1024}]]},{'cons',412,{'tuple',412,[{'atom',412,'sctp_events'}|[{'atom',412,'undefined'}]]},{'nil',414}}}}}}}]]]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'res_option',{'type',51,'union',[{'type',51,'tuple',[{'atom',51,'alt_nameservers'}|[{'type',51,'list',[{'type',51,'nameserver',[]}]}]]}|[{'type',52,'tuple',[{'atom',52,'edns'}|[{'type',52,'union',[{'integer',52,0}|[{'atom',52,'false'}]]}]]}|[{'type',53,'tuple',[{'atom',53,'inet6'}|[{'type',53,'boolean',[]}]]}|[{'type',54,'tuple',[{'atom',54,'nameservers'}|[{'type',54,'list',[{'type',54,'nameserver',[]}]}]]}|[{'type',55,'tuple',[{'atom',55,'recurse'}|[{'type',55,'boolean',[]}]]}|[{'type',56,'tuple',[{'atom',56,'retry'}|[{'type',56,'integer',[]}]]}|[{'type',57,'tuple',[{'atom',57,'timeout'}|[{'type',57,'integer',[]}]]}|[{'type',58,'tuple',[{'atom',58,'udp_payload_size'}|[{'type',58,'integer',[]}]]}|[{'type',59,'tuple',[{'atom',59,'usevc'}|[{'type',59,'boolean',[]}]]}]]]]]]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'nameserver',{'type',61,'tuple',[{'remote_type',61,[{'atom',61,'inet'}|[{'atom',61,'ip_address'}|[[]]]]}|[{'ann_type',61,[{'var',61,'Port'}|[{'type',61,'range',[{'integer',61,1}|[{'integer',61,65535}]]}]]}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'res_error',{'type',63,'union',[{'atom',63,'formerr'}|[{'atom',63,'qfmterror'}|[{'atom',63,'servfail'}|[{'atom',63,'nxdomain'}|[{'atom',64,'notimp'}|[{'atom',64,'refused'}|[{'atom',64,'badvers'}|[{'atom',64,'timeout'}]]]]]]]]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'dns_name',{'type',66,'string',[]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'rr_type',{'type',68,'union',[{'atom',68,'a'}|[{'atom',68,'aaaa'}|[{'atom',68,'cname'}|[{'atom',68,'gid'}|[{'atom',68,'hinfo'}|[{'atom',68,'ns'}|[{'atom',68,'mb'}|[{'atom',68,'md'}|[{'atom',68,'mg'}|[{'atom',68,'mf'}|[{'atom',69,'minfo'}|[{'atom',69,'mx'}|[{'atom',69,'naptr'}|[{'atom',69,'null'}|[{'atom',69,'ptr'}|[{'atom',69,'soa'}|[{'atom',69,'spf'}|[{'atom',69,'srv'}|[{'atom',69,'txt'}|[{'atom',70,'uid'}|[{'atom',70,'uinfo'}|[{'atom',70,'unspec'}|[{'atom',70,'wks'}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'dns_class',{'type',72,'union',[{'atom',72,'in'}|[{'atom',72,'chaos'}|[{'atom',72,'hs'}|[{'atom',72,'any'}]]]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'dns_msg',{'type',74,'term',[]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'dns_data',{'type',77,'union',[{'type',77,'dns_name',[]}|[{'remote_type',78,[{'atom',78,'inet'}|[{'atom',78,'ip4_address'}|[[]]]]}|[{'remote_type',79,[{'atom',79,'inet'}|[{'atom',79,'ip6_address'}|[[]]]]}|[{'type',80,'tuple',[{'ann_type',80,[{'var',80,'MName'}|[{'type',80,'dns_name',[]}]]}|[{'ann_type',81,[{'var',81,'RName'}|[{'type',81,'dns_name',[]}]]}|[{'ann_type',82,[{'var',82,'Serial'}|[{'type',82,'integer',[]}]]}|[{'ann_type',83,[{'var',83,'Refresh'}|[{'type',83,'integer',[]}]]}|[{'ann_type',84,[{'var',84,'Retry'}|[{'type',84,'integer',[]}]]}|[{'ann_type',85,[{'var',85,'Expiry'}|[{'type',85,'integer',[]}]]}|[{'ann_type',86,[{'var',86,'Minimum'}|[{'type',86,'integer',[]}]]}]]]]]]]}|[{'type',87,'tuple',[{'remote_type',87,[{'atom',87,'inet'}|[{'atom',87,'ip4_address'}|[[]]]]}|[{'ann_type',87,[{'var',87,'Proto'}|[{'type',87,'integer',[]}]]}|[{'ann_type',87,[{'var',87,'BitMap'}|[{'type',87,'binary',[]}]]}]]]}|[{'type',88,'tuple',[{'ann_type',88,[{'var',88,'CpuString'}|[{'type',88,'string',[]}]]}|[{'ann_type',88,[{'var',88,'OsString'}|[{'type',88,'string',[]}]]}]]}|[{'type',89,'tuple',[{'ann_type',89,[{'var',89,'RM'}|[{'type',89,'dns_name',[]}]]}|[{'ann_type',89,[{'var',89,'EM'}|[{'type',89,'dns_name',[]}]]}]]}|[{'type',90,'tuple',[{'ann_type',90,[{'var',90,'Prio'}|[{'type',90,'integer',[]}]]}|[{'type',90,'dns_name',[]}]]}|[{'type',91,'tuple',[{'ann_type',91,[{'var',91,'Prio'}|[{'type',91,'integer',[]}]]}|[{'ann_type',91,[{'var',91,'Weight'}|[{'type',91,'integer',[]}]]}|[{'ann_type',91,[{'var',91,'Port'}|[{'type',91,'integer',[]}]]}|[{'type',91,'dns_name',[]}]]]]}|[{'type',92,'tuple',[{'ann_type',92,[{'var',92,'Order'}|[{'type',92,'integer',[]}]]}|[{'ann_type',92,[{'var',92,'Preference'}|[{'type',92,'integer',[]}]]}|[{'ann_type',92,[{'var',92,'Flags'}|[{'type',92,'string',[]}]]}|[{'ann_type',93,[{'var',93,'Services'}|[{'type',93,'string',[]}]]}|[{'ann_type',93,[{'var',93,'Regexp'}|[{'type',93,'string',[]}]]}|[{'type',93,'dns_name',[]}]]]]]]}|[{'type',94,'list',[{'type',94,'string',[]}]}|[{'type',95,'binary',[]}]]]]]]]]]]]]},[]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'resolve',3},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'Name'}|[{'var',103,'Class'}|[{'var',103,'Type'}]]]}|[{'type',103,'union',[{'type',103,'tuple',[{'atom',103,'ok'}|[{'type',103,'dns_msg',[]}]]}|[{'var',103,'Error'}]]}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Name'}|[{'type',104,'union',[{'type',104,'dns_name',[]}|[{'remote_type',104,[{'atom',104,'inet'}|[{'atom',104,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Class'}|[{'type',105,'dns_class',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Type'}|[{'type',106,'rr_type',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Error'}|[{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'error'}|[{'var',107,'Reason'}]]}|[{'type',107,'tuple',[{'atom',107,'error'}|[{'type',107,'tuple',[{'var',107,'Reason'}|[{'type',107,'dns_msg',[]}]]}]]}]]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Reason'}|[{'type',108,'union',[{'remote_type',108,[{'atom',108,'inet'}|[{'atom',108,'posix'}|[[]]]]}|[{'type',108,'res_error',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'resolve',4},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Name'}|[{'var',113,'Class'}|[{'var',113,'Type'}|[{'var',113,'Opts'}]]]]}|[{'type',114,'union',[{'type',114,'tuple',[{'atom',114,'ok'}|[{'type',114,'dns_msg',[]}]]}|[{'var',114,'Error'}]]}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Name'}|[{'type',115,'union',[{'type',115,'dns_name',[]}|[{'remote_type',115,[{'atom',115,'inet'}|[{'atom',115,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Class'}|[{'type',116,'dns_class',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Type'}|[{'type',117,'rr_type',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Opts'}|[{'type',118,'list',[{'var',118,'Opt'}]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Opt'}|[{'type',119,'union',[{'type',119,'res_option',[]}|[{'atom',119,'verbose'}|[{'type',119,'atom',[]}]]]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Error'}|[{'type',120,'union',[{'type',120,'tuple',[{'atom',120,'error'}|[{'var',120,'Reason'}]]}|[{'type',120,'tuple',[{'atom',120,'error'}|[{'type',120,'tuple',[{'var',120,'Reason'}|[{'type',120,'dns_msg',[]}]]}]]}]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Reason'}|[{'type',121,'union',[{'remote_type',121,[{'atom',121,'inet'}|[{'atom',121,'posix'}|[[]]]]}|[{'type',121,'res_error',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'resolve',5},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Name'}|[{'var',126,'Class'}|[{'var',126,'Type'}|[{'var',126,'Opts'}|[{'var',126,'Timeout'}]]]]]}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'type',127,'dns_msg',[]}]]}|[{'var',127,'Error'}]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Name'}|[{'type',128,'union',[{'type',128,'dns_name',[]}|[{'remote_type',128,[{'atom',128,'inet'}|[{'atom',128,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Class'}|[{'type',129,'dns_class',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Type'}|[{'type',130,'rr_type',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Opts'}|[{'type',131,'list',[{'var',131,'Opt'}]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Opt'}|[{'type',132,'union',[{'type',132,'res_option',[]}|[{'atom',132,'verbose'}|[{'type',132,'atom',[]}]]]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Timeout'}|[{'type',133,'timeout',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Error'}|[{'type',134,'union',[{'type',134,'tuple',[{'atom',134,'error'}|[{'var',134,'Reason'}]]}|[{'type',134,'tuple',[{'atom',134,'error'}|[{'type',134,'tuple',[{'var',134,'Reason'}|[{'type',134,'dns_msg',[]}]]}]]}]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Reason'}|[{'type',135,'union',[{'remote_type',135,[{'atom',135,'inet'}|[{'atom',135,'posix'}|[[]]]]}|[{'type',135,'res_error',[]}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'lookup',3},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'Name'}|[{'var',154,'Class'}|[{'var',154,'Type'}]]]}|[{'type',154,'list',[{'type',154,'dns_data',[]}]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Name'}|[{'type',155,'union',[{'type',155,'dns_name',[]}|[{'remote_type',155,[{'atom',155,'inet'}|[{'atom',155,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Class'}|[{'type',156,'dns_class',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Type'}|[{'type',157,'rr_type',[]}]]]]}]]]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'lookup',4},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'Name'}|[{'var',162,'Class'}|[{'var',162,'Type'}|[{'var',162,'Opts'}]]]]}|[{'type',162,'list',[{'type',162,'dns_data',[]}]}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Name'}|[{'type',163,'union',[{'type',163,'dns_name',[]}|[{'remote_type',163,[{'atom',163,'inet'}|[{'atom',163,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Class'}|[{'type',164,'dns_class',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Type'}|[{'type',165,'rr_type',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Opts'}|[{'type',166,'list',[{'type',166,'union',[{'type',166,'res_option',[]}|[{'atom',166,'verbose'}]]}]}]]]]}]]]]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'lookup',5},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Name'}|[{'var',171,'Class'}|[{'var',171,'Type'}|[{'var',171,'Opts'}|[{'var',171,'Timeout'}]]]]]}|[{'type',171,'list',[{'type',171,'dns_data',[]}]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Name'}|[{'type',172,'union',[{'type',172,'dns_name',[]}|[{'remote_type',172,[{'atom',172,'inet'}|[{'atom',172,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Class'}|[{'type',173,'dns_class',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Type'}|[{'type',174,'rr_type',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Opts'}|[{'type',175,'list',[{'type',175,'union',[{'type',175,'res_option',[]}|[{'atom',175,'verbose'}]]}]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Timeout'}|[{'type',176,'timeout',[]}]]]]}]]]]]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'nslookup',3},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Name'}|[{'var',197,'Class'}|[{'var',197,'Type'}]]]}|[{'type',197,'union',[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'dns_msg',[]}]]}|[{'type',197,'tuple',[{'atom',197,'error'}|[{'var',197,'Reason'}]]}]]}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Name'}|[{'type',198,'union',[{'type',198,'dns_name',[]}|[{'remote_type',198,[{'atom',198,'inet'}|[{'atom',198,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Class'}|[{'type',199,'dns_class',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Type'}|[{'type',200,'rr_type',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Reason'}|[{'type',201,'union',[{'remote_type',201,[{'atom',201,'inet'}|[{'atom',201,'posix'}|[[]]]]}|[{'type',201,'res_error',[]}]]}]]]]}]]]]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'nslookup',4},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'Name'}|[{'var',206,'Class'}|[{'var',206,'Type'}|[{'var',206,'Timeout'}]]]]}|[{'type',207,'union',[{'type',207,'tuple',[{'atom',207,'ok'}|[{'type',207,'dns_msg',[]}]]}|[{'type',207,'tuple',[{'atom',207,'error'}|[{'var',207,'Reason'}]]}]]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Name'}|[{'type',208,'union',[{'type',208,'dns_name',[]}|[{'remote_type',208,[{'atom',208,'inet'}|[{'atom',208,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Class'}|[{'type',209,'dns_class',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Type'}|[{'type',210,'rr_type',[]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Timeout'}|[{'type',211,'timeout',[]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Reason'}|[{'type',212,'union',[{'remote_type',212,[{'atom',212,'inet'}|[{'atom',212,'posix'}|[[]]]]}|[{'type',212,'res_error',[]}]]}]]]]}]]]]]]]}|[{'type',213,'bounded_fun',[{'type',213,'fun',[{'type',213,'product',[{'var',213,'Name'}|[{'var',213,'Class'}|[{'var',213,'Type'}|[{'var',213,'Nameservers'}]]]]}|[{'type',214,'union',[{'type',214,'tuple',[{'atom',214,'ok'}|[{'type',214,'dns_msg',[]}]]}|[{'type',214,'tuple',[{'atom',214,'error'}|[{'var',214,'Reason'}]]}]]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Name'}|[{'type',215,'union',[{'type',215,'dns_name',[]}|[{'remote_type',215,[{'atom',215,'inet'}|[{'atom',215,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Class'}|[{'type',216,'dns_class',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Type'}|[{'type',217,'rr_type',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Nameservers'}|[{'type',218,'list',[{'type',218,'nameserver',[]}]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Reason'}|[{'type',219,'union',[{'remote_type',219,[{'atom',219,'inet'}|[{'atom',219,'posix'}|[[]]]]}|[{'type',219,'res_error',[]}]]}]]]]}]]]]]]]}]]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'nnslookup',4},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Name'}|[{'var',226,'Class'}|[{'var',226,'Type'}|[{'var',226,'Nameservers'}]]]]}|[{'type',227,'union',[{'type',227,'tuple',[{'atom',227,'ok'}|[{'type',227,'dns_msg',[]}]]}|[{'type',227,'tuple',[{'atom',227,'error'}|[{'var',227,'Reason'}]]}]]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Name'}|[{'type',228,'union',[{'type',228,'dns_name',[]}|[{'remote_type',228,[{'atom',228,'inet'}|[{'atom',228,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Class'}|[{'type',229,'dns_class',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Type'}|[{'type',230,'rr_type',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Nameservers'}|[{'type',231,'list',[{'type',231,'nameserver',[]}]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Reason'}|[{'remote_type',232,[{'atom',232,'inet'}|[{'atom',232,'posix'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'nnslookup',5},[{'type',237,'bounded_fun',[{'type',237,'fun',[{'type',237,'product',[{'var',237,'Name'}|[{'var',237,'Class'}|[{'var',237,'Type'}|[{'var',237,'Nameservers'}|[{'var',237,'Timeout'}]]]]]}|[{'type',238,'union',[{'type',238,'tuple',[{'atom',238,'ok'}|[{'type',238,'dns_msg',[]}]]}|[{'type',238,'tuple',[{'atom',238,'error'}|[{'var',238,'Reason'}]]}]]}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Name'}|[{'type',239,'union',[{'type',239,'dns_name',[]}|[{'remote_type',239,[{'atom',239,'inet'}|[{'atom',239,'ip_address'}|[[]]]]}]]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Class'}|[{'type',240,'dns_class',[]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Type'}|[{'type',241,'rr_type',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Timeout'}|[{'type',242,'timeout',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Nameservers'}|[{'type',243,'list',[{'type',243,'nameserver',[]}]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Reason'}|[{'remote_type',244,[{'atom',244,'inet'}|[{'atom',244,'posix'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 259
		'type' =
		    %% Line 259
		    [{{'record','options'},[{'record_field',260,{'atom',260,'alt_nameservers'}}|[{'record_field',260,{'atom',260,'edns'}}|[{'record_field',260,{'atom',260,'inet6'}}|[{'record_field',260,{'atom',260,'nameservers'}}|[{'record_field',260,{'atom',260,'recurse'}}|[{'record_field',261,{'atom',261,'retry'}}|[{'record_field',261,{'atom',261,'timeout'}}|[{'record_field',261,{'atom',261,'udp_payload_size'}}|[{'record_field',261,{'atom',261,'usevc'}}|[{'record_field',262,{'atom',262,'verbose'}}]]]]]]]]]],[]}],
		%% Line 326
		'spec' =
		    %% Line 326
		    [{{'gethostbyaddr',1},[{'type',326,'bounded_fun',[{'type',326,'fun',[{'type',326,'product',[{'var',326,'Address'}]}|[{'type',326,'union',[{'type',326,'tuple',[{'atom',326,'ok'}|[{'var',326,'Hostent'}]]}|[{'type',326,'tuple',[{'atom',326,'error'}|[{'var',326,'Reason'}]]}]]}]]}|[[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Address'}|[{'remote_type',327,[{'atom',327,'inet'}|[{'atom',327,'ip_address'}|[[]]]]}]]]]}|[{'type',328,'constraint',[{'atom',328,'is_subtype'}|[[{'var',328,'Hostent'}|[{'remote_type',328,[{'atom',328,'inet'}|[{'atom',328,'hostent'}|[[]]]]}]]]]}|[{'type',329,'constraint',[{'atom',329,'is_subtype'}|[[{'var',329,'Reason'}|[{'type',329,'union',[{'remote_type',329,[{'atom',329,'inet'}|[{'atom',329,'posix'}|[[]]]]}|[{'type',329,'res_error',[]}]]}]]]]}]]]]]}]}],
		%% Line 333
		'spec' =
		    %% Line 333
		    [{{'gethostbyaddr',2},[{'type',333,'bounded_fun',[{'type',333,'fun',[{'type',333,'product',[{'var',333,'Address'}|[{'var',333,'Timeout'}]]}|[{'type',333,'union',[{'type',333,'tuple',[{'atom',333,'ok'}|[{'var',333,'Hostent'}]]}|[{'type',333,'tuple',[{'atom',333,'error'}|[{'var',333,'Reason'}]]}]]}]]}|[[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Address'}|[{'remote_type',334,[{'atom',334,'inet'}|[{'atom',334,'ip_address'}|[[]]]]}]]]]}|[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Timeout'}|[{'type',335,'timeout',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Hostent'}|[{'remote_type',336,[{'atom',336,'inet'}|[{'atom',336,'hostent'}|[[]]]]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Reason'}|[{'type',337,'union',[{'remote_type',337,[{'atom',337,'inet'}|[{'atom',337,'posix'}|[[]]]]}|[{'type',337,'res_error',[]}]]}]]]]}]]]]]]}]}],
		%% Line 394
		'spec' =
		    %% Line 394
		    [{{'gethostbyname',1},[{'type',394,'bounded_fun',[{'type',394,'fun',[{'type',394,'product',[{'var',394,'Name'}]}|[{'type',394,'union',[{'type',394,'tuple',[{'atom',394,'ok'}|[{'var',394,'Hostent'}]]}|[{'type',394,'tuple',[{'atom',394,'error'}|[{'var',394,'Reason'}]]}]]}]]}|[[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Name'}|[{'type',395,'dns_name',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Hostent'}|[{'remote_type',396,[{'atom',396,'inet'}|[{'atom',396,'hostent'}|[[]]]]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Reason'}|[{'type',397,'union',[{'remote_type',397,[{'atom',397,'inet'}|[{'atom',397,'posix'}|[[]]]]}|[{'type',397,'res_error',[]}]]}]]]]}]]]]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'gethostbyname',2},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'Name'}|[{'var',407,'Family'}]]}|[{'type',407,'union',[{'type',407,'tuple',[{'atom',407,'ok'}|[{'var',407,'Hostent'}]]}|[{'type',407,'tuple',[{'atom',407,'error'}|[{'var',407,'Reason'}]]}]]}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Name'}|[{'type',408,'dns_name',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Hostent'}|[{'remote_type',409,[{'atom',409,'inet'}|[{'atom',409,'hostent'}|[[]]]]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Family'}|[{'remote_type',410,[{'atom',410,'inet'}|[{'atom',410,'address_family'}|[[]]]]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Reason'}|[{'type',411,'union',[{'remote_type',411,[{'atom',411,'inet'}|[{'atom',411,'posix'}|[[]]]]}|[{'type',411,'res_error',[]}]]}]]]]}]]]]]]}]}],
		%% Line 416
		'spec' =
		    %% Line 416
		    [{{'gethostbyname',3},[{'type',416,'bounded_fun',[{'type',416,'fun',[{'type',416,'product',[{'var',416,'Name'}|[{'var',416,'Family'}|[{'var',416,'Timeout'}]]]}|[{'type',417,'union',[{'type',417,'tuple',[{'atom',417,'ok'}|[{'var',417,'Hostent'}]]}|[{'type',417,'tuple',[{'atom',417,'error'}|[{'var',417,'Reason'}]]}]]}]]}|[[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Name'}|[{'type',418,'dns_name',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Hostent'}|[{'remote_type',419,[{'atom',419,'inet'}|[{'atom',419,'hostent'}|[[]]]]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Timeout'}|[{'type',420,'timeout',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Family'}|[{'remote_type',421,[{'atom',421,'inet'}|[{'atom',421,'address_family'}|[[]]]]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Reason'}|[{'type',422,'union',[{'remote_type',422,[{'atom',422,'inet'}|[{'atom',422,'posix'}|[[]]]]}|[{'type',422,'res_error',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'getbyname',2},[{'type',467,'bounded_fun',[{'type',467,'fun',[{'type',467,'product',[{'var',467,'Name'}|[{'var',467,'Type'}]]}|[{'type',467,'union',[{'type',467,'tuple',[{'atom',467,'ok'}|[{'var',467,'Hostent'}]]}|[{'type',467,'tuple',[{'atom',467,'error'}|[{'var',467,'Reason'}]]}]]}]]}|[[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'Name'}|[{'type',468,'dns_name',[]}]]]]}|[{'type',469,'constraint',[{'atom',469,'is_subtype'}|[[{'var',469,'Type'}|[{'type',469,'rr_type',[]}]]]]}|[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'Hostent'}|[{'remote_type',470,[{'atom',470,'inet'}|[{'atom',470,'hostent'}|[[]]]]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Reason'}|[{'type',471,'union',[{'remote_type',471,[{'atom',471,'inet'}|[{'atom',471,'posix'}|[[]]]]}|[{'type',471,'res_error',[]}]]}]]]]}]]]]]]}]}],
		%% Line 476
		'spec' =
		    %% Line 476
		    [{{'getbyname',3},[{'type',476,'bounded_fun',[{'type',476,'fun',[{'type',476,'product',[{'var',476,'Name'}|[{'var',476,'Type'}|[{'var',476,'Timeout'}]]]}|[{'type',476,'union',[{'type',476,'tuple',[{'atom',476,'ok'}|[{'var',476,'Hostent'}]]}|[{'type',476,'tuple',[{'atom',476,'error'}|[{'var',476,'Reason'}]]}]]}]]}|[[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'Name'}|[{'type',477,'dns_name',[]}]]]]}|[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'Type'}|[{'type',478,'rr_type',[]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Timeout'}|[{'type',479,'timeout',[]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'Hostent'}|[{'remote_type',480,[{'atom',480,'inet'}|[{'atom',480,'hostent'}|[[]]]]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Reason'}|[{'type',481,'union',[{'remote_type',481,[{'atom',481,'inet'}|[{'atom',481,'posix'}|[[]]]]}|[{'type',481,'res_error',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 601
		'type' =
		    %% Line 601
		    [{{'record','q'},[{'record_field',601,{'atom',601,'options'}}|[{'record_field',601,{'atom',601,'edns'}}|[{'record_field',601,{'atom',601,'dns'}}]]],[]}],
		%% Line 675
		'type' =
		    %% Line 675
		    [{{'record','sock'},[{'record_field',675,{'atom',675,'inet'},{'atom',675,'undefined'}}|[{'record_field',675,{'atom',675,'inet6'},{'atom',675,'undefined'}}]],[]}]]
'resolve'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	%% Line 111
	apply 'resolve'/5
	    (_cor2, _cor1, _cor0, [], 'infinity')
'resolve'/4 =
    %% Line 123
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 124
	apply 'resolve'/5
	    (_cor3, _cor2, _cor1, _cor0, 'infinity')
'resolve'/5 =
    %% Line 137
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 138
	case apply 'nsdname'/1
		 (_cor4) of
	  %% Line 139
	  <{'ok',Nm}> when 'true' ->
	      let <Timer> =
		  %% Line 140
		  call 'inet':'start_timer'
		      (_cor0)
	      in  let <Res> =
		      %% Line 141
		      apply 'res_query'/5
			  (Nm, _cor3, _cor2, _cor1, Timer)
		  in  do  %% Line 142
			  ( call 'inet':'stop_timer'
				(Timer)
			    -| ['result_not_wanted'] )
			  %% Line 143
			  Res
	  %% Line 144
	  <Error> when 'true' ->
	      %% Line 145
	      Error
	end
'lookup'/3 =
    %% Line 159
    fun (_cor2,_cor1,_cor0) ->
	%% Line 160
	apply 'lookup'/4
	    (_cor2, _cor1, _cor0, [])
'lookup'/4 =
    %% Line 168
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 169
	apply 'lookup'/5
	    (_cor3, _cor2, _cor1, _cor0, 'infinity')
'lookup'/5 =
    %% Line 178
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 179
	    apply 'resolve'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	in  %% Line 179
	    apply 'lookup_filter'/3
		(_cor5, _cor3, _cor2)
'lookup_filter'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'ok',{'dns_rec',_cor30,_cor31,Answers,_cor32,_cor33}},Class,Type> when 'true' ->
	      %% Line 183
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor23) ->
			    case _cor23 of
			      <[A|_cor4]>
				  when %% Line 184
				    try
					( let <_cor12> =
					      ( case <> of
						  ( <>
							when ( call 'erlang':'=:='
								(Class,
								 'any')
							    -| ['compiler_generated'] ) ->
							'true'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							( case <> of
							    ( <>
								  when ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'is_record'
													   -| ['compiler_generated'] )
									  (A,
									   ( 'dns_rr'
									     -| ['compiler_generated'] ),
									   ( 10
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] ) ->
								  let <_cor6> =
								      ( call 'erlang':'element'
									    (4, A)
									-| ['compiler_generated'] )
								  in  ( call 'erlang':'=:='
									    (_cor6, Class)
									-| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  let <_cor6> =
								      ( call 'erlang':'element'
									    (4, A)
									-| ['compiler_generated'] )
								  in  let <_cor7> =
									  ( call 'erlang':'=:='
										(_cor6, Class)
									    -| ['compiler_generated'] )
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'and'
														 -| ['compiler_generated'] )
										(( 'fail'
										   -| ['compiler_generated'] ), _cor7)
									    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 185
					      ( let <_cor21> =
						    ( case <> of
							( <>
							      when ( call 'erlang':'=:='
								      (Type,
								       'any')
								  -| ['compiler_generated'] ) ->
							      'true'
							  -| ['compiler_generated'] )
							( <> when 'true' ->
							      ( case <> of
								  ( <>
									when ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'is_record'
														 -| ['compiler_generated'] )
										(A,
										 ( 'dns_rr'
										   -| ['compiler_generated'] ),
										 ( 10
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] ) ->
									let <_cor15> =
									    ( call 'erlang':'element'
										  (3, A)
									      -| ['compiler_generated'] )
									in  ( call 'erlang':'=:='
										  (_cor15, Type)
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									let <_cor15> =
									    ( call 'erlang':'element'
										  (3, A)
									      -| ['compiler_generated'] )
									in  let <_cor16> =
										( call 'erlang':'=:='
										      (_cor15, Type)
										  -| ['compiler_generated'] )
									    in  ( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'and'
														       -| ['compiler_generated'] )
										      (( 'fail'
											 -| ['compiler_generated'] ), _cor16)
										  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'and'
							  (( _cor12
							     -| ['compiler_generated'] ), ( _cor21
											    -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  ( case A of
				      ( <( {'dns_rr',_cor34,_cor35,_cor36,_cor37,_cor38,_rec0,_cor39,_cor40,_cor41}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor26> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_rec0|_cor26]
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor42> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','dns_rr'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <[A|_cor4]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor4)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor23> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor23})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Answers)
		-| ['list_comprehension'] )
	  %% Line 186
	  <{'error',_cor43},_cor44,_cor45> when 'true' ->
	      []
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'lookup_filter',3}}] )
	    -| ['compiler_generated'] )
	end
'nslookup'/3 =
    %% Line 203
    fun (_cor2,_cor1,_cor0) ->
	%% Line 204
	apply 'do_nslookup'/5
	    (_cor2, _cor1, _cor0, [], 'infinity')
'nslookup'/4 =
    %% Line 221
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Class,Type,Timeout>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor5> =
			call 'erlang':'>='
			    (Timeout, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 222
	      apply 'do_nslookup'/5
		  (Name, Class, Type, [], Timeout)
	  %% Line 223
	  <Name,Class,Type,NSs> when 'true' ->
	      %% Line 224
	      apply 'nnslookup'/4
		  (Name, Class, Type, NSs)
	end
'nnslookup'/4 =
    %% Line 234
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 235
	apply 'nnslookup'/5
	    (_cor3, _cor2, _cor1, _cor0, 'infinity')
'nnslookup'/5 =
    %% Line 246
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 247
	apply 'do_nslookup'/5
	    (_cor4, _cor3, _cor2, [{'nameservers',_cor1}|[]], _cor0)
'do_nslookup'/5 =
    %% Line 249
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 250
	case apply 'resolve'/5
		 (_cor4, _cor3, _cor2, _cor1, _cor0) of
	  %% Line 251
	  <{'error',{'qfmterror',_cor11}}> when 'true' ->
	      {'error','einval'}
	  %% Line 252
	  <{'error',{Reason,_cor12}}> when 'true' ->
	      {'error',Reason}
	  %% Line 253
	  <Result> when 'true' ->
	      Result
	end
'make_options'/1 =
    %% Line 265
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 266
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 272
			      Opt|_cor2]> when 'true' ->
				let <_cor6> =
				    case <> of
				      <>
					  when call 'erlang':'is_atom'
						(Opt) ->
					  %% Line 267
					  case call 'erlang':'atom_to_list'
						   (Opt) of
					    %% Line 268
					    <[110|[111|X]]> when 'true' ->
						let <_cor4> =
						    call 'erlang':'list_to_atom'
							(X)
						in  {_cor4,'false'}
					    %% Line 269
					    <_cor17> when 'true' ->
						{Opt,'true'}
					  end
				      %% Line 271
				      <> when 'true' ->
					  Opt
				    end
				in  let <_cor7> =
					%% Line 272
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor12> =
		%% Line 278
		case call 'lists':'keymember'
			 ('nameservers', 1, _cor8) of
		  %% Line 279
		  <'true'> when 'true' ->
		      %% Line 280
		      case call 'lists':'keymember'
			       ('alt_nameservers', 1, _cor8) of
			%% Line 281
			<'false'> when 'true' ->
			    %% Line 282
			    [{'alt_nameservers',[]}|_cor8]
			%% Line 283
			<'true'> when 'true' ->
			    _cor8
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
		  %% Line 286
		  <'false'> when 'true' ->
		      _cor8
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor11})
		    -| ['compiler_generated'] )
		end
	    in  let <SortedOpts> =
		    %% Line 277
		    call 'lists':'ukeysort'
			(1, _cor12)
		in  do  %% Line 290
			call 'inet_db':'res_update_conf'
			    ()
			let <_cor15> =
			    %% Line 291
			    apply 'make_options'/2
				(SortedOpts, ['alt_nameservers'|['edns'|['inet6'|['nameservers'|['recurse'|['retry'|['timeout'|['udp_payload_size'|['usevc'|['verbose']]]]]]]]]])
			in  %% Line 291
			    call 'erlang':'list_to_tuple'
				(['options'|_cor15])
'make_options'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts0 = [_cor10|_cor11],Names0 = []> when 'true' ->
	      %% Line 294
	      call 'erlang':'error'
		  ('badarg', [Opts0|[Names0|[]]])
	  %% Line 295
	  <[],[]> when 'true' ->
	      []
	  %% Line 296
	  <Opts0 = [{'verbose',Val}|Opts],Names0 = ['verbose'|Names]> when 'true' ->
	      %% Line 297
	      case <> of
		<>
		    when call 'erlang':'is_boolean'
			  (Val) ->
		    let <_cor2> =
			%% Line 298
			apply 'make_options'/2
			    (Opts, Names)
		    in  %% Line 298
			[Val|_cor2]
		%% Line 299
		<> when 'true' ->
		    %% Line 300
		    call 'erlang':'error'
			('badarg', [Opts0|[Names0|[]]])
	      end
	  %% Line 302
	  <Opts0 = [{Opt,Val}|Opts],Names0 = [_cor12|Names]>
	      when call 'erlang':'=:='
		    (_cor12,
		     Opt) ->
	      %% Line 303
	      case call 'inet_db':'res_check_option'
		       (Opt, Val) of
		%% Line 304
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 305
			apply 'make_options'/2
			    (Opts, Names)
		    in  %% Line 305
			[Val|_cor3]
		%% Line 306
		<'false'> when 'true' ->
		    %% Line 307
		    call 'erlang':'error'
			('badarg', [Opts0|[Names0|[]]])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 309
	  <Opts,['verbose'|Names]> when 'true' ->
	      let <_cor5> =
		  %% Line 310
		  apply 'make_options'/2
		      (Opts, Names)
	      in  %% Line 310
		  ['false'|_cor5]
	  %% Line 311
	  <Opts,[Name|Names]> when 'true' ->
	      let <_cor6> =
		  %% Line 312
		  call 'inet_db':'res_option'
		      (Name)
	      in  let <_cor7> =
		      %% Line 312
		      apply 'make_options'/2
			  (Opts, Names)
		  in  %% Line 312
		      [_cor6|_cor7]
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'make_options',2}}] )
	    -| ['compiler_generated'] )
	end
'gethostbyaddr'/1 =
    %% Line 331
    fun (_cor0) ->
	apply 'gethostbyaddr_tm'/2
	    (_cor0, 'false')
'gethostbyaddr'/2 =
    %% Line 339
    fun (_cor1,_cor0) ->
	let <Timer> =
	    %% Line 340
	    call 'inet':'start_timer'
		(_cor0)
	in  let <Res> =
		%% Line 341
		apply 'gethostbyaddr_tm'/2
		    (_cor1, Timer)
	    in  do  %% Line 342
		    ( call 'inet':'stop_timer'
			  (Timer)
		      -| ['result_not_wanted'] )
		    %% Line 343
		    Res
'gethostbyaddr_tm'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <IP = {A,B,C,D},Timer>
	      when try
		    let <_cor3> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor4> =
			    call 'erlang':'bor'
				(_cor3, C)
			in  let <_cor5> =
				call 'erlang':'bor'
				    (_cor4, D)
			    in  let <_cor6> =
				    call 'erlang':'band'
					(_cor5, -256)
				in  call 'erlang':'=:='
					(_cor6, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 346
		  call 'inet_db':'res_update_conf'
		      ()
		  %% Line 347
		  case call 'inet_db':'gethostbyaddr'
			   (IP) of
		    %% Line 348
		    <{'ok',HEnt}> when 'true' ->
			{'ok',HEnt}
		    %% Line 349
		    <_cor29> when 'true' ->
			let <_cor7> =
			    apply 'dn_in_addr_arpa'/4
				(A, B, C, D)
			in  apply 'res_gethostbyaddr'/3
				(_cor7, IP, Timer)
		  end
	  %% Line 352
	  <{0,0,0,0,0,65535,G,H},Timer>
	      when try
		    let <_cor9> =
			call 'erlang':'+'
			    (G, H)
		    in  call 'erlang':'is_integer'
			    (_cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 353
		  call 'erlang':'div'
		      (G, 256)
	      in  let <_cor12> =
		      %% Line 353
		      call 'erlang':'rem'
			  (G, 256)
		  in  let <_cor11> =
			  %% Line 353
			  call 'erlang':'div'
			      (H, 256)
		      in  let <_cor10> =
			      %% Line 353
			      call 'erlang':'rem'
				  (H, 256)
			  in  %% Line 353
			      apply 'gethostbyaddr_tm'/2
				  ({_cor13,_cor12,_cor11,_cor10}, Timer)
	  %% Line 354
	  <IP = {A,B,C,D,E,F,G,H},Timer>
	      when try
		    let <_cor15> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor16> =
			    call 'erlang':'bor'
				(_cor15, C)
			in  let <_cor17> =
				call 'erlang':'bor'
				    (_cor16, D)
			    in  let <_cor18> =
				    call 'erlang':'bor'
					(_cor17, E)
				in  let <_cor19> =
					call 'erlang':'bor'
					    (_cor18, F)
				    in  let <_cor20> =
					    call 'erlang':'bor'
						(_cor19, G)
					in  let <_cor21> =
						call 'erlang':'bor'
						    (_cor20, H)
					    in  let <_cor22> =
						    call 'erlang':'band'
							(_cor21, -65536)
						in  call 'erlang':'=:='
							(_cor22, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 355
		  call 'inet_db':'res_update_conf'
		      ()
		  %% Line 356
		  case call 'inet_db':'gethostbyaddr'
			   (IP) of
		    %% Line 357
		    <{'ok',HEnt}> when 'true' ->
			{'ok',HEnt}
		    %% Line 358
		    <_cor30> when 'true' ->
			let <_cor23> =
			    apply 'dn_ip6_int'/8
				(A, B, C, D, E, F, G, H)
			in  apply 'res_gethostbyaddr'/3
				(_cor23, IP, Timer)
		  end
	  %% Line 360
	  <Addr,Timer>
	      when call 'erlang':'is_list'
		    (Addr) ->
	      %% Line 361
	      case call 'inet_parse':'address'
		       (Addr) of
		%% Line 362
		<{'ok',IP}> when 'true' ->
		    apply 'gethostbyaddr_tm'/2
			(IP, Timer)
		%% Line 363
		<_X_Error> when 'true' ->
		    {'error','formerr'}
	      end
	  %% Line 365
	  <Addr,Timer>
	      when call 'erlang':'is_atom'
		    (Addr) ->
	      let <_cor26> =
		  %% Line 366
		  call 'erlang':'atom_to_list'
		      (Addr)
	      in  %% Line 366
		  apply 'gethostbyaddr_tm'/2
		      (_cor26, Timer)
	  %% Line 367
	  <_cor31,_cor32> when 'true' ->
	      {'error','formerr'}
	end
'res_gethostbyaddr'/3 =
    %% Line 374
    fun (_cor2,_cor1,_cor0) ->
	%% Line 375
	case apply 'res_query'/5
		 (_cor2, 'in', 'ptr', [], _cor0) of
	  %% Line 376
	  <{'ok',Rec}> when 'true' ->
	      %% Line 377
	      call 'inet_db':'res_gethostbyaddr'
		  (_cor1, Rec)
	  %% Line 378
	  <{'error',{'qfmterror',_cor7}}> when 'true' ->
	      {'error','einval'}
	  %% Line 379
	  <{'error',{Reason,_cor8}}> when 'true' ->
	      {'error',Reason}
	  %% Line 380
	  <Error> when 'true' ->
	      %% Line 381
	      Error
	end
'gethostbyname'/1 =
    %% Line 399
    fun (_cor0) ->
	%% Line 400
	case call 'inet_db':'res_option'
		 ('inet6') of
	  %% Line 401
	  <'true'> when 'true' ->
	      %% Line 402
	      apply 'gethostbyname_tm'/3
		  (_cor0, 'inet6', 'false')
	  %% Line 403
	  <'false'> when 'true' ->
	      %% Line 404
	      apply 'gethostbyname_tm'/3
		  (_cor0, 'inet', 'false')
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'gethostbyname'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	%% Line 414
	apply 'gethostbyname_tm'/3
	    (_cor1, _cor0, 'false')
'gethostbyname'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 425
	    call 'inet':'start_timer'
		(_cor0)
	in  let <Res> =
		%% Line 426
		apply 'gethostbyname_tm'/3
		    (_cor2, _cor1, Timer)
	    in  do  %% Line 427
		    ( call 'inet':'stop_timer'
			  (Timer)
		      -| ['result_not_wanted'] )
		    %% Line 428
		    Res
'gethostbyname_tm'/3 =
    %% Line 430
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,'inet',Timer> when 'true' ->
	      %% Line 431
	      apply 'getbyname_tm'/3
		  (Name, 'a', Timer)
	  %% Line 432
	  <Name,'inet6',Timer> when 'true' ->
	      %% Line 433
	      case apply 'getbyname_tm'/3
		       (Name, 'aaaa', Timer) of
		%% Line 434
		<{'ok',HEnt}> when 'true' ->
		    {'ok',HEnt}
		%% Line 435
		<{'error','nxdomain'}> when 'true' ->
		    %% Line 436
		    case apply 'getbyname_tm'/3
			     (Name, 'a', Timer) of
		      %% Line 437
		      <{'ok',HEnt}> when 'true' ->
			  let <_cor11> =
			      %% Line 445
			      ( fun (_cor9) ->
				    case _cor9 of
				      <{A,B,C,D}> when 'true' ->
					  let <_cor7> =
					      %% Line 446
					      call 'erlang':'*'
						  (A, 256)
					  in  let <_cor8> =
						  %% Line 446
						  call 'erlang':'+'
						      (_cor7, B)
					      in  let <_cor5> =
						      %% Line 446
						      call 'erlang':'*'
							  (C, 256)
						  in  let <_cor6> =
							  %% Line 446
							  call 'erlang':'+'
							      (_cor5, D)
						      in  %% Line 446
							  {0,0,0,0,0,65535,_cor8,_cor6}
				      ( <_cor10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor10})
					      -| [{'function_name',{'-gethostbyname_tm/3-fun-0-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-gethostbyname_tm/3-fun-0-'}}] )
			  in  %% Line 447
			      ( case HEnt of
				  ( <( {'hostent',_cor21,_cor22,_cor23,_cor24,_rec8}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_rec1> =
					    call 'lists':'map'
						(_cor11, _rec8)
					in  let <_cor15> =
						{'hostent',_cor21,_cor22,'inet6',16,_rec1}
					    in  {'ok',_cor15}
				    -| ['compiler_generated'] )
				  ( <_cor25> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','hostent'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      %% Line 449
		      <Error> when 'true' ->
			  %% Line 450
			  Error
		    end
		%% Line 452
		<Error> when 'true' ->
		    %% Line 453
		    Error
	      end
	  %% Line 455
	  <_X_Name,_X_Family,_X_Timer> when 'true' ->
	      %% Line 456
	      {'error','einval'}
	end
'getbyname'/2 =
    %% Line 473
    fun (_cor1,_cor0) ->
	%% Line 474
	apply 'getbyname_tm'/3
	    (_cor1, _cor0, 'false')
'getbyname'/3 =
    %% Line 483
    fun (_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 484
	    call 'inet':'start_timer'
		(_cor0)
	in  let <Res> =
		%% Line 485
		apply 'getbyname_tm'/3
		    (_cor2, _cor1, Timer)
	    in  do  %% Line 486
		    ( call 'inet':'stop_timer'
			  (Timer)
		      -| ['result_not_wanted'] )
		    %% Line 487
		    Res
'getbyname_tm'/3 =
    %% Line 489
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Type,Timer>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 490
	      case apply 'type_p'/1
		       (Type) of
		%% Line 491
		<'true'> when 'true' ->
		    %% Line 492
		    case call 'inet_parse':'visible_string'
			     (Name) of
		      %% Line 493
		      <'false'> when 'true' ->
			  {'error','formerr'}
		      %% Line 494
		      <'true'> when 'true' ->
			  do  %% Line 495
			      call 'inet_db':'res_update_conf'
				  ()
			      %% Line 496
			      case call 'inet_db':'getbyname'
				       (Name, Type) of
				%% Line 497
				<{'ok',HEnt}> when 'true' ->
				    {'ok',HEnt}
				%% Line 498
				<_cor10> when 'true' ->
				    apply 'res_getbyname'/3
					(Name, Type, Timer)
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 501
		<'false'> when 'true' ->
		    %% Line 502
		    {'error','formerr'}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 504
	  <Name,Type,Timer>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor6> =
		  %% Line 505
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 505
		  apply 'getbyname_tm'/3
		      (_cor6, Type, Timer)
	  %% Line 506
	  <_cor11,_cor12,_cor13> when 'true' ->
	      {'error','formerr'}
	end
'type_p'/1 =
    %% Line 508
    fun (_cor0) ->
	%% Line 509
	call 'lists':'member'
	    (_cor0, ['a'|['aaaa'|['mx'|['ns'|['md'|['mf'|['cname'|['soa'|['mb'|['mg'|['mr'|['null'|['wks'|['hinfo'|['txt'|['srv'|['naptr'|['spf'|['uinfo'|['uid'|['gid']]]]]]]]]]]]]]]]]]]]])
'res_getbyname'/3 =
    %% Line 549
    fun (_cor2,_cor1,_cor0) ->
	%% Line 550
	case call 'inet_parse':'dots'
		 (_cor2) of
	  <{EmbeddedDots,TrailingDot}> when 'true' ->
	      let <_cor4> =
		  %% Line 551
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (TrailingDot,
			       'true') ->
			[]
		    <> when 'true' ->
			[46]
		  end
	      in  %% Line 552
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (TrailingDot,
			       'true') ->
			%% Line 553
			apply 'res_getby_query'/3
			    (_cor2, _cor1, _cor0)
		    %% Line 554
		    <>
			when call 'erlang':'=:='
			      (EmbeddedDots,
			       0) ->
			let <_cor6> =
			    %% Line 556
			    call 'inet_db':'get_searchlist'
				()
			in  %% Line 555
			    apply 'res_getby_search'/6
				(_cor2, _cor4, _cor6, %% Line 557
						      'nxdomain', _cor1, _cor0)
		    %% Line 558
		    <> when 'true' ->
			%% Line 559
			case apply 'res_getby_query'/3
				 (_cor2, _cor1, _cor0) of
			  %% Line 560
			  <Error = {'error',_X_Reason}> when 'true' ->
			      let <_cor7> =
				  %% Line 562
				  call 'inet_db':'get_searchlist'
				      ()
			      in  %% Line 561
				  apply 'res_getby_search'/6
				      (_cor2, _cor4, _cor7, %% Line 563
							    Error, _cor1, _cor0)
			  %% Line 564
			  <Other> when 'true' ->
			      Other
			end
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'res_getby_search'/6 =
    %% Line 568
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Dot,[Dom|Ds],_X_Reason,Type,Timer> when 'true' ->
	      let <_cor7> =
		  %% Line 569
		  call 'erlang':'++'
		      (Dot, Dom)
	      in  let <_cor8> =
		      %% Line 569
		      call 'erlang':'++'
			  (Name, _cor7)
		  in  let <_cor6> =
			  %% Line 570
			  call 'inet_db':'res_option'
			      ('nameservers')
		      in  %% Line 569
			  case apply 'res_getby_query'/4
				   (_cor8, Type, Timer, _cor6) of
			    %% Line 571
			    <{'ok',HEnt}> when 'true' ->
				{'ok',HEnt}
			    %% Line 572
			    <{'error',NewReason}> when 'true' ->
				%% Line 573
				apply 'res_getby_search'/6
				    (Name, Dot, Ds, NewReason, Type, Timer)
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 575
	  <_X_Name,_cor16,[],Reason,_cor17,_cor18> when 'true' ->
	      %% Line 576
	      {'error',Reason}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'res_getby_search',6}}] )
	    -| ['compiler_generated'] )
	end
'res_getby_query'/3 =
    %% Line 578
    fun (_cor2,_cor1,_cor0) ->
	%% Line 579
	case apply 'res_query'/5
		 (_cor2, 'in', _cor1, [], _cor0) of
	  %% Line 580
	  <{'ok',Rec}> when 'true' ->
	      %% Line 581
	      call 'inet_db':'res_hostent_by_domain'
		  (_cor2, _cor1, Rec)
	  %% Line 582
	  <{'error',{'qfmterror',_cor7}}> when 'true' ->
	      {'error','einval'}
	  %% Line 583
	  <{'error',{Reason,_cor8}}> when 'true' ->
	      {'error',Reason}
	  %% Line 584
	  <Error> when 'true' ->
	      Error
	end
'res_getby_query'/4 =
    %% Line 587
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 588
	case apply 'res_query'/6
		 (_cor3, 'in', _cor2, [], _cor1, _cor0) of
	  %% Line 589
	  <{'ok',Rec}> when 'true' ->
	      %% Line 590
	      call 'inet_db':'res_hostent_by_domain'
		  (_cor3, _cor2, Rec)
	  %% Line 591
	  <{'error',{'qfmterror',_cor9}}> when 'true' ->
	      {'error','einval'}
	  %% Line 592
	  <{'error',{Reason,_cor10}}> when 'true' ->
	      {'error',Reason}
	  %% Line 593
	  <Error> when 'true' ->
	      Error
	end
'res_query'/5 =
    %% Line 606
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 607
	case %% Line 608
	     apply 'make_query'/4
		 (_cor4, _cor3, _cor2, _cor1) of
	  <Q = {'q',{'options',_cor12,_cor13,_cor14,NSs,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20},_cor21,_cor22}> when 'true' ->
	      %% Line 609
	      case apply 'do_query'/3
		       (Q, NSs, _cor0) of
		%% Line 610
		<Error = {'error','nxdomain'}> when 'true' ->
		    %% Line 611
		    apply 'res_query_alt'/3
			(Q, Error, _cor0)
		%% Line 612
		<Error = {'error',{'nxdomain',_cor23}}> when 'true' ->
		    %% Line 613
		    apply 'res_query_alt'/3
			(Q, Error, _cor0)
		%% Line 614
		<Reply = {'ok',{'dns_rec',_cor24,_cor25,[],_cor26,_cor27}}> when 'true' ->
		    %% Line 615
		    apply 'res_query_alt'/3
			(Q, Reply, _cor0)
		%% Line 616
		<Reply> when 'true' ->
		    Reply
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'res_query'/6 =
    %% Line 620
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Q> =
	    %% Line 621
	    apply 'make_query'/4
		(_cor5, _cor4, _cor3, _cor2)
	in  %% Line 622
	    apply 'do_query'/3
		(Q, _cor0, _cor1)
'res_query_alt'/3 =
    %% Line 624
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Q = {'q',{'options',NSs,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15},_cor16,_cor17},Reply,Timer> when 'true' ->
	      %% Line 625
	      case NSs of
		%% Line 626
		<[]> when 'true' ->
		    Reply
		%% Line 627
		<_cor18> when 'true' ->
		    %% Line 628
		    apply 'do_query'/3
			(Q, NSs, Timer)
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'res_query_alt',3}}] )
	    -| ['compiler_generated'] )
	end
'make_query'/4 =
    %% Line 631
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Options> =
	    %% Line 632
	    apply 'make_options'/1
		(_cor0)
	in  %% Line 633
	    ( case Options of
		( <( {'options',_cor15,_rec9,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec9 of
			%% Line 634
			<'false'> when 'true' ->
			    let <_cor7> =
				%% Line 637
				apply 'make_query'/5
				    (_cor3, _cor2, _cor1, Options, 'false')
			    in  %% Line 635
				{'q',Options,%% Line 636
					     'undefined',_cor7}
			%% Line 638
			<Edns> when 'true' ->
			    let <_cor9> =
				%% Line 640
				apply 'make_query'/5
				    (_cor3, _cor2, _cor1, Options, Edns)
			    in  let <_cor8> =
				    %% Line 641
				    ( fun () ->
					  %% Line 642
					  apply 'make_query'/5
					      (_cor3, _cor2, _cor1, Options, 'false')
				      -| [{'id',{0,0,'-make_query/4-fun-0-'}}] )
				in  %% Line 639
				    {'q',Options,_cor9,_cor8}
		      end
		  -| ['compiler_generated'] )
		( <_cor24> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'make_query'/5 =
    %% Line 650
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Id> =
	    %% Line 651
	    call 'inet_db':'res_option'
		('next_id')
	in  %% Line 652
	    ( case _cor1 of
		( <( {'options',_cor26,_cor27,_cor28,_cor29,_rec10,_cor30,_cor31,_cor32,_cor33,_cor34}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor13> =
			  %% Line 653
			  case _cor0 of
			    %% Line 654
			    <'false'> when 'true' ->
				[]
			    %% Line 655
			    <_cor36> when 'true' ->
				%% Line 657
				[{'dns_rr_opt',[],'opt',_cor32,0,_cor0,0,[]}|%% Line 658
									     []]
			  end
		      in  let <Msg> =
			      %% Line 660
			      {'dns_rec',{'dns_header',Id,0,%% Line 661
							    'query',0,0,_rec10,0,0,%% Line 663
										   0},%% Line 664
										      [{'dns_query',_cor4,_cor2,_cor3}|%% Line 666
														       []],[],[],_cor13}
			  in  do  %% Line 668
				  case _cor34 of
				    <'true'> when 'true' ->
					let <_cor18> =
					    apply 'dns_msg'/1
						(Msg)
					in  call 'io':'format'
						([81|[117|[101|[114|[121|[58|[32|[126|[112|[126|[110]]]]]]]]]]], [_cor18|[]])
				    <'false'> when 'true' ->
					'ok'
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor19})
				      -| ['compiler_generated'] )
				  end
				  let <Buffer> =
				      %% Line 669
				      call 'inet_dns':'encode'
					  (Msg)
				  in  %% Line 670
				      {Id,Buffer}
		  -| ['compiler_generated'] )
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'udp_open'/2 =
    %% Line 677
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'sock',_cor28,I},{A,B,C,D,E,F,G,H}>
	      when try
		    let <_cor3> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor4> =
			    call 'erlang':'bor'
				(_cor3, C)
			in  let <_cor5> =
				call 'erlang':'bor'
				    (_cor4, D)
			    in  let <_cor6> =
				    call 'erlang':'bor'
					(_cor5, E)
				in  let <_cor7> =
					call 'erlang':'bor'
					    (_cor6, F)
				    in  let <_cor8> =
					    call 'erlang':'bor'
						(_cor7, G)
					in  let <_cor9> =
						call 'erlang':'bor'
						    (_cor8, H)
					    in  let <_cor10> =
						    call 'erlang':'band'
							(_cor9, -65536)
						in  call 'erlang':'=:='
							(_cor10, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 678
	      case I of
		%% Line 679
		<'undefined'> when 'true' ->
		    %% Line 680
		    case call 'gen_udp':'open'
			     (0, [{'active','false'}|['binary'|['inet6']]]) of
		      %% Line 681
		      <{'ok',J}> when 'true' ->
			  let <_cor13> =
			      %% Line 682
			      call 'erlang':'setelement'
				  (3, S, J)
			  in  %% Line 682
			      {'ok',_cor13}
		      %% Line 683
		      <Error> when 'true' ->
			  %% Line 684
			  Error
		    end
		%% Line 686
		<_cor32> when 'true' ->
		    %% Line 687
		    {'ok',S}
	      end
	  %% Line 689
	  <S = {'sock',I,_cor33},{A,B,C,D}>
	      when try
		    let <_cor17> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor18> =
			    call 'erlang':'bor'
				(_cor17, C)
			in  let <_cor19> =
				call 'erlang':'bor'
				    (_cor18, D)
			    in  let <_cor20> =
				    call 'erlang':'band'
					(_cor19, -256)
				in  call 'erlang':'=:='
					(_cor20, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 690
	      case I of
		%% Line 691
		<'undefined'> when 'true' ->
		    %% Line 692
		    case call 'gen_udp':'open'
			     (0, [{'active','false'}|['binary'|['inet']]]) of
		      %% Line 693
		      <{'ok',J}> when 'true' ->
			  let <_cor23> =
			      %% Line 694
			      call 'erlang':'setelement'
				  (2, S, J)
			  in  %% Line 694
			      {'ok',_cor23}
		      %% Line 695
		      <Error> when 'true' ->
			  %% Line 696
			  Error
		    end
		%% Line 698
		<_cor37> when 'true' ->
		    %% Line 699
		    {'ok',S}
	      end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'udp_open',2}}] )
	    -| ['compiler_generated'] )
	end
'udp_connect'/3 =
    %% Line 702
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'sock',_cor24,I},IP = {A,B,C,D,E,F,G,H},Port>
	      when %% Line 703
		try
		    let <_cor4> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor5> =
			    call 'erlang':'bor'
				(_cor4, C)
			in  let <_cor6> =
				call 'erlang':'bor'
				    (_cor5, D)
			    in  let <_cor7> =
				    call 'erlang':'bor'
					(_cor6, E)
				in  let <_cor8> =
					call 'erlang':'bor'
					    (_cor7, F)
				    in  let <_cor9> =
					    call 'erlang':'bor'
						(_cor8, G)
					in  let <_cor10> =
						call 'erlang':'bor'
						    (_cor9, H)
					    in  let <_cor11> =
						    call 'erlang':'band'
							(_cor10, -65536)
						in  let <_cor12> =
							call 'erlang':'=:='
							    (_cor11, 0)
						    in  let <_cor14> =
							    call 'erlang':'band'
								(Port, -65536)
							in  let <_cor15> =
								call 'erlang':'=:='
								    (_cor14, 0)
							    in  call 'erlang':'and'
								    (_cor12, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 704
	      call 'gen_udp':'connect'
		  (I, IP, Port)
	  %% Line 705
	  <{'sock',I,_cor25},IP = {A,B,C,D},Port>
	      when %% Line 706
		try
		    let <_cor17> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor18> =
			    call 'erlang':'bor'
				(_cor17, C)
			in  let <_cor19> =
				call 'erlang':'bor'
				    (_cor18, D)
			    in  let <_cor20> =
				    call 'erlang':'band'
					(_cor19, -256)
				in  call 'erlang':'=:='
					(_cor20, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 707
	      call 'gen_udp':'connect'
		  (I, IP, Port)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'udp_connect',3}}] )
	    -| ['compiler_generated'] )
	end
'udp_send'/4 =
    %% Line 709
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'sock',_cor30,I},IP = {A,B,C,D,E,F,G,H},Port,Buffer>
	      when %% Line 710
		try
		    let <_cor5> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor6> =
			    call 'erlang':'bor'
				(_cor5, C)
			in  let <_cor7> =
				call 'erlang':'bor'
				    (_cor6, D)
			    in  let <_cor8> =
				    call 'erlang':'bor'
					(_cor7, E)
				in  let <_cor9> =
					call 'erlang':'bor'
					    (_cor8, F)
				    in  let <_cor10> =
					    call 'erlang':'bor'
						(_cor9, G)
					in  let <_cor11> =
						call 'erlang':'bor'
						    (_cor10, H)
					    in  let <_cor12> =
						    call 'erlang':'band'
							(_cor11, -65536)
						in  let <_cor13> =
							call 'erlang':'=:='
							    (_cor12, 0)
						    in  let <_cor15> =
							    call 'erlang':'band'
								(Port, -65536)
							in  let <_cor16> =
								call 'erlang':'=:='
								    (_cor15, 0)
							    in  call 'erlang':'and'
								    (_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 711
	      call 'gen_udp':'send'
		  (I, IP, Port, Buffer)
	  %% Line 712
	  <{'sock',I,_cor31},IP = {A,B,C,D},Port,Buffer>
	      when %% Line 713
		try
		    let <_cor18> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor19> =
			    call 'erlang':'bor'
				(_cor18, C)
			in  let <_cor20> =
				call 'erlang':'bor'
				    (_cor19, D)
			    in  let <_cor21> =
				    call 'erlang':'band'
					(_cor20, -256)
				in  let <_cor22> =
					call 'erlang':'=:='
					    (_cor21, 0)
				    in  let <_cor24> =
					    call 'erlang':'band'
						(Port, -65536)
					in  let <_cor25> =
						call 'erlang':'=:='
						    (_cor24, 0)
					    in  call 'erlang':'and'
						    (_cor22, _cor25)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 714
	      call 'gen_udp':'send'
		  (I, IP, Port, Buffer)
	  ( <_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'udp_send',4}}] )
	    -| ['compiler_generated'] )
	end
'udp_recv'/5 =
    %% Line 716
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'sock',_cor34,I},IP = {A,B,C,D,E,F,G,H},Port,Timeout,Decode>
	      when %% Line 717
		try
		    let <_cor6> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor7> =
			    call 'erlang':'bor'
				(_cor6, C)
			in  let <_cor8> =
				call 'erlang':'bor'
				    (_cor7, D)
			    in  let <_cor9> =
				    call 'erlang':'bor'
					(_cor8, E)
				in  let <_cor10> =
					call 'erlang':'bor'
					    (_cor9, F)
				    in  let <_cor11> =
					    call 'erlang':'bor'
						(_cor10, G)
					in  let <_cor12> =
						call 'erlang':'bor'
						    (_cor11, H)
					    in  let <_cor13> =
						    call 'erlang':'band'
							(_cor12, -65536)
						in  let <_cor14> =
							call 'erlang':'=:='
							    (_cor13, 0)
						    in  let <_cor16> =
							    call 'erlang':'band'
								(Port, -65536)
							in  let <_cor17> =
								call 'erlang':'=:='
								    (_cor16, 0)
							    in  call 'erlang':'and'
								    (_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor18> =
		  %% Line 718
		  call 'erlang':'now'
		      ()
	      in  %% Line 718
		  apply 'do_udp_recv'/7
		      (I, IP, Port, Timeout, Decode, _cor18, Timeout)
	  %% Line 719
	  <{'sock',I,_cor35},IP = {A,B,C,D},Port,Timeout,Decode>
	      when %% Line 720
		try
		    let <_cor20> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor21> =
			    call 'erlang':'bor'
				(_cor20, C)
			in  let <_cor22> =
				call 'erlang':'bor'
				    (_cor21, D)
			    in  let <_cor23> =
				    call 'erlang':'band'
					(_cor22, -256)
				in  let <_cor24> =
					call 'erlang':'=:='
					    (_cor23, 0)
				    in  let <_cor26> =
					    call 'erlang':'band'
						(Port, -65536)
					in  let <_cor27> =
						call 'erlang':'=:='
						    (_cor26, 0)
					    in  call 'erlang':'and'
						    (_cor24, _cor27)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor28> =
		  %% Line 721
		  call 'erlang':'now'
		      ()
	      in  %% Line 721
		  apply 'do_udp_recv'/7
		      (I, IP, Port, Timeout, Decode, _cor28, Timeout)
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'udp_recv',5}}] )
	    -| ['compiler_generated'] )
	end
'do_udp_recv'/7 =
    %% Line 723
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_I,_X_IP,_X_Port,0,_X_Decode,_X_Start,_X_T> when 'true' ->
	      %% Line 724
	      'timeout'
	  %% Line 725
	  <I,IP,Port,Timeout,Decode,Start,T> when 'true' ->
	      %% Line 726
	      case call 'gen_udp':'recv'
		       (I, 0, T) of
		%% Line 727
		<{'ok',Reply}> when 'true' ->
		    %% Line 728
		    case apply Decode
			     (Reply) of
		      %% Line 729
		      <'false'>
			  when call 'erlang':'=:='
				(T,
				 0) ->
			  let <_cor7> =
			      %% Line 742
			      call 'erlang':'-'
				  (Timeout, 50)
			  in  let <NewTimeout> =
				  %% Line 742
				  call 'erlang':'max'
				      (0, _cor7)
			      in  %% Line 743
				  apply 'do_udp_recv'/7
				      (I, IP, Port, NewTimeout, Decode, Start, T)
		      %% Line 744
		      <'false'> when 'true' ->
			  let <Now> =
			      %% Line 745
			      call 'erlang':'now'
				  ()
			  in  %% Line 1060
			      ( case <Now,Start> of
				  ( <( {( Meg1
					  -| ['compiler_generated'] ),( Sec1
									-| ['compiler_generated'] ),( Mic1
												      -| ['compiler_generated'] )}
				       -| ['compiler_generated'] ),( {( Meg0
									-| ['compiler_generated'] ),( Sec0
												      -| ['compiler_generated'] ),( Mic0
																    -| ['compiler_generated'] )}
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
					( let <_fol155> =
					      %% Line 1061
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '-'
										     -| ['compiler_generated'] )
						    (( Meg1
						       -| ['compiler_generated'] ), ( Meg0
										      -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  ( let <_fol156> =
						    %% Line 1061
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( '*'
											   -| ['compiler_generated'] )
							  (_fol155, ( 1000000
								      -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( let <_fol157> =
							  %% Line 1061
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( '-'
												 -| ['compiler_generated'] )
								(( Sec1
								   -| ['compiler_generated'] ), ( Sec0
												  -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  ( let <_cor7> =
								%% Line 1061
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( '+'
												       -| ['compiler_generated'] )
								      (_fol156, _fol157)
								  -| ['compiler_generated'] )
							    in  ( let <_cor8> =
								      %% Line 1061
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( '*'
													     -| ['compiler_generated'] )
									    (( _cor7
									       -| ['compiler_generated'] ), ( 1000
													      -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  in  ( let <_fol158> =
									    %% Line 1061
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( '-'
														   -| ['compiler_generated'] )
										  (( Mic1
										     -| ['compiler_generated'] ), ( Mic0
														    -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									in  ( let <_fol159> =
										  %% Line 1061
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'div'
															 -| ['compiler_generated'] )
											(_fol158, ( 1000
												    -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      in  let <_cor10> =
										      %% Line 1061
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( '+'
															     -| ['compiler_generated'] )
											    (( _cor8
											       -| ['compiler_generated'] ), _fol159)
											-| ['compiler_generated'] )
										  in  let <_cor11> =
											  call 'erlang':'-'
											      (Timeout, _cor10)
										      in  let <NewT> =
											      call 'erlang':'max'
												  (0, _cor11)
											  in  apply 'do_udp_recv'/7
												  (I, IP, Port, Timeout, Decode, Start, NewT)
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( _cor10
				       -| ['compiler_generated'] ),( _cor9
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
					( primop ( 'match_fail'
						   -| ['compiler_generated'] )
					      (( {( 'function_clause'
						    -| ['compiler_generated'] ),( _cor10
										  -| ['compiler_generated'] ),( _cor9
														-| ['compiler_generated'] )}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      %% Line 748
		      <Result> when 'true' ->
			  %% Line 749
			  Result
		    end
		%% Line 751
		<Error> when 'true' ->
		    Error
	      end
	end
'udp_close'/1 =
    %% Line 754
    fun (_cor0) ->
	case _cor0 of
	  <{'sock',I,I6}> when 'true' ->
	      do  %% Line 755
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (I,
			       'undefined') ->
			call 'gen_udp':'close'
			    (I)
		    <> when 'true' ->
			'ok'
		  end
		  do  %% Line 756
		      case <> of
			<>
			    when call 'erlang':'=/='
				  (I6,
				   'undefined') ->
			    call 'gen_udp':'close'
				(I6)
			<> when 'true' ->
			    'ok'
		      end
		      %% Line 757
		      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'udp_close',1}}] )
	    -| ['compiler_generated'] )
	end
'do_query'/3 =
    %% Line 783
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Q,[],_X_Timer> when 'true' ->
	      %% Line 784
	      {'error','nxdomain'}
	  %% Line 785
	  <Q = {'q',{'options',_cor6,_cor7,_cor8,_cor9,_cor10,Retry,_cor11,_cor12,_cor13,_cor14},_cor15,_cor16},NSs,Timer> when 'true' ->
	      %% Line 786
	      apply 'query_retries'/6
		  (Q, NSs, Timer, Retry, 0, {'sock','undefined','undefined'})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_query',3}}] )
	    -| ['compiler_generated'] )
	end
'query_retries'/6 =
    %% Line 788
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Q,_X_NSs,_X_Timer,Retry,_cor15,S>
	      when call 'erlang':'=:='
		    (_cor15,
		     Retry) ->
	      do  %% Line 789
		  apply 'udp_close'/1
		      (S)
		  %% Line 790
		  {'error','timeout'}
	  %% Line 791
	  <_X_Q,[],_X_Timer,_X_Retry,_X_I,S> when 'true' ->
	      do  %% Line 792
		  apply 'udp_close'/1
		      (S)
		  %% Line 793
		  {'error','timeout'}
	  %% Line 794
	  <Q,NSs,Timer,Retry,I,S0> when 'true' ->
	      %% Line 795
	      case apply 'query_nss'/7
		       (Q, NSs, Timer, Retry, I, S0, []) of
		%% Line 796
		<{S,{'noanswer',ErrNSs}}> when 'true' ->
		    let <_cor7> =
			%% Line 797
			call 'erlang':'--'
			    (NSs, ErrNSs)
		    in  let <_cor6> =
			    %% Line 797
			    call 'erlang':'+'
				(I, 1)
			in  %% Line 797
			    apply 'query_retries'/6
				(Q, _cor7, Timer, Retry, _cor6, S)
		%% Line 798
		<{S,Result}> when 'true' ->
		    do  %% Line 799
			apply 'udp_close'/1
			    (S)
			%% Line 800
			Result
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'query_nss'/7 =
    %% Line 803
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Q,[],_X_Timer,_X_Retry,_X_I,S,ErrNSs> when 'true' ->
	      %% Line 804
	      {S,{'noanswer',ErrNSs}}
	  %% Line 805
	  <Q = {'q',_cor14,'undefined',_cor15},NSs,Timer,Retry,I,S,ErrNSs> when 'true' ->
	      %% Line 806
	      apply 'query_nss_dns'/7
		  (Q, NSs, Timer, Retry, I, S, ErrNSs)
	  %% Line 807
	  <Q,NSs,Timer,Retry,I,S,ErrNSs> when 'true' ->
	      %% Line 808
	      apply 'query_nss_edns'/7
		  (Q, NSs, Timer, Retry, I, S, ErrNSs)
	end
'query_nss_edns'/7 =
    %% Line 810
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Q = %% Line 811
	       {'q',Options = {'options',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,PSz,_cor33,_cor34},{Id,Buffer},_cor35},NSs0 = %% Line 812
																	[NS = {IP,Port}|NSs],%% Line 812
																			     Timer,%% Line 812
																				   Retry,%% Line 812
																					 I,%% Line 812
																					   S0,%% Line 812
																					      ErrNSs> when 'true' ->
	      %% Line 813
	      case %% Line 814
		   apply 'query_ns'/10
		       (S0, Id, Buffer, IP, Port, Timer, Retry, I, Options, PSz) of
		<Reply = {S,Res}> when 'true' ->
		    %% Line 815
		    case Res of
		      %% Line 816
		      <'timeout'> when 'true' ->
			  {S,{'error','timeout'}}
		      %% Line 817
		      <{'ok',_cor36}> when 'true' ->
			  Reply
		      %% Line 818
		      <{'error',{'nxdomain',_cor37}}> when 'true' ->
			  Reply
		      %% Line 819
		      <{'error',{E,_cor38}}>
			  when let <_cor8> =
				call 'erlang':'=:='
				    (E, 'qfmterror')
			    in  let <_cor9> =
				    call 'erlang':'=:='
					(E, 'notimp')
				in  let <_cor10> =
					call 'erlang':'=:='
					    (E, 'servfail')
				    in  let <_cor11> =
					    %% Line 820
					    call 'erlang':'=:='
						(E, 'badvers')
					in  let <_cor12> =
						call 'erlang':'or'
						    (_cor10, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'or'
							(_cor9, _cor12)
						in  call 'erlang':'or'
							(_cor8, _cor13) ->
			  %% Line 821
			  apply 'query_nss_dns'/7
			      (Q, NSs0, Timer, Retry, I, S, ErrNSs)
		      %% Line 822
		      <{'error',E}>
			  when let <_cor14> =
				call 'erlang':'=:='
				    (E, 'fmt')
			    in  let <_cor15> =
				    call 'erlang':'=:='
					(E, 'enetunreach')
				in  let <_cor16> =
					call 'erlang':'=:='
					    (E, 'econnrefused')
				    in  let <_cor17> =
					    call 'erlang':'or'
						(_cor15, _cor16)
					in  call 'erlang':'or'
						(_cor14, _cor17) ->
			  %% Line 823
			  apply 'query_nss'/7
			      (Q, NSs, Timer, Retry, I, S, [NS|ErrNSs])
		      %% Line 824
		      <_X_Error> when 'true' ->
			  %% Line 825
			  apply 'query_nss'/7
			      (Q, NSs, Timer, Retry, I, S, ErrNSs)
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'query_nss_edns',7}}] )
	    -| ['compiler_generated'] )
	end
'query_nss_dns'/7 =
    %% Line 828
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Q0 = %% Line 829
		{'q',_cor27,_cor28,Qdns},%% Line 830
					 [NS = {IP,Port}|NSs],%% Line 830
							      Timer,%% Line 830
								    Retry,%% Line 830
									  I,%% Line 830
									    S0,%% Line 830
									       ErrNSs> when 'true' ->
	      let <_cor10> =
		  %% Line 832
		  case <> of
		    %% Line 833
		    <>
			when call 'erlang':'is_function'
			      (Qdns,
			       0) ->
			let <_rec15> =
			    apply Qdns
				()
			in  call 'erlang':'setelement'
				(4, Q0, _rec15)
		    %% Line 834
		    <> when 'true' ->
			Q0
		  end
	      in  %% Line 831
		  case _cor10 of
		    <Q = {'q',Options,_cor33,{Id,Buffer}}> when 'true' ->
			%% Line 836
			case %% Line 837
			     apply 'query_ns'/10
				 (%% Line 838
				  S0, %% Line 838
				      Id, %% Line 838
					  Buffer, %% Line 838
						  IP, %% Line 838
						      Port, %% Line 838
							    Timer, %% Line 838
								   Retry, %% Line 838
									  I, %% Line 838
									     Options, %% Line 838
										      512) of
			  <Reply = {S,Res}> when 'true' ->
			      %% Line 839
			      case Res of
				%% Line 840
				<'timeout'> when 'true' ->
				    {S,{'error','timeout'}}
				%% Line 841
				<{'ok',_cor34}> when 'true' ->
				    Reply
				%% Line 842
				<{'error',{E,_cor35}}>
				    when let <_cor13> =
					  call 'erlang':'=:='
					      (E, 'nxdomain')
				      in  let <_cor14> =
					      call 'erlang':'=:='
						  (E, 'qfmterror')
					  in  call 'erlang':'or'
						  (_cor13, _cor14) ->
				    Reply
				%% Line 843
				<{'error',E}>
				    when let <_cor15> =
					  call 'erlang':'=:='
					      (E, 'fmt')
				      in  let <_cor16> =
					      call 'erlang':'=:='
						  (E, 'enetunreach')
					  in  let <_cor17> =
						  call 'erlang':'=:='
						      (E, 'econnrefused')
					      in  let <_cor18> =
						      call 'erlang':'or'
							  (_cor16, _cor17)
						  in  call 'erlang':'or'
							  (_cor15, _cor18) ->
				    %% Line 844
				    apply 'query_nss'/7
					(Q, NSs, Timer, Retry, I, S, [NS|ErrNSs])
				%% Line 845
				<_X_Error> when 'true' ->
				    %% Line 846
				    apply 'query_nss'/7
					(Q, NSs, Timer, Retry, I, S, ErrNSs)
			      end
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'query_nss_dns',7}}] )
	    -| ['compiler_generated'] )
	end
'query_ns'/10 =
    %% Line 849
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S0,Id,Buffer,IP,Port,Timer,Retry,I,%% Line 850
					      {'options',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,Tm,_cor49,UseVC,Verbose},%% Line 851
															    PSz> when 'true' ->
	      let <_cor13> =
		  %% Line 852
		  ( case UseVC of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor11> =
				call 'erlang':'iolist_size'
				    (Buffer)
			    in  call 'erlang':'>'
				    (_cor11, PSz)
			-| ['compiler_generated'] )
		      ( <_cor10> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor10}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 852
		  case _cor13 of
		    %% Line 853
		    <'true'> when 'true' ->
			let <_cor14> =
			    %% Line 854
			    call 'erlang':'*'
				(Tm, 5)
			in  let <TcpTimeout> =
				%% Line 854
				call 'inet':'timeout'
				    (_cor14, Timer)
			    in  let <_cor16> =
				    %% Line 855
				    apply 'query_tcp'/6
					(TcpTimeout, Id, Buffer, IP, Port, Verbose)
				in  %% Line 855
				    {S0,_cor16}
		    %% Line 856
		    <'false'> when 'true' ->
			%% Line 857
			case apply 'udp_open'/2
				 (S0, IP) of
			  %% Line 858
			  <{'ok',S}> when 'true' ->
			      let <_cor17> =
				  %% Line 860
				  call 'erlang':'bsl'
				      (1, I)
			      in  let <_cor18> =
				      %% Line 860
				      call 'erlang':'*'
					  (Tm, _cor17)
				  in  let <_cor19> =
					  %% Line 860
					  call 'erlang':'div'
					      (_cor18, Retry)
				      in  let <Timeout> =
					      %% Line 860
					      call 'inet':'timeout'
						  (_cor19, Timer)
					  in  let <_cor30> =
						  %% Line 862
						  case apply 'query_udp'/7
							   (%% Line 863
							    S, %% Line 863
							       Id, %% Line 863
								   Buffer, %% Line 863
									   IP, %% Line 863
									       Port, %% Line 863
										     Timeout, %% Line 863
											      Verbose) of
						    %% Line 864
						    <{'ok',{'dns_rec',H = {'dns_header',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58},_cor59,_cor60,_cor61,_cor62}}>
							when call 'erlang':'=:='
							      (_cor54,
							       'true') ->
							let <_cor27> =
							    %% Line 865
							    call 'erlang':'*'
								(Tm, 5)
							in  let <TcpTimeout> =
								%% Line 865
								call 'inet':'timeout'
								    (_cor27, Timer)
							    in  %% Line 866
								apply 'query_tcp'/6
								    (%% Line 867
								     TcpTimeout, %% Line 867
										 Id, %% Line 867
										     Buffer, %% Line 867
											     IP, %% Line 867
												 Port, %% Line 867
												       Verbose)
						    %% Line 868
						    <Reply> when 'true' ->
							Reply
						  end
					      in  %% Line 861
						  {S,_cor30}
			  %% Line 870
			  <Error> when 'true' ->
			      %% Line 871
			      {S0,Error}
			end
		    ( <_cor32> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor32})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'query_ns',10}}] )
	    -| ['compiler_generated'] )
	end
'query_udp'/7 =
    %% Line 875
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_S,_X_Id,_X_Buffer,_X_IP,_X_Port,0,_X_Verbose> when 'true' ->
	      %% Line 876
	      'timeout'
	  %% Line 877
	  <S,Id,Buffer,IP,Port,Timeout,Verbose> when 'true' ->
	      do  %% Line 878
		  case Verbose of
		    <'true'> when 'true' ->
			call 'io':'format'
			    ([84|[114|[121|[32|[85|[68|[80|[32|[115|[101|[114|[118|[101|[114|[32|[58|[32|[126|[112|[58|[126|[112|[32|[40|[116|[105|[109|[101|[111|[117|[116|[61|[126|[119|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 879
																												       [IP|[Port|[Timeout|[]]]])
		    %% Line 879
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
		  let <_cor9> =
		      %% Line 881
		      case apply 'udp_connect'/3
			       (S, IP, Port) of
			%% Line 882
			<'ok'> when 'true' ->
			    %% Line 883
			    apply 'udp_send'/4
				(S, IP, Port, Buffer)
			%% Line 884
			<E1> when 'true' ->
			    %% Line 885
			    E1
		      end
		  in  %% Line 880
		      case _cor9 of
			%% Line 886
			<'ok'> when 'true' ->
			    let <Decode> =
				%% Line 888
				( fun (_cor13) ->
				      case _cor13 of
					<{RecIP,RecPort,Answer}>
					    when let <_cor10> =
						  %% Line 889
						  call 'erlang':'=:='
						      (RecIP, IP)
					      in  let <_cor11> =
						      %% Line 889
						      call 'erlang':'=:='
							  (RecPort, Port)
						  in  %% Line 889
						      call 'erlang':'and'
							  (_cor10, _cor11) ->
					    %% Line 890
					    case apply 'decode_answer'/3
						     (Answer, Id, Verbose) of
					      %% Line 891
					      <{'error','badid'}> when 'true' ->
						  %% Line 892
						  'false'
					      %% Line 893
					      <Reply> when 'true' ->
						  %% Line 894
						  Reply
					    end
					%% Line 896
					<{_cor27,_cor28,_cor29}> when 'true' ->
					    %% Line 897
					    'false'
					( <_cor14> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor14})
						-| [{'function_name',{'-query_udp/7-fun-0-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-query_udp/7-fun-0-'}}] )
			    in  %% Line 899
				case apply 'udp_recv'/5
					 (S, IP, Port, Timeout, Decode) of
				  %% Line 900
				  <Result = {'ok',_cor30}> when 'true' ->
				      %% Line 901
				      Result
				  %% Line 902
				  <E2> when 'true' ->
				      do  %% Line 903
					  case Verbose of
					    <'true'> when 'true' ->
						call 'io':'format'
						    ([85|[68|[80|[32|[115|[101|[114|[118|[101|[114|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]], [E2|[]])
					    <'false'> when 'true' ->
						'ok'
					    ( <_cor16> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor16})
					      -| ['compiler_generated'] )
					  end
					  %% Line 904
					  E2
				end
			%% Line 906
			<E3> when 'true' ->
			    do  %% Line 907
				case Verbose of
				  <'true'> when 'true' ->
				      call 'io':'format'
					  ([85|[68|[80|[32|[115|[101|[110|[100|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]], [E3|[]])
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor18> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor18})
				    -| ['compiler_generated'] )
				end
				%% Line 908
				{'error','econnrefused'}
		      end
	end
'query_tcp'/6 =
    %% Line 911
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_Id,_X_Buffer,_X_IP,_X_Port,_X_Verbose> when 'true' ->
	      %% Line 912
	      'timeout'
	  %% Line 913
	  <Timeout,Id,Buffer,IP,Port,Verbose> when 'true' ->
	      do  %% Line 914
		  case Verbose of
		    <'true'> when 'true' ->
			call 'io':'format'
			    ([84|[114|[121|[32|[84|[67|[80|[32|[115|[101|[114|[118|[101|[114|[32|[58|[32|[126|[112|[58|[126|[112|[32|[40|[116|[105|[109|[101|[111|[117|[116|[61|[126|[119|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 915
																												       [IP|[Port|[Timeout|[]]]])
		    %% Line 915
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
		  let <_cor22> =
		      %% Line 916
		      case IP of
			%% Line 917
			<{A,B,C,D}>
			    when try
				  let <_cor8> =
				      call 'erlang':'bor'
					  (A, B)
				  in  let <_cor9> =
					  call 'erlang':'bor'
					      (_cor8, C)
				      in  let <_cor10> =
					      call 'erlang':'bor'
						  (_cor9, D)
					  in  let <_cor11> =
						  call 'erlang':'band'
						      (_cor10, -256)
					      in  call 'erlang':'=:='
						      (_cor11, 0)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    'inet'
			%% Line 918
			<{A,B,C,D,E,F,G,H}>
			    when try
				  let <_cor13> =
				      call 'erlang':'bor'
					  (A, B)
				  in  let <_cor14> =
					  call 'erlang':'bor'
					      (_cor13, C)
				      in  let <_cor15> =
					      call 'erlang':'bor'
						  (_cor14, D)
					  in  let <_cor16> =
						  call 'erlang':'bor'
						      (_cor15, E)
					      in  let <_cor17> =
						      call 'erlang':'bor'
							  (_cor16, F)
						  in  let <_cor18> =
							  call 'erlang':'bor'
							      (_cor17, G)
						      in  let <_cor19> =
							      call 'erlang':'bor'
								  (_cor18, H)
							  in  let <_cor20> =
								  call 'erlang':'band'
								      (_cor19, -65536)
							      in  call 'erlang':'=:='
								      (_cor20, 0)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    'inet6'
			( <_cor21> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor21})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 920
		      try
			  call 'gen_tcp':'connect'
			      (IP, Port, %% Line 921
					 [{'active','false'}|[{'packet',2}|['binary'|[_cor22|[]]]]], %% Line 922
												     Timeout)
		      of <_cor24> ->
			  case _cor24 of
			    %% Line 923
			    <{'ok',S}> when 'true' ->
				%% Line 924
				case call 'gen_tcp':'send'
					 (S, Buffer) of
				  %% Line 925
				  <'ok'> when 'true' ->
				      %% Line 926
				      case call 'gen_tcp':'recv'
					       (S, 0, Timeout) of
					%% Line 927
					<{'ok',Answer}> when 'true' ->
					    do  %% Line 928
						call 'gen_tcp':'close'
						    (S)
						%% Line 929
						case apply 'decode_answer'/3
							 (Answer, Id, Verbose) of
						  %% Line 930
						  <OK = {'ok',_cor41}> when 'true' ->
						      OK
						  %% Line 931
						  <{'error','badid'}> when 'true' ->
						      {'error','servfail'}
						  %% Line 932
						  <Error> when 'true' ->
						      Error
						end
					%% Line 934
					<Error> when 'true' ->
					    do  %% Line 935
						call 'gen_tcp':'close'
						    (S)
						do  %% Line 936
						    case Verbose of
						      <'true'> when 'true' ->
							  call 'io':'format'
							      ([84|[67|[80|[32|[115|[101|[114|[118|[101|[114|[32|[114|[101|[99|[118|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 937
																										  [Error|[]])
						      %% Line 937
						      <'false'> when 'true' ->
							  'ok'
						      ( <_cor26> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor26})
							-| ['compiler_generated'] )
						    end
						    %% Line 938
						    Error
				      end
				  %% Line 940
				  <Error> when 'true' ->
				      do  %% Line 941
					  call 'gen_tcp':'close'
					      (S)
					  do  %% Line 942
					      case Verbose of
						<'true'> when 'true' ->
						    call 'io':'format'
							([84|[67|[80|[32|[115|[101|[114|[118|[101|[114|[32|[115|[101|[110|[100|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 943
																									     [Error|[]])
						%% Line 943
						<'false'> when 'true' ->
						    'ok'
						( <_cor28> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor28})
						  -| ['compiler_generated'] )
					      end
					      %% Line 944
					      Error
				end
			    %% Line 946
			    <Error> when 'true' ->
				do  %% Line 947
				    case Verbose of
				      <'true'> when 'true' ->
					  call 'io':'format'
					      ([84|[67|[80|[32|[115|[101|[114|[118|[101|[114|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]], [Error|[]])
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor30> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor30})
					-| ['compiler_generated'] )
				    end
				    %% Line 948
				    Error
			  end
		      catch <_cor34,_cor33,_cor32> ->
			  %% Line 950
			  {'error','einval'}
	end
'decode_answer'/3 =
    %% Line 953
    fun (_cor2,_cor1,_cor0) ->
	%% Line 954
	case call 'inet_dns':'decode'
		 (_cor2) of
	  %% Line 955
	  <{'ok',Msg}> when 'true' ->
	      do  %% Line 956
		  case _cor0 of
		    <'true'> when 'true' ->
			let <_cor3> =
			    apply 'dns_msg'/1
				(Msg)
			in  call 'io':'format'
				([71|[111|[116|[32|[114|[101|[112|[108|[121|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], [_cor3|[]])
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
		  %% Line 957
		  ( case Msg of
		      ( <( {'dns_rec',_cor36,_cor37,_cor38,_cor39,_rec17}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor8> =
				case call 'lists':'keyfind'
					 ('dns_rr_opt', 1, _rec17) of
				  %% Line 958
				  <'false'> when 'true' ->
				      0
				  %% Line 959
				  <{'dns_rr_opt',_cor41,_cor42,_cor43,ExtRCode,_cor44,_cor45,_cor46}> when 'true' ->
				      ExtRCode
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor15> =
				    %% Line 962
				    call 'erlang':'bsl'
					(_cor8, 4)
				in  %% Line 962
				    ( case _cor36 of
					( <( {'dns_header',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_rec19}
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 963
					      case call 'erlang':'bor'
						       (_cor15, _rec19) of
						%% Line 964
						<0> when 'true' ->
						    %% Line 965
						    case <> of
						      <>
							  when ( call 'erlang':'=/='
								  (_cor52,
								   _cor1)
							      -| ['compiler_generated'] ) ->
							  %% Line 966
							  {'error','badid'}
						      %% Line 967
						      <>
							  when ( try
								  let <_cor28> =
								      ( call 'erlang':'length'
									    (_cor37)
									-| ['compiler_generated'] )
								  in  ( call 'erlang':'=/='
									    (_cor28, 1)
									-| ['compiler_generated'] )
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false'
							      -| ['compiler_generated'] ) ->
							  %% Line 968
							  {'error',{'noquery',Msg}}
						      %% Line 969
						      <> when 'true' ->
							  %% Line 970
							  {'ok',Msg}
						    end
						%% Line 972
						<1> when 'true' ->
						    {'error',{'qfmterror',Msg}}
						%% Line 973
						<2> when 'true' ->
						    {'error',{'servfail',Msg}}
						%% Line 974
						<3> when 'true' ->
						    {'error',{'nxdomain',Msg}}
						%% Line 975
						<4> when 'true' ->
						    {'error',{'notimp',Msg}}
						%% Line 976
						<5> when 'true' ->
						    {'error',{'refused',Msg}}
						%% Line 977
						<16> when 'true' ->
						    {'error',{'badvers',Msg}}
						%% Line 978
						<_cor61> when 'true' ->
						    {'error',{'unknown',Msg}}
					      end
					  -| ['compiler_generated'] )
					( <_cor60> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','dns_header'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor40> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','dns_rec'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 980
	  <Error> when 'true' ->
	      do  %% Line 981
		  case _cor0 of
		    <'true'> when 'true' ->
			call 'io':'format'
			    ([71|[111|[116|[32|[114|[101|[112|[108|[121|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], [Error|[]])
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor31> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor31})
		      -| ['compiler_generated'] )
		  end
		  %% Line 982
		  Error
	end
'nsdname'/1 =
    %% Line 996
    fun (_cor0) ->
	case _cor0 of
	  <{A,B,C,D}> when 'true' ->
	      let <_cor1> =
		  %% Line 997
		  apply 'dn_in_addr_arpa'/4
		      (A, B, C, D)
	      in  %% Line 997
		  {'ok',_cor1}
	  %% Line 998
	  <{A,B,C,D,E,F,G,H}> when 'true' ->
	      let <_cor2> =
		  %% Line 999
		  apply 'dn_ip6_int'/8
		      (A, B, C, D, E, F, G, H)
	      in  %% Line 999
		  {'ok',_cor2}
	  %% Line 1000
	  <Name>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1001
	      case call 'inet_parse':'visible_string'
		       (Name) of
		%% Line 1002
		<'true'> when 'true' ->
		    %% Line 1003
		    case call 'inet_parse':'address'
			     (Name) of
		      %% Line 1004
		      <{'ok',Addr}> when 'true' ->
			  %% Line 1005
			  apply 'nsdname'/1
			      (Addr)
		      %% Line 1006
		      <_cor7> when 'true' ->
			  %% Line 1007
			  {'ok',Name}
		    end
		%% Line 1009
		<_cor8> when 'true' ->
		    {'error','formerr'}
	      end
	  %% Line 1011
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 1012
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 1012
		  apply 'nsdname'/1
		      (_cor5)
	  %% Line 1013
	  <_cor9> when 'true' ->
	      {'error','formerr'}
	end
'dn_in_addr_arpa'/4 =
    %% Line 1015
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 1016
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <_cor10> =
		%% Line 1017
		call 'erlang':'integer_to_list'
		    (_cor1)
	    in  let <_cor7> =
		    %% Line 1018
		    call 'erlang':'integer_to_list'
			(_cor2)
		in  let <_cor4> =
			%% Line 1019
			call 'erlang':'integer_to_list'
			    (_cor3)
		    in  let <_cor5> =
			    %% Line 1019
			    call 'erlang':'++'
				(_cor4, [46|[73|[78|[45|[65|[68|[68|[82|[46|[65|[82|[80|[65]]]]]]]]]]]]])
			in  let <_cor6> =
				%% Line 1019
				[46|_cor5]
			    in  let <_cor8> =
				    %% Line 1018
				    call 'erlang':'++'
					(_cor7, _cor6)
				in  let <_cor9> =
					%% Line 1018
					[46|_cor8]
				    in  let <_cor11> =
					    %% Line 1017
					    call 'erlang':'++'
						(_cor10, _cor9)
					in  let <_cor12> =
						%% Line 1017
						[46|_cor11]
					    in  %% Line 1016
						call 'erlang':'++'
						    (_cor13, _cor12)
'dn_ip6_int'/8 =
    %% Line 1021
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	( let <L> =
	      %% Line 1035
	      ( call ( 'erlang'
		       -| ['compiler_generated'] ):( 'integer_to_list'
						     -| ['compiler_generated'] )
		    (_cor0, ( 16
			      -| ['compiler_generated'] ))
		-| ['compiler_generated'] )
	  in  ( let <_fol193> =
		    %% Line 1036
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'length'
							   -| ['compiler_generated'] )
			  (( L
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		in  ( let <_fol194> =
			  %% Line 1036
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '-'
								 -| ['compiler_generated'] )
				(( 4
				   -| ['compiler_generated'] ), _fol193)
			    -| ['compiler_generated'] )
		      in  let <_cor22> =
			      %% Line 1036
			      ( apply ( 'dnib'/3
					-| ['compiler_generated'] )
				    (_fol194, ( L
						-| ['compiler_generated'] ), ( []
									       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <L> =
				    %% Line 1035
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'integer_to_list'
									   -| ['compiler_generated'] )
					  (_cor1, ( 16
						    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  ( let <_fol197> =
					  %% Line 1036
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'length'
										 -| ['compiler_generated'] )
						(( L
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol198> =
						%% Line 1036
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '-'
										       -| ['compiler_generated'] )
						      (( 4
							 -| ['compiler_generated'] ), _fol197)
						  -| ['compiler_generated'] )
					    in  let <_cor20> =
						    %% Line 1036
						    ( apply ( 'dnib'/3
							      -| ['compiler_generated'] )
							  (_fol198, ( L
								      -| ['compiler_generated'] ), ( []
												     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( let <L> =
							  %% Line 1035
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'integer_to_list'
												 -| ['compiler_generated'] )
								(_cor2, ( 16
									  -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      in  ( let <_fol201> =
								%% Line 1036
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'length'
												       -| ['compiler_generated'] )
								      (( L
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    in  ( let <_fol202> =
								      %% Line 1036
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( '-'
													     -| ['compiler_generated'] )
									    (( 4
									       -| ['compiler_generated'] ), _fol201)
									-| ['compiler_generated'] )
								  in  let <_cor18> =
									  %% Line 1036
									  ( apply ( 'dnib'/3
										    -| ['compiler_generated'] )
										(_fol202, ( L
											    -| ['compiler_generated'] ), ( []
															   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      in  ( let <L> =
										%% Line 1035
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'integer_to_list'
														       -| ['compiler_generated'] )
										      (_cor3, ( 16
												-| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    in  ( let <_fol205> =
										      %% Line 1036
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'length'
															     -| ['compiler_generated'] )
											    (( L
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  in  ( let <_fol206> =
											    %% Line 1036
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( '-'
																   -| ['compiler_generated'] )
												  (( 4
												     -| ['compiler_generated'] ), _fol205)
											      -| ['compiler_generated'] )
											in  let <_cor16> =
												%% Line 1036
												( apply ( 'dnib'/3
													  -| ['compiler_generated'] )
												      (_fol206, ( L
														  -| ['compiler_generated'] ), ( []
																		 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    in  ( let <L> =
												      %% Line 1035
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'integer_to_list'
																	     -| ['compiler_generated'] )
													    (_cor4, ( 16
														      -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  in  ( let <_fol209> =
													    %% Line 1036
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'length'
																		   -| ['compiler_generated'] )
														  (( L
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													in  ( let <_fol210> =
														  %% Line 1036
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( '-'
																			 -| ['compiler_generated'] )
															(( 4
															   -| ['compiler_generated'] ), _fol209)
														    -| ['compiler_generated'] )
													      in  let <_cor14> =
														      %% Line 1036
														      ( apply ( 'dnib'/3
																-| ['compiler_generated'] )
															    (_fol210, ( L
																	-| ['compiler_generated'] ), ( []
																				       -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  in  ( let <L> =
															    %% Line 1035
															    ( call ( 'erlang'
																     -| ['compiler_generated'] ):( 'integer_to_list'
																				   -| ['compiler_generated'] )
																  (_cor5, ( 16
																	    -| ['compiler_generated'] ))
															      -| ['compiler_generated'] )
															in  ( let <_fol213> =
																  %% Line 1036
																  ( call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'length'
																					 -| ['compiler_generated'] )
																	(( L
																	   -| ['compiler_generated'] ))
																    -| ['compiler_generated'] )
															      in  ( let <_fol214> =
																	%% Line 1036
																	( call ( 'erlang'
																		 -| ['compiler_generated'] ):( '-'
																					       -| ['compiler_generated'] )
																	      (( 4
																		 -| ['compiler_generated'] ), _fol213)
																	  -| ['compiler_generated'] )
																    in  let <_cor12> =
																	    %% Line 1036
																	    ( apply ( 'dnib'/3
																		      -| ['compiler_generated'] )
																		  (_fol214, ( L
																			      -| ['compiler_generated'] ), ( []
																							     -| ['compiler_generated'] ))
																	      -| ['compiler_generated'] )
																	in  ( let <L> =
																		  %% Line 1035
																		  ( call ( 'erlang'
																			   -| ['compiler_generated'] ):( 'integer_to_list'
																							 -| ['compiler_generated'] )
																			(_cor6, ( 16
																				  -| ['compiler_generated'] ))
																		    -| ['compiler_generated'] )
																	      in  ( let <_fol217> =
																			%% Line 1036
																			( call ( 'erlang'
																				 -| ['compiler_generated'] ):( 'length'
																							       -| ['compiler_generated'] )
																			      (( L
																				 -| ['compiler_generated'] ))
																			  -| ['compiler_generated'] )
																		    in  ( let <_fol218> =
																			      %% Line 1036
																			      ( call ( 'erlang'
																				       -| ['compiler_generated'] ):( '-'
																								     -| ['compiler_generated'] )
																				    (( 4
																				       -| ['compiler_generated'] ), _fol217)
																				-| ['compiler_generated'] )
																			  in  let <_cor10> =
																				  %% Line 1036
																				  ( apply ( 'dnib'/3
																					    -| ['compiler_generated'] )
																					(_fol218, ( L
																						    -| ['compiler_generated'] ), ( []
																										   -| ['compiler_generated'] ))
																				    -| ['compiler_generated'] )
																			      in  ( let <L> =
																					%% Line 1035
																					( call ( 'erlang'
																						 -| ['compiler_generated'] ):( 'integer_to_list'
																									       -| ['compiler_generated'] )
																					      (_cor7, ( 16
																							-| ['compiler_generated'] ))
																					  -| ['compiler_generated'] )
																				    in  ( let <_fol221> =
																					      %% Line 1036
																					      ( call ( 'erlang'
																						       -| ['compiler_generated'] ):( 'length'
																										     -| ['compiler_generated'] )
																						    (( L
																						       -| ['compiler_generated'] ))
																						-| ['compiler_generated'] )
																					  in  ( let <_fol222> =
																						    %% Line 1036
																						    ( call ( 'erlang'
																							     -| ['compiler_generated'] ):( '-'
																											   -| ['compiler_generated'] )
																							  (( 4
																							     -| ['compiler_generated'] ), _fol221)
																						      -| ['compiler_generated'] )
																						in  let <_cor8> =
																							%% Line 1036
																							( apply ( 'dnib'/3
																								  -| ['compiler_generated'] )
																							      (_fol222, ( L
																									  -| ['compiler_generated'] ), ( []
																													 -| ['compiler_generated'] ))
																							  -| ['compiler_generated'] )
																						    in  let <_cor9> =
																							    %% Line 1029
																							    call 'erlang':'++'
																								(_cor8, [73|[80|[54|[46|[65|[82|[80|[65]]]]]]]])
																							in  let <_cor11> =
																								%% Line 1028
																								call 'erlang':'++'
																								    (_cor10, _cor9)
																							    in  let <_cor13> =
																								    %% Line 1027
																								    call 'erlang':'++'
																									(_cor12, _cor11)
																								in  let <_cor15> =
																									%% Line 1026
																									call 'erlang':'++'
																									    (_cor14, _cor13)
																								    in  let <_cor17> =
																									    %% Line 1025
																									    call 'erlang':'++'
																										(_cor16, _cor15)
																									in  let <_cor19> =
																										%% Line 1024
																										call 'erlang':'++'
																										    (_cor18, _cor17)
																									    in  let <_cor21> =
																										    %% Line 1023
																										    call 'erlang':'++'
																											(_cor20, _cor19)
																										in  %% Line 1022
																										    call 'erlang':'++'
																											(_cor22, _cor21)
																						-| ['compiler_generated'] )
																					  -| ['compiler_generated'] )
																				    -| ['compiler_generated'] )
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																	      -| ['compiler_generated'] )
																    -| ['compiler_generated'] )
															      -| ['compiler_generated'] )
															-| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  -| ['compiler_generated'] )
'dnib'/1 =
    %% Line 1034
    fun (_cor0) ->
	let <L> =
	    %% Line 1035
	    call 'erlang':'integer_to_list'
		(_cor0, 16)
	in  let <_cor2> =
		%% Line 1036
		call 'erlang':'length'
		    (L)
	    in  let <_cor3> =
		    %% Line 1036
		    call 'erlang':'-'
			(4, _cor2)
		in  %% Line 1038
		    ( case <_cor3,L> of
			( <( 0
			     -| ['compiler_generated'] ),( []
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
			      []
			  -| ['compiler_generated'] )
			%% Line 1039
			( <( 0
			     -| ['compiler_generated'] ),( [( C
							      -| ['compiler_generated'] )|( Cs
											    -| ['compiler_generated'] )]
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
			      %% Line 1040
			      ( apply ( 'dnib'/3
					-| ['compiler_generated'] )
				    (( 0
				       -| ['compiler_generated'] ), ( Cs
								      -| ['compiler_generated'] ), ( [( C
													-| ['compiler_generated'] )|( [46]
																      -| ['compiler_generated'] )]
												     -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			%% Line 1041
			( <( N
			     -| ['compiler_generated'] ),( Cs
							   -| ['compiler_generated'] )> when ( 'true'
											       -| ['compiler_generated'] ) ->
			      ( let <_fol232> =
				    %% Line 1042
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '-'
									   -| ['compiler_generated'] )
					  (( N
					     -| ['compiler_generated'] ), ( 1
									    -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  %% Line 1042
				    ( apply ( 'dnib'/3
					      -| ['compiler_generated'] )
					  (_fol232, ( Cs
						      -| ['compiler_generated'] ), ( [48|[46]]
										     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'dnib'/3 =
    %% Line 1038
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,[],Acc> when 'true' ->
	      Acc
	  %% Line 1039
	  <0,[C|Cs],Acc> when 'true' ->
	      let <_cor0> =
		  %% Line 1040
		  [C|[46|Acc]]
	      in  ( case %% Line 1040
			 <Cs,( _cor0
			       -| ['compiler_generated'] )> of
		      ( <( []
			   -| ['compiler_generated'] ),( Acc
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    ( Acc
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( [( C
			      -| ['compiler_generated'] )|_fol234]
			   -| ['compiler_generated'] ),( Acc
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
			    %% Line 1040
			    ( apply ( 'dnib'/3
				      -| ['compiler_generated'] )
				  (( 0
				     -| ['compiler_generated'] ), _fol234, ( [( C
										-| ['compiler_generated'] )|( [( 46
														 -| ['compiler_generated'] )|( Acc
																	       -| ['compiler_generated'] )]
													      -| ['compiler_generated'] )]
									     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      %% Line 1041
		      ( <_fol235,( Acc
				   -| ['compiler_generated'] )> when ( 'true'
								       -| ['compiler_generated'] ) ->
			    %% Line 1042
			    ( apply ( 'dnib'/3
				      -| ['compiler_generated'] )
				  (-1, _fol235, ( [( 48
						     -| ['compiler_generated'] )|( [( 46
										      -| ['compiler_generated'] )|( Acc
														    -| ['compiler_generated'] )]
										   -| ['compiler_generated'] )]
						  -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1041
	  <N,Cs,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1042
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor0> =
		      %% Line 1042
		      [48|[46|Acc]]
		  in  ( case <_cor3,%% Line 1042
				    Cs,( _cor0
					 -| ['compiler_generated'] )> of
			  ( <( 0
			       -| ['compiler_generated'] ),( []
							     -| ['compiler_generated'] ),( Acc
											   -| ['compiler_generated'] )> when ( 'true'
															       -| ['compiler_generated'] ) ->
				( Acc
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( 0
			       -| ['compiler_generated'] ),( [( C
								-| ['compiler_generated'] )|_fol236]
							     -| ['compiler_generated'] ),( Acc
											   -| ['compiler_generated'] )> when ( 'true'
															       -| ['compiler_generated'] ) ->
				( apply ( 'dnib'/3
					  -| ['compiler_generated'] )
				      (( 0
					 -| ['compiler_generated'] ), _fol236, ( [( C
										    -| ['compiler_generated'] )|( [( 46
														     -| ['compiler_generated'] )|( Acc
																		   -| ['compiler_generated'] )]
														  -| ['compiler_generated'] )]
										 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( N
			       -| ['compiler_generated'] ),_fol237,( Acc
								     -| ['compiler_generated'] )> when ( 'true'
													 -| ['compiler_generated'] ) ->
				( let <_fol238> =
				      %% Line 1042
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '-'
									     -| ['compiler_generated'] )
					    (( N
					       -| ['compiler_generated'] ), ( 1
									      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  %% Line 1042
				      ( apply ( 'dnib'/3
						-| ['compiler_generated'] )
					    (_fol238, _fol237, ( [( 48
								    -| ['compiler_generated'] )|( [( 46
												     -| ['compiler_generated'] )|( Acc
																   -| ['compiler_generated'] )]
												  -| ['compiler_generated'] )]
								 -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	end
'dns_msg'/1 =
    %% Line 1046
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 1047
	  <[{Field,Msg}|Fields]> when 'true' ->
	      let <_cor1> =
		  %% Line 1048
		  apply 'dns_msg'/1
		      (Msg)
	      in  let <_cor2> =
		      %% Line 1048
		      apply 'dns_msg'/1
			  (Fields)
		  in  %% Line 1048
		      [{Field,_cor1}|_cor2]
	  %% Line 1049
	  <[Msg|Msgs]> when 'true' ->
	      let <_cor3> =
		  %% Line 1050
		  apply 'dns_msg'/1
		      (Msg)
	      in  let <_cor4> =
		      %% Line 1050
		      apply 'dns_msg'/1
			  (Msgs)
		  in  %% Line 1050
		      [_cor3|_cor4]
	  %% Line 1051
	  <Msg> when 'true' ->
	      %% Line 1052
	      case call 'inet_dns':'record_type'
		       (Msg) of
		%% Line 1053
		<'undefined'> when 'true' ->
		    Msg
		%% Line 1054
		<Type> when 'true' ->
		    let <Fields> =
			%% Line 1055
			call 'inet_dns':Type
			    (Msg)
		    in  let <_cor6> =
			    %% Line 1056
			    apply 'dns_msg'/1
				(Fields)
			in  %% Line 1056
			    {Type,_cor6}
	      end
	end
'now_ms'/2 =
    %% Line 1060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Meg1,Sec1,Mic1},{Meg0,Sec0,Mic0}> when 'true' ->
	      let <_cor5> =
		  %% Line 1061
		  call 'erlang':'-'
		      (Meg1, Meg0)
	      in  let <_cor6> =
		      %% Line 1061
		      call 'erlang':'*'
			  (_cor5, 1000000)
		  in  let <_cor4> =
			  %% Line 1061
			  call 'erlang':'-'
			      (Sec1, Sec0)
		      in  let <_cor7> =
			      %% Line 1061
			      call 'erlang':'+'
				  (_cor6, _cor4)
			  in  let <_cor8> =
				  %% Line 1061
				  call 'erlang':'*'
				      (_cor7, 1000)
			      in  let <_cor2> =
				      %% Line 1061
				      call 'erlang':'-'
					  (Mic1, Mic0)
				  in  let <_cor3> =
					  %% Line 1061
					  call 'erlang':'div'
					      (_cor2, 1000)
				      in  %% Line 1061
					  call 'erlang':'+'
					      (_cor8, _cor3)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'now_ms',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('inet_res')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('inet_res', _cor0)
end