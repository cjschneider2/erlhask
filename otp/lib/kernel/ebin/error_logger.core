module 'error_logger' ['add_report_handler'/1,
		       'add_report_handler'/2,
		       'delete_report_handler'/1,
		       'error_info'/1,
		       'error_msg'/1,
		       'error_msg'/2,
		       'error_report'/1,
		       'error_report'/2,
		       'format'/2,
		       'handle_call'/2,
		       'handle_event'/2,
		       'handle_info'/2,
		       'info_msg'/1,
		       'info_msg'/2,
		       'info_report'/1,
		       'info_report'/2,
		       'init'/1,
		       'logfile'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'start'/0,
		       'start_link'/0,
		       'swap_handler'/1,
		       'terminate'/2,
		       'tty'/1,
		       'warning_map'/0,
		       'warning_msg'/1,
		       'warning_msg'/2,
		       'warning_report'/1,
		       'warning_report'/2]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{'msg_tag',{'type',39,'union',[{'atom',39,'error'}|[{'atom',39,'error_report'}|[{'atom',40,'info'}|[{'atom',40,'info_msg'}|[{'atom',40,'info_report'}|[{'atom',41,'warning_msg'}|[{'atom',41,'warning_report'}]]]]]]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'state',{'type',43,'tuple',[{'type',43,'non_neg_integer',[]}|[{'type',43,'non_neg_integer',[]}|[{'type',43,'list',[{'type',43,'term',[]}]}]]]},[]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'warning_map',0},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[]}|[{'var',49,'Tag'}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Tag'}|[{'type',50,'union',[{'atom',50,'error'}|[{'atom',50,'warning'}|[{'atom',50,'info'}]]]}]]]]}]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'start',0},[{'type',59,'fun',[{'type',59,'product',[]}|[{'type',59,'union',[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'pid',[]}]]}|[{'type',59,'tuple',[{'atom',59,'error'}|[{'type',59,'any',[]}]]}]]}]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'start_link',0},[{'type',69,'fun',[{'type',69,'product',[]}|[{'type',69,'union',[{'type',69,'tuple',[{'atom',69,'ok'}|[{'type',69,'pid',[]}]]}|[{'type',69,'tuple',[{'atom',69,'error'}|[{'type',69,'any',[]}]]}]]}]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'error_msg',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'Format'}]}|[{'atom',84,'ok'}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Format'}|[{'type',85,'string',[]}]]]]}]]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'error_msg',2},[{'type',90,'bounded_fun',[{'type',90,'fun',[{'type',90,'product',[{'var',90,'Format'}|[{'var',90,'Data'}]]}|[{'atom',90,'ok'}]]}|[[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Format'}|[{'type',91,'string',[]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Data'}|[{'type',92,'list',[]}]]]]}]]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'format',2},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'Format'}|[{'var',97,'Data'}]]}|[{'atom',97,'ok'}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Format'}|[{'type',98,'string',[]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Data'}|[{'type',99,'list',[]}]]]]}]]]]}]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{'report',{'type',111,'union',[{'type',111,'list',[{'type',111,'union',[{'type',111,'tuple',[{'ann_type',111,[{'var',111,'Tag'}|[{'type',111,'term',[]}]]}|[{'ann_type',111,[{'var',111,'Data'}|[{'type',111,'term',[]}]]}]]}|[{'type',111,'term',[]}]]}]}|[{'type',111,'string',[]}|[{'type',111,'term',[]}]]]},[]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'error_report',1},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Report'}]}|[{'atom',113,'ok'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Report'}|[{'type',114,'report',[]}]]]]}]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'error_report',2},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'Type'}|[{'var',119,'Report'}]]}|[{'atom',119,'ok'}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Type'}|[{'type',120,'term',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Report'}|[{'type',121,'report',[]}]]]]}]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'warning_report',1},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Report'}]}|[{'atom',135,'ok'}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Report'}|[{'type',136,'report',[]}]]]]}]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'warning_report',2},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'Type'}|[{'var',141,'Report'}]]}|[{'atom',141,'ok'}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Type'}|[{'type',142,'any',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Report'}|[{'type',143,'report',[]}]]]]}]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'warning_msg',1},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Format'}]}|[{'atom',172,'ok'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Format'}|[{'type',173,'string',[]}]]]]}]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'warning_msg',2},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Format'}|[{'var',178,'Data'}]]}|[{'atom',178,'ok'}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Format'}|[{'type',179,'string',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Data'}|[{'type',180,'list',[]}]]]]}]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'info_report',1},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'Report'}]}|[{'atom',199,'ok'}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Report'}|[{'type',200,'report',[]}]]]]}]]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'info_report',2},[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'Type'}|[{'var',205,'Report'}]]}|[{'atom',205,'ok'}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Type'}|[{'type',206,'any',[]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Report'}|[{'type',207,'report',[]}]]]]}]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'info_msg',1},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'Format'}]}|[{'atom',217,'ok'}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Format'}|[{'type',218,'string',[]}]]]]}]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'info_msg',2},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Format'}|[{'var',223,'Data'}]]}|[{'atom',223,'ok'}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Format'}|[{'type',224,'string',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Data'}|[{'type',225,'list',[]}]]]]}]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'error_info',1},[{'type',234,'fun',[{'type',234,'product',[{'ann_type',234,[{'var',234,'Error'}|[{'type',234,'any',[]}]]}]}|[{'atom',234,'ok'}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'notify',1},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'tuple',[{'type',239,'msg_tag',[]}|[{'type',239,'pid',[]}|[{'type',239,'tuple',[{'type',239,'pid',[]}|[{'type',239,'any',[]}|[{'type',239,'any',[]}]]]}]]]}]}|[{'atom',239,'ok'}]]}]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'swap_handler_type',{'type',244,'union',[{'atom',244,'false'}|[{'atom',244,'silent'}|[{'atom',244,'tty'}|[{'type',244,'tuple',[{'atom',244,'logfile'}|[{'type',244,'string',[]}]]}]]]]},[]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'swap_handler',1},[{'type',245,'fun',[{'type',245,'product',[{'ann_type',245,[{'var',245,'Type'}|[{'type',245,'swap_handler_type',[]}]]}]}|[{'type',245,'any',[]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'add_report_handler',1},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Handler'}]}|[{'type',263,'any',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Handler'}|[{'type',264,'module',[]}]]]]}]]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'add_report_handler',2},[{'type',269,'bounded_fun',[{'type',269,'fun',[{'type',269,'product',[{'var',269,'Handler'}|[{'var',269,'Args'}]]}|[{'var',269,'Result'}]]}|[[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Handler'}|[{'type',270,'module',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Args'}|[{'remote_type',271,[{'atom',271,'gen_event'}|[{'atom',271,'handler_args'}|[[]]]]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Result'}|[{'remote_type',272,[{'atom',272,'gen_event'}|[{'atom',272,'add_handler_ret'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'delete_report_handler',1},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Handler'}]}|[{'var',277,'Result'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Handler'}|[{'type',278,'module',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Result'}|[{'remote_type',279,[{'atom',279,'gen_event'}|[{'atom',279,'del_handler_ret'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{'open_error',{'type',296,'union',[{'remote_type',296,[{'atom',296,'file'}|[{'atom',296,'posix'}|[[]]]]}|[{'atom',296,'badarg'}|[{'atom',296,'system_limit'}]]]},[]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'logfile',1},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'ann_type',298,[{'var',298,'Request'}|[{'type',298,'tuple',[{'atom',298,'open'}|[{'var',298,'Filename'}]]}]]}]}|[{'type',298,'union',[{'atom',298,'ok'}|[{'type',298,'tuple',[{'atom',298,'error'}|[{'var',298,'OpenReason'}]]}]]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Filename'}|[{'remote_type',299,[{'atom',299,'file'}|[{'atom',299,'name'}|[[]]]]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'OpenReason'}|[{'type',300,'union',[{'atom',300,'allready_have_logfile'}|[{'type',300,'open_error',[]}]]}]]]]}]]]]}|[{'type',301,'bounded_fun',[{'type',301,'fun',[{'type',301,'product',[{'ann_type',301,[{'var',301,'Request'}|[{'atom',301,'close'}]]}]}|[{'type',301,'union',[{'atom',301,'ok'}|[{'type',301,'tuple',[{'atom',301,'error'}|[{'var',301,'CloseReason'}]]}]]}]]}|[[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'CloseReason'}|[{'atom',302,'module_not_found'}]]]]}]]]}|[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'ann_type',303,[{'var',303,'Request'}|[{'atom',303,'filename'}]]}]}|[{'type',303,'union',[{'var',303,'Filename'}|[{'type',303,'tuple',[{'atom',303,'error'}|[{'var',303,'FilenameReason'}]]}]]}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Filename'}|[{'remote_type',304,[{'atom',304,'file'}|[{'atom',304,'name'}|[[]]]]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'FilenameReason'}|[{'atom',305,'no_log_file'}]]]]}]]]]}]]]}],
		%% Line 333
		'spec' =
		    %% Line 333
		    [{{'tty',1},[{'type',333,'bounded_fun',[{'type',333,'fun',[{'type',333,'product',[{'var',333,'Flag'}]}|[{'atom',333,'ok'}]]}|[[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Flag'}|[{'type',334,'boolean',[]}]]]]}]]]}]}],
		%% Line 354
		'spec' =
		    %% Line 354
		    [{{'init',1},[{'type',354,'fun',[{'type',354,'product',[{'type',354,'term',[]}]}|[{'type',354,'tuple',[{'atom',354,'ok'}|[{'type',354,'union',[{'type',354,'state',[]}|[{'type',354,'nil',[]}]]}]]}]]}]}],
		%% Line 365
		'spec' =
		    %% Line 365
		    [{{'handle_event',2},[{'type',365,'fun',[{'type',365,'product',[{'type',365,'term',[]}|[{'type',365,'state',[]}]]}|[{'type',365,'tuple',[{'atom',365,'ok'}|[{'type',365,'state',[]}]]}]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'handle_info',2},[{'type',376,'fun',[{'type',376,'product',[{'type',376,'term',[]}|[{'type',376,'state',[]}]]}|[{'type',376,'tuple',[{'atom',376,'ok'}|[{'type',376,'state',[]}]]}]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'handle_call',2},[{'type',386,'fun',[{'type',386,'product',[{'type',386,'term',[]}|[{'type',386,'state',[]}]]}|[{'type',386,'tuple',[{'atom',386,'ok'}|[{'type',386,'tuple',[{'atom',386,'error'}|[{'atom',386,'bad_query'}]]}|[{'type',386,'state',[]}]]]}]]}]}],
		%% Line 390
		'spec' =
		    %% Line 390
		    [{{'terminate',2},[{'type',390,'fun',[{'type',390,'product',[{'type',390,'term',[]}|[{'type',390,'state',[]}]]}|[{'type',390,'tuple',[{'atom',390,'error_logger'}|[{'type',390,'list',[{'type',390,'term',[]}]}]]}]]}]}]]
'warning_map'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	call 'erlang':'nif_error'
	    ('undef')
'start'/0 =
    %% Line 61
    fun () ->
	%% Line 62
	case call 'gen_event':'start'
		 ({'local','error_logger'}) of
	  %% Line 63
	  <{'ok',Pid}> when 'true' ->
	      do  %% Line 64
		  apply 'simple_logger'/1
		      (10)
		  %% Line 65
		  {'ok',Pid}
	  %% Line 66
	  <Error> when 'true' ->
	      Error
	end
'start_link'/0 =
    %% Line 71
    fun () ->
	%% Line 72
	case call 'gen_event':'start_link'
		 ({'local','error_logger'}) of
	  %% Line 73
	  <{'ok',Pid}> when 'true' ->
	      do  %% Line 74
		  apply 'simple_logger'/1
		      (10)
		  %% Line 75
		  {'ok',Pid}
	  %% Line 76
	  <Error> when 'true' ->
	      Error
	end
'error_msg'/1 =
    %% Line 87
    fun (_cor0) ->
	%% Line 88
	apply 'error_msg'/2
	    (_cor0, [])
'error_msg'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 95
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 95
		call 'erlang':'self'
		    ()
	    in  %% Line 95
		apply 'notify'/1
		    ({'error',_cor3,{_cor2,_cor1,_cor0}})
'format'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 102
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 102
		call 'erlang':'self'
		    ()
	    in  %% Line 102
		apply 'notify'/1
		    ({'error',_cor3,{_cor2,_cor1,_cor0}})
'error_report'/1 =
    %% Line 116
    fun (_cor0) ->
	%% Line 117
	apply 'error_report'/2
	    ('std_error', _cor0)
'error_report'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 124
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 124
		call 'erlang':'self'
		    ()
	    in  %% Line 124
		apply 'notify'/1
		    ({'error_report',_cor3,{_cor2,_cor1,_cor0}})
'warning_report'/1 =
    %% Line 138
    fun (_cor0) ->
	%% Line 139
	apply 'warning_report'/2
	    ('std_warning', _cor0)
'warning_report'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	let <Tag,NType> =
	    %% Line 146
	    case call 'error_logger':'warning_map'
		     () of
	      %% Line 147
	      <'info'> when 'true' ->
		  %% Line 148
		  case <> of
		    %% Line 149
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       'std_warning') ->
			%% Line 150
			<'info_report','std_info'>
		    %% Line 151
		    <> when 'true' ->
			%% Line 152
			<'info_report',_cor1>
		  end
	      %% Line 154
	      <'warning'> when 'true' ->
		  %% Line 155
		  <'warning_report',_cor1>
	      %% Line 156
	      <'error'> when 'true' ->
		  %% Line 157
		  case <> of
		    %% Line 158
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       'std_warning') ->
			%% Line 159
			<'error_report','std_error'>
		    %% Line 160
		    <> when 'true' ->
			%% Line 161
			<'error_report',_cor1>
		  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <_cor6> =
		%% Line 164
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor5> =
		    %% Line 164
		    call 'erlang':'self'
			()
		in  %% Line 164
		    apply 'notify'/1
			({Tag,_cor6,{_cor5,NType,_cor0}})
'warning_msg'/1 =
    %% Line 175
    fun (_cor0) ->
	%% Line 176
	apply 'warning_msg'/2
	    (_cor0, [])
'warning_msg'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 183
	    case call 'error_logger':'warning_map'
		     () of
	      %% Line 184
	      <'warning'> when 'true' ->
		  %% Line 185
		  'warning_msg'
	      %% Line 186
	      <'info'> when 'true' ->
		  %% Line 187
		  'info_msg'
	      %% Line 188
	      <'error'> when 'true' ->
		  %% Line 189
		  'error'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <_cor6> =
		%% Line 191
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor5> =
		    %% Line 191
		    call 'erlang':'self'
			()
		in  %% Line 191
		    apply 'notify'/1
			({_cor3,_cor6,{_cor5,_cor1,_cor0}})
'info_report'/1 =
    %% Line 202
    fun (_cor0) ->
	%% Line 203
	apply 'info_report'/2
	    ('std_info', _cor0)
'info_report'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 210
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 210
		call 'erlang':'self'
		    ()
	    in  %% Line 210
		apply 'notify'/1
		    ({'info_report',_cor3,{_cor2,_cor1,_cor0}})
'info_msg'/1 =
    %% Line 220
    fun (_cor0) ->
	%% Line 221
	apply 'info_msg'/2
	    (_cor0, [])
'info_msg'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 228
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 228
		call 'erlang':'self'
		    ()
	    in  %% Line 228
		apply 'notify'/1
		    ({'info_msg',_cor3,{_cor2,_cor1,_cor0}})
'error_info'/1 =
    %% Line 236
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 237
	    call 'erlang':'group_leader'
		()
	in  let <_cor1> =
		%% Line 237
		call 'erlang':'self'
		    ()
	    in  %% Line 237
		apply 'notify'/1
		    ({'info',_cor2,{_cor1,_cor0,[]}})
'notify'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	call 'gen_event':'notify'
	    ('error_logger', _cor0)
'swap_handler'/1 =
    %% Line 247
    fun (_cor0) ->
	case _cor0 of
	  <'tty'> when 'true' ->
	      let <R> =
		  %% Line 248
		  call 'gen_event':'swap_handler'
		      ('error_logger', {'error_logger','swap'}, %% Line 249
								{'error_logger_tty_h',[]})
	      in  %% Line 250
		  case apply 'simple_logger'/0
			   () of
		    <'ok'> when 'true' ->
			%% Line 251
			R
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 252
	  <{'logfile',File}> when 'true' ->
	      let <R> =
		  %% Line 253
		  call 'gen_event':'swap_handler'
		      ('error_logger', {'error_logger','swap'}, %% Line 254
								{'error_logger_file_h',File})
	      in  %% Line 255
		  case apply 'simple_logger'/0
			   () of
		    <'ok'> when 'true' ->
			%% Line 256
			R
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 257
	  <'silent'> when 'true' ->
	      let <_X_> =
		  %% Line 258
		  ( call 'gen_event':'delete_handler'
			('error_logger', 'error_logger', 'delete')
		    -| ['result_not_wanted'] )
	      in  let <_cor8> =
		      %% Line 259
		      apply 'simple_logger'/0
			  ()
		  in  %% Line 259
		      case _cor8 of
			<'ok'> when 'true' ->
			    ( _cor8
			      -| ['compiler_generated'] )
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  %% Line 260
	  <'false'> when 'true' ->
	      %% Line 261
	      'ok'
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'swap_handler',1}}] )
	    -| ['compiler_generated'] )
	end
'add_report_handler'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 267
	      call 'gen_event':'add_handler'
		  ('error_logger', Module, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_report_handler',1}}] )
	    -| ['compiler_generated'] )
	end
'add_report_handler'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,Args>
	      when call 'erlang':'is_atom'
		    (Module) ->
	      %% Line 275
	      call 'gen_event':'add_handler'
		  ('error_logger', Module, Args)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'add_report_handler',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_report_handler'/1 =
    %% Line 281
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 282
	      call 'gen_event':'delete_handler'
		  ('error_logger', Module, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'delete_report_handler',1}}] )
	    -| ['compiler_generated'] )
	end
'simple_logger'/1 =
    %% Line 286
    fun (_cor0) ->
	case _cor0 of
	  <Buffer_size>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 287
	      call 'gen_event':'add_handler'
		  ('error_logger', 'error_logger', Buffer_size)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'simple_logger',1}}] )
	    -| ['compiler_generated'] )
	end
'simple_logger'/0 =
    %% Line 291
    fun () ->
	%% Line 292
	call 'gen_event':'add_handler'
	    ('error_logger', 'error_logger', [])
'logfile'/1 =
    %% Line 307
    fun (_cor0) ->
	case _cor0 of
	  <{'open',File}> when 'true' ->
	      let <_cor1> =
		  %% Line 309
		  call 'gen_event':'which_handlers'
		      ('error_logger')
	      in  %% Line 308
		  case call 'lists':'member'
			   ('error_logger_file_h', _cor1) of
		    %% Line 310
		    <'true'> when 'true' ->
			%% Line 311
			{'error','allready_have_logfile'}
		    %% Line 312
		    <_cor6> when 'true' ->
			%% Line 313
			call 'gen_event':'add_handler'
			    ('error_logger', 'error_logger_file_h', File)
		  end
	  %% Line 315
	  <'close'> when 'true' ->
	      %% Line 316
	      case call 'gen_event':'delete_handler'
		       ('error_logger', 'error_logger_file_h', 'normal') of
		%% Line 317
		<{'error',Reason}> when 'true' ->
		    %% Line 318
		    {'error',Reason}
		%% Line 319
		<_cor7> when 'true' ->
		    %% Line 320
		    'ok'
	      end
	  %% Line 322
	  <'filename'> when 'true' ->
	      %% Line 323
	      case call 'gen_event':'call'
		       ('error_logger', 'error_logger_file_h', 'filename') of
		%% Line 324
		<{'error',_cor8}> when 'true' ->
		    %% Line 325
		    {'error','no_log_file'}
		%% Line 326
		<Val> when 'true' ->
		    %% Line 327
		    Val
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'logfile',1}}] )
	    -| ['compiler_generated'] )
	end
'tty'/1 =
    %% Line 336
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      let <Hs> =
		  %% Line 337
		  call 'gen_event':'which_handlers'
		      ('error_logger')
	      in  do  %% Line 338
		      case call 'lists':'member'
			       ('error_logger_tty_h', Hs) of
			%% Line 339
			<'false'> when 'true' ->
			    %% Line 340
			    call 'gen_event':'add_handler'
				('error_logger', 'error_logger_tty_h', [])
			%% Line 341
			<'true'> when 'true' ->
			    'ok'
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		      %% Line 344
		      'ok'
	  %% Line 345
	  <'false'> when 'true' ->
	      do  %% Line 346
		  call 'gen_event':'delete_handler'
		      ('error_logger', 'error_logger_tty_h', [])
		  %% Line 347
		  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'tty',1}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <Max>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 357
	      {'ok',{Max,0,[]}}
	  %% Line 360
	  <{'go_back',_X_PostState}> when 'true' ->
	      %% Line 361
	      {'ok',{10,0,[]}}
	  %% Line 362
	  <_cor2> when 'true' ->
	      %% Line 363
	      {'ok',[]}
	end
'handle_event'/2 =
    %% Line 367
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Type,GL,Msg},State>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (GL)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=/='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  %% Line 368
		  call 'erlang':'node'
		      (GL)
	      in  do  %% Line 368
		      call 'gen_event':'notify'
			  ({'error_logger',_cor4}, {Type,GL,Msg})
		      %% Line 370
		      {'ok',State}
	  %% Line 371
	  <{'info_report',_cor7,{_cor8,Type,_cor9}},State>
	      when call 'erlang':'=/='
		    (Type,
		     'std_info') ->
	      %% Line 372
	      {'ok',State}
	  %% Line 373
	  <Event,State> when 'true' ->
	      %% Line 374
	      apply 'handle_event2'/2
		  (Event, State)
	end
'handle_info'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'emulator',GL,Chars},State>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (GL)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=/='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 379
		  call 'erlang':'node'
		      (GL)
	      in  let <_cor4> =
		      %% Line 379
		      call 'erlang':'self'
			  ()
		  in  let <_cor5> =
			  %% Line 379
			  apply 'add_node'/2
			      (Chars, _cor4)
		      in  do  %% Line 379
			      call 'erlang':'!'
				  ({'error_logger',_cor6}, {'emulator',GL,_cor5})
			      %% Line 380
			      {'ok',State}
	  %% Line 381
	  <{'emulator',GL,Chars},State> when 'true' ->
	      %% Line 382
	      apply 'handle_event2'/2
		  ({'emulator',GL,Chars}, State)
	  %% Line 383
	  <_cor9,State> when 'true' ->
	      %% Line 384
	      {'ok',State}
	end
'handle_call'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	{'ok',{'error','bad_query'},_cor0}
'terminate'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'swap',{_cor8,0,Buff}> when 'true' ->
	      %% Line 393
	      {'error_logger',Buff}
	  %% Line 394
	  <'swap',{_cor9,Lost,Buff}> when 'true' ->
	      let <_cor3> =
		  %% Line 395
		  call 'erlang':'group_leader'
		      ()
	      in  let <_cor2> =
		      %% Line 395
		      call 'erlang':'self'
			  ()
		  in  let <Myevent> = {%% Line 395
			   'info',_cor3,%% Line 395
					{_cor2,{'lost_messages',Lost},[]}}
		      in  let <_cor5> =
			      %% Line 396
			      apply 'tag_event'/1
				  (Myevent)
			  in  %% Line 396
			      {'error_logger',[_cor5|Buff]}
	  %% Line 397
	  <_cor10,_cor11> when 'true' ->
	      %% Line 398
	      {'error_logger',[]}
	end
'handle_event2'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Event,{1,Lost,Buff}> when 'true' ->
	      let <_cor2> =
		  %% Line 401
		  apply 'tag_event'/1
		      (Event)
	      in  do  %% Line 401
		      apply 'display'/1
			  (_cor2)
		      let <_cor3> =
			  %% Line 402
			  call 'erlang':'+'
			      (Lost, 1)
		      in  %% Line 402
			  {'ok',{1,_cor3,Buff}}
	  %% Line 403
	  <Event,{N,Lost,Buff}> when 'true' ->
	      let <Tagged> =
		  %% Line 404
		  apply 'tag_event'/1
		      (Event)
	      in  do  %% Line 405
		      apply 'display'/1
			  (Tagged)
		      let <_cor5> =
			  %% Line 406
			  call 'erlang':'-'
			      (N, 1)
		      in  %% Line 406
			  {'ok',{_cor5,Lost,[Tagged|Buff]}}
	  %% Line 407
	  <_cor8,State> when 'true' ->
	      %% Line 408
	      {'ok',State}
	end
'tag_event'/1 =
    %% Line 410
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 411
	    call 'erlang':'localtime'
		()
	in  %% Line 411
	    {_cor1,_cor0}
'display'/1 =
    %% Line 413
    fun (_cor0) ->
	case _cor0 of
	  <{Tag,{'error',_cor2,{_cor3,Format,Args}}}> when 'true' ->
	      %% Line 414
	      apply 'display2'/3
		  (Tag, Format, Args)
	  %% Line 415
	  <{Tag,{'error_report',_cor4,{_cor5,Type,Report}}}> when 'true' ->
	      %% Line 416
	      apply 'display2'/3
		  (Tag, Type, Report)
	  %% Line 417
	  <{Tag,{'info_report',_cor6,{_cor7,Type,Report}}}> when 'true' ->
	      %% Line 418
	      apply 'display2'/3
		  (Tag, Type, Report)
	  %% Line 419
	  <{Tag,{'info',_cor8,{_cor9,Error,_cor10}}}> when 'true' ->
	      %% Line 420
	      apply 'display2'/3
		  (Tag, Error, [])
	  %% Line 421
	  <{Tag,{'info_msg',_cor11,{_cor12,Format,Args}}}> when 'true' ->
	      %% Line 422
	      apply 'display2'/3
		  (Tag, Format, Args)
	  %% Line 423
	  <{Tag,{'warning_report',_cor13,{_cor14,Type,Report}}}> when 'true' ->
	      %% Line 424
	      apply 'display2'/3
		  (Tag, Type, Report)
	  %% Line 425
	  <{Tag,{'warning_msg',_cor15,{_cor16,Format,Args}}}> when 'true' ->
	      %% Line 426
	      apply 'display2'/3
		  (Tag, Format, Args)
	  %% Line 427
	  <{Tag,{'emulator',_cor17,Chars}}> when 'true' ->
	      %% Line 428
	      apply 'display2'/3
		  (Tag, Chars, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'display',1}}] )
	    -| ['compiler_generated'] )
	end
'add_node'/2 =
    %% Line 430
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,Pid>
	      when call 'erlang':'is_atom'
		    (X) ->
	      let <_cor2> =
		  %% Line 431
		  call 'erlang':'atom_to_list'
		      (X)
	      in  %% Line 431
		  apply 'add_node'/2
		      (_cor2, Pid)
	  %% Line 432
	  <X,Pid> when 'true' ->
	      let <_cor3> =
		  %% Line 433
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 433
		  call 'lists':'concat'
		      ([X|[[42|[42|[32|[97|[116|[32|[110|[111|[100|[101|[32]]]]]]]]]]]|[_cor3|[[32|[42|[42|[126|[110]]]]]]]]])
	end
'display2'/3 =
    %% Line 437
    fun (_cor2,_cor1,_cor0) ->
	%% Line 438
	call 'erlang':'display'
	    ({'error_logger',_cor2,_cor1,_cor0})
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('error_logger')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('error_logger', _cor0)
end