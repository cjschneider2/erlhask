module 'inet_tcp_dist' ['accept'/1,
			'accept_connection'/5,
			'accept_loop'/2,
			'close'/1,
			'do_accept'/6,
			'do_setup'/6,
			'getstat'/1,
			'is_node_name'/1,
			'listen'/1,
			'module_info'/0,
			'module_info'/1,
			'select'/1,
			'setup'/5,
			'tick'/1]
    attributes []
'select'/1 =
    %% Line 54
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 55
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  %% Line 55
	    case apply 'split_node'/3
		     (_cor1, 64, []) of
	      %% Line 56
	      <[_cor4|[_X_Host|[]]]> when 'true' ->
		  'true'
	      %% Line 57
	      <_cor5> when 'true' ->
		  'false'
	    end
'listen'/1 =
    %% Line 65
    fun (_cor0) ->
	%% Line 66
	case apply 'do_listen'/1
		 ([{'active','false'}|[{'packet',2}|[{'reuseaddr','true'}]]]) of
	  %% Line 67
	  <{'ok',Socket}> when 'true' ->
	      let <TcpAddress> =
		  %% Line 68
		  apply 'get_tcp_address'/1
		      (Socket)
	      in  %% Line 69
		  ( case TcpAddress of
		      ( <( {'net_address',_rec0,_cor8,_cor9,_cor10}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec0 of
			      <{_cor12,Port}> when 'true' ->
				  %% Line 70
				  case call 'erl_epmd':'register_node'
					   (_cor0, Port) of
				    %% Line 71
				    <{'ok',Creation}> when 'true' ->
					%% Line 72
					{'ok',{Socket,TcpAddress,Creation}}
				    %% Line 73
				    <Error> when 'true' ->
					%% Line 74
					Error
				  end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor11> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','net_address'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 76
	  <Error> when 'true' ->
	      %% Line 77
	      Error
	end
'do_listen'/1 =
    %% Line 80
    fun (_cor0) ->
	let <First,Last> =
	    %% Line 81
	    case call 'application':'get_env'
		     ('kernel', 'inet_dist_listen_min') of
	      %% Line 82
	      <{'ok',N}>
		  when call 'erlang':'is_integer'
			(N) ->
		  %% Line 83
		  case call 'application':'get_env'
			   ('kernel', %% Line 84
				      'inet_dist_listen_max') of
		    %% Line 85
		    <{'ok',M}>
			when call 'erlang':'is_integer'
			      (M) ->
			%% Line 86
			<N,M>
		    %% Line 87
		    <_cor9> when 'true' ->
			%% Line 88
			<N,N>
		  end
	      %% Line 90
	      <_cor10> when 'true' ->
		  %% Line 91
		  <0,0>
	    end
	in  let <_cor6> =
		%% Line 93
		case call 'application':'get_env'
			 ('kernel', 'inet_dist_use_interface') of
		  %% Line 94
		  <{'ok',Ip}> when 'true' ->
		      %% Line 95
		      [{'ip',Ip}|_cor0]
		  %% Line 96
		  <_cor11> when 'true' ->
		      _cor0
		end
	    in  %% Line 99
		apply 'do_listen'/3
		    (First, Last, [{'backlog',128}|_cor6])
'do_listen'/3 =
    %% Line 101
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <First,Last,_cor8>
	      when call 'erlang':'>'
		    (First,
		     Last) ->
	      %% Line 102
	      {'error','eaddrinuse'}
	  %% Line 103
	  <First,Last,Options> when 'true' ->
	      %% Line 104
	      case call 'inet_tcp':'listen'
		       (First, Options) of
		%% Line 105
		<{'error','eaddrinuse'}> when 'true' ->
		    let <_cor3> =
			%% Line 106
			call 'erlang':'+'
			    (First, 1)
		    in  %% Line 106
			apply 'do_listen'/3
			    (_cor3, Last, Options)
		%% Line 107
		<Other> when 'true' ->
		    %% Line 108
		    Other
	      end
	end
'accept'/1 =
    %% Line 115
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 116
	    call 'erlang':'self'
		()
	in  %% Line 116
	    call 'erlang':'spawn_opt'
		('inet_tcp_dist', 'accept_loop', [_cor1|[_cor0|[]]], ['link'|[{'priority','max'}]])
'accept_loop'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	%% Line 119
	case call 'inet_tcp':'accept'
		 (_cor0) of
	  %% Line 120
	  <{'ok',Socket}> when 'true' ->
	      let <_cor2> =
		  %% Line 121
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 121
		      call 'erlang':'!'
			  (_cor1, {'accept',_cor2,Socket,'inet','tcp'})
		      let <_X_> =
			  %% Line 122
			  apply 'controller'/2
			      (_cor1, Socket)
		      in  %% Line 123
			  apply 'accept_loop'/2
			      (_cor1, _cor0)
	  %% Line 124
	  <Error> when 'true' ->
	      %% Line 125
	      call 'erlang':'exit'
		  (Error)
	end
'controller'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	%% Line 129
	receive
	  %% Line 130
	  <{_cor5,'controller',Pid}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      do  %% Line 131
		  apply 'flush_controller'/2
		      (Pid, _cor0)
		  do  %% Line 132
		      call 'inet_tcp':'controlling_process'
			  (_cor0, Pid)
		      do  %% Line 133
			  apply 'flush_controller'/2
			      (Pid, _cor0)
			  let <_cor2> =
			      %% Line 134
			      call 'erlang':'self'
				  ()
			  in  %% Line 134
			      call 'erlang':'!'
				  (Pid, {_cor2,'controller'})
	  %% Line 135
	  <{_cor6,'unsupported_protocol'}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 136
	      call 'erlang':'exit'
		  ('unsupported_protocol')
	after 'infinity' ->
	  'true'
'flush_controller'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	%% Line 140
	receive
	  %% Line 141
	  <{'tcp',_cor4,Data}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor0) ->
	      do  %% Line 142
		  call 'erlang':'!'
		      (_cor1, {'tcp',_cor0,Data})
		  %% Line 143
		  apply 'flush_controller'/2
		      (_cor1, _cor0)
	  %% Line 144
	  <{'tcp_closed',_cor5}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor0) ->
	      do  %% Line 145
		  call 'erlang':'!'
		      (_cor1, {'tcp_closed',_cor0})
		  %% Line 146
		  apply 'flush_controller'/2
		      (_cor1, _cor0)
	after %% Line 147
	      0 ->
	  %% Line 148
	  'ok'
'accept_connection'/5 =
    %% Line 156
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 158
	    call 'erlang':'self'
		()
	in  %% Line 157
	    call 'erlang':'spawn_opt'
		('inet_tcp_dist', 'do_accept', %% Line 158
					       [_cor5|[_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]]], %% Line 159
												   ['link'|[{'priority','max'}]])
'do_accept'/6 =
    %% Line 161
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 162
	receive
	  %% Line 163
	  <{_cor40,'controller'}>
	      when call 'erlang':'=:='
		    (_cor40,
		     _cor4) ->
	      let <Timer> =
		  %% Line 164
		  call 'dist_util':'start_timer'
		      (_cor0)
	      in  %% Line 165
		  case apply 'check_ip'/1
			   (_cor3) of
		    %% Line 166
		    <'true'> when 'true' ->
			let <_cor31> =
			    %% Line 174
			    ( fun (_cor28,_cor27) ->
				  call 'inet_tcp':'send'
				      (_cor28, _cor27)
			      -| [{'id',{0,0,'-do_accept/6-fun-0-'}}] )
			in  let <_cor26> =
				%% Line 175
				( fun (_cor22,_cor21,_cor20) ->
				      call 'inet_tcp':'recv'
					  (_cor22, _cor21, _cor20)
				  -| [{'id',{0,0,'-do_accept/6-fun-1-'}}] )
			    in  let <_cor19> =
				    %% Line 178
				    ( fun (_cor17) ->
					  let <_cor16> =
					      %% Line 182
					      apply 'nodelay'/0
						  ()
					  in  %% Line 179
					      call 'inet':'setopts'
						  (_cor17, %% Line 180
							   [{'active','false'}|%% Line 181
									       [{'packet',4}|%% Line 182
											     [_cor16|[]]]])
				      -| [{'id',{0,0,'-do_accept/6-fun-2-'}}] )
				in  let <_cor15> =
					%% Line 185
					( fun (_cor13) ->
					      let <_cor12> =
						  %% Line 190
						  apply 'nodelay'/0
						      ()
					      in  %% Line 186
						  call 'inet':'setopts'
						      (_cor13, %% Line 187
							       [{'active','true'}|%% Line 188
										  [{'deliver','port'}|%% Line 189
												      [{'packet',4}|%% Line 190
														    [_cor12|[]]]]])
					  -| [{'id',{0,0,'-do_accept/6-fun-3-'}}] )
				    in  let <_cor11> =
					    %% Line 192
					    ( fun (_cor9) ->
						  %% Line 193
						  call 'inet':'getll'
						      (_cor9)
					      -| [{'id',{0,0,'-do_accept/6-fun-4-'}}] )
					in  let <_cor8> =
						%% Line 196
						call 'erlang':'make_fun'
						    ('inet_tcp_dist', 'tick', 1)
					    in  let <_cor7> =
						    %% Line 197
						    call 'erlang':'make_fun'
							('inet_tcp_dist', 'getstat', 1)
						in  let <HSData> =
							%% Line 167
							{'hs_data',_cor5,'undefined',_cor2,_cor3,%% Line 171
												 Timer,%% Line 172
												       0,_cor1,'undefined','undefined','undefined',_cor31,_cor26,_cor19,_cor15,_cor11,%% Line 195
																						      ( 'get_remote_id'/2
																							-| [{'id',{0,0,'-do_accept/6-fun-5-'}}] ),_cor8,_cor7,'normal'}
						    in  %% Line 199
							call 'dist_util':'handshake_other_started'
							    (HSData)
		    %% Line 200
		    <{'false',IP}> when 'true' ->
			do  %% Line 201
			    call 'error_logger':'error_msg'
				([42|[42|[32|[67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[97|[116|[116|[101|[109|[112|[116|[32|[102|[114|[111|[109|[32|[100|[105|[115|[97|[108|[108|[111|[119|[101|[100|[32|[73|[80|[32|[126|[119|[32|[42|[42|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 202
																																						      [IP|[]])
			    %% Line 203
			    call 'dist_util':'shutdown'
				('inet_tcp_dist', 203, 'no_node')
		    ( <_cor33> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor33})
		      -| ['compiler_generated'] )
		  end
	after 'infinity' ->
	  'true'
'nodelay'/0 =
    %% Line 211
    fun () ->
	%% Line 212
	case call 'application':'get_env'
		 ('kernel', 'dist_nodelay') of
	  %% Line 213
	  <'undefined'> when 'true' ->
	      %% Line 214
	      {'nodelay','true'}
	  %% Line 215
	  <{'ok','true'}> when 'true' ->
	      %% Line 216
	      {'nodelay','true'}
	  %% Line 217
	  <{'ok','false'}> when 'true' ->
	      %% Line 218
	      {'nodelay','false'}
	  %% Line 219
	  <_cor1> when 'true' ->
	      %% Line 220
	      {'nodelay','true'}
	end
'get_remote_id'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	%% Line 228
	case call 'inet':'peername'
		 (_cor1) of
	  %% Line 229
	  <{'ok',Address}> when 'true' ->
	      let <_cor2> =
		  %% Line 230
		  call 'erlang':'atom_to_list'
		      (_cor0)
	      in  %% Line 230
		  case apply 'split_node'/3
			   (_cor2, 64, []) of
		    %% Line 231
		    <[_cor7|[Host|[]]]> when 'true' ->
			%% Line 232
			{'net_address',Address,Host,%% Line 233
						    'tcp',%% Line 233
							  'inet'}
		    %% Line 234
		    <_cor8> when 'true' ->
			%% Line 236
			call 'dist_util':'shutdown'
			    ('inet_tcp_dist', 236, 'no_node')
		  end
	  %% Line 238
	  <{'error',_X_Reason}> when 'true' ->
	      %% Line 239
	      call 'dist_util':'shutdown'
		  ('inet_tcp_dist', 239, 'no_node')
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'setup'/5 =
    %% Line 247
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 249
	    call 'erlang':'self'
		()
	in  %% Line 248
	    call 'erlang':'spawn_opt'
		('inet_tcp_dist', 'do_setup', %% Line 249
					      [_cor5|[_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]]], %% Line 250
												  ['link'|[{'priority','max'}]])
'do_setup'/6 =
    %% Line 252
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 254
	case apply 'splitnode'/2
		 (_cor4, _cor1) of
	  <[Name|[Address|[]]]> when 'true' ->
	      %% Line 255
	      case call 'inet':'getaddr'
		       (Address, 'inet') of
		%% Line 256
		<{'ok',Ip}> when 'true' ->
		    let <Timer> =
			%% Line 257
			call 'dist_util':'start_timer'
			    (_cor0)
		    in  %% Line 258
			case call 'erl_epmd':'port_please'
				 (Name, Ip) of
			  %% Line 259
			  <{'port',TcpPort,Version}> when 'true' ->
			      do  %% Line 262
				  call 'dist_util':'reset_timer'
				      (Timer)
				  %% Line 263
				  case call 'inet_tcp':'connect'
					   (Ip, TcpPort, %% Line 264
							 [{'active','false'}|[{'packet',2}]]) of
				    %% Line 266
				    <{'ok',Socket}> when 'true' ->
					let <_cor25> =
					    %% Line 275
					    call 'erlang':'make_fun'
						('inet_tcp', 'send', 2)
					in  let <_cor24> =
						%% Line 276
						call 'erlang':'make_fun'
						    ('inet_tcp', 'recv', 3)
					    in  let <_cor23> =
						    %% Line 278
						    ( fun (_cor21) ->
							  let <_cor20> =
							      %% Line 283
							      apply 'nodelay'/0
								  ()
							  in  %% Line 279
							      call 'inet':'setopts'
								  (_cor21, %% Line 281
									   [{'active','false'}|%% Line 282
											       [{'packet',4}|%% Line 283
													     [_cor20|[]]]])
						      -| [{'id',{0,0,'-do_setup/6-fun-0-'}}] )
						in  let <_cor19> =
							%% Line 286
							( fun (_cor17) ->
							      let <_cor16> =
								  %% Line 292
								  apply 'nodelay'/0
								      ()
							      in  %% Line 287
								  call 'inet':'setopts'
								      (_cor17, %% Line 289
									       [{'active','true'}|%% Line 290
												  [{'deliver','port'}|%% Line 291
														      [{'packet',4}|%% Line 292
																    [_cor16|[]]]]])
							  -| [{'id',{0,0,'-do_setup/6-fun-1-'}}] )
						    in  let <_cor15> =
							    %% Line 294
							    call 'erlang':'make_fun'
								('inet', 'getll', 1)
							in  let <_cor14> =
								%% Line 296
								( fun (_cor11,_cor10) ->
								      %% Line 297
								      {'net_address',%% Line 298
										     {Ip,TcpPort},%% Line 299
												  Address,%% Line 300
													  'tcp',%% Line 301
														'inet'}
								  -| [{'id',{0,0,'-do_setup/6-fun-2-'}}] )
							    in  let <_cor9> =
								    %% Line 303
								    call 'erlang':'make_fun'
									('inet_tcp_dist', 'tick', 1)
								in  let <_cor8> =
									%% Line 304
									call 'erlang':'make_fun'
									    ('inet_tcp_dist', 'getstat', 1)
								    in  let <HSData> =
									    %% Line 267
									    {'hs_data',_cor5,_cor4,_cor2,%% Line 271
													 Socket,%% Line 272
														Timer,%% Line 273
														      0,'undefined',%% Line 274
																    Version,'undefined','undefined',_cor25,_cor24,_cor23,_cor19,_cor15,_cor14,_cor9,_cor8,_cor3}
									in  %% Line 307
									    call 'dist_util':'handshake_we_started'
										(HSData)
				    %% Line 308
				    <_cor38> when 'true' ->
					%% Line 314
					call 'dist_util':'shutdown'
					    ('inet_tcp_dist', 314, _cor4)
				  end
			  %% Line 316
			  <_cor39> when 'true' ->
			      %% Line 319
			      call 'dist_util':'shutdown'
				  ('inet_tcp_dist', 319, _cor4)
			end
		%% Line 321
		<_X_Other> when 'true' ->
		    %% Line 324
		    call 'dist_util':'shutdown'
			('inet_tcp_dist', 324, _cor4)
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 330
    fun (_cor0) ->
	%% Line 331
	call 'inet_tcp':'close'
	    (_cor0)
'splitnode'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 336
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  %% Line 336
	    case apply 'split_node'/3
		     (_cor2, 64, []) of
	      %% Line 337
	      <[Name|Tail]>
		  when call 'erlang':'=/='
			(Tail,
			 []) ->
		  let <Host> =
		      %% Line 338
		      call 'lists':'append'
			  (Tail)
		  in  %% Line 339
		      case apply 'split_node'/3
			       (Host, 46, []) of
			%% Line 340
			<[_cor11|[]]>
			    when call 'erlang':'=:='
				  (_cor0,
				   'longnames') ->
			    do  %% Line 341
				call 'error_logger':'error_msg'
				    ([42|[42|[32|[83|[121|[115|[116|[101|[109|[32|[114|[117|[110|[110|[105|[110|[103|[32|[116|[111|[32|[117|[115|[101|[32|[102|[117|[108|[108|[121|[32|[113|[117|[97|[108|[105|[102|[105|[101|[100|[32|[104|[111|[115|[116|[110|[97|[109|[101|[115|[32|[42|[42|[126|[110|[42|[42|[32|[72|[111|[115|[116|[110|[97|[109|[101|[32|[126|[115|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 345
																																																																	 [Host|[]])
				%% Line 346
				call 'dist_util':'shutdown'
				    ('inet_tcp_dist', 346, _cor1)
			%% Line 347
			<L>
			    when try
				  let <_cor4> =
				      call 'erlang':'length'
					  (L)
				  in  let <_cor5> =
					  call 'erlang':'>'
					      (_cor4, 1)
				      in  let <_cor6> =
					      call 'erlang':'=:='
						  (_cor0, 'shortnames')
					  in  call 'erlang':'and'
						  (_cor5, _cor6)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    do  %% Line 348
				call 'error_logger':'error_msg'
				    ([42|[42|[32|[83|[121|[115|[116|[101|[109|[32|[78|[79|[84|[32|[114|[117|[110|[110|[105|[110|[103|[32|[116|[111|[32|[117|[115|[101|[32|[102|[117|[108|[108|[121|[32|[113|[117|[97|[108|[105|[102|[105|[101|[100|[32|[104|[111|[115|[116|[110|[97|[109|[101|[115|[32|[42|[42|[126|[110|[42|[42|[32|[72|[111|[115|[116|[110|[97|[109|[101|[32|[126|[115|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 351
																																																																			     [Host|[]])
				%% Line 352
				call 'dist_util':'shutdown'
				    ('inet_tcp_dist', 352, _cor1)
			%% Line 353
			<_cor12> when 'true' ->
			    %% Line 354
			    [Name|[Host|[]]]
		      end
	      %% Line 356
	      <[_cor13|[]]> when 'true' ->
		  do  %% Line 357
		      call 'error_logger':'error_msg'
			  ([42|[42|[32|[78|[111|[100|[101|[110|[97|[109|[101|[32|[126|[112|[32|[105|[108|[108|[101|[103|[97|[108|[44|[32|[110|[111|[32|[39|[64|[39|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 358
																																		    [_cor1|[]])
		      %% Line 359
		      call 'dist_util':'shutdown'
			  ('inet_tcp_dist', 359, _cor1)
	      %% Line 360
	      <_cor14> when 'true' ->
		  do  %% Line 361
		      call 'error_logger':'error_msg'
			  ([42|[42|[32|[78|[111|[100|[101|[110|[97|[109|[101|[32|[126|[112|[32|[105|[108|[108|[101|[103|[97|[108|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
		      %% Line 362
		      call 'dist_util':'shutdown'
			  ('inet_tcp_dist', 362, _cor1)
	    end
'split_node'/3 =
    %% Line 365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Chr|T],_cor9,Ack>
	      when call 'erlang':'=:='
		    (_cor9,
		     Chr) ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Ack)
	      in  let <_cor4> =
		      apply 'split_node'/3
			  (T, Chr, [])
		  in  [_cor3|_cor4]
	  %% Line 366
	  <[H|T],Chr,Ack> when 'true' ->
	      apply 'split_node'/3
		  (T, Chr, [H|Ack])
	  %% Line 367
	  <[],_cor10,Ack> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Ack)
	      in  [_cor5|[]]
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_node',3}}] )
	    -| ['compiler_generated'] )
	end
'get_tcp_address'/1 =
    %% Line 372
    fun (_cor0) ->
	%% Line 373
	case call 'inet':'sockname'
		 (_cor0) of
	  <{'ok',Address}> when 'true' ->
	      %% Line 374
	      case call 'inet':'gethostname'
		       () of
		<{'ok',Host}> when 'true' ->
		    %% Line 375
		    {'net_address',%% Line 376
				   Address,%% Line 377
					   Host,%% Line 378
						'tcp',%% Line 379
						      'inet'}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_ip'/1 =
    %% Line 386
    fun (_cor0) ->
	%% Line 387
	case call 'application':'get_env'
		 ('check_ip') of
	  %% Line 388
	  <{'ok','true'}> when 'true' ->
	      %% Line 389
	      case apply 'get_ifs'/1
		       (_cor0) of
		%% Line 390
		<{'ok',IFs,IP}> when 'true' ->
		    %% Line 391
		    apply 'check_ip'/2
			(IFs, IP)
		%% Line 392
		<_cor4> when 'true' ->
		    %% Line 393
		    call 'dist_util':'shutdown'
			('inet_tcp_dist', 393, 'no_node')
	      end
	  %% Line 395
	  <_cor5> when 'true' ->
	      %% Line 396
	      'true'
	end
'get_ifs'/1 =
    %% Line 399
    fun (_cor0) ->
	%% Line 400
	case call 'inet':'peername'
		 (_cor0) of
	  %% Line 401
	  <{'ok',{IP,_cor4}}> when 'true' ->
	      %% Line 402
	      case call 'inet':'getif'
		       (_cor0) of
		%% Line 403
		<{'ok',IFs}> when 'true' ->
		    {'ok',IFs,IP}
		%% Line 404
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 406
	  <Error> when 'true' ->
	      %% Line 407
	      Error
	end
'check_ip'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{OwnIP,_cor7,Netmask}|IFs],PeerIP> when 'true' ->
	      let <_cor3> =
		  %% Line 411
		  apply 'mask'/2
		      (Netmask, PeerIP)
	      in  let <_cor2> =
		      %% Line 411
		      apply 'mask'/2
			  (Netmask, OwnIP)
		  in  %% Line 411
		      case <_cor3,_cor2> of
			%% Line 412
			<M,_cor8>
			    when call 'erlang':'=:='
				  (_cor8,
				   M) ->
			    'true'
			%% Line 413
			<_fol52,_fol53> when 'true' ->
			    apply 'check_ip'/2
				(IFs, PeerIP)
		      end
	  %% Line 415
	  <[],PeerIP> when 'true' ->
	      %% Line 416
	      {'false',PeerIP}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'check_ip',2}}] )
	    -| ['compiler_generated'] )
	end
'mask'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M1,M2,M3,M4},{IP1,IP2,IP3,IP4}> when 'true' ->
	      let <_cor5> =
		  %% Line 419
		  call 'erlang':'band'
		      (M1, IP1)
	      in  let <_cor4> =
		      %% Line 420
		      call 'erlang':'band'
			  (M2, IP2)
		  in  let <_cor3> =
			  %% Line 421
			  call 'erlang':'band'
			      (M3, IP3)
		      in  let <_cor2> =
			      %% Line 422
			      call 'erlang':'band'
				  (M4, IP4)
			  in  %% Line 419
			      {_cor5,_cor4,_cor3,_cor2}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'mask',2}}] )
	    -| ['compiler_generated'] )
	end
'is_node_name'/1 =
    %% Line 424
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 425
		  call 'erlang':'atom_to_list'
		      (Node)
	      in  %% Line 425
		  case apply 'split_node'/3
			   (_cor1, 64, []) of
		    %% Line 426
		    <[_cor4|[_X_Host|[]]]> when 'true' ->
			'true'
		    %% Line 427
		    <_cor5> when 'true' ->
			'false'
		  end
	  %% Line 429
	  <_X_Node> when 'true' ->
	      %% Line 430
	      'false'
	end
'tick'/1 =
    %% Line 432
    fun (_cor0) ->
	%% Line 433
	case call 'inet_tcp':'send'
		 (_cor0, [], ['force']) of
	  <{'error','closed'}> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'self'
		      ()
	      in  do  call 'erlang':'!'
			  (_cor1, {'tcp_closed',_cor0})
		      {'error','closed'}
	  <R> when 'true' ->
	      R
	end
'getstat'/1 =
    %% Line 435
    fun (_cor0) ->
	%% Line 436
	case call 'inet':'getstat'
		 (_cor0, ['recv_cnt'|['send_cnt'|['send_pend']]]) of
	  %% Line 437
	  <{'ok',Stat}> when 'true' ->
	      %% Line 438
	      apply 'split_stat'/4
		  (Stat, 0, 0, 0)
	  %% Line 439
	  <Error> when 'true' ->
	      %% Line 440
	      Error
	end
'split_stat'/4 =
    %% Line 443
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'recv_cnt',R}|Stat],_cor8,W,P> when 'true' ->
	      %% Line 444
	      apply 'split_stat'/4
		  (Stat, R, W, P)
	  %% Line 445
	  <[{'send_cnt',W}|Stat],R,_cor9,P> when 'true' ->
	      %% Line 446
	      apply 'split_stat'/4
		  (Stat, R, W, P)
	  %% Line 447
	  <[{'send_pend',P}|Stat],R,W,_cor10> when 'true' ->
	      %% Line 448
	      apply 'split_stat'/4
		  (Stat, R, W, P)
	  %% Line 449
	  <[],R,W,P> when 'true' ->
	      %% Line 450
	      {'ok',R,W,P}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split_stat',4}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('inet_tcp_dist')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('inet_tcp_dist', _cor0)
end