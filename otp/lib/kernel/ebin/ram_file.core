module 'ram_file' ['advise'/4,
		   'allocate'/3,
		   'close'/1,
		   'compress'/1,
		   'copy'/3,
		   'datasync'/1,
		   'get_file'/1,
		   'get_file_close'/1,
		   'get_size'/1,
		   'ipread_s32bu_p32bu'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/2,
		   'open_mode'/1,
		   'position'/2,
		   'pread'/2,
		   'pread'/3,
		   'pwrite'/2,
		   'pwrite'/3,
		   'read'/2,
		   'set_file'/2,
		   'sync'/1,
		   'truncate'/1,
		   'uncompress'/1,
		   'uudecode'/1,
		   'uuencode'/1,
		   'write'/2]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'open'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data,ModeList>
	      when call 'erlang':'is_list'
		    (ModeList) ->
	      %% Line 111
	      case apply 'open_mode'/1
		       (ModeList) of
		%% Line 112
		<{Mode,Opts}>
		    when call 'erlang':'is_integer'
			  (Mode) ->
		    %% Line 113
		    case apply 'll_open'/3
			     (Data, Mode, Opts) of
		      %% Line 114
		      <{'ok',Port}> when 'true' ->
			  %% Line 115
			  {'ok',{'file_descriptor','ram_file',Port}}
		      %% Line 116
		      <Error> when 'true' ->
			  %% Line 117
			  Error
		    end
		%% Line 119
		<Error = {'error',_cor7}> when 'true' ->
		    %% Line 120
		    Error
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 123
	  <Data,Mode> when 'true' ->
	      %% Line 124
	      case apply 'mode_list'/1
		       (Mode) of
		%% Line 125
		<ModeList>
		    when call 'erlang':'is_list'
			  (ModeList) ->
		    %% Line 126
		    apply 'open'/2
			(Data, ModeList)
		%% Line 127
		<Error> when 'true' ->
		    %% Line 128
		    Error
	      end
	end
'close'/1 =
    %% Line 131
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 132
	      apply 'll_close'/1
		  (Port)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'read'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Sz>
	      when let <_cor2> =
		    %% Line 135
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_cor3> =
			%% Line 135
			call 'erlang':'>='
			    (Sz, 0)
		    in  %% Line 135
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 136
	      case <> of
		%% Line 137
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'is_integer'
				  (Sz)
			  in  let <_cor7> =
				  call 'erlang':'>='
				      (Sz, -2147483648)
			      in  let <_cor9> =
				      call 'erlang':'<'
					  (Sz, 2147483648)
				  in  let <_cor10> =
					  call 'erlang':'and'
					      (_cor7, _cor9)
				      in  call 'erlang':'and'
					      (_cor4, _cor10)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <Cmd> =
			%% Line 138
			#{#<2>(8,1,'integer',['unsigned'|['big']]),
			  #<Sz>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 139
			case apply 'call_port'/2
				 (Port, Cmd) of
			  %% Line 140
			  <{'ok',{0,_X_Data}}>
			      when call 'erlang':'=/='
				    (Sz,
				     0) ->
			      %% Line 141
			      'eof'
			  %% Line 142
			  <{'ok',{_X_Sz,Data}}> when 'true' ->
			      %% Line 143
			      {'ok',Data}
			  %% Line 144
			  <{'error','enomem'}> when 'true' ->
			      do  %% Line 147
				  call 'erlang':'garbage_collect'
				      ()
				  %% Line 148
				  case apply 'call_port'/2
					   (Port, Cmd) of
				    %% Line 149
				    <{'ok',{0,_X_Data}}>
					when call 'erlang':'=/='
					      (Sz,
					       0) ->
					%% Line 150
					'eof'
				    %% Line 151
				    <{'ok',{_X_Sz,Data}}> when 'true' ->
					%% Line 152
					{'ok',Data}
				    %% Line 153
				    <Error> when 'true' ->
					%% Line 154
					Error
				  end
			  %% Line 156
			  <Error> when 'true' ->
			      %% Line 157
			      Error
			end
		%% Line 159
		<> when 'true' ->
		    %% Line 160
		    {'error','einval'}
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'read',2}}] )
	    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Bytes> when 'true' ->
	      %% Line 164
	      case apply 'call_port'/2
		       (Port, [4|Bytes]) of
		%% Line 165
		<{'ok',_X_Sz}> when 'true' ->
		    %% Line 166
		    'ok'
		%% Line 167
		<Error> when 'true' ->
		    %% Line 168
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'write',2}}] )
	    -| ['compiler_generated'] )
	end
'copy'/3 =
    %% Line 174
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source = {'file_descriptor','ram_file',_cor10},Dest = %% Line 175
								 {'file_descriptor','ram_file',_cor11},%% Line 176
												       Length>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 177
			call 'erlang':'is_integer'
			    (Length)
		    in  let <_cor4> =
			    %% Line 177
			    call 'erlang':'>='
				(Length, 0)
			in  %% Line 177
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor6> =
			%% Line 178
			call 'erlang':'is_atom'
			    (Length)
		    in  %% Line 177
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 180
	      call 'file':'copy_opened'
		  (Source, Dest, Length)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'copy',3}}] )
	    -| ['compiler_generated'] )
	end
'datasync'/1 =
    %% Line 182
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 183
	      apply 'call_port'/2
		  (Port, #{#<19>(8,1,'integer',['unsigned'|['big']])}#)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'datasync',1}}] )
	    -| ['compiler_generated'] )
	end
'sync'/1 =
    %% Line 185
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 186
	      apply 'call_port'/2
		  (Port, #{#<9>(8,1,'integer',['unsigned'|['big']])}#)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sync',1}}] )
	    -| ['compiler_generated'] )
	end
'truncate'/1 =
    %% Line 188
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 189
	      apply 'call_port'/2
		  (Port, #{#<14>(8,1,'integer',['unsigned'|['big']])}#)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'truncate',1}}] )
	    -| ['compiler_generated'] )
	end
'position'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Pos> when 'true' ->
	      %% Line 192
	      case apply 'lseek_position'/1
		       (Pos) of
		%% Line 193
		<{'ok',Offs,Whence}>
		    when try
			  let <_cor2> =
			      call 'erlang':'is_integer'
				  (Offs)
			  in  let <_cor5> =
				  call 'erlang':'>='
				      (Offs, -2147483648)
			      in  let <_cor7> =
				      call 'erlang':'<'
					  (Offs, 2147483648)
				  in  let <_cor8> =
					  call 'erlang':'and'
					      (_cor5, _cor7)
				      in  call 'erlang':'and'
					      (_cor2, _cor8)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor9> =
			%% Line 194
			#{#<3>(8,1,'integer',['unsigned'|['big']]),
			  #<Offs>(32,1,'integer',['unsigned'|['big']]),
			  #<Whence>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 194
			apply 'call_port'/2
			    (Port, _cor9)
		%% Line 195
		<{'ok',_cor13,_cor14}> when 'true' ->
		    %% Line 196
		    {'error','einval'}
		%% Line 197
		<Error> when 'true' ->
		    %% Line 198
		    Error
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'position',2}}] )
	    -| ['compiler_generated'] )
	end
'pread'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},L>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 204
	      apply 'pread_1'/3
		  (Port, L, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pread',2}}] )
	    -| ['compiler_generated'] )
	end
'pread_1'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,[],Cs> when 'true' ->
	      let <_cor3> =
		  %% Line 207
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 207
		  apply 'pread_2'/3
		      (Port, _cor3, [])
	  %% Line 208
	  <Port,[{At,Sz}|T],Cs>
	      when %% Line 209
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (At)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Sz)
			in  let <_cor6> =
				call 'erlang':'>='
				    (Sz, 0)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 210
	      case <> of
		%% Line 211
		<>
		    when try
			  let <_cor8> =
			      call 'erlang':'is_integer'
				  (At)
			  in  let <_cor11> =
				  call 'erlang':'>='
				      (At, -2147483648)
			      in  let <_cor13> =
				      call 'erlang':'<'
					  (At, 2147483648)
				  in  let <_cor14> =
					  call 'erlang':'is_integer'
					      (Sz)
				      in  let <_cor17> =
					      call 'erlang':'>='
						  (Sz, -2147483648)
					  in  let <_cor19> =
						  call 'erlang':'<'
						      (Sz, 2147483648)
					      in  let <_cor20> =
						      call 'erlang':'and'
							  (_cor17, _cor19)
						  in  let <_cor21> =
							  call 'erlang':'and'
							      (_cor14, _cor20)
						      in  let <_cor22> =
							      call 'erlang':'and'
								  (_cor13, _cor21)
							  in  let <_cor23> =
								  call 'erlang':'and'
								      (_cor11, _cor22)
							      in  call 'erlang':'and'
								      (_cor8, _cor23)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor24> =
			%% Line 212
			#{#<17>(8,1,'integer',['unsigned'|['big']]),
			  #<At>(32,1,'integer',['unsigned'|['big']]),
			  #<Sz>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 212
			apply 'pread_1'/3
			    (Port, T, [{Sz,_cor24}|Cs])
		%% Line 213
		<> when 'true' ->
		    %% Line 214
		    {'error','einval'}
	      end
	  %% Line 216
	  <_cor28,_cor29,_X_243> when 'true' ->
	      %% Line 217
	      {'error','badarg'}
	end
'pread_2'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Port,[],R> when 'true' ->
	      let <_cor3> =
		  %% Line 220
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 220
		  {'ok',_cor3}
	  %% Line 221
	  <Port,[{Sz,Command}|Commands],R> when 'true' ->
	      %% Line 222
	      case apply 'call_port'/2
		       (Port, Command) of
		%% Line 223
		<{'ok',{0,_X_Data}}>
		    when call 'erlang':'=/='
			  (Sz,
			   0) ->
		    %% Line 224
		    apply 'pread_2'/3
			(Port, Commands, ['eof'|R])
		%% Line 225
		<{'ok',{_X_Sz,Data}}> when 'true' ->
		    %% Line 226
		    apply 'pread_2'/3
			(Port, Commands, [Data|R])
		%% Line 227
		<Error> when 'true' ->
		    %% Line 228
		    Error
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pread_2',3}}] )
	    -| ['compiler_generated'] )
	end
'pread'/3 =
    %% Line 231
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},At,Sz>
	      when %% Line 232
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (At)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Sz)
			in  let <_cor5> =
				call 'erlang':'>='
				    (Sz, 0)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 233
	      case <> of
		%% Line 234
		<>
		    when try
			  let <_cor7> =
			      call 'erlang':'is_integer'
				  (At)
			  in  let <_cor10> =
				  call 'erlang':'>='
				      (At, -2147483648)
			      in  let <_cor12> =
				      call 'erlang':'<'
					  (At, 2147483648)
				  in  let <_cor13> =
					  call 'erlang':'is_integer'
					      (Sz)
				      in  let <_cor16> =
					      call 'erlang':'>='
						  (Sz, -2147483648)
					  in  let <_cor18> =
						  call 'erlang':'<'
						      (Sz, 2147483648)
					      in  let <_cor19> =
						      call 'erlang':'and'
							  (_cor16, _cor18)
						  in  let <_cor20> =
							  call 'erlang':'and'
							      (_cor13, _cor19)
						      in  let <_cor21> =
							      call 'erlang':'and'
								  (_cor12, _cor20)
							  in  let <_cor22> =
								  call 'erlang':'and'
								      (_cor10, _cor21)
							      in  call 'erlang':'and'
								      (_cor7, _cor22)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor23> =
			%% Line 235
			#{#<17>(8,1,'integer',['unsigned'|['big']]),
			  #<At>(32,1,'integer',['unsigned'|['big']]),
			  #<Sz>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 235
			case apply 'call_port'/2
				 (Port, _cor23) of
			  %% Line 236
			  <{'ok',{0,_X_Data}}>
			      when call 'erlang':'=/='
				    (Sz,
				     0) ->
			      %% Line 237
			      'eof'
			  %% Line 238
			  <{'ok',{_X_Sz,Data}}> when 'true' ->
			      %% Line 239
			      {'ok',Data}
			  %% Line 240
			  <Error> when 'true' ->
			      %% Line 241
			      Error
			end
		%% Line 243
		<> when 'true' ->
		    %% Line 244
		    {'error','einval'}
	      end
	  %% Line 246
	  <{'file_descriptor','ram_file',_cor28},_cor29,_cor30> when 'true' ->
	      %% Line 247
	      {'error','badarg'}
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'pread',3}}] )
	    -| ['compiler_generated'] )
	end
'pwrite'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},L>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 252
	      apply 'pwrite_1'/4
		  (Port, L, 0, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pwrite',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_1'/4 =
    %% Line 254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Port,[],_cor34,Cs> when 'true' ->
	      let <_cor4> =
		  %% Line 255
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 255
		  apply 'pwrite_2'/3
		      (Port, _cor4, 0)
	  %% Line 256
	  <Port,[{At,Bytes}|T],R,Cs>
	      when call 'erlang':'is_integer'
		    (At) ->
	      %% Line 257
	      case <> of
		%% Line 258
		<>
		    when try
			  let <_cor5> =
			      call 'erlang':'is_integer'
				  (At)
			  in  let <_cor8> =
				  call 'erlang':'>='
				      (At, -2147483648)
			      in  let <_cor10> =
				      call 'erlang':'<'
					  (At, 2147483648)
				  in  let <_cor11> =
					  call 'erlang':'is_binary'
					      (Bytes)
				      in  let <_cor12> =
					      call 'erlang':'and'
						  (_cor10, _cor11)
					  in  let <_cor13> =
						  call 'erlang':'and'
						      (_cor8, _cor12)
					      in  call 'erlang':'and'
						      (_cor5, _cor13)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor15> =
			%% Line 259
			call 'erlang':'+'
			    (R, 1)
		    in  let <_cor14> =
			    %% Line 260
			    #{#<18>(8,1,'integer',['unsigned'|['big']]),
			      #<At>(32,1,'integer',['unsigned'|['big']]),
			      #<Bytes>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 259
			    apply 'pwrite_1'/4
				(Port, T, _cor15, %% Line 260
						  [_cor14|Cs])
		%% Line 261
		<>
		    when try
			  let <_cor16> =
			      call 'erlang':'is_integer'
				  (At)
			  in  let <_cor19> =
				  call 'erlang':'>='
				      (At, -2147483648)
			      in  let <_cor21> =
				      call 'erlang':'<'
					  (At, 2147483648)
				  in  let <_cor22> =
					  call 'erlang':'and'
					      (_cor19, _cor21)
				      in  call 'erlang':'and'
					      (_cor16, _cor22)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 262
		    try
			call 'erlang':'iolist_to_binary'
			    (Bytes)
		    of <_cor23> ->
			let <_cor25> =
			    %% Line 264
			    call 'erlang':'+'
				(R, 1)
			in  let <_cor24> =
				%% Line 265
				#{#<18>(8,1,'integer',['unsigned'|['big']]),
				  #<At>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor23>('all',8,'binary',['unsigned'|['big']])}#
			    in  %% Line 264
				apply 'pwrite_1'/4
				    (Port, T, _cor25, %% Line 265
						      [_cor24|Cs])
		    catch <_cor29,_cor28,_cor27> ->
			case <_cor29,_cor28,_cor27> of
			  %% Line 267
			  <'error',Reason,_cor35> when 'true' ->
			      %% Line 268
			      {'error',Reason}
			  ( <_cor29,_cor28,_cor27> when 'true' ->
				primop 'raise'
				    (_cor27, _cor28)
			    -| ['compiler_generated'] )
			end
		%% Line 270
		<> when 'true' ->
		    %% Line 271
		    {'error',{R,'einval'}}
	      end
	  %% Line 273
	  <_cor36,_cor37,_cor38,_cor39> when 'true' ->
	      %% Line 274
	      {'error','badarg'}
	end
'pwrite_2'/3 =
    %% Line 276
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Port,[],_X_R> when 'true' ->
	      %% Line 277
	      'ok'
	  %% Line 278
	  <Port,[Command|Commands],R> when 'true' ->
	      %% Line 279
	      case apply 'call_port'/2
		       (Port, Command) of
		%% Line 280
		<{'ok',_X_Sz}> when 'true' ->
		    let <_cor3> =
			%% Line 281
			call 'erlang':'+'
			    (R, 1)
		    in  %% Line 281
			apply 'pwrite_2'/3
			    (Port, Commands, _cor3)
		%% Line 282
		<Error = {'error','badarg'}> when 'true' ->
		    %% Line 283
		    Error
		%% Line 284
		<{'error',Reason}> when 'true' ->
		    %% Line 285
		    {'error',{R,Reason}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pwrite_2',3}}] )
	    -| ['compiler_generated'] )
	end
'pwrite'/3 =
    %% Line 288
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},At,Bytes>
	      when %% Line 289
		call 'erlang':'is_integer'
		    (At) ->
	      %% Line 290
	      case <> of
		%% Line 291
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'is_integer'
				  (At)
			  in  let <_cor6> =
				  call 'erlang':'>='
				      (At, -2147483648)
			      in  let <_cor8> =
				      call 'erlang':'<'
					  (At, 2147483648)
				  in  let <_cor9> =
					  call 'erlang':'and'
					      (_cor6, _cor8)
				      in  call 'erlang':'and'
					      (_cor3, _cor9)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor10> =
			%% Line 292
			#{#<18>(8,1,'integer',['unsigned'|['big']]),
			  #<At>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 292
			case apply 'call_port'/2
				 (Port, [_cor10|Bytes]) of
			  %% Line 293
			  <{'ok',_X_Sz}> when 'true' ->
			      %% Line 294
			      'ok'
			  %% Line 295
			  <Error> when 'true' ->
			      %% Line 296
			      Error
			end
		%% Line 298
		<> when 'true' ->
		    %% Line 299
		    {'error','einval'}
	      end
	  %% Line 301
	  <{'file_descriptor','ram_file',_cor15},_cor16,_cor17> when 'true' ->
	      %% Line 302
	      {'error','badarg'}
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'pwrite',3}}] )
	    -| ['compiler_generated'] )
	end
'ipread_s32bu_p32bu'/3 =
    %% Line 305
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle = {'file_descriptor','ram_file',_cor6},Pos,MaxSz> when 'true' ->
	      %% Line 306
	      call 'file':'ipread_s32bu_p32bu_int'
		  (Handle, Pos, MaxSz)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'ipread_s32bu_p32bu',3}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 315
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 316
	      case apply 'call_port'/2
		       (Port, [30]) of
		%% Line 317
		<{'ok',{_X_Sz,Data}}> when 'true' ->
		    %% Line 318
		    {'ok',Data}
		%% Line 319
		<Error> when 'true' ->
		    %% Line 320
		    Error
	      end
	  %% Line 322
	  <{'file_descriptor',_cor3,_cor4}> when 'true' ->
	      %% Line 323
	      {'error','enotsup'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'set_file'/2 =
    %% Line 325
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Data> when 'true' ->
	      %% Line 326
	      apply 'call_port'/2
		  (Port, [31|Data])
	  %% Line 327
	  <{'file_descriptor',_cor4,_cor5},_cor6> when 'true' ->
	      %% Line 328
	      {'error','enotsup'}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'set_file',2}}] )
	    -| ['compiler_generated'] )
	end
'get_file_close'/1 =
    %% Line 330
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 331
	      case apply 'call_port'/2
		       (Port, [32]) of
		%% Line 332
		<{'ok',{_X_Sz,Data}}> when 'true' ->
		    %% Line 333
		    {'ok',Data}
		%% Line 334
		<Error> when 'true' ->
		    %% Line 335
		    Error
	      end
	  %% Line 337
	  <{'file_descriptor',_cor3,_cor4}> when 'true' ->
	      %% Line 338
	      {'error','enotsup'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_file_close',1}}] )
	    -| ['compiler_generated'] )
	end
'get_size'/1 =
    %% Line 340
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 341
	      apply 'call_port'/2
		  (Port, [37])
	  %% Line 342
	  <{'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 343
	      {'error','enotsup'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_size',1}}] )
	    -| ['compiler_generated'] )
	end
'compress'/1 =
    %% Line 345
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 346
	      apply 'call_port'/2
		  (Port, [33])
	  %% Line 347
	  <{'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 348
	      {'error','enotsup'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'compress',1}}] )
	    -| ['compiler_generated'] )
	end
'uncompress'/1 =
    %% Line 350
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 351
	      apply 'call_port'/2
		  (Port, [34])
	  %% Line 352
	  <{'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 353
	      {'error','enotsup'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'uncompress',1}}] )
	    -| ['compiler_generated'] )
	end
'uuencode'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 357
	      apply 'call_port'/2
		  (Port, [35])
	  %% Line 358
	  <{'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 359
	      {'error','enotsup'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'uuencode',1}}] )
	    -| ['compiler_generated'] )
	end
'uudecode'/1 =
    %% Line 361
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','ram_file',Port}> when 'true' ->
	      %% Line 362
	      apply 'call_port'/2
		  (Port, [36])
	  %% Line 363
	  <{'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 364
	      {'error','enotsup'}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'uudecode',1}}] )
	    -| ['compiler_generated'] )
	end
'advise'/4 =
    %% Line 366
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Offset,%% Line 367
						      Length,%% Line 367
							     Advise> when 'true' ->
	      let <Cmd0> =
		  %% Line 368
		  #{#<38>(8,1,'integer',['unsigned'|['big']]),
		    #<Offset>(64,1,'integer',['signed'|['big']]),
		    #<Length>(64,1,'integer',['signed'|['big']])}#
	      in  %% Line 369
		  case Advise of
		    %% Line 370
		    <'normal'> when 'true' ->
			let <_cor5> =
			    %% Line 371
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<0>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 371
			    apply 'call_port'/2
				(Port, _cor5)
		    %% Line 372
		    <'random'> when 'true' ->
			let <_cor6> =
			    %% Line 373
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<1>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 373
			    apply 'call_port'/2
				(Port, _cor6)
		    %% Line 374
		    <'sequential'> when 'true' ->
			let <_cor7> =
			    %% Line 375
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<2>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 375
			    apply 'call_port'/2
				(Port, _cor7)
		    %% Line 376
		    <'will_need'> when 'true' ->
			let <_cor8> =
			    %% Line 377
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<3>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 377
			    apply 'call_port'/2
				(Port, _cor8)
		    %% Line 378
		    <'dont_need'> when 'true' ->
			let <_cor9> =
			    %% Line 379
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<4>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 379
			    apply 'call_port'/2
				(Port, _cor9)
		    %% Line 380
		    <'no_reuse'> when 'true' ->
			let <_cor10> =
			    %% Line 381
			    #{#<Cmd0>('all',8,'binary',['unsigned'|['big']]),
			      #<5>(32,1,'integer',['signed'|['big']])}#
			in  %% Line 381
			    apply 'call_port'/2
				(Port, _cor10)
		    %% Line 382
		    <_cor16> when 'true' ->
			%% Line 383
			{'error','einval'}
		  end
	  %% Line 385
	  <{'file_descriptor',_cor17,_cor18},_X_Offset,_X_Length,_X_Advise> when 'true' ->
	      %% Line 386
	      {'error','enotsup'}
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'advise',4}}] )
	    -| ['compiler_generated'] )
	end
'allocate'/3 =
    %% Line 388
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','ram_file',Port},Offset,Length> when 'true' ->
	      let <_cor3> =
		  %% Line 389
		  #{#<39>(8,1,'integer',['unsigned'|['big']]),
		    #<Offset>(64,1,'integer',['signed'|['big']]),
		    #<Length>(64,1,'integer',['signed'|['big']])}#
	      in  %% Line 389
		  apply 'call_port'/2
		      (Port, _cor3)
	  %% Line 390
	  <{'file_descriptor',_cor7,_cor8},_X_Offset,_X_Length> when 'true' ->
	      %% Line 391
	      {'error','enotsup'}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'allocate',3}}] )
	    -| ['compiler_generated'] )
	end
'll_open'/3 =
    %% Line 398
    fun (_cor2,_cor1,_cor0) ->
	%% Line 399
	try
	    call 'erlang':'open_port'
		({'spawn',[114|[97|[109|[95|[102|[105|[108|[101|[95|[100|[114|[118]]]]]]]]]]]]}, _cor0)
	of <_cor3> ->
	    let <_cor4> =
		%% Line 401
		#{#<1>(8,1,'integer',['unsigned'|['big']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['big']])}#
	    in  %% Line 401
		case apply 'call_port'/2
			 (_cor3, [_cor4|_cor2]) of
		  %% Line 402
		  <Error = {'error',_cor13}> when 'true' ->
		      do  %% Line 403
			  apply 'll_close'/1
			      (_cor3)
			  %% Line 404
			  Error
		  %% Line 405
		  <{'ok',_cor14}> when 'true' ->
		      %% Line 406
		      {'ok',_cor3}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
	catch <_cor9,_cor8,_cor7> ->
	    case <_cor9,_cor8,_cor7> of
	      %% Line 409
	      <'error',Reason,_cor15> when 'true' ->
		  %% Line 410
		  {'error',Reason}
	      ( <_cor9,_cor8,_cor7> when 'true' ->
		    primop 'raise'
			(_cor7, _cor8)
		-| ['compiler_generated'] )
	    end
'call_port'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Command>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(Port)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (Command)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 414
	      try
		  call 'erlang':'port_command'
		      (Port, Command)
	      of <_cor4> ->
		  case _cor4 of
		    %% Line 415
		    <'true'> when 'true' ->
			%% Line 416
			apply 'get_response'/1
			    (Port)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 418
		    <'error','badarg',_cor16> when 'true' ->
			%% Line 419
			{'error','einval'}
		    %% Line 420
		    <'error',Reason,_cor17> when 'true' ->
			%% Line 421
			{'error',Reason}
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  %% Line 423
	  <Port,Command> when 'true' ->
	      %% Line 424
	      try
		  call 'erlang':'iolist_to_binary'
		      (Command)
	      of <_cor9> ->
		  %% Line 426
		  apply 'call_port'/2
		      (Port, _cor9)
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 428
		    <'error',Reason,_cor18> when 'true' ->
			%% Line 429
			{'error',Reason}
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	end
'get_response'/1 =
    %% Line 432
    fun (_cor0) ->
	%% Line 433
	receive
	  %% Line 434
	  <{_cor2,{'data',[Response|Rest]}}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      %% Line 435
	      apply 'translate_response'/2
		  (Response, Rest)
	  %% Line 436
	  <{'EXIT',_cor3,_X_Reason}>
	      when call 'erlang':'=:='
		    (_cor3,
		     _cor0) ->
	      %% Line 437
	      {'error','port_died'}
	after 'infinity' ->
	  'true'
'll_close'/1 =
    %% Line 440
    fun (_cor0) ->
	do  %% Line 441
	    try
		call 'erlang':'port_close'
		    (_cor0)
	    of <_cor1> ->
		_cor1
	    catch <_cor4,_cor3,_cor2> ->
		case <_cor4,_cor3,_cor2> of
		  <'error',_cor6,_cor7> when 'true' ->
		      'ok'
		  ( <_cor4,_cor3,_cor2> when 'true' ->
			primop 'raise'
			    (_cor2, _cor3)
		    -| ['compiler_generated'] )
		end
	    %% Line 442
	    receive
	      %% Line 443
	      <{'EXIT',_cor8,_cor9}>
		  when call 'erlang':'=:='
			(_cor8,
			 _cor0) ->
		  %% Line 444
		  'ok'
	    after %% Line 445
		  0 ->
	      %% Line 446
	      'ok'
'mode_list'/1 =
    %% Line 452
    fun (_cor0) ->
	case _cor0 of
	  <'read'> when 'true' ->
	      %% Line 453
	      ['read']
	  %% Line 454
	  <'write'> when 'true' ->
	      %% Line 455
	      ['write']
	  %% Line 456
	  <'read_write'> when 'true' ->
	      %% Line 457
	      ['read'|['write']]
	  %% Line 458
	  <{'binary',Mode}>
	      when call 'erlang':'is_atom'
		    (Mode) ->
	      let <_cor1> =
		  %% Line 459
		  apply 'mode_list'/1
		      (Mode)
	      in  %% Line 459
		  ['binary'|_cor1]
	  %% Line 460
	  <{'character',Mode}>
	      when call 'erlang':'is_atom'
		    (Mode) ->
	      %% Line 461
	      apply 'mode_list'/1
		  (Mode)
	  %% Line 462
	  <_cor3> when 'true' ->
	      %% Line 463
	      {'error','badarg'}
	end
'open_mode'/1 =
    %% Line 471
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 472
	      case apply 'open_mode'/2
		       (List, {0,[]}) of
		%% Line 473
		<{Mode,Opts}>
		    when %% Line 475
		      try
			  let <_cor2> =
			      call 'erlang':'band'
				  (Mode, 3)
			  in  call 'erlang':'=:='
				  (_cor2, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor3> =
			%% Line 476
			call 'erlang':'bor'
			    (Mode, 1)
		    in  %% Line 476
			{_cor3,Opts}
		%% Line 477
		<Other> when 'true' ->
		    %% Line 478
		    Other
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'open_mode',1}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/2 =
    %% Line 481
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['ram'|Rest],{Mode,Opts}> when 'true' ->
	      %% Line 482
	      apply 'open_mode'/2
		  (Rest, {Mode,Opts})
	  %% Line 483
	  <['read'|Rest],{Mode,Opts}> when 'true' ->
	      let <_cor2> =
		  %% Line 484
		  call 'erlang':'bor'
		      (Mode, 1)
	      in  %% Line 484
		  apply 'open_mode'/2
		      (Rest, {_cor2,Opts})
	  %% Line 485
	  <['write'|Rest],{Mode,Opts}> when 'true' ->
	      let <_cor3> =
		  %% Line 486
		  call 'erlang':'bor'
		      (Mode, 2)
	      in  %% Line 486
		  apply 'open_mode'/2
		      (Rest, {_cor3,Opts})
	  %% Line 487
	  <['binary'|Rest],{Mode,Opts}> when 'true' ->
	      %% Line 488
	      apply 'open_mode'/2
		  (Rest, {Mode,['binary'|Opts]})
	  %% Line 489
	  <[],{Mode,Opts}> when 'true' ->
	      %% Line 490
	      {Mode,Opts}
	  %% Line 491
	  <_cor6,_cor7> when 'true' ->
	      %% Line 492
	      {'error','badarg'}
	end
'lseek_position'/1 =
    %% Line 500
    fun (_cor0) ->
	case _cor0 of
	  <Pos>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 501
	      apply 'lseek_position'/1
		  ({'bof',Pos})
	  %% Line 502
	  <'bof'> when 'true' ->
	      %% Line 503
	      apply 'lseek_position'/1
		  ({'bof',0})
	  %% Line 504
	  <'cur'> when 'true' ->
	      %% Line 505
	      apply 'lseek_position'/1
		  ({'cur',0})
	  %% Line 506
	  <'eof'> when 'true' ->
	      %% Line 507
	      apply 'lseek_position'/1
		  ({'eof',0})
	  %% Line 508
	  <{'bof',Offset}>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 509
	      {'ok',Offset,0}
	  %% Line 510
	  <{'cur',Offset}>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 511
	      {'ok',Offset,1}
	  %% Line 512
	  <{'eof',Offset}>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 513
	      {'ok',Offset,2}
	  %% Line 514
	  <_cor2> when 'true' ->
	      %% Line 515
	      {'error','badarg'}
	end
'translate_response'/2 =
    %% Line 519
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,[]> when 'true' ->
	      %% Line 520
	      'ok'
	  %% Line 521
	  <0,Data> when 'true' ->
	      %% Line 522
	      {'ok',Data}
	  %% Line 523
	  <1,List>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor2> =
		  %% Line 524
		  call 'erlang':'list_to_atom'
		      (List)
	      in  %% Line 524
		  {'error',_cor2}
	  %% Line 525
	  <3,[X1|[X2|[X3|[X4|[]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 526
		  apply 'i32'/4
		      (X1, X2, X3, X4)
	      in  %% Line 526
		  {'ok',_cor3}
	  %% Line 527
	  <2,[X1|[X2|[X3|[X4|Data]]]]> when 'true' ->
	      let <_cor4> =
		  %% Line 528
		  apply 'i32'/4
		      (X1, X2, X3, X4)
	      in  %% Line 528
		  {'ok',{_cor4,Data}}
	  %% Line 529
	  <X,Data> when 'true' ->
	      %% Line 530
	      {'error',{'bad_response_from_port',X,Data}}
	end
'i32'/4 =
    %% Line 532
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 533
	    call 'erlang':'bsl'
		(_cor3, 24)
	in  let <_cor5> =
		%% Line 533
		call 'erlang':'bsl'
		    (_cor2, 16)
	    in  let <_cor7> =
		    %% Line 533
		    call 'erlang':'bor'
			(_cor6, _cor5)
		in  let <_cor4> =
			%% Line 533
			call 'erlang':'bsl'
			    (_cor1, 8)
		    in  let <_cor8> =
			    %% Line 533
			    call 'erlang':'bor'
				(_cor7, _cor4)
			in  %% Line 533
			    call 'erlang':'bor'
				(_cor8, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ram_file')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ram_file', _cor0)
end