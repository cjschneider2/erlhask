module 'code' ['add_path'/1,
	       'add_patha'/1,
	       'add_paths'/1,
	       'add_pathsa'/1,
	       'add_pathsz'/1,
	       'add_pathz'/1,
	       'all_loaded'/0,
	       'clash'/0,
	       'compiler_dir'/0,
	       'del_path'/1,
	       'delete'/1,
	       'ensure_loaded'/1,
	       'get_chunk'/2,
	       'get_mode'/0,
	       'get_object_code'/1,
	       'get_path'/0,
	       'is_loaded'/1,
	       'is_module_native'/1,
	       'is_sticky'/1,
	       'lib_dir'/0,
	       'lib_dir'/1,
	       'lib_dir'/2,
	       'load_abs'/1,
	       'load_abs'/2,
	       'load_binary'/3,
	       'load_file'/1,
	       'load_native_partial'/2,
	       'load_native_sticky'/3,
	       'make_stub_module'/3,
	       'module_info'/0,
	       'module_info'/1,
	       'module_md5'/1,
	       'objfile_extension'/0,
	       'priv_dir'/1,
	       'purge'/1,
	       'rehash'/0,
	       'replace_path'/2,
	       'root_dir'/0,
	       'set_path'/1,
	       'set_primary_archive'/4,
	       'soft_purge'/1,
	       'start_link'/0,
	       'start_link'/1,
	       'stick_dir'/1,
	       'stick_mod'/1,
	       'stop'/0,
	       'unstick_dir'/1,
	       'unstick_mod'/1,
	       'where_is_file'/1,
	       'where_is_file'/2,
	       'which'/1]
    attributes [%% Line 70
		'export_type' =
		    %% Line 70
		    [{'load_error_rsn',0}|[{'load_ret',0}]],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'load_error_rsn',{'type',78,'union',[{'atom',78,'badfile'}|[{'atom',79,'native_code'}|[{'atom',80,'nofile'}|[{'atom',81,'not_purged'}|[{'atom',82,'on_load'}|[{'atom',83,'sticky_directory'}]]]]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'load_ret',{'type',84,'union',[{'type',84,'tuple',[{'atom',84,'error'}|[{'ann_type',84,[{'var',84,'What'}|[{'type',84,'load_error_rsn',[]}]]}]]}|[{'type',85,'tuple',[{'atom',85,'module'}|[{'ann_type',85,[{'var',85,'Module'}|[{'type',85,'module',[]}]]}]]}]]},[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'loaded_ret_atoms',{'type',86,'union',[{'atom',86,'cover_compiled'}|[{'atom',86,'preloaded'}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'loaded_filename',{'type',87,'union',[{'paren_type',87,[{'ann_type',87,[{'var',87,'Filename'}|[{'remote_type',87,[{'atom',87,'file'}|[{'atom',87,'filename'}|[[]]]]}]]}]}|[{'type',87,'loaded_ret_atoms',[]}]]},[]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'get_chunk',2},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'Bin'}|[{'var',93,'Chunk'}]]}|[{'type',94,'union',[{'type',94,'binary',[]}|[{'atom',94,'undefined'}]]}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Bin'}|[{'type',95,'binary',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Chunk'}|[{'type',96,'string',[]}]]]]}]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'is_module_native',1},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Module'}]}|[{'type',101,'union',[{'atom',101,'true'}|[{'atom',101,'false'}|[{'atom',101,'undefined'}]]]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Module'}|[{'type',102,'module',[]}]]]]}]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'make_stub_module',3},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'Module'}|[{'var',107,'Beam'}|[{'var',107,'Info'}]]]}|[{'var',107,'Module'}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Module'}|[{'type',108,'module',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Beam'}|[{'type',109,'binary',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Info'}|[{'type',110,'tuple',[{'type',110,'list',[]}|[{'type',110,'list',[]}]]}]]]]}]]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'module_md5',1},[{'type',115,'fun',[{'type',115,'product',[{'type',115,'binary',[]}]}|[{'type',115,'union',[{'type',115,'binary',[]}|[{'atom',115,'undefined'}]]}]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'objfile_extension',0},[{'type',126,'fun',[{'type',126,'product',[]}|[{'type',126,'nonempty_string',[]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'load_file',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Module'}]}|[{'type',130,'load_ret',[]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Module'}|[{'type',131,'module',[]}]]]]}]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'ensure_loaded',1},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Module'}]}|[{'type',135,'union',[{'type',135,'tuple',[{'atom',135,'module'}|[{'var',135,'Module'}]]}|[{'type',135,'tuple',[{'atom',135,'error'}|[{'var',135,'What'}]]}]]}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Module'}|[{'type',136,'module',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'What'}|[{'type',137,'union',[{'atom',137,'embedded'}|[{'atom',137,'badfile'}|[{'atom',137,'native_code'}|[{'atom',137,'nofile'}|[{'atom',137,'on_load'}]]]]]}]]]]}]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'load_abs',1},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'Filename'}]}|[{'type',142,'load_ret',[]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Filename'}|[{'remote_type',143,[{'atom',143,'file'}|[{'atom',143,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'load_abs',2},[{'type',147,'fun',[{'type',147,'product',[{'ann_type',147,[{'var',147,'Filename'}|[{'type',147,'loaded_filename',[]}]]}|[{'ann_type',147,[{'var',147,'Module'}|[{'type',147,'module',[]}]]}]]}|[{'type',147,'load_ret',[]}]]}]}],
		%% Line 152
		'spec' =
		    %% Line 152
		    [{{'load_binary',3},[{'type',152,'bounded_fun',[{'type',152,'fun',[{'type',152,'product',[{'var',152,'Module'}|[{'var',152,'Filename'}|[{'var',152,'Binary'}]]]}|[{'type',153,'union',[{'type',153,'tuple',[{'atom',153,'module'}|[{'var',153,'Module'}]]}|[{'type',153,'tuple',[{'atom',153,'error'}|[{'var',153,'What'}]]}]]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Module'}|[{'type',154,'module',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Filename'}|[{'type',155,'loaded_filename',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Binary'}|[{'type',156,'binary',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'What'}|[{'type',157,'union',[{'atom',157,'badarg'}|[{'type',157,'load_error_rsn',[]}]]}]]]]}]]]]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'load_native_partial',2},[{'type',162,'fun',[{'type',162,'product',[{'ann_type',162,[{'var',162,'Module'}|[{'type',162,'module',[]}]]}|[{'ann_type',162,[{'var',162,'Binary'}|[{'type',162,'binary',[]}]]}]]}|[{'type',162,'load_ret',[]}]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'load_native_sticky',3},[{'type',166,'fun',[{'type',166,'product',[{'ann_type',166,[{'var',166,'Module'}|[{'type',166,'module',[]}]]}|[{'ann_type',166,[{'var',166,'Binary'}|[{'type',166,'binary',[]}]]}|[{'ann_type',166,[{'var',166,'WholeModule'}|[{'type',166,'union',[{'atom',166,'false'}|[{'type',166,'binary',[]}]]}]]}]]]}|[{'type',166,'load_ret',[]}]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'delete',1},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Module'}]}|[{'type',172,'boolean',[]}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Module'}|[{'type',173,'module',[]}]]]]}]]]}]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'purge',1},[{'type',176,'bounded_fun',[{'type',176,'fun',[{'type',176,'product',[{'var',176,'Module'}]}|[{'type',176,'boolean',[]}]]}|[[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Module'}|[{'type',177,'module',[]}]]]]}]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'soft_purge',1},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'Module'}]}|[{'type',180,'boolean',[]}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Module'}|[{'type',181,'module',[]}]]]]}]]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'is_loaded',1},[{'type',184,'bounded_fun',[{'type',184,'fun',[{'type',184,'product',[{'var',184,'Module'}]}|[{'type',184,'union',[{'type',184,'tuple',[{'atom',184,'file'}|[{'var',184,'Loaded'}]]}|[{'atom',184,'false'}]]}]]}|[[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Module'}|[{'type',185,'module',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Loaded'}|[{'type',186,'loaded_filename',[]}]]]]}]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'get_object_code',1},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Module'}]}|[{'type',189,'union',[{'type',189,'tuple',[{'var',189,'Module'}|[{'var',189,'Binary'}|[{'var',189,'Filename'}]]]}|[{'atom',189,'error'}]]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Module'}|[{'type',190,'module',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Binary'}|[{'type',191,'binary',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Filename'}|[{'remote_type',192,[{'atom',192,'file'}|[{'atom',192,'filename'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'all_loaded',0},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[]}|[{'type',195,'list',[{'type',195,'tuple',[{'var',195,'Module'}|[{'var',195,'Loaded'}]]}]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Module'}|[{'type',196,'module',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Loaded'}|[{'type',197,'loaded_filename',[]}]]]]}]]]]}]}],
		%% Line 200
		'spec' =
		    %% Line 200
		    [{{'stop',0},[{'type',200,'fun',[{'type',200,'product',[]}|[{'type',200,'no_return',[]}]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'root_dir',0},[{'type',203,'fun',[{'type',203,'product',[]}|[{'remote_type',203,[{'atom',203,'file'}|[{'atom',203,'filename'}|[[]]]]}]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'lib_dir',0},[{'type',206,'fun',[{'type',206,'product',[]}|[{'remote_type',206,[{'atom',206,'file'}|[{'atom',206,'filename'}|[[]]]]}]]}]}],
		%% Line 210
		'spec' =
		    %% Line 210
		    [{{'lib_dir',1},[{'type',210,'bounded_fun',[{'type',210,'fun',[{'type',210,'product',[{'var',210,'Name'}]}|[{'type',210,'union',[{'remote_type',210,[{'atom',210,'file'}|[{'atom',210,'filename'}|[[]]]]}|[{'type',210,'tuple',[{'atom',210,'error'}|[{'atom',210,'bad_name'}]]}]]}]]}|[[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Name'}|[{'type',211,'atom',[]}]]]]}]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'lib_dir',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Name'}|[{'var',214,'SubDir'}]]}|[{'type',214,'union',[{'remote_type',214,[{'atom',214,'file'}|[{'atom',214,'filename'}|[[]]]]}|[{'type',214,'tuple',[{'atom',214,'error'}|[{'atom',214,'bad_name'}]]}]]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Name'}|[{'type',215,'atom',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'SubDir'}|[{'type',216,'atom',[]}]]]]}]]]]}]}],
		%% Line 219
		'spec' =
		    %% Line 219
		    [{{'compiler_dir',0},[{'type',219,'fun',[{'type',219,'product',[]}|[{'remote_type',219,[{'atom',219,'file'}|[{'atom',219,'filename'}|[[]]]]}]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'priv_dir',1},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Name'}]}|[{'type',223,'union',[{'remote_type',223,[{'atom',223,'file'}|[{'atom',223,'filename'}|[[]]]]}|[{'type',223,'tuple',[{'atom',223,'error'}|[{'atom',223,'bad_name'}]]}]]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Name'}|[{'type',224,'atom',[]}]]]]}]]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'stick_dir',1},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'Dir'}]}|[{'type',227,'union',[{'atom',227,'ok'}|[{'atom',227,'error'}]]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Dir'}|[{'remote_type',228,[{'atom',228,'file'}|[{'atom',228,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'unstick_dir',1},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Dir'}]}|[{'type',231,'union',[{'atom',231,'ok'}|[{'atom',231,'error'}]]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Dir'}|[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 235
		'spec' =
		    %% Line 235
		    [{{'stick_mod',1},[{'type',235,'fun',[{'type',235,'product',[{'ann_type',235,[{'var',235,'Module'}|[{'type',235,'module',[]}]]}]}|[{'atom',235,'true'}]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'unstick_mod',1},[{'type',238,'fun',[{'type',238,'product',[{'ann_type',238,[{'var',238,'Module'}|[{'type',238,'module',[]}]]}]}|[{'atom',238,'true'}]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'is_sticky',1},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'Module'}]}|[{'type',241,'boolean',[]}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Module'}|[{'type',242,'module',[]}]]]]}]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'set_path',1},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'Path'}]}|[{'type',245,'union',[{'atom',245,'true'}|[{'type',245,'tuple',[{'atom',245,'error'}|[{'var',245,'What'}]]}]]}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Path'}|[{'type',246,'list',[{'ann_type',246,[{'var',246,'Dir'}|[{'remote_type',246,[{'atom',246,'file'}|[{'atom',246,'filename'}|[[]]]]}]]}]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'What'}|[{'type',247,'union',[{'atom',247,'bad_directory'}|[{'atom',247,'bad_path'}]]}]]]]}]]]]}]}],
		%% Line 250
		'spec' =
		    %% Line 250
		    [{{'get_path',0},[{'type',250,'bounded_fun',[{'type',250,'fun',[{'type',250,'product',[]}|[{'var',250,'Path'}]]}|[[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Path'}|[{'type',251,'list',[{'ann_type',251,[{'var',251,'Dir'}|[{'remote_type',251,[{'atom',251,'file'}|[{'atom',251,'filename'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 254
		'type' =
		    %% Line 254
		    [{'add_path_ret',{'type',254,'union',[{'atom',254,'true'}|[{'type',254,'tuple',[{'atom',254,'error'}|[{'atom',254,'bad_directory'}]]}]]},[]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'add_path',1},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'Dir'}]}|[{'type',255,'add_path_ret',[]}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Dir'}|[{'remote_type',256,[{'atom',256,'file'}|[{'atom',256,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'add_pathz',1},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'Dir'}]}|[{'type',259,'add_path_ret',[]}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Dir'}|[{'remote_type',260,[{'atom',260,'file'}|[{'atom',260,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'add_patha',1},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Dir'}]}|[{'type',263,'add_path_ret',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Dir'}|[{'remote_type',264,[{'atom',264,'file'}|[{'atom',264,'filename'}|[[]]]]}]]]]}]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'add_paths',1},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'Dirs'}]}|[{'atom',267,'ok'}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Dirs'}|[{'type',268,'list',[{'ann_type',268,[{'var',268,'Dir'}|[{'remote_type',268,[{'atom',268,'file'}|[{'atom',268,'filename'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'add_pathsz',1},[{'type',271,'bounded_fun',[{'type',271,'fun',[{'type',271,'product',[{'var',271,'Dirs'}]}|[{'atom',271,'ok'}]]}|[[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Dirs'}|[{'type',272,'list',[{'ann_type',272,[{'var',272,'Dir'}|[{'remote_type',272,[{'atom',272,'file'}|[{'atom',272,'filename'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'add_pathsa',1},[{'type',275,'bounded_fun',[{'type',275,'fun',[{'type',275,'product',[{'var',275,'Dirs'}]}|[{'atom',275,'ok'}]]}|[[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Dirs'}|[{'type',276,'list',[{'ann_type',276,[{'var',276,'Dir'}|[{'remote_type',276,[{'atom',276,'file'}|[{'atom',276,'filename'}|[[]]]]}]]}]}]]]]}]]]}]}],
		%% Line 279
		'spec' =
		    %% Line 279
		    [{{'del_path',1},[{'type',279,'bounded_fun',[{'type',279,'fun',[{'type',279,'product',[{'var',279,'NameOrDir'}]}|[{'type',279,'union',[{'type',279,'boolean',[]}|[{'type',279,'tuple',[{'atom',279,'error'}|[{'var',279,'What'}]]}]]}]]}|[[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'NameOrDir'}|[{'type',280,'union',[{'var',280,'Name'}|[{'var',280,'Dir'}]]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Name'}|[{'type',281,'atom',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Dir'}|[{'remote_type',282,[{'atom',282,'file'}|[{'atom',282,'filename'}|[[]]]]}]]]]}|[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'What'}|[{'atom',283,'bad_name'}]]]]}]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'replace_path',2},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'Name'}|[{'var',286,'Dir'}]]}|[{'type',286,'union',[{'atom',286,'true'}|[{'type',286,'tuple',[{'atom',286,'error'}|[{'var',286,'What'}]]}]]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Name'}|[{'type',287,'atom',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'Dir'}|[{'remote_type',288,[{'atom',288,'file'}|[{'atom',288,'filename'}|[[]]]]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'What'}|[{'type',289,'union',[{'atom',289,'bad_directory'}|[{'atom',289,'bad_name'}|[{'type',289,'tuple',[{'atom',289,'badarg'}|[{'var',289,'_'}]]}]]]}]]]]}]]]]]}]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'rehash',0},[{'type',294,'fun',[{'type',294,'product',[]}|[{'atom',294,'ok'}]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'get_mode',0},[{'type',297,'fun',[{'type',297,'product',[]}|[{'type',297,'union',[{'atom',297,'embedded'}|[{'atom',297,'interactive'}]]}]]}]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'start_link',0},[{'type',305,'fun',[{'type',305,'product',[]}|[{'type',305,'union',[{'type',305,'tuple',[{'atom',305,'ok'}|[{'type',305,'pid',[]}]]}|[{'type',305,'tuple',[{'atom',305,'error'}|[{'atom',305,'crash'}]]}]]}]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'start_link',1},[{'type',309,'fun',[{'type',309,'product',[{'ann_type',309,[{'var',309,'Flags'}|[{'type',309,'list',[{'type',309,'atom',[]}]}]]}]}|[{'type',309,'union',[{'type',309,'tuple',[{'atom',309,'ok'}|[{'type',309,'pid',[]}]]}|[{'type',309,'tuple',[{'atom',309,'error'}|[{'atom',309,'crash'}]]}]]}]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'which',1},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'Module'}]}|[{'var',407,'Which'}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Module'}|[{'type',408,'module',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Which'}|[{'type',409,'union',[{'remote_type',409,[{'atom',409,'file'}|[{'atom',409,'filename'}|[[]]]]}|[{'type',409,'loaded_ret_atoms',[]}|[{'atom',409,'non_existing'}]]]}]]]]}]]]]}]}],
		%% Line 424
		'spec' =
		    %% Line 424
		    [{{'which',3},[{'type',424,'fun',[{'type',424,'product',[{'remote_type',424,[{'atom',424,'file'}|[{'atom',424,'filename'}|[[]]]]}|[{'remote_type',424,[{'atom',424,'file'}|[{'atom',424,'filename'}|[[]]]]}|[{'type',424,'list',[{'remote_type',424,[{'atom',424,'file'}|[{'atom',424,'filename'}|[[]]]]}]}]]]}|[{'type',425,'union',[{'atom',425,'non_existing'}|[{'remote_type',425,[{'atom',425,'file'}|[{'atom',425,'filename'}|[[]]]]}]]}]]}]}],
		%% Line 449
		'spec' =
		    %% Line 449
		    [{{'where_is_file',1},[{'type',449,'bounded_fun',[{'type',449,'fun',[{'type',449,'product',[{'var',449,'Filename'}]}|[{'type',449,'union',[{'atom',449,'non_existing'}|[{'var',449,'Absname'}]]}]]}|[[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'Filename'}|[{'remote_type',450,[{'atom',450,'file'}|[{'atom',450,'filename'}|[[]]]]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Absname'}|[{'remote_type',451,[{'atom',451,'file'}|[{'atom',451,'filename'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'where_is_file',2},[{'type',461,'fun',[{'type',461,'product',[{'ann_type',461,[{'var',461,'Path'}|[{'remote_type',461,[{'atom',461,'file'}|[{'atom',461,'filename'}|[[]]]]}]]}|[{'ann_type',461,[{'var',461,'Filename'}|[{'remote_type',461,[{'atom',461,'file'}|[{'atom',461,'filename'}|[[]]]]}]]}]]}|[{'type',462,'union',[{'remote_type',462,[{'atom',462,'file'}|[{'atom',462,'filename'}|[[]]]]}|[{'atom',462,'non_existing'}]]}]]}]}],
		%% Line 478
		'spec' =
		    %% Line 478
		    [{{'set_primary_archive',4},[{'type',478,'fun',[{'type',478,'product',[{'ann_type',478,[{'var',478,'ArchiveFile'}|[{'remote_type',478,[{'atom',478,'file'}|[{'atom',478,'filename'}|[[]]]]}]]}|[{'ann_type',479,[{'var',479,'ArchiveBin'}|[{'type',479,'binary',[]}]]}|[{'ann_type',480,[{'var',480,'FileInfo'}|[{'remote_type',480,[{'atom',480,'file'}|[{'atom',480,'file_info'}|[[]]]]}]]}|[{'ann_type',481,[{'var',481,'ParserFun'}|[{'type',481,'fun',[]}]]}]]]]}|[{'type',482,'union',[{'atom',482,'ok'}|[{'type',482,'tuple',[{'atom',482,'error'}|[{'type',482,'atom',[]}]]}]]}]]}]}],
		%% Line 502
		'spec' =
		    %% Line 502
		    [{{'clash',0},[{'type',502,'fun',[{'type',502,'product',[]}|[{'atom',502,'ok'}]]}]}],
		%% Line 553
		'spec' =
		    %% Line 553
		    [{{'load_native_code_for_all_loaded',0},[{'type',553,'fun',[{'type',553,'product',[]}|[{'atom',553,'ok'}]]}]}]]
'get_chunk'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	%% Line 99
	call 'erlang':'nif_error'
	    ('undef')
'is_module_native'/1 =
    %% Line 104
    fun (_cor0) ->
	%% Line 105
	call 'erlang':'nif_error'
	    ('undef')
'make_stub_module'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	%% Line 113
	call 'erlang':'nif_error'
	    ('undef')
'module_md5'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	call 'erlang':'nif_error'
	    ('undef')
'objfile_extension'/0 =
    %% Line 127
    fun () ->
	%% Line 128
	call 'init':'objfile_extension'
	    ()
'load_file'/1 =
    %% Line 132
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 133
	      apply 'call'/1
		  ({'load_file',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'load_file',1}}] )
	    -| ['compiler_generated'] )
	end
'ensure_loaded'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 139
	      apply 'call'/1
		  ({'ensure_loaded',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ensure_loaded',1}}] )
	    -| ['compiler_generated'] )
	end
'load_abs'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      apply 'call'/1
		  ({'load_abs',File,[]})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'load_abs',1}}] )
	    -| ['compiler_generated'] )
	end
'load_abs'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,M>
	      when try
		    ( let <_cor4> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_list'
					    (File)
					-| ['compiler_generated'] ) ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( call 'erlang':'is_atom'
					  (File)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor6> =
			      ( call 'erlang':'is_atom'
				    (M)
				-| ['compiler_generated'] )
			  in  ( call 'erlang':'and'
				    (( _cor4
				       -| ['compiler_generated'] ), _cor6)
				-| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 149
	      apply 'call'/1
		  ({'load_abs',File,M})
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'load_abs',2}}] )
	    -| ['compiler_generated'] )
	end
'load_binary'/3 =
    %% Line 158
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,File,Bin>
	      when %% Line 159
		try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  ( let <_cor6> =
			      ( case <> of
				  ( <>
					when ( call 'erlang':'is_list'
						(File)
					    -| ['compiler_generated'] ) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( call 'erlang':'is_atom'
					      (File)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  let <_cor8> =
				  ( call 'erlang':'is_binary'
					(Bin)
				    -| ['compiler_generated'] )
			      in  let <_cor9> =
				      ( call 'erlang':'and'
					    (( _cor6
					       -| ['compiler_generated'] ), _cor8)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'and'
					    (_cor3, _cor9)
					-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 160
	      apply 'call'/1
		  ({'load_binary',Mod,File,Bin})
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'load_binary',3}}] )
	    -| ['compiler_generated'] )
	end
'load_native_partial'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Bin>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (Bin)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 164
	      apply 'call'/1
		  ({'load_native_partial',Mod,Bin})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'load_native_partial',2}}] )
	    -| ['compiler_generated'] )
	end
'load_native_sticky'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Bin,WholeModule>
	      when %% Line 168
		try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor4> =
			    call 'erlang':'is_binary'
				(Bin)
			in  %% Line 169
			    ( let <_cor7> =
				  ( case <> of
				      ( <>
					    when ( call 'erlang':'is_binary'
						    (WholeModule)
						-| ['compiler_generated'] ) ->
					    'true'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    ( call 'erlang':'=:='
						  (WholeModule, 'false')
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  let <_cor9> =
				      ( call 'erlang':'and'
					    (_cor4, ( _cor7
						      -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'and'
					    (_cor3, _cor9)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 170
	      apply 'call'/1
		  ({'load_native_sticky',Mod,Bin,WholeModule})
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'load_native_sticky',3}}] )
	    -| ['compiler_generated'] )
	end
'delete'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'delete',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'delete',1}}] )
	    -| ['compiler_generated'] )
	end
'purge'/1 =
    %% Line 178
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'purge',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'purge',1}}] )
	    -| ['compiler_generated'] )
	end
'soft_purge'/1 =
    %% Line 182
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'soft_purge',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'soft_purge',1}}] )
	    -| ['compiler_generated'] )
	end
'is_loaded'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'is_loaded',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_loaded',1}}] )
	    -| ['compiler_generated'] )
	end
'get_object_code'/1 =
    %% Line 193
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'get_object_code',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_object_code',1}}] )
	    -| ['compiler_generated'] )
	end
'all_loaded'/0 =
    %% Line 198
    fun () ->
	apply 'call'/1
	    ('all_loaded')
'stop'/0 =
    %% Line 201
    fun () ->
	apply 'call'/1
	    ('stop')
'root_dir'/0 =
    %% Line 204
    fun () ->
	apply 'call'/1
	    ({'dir','root_dir'})
'lib_dir'/0 =
    %% Line 207
    fun () ->
	apply 'call'/1
	    ({'dir','lib_dir'})
'lib_dir'/1 =
    %% Line 212
    fun (_cor0) ->
	case _cor0 of
	  <App>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      apply 'call'/1
		  ({'dir',{'lib_dir',App}})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'lib_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'lib_dir'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <App,SubDir>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(App)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (SubDir)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'call'/1
		  ({'dir',{'lib_dir',App,SubDir}})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'lib_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'compiler_dir'/0 =
    %% Line 220
    fun () ->
	apply 'call'/1
	    ({'dir','compiler_dir'})
'priv_dir'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <App>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      apply 'call'/1
		  ({'dir',{'priv_dir',App}})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'priv_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'stick_dir'/1 =
    %% Line 229
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'stick_dir',Dir})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'stick_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'unstick_dir'/1 =
    %% Line 233
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'unstick_dir',Dir})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'unstick_dir',1}}] )
	    -| ['compiler_generated'] )
	end
'stick_mod'/1 =
    %% Line 236
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'stick_mod',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'stick_mod',1}}] )
	    -| ['compiler_generated'] )
	end
'unstick_mod'/1 =
    %% Line 239
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'unstick_mod',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'unstick_mod',1}}] )
	    -| ['compiler_generated'] )
	end
'is_sticky'/1 =
    %% Line 243
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      apply 'call'/1
		  ({'is_sticky',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_sticky',1}}] )
	    -| ['compiler_generated'] )
	end
'set_path'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <PathList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'set_path',PathList})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'set_path',1}}] )
	    -| ['compiler_generated'] )
	end
'get_path'/0 =
    %% Line 252
    fun () ->
	apply 'call'/1
	    ('get_path')
'add_path'/1 =
    %% Line 257
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_path','last',Dir})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_path',1}}] )
	    -| ['compiler_generated'] )
	end
'add_pathz'/1 =
    %% Line 261
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_path','last',Dir})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_pathz',1}}] )
	    -| ['compiler_generated'] )
	end
'add_patha'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <Dir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_path','first',Dir})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_patha',1}}] )
	    -| ['compiler_generated'] )
	end
'add_paths'/1 =
    %% Line 269
    fun (_cor0) ->
	case _cor0 of
	  <Dirs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_paths','last',Dirs})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_paths',1}}] )
	    -| ['compiler_generated'] )
	end
'add_pathsz'/1 =
    %% Line 273
    fun (_cor0) ->
	case _cor0 of
	  <Dirs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_paths','last',Dirs})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_pathsz',1}}] )
	    -| ['compiler_generated'] )
	end
'add_pathsa'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <Dirs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'call'/1
		  ({'add_paths','first',Dirs})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'add_pathsa',1}}] )
	    -| ['compiler_generated'] )
	end
'del_path'/1 =
    %% Line 284
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (_cor0)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      apply 'call'/1
		  ({'del_path',Name})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'del_path',1}}] )
	    -| ['compiler_generated'] )
	end
'replace_path'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Dir>
	      when try
		    ( let <_cor4> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_atom'
					    (Name)
					-| ['compiler_generated'] ) ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( call 'erlang':'is_list'
					  (Name)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 291
			  ( let <_cor8> =
				( case <> of
				    ( <>
					  when ( call 'erlang':'is_atom'
						  (Dir)
					      -| ['compiler_generated'] ) ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  ( call 'erlang':'is_list'
						(Dir)
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  ( call 'erlang':'and'
				      (( _cor4
					 -| ['compiler_generated'] ), ( _cor8
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 292
	      apply 'call'/1
		  ({'replace_path',Name,Dir})
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'replace_path',2}}] )
	    -| ['compiler_generated'] )
	end
'rehash'/0 =
    %% Line 295
    fun () ->
	apply 'call'/1
	    ('rehash')
'get_mode'/0 =
    %% Line 298
    fun () ->
	apply 'call'/1
	    ('get_mode')
'call'/1 =
    %% Line 302
    fun (_cor0) ->
	%% Line 303
	call 'code_server':'call'
	    ('code_server', _cor0)
'start_link'/0 =
    %% Line 306
    fun () ->
	%% Line 307
	apply 'start_link'/1
	    (['stick'])
'start_link'/1 =
    %% Line 310
    fun (_cor0) ->
	%% Line 311
	apply 'do_start'/1
	    (_cor0)
'do_start'/1 =
    %% Line 323
    fun (_cor0) ->
	do  %% Line 324
	    apply 'load_code_server_prerequisites'/0
		()
	    let <Mode> =
		%% Line 326
		apply 'get_mode'/1
		    (_cor0)
	    in  %% Line 327
		case call 'init':'get_argument'
			 ('root') of
		  %% Line 328
		  <{'ok',[[Root0|[]]|[]]}> when 'true' ->
		      let <Root> =
			  %% Line 329
			  call 'filename':'join'
			      ([Root0|[]])
		      in  %% Line 330
			  case call 'code_server':'start_link'
				   ([Root|[Mode|[]]]) of
			    %% Line 331
			    <Ok2 = {'ok',_X_Pid}> when 'true' ->
				do  %% Line 332
				    case <> of
				      %% Line 333
				      <>
					  when call 'erlang':'=:='
						(Mode,
						 'interactive') ->
					  %% Line 334
					  case call 'lists':'member'
						   ('stick', _cor0) of
					    %% Line 335
					    <'true'> when 'true' ->
						apply 'do_stick_dirs'/0
						    ()
					    %% Line 336
					    <_cor7> when 'true' ->
						'ok'
					  end
				      %% Line 338
				      <> when 'true' ->
					  'ok'
				    end
				    do  catch
					    %% Line 342
					    apply 'load_native_code_for_all_loaded'/0
						()
					%% Line 343
					Ok2
			    %% Line 344
			    <Other> when 'true' ->
				%% Line 345
				Other
			  end
		  %% Line 347
		  <Other> when 'true' ->
		      do  %% Line 348
			  call 'error_logger':'error_msg'
			      ([67|[97|[110|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[99|[111|[100|[101|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
			  %% Line 349
			  {'error','crash'}
		end
'load_code_server_prerequisites'/0 =
    %% Line 356
    fun () ->
	do  %% Line 367
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[M|_cor2]> when 'true' ->
				let <_cor5> =
				    ( call M:'module_info'
					  ('module')
				      -| ['result_not_wanted'] )
				in  case _cor5 of
				      <_cor9>
					  when call 'erlang':'=:='
						(_cor5,
						 M) ->
					  apply 'lc$^0'/1
					      (_cor2)
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor4})
					-| ['compiler_generated'] )
				    end
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (['binary'|['ets'|['filename'|['gb_sets'|['gb_trees'|['hipe_unified_loader'|['lists'|['os'|['unicode']]]]]]]]])
	      -| ['list_comprehension'] )
	    %% Line 368
	    'ok'
'do_stick_dirs'/0 =
    %% Line 370
    fun () ->
	do  %% Line 371
	    apply 'do_s'/1
		('compiler')
	    do  %% Line 372
		apply 'do_s'/1
		    ('stdlib')
		%% Line 373
		apply 'do_s'/1
		    ('kernel')
'do_s'/1 =
    %% Line 375
    fun (_cor0) ->
	%% Line 376
	case apply 'lib_dir'/1
		 (_cor0) of
	  %% Line 377
	  <{'error',_cor5}> when 'true' ->
	      %% Line 378
	      'ok'
	  %% Line 379
	  <Dir> when 'true' ->
	      let <_cor1> =
		  %% Line 383
		  ( call 'filename':'append'
			(Dir, [101|[98|[105|[110]]]])
		    -| ['result_not_wanted'] )
	      in  do  %% Line 383
		      apply 'stick_dir'/1
			  (_cor1)
		      %% Line 384
		      'ok'
	end
'get_mode'/1 =
    %% Line 387
    fun (_cor0) ->
	%% Line 388
	case call 'lists':'member'
		 ('embedded', _cor0) of
	  %% Line 389
	  <'true'> when 'true' ->
	      %% Line 390
	      'embedded'
	  %% Line 391
	  <_X_Otherwise> when 'true' ->
	      %% Line 392
	      case call 'init':'get_argument'
		       ('mode') of
		%% Line 393
		<{'ok',[[[101|[109|[98|[101|[100|[100|[101|[100]]]]]]]]]]}> when 'true' ->
		    %% Line 394
		    'embedded'
		%% Line 395
		<{'ok',[[[109|[105|[110|[105|[109|[97|[108]]]]]]]]]}> when 'true' ->
		    %% Line 396
		    'minimal'
		%% Line 397
		<_X_Else> when 'true' ->
		    %% Line 398
		    'interactive'
	      end
	end
'which'/1 =
    %% Line 410
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 411
	      case apply 'is_loaded'/1
		       (Module) of
		%% Line 412
		<'false'> when 'true' ->
		    %% Line 413
		    apply 'which2'/1
			(Module)
		%% Line 414
		<{'file',File}> when 'true' ->
		    %% Line 415
		    File
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'which',1}}] )
	    -| ['compiler_generated'] )
	end
'which2'/1 =
    %% Line 418
    fun (_cor0) ->
	let <Base> =
	    %% Line 419
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor3> =
		%% Line 420
		call 'filename':'basename'
		    (Base)
	    in  let <_cor2> =
		    %% Line 420
		    apply 'objfile_extension'/0
			()
		in  let <File> =
			%% Line 420
			call 'erlang':'++'
			    (_cor3, _cor2)
		    in  let <Path> =
			    %% Line 421
			    apply 'get_path'/0
				()
			in  let <_cor6> =
				%% Line 422
				call 'filename':'dirname'
				    (Base)
			    in  %% Line 422
				apply 'which'/3
				    (File, _cor6, Path)
'which'/3 =
    %% Line 427
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor10,_cor11,[]> when 'true' ->
	      %% Line 428
	      'non_existing'
	  %% Line 429
	  <File,Base,[Directory|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 430
		  case <> of
		    %% Line 431
		    <>
			when call 'erlang':'=:='
			      (Base,
			       [46]) ->
			Directory
		    %% Line 432
		    <> when 'true' ->
			call 'filename':'join'
			    (Directory, Base)
		  end
	      in  %% Line 434
		  case call 'erl_prim_loader':'list_dir'
			   (_cor3) of
		    %% Line 435
		    <{'ok',Files}> when 'true' ->
			%% Line 436
			case call 'lists':'member'
				 (File, Files) of
			  %% Line 437
			  <'true'> when 'true' ->
			      %% Line 438
			      call 'filename':'append'
				  (_cor3, File)
			  %% Line 439
			  <'false'> when 'true' ->
			      %% Line 440
			      apply 'which'/3
				  (File, Base, Tail)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    %% Line 442
		    <_X_Error> when 'true' ->
			%% Line 443
			apply 'which'/3
			    (File, Base, Tail)
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'which',3}}] )
	    -| ['compiler_generated'] )
	end
'where_is_file'/1 =
    %% Line 452
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 453
	      case apply 'call'/1
		       ({'is_cached',File}) of
		%% Line 454
		<'no'> when 'true' ->
		    let <Path> =
			%% Line 455
			apply 'get_path'/0
			    ()
		    in  %% Line 456
			apply 'which'/3
			    (File, [46], Path)
		%% Line 457
		<Dir> when 'true' ->
		    %% Line 458
		    call 'filename':'join'
			(Dir, File)
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'where_is_file',1}}] )
	    -| ['compiler_generated'] )
	end
'where_is_file'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Path,File>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Path)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (File)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <CodePath> =
		  %% Line 465
		  apply 'get_path'/0
		      ()
	      in  %% Line 466
		  case <> of
		    %% Line 467
		    <>
			when call 'erlang':'=:='
			      (Path,
			       CodePath) ->
			%% Line 468
			case apply 'call'/1
				 ({'is_cached',File}) of
			  %% Line 469
			  <'no'> when 'true' ->
			      %% Line 470
			      apply 'which'/3
				  (File, [46], Path)
			  %% Line 471
			  <Dir> when 'true' ->
			      %% Line 472
			      call 'filename':'join'
				  (Dir, File)
			end
		    %% Line 474
		    <> when 'true' ->
			%% Line 475
			apply 'which'/3
			    (File, [46], Path)
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'where_is_file',2}}] )
	    -| ['compiler_generated'] )
	end
'set_primary_archive'/4 =
    %% Line 484
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <ArchiveFile0,ArchiveBin,FileInfo = {'file_info',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},%% Line 485
																		       ParserFun>
	      when let <_cor4> =
		    %% Line 486
		    call 'erlang':'is_list'
			(ArchiveFile0)
		in  let <_cor5> =
			%% Line 486
			call 'erlang':'is_binary'
			    (ArchiveBin)
		    in  %% Line 486
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <ArchiveFile> =
		  %% Line 487
		  call 'filename':'absname'
		      (ArchiveFile0)
	      in  %% Line 488
		  case apply 'call'/1
			   ({'set_primary_archive',ArchiveFile,ArchiveBin,FileInfo,%% Line 489
										   ParserFun}) of
		    %% Line 490
		    <{'ok',[]}> when 'true' ->
			%% Line 491
			'ok'
		    %% Line 492
		    <{'ok',_X_Mode,Ebins}> when 'true' ->
			let <_cor12> =
			    %% Line 494
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[E|_cor8]> when 'true' ->
						let <_cor10> =
						    call 'filename':'join'
							([ArchiveFile|[E|[]]])
						in  let <_cor11> =
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [_cor10|_cor11]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Ebins)
			      -| ['list_comprehension'] )
			in  %% Line 495
			    apply 'add_pathsa'/1
				(_cor12)
		    %% Line 496
		    <Error = {'error',_X_Reason}> when 'true' ->
			%% Line 497
			Error
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'set_primary_archive',4}}] )
	    -| ['compiler_generated'] )
	end
'clash'/0 =
    %% Line 504
    fun () ->
	let <Path> =
	    %% Line 505
	    apply 'get_path'/0
		()
	in  let <_cor1> =
		%% Line 506
		apply 'build'/1
		    (Path)
	    in  let <Struct> =
		    %% Line 506
		    call 'lists':'flatten'
			(_cor1)
		in  let <_cor3> =
			%% Line 507
			apply 'search'/1
			    (Struct)
		    in  let <Len> =
			    %% Line 507
			    call 'erlang':'length'
				(_cor3)
			in  %% Line 508
			    call 'io':'format'
				([42|[42|[32|[70|[111|[117|[110|[100|[32|[126|[119|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104|[101|[115|[32|[105|[110|[32|[99|[111|[100|[101|[32|[112|[97|[116|[104|[115|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Len|[]])
'search'/1 =
    %% Line 512
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 513
	  <[{Dir,File}|Tail]> when 'true' ->
	      %% Line 514
	      case call 'lists':'keyfind'
		       (File, 2, Tail) of
		%% Line 515
		<'false'> when 'true' ->
		    %% Line 516
		    apply 'search'/1
			(Tail)
		%% Line 517
		<{Dir2,_cor6}>
		    when call 'erlang':'=:='
			  (_cor6,
			   File) ->
		    let <_cor1> =
			%% Line 519
			call 'filename':'join'
			    (Dir, File)
		    in  let <_cor2> =
			    %% Line 520
			    call 'filename':'join'
				(Dir2, File)
			in  do  %% Line 518
				call 'io':'format'
				    ([42|[42|[32|[126|[116|[115|[32|[104|[105|[100|[101|[115|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]], %% Line 519
																	     [_cor1|%% Line 520
																		    [_cor2|[]]])
				let <_cor3> =
				    %% Line 521
				    apply 'search'/1
					(Tail)
				in  %% Line 521
				    ['clash'|_cor3]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'search',1}}] )
	    -| ['compiler_generated'] )
	end
'build'/1 =
    %% Line 524
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 525
	  <[Dir|Tail]> when 'true' ->
	      let <_cor2> =
		  %% Line 526
		  apply 'objfile_extension'/0
		      ()
	      in  let <_cor1> =
		      %% Line 527
		      call 'erl_prim_loader':'list_dir'
			  (Dir)
		  in  let <Files> =
			  %% Line 526
			  apply 'filter'/3
			      (_cor2, Dir, _cor1)
		      in  let <_cor4> =
			      %% Line 528
			      apply 'decorate'/2
				  (Files, Dir)
			  in  let <_cor5> =
				  %% Line 528
				  apply 'build'/1
				      (Tail)
			      in  %% Line 528
				  [_cor4|_cor5]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'build',1}}] )
	    -| ['compiler_generated'] )
	end
'decorate'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor5> when 'true' ->
	      []
	  %% Line 531
	  <[File|Tail],Dir> when 'true' ->
	      let <_cor2> =
		  %% Line 532
		  apply 'decorate'/2
		      (Tail, Dir)
	      in  %% Line 532
		  [{Dir,File}|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'decorate',2}}] )
	    -| ['compiler_generated'] )
	end
'filter'/3 =
    %% Line 534
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ext,Dir,'error'> when 'true' ->
	      do  %% Line 535
		  call 'io':'format'
		      ([42|[42|[32|[66|[97|[100|[32|[112|[97|[116|[104|[32|[99|[97|[110|[39|[116|[32|[114|[101|[97|[100|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Dir|[]])
		  %% Line 535
		  []
	  %% Line 536
	  <Ext,_cor7,{'ok',Files}> when 'true' ->
	      let <_cor3> =
		  %% Line 537
		  call 'erlang':'length'
		      (Ext)
	      in  %% Line 537
		  apply 'filter2'/3
		      (Ext, _cor3, Files)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'filter',3}}] )
	    -| ['compiler_generated'] )
	end
'filter2'/3 =
    %% Line 539
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ext,_X_Extlen,[]> when 'true' ->
	      []
	  %% Line 540
	  <Ext,Extlen,[File|Tail]> when 'true' ->
	      %% Line 541
	      case apply 'has_ext'/3
		       (Ext, Extlen, File) of
		%% Line 542
		<'true'> when 'true' ->
		    let <_cor3> =
			apply 'filter2'/3
			    (Ext, Extlen, Tail)
		    in  [File|_cor3]
		%% Line 543
		<'false'> when 'true' ->
		    apply 'filter2'/3
			(Ext, Extlen, Tail)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'filter2',3}}] )
	    -| ['compiler_generated'] )
	end
'has_ext'/3 =
    %% Line 546
    fun (_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 547
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor5> =
		catch
		    let <_cor4> =
			%% Line 548
			call 'erlang':'-'
			    (L, _cor1)
		    in  %% Line 548
			call 'lists':'nthtail'
			    (_cor4, _cor0)
	    in  %% Line 548
		case _cor5 of
		  %% Line 549
		  <_cor10>
		      when call 'erlang':'=:='
			    (_cor5,
			     _cor2) ->
		      'true'
		  %% Line 550
		  <_cor11> when 'true' ->
		      'false'
		end
'load_native_code_for_all_loaded'/0 =
    %% Line 554
    fun () ->
	let <Architecture> =
	    %% Line 555
	    call 'erlang':'system_info'
		('hipe_architecture')
	in  let <ChunkName> =
		%% Line 556
		call 'hipe_unified_loader':'chunk_name'
		    (Architecture)
	    in  let <_cor7> =
		    %% Line 557
		    ( fun (_cor5) ->
			  case _cor5 of
			    <{Module,BeamFilename}> when 'true' ->
				%% Line 558
				case call 'code':'is_module_native'
					 (Module) of
				  %% Line 559
				  <'false'> when 'true' ->
				      %% Line 560
				      case call 'beam_lib':'chunks'
					       (BeamFilename, [ChunkName|[]]) of
					%% Line 561
					<{'ok',{_cor8,[{_cor9,Bin}|[]]}}>
					    when call 'erlang':'is_binary'
						  (Bin) ->
					    %% Line 562
					    apply 'load_native_partial'/2
						(Module, Bin)
					%% Line 563
					<{'error','beam_lib',_cor10}> when 'true' ->
					    'ok'
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor3})
					  -| ['compiler_generated'] )
				      end
				  %% Line 565
				  <'true'> when 'true' ->
				      'ok'
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'-load_native_code_for_all_loaded/0-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-load_native_code_for_all_loaded/0-fun-0-'}}] )
		in  let <_cor2> =
			%% Line 567
			apply 'all_loaded'/0
			    ()
		    in  %% Line 557
			call 'lists':'foreach'
			    (_cor7, _cor2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('code')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('code', _cor0)
end