module 'global_group' ['code_change'/3,
		       'config_scan'/1,
		       'config_scan'/2,
		       'get_own_nodes'/0,
		       'get_own_nodes_with_errors'/0,
		       'global_groups'/0,
		       'global_groups_added'/1,
		       'global_groups_changed'/1,
		       'global_groups_removed'/1,
		       'handle_call'/3,
		       'handle_cast'/2,
		       'handle_info'/2,
		       'info'/0,
		       'init'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'monitor_nodes'/1,
		       'ng_add_check'/2,
		       'ng_add_check'/3,
		       'own_nodes'/0,
		       'publish_on_nodes'/0,
		       'registered_names'/1,
		       'registered_names_test'/1,
		       'send'/2,
		       'send'/3,
		       'send_test'/2,
		       'start'/0,
		       'start_link'/0,
		       'stop'/0,
		       'sync'/0,
		       'sync_init'/4,
		       'terminate'/2,
		       'whereis_name'/1,
		       'whereis_name'/2,
		       'whereis_name_test'/1]
    attributes [%% Line 23
		'behaviour' =
		    %% Line 23
		    ['gen_server'],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'publish_type',{'type',61,'union',[{'atom',61,'hidden'}|[{'atom',61,'normal'}]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'sync_state',{'type',62,'union',[{'atom',62,'no_conf'}|[{'atom',62,'synced'}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'group_name',{'type',64,'atom',[]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'group_tuple',{'type',65,'union',[{'type',65,'tuple',[{'ann_type',65,[{'var',65,'GroupName'}|[{'type',65,'group_name',[]}]]}|[{'type',65,'list',[{'type',65,'node',[]}]}]]}|[{'type',66,'tuple',[{'ann_type',66,[{'var',66,'GroupName'}|[{'type',66,'group_name',[]}]]}|[{'ann_type',67,[{'var',67,'PublishType'}|[{'type',67,'publish_type',[]}]]}|[{'type',68,'list',[{'type',68,'node',[]}]}]]]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','state'},[{'typed_record_field',{'record_field',84,{'atom',84,'sync_state'},{'atom',84,'no_conf'}},{'type',84,'sync_state',[]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'connect_all'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'group_name'},{'nil',86}},{'type',86,'union',[{'type',86,'group_name',[]}|[{'type',86,'nil',[]}]]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'nodes'},{'nil',87}},{'type',87,'list',[{'type',87,'node',[]}]}}|[{'typed_record_field',{'record_field',88,{'atom',88,'no_contact'},{'nil',88}},{'type',88,'list',[{'type',88,'node',[]}]}}|[{'record_field',89,{'atom',89,'sync_error'},{'nil',89}}|[{'record_field',90,{'atom',90,'other_grps'},{'nil',90}}|[{'typed_record_field',{'record_field',91,{'atom',91,'node_name'},{'call',91,{'atom',91,'node'},[]}},{'type',91,'node',[]}}|[{'record_field',92,{'atom',92,'monitor'},{'nil',92}}|[{'typed_record_field',{'record_field',93,{'atom',93,'publish_type'},{'atom',93,'normal'}},{'type',93,'publish_type',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'group_publish_type'},{'atom',94,'normal'}},{'type',94,'publish_type',[]}}]]]]]]]]]]],[]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'global_groups',0},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[]}|[{'type',101,'union',[{'type',101,'tuple',[{'var',101,'GroupName'}|[{'var',101,'GroupNames'}]]}|[{'atom',101,'undefined'}]]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'GroupName'}|[{'type',102,'group_name',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'GroupNames'}|[{'type',103,'list',[{'var',103,'GroupName'}]}]]]]}]]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'monitor_nodes',1},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'Flag'}]}|[{'atom',107,'ok'}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Flag'}|[{'type',108,'boolean',[]}]]]]}]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'own_nodes',0},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[]}|[{'var',116,'Nodes'}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Nodes'}|[{'type',117,'list',[{'ann_type',117,[{'var',117,'Node'}|[{'type',117,'node',[]}]]}]}]]]]}]]]}]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'name',{'type',121,'atom',[]},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'where',{'type',122,'union',[{'type',122,'tuple',[{'atom',122,'node'}|[{'type',122,'node',[]}]]}|[{'type',122,'tuple',[{'atom',122,'group'}|[{'type',122,'group_name',[]}]]}]]},[]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'registered_names',1},[{'type',124,'bounded_fun',[{'type',124,'fun',[{'type',124,'product',[{'var',124,'Where'}]}|[{'var',124,'Names'}]]}|[[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Where'}|[{'type',125,'where',[]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Names'}|[{'type',126,'list',[{'ann_type',126,[{'var',126,'Name'}|[{'type',126,'name',[]}]]}]}]]]]}]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'send',2},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Name'}|[{'var',130,'Msg'}]]}|[{'type',130,'union',[{'type',130,'pid',[]}|[{'type',130,'tuple',[{'atom',130,'badarg'}|[{'type',130,'tuple',[{'var',130,'Name'}|[{'var',130,'Msg'}]]}]]}]]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Name'}|[{'type',131,'name',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Msg'}|[{'type',132,'term',[]}]]]]}]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'send',3},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'Where'}|[{'var',136,'Name'}|[{'var',136,'Msg'}]]]}|[{'type',136,'union',[{'type',136,'pid',[]}|[{'type',136,'tuple',[{'atom',136,'badarg'}|[{'type',136,'tuple',[{'var',136,'Name'}|[{'var',136,'Msg'}]]}]]}]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Where'}|[{'type',137,'where',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Name'}|[{'type',138,'name',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'Msg'}|[{'type',139,'term',[]}]]]]}]]]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'whereis_name',1},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Name'}]}|[{'type',143,'union',[{'type',143,'pid',[]}|[{'atom',143,'undefined'}]]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Name'}|[{'type',144,'name',[]}]]]]}]]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'whereis_name',2},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'Where'}|[{'var',148,'Name'}]]}|[{'type',148,'union',[{'type',148,'pid',[]}|[{'atom',148,'undefined'}]]}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Where'}|[{'type',149,'where',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Name'}|[{'type',150,'name',[]}]]]]}]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'sync',0},[{'type',163,'fun',[{'type',163,'product',[]}|[{'atom',163,'ok'}]]}]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{'info_item',{'type',173,'union',[{'type',173,'tuple',[{'atom',173,'state'}|[{'ann_type',173,[{'var',173,'State'}|[{'type',173,'sync_state',[]}]]}]]}|[{'type',174,'tuple',[{'atom',174,'own_group_name'}|[{'ann_type',174,[{'var',174,'GroupName'}|[{'type',174,'group_name',[]}]]}]]}|[{'type',175,'tuple',[{'atom',175,'own_group_nodes'}|[{'ann_type',175,[{'var',175,'Nodes'}|[{'type',175,'list',[{'type',175,'node',[]}]}]]}]]}|[{'type',176,'tuple',[{'atom',176,'synched_nodes'}|[{'ann_type',176,[{'var',176,'Nodes'}|[{'type',176,'list',[{'type',176,'node',[]}]}]]}]]}|[{'type',177,'tuple',[{'atom',177,'sync_error'}|[{'ann_type',177,[{'var',177,'Nodes'}|[{'type',177,'list',[{'type',177,'node',[]}]}]]}]]}|[{'type',178,'tuple',[{'atom',178,'no_contact'}|[{'ann_type',178,[{'var',178,'Nodes'}|[{'type',178,'list',[{'type',178,'node',[]}]}]]}]]}|[{'type',179,'tuple',[{'atom',179,'other_groups'}|[{'ann_type',179,[{'var',179,'Groups'}|[{'type',179,'list',[{'type',179,'group_tuple',[]}]}]]}]]}|[{'type',180,'tuple',[{'atom',180,'monitoring'}|[{'ann_type',180,[{'var',180,'Pids'}|[{'type',180,'list',[{'type',180,'pid',[]}]}]]}]]}]]]]]]]]},[]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'info',0},[{'type',182,'fun',[{'type',182,'product',[]}|[{'type',182,'list',[{'type',182,'info_item',[]}]}]]}]}],
		%% Line 1030
		'spec' =
		    %% Line 1030
		    [{{'sync_init',4},[{'type',1030,'fun',[{'type',1030,'product',[{'var',1030,'_'}|[{'var',1030,'_'}|[{'var',1030,'_'}|[{'var',1030,'_'}]]]]}|[{'type',1030,'no_return',[]}]]}]}],
		%% Line 1051
		'spec' =
		    %% Line 1051
		    [{{'sync_check_init',6},[{'type',1051,'fun',[{'type',1051,'product',[{'var',1051,'_'}|[{'var',1051,'_'}|[{'var',1051,'_'}|[{'var',1051,'_'}|[{'var',1051,'_'}|[{'var',1051,'_'}]]]]]]}|[{'type',1051,'no_return',[]}]]}]}],
		%% Line 1055
		'spec' =
		    %% Line 1055
		    [{{'sync_check_init',8},[{'type',1055,'fun',[{'type',1055,'product',[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}|[{'var',1055,'_'}]]]]]]]]}|[{'type',1055,'no_return',[]}]]}]}]]
'global_groups'/0 =
    %% Line 104
    fun () ->
	%% Line 105
	apply 'request'/1
	    ('global_groups')
'monitor_nodes'/1 =
    %% Line 109
    fun (_cor0) ->
	%% Line 110
	case _cor0 of
	  %% Line 111
	  <'true'> when 'true' ->
	      apply 'request'/1
		  ({'monitor_nodes',_cor0})
	  %% Line 112
	  <'false'> when 'true' ->
	      apply 'request'/1
		  ({'monitor_nodes',_cor0})
	  %% Line 113
	  <_cor3> when 'true' ->
	      {'error','not_boolean'}
	end
'own_nodes'/0 =
    %% Line 118
    fun () ->
	%% Line 119
	apply 'request'/1
	    ('own_nodes')
'registered_names'/1 =
    %% Line 127
    fun (_cor0) ->
	%% Line 128
	apply 'request'/1
	    ({'registered_names',_cor0})
'send'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	%% Line 134
	apply 'request'/1
	    ({'send',_cor1,_cor0})
'send'/3 =
    %% Line 140
    fun (_cor2,_cor1,_cor0) ->
	%% Line 141
	apply 'request'/1
	    ({'send',_cor2,_cor1,_cor0})
'whereis_name'/1 =
    %% Line 145
    fun (_cor0) ->
	%% Line 146
	apply 'request'/1
	    ({'whereis_name',_cor0})
'whereis_name'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	%% Line 152
	apply 'request'/1
	    ({'whereis_name',_cor1,_cor0})
'global_groups_changed'/1 =
    %% Line 154
    fun (_cor0) ->
	%% Line 155
	apply 'request'/1
	    ({'global_groups_changed',_cor0})
'global_groups_added'/1 =
    %% Line 157
    fun (_cor0) ->
	%% Line 158
	apply 'request'/1
	    ({'global_groups_added',_cor0})
'global_groups_removed'/1 =
    %% Line 160
    fun (_cor0) ->
	%% Line 161
	apply 'request'/1
	    ({'global_groups_removed',_cor0})
'sync'/0 =
    %% Line 164
    fun () ->
	%% Line 165
	apply 'request'/1
	    ('sync')
'ng_add_check'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	%% Line 168
	apply 'ng_add_check'/3
	    (_cor1, 'normal', _cor0)
'ng_add_check'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	%% Line 171
	apply 'request'/1
	    ({'ng_add_check',_cor2,_cor1,_cor0})
'info'/0 =
    %% Line 183
    fun () ->
	%% Line 184
	apply 'request'/2
	    ('info', 3000)
'registered_names_test'/1 =
    %% Line 187
    fun (_cor0) ->
	%% Line 188
	apply 'request'/1
	    ({'registered_names_test',_cor0})
'send_test'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	%% Line 190
	apply 'request'/1
	    ({'send_test',_cor1,_cor0})
'whereis_name_test'/1 =
    %% Line 191
    fun (_cor0) ->
	%% Line 192
	apply 'request'/1
	    ({'whereis_name_test',_cor0})
'request'/1 =
    %% Line 196
    fun (_cor0) ->
	%% Line 197
	apply 'request'/2
	    (_cor0, 'infinity')
'request'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	%% Line 200
	case call 'erlang':'whereis'
		 ('global_group') of
	  %% Line 201
	  <P>
	      when call 'erlang':'is_pid'
		    (P) ->
	      %% Line 202
	      call 'gen_server':'call'
		  ('global_group', _cor1, _cor0)
	  %% Line 203
	  <_X_Other> when 'true' ->
	      %% Line 204
	      {'error','global_group_not_runnig'}
	end
'start'/0 =
    %% Line 229
    fun () ->
	call 'gen_server':'start'
	    ({'local','global_group'}, 'global_group', [], [])
'start_link'/0 =
    %% Line 230
    fun () ->
	call 'gen_server':'start_link'
	    ({'local','global_group'}, 'global_group', [], [])
'stop'/0 =
    %% Line 231
    fun () ->
	call 'gen_server':'call'
	    ('global_group', 'stop', 'infinity')
'init'/1 =
    %% Line 233
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 234
		  call 'erlang':'process_flag'
		      ('priority', 'max')
		  %% Line 235
		  case call 'net_kernel':'monitor_nodes'
			   ('true') of
		    <'ok'> when 'true' ->
			do  %% Line 236
			    call 'erlang':'put'
				('registered_names', ['undefined'])
			    do  %% Line 237
				call 'erlang':'put'
				    ('send', ['undefined'])
				do  %% Line 238
				    call 'erlang':'put'
					('whereis_name', ['undefined'])
				    do  %% Line 239
					call 'erlang':'process_flag'
					    ('trap_exit', 'true')
					let <_cor3> =
					    %% Line 240
					    case call 'init':'get_argument'
						     ('connect_all') of
					      %% Line 241
					      <{'ok',[[[102|[97|[108|[115|[101]]]]]]]}> when 'true' ->
						  %% Line 242
						  'false'
					      %% Line 243
					      <_cor23> when 'true' ->
						  %% Line 244
						  'true'
					    end
					in  let <PT> =
						%% Line 246
						apply 'publish_arg'/0
						    ()
					    in  %% Line 247
						case call 'application':'get_env'
							 ('kernel', 'global_groups') of
						  %% Line 248
						  <'undefined'> when 'true' ->
						      do  %% Line 249
							  apply 'update_publish_nodes'/1
							      (PT)
							  let <_cor6> =
							      call 'erlang':'node'
								  ()
							  in  %% Line 250
							      {'ok',{'state','no_conf',_cor3,[],[],[],[],[],_cor6,[],PT,'normal'}}
						  %% Line 252
						  <{'ok',[]}> when 'true' ->
						      do  %% Line 253
							  apply 'update_publish_nodes'/1
							      (PT)
							  let <_cor7> =
							      call 'erlang':'node'
								  ()
							  in  %% Line 254
							      {'ok',{'state','no_conf',_cor3,[],[],[],[],[],_cor7,[],PT,'normal'}}
						  %% Line 256
						  <{'ok',NodeGrps}> when 'true' ->
						      let <_cor8> =
							  catch
							      %% Line 258
							      apply 'config_scan'/2
								  (NodeGrps, 'publish_type')
						      in  let <DefGroupName,PubTpGrp,DefNodes,DefOther> =
							      %% Line 258
							      case _cor8 of
								%% Line 259
								<{'error',_X_Error2}> when 'true' ->
								    do  %% Line 260
									apply 'update_publish_nodes'/1
									    (PT)
									%% Line 261
									call 'erlang':'exit'
									    ({'error',{'invalid global_groups definition',NodeGrps}})
								%% Line 262
								<{DefGroupNameT,PubType,DefNodesT,DefOtherT}> when 'true' ->
								    do  %% Line 263
									apply 'update_publish_nodes'/2
									    (PT, {PubType,DefNodesT})
									let <_cor9> =
									    %% Line 265
									    call 'erlang':'nodes'
										('connected')
									in  let <_cor10> =
										%% Line 265
										call 'erlang':'--'
										    (_cor9, DefNodesT)
									    in  do  %% Line 265
										    apply 'disconnect_nodes'/1
											(_cor10)
										    let <_cor13> =
											%% Line 266
											( fun (_cor11) ->
											      %% Line 267
											      call 'erlang':'monitor_node'
												  (_cor11, 'true')
											  -| [{'id',{0,0,'-init/1-fun-0-'}}] )
										    in  do  %% Line 266
											    call 'lists':'foreach'
												(_cor13, %% Line 269
													 DefNodesT)
											    let <_cor14> =
												%% Line 270
												call 'erlang':'node'
												    ()
											    in  let <_cor15> =
												    %% Line 270
												    call 'lists':'delete'
													(_cor14, DefNodesT)
												in  %% Line 270
												    <DefGroupNameT,PubType,_cor15,DefOtherT>
								( <_cor16> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor16})
								  -| ['compiler_generated'] )
							      end
							  in  let <_cor20> =
								  %% Line 274
								  call 'lists':'sort'
								      (DefNodes)
							      in  let <_cor19> =
								      call 'erlang':'node'
									  ()
								  in  %% Line 272
								      {'ok',{'state',%% Line 273
										     'synced','undefined',%% Line 273
													  DefGroupName,[],_cor20,[],%% Line 275
																    DefOther,_cor19,[],PT,PubTpGrp}}
						  ( <_cor21> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor21})
						    -| ['compiler_generated'] )
						end
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 286
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'sync',_X_From,S> when 'true' ->
	      %% Line 288
	      case call 'application':'get_env'
		       ('kernel', 'global_groups') of
		%% Line 289
		<'undefined'> when 'true' ->
		    %% Line 290
		    ( case S of
			( <( {'state',_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_rec0,_cor231}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'update_publish_nodes'/1
				      (_rec0)
				  %% Line 291
				  {'reply','ok',S}
			  -| ['compiler_generated'] )
			( <_cor232> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 292
		<{'ok',[]}> when 'true' ->
		    %% Line 293
		    ( case S of
			( <( {'state',_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_rec1,_cor242}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'update_publish_nodes'/1
				      (_rec1)
				  %% Line 294
				  {'reply','ok',S}
			  -| ['compiler_generated'] )
			( <_cor243> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 295
		<{'ok',NodeGrps}> when 'true' ->
		    let <_cor7> =
			catch
			    %% Line 297
			    apply 'config_scan'/2
				(NodeGrps, 'publish_type')
		    in  let <DefGroupName,PubTpGrp,DefNodes,DefOther> =
			    %% Line 297
			    case _cor7 of
			      %% Line 298
			      <{'error',_X_Error2}> when 'true' ->
				  %% Line 299
				  call 'erlang':'exit'
				      ({'error',{'invalid global_groups definition',NodeGrps}})
			      %% Line 300
			      <{DefGroupNameT,PubType,DefNodesT,DefOtherT}> when 'true' ->
				  %% Line 301
				  ( case S of
				      ( <( {'state',_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_rec2,_cor253}
					   -| ['compiler_generated'] )> when 'true' ->
					    do  apply 'update_publish_nodes'/2
						    (_rec2, {PubType,DefNodesT})
						let <_cor10> =
						    %% Line 303
						    call 'erlang':'nodes'
							('connected')
						in  let <_cor11> =
							%% Line 303
							call 'erlang':'--'
							    (_cor10, DefNodesT)
						    in  do  %% Line 303
							    apply 'disconnect_nodes'/1
								(_cor11)
							    do  %% Line 305
								apply 'kill_global_group_check'/0
								    ()
								let <Pid> =
								    %% Line 306
								    call 'erlang':'spawn_link'
									('global_group', 'sync_init', %% Line 307
												      ['sync'|[DefGroupNameT|[PubType|[DefNodesT|[]]]]])
								in  do  %% Line 308
									call 'erlang':'register'
									    ('global_group_check', Pid)
									let <_cor13> =
									    %% Line 309
									    call 'erlang':'node'
										()
									in  let <_cor14> =
										%% Line 309
										call 'lists':'delete'
										    (_cor13, DefNodesT)
									    in  %% Line 309
										<DefGroupNameT,PubType,_cor14,DefOtherT>
					-| ['compiler_generated'] )
				      ( <_cor254> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor15})
				-| ['compiler_generated'] )
			    end
			in  let <_rec3> =
				%% Line 312
				call 'lists':'sort'
				    (DefNodes)
			    in  %% Line 311
				case S of
				  <{'state',_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265}> when 'true' ->
				      let <_cor20> =
					  %% Line 313
					  call 'erlang':'setelement'
					      (12, S, PubTpGrp)
				      in  let <_cor21> =
					      %% Line 313
					      call 'erlang':'setelement'
						  (8, _cor20, DefOther)
					  in  let <_cor22> =
						  %% Line 312
						  call 'erlang':'setelement'
						      (6, _cor21, _rec3)
					      in  let <_cor23> =
						      call 'erlang':'setelement'
							  (4, _cor22, DefGroupName)
						  in  let <_cor25> =
							  call 'erlang':'setelement'
							      (2, _cor23, 'synced')
						      in  {'reply','ok',_cor25}
				  ( <_cor266> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 323
	  <'global_groups',_X_From,S> when 'true' ->
	      %% Line 324
	      ( case S of
		  ( <( {'state',_rec5,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor40> =
			    case _rec5 of
			      %% Line 325
			      <'no_conf'> when 'true' ->
				  %% Line 326
				  'undefined'
			      %% Line 327
			      <'synced'> when 'true' ->
				  let <_cor35> =
				      %% Line 328
				      ( fun (_cor32,_cor31) ->
					    case <_cor32,_cor31> of
					      <{N,_X_L},Acc> when 'true' ->
						  call 'erlang':'++'
						      (Acc, [N|[]])
					      ( <_cor34,_cor33> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor34,_cor33})
						      -| [{'function_name',{'-handle_call/3-fun-0-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-handle_call/3-fun-0-'}}] )
				  in  let <Other> =
					  %% Line 328
					  call 'lists':'foldl'
					      (_cor35, %% Line 330
						       [], _cor272)
				      in  %% Line 331
					  {_cor268,Other}
			      ( <_cor39> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor39})
				-| ['compiler_generated'] )
			    end
			in  %% Line 333
			    {'reply',_cor40,S}
		    -| ['compiler_generated'] )
		  ( <_cor277> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 344
	  <{'monitor_nodes',Flag},{Pid,_cor300},StateIn> when 'true' ->
	      %% Line 346
	      case apply 'monitor_nodes'/3
		       (Flag, Pid, StateIn) of
		<{Res,State}> when 'true' ->
		    %% Line 347
		    {'reply',Res,State}
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 355
	  <'own_nodes',_X_From,S> when 'true' ->
	      %% Line 356
	      ( case S of
		  ( <( {'state',_rec8,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor48> =
			    case _rec8 of
			      %% Line 357
			      <'no_conf'> when 'true' ->
				  let <_cor45> =
				      %% Line 358
				      call 'erlang':'node'
					  ()
				  in  let <_cor46> =
					  %% Line 358
					  call 'erlang':'nodes'
					      ()
				      in  %% Line 358
					  [_cor45|_cor46]
			      %% Line 359
			      <'synced'> when 'true' ->
				  %% Line 360
				  apply 'get_own_nodes'/0
				      ()
			      ( <_cor47> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor47})
				-| ['compiler_generated'] )
			    end
			in  %% Line 363
			    {'reply',_cor48,S}
		    -| ['compiler_generated'] )
		  ( <_cor311> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 373
	  <{'registered_names',{'group',Group}},_X_From,S = {'state',_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322}>
	      when call 'erlang':'=:='
		    (Group,
		     _cor314) ->
	      let <Res> =
		  %% Line 374
		  call 'global':'registered_names'
		      ()
	      in  %% Line 375
		  {'reply',Res,S}
	  %% Line 376
	  <{'registered_names',{'group',Group}},From,S> when 'true' ->
	      %% Line 377
	      ( case S of
		  ( <( {'state',_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_rec9,_cor329,_cor330,_cor331,_cor332}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Group, 1, _rec9) of
			  %% Line 378
			  <'false'> when 'true' ->
			      %% Line 379
			      {'reply',[],S}
			  %% Line 380
			  <{'value',{_cor334,[]}}>
			      when call 'erlang':'=:='
				    (_cor334,
				     Group) ->
			      %% Line 381
			      {'reply',[],S}
			  %% Line 382
			  <{'value',{_cor335,Nodes}}>
			      when call 'erlang':'=:='
				    (_cor335,
				     Group) ->
			      let <Pid> =
				  %% Line 383
				  call 'global_search':'start'
				      ('names', {'group',Nodes,From})
			      in  let <Wait> =
				      %% Line 384
				      call 'erlang':'get'
					  ('registered_names')
				  in  do  %% Line 385
					  call 'erlang':'put'
					      ('registered_names', [{Pid,From}|Wait])
					  %% Line 386
					  {'noreply',S}
			  ( <_cor61> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor61})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor333> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 388
	  <{'registered_names',{'node',Node}},_X_From,S>
	      when try
		    let <_cor62> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (Node, _cor62)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Res> =
		  %% Line 389
		  call 'global':'registered_names'
		      ()
	      in  %% Line 390
		  {'reply',Res,S}
	  %% Line 391
	  <{'registered_names',{'node',Node}},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 392
		  call 'global_search':'start'
		      ('names', {'node',Node,From})
	      in  let <Wait> =
		      %% Line 394
		      call 'erlang':'get'
			  ('registered_names')
		  in  do  %% Line 395
			  call 'erlang':'put'
			      ('registered_names', [{Pid,From}|Wait])
			  %% Line 396
			  {'noreply',S}
	  %% Line 411
	  <{'send',Name,Msg},From,S> when 'true' ->
	      %% Line 412
	      case call 'global':'whereis_name'
		       (Name) of
		%% Line 413
		<'undefined'> when 'true' ->
		    %% Line 414
		    ( case S of
			( <( {'state',_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_rec10,_cor342,_cor343,_cor344,_cor345}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Pid> =
				  call 'global_search':'start'
				      ('send', {'any',_rec10,Name,Msg,From})
			      in  let <Wait> =
				      %% Line 415
				      call 'erlang':'get'
					  ('send')
				  in  do  %% Line 416
					  call 'erlang':'put'
					      ('send', [{Pid,From,Name,Msg}|Wait])
					  %% Line 417
					  {'noreply',S}
			  -| ['compiler_generated'] )
			( <_cor346> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 418
		<Found> when 'true' ->
		    do  %% Line 419
			call 'erlang':'!'
			    (Found, Msg)
			%% Line 420
			{'reply',Found,S}
	      end
	  %% Line 423
	  <{'send',{'group',Grp},Name,Msg},_X_From,S = {'state',_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357}>
	      when call 'erlang':'=:='
		    (Grp,
		     _cor349) ->
	      %% Line 424
	      case call 'global':'whereis_name'
		       (Name) of
		%% Line 425
		<'undefined'> when 'true' ->
		    %% Line 426
		    {'reply',{'badarg',{Name,Msg}},S}
		%% Line 427
		<Pid> when 'true' ->
		    do  %% Line 428
			call 'erlang':'!'
			    (Pid, Msg)
			%% Line 429
			{'reply',Pid,S}
	      end
	  %% Line 432
	  <{'send',{'group',Group},Name,Msg},From,S> when 'true' ->
	      %% Line 433
	      ( case S of
		  ( <( {'state',_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_rec11,_cor364,_cor365,_cor366,_cor367}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Group, 1, _rec11) of
			  %% Line 434
			  <'false'> when 'true' ->
			      %% Line 435
			      {'reply',{'badarg',{Name,Msg}},S}
			  %% Line 436
			  <{'value',{_cor369,[]}}>
			      when call 'erlang':'=:='
				    (_cor369,
				     Group) ->
			      %% Line 437
			      {'reply',{'badarg',{Name,Msg}},S}
			  %% Line 438
			  <{'value',{_cor370,Nodes}}>
			      when call 'erlang':'=:='
				    (_cor370,
				     Group) ->
			      let <Pid> =
				  %% Line 439
				  call 'global_search':'start'
				      ('send', {'group',Nodes,Name,Msg,From})
			      in  let <Wait> =
				      %% Line 440
				      call 'erlang':'get'
					  ('send')
				  in  do  %% Line 441
					  call 'erlang':'put'
					      ('send', [{Pid,From,Name,Msg}|Wait])
					  %% Line 442
					  {'noreply',S}
			  ( <_cor82> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor82})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor368> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 445
	  <{'send',{'node',Node},Name,Msg},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 446
		  call 'global_search':'start'
		      ('send', {'node',Node,Name,Msg,From})
	      in  let <Wait> =
		      %% Line 447
		      call 'erlang':'get'
			  ('send')
		  in  do  %% Line 448
			  call 'erlang':'put'
			      ('send', [{Pid,From,Name,Msg}|Wait])
			  %% Line 449
			  {'noreply',S}
	  %% Line 464
	  <{'whereis_name',Name},From,S> when 'true' ->
	      %% Line 465
	      case call 'global':'whereis_name'
		       (Name) of
		%% Line 466
		<'undefined'> when 'true' ->
		    %% Line 467
		    ( case S of
			( <( {'state',_cor371,_cor372,_cor373,_cor374,_cor375,_cor376,_rec12,_cor377,_cor378,_cor379,_cor380}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Pid> =
				  call 'global_search':'start'
				      ('whereis', {'any',_rec12,Name,From})
			      in  let <Wait> =
				      %% Line 468
				      call 'erlang':'get'
					  ('whereis_name')
				  in  do  %% Line 469
					  call 'erlang':'put'
					      ('whereis_name', [{Pid,From}|Wait])
					  %% Line 470
					  {'noreply',S}
			  -| ['compiler_generated'] )
			( <_cor381> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 471
		<Found> when 'true' ->
		    %% Line 472
		    {'reply',Found,S}
	      end
	  %% Line 475
	  <{'whereis_name',{'group',Group},Name},_X_From,S = {'state',_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392}>
	      when %% Line 476
		call 'erlang':'=:='
		    (Group,
		     _cor384) ->
	      let <Res> =
		  %% Line 477
		  call 'global':'whereis_name'
		      (Name)
	      in  %% Line 478
		  {'reply',Res,S}
	  %% Line 480
	  <{'whereis_name',{'group',Group},Name},From,S> when 'true' ->
	      %% Line 481
	      ( case S of
		  ( <( {'state',_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_rec13,_cor399,_cor400,_cor401,_cor402}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Group, 1, _rec13) of
			  %% Line 482
			  <'false'> when 'true' ->
			      %% Line 483
			      {'reply','undefined',S}
			  %% Line 484
			  <{'value',{_cor404,[]}}>
			      when call 'erlang':'=:='
				    (_cor404,
				     Group) ->
			      %% Line 485
			      {'reply','undefined',S}
			  %% Line 486
			  <{'value',{_cor405,Nodes}}>
			      when call 'erlang':'=:='
				    (_cor405,
				     Group) ->
			      let <Pid> =
				  %% Line 487
				  call 'global_search':'start'
				      ('whereis', {'group',Nodes,Name,From})
			      in  let <Wait> =
				      %% Line 488
				      call 'erlang':'get'
					  ('whereis_name')
				  in  do  %% Line 489
					  call 'erlang':'put'
					      ('whereis_name', [{Pid,From}|Wait])
					  %% Line 490
					  {'noreply',S}
			  ( <_cor101> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor101})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor403> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 493
	  <{'whereis_name',{'node',Node},Name},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 494
		  call 'global_search':'start'
		      ('whereis', {'node',Node,Name,From})
	      in  let <Wait> =
		      %% Line 495
		      call 'erlang':'get'
			  ('whereis_name')
		  in  do  %% Line 496
			  call 'erlang':'put'
			      ('whereis_name', [{Pid,From}|Wait])
			  %% Line 497
			  {'noreply',S}
	  %% Line 505
	  <{'global_groups_changed',NewPara},_X_From,S> when 'true' ->
	      let <_cor104> =
		  catch
		      %% Line 507
		      apply 'config_scan'/2
			  (NewPara, 'publish_type')
	      in  let <NewGroupName,PubTpGrp,NewNodes,NewOther> =
		      %% Line 507
		      case _cor104 of
			%% Line 508
			<{'error',_X_Error2}> when 'true' ->
			    %% Line 509
			    call 'erlang':'exit'
				({'error',{'invalid global_groups definition',NewPara}})
			%% Line 510
			<{DefGroupName,PubType,DefNodes,DefOther}> when 'true' ->
			    %% Line 511
			    ( case S of
				( <( {'state',_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412,_cor413,_cor414,_rec14,_cor415}
				     -| ['compiler_generated'] )> when 'true' ->
				      do  apply 'update_publish_nodes'/2
					      (_rec14, {PubType,DefNodes})
					  %% Line 512
					  <DefGroupName,PubType,DefNodes,DefOther>
				  -| ['compiler_generated'] )
				( <_cor416> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor107> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor107})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 516
		      ( case S of
			  ( <( {'state',_cor417,_cor418,_cor419,_rec15,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor112> =
				    call 'erlang':'--'
					(NewNodes, _rec15)
				in  let <NN> =
					call 'erlang':'--'
					    (NewNodes, _cor112)
				    in  let <_cor118> =
					    %% Line 518
					    call 'erlang':'--'
						(NewNodes, _rec15)
					in  let <NNC> =
						%% Line 518
						call 'erlang':'--'
						    (_cor118, _cor421)
					    in  let <_cor122> =
						    %% Line 520
						    call 'erlang':'--'
							(NewNodes, _cor421)
						in  let <NSE> =
							%% Line 520
							call 'erlang':'--'
							    (NewNodes, _cor122)
						    in  let <_cor124> =
							    %% Line 530
							    call 'erlang':'nodes'
								('connected')
							in  let <_cor125> =
								%% Line 530
								call 'erlang':'--'
								    (_cor124, NewNodes)
							    in  do  %% Line 530
								    apply 'force_nodedown'/1
									(_cor125)
								    let <_rec19> =
									%% Line 533
									call 'lists':'sort'
									    (NN)
								    in  let <_cor127> =
									    %% Line 534
									    call 'erlang':'node'
										()
									in  let <_cor128> =
										%% Line 534
										call 'lists':'delete'
										    (_cor127, NNC)
									    in  let <_rec20> =
										    %% Line 534
										    call 'lists':'sort'
											(_cor128)
										in  let <_rec21> =
											%% Line 535
											call 'lists':'sort'
											    (NSE)
										    in  let <_cor133> =
											    %% Line 537
											    {'state',_cor417,_cor418,NewGroupName,_rec19,_rec20,_rec21,NewOther,_cor423,_cor424,_cor425,PubTpGrp}
											in  %% Line 538
											    {'reply','ok',_cor133}
			    -| ['compiler_generated'] )
			  ( <_cor427> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 546
	  <{'global_groups_added',NewPara},_X_From,S> when 'true' ->
	      let <_cor135> =
		  catch
		      %% Line 549
		      apply 'config_scan'/2
			  (NewPara, 'publish_type')
	      in  let <NewGroupName,PubTpGrp,NewNodes,NewOther> =
		      %% Line 549
		      case _cor135 of
			%% Line 550
			<{'error',_X_Error2}> when 'true' ->
			    %% Line 551
			    call 'erlang':'exit'
				({'error',{'invalid global_groups definition',NewPara}})
			%% Line 552
			<{DefGroupName,PubType,DefNodes,DefOther}> when 'true' ->
			    %% Line 553
			    ( case S of
				( <( {'state',_cor462,_cor463,_cor464,_cor465,_cor466,_cor467,_cor468,_cor469,_cor470,_rec34,_cor471}
				     -| ['compiler_generated'] )> when 'true' ->
				      do  apply 'update_publish_nodes'/2
					      (_rec34, {PubType,DefNodes})
					  %% Line 554
					  <DefGroupName,PubType,DefNodes,DefOther>
				  -| ['compiler_generated'] )
				( <_cor472> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor138> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor138})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor141> =
			  %% Line 558
			  call 'erlang':'nodes'
			      ('connected')
		      in  let <_cor142> =
			      %% Line 558
			      call 'erlang':'--'
				  (_cor141, NewNodes)
			  in  do  %% Line 558
				  apply 'force_nodedown'/1
				      (_cor142)
				  let <OwnNG> =
				      %% Line 561
				      apply 'get_own_nodes'/0
					  ()
				  in  %% Line 562
				      ( case S of
					  ( <( {'state',_cor473,_cor474,_cor475,_cor476,_cor477,_cor478,_cor479,_cor480,_cor481,_cor482,_rec35}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor151> =
						    case _rec35 of
						      %% Line 563
						      <'normal'> when 'true' ->
							  let <_cor146> =
							      %% Line 564
							      call 'erlang':'node'
								  ()
							  in  %% Line 564
							      [_cor146|[OwnNG|[]]]
						      %% Line 565
						      <_cor484> when 'true' ->
							  let <_cor147> =
							      %% Line 566
							      call 'erlang':'node'
								  ()
							  in  %% Line 566
							      [_cor147|[_rec35|[OwnNG|[]]]]
						    end
						in  let <_cor160> =
							%% Line 569
							( fun (_cor157,_cor156) ->
							      case <_cor157,_cor156> of
								<Node,{NN_acc,NNC_acc,NSE_acc}> when 'true' ->
								    %% Line 570
								    case call 'rpc':'call'
									     (Node, 'global_group', 'ng_add_check', _cor151) of
								      %% Line 571
								      <{'badrpc',_cor496}> when 'true' ->
									  %% Line 572
									  {NN_acc,[Node|NNC_acc],NSE_acc}
								      %% Line 573
								      <'agreed'> when 'true' ->
									  %% Line 574
									  {[Node|NN_acc],NNC_acc,NSE_acc}
								      %% Line 575
								      <'not_agreed'> when 'true' ->
									  %% Line 576
									  {NN_acc,NNC_acc,[Node|NSE_acc]}
								      ( <_cor155> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor155})
									-| ['compiler_generated'] )
								    end
								( <_cor159,_cor158> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor159,_cor158})
									-| [{'function_name',{'-handle_call/3-fun-1-',2}}] )
								  -| ['compiler_generated'] )
							      end
							  -| [{'id',{0,0,'-handle_call/3-fun-1-'}}] )
						    in  let <_cor153> =
							    %% Line 579
							    call 'erlang':'node'
								()
							in  let <_cor154> =
								%% Line 579
								call 'lists':'delete'
								    (_cor153, NewNodes)
							    in  %% Line 568
								case %% Line 569
								     call 'lists':'foldl'
									 (_cor160, %% Line 579
										   {[],[],[]}, _cor154) of
								  <{NN,NNC,NSE}> when 'true' ->
								      let <_rec37> =
									  %% Line 580
									  call 'lists':'sort'
									      (NN)
								      in  let <_rec38> =
									      %% Line 581
									      call 'lists':'sort'
										  (NSE)
									  in  let <_rec39> =
										  %% Line 581
										  call 'lists':'sort'
										      (NNC)
									      in  let <_cor167> =
										      %% Line 582
										      {'state','synced',_cor474,NewGroupName,_rec37,_rec39,_rec38,NewOther,_cor480,_cor481,_cor482,PubTpGrp}
										  in  %% Line 583
										      {'reply','ok',_cor167}
								  ( <_cor161> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor161})
								    -| ['compiler_generated'] )
								end
					    -| ['compiler_generated'] )
					  ( <_cor483> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	  %% Line 589
	  <{'global_groups_removed',_X_NewPara},_X_From,S> when 'true' ->
	      %% Line 591
	      ( case S of
		  ( <( {'state',_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_rec52,_cor507}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'update_publish_nodes'/1
				(_rec52)
			    let <_cor173> =
				%% Line 594
				{'state','no_conf',_cor499,[],[],[],[],[],_cor505,_cor506,_rec52,_cor507}
			    in  %% Line 595
				{'reply','ok',_cor173}
		    -| ['compiler_generated'] )
		  ( <_cor508> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 603
	  <{'ng_add_check',Node,PubType,OthersNG},_X_From,S> when 'true' ->
	      let <OwnNG> =
		  %% Line 605
		  apply 'get_own_nodes'/0
		      ()
	      in  %% Line 606
		  ( case S of
		      ( <( {'state',_cor510,_cor511,_cor512,_cor513,_cor514,_cor515,_cor516,_cor517,_cor518,_cor519,_rec65}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'erlang':'=:='
				     (_rec65, PubType) of
			      %% Line 607
			      <'true'> when 'true' ->
				  %% Line 608
				  case OwnNG of
				    %% Line 609
				    <_cor521>
					when call 'erlang':'=:='
					      (OwnNG,
					       OthersNG) ->
					let <NN> =
					    %% Line 610
					    [Node|_cor513]
					in  let <NSE> =
						%% Line 611
						call 'lists':'delete'
						    (Node, _cor515)
					    in  let <NNC> =
						    %% Line 612
						    call 'lists':'delete'
							(Node, _cor514)
						in  let <_rec69> =
							%% Line 613
							call 'lists':'sort'
							    (NN)
						    in  let <_cor189> =
							    %% Line 614
							    call 'erlang':'setelement'
								(7, S, NSE)
							in  let <_cor190> =
								%% Line 615
								call 'erlang':'setelement'
								    (6, _cor189, NNC)
							    in  let <_cor192> =
								    %% Line 613
								    call 'erlang':'setelement'
									(5, _cor190, _rec69)
								in  %% Line 616
								    {'reply','agreed',_cor192}
				    %% Line 617
				    <_cor567> when 'true' ->
					%% Line 618
					{'reply','not_agreed',S}
				  end
			      %% Line 620
			      <_cor568> when 'true' ->
				  %% Line 621
				  {'reply','not_agreed',S}
			    end
			-| ['compiler_generated'] )
		      ( <_cor520> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 629
	  <'info',_X_From,S> when 'true' ->
	      %% Line 630
	      ( case S of
		  ( <( {'state',_rec71,_cor569,_cor570,_cor571,_cor572,_cor573,_cor574,_cor575,_cor576,_cor577,_cor578}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor200> =
			    %% Line 632
			    apply 'get_own_nodes'/0
				()
			in  let <Reply> =
				[{'state',_rec71}|%% Line 631
						  [{'own_group_name',_cor570}|%% Line 632
									      [{'own_group_nodes',_cor200}|%% Line 634
													   [{'synced_nodes',_cor571}|%% Line 635
																     [{'sync_error',_cor573}|%% Line 636
																			     [{'no_contact',_cor572}|%% Line 637
																						     [{'other_groups',_cor574}|%% Line 638
																									       [{'monitoring',_cor576}|[]]]]]]]]]
			    in  %% Line 640
				{'reply',Reply,S}
		    -| ['compiler_generated'] )
		  ( <_cor579> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 642
	  <'get',_X_From,S> when 'true' ->
	      let <_cor212> =
		  %% Line 643
		  call 'erlang':'get'
		      ()
	      in  %% Line 643
		  {'reply',_cor212,S}
	  %% Line 649
	  <{'registered_names_test',{'node','test3844zty'}},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 650
		  call 'global_search':'start'
		      ('names_test', {'node','test3844zty'})
	      in  let <Wait> =
		      %% Line 651
		      call 'erlang':'get'
			  ('registered_names')
		  in  do  %% Line 652
			  call 'erlang':'put'
			      ('registered_names', [{Pid,From}|Wait])
			  %% Line 653
			  {'noreply',S}
	  %% Line 654
	  <{'registered_names_test',{'node',_X_Node}},_X_From,S> when 'true' ->
	      %% Line 655
	      {'reply',{'error','illegal_function_call'},S}
	  %% Line 656
	  <{'send_test',Name,'test3844zty'},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 657
		  call 'global_search':'start'
		      ('send_test', 'test3844zty')
	      in  let <Wait> =
		      %% Line 658
		      call 'erlang':'get'
			  ('send')
		  in  do  %% Line 659
			  call 'erlang':'put'
			      ('send', [{Pid,From,Name,'test3844zty'}|Wait])
			  %% Line 660
			  {'noreply',S}
	  %% Line 661
	  <{'send_test',_X_Name,_X_Msg},_X_From,S> when 'true' ->
	      %% Line 662
	      {'reply',{'error','illegal_function_call'},S}
	  %% Line 663
	  <{'whereis_name_test','test3844zty'},From,S> when 'true' ->
	      let <Pid> =
		  %% Line 664
		  call 'global_search':'start'
		      ('whereis_test', 'test3844zty')
	      in  let <Wait> =
		      %% Line 665
		      call 'erlang':'get'
			  ('whereis_name')
		  in  do  %% Line 666
			  call 'erlang':'put'
			      ('whereis_name', [{Pid,From}|Wait])
			  %% Line 667
			  {'noreply',S}
	  %% Line 668
	  <{'whereis_name_test',_X_Name},_X_From,S> when 'true' ->
	      %% Line 669
	      {'reply',{'error','illegal_function_call'},S}
	  %% Line 671
	  <Call,_X_From,S> when 'true' ->
	      %% Line 673
	      {'reply',{'illegal_message',Call},S}
	end
'handle_cast'/2 =
    %% Line 685
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'registered_names',User},S> when 'true' ->
	      let <Res> =
		  %% Line 687
		  call 'global':'registered_names'
		      ()
	      in  do  %% Line 688
		      call 'erlang':'!'
			  (User, {'registered_names_res',Res})
		      %% Line 689
		      {'noreply',S}
	  %% Line 691
	  <{'registered_names_res',Result,Pid,From},S> when 'true' ->
	      do  %% Line 693
		  call 'erlang':'unlink'
		      (Pid)
		  do  %% Line 694
		      call 'erlang':'exit'
			  (Pid, 'normal')
		      let <Wait> =
			  %% Line 695
			  call 'erlang':'get'
			      ('registered_names')
		      in  let <NewWait> =
			      %% Line 696
			      call 'lists':'delete'
				  ({Pid,From}, Wait)
			  in  do  %% Line 697
				  call 'erlang':'put'
				      ('registered_names', NewWait)
				  do  %% Line 698
				      call 'gen_server':'reply'
					  (From, Result)
				      %% Line 699
				      {'noreply',S}
	  %% Line 711
	  <{'send_res',Result,Name,Msg,Pid,From},S> when 'true' ->
	      do  %% Line 713
		  case Result of
		    %% Line 714
		    <{'badarg',{_cor80,_cor81}}>
			when let <_cor82> =
			      call 'erlang':'=:='
				  (_cor80, Name)
			  in  let <_cor83> =
				  call 'erlang':'=:='
				      (_cor81, Msg)
			      in  call 'erlang':'and'
				      (_cor82, _cor83) ->
			'ok'
		    %% Line 716
		    <ToPid> when 'true' ->
			%% Line 717
			call 'erlang':'!'
			    (ToPid, Msg)
		  end
		  do  %% Line 719
		      call 'erlang':'unlink'
			  (Pid)
		      do  %% Line 720
			  call 'erlang':'exit'
			      (Pid, 'normal')
			  let <Wait> =
			      %% Line 721
			      call 'erlang':'get'
				  ('send')
			  in  let <NewWait> =
				  %% Line 722
				  call 'lists':'delete'
				      ({Pid,From,Name,Msg}, Wait)
			      in  do  %% Line 723
				      call 'erlang':'put'
					  ('send', NewWait)
				      do  %% Line 724
					  call 'gen_server':'reply'
					      (From, Result)
					  %% Line 725
					  {'noreply',S}
	  %% Line 732
	  <{'find_name',User,Name},S> when 'true' ->
	      let <Res> =
		  %% Line 733
		  call 'global':'whereis_name'
		      (Name)
	      in  do  %% Line 735
		      call 'erlang':'!'
			  (User, {'find_name_res',Res})
		      %% Line 736
		      {'noreply',S}
	  %% Line 746
	  <{'find_name_res',Result,Pid,From},S> when 'true' ->
	      do  %% Line 749
		  call 'erlang':'unlink'
		      (Pid)
		  do  %% Line 750
		      call 'erlang':'exit'
			  (Pid, 'normal')
		      let <Wait> =
			  %% Line 751
			  call 'erlang':'get'
			      ('whereis_name')
		      in  let <NewWait> =
			      %% Line 752
			      call 'lists':'delete'
				  ({Pid,From}, Wait)
			  in  do  %% Line 753
				  call 'erlang':'put'
				      ('whereis_name', NewWait)
				  do  %% Line 754
				      call 'gen_server':'reply'
					  (From, Result)
				      %% Line 755
				      {'noreply',S}
	  %% Line 761
	  <{'synced',NoContact},S> when 'true' ->
	      do  %% Line 763
		  apply 'kill_global_group_check'/0
		      ()
		  let <_cor12> =
		      %% Line 764
		      apply 'get_own_nodes'/0
			  ()
		  in  let <_cor11> =
			  %% Line 764
			  call 'erlang':'node'
			      ()
		      in  let <Nodes> =
			      %% Line 764
			      call 'erlang':'--'
				  (_cor12, [_cor11|NoContact])
			  in  let <_rec78> =
				  %% Line 765
				  call 'lists':'sort'
				      (Nodes)
			      in  %% Line 765
				  case S of
				    <{'state',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94}> when 'true' ->
					let <_cor16> =
					    %% Line 766
					    call 'erlang':'setelement'
						(7, S, [])
					in  let <_cor17> =
						%% Line 767
						call 'erlang':'setelement'
						    (6, _cor16, NoContact)
					    in  let <_cor19> =
						    call 'erlang':'setelement'
							(5, _cor17, _rec78)
						in  {'noreply',_cor19}
				    ( <_cor95> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
	  %% Line 773
	  <{'sync_error',NoContact,ErrorNodes},S> when 'true' ->
	      let <Txt> =
		  %% Line 775
		  call 'io_lib':'format'
		      ([71|[108|[111|[98|[97|[108|[32|[103|[114|[111|[117|[112|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[121|[110|[99|[104|[114|[111|[110|[105|[122|[101|[32|[119|[105|[116|[104|[32|[116|[104|[101|[115|[101|[32|[110|[111|[100|[101|[115|[32|[126|[112|[126|[110|[98|[101|[99|[97|[117|[115|[101|[32|[103|[108|[111|[98|[97|[108|[95|[103|[114|[111|[117|[112|[115|[32|[119|[101|[114|[101|[32|[110|[111|[116|[32|[105|[110|[32|[97|[103|[114|[101|[101|[109|[101|[110|[116|[46|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 776
																																																																													    [ErrorNodes|[]])
	      in  do  %% Line 777
		      call 'error_logger':'error_report'
			  (Txt)
		      do  %% Line 778
			  apply 'kill_global_group_check'/0
			      ()
			  let <_cor22> =
			      %% Line 779
			      apply 'get_own_nodes'/0
				  ()
			  in  let <_cor21> =
				  %% Line 779
				  call 'erlang':'node'
				      ()
			      in  let <_cor23> =
				      %% Line 779
				      call 'erlang':'--'
					  (_cor22, [_cor21|NoContact])
				  in  let <Nodes> =
					  %% Line 779
					  call 'erlang':'--'
					      (_cor23, ErrorNodes)
				      in  let <_rec80> =
					      %% Line 780
					      call 'lists':'sort'
						  (Nodes)
					  in  %% Line 780
					      case S of
						<{'state',_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}> when 'true' ->
						    let <_cor27> =
							%% Line 781
							call 'erlang':'setelement'
							    (7, S, ErrorNodes)
						    in  let <_cor28> =
							    %% Line 782
							    call 'erlang':'setelement'
								(6, _cor27, NoContact)
							in  let <_cor30> =
								call 'erlang':'setelement'
								    (5, _cor28, _rec80)
							    in  {'noreply',_cor30}
						( <_cor107> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
	  %% Line 788
	  <{'conf_check',Vsn,Node,From,'sync',CCName,CCNodes},S> when 'true' ->
	      %% Line 789
	      apply 'handle_cast'/2
		  ({'conf_check',Vsn,Node,From,'sync',CCName,'normal',CCNodes}, S)
	  %% Line 791
	  <{'conf_check',Vsn,Node,From,'sync',CCName,PubType,CCNodes},S> when 'true' ->
	      %% Line 792
	      ( case S of
		  ( <( {'state',_cor108,_cor109,_cor110,_rec82,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor76> =
			    %% Line 797
			    case call 'application':'get_env'
				     ('kernel', 'global_groups') of
			      %% Line 798
			      <'undefined'> when 'true' ->
				  do  %% Line 800
				      apply 'update_publish_nodes'/1
					  (_cor116)
				      do  %% Line 801
					  apply 'disconnect_nodes'/1
					      ([Node|[]])
					  let <_cor36> =
					      %% Line 802
					      call 'erlang':'node'
						  ()
					  in  do  %% Line 802
						  call 'erlang':'!'
						      ({'global_group_check',Node}, {'config_error',Vsn,From,_cor36})
						  %% Line 803
						  S
			      %% Line 804
			      <{'ok',[]}> when 'true' ->
				  do  %% Line 806
				      apply 'update_publish_nodes'/1
					  (_cor116)
				      do  %% Line 807
					  apply 'disconnect_nodes'/1
					      ([Node|[]])
					  let <_cor39> =
					      %% Line 808
					      call 'erlang':'node'
						  ()
					  in  do  %% Line 808
						  call 'erlang':'!'
						      ({'global_group_check',Node}, {'config_error',Vsn,From,_cor39})
						  %% Line 809
						  S
			      %% Line 813
			      <{'ok',NodeGrps}> when 'true' ->
				  let <_cor40> =
				      catch
					  %% Line 814
					  apply 'config_scan'/2
					      (NodeGrps, 'publish_type')
				  in  %% Line 814
				      case _cor40 of
					%% Line 815
					<{'error',_X_Error2}> when 'true' ->
					    do  %% Line 817
						apply 'disconnect_nodes'/1
						    ([Node|[]])
						let <_cor41> =
						    %% Line 818
						    call 'erlang':'node'
							()
						in  do  %% Line 818
							call 'erlang':'!'
							    ({'global_group_check',Node}, {'config_error',Vsn,From,_cor41})
							let <_rec85> =
							    %% Line 819
							    call 'lists':'delete'
								(Node, _rec82)
							in  %% Line 819
							    call 'erlang':'setelement'
								(5, S, _rec85)
					%% Line 821
					<{_cor153,_cor154,_cor155,_X_OtherDef}>
					    when let <_cor158> =
						  call 'erlang':'=:='
						      (_cor153, CCName)
					      in  let <_cor156> =
						      call 'erlang':'=:='
							  (_cor154, PubType)
						  in  let <_cor157> =
							  call 'erlang':'=:='
							      (_cor155, CCNodes)
						      in  let <_cor159> =
							      call 'erlang':'and'
								  (_cor156, _cor157)
							  in  call 'erlang':'and'
								  (_cor158, _cor159) ->
					    do  %% Line 823
						apply 'update_publish_nodes'/2
						    (_cor116, {PubType,CCNodes})
						do  %% Line 824
						    call 'erlang':'!'
							('global_name_server', {'nodeup',Node})
						    let <_cor47> =
							%% Line 825
							call 'erlang':'node'
							    ()
						    in  do  %% Line 825
							    call 'erlang':'!'
								({'global_group_check',Node}, {'config_ok',Vsn,From,_cor47})
							    %% Line 826
							    case call 'lists':'member'
								     (Node, _rec82) of
							      %% Line 827
							      <'false'> when 'true' ->
								  let <NewNodes> =
								      %% Line 828
								      call 'lists':'sort'
									  ([Node|_rec82])
								  in  let <NSE> =
									  %% Line 829
									  call 'lists':'delete'
									      (Node, _cor112)
								      in  let <NNC> =
									      %% Line 830
									      call 'lists':'delete'
										  (Node, _cor111)
									  in  let <_cor56> =
										  %% Line 832
										  call 'erlang':'setelement'
										      (7, S, NSE)
									      in  let <_cor57> =
										      %% Line 833
										      call 'erlang':'setelement'
											  (6, _cor56, NNC)
										  in  %% Line 831
										      call 'erlang':'setelement'
											  (5, _cor57, NewNodes)
							      %% Line 834
							      <'true'> when 'true' ->
								  %% Line 835
								  S
							      ( <_cor59> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor59})
								-| ['compiler_generated'] )
							    end
					%% Line 837
					<_cor205> when 'true' ->
					    do  %% Line 839
						apply 'disconnect_nodes'/1
						    ([Node|[]])
						let <_cor60> =
						    %% Line 840
						    call 'erlang':'node'
							()
						in  do  %% Line 840
							call 'erlang':'!'
							    ({'global_group_check',Node}, {'config_error',Vsn,From,_cor60})
							let <NN> =
							    %% Line 841
							    call 'lists':'delete'
								(Node, _rec82)
							in  let <NSE> =
								%% Line 842
								call 'lists':'delete'
								    (Node, _cor112)
							    in  let <NNC> =
								    %% Line 843
								    call 'lists':'delete'
									(Node, _cor111)
								in  let <_cor71> =
									%% Line 845
									call 'erlang':'setelement'
									    (7, S, NSE)
								    in  let <_cor72> =
									    %% Line 846
									    call 'erlang':'setelement'
										(6, _cor71, NNC)
									in  %% Line 844
									    call 'erlang':'setelement'
										(5, _cor72, NN)
				      end
			      ( <_cor75> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor75})
				-| ['compiler_generated'] )
			    end
			in  %% Line 849
			    {'noreply',_cor76}
		    -| ['compiler_generated'] )
		  ( <_cor118> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 852
	  <_X_Cast,S> when 'true' ->
	      %% Line 854
	      {'noreply',S}
	end
'handle_info'/2 =
    %% Line 863
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'nodeup',Node},S = {'state',_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132}>
	      when call 'erlang':'=:='
		    (_cor122,
		     'no_conf') ->
	      do  %% Line 865
		  apply 'send_monitor'/3
		      (_cor130, {'nodeup',Node}, _cor122)
		  do  %% Line 866
		      call 'erlang':'!'
			  ('global_name_server', {'nodeup',Node})
		      %% Line 867
		      {'noreply',S}
	  %% Line 868
	  <{'nodeup',Node},S> when 'true' ->
	      %% Line 870
	      ( case S of
		  ( <( {'state',_rec97,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor18> =
			    case _rec97 of
			      %% Line 871
			      <'synced'> when 'true' ->
				  let <_cor14> =
				      catch
					  %% Line 872
					  call 'rpc':'call'
					      (Node, 'global_group', 'get_own_nodes', [])
				  in  %% Line 873
				      case _cor14 of
					%% Line 874
					<_cor166>
					    when call 'erlang':'is_list'
						  (_cor14) ->
					    %% Line 875
					    call 'lists':'sort'
						(_cor14)
					%% Line 876
					<_cor169> when 'true' ->
					    %% Line 877
					    []
				      end
			      %% Line 879
			      <'no_conf'> when 'true' ->
				  %% Line 880
				  []
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
			in  let <NNC> =
				%% Line 883
				call 'lists':'delete'
				    (Node, _cor158)
			    in  let <NSE> =
				    %% Line 884
				    call 'lists':'delete'
					(Node, _cor159)
				in  let <OwnNG> =
					%% Line 885
					apply 'get_own_nodes'/0
					    ()
				    in  %% Line 886
					case OwnNG of
					  %% Line 887
					  <_cor192>
					      when call 'erlang':'=:='
						    (OwnNG,
						     _cor18) ->
					      do  %% Line 888
						  apply 'send_monitor'/3
						      (_cor162, {'nodeup',Node}, _rec97)
						  do  %% Line 889
						      call 'erlang':'!'
							  ('global_name_server', {'nodeup',Node})
						      %% Line 890
						      case call 'lists':'member'
							       (Node, _cor157) of
							%% Line 891
							<'false'> when 'true' ->
							    let <NN> =
								%% Line 892
								call 'lists':'sort'
								    ([Node|_cor157])
							    in  let <_cor37> =
								    %% Line 895
								    call 'erlang':'setelement'
									(7, S, NSE)
								in  let <_cor38> =
									%% Line 894
									call 'erlang':'setelement'
									    (6, _cor37, NNC)
								    in  let <_cor40> =
									    %% Line 893
									    call 'erlang':'setelement'
										(5, _cor38, NN)
									in  %% Line 893
									    {'noreply',_cor40}
							%% Line 896
							<'true'> when 'true' ->
							    let <_cor42> =
								%% Line 898
								call 'erlang':'setelement'
								    (7, S, NSE)
							    in  let <_cor44> =
								    %% Line 897
								    call 'erlang':'setelement'
									(6, _cor42, NNC)
								in  %% Line 897
								    {'noreply',_cor44}
							( <_cor45> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor45})
							  -| ['compiler_generated'] )
						      end
					  %% Line 900
					  <_cor261> when 'true' ->
					      let <_cor49> =
						  %% Line 901
						  apply 'get_own_nodes'/0
						      ()
					      in  let <_cor50> =
						      %% Line 901
						      call 'lists':'member'
							  (Node, _cor49)
						  in  let <_cor48> =
							  %% Line 902
							  call 'lists':'member'
							      (Node, _cor159)
						      in  %% Line 901
							  case <_cor50,_cor48> of
							    %% Line 903
							    <'true','false'> when 'true' ->
								let <NSE2> =
								    %% Line 904
								    call 'lists':'sort'
									([Node|_cor159])
								in  let <_cor55> =
									%% Line 906
									call 'erlang':'setelement'
									    (7, S, NSE2)
								    in  let <_cor57> =
									    %% Line 905
									    call 'erlang':'setelement'
										(6, _cor55, NNC)
									in  %% Line 905
									    {'noreply',_cor57}
							    %% Line 907
							    <_fol877,_fol878> when 'true' ->
								%% Line 908
								{'noreply',S}
							  end
					end
		    -| ['compiler_generated'] )
		  ( <_cor165> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 919
	  <{'nodedown',Node},S = {'state',_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307}>
	      when call 'erlang':'=:='
		    (_cor297,
		     'no_conf') ->
	      do  %% Line 921
		  apply 'send_monitor'/3
		      (_cor305, {'nodedown',Node}, _cor297)
		  do  %% Line 922
		      call 'erlang':'!'
			  ('global_name_server', {'nodedown',Node})
		      %% Line 923
		      {'noreply',S}
	  %% Line 924
	  <{'nodedown',Node},S> when 'true' ->
	      %% Line 926
	      ( case S of
		  ( <( {'state',_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_rec111,_cor338,_cor339}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'send_monitor'/3
				(_rec111, {'nodedown',Node}, _cor330)
			    do  %% Line 927
				call 'erlang':'!'
				    ('global_name_server', {'nodedown',Node})
				let <NN> =
				    %% Line 928
				    call 'lists':'delete'
					(Node, _cor333)
				in  let <NSE> =
					%% Line 929
					call 'lists':'delete'
					    (Node, _cor335)
				    in  let <_cor83> =
					    %% Line 930
					    apply 'get_own_nodes'/0
						()
					in  let <_cor84> =
						%% Line 930
						call 'lists':'member'
						    (Node, _cor83)
					    in  let <_cor82> =
						    %% Line 931
						    call 'lists':'member'
							(Node, _cor334)
						in  let <_cor89> =
							%% Line 930
							case <_cor84,_cor82> of
							  %% Line 932
							  <'true','false'> when 'true' ->
							      %% Line 933
							      [Node|_cor334]
							  %% Line 934
							  <_fol1065,_fol1066> when 'true' ->
							      _cor334
							end
						    in  let <_cor92> =
							    %% Line 937
							    call 'erlang':'setelement'
								(7, S, NSE)
							in  let <_cor93> =
								%% Line 937
								call 'erlang':'setelement'
								    (6, _cor92, _cor89)
							    in  let <_cor95> =
								    %% Line 937
								    call 'erlang':'setelement'
									(5, _cor93, NN)
								in  %% Line 937
								    {'noreply',_cor95}
		    -| ['compiler_generated'] )
		  ( <_cor340> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 944
	  <{'disconnect_node',Node},S> when 'true' ->
	      %% Line 946
	      ( case S of
		  ( <( {'state',_rec119,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor98> =
			    call 'lists':'member'
				(Node, _cor422)
			in  do  case <_rec119,_cor98> of
				  %% Line 947
				  <'synced','true'> when 'true' ->
				      %% Line 948
				      apply 'send_monitor'/3
					  (_cor427, {'nodedown',Node}, _rec119)
				  %% Line 949
				  <_fol1299,_fol1300> when 'true' ->
				      'ok'
				end
				do  %% Line 952
				    call 'erlang':'!'
					('global_name_server', {'nodedown',Node})
				    let <NN> =
					%% Line 954
					call 'lists':'delete'
					    (Node, _cor422)
				    in  let <NNC> =
					    %% Line 955
					    call 'lists':'delete'
						(Node, _cor423)
					in  let <NSE> =
						%% Line 956
						call 'lists':'delete'
						    (Node, _cor424)
					    in  let <_cor116> =
						    %% Line 957
						    call 'erlang':'setelement'
							(7, S, NSE)
						in  let <_cor117> =
							%% Line 957
							call 'erlang':'setelement'
							    (6, _cor116, NNC)
						    in  let <_cor119> =
							    %% Line 957
							    call 'erlang':'setelement'
								(5, _cor117, NN)
							in  %% Line 957
							    {'noreply',_cor119}
		    -| ['compiler_generated'] )
		  ( <_cor430> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 962
	  <{'EXIT',ExitPid,Reason},S> when 'true' ->
	      do  %% Line 963
		  apply 'check_exit'/2
		      (ExitPid, Reason)
		  %% Line 964
		  {'noreply',S}
	  %% Line 967
	  <_X_Info,S> when 'true' ->
	      %% Line 969
	      {'noreply',S}
	end
'terminate'/2 =
    %% Line 973
    fun (_cor1,_cor0) ->
	%% Line 974
	'ok'
'code_change'/3 =
    %% Line 977
    fun (_cor2,_cor1,_cor0) ->
	%% Line 978
	{'ok',_cor1}
'config_scan'/1 =
    %% Line 988
    fun (_cor0) ->
	%% Line 989
	apply 'config_scan'/2
	    (_cor0, 'original')
'config_scan'/2 =
    %% Line 991
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NodeGrps,'original'> when 'true' ->
	      %% Line 992
	      case apply 'config_scan'/2
		       (NodeGrps, 'publish_type') of
		%% Line 993
		<{DefGroupName,_cor6,DefNodes,DefOther}> when 'true' ->
		    %% Line 994
		    {DefGroupName,DefNodes,DefOther}
		%% Line 995
		<Error> when 'true' ->
		    %% Line 996
		    Error
	      end
	  %% Line 998
	  <NodeGrps,'publish_type'> when 'true' ->
	      let <_cor3> =
		  %% Line 999
		  call 'erlang':'node'
		      ()
	      in  %% Line 999
		  apply 'config_scan'/6
		      (_cor3, 'normal', NodeGrps, 'no_name', [], [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'config_scan',2}}] )
	    -| ['compiler_generated'] )
	end
'config_scan'/6 =
    %% Line 1001
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_MyNode,PubType,[],Own_name,OwnNodes,OtherNodeGrps> when 'true' ->
	      let <_cor7> =
		  %% Line 1002
		  call 'lists':'sort'
		      (OwnNodes)
	      in  let <_cor6> =
		      %% Line 1002
		      call 'lists':'reverse'
			  (OtherNodeGrps)
		  in  %% Line 1002
		      {Own_name,PubType,_cor7,_cor6}
	  %% Line 1003
	  <MyNode,PubType,[GrpTuple|NodeGrps],Own_name,OwnNodes,OtherNodeGrps> when 'true' ->
	      %% Line 1004
	      case apply 'grp_tuple'/1
		       (GrpTuple) of
		<{Name,PubTypeGroup,Nodes}> when 'true' ->
		    %% Line 1005
		    case call 'lists':'member'
			     (MyNode, Nodes) of
		      %% Line 1006
		      <'true'> when 'true' ->
			  %% Line 1007
			  case Own_name of
			    %% Line 1008
			    <'no_name'> when 'true' ->
				%% Line 1009
				apply 'config_scan'/6
				    (MyNode, PubTypeGroup, NodeGrps, Name, Nodes, OtherNodeGrps)
			    %% Line 1010
			    <_cor17> when 'true' ->
				%% Line 1011
				{'error',{'node defined twice',{Own_name,Name}}}
			  end
		      %% Line 1013
		      <'false'> when 'true' ->
			  %% Line 1014
			  apply 'config_scan'/6
			      (MyNode, PubType, NodeGrps, Own_name, OwnNodes, %% Line 1015
									      [{Name,Nodes}|OtherNodeGrps])
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'config_scan',6}}] )
	    -| ['compiler_generated'] )
	end
'grp_tuple'/1 =
    %% Line 1018
    fun (_cor0) ->
	case _cor0 of
	  <{Name,Nodes}> when 'true' ->
	      %% Line 1019
	      {Name,'normal',Nodes}
	  %% Line 1020
	  <{Name,'hidden',Nodes}> when 'true' ->
	      %% Line 1021
	      {Name,'hidden',Nodes}
	  %% Line 1022
	  <{Name,'normal',Nodes}> when 'true' ->
	      %% Line 1023
	      {Name,'normal',Nodes}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'grp_tuple',1}}] )
	    -| ['compiler_generated'] )
	end
'sync_init'/4 =
    %% Line 1031
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1032
	    call 'erlang':'node'
		()
	in  let <_cor5> =
		%% Line 1032
		call 'lists':'delete'
		    (_cor4, _cor0)
	    in  %% Line 1032
		case apply 'sync_check_node'/3
			 (_cor5, [], []) of
		  <{Up,Down}> when 'true' ->
		      %% Line 1033
		      apply 'sync_check_init'/6
			  (_cor3, Up, _cor2, _cor0, Down, _cor1)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'sync_check_node'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Up,Down> when 'true' ->
	      %% Line 1036
	      {Up,Down}
	  %% Line 1037
	  <[Node|Nodes],Up,Down> when 'true' ->
	      %% Line 1038
	      case call 'net_adm':'ping'
		       (Node) of
		%% Line 1039
		<'pang'> when 'true' ->
		    %% Line 1040
		    apply 'sync_check_node'/3
			(Nodes, Up, [Node|Down])
		%% Line 1041
		<'pong'> when 'true' ->
		    %% Line 1042
		    apply 'sync_check_node'/3
			(Nodes, [Node|Up], Down)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'sync_check_node',3}}] )
	    -| ['compiler_generated'] )
	end
'sync_check_init'/6 =
    %% Line 1052
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1053
	apply 'sync_check_init'/8
	    (_cor5, _cor4, _cor3, _cor2, 3, [], _cor1, _cor0)
'sync_check_init'/8 =
    %% Line 1056
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Type,NoContact,_X_Cname,_X_Nodes,0,ErrorNodes,Down,_X_PubType> when 'true' ->
	      do  %% Line 1057
		  case ErrorNodes of
		    %% Line 1058
		    <[]> when 'true' ->
			let <_cor8> =
			    %% Line 1059
			    call 'erlang':'++'
				(NoContact, Down)
			in  let <_cor9> =
				%% Line 1059
				call 'lists':'sort'
				    (_cor8)
			    in  %% Line 1059
				call 'gen_server':'cast'
				    ('global_group', {'synced',_cor9})
		    %% Line 1060
		    <_cor35> when 'true' ->
			let <_cor10> =
			    %% Line 1061
			    call 'erlang':'++'
				(NoContact, Down)
			in  let <_cor11> =
				%% Line 1061
				call 'lists':'sort'
				    (_cor10)
			    in  %% Line 1061
				call 'gen_server':'cast'
				    ('global_group', {'sync_error',_cor11,%% Line 1062
									  ErrorNodes})
		  end
		  %% Line 1064
		  receive
		    %% Line 1065
		    <'kill'> when 'true' ->
			%% Line 1066
			call 'erlang':'exit'
			    ('normal')
		  after %% Line 1067
			5000 ->
		    %% Line 1068
		    call 'erlang':'exit'
			('normal')
	  %% Line 1071
	  <Type,Up,Cname,Nodes,N,ErrorNodes,Down,PubType> when 'true' ->
	      let <_cor18> =
		  %% Line 1072
		  case PubType of
		    %% Line 1073
		    <'normal'> when 'true' ->
			let <_cor14> =
			    %% Line 1074
			    call 'erlang':'node'
				()
			in  let <_cor13> =
				%% Line 1074
				call 'erlang':'self'
				    ()
			    in  %% Line 1074
				{'conf_check',2,_cor14,_cor13,Type,Cname,Nodes}
		    %% Line 1075
		    <_cor36> when 'true' ->
			let <_cor16> =
			    %% Line 1076
			    call 'erlang':'node'
				()
			in  let <_cor15> =
				%% Line 1076
				call 'erlang':'self'
				    ()
			    in  %% Line 1076
				{'conf_check',2,_cor16,_cor15,Type,Cname,PubType,Nodes}
		  end
	      in  let <_cor22> =
		      %% Line 1078
		      ( fun (_cor20) ->
			    %% Line 1079
			    call 'gen_server':'cast'
				({'global_group',_cor20}, _cor18)
			-| [{'id',{0,0,'-sync_check_init/8-fun-0-'}}] )
		  in  do  %% Line 1078
			  call 'lists':'foreach'
			      (_cor22, %% Line 1080
				       Up)
			  %% Line 1081
			  case apply 'sync_check'/1
				   (Up) of
			    %% Line 1082
			    <{'ok','synced'}> when 'true' ->
				%% Line 1083
				apply 'sync_check_init'/8
				    (Type, [], Cname, Nodes, 0, ErrorNodes, Down, PubType)
			    %% Line 1084
			    <{'error',NewErrorNodes}> when 'true' ->
				let <_cor23> =
				    %% Line 1085
				    call 'erlang':'++'
					(ErrorNodes, NewErrorNodes)
				in  %% Line 1085
				    apply 'sync_check_init'/8
					(Type, [], Cname, Nodes, 0, _cor23, Down, PubType)
			    %% Line 1086
			    <{'more',Rem,NewErrorNodes}> when 'true' ->
				let <_cor25> =
				    %% Line 1089
				    call 'erlang':'-'
					(N, 1)
				in  let <_cor24> =
					%% Line 1089
					call 'erlang':'++'
					    (ErrorNodes, NewErrorNodes)
				    in  %% Line 1089
					apply 'sync_check_init'/8
					    (Type, Rem, Cname, Nodes, _cor25, _cor24, Down, PubType)
			    ( <_cor26> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor26})
			      -| ['compiler_generated'] )
			  end
	end
'sync_check'/1 =
    %% Line 1092
    fun (_cor0) ->
	%% Line 1093
	apply 'sync_check'/3
	    (_cor0, _cor0, [])
'sync_check'/3 =
    %% Line 1095
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Up,[]> when 'true' ->
	      %% Line 1096
	      {'ok','synced'}
	  %% Line 1097
	  <[],_X_Up,ErrorNodes> when 'true' ->
	      %% Line 1098
	      {'error',ErrorNodes}
	  %% Line 1099
	  <Rem,Up,ErrorNodes> when 'true' ->
	      %% Line 1100
	      receive
		%% Line 1101
		<{'config_ok',2,Pid,Node}>
		    when try
			  let <_cor3> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=:='
				  (Pid, _cor3)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    do  %% Line 1102
			call 'erlang':'!'
			    ('global_name_server', {'nodeup',Node})
			let <_cor4> =
			    %% Line 1103
			    call 'erlang':'--'
				(Rem, [Node|[]])
			in  %% Line 1103
			    apply 'sync_check'/3
				(_cor4, Up, ErrorNodes)
		%% Line 1104
		<{'config_error',2,Pid,Node}>
		    when try
			  let <_cor5> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=:='
				  (Pid, _cor5)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor6> =
			%% Line 1105
			call 'erlang':'--'
			    (Rem, [Node|[]])
		    in  %% Line 1105
			apply 'sync_check'/3
			    (_cor6, Up, [Node|ErrorNodes])
		%% Line 1106
		<{'no_global_group_configuration',2,Pid,Node}>
		    when try
			  let <_cor7> =
			      call 'erlang':'self'
				  ()
			  in  call 'erlang':'=:='
				  (Pid, _cor7)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor8> =
			%% Line 1107
			call 'erlang':'--'
			    (Rem, [Node|[]])
		    in  %% Line 1107
			apply 'sync_check'/3
			    (_cor8, Up, [Node|ErrorNodes])
		%% Line 1109
		<_cor12> when 'true' ->
		    %% Line 1110
		    apply 'sync_check'/3
			(Rem, Up, ErrorNodes)
	      after %% Line 1111
		    2000 ->
		%% Line 1114
		{'more',Rem,ErrorNodes}
	end
'monitor_nodes'/3 =
    %% Line 1121
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',Pid,State> when 'true' ->
	      do  %% Line 1122
		  call 'erlang':'link'
		      (Pid)
		  %% Line 1123
		  ( case State of
		      ( <( {'state',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec127,_cor29,_cor30}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec128> =
				%% Line 1124
				[Pid|_rec127]
			    in  let <_cor9> =
				    %% Line 1124
				    call 'erlang':'setelement'
					(10, State, _rec128)
				in  %% Line 1124
				    {'ok',_cor9}
			-| ['compiler_generated'] )
		      ( <_cor31> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1125
	  <'false',Pid,State> when 'true' ->
	      %% Line 1126
	      ( case State of
		  ( <( {'state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_rec130,_cor52,_cor53}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec131> =
			    %% Line 1127
			    apply 'delete_all'/2
				(Pid, _rec130)
			in  let <_cor16> =
				%% Line 1127
				call 'erlang':'setelement'
				    (10, State, _rec131)
			    in  do  %% Line 1128
				    apply 'do_unlink'/2
					(Pid, _cor16)
				    %% Line 1129
				    {'ok',_cor16}
		    -| ['compiler_generated'] )
		  ( <_cor54> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1130
	  <_cor67,_cor68,State> when 'true' ->
	      %% Line 1131
	      {'error',State}
	end
'delete_all'/2 =
    %% Line 1133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <From,[_cor5|Tail]>
	      when call 'erlang':'=:='
		    (_cor5,
		     From) ->
	      apply 'delete_all'/2
		  (From, Tail)
	  %% Line 1134
	  <From,[H|Tail]> when 'true' ->
	      let <_cor2> =
		  apply 'delete_all'/2
		      (From, Tail)
	      in  [H|_cor2]
	  %% Line 1135
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete_all',2}}] )
	    -| ['compiler_generated'] )
	end
'do_unlink'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	%% Line 1139
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec133,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   (_cor1, _rec133) of
		    %% Line 1140
		    <'true'> when 'true' ->
			%% Line 1141
			'false'
		    %% Line 1142
		    <_cor18> when 'true' ->
			%% Line 1144
			call 'erlang':'unlink'
			    (_cor1)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'send_monitor'/3 =
    %% Line 1152
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P|T],M,'no_conf'> when 'true' ->
	      let <_X_> =
		  %% Line 1153
		  apply 'safesend_nc'/2
		      (P, M)
	      in  %% Line 1154
		  apply 'send_monitor'/3
		      (T, M, 'no_conf')
	  %% Line 1155
	  <[P|T],M,SyncState> when 'true' ->
	      let <_X_> =
		  %% Line 1156
		  apply 'safesend'/2
		      (P, M)
	      in  %% Line 1157
		  apply 'send_monitor'/3
		      (T, M, SyncState)
	  %% Line 1158
	  <[],_cor8,_cor9> when 'true' ->
	      %% Line 1159
	      'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'send_monitor',3}}] )
	    -| ['compiler_generated'] )
	end
'safesend'/2 =
    %% Line 1161
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{Msg,Node}>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor2> =
		  %% Line 1162
		  apply 'get_own_nodes'/0
		      ()
	      in  %% Line 1162
		  case call 'lists':'member'
			   (Node, _cor2) of
		    %% Line 1163
		    <'true'> when 'true' ->
			%% Line 1164
			case call 'erlang':'whereis'
				 (Name) of
			  %% Line 1165
			  <'undefined'> when 'true' ->
			      %% Line 1166
			      {Msg,Node}
			  %% Line 1167
			  <P>
			      when call 'erlang':'is_pid'
				    (P) ->
			      %% Line 1168
			      call 'erlang':'!'
				  (P, {Msg,Node})
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1170
		    <'false'> when 'true' ->
			%% Line 1171
			'not_own_group'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1173
	  <Pid,{Msg,Node}> when 'true' ->
	      let <_cor5> =
		  %% Line 1174
		  apply 'get_own_nodes'/0
		      ()
	      in  %% Line 1174
		  case call 'lists':'member'
			   (Node, _cor5) of
		    %% Line 1175
		    <'true'> when 'true' ->
			%% Line 1176
			call 'erlang':'!'
			    (Pid, {Msg,Node})
		    %% Line 1177
		    <'false'> when 'true' ->
			%% Line 1178
			'not_own_group'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'safesend',2}}] )
	    -| ['compiler_generated'] )
	end
'safesend_nc'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{Msg,Node}>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1182
	      case call 'erlang':'whereis'
		       (Name) of
		%% Line 1183
		<'undefined'> when 'true' ->
		    %% Line 1184
		    {Msg,Node}
		%% Line 1185
		<P>
		    when call 'erlang':'is_pid'
			  (P) ->
		    %% Line 1186
		    call 'erlang':'!'
			(P, {Msg,Node})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1188
	  <Pid,{Msg,Node}> when 'true' ->
	      %% Line 1189
	      call 'erlang':'!'
		  (Pid, {Msg,Node})
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'safesend_nc',2}}] )
	    -| ['compiler_generated'] )
	end
'check_exit'/2 =
    %% Line 1199
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1201
	    call 'erlang':'get'
		('registered_names')
	in  do  %% Line 1201
		apply 'check_exit_reg'/3
		    (_cor2, _cor1, _cor0)
		let <_cor3> =
		    %% Line 1202
		    call 'erlang':'get'
			('send')
		in  do  %% Line 1202
			apply 'check_exit_send'/3
			    (_cor3, _cor1, _cor0)
			let <_cor4> =
			    %% Line 1203
			    call 'erlang':'get'
				('whereis_name')
			in  %% Line 1203
			    apply 'check_exit_where'/3
				(_cor4, _cor1, _cor0)
'check_exit_reg'/3 =
    %% Line 1206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_X_ExitPid,_X_Reason> when 'true' ->
	      %% Line 1207
	      'ok'
	  %% Line 1208
	  <Reg,ExitPid,Reason> when 'true' ->
	      let <_cor3> =
		  %% Line 1209
		  call 'lists':'delete'
		      ('undefined', Reg)
	      in  %% Line 1209
		  case call 'lists':'keysearch'
			   (ExitPid, 1, _cor3) of
		    %% Line 1210
		    <{'value',{_cor9,From}}>
			when call 'erlang':'=:='
			      (_cor9,
			       ExitPid) ->
			let <NewReg> =
			    %% Line 1211
			    call 'lists':'delete'
				({ExitPid,From}, Reg)
			in  do  %% Line 1212
				call 'erlang':'put'
				    ('registered_names', NewReg)
				%% Line 1213
				call 'gen_server':'reply'
				    (From, {'error',Reason})
		    %% Line 1214
		    <'false'> when 'true' ->
			%% Line 1215
			'not_found_ignored'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'check_exit_send'/3 =
    %% Line 1219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_X_ExitPid,_X_Reason> when 'true' ->
	      %% Line 1220
	      'ok'
	  %% Line 1221
	  <Send,ExitPid,_X_Reason> when 'true' ->
	      let <_cor3> =
		  %% Line 1222
		  call 'lists':'delete'
		      ('undefined', Send)
	      in  %% Line 1222
		  case call 'lists':'keysearch'
			   (ExitPid, 1, _cor3) of
		    %% Line 1223
		    <{'value',{_cor9,From,Name,Msg}}>
			when call 'erlang':'=:='
			      (_cor9,
			       ExitPid) ->
			let <NewSend> =
			    %% Line 1224
			    call 'lists':'delete'
				({ExitPid,From,Name,Msg}, Send)
			in  do  %% Line 1225
				call 'erlang':'put'
				    ('send', NewSend)
				%% Line 1226
				call 'gen_server':'reply'
				    (From, {'badarg',{Name,Msg}})
		    %% Line 1227
		    <'false'> when 'true' ->
			%% Line 1228
			'not_found_ignored'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'check_exit_where'/3 =
    %% Line 1232
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_X_ExitPid,_X_Reason> when 'true' ->
	      %% Line 1233
	      'ok'
	  %% Line 1234
	  <Where,ExitPid,Reason> when 'true' ->
	      let <_cor3> =
		  %% Line 1235
		  call 'lists':'delete'
		      ('undefined', Where)
	      in  %% Line 1235
		  case call 'lists':'keysearch'
			   (ExitPid, 1, _cor3) of
		    %% Line 1236
		    <{'value',{_cor9,From}}>
			when call 'erlang':'=:='
			      (_cor9,
			       ExitPid) ->
			let <NewWhere> =
			    %% Line 1237
			    call 'lists':'delete'
				({ExitPid,From}, Where)
			in  do  %% Line 1238
				call 'erlang':'put'
				    ('whereis_name', NewWhere)
				%% Line 1239
				call 'gen_server':'reply'
				    (From, {'error',Reason})
		    %% Line 1240
		    <'false'> when 'true' ->
			%% Line 1241
			'not_found_ignored'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'kill_global_group_check'/0 =
    %% Line 1249
    fun () ->
	%% Line 1250
	case call 'erlang':'whereis'
		 ('global_group_check') of
	  %% Line 1251
	  <'undefined'> when 'true' ->
	      %% Line 1252
	      'ok'
	  %% Line 1253
	  <Pid> when 'true' ->
	      do  %% Line 1254
		  call 'erlang':'unlink'
		      (Pid)
		  do  %% Line 1255
		      call 'erlang':'!'
			  ('global_group_check', 'kill')
		      %% Line 1256
		      call 'erlang':'unregister'
			  ('global_group_check')
	end
'disconnect_nodes'/1 =
    %% Line 1263
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1264
	    ( fun (_cor2) ->
		  let <_cor1> =
		      %% Line 1265
		      call 'erlang':'node'
			  ()
		  in  do  %% Line 1265
			  call 'erlang':'!'
			      ({'global_group',_cor2}, {'disconnect_node',_cor1})
			  %% Line 1266
			  call 'global':'node_disconnected'
			      (_cor2)
	      -| [{'id',{0,0,'-disconnect_nodes/1-fun-0-'}}] )
	in  %% Line 1264
	    call 'lists':'foreach'
		(_cor4, _cor0)
'force_nodedown'/1 =
    %% Line 1274
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1275
	    ( fun (_cor1) ->
		  do  %% Line 1276
		      call 'erlang':'disconnect_node'
			  (_cor1)
		      %% Line 1277
		      call 'global':'node_disconnected'
			  (_cor1)
	      -| [{'id',{0,0,'-force_nodedown/1-fun-0-'}}] )
	in  %% Line 1275
	    call 'lists':'foreach'
		(_cor3, _cor0)
'get_own_nodes_with_errors'/0 =
    %% Line 1285
    fun () ->
	%% Line 1286
	case call 'application':'get_env'
		 ('kernel', 'global_groups') of
	  %% Line 1287
	  <'undefined'> when 'true' ->
	      %% Line 1288
	      {'ok','all'}
	  %% Line 1289
	  <{'ok',[]}> when 'true' ->
	      %% Line 1290
	      {'ok','all'}
	  %% Line 1291
	  <{'ok',NodeGrps}> when 'true' ->
	      let <_cor0> =
		  catch
		      %% Line 1292
		      apply 'config_scan'/2
			  (NodeGrps, 'publish_type')
	      in  %% Line 1292
		  case _cor0 of
		    %% Line 1293
		    <{'error',Error}> when 'true' ->
			%% Line 1294
			{'error',Error}
		    %% Line 1295
		    <{_cor4,_cor5,NodesDef,_cor6}> when 'true' ->
			let <_cor1> =
			    %% Line 1296
			    call 'lists':'sort'
				(NodesDef)
			in  %% Line 1296
			    {'ok',_cor1}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_own_nodes'/0 =
    %% Line 1300
    fun () ->
	%% Line 1301
	case apply 'get_own_nodes_with_errors'/0
		 () of
	  %% Line 1302
	  <{'ok','all'}> when 'true' ->
	      %% Line 1303
	      []
	  %% Line 1304
	  <{'error',_cor1}> when 'true' ->
	      %% Line 1305
	      []
	  %% Line 1306
	  <{'ok',Nodes}> when 'true' ->
	      %% Line 1307
	      Nodes
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'publish_arg'/0 =
    %% Line 1313
    fun () ->
	%% Line 1314
	case call 'init':'get_argument'
		 ('hidden') of
	  %% Line 1315
	  <{'ok',[[]]}> when 'true' ->
	      %% Line 1316
	      'hidden'
	  %% Line 1317
	  <{'ok',[[[116|[114|[117|[101]]]]]]}> when 'true' ->
	      %% Line 1318
	      'hidden'
	  %% Line 1319
	  <_cor1> when 'true' ->
	      %% Line 1320
	      'normal'
	end
'own_group'/0 =
    %% Line 1327
    fun () ->
	%% Line 1328
	case call 'application':'get_env'
		 ('kernel', 'global_groups') of
	  %% Line 1329
	  <'undefined'> when 'true' ->
	      %% Line 1330
	      'no_group'
	  %% Line 1331
	  <{'ok',[]}> when 'true' ->
	      %% Line 1332
	      'no_group'
	  %% Line 1333
	  <{'ok',NodeGrps}> when 'true' ->
	      let <_cor0> =
		  catch
		      %% Line 1334
		      apply 'config_scan'/2
			  (NodeGrps, 'publish_type')
	      in  %% Line 1334
		  case _cor0 of
		    %% Line 1335
		    <{'error',_cor3}> when 'true' ->
			%% Line 1336
			'no_group'
		    %% Line 1337
		    <{_cor4,PubTpGrp,NodesDef,_cor5}> when 'true' ->
			%% Line 1338
			{PubTpGrp,NodesDef}
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'publish_on_nodes'/2 =
    %% Line 1346
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'normal','no_group'> when 'true' ->
	      %% Line 1347
	      'all'
	  %% Line 1348
	  <'hidden','no_group'> when 'true' ->
	      %% Line 1349
	      []
	  %% Line 1350
	  <'normal',{'normal',_cor4}> when 'true' ->
	      %% Line 1351
	      'all'
	  %% Line 1352
	  <'hidden',{_cor5,Nodes}> when 'true' ->
	      %% Line 1353
	      Nodes
	  %% Line 1354
	  <_cor6,{'hidden',Nodes}> when 'true' ->
	      %% Line 1355
	      Nodes
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'publish_on_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'update_publish_nodes'/1 =
    %% Line 1360
    fun (_cor0) ->
	%% Line 1361
	apply 'update_publish_nodes'/2
	    (_cor0, 'no_group')
'update_publish_nodes'/2 =
    %% Line 1362
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1363
	    apply 'publish_on_nodes'/2
		(_cor1, _cor0)
	in  %% Line 1363
	    call 'net_kernel':'update_publish_nodes'
		(_cor2)
'publish_on_nodes'/0 =
    %% Line 1369
    fun () ->
	let <_cor1> =
	    %% Line 1370
	    apply 'publish_arg'/0
		()
	in  let <_cor0> =
		%% Line 1370
		apply 'own_group'/0
		    ()
	    in  %% Line 1370
		apply 'publish_on_nodes'/2
		    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('global_group')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('global_group', _cor0)
end