module 'erts_debug' ['breakpoint'/2,
		     'df'/1,
		     'df'/2,
		     'df'/3,
		     'disassemble'/1,
		     'display'/1,
		     'dist_ext_to_term'/2,
		     'dump_links'/1,
		     'dump_monitors'/1,
		     'flat_size'/1,
		     'get_internal_state'/1,
		     'instructions'/0,
		     'lock_counters'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'same'/2,
		     'set_internal_state'/2,
		     'size'/1]
    attributes [%% Line 38
		'spec' =
		    %% Line 38
		    [{{'breakpoint',2},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'MFA'}|[{'var',38,'Flag'}]]}|[{'type',38,'non_neg_integer',[]}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'MFA'}|[{'type',39,'tuple',[{'ann_type',39,[{'var',39,'Module'}|[{'type',39,'module',[]}]]}|[{'ann_type',40,[{'var',40,'Function'}|[{'type',40,'atom',[]}]]}|[{'ann_type',41,[{'var',41,'Arity'}|[{'type',41,'union',[{'type',41,'arity',[]}|[{'atom',41,'_'}]]}]]}]]]}]]]]}|[{'type',42,'constraint',[{'atom',42,'is_subtype'}|[[{'var',42,'Flag'}|[{'type',42,'boolean',[]}]]]]}]]]]}]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'disassemble',1},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'What'}]}|[{'type',47,'union',[{'atom',47,'false'}|[{'atom',47,'undef'}|[{'var',47,'Result'}]]]}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'What'}|[{'type',48,'union',[{'var',48,'MFA'}|[{'var',48,'Address'}]]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Result'}|[{'type',49,'tuple',[{'var',49,'Address'}|[{'var',49,'Code'}|[{'var',49,'MFA'}]]]}]]]]}|[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'MFA'}|[{'type',50,'mfa',[]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Address'}|[{'type',51,'non_neg_integer',[]}]]]]}|[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Code'}|[{'type',52,'binary',[]}]]]]}]]]]]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'display',1},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Term'}]}|[{'type',57,'string',[]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Term'}|[{'type',58,'term',[]}]]]]}]]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'dist_ext_to_term',2},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'Tuple'}|[{'var',63,'Binary'}]]}|[{'type',63,'term',[]}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Tuple'}|[{'type',64,'tuple','any'}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Binary'}|[{'type',65,'binary',[]}]]]]}]]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'dump_monitors',1},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Id'}]}|[{'atom',70,'true'}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Id'}|[{'type',71,'union',[{'type',71,'pid',[]}|[{'type',71,'atom',[]}]]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'dump_links',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Id'}]}|[{'atom',76,'true'}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Id'}|[{'type',77,'union',[{'type',77,'pid',[]}|[{'type',77,'port',[]}|[{'type',77,'atom',[]}]]]}]]]]}]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'flat_size',1},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'Term'}]}|[{'type',82,'non_neg_integer',[]}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Term'}|[{'type',83,'term',[]}]]]]}]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'get_internal_state',1},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'W'}]}|[{'type',88,'term',[]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'W'}|[{'type',89,'union',[{'atom',89,'reds_left'}|[{'atom',89,'node_and_dist_references'}|[{'atom',89,'monitoring_nodes'}|[{'atom',90,'next_pid'}|[{'atom',90,'DbTable_words'}|[{'atom',90,'check_io_debug'}|[{'atom',91,'process_info_args'}|[{'atom',91,'processes'}|[{'atom',91,'processes_bif_info'}|[{'atom',92,'max_atom_out_cache_index'}|[{'atom',92,'nbalance'}|[{'atom',92,'available_internal_state'}|[{'atom',93,'force_heap_frags'}|[{'atom',93,'memory'}|[{'type',94,'tuple',[{'atom',94,'process_status'}|[{'type',94,'pid',[]}]]}|[{'type',95,'tuple',[{'atom',95,'link_list'}|[{'type',95,'union',[{'type',95,'pid',[]}|[{'type',95,'port',[]}|[{'type',95,'node',[]}]]]}]]}|[{'type',96,'tuple',[{'atom',96,'monitor_list'}|[{'type',96,'union',[{'type',96,'pid',[]}|[{'type',96,'node',[]}]]}]]}|[{'type',97,'tuple',[{'atom',97,'channel_number'}|[{'type',97,'non_neg_integer',[]}]]}|[{'type',98,'tuple',[{'atom',98,'have_pending_exit'}|[{'type',98,'union',[{'type',98,'pid',[]}|[{'type',98,'port',[]}|[{'type',98,'atom',[]}]]]}]]}|[{'type',99,'tuple',[{'atom',99,'binary_info'}|[{'type',99,'binary',[]}]]}|[{'type',100,'tuple',[{'atom',100,'term_to_binary_no_funs'}|[{'type',100,'term',[]}]]}|[{'type',101,'tuple',[{'atom',101,'dist_port'}|[{'type',101,'port',[]}]]}|[{'type',102,'tuple',[{'atom',102,'atom_out_cache_index'}|[{'type',102,'atom',[]}]]}|[{'type',103,'tuple',[{'atom',103,'fake_scheduler_bindings'}|[{'type',104,'union',[{'atom',104,'default_bind'}|[{'atom',104,'spread'}|[{'atom',104,'processor_spread'}|[{'atom',104,'thread_spread'}|[{'atom',105,'thread_no_node_processor_spread'}|[{'atom',105,'no_node_processor_spread'}|[{'atom',106,'no_node_thread_spread'}|[{'atom',106,'no_spread'}|[{'atom',106,'unbound'}]]]]]]]]]}]]}|[{'type',107,'tuple',[{'atom',107,'reader_groups_map'}|[{'type',107,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]}]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'instructions',0},[{'type',112,'fun',[{'type',112,'product',[]}|[{'type',112,'list',[{'type',112,'string',[]}]}]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'lock_counters',1},[{'type',117,'fun',[{'type',117,'product',[{'atom',117,'info'}]}|[{'type',117,'term',[]}]]}|[{'type',118,'fun',[{'type',118,'product',[{'atom',118,'clear'}]}|[{'atom',118,'ok'}]]}|[{'type',119,'fun',[{'type',119,'product',[{'type',119,'tuple',[{'atom',119,'copy_save'}|[{'type',119,'boolean',[]}]]}]}|[{'type',119,'boolean',[]}]]}|[{'type',120,'fun',[{'type',120,'product',[{'type',120,'tuple',[{'atom',120,'process_locks'}|[{'type',120,'boolean',[]}]]}]}|[{'type',120,'boolean',[]}]]}]]]]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'same',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Term1'}|[{'var',125,'Term2'}]]}|[{'type',125,'boolean',[]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Term1'}|[{'type',126,'term',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Term2'}|[{'type',127,'term',[]}]]]]}]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'set_internal_state',2},[{'type',132,'fun',[{'type',132,'product',[{'atom',132,'available_internal_state'}|[{'type',132,'boolean',[]}]]}|[{'type',132,'boolean',[]}]]}|[{'type',133,'fun',[{'type',133,'product',[{'atom',133,'reds_left'}|[{'type',133,'non_neg_integer',[]}]]}|[{'atom',133,'true'}]]}|[{'type',134,'fun',[{'type',134,'product',[{'atom',134,'block'}|[{'type',134,'non_neg_integer',[]}]]}|[{'atom',134,'true'}]]}|[{'type',135,'fun',[{'type',135,'product',[{'atom',135,'sleep'}|[{'type',135,'non_neg_integer',[]}]]}|[{'atom',135,'true'}]]}|[{'type',136,'fun',[{'type',136,'product',[{'atom',136,'block_scheduler'}|[{'type',136,'non_neg_integer',[]}]]}|[{'atom',136,'true'}]]}|[{'type',137,'fun',[{'type',137,'product',[{'atom',137,'next_pid'}|[{'type',137,'non_neg_integer',[]}]]}|[{'type',137,'union',[{'atom',137,'false'}|[{'type',137,'integer',[]}]]}]]}|[{'type',138,'fun',[{'type',138,'product',[{'atom',138,'force_gc'}|[{'type',138,'union',[{'type',138,'pid',[]}|[{'type',138,'atom',[]}]]}]]}|[{'type',138,'boolean',[]}]]}|[{'type',139,'fun',[{'type',139,'product',[{'atom',139,'send_fake_exit_signal'}|[{'type',139,'tuple',[{'type',139,'union',[{'type',139,'pid',[]}|[{'type',139,'port',[]}]]}|[{'type',139,'pid',[]}|[{'type',139,'term',[]}]]]}]]}|[{'type',139,'union',[{'atom',139,'dead'}|[{'atom',139,'message'}|[{'atom',139,'unaffected'}|[{'atom',139,'exit'}]]]]}]]}|[{'type',140,'fun',[{'type',140,'product',[{'atom',140,'colliding_names'}|[{'type',140,'tuple',[{'type',140,'atom',[]}|[{'type',140,'non_neg_integer',[]}]]}]]}|[{'type',141,'list',[{'type',141,'atom',[]}]}]]}|[{'type',142,'fun',[{'type',142,'product',[{'atom',142,'binary_loop_limit'}|[{'atom',142,'default'}]]}|[{'op',142,'-',{'integer',142,1}}]]}|[{'type',143,'fun',[{'type',143,'product',[{'atom',143,'binary_loop_limit'}|[{'type',143,'non_neg_integer',[]}]]}|[{'type',143,'non_neg_integer',[]}]]}|[{'type',144,'fun',[{'type',144,'product',[{'atom',144,'re_loop_limit'}|[{'atom',144,'default'}]]}|[{'op',144,'-',{'integer',144,1}}]]}|[{'type',145,'fun',[{'type',145,'product',[{'atom',145,'re_loop_limit'}|[{'type',145,'non_neg_integer',[]}]]}|[{'type',145,'non_neg_integer',[]}]]}|[{'type',146,'fun',[{'type',146,'product',[{'atom',146,'unicode_loop_limit'}|[{'atom',146,'default'}]]}|[{'op',146,'-',{'integer',146,1}}]]}|[{'type',147,'fun',[{'type',147,'product',[{'atom',147,'unicode_loop_limit'}|[{'type',147,'non_neg_integer',[]}]]}|[{'type',147,'non_neg_integer',[]}]]}|[{'type',148,'fun',[{'type',148,'product',[{'atom',148,'hipe_test_reschedule_suspend'}|[{'type',148,'term',[]}]]}|[{'type',148,'nil',[]}]]}|[{'type',149,'fun',[{'type',149,'product',[{'atom',149,'hipe_test_reschedule_resume'}|[{'type',149,'union',[{'type',149,'pid',[]}|[{'type',149,'port',[]}]]}]]}|[{'type',149,'boolean',[]}]]}|[{'type',150,'fun',[{'type',150,'product',[{'atom',150,'test_long_gc_sleep'}|[{'type',150,'non_neg_integer',[]}]]}|[{'atom',150,'true'}]]}|[{'type',151,'fun',[{'type',151,'product',[{'atom',151,'kill_dist_connection'}|[{'type',151,'port',[]}]]}|[{'type',151,'boolean',[]}]]}|[{'type',152,'fun',[{'type',152,'product',[{'atom',152,'not_running_optimization'}|[{'type',152,'boolean',[]}]]}|[{'type',152,'boolean',[]}]]}|[{'type',153,'fun',[{'type',153,'product',[{'atom',153,'wait'}|[{'atom',153,'deallocations'}]]}|[{'atom',153,'ok'}]]}]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'size',1},[{'type',165,'fun',[{'type',165,'product',[{'type',165,'term',[]}]}|[{'type',165,'non_neg_integer',[]}]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'is_term_seen',2},[{'type',242,'fun',[{'type',242,'product',[{'type',242,'term',[]}|[{'type',242,'list',[{'type',242,'term',[]}]}]]}|[{'type',242,'boolean',[]}]]}]}],
		%% Line 255
		'type' =
		    %% Line 255
		    [{'df_ret',{'type',255,'union',[{'atom',255,'ok'}|[{'type',255,'tuple',[{'atom',255,'error'}|[{'type',255,'tuple',[{'atom',255,'badopen'}|[{'type',255,'module',[]}]]}]]}|[{'type',255,'tuple',[{'atom',255,'undef'}|[{'type',255,'module',[]}]]}]]]},[]}],
		%% Line 257
		'spec' =
		    %% Line 257
		    [{{'df',1},[{'type',257,'fun',[{'type',257,'product',[{'type',257,'module',[]}]}|[{'type',257,'df_ret',[]}]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'df',2},[{'type',268,'fun',[{'type',268,'product',[{'type',268,'module',[]}|[{'type',268,'atom',[]}]]}|[{'type',268,'df_ret',[]}]]}]}],
		%% Line 279
		'spec' =
		    %% Line 279
		    [{{'df',3},[{'type',279,'fun',[{'type',279,'product',[{'type',279,'module',[]}|[{'type',279,'atom',[]}|[{'type',279,'arity',[]}]]]}|[{'type',279,'df_ret',[]}]]}]}]]
'breakpoint'/2 =
    %% Line 44
    fun (_cor1,_cor0) ->
	%% Line 45
	call 'erlang':'nif_error'
	    ('undef')
'disassemble'/1 =
    %% Line 54
    fun (_cor0) ->
	%% Line 55
	call 'erlang':'nif_error'
	    ('undef')
'display'/1 =
    %% Line 60
    fun (_cor0) ->
	%% Line 61
	call 'erlang':'nif_error'
	    ('undef')
'dist_ext_to_term'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	%% Line 68
	call 'erlang':'nif_error'
	    ('undef')
'dump_monitors'/1 =
    %% Line 73
    fun (_cor0) ->
	%% Line 74
	call 'erlang':'nif_error'
	    ('undef')
'dump_links'/1 =
    %% Line 79
    fun (_cor0) ->
	%% Line 80
	call 'erlang':'nif_error'
	    ('undef')
'flat_size'/1 =
    %% Line 85
    fun (_cor0) ->
	%% Line 86
	call 'erlang':'nif_error'
	    ('undef')
'get_internal_state'/1 =
    %% Line 109
    fun (_cor0) ->
	%% Line 110
	call 'erlang':'nif_error'
	    ('undef')
'instructions'/0 =
    %% Line 114
    fun () ->
	%% Line 115
	call 'erlang':'nif_error'
	    ('undef')
'lock_counters'/1 =
    %% Line 122
    fun (_cor0) ->
	%% Line 123
	call 'erlang':'nif_error'
	    ('undef')
'same'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	%% Line 130
	call 'erlang':'nif_error'
	    ('undef')
'set_internal_state'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	%% Line 156
	call 'erlang':'nif_error'
	    ('undef')
'size'/1 =
    %% Line 167
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 168
	    call 'gb_trees':'empty'
		()
	in  %% Line 168
	    case apply 'size'/3
		     (_cor0, _cor1, 0) of
	      <{Sum,_cor4}> when 'true' ->
		  %% Line 169
		  Sum
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'size'/3 =
    %% Line 171
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Term = [H|T],Seen0,Sum0> when 'true' ->
	      %% Line 172
	      case apply 'remember_term'/2
		       (Term, Seen0) of
		%% Line 173
		<'seen'> when 'true' ->
		    {Sum0,Seen0}
		%% Line 174
		<Seen1> when 'true' ->
		    let <_cor3> =
			%% Line 175
			call 'erlang':'+'
			    (Sum0, 2)
		    in  %% Line 175
			case apply 'size'/3
				 (H, Seen1, _cor3) of
			  <{Sum,Seen}> when 'true' ->
			      %% Line 176
			      apply 'size'/3
				  (T, Seen, Sum)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 178
	  <Tuple,Seen0,Sum0>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      %% Line 179
	      case apply 'remember_term'/2
		       (Tuple, Seen0) of
		%% Line 180
		<'seen'> when 'true' ->
		    {Sum0,Seen0}
		%% Line 181
		<Seen> when 'true' ->
		    let <_cor7> =
			%% Line 182
			call 'erlang':'+'
			    (Sum0, 1)
		    in  let <_cor6> =
			    %% Line 182
			    call 'erlang':'tuple_size'
				(Tuple)
			in  let <Sum> =
				%% Line 182
				call 'erlang':'+'
				    (_cor7, _cor6)
			    in  let <_cor9> =
				    %% Line 183
				    call 'erlang':'tuple_size'
					(Tuple)
				in  %% Line 183
				    apply 'tuple_size'/5
					(1, _cor9, Tuple, Seen, Sum)
	      end
	  %% Line 185
	  <Map,Seen0,Sum>
	      when call 'erlang':'is_map'
		    (Map) ->
	      %% Line 186
	      case apply 'remember_term'/2
		       (Map, Seen0) of
		%% Line 187
		<'seen'> when 'true' ->
		    {Sum,Seen0}
		%% Line 188
		<Seen> when 'true' ->
		    apply 'map_size'/3
			(Map, Seen, Sum)
	      end
	  %% Line 190
	  <Fun,Seen0,Sum>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 191
	      case apply 'remember_term'/2
		       (Fun, Seen0) of
		%% Line 192
		<'seen'> when 'true' ->
		    {Sum,Seen0}
		%% Line 193
		<Seen> when 'true' ->
		    apply 'fun_size'/3
			(Fun, Seen, Sum)
	      end
	  %% Line 195
	  <Term,Seen0,Sum> when 'true' ->
	      %% Line 196
	      case call 'erts_debug':'flat_size'
		       (Term) of
		%% Line 197
		<0> when 'true' ->
		    {Sum,Seen0}
		%% Line 198
		<Sz> when 'true' ->
		    %% Line 199
		    case apply 'remember_term'/2
			     (Term, Seen0) of
		      %% Line 200
		      <'seen'> when 'true' ->
			  {Sum,Seen0}
		      %% Line 201
		      <Seen> when 'true' ->
			  let <_cor13> =
			      call 'erlang':'+'
				  (Sum, Sz)
			  in  {_cor13,Seen}
		    end
	      end
	end
'tuple_size'/5 =
    %% Line 205
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,Sz,_cor13,Seen,Sum>
	      when call 'erlang':'>'
		    (I,
		     Sz) ->
	      %% Line 206
	      {Sum,Seen}
	  %% Line 207
	  <I,Sz,Tuple,Seen0,Sum0> when 'true' ->
	      let <_cor5> =
		  %% Line 208
		  call 'erlang':'element'
		      (I, Tuple)
	      in  %% Line 208
		  case apply 'size'/3
			   (_cor5, Seen0, Sum0) of
		    <{Sum,Seen}> when 'true' ->
			let <_cor7> =
			    %% Line 209
			    call 'erlang':'+'
				(I, 1)
			in  %% Line 209
			    apply 'tuple_size'/5
				(_cor7, Sz, Tuple, Seen, Sum)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	end
'map_size'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	let <Kt> =
	    %% Line 212
	    call 'erts_internal':'map_to_tuple_keys'
		(_cor2)
	in  let <Vs> =
		%% Line 213
		call 'maps':'values'
		    (_cor2)
	    in  %% Line 214
		case apply 'size'/3
			 (Kt, _cor1, _cor0) of
		  <{Sum1,Seen1}> when 'true' ->
		      let <_cor6> =
			  %% Line 215
			  call 'erlang':'length'
			      (Vs)
		      in  let <_cor7> =
			      %% Line 215
			      call 'erlang':'+'
				  (Sum1, _cor6)
			  in  let <_cor8> =
				  %% Line 215
				  call 'erlang':'+'
				      (_cor7, 3)
			      in  %% Line 215
				  apply 'fold_size'/3
				      (Vs, Seen1, _cor8)
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'fun_size'/3 =
    %% Line 217
    fun (_cor2,_cor1,_cor0) ->
	%% Line 218
	case call 'erlang':'fun_info'
		 (_cor2, 'type') of
	  %% Line 219
	  <{'type','external'}> when 'true' ->
	      let <_cor3> =
		  %% Line 220
		  call 'erts_debug':'flat_size'
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 220
		      call 'erlang':'+'
			  (_cor0, _cor3)
		  in  %% Line 220
		      {_cor4,_cor1}
	  %% Line 221
	  <{'type','local'}> when 'true' ->
	      let <_cor5> =
		  %% Line 222
		  ( fun () ->
			'ok'
		    -| [{'id',{0,0,'-fun_size/3-fun-0-'}}] )
	      in  let <Sz> =
		      %% Line 222
		      call 'erts_debug':'flat_size'
			  (_cor5)
		  in  %% Line 223
		      case call 'erlang':'fun_info'
			       (_cor2, 'env') of
			<{'env',Env}> when 'true' ->
			    let <_cor9> =
				%% Line 224
				call 'erlang':'+'
				    (_cor0, Sz)
			    in  let <_cor8> =
				    %% Line 224
				    call 'erlang':'length'
					(Env)
				in  let <_cor10> =
					%% Line 224
					call 'erlang':'+'
					    (_cor9, _cor8)
				    in  %% Line 224
					apply 'fold_size'/3
					    (Env, _cor1, _cor10)
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'fold_size'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Seen0,Sum0> when 'true' ->
	      %% Line 228
	      case apply 'size'/3
		       (H, Seen0, Sum0) of
		<{Sum,Seen}> when 'true' ->
		    %% Line 229
		    apply 'fold_size'/3
			(T, Seen, Sum)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <[],Seen,Sum> when 'true' ->
	      {Sum,Seen}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fold_size',3}}] )
	    -| ['compiler_generated'] )
	end
'remember_term'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	%% Line 233
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 234
	  <'none'> when 'true' ->
	      call 'gb_trees':'insert'
		  (_cor1, [_cor1|[]], _cor0)
	  %% Line 235
	  <{'value',Terms}> when 'true' ->
	      %% Line 236
	      case apply 'is_term_seen'/2
		       (_cor1, Terms) of
		%% Line 237
		<'false'> when 'true' ->
		    call 'gb_trees':'update'
			(_cor1, [_cor1|Terms], _cor0)
		%% Line 238
		<'true'> when 'true' ->
		    'seen'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'is_term_seen'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,[H|T]> when 'true' ->
	      %% Line 245
	      case call 'erts_debug':'same'
		       (Term, H) of
		%% Line 246
		<'true'> when 'true' ->
		    'true'
		%% Line 247
		<'false'> when 'true' ->
		    apply 'is_term_seen'/2
			(Term, T)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 249
	  <_cor5,[]> when 'true' ->
	      'false'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_term_seen',2}}] )
	    -| ['compiler_generated'] )
	end
'df'/1 =
    %% Line 259
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 260
	      try
		  call Mod:'module_info'
		      ('functions')
	      of <_cor1> ->
		  case _cor1 of
		    %% Line 261
		    <Fs0>
			when call 'erlang':'is_list'
			      (_cor1) ->
			let <Name> =
			    %% Line 262
			    call 'lists':'concat'
				([Mod|[[46|[100|[105|[115]]]]]])
			in  let <_cor7> =
				%% Line 263
				( letrec
				      'lc$^0'/1 =
					  fun (_cor5) ->
					      case _cor5 of
						<[{Func,Arity}|_cor4]> when 'true' ->
						    let <_cor6> =
							apply 'lc$^0'/1
							    (_cor4)
						    in  ( [{Mod,Func,Arity}|_cor6]
							  -| ['compiler_generated'] )
						( <[_cor3|_cor4]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor5> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor5})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Fs0)
				  -| ['list_comprehension'] )
			    in  %% Line 264
				apply 'dff'/2
				    (Name, _cor7)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor12,_cor11,_cor10> ->
		  %% Line 265
		  {'undef',Mod}
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'df',1}}] )
	    -| ['compiler_generated'] )
	end
'df'/2 =
    %% Line 270
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Func>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (Func)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 271
	      try
		  call Mod:'module_info'
		      ('functions')
	      of <_cor4> ->
		  case _cor4 of
		    %% Line 272
		    <Fs0>
			when call 'erlang':'is_list'
			      (_cor4) ->
			let <Name> =
			    %% Line 273
			    call 'lists':'concat'
				([Mod|[[95]|[Func|[[46|[100|[105|[115]]]]]]]])
			in  let <_cor10> =
				%% Line 274
				( letrec
				      'lc$^0'/1 =
					  fun (_cor8) ->
					      case _cor8 of
						<[{Func1,Arity}|_cor7]>
						    when call 'erlang':'=:='
							  (Func1,
							   Func) ->
						    let <_cor9> =
							apply 'lc$^0'/1
							    (_cor7)
						    in  ( [{Mod,Func1,Arity}|_cor9]
							  -| ['compiler_generated'] )
						( <[_cor6|_cor7]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor7)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor8> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor8})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Fs0)
				  -| ['list_comprehension'] )
			    in  %% Line 275
				apply 'dff'/2
				    (Name, _cor10)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor15,_cor14,_cor13> ->
		  %% Line 276
		  {'undef',Mod}
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'df',2}}] )
	    -| ['compiler_generated'] )
	end
'df'/3 =
    %% Line 281
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Func,Arity>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Func)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 282
	      try
		  call Mod:'module_info'
		      ('functions')
	      of <_cor5> ->
		  case _cor5 of
		    %% Line 283
		    <Fs0>
			when call 'erlang':'is_list'
			      (_cor5) ->
			let <Name> =
			    %% Line 284
			    call 'lists':'concat'
				([Mod|[[95]|[Func|[[95]|[Arity|[[46|[100|[105|[115]]]]]]]]]])
			in  let <_cor13> =
				%% Line 285
				( letrec
				      'lc$^0'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[{Func1,Arity1}|_cor8]>
						    when let <_cor9> =
							  %% Line 286
							  call 'erlang':'=:='
							      (Func1, Func)
						      in  let <_cor10> =
							      %% Line 286
							      call 'erlang':'=:='
								  (Arity1, Arity)
							  in  %% Line 286
							      call 'erlang':'and'
								  (_cor9, _cor10) ->
						    let <_cor12> =
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [{Mod,Func1,Arity1}|_cor12]
							  -| ['compiler_generated'] )
						( <[_cor7|_cor8]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor8)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Fs0)
				  -| ['list_comprehension'] )
			    in  %% Line 287
				apply 'dff'/2
				    (Name, _cor13)
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor18,_cor17,_cor16> ->
		  %% Line 288
		  {'undef',Mod}
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'df',3}}] )
	    -| ['compiler_generated'] )
	end
'dff'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Fs>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(File)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Fs)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor6> =
		  %% Line 292
		  ( fun (_cor4) ->
			do  %% Line 293
			    apply 'disassemble_function'/2
				(File, _cor4)
			    %% Line 294
			    call 'io':'nl'
				(File)
		    -| [{'id',{0,0,'-dff/2-fun-0-'}}] )
	      in  %% Line 292
		  call 'lists':'foreach'
		      (_cor6, %% Line 295
			      Fs)
	  %% Line 296
	  <Name,Fs>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 297
	      case call 'file':'open'
		       (Name, ['write']) of
		%% Line 298
		<{'ok',F}> when 'true' ->
		    %% Line 299
		    letrec
			'after$^0'/0 =
			    fun () ->
				%% Line 302
				( call 'file':'close'
				      (F)
				  -| ['result_not_wanted'] )
		    in  try
			    %% Line 300
			    apply 'dff'/2
				(F, Fs)
			of <_cor8> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_cor8
			catch <_cor11,_cor10,_cor9> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_cor9, _cor10)
		%% Line 304
		<{'error',Reason}> when 'true' ->
		    %% Line 305
		    {'error',{'badopen',Reason}}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'dff',2}}] )
	    -| ['compiler_generated'] )
	end
'disassemble_function'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,MFA = {_cor5,_cor6,_cor7}> when 'true' ->
	      let <_cor2> =
		  %% Line 309
		  call 'erts_debug':'disassemble'
		      (MFA)
	      in  %% Line 309
		  apply 'cont_dis'/3
		      (File, _cor2, MFA)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'disassemble_function',2}}] )
	    -| ['compiler_generated'] )
	end
'cont_dis'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor8,'false',_cor9> when 'true' ->
	      'ok'
	  %% Line 312
	  <File,{Addr,Str,MFA},_cor10>
	      when call 'erlang':'=:='
		    (_cor10,
		     MFA) ->
	      let <_cor3> =
		  %% Line 313
		  call 'erlang':'binary_to_list'
		      (Str)
	      in  do  %% Line 313
		      call 'io':'put_chars'
			  (File, _cor3)
		      let <_cor4> =
			  %% Line 314
			  call 'erts_debug':'disassemble'
			      (Addr)
		      in  %% Line 314
			  apply 'cont_dis'/3
			      (File, _cor4, MFA)
	  %% Line 315
	  <_cor11,{_cor12,_cor13,_cor14},_cor15> when 'true' ->
	      'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'cont_dis',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erts_debug')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erts_debug', _cor0)
end