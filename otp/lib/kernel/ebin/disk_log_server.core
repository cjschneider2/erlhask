module 'disk_log_server' ['accessible_logs'/0,
			  'close'/1,
			  'code_change'/3,
			  'dist_open'/1,
			  'get_local_pid'/1,
			  'get_log_pids'/1,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_info'/2,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'open'/1,
			  'start'/0,
			  'start_link'/0,
			  'terminate'/2]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['gen_server'],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dlog_byte',{'type',56,'union',[{'type',56,'list',[{'type',56,'dlog_byte',[]}]}|[{'type',56,'byte',[]}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'dlog_format',{'type',57,'union',[{'atom',57,'external'}|[{'atom',57,'internal'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'dlog_format_type',{'type',58,'union',[{'atom',58,'halt_ext'}|[{'atom',58,'halt_int'}|[{'atom',58,'wrap_ext'}|[{'atom',58,'wrap_int'}]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'dlog_head',{'type',59,'union',[{'atom',59,'none'}|[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'binary',[]}]]}|[{'type',59,'mfa',[]}]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'dlog_head_opt',{'type',60,'union',[{'atom',60,'none'}|[{'type',60,'term',[]}|[{'type',60,'binary',[]}|[{'type',60,'list',[{'type',60,'dlog_byte',[]}]}]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'log',{'type',61,'term',[]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'dlog_mode',{'type',62,'union',[{'atom',62,'read_only'}|[{'atom',62,'read_write'}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'dlog_name',{'type',63,'union',[{'type',63,'atom',[]}|[{'type',63,'string',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'dlog_optattr',{'type',64,'union',[{'atom',64,'name'}|[{'atom',64,'file'}|[{'atom',64,'linkto'}|[{'atom',64,'repair'}|[{'atom',64,'type'}|[{'atom',65,'format'}|[{'atom',65,'size'}|[{'atom',65,'distributed'}|[{'atom',65,'notify'}|[{'atom',66,'head'}|[{'atom',66,'head_func'}|[{'atom',66,'mode'}]]]]]]]]]]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'dlog_option',{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'name'}|[{'ann_type',67,[{'var',67,'Log'}|[{'type',67,'log',[]}]]}]]}|[{'type',68,'tuple',[{'atom',68,'file'}|[{'ann_type',68,[{'var',68,'FileName'}|[{'remote_type',68,[{'atom',68,'file'}|[{'atom',68,'filename'}|[[]]]]}]]}]]}|[{'type',69,'tuple',[{'atom',69,'linkto'}|[{'ann_type',69,[{'var',69,'LinkTo'}|[{'type',69,'union',[{'atom',69,'none'}|[{'type',69,'pid',[]}]]}]]}]]}|[{'type',70,'tuple',[{'atom',70,'repair'}|[{'ann_type',70,[{'var',70,'Repair'}|[{'type',70,'union',[{'atom',70,'true'}|[{'atom',70,'false'}|[{'atom',70,'truncate'}]]]}]]}]]}|[{'type',71,'tuple',[{'atom',71,'type'}|[{'ann_type',71,[{'var',71,'Type'}|[{'atom',71,'dlog_type'}]]}]]}|[{'type',72,'tuple',[{'atom',72,'format'}|[{'ann_type',72,[{'var',72,'Format'}|[{'type',72,'dlog_format',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'size'}|[{'ann_type',73,[{'var',73,'Size'}|[{'type',73,'dlog_size',[]}]]}]]}|[{'type',74,'tuple',[{'atom',74,'distributed'}|[{'ann_type',74,[{'var',74,'Nodes'}|[{'type',74,'list',[{'type',74,'node',[]}]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'notify'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'head'}|[{'ann_type',76,[{'var',76,'Head'}|[{'type',76,'dlog_head_opt',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'head_func'}|[{'ann_type',77,[{'var',77,'MFA'}|[{'type',77,'tuple',[{'type',77,'atom',[]}|[{'type',77,'atom',[]}|[{'type',77,'list',[]}]]]}]]}]]}|[{'type',78,'tuple',[{'atom',78,'mode'}|[{'ann_type',78,[{'var',78,'Mode'}|[{'type',78,'dlog_mode',[]}]]}]]}]]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'dlog_options',{'type',79,'list',[{'type',79,'dlog_option',[]}]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'dlog_repair',{'type',80,'union',[{'atom',80,'truncate'}|[{'type',80,'boolean',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'dlog_size',{'type',81,'union',[{'atom',81,'infinity'}|[{'type',81,'pos_integer',[]}|[{'type',82,'tuple',[{'ann_type',82,[{'var',82,'MaxNoBytes'}|[{'type',82,'pos_integer',[]}]]}|[{'ann_type',83,[{'var',83,'MaxNoFiles'}|[{'type',83,'pos_integer',[]}]]}]]}]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dlog_status',{'type',84,'union',[{'atom',84,'ok'}|[{'type',84,'tuple',[{'atom',84,'blocked'}|[{'type',84,'union',[{'atom',84,'false'}|[{'type',84,'list',[{'var',84,'_'}]}]]}]]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'dlog_type',{'type',85,'union',[{'atom',85,'halt'}|[{'atom',85,'wrap'}]]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','arg'},[{'record_field',92,{'atom',92,'name'},{'integer',92,0}}|[{'record_field',93,{'atom',93,'version'},{'atom',93,'undefined'}}|[{'typed_record_field',{'record_field',94,{'atom',94,'file'},{'atom',94,'none'}},{'type',94,'union',[{'atom',94,'none'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'repair'},{'atom',95,'true'}},{'type',95,'dlog_repair',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'size'},{'atom',96,'infinity'}},{'type',96,'dlog_size',[]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'type'},{'atom',97,'halt'}},{'type',97,'dlog_type',[]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'distributed'},{'atom',98,'false'}},{'type',98,'union',[{'atom',98,'false'}|[{'type',98,'tuple',[{'atom',98,'true'}|[{'type',98,'list',[{'type',98,'node',[]}]}]]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'format'},{'atom',99,'internal'}},{'type',99,'dlog_format',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'linkto'},{'call',100,{'atom',100,'self'},[]}},{'type',100,'union',[{'atom',100,'none'}|[{'type',100,'pid',[]}]]}}|[{'record_field',101,{'atom',101,'head'},{'atom',101,'none'}}|[{'typed_record_field',{'record_field',102,{'atom',102,'mode'},{'atom',102,'read_write'}},{'type',102,'dlog_mode',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'notify'},{'atom',103,'false'}},{'type',103,'boolean',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'options'},{'nil',104}},{'type',104,'dlog_options',[]}}]]]]]]]]]]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','cache'},[{'typed_record_field',{'record_field',107,{'atom',107,'fd'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'fd'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'sz'},{'integer',108,0}},{'type',108,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'c'},{'nil',109}},{'type',109,'iodata',[]}}]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','halt'},[{'typed_record_field',{'record_field',113,{'atom',113,'fdc'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'record',[{'atom',113,'cache'}]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'curB'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'size'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'dlog_size',[]}]]}}]]],[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{{'record','handle'},[{'typed_record_field',{'record_field',119,{'atom',119,'filename'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'maxB'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'maxF'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'pos_integer',[]}|[{'type',121,'tuple',[{'type',121,'pos_integer',[]}|[{'type',121,'pos_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'curB'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'curF'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'integer',[]}]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'cur_fdc'}},{'type',131,'union',[{'atom',131,'undefined'}|[{'type',131,'record',[{'atom',131,'cache'}]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'cur_name'}},{'type',132,'union',[{'atom',132,'undefined'}|[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'cur_cnt'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'acc_cnt'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'firstPos'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'noFull'}},{'type',139,'union',[{'atom',139,'undefined'}|[{'type',139,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'accFull'}},{'type',143,'union',[{'atom',143,'undefined'}|[{'type',143,'non_neg_integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','log'},[{'typed_record_field',{'record_field',148,{'atom',148,'status'},{'atom',148,'ok'}},{'type',148,'dlog_status',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'name'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'dlog_name',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'blocked_by'},{'atom',150,'none'}},{'type',150,'union',[{'atom',150,'none'}|[{'type',150,'pid',[]}]]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'users'},{'integer',151,0}},{'type',151,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'filename'}},{'type',152,'union',[{'atom',152,'undefined'}|[{'remote_type',152,[{'atom',152,'file'}|[{'atom',152,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'owners'},{'nil',153}},{'type',153,'list',[{'type',153,'tuple',[{'type',153,'pid',[]}|[{'type',153,'boolean',[]}]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'type'},{'atom',154,'halt'}},{'type',154,'dlog_type',[]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'format'},{'atom',155,'internal'}},{'type',155,'dlog_format',[]}}|[{'typed_record_field',{'record_field',156,{'atom',156,'format_type'}},{'type',156,'union',[{'atom',156,'undefined'}|[{'type',156,'dlog_format_type',[]}]]}}|[{'record_field',157,{'atom',157,'head'},{'atom',157,'none'}}|[{'typed_record_field',{'record_field',159,{'atom',159,'mode'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'dlog_mode',[]}]]}}|[{'record_field',160,{'atom',160,'size'}}|[{'typed_record_field',{'record_field',161,{'atom',161,'extra'}},{'type',161,'union',[{'atom',161,'undefined'}|[{'type',161,'record',[{'atom',161,'halt'}]}|[{'type',161,'record',[{'atom',161,'handle'}]}]]]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'version'}},{'type',162,'union',[{'atom',162,'undefined'}|[{'type',162,'integer',[]}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{{'record','continuation'},[{'typed_record_field',{'record_field',166,{'atom',166,'pid'},{'call',166,{'atom',166,'self'},[]}},{'type',166,'pid',[]}}|[{'typed_record_field',{'record_field',167,{'atom',167,'pos'}},{'type',167,'union',[{'atom',167,'undefined'}|[{'type',167,'non_neg_integer',[]}|[{'type',167,'tuple',[{'type',167,'integer',[]}|[{'type',167,'non_neg_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',168,{'atom',168,'b'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'binary',[]}|[{'type',168,'nil',[]}|[{'type',168,'pos_integer',[]}]]]]}}]]],[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'dlog_cont',{'type',171,'union',[{'atom',171,'start'}|[{'type',171,'record',[{'atom',171,'continuation'}]}]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','pending'},[{'record_field',36,{'atom',36,'log'}}|[{'record_field',36,{'atom',36,'pid'}}|[{'record_field',36,{'atom',36,'req'}}|[{'record_field',36,{'atom',36,'from'}}|[{'record_field',36,{'atom',36,'attach'}}|[{'record_field',36,{'atom',36,'clients'}}]]]]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','state'},[{'typed_record_field',{'record_field',38,{'atom',38,'pending'},{'nil',38}},{'type',38,'list',[{'type',38,'record',[{'atom',38,'pending'}]}]}}],[]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'open_distr_rpc_fun',3},[{'type',228,'fun',[{'type',228,'product',[{'type',228,'list',[{'type',228,'node',[]}]}|[{'var',228,'_'}|[{'var',228,'_'}]]]}|[{'type',229,'fun',[{'type',229,'product',[]}|[{'type',229,'no_return',[]}]]}]]}]}]]
'start_link'/0 =
    %% Line 48
    fun () ->
	%% Line 49
	call 'gen_server':'start_link'
	    ({'local','disk_log_server'}, 'disk_log_server', [], [])
'start'/0 =
    %% Line 51
    fun () ->
	%% Line 52
	apply 'ensure_started'/0
	    ()
'open'/1 =
    %% Line 54
    fun (_cor0) ->
	case _cor0 of
	  <{'ok',A}> when 'true' ->
	      do  %% Line 55
		  apply 'ensure_started'/0
		      ()
		  %% Line 56
		  call 'gen_server':'call'
		      ('disk_log_server', {'open','local',A}, 'infinity')
	  %% Line 57
	  <Other> when 'true' ->
	      %% Line 58
	      Other
	end
'dist_open'/1 =
    %% Line 61
    fun (_cor0) ->
	do  %% Line 62
	    apply 'ensure_started'/0
		()
	    %% Line 63
	    call 'gen_server':'call'
		('disk_log_server', {'open','distr',_cor0}, 'infinity')
'close'/1 =
    %% Line 65
    fun (_cor0) ->
	%% Line 66
	call 'gen_server':'call'
	    ('disk_log_server', {'close',_cor0}, 'infinity')
'get_log_pids'/1 =
    %% Line 68
    fun (_cor0) ->
	( let <_cor1> =
	      ( catch
		    %% Line 349
		    ( call ( 'ets'
			     -| ['compiler_generated'] ):( 'lookup'
							   -| ['compiler_generated'] )
			  (( 'disk_log_names'
			     -| ['compiler_generated'] ), _cor0)
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	  in  %% Line 349
	      ( case ( _cor1
		       -| ['compiler_generated'] ) of
		  %% Line 350
		  ( <( [( {( _cor6
			     -| ['compiler_generated'] ),( Pid
							   -| ['compiler_generated'] ),( 'local'
											 -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )|( []
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=:='
								 -| ['compiler_generated'] )
				(( _cor6
				   -| ['compiler_generated'] ),
				 _cor0)
			    -| ['compiler_generated'] ) ->
			%% Line 351
			( {( 'local'
			     -| ['compiler_generated'] ),( Pid
							   -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 352
		  ( <( [( {( _cor7
			     -| ['compiler_generated'] ),( _X_Pid
							   -| ['compiler_generated'] ),( 'distr'
											 -| ['compiler_generated'] )}
			  -| ['compiler_generated'] )|( []
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )>
			when ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=:='
								 -| ['compiler_generated'] )
				(( _cor7
				   -| ['compiler_generated'] ),
				 _cor0)
			    -| ['compiler_generated'] ) ->
			%% Line 353
			( case ( call ( 'pg2'
					-| ['compiler_generated'] ):( 'get_members'
								      -| ['compiler_generated'] )
				     (_cor0)
				 -| ['compiler_generated'] ) of
			    %% Line 354
			    ( <( []
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  %% Line 355
				  ( 'undefined'
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 356
			    ( <( Members
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  %% Line 357
				  ( {( 'distributed'
				       -| ['compiler_generated'] ),( Members
								     -| ['compiler_generated'] )}
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 359
		  ( <( _X_EmptyOrError
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			%% Line 360
			( case ( apply ( 'dist_pids'/1
					 -| ['compiler_generated'] )
				     (_cor0)
				 -| ['compiler_generated'] ) of
			    %% Line 361
			    ( <( []
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( 'undefined'
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    %% Line 362
			    ( <( Pids
				 -| ['compiler_generated'] )> when ( 'true'
								     -| ['compiler_generated'] ) ->
				  ( {( 'distributed'
				       -| ['compiler_generated'] ),( Pids
								     -| ['compiler_generated'] )}
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| ['compiler_generated'] )
'accessible_logs'/0 =
    %% Line 71
    fun () ->
	do  %% Line 72
	    apply 'ensure_started'/0
		()
	    %% Line 73
	    apply 'do_accessible_logs'/0
		()
'init'/1 =
    %% Line 84
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 85
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <_X_> =
		      %% Line 86
		      ( call 'ets':'new'
			    ('disk_log_names', ['named_table'|['set']])
			-| ['result_not_wanted'] )
		  in  do  %% Line 87
			  ( call 'ets':'new'
				('disk_log_pids', ['named_table'|['set']])
			    -| ['result_not_wanted'] )
			  %% Line 88
			  {'ok',{'state',[]}}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 90
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'open',W,A},From,State> when 'true' ->
	      %% Line 91
	      apply 'open'/2
		  ([{{'open',W,A},From}|[]], State)
	  %% Line 92
	  <{'close',Pid},_X_From,State> when 'true' ->
	      let <Reply> =
		  %% Line 93
		  apply 'do_close'/1
		      (Pid)
	      in  %% Line 94
		  {'reply',Reply,State}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'pending_reply',Pid,Result0},State> when 'true' ->
	      %% Line 100
	      ( case State of
		  ( <( {'state',_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Pid, 3, _rec0) of
			  <{'value',{'pending',Name,_cor22,Request,From,Attach,Clients}}>
			      when call 'erlang':'=:='
				    (_cor22,
				     Pid) ->
			      let <NP> =
				  %% Line 101
				  call 'lists':'keydelete'
				      (Pid, 3, _rec0)
			      in  let <_cor10> = {%% Line 102
				       'state',%% Line 102
					       NP}
				  in  %% Line 103
				      case <> of
					%% Line 104
					<>
					    when let <_cor12> =
						  call 'erlang':'=:='
						      (Attach, 'true')
					      in  let <_cor13> =
						      call 'erlang':'=:='
							  (Result0, {'error','no_such_log'})
						  in  call 'erlang':'and'
							  (_cor12, _cor13) ->
					    %% Line 106
					    apply 'open'/2
						([{Request,From}|Clients], _cor10)
					%% Line 107
					<> when 'true' ->
					    do  %% Line 108
						case Result0 of
						  %% Line 109
						  <_cor25>
						      when call 'erlang':'=:='
							    (Attach,
							     'true') ->
						      'ok'
						  %% Line 111
						  <{'error',_cor26}> when 'true' ->
						      'ok'
						  %% Line 113
						  <_cor27> when 'true' ->
						      do  %% Line 114
							  call 'erlang':'put'
							      (Pid, Name)
							  do  %% Line 115
							      call 'erlang':'link'
								  (Pid)
							      %% Line 116
							      case Request of
								<{_cor28,Locality,_cor29}> when 'true' ->
								    do  %% Line 117
									call 'ets':'insert'
									    ('disk_log_pids', {Pid,Name})
									do  %% Line 118
									    call 'ets':'insert'
										('disk_log_names', {Name,Pid,Locality})
									    %% Line 119
									    case <> of
									      %% Line 120
									      <>
										  when call 'erlang':'=:='
											(Locality,
											 'distr') ->
										  %% Line 121
										  case call 'pg2':'join'
											   (Name, Pid) of
										    <'ok'> when 'true' ->
											'ok'
										    ( <_cor15> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor15})
										      -| ['compiler_generated'] )
										  end
									      %% Line 122
									      <> when 'true' ->
										  'ok'
									    end
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
						end
						let <_cor17> =
						    %% Line 126
						    apply 'result'/2
							(Request, Result0)
						in  do  %% Line 126
							call 'gen_server':'reply'
							    (From, _cor17)
							%% Line 127
							apply 'open'/2
							    (Clients, _cor10)
				      end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 129
	  <{'EXIT',Pid,_X_Reason},State> when 'true' ->
	      do  %% Line 132
		  case call 'erlang':'get'
			   (Pid) of
		    %% Line 133
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 135
		    <Name> when 'true' ->
			%% Line 136
			apply 'erase_log'/2
			    (Name, Pid)
		  end
		  %% Line 138
		  {'noreply',State}
	  %% Line 139
	  <_cor31,State> when 'true' ->
	      %% Line 140
	      {'noreply',State}
	end
'handle_cast'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	%% Line 144
	{'noreply',_cor0}
'code_change'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	%% Line 148
	{'ok',_cor1}
'terminate'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	%% Line 151
	'ok'
'ensure_started'/0 =
    %% Line 157
    fun () ->
	%% Line 158
	case call 'erlang':'whereis'
		 ('disk_log_server') of
	  %% Line 159
	  <'undefined'> when 'true' ->
	      %% Line 162
	      case apply 'ensure_child_started'/2
		       ('kernel_safe_sup', {'disk_log_sup',{'disk_log_sup','start_link',[]},'permanent',1000,'supervisor',['disk_log_sup']}) of
		<{'ok',_cor5}> when 'true' ->
		    %% Line 166
		    case apply 'ensure_child_started'/2
			     ('kernel_safe_sup', {'disk_log_server',{'disk_log_server','start_link',[]},'permanent',2000,'worker',['disk_log_server']}) of
		      <{'ok',_cor6}> when 'true' ->
			  %% Line 167
			  'ok'
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 168
	  <_cor7> when 'true' ->
	      'ok'
	end
'ensure_child_started'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	%% Line 172
	case call 'supervisor':'start_child'
		 (_cor1, _cor0) of
	  %% Line 173
	  <{'ok',Pid}> when 'true' ->
	      %% Line 174
	      {'ok',Pid}
	  %% Line 175
	  <{'error',{'already_started',Pid}}> when 'true' ->
	      %% Line 176
	      {'ok',Pid}
	  %% Line 177
	  <Error> when 'true' ->
	      %% Line 178
	      Error
	end
'open'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Req,From}|L],State> when 'true' ->
	      let <_cor3> =
		  %% Line 182
		  case apply 'do_open'/3
			   (Req, From, State) of
		    %% Line 183
		    <{'pending',State1}> when 'true' ->
			%% Line 184
			State1
		    %% Line 185
		    <{Reply,State1}> when 'true' ->
			do  %% Line 186
			    call 'gen_server':'reply'
				(From, Reply)
			    %% Line 187
			    State1
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 189
		  apply 'open'/2
		      (L, _cor3)
	  %% Line 190
	  <[],State> when 'true' ->
	      %% Line 191
	      {'noreply',State}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'open',2}}] )
	    -| ['compiler_generated'] )
	end
'do_open'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Req = {'open',W,A = {'arg',Name,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}},From,State> when 'true' ->
	      %% Line 196
	      case apply 'check_pending'/4
		       (Name, From, State, Req) of
		%% Line 197
		<{'pending',NewState}> when 'true' ->
		    %% Line 198
		    {'pending',NewState}
		%% Line 199
		<'false'>
		    when call 'erlang':'=:='
			  (W,
			   'local') ->
		    %% Line 200
		    case _cor21 of
		      %% Line 201
		      <{'true',Nodes}> when 'true' ->
			  let <Fun> =
			      %% Line 202
			      apply 'open_distr_rpc_fun'/3
				  (Nodes, A, From)
			  in  let <_X_Pid> =
				  %% Line 203
				  call 'erlang':'spawn'
				      (Fun)
			      in  %% Line 205
				  {'pending',State}
		      %% Line 206
		      <'false'> when 'true' ->
			  %% Line 207
			  case apply 'get_local_pid'/1
				   (Name) of
			    %% Line 208
			    <{'local',Pid}> when 'true' ->
				%% Line 209
				apply 'do_internal_open'/6
				    (Name, Pid, From, Req, 'true', State)
			    %% Line 210
			    <{'distributed',_X_Pid}> when 'true' ->
				%% Line 211
				{{'error',{'node_already_open',Name}},State}
			    %% Line 212
			    <'undefined'> when 'true' ->
				%% Line 213
				apply 'start_log'/4
				    (Name, Req, From, State)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 216
		<'false'>
		    when call 'erlang':'=:='
			  (W,
			   'distr') ->
		    %% Line 217
		    case call 'pg2':'create'
			     (Name) of
		      <'ok'> when 'true' ->
			  %% Line 218
			  case apply 'get_local_pid'/1
				   (Name) of
			    %% Line 219
			    <'undefined'> when 'true' ->
				%% Line 220
				apply 'start_log'/4
				    (Name, Req, From, State)
			    %% Line 221
			    <{'local',_X_Pid}> when 'true' ->
				let <_cor10> =
				    %% Line 222
				    call 'erlang':'node'
					()
				in  %% Line 222
				    {{_cor10,{'error',{'node_already_open',Name}}},State}
			    %% Line 223
			    <{'distributed',Pid}> when 'true' ->
				%% Line 224
				apply 'do_internal_open'/6
				    (Name, Pid, From, Req, 'true', State)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'do_open',3}}] )
	    -| ['compiler_generated'] )
	end
'open_distr_rpc_fun'/3 =
    %% Line 231
    fun (_cor2,_cor1,_cor0) ->
	%% Line 232
	( fun () ->
	      apply 'open_distr_rpc'/3
		  (_cor2, _cor1, _cor0)
	  -| [{'id',{0,0,'-open_distr_rpc_fun/3-fun-0-'}}] )
'open_distr_rpc'/3 =
    %% Line 237
    fun (_cor2,_cor1,_cor0) ->
	%% Line 238
	case call 'rpc':'multicall'
		 (_cor2, 'disk_log_server', 'dist_open', [_cor1|[]]) of
	  <{AllReplies,BadNodes}> when 'true' ->
	      %% Line 239
	      case apply 'cr'/3
		       (AllReplies, [], []) of
		<{Ok,Bad}> when 'true' ->
		    let <Old> =
			%% Line 240
			apply 'find_old_nodes'/3
			    (_cor2, AllReplies, BadNodes)
		    in  let <_cor11> =
			    %% Line 241
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[BadNode|_cor7]> when 'true' ->
						let <_cor10> =
						    apply 'lc$^0'/1
							(_cor7)
						in  ( [{BadNode,{'error','nodedown'}}|_cor10]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor8> =
				      call 'erlang':'++'
					  (BadNodes, Old)
				  in  apply 'lc$^0'/1
					  (_cor8)
			      -| ['list_comprehension'] )
			in  let <_cor13> =
				%% Line 242
				call 'erlang':'++'
				    (Bad, _cor11)
			    in  let <Reply> = {%% Line 242
				     Ok,_cor13}
				in  do  %% Line 244
					call 'gen_server':'reply'
					    (_cor0, Reply)
					%% Line 245
					call 'erlang':'exit'
					    ('normal')
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'cr'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'badrpc',{'EXIT',_cor6}}|T],Nodes,Bad> when 'true' ->
	      %% Line 249
	      apply 'cr'/3
		  (T, Nodes, Bad)
	  %% Line 250
	  <[R = {_X_Node,{'error',_cor7}}|T],Nodes,Bad> when 'true' ->
	      %% Line 251
	      apply 'cr'/3
		  (T, Nodes, [R|Bad])
	  %% Line 252
	  <[Reply|T],Nodes,Bad> when 'true' ->
	      %% Line 253
	      apply 'cr'/3
		  (T, [Reply|Nodes], Bad)
	  %% Line 254
	  <[],Nodes,Bad> when 'true' ->
	      %% Line 255
	      {Nodes,Bad}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'cr',3}}] )
	    -| ['compiler_generated'] )
	end
'find_old_nodes'/3 =
    %% Line 263
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 264
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{X,_cor16}|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [X|_cor6]
				      -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 265
		call 'ordsets':'from_list'
		    (_cor2)
	    in  let <_cor9> =
		    %% Line 266
		    call 'erlang':'++'
			(_cor7, _cor0)
		in  let <_cor10> =
			%% Line 266
			call 'ordsets':'from_list'
			    (_cor9)
		    in  let <_cor12> =
			    %% Line 265
			    call 'ordsets':'subtract'
				(_cor11, _cor10)
			in  %% Line 265
			    call 'ordsets':'to_list'
				(_cor12)
'start_log'/4 =
    %% Line 268
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Server> =
	    %% Line 269
	    call 'erlang':'self'
		()
	in  %% Line 270
	    case call 'supervisor':'start_child'
		     ('disk_log_sup', [Server|[]]) of
	      %% Line 271
	      <{'ok',Pid}> when 'true' ->
		  %% Line 272
		  apply 'do_internal_open'/6
		      (_cor3, Pid, _cor1, _cor2, 'false', _cor0)
	      %% Line 273
	      <Error> when 'true' ->
		  let <_cor5> =
		      %% Line 274
		      apply 'result'/2
			  (_cor2, Error)
		  in  %% Line 274
		      {_cor5,_cor0}
	    end
'do_internal_open'/6 =
    %% Line 277
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Pid,From,Req = {'open',_X_W,A},Attach,State> when 'true' ->
	      let <Server> =
		  %% Line 278
		  call 'erlang':'self'
		      ()
	      in  let <F> =
		      %% Line 279
		      ( fun () ->
			    let <Res> =
				%% Line 280
				call 'disk_log':'internal_open'
				    (Pid, A)
			    in  %% Line 281
				call 'erlang':'!'
				    (Server, {'pending_reply',Pid,Res})
			-| [{'id',{0,0,'-do_internal_open/6-fun-0-'}}] )
		  in  let <_X_> =
			  %% Line 283
			  ( call 'erlang':'spawn'
				(F)
			    -| ['result_not_wanted'] )
		      in  let <PD> =
			      %% Line 284
			      {'pending',Name,Pid,Req,%% Line 285
						      From,%% Line 285
							   Attach,%% Line 285
								  []}
			  in  %% Line 286
			      ( case State of
				  ( <( {'state',_rec5}
				       -| ['compiler_generated'] )> when 'true' ->
					let <P> =
					    [PD|_rec5]
					in  let <_cor16> = {%% Line 287
						 'state',%% Line 287
							 P}
					    in  %% Line 287
						{'pending',_cor16}
				    -| ['compiler_generated'] )
				  ( <_cor23> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'do_internal_open',6}}] )
	    -| ['compiler_generated'] )
	end
'check_pending'/4 =
    %% Line 289
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 290
	( case _cor1 of
	    ( <( {'state',_rec8}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor3, 2, _rec8) of
		    %% Line 291
		    <{'value',P = {'pending',_cor22,_cor23,_cor24,_cor25,_cor26,Clients}}>
			when call 'erlang':'=:='
			      (_cor22,
			       _cor3) ->
			let <_rec10> =
			    %% Line 293
			    call 'erlang':'++'
				(Clients, [{_cor0,_cor2}|[]])
			in  let <_cor9> =
				%% Line 293
				call 'erlang':'setelement'
				    (7, P, _rec10)
			    in  let <NP> =
				    %% Line 292
				    call 'lists':'keyreplace'
					(_cor3, 2, _rec8, _cor9)
				in  let <_cor15> = {%% Line 294
					 'state',%% Line 294
						 NP}
				    in  %% Line 294
					{'pending',_cor15}
		    %% Line 295
		    <'false'> when 'true' ->
			%% Line 296
			'false'
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'result'/2 =
    %% Line 299
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_cor5,'distr',_cor6},R> when 'true' ->
	      let <_cor2> =
		  %% Line 300
		  call 'erlang':'node'
		      ()
	      in  %% Line 300
		  {_cor2,R}
	  %% Line 301
	  <{_cor7,'local',_cor8},R> when 'true' ->
	      %% Line 302
	      R
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'result',2}}] )
	    -| ['compiler_generated'] )
	end
'do_close'/1 =
    %% Line 304
    fun (_cor0) ->
	%% Line 305
	case call 'erlang':'get'
		 (_cor0) of
	  %% Line 306
	  <'undefined'> when 'true' ->
	      %% Line 307
	      'ok'
	  %% Line 308
	  <Name> when 'true' ->
	      do  %% Line 309
		  apply 'erase_log'/2
		      (Name, _cor0)
		  do  %% Line 310
		      call 'erlang':'unlink'
			  (_cor0)
		      %% Line 311
		      'ok'
	end
'erase_log'/2 =
    %% Line 314
    fun (_cor1,_cor0) ->
	do  %% Line 315
	    case apply 'get_local_pid'/1
		     (_cor1) of
	      %% Line 316
	      <'undefined'> when 'true' ->
		  'ok'
	      %% Line 318
	      <{'local',_cor10}>
		  when call 'erlang':'=:='
			(_cor10,
			 _cor0) ->
		  %% Line 319
		  case call 'ets':'delete'
			   ('disk_log_names', _cor1) of
		    <'true'> when 'true' ->
			%% Line 320
			case call 'ets':'delete'
				 ('disk_log_pids', _cor0) of
			  <'true'> when 'true' ->
			      'ok'
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 321
	      <{'distributed',_cor12}>
		  when call 'erlang':'=:='
			(_cor12,
			 _cor0) ->
		  %% Line 322
		  case call 'ets':'delete'
			   ('disk_log_names', _cor1) of
		    <'true'> when 'true' ->
			%% Line 323
			case call 'ets':'delete'
				 ('disk_log_pids', _cor0) of
			  <'true'> when 'true' ->
			      %% Line 324
			      case call 'pg2':'leave'
				       (_cor1, _cor0) of
				<'ok'> when 'true' ->
				    'ok'
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	    %% Line 326
	    call 'erlang':'erase'
		(_cor0)
'do_accessible_logs'/0 =
    %% Line 328
    fun () ->
	let <_cor7> =
	    %% Line 330
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[L|_cor2]> when 'true' ->
				let <_cor5> =
				    call 'erlang':'hd'
					(L)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      call 'ets':'match'
			  ('disk_log_names', {'$1','_','local'})
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  let <Local> =
		%% Line 331
		call 'lists':'sort'
		    (_cor7)
	    in  let <_cor10> =
		    %% Line 332
		    call 'pg2':'which_groups'
			()
		in  let <Groups0> =
			%% Line 332
			call 'ordsets':'from_list'
			    (_cor10)
		    in  let <_cor12> =
			    %% Line 333
			    call 'ordsets':'subtract'
				(Groups0, Local)
			in  let <Groups> =
				%% Line 333
				call 'ordsets':'to_list'
				    (_cor12)
			    in  let <_cor20> =
				    %% Line 334
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor17) ->
						  case _cor17 of
						    <[L|_cor15]> when 'true' ->
							let <_cor16> =
							    apply 'dist_pids'/1
								(L)
							in  ( case <> of
								<>
								    when call 'erlang':'=/='
									  (_cor16,
									   []) ->
								    let <_cor18> =
									apply 'lc$^1'/1
									    (_cor15)
								    in  ( [L|_cor18]
									  -| ['compiler_generated'] )
								( <> when 'true' ->
								      apply 'lc$^1'/1
									  (_cor15)
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor17> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor17})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (Groups)
				      -| ['list_comprehension'] )
				in  %% Line 335
				    {Local,_cor20}
'get_local_pid'/1 =
    %% Line 337
    fun (_cor0) ->
	%% Line 338
	case call 'ets':'lookup'
		 ('disk_log_names', _cor0) of
	  %% Line 339
	  <[{_cor3,Pid,'local'}|[]]>
	      when call 'erlang':'=:='
		    (_cor3,
		     _cor0) ->
	      %% Line 340
	      {'local',Pid}
	  %% Line 341
	  <[{_cor4,Pid,'distr'}|[]]>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor0) ->
	      %% Line 342
	      {'distributed',Pid}
	  %% Line 343
	  <[]> when 'true' ->
	      %% Line 344
	      'undefined'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_get_log_pids'/1 =
    %% Line 348
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 349
		call 'ets':'lookup'
		    ('disk_log_names', _cor0)
	in  %% Line 349
	    case _cor1 of
	      %% Line 350
	      <[{_cor6,Pid,'local'}|[]]>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor0) ->
		  %% Line 351
		  {'local',Pid}
	      %% Line 352
	      <[{_cor7,_X_Pid,'distr'}|[]]>
		  when call 'erlang':'=:='
			(_cor7,
			 _cor0) ->
		  %% Line 353
		  case call 'pg2':'get_members'
			   (_cor0) of
		    %% Line 354
		    <[]> when 'true' ->
			%% Line 355
			'undefined'
		    %% Line 356
		    <Members> when 'true' ->
			%% Line 357
			{'distributed',Members}
		  end
	      %% Line 359
	      <_X_EmptyOrError> when 'true' ->
		  %% Line 360
		  case apply 'dist_pids'/1
			   (_cor0) of
		    %% Line 361
		    <[]> when 'true' ->
			'undefined'
		    %% Line 362
		    <Pids> when 'true' ->
			{'distributed',Pids}
		  end
	    end
'dist_pids'/1 =
    %% Line 366
    fun (_cor0) ->
	let <_cor2> =
	    catch
		%% Line 369
		call 'pg2':'get_members'
		    (_cor0)
	in  %% Line 369
	    case _cor2 of
	      %% Line 370
	      <Pids = [Pid|_cor10]> when 'true' ->
		  let <_cor3> =
		      %% Line 371
		      call 'erlang':'node'
			  (Pid)
		  in  %% Line 371
		      case call 'rpc':'call'
			       (_cor3, 'disk_log_server', 'get_local_pid', [_cor0|[]]) of
			%% Line 372
			<'undefined'> when 'true' ->
			    let <_cor5> =
				catch
				    let <_cor4> =
					%% Line 373
					call 'pg2':'get_members'
					    (_cor0)
				    in  %% Line 373
					call 'lists':'member'
					    (Pid, _cor4)
			    in  %% Line 373
				case _cor5 of
				  %% Line 374
				  <'true'> when 'true' ->
				      []
				  %% Line 375
				  <_cor11> when 'true' ->
				      apply 'dist_pids'/1
					  (_cor0)
				end
			%% Line 377
			<_cor12> when 'true' ->
			    %% Line 378
			    Pids
		      end
	      %% Line 380
	      <_cor13> when 'true' ->
		  %% Line 381
		  []
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('disk_log_server')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('disk_log_server', _cor0)
end