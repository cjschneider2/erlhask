module 'gen_sctp' ['abort'/2,
		   'close'/1,
		   'connect'/4,
		   'connect'/5,
		   'connect_init'/4,
		   'connect_init'/5,
		   'controlling_process'/2,
		   'eof'/2,
		   'error_string'/1,
		   'listen'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/0,
		   'open'/1,
		   'open'/2,
		   'peeloff'/2,
		   'recv'/1,
		   'recv'/2,
		   'send'/3,
		   'send'/4]
    attributes [%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','sctp_initmsg'},[{'record_field',31,{'atom',31,'num_ostreams'}}|[{'record_field',32,{'atom',32,'max_instreams'}}|[{'record_field',33,{'atom',33,'max_attempts'}}|[{'record_field',34,{'atom',34,'max_init_timeo'}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sctp_sndrcvinfo'},[{'record_field',41,{'atom',41,'stream'}}|[{'record_field',42,{'atom',42,'ssn'}}|[{'record_field',43,{'atom',43,'flags'}}|[{'record_field',47,{'atom',47,'ppid'}}|[{'record_field',48,{'atom',48,'context'}}|[{'record_field',49,{'atom',49,'timetolive'}}|[{'record_field',50,{'atom',50,'tsn'}}|[{'record_field',51,{'atom',51,'cumtsn'}}|[{'record_field',52,{'atom',52,'assoc_id'}}]]]]]]]]],[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{{'record','sctp_assoc_change'},[{'record_field',65,{'atom',65,'state'},{'atom',65,'cant_assoc'}}|[{'record_field',66,{'atom',66,'error'},{'integer',66,0}}|[{'record_field',67,{'atom',67,'outbound_streams'},{'integer',67,0}}|[{'record_field',68,{'atom',68,'inbound_streams'},{'integer',68,0}}|[{'record_field',69,{'atom',69,'assoc_id'},{'integer',69,0}}]]]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','sctp_paddr_change'},[{'record_field',78,{'atom',78,'addr'},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'cons',78,{'integer',78,0},{'nil',78}}}}}}|[{'record_field',79,{'atom',79,'state'},{'atom',79,'addr_available'}}|[{'record_field',80,{'atom',80,'error'},{'integer',80,0}}|[{'record_field',81,{'atom',81,'assoc_id'},{'integer',81,0}}]]]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','sctp_remote_error'},[{'record_field',88,{'atom',88,'error'},{'integer',88,0}}|[{'record_field',89,{'atom',89,'assoc_id'},{'integer',89,0}}|[{'record_field',90,{'atom',90,'data'},{'nil',90}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','sctp_send_failed'},[{'record_field',100,{'atom',100,'flags'},{'atom',100,'false'}}|[{'record_field',101,{'atom',101,'error'},{'integer',101,0}}|[{'record_field',102,{'atom',102,'info'},{'record',102,'sctp_sndrcvinfo',[]}}|[{'record_field',103,{'atom',103,'assoc_id'},{'integer',103,0}}|[{'record_field',104,{'atom',104,'data'},{'bin',104,[]}}]]]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','sctp_shutdown_event'},[{'record_field',111,{'atom',111,'assoc_id'},{'integer',111,0}}],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','sctp_adaptation_event'},[{'record_field',117,{'atom',117,'adaptation_ind'},{'integer',117,0}}|[{'record_field',118,{'atom',118,'assoc_id'},{'integer',118,0}}]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{{'record','sctp_pdapi_event'},[{'record_field',127,{'atom',127,'indication'},{'atom',127,'partial_delivery_aborted'}}|[{'record_field',128,{'atom',128,'assoc_id'},{'integer',128,0}}]],[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{{'record','sctp_rtoinfo'},[{'record_field',138,{'atom',138,'assoc_id'}}|[{'record_field',139,{'atom',139,'initial'}}|[{'record_field',140,{'atom',140,'max'}}|[{'record_field',141,{'atom',141,'min'}}]]]],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','sctp_assocparams'},[{'record_field',146,{'atom',146,'assoc_id'}}|[{'record_field',147,{'atom',147,'asocmaxrxt'}}|[{'record_field',148,{'atom',148,'number_peer_destinations'}}|[{'record_field',149,{'atom',149,'peer_rwnd'}}|[{'record_field',150,{'atom',150,'local_rwnd'}}|[{'record_field',151,{'atom',151,'cookie_life'}}]]]]]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{{'record','sctp_prim'},[{'record_field',158,{'atom',158,'assoc_id'}}|[{'record_field',159,{'atom',159,'addr'}}]],[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{{'record','sctp_setpeerprim'},[{'record_field',164,{'atom',164,'assoc_id'}}|[{'record_field',165,{'atom',165,'addr'}}]],[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','sctp_setadaptation'},[{'record_field',170,{'atom',170,'adaptation_ind'}}],[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','sctp_paddrparams'},[{'record_field',175,{'atom',175,'assoc_id'}}|[{'record_field',176,{'atom',176,'address'}}|[{'record_field',177,{'atom',177,'hbinterval'}}|[{'record_field',178,{'atom',178,'pathmaxrxt'}}|[{'record_field',179,{'atom',179,'pathmtu'}}|[{'record_field',180,{'atom',180,'sackdelay'}}|[{'record_field',181,{'atom',181,'flags'}}]]]]]]],[]}],
		%% Line 196
		'type' =
		    %% Line 196
		    [{{'record','sctp_event_subscribe'},[{'record_field',198,{'atom',198,'data_io_event'}}|[{'record_field',199,{'atom',199,'association_event'}}|[{'record_field',200,{'atom',200,'address_event'}}|[{'record_field',201,{'atom',201,'send_failure_event'}}|[{'record_field',202,{'atom',202,'peer_error_event'}}|[{'record_field',203,{'atom',203,'shutdown_event'}}|[{'record_field',204,{'atom',204,'partial_delivery_event'}}|[{'record_field',205,{'atom',205,'adaptation_layer_event'}}|[{'record_field',206,{'atom',206,'authentication_event'}}]]]]]]]]],[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{{'record','sctp_assoc_value'},[{'record_field',211,{'atom',211,'assoc_id'}}|[{'record_field',212,{'atom',212,'assoc_value'}}]],[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','sctp_paddrinfo'},[{'record_field',220,{'atom',220,'assoc_id'}}|[{'record_field',221,{'atom',221,'address'}}|[{'record_field',222,{'atom',222,'state'}}|[{'record_field',223,{'atom',223,'cwnd'}}|[{'record_field',224,{'atom',224,'srtt'}}|[{'record_field',225,{'atom',225,'rto'}}|[{'record_field',226,{'atom',226,'mtu'}}]]]]]]],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{{'record','sctp_status'},[{'record_field',231,{'atom',231,'assoc_id'}}|[{'record_field',232,{'atom',232,'state'}}|[{'record_field',240,{'atom',240,'rwnd'}}|[{'record_field',241,{'atom',241,'unackdata'}}|[{'record_field',242,{'atom',242,'penddata'}}|[{'record_field',243,{'atom',243,'instrms'}}|[{'record_field',244,{'atom',244,'outstrms'}}|[{'record_field',245,{'atom',245,'fragmentation_point'}}|[{'record_field',246,{'atom',246,'primary'}}]]]]]]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'assoc_id',{'type',37,'term',[]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'option',{'type',39,'union',[{'type',39,'tuple',[{'atom',39,'active'}|[{'type',39,'union',[{'atom',39,'true'}|[{'atom',39,'false'}|[{'atom',39,'once'}|[{'type',39,'range',[{'op',39,'-',{'integer',39,32768}}|[{'integer',39,32767}]]}]]]]}]]}|[{'type',40,'tuple',[{'atom',40,'buffer'}|[{'type',40,'non_neg_integer',[]}]]}|[{'type',41,'tuple',[{'atom',41,'dontroute'}|[{'type',41,'boolean',[]}]]}|[{'type',42,'tuple',[{'atom',42,'high_msgq_watermark'}|[{'type',42,'pos_integer',[]}]]}|[{'type',43,'tuple',[{'atom',43,'linger'}|[{'type',43,'tuple',[{'type',43,'boolean',[]}|[{'type',43,'non_neg_integer',[]}]]}]]}|[{'type',44,'tuple',[{'atom',44,'low_msgq_watermark'}|[{'type',44,'pos_integer',[]}]]}|[{'type',45,'tuple',[{'atom',45,'mode'}|[{'type',45,'union',[{'atom',45,'list'}|[{'atom',45,'binary'}]]}]]}|[{'atom',45,'list'}|[{'atom',45,'binary'}|[{'type',46,'tuple',[{'atom',46,'priority'}|[{'type',46,'non_neg_integer',[]}]]}|[{'type',47,'tuple',[{'atom',47,'recbuf'}|[{'type',47,'non_neg_integer',[]}]]}|[{'type',48,'tuple',[{'atom',48,'reuseaddr'}|[{'type',48,'boolean',[]}]]}|[{'type',49,'tuple',[{'atom',49,'ipv6_v6only'}|[{'type',49,'boolean',[]}]]}|[{'type',50,'tuple',[{'atom',50,'sctp_adaptation_layer'}|[{'type',50,'record',[{'atom',50,'sctp_setadaptation'}]}]]}|[{'type',51,'tuple',[{'atom',51,'sctp_associnfo'}|[{'type',51,'record',[{'atom',51,'sctp_assocparams'}]}]]}|[{'type',52,'tuple',[{'atom',52,'sctp_autoclose'}|[{'type',52,'non_neg_integer',[]}]]}|[{'type',53,'tuple',[{'atom',53,'sctp_default_send_param'}|[{'type',53,'record',[{'atom',53,'sctp_sndrcvinfo'}]}]]}|[{'type',54,'tuple',[{'atom',54,'sctp_delayed_ack_time'}|[{'type',54,'record',[{'atom',54,'sctp_assoc_value'}]}]]}|[{'type',55,'tuple',[{'atom',55,'sctp_disable_fragments'}|[{'type',55,'boolean',[]}]]}|[{'type',56,'tuple',[{'atom',56,'sctp_events'}|[{'type',56,'record',[{'atom',56,'sctp_event_subscribe'}]}]]}|[{'type',57,'tuple',[{'atom',57,'sctp_get_peer_addr_info'}|[{'type',57,'record',[{'atom',57,'sctp_paddrinfo'}]}]]}|[{'type',58,'tuple',[{'atom',58,'sctp_i_want_mapped_v4_addr'}|[{'type',58,'boolean',[]}]]}|[{'type',59,'tuple',[{'atom',59,'sctp_initmsg'}|[{'type',59,'record',[{'atom',59,'sctp_initmsg'}]}]]}|[{'type',60,'tuple',[{'atom',60,'sctp_maxseg'}|[{'type',60,'non_neg_integer',[]}]]}|[{'type',61,'tuple',[{'atom',61,'sctp_nodelay'}|[{'type',61,'boolean',[]}]]}|[{'type',62,'tuple',[{'atom',62,'sctp_peer_addr_params'}|[{'type',62,'record',[{'atom',62,'sctp_paddrparams'}]}]]}|[{'type',63,'tuple',[{'atom',63,'sctp_primary_addr'}|[{'type',63,'record',[{'atom',63,'sctp_prim'}]}]]}|[{'type',64,'tuple',[{'atom',64,'sctp_rtoinfo'}|[{'type',64,'record',[{'atom',64,'sctp_rtoinfo'}]}]]}|[{'type',65,'tuple',[{'atom',65,'sctp_set_peer_primary_addr'}|[{'type',65,'record',[{'atom',65,'sctp_setpeerprim'}]}]]}|[{'type',66,'tuple',[{'atom',66,'sctp_status'}|[{'type',66,'record',[{'atom',66,'sctp_status'}]}]]}|[{'type',67,'tuple',[{'atom',67,'sndbuf'}|[{'type',67,'non_neg_integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'tos'}|[{'type',68,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'option_name',{'type',70,'union',[{'atom',70,'active'}|[{'atom',71,'buffer'}|[{'atom',72,'dontroute'}|[{'atom',73,'high_msgq_watermark'}|[{'atom',74,'linger'}|[{'atom',75,'low_msgq_watermark'}|[{'atom',76,'mode'}|[{'atom',77,'priority'}|[{'atom',78,'recbuf'}|[{'atom',79,'reuseaddr'}|[{'atom',80,'ipv6_v6only'}|[{'atom',81,'sctp_adaptation_layer'}|[{'atom',82,'sctp_associnfo'}|[{'atom',83,'sctp_autoclose'}|[{'atom',84,'sctp_default_send_param'}|[{'atom',85,'sctp_delayed_ack_time'}|[{'atom',86,'sctp_disable_fragments'}|[{'atom',87,'sctp_events'}|[{'atom',88,'sctp_get_peer_addr_info'}|[{'atom',89,'sctp_i_want_mapped_v4_addr'}|[{'atom',90,'sctp_initmsg'}|[{'atom',91,'sctp_maxseg'}|[{'atom',92,'sctp_nodelay'}|[{'atom',93,'sctp_peer_addr_params'}|[{'atom',94,'sctp_primary_addr'}|[{'atom',95,'sctp_rtoinfo'}|[{'atom',96,'sctp_set_peer_primary_addr'}|[{'atom',97,'sctp_status'}|[{'atom',98,'sndbuf'}|[{'atom',99,'tos'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'sctp_socket',{'type',100,'port',[]},[]}],
		%% Line 102
		'export_type' =
		    %% Line 102
		    [{'assoc_id',0}|[{'option',0}|[{'option_name',0}|[{'sctp_socket',0}]]]],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'open',0},[{'type',104,'bounded_fun',[{'type',104,'fun',[{'type',104,'product',[]}|[{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'ok'}|[{'var',104,'Socket'}]]}|[{'type',104,'tuple',[{'atom',104,'error'}|[{'remote_type',104,[{'atom',104,'inet'}|[{'atom',104,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Socket'}|[{'type',105,'sctp_socket',[]}]]]]}]]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'open',1},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Port'}]}|[{'type',110,'union',[{'type',110,'tuple',[{'atom',110,'ok'}|[{'var',110,'Socket'}]]}|[{'type',110,'tuple',[{'atom',110,'error'}|[{'remote_type',110,[{'atom',110,'inet'}|[{'atom',110,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Port'}|[{'remote_type',111,[{'atom',111,'inet'}|[{'atom',111,'port_number'}|[[]]]]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Socket'}|[{'type',112,'sctp_socket',[]}]]]]}]]]]}|[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Opts'}]}|[{'type',113,'union',[{'type',113,'tuple',[{'atom',113,'ok'}|[{'var',113,'Socket'}]]}|[{'type',113,'tuple',[{'atom',113,'error'}|[{'remote_type',113,[{'atom',113,'inet'}|[{'atom',113,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Opts'}|[{'type',114,'list',[{'var',114,'Opt'}]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Opt'}|[{'type',115,'union',[{'type',115,'tuple',[{'atom',115,'ip'}|[{'var',115,'IP'}]]}|[{'type',116,'tuple',[{'atom',116,'ifaddr'}|[{'var',116,'IP'}]]}|[{'remote_type',117,[{'atom',117,'inet'}|[{'atom',117,'address_family'}|[[]]]]}|[{'type',118,'tuple',[{'atom',118,'port'}|[{'var',118,'Port'}]]}|[{'type',119,'tuple',[{'atom',119,'type'}|[{'var',119,'SockType'}]]}|[{'type',120,'option',[]}]]]]]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'IP'}|[{'type',121,'union',[{'remote_type',121,[{'atom',121,'inet'}|[{'atom',121,'ip_address'}|[[]]]]}|[{'atom',121,'any'}|[{'atom',121,'loopback'}]]]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Port'}|[{'remote_type',122,[{'atom',122,'inet'}|[{'atom',122,'port_number'}|[[]]]]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'SockType'}|[{'type',123,'union',[{'atom',123,'seqpacket'}|[{'atom',123,'stream'}]]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Socket'}|[{'type',124,'sctp_socket',[]}]]]]}]]]]]]]]}]]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'open',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Port'}|[{'var',140,'Opts'}]]}|[{'type',140,'union',[{'type',140,'tuple',[{'atom',140,'ok'}|[{'var',140,'Socket'}]]}|[{'type',140,'tuple',[{'atom',140,'error'}|[{'remote_type',140,[{'atom',140,'inet'}|[{'atom',140,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Opts'}|[{'type',141,'list',[{'var',141,'Opt'}]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Opt'}|[{'type',142,'union',[{'type',142,'tuple',[{'atom',142,'ip'}|[{'var',142,'IP'}]]}|[{'type',143,'tuple',[{'atom',143,'ifaddr'}|[{'var',143,'IP'}]]}|[{'remote_type',144,[{'atom',144,'inet'}|[{'atom',144,'address_family'}|[[]]]]}|[{'type',145,'tuple',[{'atom',145,'port'}|[{'var',145,'Port'}]]}|[{'type',146,'tuple',[{'atom',146,'type'}|[{'var',146,'SockType'}]]}|[{'type',147,'option',[]}]]]]]]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'IP'}|[{'type',148,'union',[{'remote_type',148,[{'atom',148,'inet'}|[{'atom',148,'ip_address'}|[[]]]]}|[{'atom',148,'any'}|[{'atom',148,'loopback'}]]]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Port'}|[{'remote_type',149,[{'atom',149,'inet'}|[{'atom',149,'port_number'}|[[]]]]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'SockType'}|[{'type',150,'union',[{'atom',150,'seqpacket'}|[{'atom',150,'stream'}]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Socket'}|[{'type',151,'sctp_socket',[]}]]]]}]]]]]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'close',1},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'Socket'}]}|[{'type',158,'union',[{'atom',158,'ok'}|[{'type',158,'tuple',[{'atom',158,'error'}|[{'remote_type',158,[{'atom',158,'inet'}|[{'atom',158,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Socket'}|[{'type',159,'sctp_socket',[]}]]]]}]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'listen',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Socket'}|[{'var',172,'IsServer'}]]}|[{'type',172,'union',[{'atom',172,'ok'}|[{'type',172,'tuple',[{'atom',172,'error'}|[{'var',172,'Reason'}]]}]]}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Socket'}|[{'type',173,'sctp_socket',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'IsServer'}|[{'type',174,'boolean',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Reason'}|[{'type',175,'term',[]}]]]]}]]]]]}|[{'type',176,'bounded_fun',[{'type',176,'fun',[{'type',176,'product',[{'var',176,'Socket'}|[{'var',176,'Backlog'}]]}|[{'type',176,'union',[{'atom',176,'ok'}|[{'type',176,'tuple',[{'atom',176,'error'}|[{'var',176,'Reason'}]]}]]}]]}|[[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Socket'}|[{'type',177,'sctp_socket',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Backlog'}|[{'type',178,'integer',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Reason'}|[{'type',179,'term',[]}]]]]}]]]]]}]]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'peeloff',2},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'Socket'}|[{'var',192,'Assoc'}]]}|[{'type',192,'union',[{'type',192,'tuple',[{'atom',192,'ok'}|[{'var',192,'NewSocket'}]]}|[{'type',192,'tuple',[{'atom',192,'error'}|[{'var',192,'Reason'}]]}]]}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Socket'}|[{'type',193,'sctp_socket',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Assoc'}|[{'type',194,'union',[{'type',194,'record',[{'atom',194,'sctp_assoc_change'}]}|[{'type',194,'assoc_id',[]}]]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'NewSocket'}|[{'type',195,'sctp_socket',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Reason'}|[{'type',196,'term',[]}]]]]}]]]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'connect',4},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'Socket'}|[{'var',207,'Addr'}|[{'var',207,'Port'}|[{'var',207,'Opts'}]]]]}|[{'type',207,'union',[{'type',207,'tuple',[{'atom',207,'ok'}|[{'var',207,'Assoc'}]]}|[{'type',207,'tuple',[{'atom',207,'error'}|[{'remote_type',207,[{'atom',207,'inet'}|[{'atom',207,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Socket'}|[{'type',208,'sctp_socket',[]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Addr'}|[{'type',209,'union',[{'remote_type',209,[{'atom',209,'inet'}|[{'atom',209,'ip_address'}|[[]]]]}|[{'remote_type',209,[{'atom',209,'inet'}|[{'atom',209,'hostname'}|[[]]]]}]]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Port'}|[{'remote_type',210,[{'atom',210,'inet'}|[{'atom',210,'port_number'}|[[]]]]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Opts'}|[{'type',211,'list',[{'ann_type',211,[{'var',211,'Opt'}|[{'type',211,'option',[]}]]}]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Assoc'}|[{'type',212,'record',[{'atom',212,'sctp_assoc_change'}]}]]]]}]]]]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'connect',5},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'Socket'}|[{'var',217,'Addr'}|[{'var',217,'Port'}|[{'var',217,'Opts'}|[{'var',217,'Timeout'}]]]]]}|[{'type',218,'union',[{'type',218,'tuple',[{'atom',218,'ok'}|[{'var',218,'Assoc'}]]}|[{'type',218,'tuple',[{'atom',218,'error'}|[{'remote_type',218,[{'atom',218,'inet'}|[{'atom',218,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Socket'}|[{'type',219,'sctp_socket',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Addr'}|[{'type',220,'union',[{'remote_type',220,[{'atom',220,'inet'}|[{'atom',220,'ip_address'}|[[]]]]}|[{'remote_type',220,[{'atom',220,'inet'}|[{'atom',220,'hostname'}|[[]]]]}]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Port'}|[{'remote_type',221,[{'atom',221,'inet'}|[{'atom',221,'port_number'}|[[]]]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Opts'}|[{'type',222,'list',[{'ann_type',222,[{'var',222,'Opt'}|[{'type',222,'option',[]}]]}]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Timeout'}|[{'type',223,'timeout',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Assoc'}|[{'type',224,'record',[{'atom',224,'sctp_assoc_change'}]}]]]]}]]]]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'connect_init',4},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'Socket'}|[{'var',234,'Addr'}|[{'var',234,'Port'}|[{'var',234,'Opts'}]]]]}|[{'type',235,'union',[{'atom',235,'ok'}|[{'type',235,'tuple',[{'atom',235,'error'}|[{'remote_type',235,[{'atom',235,'inet'}|[{'atom',235,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Socket'}|[{'type',236,'sctp_socket',[]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Addr'}|[{'type',237,'union',[{'remote_type',237,[{'atom',237,'inet'}|[{'atom',237,'ip_address'}|[[]]]]}|[{'remote_type',237,[{'atom',237,'inet'}|[{'atom',237,'hostname'}|[[]]]]}]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Port'}|[{'remote_type',238,[{'atom',238,'inet'}|[{'atom',238,'port_number'}|[[]]]]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Opts'}|[{'type',239,'list',[{'type',239,'option',[]}]}]]]]}]]]]]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'connect_init',5},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'Socket'}|[{'var',244,'Addr'}|[{'var',244,'Port'}|[{'var',244,'Opts'}|[{'var',244,'Timeout'}]]]]]}|[{'type',245,'union',[{'atom',245,'ok'}|[{'type',245,'tuple',[{'atom',245,'error'}|[{'remote_type',245,[{'atom',245,'inet'}|[{'atom',245,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Socket'}|[{'type',246,'sctp_socket',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Addr'}|[{'type',247,'union',[{'remote_type',247,[{'atom',247,'inet'}|[{'atom',247,'ip_address'}|[[]]]]}|[{'remote_type',247,[{'atom',247,'inet'}|[{'atom',247,'hostname'}|[[]]]]}]]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Port'}|[{'remote_type',248,[{'atom',248,'inet'}|[{'atom',248,'port_number'}|[[]]]]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Opts'}|[{'type',249,'list',[{'type',249,'option',[]}]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Timeout'}|[{'type',250,'timeout',[]}]]]]}]]]]]]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'eof',2},[{'type',291,'bounded_fun',[{'type',291,'fun',[{'type',291,'product',[{'var',291,'Socket'}|[{'var',291,'Assoc'}]]}|[{'type',291,'union',[{'atom',291,'ok'}|[{'type',291,'tuple',[{'atom',291,'error'}|[{'var',291,'Reason'}]]}]]}]]}|[[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Socket'}|[{'type',292,'sctp_socket',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Assoc'}|[{'type',293,'record',[{'atom',293,'sctp_assoc_change'}]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'Reason'}|[{'type',294,'term',[]}]]]]}]]]]]}]}],
		%% Line 301
		'spec' =
		    %% Line 301
		    [{{'abort',2},[{'type',301,'bounded_fun',[{'type',301,'fun',[{'type',301,'product',[{'var',301,'Socket'}|[{'var',301,'Assoc'}]]}|[{'type',301,'union',[{'atom',301,'ok'}|[{'type',301,'tuple',[{'atom',301,'error'}|[{'remote_type',301,[{'atom',301,'inet'}|[{'atom',301,'posix'}|[[]]]]}]]}]]}]]}|[[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Socket'}|[{'type',302,'sctp_socket',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Assoc'}|[{'type',303,'record',[{'atom',303,'sctp_assoc_change'}]}]]]]}]]]]}]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'send',3},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'Socket'}|[{'var',320,'SndRcvInfo'}|[{'var',320,'Data'}]]]}|[{'type',320,'union',[{'atom',320,'ok'}|[{'type',320,'tuple',[{'atom',320,'error'}|[{'var',320,'Reason'}]]}]]}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Socket'}|[{'type',321,'sctp_socket',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'SndRcvInfo'}|[{'type',322,'record',[{'atom',322,'sctp_sndrcvinfo'}]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Data'}|[{'type',323,'union',[{'type',323,'binary',[]}|[{'type',323,'iolist',[]}]]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Reason'}|[{'type',324,'term',[]}]]]]}]]]]]]}]}],
		%% Line 336
		'spec' =
		    %% Line 336
		    [{{'send',4},[{'type',336,'bounded_fun',[{'type',336,'fun',[{'type',336,'product',[{'var',336,'Socket'}|[{'var',336,'Assoc'}|[{'var',336,'Stream'}|[{'var',336,'Data'}]]]]}|[{'type',336,'union',[{'atom',336,'ok'}|[{'type',336,'tuple',[{'atom',336,'error'}|[{'var',336,'Reason'}]]}]]}]]}|[[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Socket'}|[{'type',337,'sctp_socket',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Assoc'}|[{'type',338,'union',[{'type',338,'record',[{'atom',338,'sctp_assoc_change'}]}|[{'type',338,'assoc_id',[]}]]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'Stream'}|[{'type',339,'integer',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Data'}|[{'type',340,'union',[{'type',340,'binary',[]}|[{'type',340,'iolist',[]}]]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Reason'}|[{'type',341,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 360
		'spec' =
		    %% Line 360
		    [{{'recv',1},[{'type',360,'bounded_fun',[{'type',360,'fun',[{'type',360,'product',[{'var',360,'Socket'}]}|[{'type',360,'union',[{'type',360,'tuple',[{'atom',360,'ok'}|[{'type',360,'tuple',[{'var',360,'FromIP'}|[{'var',360,'FromPort'}|[{'var',360,'AncData'}|[{'var',360,'Data'}]]]]}]]}|[{'type',361,'tuple',[{'atom',361,'error'}|[{'var',361,'Reason'}]]}]]}]]}|[[{'type',362,'constraint',[{'atom',362,'is_subtype'}|[[{'var',362,'Socket'}|[{'type',362,'sctp_socket',[]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'FromIP'}|[{'remote_type',363,[{'atom',363,'inet'}|[{'atom',363,'ip_address'}|[[]]]]}]]]]}|[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'FromPort'}|[{'remote_type',364,[{'atom',364,'inet'}|[{'atom',364,'port_number'}|[[]]]]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'AncData'}|[{'type',365,'list',[{'type',365,'record',[{'atom',365,'sctp_sndrcvinfo'}]}]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Data'}|[{'type',366,'union',[{'type',366,'binary',[]}|[{'type',366,'string',[]}|[{'type',366,'record',[{'atom',366,'sctp_sndrcvinfo'}]}|[{'type',367,'record',[{'atom',367,'sctp_assoc_change'}]}|[{'type',367,'record',[{'atom',367,'sctp_paddr_change'}]}|[{'type',368,'record',[{'atom',368,'sctp_adaptation_event'}]}]]]]]]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Reason'}|[{'type',369,'union',[{'remote_type',369,[{'atom',369,'inet'}|[{'atom',369,'posix'}|[[]]]]}|[{'type',369,'record',[{'atom',369,'sctp_send_failed'}]}|[{'type',369,'record',[{'atom',369,'sctp_paddr_change'}]}|[{'type',370,'record',[{'atom',370,'sctp_pdapi_event'}]}|[{'type',370,'record',[{'atom',370,'sctp_remote_error'}]}|[{'type',371,'record',[{'atom',371,'sctp_shutdown_event'}]}]]]]]]}]]]]}]]]]]]]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'recv',2},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'Socket'}|[{'var',376,'Timeout'}]]}|[{'type',376,'union',[{'type',376,'tuple',[{'atom',376,'ok'}|[{'type',376,'tuple',[{'var',376,'FromIP'}|[{'var',376,'FromPort'}|[{'var',376,'AncData'}|[{'var',376,'Data'}]]]]}]]}|[{'type',377,'tuple',[{'atom',377,'error'}|[{'var',377,'Reason'}]]}]]}]]}|[[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'Socket'}|[{'type',378,'sctp_socket',[]}]]]]}|[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'Timeout'}|[{'type',379,'timeout',[]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'FromIP'}|[{'remote_type',380,[{'atom',380,'inet'}|[{'atom',380,'ip_address'}|[[]]]]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'FromPort'}|[{'remote_type',381,[{'atom',381,'inet'}|[{'atom',381,'port_number'}|[[]]]]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'AncData'}|[{'type',382,'list',[{'type',382,'record',[{'atom',382,'sctp_sndrcvinfo'}]}]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'Data'}|[{'type',383,'union',[{'type',383,'binary',[]}|[{'type',383,'string',[]}|[{'type',383,'record',[{'atom',383,'sctp_sndrcvinfo'}]}|[{'type',384,'record',[{'atom',384,'sctp_assoc_change'}]}|[{'type',384,'record',[{'atom',384,'sctp_paddr_change'}]}|[{'type',385,'record',[{'atom',385,'sctp_adaptation_event'}]}]]]]]]}]]]]}|[{'type',386,'constraint',[{'atom',386,'is_subtype'}|[[{'var',386,'Reason'}|[{'type',386,'union',[{'remote_type',386,[{'atom',386,'inet'}|[{'atom',386,'posix'}|[[]]]]}|[{'type',386,'record',[{'atom',386,'sctp_send_failed'}]}|[{'type',386,'record',[{'atom',386,'sctp_paddr_change'}]}|[{'type',387,'record',[{'atom',387,'sctp_pdapi_event'}]}|[{'type',387,'record',[{'atom',387,'sctp_remote_error'}]}|[{'type',388,'record',[{'atom',388,'sctp_shutdown_event'}]}]]]]]]}]]]]}]]]]]]]]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'error_string',1},[{'type',400,'bounded_fun',[{'type',400,'fun',[{'type',400,'product',[{'var',400,'ErrorNumber'}]}|[{'type',400,'union',[{'atom',400,'ok'}|[{'type',400,'string',[]}|[{'atom',400,'unknown_error'}]]]}]]}|[[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'ErrorNumber'}|[{'type',401,'integer',[]}]]]]}]]]}]}],
		%% Line 438
		'spec' =
		    %% Line 438
		    [{{'controlling_process',2},[{'type',438,'bounded_fun',[{'type',438,'fun',[{'type',438,'product',[{'var',438,'Socket'}|[{'var',438,'Pid'}]]}|[{'type',438,'union',[{'atom',438,'ok'}|[{'type',438,'tuple',[{'atom',438,'error'}|[{'var',438,'Reason'}]]}]]}]]}|[[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Socket'}|[{'type',439,'sctp_socket',[]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Pid'}|[{'type',440,'pid',[]}]]]]}|[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Reason'}|[{'type',441,'union',[{'atom',441,'closed'}|[{'atom',441,'not_owner'}|[{'remote_type',441,[{'atom',441,'inet'}|[{'atom',441,'posix'}|[[]]]]}]]]}]]]]}]]]]]}]}]]
'open'/0 =
    %% Line 107
    fun () ->
	%% Line 108
	apply 'open'/1
	    ([])
'open'/1 =
    %% Line 126
    fun (_cor0) ->
	case _cor0 of
	  <Opts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Mod> =
		  %% Line 127
		  apply 'mod'/2
		      (Opts, 'undefined')
	      in  %% Line 128
		  case call Mod:'open'
			   (Opts) of
		    %% Line 129
		    <{'error','badarg'}> when 'true' ->
			%% Line 130
			call 'erlang':'error'
			    ('badarg', [Opts|[]])
		    %% Line 131
		    <{'error','einval'}> when 'true' ->
			%% Line 132
			call 'erlang':'error'
			    ('badarg', [Opts|[]])
		    %% Line 133
		    <Result> when 'true' ->
			Result
		  end
	  %% Line 135
	  <Port>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 136
	      apply 'open'/1
		  ([{'port',Port}|[]])
	  %% Line 137
	  <X> when 'true' ->
	      %% Line 138
	      call 'erlang':'error'
		  ('badarg', [X|[]])
	end
'open'/2 =
    %% Line 153
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Opts>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Port)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Opts)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 154
	      apply 'open'/1
		  ([{'port',Port}|Opts])
	  %% Line 155
	  <Port,Opts> when 'true' ->
	      %% Line 156
	      call 'erlang':'error'
		  ('badarg', [Port|[Opts|[]]])
	end
'close'/1 =
    %% Line 161
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 162
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 163
		<{'ok',Mod}> when 'true' ->
		    %% Line 164
		    call Mod:'close'
			(S)
		%% Line 165
		<{'error','closed'}> when 'true' ->
		    'ok'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 167
	  <S> when 'true' ->
	      %% Line 168
	      call 'erlang':'error'
		  ('badarg', [S|[]])
	end
'listen'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Backlog>
	      when let <_cor4> =
		    let <_cor2> =
			%% Line 182
			call 'erlang':'is_port'
			    (S)
		    in  let <_cor3> =
			    %% Line 182
			    call 'erlang':'is_boolean'
				(Backlog)
			in  %% Line 182
			    call 'erlang':'and'
				(_cor2, _cor3)
		in  let <_cor7> =
			let <_cor5> =
			    %% Line 183
			    call 'erlang':'is_port'
				(S)
			in  let <_cor6> =
				%% Line 183
				call 'erlang':'is_integer'
				    (Backlog)
			    in  %% Line 183
				call 'erlang':'and'
				    (_cor5, _cor6)
		    in  %% Line 182
			call 'erlang':'or'
			    (_cor4, _cor7) ->
	      %% Line 184
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 185
		<{'ok',Mod}> when 'true' ->
		    %% Line 186
		    call Mod:'listen'
			(S, Backlog)
		%% Line 187
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 189
	  <S,Flag> when 'true' ->
	      %% Line 190
	      call 'erlang':'error'
		  ('badarg', [S|[Flag|[]]])
	end
'peeloff'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,{'sctp_assoc_change',_cor7,_cor8,_cor9,_cor10,AssocId}>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 199
	      apply 'peeloff'/2
		  (S, AssocId)
	  %% Line 200
	  <S,AssocId>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (AssocId)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 201
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 202
		<{'ok',Mod}> when 'true' ->
		    %% Line 203
		    call Mod:'peeloff'
			(S, AssocId)
		%% Line 204
		<Error> when 'true' ->
		    Error
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'peeloff',2}}] )
	    -| ['compiler_generated'] )
	end
'connect'/4 =
    %% Line 214
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 215
	apply 'connect'/5
	    (_cor3, _cor2, _cor1, _cor0, 'infinity')
'connect'/5 =
    %% Line 226
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 227
	case apply 'do_connect'/6
		 (_cor4, _cor3, _cor2, _cor1, _cor0, 'true') of
	  %% Line 228
	  <'badarg'> when 'true' ->
	      %% Line 229
	      call 'erlang':'error'
		  ('badarg', [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
	  %% Line 230
	  <Result> when 'true' ->
	      %% Line 231
	      Result
	end
'connect_init'/4 =
    %% Line 241
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 242
	apply 'connect_init'/5
	    (_cor3, _cor2, _cor1, _cor0, 'infinity')
'connect_init'/5 =
    %% Line 252
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 253
	case apply 'do_connect'/6
		 (_cor4, _cor3, _cor2, _cor1, _cor0, 'false') of
	  %% Line 254
	  <'badarg'> when 'true' ->
	      %% Line 255
	      call 'erlang':'error'
		  ('badarg', [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
	  %% Line 256
	  <Result> when 'true' ->
	      %% Line 257
	      Result
	end
'do_connect'/6 =
    %% Line 260
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,Addr,Port,Opts,Timeout,ConnWait>
	      when let <_cor6> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor7> =
			call 'erlang':'is_list'
			    (Opts)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 261
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 262
		<{'ok',Mod}> when 'true' ->
		    %% Line 263
		    case call Mod:'getserv'
			     (Port) of
		      %% Line 264
		      <{'ok',_cor33}>
			  when call 'erlang':'=:='
				(_cor33,
				 Port) ->
			  %% Line 265
			  try
			      call 'inet':'start_timer'
				  (Timeout)
			  of <_cor8> ->
			      %% Line 267
			      letrec
				  'after$^0'/0 =
				      fun () ->
					  %% Line 277
					  ( call 'inet':'stop_timer'
						(_cor8)
					    -| ['result_not_wanted'] )
			      in  try
				      try
					  call Mod:'getaddr'
					      (Addr, _cor8)
				      of <_cor9> ->
					  case _cor9 of
					    %% Line 268
					    <{'ok',IP}> when 'true' ->
						let <_cor10> =
						    %% Line 269
						    case <> of
						      <>
							  when call 'erlang':'=:='
								(ConnWait,
								 'false') ->
							  %% Line 270
							  'nowait'
						      %% Line 271
						      <> when 'true' ->
							  _cor8
						    end
						in  %% Line 274
						    call Mod:'connect'
							(S, IP, Port, Opts, _cor10)
					    %% Line 275
					    <Error> when 'true' ->
						Error
					  end
				      catch <_cor15,_cor14,_cor13> ->
					  primop 'raise'
					      (_cor13, _cor14)
				  of <_cor17> ->
				      do  ( apply 'after$^0'/0
						()
					    -| ['compiler_generated'] )
					  _cor17
				  catch <_cor20,_cor19,_cor18> ->
				      do  ( apply 'after$^0'/0
						()
					    -| ['compiler_generated'] )
					  primop 'raise'
					      (_cor18, _cor19)
			  catch <_cor24,_cor23,_cor22> ->
			      case <_cor24,_cor23,_cor22> of
				%% Line 280
				<'error','badarg',_cor34> when 'true' ->
				    %% Line 281
				    'badarg'
				( <_cor24,_cor23,_cor22> when 'true' ->
				      primop 'raise'
					  (_cor22, _cor23)
				  -| ['compiler_generated'] )
			      end
		      %% Line 283
		      <Error> when 'true' ->
			  Error
		    end
		%% Line 285
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 287
	  <_X_S,_X_Addr,_X_Port,_X_Opts,_X_Timeout,_X_ConnWait> when 'true' ->
	      %% Line 288
	      'badarg'
	end
'eof'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,{'sctp_assoc_change',_cor4,_cor5,_cor6,_cor7,AssocId}>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 297
	      apply 'eof_or_abort'/3
		  (S, AssocId, 'eof')
	  %% Line 298
	  <S,Assoc> when 'true' ->
	      %% Line 299
	      call 'erlang':'error'
		  ('badarg', [S|[Assoc|[]]])
	end
'abort'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,{'sctp_assoc_change',_cor4,_cor5,_cor6,_cor7,AssocId}>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 306
	      apply 'eof_or_abort'/3
		  (S, AssocId, 'abort')
	  %% Line 307
	  <S,Assoc> when 'true' ->
	      %% Line 308
	      call 'erlang':'error'
		  ('badarg', [S|[Assoc|[]]])
	end
'eof_or_abort'/3 =
    %% Line 310
    fun (_cor2,_cor1,_cor0) ->
	%% Line 311
	case call 'inet_db':'lookup_socket'
		 (_cor2) of
	  %% Line 312
	  <{'ok',Mod}> when 'true' ->
	      %% Line 313
	      call Mod:'sendmsg'
		  (_cor2, {'sctp_sndrcvinfo','undefined','undefined',%% Line 314
								     [_cor0|[]],'undefined','undefined','undefined','undefined','undefined',_cor1}, %% Line 315
																		    #{}#)
	  %% Line 316
	  <Error> when 'true' ->
	      Error
	end
'send'/3 =
    %% Line 327
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,SRI = {'sctp_sndrcvinfo',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15},Data>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 328
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 329
		<{'ok',Mod}> when 'true' ->
		    %% Line 330
		    call Mod:'sendmsg'
			(S, SRI, Data)
		%% Line 331
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 333
	  <S,SRI,Data> when 'true' ->
	      %% Line 334
	      call 'erlang':'error'
		  ('badarg', [S|[SRI|[Data|[]]]])
	end
'send'/4 =
    %% Line 343
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <S,{'sctp_assoc_change',_cor16,_cor17,_cor18,_cor19,AssocId},Stream,Data>
	      when let <_cor4> =
		    %% Line 344
		    call 'erlang':'is_port'
			(S)
		in  let <_cor5> =
			%% Line 344
			call 'erlang':'is_integer'
			    (Stream)
		    in  %% Line 344
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 345
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 346
		<{'ok',Mod}> when 'true' ->
		    %% Line 347
		    call Mod:'send'
			(S, AssocId, Stream, Data)
		%% Line 348
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 350
	  <S,AssocId,Stream,Data>
	      when %% Line 351
		try
		    let <_cor7> =
			call 'erlang':'is_port'
			    (S)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(AssocId)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (Stream)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 352
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 353
		<{'ok',Mod}> when 'true' ->
		    %% Line 354
		    call Mod:'send'
			(S, AssocId, Stream, Data)
		%% Line 355
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 357
	  <S,AssocChange,Stream,Data> when 'true' ->
	      %% Line 358
	      call 'erlang':'error'
		  ('badarg', [S|[AssocChange|[Stream|[Data|[]]]]])
	end
'recv'/1 =
    %% Line 373
    fun (_cor0) ->
	%% Line 374
	apply 'recv'/2
	    (_cor0, 'infinity')
'recv'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Timeout>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 391
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 392
		<{'ok',Mod}> when 'true' ->
		    %% Line 393
		    call Mod:'recv'
			(S, Timeout)
		%% Line 394
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 396
	  <S,Timeout> when 'true' ->
	      %% Line 397
	      call 'erlang':'error'
		  ('badarg', [S|[Timeout|[]]])
	end
'error_string'/1 =
    %% Line 403
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 404
	      'ok'
	  %% Line 405
	  <1> when 'true' ->
	      %% Line 406
	      [73|[110|[118|[97|[108|[105|[100|[32|[83|[116|[114|[101|[97|[109|[32|[73|[100|[101|[110|[116|[105|[102|[105|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 407
	  <2> when 'true' ->
	      %% Line 408
	      [77|[105|[115|[115|[105|[110|[103|[32|[77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 409
	  <3> when 'true' ->
	      %% Line 410
	      [83|[116|[97|[108|[101|[32|[67|[111|[111|[107|[105|[101|[32|[69|[114|[114|[111|[114]]]]]]]]]]]]]]]]]]
	  %% Line 411
	  <4> when 'true' ->
	      %% Line 412
	      [79|[117|[116|[32|[111|[102|[32|[82|[101|[115|[111|[117|[114|[99|[101]]]]]]]]]]]]]]]
	  %% Line 413
	  <5> when 'true' ->
	      %% Line 414
	      [85|[110|[114|[101|[115|[111|[108|[118|[97|[98|[108|[101|[32|[65|[100|[100|[114|[101|[115|[115]]]]]]]]]]]]]]]]]]]]
	  %% Line 415
	  <6> when 'true' ->
	      %% Line 416
	      [85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[67|[104|[117|[110|[107|[32|[84|[121|[112|[101]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 417
	  <7> when 'true' ->
	      %% Line 418
	      [73|[110|[118|[97|[108|[105|[100|[32|[77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 419
	  <8> when 'true' ->
	      %% Line 420
	      [85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114|[115]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 421
	  <9> when 'true' ->
	      %% Line 422
	      [78|[111|[32|[85|[115|[101|[114|[32|[68|[97|[116|[97]]]]]]]]]]]]
	  %% Line 423
	  <10> when 'true' ->
	      %% Line 424
	      [67|[111|[111|[107|[105|[101|[32|[82|[101|[99|[101|[105|[118|[101|[100|[32|[87|[104|[105|[108|[101|[32|[83|[104|[117|[116|[116|[105|[110|[103|[32|[68|[111|[119|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 425
	  <11> when 'true' ->
	      %% Line 426
	      [82|[101|[115|[116|[97|[114|[116|[32|[111|[102|[32|[97|[110|[32|[65|[115|[115|[111|[99|[105|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[78|[101|[119|[32|[65|[100|[100|[114|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 427
	  <12> when 'true' ->
	      %% Line 428
	      [85|[115|[101|[114|[32|[73|[110|[105|[116|[105|[97|[116|[101|[100|[32|[65|[98|[111|[114|[116]]]]]]]]]]]]]]]]]]]]
	  %% Line 429
	  <13> when 'true' ->
	      %% Line 430
	      [80|[114|[111|[116|[111|[99|[111|[108|[32|[86|[105|[111|[108|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]
	  %% Line 432
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 433
	      'unknown_error'
	  %% Line 434
	  <X> when 'true' ->
	      %% Line 435
	      call 'erlang':'error'
		  ('badarg', [X|[]])
	end
'controlling_process'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Pid>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 444
	      call 'inet':'udp_controlling_process'
		  (S, Pid)
	  %% Line 445
	  <S,Pid> when 'true' ->
	      %% Line 446
	      call 'erlang':'error'
		  ('badarg', [S|[Pid|[]]])
	end
'mod'/1 =
    %% Line 453
    fun (_cor0) ->
	%% Line 454
	case call 'inet_db':'sctp_module'
		 () of
	  %% Line 455
	  <'inet_sctp'>
	      when try
		    let <_cor1> =
			call 'erlang':'tuple_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 456
	      'inet6_sctp'
	  %% Line 457
	  <Mod> when 'true' ->
	      %% Line 458
	      Mod
	end
'mod'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'sctp_module',Mod}|_cor4],_X_Address> when 'true' ->
	      %% Line 463
	      Mod
	  %% Line 464
	  <['inet'|_cor5],_X_Address> when 'true' ->
	      %% Line 465
	      'inet_sctp'
	  %% Line 466
	  <['inet6'|_cor6],_X_Address> when 'true' ->
	      %% Line 467
	      'inet6_sctp'
	  %% Line 468
	  <[{'ip',Address}|Opts],_cor7> when 'true' ->
	      %% Line 469
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 470
	  <[{'ifaddr',Address}|Opts],_cor8> when 'true' ->
	      %% Line 471
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 472
	  <[_cor9|Opts],Address> when 'true' ->
	      %% Line 473
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 474
	  <[],Address> when 'true' ->
	      %% Line 475
	      apply 'mod'/1
		  (Address)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mod',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_sctp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gen_sctp', _cor0)
end