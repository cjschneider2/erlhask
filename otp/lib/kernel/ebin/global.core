module 'global' ['code_change'/3,
		 'del_lock'/1,
		 'del_lock'/2,
		 'handle_call'/3,
		 'handle_cast'/2,
		 'handle_info'/2,
		 'info'/0,
		 'init'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'node_disconnected'/1,
		 'notify_all_name'/3,
		 'random_exit_name'/3,
		 'random_notify_name'/3,
		 're_register_name'/2,
		 're_register_name'/3,
		 'register_name'/2,
		 'register_name'/3,
		 'register_name_external'/2,
		 'register_name_external'/3,
		 'registered_names'/0,
		 'resolve_it'/4,
		 'send'/2,
		 'set_lock'/1,
		 'set_lock'/2,
		 'set_lock'/3,
		 'start'/0,
		 'start_link'/0,
		 'stop'/0,
		 'sync'/0,
		 'sync'/1,
		 'terminate'/2,
		 'trans'/2,
		 'trans'/3,
		 'trans'/4,
		 'unregister_name'/1,
		 'unregister_name_external'/1,
		 'whereis_name'/1]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['gen_server'],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','state'},[{'typed_record_field',{'record_field',109,{'atom',109,'connect_all'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'known'},{'nil',110}},{'type',110,'list',[{'type',110,'node',[]}]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'synced'},{'nil',111}},{'type',111,'list',[{'type',111,'node',[]}]}}|[{'record_field',112,{'atom',112,'resolvers'},{'nil',112}}|[{'typed_record_field',{'record_field',113,{'atom',113,'syncers'},{'nil',113}},{'type',113,'list',[{'type',113,'pid',[]}]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'node_name'},{'call',114,{'atom',114,'node'},[]}},{'type',114,'node',[]}}|[{'record_field',115,{'atom',115,'the_locker'}}|[{'record_field',115,{'atom',115,'the_registrar'}}|[{'record_field',115,{'atom',115,'trace'}}|[{'typed_record_field',{'record_field',116,{'atom',116,'global_lock_down'},{'atom',116,'false'}},{'type',116,'boolean',[]}}]]]]]]]]]],[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'state',{'type',118,'record',[{'atom',118,'state'}]},[]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'sync',0},[{'type',169,'fun',[{'type',169,'product',[]}|[{'type',169,'union',[{'atom',169,'ok'}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'ann_type',169,[{'var',169,'Reason'}|[{'type',169,'term',[]}]]}]]}]]}]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'sync',1},[{'type',178,'fun',[{'type',178,'product',[{'type',178,'list',[{'type',178,'node',[]}]}]}|[{'type',178,'union',[{'atom',178,'ok'}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'ann_type',178,[{'var',178,'Reason'}|[{'type',178,'term',[]}]]}]]}]]}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'send',2},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'Name'}|[{'var',187,'Msg'}]]}|[{'var',187,'Pid'}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Name'}|[{'type',188,'term',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Msg'}|[{'type',189,'term',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Pid'}|[{'type',190,'pid',[]}]]]]}]]]]]}]}],
		%% Line 201
		'spec' =
		    %% Line 201
		    [{{'whereis_name',1},[{'type',201,'bounded_fun',[{'type',201,'fun',[{'type',201,'product',[{'var',201,'Name'}]}|[{'type',201,'union',[{'type',201,'pid',[]}|[{'atom',201,'undefined'}]]}]]}|[[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Name'}|[{'type',202,'term',[]}]]]]}]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'register_name',2},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'Name'}|[{'var',222,'Pid'}]]}|[{'type',222,'union',[{'atom',222,'yes'}|[{'atom',222,'no'}]]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Name'}|[{'type',223,'term',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Pid'}|[{'type',224,'pid',[]}]]]]}]]]]}]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{'method',{'type',228,'fun',[{'type',228,'product',[{'ann_type',228,[{'var',228,'Name'}|[{'type',228,'term',[]}]]}|[{'ann_type',228,[{'var',228,'Pid'}|[{'type',228,'pid',[]}]]}|[{'ann_type',228,[{'var',228,'Pid2'}|[{'type',228,'pid',[]}]]}]]]}|[{'type',229,'union',[{'type',229,'pid',[]}|[{'atom',229,'none'}]]}]]},[]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'register_name',3},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Name'}|[{'var',231,'Pid'}|[{'var',231,'Resolve'}]]]}|[{'type',231,'union',[{'atom',231,'yes'}|[{'atom',231,'no'}]]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Name'}|[{'type',232,'term',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Pid'}|[{'type',233,'pid',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Resolve'}|[{'type',234,'method',[]}]]]]}]]]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'unregister_name',1},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'Name'}]}|[{'var',267,'_'}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Name'}|[{'type',268,'term',[]}]]]]}]]]}]}],
		%% Line 284
		'spec' =
		    %% Line 284
		    [{{'re_register_name',2},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'Name'}|[{'var',284,'Pid'}]]}|[{'atom',284,'yes'}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Name'}|[{'type',285,'term',[]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Pid'}|[{'type',286,'pid',[]}]]]]}]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'re_register_name',3},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'Name'}|[{'var',290,'Pid'}|[{'var',290,'Resolve'}]]]}|[{'atom',290,'yes'}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Name'}|[{'type',291,'term',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Pid'}|[{'type',292,'pid',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Resolve'}|[{'type',293,'method',[]}]]]]}]]]]]}]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'registered_names',0},[{'type',305,'bounded_fun',[{'type',305,'fun',[{'type',305,'product',[]}|[{'type',305,'list',[{'var',305,'Name'}]}]]}|[[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Name'}|[{'type',306,'term',[]}]]]]}]]]}]}],
		%% Line 347
		'type' =
		    %% Line 347
		    [{'id',{'type',347,'tuple',[{'ann_type',347,[{'var',347,'ResourceId'}|[{'type',347,'term',[]}]]}|[{'ann_type',347,[{'var',347,'LockRequesterId'}|[{'type',347,'term',[]}]]}]]},[]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'set_lock',1},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'Id'}]}|[{'type',349,'boolean',[]}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Id'}|[{'type',350,'id',[]}]]]]}]]]}]}],
		%% Line 354
		'type' =
		    %% Line 354
		    [{'retries',{'type',354,'union',[{'type',354,'non_neg_integer',[]}|[{'atom',354,'infinity'}]]},[]}],
		%% Line 356
		'spec' =
		    %% Line 356
		    [{{'set_lock',2},[{'type',356,'bounded_fun',[{'type',356,'fun',[{'type',356,'product',[{'var',356,'Id'}|[{'var',356,'Nodes'}]]}|[{'type',356,'boolean',[]}]]}|[[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Id'}|[{'type',357,'id',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Nodes'}|[{'type',358,'list',[{'type',358,'node',[]}]}]]]]}]]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'set_lock',3},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'Id'}|[{'var',362,'Nodes'}|[{'var',362,'Retries'}]]]}|[{'type',362,'boolean',[]}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Id'}|[{'type',363,'id',[]}]]]]}|[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'Nodes'}|[{'type',364,'list',[{'type',364,'node',[]}]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'Retries'}|[{'type',365,'retries',[]}]]]]}]]]]]}]}],
		%% Line 387
		'spec' =
		    %% Line 387
		    [{{'del_lock',1},[{'type',387,'bounded_fun',[{'type',387,'fun',[{'type',387,'product',[{'var',387,'Id'}]}|[{'atom',387,'true'}]]}|[[{'type',388,'constraint',[{'atom',388,'is_subtype'}|[[{'var',388,'Id'}|[{'type',388,'id',[]}]]]]}]]]}]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'del_lock',2},[{'type',392,'bounded_fun',[{'type',392,'fun',[{'type',392,'product',[{'var',392,'Id'}|[{'var',392,'Nodes'}]]}|[{'atom',392,'true'}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Id'}|[{'type',393,'id',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Nodes'}|[{'type',394,'list',[{'type',394,'node',[]}]}]]]]}]]]]}]}],
		%% Line 400
		'type' =
		    %% Line 400
		    [{'trans_fun',{'type',400,'union',[{'type',400,'function',[]}|[{'type',400,'tuple',[{'type',400,'module',[]}|[{'type',400,'atom',[]}]]}]]},[]}],
		%% Line 402
		'spec' =
		    %% Line 402
		    [{{'trans',2},[{'type',402,'bounded_fun',[{'type',402,'fun',[{'type',402,'product',[{'var',402,'Id'}|[{'var',402,'Fun'}]]}|[{'type',402,'union',[{'var',402,'Res'}|[{'atom',402,'aborted'}]]}]]}|[[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Id'}|[{'type',403,'id',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Fun'}|[{'type',404,'trans_fun',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Res'}|[{'type',405,'term',[]}]]]]}]]]]]}]}],
		%% Line 408
		'spec' =
		    %% Line 408
		    [{{'trans',3},[{'type',408,'bounded_fun',[{'type',408,'fun',[{'type',408,'product',[{'var',408,'Id'}|[{'var',408,'Fun'}|[{'var',408,'Nodes'}]]]}|[{'type',408,'union',[{'var',408,'Res'}|[{'atom',408,'aborted'}]]}]]}|[[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Id'}|[{'type',409,'id',[]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Fun'}|[{'type',410,'trans_fun',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Nodes'}|[{'type',411,'list',[{'type',411,'node',[]}]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Res'}|[{'type',412,'term',[]}]]]]}]]]]]]}]}],
		%% Line 415
		'spec' =
		    %% Line 415
		    [{{'trans',4},[{'type',415,'bounded_fun',[{'type',415,'fun',[{'type',415,'product',[{'var',415,'Id'}|[{'var',415,'Fun'}|[{'var',415,'Nodes'}|[{'var',415,'Retries'}]]]]}|[{'type',415,'union',[{'var',415,'Res'}|[{'atom',415,'aborted'}]]}]]}|[[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'Id'}|[{'type',416,'id',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Fun'}|[{'type',417,'trans_fun',[]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Nodes'}|[{'type',418,'list',[{'type',418,'node',[]}]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Retries'}|[{'type',419,'retries',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Res'}|[{'type',420,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'init',1},[{'type',440,'fun',[{'type',440,'product',[{'type',440,'nil',[]}]}|[{'type',440,'tuple',[{'atom',440,'ok'}|[{'type',440,'state',[]}]]}]]}]}],
		%% Line 584
		'spec' =
		    %% Line 584
		    [{{'handle_call',3},[{'type',584,'fun',[{'type',584,'product',[{'type',584,'term',[]}|[{'type',584,'tuple',[{'type',584,'pid',[]}|[{'type',584,'term',[]}]]}|[{'type',584,'state',[]}]]]}|[{'type',585,'union',[{'type',585,'tuple',[{'atom',585,'noreply'}|[{'type',585,'state',[]}]]}|[{'type',586,'tuple',[{'atom',586,'reply'}|[{'type',586,'term',[]}|[{'type',586,'state',[]}]]]}|[{'type',587,'tuple',[{'atom',587,'stop'}|[{'atom',587,'normal'}|[{'atom',587,'stopped'}|[{'type',587,'state',[]}]]]]}]]]}]]}]}],
		%% Line 665
		'spec' =
		    %% Line 665
		    [{{'handle_cast',2},[{'type',665,'fun',[{'type',665,'product',[{'type',665,'term',[]}|[{'type',665,'state',[]}]]}|[{'type',665,'tuple',[{'atom',665,'noreply'}|[{'type',665,'state',[]}]]}]]}]}],
		%% Line 830
		'spec' =
		    %% Line 830
		    [{{'handle_info',2},[{'type',830,'fun',[{'type',830,'product',[{'type',830,'term',[]}|[{'type',830,'state',[]}]]}|[{'type',831,'union',[{'type',831,'tuple',[{'atom',831,'noreply'}|[{'type',831,'state',[]}]]}|[{'type',831,'tuple',[{'atom',831,'stop'}|[{'type',831,'term',[]}|[{'type',831,'state',[]}]]]}]]}]]}]}],
		%% Line 1173
		'spec' =
		    %% Line 1173
		    [{{'terminate',2},[{'type',1173,'fun',[{'type',1173,'product',[{'type',1173,'term',[]}|[{'type',1173,'state',[]}]]}|[{'atom',1173,'ok'}]]}]}],
		%% Line 1183
		'spec' =
		    %% Line 1183
		    [{{'code_change',3},[{'type',1183,'fun',[{'type',1183,'product',[{'type',1183,'term',[]}|[{'type',1183,'state',[]}|[{'type',1183,'term',[]}]]]}|[{'type',1183,'tuple',[{'atom',1183,'ok'}|[{'type',1183,'state',[]}]]}]]}]}],
		%% Line 1501
		'type' =
		    %% Line 1501
		    [{{'record','multi'},[{'record_field',1502,{'atom',1502,'local'},{'nil',1502}}|[{'record_field',1503,{'atom',1503,'remote'},{'nil',1503}}|[{'record_field',1504,{'atom',1504,'known'},{'nil',1504}}|[{'record_field',1507,{'atom',1507,'the_boss'}}|[{'record_field',1508,{'atom',1508,'just_synced'},{'atom',1508,'false'}}|[{'record_field',1510,{'atom',1510,'do_trace'}}]]]]]],[]}],
		%% Line 1513
		'type' =
		    %% Line 1513
		    [{{'record','him'},[{'record_field',1513,{'atom',1513,'node'}}|[{'record_field',1513,{'atom',1513,'locker'}}|[{'record_field',1513,{'atom',1513,'vsn'}}|[{'record_field',1513,{'atom',1513,'my_tag'}}]]]],[]}],
		%% Line 1518
		'spec' =
		    %% Line 1518
		    [{{'init_the_locker_fun',1},[{'type',1518,'fun',[{'type',1518,'product',[{'type',1518,'boolean',[]}]}|[{'type',1518,'fun',[{'type',1518,'product',[]}|[{'type',1518,'no_return',[]}]]}]]}]}],
		%% Line 1974
		'spec' =
		    %% Line 1974
		    [{{'random_exit_name',3},[{'type',1974,'bounded_fun',[{'type',1974,'fun',[{'type',1974,'product',[{'var',1974,'Name'}|[{'var',1974,'Pid1'}|[{'var',1974,'Pid2'}]]]}|[{'type',1974,'pid',[]}]]}|[[{'type',1975,'constraint',[{'atom',1975,'is_subtype'}|[[{'var',1975,'Name'}|[{'type',1975,'term',[]}]]]]}|[{'type',1976,'constraint',[{'atom',1976,'is_subtype'}|[[{'var',1976,'Pid1'}|[{'type',1976,'pid',[]}]]]]}|[{'type',1977,'constraint',[{'atom',1977,'is_subtype'}|[[{'var',1977,'Pid2'}|[{'type',1977,'pid',[]}]]]]}]]]]]}]}],
		%% Line 1985
		'spec' =
		    %% Line 1985
		    [{{'random_notify_name',3},[{'type',1985,'bounded_fun',[{'type',1985,'fun',[{'type',1985,'product',[{'var',1985,'Name'}|[{'var',1985,'Pid1'}|[{'var',1985,'Pid2'}]]]}|[{'type',1985,'pid',[]}]]}|[[{'type',1986,'constraint',[{'atom',1986,'is_subtype'}|[[{'var',1986,'Name'}|[{'type',1986,'term',[]}]]]]}|[{'type',1987,'constraint',[{'atom',1987,'is_subtype'}|[[{'var',1987,'Pid1'}|[{'type',1987,'pid',[]}]]]]}|[{'type',1988,'constraint',[{'atom',1988,'is_subtype'}|[[{'var',1988,'Pid2'}|[{'type',1988,'pid',[]}]]]]}]]]]]}]}],
		%% Line 1994
		'spec' =
		    %% Line 1994
		    [{{'notify_all_name',3},[{'type',1994,'bounded_fun',[{'type',1994,'fun',[{'type',1994,'product',[{'var',1994,'Name'}|[{'var',1994,'Pid1'}|[{'var',1994,'Pid2'}]]]}|[{'atom',1994,'none'}]]}|[[{'type',1995,'constraint',[{'atom',1995,'is_subtype'}|[[{'var',1995,'Name'}|[{'type',1995,'term',[]}]]]]}|[{'type',1996,'constraint',[{'atom',1996,'is_subtype'}|[[{'var',1996,'Pid1'}|[{'type',1996,'pid',[]}]]]]}|[{'type',1997,'constraint',[{'atom',1997,'is_subtype'}|[[{'var',1997,'Pid2'}|[{'type',1997,'pid',[]}]]]]}]]]]]}]}]]
'start'/0 =
    %% Line 160
    fun () ->
	%% Line 161
	call 'gen_server':'start'
	    ({'local','global_name_server'}, 'global', [], [])
'start_link'/0 =
    %% Line 163
    fun () ->
	%% Line 164
	call 'gen_server':'start_link'
	    ({'local','global_name_server'}, 'global', [], [])
'stop'/0 =
    %% Line 166
    fun () ->
	%% Line 167
	call 'gen_server':'call'
	    ('global_name_server', 'stop', 'infinity')
'sync'/0 =
    %% Line 170
    fun () ->
	%% Line 171
	case apply 'check_sync_nodes'/0
		 () of
	  %% Line 172
	  <Error = {'error',_cor1}> when 'true' ->
	      %% Line 173
	      Error
	  %% Line 174
	  <SyncNodes> when 'true' ->
	      %% Line 175
	      call 'gen_server':'call'
		  ('global_name_server', {'sync',SyncNodes}, 'infinity')
	end
'sync'/1 =
    %% Line 179
    fun (_cor0) ->
	%% Line 180
	case apply 'check_sync_nodes'/1
		 (_cor0) of
	  %% Line 181
	  <Error = {'error',_cor3}> when 'true' ->
	      %% Line 182
	      Error
	  %% Line 183
	  <SyncNodes> when 'true' ->
	      %% Line 184
	      call 'gen_server':'call'
		  ('global_name_server', {'sync',SyncNodes}, 'infinity')
	end
'send'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	%% Line 192
	case apply 'whereis_name'/1
		 (_cor1) of
	  %% Line 193
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      do  %% Line 194
		  call 'erlang':'!'
		      (Pid, _cor0)
		  %% Line 195
		  Pid
	  %% Line 196
	  <'undefined'> when 'true' ->
	      %% Line 197
	      call 'erlang':'exit'
		  ({'badarg',{_cor1,_cor0}})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'whereis_name'/1 =
    %% Line 203
    fun (_cor0) ->
	%% Line 204
	apply 'where'/1
	    (_cor0)
'node_disconnected'/1 =
    %% Line 206
    fun (_cor0) ->
	%% Line 207
	call 'erlang':'!'
	    ('global_name_server', {'nodedown',_cor0})
'register_name'/2 =
    %% Line 225
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 226
	      apply 'register_name'/3
		  (Name, Pid, ( 'random_exit_name'/3
				-| [{'id',{0,0,'-register_name/2-fun-0-'}}] ))
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'register_name',2}}] )
	    -| ['compiler_generated'] )
	end
'register_name'/3 =
    %% Line 235
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Pid,Method0>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <Method> =
		  %% Line 236
		  apply 'allow_tuple_fun'/1
		      (Method0)
	      in  let <Fun> =
		      %% Line 237
		      ( fun (_cor9) ->
			    let <_cor5> =
				%% Line 238
				apply 'where'/1
				    (Name)
			    in  let <_cor7> =
				    %% Line 238
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (_cor5,
						     'undefined') ->
					      apply 'check_dupname'/2
						  (Name, Pid)
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 238
				    case _cor7 of
				      %% Line 239
				      <'true'> when 'true' ->
					  do  %% Line 240
					      call 'gen_server':'multi_call'
						  (_cor9, %% Line 241
							  'global_name_server', %% Line 242
										{'register',Name,Pid,Method})
					      %% Line 243
					      'yes'
				      %% Line 244
				      <_cor15> when 'true' ->
					  %% Line 245
					  'no'
				    end
			-| [{'id',{0,0,'-register_name/3-fun-0-'}}] )
		  in  %% Line 249
		      call 'gen_server':'call'
			  ('global_name_server', {'registrar',Fun}, 'infinity')
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'register_name',3}}] )
	    -| ['compiler_generated'] )
	end
'check_dupname'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	%% Line 252
	case call 'ets':'lookup'
		 ('global_pid_names', _cor0) of
	  %% Line 253
	  <[]> when 'true' ->
	      %% Line 254
	      'true'
	  %% Line 255
	  <PidNames> when 'true' ->
	      %% Line 256
	      case call 'application':'get_env'
		       ('kernel', 'global_multi_name_action') of
		%% Line 257
		<{'ok','allow'}> when 'true' ->
		    %% Line 258
		    'true'
		%% Line 259
		<_cor13> when 'true' ->
		    let <_cor7> =
			%% Line 261
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[{_X_Pid,Name1}|_cor4]> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [Name1|_cor6]
						  -| ['compiler_generated'] )
					( <[_cor3|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (PidNames)
			  -| ['list_comprehension'] )
		    in  let <Names> =
			    %% Line 261
			    [_cor1|_cor7]
			in  do  %% Line 262
				call 'error_logger':'error_msg'
				    ([103|[108|[111|[98|[97|[108|[58|[32|[126|[119|[32|[114|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[117|[110|[100|[101|[114|[32|[115|[101|[118|[101|[114|[97|[108|[32|[110|[97|[109|[101|[115|[58|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[Names|[]]])
				%% Line 263
				'false'
	      end
	end
'unregister_name'/1 =
    %% Line 269
    fun (_cor0) ->
	%% Line 270
	case apply 'where'/1
		 (_cor0) of
	  %% Line 271
	  <'undefined'> when 'true' ->
	      %% Line 272
	      'ok'
	  %% Line 273
	  <_cor6> when 'true' ->
	      let <Fun> =
		  %% Line 274
		  ( fun (_cor1) ->
			do  %% Line 275
			    call 'gen_server':'multi_call'
				(_cor1, %% Line 276
					'global_name_server', %% Line 277
							      {'unregister',_cor0})
			    %% Line 278
			    'ok'
		    -| [{'id',{0,0,'-unregister_name/1-fun-0-'}}] )
	      in  %% Line 281
		  call 'gen_server':'call'
		      ('global_name_server', {'registrar',Fun}, 'infinity')
	end
're_register_name'/2 =
    %% Line 287
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 288
	      apply 're_register_name'/3
		  (Name, Pid, ( 'random_exit_name'/3
				-| [{'id',{0,0,'-re_register_name/2-fun-0-'}}] ))
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'re_register_name',2}}] )
	    -| ['compiler_generated'] )
	end
're_register_name'/3 =
    %% Line 294
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Pid,Method0>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <Method> =
		  %% Line 295
		  apply 'allow_tuple_fun'/1
		      (Method0)
	      in  let <Fun> =
		      %% Line 296
		      ( fun (_cor4) ->
			    do  %% Line 297
				call 'gen_server':'multi_call'
				    (_cor4, %% Line 298
					    'global_name_server', %% Line 299
								  {'register',Name,Pid,Method})
				%% Line 300
				'yes'
			-| [{'id',{0,0,'-re_register_name/3-fun-0-'}}] )
		  in  %% Line 303
		      call 'gen_server':'call'
			  ('global_name_server', {'registrar',Fun}, 'infinity')
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'re_register_name',3}}] )
	    -| ['compiler_generated'] )
	end
'registered_names'/0 =
    %% Line 307
    fun () ->
	%% Line 309
	call 'ets':'select'
	    ('global_names', [{{'$1','$2','$3','$4','$5'},[],['$1']}])
'register_name_external'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 327
	      apply 'register_name_external'/3
		  (Name, Pid, ( 'random_exit_name'/3
				-| [{'id',{0,0,'-register_name_external/2-fun-0-'}}] ))
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'register_name_external',2}}] )
	    -| ['compiler_generated'] )
	end
'register_name_external'/3 =
    %% Line 329
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Pid,Method>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <Fun> =
		  %% Line 330
		  ( fun (_cor5) ->
			%% Line 331
			case apply 'where'/1
				 (Name) of
			  %% Line 332
			  <'undefined'> when 'true' ->
			      let <_cor3> =
				  %% Line 336
				  call 'erlang':'node'
				      ()
			      in  do  %% Line 333
				      call 'gen_server':'multi_call'
					  (_cor5, %% Line 334
						  'global_name_server', %% Line 335
									{'register_ext',Name,Pid,%% Line 336
												 Method,_cor3})
				      %% Line 337
				      'yes'
			  %% Line 338
			  <_X_Pid> when 'true' ->
			      'no'
			end
		    -| [{'id',{0,0,'-register_name_external/3-fun-0-'}}] )
	      in  %% Line 342
		  call 'gen_server':'call'
		      ('global_name_server', {'registrar',Fun}, 'infinity')
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'register_name_external',3}}] )
	    -| ['compiler_generated'] )
	end
'unregister_name_external'/1 =
    %% Line 344
    fun (_cor0) ->
	%% Line 345
	apply 'unregister_name'/1
	    (_cor0)
'set_lock'/1 =
    %% Line 351
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 352
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 352
		call 'erlang':'nodes'
		    ()
	    in  %% Line 352
		apply 'set_lock'/4
		    (_cor0, [_cor1|_cor2], 'infinity', 1)
'set_lock'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	%% Line 360
	apply 'set_lock'/4
	    (_cor1, _cor0, 'infinity', 1)
'set_lock'/3 =
    %% Line 366
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Id,Nodes,Retries>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Retries)
		in  let <_cor4> =
			call 'erlang':'>='
			    (Retries, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 367
	      apply 'set_lock'/4
		  (Id, Nodes, Retries, 1)
	  %% Line 368
	  <Id,Nodes,'infinity'> when 'true' ->
	      %% Line 369
	      apply 'set_lock'/4
		  (Id, Nodes, 'infinity', 1)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'set_lock',3}}] )
	    -| ['compiler_generated'] )
	end
'set_lock'/4 =
    %% Line 371
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{_X_ResourceId,_X_LockRequesterId},[],_X_Retries,_X_Times> when 'true' ->
	      %% Line 372
	      'true'
	  %% Line 373
	  <Id = {_X_ResourceId,_X_LockRequesterId},Nodes,Retries,Times> when 'true' ->
	      %% Line 376
	      case apply 'set_lock_on_nodes'/2
		       (Id, Nodes) of
		%% Line 377
		<'true'> when 'true' ->
		    %% Line 379
		    'true'
		%% Line 380
		<Reply = 'false'>
		    when call 'erlang':'=:='
			  (Retries,
			   0) ->
		    %% Line 381
		    Reply
		%% Line 382
		<'false'> when 'true' ->
		    do  %% Line 383
			apply 'random_sleep'/1
			    (Times)
			let <_cor5> =
			    %% Line 384
			    apply 'dec'/1
				(Retries)
			in  let <_cor4> =
				%% Line 384
				call 'erlang':'+'
				    (Times, 1)
			    in  %% Line 384
				apply 'set_lock'/4
				    (Id, Nodes, _cor5, _cor4)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'set_lock',4}}] )
	    -| ['compiler_generated'] )
	end
'del_lock'/1 =
    %% Line 389
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 390
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 390
		call 'erlang':'nodes'
		    ()
	    in  %% Line 390
		apply 'del_lock'/2
		    (_cor0, [_cor1|_cor2])
'del_lock'/2 =
    %% Line 395
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Id = {_X_ResourceId,_X_LockRequesterId},Nodes> when 'true' ->
	      do  %% Line 397
		  call 'gen_server':'multi_call'
		      (Nodes, 'global_name_server', {'del_lock',Id})
		  %% Line 398
		  'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'del_lock',2}}] )
	    -| ['compiler_generated'] )
	end
'trans'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		call 'erlang':'nodes'
		    ()
	    in  apply 'trans'/4
		    (_cor1, _cor0, [_cor2|_cor3], 'infinity')
'trans'/3 =
    %% Line 413
    fun (_cor2,_cor1,_cor0) ->
	apply 'trans'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'trans'/4 =
    %% Line 421
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 422
	case apply 'set_lock'/3
		 (_cor3, _cor1, _cor0) of
	  %% Line 423
	  <'true'> when 'true' ->
	      %% Line 424
	      letrec
		  'after$^0'/0 =
		      fun () ->
			  %% Line 427
			  apply 'del_lock'/2
			      (_cor3, _cor1)
	      in  try
		      %% Line 425
		      apply _cor2
			  ()
		  of <_cor4> ->
		      do  ( apply 'after$^0'/0
				()
			    -| ['compiler_generated'] )
			  _cor4
		  catch <_cor7,_cor6,_cor5> ->
		      do  ( apply 'after$^0'/0
				()
			    -| ['compiler_generated'] )
			  primop 'raise'
			      (_cor5, _cor6)
	  %% Line 429
	  <'false'> when 'true' ->
	      %% Line 430
	      'aborted'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'info'/0 =
    %% Line 433
    fun () ->
	%% Line 434
	call 'gen_server':'call'
	    ('global_name_server', 'info', 'infinity')
'init'/1 =
    %% Line 442
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 443
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <_X_> =
		      %% Line 444
		      ( call 'ets':'new'
			    ('global_locks', ['set'|['named_table'|['protected']]])
			-| ['result_not_wanted'] )
		  in  let <_X_> =
			  %% Line 445
			  ( call 'ets':'new'
				('global_names', ['set'|['named_table'|['protected']]])
			    -| ['result_not_wanted'] )
		      in  let <_X_> =
			      %% Line 446
			      ( call 'ets':'new'
				    ('global_names_ext', ['set'|['named_table'|['protected']]])
				-| ['result_not_wanted'] )
			  in  let <_X_> =
				  %% Line 448
				  ( call 'ets':'new'
					('global_pid_names', ['bag'|['named_table'|['protected']]])
				    -| ['result_not_wanted'] )
			      in  let <_X_> =
				      %% Line 449
				      ( call 'ets':'new'
					    ('global_pid_ids', ['bag'|['named_table'|['protected']]])
					-| ['result_not_wanted'] )
				  in  let <_cor6> =
					  %% Line 452
					  call 'os':'getenv'
					      ([71|[76|[79|[66|[65|[76|[95|[72|[73|[71|[72|[95|[76|[69|[86|[69|[76|[95|[84|[82|[65|[67|[69]]]]]]]]]]]]]]]]]]]]]]])
				      in  let <DoTrace> =
					      %% Line 452
					      call 'erlang':'=:='
						  (_cor6, [84|[82|[85|[69]]]])
					  in  let <_cor9> =
						  %% Line 453
						  case DoTrace of
						    %% Line 454
						    <'true'> when 'true' ->
							do  %% Line 455
							    apply 'send_high_level_trace'/0
								()
							    %% Line 456
							    []
						    %% Line 457
						    <'false'> when 'true' ->
							%% Line 458
							'no_trace'
						    ( <_cor8> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor8})
						      -| ['compiler_generated'] )
						  end
					      in  let <_cor13> =
						      call 'erlang':'node'
							  ()
						  in  let <_cor12> =
							  %% Line 461
							  apply 'start_the_locker'/1
							      (DoTrace)
						      in  let <_cor11> =
							      %% Line 463
							      apply 'start_the_registrar'/0
								  ()
							  in  let <S> =
								  %% Line 461
								  {'state','undefined',[],[],[],[],_cor13,_cor12,_cor11,_cor9,'false'}
							      in  let <_cor15> =
								      %% Line 464
								      call 'erlang':'node'
									  ()
								  in  let <S1> =
									  %% Line 464
									  apply 'trace_message'/3
									      (S, {'init',_cor15}, [])
								      in  %% Line 466
									  case call 'init':'get_argument'
										   ('connect_all') of
									    %% Line 467
									    <{'ok',[[[102|[97|[108|[115|[101]]]]]]]}> when 'true' ->
										%% Line 468
										case S1 of
										  <{'state',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
										      let <_cor19> =
											  call 'erlang':'setelement'
											      (2, S1, 'false')
										      in  {'ok',_cor19}
										  ( <_cor35> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','state'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									    %% Line 469
									    <_cor36> when 'true' ->
										%% Line 470
										case S1 of
										  <{'state',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
										      let <_cor22> =
											  call 'erlang':'setelement'
											      (2, S1, 'true')
										      in  {'ok',_cor22}
										  ( <_cor47> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','state'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									  end
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 589
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'registrar',Fun},From,S> when 'true' ->
	      %% Line 590
	      ( case S of
		  ( <( {'state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec2,_cor51,_cor52}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'erlang':'!'
				(_rec2, {'trans_all_known',Fun,From})
			    %% Line 591
			    {'noreply',S}
		    -| ['compiler_generated'] )
		  ( <_cor53> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 595
	  <{'register',Name,Pid,Method},{FromPid,_X_Tag},S0> when 'true' ->
	      let <S> =
		  %% Line 596
		  apply 'ins_name'/6
		      (Name, Pid, Method, FromPid, [], S0)
	      in  %% Line 597
		  {'reply','yes',S}
	  %% Line 599
	  <{'unregister',Name},_X_From,S0> when 'true' ->
	      let <S> =
		  %% Line 600
		  apply 'delete_global_name2'/2
		      (Name, S0)
	      in  %% Line 601
		  {'reply','ok',S}
	  %% Line 603
	  <{'register_ext',Name,Pid,Method,RegNode},{FromPid,_X_Tag},S0> when 'true' ->
	      let <S> =
		  %% Line 604
		  apply 'ins_name_ext'/7
		      (Name, Pid, Method, RegNode, FromPid, [], S0)
	      in  %% Line 605
		  {'reply','yes',S}
	  %% Line 607
	  <{'set_lock',Lock},{Pid,_X_Tag},S0> when 'true' ->
	      %% Line 608
	      case apply 'handle_set_lock'/3
		       (Lock, Pid, S0) of
		<{Reply,S}> when 'true' ->
		    %% Line 609
		    {'reply',Reply,S}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 611
	  <{'del_lock',Lock},{Pid,_X_Tag},S0> when 'true' ->
	      let <S> =
		  %% Line 612
		  apply 'handle_del_lock'/3
		      (Lock, Pid, S0)
	      in  %% Line 613
		  {'reply','true',S}
	  %% Line 615
	  <'get_known',_X_From,S> when 'true' ->
	      %% Line 616
	      ( case S of
		  ( <( {'state',_cor54,_rec3,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec3,S}
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 618
	  <'get_synced',_X_From,S> when 'true' ->
	      %% Line 619
	      ( case S of
		  ( <( {'state',_cor64,_cor65,_rec4,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec4,S}
		    -| ['compiler_generated'] )
		  ( <_cor73> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 621
	  <{'sync',Nodes},From,S> when 'true' ->
	      let <_cor16> =
		  %% Line 625
		  call 'erlang':'node'
		      ()
	      in  let <_cor17> =
		      %% Line 625
		      call 'lists':'delete'
			  (_cor16, Nodes)
		  in  %% Line 625
		      ( case S of
			  ( <( {'state',_cor74,_cor75,_rec5,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor18> =
				    call 'erlang':'--'
					(_cor17, _rec5)
				in  let <Pid> =
					apply 'start_sync'/2
					    (_cor18, From)
				    in  let <_rec6> =
					    %% Line 626
					    [Pid|_cor77]
					in  let <_cor25> =
						%% Line 626
						call 'erlang':'setelement'
						    (6, S, _rec6)
					    in  %% Line 626
						{'noreply',_cor25}
			    -| ['compiler_generated'] )
			  ( <_cor83> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 628
	  <'get_protocol_version',_X_From,S> when 'true' ->
	      %% Line 629
	      {'reply',5,S}
	  %% Line 631
	  <'get_names_ext',_X_From,S> when 'true' ->
	      let <_cor26> =
		  %% Line 632
		  apply 'get_names_ext'/0
		      ()
	      in  %% Line 632
		  {'reply',_cor26,S}
	  %% Line 634
	  <'info',_X_From,S> when 'true' ->
	      %% Line 635
	      {'reply',S,S}
	  %% Line 638
	  <'high_level_trace_start',_X_From,S> when 'true' ->
	      %% Line 639
	      ( case S of
		  ( <( {'state',_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_rec9,_cor111,_cor112,_cor113}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'erlang':'!'
				(_rec9, {'do_trace','true'})
			    do  %% Line 640
				apply 'send_high_level_trace'/0
				    ()
				let <_cor32> =
				    %% Line 641
				    call 'erlang':'setelement'
					(10, S, [])
				in  let <_cor29> =
					%% Line 641
					call 'erlang':'node'
					    ()
				    in  let <_cor33> =
					    %% Line 641
					    apply 'trace_message'/3
						(_cor32, {'init',_cor29}, [])
					in  %% Line 641
					    {'reply','ok',_cor33}
		    -| ['compiler_generated'] )
		  ( <_cor114> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 642
	  <'high_level_trace_stop',_X_From,S> when 'true' ->
	      %% Line 643
	      case S of
		<{'state',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,TheLocker,_cor132,Trace,_cor133}> when 'true' ->
		    do  %% Line 644
			call 'erlang':'!'
			    (TheLocker, {'do_trace','false'})
			do  %% Line 645
			    apply 'wait_high_level_trace'/0
				()
			    let <_cor37> =
				%% Line 646
				call 'erlang':'setelement'
				    (10, S, 'no_trace')
			    in  %% Line 646
				{'reply',Trace,_cor37}
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 647
	  <'high_level_trace_get',_X_From,S = {'state',_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,Trace,_cor153}> when 'true' ->
	      let <_cor40> =
		  %% Line 648
		  call 'erlang':'setelement'
		      (10, S, [])
	      in  %% Line 648
		  {'reply',Trace,_cor40}
	  %% Line 650
	  <'stop',_X_From,S> when 'true' ->
	      %% Line 651
	      {'stop','normal','stopped',S}
	  %% Line 653
	  <Request,From,S> when 'true' ->
	      do  %% Line 654
		  call 'error_logger':'warning_msg'
		      ([84|[104|[101|[32|[103|[108|[111|[98|[97|[108|[95|[110|[97|[109|[101|[95|[115|[101|[114|[118|[101|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[104|[97|[110|[100|[108|[101|[95|[99|[97|[108|[108|[40|[126|[112|[44|[32|[126|[112|[44|[32|[95|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 657
																																																									       [Request|[From|[]]])
		  %% Line 658
		  {'noreply',S}
	end
'handle_cast'/2 =
    %% Line 667
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'init_connect',Vsn,Node,InitMsg},S> when 'true' ->
	      do  %% Line 670
		  case Vsn of
		    %% Line 673
		    <{HisVsn,HisTag}>
			when call 'erlang':'>'
			      (HisVsn,
			       5) ->
			%% Line 674
			( case S of
			    ( <( {'state',_cor56,_cor57,_cor58,_rec13,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'init_connect'/6
				      (5, Node, InitMsg, HisTag, _rec13, S)
			      -| ['compiler_generated'] )
			    ( <_cor65> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 675
		    <{HisVsn,HisTag}> when 'true' ->
			%% Line 676
			( case S of
			    ( <( {'state',_cor66,_cor67,_cor68,_rec14,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'init_connect'/6
				      (HisVsn, Node, InitMsg, HisTag, _rec14, S)
			      -| ['compiler_generated'] )
			    ( <_cor75> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 678
		    <Tuple>
			when call 'erlang':'is_tuple'
			      (Vsn) ->
			%% Line 680
			case call 'erlang':'tuple_to_list'
				 (Tuple) of
			  <[_X_HisVsn|[HisTag|_cor76]]> when 'true' ->
			      %% Line 682
			      ( case S of
				  ( <( {'state',_cor77,_cor78,_cor79,_rec15,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'init_connect'/6
					    (5, Node, InitMsg, HisTag, _rec15, S)
				    -| ['compiler_generated'] )
				  ( <_cor86> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 683
		    <_cor87> when 'true' ->
			let <Txt> =
			    %% Line 684
			    call 'io_lib':'format'
				([73|[108|[108|[101|[103|[97|[108|[32|[103|[108|[111|[98|[97|[108|[32|[112|[114|[111|[116|[111|[99|[111|[108|[32|[118|[101|[114|[115|[105|[111|[110|[32|[126|[112|[32|[78|[111|[100|[101|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 685
																																			    [Vsn|[Node|[]]])
			in  let <_cor11> =
				%% Line 686
				call 'lists':'flatten'
				    (Txt)
			    in  %% Line 686
				call 'error_logger':'info_report'
				    (_cor11)
		  end
		  %% Line 688
		  {'noreply',S}
	  %% Line 695
	  <{'lock_is_set',Node,MyTag,LockId},S> when 'true' ->
	      %% Line 698
	      case call 'erlang':'get'
		       ({'sync_tag_my',Node}) of
		%% Line 699
		<_cor88>
		    when call 'erlang':'=:='
			  (_cor88,
			   MyTag) ->
		    %% Line 700
		    ( case S of
			( <( {'state',_cor89,_cor90,_cor91,_rec16,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'lock_is_set'/3
				      (Node, _rec16, LockId)
				  %% Line 701
				  {'noreply',S}
			  -| ['compiler_generated'] )
			( <_cor98> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 702
		<_cor99> when 'true' ->
		    let <NewS> =
			%% Line 703
			apply 'cancel_locker'/3
			    (Node, S, MyTag)
		    in  %% Line 704
			{'noreply',NewS}
	      end
	  %% Line 712
	  <{'exchange',Node,NameList,_X_NameExtList,MyTag},S> when 'true' ->
	      %% Line 714
	      case call 'erlang':'get'
		       ({'sync_tag_my',Node}) of
		%% Line 715
		<_cor100>
		    when call 'erlang':'=:='
			  (_cor100,
			   MyTag) ->
		    %% Line 716
		    ( case S of
			( <( {'state',_cor101,_cor102,_cor103,_rec17,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'exchange'/3
				      (Node, NameList, _rec17)
				  %% Line 717
				  {'noreply',S}
			  -| ['compiler_generated'] )
			( <_cor110> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 718
		<_cor111> when 'true' ->
		    let <NewS> =
			%% Line 719
			apply 'cancel_locker'/3
			    (Node, S, MyTag)
		    in  %% Line 720
			{'noreply',NewS}
	      end
	  %% Line 729
	  <{'exchange_ops',Node,MyTag,Ops,Resolved},S0> when 'true' ->
	      let <S> =
		  %% Line 733
		  apply 'trace_message'/3
		      (S0, {'exit_resolver',Node}, [MyTag|[]])
	      in  %% Line 734
		  case call 'erlang':'get'
			   ({'sync_tag_my',Node}) of
		    %% Line 735
		    <_cor112>
			when call 'erlang':'=:='
			      (_cor112,
			       MyTag) ->
			%% Line 736
			( case S of
			    ( <( {'state',_cor113,_rec18,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor27> =
				      %% Line 738
				      call 'erlang':'node'
					  ()
				  in  let <_cor26> =
					  %% Line 739
					  apply 'get_names_ext'/0
					      ()
				      in  let <_cor25> =
					      %% Line 739
					      call 'erlang':'get'
						  ({'sync_tag_his',Node})
					  in  do  %% Line 737
						  call 'gen_server':'cast'
						      ({'global_name_server',Node}, %% Line 738
										    {'resolved',_cor27,Resolved,_rec18,_rec18,_cor26,_cor25})
						  %% Line 740
						  case call 'erlang':'get'
							   ({'save_ops',Node}) of
						    %% Line 741
						    <{'resolved',HisKnown,Names_ext,HisResolved}> when 'true' ->
							do  %% Line 742
							    call 'erlang':'put'
								({'save_ops',Node}, Ops)
							    let <NewS> =
								%% Line 743
								apply 'resolved'/5
								    (Node, HisResolved, HisKnown, Names_ext, S)
							    in  %% Line 744
								{'noreply',NewS}
						    %% Line 745
						    <'undefined'> when 'true' ->
							do  %% Line 746
							    call 'erlang':'put'
								({'save_ops',Node}, Ops)
							    %% Line 747
							    {'noreply',S}
						    ( <_cor29> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor29})
						      -| ['compiler_generated'] )
						  end
			      -| ['compiler_generated'] )
			    ( <_cor122> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 749
		    <_cor123> when 'true' ->
			let <NewS> =
			    %% Line 750
			    apply 'cancel_locker'/3
				(Node, S, MyTag)
			in  %% Line 751
			    {'noreply',NewS}
		  end
	  %% Line 759
	  <{'resolved',Node,HisResolved,HisKnown,_X_HisKnown_v2,%% Line 760
								Names_ext,%% Line 760
									  MyTag},%% Line 760
										 S> when 'true' ->
	      %% Line 763
	      case call 'erlang':'get'
		       ({'sync_tag_my',Node}) of
		%% Line 764
		<_cor124>
		    when call 'erlang':'=:='
			  (_cor124,
			   MyTag) ->
		    %% Line 766
		    case call 'erlang':'get'
			     ({'save_ops',Node}) of
		      %% Line 767
		      <Ops>
			  when call 'erlang':'is_list'
				(Ops) ->
			  let <NewS> =
			      %% Line 768
			      apply 'resolved'/5
				  (Node, HisResolved, HisKnown, Names_ext, S)
			  in  %% Line 769
			      {'noreply',NewS}
		      %% Line 770
		      <'undefined'> when 'true' ->
			  let <Resolved> =
			      %% Line 771
			      {'resolved',HisKnown,Names_ext,HisResolved}
			  in  do  %% Line 772
				  call 'erlang':'put'
				      ({'save_ops',Node}, Resolved)
				  %% Line 773
				  {'noreply',S}
		      ( <_cor34> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor34})
			-| ['compiler_generated'] )
		    end
		%% Line 775
		<_cor125> when 'true' ->
		    let <NewS> =
			%% Line 776
			apply 'cancel_locker'/3
			    (Node, S, MyTag)
		    in  %% Line 777
			{'noreply',NewS}
	      end
	  %% Line 785
	  <{'new_nodes',Node,Ops,Names_ext,Nodes,ExtraInfo},S> when 'true' ->
	      let <NewS> =
		  %% Line 788
		  apply 'new_nodes'/6
		      (Ops, Node, Names_ext, Nodes, ExtraInfo, S)
	      in  %% Line 789
		  {'noreply',NewS}
	  %% Line 796
	  <{'in_sync',Node,_X_IsKnown},S> when 'true' ->
	      let <_cor42> =
		  %% Line 799
		  ( fun (_cor40) ->
			call 'erlang':'!'
			    (_cor40, {'synced',[Node|[]]})
		    -| [{'id',{0,0,'-handle_cast/2-fun-0-'}}] )
	      in  %% Line 799
		  ( case S of
		      ( <( {'state',_cor126,_cor127,_cor128,_cor129,_rec19,_cor130,_cor131,_cor132,_cor133,_cor134}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'lists':'foreach'
				    (_cor42, _rec19)
				let <_cor43> =
				    %% Line 800
				    call 'erlang':'get'
					({'sync_tag_my',Node})
				in  let <NewS> =
					%% Line 800
					apply 'cancel_locker'/3
					    (Node, S, _cor43)
				    in  do  %% Line 801
					    apply 'reset_node_state'/1
						(Node)
					    %% Line 802
					    ( case NewS of
						( <( {'state',_cor136,_cor137,_rec20,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor49> =
							  case call 'lists':'member'
								   (Node, _rec20) of
							    %% Line 803
							    <'true'> when 'true' ->
								_rec20
							    %% Line 804
							    <'false'> when 'true' ->
								[Node|_rec20]
							    ( <_cor48> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor48})
							      -| ['compiler_generated'] )
							  end
						      in  let <_cor53> =
							      %% Line 806
							      call 'erlang':'setelement'
								  (4, NewS, _cor49)
							  in  %% Line 806
							      {'noreply',_cor53}
						  -| ['compiler_generated'] )
						( <_cor145> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor135> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 809
	  <{'async_del_name',_X_Name,_X_Pid},S> when 'true' ->
	      %% Line 813
	      {'noreply',S}
	  %% Line 815
	  <{'async_del_lock',_X_ResourceId,_X_Pid},S> when 'true' ->
	      %% Line 820
	      {'noreply',S}
	  %% Line 822
	  <Request,S> when 'true' ->
	      do  %% Line 823
		  call 'error_logger':'warning_msg'
		      ([84|[104|[101|[32|[103|[108|[111|[98|[97|[108|[95|[110|[97|[109|[101|[95|[115|[101|[114|[118|[101|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[104|[97|[110|[100|[108|[101|[95|[99|[97|[115|[116|[40|[126|[112|[44|[32|[95|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 825
																																																							 [Request|[]])
		  %% Line 826
		  {'noreply',S}
	end
'handle_info'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Exit = {'EXIT',Locker,_X_Reason},S = {'state',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}>
	      when call 'erlang':'=:='
		    (_cor99,
		     Locker) ->
	      let <_cor4> =
		  %% Line 834
		  call 'erlang':'setelement'
		      (8, S, 'undefined')
	      in  %% Line 834
		  {'stop',{'locker_died',Exit},_cor4}
	  %% Line 835
	  <Exit = {'EXIT',Registrar,_cor114},S = {'state',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124}>
	      when call 'erlang':'=:='
		    (_cor122,
		     Registrar) ->
	      let <_cor7> =
		  %% Line 836
		  call 'erlang':'setelement'
		      (9, S, 'undefined')
	      in  %% Line 836
		  {'stop',{'registrar_died',Exit},_cor7}
	  %% Line 837
	  <{'EXIT',Pid,_X_Reason},S>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 843
	      ( case S of
		  ( <( {'state',_cor136,_cor137,_cor138,_cor139,_rec24,_cor140,_cor141,_cor142,_cor143,_cor144}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Syncers> =
			    call 'lists':'delete'
				(Pid, _rec24)
			in  let <_cor13> =
				%% Line 844
				call 'erlang':'setelement'
				    (6, S, Syncers)
			    in  %% Line 844
				{'noreply',_cor13}
		    -| ['compiler_generated'] )
		  ( <_cor145> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 846
	  <{'nodedown',Node},S = {'state',_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166}>
	      when call 'erlang':'=:='
		    (Node,
		     _cor162) ->
	      let <_cor20> =
		  %% Line 849
		  call 'erlang':'node'
		      ()
	      in  let <_cor21> =
		      %% Line 849
		      apply 'change_our_node_name'/2
			  (_cor20, S)
		  in  %% Line 849
		      {'noreply',_cor21}
	  %% Line 851
	  <{'nodedown',Node},S0> when 'true' ->
	      let <S1> =
		  %% Line 853
		  apply 'trace_message'/3
		      (S0, {'nodedown',Node}, [])
	      in  let <S> =
		      %% Line 854
		      apply 'handle_nodedown'/2
			  (Node, S1)
		  in  %% Line 855
		      {'noreply',S}
	  %% Line 857
	  <{'extra_nodedown',Node},S0> when 'true' ->
	      let <S1> =
		  %% Line 859
		  apply 'trace_message'/3
		      (S0, {'extra_nodedown',Node}, [])
	      in  let <S> =
		      %% Line 860
		      apply 'handle_nodedown'/2
			  (Node, S1)
		  in  %% Line 861
		      {'noreply',S}
	  %% Line 863
	  <{'nodeup',Node},S>
	      when try
		    let <_cor26> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (Node, _cor26)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor27> =
		  %% Line 867
		  apply 'change_our_node_name'/2
		      (Node, S)
	      in  %% Line 867
		  {'noreply',_cor27}
	  %% Line 869
	  <{'nodeup',_X_Node},S>
	      when try
		    ( case <> of
			( <>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_record'
								       -| ['compiler_generated'] )
				      (S,
				       ( 'state'
					 -| ['compiler_generated'] ),
				       ( 11
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] ) ->
			      let <_cor32> =
				  ( call 'erlang':'element'
					(2, S)
				    -| ['compiler_generated'] )
			      in  let <_cor33> =
				      ( call 'erlang':'=:='
					    (_cor32, 'true')
					-| ['compiler_generated'] )
				  in  let <_cor35> =
					  ( call 'erlang':'not'
						(_cor33)
					    -| ['compiler_generated'] )
				      in  let <_cor36> =
					      ( call 'erlang':'is_boolean'
						    (_cor32)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'and'
						    (_cor35, _cor36)
						-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 870
	      {'noreply',S}
	  %% Line 872
	  <{'nodeup',Node},S0 = {'state',_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176}>
	      when call 'erlang':'=:='
		    (_cor167,
		     'true') ->
	      let <_cor50> =
		  %% Line 873
		  call 'lists':'member'
		      (Node, _cor168)
	      in  let <_cor47> =
		      %% Line 875
		      call 'lists':'keymember'
			  (Node, 1, _cor170)
		  in  let <IsKnown> =
			  %% Line 873
			  call 'erlang':'or'
			      (_cor50, _cor47)
		      in  let <S1> =
			      %% Line 877
			      apply 'trace_message'/3
				  (S0, {'nodeup',Node}, [])
			  in  %% Line 878
			      case IsKnown of
				%% Line 879
				<'true'> when 'true' ->
				    %% Line 880
				    {'noreply',S1}
				%% Line 881
				<'false'> when 'true' ->
				    do  %% Line 882
					apply 'resend_pre_connect'/1
					    (Node)
					let <MyTag> =
					    %% Line 888
					    call 'erlang':'now'
						()
					in  do  %% Line 889
						call 'erlang':'put'
						    ({'sync_tag_my',Node}, MyTag)
						%% Line 891
						( case S1 of
						    ( <( {'state',_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_rec28,_cor203,_cor204,_cor205}
							 -| ['compiler_generated'] )> when 'true' ->
							  do  call 'erlang':'!'
								  (_rec28, {'nodeup',Node,MyTag})
							      let <Locker> =
								  %% Line 898
								  {'locker','no_longer_a_pid',_cor198,_rec28}
							      in  let <_cor62> =
								      %% Line 899
								      call 'erlang':'node'
									  ()
								  in  let <InitC> =
									  %% Line 899
									  {'init_connect',{5,MyTag},_cor62,Locker}
								      in  do  %% Line 903
									      call 'gen_server':'cast'
										  ({'global_name_server',Node}, InitC)
									      let <Resolver> =
										  %% Line 904
										  apply 'start_resolver'/2
										      (Node, MyTag)
									      in  let <S> =
										      %% Line 905
										      apply 'trace_message'/3
											  (S1, {'new_resolver',Node}, [MyTag|[Resolver|[]]])
										  in  let <_rec32> =
											  %% Line 906
											  [{Node,MyTag,Resolver}|_cor200]
										      in  %% Line 906
											  case S of
											    <{'state',_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246}> when 'true' ->
												let <_cor72> =
												    call 'erlang':'setelement'
													(5, S, _rec32)
												in  {'noreply',_cor72}
											    ( <_cor247> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','state'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
						      -| ['compiler_generated'] )
						    ( <_cor206> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','state'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				( <_cor73> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor73})
				  -| ['compiler_generated'] )
			      end
	  %% Line 909
	  <{'whereis',Name,From},S> when 'true' ->
	      do  %% Line 910
		  apply 'do_whereis'/2
		      (Name, From)
		  %% Line 911
		  {'noreply',S}
	  %% Line 913
	  <'known',S> when 'true' ->
	      %% Line 914
	      ( case S of
		  ( <( {'state',_cor248,_rec34,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'io':'format'
				([62|[62|[62|[62|[32|[126|[112|[10]]]]]]]], [_rec34|[]])
			    %% Line 915
			    {'noreply',S}
		    -| ['compiler_generated'] )
		  ( <_cor257> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 918
	  <'high_level_trace',S> when 'true' ->
	      %% Line 919
	      case S of
		%% Line 920
		<{'state',_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,[{Node,_X_Time,_X_M,Nodes,_X_X}|_cor266],_cor267}> when 'true' ->
		    do  %% Line 921
			apply 'send_high_level_trace'/0
			    ()
			let <CNode> =
			    %% Line 922
			    call 'erlang':'node'
				()
			in  let <CNodes> =
				%% Line 923
				call 'erlang':'nodes'
				    ()
			    in  %% Line 924
				case <CNode,CNodes> of
				  %% Line 925
				  <_cor268,_cor269>
				      when let <_cor270> =
					    call 'erlang':'=:='
						(_cor268, Node)
					in  let <_cor271> =
						call 'erlang':'=:='
						    (_cor269, Nodes)
					    in  call 'erlang':'and'
						    (_cor270, _cor271) ->
				      %% Line 926
				      {'noreply',S}
				  %% Line 927
				  <_fol327,_fol328> when 'true' ->
				      let <_cor79> =
					  %% Line 929
					  call 'sofs':'set'
					      ([CNode|CNodes])
				      in  let <_cor78> =
					      %% Line 930
					      call 'sofs':'set'
						  ([Node|Nodes])
					  in  %% Line 928
					      case %% Line 929
						   call 'sofs':'symmetric_partition'
						       (_cor79, _cor78) of
						<{New,_cor273,Old}> when 'true' ->
						    let <_cor82> =
							%% Line 931
							call 'sofs':'to_external'
							    (New)
						    in  let <_cor81> =
							    %% Line 932
							    call 'sofs':'to_external'
								(Old)
							in  let <M> = {%% Line 931
								 'nodes_changed',%% Line 931
										 {_cor82,_cor81}}
							    in  let <_cor84> =
								    %% Line 933
								    apply 'trace_message'/3
									(S, M, [])
								in  %% Line 933
								    {'noreply',_cor84}
						( <_cor80> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor80})
						  -| ['compiler_generated'] )
					      end
				end
		%% Line 935
		<_cor274> when 'true' ->
		    %% Line 936
		    {'noreply',S}
	      end
	  %% Line 938
	  <{'trace_message',M},S> when 'true' ->
	      let <_cor87> =
		  %% Line 939
		  apply 'trace_message'/3
		      (S, M, [])
	      in  %% Line 939
		  {'noreply',_cor87}
	  %% Line 940
	  <{'trace_message',M,X},S> when 'true' ->
	      let <_cor88> =
		  %% Line 941
		  apply 'trace_message'/3
		      (S, M, X)
	      in  %% Line 941
		  {'noreply',_cor88}
	  %% Line 943
	  <{'DOWN',MonitorRef,'process',_X_Pid,_X_Info},S0> when 'true' ->
	      let <S1> =
		  %% Line 944
		  apply 'delete_lock'/2
		      (MonitorRef, S0)
	      in  let <S> =
		      %% Line 945
		      apply 'del_name'/2
			  (MonitorRef, S1)
		  in  %% Line 946
		      {'noreply',S}
	  %% Line 948
	  <Message,S> when 'true' ->
	      do  %% Line 949
		  call 'error_logger':'warning_msg'
		      ([84|[104|[101|[32|[103|[108|[111|[98|[97|[108|[95|[110|[97|[109|[101|[95|[115|[101|[114|[118|[101|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[40|[126|[112|[44|[32|[95|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 951
																																																							   [Message|[]])
		  %% Line 952
		  {'noreply',S}
	end
'wait_high_level_trace'/0 =
    %% Line 963
    fun () ->
	%% Line 964
	receive
	  %% Line 965
	  <'high_level_trace'> when 'true' ->
	      %% Line 966
	      'ok'
	after 501 ->
	  %% Line 968
	  'ok'
'send_high_level_trace'/0 =
    %% Line 971
    fun () ->
	let <_cor0> =
	    %% Line 972
	    call 'erlang':'self'
		()
	in  %% Line 972
	    call 'erlang':'send_after'
		(500, _cor0, 'high_level_trace')
'trans_all_known'/1 =
    %% Line 979
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 980
	    call 'erlang':'self'
		()
	in  let <Id> = {%% Line 980
		 'global',_cor1}
	    in  let <Nodes> =
		    %% Line 981
		    apply 'set_lock_known'/2
			(Id, 0)
		in  %% Line 982
		    letrec
			'after$^0'/0 =
			    fun () ->
				%% Line 985
				apply 'delete_global_lock'/2
				    (Id, Nodes)
		    in  try
			    %% Line 983
			    apply _cor0
				(Nodes)
			of <_cor4> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_cor4
			catch <_cor7,_cor6,_cor5> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_cor5, _cor6)
'set_lock_known'/2 =
    %% Line 988
    fun (_cor1,_cor0) ->
	let <Known> =
	    %% Line 989
	    apply 'get_known'/0
		()
	in  let <_cor3> =
		%% Line 990
		call 'erlang':'node'
		    ()
	    in  let <Nodes> =
		    %% Line 990
		    [_cor3|Known]
		in  let <Boss> =
			%% Line 991
			apply 'the_boss'/1
			    (Nodes)
		    in  %% Line 993
			case apply 'set_lock_on_nodes'/2
				 (_cor1, [Boss|[]]) of
			  %% Line 994
			  <'true'> when 'true' ->
			      %% Line 995
			      case apply 'lock_on_known_nodes'/3
				       (_cor1, Known, Nodes) of
				%% Line 996
				<'true'> when 'true' ->
				    %% Line 997
				    Nodes
				%% Line 998
				<'false'> when 'true' ->
				    do  %% Line 999
					apply 'del_lock'/2
					    (_cor1, [Boss|[]])
					do  %% Line 1000
					    apply 'random_sleep'/1
						(_cor0)
					    let <_cor6> =
						%% Line 1001
						call 'erlang':'+'
						    (_cor0, 1)
					    in  %% Line 1001
						apply 'set_lock_known'/2
						    (_cor1, _cor6)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1003
			  <'false'> when 'true' ->
			      do  %% Line 1004
				  apply 'random_sleep'/1
				      (_cor0)
				  let <_cor8> =
				      %% Line 1005
				      call 'erlang':'+'
					  (_cor0, 1)
				  in  %% Line 1005
				      apply 'set_lock_known'/2
					  (_cor1, _cor8)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
'lock_on_known_nodes'/3 =
    %% Line 1008
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1009
	case apply 'set_lock_on_nodes'/2
		 (_cor2, _cor0) of
	  %% Line 1010
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 1011
		  apply 'get_known'/0
		      ()
	      in  let <_cor4> =
		      %% Line 1011
		      call 'erlang':'--'
			  (_cor3, _cor1)
		  in  %% Line 1011
		      call 'erlang':'=:='
			  (_cor4, [])
	  %% Line 1012
	  <'false'> when 'true' ->
	      %% Line 1013
	      'false'
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'set_lock_on_nodes'/2 =
    %% Line 1016
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Id,[]> when 'true' ->
	      %% Line 1017
	      'true'
	  %% Line 1018
	  <Id,Nodes> when 'true' ->
	      %% Line 1019
	      case apply 'local_lock_check'/2
		       (Id, Nodes) of
		%% Line 1020
		<'true'> when 'true' ->
		    let <Msg> = {%% Line 1021
			 'set_lock',%% Line 1021
				    Id}
		    in  %% Line 1022
			case %% Line 1023
			     call 'gen_server':'multi_call'
				 (Nodes, 'global_name_server', Msg) of
			  <{Replies,_cor7}> when 'true' ->
			      %% Line 1025
			      apply 'check_replies'/3
				  (Replies, Id, Replies)
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		%% Line 1026
		<Reply = 'false'> when 'true' ->
		    %% Line 1027
		    Reply
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'local_lock_check'/2 =
    %% Line 1031
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Id,_X_Nodes = [_cor9|[]]> when 'true' ->
	      %% Line 1032
	      'true'
	  %% Line 1033
	  <Id,Nodes> when 'true' ->
	      let <_cor3> =
		  %% Line 1034
		  call 'erlang':'node'
		      ()
	      in  %% Line 1034
		  ( case call 'lists':'member'
			     (_cor3, Nodes) of
		      ( <'false'> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <'true'> when 'true' ->
			    let <_cor5> =
				apply 'can_set_lock'/1
				    (Id)
			    in  call 'erlang':'=/='
				    (_cor5, 'false')
			-| ['compiler_generated'] )
		      ( <_cor_variable> when 'true' ->
			    call 'erlang':'error'
				('badarg')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'check_replies'/3 =
    %% Line 1036
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_Node,'true'}|T],Id,Replies> when 'true' ->
	      %% Line 1037
	      apply 'check_replies'/3
		  (T, Id, Replies)
	  %% Line 1038
	  <[{_X_Node,Reply = 'false'}|_X_T],_X_Id,[_cor12|[]]> when 'true' ->
	      %% Line 1039
	      Reply
	  %% Line 1040
	  <[{_X_Node,Reply = 'false'}|_X_T],Id,Replies> when 'true' ->
	      let <_cor7> =
		  %% Line 1041
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{N,'true'}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [N|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Replies)
		    -| ['list_comprehension'] )
	      in  do  %% Line 1043
		      call 'gen_server':'multi_call'
			  (_cor7, 'global_name_server', {'del_lock',Id})
		      %% Line 1044
		      Reply
	  %% Line 1045
	  <[],_X_Id,_X_Replies> when 'true' ->
	      %% Line 1046
	      'true'
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'check_replies',3}}] )
	    -| ['compiler_generated'] )
	end
'init_connect'/6 =
    %% Line 1052
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1055
	    call 'erlang':'put'
		({'prot_vsn',_cor4}, _cor5)
	    do  %% Line 1056
		call 'erlang':'put'
		    ({'sync_tag_his',_cor4}, _cor2)
		%% Line 1057
		case call 'lists':'keyfind'
			 (_cor4, 1, _cor1) of
		  %% Line 1058
		  <{_cor20,MyTag,_X_Resolver}>
		      when call 'erlang':'=:='
			    (_cor20,
			     _cor4) ->
		      %% Line 1059
		      case call 'erlang':'get'
			       ({'sync_tag_my',_cor4}) of
			<_cor21>
			    when call 'erlang':'=:='
				  (_cor21,
				   MyTag) ->
			    %% Line 1060
			    case _cor3 of
			      <{'locker',_X_NoLongerAPid,_X_HisKnown0,HisTheLocker}> when 'true' ->
				  %% Line 1063
				  ( case _cor0 of
				      ( <( {'state',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec35,_cor28,_cor29,_cor30}
					   -| ['compiler_generated'] )> when 'true' ->
					    call 'erlang':'!'
						(_rec35, {'his_the_locker',HisTheLocker,%% Line 1064
											{_cor5,[]},_cor23})
					-| ['compiler_generated'] )
				      ( <_cor31> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  %% Line 1065
		  <'false'> when 'true' ->
		      %% Line 1067
		      call 'erlang':'put'
			  ({'pre_connect',_cor4}, {_cor5,_cor3,_cor2})
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor13})
		    -| ['compiler_generated'] )
		end
'lock_is_set'/3 =
    %% Line 1081
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1083
	    call 'erlang':'node'
		()
	in  let <_cor6> =
		%% Line 1083
		apply 'get_names'/0
		    ()
	    in  let <_cor3> =
		    %% Line 1084
		    call 'erlang':'get'
			({'sync_tag_his',_cor2})
		in  do  %% Line 1082
			call 'gen_server':'cast'
			    ({'global_name_server',_cor2}, %% Line 1083
							   {'exchange',_cor7,_cor6,[],_cor3})
			do  %% Line 1085
			    call 'erlang':'put'
				({'lock_id',_cor2}, _cor0)
			    %% Line 1087
			    case call 'erlang':'get'
				     ({'wait_lock',_cor2}) of
			      %% Line 1088
			      <{'exchange',NameList}> when 'true' ->
				  do  %% Line 1089
				      call 'erlang':'put'
					  ({'wait_lock',_cor2}, 'lock_is_set')
				      %% Line 1090
				      apply 'exchange'/3
					  (_cor2, NameList, _cor1)
			      %% Line 1091
			      <'undefined'> when 'true' ->
				  %% Line 1092
				  call 'erlang':'put'
				      ({'wait_lock',_cor2}, 'lock_is_set')
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
'exchange'/3 =
    %% Line 1098
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1101
	case call 'erlang':'erase'
		 ({'wait_lock',_cor2}) of
	  %% Line 1102
	  <'lock_is_set'> when 'true' ->
	      %% Line 1103
	      case call 'lists':'keyfind'
		       (_cor2, 1, _cor0) of
		<{_cor8,_X_Tag,Resolver}>
		    when call 'erlang':'=:='
			  (_cor8,
			   _cor2) ->
		    %% Line 1104
		    call 'erlang':'!'
			(Resolver, {'resolve',_cor1,_cor2})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1105
	  <'undefined'> when 'true' ->
	      %% Line 1106
	      call 'erlang':'put'
		  ({'wait_lock',_cor2}, {'exchange',_cor1})
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'resolved'/5 =
    %% Line 1109
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1110
	    call 'erlang':'erase'
		({'save_ops',_cor4})
	in  let <Ops> =
		%% Line 1110
		call 'erlang':'++'
		    (_cor5, _cor3)
	    in  %% Line 1112
		( case _cor0 of
		    ( <( {'state',_cor53,_rec37,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <NewNodes> =
			      %% Line 1114
			      [_cor4|_cor2]
			  in  do  %% Line 1115
				  apply 'sync_others'/1
				      (_cor2)
				  let <_cor14> =
				      %% Line 1116
				      call 'erlang':'get'
					  ({'prot_vsn',_cor4})
				  in  let <_cor15> =
					  %% Line 1116
					  call 'erlang':'get'
					      ({'lock_id',_cor4})
				      in  let <ExtraInfo> =
					      %% Line 1116
					      [{'vsn',_cor14}|[{'lock',_cor15}|[]]]
					  in  let <_cor17> =
						  %% Line 1117
						  call 'erlang':'node'
						      ()
					      in  let <S> =
						      %% Line 1117
						      apply 'do_ops'/5
							  (Ops, _cor17, _cor1, ExtraInfo, _cor0)
						  in  let <_cor23> =
							  %% Line 1119
							  ( fun (_cor21) ->
								call 'erlang':'!'
								    (_cor21, {'synced',[_cor4|[]]})
							    -| [{'id',{0,0,'-resolved/5-fun-0-'}}] )
						      in  %% Line 1119
							  ( case S of
							      ( <( {'state',_cor73,_cor74,_cor75,_cor76,_rec39,_cor77,_cor78,_cor79,_cor80,_cor81}
								   -| ['compiler_generated'] )> when 'true' ->
								    do  call 'lists':'foreach'
									    (_cor23, _rec39)
									let <_cor31> =
									    %% Line 1120
									    ( fun (_cor28,_cor27) ->
										  let <F> =
										      %% Line 1121
										      ( fun (_cor24) ->
											    apply 'cancel_locker'/3
												(_cor28, _cor27, _cor24)
											-| [{'id',{0,0,'-resolved/5-fun-1-'}}] )
										  in  %% Line 1122
										      apply 'cancel_resolved_locker'/2
											  (_cor28, F)
									      -| [{'id',{0,0,'-resolved/5-fun-2-'}}] )
									in  let <S3> =
										%% Line 1120
										call 'lists':'foldl'
										    (_cor31, %% Line 1123
											     S, _cor2)
									    in  let <NewNodesF> =
										    %% Line 1128
										    ( fun () ->
											  let <_cor33> =
											      %% Line 1130
											      call 'erlang':'node'
												  ()
											  in  %% Line 1129
											      call 'gen_server':'abcast'
												  (_rec37, 'global_name_server', %% Line 1130
																 {'new_nodes',_cor33,Ops,_cor1,%% Line 1131
																			       NewNodes,%% Line 1131
																					ExtraInfo})
										      -| [{'id',{0,0,'-resolved/5-fun-3-'}}] )
										in  let <F> =
											%% Line 1133
											( fun (_cor35) ->
											      apply 'cancel_locker'/4
												  (_cor4, S3, _cor35, NewNodesF)
											  -| [{'id',{0,0,'-resolved/5-fun-4-'}}] )
										    in  let <S4> =
											    %% Line 1134
											    apply 'cancel_resolved_locker'/2
												(_cor4, F)
											in  let <AddedNodes> =
												%% Line 1136
												call 'erlang':'--'
												    (NewNodes, _rec37)
											    in  let <NewKnown> =
												    %% Line 1137
												    call 'erlang':'++'
													(_rec37, AddedNodes)
												in  %% Line 1138
												    ( case S4 of
													( <( {'state',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_rec40,_cor89,_cor90,_cor91}
													     -| ['compiler_generated'] )> when 'true' ->
													      do  call 'erlang':'!'
														      (_rec40, {'add_to_known',AddedNodes})
														  let <NewS> =
														      %% Line 1139
														      apply 'trace_message'/3
															  (S4, {'added',AddedNodes}, %% Line 1140
																		     [{'new_nodes',NewNodes}|[{'abcast',_rec37}|[{'ops',Ops}|[]]]])
														  in  let <_rec41> =
															  %% Line 1141
															  [_cor4|_cor54]
														      in  %% Line 1141
															  case NewS of
															    <{'state',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}> when 'true' ->
																let <_cor46> =
																    call 'erlang':'setelement'
																	(4, NewS, _rec41)
																in  call 'erlang':'setelement'
																	(3, _cor46, NewKnown)
															    ( <_cor103> when 'true' ->
																  ( call ( 'erlang'
																	   -| ['compiler_generated'] ):( 'error'
																					 -| ['compiler_generated'] )
																	(( {'badrecord','state'}
																	   -| ['compiler_generated'] ))
																    -| ['compiler_generated'] )
															      -| ['compiler_generated'] )
															  end
													  -| ['compiler_generated'] )
													( <_cor92> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {'badrecord','state'}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
												      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor82> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_cor62> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'cancel_resolved_locker'/2 =
    %% Line 1143
    fun (_cor1,_cor0) ->
	let <Tag> =
	    %% Line 1144
	    call 'erlang':'get'
		({'sync_tag_my',_cor1})
	in  let <S> =
		%% Line 1146
		apply _cor0
		    (Tag)
	    in  do  %% Line 1147
		    apply 'reset_node_state'/1
			(_cor1)
		    %% Line 1148
		    S
'new_nodes'/6 =
    %% Line 1150
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1151
	( case _cor0 of
	    ( <( {'state',_cor25,_rec43,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor10> =
		      %% Line 1157
		      call 'erlang':'node'
			  ()
		  in  let <_cor9> =
			  %% Line 1157
			  call 'erlang':'--'
			      (_cor2, _rec43)
		      in  let <AddedNodes> =
			      %% Line 1157
			      call 'lists':'delete'
				  (_cor10, _cor9)
			  in  do  %% Line 1158
				  apply 'sync_others'/1
				      (AddedNodes)
				  let <S> =
				      %% Line 1159
				      apply 'do_ops'/5
					  (_cor5, _cor4, _cor3, _cor1, _cor0)
				  in  %% Line 1161
				      ( case S of
					  ( <( {'state',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec44,_cor41,_cor42,_cor43}
					       -| ['compiler_generated'] )> when 'true' ->
						do  call 'erlang':'!'
							(_rec44, {'add_to_known',AddedNodes})
						    let <S1> =
							%% Line 1162
							apply 'trace_message'/3
							    (S, {'added',AddedNodes}, [{'ops',_cor5}|[]])
						    in  let <_rec45> =
							    %% Line 1163
							    call 'erlang':'++'
								(_rec43, AddedNodes)
							in  %% Line 1163
							    case S1 of
							      <{'state',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}> when 'true' ->
								  call 'erlang':'setelement'
								      (3, S1, _rec45)
							      ( <_cor55> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
					    -| ['compiler_generated'] )
					  ( <_cor44> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_whereis'/2 =
    %% Line 1165
    fun (_cor1,_cor0) ->
	%% Line 1166
	case apply 'is_global_lock_set'/0
		 () of
	  %% Line 1167
	  <'false'> when 'true' ->
	      let <_cor2> =
		  %% Line 1168
		  apply 'where'/1
		      (_cor1)
	      in  %% Line 1168
		  call 'gen_server':'reply'
		      (_cor0, _cor2)
	  %% Line 1169
	  <'true'> when 'true' ->
	      %% Line 1170
	      apply 'send_again'/1
		  ({'whereis',_cor1,_cor0})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'terminate'/2 =
    %% Line 1175
    fun (_cor1,_cor0) ->
	%% Line 1176
	case call 'ets':'delete'
		 ('global_names') of
	  <'true'> when 'true' ->
	      %% Line 1177
	      case call 'ets':'delete'
		       ('global_names_ext') of
		<'true'> when 'true' ->
		    %% Line 1178
		    case call 'ets':'delete'
			     ('global_locks') of
		      <'true'> when 'true' ->
			  %% Line 1179
			  case call 'ets':'delete'
				   ('global_pid_names') of
			    <'true'> when 'true' ->
				%% Line 1180
				case call 'ets':'delete'
					 ('global_pid_ids') of
				  <'true'> when 'true' ->
				      %% Line 1181
				      'ok'
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 1185
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1186
	{'ok',_cor1}
'start_resolver'/2 =
    %% Line 1191
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1192
	    ( fun () ->
		  apply 'resolver'/2
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-start_resolver/2-fun-0-'}}] )
	in  %% Line 1192
	    call 'erlang':'spawn'
		(_cor2)
'resolver'/2 =
    %% Line 1194
    fun (_cor1,_cor0) ->
	%% Line 1195
	receive
	  %% Line 1196
	  <{'resolve',NameList,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 1198
	      case apply 'exchange_names'/4
		       (NameList, _cor1, [], []) of
		<{Ops,Resolved}> when 'true' ->
		    let <Exchange> =
			%% Line 1199
			{'exchange_ops',_cor1,_cor0,Ops,Resolved}
		    in  do  %% Line 1200
			    call 'gen_server':'cast'
				('global_name_server', Exchange)
			    %% Line 1201
			    call 'erlang':'exit'
				('normal')
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1202
	  <_cor7> when 'true' ->
	      %% Line 1203
	      apply 'resolver'/2
		  (_cor1, _cor0)
	after 'infinity' ->
	  'true'
'resend_pre_connect'/1 =
    %% Line 1206
    fun (_cor0) ->
	%% Line 1207
	case call 'erlang':'erase'
		 ({'pre_connect',_cor0}) of
	  %% Line 1208
	  <{Vsn,InitMsg,HisTag}> when 'true' ->
	      let <_cor1> =
		  %% Line 1209
		  call 'erlang':'self'
		      ()
	      in  %% Line 1209
		  call 'gen_server':'cast'
		      (_cor1, %% Line 1210
			      {'init_connect',{Vsn,HisTag},_cor0,InitMsg})
	  %% Line 1211
	  <_cor4> when 'true' ->
	      %% Line 1212
	      'ok'
	end
'ins_name'/6 =
    %% Line 1215
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <S1> =
	    %% Line 1217
	    apply 'delete_global_name_keep_pid'/2
		(_cor5, _cor0)
	in  let <_cor7> =
		%% Line 1218
		call 'erlang':'node'
		    (_cor4)
	    in  let <S> =
		    %% Line 1218
		    apply 'trace_message'/3
			(S1, {'ins_name',_cor7}, [_cor5|[_cor4|[]]])
		in  %% Line 1219
		    apply 'insert_global_name'/6
			(_cor5, _cor4, _cor3, _cor2, _cor1, S)
'ins_name_ext'/7 =
    %% Line 1221
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <S1> =
	    %% Line 1223
	    apply 'delete_global_name_keep_pid'/2
		(_cor6, _cor0)
	in  do  %% Line 1224
		apply 'dolink_ext'/2
		    (_cor5, _cor3)
		let <_cor8> =
		    %% Line 1225
		    call 'erlang':'node'
			(_cor5)
		in  let <S> =
			%% Line 1225
			apply 'trace_message'/3
			    (S1, {'ins_name_ext',_cor8}, [_cor6|[_cor5|[]]])
		    in  %% Line 1226
			case call 'ets':'insert'
				 ('global_names_ext', {_cor6,_cor5,_cor3}) of
			  <'true'> when 'true' ->
			      %% Line 1227
			      apply 'insert_global_name'/6
				  (_cor6, _cor5, _cor4, _cor2, _cor1, S)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
'where'/1 =
    %% Line 1229
    fun (_cor0) ->
	%% Line 1230
	case call 'ets':'lookup'
		 ('global_names', _cor0) of
	  %% Line 1231
	  <[{_X_Name,Pid,_X_Method,_X_RPid,_X_Ref}|[]]> when 'true' ->
	      %% Line 1232
	      case <> of
		<>
		    when try
			  let <_cor2> =
			      call 'erlang':'node'
				  (Pid)
			  in  let <_cor1> =
				  call 'erlang':'node'
				      ()
			      in  call 'erlang':'=='
				      (_cor2, _cor1)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1233
		    case call 'erlang':'is_process_alive'
			     (Pid) of
		      %% Line 1234
		      <'true'> when 'true' ->
			  Pid
		      %% Line 1235
		      <'false'> when 'true' ->
			  'undefined'
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 1237
		<> when 'true' ->
		    %% Line 1238
		    Pid
	      end
	  %% Line 1240
	  <[]> when 'true' ->
	      'undefined'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'handle_set_lock'/3 =
    %% Line 1243
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1245
	case apply 'can_set_lock'/1
		 (_cor2) of
	  %% Line 1246
	  <{'true',PidRefs}> when 'true' ->
	      %% Line 1247
	      case apply 'pid_is_locking'/2
		       (_cor1, PidRefs) of
		%% Line 1248
		<'true'> when 'true' ->
		    %% Line 1249
		    {'true',_cor0}
		%% Line 1250
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 1251
			apply 'insert_lock'/4
			    (_cor2, _cor1, PidRefs, _cor0)
		    in  %% Line 1251
			{'true',_cor3}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1253
	  <Reply = 'false'> when 'true' ->
	      %% Line 1254
	      {Reply,_cor0}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'can_set_lock'/1 =
    %% Line 1257
    fun (_cor0) ->
	case _cor0 of
	  <{ResourceId,LockRequesterId}> when 'true' ->
	      %% Line 1258
	      case call 'ets':'lookup'
		       ('global_locks', ResourceId) of
		%% Line 1259
		<[{_cor3,_cor4,PidRefs}|[]]>
		    when let <_cor5> =
			  call 'erlang':'=:='
			      (_cor3, ResourceId)
		      in  let <_cor6> =
			      call 'erlang':'=:='
				  (_cor4, LockRequesterId)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    %% Line 1260
		    {'true',PidRefs}
		%% Line 1261
		<[{_cor7,_X_LockRequesterId2,_X_PidRefs}|[]]>
		    when call 'erlang':'=:='
			  (_cor7,
			   ResourceId) ->
		    %% Line 1262
		    'false'
		%% Line 1263
		<[]> when 'true' ->
		    %% Line 1264
		    {'true',[]}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'can_set_lock',1}}] )
	    -| ['compiler_generated'] )
	end
'insert_lock'/4 =
    %% Line 1267
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Id = {ResourceId,LockRequesterId},Pid,PidRefs,S> when 'true' ->
	      %% Line 1268
	      case apply 'do_monitor'/1
		       (Pid) of
		<{RPid,Ref}> when 'true' ->
		    %% Line 1269
		    case call 'ets':'insert'
			     ('global_pid_ids', {Pid,ResourceId}) of
		      <'true'> when 'true' ->
			  %% Line 1270
			  case call 'ets':'insert'
				   ('global_pid_ids', {Ref,ResourceId}) of
			    <'true'> when 'true' ->
				let <Lock> =
				    %% Line 1271
				    {ResourceId,LockRequesterId,[{Pid,RPid,Ref}|PidRefs]}
				in  %% Line 1272
				    case call 'ets':'insert'
					     ('global_locks', Lock) of
				      <'true'> when 'true' ->
					  let <_cor9> =
					      %% Line 1273
					      call 'erlang':'node'
						  (Pid)
					  in  %% Line 1273
					      apply 'trace_message'/3
						  (S, {'ins_lock',_cor9}, [Id|[Pid|[]]])
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'insert_lock',4}}] )
	    -| ['compiler_generated'] )
	end
'is_global_lock_set'/0 =
    %% Line 1275
    fun () ->
	%% Line 1276
	apply 'is_lock_set'/1
	    ('global')
'is_lock_set'/1 =
    %% Line 1278
    fun (_cor0) ->
	%% Line 1279
	call 'ets':'member'
	    ('global_locks', _cor0)
'handle_del_lock'/3 =
    %% Line 1281
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{ResourceId,LockReqId},Pid,S0> when 'true' ->
	      %% Line 1283
	      case call 'ets':'lookup'
		       ('global_locks', ResourceId) of
		%% Line 1284
		<[{_cor7,_cor8,PidRefs}|[]]>
		    when let <_cor9> =
			  call 'erlang':'=:='
			      (_cor7, ResourceId)
		      in  let <_cor10> =
			      call 'erlang':'=:='
				  (_cor8, LockReqId)
			  in  call 'erlang':'and'
				  (_cor9, _cor10) ->
		    %% Line 1285
		    apply 'remove_lock'/6
			(ResourceId, LockReqId, Pid, PidRefs, 'false', S0)
		%% Line 1286
		<_cor11> when 'true' ->
		    S0
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'handle_del_lock',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_lock'/6 =
    %% Line 1289
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ResourceId,LockRequesterId,Pid,[{_cor31,RPid,Ref}|[]],Down,S0>
	      when call 'erlang':'=:='
		    (_cor31,
		     Pid) ->
	      %% Line 1291
	      case call 'erlang':'demonitor'
		       (Ref, ['flush']) of
		<'true'> when 'true' ->
		    do  %% Line 1292
			apply 'kill_monitor_proc'/2
			    (RPid, Pid)
			%% Line 1293
			case call 'ets':'delete'
				 ('global_locks', ResourceId) of
			  <'true'> when 'true' ->
			      %% Line 1294
			      case call 'ets':'delete_object'
				       ('global_pid_ids', {Pid,ResourceId}) of
				<'true'> when 'true' ->
				    %% Line 1295
				    case call 'ets':'delete_object'
					     ('global_pid_ids', {Ref,ResourceId}) of
				      <'true'> when 'true' ->
					  let <_cor13> =
					      %% Line 1296
					      case ResourceId of
						%% Line 1297
						<'global'> when 'true' ->
						    case S0 of
						      <{'state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
							  call 'erlang':'setelement'
							      (11, S0, Down)
						      ( <_cor42> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','state'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						%% Line 1298
						<_cor43> when 'true' ->
						    S0
					      end
					  in  let <_cor15> =
						  %% Line 1300
						  call 'erlang':'node'
						      (Pid)
					      in  %% Line 1300
						  apply 'trace_message'/3
						      (_cor13, {'rem_lock',_cor15}, %% Line 1301
										    [{ResourceId,LockRequesterId}|[Pid|[]]])
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1302
	  <ResourceId,LockRequesterId,Pid,PidRefs0,_X_Down,S> when 'true' ->
	      let <_cor19> =
		  %% Line 1304
		  case call 'lists':'keyfind'
			   (Pid, 1, PidRefs0) of
		    %% Line 1305
		    <{_cor44,RPid,Ref}>
			when call 'erlang':'=:='
			      (_cor44,
			       Pid) ->
			%% Line 1306
			case call 'erlang':'demonitor'
				 (Ref, ['flush']) of
			  <'true'> when 'true' ->
			      do  %% Line 1307
				  apply 'kill_monitor_proc'/2
				      (RPid, Pid)
				  %% Line 1308
				  case call 'ets':'delete_object'
					   ('global_pid_ids', %% Line 1309
							      {Ref,ResourceId}) of
				    <'true'> when 'true' ->
					%% Line 1310
					call 'lists':'keydelete'
					    (Pid, 1, PidRefs0)
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor17})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor16> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor16})
			    -| ['compiler_generated'] )
			end
		    %% Line 1311
		    <'false'> when 'true' ->
			%% Line 1312
			PidRefs0
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      in  let <Lock> = {%% Line 1314
		       ResourceId,%% Line 1314
				  LockRequesterId,_cor19}
		  in  %% Line 1315
		      case call 'ets':'insert'
			       ('global_locks', Lock) of
			<'true'> when 'true' ->
			    %% Line 1316
			    case call 'ets':'delete_object'
				     ('global_pid_ids', {Pid,ResourceId}) of
			      <'true'> when 'true' ->
				  let <_cor24> =
				      %% Line 1317
				      call 'erlang':'node'
					  (Pid)
				  in  %% Line 1317
				      apply 'trace_message'/3
					  (S, {'rem_lock',_cor24}, %% Line 1318
								   [{ResourceId,LockRequesterId}|[Pid|[]]])
			      ( <_cor23> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor23})
				-| ['compiler_generated'] )
			    end
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor22})
			  -| ['compiler_generated'] )
		      end
	end
'kill_monitor_proc'/2 =
    %% Line 1320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     Pid) ->
	      %% Line 1321
	      'ok'
	  %% Line 1322
	  <RPid,_X_Pid> when 'true' ->
	      %% Line 1323
	      call 'erlang':'exit'
		  (RPid, 'kill')
	end
'do_ops'/5 =
    %% Line 1325
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 1328
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor11) ->
			  case _cor11 of
			    <[%% Line 1329
			      {Name2,Pid2,RegNode}|_cor6]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor12) ->
					      case _cor12 of
						<[%% Line 1330
						  {'insert',{Name,Pid,Method}}|_cor8]>
						    when let <_cor9> =
							  %% Line 1331
							  call 'erlang':'=:='
							      (Name, Name2)
						      in  let <_cor10> =
							      %% Line 1331
							      call 'erlang':'=:='
								  (Pid, Pid2)
							  in  %% Line 1331
							      call 'erlang':'and'
								  (_cor9, _cor10) ->
						    let <_cor13> =
							%% Line 1330
							apply 'lc$^1'/1
							    (_cor8)
						    in  ( [{Name,Pid,RegNode,Method}|_cor13]
							  -| ['compiler_generated'] )
						( <[_cor7|_cor8]> when 'true' ->
						      %% Line 1330
						      apply 'lc$^1'/1
							  (_cor8)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 1329
						    apply 'lc$^0'/1
							(_cor6)
						( <_cor12> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor12})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor4)
				  -| ['list_comprehension'] )
			    ( <[_cor5|_cor6]> when 'true' ->
				  %% Line 1329
				  apply 'lc$^0'/1
				      (_cor6)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor11> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor11})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <_cor20> =
		%% Line 1332
		( fun (_cor17,_cor16) ->
		      case <_cor17,_cor16> of
			<{Name,Pid,RegNode,Method},S1> when 'true' ->
			    %% Line 1333
			    apply 'ins_name_ext'/7
				(Name, Pid, Method, RegNode, _cor3, _cor1, %% Line 1334
									   S1)
			( <_cor19,_cor18> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor19,_cor18})
				-| [{'function_name',{'-do_ops/5-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-do_ops/5-fun-0-'}}] )
	    in  let <S1> =
		    %% Line 1332
		    call 'lists':'foldl'
			(_cor20, _cor0, _cor14)
		in  let <_cor26> =
			%% Line 1337
			( letrec
			      'lc$^2'/1 =
				  fun (_cor24) ->
				      case _cor24 of
					<[{Name,_X_Pid,_X_RegNode,_X_Method}|_cor23]> when 'true' ->
					    let <_cor25> =
						apply 'lc$^2'/1
						    (_cor23)
					    in  ( [Name|_cor25]
						  -| ['compiler_generated'] )
					( <[_cor22|_cor23]> when 'true' ->
					      apply 'lc$^2'/1
						  (_cor23)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor24> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor24})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^2'/1
				  (_cor14)
			  -| ['list_comprehension'] )
		    in  let <_cor35> =
			    %% Line 1338
			    ( letrec
				  'lc$^3'/1 =
				      fun (_cor31) ->
					  case _cor31 of
					    <[%% Line 1339
					      {'insert',{Name,Pid,Method}}|_cor29]> when 'true' ->
						%% Line 1340
						( case call 'lists':'member'
							   (Name, _cor26) of
						    <'false'> when 'true' ->
							let <_cor32> =
							    call 'erlang':'node'
								(Pid)
							in  let <_cor33> =
								apply 'lc$^3'/1
								    (_cor29)
							    in  ( [{Name,Pid,_cor32,Method}|_cor33]
								  -| ['compiler_generated'] )
						    ( <'true'> when 'true' ->
							  apply 'lc$^3'/1
							      (_cor29)
						      -| ['compiler_generated'] )
						    ( <_cor_variable> when 'true' ->
							  call 'erlang':'error'
							      ('badarg')
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    ( <[_cor28|_cor29]> when 'true' ->
						  %% Line 1339
						  apply 'lc$^3'/1
						      (_cor29)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor31> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor31})
						    -| [{'function_name',{'lc$^3',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^3'/1
				      (_cor4)
			      -| ['list_comprehension'] )
			in  let <_cor41> =
				%% Line 1341
				( fun (_cor38,_cor37) ->
				      case <_cor38,_cor37> of
					<{Name,Pid,_X_RegNode,Method},S2> when 'true' ->
					    %% Line 1342
					    apply 'ins_name'/6
						(Name, Pid, Method, _cor3, _cor1, %% Line 1343
										  S2)
					( <_cor40,_cor39> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor40,_cor39})
						-| [{'function_name',{'-do_ops/5-fun-1-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-do_ops/5-fun-1-'}}] )
			    in  let <S2> =
				    %% Line 1341
				    call 'lists':'foldl'
					(_cor41, %% Line 1344
						 S1, _cor35)
				in  let <_cor47> =
					%% Line 1346
					( letrec
					      'lc$^4'/1 =
						  fun (_cor45) ->
						      case _cor45 of
							<[{'delete',Name}|_cor44]> when 'true' ->
							    let <_cor46> =
								apply 'lc$^4'/1
								    (_cor44)
							    in  ( [Name|_cor46]
								  -| ['compiler_generated'] )
							( <[_cor43|_cor44]> when 'true' ->
							      apply 'lc$^4'/1
								  (_cor44)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor45> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor45})
								-| [{'function_name',{'lc$^4',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^4'/1
						  (_cor4)
					  -| ['list_comprehension'] )
				    in  let <_cor53> =
					    %% Line 1347
					    ( fun (_cor50,_cor49) ->
						  apply 'delete_global_name2'/2
						      (_cor50, _cor49)
					      -| [{'id',{0,0,'-do_ops/5-fun-2-'}}] )
					in  %% Line 1347
					    call 'lists':'foldl'
						(_cor53, %% Line 1348
							 S2, _cor47)
'sync_others'/1 =
    %% Line 1363
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1364
	    case call 'application':'get_env'
		     ('kernel', 'global_connect_retries') of
	      %% Line 1365
	      <{'ok',NRetries}>
		  when let <_cor1> =
			call 'erlang':'is_integer'
			    (NRetries)
		    in  let <_cor2> =
			    %% Line 1366
			    call 'erlang':'>='
				(NRetries, 0)
			in  call 'erlang':'and'
				(_cor1, _cor2) ->
		  %% Line 1366
		  NRetries
	      %% Line 1367
	      <_cor11> when 'true' ->
		  5
	    end
	in  let <_cor9> =
		%% Line 1369
		( fun (_cor7) ->
		      let <_cor6> =
			  %% Line 1370
			  ( fun () ->
				apply 'sync_other'/2
				    (_cor7, _cor4)
			    -| [{'id',{0,0,'-sync_others/1-fun-0-'}}] )
		      in  %% Line 1370
			  call 'erlang':'spawn'
			      (_cor6)
		  -| [{'id',{0,0,'-sync_others/1-fun-1-'}}] )
	    in  %% Line 1369
		call 'lists':'foreach'
		    (_cor9, _cor0)
'sync_other'/2 =
    %% Line 1373
    fun (_cor1,_cor0) ->
	do  %% Line 1374
	    call 'erlang':'monitor_node'
		(_cor1, 'true', ['allow_passive_connect'])
	    %% Line 1375
	    receive
	      %% Line 1376
	      <{'nodedown',_cor7}>
		  when let <_cor8> =
			call 'erlang':'=:='
			    (_cor7, _cor1)
		    in  let <_cor9> =
			    call 'erlang':'>'
				(_cor0, 0)
			in  call 'erlang':'and'
				(_cor8, _cor9) ->
		  let <_cor3> =
		      %% Line 1377
		      call 'erlang':'-'
			  (_cor0, 1)
		  in  %% Line 1377
		      apply 'sync_other'/2
			  (_cor1, _cor3)
	      %% Line 1378
	      <{'nodedown',_cor10}>
		  when call 'erlang':'=:='
			(_cor10,
			 _cor1) ->
		  let <_cor4> =
		      %% Line 1381
		      call 'erlang':'node'
			  ()
		  in  do  %% Line 1380
			  call 'error_logger':'warning_msg'
			      ([103|[108|[111|[98|[97|[108|[58|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[99|[111|[110|[110|[101|[99|[116|[32|[116|[111|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1381
																												     [_cor4|[_cor1|[]]])
			  %% Line 1382
			  call 'erlang':'!'
			      ('global_name_server', {'extra_nodedown',_cor1})
	    after %% Line 1383
		  0 ->
	      let <_cor2> =
		  %% Line 1384
		  call 'erlang':'node'
		      ()
	      in  %% Line 1384
		  call 'gen_server':'cast'
		      ({'global_name_server',_cor1}, {'in_sync',_cor2,'true'})
'insert_global_name'/6 =
    %% Line 1389
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1390
	case apply 'do_monitor'/1
		 (_cor4) of
	  <{RPid,Ref}> when 'true' ->
	      %% Line 1391
	      case call 'ets':'insert'
		       ('global_names', {_cor5,_cor4,_cor3,RPid,Ref}) of
		<'true'> when 'true' ->
		    %% Line 1392
		    case call 'ets':'insert'
			     ('global_pid_names', {_cor4,_cor5}) of
		      <'true'> when 'true' ->
			  %% Line 1393
			  case call 'ets':'insert'
				   ('global_pid_names', {Ref,_cor5}) of
			    <'true'> when 'true' ->
				%% Line 1394
				case apply 'lock_still_set'/3
					 (_cor2, _cor1, _cor0) of
				  %% Line 1395
				  <'true'> when 'true' ->
				      _cor0
				  %% Line 1397
				  <'false'> when 'true' ->
				      %% Line 1406
				      apply 'delete_global_name2'/2
					  (_cor5, _cor0)
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'lock_still_set'/3 =
    %% Line 1409
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1410
	case call 'ets':'lookup'
		 ('global_locks', 'global') of
	  %% Line 1411
	  <[{'global',_X_LockReqId,PidRefs}|[]]>
	      when call 'erlang':'is_pid'
		    (_cor2) ->
	      %% Line 1413
	      call 'lists':'keymember'
		  (_cor2, 1, PidRefs)
	  %% Line 1414
	  <[{'global',LockReqId,_X_PidRefs}|[]]>
	      when call 'erlang':'is_atom'
		    (_cor2) ->
	      %% Line 1415
	      case apply 'extra_info'/2
		       ('lock', _cor1) of
		<{'global',LockId}> when 'true' ->
		    %% Line 1416
		    call 'erlang':'=:='
			(LockReqId, LockId)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1417
	  <[]> when 'true' ->
	      %% Line 1418
	      ( case _cor0 of
		  ( <( {'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec48}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'not'
			    (_rec48)
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'extra_info'/2 =
    %% Line 1421
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 1423
		call 'lists':'keyfind'
		    (_cor1, 1, _cor0)
	in  %% Line 1423
	    case _cor2 of
	      %% Line 1424
	      <{_cor6,Info}>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor1) ->
		  %% Line 1425
		  Info
	      %% Line 1426
	      <_cor7> when 'true' ->
		  %% Line 1427
		  'undefined'
	    end
'del_name'/2 =
    %% Line 1430
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 1431
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[%% Line 1432
			      {_cor16,Name}|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[%% Line 1433
						  {_cor17,_X_Pid,_X_Method,_X_RPid,Ref1}|_cor6]>
						    when %% Line 1435
						      call 'erlang':'=:='
							  (Ref1,
							   _cor1) ->
						    let <_cor10> =
							%% Line 1433
							apply 'lc$^1'/1
							    (_cor6)
						    in  ( [Name|_cor10]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      %% Line 1433
						      apply 'lc$^1'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 1432
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor7> =
					  %% Line 1434
					  call 'ets':'lookup'
					      ('global_names', Name)
				      in  apply 'lc$^1'/1
					      (_cor7)
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 1432
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      %% Line 1432
		      call 'ets':'lookup'
			  ('global_pid_names', _cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 1436
	    case _cor11 of
	      %% Line 1437
	      <[Name|[]]> when 'true' ->
		  %% Line 1438
		  apply 'delete_global_name2'/2
		      (Name, _cor0)
	      %% Line 1439
	      <[]> when 'true' ->
		  _cor0
	      ( <_cor13> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor13})
		-| ['compiler_generated'] )
	    end
'delete_global_name_keep_pid'/2 =
    %% Line 1444
    fun (_cor1,_cor0) ->
	%% Line 1445
	case call 'ets':'lookup'
		 ('global_names', _cor1) of
	  %% Line 1446
	  <[{_cor5,Pid,_X_Method,RPid,Ref}|[]]>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 1447
	      apply 'delete_global_name2'/5
		  (_cor1, Pid, RPid, Ref, _cor0)
	  %% Line 1448
	  <[]> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'delete_global_name2'/2 =
    %% Line 1452
    fun (_cor1,_cor0) ->
	%% Line 1453
	case call 'ets':'lookup'
		 ('global_names', _cor1) of
	  %% Line 1454
	  <[{_cor6,Pid,_X_Method,RPid,Ref}|[]]>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 1455
	      case call 'ets':'delete'
		       ('global_names', _cor1) of
		<'true'> when 'true' ->
		    %% Line 1456
		    apply 'delete_global_name2'/5
			(_cor1, Pid, RPid, Ref, _cor0)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1457
	  <[]> when 'true' ->
	      _cor0
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'delete_global_name2'/5 =
    %% Line 1461
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1462
	case call 'erlang':'demonitor'
		 (_cor1, ['flush']) of
	  <'true'> when 'true' ->
	      do  %% Line 1463
		  apply 'kill_monitor_proc'/2
		      (_cor2, _cor3)
		  do  %% Line 1464
		      apply 'delete_global_name'/2
			  (_cor4, _cor3)
		      %% Line 1466
		      case call 'ets':'delete_object'
			       ('global_pid_names', {_cor3,_cor4}) of
			<'true'> when 'true' ->
			    %% Line 1467
			    case call 'ets':'delete_object'
				     ('global_pid_names', {_cor1,_cor4}) of
			      <'true'> when 'true' ->
				  do  %% Line 1468
				      case call 'ets':'lookup'
					       ('global_names_ext', _cor4) of
					%% Line 1469
					<[{_cor16,_cor17,RegNode}|[]]>
					    when let <_cor18> =
						  call 'erlang':'=:='
						      (_cor16, _cor4)
					      in  let <_cor19> =
						      call 'erlang':'=:='
							  (_cor17, _cor3)
						  in  call 'erlang':'and'
							  (_cor18, _cor19) ->
					    %% Line 1470
					    case call 'ets':'delete'
						     ('global_names_ext', _cor4) of
					      <'true'> when 'true' ->
						  %% Line 1472
						  apply 'dounlink_ext'/2
						      (_cor3, RegNode)
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					%% Line 1473
					<[]> when 'true' ->
					    'ok'
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
				      let <_cor10> =
					  %% Line 1477
					  call 'erlang':'node'
					      (_cor3)
				      in  %% Line 1477
					  apply 'trace_message'/3
					      (_cor0, {'del_name',_cor10}, [_cor4|[_cor3|[]]])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'delete_global_name'/2 =
    %% Line 1481
    fun (_cor1,_cor0) ->
	%% Line 1482
	'ok'
'start_the_locker'/1 =
    %% Line 1515
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1516
	    apply 'init_the_locker_fun'/1
		(_cor0)
	in  %% Line 1516
	    call 'erlang':'spawn_link'
		(_cor1)
'init_the_locker_fun'/1 =
    %% Line 1520
    fun (_cor0) ->
	%% Line 1521
	( fun () ->
	      do  %% Line 1522
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <S0> =
		      %% Line 1523
		      {'multi',[],[],[],'undefined','false',_cor0}
		  in  let <_cor2> =
			  %% Line 1524
			  apply 'get_known'/0
			      ()
		      in  let <S1> =
			      %% Line 1524
			      apply 'update_locker_known'/2
				  ({'add',_cor2}, S0)
			  in  do  %% Line 1525
				  apply 'loop_the_locker'/1
				      (S1)
				  %% Line 1526
				  call 'erlang':'error'
				      ('locker_exited')
	  -| [{'id',{0,0,'-init_the_locker_fun/1-fun-0-'}}] )
'loop_the_locker'/1 =
    %% Line 1529
    fun (_cor0) ->
	%% Line 1531
	receive
	  %% Line 1532
	  <Message>
	      when try
		    let <_cor31> =
			call 'erlang':'element'
			    (1, Message)
		    in  call 'erlang':'=/='
			    (_cor31, 'nodeup')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1533
	      apply 'the_locker_message'/2
		  (Message, _cor0)
	after %% Line 1534
	      0 ->
	  %% Line 1536
	  ( case _cor0 of
	      ( <( {'multi',_rec49,_cor33,_cor34,_cor35,_cor36,_cor37}
		   -| ['compiler_generated'] )> when 'true' ->
		    let <_cor23> =
			case <_rec49,_cor33> of
			  %% Line 1537
			  <[],[]> when 'true' ->
			      %% Line 1538
			      'infinity'
			  %% Line 1539
			  <_fol482,_fol483> when 'true' ->
			      %% Line 1544
			      case <> of
				%% Line 1545
				<>
				    when ( call 'erlang':'=:='
					    (_cor36,
					     'true')
					-| ['compiler_generated'] ) ->
				    %% Line 1546
				    0
				%% Line 1547
				<>
				    when ( call 'erlang':'=:='
					    (_cor34,
					     [])
					-| ['compiler_generated'] ) ->
				    %% Line 1548
				    200
				%% Line 1549
				<> when 'true' ->
				    let <_cor19> =
					%% Line 1550
					call 'erlang':'length'
					    (_cor34)
				    in  let <_cor20> =
					    %% Line 1550
					    call 'erlang':'*'
						(100, _cor19)
					in  let <_cor21> =
						%% Line 1550
						call 'erlang':'+'
						    (1000, _cor20)
					    in  %% Line 1550
						call 'erlang':'min'
						    (_cor21, %% Line 1551
							     3000)
			      end
			end
		    in  let <_cor27> =
			    %% Line 1554
			    call 'erlang':'setelement'
				(6, _cor0, 'false')
			in  %% Line 1555
			    receive
			      %% Line 1556
			      <Message>
				  when try
					let <_cor30> =
					    call 'erlang':'element'
						(1, Message)
					in  call 'erlang':'=/='
						(_cor30, 'nodeup')
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 1557
				  apply 'the_locker_message'/2
				      (Message, _cor27)
			    after _cor23 ->
			      %% Line 1559
			      case apply 'is_global_lock_set'/0
				       () of
				%% Line 1560
				<'true'> when 'true' ->
				    %% Line 1561
				    apply 'loop_the_locker'/1
					(_cor27)
				%% Line 1562
				<'false'> when 'true' ->
				    %% Line 1563
				    apply 'select_node'/1
					(_cor27)
				( <_cor29> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor29})
				  -| ['compiler_generated'] )
			      end
		-| ['compiler_generated'] )
	      ( <_cor38> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','multi'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
	    -| ['compiler_generated'] )
'the_locker_message'/2 =
    %% Line 1568
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'his_the_locker',HisTheLocker,HisKnown0,_X_MyKnown},S> when 'true' ->
	      %% Line 1570
	      case HisKnown0 of
		<{HisVsn,_X_HisKnown}> when 'true' ->
		    %% Line 1571
		    case call 'erlang':'>'
			     (HisVsn, 4) of
		      <'true'> when 'true' ->
			  %% Line 1572
			  receive
			    %% Line 1573
			    <{'nodeup',Node,MyTag}>
				when try
				      let <_cor9> =
					  call 'erlang':'node'
					      (HisTheLocker)
				      in  call 'erlang':'=:='
					      (_cor9, Node)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_cor10> =
				    %% Line 1575
				    call 'erlang':'node'
					(HisTheLocker)
				in  let <Him> =
					%% Line 1575
					{'him',_cor10,%% Line 1576
						      HisTheLocker,%% Line 1576
								   HisVsn,MyTag}
				    in  let <_cor12> =
					    %% Line 1577
					    apply 'add_node'/2
						(Him, S)
					in  %% Line 1577
					    apply 'loop_the_locker'/1
						(_cor12)
			    %% Line 1578
			    <{'cancel',Node,_X_Tag,'no_fun'}>
				when try
				      let <_cor13> =
					  call 'erlang':'node'
					      (HisTheLocker)
				      in  call 'erlang':'=:='
					      (_cor13, Node)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 1579
				apply 'loop_the_locker'/1
				    (S)
			  after %% Line 1580
				60000 ->
			    let <_cor4> =
				%% Line 1583
				call 'erlang':'node'
				    ()
			    in  let <_cor5> =
				    %% Line 1583
				    call 'erlang':'node'
					(HisTheLocker)
				in  do  %% Line 1582
					call 'error_logger':'error_msg'
					    ([103|[108|[111|[98|[97|[108|[58|[32|[110|[111|[100|[101|[117|[112|[32|[110|[101|[118|[101|[114|[32|[99|[97|[109|[101|[32|[126|[119|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1583
																												   [_cor4|[_cor5|[]]])
					%% Line 1584
					case S of
					  <{'multi',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
					      let <_cor8> =
						  call 'erlang':'setelement'
						      (6, S, 'false')
					      in  apply 'loop_the_locker'/1
						      (_cor8)
					  ( <_cor51> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','multi'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1586
	  <{'cancel',_X_Node,'undefined','no_fun'},S> when 'true' ->
	      %% Line 1591
	      apply 'loop_the_locker'/1
		  (S)
	  %% Line 1592
	  <{'cancel',Node,Tag,'no_fun'},S> when 'true' ->
	      do  %% Line 1594
		  receive
		    %% Line 1595
		    <{'nodeup',_cor52,_cor53}>
			when let <_cor54> =
			      call 'erlang':'=:='
				  (_cor52, Node)
			  in  let <_cor55> =
				  call 'erlang':'=:='
				      (_cor53, Tag)
			      in  call 'erlang':'and'
				      (_cor54, _cor55) ->
			'ok'
		  after %% Line 1598
			0 ->
		    'ok'
		  let <_cor14> =
		      %% Line 1601
		      apply 'remove_node'/2
			  (Node, S)
		  in  %% Line 1601
		      apply 'loop_the_locker'/1
			  (_cor14)
	  %% Line 1602
	  <{'lock_set',_X_Pid,'false',_cor56},S> when 'true' ->
	      %% Line 1604
	      apply 'loop_the_locker'/1
		  (S)
	  %% Line 1605
	  <{'lock_set',Pid,'true',_X_HisKnown},S> when 'true' ->
	      let <Node> =
		  %% Line 1606
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 1608
		  case apply 'find_node_tag'/2
			   (Node, S) of
		    %% Line 1609
		    <{'true',MyTag,HisVsn}> when 'true' ->
			let <LockId> =
			    %% Line 1610
			    apply 'locker_lock_id'/2
				(Pid, HisVsn)
			in  %% Line 1611
			    case apply 'lock_nodes_safely'/3
				     (LockId, [], S) of
			      <{IsLockSet,S1}> when 'true' ->
				  let <_cor20> =
				      %% Line 1612
				      call 'erlang':'self'
					  ()
				  in  %% Line 1612
				      ( case S1 of
					  ( <( {'multi',_cor57,_cor58,_rec54,_cor59,_cor60,_cor61}
					       -| ['compiler_generated'] )> when 'true' ->
						do  call 'erlang':'!'
							(Pid, {'lock_set',_cor20,IsLockSet,_rec54})
						    let <_cor21> =
							%% Line 1613
							call 'erlang':'node'
							    ()
						    in  let <Known2> =
							    %% Line 1613
							    [_cor21|_rec54]
							in  %% Line 1616
							    case IsLockSet of
							      %% Line 1617
							      <'true'> when 'true' ->
								  do  %% Line 1618
								      call 'gen_server':'cast'
									  ('global_name_server', %% Line 1619
												 {'lock_is_set',Node,MyTag,LockId})
								      do  %% Line 1626
									  receive
									    %% Line 1627
									    <{'cancel',_cor69,_X_Tag,Fun}>
										when call 'erlang':'=:='
										      (_cor69,
										       Node) ->
										do  %% Line 1629
										    apply 'call_fun'/1
											(Fun)
										    %% Line 1630
										    apply 'delete_global_lock'/2
											(LockId, Known2)
									  after 'infinity' ->
									    'ok'
									  let <_cor27> =
									      %% Line 1632
									      call 'erlang':'setelement'
										  (6, S1, 'true')
									  in  let <_cor29> =
										  %% Line 1633
										  apply 'remove_node'/2
										      (Node, _cor27)
									      in  %% Line 1633
										  apply 'loop_the_locker'/1
										      (_cor29)
							      %% Line 1634
							      <'false'> when 'true' ->
								  let <_cor32> =
								      %% Line 1635
								      call 'erlang':'setelement'
									  (6, S1, 'false')
								  in  %% Line 1635
								      apply 'loop_the_locker'/1
									  (_cor32)
							      ( <_cor33> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor33})
								-| ['compiler_generated'] )
							    end
					    -| ['compiler_generated'] )
					  ( <_cor62> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','multi'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor17})
				-| ['compiler_generated'] )
			    end
		    %% Line 1637
		    <'false'> when 'true' ->
			let <_cor36> =
			    %% Line 1639
			    call 'erlang':'self'
				()
			in  %% Line 1639
			    ( case S of
				( <( {'multi',_cor84,_cor85,_rec58,_cor86,_cor87,_cor88}
				     -| ['compiler_generated'] )> when 'true' ->
				      do  call 'erlang':'!'
					      (Pid, {'lock_set',_cor36,'false',_rec58})
					  %% Line 1640
					  apply 'loop_the_locker'/1
					      (S)
				  -| ['compiler_generated'] )
				( <_cor89> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','multi'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor37})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1642
	  <{'add_to_known',Nodes},S> when 'true' ->
	      let <S1> =
		  %% Line 1643
		  apply 'update_locker_known'/2
		      ({'add',Nodes}, S)
	      in  %% Line 1644
		  apply 'loop_the_locker'/1
		      (S1)
	  %% Line 1645
	  <{'remove_from_known',Node},S> when 'true' ->
	      let <S1> =
		  %% Line 1646
		  apply 'update_locker_known'/2
		      ({'remove',Node}, S)
	      in  %% Line 1647
		  apply 'loop_the_locker'/1
		      (S1)
	  %% Line 1648
	  <{'do_trace',DoTrace},S> when 'true' ->
	      %% Line 1649
	      case S of
		<{'multi',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
		    let <_cor42> =
			call 'erlang':'setelement'
			    (7, S, DoTrace)
		    in  apply 'loop_the_locker'/1
			    (_cor42)
		( <_cor96> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','multi'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1650
	  <Other,S> when 'true' ->
	      do  %% Line 1651
		  apply 'unexpected_message'/2
		      (Other, 'locker')
		  %% Line 1653
		  apply 'loop_the_locker'/1
		      (S)
	end
'select_node'/1 =
    %% Line 1657
    fun (_cor0) ->
	%% Line 1658
	( case _cor0 of
	    ( <( {'multi',_rec60,_cor33,_cor34,_cor35,_cor36,_cor37}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <UseRemote> =
		      call 'erlang':'=:='
			  (_rec60, [])
		  in  let <_cor6> =
			  %% Line 1659
			  case <> of
			    <>
				when UseRemote ->
				_cor33
			    <> when 'true' ->
				_rec60
			  end
		      in  let <Others2> =
			      %% Line 1660
			      apply 'exclude_known'/2
				  (_cor6, _cor34)
			  in  let <_cor15> =
				  %% Line 1661
				  case <> of
				    %% Line 1662
				    <>
					when UseRemote ->
					call 'erlang':'setelement'
					    (3, _cor0, Others2)
				    %% Line 1663
				    <> when 'true' ->
					call 'erlang':'setelement'
					    (2, _cor0, Others2)
				  end
			      in  %% Line 1665
				  case <> of
				    %% Line 1666
				    <>
					when call 'erlang':'=:='
					      (Others2,
					       []) ->
					%% Line 1667
					apply 'loop_the_locker'/1
					    (_cor15)
				    %% Line 1668
				    <> when 'true' ->
					let <Him> =
					    %% Line 1669
					    apply 'random_element'/1
						(Others2)
					in  %% Line 1671
					    case Him of
					      <{'him',Node,HisTheLocker,HisVsn,MyTag}> when 'true' ->
						  let <HisNode> =
						      %% Line 1672
						      [Node|[]]
						  in  let <_cor20> =
							  %% Line 1673
							  call 'erlang':'node'
							      ()
						      in  let <Us> =
							      %% Line 1673
							      [_cor20|HisNode]
							  in  let <LockId> =
								  %% Line 1674
								  apply 'locker_lock_id'/2
								      (HisTheLocker, HisVsn)
							      in  %% Line 1677
								  case apply 'lock_nodes_safely'/3
									   (LockId, HisNode, _cor15) of
								    <{IsLockSet,S2}> when 'true' ->
									%% Line 1678
									case IsLockSet of
									  %% Line 1679
									  <'true'> when 'true' ->
									      %% Line 1680
									      ( case S2 of
										  ( <( {'multi',_cor71,_cor72,_rec66,_cor73,_cor74,_cor75}
										       -| ['compiler_generated'] )> when 'true' ->
											let <Known1> =
											    call 'erlang':'++'
												(Us, _rec66)
											in  let <_cor29> =
												%% Line 1682
												call 'erlang':'self'
												    ()
											    in  do  %% Line 1682
												    call 'erlang':'!'
													(HisTheLocker, {'lock_set',_cor29,'true',_rec66})
												    let <S3> =
													%% Line 1683
													apply 'lock_is_set'/5
													    (S2, Him, MyTag, Known1, LockId)
												    in  %% Line 1684
													apply 'loop_the_locker'/1
													    (S3)
										    -| ['compiler_generated'] )
										  ( <_cor76> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','multi'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
									  %% Line 1685
									  <'false'> when 'true' ->
									      %% Line 1686
									      apply 'loop_the_locker'/1
										  (S2)
									  ( <_cor31> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor31})
									    -| ['compiler_generated'] )
									end
								    ( <_cor23> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor23})
								      -| ['compiler_generated'] )
								  end
					      ( <_cor18> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor18})
						-| ['compiler_generated'] )
					    end
				  end
	      -| ['compiler_generated'] )
	    ( <_cor38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','multi'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'locker_lock_id'/2 =
    %% Line 1694
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Vsn>
	      when call 'erlang':'>'
		    (Vsn,
		     4) ->
	      let <_cor2> =
		  %% Line 1695
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 1695
		      call 'lists':'sort'
			  ([_cor2|[Pid|[]]])
		  in  %% Line 1695
		      {'global',_cor3}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'locker_lock_id',2}}] )
	    -| ['compiler_generated'] )
	end
'lock_nodes_safely'/3 =
    %% Line 1697
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1700
	( case _cor0 of
	    ( <( {'multi',_cor31,_cor32,_cor33,_rec68,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <First> =
		      apply 'delete_nonode'/1
			  ([_rec68|[]])
		  in  let <_cor7> =
			  %% Line 1701
			  call 'erlang':'node'
			      ()
		      in  let <_cor10> =
			      %% Line 1701
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      ([_cor7|[]],
					       First) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					let <_cor8> =
					    apply 'can_set_lock'/1
						(_cor2)
					in  call 'erlang':'=/='
						(_cor8, 'false')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 1701
			      case _cor10 of
				%% Line 1702
				<'true'> when 'true' ->
				    %% Line 1704
				    case apply 'set_lock'/3
					     (_cor2, First, 0) of
				      %% Line 1705
				      <'true'> when 'true' ->
					  let <S> =
					      %% Line 1706
					      apply 'update_locker_known'/1
						  (_cor0)
					  in  let <_cor12> =
						  %% Line 1708
						  call 'erlang':'node'
						      ()
					      in  let <_cor13> =
						      %% Line 1708
						      call 'erlang':'--'
							  ([_cor12|_cor1], First)
						  in  let <Second> =
							  %% Line 1708
							  apply 'delete_nonode'/1
							      (_cor13)
						      in  %% Line 1709
							  case apply 'set_lock'/3
								   (_cor2, Second, 0) of
							    %% Line 1710
							    <'true'> when 'true' ->
								%% Line 1711
								( case S of
								    ( <( {'multi',_cor37,_cor38,_rec69,_cor39,_cor40,_cor41}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <_cor18> =
									      %% Line 1712
									      call 'erlang':'--'
										  (_rec69, First)
									  in  %% Line 1712
									      case apply 'set_lock'/3
										       (_cor2, _cor18, 0) of
										%% Line 1713
										<'true'> when 'true' ->
										    let <_X_> =
											%% Line 1714
											apply 'locker_trace'/3
											    (S, 'ok', {First,_rec69})
										    in  %% Line 1715
											{'true',S}
										%% Line 1716
										<'false'> when 'true' ->
										    let <SoFar> =
											%% Line 1723
											call 'erlang':'++'
											    (First, Second)
										    in  do  %% Line 1724
											    apply 'del_lock'/2
												(_cor2, SoFar)
											    let <_X_> =
												%% Line 1725
												apply 'locker_trace'/3
												    (S, 'not_ok', {_rec69,SoFar})
											    in  %% Line 1726
												{'false',S}
										( <_cor22> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor22})
										  -| ['compiler_generated'] )
									      end
								      -| ['compiler_generated'] )
								    ( <_cor42> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','multi'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    %% Line 1728
							    <'false'> when 'true' ->
								do  %% Line 1729
								    apply 'del_lock'/2
									(_cor2, First)
								    let <_X_> =
									%% Line 1730
									apply 'locker_trace'/3
									    (S, 'not_ok', {Second,First})
								    in  %% Line 1731
									{'false',S}
							    ( <_cor24> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor24})
							      -| ['compiler_generated'] )
							  end
				      %% Line 1733
				      <'false'> when 'true' ->
					  let <_X_> =
					      %% Line 1734
					      apply 'locker_trace'/3
						  (_cor0, 'not_ok', {First,[]})
					  in  %% Line 1735
					      {'false',_cor0}
				      ( <_cor26> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor26})
					-| ['compiler_generated'] )
				    end
				%% Line 1737
				<'false'> when 'true' ->
				    %% Line 1738
				    {'false',_cor0}
				( <_cor27> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor27})
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','multi'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'delete_nonode'/1 =
    %% Line 1741
    fun (_cor0) ->
	%% Line 1742
	call 'lists':'delete'
	    ('nonode@nohost', _cor0)
'locker_trace'/3 =
    %% Line 1745
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'multi',_cor9,_cor10,_cor11,_cor12,_cor13,'false'},_cor14,_X_Nodes> when 'true' ->
	      %% Line 1746
	      'ok'
	  %% Line 1747
	  <{'multi',_cor15,_cor16,_cor17,_cor18,_cor19,'true'},'ok',Ns> when 'true' ->
	      let <_cor3> =
		  %% Line 1748
		  call 'erlang':'node'
		      ()
	      in  %% Line 1748
		  call 'erlang':'!'
		      ('global_name_server', {'trace_message',{'locker_succeeded',_cor3},Ns})
	  %% Line 1749
	  <{'multi',_cor20,_cor21,_cor22,_cor23,_cor24,'true'},'not_ok',Ns> when 'true' ->
	      let <_cor4> =
		  %% Line 1750
		  call 'erlang':'node'
		      ()
	      in  %% Line 1750
		  call 'erlang':'!'
		      ('global_name_server', {'trace_message',{'locker_failed',_cor4},Ns})
	  %% Line 1751
	  <{'multi',_cor25,_cor26,_cor27,_cor28,_cor29,'true'},'rejected',Ns> when 'true' ->
	      let <_cor5> =
		  %% Line 1752
		  call 'erlang':'node'
		      ()
	      in  %% Line 1752
		  call 'erlang':'!'
		      ('global_name_server', {'trace_message',{'lock_rejected',_cor5},Ns})
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'locker_trace',3}}] )
	    -| ['compiler_generated'] )
	end
'update_locker_known'/1 =
    %% Line 1754
    fun (_cor0) ->
	%% Line 1755
	receive
	  %% Line 1756
	  <{'add_to_known',Nodes}> when 'true' ->
	      let <S1> =
		  %% Line 1757
		  apply 'update_locker_known'/2
		      ({'add',Nodes}, _cor0)
	      in  %% Line 1758
		  apply 'update_locker_known'/1
		      (S1)
	  %% Line 1759
	  <{'remove_from_known',Node}> when 'true' ->
	      let <S1> =
		  %% Line 1760
		  apply 'update_locker_known'/2
		      ({'remove',Node}, _cor0)
	      in  %% Line 1761
		  apply 'update_locker_known'/1
		      (S1)
	after %% Line 1762
	      0 ->
	  _cor0
'update_locker_known'/2 =
    %% Line 1766
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1767
	    case _cor1 of
	      %% Line 1768
	      <{'add',Nodes}> when 'true' ->
		  ( case _cor0 of
		      ( <( {'multi',_cor16,_cor17,_rec70,_cor18,_cor19,_cor20}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'++'
				(Nodes, _rec70)
			-| ['compiler_generated'] )
		      ( <_cor21> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','multi'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1769
	      <{'remove',Node}> when 'true' ->
		  ( case _cor0 of
		      ( <( {'multi',_cor22,_cor23,_rec71,_cor24,_cor25,_cor26}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'lists':'delete'
				(Node, _rec71)
			-| ['compiler_generated'] )
		      ( <_cor27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','multi'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
	in  let <_cor9> =
		%% Line 1771
		call 'erlang':'node'
		    ()
	    in  let <TheBoss> =
		    %% Line 1771
		    apply 'the_boss'/1
			([_cor9|_cor7])
		in  %% Line 1772
		    case _cor0 of
		      <{'multi',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
			  let <_cor12> =
			      call 'erlang':'setelement'
				  (5, _cor0, TheBoss)
			  in  call 'erlang':'setelement'
				  (4, _cor12, _cor7)
		      ( <_cor34> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','multi'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'random_element'/1 =
    %% Line 1774
    fun (_cor0) ->
	%% Line 1775
	case call 'erlang':'now'
		 () of
	  <{A,B,C}> when 'true' ->
	      let <_cor3> =
		  %% Line 1776
		  call 'erlang':'+'
		      (A, B)
	      in  let <_cor4> =
		      %% Line 1776
		      call 'erlang':'+'
			  (_cor3, C)
		  in  let <_cor2> =
			  %% Line 1776
			  call 'erlang':'length'
			      (_cor0)
		      in  let <E> =
			      %% Line 1776
			      call 'erlang':'rem'
				  (_cor4, _cor2)
			  in  let <_cor6> =
				  %% Line 1777
				  call 'erlang':'+'
				      (E, 1)
			      in  %% Line 1777
				  call 'lists':'nth'
				      (_cor6, _cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'exclude_known'/2 =
    %% Line 1779
    fun (_cor1,_cor0) ->
	%% Line 1780
	( letrec
	      'lc$^0'/1 =
		  fun (_cor7) ->
		      case _cor7 of
			<[N|_cor3]> when 'true' ->
			    ( case N of
				( <( {'him',_rec73,_cor12,_cor13,_cor14}
				     -| ['compiler_generated'] )> when 'true' ->
				      ( case call 'lists':'member'
						 (_rec73, _cor0) of
					  <'false'> when 'true' ->
					      let <_cor8> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [N|_cor8]
						    -| ['compiler_generated'] )
					  ( <'true'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor3)
					    -| ['compiler_generated'] )
					  ( <_cor_variable> when 'true' ->
						call 'erlang':'error'
						    ('badarg')
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  -| ['compiler_generated'] )
				( <_cor15> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','him'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'lock_is_set'/5 =
    %% Line 1782
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1783
	( case _cor3 of
	    ( <( {'him',_rec74,_cor28,_cor29,_cor30}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1784
		  receive
		    %% Line 1785
		    <{'lock_set',P,'true',_cor32}>
			when try
			      let <_cor8> =
				  call 'erlang':'node'
				      (P)
			      in  call 'erlang':'=:='
				      (_cor8, _rec74)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			do  %% Line 1786
			    call 'gen_server':'cast'
				('global_name_server', %% Line 1787
						       {'lock_is_set',_rec74,_cor2,_cor0})
			    do  %% Line 1793
				receive
				  %% Line 1794
				  <{'cancel',_cor33,_cor34,Fun}>
				      when call 'erlang':'=:='
					    (_cor33,
					     _rec74) ->
				      do  %% Line 1796
					  apply 'call_fun'/1
					      (Fun)
					  %% Line 1797
					  apply 'delete_global_lock'/2
					      (_cor0, _cor1)
				after 'infinity' ->
				  'ok'
				%% Line 1800
				( case _cor4 of
				    ( <( {'multi',_rec78,_cor35,_cor36,_cor37,_cor38,_cor39}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_rec75> =
					      call 'lists':'delete'
						  (_cor3, _rec78)
					  in  let <_rec76> =
						  %% Line 1801
						  call 'lists':'delete'
						      (_cor3, _cor35)
					      in  let <_cor16> =
						      call 'erlang':'setelement'
							  (6, _cor4, 'true')
						  in  let <_cor17> =
							  %% Line 1801
							  call 'erlang':'setelement'
							      (3, _cor16, _rec76)
						      in  call 'erlang':'setelement'
							      (2, _cor17, _rec75)
				      -| ['compiler_generated'] )
				    ( <_cor40> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','multi'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    %% Line 1802
		    <{'lock_set',P,'false',_cor54}>
			when try
			      let <_cor19> =
				  call 'erlang':'node'
				      (P)
			      in  call 'erlang':'=:='
				      (_cor19, _rec74)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_X_> =
			    %% Line 1804
			    apply 'locker_trace'/3
				(_cor4, 'rejected', _cor1)
			in  do  %% Line 1805
				apply 'delete_global_lock'/2
				    (_cor0, _cor1)
				_cor4
		    %% Line 1807
		    <{'cancel',_cor55,_cor56,Fun}>
			when call 'erlang':'=:='
			      (_cor55,
			       _rec74) ->
			do  %% Line 1809
			    apply 'call_fun'/1
				(Fun)
			    let <_X_> =
				%% Line 1810
				apply 'locker_trace'/3
				    (_cor4, 'rejected', _cor1)
			    in  do  %% Line 1811
				    apply 'delete_global_lock'/2
					(_cor0, _cor1)
				    %% Line 1812
				    apply 'remove_node'/2
					(_rec74, _cor4)
		    %% Line 1813
		    <{'EXIT',_cor57,_cor58}> when 'true' ->
			let <_X_> =
			    %% Line 1815
			    apply 'locker_trace'/3
				(_cor4, 'rejected', _cor1)
			in  do  %% Line 1816
				apply 'delete_global_lock'/2
				    (_cor0, _cor1)
				_cor4
		  after 'infinity' ->
		    'true'
	      -| ['compiler_generated'] )
	    ( <_cor31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','him'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'call_fun'/1 =
    %% Line 1829
    fun (_cor0) ->
	case _cor0 of
	  <'no_fun'> when 'true' ->
	      %% Line 1830
	      'ok'
	  %% Line 1831
	  <Fun> when 'true' ->
	      %% Line 1832
	      apply Fun
		  ()
	end
'delete_global_lock'/2 =
    %% Line 1837
    fun (_cor1,_cor0) ->
	let <TheBoss> =
	    %% Line 1838
	    apply 'the_boss'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 1839
		call 'lists':'delete'
		    (TheBoss, _cor0)
	    in  do  %% Line 1839
		    apply 'del_lock'/2
			(_cor1, _cor3)
		    %% Line 1840
		    apply 'del_lock'/2
			(_cor1, [TheBoss|[]])
'the_boss'/1 =
    %% Line 1842
    fun (_cor0) ->
	%% Line 1843
	call 'lists':'max'
	    (_cor0)
'find_node_tag'/2 =
    %% Line 1845
    fun (_cor1,_cor0) ->
	%% Line 1846
	( case _cor0 of
	    ( <( {'multi',_rec80,_cor9,_cor10,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'find_node_tag2'/2
			   (_cor1, _rec80) of
		    %% Line 1847
		    <'false'> when 'true' ->
			%% Line 1848
			apply 'find_node_tag2'/2
			    (_cor1, _cor9)
		    %% Line 1849
		    <Reply> when 'true' ->
			%% Line 1850
			Reply
		  end
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','multi'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'find_node_tag2'/2 =
    %% Line 1853
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Node,[]> when 'true' ->
	      %% Line 1854
	      'false'
	  %% Line 1855
	  <Node,[{'him',_cor4,_cor5,HisVsn,MyTag}|_cor6]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Node) ->
	      %% Line 1856
	      {'true',MyTag,HisVsn}
	  %% Line 1857
	  <Node,[_X_E|Rest]> when 'true' ->
	      %% Line 1858
	      apply 'find_node_tag2'/2
		  (Node, Rest)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_node_tag2',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_node'/2 =
    %% Line 1860
    fun (_cor1,_cor0) ->
	%% Line 1861
	( case _cor0 of
	    ( <( {'multi',_rec85,_cor13,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec82> =
		      apply 'remove_node2'/2
			  (_cor1, _rec85)
		  in  let <_rec83> =
			  %% Line 1862
			  apply 'remove_node2'/2
			      (_cor1, _cor13)
		      in  let <_cor9> =
			      %% Line 1862
			      call 'erlang':'setelement'
				  (3, _cor0, _rec83)
			  in  call 'erlang':'setelement'
				  (2, _cor9, _rec82)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','multi'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_node2'/2 =
    %% Line 1864
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Node,[]> when 'true' ->
	      %% Line 1865
	      []
	  %% Line 1866
	  <Node,[{'him',_cor5,_cor6,_cor7,_cor8}|Rest]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Node) ->
	      %% Line 1867
	      Rest
	  %% Line 1868
	  <Node,[E|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 1869
		  apply 'remove_node2'/2
		      (Node, Rest)
	      in  %% Line 1869
		  [E|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'remove_node2',2}}] )
	    -| ['compiler_generated'] )
	end
'add_node'/2 =
    %% Line 1871
    fun (_cor1,_cor0) ->
	%% Line 1872
	( case _cor1 of
	    ( <( {'him',_rec87,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'is_node_local'/1
			   (_rec87) of
		    %% Line 1873
		    <'true'> when 'true' ->
			%% Line 1874
			( case _cor0 of
			    ( <( {'multi',_rec90,_cor21,_cor22,_cor23,_cor24,_cor25}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec88> =
				      [_cor1|_rec90]
				  in  call 'erlang':'setelement'
					  (2, _cor0, _rec88)
			      -| ['compiler_generated'] )
			    ( <_cor26> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','multi'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1875
		    <'false'> when 'true' ->
			%% Line 1876
			( case _cor0 of
			    ( <( {'multi',_cor34,_rec93,_cor35,_cor36,_cor37,_cor38}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec91> =
				      [_cor1|_rec93]
				  in  call 'erlang':'setelement'
					  (3, _cor0, _rec91)
			      -| ['compiler_generated'] )
			    ( <_cor39> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','multi'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','him'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_node_local'/1 =
    %% Line 1879
    fun (_cor0) ->
	%% Line 1880
	case call 'inet':'gethostname'
		 () of
	  <{'ok',Host}> when 'true' ->
	      let <_cor3> =
		  catch
		      let <_cor2> =
			  %% Line 1881
			  call 'erlang':'atom_to_list'
			      (_cor0)
		      in  %% Line 1881
			  apply 'split_node'/3
			      (_cor2, 64, [])
	      in  %% Line 1881
		  case _cor3 of
		    %% Line 1882
		    <[_cor6|[_cor7|[]]]>
			when call 'erlang':'=:='
			      (_cor7,
			       Host) ->
			%% Line 1883
			'true'
		    %% Line 1884
		    <_cor8> when 'true' ->
			%% Line 1885
			'false'
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'split_node'/3 =
    %% Line 1888
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Chr|T],_cor9,Ack>
	      when call 'erlang':'=:='
		    (_cor9,
		     Chr) ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Ack)
	      in  let <_cor4> =
		      apply 'split_node'/3
			  (T, Chr, [])
		  in  [_cor3|_cor4]
	  %% Line 1889
	  <[H|T],Chr,Ack> when 'true' ->
	      apply 'split_node'/3
		  (T, Chr, [H|Ack])
	  %% Line 1890
	  <[],_cor10,Ack> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Ack)
	      in  [_cor5|[]]
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_node',3}}] )
	    -| ['compiler_generated'] )
	end
'cancel_locker'/3 =
    %% Line 1892
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1893
	apply 'cancel_locker'/4
	    (_cor2, _cor1, _cor0, 'no_fun')
'cancel_locker'/4 =
    %% Line 1895
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1896
	( case _cor2 of
	    ( <( {'state',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec94,_cor24,_cor25,_cor26}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  call 'erlang':'!'
			  (_rec94, {'cancel',_cor3,_cor1,_cor0})
		      %% Line 1900
		      case call 'lists':'keyfind'
			       (_cor3, 1, _cor21) of
			%% Line 1901
			<{_cor38,_cor39,Resolver}>
			    when call 'erlang':'=:='
				  (_cor39,
				   _cor1) ->
			    do  %% Line 1903
				call 'erlang':'exit'
				    (Resolver, 'kill')
				let <S1> =
				    %% Line 1904
				    apply 'trace_message'/3
					(_cor2, {'kill_resolver',_cor3}, [_cor1|[Resolver|[]]])
				in  let <_rec96> =
					%% Line 1905
					call 'lists':'keydelete'
					    (_cor3, 1, _cor21)
				    in  %% Line 1905
					case S1 of
					  <{'state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
					      call 'erlang':'setelement'
						  (5, S1, _rec96)
					  ( <_cor50> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
			%% Line 1906
			<_cor51> when 'true' ->
			    _cor2
		      end
	      -| ['compiler_generated'] )
	    ( <_cor27> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'reset_node_state'/1 =
    %% Line 1910
    fun (_cor0) ->
	do  %% Line 1912
	    call 'erlang':'erase'
		({'wait_lock',_cor0})
	    do  %% Line 1913
		call 'erlang':'erase'
		    ({'save_ops',_cor0})
		do  %% Line 1914
		    call 'erlang':'erase'
			({'pre_connect',_cor0})
		    do  %% Line 1915
			call 'erlang':'erase'
			    ({'prot_vsn',_cor0})
			do  %% Line 1916
			    call 'erlang':'erase'
				({'sync_tag_my',_cor0})
			    do  %% Line 1917
				call 'erlang':'erase'
				    ({'sync_tag_his',_cor0})
				%% Line 1918
				call 'erlang':'erase'
				    ({'lock_id',_cor0})
'exchange_names'/4 =
    %% Line 1923
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Name,Pid,Method}|Tail],Node,Ops,Res> when 'true' ->
	      %% Line 1924
	      case call 'ets':'lookup'
		       ('global_names', Name) of
		%% Line 1925
		<[{_cor17,_cor18,_X_Method,_X_RPid2,_X_Ref2}|[]]>
		    when let <_cor19> =
			  call 'erlang':'=:='
			      (_cor17, Name)
		      in  let <_cor20> =
			      call 'erlang':'=:='
				  (_cor18, Pid)
			  in  call 'erlang':'and'
				  (_cor19, _cor20) ->
		    %% Line 1926
		    apply 'exchange_names'/4
			(Tail, Node, Ops, Res)
		%% Line 1927
		<[{_cor21,Pid2,Method2,_X_RPid2,_X_Ref2}|[]]>
		    when let <_cor22> =
			  call 'erlang':'=:='
			      (_cor21, Name)
		      in  let <_cor23> =
			      try
				  let <_cor4> =
				      call 'erlang':'node'
					  ()
				  in  call 'erlang':'<'
					  (_cor4, Node)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			  in  call 'erlang':'and'
				  (_cor22, _cor23) ->
		    let <Node2> =
			%% Line 1931
			call 'erlang':'node'
			    (Pid2)
		    in  %% Line 1932
			case call 'rpc':'call'
				 (Node2, 'global', 'resolve_it', %% Line 1933
								 [Method2|[Name|[Pid|[Pid2|[]]]]]) of
			  %% Line 1934
			  <_cor24>
			      when call 'erlang':'=:='
				    (_cor24,
				     Pid) ->
			      let <Op> = {%% Line 1935
				   'insert',%% Line 1935
					    {Name,Pid,Method}}
			      in  %% Line 1936
				  apply 'exchange_names'/4
				      (Tail, Node, [Op|Ops], Res)
			  %% Line 1937
			  <_cor25>
			      when call 'erlang':'=:='
				    (_cor25,
				     Pid2) ->
			      let <Op> = {%% Line 1938
				   'insert',%% Line 1938
					    {Name,Pid2,Method2}}
			      in  %% Line 1939
				  apply 'exchange_names'/4
				      (Tail, Node, Ops, [Op|Res])
			  %% Line 1940
			  <'none'> when 'true' ->
			      let <Op> = {%% Line 1941
				   'delete',%% Line 1941
					    Name}
			      in  %% Line 1942
				  apply 'exchange_names'/4
				      (Tail, Node, [Op|Ops], [Op|Res])
			  %% Line 1943
			  <{'badrpc',Badrpc}> when 'true' ->
			      do  %% Line 1944
				  call 'error_logger':'info_msg'
				      ([103|[108|[111|[98|[97|[108|[58|[32|[98|[97|[100|[114|[112|[99|[32|[126|[119|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[119|[104|[101|[110|[32|[99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101|[32|[126|[119|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1946
																																																       [Badrpc|[Name|[]]])
				  let <Op> = {%% Line 1947
				       'insert',%% Line 1947
						{Name,Pid,Method}}
				  in  %% Line 1948
				      apply 'exchange_names'/4
					  (Tail, Node, [Op|Ops], Res)
			  %% Line 1949
			  <Else> when 'true' ->
			      do  %% Line 1950
				  call 'error_logger':'info_msg'
				      ([103|[108|[111|[98|[97|[108|[58|[32|[82|[101|[115|[111|[108|[118|[101|[32|[109|[101|[116|[104|[111|[100|[32|[126|[119|[32|[102|[111|[114|[32|[99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101|[32|[126|[119|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1952
																																																	   [Method|[Name|[Else|[]]]])
				  let <Op> = {%% Line 1953
				       'delete',%% Line 1953
						Name}
				  in  %% Line 1954
				      apply 'exchange_names'/4
					  (Tail, Node, [Op|Ops], [Op|Res])
			end
		%% Line 1956
		<[{_cor26,_X_Pid2,_X_Method,_X_RPid,_X_Ref}|[]]>
		    when call 'erlang':'=:='
			  (_cor26,
			   Name) ->
		    %% Line 1958
		    apply 'exchange_names'/4
			(Tail, Node, Ops, Res)
		%% Line 1959
		<_cor27> when 'true' ->
		    %% Line 1961
		    apply 'exchange_names'/4
			(Tail, Node, %% Line 1962
				     [{'insert',{Name,Pid,Method}}|Ops], %% Line 1962
									 Res)
	      end
	  %% Line 1964
	  <[],_cor28,Ops,Res> when 'true' ->
	      %% Line 1966
	      {Ops,Res}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'exchange_names',4}}] )
	    -| ['compiler_generated'] )
	end
'resolve_it'/4 =
    %% Line 1968
    fun (_cor3,_cor2,_cor1,_cor0) ->
	catch
	    %% Line 1969
	    apply _cor3
		(_cor2, _cor1, _cor0)
'minmax'/2 =
    %% Line 1971
    fun (_cor1,_cor0) ->
	%% Line 1972
	case <> of
	  <>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (_cor1)
		    in  let <_cor2> =
			    call 'erlang':'node'
				(_cor0)
			in  call 'erlang':'<'
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      {_cor1,_cor0}
	  <> when 'true' ->
	      {_cor0,_cor1}
	end
'random_exit_name'/3 =
    %% Line 1978
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1979
	case apply 'minmax'/2
		 (_cor1, _cor0) of
	  <{Min,Max}> when 'true' ->
	      do  %% Line 1980
		  call 'error_logger':'info_msg'
		      ([103|[108|[111|[98|[97|[108|[58|[32|[78|[97|[109|[101|[32|[99|[111|[110|[102|[108|[105|[99|[116|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1981
																													 [{_cor2,Max}|[]])
		  do  %% Line 1982
		      call 'erlang':'exit'
			  (Max, 'kill')
		      %% Line 1983
		      Min
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'random_notify_name'/3 =
    %% Line 1989
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1990
	case apply 'minmax'/2
		 (_cor1, _cor0) of
	  <{Min,Max}> when 'true' ->
	      do  %% Line 1991
		  call 'erlang':'!'
		      (Max, {'global_name_conflict',_cor2})
		  %% Line 1992
		  Min
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'notify_all_name'/3 =
    %% Line 1998
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1999
	    call 'erlang':'!'
		(_cor1, {'global_name_conflict',_cor2,_cor0})
	    do  %% Line 2000
		call 'erlang':'!'
		    (_cor0, {'global_name_conflict',_cor2,_cor1})
		%% Line 2001
		'none'
'dolink_ext'/2 =
    %% Line 2003
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,RegNode>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (RegNode, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2004
	      call 'erlang':'link'
		  (Pid)
	  %% Line 2005
	  <_cor5,_cor6> when 'true' ->
	      %% Line 2006
	      'ok'
	end
'dounlink_ext'/2 =
    %% Line 2008
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,RegNode>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (RegNode, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2009
	      apply 'unlink_pid'/1
		  (Pid)
	  %% Line 2010
	  <_X_Pid,_X_RegNode> when 'true' ->
	      %% Line 2011
	      'ok'
	end
'unlink_pid'/1 =
    %% Line 2013
    fun (_cor0) ->
	%% Line 2014
	case call 'ets':'member'
		 ('global_pid_names', _cor0) of
	  %% Line 2015
	  <'false'> when 'true' ->
	      %% Line 2016
	      case call 'ets':'member'
		       ('global_pid_ids', _cor0) of
		%% Line 2017
		<'false'> when 'true' ->
		    %% Line 2018
		    call 'erlang':'unlink'
			(_cor0)
		%% Line 2019
		<'true'> when 'true' ->
		    %% Line 2020
		    'ok'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2022
	  <'true'> when 'true' ->
	      %% Line 2023
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'pid_is_locking'/2 =
    %% Line 2026
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2027
	    call 'lists':'keyfind'
		(_cor1, 1, _cor0)
	in  %% Line 2027
	    call 'erlang':'=/='
		(_cor2, 'false')
'delete_lock'/2 =
    %% Line 2029
    fun (_cor1,_cor0) ->
	let <Locks> =
	    %% Line 2030
	    apply 'pid_locks'/1
		(_cor1)
	in  let <F> =
		%% Line 2031
		( fun (_cor5,_cor4) ->
		      case <_cor5,_cor4> of
			<{ResourceId,LockRequesterId,PidRefs},S> when 'true' ->
			    %% Line 2032
			    case call 'lists':'keyfind'
				     (_cor1, 3, PidRefs) of
			      <{Pid,_X_RPid,_cor11}>
				  when call 'erlang':'=:='
					(_cor11,
					 _cor1) ->
				  %% Line 2033
				  apply 'remove_lock'/6
				      (ResourceId, LockRequesterId, Pid, PidRefs, 'true', S)
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor3})
				-| ['compiler_generated'] )
			    end
			( <_cor7,_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor7,_cor6})
				-| [{'function_name',{'-delete_lock/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-delete_lock/2-fun-0-'}}] )
	    in  %% Line 2035
		call 'lists':'foldl'
		    (F, _cor0, Locks)
'pid_locks'/1 =
    %% Line 2037
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 2038
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{_cor12,ResourceId}> when 'true' ->
			%% Line 2039
			call 'ets':'lookup'
			    ('global_locks', ResourceId)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-pid_locks/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-pid_locks/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 2040
		call 'ets':'lookup'
		    ('global_pid_ids', _cor0)
	    in  let <L> =
		    %% Line 2038
		    call 'lists':'flatmap'
			(_cor4, _cor1)
		in  %% Line 2041
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor8) ->
				  case _cor8 of
				    <[Lock = {_X_Id,_X_Req,PidRefs}|_cor7]> when 'true' ->
					%% Line 2042
					( case apply 'rpid_is_locking'/2
						   (_cor0, PidRefs) of
					    <'true'> when 'true' ->
						let <_cor9> =
						    apply 'lc$^0'/1
							(_cor7)
						in  ( [Lock|_cor9]
						      -| ['compiler_generated'] )
					    ( <'false'> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor7)
					      -| ['compiler_generated'] )
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor10})
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				    ( <[_cor6|_cor7]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor7)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (L)
		      -| ['list_comprehension'] )
'rpid_is_locking'/2 =
    %% Line 2044
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2045
	    call 'lists':'keyfind'
		(_cor1, 3, _cor0)
	in  %% Line 2045
	    call 'erlang':'=/='
		(_cor2, 'false')
'handle_nodedown'/2 =
    %% Line 2047
    fun (_cor1,_cor0) ->
	%% Line 2049
	case _cor0 of
	  <{'state',_cor14,Known,Syncs,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor3> =
		  %% Line 2050
		  call 'erlang':'get'
		      ({'sync_tag_my',_cor1})
	      in  let <NewS> =
		      %% Line 2050
		      apply 'cancel_locker'/3
			  (_cor1, _cor0, _cor3)
		  in  %% Line 2051
		      ( case NewS of
			  ( <( {'state',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec98,_cor28,_cor29,_cor30}
			       -| ['compiler_generated'] )> when 'true' ->
				do  call 'erlang':'!'
					(_rec98, {'remove_from_known',_cor1})
				    do  %% Line 2052
					apply 'reset_node_state'/1
					    (_cor1)
					let <_rec99> =
					    %% Line 2053
					    call 'lists':'delete'
						(_cor1, Known)
					in  let <_rec100> =
						%% Line 2054
						call 'lists':'delete'
						    (_cor1, Syncs)
					    in  let <_cor10> =
						    %% Line 2054
						    call 'erlang':'setelement'
							(4, NewS, _rec100)
						in  %% Line 2053
						    call 'erlang':'setelement'
							(3, _cor10, _rec99)
			    -| ['compiler_generated'] )
			  ( <_cor31> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'get_names'/0 =
    %% Line 2056
    fun () ->
	%% Line 2057
	call 'ets':'select'
	    ('global_names', %% Line 2058
			     [{{'$1','$2','$3','$4','$5'},[],[{{'$1','$2','$3'}}]}])
'get_names_ext'/0 =
    %% Line 2062
    fun () ->
	%% Line 2063
	call 'ets':'tab2list'
	    ('global_names_ext')
'get_known'/0 =
    %% Line 2065
    fun () ->
	%% Line 2066
	call 'gen_server':'call'
	    ('global_name_server', 'get_known', 'infinity')
'random_sleep'/1 =
    %% Line 2068
    fun (_cor0) ->
	do  %% Line 2069
	    case call 'erlang':'rem'
		     (_cor0, 10) of
	      %% Line 2070
	      <0> when 'true' ->
		  call 'erlang':'erase'
		      ('random_seed')
	      %% Line 2071
	      <_cor14> when 'true' ->
		  'ok'
	    end
	    do  %% Line 2073
		case call 'erlang':'get'
			 ('random_seed') of
		  %% Line 2074
		  <'undefined'> when 'true' ->
		      %% Line 2075
		      case call 'erlang':'now'
			       () of
			<{A1,A2,A3}> when 'true' ->
			    let <_cor3> =
				%% Line 2076
				( call 'erlang':'node'
				      ()
				  -| ['result_not_wanted'] )
			    in  let <_cor4> =
				    %% Line 2076
				    ( call 'erlang':'phash'
					  (_cor3, 100000)
				      -| ['result_not_wanted'] )
				in  let <_cor5> =
					%% Line 2076
					call 'erlang':'+'
					    (A3, _cor4)
				    in  %% Line 2076
					( call 'random':'seed'
					      (A1, A2, _cor5)
					  -| ['result_not_wanted'] )
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor2})
			  -| ['compiler_generated'] )
		      end
		  %% Line 2078
		  <_cor15> when 'true' ->
		      'ok'
		end
		let <_cor10> =
		    %% Line 2081
		    case <> of
		      <>
			  when call 'erlang':'>'
				(_cor0,
				 5) ->
			  8000
		      %% Line 2082
		      <> when 'true' ->
			  let <_cor8> =
			      call 'erlang':'bsl'
				  (1, _cor0)
			  in  let <_cor9> =
				  call 'erlang':'*'
				      (_cor8, 1000)
			      in  call 'erlang':'div'
				      (_cor9, 8)
		    end
		in  let <T> =
			%% Line 2084
			call 'random':'uniform'
			    (_cor10)
		    in  %% Line 2086
			receive
			  
			after T ->
			  'ok'
'dec'/1 =
    %% Line 2088
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      'infinity'
	  %% Line 2089
	  <N> when 'true' ->
	      call 'erlang':'-'
		  (N, 1)
	end
'send_again'/1 =
    %% Line 2091
    fun (_cor0) ->
	let <Me> =
	    %% Line 2092
	    call 'erlang':'self'
		()
	in  let <_cor2> =
		%% Line 2093
		( fun () ->
		      apply 'timer'/2
			  (Me, _cor0)
		  -| [{'id',{0,0,'-send_again/1-fun-0-'}}] )
	    in  %% Line 2093
		call 'erlang':'spawn'
		    (_cor2)
'timer'/2 =
    %% Line 2095
    fun (_cor1,_cor0) ->
	do  %% Line 2096
	    apply 'random_sleep'/1
		(5)
	    %% Line 2097
	    call 'erlang':'!'
		(_cor1, _cor0)
'change_our_node_name'/2 =
    %% Line 2099
    fun (_cor1,_cor0) ->
	let <S1> =
	    %% Line 2100
	    apply 'trace_message'/3
		(_cor0, {'new_node_name',_cor1}, [])
	in  %% Line 2101
	    case S1 of
	      <{'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		  call 'erlang':'setelement'
		      (7, S1, _cor1)
	      ( <_cor17> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','state'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'trace_message'/3 =
    %% Line 2103
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,'no_trace',_cor20},_X_M,_X_X> when 'true' ->
	      %% Line 2104
	      S
	  %% Line 2105
	  <S,M,X> when 'true' ->
	      let <_cor3> =
		  %% Line 2106
		  apply 'trace_message'/2
		      (M, X)
	      in  %% Line 2106
		  ( case S of
		      ( <( {'state',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec105,_cor29}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec103> =
				[_cor3|_rec105]
			    in  call 'erlang':'setelement'
				    (10, S, _rec103)
			-| ['compiler_generated'] )
		      ( <_cor30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'trace_message'/2 =
    %% Line 2108
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2109
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		%% Line 2109
		call 'erlang':'now'
		    ()
	    in  let <_cor2> =
		    %% Line 2109
		    call 'erlang':'nodes'
			()
		in  %% Line 2109
		    {_cor4,_cor3,_cor1,_cor2,_cor0}
'start_sync'/2 =
    %% Line 2118
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2119
	    ( fun () ->
		  apply 'sync_init'/2
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-start_sync/2-fun-0-'}}] )
	in  %% Line 2119
	    call 'erlang':'spawn_link'
		(_cor2)
'sync_init'/2 =
    %% Line 2121
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2122
	    ( fun (_cor2) ->
		  call 'erlang':'monitor_node'
		      (_cor2, 'true')
	      -| [{'id',{0,0,'-sync_init/2-fun-0-'}}] )
	in  do  %% Line 2122
		call 'lists':'foreach'
		    (_cor4, _cor1)
		%% Line 2123
		apply 'sync_loop'/2
		    (_cor1, _cor0)
'sync_loop'/2 =
    %% Line 2125
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],From> when 'true' ->
	      %% Line 2126
	      call 'gen_server':'reply'
		  (From, 'ok')
	  %% Line 2127
	  <Nodes,From> when 'true' ->
	      %% Line 2128
	      receive
		%% Line 2129
		<{'nodedown',Node}> when 'true' ->
		    do  %% Line 2130
			call 'erlang':'monitor_node'
			    (Node, 'false')
			let <_cor2> =
			    %% Line 2131
			    call 'lists':'delete'
				(Node, Nodes)
			in  %% Line 2131
			    apply 'sync_loop'/2
				(_cor2, From)
		%% Line 2132
		<{'synced',SNodes}> when 'true' ->
		    let <_cor5> =
			%% Line 2133
			( fun (_cor3) ->
			      call 'erlang':'monitor_node'
				  (_cor3, 'false')
			  -| [{'id',{0,0,'-sync_loop/2-fun-0-'}}] )
		    in  do  %% Line 2133
			    call 'lists':'foreach'
				(_cor5, SNodes)
			    let <_cor6> =
				%% Line 2134
				call 'erlang':'--'
				    (Nodes, SNodes)
			    in  %% Line 2134
				apply 'sync_loop'/2
				    (_cor6, From)
	      after 'infinity' ->
		'true'
	end
'check_sync_nodes'/0 =
    %% Line 2140
    fun () ->
	%% Line 2141
	case apply 'get_own_nodes'/0
		 () of
	  %% Line 2142
	  <{'ok','all'}> when 'true' ->
	      %% Line 2143
	      call 'erlang':'nodes'
		  ()
	  %% Line 2144
	  <{'ok',NodesNG}> when 'true' ->
	      let <_cor0> =
		  %% Line 2147
		  call 'erlang':'nodes'
		      ()
	      in  %% Line 2147
		  apply 'intersection'/2
		      (_cor0, NodesNG)
	  %% Line 2148
	  <Error = {'error',_cor2}> when 'true' ->
	      %% Line 2149
	      Error
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'check_sync_nodes'/1 =
    %% Line 2152
    fun (_cor0) ->
	%% Line 2153
	case apply 'get_own_nodes'/0
		 () of
	  %% Line 2154
	  <{'ok','all'}> when 'true' ->
	      _cor0
	  %% Line 2156
	  <{'ok',NodesNG}> when 'true' ->
	      let <_cor1> =
		  %% Line 2159
		  call 'erlang':'nodes'
		      ()
	      in  let <OwnNodeGroup> =
		      %% Line 2159
		      apply 'intersection'/2
			  (_cor1, NodesNG)
		  in  let <_cor3> =
			  %% Line 2160
			  call 'erlang':'node'
			      ()
		      in  let <IllegalSyncNodes> =
			      %% Line 2160
			      call 'erlang':'--'
				  (_cor0, [_cor3|OwnNodeGroup])
			  in  %% Line 2161
			      case IllegalSyncNodes of
				%% Line 2162
				<[]> when 'true' ->
				    _cor0
				%% Line 2163
				<_cor8> when 'true' ->
				    {'error',{[84|[114|[121|[105|[110|[103|[32|[116|[111|[32|[115|[121|[110|[99|[32|[110|[111|[100|[101|[115|[32|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[111|[119|[110|[32|[103|[108|[111|[98|[97|[108|[32|[103|[114|[111|[117|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 2164
																																														IllegalSyncNodes}}
			      end
	  %% Line 2166
	  <Error = {'error',_cor9}> when 'true' ->
	      %% Line 2167
	      Error
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'get_own_nodes'/0 =
    %% Line 2170
    fun () ->
	%% Line 2171
	case call 'global_group':'get_own_nodes_with_errors'
		 () of
	  %% Line 2172
	  <{'error',Error}> when 'true' ->
	      %% Line 2173
	      {'error',{[103|[108|[111|[98|[97|[108|[95|[103|[114|[111|[117|[112|[115|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Error}}
	  %% Line 2174
	  <OkTup> when 'true' ->
	      %% Line 2175
	      OkTup
	end
'start_the_registrar'/0 =
    %% Line 2183
    fun () ->
	let <_cor0> =
	    %% Line 2184
	    ( fun () ->
		  apply 'loop_the_registrar'/0
		      ()
	      -| [{'id',{0,0,'-start_the_registrar/0-fun-0-'}}] )
	in  %% Line 2184
	    call 'erlang':'spawn_link'
		(_cor0)
'loop_the_registrar'/0 =
    %% Line 2186
    fun () ->
	do  %% Line 2187
	    receive
	      %% Line 2188
	      <{'trans_all_known',Fun,From}> when 'true' ->
		  let <_cor0> =
		      %% Line 2190
		      apply 'trans_all_known'/1
			  (Fun)
		  in  %% Line 2190
		      call 'gen_server':'reply'
			  (From, _cor0)
	      %% Line 2191
	      <Other> when 'true' ->
		  %% Line 2192
		  apply 'unexpected_message'/2
		      (Other, 'register')
	    after 'infinity' ->
	      'ok'
	    %% Line 2194
	    apply 'loop_the_registrar'/0
		()
'unexpected_message'/2 =
    %% Line 2196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',_X_Pid,_X_Reason},_X_What> when 'true' ->
	      %% Line 2198
	      'ok'
	  %% Line 2199
	  <Message,What> when 'true' ->
	      %% Line 2200
	      call 'error_logger':'warning_msg'
		  ([84|[104|[101|[32|[103|[108|[111|[98|[97|[108|[95|[110|[97|[109|[101|[95|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[112|[114|[111|[99|[101|[115|[115|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[97|[110|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[10|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2202
																																																			     [What|[Message|[]]])
	end
'do_monitor'/1 =
    %% Line 2208
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2209
	    call 'erlang':'node'
		(_cor0)
	in  let <_cor2> =
		%% Line 2209
		call 'erlang':'node'
		    ()
	    in  let <_cor7> =
		    %% Line 2209
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (_cor3,
				     _cor2) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      let <_cor5> =
				  call 'erlang':'node'
				      (_cor0)
			      in  let <_cor4> =
				      call 'erlang':'nodes'
					  ()
				  in  call 'lists':'member'
					  (_cor5, _cor4)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		in  %% Line 2209
		    case _cor7 of
		      %% Line 2210
		      <'true'> when 'true' ->
			  let <_cor8> =
			      %% Line 2212
			      call 'erlang':'monitor'
				  ('process', _cor0)
			  in  %% Line 2212
			      {_cor0,_cor8}
		      %% Line 2213
		      <'false'> when 'true' ->
			  let <F> =
			      %% Line 2214
			      ( fun () ->
				    let <Ref> =
					%% Line 2215
					call 'erlang':'monitor'
					    ('process', _cor0)
				    in  %% Line 2216
					receive
					  %% Line 2217
					  <{'DOWN',_cor13,'process',_cor14,_X_Info}>
					      when let <_cor15> =
						    call 'erlang':'=:='
							(_cor13, Ref)
						in  let <_cor16> =
							call 'erlang':'=:='
							    (_cor14, _cor0)
						    in  call 'erlang':'and'
							    (_cor15, _cor16) ->
					      %% Line 2218
					      call 'erlang':'exit'
						  ('normal')
					after 'infinity' ->
					  'true'
				-| [{'id',{0,0,'-do_monitor/1-fun-0-'}}] )
			  in  %% Line 2221
			      call 'erlang':'spawn_monitor'
				  (F)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
'intersection'/2 =
    %% Line 2224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,[]> when 'true' ->
	      %% Line 2225
	      []
	  %% Line 2226
	  <L1,L2> when 'true' ->
	      let <_cor2> =
		  %% Line 2227
		  call 'erlang':'--'
		      (L1, L2)
	      in  %% Line 2227
		  call 'erlang':'--'
		      (L1, _cor2)
	end
'allow_tuple_fun'/1 =
    %% Line 2230
    fun (_cor0) ->
	case _cor0 of
	  <{M,F}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2231
	      call 'erlang':'make_fun'
		  (M, F, 3)
	  %% Line 2232
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0,
		     3) ->
	      %% Line 2233
	      Fun
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'allow_tuple_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('global')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('global', _cor0)
end