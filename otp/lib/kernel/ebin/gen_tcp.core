module 'gen_tcp' ['accept'/1,
		  'accept'/2,
		  'close'/1,
		  'connect'/3,
		  'connect'/4,
		  'controlling_process'/2,
		  'fdopen'/2,
		  'listen'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'recv'/2,
		  'recv'/3,
		  'send'/2,
		  'shutdown'/2,
		  'unrecv'/2]
    attributes [%% Line 374
		'type' =
		    %% Line 374
		    [{{'record','connect_opts'},[{'record_field',376,{'atom',376,'ifaddr'},{'atom',376,'any'}}|[{'record_field',377,{'atom',377,'port'},{'integer',377,0}}|[{'record_field',378,{'atom',378,'fd'},{'op',378,'-',{'integer',378,1}}}|[{'record_field',379,{'atom',379,'opts'},{'nil',379}}]]]],[]}],
		%% Line 382
		'type' =
		    %% Line 382
		    [{{'record','listen_opts'},[{'record_field',384,{'atom',384,'ifaddr'},{'atom',384,'any'}}|[{'record_field',385,{'atom',385,'port'},{'integer',385,0}}|[{'record_field',386,{'atom',386,'backlog'},{'integer',386,5}}|[{'record_field',387,{'atom',387,'fd'},{'op',387,'-',{'integer',387,1}}}|[{'record_field',388,{'atom',388,'opts'},{'nil',388}}]]]]],[]}],
		%% Line 392
		'type' =
		    %% Line 392
		    [{{'record','udp_opts'},[{'record_field',394,{'atom',394,'ifaddr'},{'atom',394,'any'}}|[{'record_field',395,{'atom',395,'port'},{'integer',395,0}}|[{'record_field',396,{'atom',396,'fd'},{'op',396,'-',{'integer',396,1}}}|[{'record_field',397,{'atom',397,'opts'},{'cons',397,{'tuple',397,[{'atom',397,'active'}|[{'atom',397,'true'}]]},{'nil',397}}}]]]],[]}],
		%% Line 402
		'type' =
		    %% Line 402
		    [{{'record','sctp_opts'},[{'record_field',404,{'atom',404,'ifaddr'}}|[{'record_field',405,{'atom',405,'port'},{'integer',405,0}}|[{'record_field',406,{'atom',406,'fd'},{'op',406,'-',{'integer',406,1}}}|[{'record_field',407,{'atom',407,'type'},{'atom',407,'seqpacket'}}|[{'record_field',408,{'atom',408,'opts'},{'cons',408,{'tuple',408,[{'atom',408,'mode'}|[{'atom',408,'binary'}]]},{'cons',409,{'tuple',409,[{'atom',409,'buffer'}|[{'integer',409,65536}]]},{'cons',410,{'tuple',410,[{'atom',410,'sndbuf'}|[{'integer',410,65536}]]},{'cons',411,{'tuple',411,[{'atom',411,'recbuf'}|[{'integer',411,1024}]]},{'cons',412,{'tuple',412,[{'atom',412,'sctp_events'}|[{'atom',412,'undefined'}]]},{'nil',414}}}}}}}]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'option',{'type',33,'union',[{'type',33,'tuple',[{'atom',33,'active'}|[{'type',33,'union',[{'atom',33,'true'}|[{'atom',33,'false'}|[{'atom',33,'once'}|[{'type',33,'range',[{'op',33,'-',{'integer',33,32768}}|[{'integer',33,32767}]]}]]]]}]]}|[{'type',34,'tuple',[{'atom',34,'buffer'}|[{'type',34,'non_neg_integer',[]}]]}|[{'type',35,'tuple',[{'atom',35,'delay_send'}|[{'type',35,'boolean',[]}]]}|[{'type',36,'tuple',[{'atom',36,'deliver'}|[{'type',36,'union',[{'atom',36,'port'}|[{'atom',36,'term'}]]}]]}|[{'type',37,'tuple',[{'atom',37,'dontroute'}|[{'type',37,'boolean',[]}]]}|[{'type',38,'tuple',[{'atom',38,'exit_on_close'}|[{'type',38,'boolean',[]}]]}|[{'type',39,'tuple',[{'atom',39,'header'}|[{'type',39,'non_neg_integer',[]}]]}|[{'type',40,'tuple',[{'atom',40,'high_msgq_watermark'}|[{'type',40,'pos_integer',[]}]]}|[{'type',41,'tuple',[{'atom',41,'high_watermark'}|[{'type',41,'non_neg_integer',[]}]]}|[{'type',42,'tuple',[{'atom',42,'keepalive'}|[{'type',42,'boolean',[]}]]}|[{'type',43,'tuple',[{'atom',43,'linger'}|[{'type',43,'tuple',[{'type',43,'boolean',[]}|[{'type',43,'non_neg_integer',[]}]]}]]}|[{'type',44,'tuple',[{'atom',44,'low_msgq_watermark'}|[{'type',44,'pos_integer',[]}]]}|[{'type',45,'tuple',[{'atom',45,'low_watermark'}|[{'type',45,'non_neg_integer',[]}]]}|[{'type',46,'tuple',[{'atom',46,'mode'}|[{'type',46,'union',[{'atom',46,'list'}|[{'atom',46,'binary'}]]}]]}|[{'atom',46,'list'}|[{'atom',46,'binary'}|[{'type',47,'tuple',[{'atom',47,'nodelay'}|[{'type',47,'boolean',[]}]]}|[{'type',48,'tuple',[{'atom',48,'packet'}|[{'type',49,'union',[{'integer',49,0}|[{'integer',49,1}|[{'integer',49,2}|[{'integer',49,4}|[{'atom',49,'raw'}|[{'atom',49,'sunrm'}|[{'atom',49,'asn1'}|[{'atom',50,'cdr'}|[{'atom',50,'fcgi'}|[{'atom',50,'line'}|[{'atom',50,'tpkt'}|[{'atom',50,'http'}|[{'atom',50,'httph'}|[{'atom',50,'http_bin'}|[{'atom',50,'httph_bin'}]]]]]]]]]]]]]]]}]]}|[{'type',51,'tuple',[{'atom',51,'packet_size'}|[{'type',51,'non_neg_integer',[]}]]}|[{'type',52,'tuple',[{'atom',52,'priority'}|[{'type',52,'non_neg_integer',[]}]]}|[{'type',53,'tuple',[{'atom',53,'raw'}|[{'ann_type',54,[{'var',54,'Protocol'}|[{'type',54,'non_neg_integer',[]}]]}|[{'ann_type',55,[{'var',55,'OptionNum'}|[{'type',55,'non_neg_integer',[]}]]}|[{'ann_type',56,[{'var',56,'ValueBin'}|[{'type',56,'binary',[]}]]}]]]]}|[{'type',57,'tuple',[{'atom',57,'recbuf'}|[{'type',57,'non_neg_integer',[]}]]}|[{'type',58,'tuple',[{'atom',58,'reuseaddr'}|[{'type',58,'boolean',[]}]]}|[{'type',59,'tuple',[{'atom',59,'send_timeout'}|[{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'infinity'}]]}]]}|[{'type',60,'tuple',[{'atom',60,'send_timeout_close'}|[{'type',60,'boolean',[]}]]}|[{'type',61,'tuple',[{'atom',61,'sndbuf'}|[{'type',61,'non_neg_integer',[]}]]}|[{'type',62,'tuple',[{'atom',62,'tos'}|[{'type',62,'non_neg_integer',[]}]]}|[{'type',63,'tuple',[{'atom',63,'ipv6_v6only'}|[{'type',63,'boolean',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'option_name',{'type',65,'union',[{'atom',65,'active'}|[{'atom',66,'buffer'}|[{'atom',67,'delay_send'}|[{'atom',68,'deliver'}|[{'atom',69,'dontroute'}|[{'atom',70,'exit_on_close'}|[{'atom',71,'header'}|[{'atom',72,'high_msgq_watermark'}|[{'atom',73,'high_watermark'}|[{'atom',74,'keepalive'}|[{'atom',75,'linger'}|[{'atom',76,'low_msgq_watermark'}|[{'atom',77,'low_watermark'}|[{'atom',78,'mode'}|[{'atom',79,'nodelay'}|[{'atom',80,'packet'}|[{'atom',81,'packet_size'}|[{'atom',82,'priority'}|[{'type',83,'tuple',[{'atom',83,'raw'}|[{'ann_type',84,[{'var',84,'Protocol'}|[{'type',84,'non_neg_integer',[]}]]}|[{'ann_type',85,[{'var',85,'OptionNum'}|[{'type',85,'non_neg_integer',[]}]]}|[{'ann_type',86,[{'var',86,'ValueSpec'}|[{'type',86,'union',[{'paren_type',86,[{'ann_type',86,[{'var',86,'ValueSize'}|[{'type',86,'non_neg_integer',[]}]]}]}|[{'paren_type',87,[{'ann_type',87,[{'var',87,'ValueBin'}|[{'type',87,'binary',[]}]]}]}]]}]]}]]]]}|[{'atom',88,'recbuf'}|[{'atom',89,'reuseaddr'}|[{'atom',90,'send_timeout'}|[{'atom',91,'send_timeout_close'}|[{'atom',92,'sndbuf'}|[{'atom',93,'tos'}|[{'atom',94,'ipv6_v6only'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'connect_option',{'type',96,'union',[{'type',96,'tuple',[{'atom',96,'ip'}|[{'remote_type',96,[{'atom',96,'inet'}|[{'atom',96,'ip_address'}|[[]]]]}]]}|[{'type',97,'tuple',[{'atom',97,'fd'}|[{'ann_type',97,[{'var',97,'Fd'}|[{'type',97,'non_neg_integer',[]}]]}]]}|[{'type',98,'tuple',[{'atom',98,'ifaddr'}|[{'remote_type',98,[{'atom',98,'inet'}|[{'atom',98,'ip_address'}|[[]]]]}]]}|[{'remote_type',99,[{'atom',99,'inet'}|[{'atom',99,'address_family'}|[[]]]]}|[{'type',100,'tuple',[{'atom',100,'port'}|[{'remote_type',100,[{'atom',100,'inet'}|[{'atom',100,'port_number'}|[[]]]]}]]}|[{'type',101,'tuple',[{'atom',101,'tcp_module'}|[{'type',101,'module',[]}]]}|[{'type',102,'option',[]}]]]]]]]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'listen_option',{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'ip'}|[{'remote_type',104,[{'atom',104,'inet'}|[{'atom',104,'ip_address'}|[[]]]]}]]}|[{'type',105,'tuple',[{'atom',105,'fd'}|[{'ann_type',105,[{'var',105,'Fd'}|[{'type',105,'non_neg_integer',[]}]]}]]}|[{'type',106,'tuple',[{'atom',106,'ifaddr'}|[{'remote_type',106,[{'atom',106,'inet'}|[{'atom',106,'ip_address'}|[[]]]]}]]}|[{'remote_type',107,[{'atom',107,'inet'}|[{'atom',107,'address_family'}|[[]]]]}|[{'type',108,'tuple',[{'atom',108,'port'}|[{'remote_type',108,[{'atom',108,'inet'}|[{'atom',108,'port_number'}|[[]]]]}]]}|[{'type',109,'tuple',[{'atom',109,'backlog'}|[{'ann_type',109,[{'var',109,'B'}|[{'type',109,'non_neg_integer',[]}]]}]]}|[{'type',110,'tuple',[{'atom',110,'tcp_module'}|[{'type',110,'module',[]}]]}|[{'type',111,'option',[]}]]]]]]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'socket',{'type',112,'port',[]},[]}],
		%% Line 114
		'export_type' =
		    %% Line 114
		    [{'option',0}|[{'option_name',0}|[{'connect_option',0}|[{'listen_option',0}]]]],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'connect',3},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'Address'}|[{'var',120,'Port'}|[{'var',120,'Options'}]]]}|[{'type',120,'union',[{'type',120,'tuple',[{'atom',120,'ok'}|[{'var',120,'Socket'}]]}|[{'type',120,'tuple',[{'atom',120,'error'}|[{'var',120,'Reason'}]]}]]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Address'}|[{'type',121,'union',[{'remote_type',121,[{'atom',121,'inet'}|[{'atom',121,'ip_address'}|[[]]]]}|[{'remote_type',121,[{'atom',121,'inet'}|[{'atom',121,'hostname'}|[[]]]]}]]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Port'}|[{'remote_type',122,[{'atom',122,'inet'}|[{'atom',122,'port_number'}|[[]]]]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Options'}|[{'type',123,'list',[{'type',123,'connect_option',[]}]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Socket'}|[{'type',124,'socket',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Reason'}|[{'remote_type',125,[{'atom',125,'inet'}|[{'atom',125,'posix'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'connect',4},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Address'}|[{'var',130,'Port'}|[{'var',130,'Options'}|[{'var',130,'Timeout'}]]]]}|[{'type',131,'union',[{'type',131,'tuple',[{'atom',131,'ok'}|[{'var',131,'Socket'}]]}|[{'type',131,'tuple',[{'atom',131,'error'}|[{'var',131,'Reason'}]]}]]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Address'}|[{'type',132,'union',[{'remote_type',132,[{'atom',132,'inet'}|[{'atom',132,'ip_address'}|[[]]]]}|[{'remote_type',132,[{'atom',132,'inet'}|[{'atom',132,'hostname'}|[[]]]]}]]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Port'}|[{'remote_type',133,[{'atom',133,'inet'}|[{'atom',133,'port_number'}|[[]]]]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Options'}|[{'type',134,'list',[{'type',134,'connect_option',[]}]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Timeout'}|[{'type',135,'timeout',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Socket'}|[{'type',136,'socket',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Reason'}|[{'remote_type',137,[{'atom',137,'inet'}|[{'atom',137,'posix'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'listen',2},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Port'}|[{'var',178,'Options'}]]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'var',178,'ListenSocket'}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'var',178,'Reason'}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Port'}|[{'remote_type',179,[{'atom',179,'inet'}|[{'atom',179,'port_number'}|[[]]]]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Options'}|[{'type',180,'list',[{'type',180,'listen_option',[]}]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'ListenSocket'}|[{'type',181,'socket',[]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Reason'}|[{'type',182,'union',[{'atom',182,'system_limit'}|[{'remote_type',182,[{'atom',182,'inet'}|[{'atom',182,'posix'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'accept',1},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'ListenSocket'}]}|[{'type',198,'union',[{'type',198,'tuple',[{'atom',198,'ok'}|[{'var',198,'Socket'}]]}|[{'type',198,'tuple',[{'atom',198,'error'}|[{'var',198,'Reason'}]]}]]}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'ListenSocket'}|[{'type',199,'socket',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Socket'}|[{'type',200,'socket',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Reason'}|[{'type',201,'union',[{'atom',201,'closed'}|[{'atom',201,'timeout'}|[{'atom',201,'system_limit'}|[{'remote_type',201,[{'atom',201,'inet'}|[{'atom',201,'posix'}|[[]]]]}]]]]}]]]]}]]]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'accept',2},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'ListenSocket'}|[{'var',211,'Timeout'}]]}|[{'type',211,'union',[{'type',211,'tuple',[{'atom',211,'ok'}|[{'var',211,'Socket'}]]}|[{'type',211,'tuple',[{'atom',211,'error'}|[{'var',211,'Reason'}]]}]]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'ListenSocket'}|[{'type',212,'socket',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Timeout'}|[{'type',213,'timeout',[]}]]]]}|[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Socket'}|[{'type',214,'socket',[]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Reason'}|[{'type',215,'union',[{'atom',215,'closed'}|[{'atom',215,'timeout'}|[{'atom',215,'system_limit'}|[{'remote_type',215,[{'atom',215,'inet'}|[{'atom',215,'posix'}|[[]]]]}]]]]}]]]]}]]]]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'shutdown',2},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'Socket'}|[{'var',229,'How'}]]}|[{'type',229,'union',[{'atom',229,'ok'}|[{'type',229,'tuple',[{'atom',229,'error'}|[{'var',229,'Reason'}]]}]]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Socket'}|[{'type',230,'socket',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'How'}|[{'type',231,'union',[{'atom',231,'read'}|[{'atom',231,'write'}|[{'atom',231,'read_write'}]]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Reason'}|[{'remote_type',232,[{'atom',232,'inet'}|[{'atom',232,'posix'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'close',1},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'Socket'}]}|[{'atom',246,'ok'}]]}|[[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Socket'}|[{'type',247,'socket',[]}]]]]}]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'send',2},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'Socket'}|[{'var',256,'Packet'}]]}|[{'type',256,'union',[{'atom',256,'ok'}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'var',256,'Reason'}]]}]]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Socket'}|[{'type',257,'socket',[]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Packet'}|[{'type',258,'iodata',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Reason'}|[{'type',259,'union',[{'atom',259,'closed'}|[{'remote_type',259,[{'atom',259,'inet'}|[{'atom',259,'posix'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 273
		'spec' =
		    %% Line 273
		    [{{'recv',2},[{'type',273,'bounded_fun',[{'type',273,'fun',[{'type',273,'product',[{'var',273,'Socket'}|[{'var',273,'Length'}]]}|[{'type',273,'union',[{'type',273,'tuple',[{'atom',273,'ok'}|[{'var',273,'Packet'}]]}|[{'type',273,'tuple',[{'atom',273,'error'}|[{'var',273,'Reason'}]]}]]}]]}|[[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Socket'}|[{'type',274,'socket',[]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'Length'}|[{'type',275,'non_neg_integer',[]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Packet'}|[{'type',276,'union',[{'type',276,'string',[]}|[{'type',276,'binary',[]}|[{'var',276,'HttpPacket'}]]]}]]]]}|[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Reason'}|[{'type',277,'union',[{'atom',277,'closed'}|[{'remote_type',277,[{'atom',277,'inet'}|[{'atom',277,'posix'}|[[]]]]}]]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'HttpPacket'}|[{'type',278,'term',[]}]]]]}]]]]]]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'recv',3},[{'type',288,'bounded_fun',[{'type',288,'fun',[{'type',288,'product',[{'var',288,'Socket'}|[{'var',288,'Length'}|[{'var',288,'Timeout'}]]]}|[{'type',288,'union',[{'type',288,'tuple',[{'atom',288,'ok'}|[{'var',288,'Packet'}]]}|[{'type',288,'tuple',[{'atom',288,'error'}|[{'var',288,'Reason'}]]}]]}]]}|[[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Socket'}|[{'type',289,'socket',[]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Length'}|[{'type',290,'non_neg_integer',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Timeout'}|[{'type',291,'timeout',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Packet'}|[{'type',292,'union',[{'type',292,'string',[]}|[{'type',292,'binary',[]}|[{'var',292,'HttpPacket'}]]]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Reason'}|[{'type',293,'union',[{'atom',293,'closed'}|[{'remote_type',293,[{'atom',293,'inet'}|[{'atom',293,'posix'}|[[]]]]}]]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'HttpPacket'}|[{'type',294,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'controlling_process',2},[{'type',316,'bounded_fun',[{'type',316,'fun',[{'type',316,'product',[{'var',316,'Socket'}|[{'var',316,'Pid'}]]}|[{'type',316,'union',[{'atom',316,'ok'}|[{'type',316,'tuple',[{'atom',316,'error'}|[{'var',316,'Reason'}]]}]]}]]}|[[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Socket'}|[{'type',317,'socket',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Pid'}|[{'type',318,'pid',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Reason'}|[{'type',319,'union',[{'atom',319,'closed'}|[{'atom',319,'not_owner'}|[{'remote_type',319,[{'atom',319,'inet'}|[{'atom',319,'posix'}|[[]]]]}]]]}]]]]}]]]]]}]}]]
'connect'/3 =
    %% Line 127
    fun (_cor2,_cor1,_cor0) ->
	%% Line 128
	apply 'connect'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'connect'/4 =
    %% Line 139
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Timer> =
	    %% Line 140
	    call 'inet':'start_timer'
		(_cor0)
	in  let <_cor5> =
		catch
		    %% Line 141
		    apply 'connect1'/4
			(_cor3, _cor2, _cor1, Timer)
	    in  let <_X_> =
		    %% Line 142
		    ( call 'inet':'stop_timer'
			  (Timer)
		      -| ['result_not_wanted'] )
		in  %% Line 143
		    case _cor5 of
		      %% Line 144
		      <{'ok',S}> when 'true' ->
			  {'ok',S}
		      %% Line 145
		      <{'error','einval'}> when 'true' ->
			  call 'erlang':'exit'
			      ('badarg')
		      %% Line 146
		      <{'EXIT',Reason}> when 'true' ->
			  call 'erlang':'exit'
			      (Reason)
		      %% Line 147
		      <Error> when 'true' ->
			  Error
		    end
'connect1'/4 =
    %% Line 150
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Mod> =
	    %% Line 151
	    apply 'mod'/2
		(_cor1, _cor3)
	in  %% Line 152
	    case call Mod:'getaddrs'
		     (_cor3, _cor0) of
	      %% Line 153
	      <{'ok',IPs}> when 'true' ->
		  %% Line 154
		  case call Mod:'getserv'
			   (_cor2) of
		    %% Line 155
		    <{'ok',TP}> when 'true' ->
			apply 'try_connect'/6
			    (IPs, TP, _cor1, _cor0, Mod, {'error','einval'})
		    %% Line 156
		    <Error> when 'true' ->
			Error
		  end
	      %% Line 158
	      <Error> when 'true' ->
		  Error
	    end
'try_connect'/6 =
    %% Line 161
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[IP|IPs],Port,Opts,Timer,Mod,_cor14> when 'true' ->
	      let <Time> =
		  %% Line 162
		  call 'inet':'timeout'
		      (Timer)
	      in  %% Line 163
		  case call Mod:'connect'
			   (IP, Port, Opts, Time) of
		    %% Line 164
		    <{'ok',S}> when 'true' ->
			{'ok',S}
		    %% Line 165
		    <{'error','einval'}> when 'true' ->
			{'error','einval'}
		    %% Line 166
		    <{'error','timeout'}> when 'true' ->
			{'error','timeout'}
		    %% Line 167
		    <Err1> when 'true' ->
			apply 'try_connect'/6
			    (IPs, Port, Opts, Timer, Mod, Err1)
		  end
	  %% Line 169
	  <[],_X_Port,_X_Opts,_X_Timer,_X_Mod,Err> when 'true' ->
	      %% Line 170
	      Err
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'try_connect',6}}] )
	    -| ['compiler_generated'] )
	end
'listen'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	let <Mod> =
	    %% Line 185
	    apply 'mod'/2
		(_cor0, 'undefined')
	in  %% Line 186
	    case call Mod:'getserv'
		     (_cor1) of
	      %% Line 187
	      <{'ok',TP}> when 'true' ->
		  %% Line 188
		  call Mod:'listen'
		      (TP, _cor0)
	      %% Line 189
	      <{'error','einval'}> when 'true' ->
		  %% Line 190
		  call 'erlang':'exit'
		      ('badarg')
	      %% Line 191
	      <Other> when 'true' ->
		  Other
	    end
'accept'/1 =
    %% Line 203
    fun (_cor0) ->
	%% Line 204
	case call 'inet_db':'lookup_socket'
		 (_cor0) of
	  %% Line 205
	  <{'ok',Mod}> when 'true' ->
	      %% Line 206
	      call Mod:'accept'
		  (_cor0)
	  %% Line 207
	  <Error> when 'true' ->
	      %% Line 208
	      Error
	end
'accept'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Time>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 218
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 219
		<{'ok',Mod}> when 'true' ->
		    %% Line 220
		    call Mod:'accept'
			(S, Time)
		%% Line 221
		<Error> when 'true' ->
		    %% Line 222
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'accept',2}}] )
	    -| ['compiler_generated'] )
	end
'shutdown'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,How>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 235
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 236
		<{'ok',Mod}> when 'true' ->
		    %% Line 237
		    call Mod:'shutdown'
			(S, How)
		%% Line 238
		<Error> when 'true' ->
		    %% Line 239
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'shutdown',2}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 249
    fun (_cor0) ->
	%% Line 250
	call 'inet':'tcp_close'
	    (_cor0)
'send'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Packet>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 262
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 263
		<{'ok',Mod}> when 'true' ->
		    %% Line 264
		    call Mod:'send'
			(S, Packet)
		%% Line 265
		<Error> when 'true' ->
		    %% Line 266
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'send',2}}] )
	    -| ['compiler_generated'] )
	end
'recv'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Length>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 281
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 282
		<{'ok',Mod}> when 'true' ->
		    %% Line 283
		    call Mod:'recv'
			(S, Length)
		%% Line 284
		<Error> when 'true' ->
		    %% Line 285
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'recv',2}}] )
	    -| ['compiler_generated'] )
	end
'recv'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Length,Time>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 297
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 298
		<{'ok',Mod}> when 'true' ->
		    %% Line 299
		    call Mod:'recv'
			(S, Length, Time)
		%% Line 300
		<Error> when 'true' ->
		    %% Line 301
		    Error
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'recv',3}}] )
	    -| ['compiler_generated'] )
	end
'unrecv'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Data>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 305
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 306
		<{'ok',Mod}> when 'true' ->
		    %% Line 307
		    call Mod:'unrecv'
			(S, Data)
		%% Line 308
		<Error> when 'true' ->
		    %% Line 309
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'unrecv',2}}] )
	    -| ['compiler_generated'] )
	end
'controlling_process'/2 =
    %% Line 321
    fun (_cor1,_cor0) ->
	%% Line 322
	case call 'inet_db':'lookup_socket'
		 (_cor1) of
	  %% Line 323
	  <{'ok',_X_Mod}> when 'true' ->
	      %% Line 324
	      call 'inet':'tcp_controlling_process'
		  (_cor1, _cor0)
	  %% Line 325
	  <Error> when 'true' ->
	      %% Line 326
	      Error
	end
'fdopen'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	let <Mod> =
	    %% Line 335
	    apply 'mod'/2
		(_cor0, 'undefined')
	in  %% Line 336
	    call Mod:'fdopen'
		(_cor1, _cor0)
'mod'/1 =
    %% Line 339
    fun (_cor0) ->
	%% Line 340
	case call 'inet_db':'tcp_module'
		 () of
	  %% Line 341
	  <'inet_tcp'>
	      when try
		    let <_cor1> =
			call 'erlang':'tuple_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 342
	      'inet6_tcp'
	  %% Line 343
	  <Mod> when 'true' ->
	      %% Line 344
	      Mod
	end
'mod'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'tcp_module',Mod}|_cor4],_X_Address> when 'true' ->
	      %% Line 349
	      Mod
	  %% Line 350
	  <['inet'|_cor5],_X_Address> when 'true' ->
	      %% Line 351
	      'inet_tcp'
	  %% Line 352
	  <['inet6'|_cor6],_X_Address> when 'true' ->
	      %% Line 353
	      'inet6_tcp'
	  %% Line 354
	  <[{'ip',Address}|Opts],_cor7> when 'true' ->
	      %% Line 355
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 356
	  <[{'ifaddr',Address}|Opts],_cor8> when 'true' ->
	      %% Line 357
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 358
	  <[_cor9|Opts],Address> when 'true' ->
	      %% Line 359
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 360
	  <[],Address> when 'true' ->
	      %% Line 361
	      apply 'mod'/1
		  (Address)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mod',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_tcp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gen_tcp', _cor0)
end