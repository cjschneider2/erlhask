module 'code_server' ['call'/2,
		      'error_msg'/2,
		      'info_msg'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'start_link'/1,
		      'system_code_change'/4,
		      'system_continue'/3,
		      'system_terminate'/4]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','state'},[{'record_field',37,{'atom',37,'supervisor'}}|[{'record_field',38,{'atom',38,'root'}}|[{'record_field',39,{'atom',39,'path'}}|[{'record_field',40,{'atom',40,'moddb'}}|[{'record_field',41,{'atom',41,'namedb'}}|[{'record_field',42,{'atom',42,'cache'},{'atom',42,'no_cache'}}|[{'record_field',43,{'atom',43,'mode'},{'atom',43,'interactive'}}|[{'record_field',44,{'atom',44,'on_load'},{'nil',44}}]]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'state',{'type',45,'record',[{'atom',45,'state'}]},[]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'system_code_change',4},[{'type',232,'fun',[{'type',232,'product',[{'type',232,'state',[]}|[{'type',232,'module',[]}|[{'type',232,'term',[]}|[{'type',232,'term',[]}]]]]}|[{'type',232,'tuple',[{'atom',232,'ok'}|[{'type',232,'state',[]}]]}]]}]}],
		%% Line 1483
		'type' =
		    %% Line 1483
		    [{{'record','cpc_static'},[{'record_field',1483,{'atom',1483,'hard'}}|[{'record_field',1483,{'atom',1483,'module'}}|[{'record_field',1483,{'atom',1483,'tag'}}]]],[]}],
		%% Line 1485
		'type' =
		    %% Line 1485
		    [{{'record','cpc_kill'},[{'record_field',1485,{'atom',1485,'outstanding'},{'nil',1485}}|[{'record_field',1486,{'atom',1486,'no_outstanding'},{'integer',1486,0}}|[{'record_field',1487,{'atom',1487,'waiting'},{'nil',1487}}|[{'record_field',1488,{'atom',1488,'killed'},{'atom',1488,'false'}}]]]],[]}]]
'start_link'/1 =
    %% Line 47
    fun (_cor0) ->
	let <Ref> =
	    %% Line 48
	    call 'erlang':'make_ref'
		()
	in  let <Parent> =
		%% Line 49
		call 'erlang':'self'
		    ()
	    in  let <Init> =
		    %% Line 50
		    ( fun () ->
			  apply 'init'/3
			      (Ref, Parent, _cor0)
		      -| [{'id',{0,0,'-start_link/1-fun-0-'}}] )
		in  do  %% Line 51
			call 'erlang':'spawn_link'
			    (Init)
			%% Line 52
			receive
			  %% Line 53
			  <{_cor5,Res}>
			      when call 'erlang':'=:='
				    (_cor5,
				     Ref) ->
			      Res
			after 'infinity' ->
			  'true'
'init'/3 =
    %% Line 61
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ref,Parent,[Root|[Mode0|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 62
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 62
		      call 'erlang':'register'
			  ('code_server', _cor3)
		      do  %% Line 63
			  call 'erlang':'process_flag'
			      ('trap_exit', 'true')
			  let <Db> =
			      %% Line 65
			      call 'ets':'new'
				  ('code', ['private'])
			  in  let <_cor8> =
				  %% Line 66
				  ( fun (_cor6) ->
					%% Line 68
					call 'ets':'insert'
					    (Db, [{_cor6,'preloaded'}|[{{'sticky',_cor6},'true'}|[]]])
				    -| [{'id',{0,0,'-init/3-fun-0-'}}] )
			      in  let <_cor5> =
				      %% Line 69
				      call 'erlang':'pre_loaded'
					  ()
				  in  do  %% Line 66
					  call 'lists':'foreach'
					      (_cor8, _cor5)
					  let <_cor9> =
					      %% Line 70
					      call 'init':'fetch_loaded'
						  ()
					  in  do  %% Line 70
						  call 'ets':'insert'
						      (Db, _cor9)
						  let <_cor11> =
						      %% Line 73
						      case Mode0 of
							%% Line 74
							<'minimal'> when 'true' ->
							    'interactive'
							%% Line 75
							<_cor34> when 'true' ->
							    Mode0
						      end
						  in  let <_cor19> =
							  %% Line 79
							  case _cor11 of
							    %% Line 80
							    <'interactive'> when 'true' ->
								let <LibDir> =
								    %% Line 81
								    call 'filename':'append'
									(Root, [108|[105|[98]]])
								in  %% Line 82
								    case call 'erl_prim_loader':'list_dir'
									     (LibDir) of
								      <{'ok',Dirs}> when 'true' ->
									  %% Line 83
									  case apply 'make_path'/2
										   (LibDir, Dirs) of
									    <{Paths,_X_Libs}> when 'true' ->
										let <UserLibPaths> =
										    %% Line 84
										    apply 'get_user_lib_dirs'/0
											()
										in  let <_cor17> =
											%% Line 85
											call 'erlang':'++'
											    (UserLibPaths, Paths)
										    in  %% Line 85
											[[46]|_cor17]
									    ( <_cor15> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor15})
									      -| ['compiler_generated'] )
									  end
								      ( <_cor14> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor14})
									-| ['compiler_generated'] )
								    end
							    %% Line 86
							    <_cor35> when 'true' ->
								%% Line 87
								[]
							  end
						      in  let <Path> =
							      %% Line 90
							      apply 'add_loader_path'/2
								  (_cor19, _cor11)
							  in  let <_cor22> =
								  %% Line 94
								  apply 'init_namedb'/1
								      (Path)
							      in  let <State0> =
								      %% Line 91
								      {'state','undefined',Root,%% Line 92
												Path,%% Line 93
												     Db,_cor22,'no_cache',_cor11,[]}
								  in  let <_cor25> =
									  %% Line 98
									  case call 'init':'get_argument'
										   ('code_path_cache') of
									    %% Line 99
									    <{'ok',_cor36}> when 'true' ->
										%% Line 100
										apply 'create_cache'/1
										    (State0)
									    %% Line 101
									    <'error'> when 'true' ->
										%% Line 102
										State0
									    ( <_cor24> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor24})
									      -| ['compiler_generated'] )
									  end
								      in  do  %% Line 105
									      call 'erlang':'put'
										  ('any_native_code_loaded', 'false')
									      let <_cor27> =
										  %% Line 107
										  call 'erlang':'self'
										      ()
									      in  do  %% Line 107
										      call 'erlang':'!'
											  (Parent, {Ref,{'ok',_cor27}})
										      %% Line 108
										      case _cor25 of
											<{'state',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
											    let <_cor30> =
												call 'erlang':'setelement'
												    (2, _cor25, Parent)
											    in  apply 'loop'/1
												    (_cor30)
											( <_cor45> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','state'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'init',3}}] )
	    -| ['compiler_generated'] )
	end
'get_user_lib_dirs'/0 =
    %% Line 110
    fun () ->
	%% Line 111
	case call 'os':'getenv'
		 ([69|[82|[76|[95|[76|[73|[66|[83]]]]]]]]) of
	  %% Line 112
	  <LibDirs0>
	      when call 'erlang':'is_list'
		    (LibDirs0) ->
	      let <_cor1> =
		  %% Line 114
		  case call 'os':'type'
			   () of
		    %% Line 115
		    <{'win32',_cor5}> when 'true' ->
			59
		    %% Line 116
		    <_cor6> when 'true' ->
			58
		  end
	      in  let <LibDirs> =
		      %% Line 118
		      apply 'split_paths'/4
			  (LibDirs0, _cor1, [], [])
		  in  %% Line 119
		      apply 'get_user_lib_dirs_1'/1
			  (LibDirs)
	  %% Line 120
	  <'false'> when 'true' ->
	      %% Line 121
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'get_user_lib_dirs_1'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <[Dir|DirList]> when 'true' ->
	      %% Line 125
	      case call 'erl_prim_loader':'list_dir'
		       (Dir) of
		%% Line 126
		<{'ok',Dirs}> when 'true' ->
		    %% Line 127
		    case apply 'make_path'/2
			     (Dir, Dirs) of
		      <{Paths,_X_Libs}> when 'true' ->
			  let <_cor2> =
			      %% Line 130
			      apply 'get_user_lib_dirs_1'/1
				  (DirList)
			  in  %% Line 129
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor6) ->
					    case _cor6 of
					      <[P|_cor4]> when 'true' ->
						  let <_cor5> =
						      call 'filename':'basename'
							  (P)
						  in  ( case <> of
							  <>
							      when call 'erlang':'=:='
								    (_cor5,
								     [101|[98|[105|[110]]]]) ->
							      let <_cor7> =
								  apply 'lc$^0'/1
								      (_cor4)
							      in  ( [P|_cor7]
								    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								apply 'lc$^0'/1
								    (_cor4)
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
					      <[]> when 'true' ->
						  _cor2
					      ( <_cor6> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor6})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Paths)
				-| ['list_comprehension'] )
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 131
		<'error'> when 'true' ->
		    %% Line 132
		    apply 'get_user_lib_dirs_1'/1
			(DirList)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 134
	  <[]> when 'true' ->
	      []
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'get_user_lib_dirs_1',1}}] )
	    -| ['compiler_generated'] )
	end
'split_paths'/4 =
    %% Line 137
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[S|T],_cor10,Path,Paths>
	      when call 'erlang':'=:='
		    (_cor10,
		     S) ->
	      let <_cor4> =
		  %% Line 138
		  call 'lists':'reverse'
		      (Path)
	      in  %% Line 138
		  apply 'split_paths'/4
		      (T, S, [], [_cor4|Paths])
	  %% Line 139
	  <[C|T],S,Path,Paths> when 'true' ->
	      %% Line 140
	      apply 'split_paths'/4
		  (T, S, [C|Path], Paths)
	  %% Line 141
	  <[],_X_S,Path,Paths> when 'true' ->
	      let <_cor5> =
		  %% Line 142
		  call 'lists':'reverse'
		      (Path)
	      in  %% Line 142
		  call 'lists':'reverse'
		      (Paths, [_cor5|[]])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_paths',4}}] )
	    -| ['compiler_generated'] )
	end
'call'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 145
	    call 'erlang':'self'
		()
	in  do  %% Line 145
		call 'erlang':'!'
		    (_cor1, {'code_call',_cor2,_cor0})
		%% Line 146
		receive
		  %% Line 147
		  <{'code_server',Reply}> when 'true' ->
		      %% Line 148
		      Reply
		after 'infinity' ->
		  'true'
'reply'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	%% Line 152
	call 'erlang':'!'
	    (_cor1, {'code_server',_cor0})
'loop'/1 =
    %% Line 154
    fun (_cor0) ->
	case _cor0 of
	  <State0 = {'state',Supervisor,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 155
	      receive
		%% Line 156
		<{'code_call',Pid,Req}> when 'true' ->
		    %% Line 157
		    case apply 'handle_call'/3
			     (Req, {Pid,'call'}, State0) of
		      %% Line 158
		      <{'reply',Res,State}> when 'true' ->
			  let <_X_> =
			      %% Line 159
			      apply 'reply'/2
				  (Pid, Res)
			  in  %% Line 160
			      apply 'loop'/1
				  (State)
		      %% Line 161
		      <{'noreply',State}> when 'true' ->
			  %% Line 162
			  apply 'loop'/1
			      (State)
		      %% Line 163
		      <{'stop',Why,'stopped',State}> when 'true' ->
			  %% Line 164
			  apply 'system_terminate'/4
			      (Why, Supervisor, [], State)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 166
		<{'EXIT',_cor12,Reason}>
		    when call 'erlang':'=:='
			  (_cor12,
			   Supervisor) ->
		    %% Line 167
		    apply 'system_terminate'/4
			(Reason, Supervisor, [], State0)
		%% Line 168
		<{'system',From,Msg}> when 'true' ->
		    %% Line 169
		    apply 'handle_system_msg'/5
			('running', Msg, From, Supervisor, State0)
		%% Line 170
		<{'DOWN',Ref,'process',_cor13,Res}> when 'true' ->
		    let <State> =
			%% Line 171
			apply 'finish_on_load'/3
			    (Ref, Res, State0)
		    in  %% Line 172
			apply 'loop'/1
			    (State)
		%% Line 173
		<_X_Msg> when 'true' ->
		    %% Line 174
		    apply 'loop'/1
			(State0)
	      after 'infinity' ->
		'true'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'loop',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_system_msg'/5 =
    %% Line 180
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 181
	case apply 'do_sys_cmd'/4
		 (_cor4, _cor3, _cor1, _cor0) of
	  %% Line 182
	  <{'suspended',Reply,NMisc}> when 'true' ->
	      do  %% Line 183
		  apply 'gen_reply'/2
		      (_cor2, Reply)
		  %% Line 184
		  apply 'suspend_loop'/3
		      ('suspended', _cor1, NMisc)
	  %% Line 185
	  <{'running',Reply,NMisc}> when 'true' ->
	      do  %% Line 186
		  apply 'gen_reply'/2
		      (_cor2, Reply)
		  %% Line 187
		  apply 'system_continue'/3
		      (_cor1, [], NMisc)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'gen_reply'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{To,Tag},Reply> when 'true' ->
	      catch
		  %% Line 191
		  call 'erlang':'!'
		      (To, {Tag,Reply})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'gen_reply',2}}] )
	    -| ['compiler_generated'] )
	end
'suspend_loop'/3 =
    %% Line 197
    fun (_cor2,_cor1,_cor0) ->
	%% Line 198
	receive
	  %% Line 199
	  <{'system',From,Msg}> when 'true' ->
	      %% Line 200
	      apply 'handle_system_msg'/5
		  (_cor2, Msg, From, _cor1, _cor0)
	  %% Line 201
	  <{'EXIT',_cor6,Reason}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 202
	      apply 'system_terminate'/4
		  (Reason, _cor1, [], _cor0)
	after 'infinity' ->
	  'true'
'do_sys_cmd'/4 =
    %% Line 205
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor15,'suspend',_X_Parent,Misc> when 'true' ->
	      %% Line 206
	      {'suspended','ok',Misc}
	  %% Line 207
	  <_cor16,'resume',_X_Parent,Misc> when 'true' ->
	      %% Line 208
	      {'running','ok',Misc}
	  %% Line 209
	  <SysState,'get_status',Parent,Misc> when 'true' ->
	      let <_cor5> =
		  %% Line 210
		  call 'erlang':'self'
		      ()
	      in  let <_cor4> =
		      %% Line 211
		      call 'erlang':'get'
			  ()
		  in  let <Status> =
			  %% Line 210
			  {'status',_cor5,{'module','code_server'},%% Line 211
								   [_cor4|[SysState|[Parent|[[]|[Misc|[]]]]]]}
		      in  %% Line 212
			  {SysState,Status,Misc}
	  %% Line 213
	  <SysState,{'debug',_X_What},_X_Parent,Misc> when 'true' ->
	      %% Line 214
	      {SysState,'ok',Misc}
	  %% Line 215
	  <'suspended',{'change_code',Module,Vsn,Extra},_X_Parent,Misc0> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 217
		      call 'code_server':'system_code_change'
			  (Misc0, Module, Vsn, Extra)
	      in  let <_cor9> =
		      %% Line 217
		      case _cor7 of
			%% Line 218
			<Ok = {'ok',_cor17}> when 'true' ->
			    Ok
			%% Line 219
			<Else> when 'true' ->
			    {{'error',Else},Misc0}
		      end
		  in  %% Line 216
		      case _cor9 of
			<{Res,Misc}> when 'true' ->
			    %% Line 221
			    {'suspended',Res,Misc}
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 222
	  <SysState,Other,_X_Parent,Misc> when 'true' ->
	      %% Line 223
	      {SysState,{'error',{'unknown_system_msg',Other}},Misc}
	end
'system_continue'/3 =
    %% Line 225
    fun (_cor2,_cor1,_cor0) ->
	%% Line 226
	apply 'loop'/1
	    (_cor0)
'system_terminate'/4 =
    %% Line 228
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 230
	call 'erlang':'exit'
	    ('shutdown')
'system_code_change'/4 =
    %% Line 233
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 234
	{'ok',_cor3}
'handle_call'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'stick_dir',Dir},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor3> =
		  %% Line 241
		  apply 'stick_dir'/3
		      (Dir, 'true', S)
	      in  %% Line 241
		  {'reply',_cor3,S}
	  %% Line 243
	  <{'unstick_dir',Dir},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor4> =
		  %% Line 244
		  apply 'stick_dir'/3
		      (Dir, 'false', S)
	      in  %% Line 244
		  {'reply',_cor4,S}
	  %% Line 246
	  <{'stick_mod',Mod},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor5> =
		  %% Line 247
		  apply 'stick_mod'/3
		      (Mod, 'true', S)
	      in  %% Line 247
		  {'reply',_cor5,S}
	  %% Line 249
	  <{'unstick_mod',Mod},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor6> =
		  %% Line 250
		  apply 'stick_mod'/3
		      (Mod, 'false', S)
	      in  %% Line 250
		  {'reply',_cor6,S}
	  %% Line 252
	  <{'dir',Dir},{_X_From,_X_Tag},S> when 'true' ->
	      %% Line 253
	      ( case S of
		  ( <( {'state',_cor142,_rec1,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Resp> =
			    %% Line 254
			    apply 'do_dir'/3
				(_rec1, Dir, _cor145)
			in  %% Line 255
			    {'reply',Resp,S}
		    -| ['compiler_generated'] )
		  ( <_cor149> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 257
	  <{'load_file',Mod},Caller,St> when 'true' ->
	      %% Line 258
	      case apply 'modp'/1
		       (Mod) of
		%% Line 259
		<'false'> when 'true' ->
		    %% Line 260
		    {'reply',{'error','badarg'},St}
		%% Line 261
		<'true'> when 'true' ->
		    %% Line 262
		    apply 'load_file'/3
			(Mod, Caller, St)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 265
	  <{'add_path',Where,Dir0},{_X_From,_X_Tag},S = %% Line 266
							{'state',_cor158,_cor159,Path0,_cor160,Namedb,Cache0,_cor161,_cor162}> when 'true' ->
	      %% Line 267
	      case Cache0 of
		%% Line 268
		<'no_cache'> when 'true' ->
		    %% Line 269
		    case apply 'add_path'/4
			     (Where, Dir0, Path0, Namedb) of
		      <{Resp,Path}> when 'true' ->
			  let <_cor17> =
			      %% Line 270
			      call 'erlang':'setelement'
				  (4, S, Path)
			  in  %% Line 270
			      {'reply',Resp,_cor17}
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		%% Line 271
		<_cor172> when 'true' ->
		    let <Dir> =
			%% Line 272
			apply 'absname'/1
			    (Dir0)
		    in  %% Line 273
			case apply 'add_path'/4
				 (Where, Dir, Path0, Namedb) of
			  <{Resp,Path}> when 'true' ->
			      let <Cache> =
				  %% Line 274
				  apply 'update_cache'/3
				      ([Dir|[]], Where, Cache0)
			      in  let <_cor22> =
				      %% Line 275
				      call 'erlang':'setelement'
					  (7, S, Cache)
				  in  let <_cor24> =
					  %% Line 275
					  call 'erlang':'setelement'
					      (4, _cor22, Path)
				      in  %% Line 275
					  {'reply',Resp,_cor24}
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor19})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 278
	  <{'add_paths',Where,Dirs0},{_X_From,_X_Tag},S = %% Line 279
							  {'state',_cor182,_cor183,Path0,_cor184,Namedb,Cache0,_cor185,_cor186}> when 'true' ->
	      %% Line 280
	      case Cache0 of
		%% Line 281
		<'no_cache'> when 'true' ->
		    %% Line 282
		    case apply 'add_paths'/4
			     (Where, Dirs0, Path0, Namedb) of
		      <{Resp,Path}> when 'true' ->
			  let <_cor29> =
			      %% Line 283
			      call 'erlang':'setelement'
				  (4, S, Path)
			  in  %% Line 283
			      {'reply',Resp,_cor29}
		      ( <_cor26> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor26})
			-| ['compiler_generated'] )
		    end
		%% Line 284
		<_cor196> when 'true' ->
		    let <_cor35> =
			%% Line 286
			( letrec
			      'lc$^0'/1 =
				  fun (_cor32) ->
				      case _cor32 of
					<[Dir|_cor31]> when 'true' ->
					    let <_cor33> =
						apply 'absname'/1
						    (Dir)
					    in  let <_cor34> =
						    apply 'lc$^0'/1
							(_cor31)
						in  ( [_cor33|_cor34]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor32> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor32})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Dirs0)
			  -| ['list_comprehension'] )
		    in  %% Line 287
			case apply 'add_paths'/4
				 (Where, _cor35, Path0, Namedb) of
			  <{Resp,Path}> when 'true' ->
			      let <Cache> =
				  %% Line 288
				  apply 'update_cache'/3
				      (_cor35, Where, Cache0)
			      in  let <_cor40> =
				      %% Line 289
				      call 'erlang':'setelement'
					  (7, S, Cache)
				  in  let <_cor42> =
					  %% Line 289
					  call 'erlang':'setelement'
					      (4, _cor40, Path)
				      in  %% Line 289
					  {'reply',Resp,_cor42}
			  ( <_cor37> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor37})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 292
	  <{'set_path',PathList},{_X_From,_X_Tag},S = %% Line 293
						      {'state',_cor206,_cor207,Path0,_cor208,Namedb,_cor209,_cor210,_cor211}> when 'true' ->
	      %% Line 294
	      case apply 'set_path'/3
		       (PathList, Path0, Namedb) of
		<{Resp,Path,NewDb}> when 'true' ->
		    let <_cor46> =
			%% Line 295
			call 'erlang':'setelement'
			    (6, S, NewDb)
		    in  let <_cor48> =
			    %% Line 295
			    call 'erlang':'setelement'
				(4, _cor46, Path)
			in  let <_cor49> =
				%% Line 295
				apply 'rehash_cache'/1
				    (_cor48)
			    in  %% Line 295
				{'reply',Resp,_cor49}
		( <_cor44> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 297
	  <{'del_path',Name},{_X_From,_X_Tag},S = %% Line 298
						  {'state',_cor221,_cor222,Path0,_cor223,Namedb,_cor224,_cor225,_cor226}> when 'true' ->
	      %% Line 299
	      case apply 'del_path'/3
		       (Name, Path0, Namedb) of
		<{Resp,Path}> when 'true' ->
		    let <_cor53> =
			%% Line 300
			call 'erlang':'setelement'
			    (4, S, Path)
		    in  let <_cor54> =
			    %% Line 300
			    apply 'rehash_cache'/1
				(_cor53)
			in  %% Line 300
			    {'reply',Resp,_cor54}
		( <_cor50> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor50})
		  -| ['compiler_generated'] )
	      end
	  %% Line 302
	  <{'replace_path',Name,Dir},{_X_From,_X_Tag},S = %% Line 303
							  {'state',_cor236,_cor237,Path0,_cor238,Namedb,_cor239,_cor240,_cor241}> when 'true' ->
	      %% Line 304
	      case apply 'replace_path'/4
		       (Name, Dir, Path0, Namedb) of
		<{Resp,Path}> when 'true' ->
		    let <_cor58> =
			%% Line 305
			call 'erlang':'setelement'
			    (4, S, Path)
		    in  let <_cor59> =
			    %% Line 305
			    apply 'rehash_cache'/1
				(_cor58)
			in  %% Line 305
			    {'reply',Resp,_cor59}
		( <_cor55> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor55})
		  -| ['compiler_generated'] )
	      end
	  %% Line 307
	  <'rehash',{_X_From,_X_Tag},S0> when 'true' ->
	      let <S> =
		  %% Line 308
		  apply 'create_cache'/1
		      (S0)
	      in  %% Line 309
		  {'reply','ok',S}
	  %% Line 311
	  <'get_path',{_X_From,_X_Tag},S> when 'true' ->
	      %% Line 312
	      ( case S of
		  ( <( {'state',_cor251,_cor252,_rec10,_cor253,_cor254,_cor255,_cor256,_cor257}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec10,S}
		    -| ['compiler_generated'] )
		  ( <_cor258> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 315
	  <{'load_abs',File,Mod},Caller,S> when 'true' ->
	      %% Line 316
	      case apply 'modp'/1
		       (File) of
		%% Line 317
		<'false'> when 'true' ->
		    %% Line 318
		    {'reply',{'error','badarg'},S}
		%% Line 319
		<'true'> when 'true' ->
		    %% Line 320
		    apply 'load_abs'/4
			(File, Mod, Caller, S)
		( <_cor63> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor63})
		  -| ['compiler_generated'] )
	      end
	  %% Line 323
	  <{'load_binary',Mod,File,Bin},Caller,S> when 'true' ->
	      %% Line 324
	      apply 'do_load_binary'/5
		  (Mod, File, Bin, Caller, S)
	  %% Line 326
	  <{'load_native_partial',Mod,Bin},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor64> =
		  catch
		      %% Line 327
		      call 'hipe_unified_loader':'load'
			  (Mod, Bin)
	      in  let <Status> =
		      %% Line 328
		      apply 'hipe_result_to_status'/1
			  (_cor64)
		  in  %% Line 329
		      {'reply',Status,S}
	  %% Line 331
	  <{'load_native_sticky',Mod,Bin,WholeModule},{_X_From,_X_Tag},S> when 'true' ->
	      let <_cor67> =
		  catch
		      %% Line 332
		      call 'hipe_unified_loader':'load_module'
			  (Mod, Bin, WholeModule)
	      in  let <Status> =
		      %% Line 333
		      apply 'hipe_result_to_status'/1
			  (_cor67)
		  in  %% Line 334
		      {'reply',Status,S}
	  %% Line 336
	  <{'ensure_loaded',Mod0},Caller,St0> when 'true' ->
	      let <Fun> =
		  %% Line 337
		  ( fun (_cor78,_cor77) ->
			%% Line 338
			case call 'erlang':'module_loaded'
				 (_cor78) of
			  %% Line 339
			  <'true'> when 'true' ->
			      %% Line 340
			      {'reply',{'module',_cor78},_cor77}
			  %% Line 341
			  <'false'>
			      when ( try
				      ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(_cor77,
							 ( 'state'
							   -| ['compiler_generated'] ),
							 ( 9
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor74> =
						    ( call 'erlang':'element'
							  (8, _cor77)
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'=:='
							  (_cor74, 'interactive')
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      %% Line 342
			      apply 'load_file'/3
				  (_cor78, Caller, _cor77)
			  %% Line 343
			  <'false'> when 'true' ->
			      %% Line 344
			      {'reply',{'error','embedded'},_cor77}
			  ( <_cor76> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor76})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-0-'}}] )
	      in  %% Line 347
		  apply 'do_mod_call'/4
		      (Fun, Mod0, {'error','badarg'}, St0)
	  %% Line 349
	  <{'delete',Mod0},{_X_From,_X_Tag},S> when 'true' ->
	      let <Fun> =
		  %% Line 350
		  ( fun (_cor87,_cor86) ->
			let <_cor82> =
			    catch
				%% Line 351
				call 'erlang':'delete_module'
				    (_cor87)
			in  %% Line 351
			    case _cor82 of
			      %% Line 352
			      <'true'> when 'true' ->
				  %% Line 353
				  ( case _cor86 of
				      ( <( {'state',_cor259,_cor260,_cor261,_rec11,_cor262,_cor263,_cor264,_cor265}
					   -| ['compiler_generated'] )> when 'true' ->
					    do  call 'ets':'delete'
						    (_rec11, _cor87)
						%% Line 354
						{'reply','true',_cor86}
					-| ['compiler_generated'] )
				      ( <_cor266> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 355
			      <_cor267> when 'true' ->
				  %% Line 356
				  {'reply','false',_cor86}
			    end
		    -| [{'id',{0,0,'-handle_call/3-fun-1-'}}] )
	      in  %% Line 359
		  apply 'do_mod_call'/4
		      (Fun, Mod0, 'false', S)
	  %% Line 361
	  <{'purge',Mod0},{_X_From,_X_Tag},St0> when 'true' ->
	      let <_cor96> =
		  %% Line 362
		  ( fun (_cor93,_cor92) ->
			let <_cor91> =
			    %% Line 363
			    apply 'do_purge'/1
				(_cor93)
			in  %% Line 363
			    {'reply',_cor91,_cor92}
		    -| [{'id',{0,0,'-handle_call/3-fun-2-'}}] )
	      in  %% Line 362
		  apply 'do_mod_call'/4
		      (_cor96, %% Line 364
			       Mod0, %% Line 364
				     'false', %% Line 364
					      St0)
	  %% Line 366
	  <{'soft_purge',Mod0},{_X_From,_X_Tag},St0> when 'true' ->
	      let <_cor102> =
		  %% Line 367
		  ( fun (_cor99,_cor98) ->
			let <_cor97> =
			    %% Line 368
			    apply 'do_soft_purge'/1
				(_cor99)
			in  %% Line 368
			    {'reply',_cor97,_cor98}
		    -| [{'id',{0,0,'-handle_call/3-fun-3-'}}] )
	      in  %% Line 367
		  apply 'do_mod_call'/4
		      (_cor102, %% Line 369
				Mod0, %% Line 369
				      'true', %% Line 369
					      St0)
	  %% Line 371
	  <{'is_loaded',Mod0},{_X_From,_X_Tag},St0> when 'true' ->
	      let <_cor110> =
		  %% Line 372
		  ( fun (_cor107,_cor106) ->
			%% Line 373
			( case _cor106 of
			    ( <( {'state',_cor268,_cor269,_cor270,_rec12,_cor271,_cor272,_cor273,_cor274}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor105> =
				      apply 'is_loaded'/2
					  (_cor107, _rec12)
				  in  {'reply',_cor105,_cor106}
			      -| ['compiler_generated'] )
			    ( <_cor275> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-handle_call/3-fun-4-'}}] )
	      in  %% Line 372
		  apply 'do_mod_call'/4
		      (_cor110, %% Line 374
				Mod0, %% Line 374
				      'false', %% Line 374
					       St0)
	  %% Line 376
	  <'all_loaded',{_X_From,_X_Tag},S> when 'true' ->
	      %% Line 377
	      ( case S of
		  ( <( {'state',_cor276,_cor277,_cor278,_rec13,_cor279,_cor280,_cor281,_cor282}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor114> =
			    %% Line 378
			    apply 'all_loaded'/1
				(_rec13)
			in  %% Line 378
			    {'reply',_cor114,S}
		    -| ['compiler_generated'] )
		  ( <_cor283> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 380
	  <{'get_object_code',Mod0},{_X_From,_X_Tag},St0> when 'true' ->
	      let <Fun> =
		  %% Line 381
		  ( fun (_cor121,_cor120) ->
			%% Line 382
			( case _cor120 of
			    ( <( {'state',_cor284,_cor285,_rec14,_cor286,_cor287,_cor288,_cor289,_cor290}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor118> =
				      %% Line 383
				      call 'erlang':'atom_to_list'
					  (_cor121)
				  in  %% Line 383
				      case apply 'mod_to_bin'/2
					       (_rec14, _cor118) of
					%% Line 384
					<{_cor292,Bin,FName}> when 'true' ->
					    {'reply',{_cor121,Bin,FName},_cor120}
					%% Line 385
					<Error> when 'true' ->
					    {'reply',Error,_cor120}
				      end
			      -| ['compiler_generated'] )
			    ( <_cor291> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-handle_call/3-fun-5-'}}] )
	      in  %% Line 388
		  apply 'do_mod_call'/4
		      (Fun, Mod0, 'error', St0)
	  %% Line 390
	  <{'is_sticky',Mod},{_X_From,_X_Tag},S> when 'true' ->
	      %% Line 391
	      ( case S of
		  ( <( {'state',_cor293,_cor294,_cor295,_rec15,_cor296,_cor297,_cor298,_cor299}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor128> =
			    %% Line 392
			    apply 'is_sticky'/2
				(Mod, _rec15)
			in  %% Line 392
			    {'reply',_cor128,S}
		    -| ['compiler_generated'] )
		  ( <_cor300> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 394
	  <'stop',{_X_From,_X_Tag},S> when 'true' ->
	      %% Line 395
	      {'stop','normal','stopped',S}
	  %% Line 397
	  <{'is_cached',_X_File},{_X_From,_X_Tag},S = {'state',_cor301,_cor302,_cor303,_cor304,_cor305,'no_cache',_cor306,_cor307}> when 'true' ->
	      %% Line 398
	      {'reply','no',S}
	  %% Line 400
	  <{'set_primary_archive',File,ArchiveBin,FileInfo,ParserFun},{_X_From,_X_Tag},S = {'state',_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,Mode,_cor314}> when 'true' ->
	      %% Line 401
	      case call 'erl_prim_loader':'set_primary_archive'
		       (File, ArchiveBin, FileInfo, ParserFun) of
		%% Line 402
		<{'ok',Files}> when 'true' ->
		    %% Line 403
		    {'reply',{'ok',Mode,Files},S}
		%% Line 404
		<Error = {'error',_X_Reason}> when 'true' ->
		    %% Line 405
		    {'reply',Error,S}
		( <_cor129> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor129})
		  -| ['compiler_generated'] )
	      end
	  %% Line 408
	  <{'is_cached',File},{_X_From,_X_Tag},S = {'state',_cor315,_cor316,_cor317,_cor318,_cor319,Cache,_cor320,_cor321}> when 'true' ->
	      let <ObjExt> =
		  %% Line 409
		  apply 'objfile_extension'/0
		      ()
	      in  let <Ext> =
		      %% Line 410
		      call 'filename':'extension'
			  (File)
		  in  let <_cor133> =
			  %% Line 411
			  case Ext of
			    %% Line 412
			    <_cor322>
				when call 'erlang':'=:='
				      (Ext,
				       ObjExt) ->
				'obj'
			    %% Line 413
			    <[46|[97|[112|[112]]]]> when 'true' ->
				'app'
			    %% Line 414
			    <_cor323> when 'true' ->
				'undef'
			  end
		      in  %% Line 416
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (_cor133,
				       'undef') ->
				%% Line 417
				{'reply','no',S}
			    %% Line 418
			    <> when 'true' ->
				let <_cor135> =
				    %% Line 419
				    call 'filename':'rootname'
					(File, Ext)
				in  let <_cor136> =
					%% Line 419
					call 'erlang':'list_to_atom'
					    (_cor135)
				    in  let <Key> = {_cor133,_cor136}
					in  %% Line 420
					    case call 'ets':'lookup'
						     (Cache, Key) of
					      %% Line 421
					      <[]> when 'true' ->
						  %% Line 422
						  {'reply','no',S}
					      %% Line 423
					      <[{_cor324,Dir}|[]]>
						  when call 'erlang':'=:='
							(_cor324,
							 Key) ->
						  %% Line 424
						  {'reply',Dir,S}
					      ( <_cor138> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor138})
						-| ['compiler_generated'] )
					    end
			  end
	  %% Line 428
	  <'get_mode',{_X_From,_X_Tag},S = {'state',_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,Mode,_cor331}> when 'true' ->
	      %% Line 429
	      {'reply',Mode,S}
	  %% Line 431
	  <Other,{_X_From,_X_Tag},S> when 'true' ->
	      do  %% Line 432
		  apply 'error_msg'/2
		      ([32|[42|[42|[32|[67|[111|[100|[101|[115|[101|[114|[118|[101|[114|[42|[42|[42|[32|[105|[103|[110|[111|[114|[105|[110|[103|[32|[126|[119|[126|[110|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
		  %% Line 433
		  {'noreply',S}
	  ( <_cor141,_cor140,_cor139> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor141,_cor140,_cor139})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'do_mod_call'/4 =
    %% Line 435
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Action,Module,_X_Error,St>
	      when call 'erlang':'is_atom'
		    (Module) ->
	      %% Line 436
	      apply Action
		  (Module, St)
	  %% Line 437
	  <Action,Module,Error,St> when 'true' ->
	      %% Line 438
	      try
		  call 'erlang':'list_to_atom'
		      (Module)
	      of <_cor4> ->
		  case _cor4 of
		    %% Line 439
		    <Atom>
			when call 'erlang':'is_atom'
			      (_cor4) ->
			%% Line 440
			apply Action
			    (Atom, St)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 442
		    <'error','badarg',_cor13> when 'true' ->
			%% Line 443
			{'reply',Error,St}
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	end
'create_cache'/1 =
    %% Line 450
    fun (_cor0) ->
	case _cor0 of
	  <St = {'state',_cor3,_cor4,_cor5,_cor6,_cor7,'no_cache',_cor8,_cor9}> when 'true' ->
	      let <Cache> =
		  %% Line 451
		  call 'ets':'new'
		      ('code_cache', ['protected'])
	      in  %% Line 452
		  apply 'rehash_cache'/2
		      (Cache, St)
	  %% Line 453
	  <St> when 'true' ->
	      %% Line 454
	      apply 'rehash_cache'/1
		  (St)
	end
'rehash_cache'/1 =
    %% Line 456
    fun (_cor0) ->
	case _cor0 of
	  <St = {'state',_cor3,_cor4,_cor5,_cor6,_cor7,'no_cache',_cor8,_cor9}> when 'true' ->
	      %% Line 457
	      St
	  %% Line 458
	  <St = {'state',_cor10,_cor11,_cor12,_cor13,_cor14,OldCache,_cor15,_cor16}> when 'true' ->
	      do  %% Line 459
		  call 'ets':'delete'
		      (OldCache)
		  let <Cache> =
		      %% Line 460
		      call 'ets':'new'
			  ('code_cache', ['protected'])
		  in  %% Line 461
		      apply 'rehash_cache'/2
			  (Cache, St)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'rehash_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'rehash_cache'/2 =
    %% Line 463
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cache,St = {'state',_cor11,_cor12,Path,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <_cor2> =
		  %% Line 464
		  apply 'objfile_extension'/0
		      ()
	      in  let <Exts> =
		      %% Line 464
		      [{'obj',_cor2}|[{'app',[46|[97|[112|[112]]]]}]]
		  in  let <_cor4> =
			  %% Line 465
			  call 'lists':'reverse'
			      (Path)
		      in  %% Line 465
			  case apply 'locate_mods'/5
				   (_cor4, 'first', Exts, Cache, []) of
			    <{_cor18,NewPath}>
				when call 'erlang':'=:='
				      (_cor18,
				       Cache) ->
				let <_cor7> =
				    %% Line 466
				    call 'erlang':'setelement'
					(7, St, Cache)
				in  %% Line 466
				    call 'erlang':'setelement'
					(4, _cor7, NewPath)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'rehash_cache',2}}] )
	    -| ['compiler_generated'] )
	end
'update_cache'/3 =
    %% Line 468
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 469
	    apply 'objfile_extension'/0
		()
	in  let <Exts> =
		%% Line 469
		[{'obj',_cor3}|[{'app',[46|[97|[112|[112]]]]}]]
	    in  %% Line 470
		case apply 'locate_mods'/5
			 (_cor2, _cor1, Exts, _cor0, []) of
		  <{Cache,_cor9}> when 'true' ->
		      %% Line 471
		      Cache
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'locate_mods'/5 =
    %% Line 473
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Dir0|Path],Where,Exts,Cache,Acc> when 'true' ->
	      let <Dir> =
		  %% Line 474
		  apply 'absname'/1
		      (Dir0)
	      in  %% Line 475
		  case call 'erl_prim_loader':'list_dir'
			   (Dir) of
		    %% Line 476
		    <{'ok',Files}> when 'true' ->
			%% Line 477
			case apply 'filter_mods'/5
				 (Files, Where, Exts, Dir, Cache) of
			  <_cor13>
			      when call 'erlang':'=:='
				    (_cor13,
				     Cache) ->
			      %% Line 478
			      apply 'locate_mods'/5
				  (Path, Where, Exts, Cache, [Dir|Acc])
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    %% Line 479
		    <'error'> when 'true' ->
			%% Line 480
			apply 'locate_mods'/5
			    (Path, Where, Exts, Cache, Acc)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 482
	  <[],_cor14,_cor15,Cache,Path> when 'true' ->
	      %% Line 483
	      {Cache,Path}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'locate_mods',5}}] )
	    -| ['compiler_generated'] )
	end
'filter_mods'/5 =
    %% Line 485
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[File|Rest],Where,Exts,Dir,Cache> when 'true' ->
	      let <Ext> =
		  %% Line 486
		  call 'filename':'extension'
		      (File)
	      in  let <_cor6> =
		      %% Line 487
		      call 'filename':'rootname'
			  (File, Ext)
		  in  let <Root> =
			  %% Line 487
			  call 'erlang':'list_to_atom'
			      (_cor6)
		      in  do  %% Line 488
			      case call 'lists':'keyfind'
				       (Ext, 2, Exts) of
				%% Line 489
				<{Type,_cor19}> when 'true' ->
				    let <Key> = {%% Line 490
					 Type,%% Line 490
					      Root}
				    in  %% Line 491
					case Where of
					  %% Line 492
					  <'first'> when 'true' ->
					      %% Line 493
					      case call 'ets':'insert'
						       (Cache, {Key,Dir}) of
						<'true'> when 'true' ->
						    'ok'
						( <_cor9> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor9})
						  -| ['compiler_generated'] )
					      end
					  %% Line 494
					  <'last'> when 'true' ->
					      %% Line 495
					      case call 'ets':'lookup'
						       (Cache, Key) of
						%% Line 496
						<[]> when 'true' ->
						    %% Line 497
						    case call 'ets':'insert'
							     (Cache, {Key,Dir}) of
						      <'true'> when 'true' ->
							  'ok'
						      ( <_cor10> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor10})
							-| ['compiler_generated'] )
						    end
						%% Line 498
						<_cor22> when 'true' ->
						    'ok'
					      end
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
				%% Line 502
				<'false'> when 'true' ->
				    'ok'
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			      %% Line 505
			      apply 'filter_mods'/5
				  (Rest, Where, Exts, Dir, Cache)
	  %% Line 506
	  <[],_cor23,_cor24,_cor25,Cache> when 'true' ->
	      %% Line 507
	      Cache
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'filter_mods',5}}] )
	    -| ['compiler_generated'] )
	end
'make_path'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	let <Bundles> =
	    %% Line 517
	    apply 'choose_bundles'/1
		(_cor0)
	in  %% Line 518
	    apply 'make_path'/4
		(_cor1, Bundles, [], [])
'choose_bundles'/1 =
    %% Line 520
    fun (_cor0) ->
	let <ArchiveExt> =
	    %% Line 521
	    apply 'archive_extension'/0
		()
	in  let <_cor7> =
		%% Line 522
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[B|_cor3]> when 'true' ->
				    let <_cor5> =
					apply 'create_bundle'/2
					    (B, ArchiveExt)
				    in  let <_cor6> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor5|_cor6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  let <Bs> =
		    %% Line 522
		    call 'lists':'sort'
			(_cor7)
		in  %% Line 523
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor13) ->
				  case _cor13 of
				    <[{_X_Name,_X_NumVsn,FullName}|_cor10]> when 'true' ->
					let <_cor14> =
					    apply 'lc$^1'/1
						(_cor10)
					in  ( [FullName|_cor14]
					      -| ['compiler_generated'] )
				    ( <[_cor9|_cor10]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor10)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor13> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor13})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor11> =
			      %% Line 524
			      call 'lists':'reverse'
				  (Bs)
			  in  let <_cor12> =
				  %% Line 524
				  apply 'choose'/3
				      (_cor11, [], ArchiveExt)
			      in  apply 'lc$^1'/1
				      (_cor12)
		      -| ['list_comprehension'] )
'create_bundle'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	let <BaseName> =
	    %% Line 527
	    call 'filename':'basename'
		(_cor1, _cor0)
	in  %% Line 528
	    case apply 'split'/2
		     (BaseName, [45]) of
	      %% Line 529
	      <Toks = [_cor12|[_cor13|_cor14]]> when 'true' ->
		  let <VsnStr> =
		      %% Line 530
		      call 'lists':'last'
			  (Toks)
		  in  %% Line 531
		      case apply 'vsn_to_num'/1
			       (VsnStr) of
			%% Line 532
			<{'ok',VsnNum}> when 'true' ->
			    let <_cor4> =
				%% Line 533
				call 'erlang':'length'
				    (Toks)
			    in  let <_cor5> =
				    %% Line 533
				    call 'erlang':'-'
					(_cor4, 1)
				in  let <_cor6> =
					%% Line 533
					call 'lists':'sublist'
					    (Toks, _cor5)
				    in  let <Name> =
					    %% Line 533
					    apply 'join'/2
						(_cor6, [45])
					in  %% Line 534
					    {Name,VsnNum,_cor1}
			%% Line 535
			<'false'> when 'true' ->
			    %% Line 536
			    {_cor1,[0],_cor1}
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	      %% Line 538
	      <_cor15> when 'true' ->
		  %% Line 539
		  {_cor1,[0],_cor1}
	    end
'vsn_to_num'/1 =
    %% Line 543
    fun (_cor0) ->
	%% Line 544
	case apply 'is_vsn'/1
		 (_cor0) of
	  %% Line 545
	  <'true'> when 'true' ->
	      let <_cor7> =
		  %% Line 546
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[S|_cor2]> when 'true' ->
				      let <_cor5> =
					  call 'erlang':'list_to_integer'
					      (S)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    apply 'split'/2
				(_cor0, [46])
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 546
		  {'ok',_cor7}
	  %% Line 547
	  <_cor10> when 'true' ->
	      %% Line 548
	      'false'
	end
'is_vsn'/1 =
    %% Line 551
    fun (_cor0) ->
	case _cor0 of
	  <Str>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Vsns> =
		  %% Line 552
		  apply 'split'/2
		      (Str, [46])
	      in  %% Line 553
		  call 'lists':'all'
		      (( 'is_numstr'/1
			 -| [{'id',{0,0,'-is_vsn/1-fun-0-'}}] ), Vsns)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'is_vsn',1}}] )
	    -| ['compiler_generated'] )
	end
'is_numstr'/1 =
    %% Line 555
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 556
	    ( fun (_cor3) ->
		  case _cor3 of
		    <C>
			when let <_cor1> =
			      call 'erlang':'=<'
				  (48, _cor3)
			  in  let <_cor2> =
				  call 'erlang':'=<'
				      (_cor3, 57)
			      in  call 'erlang':'and'
				      (_cor1, _cor2) ->
			'true'
		    %% Line 557
		    <_cor7> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-is_numstr/1-fun-0-'}}] )
	in  %% Line 556
	    call 'lists':'all'
		(_cor5, _cor0)
'split'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	%% Line 561
	apply 'split1'/3
	    (_cor1, _cor0, [])
'split1'/3 =
    %% Line 563
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S],Seps,Toks> when 'true' ->
	      %% Line 564
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 565
		<'true'> when 'true' ->
		    apply 'split1'/3
			(S, Seps, Toks)
		%% Line 566
		<'false'> when 'true' ->
		    apply 'split2'/4
			(S, Seps, Toks, [C|[]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 568
	  <[],_X_Seps,Toks> when 'true' ->
	      %% Line 569
	      call 'lists':'reverse'
		  (Toks)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split1',3}}] )
	    -| ['compiler_generated'] )
	end
'split2'/4 =
    %% Line 571
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C|S],Seps,Toks,Cs> when 'true' ->
	      %% Line 572
	      case call 'lists':'member'
		       (C, Seps) of
		%% Line 573
		<'true'> when 'true' ->
		    let <_cor4> =
			call 'lists':'reverse'
			    (Cs)
		    in  apply 'split1'/3
			    (S, Seps, [_cor4|Toks])
		%% Line 574
		<'false'> when 'true' ->
		    apply 'split2'/4
			(S, Seps, Toks, [C|Cs])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 576
	  <[],_X_Seps,Toks,Cs> when 'true' ->
	      let <_cor6> =
		  %% Line 577
		  call 'lists':'reverse'
		      (Cs)
	      in  %% Line 577
		  call 'lists':'reverse'
		      ([_cor6|Toks])
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split2',4}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 579
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H1|[H2|T]],S> when 'true' ->
	      let <_cor2> =
		  %% Line 580
		  apply 'join'/2
		      ([H2|T], S)
	      in  let <_cor3> =
		      %% Line 580
		      call 'erlang':'++'
			  (S, _cor2)
		  in  %% Line 580
		      call 'erlang':'++'
			  (H1, _cor3)
	  %% Line 581
	  <[H|[]],_cor6> when 'true' ->
	      %% Line 582
	      H
	  %% Line 583
	  <[],_cor7> when 'true' ->
	      %% Line 584
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'choose'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[New = {Name,NumVsn,NewFullName}|Bs],Acc,ArchiveExt> when 'true' ->
	      %% Line 587
	      case call 'lists':'keyfind'
		       (Name, 1, Acc) of
		%% Line 588
		<{_cor10,NV,OldFullName}>
		    when call 'erlang':'=:='
			  (NV,
			   NumVsn) ->
		    let <_cor3> =
			%% Line 589
			call 'filename':'extension'
			    (OldFullName)
		    in  %% Line 589
			case <> of
			  %% Line 592
			  <>
			      when call 'erlang':'=:='
				    (_cor3,
				     ArchiveExt) ->
			      let <Acc2> =
				  %% Line 593
				  call 'lists':'keystore'
				      (Name, 1, Acc, New)
			      in  %% Line 594
				  apply 'choose'/3
				      (Bs, Acc2, ArchiveExt)
			  %% Line 590
			  <> when 'true' ->
			      %% Line 591
			      apply 'choose'/3
				  (Bs, Acc, ArchiveExt)
			end
		%% Line 596
		<{_cor11,_cor12,_cor13}> when 'true' ->
		    %% Line 597
		    apply 'choose'/3
			(Bs, Acc, ArchiveExt)
		%% Line 598
		<'false'> when 'true' ->
		    %% Line 599
		    apply 'choose'/3
			(Bs, [{Name,NumVsn,NewFullName}|Acc], ArchiveExt)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 601
	  <[],Acc,_X_ArchiveExt> when 'true' ->
	      %% Line 602
	      Acc
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'choose',3}}] )
	    -| ['compiler_generated'] )
	end
'make_path'/4 =
    %% Line 604
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor26,[],Res,Bs> when 'true' ->
	      %% Line 605
	      {Res,Bs}
	  %% Line 606
	  <BundleDir,[Bundle|Tail],Res,Bs> when 'true' ->
	      let <Dir> =
		  %% Line 607
		  call 'filename':'append'
		      (BundleDir, Bundle)
	      in  let <Ebin> =
		      %% Line 608
		      call 'filename':'append'
			  (Dir, [101|[98|[105|[110]]]])
		  in  %% Line 610
		      case call 'erl_prim_loader':'read_file_info'
			       (Ebin) of
			%% Line 611
			<{'ok',{'file_info',_cor27,'directory',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}}> when 'true' ->
			    %% Line 612
			    apply 'make_path'/4
				(BundleDir, Tail, [Ebin|Res], [Bundle|Bs])
			%% Line 613
			<_cor39> when 'true' ->
			    let <Ext> =
				%% Line 615
				apply 'archive_extension'/0
				    ()
			    in  let <Base> =
				    %% Line 616
				    call 'filename':'basename'
					(Dir, Ext)
				in  let <_cor8> =
					%% Line 617
					call 'filename':'dirname'
					    (Dir)
				    in  let <_cor9> =
					    %% Line 617
					    call 'erlang':'++'
						(Base, Ext)
					in  let <Ebin2> =
						%% Line 617
						call 'filename':'join'
						    ([_cor8|[_cor9|[Base|[[101|[98|[105|[110]]]]]]]])
					    in  let <_cor19> =
						    %% Line 619
						    case apply 'split'/2
							     (Base, [45]) of
						      %% Line 620
						      <Toks = [_cor40|[_cor41|_cor42]]> when 'true' ->
							  let <_cor11> =
							      %% Line 621
							      call 'erlang':'length'
								  (Toks)
							  in  let <_cor12> =
								  %% Line 621
								  call 'erlang':'-'
								      (_cor11, 1)
							      in  let <_cor13> =
								      %% Line 621
								      call 'lists':'sublist'
									  (Toks, _cor12)
								  in  let <AppName> =
									  %% Line 621
									  apply 'join'/2
									      (_cor13, [45])
								      in  let <_cor15> =
									      %% Line 622
									      call 'filename':'dirname'
										  (Dir)
									  in  let <_cor16> =
										  %% Line 622
										  call 'erlang':'++'
										      (Base, Ext)
									      in  let <Ebin3> =
										      %% Line 622
										      call 'filename':'join'
											  ([_cor15|[_cor16|[AppName|[[101|[98|[105|[110]]]]]]]])
										  in  %% Line 623
										      [Ebin3|[Ebin2|[Dir|[]]]]
						      %% Line 624
						      <_cor43> when 'true' ->
							  %% Line 625
							  [Ebin2|[Dir|[]]]
						    end
						in  %% Line 627
						    apply 'try_ebin_dirs'/6
							(_cor19, BundleDir, Tail, Res, Bundle, Bs)
		      end
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'make_path',4}}] )
	    -| ['compiler_generated'] )
	end
'try_ebin_dirs'/6 =
    %% Line 630
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Ebin|Ebins],BundleDir,Tail,Res,Bundle,Bs> when 'true' ->
	      %% Line 631
	      case call 'erl_prim_loader':'read_file_info'
		       (Ebin) of
		%% Line 632
		<{'ok',{'file_info',_cor13,'directory',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}}> when 'true' ->
		    %% Line 633
		    apply 'make_path'/4
			(BundleDir, Tail, [Ebin|Res], [Bundle|Bs])
		%% Line 634
		<_cor25> when 'true' ->
		    %% Line 635
		    apply 'try_ebin_dirs'/6
			(Ebins, BundleDir, Tail, Res, Bundle, Bs)
	      end
	  %% Line 637
	  <[],BundleDir,Tail,Res,_X_Bundle,Bs> when 'true' ->
	      %% Line 638
	      apply 'make_path'/4
		  (BundleDir, Tail, Res, Bs)
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'try_ebin_dirs',6}}] )
	    -| ['compiler_generated'] )
	end
'add_loader_path'/2 =
    %% Line 645
    fun (_cor1,_cor0) ->
	%% Line 646
	case call 'erl_prim_loader':'get_path'
		 () of
	  <{'ok',PrimP0}> when 'true' ->
	      %% Line 647
	      case _cor0 of
		%% Line 648
		<'embedded'> when 'true' ->
		    %% Line 649
		    apply 'strip_path'/2
			(PrimP0, _cor0)
		%% Line 650
		<_cor15> when 'true' ->
		    let <Pa0> =
			%% Line 651
			apply 'get_arg'/1
			    ('pa')
		    in  let <Pz0> =
			    %% Line 652
			    apply 'get_arg'/1
				('pz')
			in  let <Pa> =
				%% Line 654
				apply 'patch_path'/1
				    (Pa0)
			    in  let <Pz> =
				    %% Line 655
				    apply 'patch_path'/1
					(Pz0)
				in  let <PrimP> =
					%% Line 656
					apply 'patch_path'/1
					    (PrimP0)
				    in  let <IPath> =
					    %% Line 657
					    apply 'patch_path'/1
						(_cor1)
					in  let <P> =
						%% Line 659
						apply 'exclude_pa_pz'/3
						    (PrimP, Pa, Pz)
					    in  let <Path0> =
						    %% Line 660
						    apply 'strip_path'/2
							(P, _cor0)
						in  let <Path> =
							%% Line 661
							apply 'add'/3
							    (Path0, IPath, [])
						    in  %% Line 662
							apply 'add_pa_pz'/3
							    (Path, Pa, Pz)
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'patch_path'/1 =
    %% Line 665
    fun (_cor0) ->
	%% Line 666
	case apply 'check_path'/1
		 (_cor0) of
	  %% Line 667
	  <{'ok',NewPath}> when 'true' ->
	      NewPath
	  %% Line 668
	  <{'error',_X_Reason}> when 'true' ->
	      _cor0
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'exclude_pa_pz'/3 =
    %% Line 673
    fun (_cor2,_cor1,_cor0) ->
	let <P1> =
	    %% Line 674
	    apply 'excl'/2
		(_cor1, _cor2)
	in  let <_cor4> =
		%% Line 675
		call 'lists':'reverse'
		    (P1)
	    in  let <P> =
		    %% Line 675
		    apply 'excl'/2
			(_cor0, _cor4)
		in  %% Line 676
		    call 'lists':'reverse'
			(P)
'excl'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],P> when 'true' ->
	      %% Line 679
	      P
	  %% Line 680
	  <[D|Ds],P> when 'true' ->
	      let <_cor2> =
		  %% Line 681
		  call 'lists':'delete'
		      (D, P)
	      in  %% Line 681
		  apply 'excl'/2
		      (Ds, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'excl',2}}] )
	    -| ['compiler_generated'] )
	end
'strip_path'/2 =
    %% Line 689
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[P0|Ps],Mode> when 'true' ->
	      let <P> =
		  %% Line 690
		  call 'filename':'join'
		      ([P0|[]])
	      in  %% Line 691
		  case apply 'check_path'/1
			   ([P|[]]) of
		    %% Line 692
		    <{'ok',[NewP|[]]}> when 'true' ->
			let <_cor3> =
			    %% Line 693
			    apply 'strip_path'/2
				(Ps, Mode)
			in  %% Line 693
			    [NewP|_cor3]
		    %% Line 694
		    <_cor8>
			when call 'erlang':'=:='
			      (Mode,
			       'embedded') ->
			let <_cor4> =
			    %% Line 695
			    apply 'strip_path'/2
				(Ps, Mode)
			in  %% Line 695
			    [P|_cor4]
		    %% Line 696
		    <_cor9> when 'true' ->
			%% Line 697
			apply 'strip_path'/2
			    (Ps, Mode)
		  end
	  %% Line 699
	  <_cor10,_cor11> when 'true' ->
	      %% Line 700
	      []
	end
'add'/3 =
    %% Line 708
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Path,[[46]|IPath],Acc> when 'true' ->
	      let <RPath> =
		  %% Line 709
		  apply 'add1'/3
		      (Path, IPath, Acc)
	      in  let <_cor4> =
		      %% Line 710
		      call 'lists':'delete'
			  ([46], RPath)
		  in  %% Line 710
		      [[46]|_cor4]
	  %% Line 711
	  <Path,IPath,Acc> when 'true' ->
	      %% Line 712
	      apply 'add1'/3
		  (Path, IPath, Acc)
	end
'add1'/3 =
    %% Line 714
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P|Path],IPath,Acc> when 'true' ->
	      %% Line 715
	      case call 'lists':'member'
		       (P, Acc) of
		%% Line 716
		<'true'> when 'true' ->
		    %% Line 717
		    apply 'add1'/3
			(Path, IPath, Acc)
		%% Line 718
		<'false'> when 'true' ->
		    let <IPath1> =
			%% Line 719
			apply 'exclude'/2
			    (P, IPath)
		    in  %% Line 720
			apply 'add1'/3
			    (Path, IPath1, [P|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 722
	  <_cor9,IPath,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 723
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 723
		  call 'erlang':'++'
		      (_cor5, IPath)
	end
'add_pa_pz'/3 =
    %% Line 725
    fun (_cor2,_cor1,_cor0) ->
	%% Line 726
	case apply 'add_paths'/4
		 ('first', _cor1, _cor2, 'false') of
	  <{_cor9,Path1}> when 'true' ->
	      let <_cor4> =
		  %% Line 727
		  call 'lists':'reverse'
		      (Path1)
	      in  %% Line 727
		  case apply 'add_paths'/4
			   ('first', _cor0, _cor4, 'false') of
		    <{_cor10,Path2}> when 'true' ->
			%% Line 728
			call 'lists':'reverse'
			    (Path2)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'get_arg'/1 =
    %% Line 730
    fun (_cor0) ->
	%% Line 731
	case call 'init':'get_argument'
		 (_cor0) of
	  %% Line 732
	  <{'ok',Values}> when 'true' ->
	      %% Line 733
	      call 'lists':'append'
		  (Values)
	  %% Line 734
	  <_cor3> when 'true' ->
	      %% Line 735
	      []
	end
'exclude'/2 =
    %% Line 742
    fun (_cor1,_cor0) ->
	let <Name> =
	    %% Line 743
	    apply 'get_name'/1
		(_cor1)
	in  %% Line 744
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[D|_cor4]>
				when %% Line 745
				  call 'erlang':'=/='
				      (D,
				       _cor1) ->
				let <_cor5> =
				    %% Line 746
				    apply 'get_name'/1
					(D)
				in  %% Line 746
				    ( case <> of
					<>
					    when call 'erlang':'=/='
						  (_cor5,
						   Name) ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [D|_cor7]
						  -| ['compiler_generated'] )
					( <> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    ( <[D|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
'get_name'/1 =
    %% Line 755
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 756
	    apply 'get_name1'/1
		(_cor0)
	in  %% Line 756
	    apply 'get_name2'/2
		(_cor1, [])
'get_name1'/1 =
    %% Line 758
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 759
	    call 'filename':'split'
		(_cor0)
	in  %% Line 759
	    case call 'lists':'reverse'
		     (_cor1) of
	      %% Line 760
	      <[[101|[98|[105|[110]]]]|[DirName|_cor4]]> when 'true' ->
		  DirName
	      %% Line 761
	      <[DirName|_cor5]> when 'true' ->
		  DirName
	      %% Line 762
	      <_cor6> when 'true' ->
		  []
	    end
'get_name2'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[45|_cor4],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 766
	  <[H|T],Acc> when 'true' ->
	      apply 'get_name2'/2
		  (T, [H|Acc])
	  %% Line 767
	  <_cor5,Acc> when 'true' ->
	      call 'lists':'reverse'
		  (Acc)
	end
'check_path'/1 =
    %% Line 769
    fun (_cor0) ->
	let <PathChoice> =
	    %% Line 770
	    call 'init':'code_path_choice'
		()
	in  let <ArchiveExt> =
		%% Line 771
		apply 'archive_extension'/0
		    ()
	    in  %% Line 772
		apply 'do_check_path'/4
		    (_cor0, PathChoice, ArchiveExt, [])
'do_check_path'/4 =
    %% Line 774
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_PathChoice,_X_ArchiveExt,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 775
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 775
		  {'ok',_cor4}
	  %% Line 776
	  <[Dir|Tail],PathChoice,ArchiveExt,Acc> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 777
		      call 'erl_prim_loader':'read_file_info'
			  (Dir)
	      in  %% Line 777
		  case _cor5 of
		    %% Line 778
		    <{'ok',{'file_info',_cor29,'directory',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}}> when 'true' ->
			%% Line 779
			apply 'do_check_path'/4
			    (Tail, PathChoice, ArchiveExt, [Dir|Acc])
		    %% Line 780
		    <_cor41>
			when call 'erlang':'=:='
			      (PathChoice,
			       'strict') ->
			%% Line 782
			{'error','bad_directory'}
		    %% Line 783
		    <_cor42>
			when call 'erlang':'=:='
			      (PathChoice,
			       'relaxed') ->
			let <_cor7> =
			    catch
				let <_cor6> =
				    %% Line 785
				    call 'filename':'split'
					(Dir)
				in  %% Line 785
				    call 'lists':'reverse'
					(_cor6)
			in  %% Line 785
			    case _cor7 of
			      %% Line 786
			      <{'EXIT',_cor43}> when 'true' ->
				  %% Line 787
				  {'error','bad_directory'}
			      %% Line 788
			      <[[101|[98|[105|[110]]]]|[App|[]]]> when 'true' ->
				  let <_cor8> =
				      %% Line 789
				      call 'erlang':'++'
					  (App, ArchiveExt)
				  in  let <Dir2> =
					  %% Line 789
					  call 'filename':'join'
					      ([_cor8|[App|[[101|[98|[105|[110]]]]]]])
				      in  %% Line 790
					  case call 'erl_prim_loader':'read_file_info'
						   (Dir2) of
					    %% Line 791
					    <{'ok',{'file_info',_cor44,'directory',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}}> when 'true' ->
						%% Line 792
						apply 'do_check_path'/4
						    (Tail, PathChoice, ArchiveExt, [Dir2|Acc])
					    %% Line 793
					    <_cor56> when 'true' ->
						%% Line 794
						{'error','bad_directory'}
					  end
			      %% Line 796
			      <[[101|[98|[105|[110]]]]|[App|[OptArchive|RevTop]]]> when 'true' ->
				  let <Ext> =
				      %% Line 797
				      call 'filename':'extension'
					  (OptArchive)
				  in  let <Base> =
					  %% Line 798
					  call 'filename':'basename'
					      (OptArchive, Ext)
				      in  let <_cor20> =
					      %% Line 800
					      case <> of
						%% Line 801
						<>
						    when let <_cor13> =
							  call 'erlang':'=:='
							      (Ext, ArchiveExt)
						      in  let <_cor14> =
							      call 'erlang':'=:='
								  (Base, App)
							  in  call 'erlang':'and'
								  (_cor13, _cor14) ->
						    let <Top> =
							%% Line 803
							call 'lists':'reverse'
							    (RevTop)
						    in  let <_cor16> =
							    %% Line 804
							    call 'erlang':'++'
								(Top, [App|[[101|[98|[105|[110]]]]]])
							in  %% Line 804
							    call 'filename':'join'
								(_cor16)
						%% Line 805
						<>
						    when call 'erlang':'=:='
							  (Ext,
							   ArchiveExt) ->
						    %% Line 807
						    {'error','bad_directory'}
						%% Line 808
						<> when 'true' ->
						    let <Top> =
							%% Line 810
							call 'lists':'reverse'
							    ([OptArchive|RevTop])
						    in  let <_cor18> =
							    %% Line 811
							    call 'erlang':'++'
								(App, ArchiveExt)
							in  let <_cor19> =
								%% Line 811
								call 'erlang':'++'
								    (Top, [_cor18|[App|[[101|[98|[105|[110]]]]]]])
							    in  %% Line 811
								call 'filename':'join'
								    (_cor19)
					      end
					  in  %% Line 813
					      case call 'erl_prim_loader':'read_file_info'
						       (_cor20) of
						%% Line 814
						<{'ok',{'file_info',_cor57,'directory',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}}> when 'true' ->
						    %% Line 815
						    apply 'do_check_path'/4
							(Tail, PathChoice, ArchiveExt, [_cor20|Acc])
						%% Line 816
						<_cor69> when 'true' ->
						    %% Line 817
						    {'error','bad_directory'}
					      end
			      %% Line 819
			      <_cor70> when 'true' ->
				  %% Line 820
				  {'error','bad_directory'}
			    end
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'do_check_path',4}}] )
	    -| ['compiler_generated'] )
	end
'add_path'/4 =
    %% Line 827
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Where,Dir,Path,NameDb>
	      when call 'erlang':'is_atom'
		    (Dir) ->
	      let <_cor4> =
		  %% Line 828
		  call 'erlang':'atom_to_list'
		      (Dir)
	      in  %% Line 828
		  apply 'add_path'/4
		      (Where, _cor4, Path, NameDb)
	  %% Line 829
	  <Where,Dir0,Path,NameDb>
	      when call 'erlang':'is_list'
		    (Dir0) ->
	      %% Line 830
	      case apply 'int_list'/1
		       (Dir0) of
		%% Line 831
		<'true'> when 'true' ->
		    let <Dir> =
			%% Line 832
			call 'filename':'join'
			    ([Dir0|[]])
		    in  %% Line 833
			case apply 'check_path'/1
				 ([Dir|[]]) of
			  %% Line 834
			  <{'ok',[NewDir|[]]}> when 'true' ->
			      let <_cor6> =
				  %% Line 835
				  apply 'do_add'/4
				      (Where, NewDir, Path, NameDb)
			      in  %% Line 835
				  {'true',_cor6}
			  %% Line 836
			  <Error> when 'true' ->
			      %% Line 837
			      {Error,Path}
			end
		%% Line 839
		<'false'> when 'true' ->
		    %% Line 840
		    {{'error','bad_directory'},Path}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 842
	  <_cor13,_cor14,Path,_cor15> when 'true' ->
	      %% Line 843
	      {{'error','bad_directory'},Path}
	end
'do_add'/4 =
    %% Line 852
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'first',Dir,Path,NameDb> when 'true' ->
	      do  %% Line 853
		  apply 'update'/2
		      (Dir, NameDb)
		  let <_cor4> =
		      %% Line 854
		      call 'lists':'delete'
			  (Dir, Path)
		  in  %% Line 854
		      [Dir|_cor4]
	  %% Line 855
	  <'last',Dir,Path,NameDb> when 'true' ->
	      %% Line 856
	      case call 'lists':'member'
		       (Dir, Path) of
		%% Line 857
		<'true'> when 'true' ->
		    %% Line 858
		    Path
		%% Line 859
		<'false'> when 'true' ->
		    do  %% Line 860
			apply 'maybe_update'/2
			    (Dir, NameDb)
			%% Line 861
			call 'erlang':'++'
			    (Path, [Dir|[]])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'do_add',4}}] )
	    -| ['compiler_generated'] )
	end
'maybe_update'/2 =
    %% Line 865
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 866
	    apply 'get_name'/1
		(_cor1)
	in  let <_cor4> =
		%% Line 866
		apply 'lookup_name'/2
		    (_cor3, _cor0)
	    in  %% Line 866
		( case <> of
		    ( <>
			  when call 'erlang':'=:='
				(_cor4,
				 'false') ->
			  apply 'update'/2
			      (_cor1, _cor0)
		      -| ['compiler_generated'] )
		    ( <> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'update'/2 =
    %% Line 868
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Dir,'false'> when 'true' ->
	      %% Line 869
	      'true'
	  %% Line 870
	  <Dir,NameDb> when 'true' ->
	      %% Line 871
	      apply 'replace_name'/2
		  (Dir, NameDb)
	end
'set_path'/3 =
    %% Line 876
    fun (_cor2,_cor1,_cor0) ->
	let <NewPath> =
	    %% Line 877
	    apply 'normalize'/1
		(_cor2)
	in  %% Line 878
	    case apply 'check_path'/1
		     (NewPath) of
	      %% Line 879
	      <{'ok',NewPath2}> when 'true' ->
		  do  %% Line 880
		      call 'ets':'delete'
			  (_cor0)
		      let <NewDb> =
			  %% Line 881
			  apply 'init_namedb'/1
			      (NewPath2)
		      in  %% Line 882
			  {'true',NewPath2,NewDb}
	      %% Line 883
	      <Error> when 'true' ->
		  %% Line 884
		  {Error,_cor1,_cor0}
	    end
'normalize'/1 =
    %% Line 892
    fun (_cor0) ->
	case _cor0 of
	  <[P|Path]>
	      when call 'erlang':'is_atom'
		    (P) ->
	      let <_cor1> =
		  %% Line 893
		  call 'erlang':'atom_to_list'
		      (P)
	      in  %% Line 893
		  apply 'normalize'/1
		      ([_cor1|Path])
	  %% Line 894
	  <[P|Path]>
	      when call 'erlang':'is_list'
		    (P) ->
	      %% Line 895
	      case apply 'int_list'/1
		       (P) of
		%% Line 896
		<'true'> when 'true' ->
		    let <_cor2> =
			call 'filename':'join'
			    ([P|[]])
		    in  let <_cor3> =
			    apply 'normalize'/1
				(Path)
			in  [_cor2|_cor3]
		%% Line 897
		<'false'> when 'true' ->
		    let <_cor4> =
			apply 'normalize'/1
			    (Path)
		    in  [P|_cor4]
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 899
	  <[P|Path]> when 'true' ->
	      let <_cor6> =
		  %% Line 900
		  apply 'normalize'/1
		      (Path)
	      in  %% Line 900
		  [P|_cor6]
	  %% Line 901
	  <[]> when 'true' ->
	      %% Line 902
	      []
	  %% Line 903
	  <Other> when 'true' ->
	      %% Line 904
	      Other
	end
'init_namedb'/1 =
    %% Line 909
    fun (_cor0) ->
	let <Db> =
	    %% Line 910
	    call 'ets':'new'
		('code_names', ['private'])
	in  let <_cor2> =
		%% Line 911
		call 'lists':'reverse'
		    (_cor0)
	    in  do  %% Line 911
		    apply 'init_namedb'/2
			(_cor2, Db)
		    %% Line 912
		    Db
'init_namedb'/2 =
    %% Line 914
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[P|Path],Db> when 'true' ->
	      do  %% Line 915
		  apply 'insert_name'/2
		      (P, Db)
		  %% Line 916
		  apply 'init_namedb'/2
		      (Path, Db)
	  %% Line 917
	  <[],_cor4> when 'true' ->
	      %% Line 918
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'init_namedb',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_name'/2 =
    %% Line 928
    fun (_cor1,_cor0) ->
	%% Line 929
	case apply 'get_name'/1
		 (_cor1) of
	  %% Line 930
	  <_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      'false'
	  %% Line 931
	  <Name> when 'true' ->
	      apply 'insert_name'/3
		  (Name, _cor1, _cor0)
	end
'insert_name'/3 =
    %% Line 934
    fun (_cor2,_cor1,_cor0) ->
	let <AppDir> =
	    %% Line 935
	    apply 'del_ebin'/1
		(_cor1)
	in  %% Line 936
	    case apply 'archive_subdirs'/1
		     (AppDir) of
	      <{Base,SubDirs}> when 'true' ->
		  do  %% Line 937
		      call 'ets':'insert'
			  (_cor0, {_cor2,AppDir,Base,SubDirs})
		      %% Line 938
		      'true'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'archive_subdirs'/1 =
    %% Line 940
    fun (_cor0) ->
	let <IsDir> =
	    %% Line 942
	    ( fun (_cor3) ->
		  let <File> =
		      %% Line 943
		      call 'filename':'join'
			  ([_cor0|[_cor3|[]]])
		  in  %% Line 944
		      case call 'erl_prim_loader':'read_file_info'
			       (File) of
			%% Line 945
			<{'ok',{'file_info',_cor9,'directory',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}}> when 'true' ->
			    %% Line 946
			    'false'
			%% Line 947
			<_cor21> when 'true' ->
			    %% Line 948
			    'true'
		      end
	      -| [{'id',{0,0,'-archive_subdirs/1-fun-0-'}}] )
	in  %% Line 951
	    case apply 'all_archive_subdirs'/1
		     (_cor0) of
	      <{Base,ArchiveDirs}> when 'true' ->
		  let <_cor7> =
		      %% Line 952
		      call 'lists':'filter'
			  (IsDir, ArchiveDirs)
		  in  %% Line 952
		      {Base,_cor7}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'all_archive_subdirs'/1 =
    %% Line 954
    fun (_cor0) ->
	let <Ext> =
	    %% Line 955
	    apply 'archive_extension'/0
		()
	in  let <Base> =
		%% Line 956
		call 'filename':'basename'
		    (_cor0)
	    in  let <_cor8> =
		    %% Line 958
		    case apply 'split'/2
			     (Base, [45]) of
		      %% Line 959
		      <Toks = [_cor12|[_cor13|_cor14]]> when 'true' ->
			  let <_cor3> =
			      %% Line 960
			      call 'erlang':'length'
				  (Toks)
			  in  let <_cor4> =
				  %% Line 960
				  call 'erlang':'-'
				      (_cor3, 1)
			      in  let <_cor5> =
				      %% Line 960
				      call 'lists':'sublist'
					  (Toks, _cor4)
				  in  let <Base2> =
					  %% Line 960
					  apply 'join'/2
					      (_cor5, [45])
				      in  %% Line 961
					  [Base2|[Base|[]]]
		      %% Line 962
		      <_cor15> when 'true' ->
			  %% Line 963
			  [Base|[]]
		    end
		in  let <_cor10> =
			%% Line 965
			call 'erlang':'++'
			    (_cor0, Ext)
		    in  %% Line 965
			apply 'try_archive_subdirs'/3
			    (_cor10, Base, _cor8)
'try_archive_subdirs'/3 =
    %% Line 967
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Archive,Base,[Dir|Dirs]> when 'true' ->
	      let <ArchiveDir> =
		  %% Line 968
		  call 'filename':'join'
		      ([Archive|[Dir|[]]])
	      in  %% Line 969
		  case call 'erl_prim_loader':'list_dir'
			   (ArchiveDir) of
		    %% Line 970
		    <{'ok',Files}> when 'true' ->
			let <IsDir> =
			    %% Line 972
			    ( fun (_cor6) ->
				  let <File> =
				      %% Line 973
				      call 'filename':'join'
					  ([ArchiveDir|[_cor6|[]]])
				  in  %% Line 974
				      case call 'erl_prim_loader':'read_file_info'
					       (File) of
					%% Line 975
					<{'ok',{'file_info',_cor14,'directory',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}}> when 'true' ->
					    %% Line 976
					    'true'
					%% Line 977
					<_cor26> when 'true' ->
					    %% Line 978
					    'false'
				      end
			      -| [{'id',{0,0,'-try_archive_subdirs/3-fun-0-'}}] )
			in  let <_cor9> =
				%% Line 981
				call 'lists':'filter'
				    (IsDir, Files)
			    in  %% Line 981
				{Dir,_cor9}
		    %% Line 982
		    <_cor27> when 'true' ->
			%% Line 983
			apply 'try_archive_subdirs'/3
			    (Archive, Base, Dirs)
		  end
	  %% Line 985
	  <_X_Archive,Base,[]> when 'true' ->
	      %% Line 986
	      {Base,[]}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'try_archive_subdirs',3}}] )
	    -| ['compiler_generated'] )
	end
'del_path'/3 =
    %% Line 993
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		let <_cor3> =
		    %% Line 994
		    apply 'to_list'/1
			(_cor2)
		in  %% Line 994
		    call 'filename':'join'
			([_cor3|[]])
	in  %% Line 994
	    case _cor4 of
	      %% Line 995
	      <{'EXIT',_cor10}> when 'true' ->
		  %% Line 996
		  {{'error','bad_name'},_cor1}
	      %% Line 997
	      <Name> when 'true' ->
		  %% Line 998
		  case apply 'del_path1'/3
			   (Name, _cor1, _cor0) of
		    %% Line 999
		    <_cor11>
			when call 'erlang':'=:='
			      (_cor11,
			       _cor1) ->
			%% Line 1000
			{'false',_cor1}
		    %% Line 1001
		    <NewPath> when 'true' ->
			%% Line 1002
			{'true',NewPath}
		  end
	    end
'del_path1'/3 =
    %% Line 1006
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[P|Path],NameDb> when 'true' ->
	      %% Line 1007
	      case apply 'get_name'/1
		       (P) of
		%% Line 1008
		<_cor10>
		    when call 'erlang':'=:='
			  (_cor10,
			   Name) ->
		    do  %% Line 1009
			apply 'delete_name'/2
			    (Name, NameDb)
			do  %% Line 1010
			    apply 'insert_old_shadowed'/3
				(Name, Path, NameDb)
			    %% Line 1011
			    Path
		%% Line 1012
		<_cor11>
		    when call 'erlang':'=:='
			  (Name,
			   P) ->
		    do  %% Line 1013
			case apply 'delete_name_dir'/2
				 (Name, NameDb) of
			  %% Line 1014
			  <'true'> when 'true' ->
			      let <_cor3> =
				  apply 'get_name'/1
				      (Name)
			      in  apply 'insert_old_shadowed'/3
				      (_cor3, Path, NameDb)
			  %% Line 1015
			  <'false'> when 'true' ->
			      'ok'
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
			%% Line 1017
			Path
		%% Line 1018
		<_cor12> when 'true' ->
		    let <_cor5> =
			%% Line 1019
			apply 'del_path1'/3
			    (Name, Path, NameDb)
		    in  %% Line 1019
			[P|_cor5]
	      end
	  %% Line 1021
	  <_cor13,[],_cor14> when 'true' ->
	      %% Line 1022
	      []
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'del_path1',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_old_shadowed'/3 =
    %% Line 1024
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[P|Path],NameDb> when 'true' ->
	      %% Line 1025
	      case apply 'get_name'/1
		       (P) of
		%% Line 1026
		<_cor7>
		    when call 'erlang':'=:='
			  (_cor7,
			   Name) ->
		    apply 'insert_name'/3
			(Name, P, NameDb)
		%% Line 1027
		<_cor8> when 'true' ->
		    apply 'insert_old_shadowed'/3
			(Name, Path, NameDb)
	      end
	  %% Line 1029
	  <_cor9,[],_cor10> when 'true' ->
	      %% Line 1030
	      'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'insert_old_shadowed',3}}] )
	    -| ['compiler_generated'] )
	end
'replace_path'/4 =
    %% Line 1036
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 1037
		apply 'check_pars'/2
		    (_cor3, _cor2)
	in  %% Line 1037
	    case _cor4 of
	      %% Line 1038
	      <{'ok',N,D}> when 'true' ->
		  let <_cor5> =
		      %% Line 1039
		      apply 'replace_path1'/4
			  (N, D, _cor1, _cor0)
		  in  %% Line 1039
		      {'true',_cor5}
	      %% Line 1040
	      <{'EXIT',_cor11}> when 'true' ->
		  %% Line 1041
		  {{'error',{'badarg',[_cor3|[_cor2|[]]]}},_cor1}
	      %% Line 1042
	      <Error> when 'true' ->
		  %% Line 1043
		  {Error,_cor1}
	    end
'replace_path1'/4 =
    %% Line 1046
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Dir,[P|Path],NameDb> when 'true' ->
	      %% Line 1047
	      case apply 'get_name'/1
		       (P) of
		%% Line 1048
		<_cor10>
		    when call 'erlang':'=:='
			  (_cor10,
			   Name) ->
		    do  %% Line 1049
			apply 'insert_name'/3
			    (Name, Dir, NameDb)
			%% Line 1050
			[Dir|Path]
		%% Line 1051
		<_cor11> when 'true' ->
		    let <_cor4> =
			%% Line 1052
			apply 'replace_path1'/4
			    (Name, Dir, Path, NameDb)
		    in  %% Line 1052
			[P|_cor4]
	      end
	  %% Line 1054
	  <Name,Dir,[],NameDb> when 'true' ->
	      do  %% Line 1055
		  apply 'insert_name'/3
		      (Name, Dir, NameDb)
		  %% Line 1056
		  [Dir|[]]
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'replace_path1',4}}] )
	    -| ['compiler_generated'] )
	end
'check_pars'/2 =
    %% Line 1058
    fun (_cor1,_cor0) ->
	let <N> =
	    %% Line 1059
	    apply 'to_list'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 1060
		apply 'to_list'/1
		    (_cor0)
	    in  let <D> =
		    %% Line 1060
		    call 'filename':'join'
			([_cor3|[]])
		in  %% Line 1061
		    case apply 'get_name'/1
			     (_cor0) of
		      %% Line 1062
		      <_cor9>
			  when call 'erlang':'=:='
				(_cor9,
				 N) ->
			  %% Line 1063
			  case apply 'check_path'/1
				   ([D|[]]) of
			    %% Line 1064
			    <{'ok',[NewD|[]]}> when 'true' ->
				%% Line 1065
				{'ok',N,NewD}
			    %% Line 1066
			    <Error> when 'true' ->
				%% Line 1067
				Error
			  end
		      %% Line 1069
		      <_cor10> when 'true' ->
			  %% Line 1070
			  {'error','bad_name'}
		    end
'del_ebin'/1 =
    %% Line 1073
    fun (_cor0) ->
	%% Line 1074
	case call 'filename':'basename'
		 (_cor0) of
	  %% Line 1075
	  <[101|[98|[105|[110]]]]> when 'true' ->
	      let <Dir2> =
		  %% Line 1076
		  call 'filename':'dirname'
		      (_cor0)
	      in  let <Dir3> =
		      %% Line 1077
		      call 'filename':'dirname'
			  (Dir2)
		  in  let <Ext> =
			  %% Line 1078
			  apply 'archive_extension'/0
			      ()
		      in  %% Line 1079
			  case call 'filename':'extension'
				   (Dir3) of
			    %% Line 1080
			    <E>
				when call 'erlang':'=:='
				      (E,
				       Ext) ->
				let <_cor4> =
				    %% Line 1082
				    call 'filename':'dirname'
					(Dir3)
				in  let <_cor5> =
					%% Line 1083
					call 'filename':'basename'
					    (Dir3, Ext)
				    in  %% Line 1082
					call 'filename':'join'
					    ([_cor4|%% Line 1083
						    [_cor5|[]]])
			    %% Line 1084
			    <_cor9> when 'true' ->
				%% Line 1085
				Dir2
			  end
	  %% Line 1087
	  <_cor10> when 'true' ->
	      _cor0
	end
'replace_name'/2 =
    %% Line 1091
    fun (_cor1,_cor0) ->
	%% Line 1092
	case apply 'get_name'/1
		 (_cor1) of
	  %% Line 1093
	  <_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 1094
	      'false'
	  %% Line 1095
	  <Name> when 'true' ->
	      do  %% Line 1096
		  apply 'delete_name'/2
		      (Name, _cor0)
		  %% Line 1097
		  apply 'insert_name'/3
		      (Name, _cor1, _cor0)
	end
'delete_name'/2 =
    %% Line 1100
    fun (_cor1,_cor0) ->
	%% Line 1101
	call 'ets':'delete'
	    (_cor0, _cor1)
'delete_name_dir'/2 =
    %% Line 1103
    fun (_cor1,_cor0) ->
	%% Line 1104
	case apply 'get_name'/1
		 (_cor1) of
	  %% Line 1105
	  <_cor7>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      'false'
	  %% Line 1106
	  <Name> when 'true' ->
	      let <Dir0> =
		  %% Line 1107
		  apply 'del_ebin'/1
		      (_cor1)
	      in  %% Line 1108
		  case apply 'lookup_name'/2
			   (Name, _cor0) of
		    %% Line 1109
		    <{'ok',_cor8,_X_Base,_X_SubDirs}>
			when call 'erlang':'=:='
			      (_cor8,
			       Dir0) ->
			do  %% Line 1110
			    call 'ets':'delete'
				(_cor0, Name)
			    %% Line 1111
			    'true'
		    %% Line 1112
		    <_cor9> when 'true' ->
			'false'
		  end
	end
'lookup_name'/2 =
    %% Line 1116
    fun (_cor1,_cor0) ->
	%% Line 1117
	case call 'ets':'lookup'
		 (_cor0, _cor1) of
	  %% Line 1118
	  <[{_cor5,Dir,Base,SubDirs}|[]]>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      {'ok',Dir,Base,SubDirs}
	  %% Line 1119
	  <_cor6> when 'true' ->
	      'false'
	end
'do_dir'/3 =
    %% Line 1126
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Root,'lib_dir',_cor17> when 'true' ->
	      %% Line 1127
	      call 'filename':'append'
		  (Root, [108|[105|[98]]])
	  %% Line 1128
	  <Root,'root_dir',_cor18> when 'true' ->
	      %% Line 1129
	      Root
	  %% Line 1130
	  <_X_Root,'compiler_dir',NameDb> when 'true' ->
	      %% Line 1131
	      case apply 'lookup_name'/2
		       ([99|[111|[109|[112|[105|[108|[101|[114]]]]]]]], NameDb) of
		%% Line 1132
		<{'ok',Dir,_X_Base,_X_SubDirs}> when 'true' ->
		    Dir
		%% Line 1133
		<_cor19> when 'true' ->
		    []
	      end
	  %% Line 1135
	  <_X_Root,{'lib_dir',Name},NameDb> when 'true' ->
	      let <_cor5> =
		  catch
		      let <_cor4> =
			  %% Line 1136
			  apply 'to_list'/1
			      (Name)
		      in  %% Line 1136
			  apply 'lookup_name'/2
			      (_cor4, NameDb)
	      in  %% Line 1136
		  case _cor5 of
		    %% Line 1137
		    <{'ok',Dir,_X_Base,_X_SubDirs}> when 'true' ->
			Dir
		    %% Line 1138
		    <_cor20> when 'true' ->
			{'error','bad_name'}
		  end
	  %% Line 1140
	  <_X_Root,{'lib_dir',Name,SubDir0},NameDb> when 'true' ->
	      let <SubDir> =
		  %% Line 1141
		  call 'erlang':'atom_to_list'
		      (SubDir0)
	      in  let <_cor9> =
		      catch
			  let <_cor8> =
			      %% Line 1142
			      apply 'to_list'/1
				  (Name)
			  in  %% Line 1142
			      apply 'lookup_name'/2
				  (_cor8, NameDb)
		  in  %% Line 1142
		      case _cor9 of
			%% Line 1143
			<{'ok',Dir,Base,SubDirs}> when 'true' ->
			    %% Line 1144
			    case call 'lists':'member'
				     (SubDir, SubDirs) of
			      %% Line 1145
			      <'true'> when 'true' ->
				  let <_cor10> =
				      %% Line 1147
				      apply 'archive_extension'/0
					  ()
				  in  let <_cor11> =
					  %% Line 1147
					  call 'erlang':'++'
					      (Dir, _cor10)
				      in  %% Line 1147
					  call 'filename':'join'
					      ([_cor11|%% Line 1148
						       [Base|%% Line 1149
							     [SubDir|[]]]])
			      %% Line 1150
			      <'false'> when 'true' ->
				  %% Line 1152
				  call 'filename':'join'
				      ([Dir|[SubDir|[]]])
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
			%% Line 1154
			<_cor21> when 'true' ->
			    %% Line 1155
			    {'error','bad_name'}
		      end
	  %% Line 1157
	  <_X_Root,{'priv_dir',Name},NameDb> when 'true' ->
	      %% Line 1158
	      apply 'do_dir'/3
		  (_X_Root, {'lib_dir',Name,'priv'}, NameDb)
	  %% Line 1159
	  <_cor22,_cor23,_cor24> when 'true' ->
	      %% Line 1160
	      'bad request to code'
	end
'stick_dir'/3 =
    %% Line 1162
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1163
	case call 'erl_prim_loader':'list_dir'
		 (_cor2) of
	  %% Line 1164
	  <{'ok',Listing}> when 'true' ->
	      let <_cor3> =
		  %% Line 1165
		  apply 'objfile_extension'/0
		      ()
	      in  let <Mods> =
		      %% Line 1165
		      apply 'get_mods'/2
			  (Listing, _cor3)
		  in  %% Line 1166
		      ( case _cor0 of
			  ( <( {'state',_cor19,_cor20,_cor21,_rec17,_cor22,_cor23,_cor24,_cor25}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 1167
				case _cor1 of
				  %% Line 1168
				  <'true'> when 'true' ->
				      let <_cor10> =
					  %% Line 1169
					  ( fun (_cor8) ->
						call 'ets':'insert'
						    (_rec17, {{'sticky',_cor8},'true'})
					    -| [{'id',{0,0,'-stick_dir/3-fun-0-'}}] )
				      in  %% Line 1169
					  call 'lists':'foreach'
					      (_cor10, Mods)
				  %% Line 1170
				  <'false'> when 'true' ->
				      let <_cor13> =
					  %% Line 1171
					  ( fun (_cor11) ->
						call 'ets':'delete'
						    (_rec17, {'sticky',_cor11})
					    -| [{'id',{0,0,'-stick_dir/3-fun-1-'}}] )
				      in  %% Line 1171
					  call 'lists':'foreach'
					      (_cor13, Mods)
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor14})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_cor26> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 1173
	  <Error> when 'true' ->
	      %% Line 1174
	      Error
	end
'stick_mod'/3 =
    %% Line 1177
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1178
	( case _cor0 of
	    ( <( {'state',_cor10,_cor11,_cor12,_rec18,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1179
		  case _cor1 of
		    %% Line 1180
		    <'true'> when 'true' ->
			%% Line 1181
			call 'ets':'insert'
			    (_rec18, {{'sticky',_cor2},'true'})
		    %% Line 1182
		    <'false'> when 'true' ->
			%% Line 1183
			call 'ets':'delete'
			    (_rec18, {'sticky',_cor2})
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_mods'/2 =
    %% Line 1186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[File|Tail],Extension> when 'true' ->
	      %% Line 1187
	      case call 'filename':'extension'
		       (File) of
		%% Line 1188
		<_cor8>
		    when call 'erlang':'=:='
			  (_cor8,
			   Extension) ->
		    let <_cor2> =
			%% Line 1189
			call 'filename':'basename'
			    (File, Extension)
		    in  let <_cor3> =
			    %% Line 1189
			    call 'erlang':'list_to_atom'
				(_cor2)
			in  let <_cor4> =
				%% Line 1190
				apply 'get_mods'/2
				    (Tail, Extension)
			    in  %% Line 1189
				[_cor3|_cor4]
		%% Line 1191
		<_cor9> when 'true' ->
		    %% Line 1192
		    apply 'get_mods'/2
			(Tail, Extension)
	      end
	  %% Line 1194
	  <[],_cor10> when 'true' ->
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_mods',2}}] )
	    -| ['compiler_generated'] )
	end
'is_sticky'/2 =
    %% Line 1196
    fun (_cor1,_cor0) ->
	%% Line 1197
	( case call 'erlang':'module_loaded'
		   (_cor1) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor3> =
		      call 'ets':'lookup'
			  (_cor0, {'sticky',_cor1})
		  in  call 'erlang':'=/='
			  (_cor3, [])
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor2> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor2}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_paths'/4 =
    %% Line 1199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Where,[Dir|Tail],Path,NameDb> when 'true' ->
	      %% Line 1200
	      case apply 'add_path'/4
		       (Where, Dir, Path, NameDb) of
		<{_cor9,NPath}> when 'true' ->
		    %% Line 1201
		    apply 'add_paths'/4
			(Where, Tail, NPath, NameDb)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1202
	  <_cor10,_cor11,Path,_cor12> when 'true' ->
	      %% Line 1203
	      {'ok',Path}
	end
'do_load_binary'/5 =
    %% Line 1205
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 1206
	    ( case apply 'modp'/1
		       (_cor4) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      ( case apply 'modp'/1
				 (_cor3) of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				call 'erlang':'is_binary'
				    (_cor2)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor6> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor6}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor5}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1206
	    case _cor9 of
	      %% Line 1207
	      <'true'> when 'true' ->
		  let <_cor10> =
		      %% Line 1208
		      apply 'to_atom'/1
			  (_cor4)
		  in  do  %% Line 1208
			  case call 'erlang':'module_loaded'
				   (_cor10) of
			    %% Line 1209
			    <'true'> when 'true' ->
				apply 'do_purge'/1
				    (_cor4)
			    %% Line 1210
			    <'false'> when 'true' ->
				'ok'
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
			  %% Line 1212
			  apply 'try_load_module'/5
			      (_cor3, _cor4, _cor2, _cor1, _cor0)
	      %% Line 1213
	      <'false'> when 'true' ->
		  %% Line 1214
		  {'reply',{'error','badarg'},_cor0}
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor12})
		-| ['compiler_generated'] )
	    end
'modp'/1 =
    %% Line 1217
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      'true'
	  %% Line 1218
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      apply 'int_list'/1
		  (List)
	  %% Line 1219
	  <_cor2> when 'true' ->
	      'false'
	end
'load_abs'/4 =
    %% Line 1221
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Ext> =
	    %% Line 1222
	    apply 'objfile_extension'/0
		()
	in  let <FileName0> =
		%% Line 1223
		call 'lists':'concat'
		    ([_cor3|[Ext|[]]])
	    in  let <FileName> =
		    %% Line 1224
		    apply 'absname'/1
			(FileName0)
		in  let <_cor8> =
			%% Line 1225
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (_cor2,
				     []) ->
			      let <_cor7> =
				  %% Line 1226
				  call 'filename':'basename'
				      (FileName0, Ext)
			      in  %% Line 1226
				  call 'erlang':'list_to_atom'
				      (_cor7)
			  %% Line 1227
			  <> when 'true' ->
			      _cor2
			end
		    in  %% Line 1230
			case call 'erl_prim_loader':'get_file'
				 (FileName) of
			  %% Line 1231
			  <{'ok',Bin,_cor15}> when 'true' ->
			      %% Line 1232
			      apply 'try_load_module'/5
				  (FileName, _cor8, Bin, _cor1, _cor0)
			  %% Line 1233
			  <'error'> when 'true' ->
			      %% Line 1234
			      {'reply',{'error','nofile'},_cor0}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
'try_load_module'/4 =
    %% Line 1237
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1238
	    apply 'to_list'/1
		(_cor3)
	in  let <_cor4> =
		%% Line 1239
		apply 'objfile_extension'/0
		    ()
	    in  let <_cor6> =
		    %% Line 1238
		    call 'erlang':'++'
			(_cor5, _cor4)
		in  let <File> =
			%% Line 1238
			call 'filename':'append'
			    (_cor2, _cor6)
		    in  %% Line 1240
			case call 'erl_prim_loader':'get_file'
				 (File) of
			  %% Line 1241
			  <'error'> when 'true' ->
			      %% Line 1242
			      {'reply','error',_cor0}
			  %% Line 1243
			  <{'ok',Binary,FName}> when 'true' ->
			      let <_cor8> =
				  %% Line 1244
				  apply 'absname'/1
				      (FName)
			      in  %% Line 1244
				  apply 'try_load_module'/5
				      (_cor8, _cor3, Binary, _cor1, _cor0)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
'try_load_module'/5 =
    %% Line 1247
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <File,Mod,Bin,Caller = {From,_cor12},St0> when 'true' ->
	      let <M> =
		  %% Line 1248
		  apply 'to_atom'/1
		      (Mod)
	      in  %% Line 1249
		  case apply 'pending_on_load'/3
			   (M, From, St0) of
		    %% Line 1250
		    <'no'> when 'true' ->
			%% Line 1251
			apply 'try_load_module_1'/5
			    (File, M, Bin, Caller, St0)
		    %% Line 1252
		    <{'yes',St}> when 'true' ->
			%% Line 1253
			{'noreply',St}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'try_load_module',5}}] )
	    -| ['compiler_generated'] )
	end
'try_load_module_1'/5 =
    %% Line 1256
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <File,Mod,Bin,Caller,St = {'state',_cor14,_cor15,_cor16,Db,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 1257
	      case apply 'is_sticky'/2
		       (Mod, Db) of
		%% Line 1258
		<'true'> when 'true' ->
		    do  %% Line 1259
			apply 'error_msg'/2
			    ([67|[97|[110|[39|[116|[32|[108|[111|[97|[100|[32|[109|[111|[100|[117|[108|[101|[32|[116|[104|[97|[116|[32|[114|[101|[115|[105|[100|[101|[115|[32|[105|[110|[32|[115|[116|[105|[99|[107|[121|[32|[100|[105|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			%% Line 1260
			{'reply',{'error','sticky_directory'},St}
		%% Line 1261
		<'false'> when 'true' ->
		    let <_cor5> =
			catch
			    %% Line 1262
			    apply 'load_native_code'/2
				(Mod, Bin)
		    in  %% Line 1262
			case _cor5 of
			  %% Line 1263
			  <Module = {'module',_cor21}>
			      when call 'erlang':'=:='
				    (_cor21,
				     Mod) ->
			      do  %% Line 1264
				  call 'ets':'insert'
				      (Db, {Mod,File})
				  %% Line 1265
				  {'reply',Module,St}
			  %% Line 1266
			  <'no_native'> when 'true' ->
			      %% Line 1267
			      case call 'erlang':'load_module'
				       (Mod, Bin) of
				%% Line 1268
				<Module = {'module',_cor22}>
				    when call 'erlang':'=:='
					  (_cor22,
					   Mod) ->
				    do  %% Line 1269
					call 'ets':'insert'
					    (Db, {Mod,File})
					do  %% Line 1270
					    apply 'post_beam_load'/1
						(Mod)
					    %% Line 1271
					    {'reply',Module,St}
				%% Line 1272
				<{'error','on_load'}> when 'true' ->
				    %% Line 1273
				    apply 'handle_on_load'/4
					(Mod, File, Caller, St)
				%% Line 1274
				<Error = {'error',What}> when 'true' ->
				    do  %% Line 1275
					apply 'error_msg'/2
					    ([76|[111|[97|[100|[105|[110|[103|[32|[111|[102|[32|[126|[116|[115|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[What|[]]])
					%% Line 1276
					{'reply',Error,St}
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1278
			  <Error> when 'true' ->
			      do  %% Line 1279
				  apply 'error_msg'/2
				      ([78|[97|[116|[105|[118|[101|[32|[108|[111|[97|[100|[105|[110|[103|[32|[111|[102|[32|[126|[116|[115|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1280
																												   [File|[Error|[]]])
				  %% Line 1281
				  {'reply','ok',St}
			end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'try_load_module_1',5}}] )
	    -| ['compiler_generated'] )
	end
'load_native_code'/2 =
    %% Line 1285
    fun (_cor1,_cor0) ->
	%% Line 1290
	case call 'erlang':'module_loaded'
		 ('hipe_unified_loader') of
	  %% Line 1291
	  <'false'> when 'true' ->
	      %% Line 1292
	      'no_native'
	  %% Line 1293
	  <'true'> when 'true' ->
	      let <Result> =
		  %% Line 1294
		  call 'hipe_unified_loader':'load_native_code'
		      (_cor1, _cor0)
	      in  do  %% Line 1295
		      case Result of
			%% Line 1296
			<{'module',_cor7}> when 'true' ->
			    %% Line 1297
			    call 'erlang':'put'
				('any_native_code_loaded', 'true')
			%% Line 1298
			<_cor8> when 'true' ->
			    'ok'
		      end
		      %% Line 1301
		      Result
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'hipe_result_to_status'/1 =
    %% Line 1304
    fun (_cor0) ->
	%% Line 1305
	case _cor0 of
	  %% Line 1306
	  <{'module',_cor3}> when 'true' ->
	      do  %% Line 1307
		  call 'erlang':'put'
		      ('any_native_code_loaded', 'true')
		  _cor0
	  %% Line 1309
	  <_cor4> when 'true' ->
	      %% Line 1310
	      {'error',_cor0}
	end
'post_beam_load'/1 =
    %% Line 1313
    fun (_cor0) ->
	%% Line 1317
	case call 'erlang':'get'
		 ('any_native_code_loaded') of
	  %% Line 1318
	  <'true'> when 'true' ->
	      call 'hipe_unified_loader':'post_beam_load'
		  (_cor0)
	  %% Line 1319
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'int_list'/1 =
    %% Line 1322
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]>
	      when call 'erlang':'is_integer'
		    (H) ->
	      apply 'int_list'/1
		  (T)
	  %% Line 1323
	  <[_cor2|_cor3]> when 'true' ->
	      'false'
	  %% Line 1324
	  <[]> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'int_list',1}}] )
	    -| ['compiler_generated'] )
	end
'load_file'/3 =
    %% Line 1326
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod0,Caller = {From,_cor8},St0> when 'true' ->
	      let <Mod> =
		  %% Line 1327
		  apply 'to_atom'/1
		      (Mod0)
	      in  %% Line 1328
		  case apply 'pending_on_load'/3
			   (Mod, From, St0) of
		    %% Line 1329
		    <'no'> when 'true' ->
			apply 'load_file_1'/3
			    (Mod, Caller, St0)
		    %% Line 1330
		    <{'yes',St}> when 'true' ->
			{'noreply',St}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'load_file',3}}] )
	    -| ['compiler_generated'] )
	end
'load_file_1'/3 =
    %% Line 1333
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Caller,St = {'state',_cor13,_cor14,Path,_cor15,_cor16,'no_cache',_cor17,_cor18}> when 'true' ->
	      %% Line 1334
	      case apply 'mod_to_bin'/2
		       (Path, Mod) of
		%% Line 1335
		<'error'> when 'true' ->
		    %% Line 1336
		    {'reply',{'error','nofile'},St}
		%% Line 1337
		<{_cor19,Binary,File}>
		    when call 'erlang':'=:='
			  (_cor19,
			   Mod) ->
		    %% Line 1338
		    apply 'try_load_module'/5
			(File, Mod, Binary, Caller, St)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1340
	  <Mod,Caller,St0 = {'state',_cor20,_cor21,_cor22,_cor23,_cor24,Cache,_cor25,_cor26}> when 'true' ->
	      let <Key> = {%% Line 1341
		   'obj',%% Line 1341
			 Mod}
	      in  %% Line 1342
		  case call 'ets':'lookup'
			   (Cache, Key) of
		    %% Line 1343
		    <[]> when 'true' ->
			let <St> =
			    %% Line 1344
			    apply 'rehash_cache'/1
				(St0)
			in  %% Line 1345
			    ( case St of
				( <( {'state',_cor27,_cor28,_cor29,_cor30,_cor31,_rec19,_cor32,_cor33}
				     -| ['compiler_generated'] )> when 'true' ->
				      case call 'ets':'lookup'
					       (_rec19, Key) of
					%% Line 1346
					<[]> when 'true' ->
					    %% Line 1347
					    {'reply',{'error','nofile'},St}
					%% Line 1348
					<[{_cor35,Dir}|[]]>
					    when call 'erlang':'=:='
						  (_cor35,
						   Key) ->
					    %% Line 1349
					    apply 'try_load_module'/4
						(Mod, Dir, Caller, St)
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor8})
					  -| ['compiler_generated'] )
				      end
				  -| ['compiler_generated'] )
				( <_cor34> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1351
		    <[{_cor36,Dir}|[]]>
			when call 'erlang':'=:='
			      (_cor36,
			       Key) ->
			%% Line 1352
			apply 'try_load_module'/4
			    (Mod, Dir, Caller, St0)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'load_file_1',3}}] )
	    -| ['compiler_generated'] )
	end
'mod_to_bin'/2 =
    %% Line 1355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Dir|Tail],Mod> when 'true' ->
	      let <_cor3> =
		  %% Line 1356
		  apply 'to_list'/1
		      (Mod)
	      in  let <_cor2> =
		      %% Line 1356
		      apply 'objfile_extension'/0
			  ()
		  in  let <_cor4> =
			  %% Line 1356
			  call 'erlang':'++'
			      (_cor3, _cor2)
		      in  let <File> =
			      %% Line 1356
			      call 'filename':'append'
				  (Dir, _cor4)
			  in  %% Line 1357
			      case call 'erl_prim_loader':'get_file'
				       (File) of
				%% Line 1358
				<'error'> when 'true' ->
				    %% Line 1359
				    apply 'mod_to_bin'/2
					(Tail, Mod)
				%% Line 1360
				<{'ok',Bin,FName}> when 'true' ->
				    let <_cor6> =
					%% Line 1361
					apply 'absname'/1
					    (FName)
				    in  %% Line 1361
					{Mod,Bin,_cor6}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1363
	  <[],Mod> when 'true' ->
	      let <_cor9> =
		  %% Line 1365
		  apply 'to_list'/1
		      (Mod)
	      in  let <_cor8> =
		      %% Line 1365
		      apply 'objfile_extension'/0
			  ()
		  in  let <File> =
			  %% Line 1365
			  call 'erlang':'++'
			      (_cor9, _cor8)
		      in  %% Line 1366
			  case call 'erl_prim_loader':'get_file'
				   (File) of
			    %% Line 1367
			    <'error'> when 'true' ->
				%% Line 1368
				'error'
			    %% Line 1369
			    <{'ok',Bin,FName}> when 'true' ->
				let <_cor11> =
				    %% Line 1370
				    apply 'absname'/1
					(FName)
				in  %% Line 1370
				    {Mod,Bin,_cor11}
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'mod_to_bin',2}}] )
	    -| ['compiler_generated'] )
	end
'absname'/1 =
    %% Line 1373
    fun (_cor0) ->
	%% Line 1374
	case call 'erl_prim_loader':'get_cwd'
		 () of
	  %% Line 1375
	  <{'ok',Cwd}> when 'true' ->
	      apply 'absname'/2
		  (_cor0, Cwd)
	  %% Line 1376
	  <_X_Error> when 'true' ->
	      _cor0
	end
'absname'/2 =
    %% Line 1379
    fun (_cor1,_cor0) ->
	%% Line 1380
	case call 'filename':'pathtype'
		 (_cor1) of
	  %% Line 1381
	  <'relative'> when 'true' ->
	      %% Line 1382
	      call 'filename':'absname_join'
		  (_cor0, _cor1)
	  %% Line 1383
	  <'absolute'> when 'true' ->
	      let <_cor2> =
		  %% Line 1386
		  call 'filename':'flatten'
		      (_cor1)
	      in  %% Line 1386
		  call 'filename':'join'
		      ([_cor2|[]])
	  %% Line 1387
	  <'volumerelative'> when 'true' ->
	      let <_cor4> =
		  %% Line 1388
		  call 'filename':'split'
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 1388
		      call 'filename':'split'
			  (_cor0)
		  in  %% Line 1388
		      apply 'absname_vr'/3
			  (_cor4, _cor3, _cor0)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'absname_vr'/3 =
    %% Line 1393
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[47]|Rest1],[Volume|_cor11],_X_AbsBase> when 'true' ->
	      %% Line 1395
	      call 'filename':'join'
		  ([Volume|Rest1])
	  %% Line 1396
	  <[[X|[58]]|Rest1],[[_cor12|_cor13]|_cor14],AbsBase>
	      when call 'erlang':'=:='
		    (_cor12,
		     X) ->
	      let <_cor3> =
		  %% Line 1398
		  call 'filename':'join'
		      (Rest1)
	      in  %% Line 1398
		  apply 'absname'/2
		      (_cor3, AbsBase)
	  %% Line 1399
	  <[[X|[58]]|Name],_cor15,_X_AbsBase> when 'true' ->
	      let <_cor5> =
		  %% Line 1402
		  case call 'erl_prim_loader':'get_cwd'
			   ([X|[58]]) of
		    %% Line 1403
		    <{'ok',Dir}> when 'true' ->
			Dir
		    %% Line 1404
		    <'error'> when 'true' ->
			[X|[58|[47]]]
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 1406
		      call 'filename':'join'
			  (Name)
		  in  %% Line 1406
		      apply 'absname'/2
			  (_cor7, _cor5)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'absname_vr',3}}] )
	    -| ['compiler_generated'] )
	end
'do_purge'/1 =
    %% Line 1413
    fun (_cor0) ->
	let <Mod> =
	    %% Line 1414
	    apply 'to_atom'/1
		(_cor0)
	in  %% Line 1415
	    case call 'erlang':'check_old_code'
		     (Mod) of
	      %% Line 1416
	      <'false'> when 'true' ->
		  %% Line 1417
		  'false'
	      %% Line 1418
	      <'true'> when 'true' ->
		  let <_cor2> =
		      %% Line 1419
		      call 'erlang':'processes'
			  ()
		  in  let <Res> =
			  %% Line 1419
			  apply 'check_proc_code'/3
			      (_cor2, Mod, 'true')
		      in  do  %% Line 1420
			      try
				  %% Line 1421
				  call 'erlang':'purge_module'
				      (Mod)
			      of <_cor4> ->
				  _cor4
			      catch <_cor7,_cor6,_cor5> ->
				  %% Line 1423
				  'ignore'
			      %% Line 1425
			      Res
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'do_soft_purge'/1 =
    %% Line 1433
    fun (_cor0) ->
	let <Mod> =
	    %% Line 1434
	    apply 'to_atom'/1
		(_cor0)
	in  %% Line 1435
	    case call 'erlang':'check_old_code'
		     (Mod) of
	      %% Line 1436
	      <'false'> when 'true' ->
		  %% Line 1437
		  'true'
	      %% Line 1438
	      <'true'> when 'true' ->
		  let <_cor2> =
		      %% Line 1439
		      call 'erlang':'processes'
			  ()
		  in  %% Line 1439
		      case apply 'check_proc_code'/3
			       (_cor2, Mod, 'false') of
			%% Line 1440
			<'false'> when 'true' ->
			    %% Line 1441
			    'false'
			%% Line 1442
			<'true'> when 'true' ->
			    do  %% Line 1443
				try
				    %% Line 1444
				    call 'erlang':'purge_module'
					(Mod)
				of <_cor3> ->
				    _cor3
				catch <_cor6,_cor5,_cor4> ->
				    %% Line 1446
				    'ignore'
				%% Line 1448
				'true'
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'check_proc_code'/3 =
    %% Line 1490
    fun (_cor2,_cor1,_cor0) ->
	let <Tag> =
	    %% Line 1491
	    call 'erlang':'make_ref'
		()
	in  let <CpcS> =
		%% Line 1492
		{'cpc_static',_cor0,_cor1,%% Line 1494
					  Tag}
	    in  let <_cor5> =
		    %% Line 1495
		    apply 'cpc_init'/3
			(CpcS, _cor2, 0)
		in  %% Line 1495
		    apply 'check_proc_code'/6
			(CpcS, _cor5, 0, [], {'cpc_kill',[],0,[],'false'}, 'true')
'check_proc_code'/6 =
    %% Line 1497
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'cpc_static','true',_cor30,_cor31},0,0,[],%% Line 1498
						      {'cpc_kill',[],_cor32,[],Killed},%% Line 1499
										       'true'> when 'true' ->
	      %% Line 1502
	      Killed
	  %% Line 1503
	  <{'cpc_static','false',_cor33,_cor34},0,0,[],_X_KillState,Success> when 'true' ->
	      %% Line 1505
	      Success
	  %% Line 1506
	  <CpcS = {'cpc_static','false',_cor35,Tag},NoReq0,NoGcReq0,%% Line 1507
								    [],%% Line 1507
								       _X_KillState,%% Line 1507
										    'false'> when 'true' ->
	      let <NoReq1,NoGcReq1> =
		  %% Line 1510
		  receive
		    %% Line 1511
		    <{'check_process_code',{_cor36,_X_P,GC},_X_Res}>
			when call 'erlang':'=:='
			      (_cor36,
			       Tag) ->
			%% Line 1512
			case GC of
			  %% Line 1513
			  <'false'> when 'true' ->
			      let <_cor6> =
				  call 'erlang':'-'
				      (NoReq0, 1)
			      in  <_cor6,NoGcReq0>
			  %% Line 1514
			  <'true'> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'-'
				      (NoGcReq0, 1)
			      in  <NoReq0,_cor7>
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		  after 'infinity' ->
		    'true'
	      in  %% Line 1517
		  apply 'check_proc_code'/6
		      (CpcS, NoReq1, NoGcReq1, [], _X_KillState, 'false')
	  %% Line 1518
	  <CpcS = {'cpc_static',_cor37,_cor38,Tag},NoReq0,NoGcReq0,NeedGC0,%% Line 1519
									   KillState0,%% Line 1519
										      Success> when 'true' ->
	      let <NoGcReq1,NeedGC1> =
		  %% Line 1522
		  case call 'erlang':'<'
			   (NoGcReq0, 2) of
		    %% Line 1523
		    <GcOpAllowed>
			when let <_cor11> =
			      call 'erlang':'=:='
				  (GcOpAllowed, 'false')
			  in  let <_cor12> =
				  %% Line 1524
				  call 'erlang':'=:='
				      (NeedGC0, [])
			      in  call 'erlang':'or'
				      (_cor11, _cor12) ->
			%% Line 1525
			<NoGcReq0,NeedGC0>
		    %% Line 1526
		    <_cor39> when 'true' ->
			let <_cor14> =
			    %% Line 1527
			    call 'erlang':'+'
				(NoGcReq0, 1)
			in  let <_cor13> =
				%% Line 1527
				apply 'cpc_request_gc'/2
				    (CpcS, NeedGC0)
			    in  <_cor14,_cor13>
		  end
	      in  %% Line 1531
		  case apply 'cpc_recv'/4
			   (Tag, %% Line 1532
				 NoReq0, %% Line 1533
					 NoGcReq1, %% Line 1534
						   KillState0) of
		    <{NoReq1,NoGcReq2,Pid,Result,KillState1}> when 'true' ->
			%% Line 1537
			case Result of
			  %% Line 1538
			  <'aborted'> when 'true' ->
			      %% Line 1542
			      apply 'check_proc_code'/6
				  (CpcS, NoReq1, NoGcReq2, [Pid|NeedGC1], KillState1, %% Line 1543
										      Success)
			  %% Line 1544
			  <'false'> when 'true' ->
			      %% Line 1546
			      apply 'check_proc_code'/6
				  (CpcS, NoReq1, NoGcReq2, NeedGC1, KillState1, %% Line 1547
										Success)
			  %% Line 1548
			  <'true'> when 'true' ->
			      %% Line 1550
			      case _cor37 of
				%% Line 1551
				<'false'> when 'true' ->
				    %% Line 1554
				    apply 'check_proc_code'/6
					(CpcS, NoReq1, NoGcReq2, [], KillState1, %% Line 1555
										 'false')
				%% Line 1556
				<'true'> when 'true' ->
				    let <_cor21> =
					%% Line 1559
					apply 'cpc_sched_kill'/2
					    (Pid, KillState1)
				    in  %% Line 1558
					apply 'check_proc_code'/6
					    (CpcS, NoReq1, NoGcReq2, NeedGC1, _cor21, %% Line 1559
										      Success)
				( <_cor22> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor22})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1561
			  <'DOWN'> when 'true' ->
			      %% Line 1563
			      apply 'check_proc_code'/6
				  (CpcS, NoReq1, NoGcReq2, NeedGC1, %% Line 1564
								    KillState1, %% Line 1564
										Success)
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor18})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'check_proc_code',6}}] )
	    -| ['compiler_generated'] )
	end
'cpc_recv'/4 =
    %% Line 1567
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tag,NoReq,NoGcReq,KillState = {'cpc_kill',[],_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 1568
	      receive
		%% Line 1569
		<{'check_process_code',{_cor19,Pid,GC},Res}>
		    when call 'erlang':'=:='
			  (_cor19,
			   Tag) ->
		    %% Line 1570
		    apply 'cpc_handle_cpc'/6
			(NoReq, NoGcReq, GC, Pid, Res, KillState)
	      after 'infinity' ->
		'true'
	  %% Line 1572
	  <Tag,NoReq,NoGcReq,KillState = %% Line 1573
					 {'cpc_kill',[R0|[R1|[R2|[R3|[R4|_cor20]]]]],_cor21,_cor22,_cor23}> when 'true' ->
	      %% Line 1574
	      receive
		%% Line 1575
		<{'DOWN',R,'process',_cor24,_cor25}>
		    when let <_cor4> =
			  call 'erlang':'=='
			      (R, R0)
		      in  let <_cor5> =
			      %% Line 1576
			      call 'erlang':'=='
				  (R, R1)
			  in  let <_cor6> =
				  %% Line 1577
				  call 'erlang':'=='
				      (R, R2)
			      in  let <_cor7> =
				      %% Line 1578
				      call 'erlang':'=='
					  (R, R3)
				  in  let <_cor8> =
					  %% Line 1579
					  call 'erlang':'=='
					      (R, R4)
				      in  let <_cor9> =
					      %% Line 1578
					      call 'erlang':'or'
						  (_cor7, _cor8)
					  in  let <_cor10> =
						  %% Line 1577
						  call 'erlang':'or'
						      (_cor6, _cor9)
					      in  let <_cor11> =
						      %% Line 1576
						      call 'erlang':'or'
							  (_cor5, _cor10)
						  in  call 'erlang':'or'
							  (_cor4, _cor11) ->
		    %% Line 1580
		    apply 'cpc_handle_down'/4
			(NoReq, NoGcReq, R, KillState)
		%% Line 1581
		<{'check_process_code',{_cor26,Pid,GC},Res}>
		    when call 'erlang':'=:='
			  (_cor26,
			   Tag) ->
		    %% Line 1582
		    apply 'cpc_handle_cpc'/6
			(NoReq, NoGcReq, GC, Pid, Res, KillState)
	      after 'infinity' ->
		'true'
	  %% Line 1584
	  <Tag,NoReq,NoGcReq,KillState = {'cpc_kill',[R|_cor27],_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 1585
	      receive
		%% Line 1586
		<{'DOWN',_cor31,'process',_cor32,_cor33}>
		    when call 'erlang':'=:='
			  (_cor31,
			   R) ->
		    %% Line 1587
		    apply 'cpc_handle_down'/4
			(NoReq, NoGcReq, R, KillState)
		%% Line 1588
		<{'check_process_code',{_cor34,Pid,GC},Res}>
		    when call 'erlang':'=:='
			  (_cor34,
			   Tag) ->
		    %% Line 1589
		    apply 'cpc_handle_cpc'/6
			(NoReq, NoGcReq, GC, Pid, Res, KillState)
	      after 'infinity' ->
		'true'
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'cpc_recv',4}}] )
	    -| ['compiler_generated'] )
	end
'cpc_handle_down'/4 =
    %% Line 1592
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <NoReq,NoGcReq,R,KillState = {'cpc_kill',Rs,%% Line 1593
						      N,_cor15,_cor16}> when 'true' ->
	      let <_rec21> =
		  %% Line 1595
		  apply 'cpc_list_rm'/2
		      (R, Rs)
	      in  let <_rec22> =
		      %% Line 1596
		      call 'erlang':'-'
			  (N, 1)
		  in  let <_cor7> =
			  %% Line 1596
			  call 'erlang':'setelement'
			      (3, KillState, _rec22)
		      in  let <_cor9> =
			      %% Line 1595
			      call 'erlang':'setelement'
				  (2, _cor7, _rec21)
			  in  let <_cor10> =
				  %% Line 1595
				  apply 'cpc_sched_kill_waiting'/1
				      (_cor9)
			      in  %% Line 1594
				  {NoReq,NoGcReq,'undefined','DOWN',_cor10}
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'cpc_handle_down',4}}] )
	    -| ['compiler_generated'] )
	end
'cpc_list_rm'/2 =
    %% Line 1598
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R,[_cor5|Rs]>
	      when call 'erlang':'=:='
		    (_cor5,
		     R) ->
	      %% Line 1599
	      Rs
	  %% Line 1600
	  <R0,[R1|Rs]> when 'true' ->
	      let <_cor2> =
		  %% Line 1601
		  apply 'cpc_list_rm'/2
		      (R0, Rs)
	      in  %% Line 1601
		  [R1|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'cpc_list_rm',2}}] )
	    -| ['compiler_generated'] )
	end
'cpc_handle_cpc'/6 =
    %% Line 1603
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <NoReq,NoGcReq,'false',Pid,Res,KillState> when 'true' ->
	      let <_cor6> =
		  %% Line 1604
		  call 'erlang':'-'
		      (NoReq, 1)
	      in  %% Line 1604
		  {_cor6,NoGcReq,Pid,Res,KillState}
	  %% Line 1605
	  <NoReq,NoGcReq,'true',Pid,Res,KillState> when 'true' ->
	      let <_cor7> =
		  %% Line 1606
		  call 'erlang':'-'
		      (NoGcReq, 1)
	      in  %% Line 1606
		  {NoReq,_cor7,Pid,Res,KillState}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'cpc_handle_cpc',6}}] )
	    -| ['compiler_generated'] )
	end
'cpc_sched_kill_waiting'/1 =
    %% Line 1608
    fun (_cor0) ->
	case _cor0 of
	  <KillState = {'cpc_kill',_cor7,_cor8,[],_cor9}> when 'true' ->
	      %% Line 1609
	      KillState
	  %% Line 1610
	  <KillState = {'cpc_kill',Rs,%% Line 1611
				      N,%% Line 1612
					[P|Ps],_cor10}> when 'true' ->
	      let <R> =
		  %% Line 1613
		  call 'erlang':'monitor'
		      ('process', P)
	      in  do  %% Line 1614
		      call 'erlang':'exit'
			  (P, 'kill')
		      let <_rec24> =
			  %% Line 1615
			  [R|Rs]
		      in  let <_rec25> =
			      %% Line 1616
			      call 'erlang':'+'
				  (N, 1)
			  in  %% Line 1618
			      {'cpc_kill',_rec24,_rec25,Ps,'true'}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'cpc_sched_kill_waiting',1}}] )
	    -| ['compiler_generated'] )
	end
'cpc_sched_kill'/2 =
    %% Line 1620
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,KillState = {'cpc_kill',_cor12,N,Pids,_cor13}>
	      when %% Line 1621
		call 'erlang':'>='
		    (N,
		     10) ->
	      let <_rec31> =
		  %% Line 1622
		  [Pid|Pids]
	      in  %% Line 1622
		  call 'erlang':'setelement'
		      (4, KillState, _rec31)
	  %% Line 1623
	  <Pid,KillState = %% Line 1624
			   {'cpc_kill',Rs,N,_cor19,_cor20}> when 'true' ->
	      let <R> =
		  %% Line 1625
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  do  %% Line 1626
		      call 'erlang':'exit'
			  (Pid, 'kill')
		      let <_rec33> =
			  %% Line 1627
			  [R|Rs]
		      in  let <_rec34> =
			      %% Line 1628
			      call 'erlang':'+'
				  (N, 1)
			  in  %% Line 1629
			      {'cpc_kill',_rec33,_rec34,_cor19,'true'}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'cpc_sched_kill',2}}] )
	    -| ['compiler_generated'] )
	end
'cpc_request'/3 =
    %% Line 1631
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cpc_static',_cor6,Mod,Tag},Pid,AllowGc> when 'true' ->
	      %% Line 1632
	      call 'erlang':'check_process_code'
		  (Pid, Mod, [{'async',{Tag,Pid,AllowGc}}|%% Line 1633
							  [{'allow_gc',AllowGc}|[]]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'cpc_request',3}}] )
	    -| ['compiler_generated'] )
	end
'cpc_request_gc'/2 =
    %% Line 1635
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CpcS,[Pid|Pids]> when 'true' ->
	      do  %% Line 1636
		  apply 'cpc_request'/3
		      (CpcS, Pid, 'true')
		  %% Line 1637
		  Pids
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'cpc_request_gc',2}}] )
	    -| ['compiler_generated'] )
	end
'cpc_init'/3 =
    %% Line 1639
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_CpcS,[],NoReqs> when 'true' ->
	      %% Line 1640
	      NoReqs
	  %% Line 1641
	  <CpcS,[Pid|Pids],NoReqs> when 'true' ->
	      do  %% Line 1642
		  apply 'cpc_request'/3
		      (CpcS, Pid, 'false')
		  let <_cor3> =
		      %% Line 1643
		      call 'erlang':'+'
			  (NoReqs, 1)
		  in  %% Line 1643
		      apply 'cpc_init'/3
			  (CpcS, Pids, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'cpc_init',3}}] )
	    -| ['compiler_generated'] )
	end
'is_loaded'/2 =
    %% Line 1647
    fun (_cor1,_cor0) ->
	%% Line 1648
	case call 'ets':'lookup'
		 (_cor0, _cor1) of
	  %% Line 1649
	  <[{_cor5,File}|[]]>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      {'file',File}
	  %% Line 1650
	  <[]> when 'true' ->
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'handle_on_load'/4 =
    %% Line 1657
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,File,{From,_cor16},St0 = {'state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,OnLoad0}> when 'true' ->
	      let <Fun> =
		  %% Line 1658
		  ( fun () ->
			let <Res> =
			    %% Line 1659
			    call 'erlang':'call_on_load_function'
				(Mod)
			in  %% Line 1660
			    call 'erlang':'exit'
				(Res)
		    -| [{'id',{0,0,'-handle_on_load/4-fun-0-'}}] )
	      in  %% Line 1662
		  case call 'erlang':'spawn_monitor'
			   (Fun) of
		    <{_cor24,Ref}> when 'true' ->
			let <OnLoad> =
			    %% Line 1663
			    [{Ref,Mod,File,[From|[]]}|OnLoad0]
			in  let <_cor10> =
				%% Line 1664
				call 'erlang':'setelement'
				    (9, St0, OnLoad)
			    in  %% Line 1665
				{'noreply',_cor10}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'handle_on_load',4}}] )
	    -| ['compiler_generated'] )
	end
'pending_on_load'/3 =
    %% Line 1667
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor11,_cor12,{'state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,[]}> when 'true' ->
	      %% Line 1668
	      'no'
	  %% Line 1669
	  <Mod,From,St = {'state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,OnLoad0}> when 'true' ->
	      %% Line 1670
	      case call 'lists':'keymember'
		       (Mod, 2, OnLoad0) of
		%% Line 1671
		<'false'> when 'true' ->
		    %% Line 1672
		    'no'
		%% Line 1673
		<'true'> when 'true' ->
		    let <OnLoad> =
			%% Line 1674
			apply 'pending_on_load_1'/3
			    (Mod, From, OnLoad0)
		    in  let <_cor6> =
			    %% Line 1675
			    call 'erlang':'setelement'
				(9, St, OnLoad)
			in  %% Line 1675
			    {'yes',_cor6}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pending_on_load',3}}] )
	    -| ['compiler_generated'] )
	end
'pending_on_load_1'/3 =
    %% Line 1678
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,From,[{Ref,_cor7,File,Pids}|T]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Mod) ->
	      %% Line 1679
	      [{Ref,Mod,File,[From|Pids]}|T]
	  %% Line 1680
	  <Mod,From,[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 1681
		  apply 'pending_on_load_1'/3
		      (Mod, From, T)
	      in  %% Line 1681
		  [H|_cor3]
	  %% Line 1682
	  <_cor8,_cor9,[]> when 'true' ->
	      []
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pending_on_load_1',3}}] )
	    -| ['compiler_generated'] )
	end
'finish_on_load'/3 =
    %% Line 1684
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ref,OnLoadRes,State = {'state',_cor15,_cor16,_cor17,Db,_cor18,_cor19,_cor20,OnLoad0}> when 'true' ->
	      %% Line 1685
	      case call 'lists':'keyfind'
		       (Ref, 1, OnLoad0) of
		%% Line 1686
		<'false'> when 'true' ->
		    %% Line 1690
		    State
		%% Line 1691
		<{_cor21,Mod,File,WaitingPids}>
		    when call 'erlang':'=:='
			  (_cor21,
			   Ref) ->
		    do  %% Line 1692
			apply 'finish_on_load_1'/5
			    (Mod, File, OnLoadRes, WaitingPids, Db)
			let <_cor7> =
			    %% Line 1693
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[E = {R,_cor22,_cor23,_cor24}|_cor4]>
						when call 'erlang':'=/='
						      (R,
						       Ref) ->
						let <_cor6> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [E|_cor6]
						      -| ['compiler_generated'] )
					    ( <[_cor3|_cor4]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor4)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (OnLoad0)
			      -| ['list_comprehension'] )
			in  %% Line 1694
			    call 'erlang':'setelement'
				(9, State, _cor7)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'finish_on_load',3}}] )
	    -| ['compiler_generated'] )
	end
'finish_on_load_1'/5 =
    %% Line 1697
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Keep> =
	    %% Line 1698
	    call 'erlang':'=:='
		(_cor2, 'ok')
	in  do  %% Line 1699
		call 'erlang':'finish_after_on_load'
		    (_cor4, Keep)
		let <_cor8> =
		    %% Line 1700
		    case Keep of
		      %% Line 1701
		      <'false'> when 'true' ->
			  do  %% Line 1702
			      apply 'finish_on_load_report'/2
				  (_cor4, _cor2)
			      %% Line 1703
			      {'error','on_load_failure'}
		      %% Line 1704
		      <'true'> when 'true' ->
			  do  %% Line 1705
			      call 'ets':'insert'
				  (_cor0, {_cor4,_cor3})
			      %% Line 1706
			      {'module',_cor4}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		in  do  %% Line 1708
			( letrec
			      'lc$^0'/1 =
				  fun (_cor12) ->
				      case _cor12 of
					<[Pid|_cor11]> when 'true' ->
					    do  apply 'reply'/2
						    (Pid, _cor8)
						apply 'lc$^0'/1
						    (_cor11)
					<[]> when 'true' ->
					    []
					( <_cor12> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor12})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor1)
			  -| ['list_comprehension'] )
			%% Line 1709
			'ok'
'finish_on_load_report'/2 =
    %% Line 1711
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Mod,Atom>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      %% Line 1713
	      'ok'
	  %% Line 1714
	  <Mod,Term> when 'true' ->
	      let <_cor4> =
		  %% Line 1719
		  ( fun () ->
			%% Line 1726
			call 'error_logger':'warning_msg'
			    ([84|[104|[101|[32|[111|[110|[95|[108|[111|[97|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[102|[111|[114|[32|[109|[111|[100|[117|[108|[101|[32|[126|[115|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[126|[80|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Mod|[Term|[10]]])
		    -| [{'id',{0,0,'-finish_on_load_report/2-fun-0-'}}] )
	      in  %% Line 1719
		  call 'erlang':'spawn'
		      (_cor4)
	end
'all_loaded'/1 =
    %% Line 1733
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1734
	    call 'ets':'slot'
		(_cor0, 0)
	in  %% Line 1734
	    apply 'all_l'/4
		(_cor0, _cor1, 1, [])
'all_l'/4 =
    %% Line 1736
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Db,'$end_of_table',_cor11,Acc> when 'true' ->
	      %% Line 1737
	      Acc
	  %% Line 1738
	  <Db,ModInfo,N,Acc> when 'true' ->
	      let <NewAcc> =
		  %% Line 1739
		  apply 'strip_mod_info'/2
		      (ModInfo, Acc)
	      in  let <_cor6> =
		      %% Line 1740
		      call 'ets':'slot'
			  (Db, N)
		  in  let <_cor5> =
			  %% Line 1740
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 1740
			  apply 'all_l'/4
			      (Db, _cor6, _cor5, NewAcc)
	end
'strip_mod_info'/2 =
    %% Line 1743
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{'sticky',_cor4},_cor5}|T],Acc> when 'true' ->
	      apply 'strip_mod_info'/2
		  (T, Acc)
	  %% Line 1744
	  <[H|T],Acc> when 'true' ->
	      apply 'strip_mod_info'/2
		  (T, [H|Acc])
	  %% Line 1745
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'strip_mod_info',2}}] )
	    -| ['compiler_generated'] )
	end
'error_msg'/2 =
    %% Line 1749
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1750
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 1750
		call 'erlang':'self'
		    ()
	    in  let <Msg> = {%% Line 1750
		     'notify',%% Line 1750
			      {'error',_cor3,{_cor2,_cor1,_cor0}}}
		in  do  %% Line 1751
			call 'erlang':'!'
			    ('error_logger', Msg)
			%% Line 1752
			'ok'
'info_msg'/2 =
    %% Line 1754
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1755
	    call 'erlang':'group_leader'
		()
	in  let <_cor2> =
		%% Line 1755
		call 'erlang':'self'
		    ()
	    in  let <Msg> = {%% Line 1755
		     'notify',%% Line 1755
			      {'info_msg',_cor3,{_cor2,_cor1,_cor0}}}
		in  do  %% Line 1756
			call 'erlang':'!'
			    ('error_logger', Msg)
			%% Line 1757
			'ok'
'objfile_extension'/0 =
    %% Line 1759
    fun () ->
	%% Line 1760
	call 'init':'objfile_extension'
	    ()
'archive_extension'/0 =
    %% Line 1762
    fun () ->
	%% Line 1763
	call 'init':'archive_extension'
	    ()
'to_list'/1 =
    %% Line 1765
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  %% Line 1766
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'to_atom'/1 =
    %% Line 1768
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      X
	  %% Line 1769
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'erlang':'list_to_atom'
		  (X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_atom',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('code_server')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('code_server', _cor0)
end