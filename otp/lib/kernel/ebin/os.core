module 'os' ['cmd'/1,
	     'find_executable'/1,
	     'find_executable'/2,
	     'getenv'/0,
	     'getenv'/1,
	     'getpid'/0,
	     'module_info'/0,
	     'module_info'/1,
	     'putenv'/2,
	     'timestamp'/0,
	     'type'/0,
	     'unsetenv'/1,
	     'version'/0]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 31
		'spec' =
		    %% Line 31
		    [{{'getenv',0},[{'type',31,'fun',[{'type',31,'product',[]}|[{'type',31,'list',[{'type',31,'string',[]}]}]]}]}],
		%% Line 35
		'spec' =
		    %% Line 35
		    [{{'getenv',1},[{'type',35,'bounded_fun',[{'type',35,'fun',[{'type',35,'product',[{'var',35,'VarName'}]}|[{'type',35,'union',[{'var',35,'Value'}|[{'atom',35,'false'}]]}]]}|[[{'type',36,'constraint',[{'atom',36,'is_subtype'}|[[{'var',36,'VarName'}|[{'type',36,'string',[]}]]]]}|[{'type',37,'constraint',[{'atom',37,'is_subtype'}|[[{'var',37,'Value'}|[{'type',37,'string',[]}]]]]}]]]]}]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'getpid',0},[{'type',42,'bounded_fun',[{'type',42,'fun',[{'type',42,'product',[]}|[{'var',42,'Value'}]]}|[[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'Value'}|[{'type',43,'string',[]}]]]]}]]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'putenv',2},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'VarName'}|[{'var',48,'Value'}]]}|[{'atom',48,'true'}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'VarName'}|[{'type',49,'string',[]}]]]]}|[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Value'}|[{'type',50,'string',[]}]]]]}]]]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'timestamp',0},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[]}|[{'var',55,'Timestamp'}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Timestamp'}|[{'remote_type',56,[{'atom',56,'erlang'}|[{'atom',56,'timestamp'}|[[]]]]}]]]]}]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'unsetenv',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'VarName'}]}|[{'atom',61,'true'}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'VarName'}|[{'type',62,'string',[]}]]]]}]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'type',0},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[]}|[{'type',69,'tuple',[{'var',69,'Osfamily'}|[{'var',69,'Osname'}]]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Osfamily'}|[{'type',70,'union',[{'atom',70,'unix'}|[{'atom',70,'win32'}|[{'atom',70,'ose'}]]]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Osname'}|[{'type',71,'atom',[]}]]]]}]]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'version',0},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[]}|[{'type',76,'union',[{'var',76,'VersionString'}|[{'type',76,'tuple',[{'var',76,'Major'}|[{'var',76,'Minor'}|[{'var',76,'Release'}]]]}]]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'VersionString'}|[{'type',77,'string',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Major'}|[{'type',78,'non_neg_integer',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Minor'}|[{'type',79,'non_neg_integer',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Release'}|[{'type',80,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'find_executable',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'Name'}]}|[{'type',84,'union',[{'var',84,'Filename'}|[{'atom',84,'false'}]]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Name'}|[{'type',85,'string',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Filename'}|[{'type',86,'string',[]}]]]]}]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'find_executable',2},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'Name'}|[{'var',93,'Path'}]]}|[{'type',93,'union',[{'var',93,'Filename'}|[{'atom',93,'false'}]]}]]}|[[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Name'}|[{'type',94,'string',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Path'}|[{'type',95,'string',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Filename'}|[{'type',96,'string',[]}]]]]}]]]]]}]}],
		%% Line 179
		'spec' =
		    %% Line 179
		    [{{'extensions',0},[{'type',179,'fun',[{'type',179,'product',[]}|[{'type',179,'nonempty_list',[{'type',179,'string',[]}]}]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'cmd',1},[{'type',188,'bounded_fun',[{'type',188,'fun',[{'type',188,'product',[{'var',188,'Command'}]}|[{'type',188,'string',[]}]]}|[[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Command'}|[{'type',189,'union',[{'type',189,'atom',[]}|[{'remote_type',189,[{'atom',189,'io_lib'}|[{'atom',189,'chars'}|[[]]]]}]]}]]]]}]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'start_port',0},[{'type',242,'fun',[{'type',242,'product',[]}|[{'type',242,'port',[]}]]}]}]]
'getenv'/0 =
    %% Line 33
    fun () ->
	call 'erlang':'nif_error'
	    ('undef')
'getenv'/1 =
    %% Line 39
    fun (_cor0) ->
	%% Line 40
	call 'erlang':'nif_error'
	    ('undef')
'getpid'/0 =
    %% Line 45
    fun () ->
	%% Line 46
	call 'erlang':'nif_error'
	    ('undef')
'putenv'/2 =
    %% Line 52
    fun (_cor1,_cor0) ->
	%% Line 53
	call 'erlang':'nif_error'
	    ('undef')
'timestamp'/0 =
    %% Line 58
    fun () ->
	%% Line 59
	call 'erlang':'nif_error'
	    ('undef')
'unsetenv'/1 =
    %% Line 64
    fun (_cor0) ->
	%% Line 65
	call 'erlang':'nif_error'
	    ('undef')
'type'/0 =
    %% Line 73
    fun () ->
	%% Line 74
	call 'erlang':'system_info'
	    ('os_type')
'version'/0 =
    %% Line 81
    fun () ->
	%% Line 82
	call 'erlang':'system_info'
	    ('os_version')
'find_executable'/1 =
    %% Line 87
    fun (_cor0) ->
	%% Line 88
	case call 'os':'getenv'
		 ([80|[65|[84|[72]]]]) of
	  %% Line 89
	  <'false'> when 'true' ->
	      apply 'find_executable'/2
		  (_cor0, [])
	  %% Line 90
	  <Path> when 'true' ->
	      apply 'find_executable'/2
		  (_cor0, Path)
	end
'find_executable'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	let <Extensions> =
	    %% Line 98
	    apply 'extensions'/0
		()
	in  %% Line 99
	    case call 'filename':'pathtype'
		     (_cor1) of
	      %% Line 100
	      <'relative'> when 'true' ->
		  let <_cor3> =
		      %% Line 101
		      apply 'split_path'/1
			  (_cor0)
		  in  %% Line 101
		      apply 'find_executable1'/3
			  (_cor1, _cor3, Extensions)
	      %% Line 102
	      <_cor8> when 'true' ->
		  %% Line 103
		  case apply 'verify_executable'/3
			   (_cor1, Extensions, Extensions) of
		    %% Line 104
		    <{'ok',Complete}> when 'true' ->
			%% Line 105
			Complete
		    %% Line 106
		    <'error'> when 'true' ->
			%% Line 107
			'false'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	    end
'find_executable1'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[Base|Rest],Extensions> when 'true' ->
	      let <Complete0> =
		  %% Line 112
		  call 'filename':'join'
		      (Base, Name)
	      in  %% Line 113
		  case apply 'verify_executable'/3
			   (Complete0, Extensions, Extensions) of
		    %% Line 114
		    <{'ok',Complete}> when 'true' ->
			%% Line 115
			Complete
		    %% Line 116
		    <'error'> when 'true' ->
			%% Line 117
			apply 'find_executable1'/3
			    (Name, Rest, Extensions)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 119
	  <_X_Name,[],_X_Extensions> when 'true' ->
	      %% Line 120
	      'false'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'find_executable1',3}}] )
	    -| ['compiler_generated'] )
	end
'verify_executable'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name0,[Ext|Rest],OrigExtensions> when 'true' ->
	      let <Name1> =
		  %% Line 123
		  call 'erlang':'++'
		      (Name0, Ext)
	      in  %% Line 124
		  case call 'file':'read_file_info'
			   (Name1) of
		    %% Line 125
		    <{'ok',{'file_info',_cor11,'regular',_cor12,_cor13,_cor14,_cor15,Mode,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}}>
			when %% Line 126
			  try
			      let <_cor4> =
				  call 'erlang':'band'
				      (Mode, 73)
			      in  call 'erlang':'=/='
				      (_cor4, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 129
			{'ok',Name1}
		    %% Line 130
		    <_cor22> when 'true' ->
			%% Line 131
			apply 'verify_executable'/3
			    (Name0, Rest, OrigExtensions)
		  end
	  %% Line 133
	  <Name,[],OrigExtensions>
	      when call 'erlang':'=/='
		    (OrigExtensions,
		     [[]]) ->
	      let <_cor6> =
		  %% Line 135
		  call 'string':'to_lower'
		      (Name)
	      in  %% Line 135
		  case apply 'can_be_full_name'/2
			   (_cor6, OrigExtensions) of
		    %% Line 136
		    <'true'> when 'true' ->
			%% Line 137
			apply 'verify_executable'/3
			    (Name, [[]], [[]])
		    %% Line 138
		    <_cor23> when 'true' ->
			%% Line 139
			'error'
		  end
	  %% Line 141
	  <_cor24,[],_cor25> when 'true' ->
	      %% Line 142
	      'error'
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'verify_executable',3}}] )
	    -| ['compiler_generated'] )
	end
'can_be_full_name'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Name,[]> when 'true' ->
	      %% Line 145
	      'false'
	  %% Line 146
	  <Name,[H|T]> when 'true' ->
	      %% Line 147
	      case call 'lists':'suffix'
		       (H, Name) of
		%% Line 148
		<'true'> when 'true' ->
		    %% Line 149
		    'true'
		%% Line 150
		<_cor5> when 'true' ->
		    %% Line 151
		    apply 'can_be_full_name'/2
			(Name, T)
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'can_be_full_name',2}}] )
	    -| ['compiler_generated'] )
	end
'split_path'/1 =
    %% Line 154
    fun (_cor0) ->
	%% Line 155
	case apply 'type'/0
		 () of
	  %% Line 156
	  <{'win32',_cor4}> when 'true' ->
	      %% Line 157
	      case call 'file':'get_cwd'
		       () of
		<{'ok',Curr}> when 'true' ->
		    %% Line 158
		    apply 'split_path'/4
			(_cor0, 59, [], [Curr|[]])
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 159
	  <_cor5> when 'true' ->
	      %% Line 160
	      apply 'split_path'/4
		  (_cor0, 58, [], [])
	end
'split_path'/4 =
    %% Line 163
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Sep|Rest],_cor10,Current,Path>
	      when call 'erlang':'=:='
		    (_cor10,
		     Sep) ->
	      let <_cor4> =
		  %% Line 164
		  apply 'reverse_element'/1
		      (Current)
	      in  %% Line 164
		  apply 'split_path'/4
		      (Rest, Sep, [], [_cor4|Path])
	  %% Line 165
	  <[C|Rest],Sep,Current,Path> when 'true' ->
	      %% Line 166
	      apply 'split_path'/4
		  (Rest, Sep, [C|Current], Path)
	  %% Line 167
	  <[],_cor11,Current,Path> when 'true' ->
	      let <_cor5> =
		  %% Line 168
		  apply 'reverse_element'/1
		      (Current)
	      in  %% Line 168
		  call 'lists':'reverse'
		      (Path, [_cor5|[]])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'split_path',4}}] )
	    -| ['compiler_generated'] )
	end
'reverse_element'/1 =
    %% Line 170
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      [46]
	  %% Line 171
	  <[34|T]> when 'true' ->
	      %% Line 172
	      case call 'lists':'reverse'
		       (T) of
		%% Line 173
		<[34|List]> when 'true' ->
		    List
		%% Line 174
		<List> when 'true' ->
		    call 'erlang':'++'
			(List, [34])
	      end
	  %% Line 176
	  <List> when 'true' ->
	      %% Line 177
	      call 'lists':'reverse'
		  (List)
	end
'extensions'/0 =
    %% Line 181
    fun () ->
	%% Line 182
	case apply 'type'/0
		 () of
	  %% Line 183
	  <{'win32',_cor1}> when 'true' ->
	      [[46|[101|[120|[101]]]]|[[46|[99|[111|[109]]]]|[[46|[99|[109|[100]]]]|[[46|[98|[97|[116]]]]]]]]
	  %% Line 184
	  <{'unix',_cor2}> when 'true' ->
	      [[]]
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'cmd'/1 =
    %% Line 190
    fun (_cor0) ->
	do  %% Line 191
	    apply 'validate'/1
		(_cor0)
	    let <_cor8> =
		%% Line 192
		case apply 'type'/0
			 () of
		  %% Line 193
		  <{'unix',_cor13}> when 'true' ->
		      %% Line 194
		      apply 'unix_cmd'/1
			  (_cor0)
		  %% Line 195
		  <{'win32',Wtype}> when 'true' ->
		      let <_cor1> =
			  %% Line 196
			  call 'os':'getenv'
			      ([67|[79|[77|[83|[80|[69|[67]]]]]]])
		      in  let <_cor3> =
			      %% Line 196
			      case <_cor1,Wtype> of
				%% Line 197
				<'false','windows'> when 'true' ->
				    call 'lists':'concat'
					([[99|[111|[109|[109|[97|[110|[100|[46|[99|[111|[109|[32|[47|[99]]]]]]]]]]]]]]|[_cor0|[]]])
				%% Line 198
				<'false',_cor14> when 'true' ->
				    call 'lists':'concat'
					([[99|[109|[100|[32|[47|[99]]]]]]|[_cor0|[]]])
				%% Line 199
				<Cspec,_cor15> when 'true' ->
				    call 'lists':'concat'
					([Cspec|[[32|[47|[99]]]|[_cor0|[]]]])
			      end
			  in  let <Command> =
				  %% Line 203
				  call 'lists':'flatten'
				      (_cor3)
			      in  let <Port> =
				      %% Line 204
				      call 'erlang':'open_port'
					  ({'spawn',Command}, ['stream'|['in'|['eof'|['hide']]]])
				  in  %% Line 205
				      apply 'get_data'/2
					  (Port, [])
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor10> =
		    %% Line 207
		    call 'erlang':'list_to_binary'
			(_cor8)
		in  let <String> =
			%% Line 207
			call 'unicode':'characters_to_list'
			    (_cor10)
		    in  %% Line 208
			case <> of
			  %% Line 209
			  <>
			      when call 'erlang':'is_list'
				    (String) ->
			      String
			  %% Line 210
			  <> when 'true' ->
			      _cor8
			end
'unix_cmd'/1 =
    %% Line 213
    fun (_cor0) ->
	let <Tag> =
	    %% Line 214
	    call 'erlang':'make_ref'
		()
	in  let <_cor5> =
		%% Line 216
		( fun () ->
		      do  %% Line 217
			  call 'erlang':'process_flag'
			      ('trap_exit', 'true')
			  let <Port> =
			      %% Line 218
			      apply 'start_port'/0
				  ()
			  in  let <_cor3> =
				  %% Line 219
				  apply 'mk_cmd'/1
				      (_cor0)
			      in  do  %% Line 219
				      call 'erlang':'port_command'
					  (Port, _cor3)
				      let <_cor4> =
					  %% Line 220
					  apply 'unix_get_data'/1
					      (Port)
				      in  %% Line 220
					  call 'erlang':'exit'
					      ({Tag,_cor4})
		  -| [{'id',{0,0,'-unix_cmd/1-fun-0-'}}] )
	    in  %% Line 215
		case call 'erlang':'spawn_monitor'
			 (_cor5) of
		  <{Pid,Mref}> when 'true' ->
		      %% Line 222
		      receive
			%% Line 223
			<{'DOWN',_cor8,_cor9,_cor10,{_cor11,Result}}>
			    when let <_cor14> =
				  call 'erlang':'=:='
				      (_cor8, Mref)
			      in  let <_cor12> =
				      call 'erlang':'=:='
					  (_cor10, Pid)
				  in  let <_cor13> =
					  call 'erlang':'=:='
					      (_cor11, Tag)
				      in  let <_cor15> =
					      call 'erlang':'and'
						  (_cor12, _cor13)
					  in  call 'erlang':'and'
						  (_cor14, _cor15) ->
			    %% Line 224
			    Result
			%% Line 225
			<{'DOWN',_cor16,_cor17,_cor18,Reason}>
			    when let <_cor19> =
				  call 'erlang':'=:='
				      (_cor16, Mref)
			      in  let <_cor20> =
				      call 'erlang':'=:='
					  (_cor18, Pid)
				  in  call 'erlang':'and'
					  (_cor19, _cor20) ->
			    %% Line 226
			    call 'erlang':'exit'
				(Reason)
		      after 'infinity' ->
			'true'
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'start_port'/0 =
    %% Line 243
    fun () ->
	let <Ref> =
	    %% Line 244
	    call 'erlang':'make_ref'
		()
	in  let <_cor1> =
		%% Line 245
		call 'erlang':'self'
		    ()
	    in  let <Request> = {%% Line 245
		     Ref,_cor1}
		in  let <_cor6> =
			%% Line 246
			case call 'erlang':'whereis'
				 ('os_cmd_port_creator') of
			  %% Line 247
			  <'undefined'> when 'true' ->
			      let <_cor3> =
				  %% Line 248
				  ( fun () ->
					%% Line 249
					apply 'start_port_srv'/1
					    (Request)
				    -| [{'id',{0,0,'-start_port/0-fun-0-'}}] )
			      in  %% Line 248
				  call 'erlang':'spawn_monitor'
				      (_cor3)
			  %% Line 251
			  <P> when 'true' ->
			      do  %% Line 252
				  call 'erlang':'!'
				      (P, Request)
				  let <M> =
				      %% Line 253
				      call 'erlang':'monitor'
					  ('process', P)
				  in  %% Line 254
				      {P,M}
			end
		    in  %% Line 246
			case _cor6 of
			  <{Pid,Mon}> when 'true' ->
			      %% Line 256
			      receive
				%% Line 257
				<{_cor8,Port}>
				    when let <_cor9> =
					  call 'erlang':'=:='
					      (_cor8, Ref)
				      in  let <_cor10> =
					      call 'erlang':'is_port'
						  (Port)
					  in  call 'erlang':'and'
						  (_cor9, _cor10) ->
				    do  %% Line 258
					call 'erlang':'demonitor'
					    (Mon, ['flush'])
					%% Line 259
					Port
				%% Line 260
				<{_cor11,Error}>
				    when call 'erlang':'=:='
					  (_cor11,
					   Ref) ->
				    do  %% Line 261
					call 'erlang':'demonitor'
					    (Mon, ['flush'])
					%% Line 262
					call 'erlang':'exit'
					    (Error)
				%% Line 263
				<{'DOWN',_cor12,'process',_cor13,_X_Reason}>
				    when let <_cor14> =
					  call 'erlang':'=:='
					      (_cor12, Mon)
				      in  let <_cor15> =
					      call 'erlang':'=:='
						  (_cor13, Pid)
					  in  call 'erlang':'and'
						  (_cor14, _cor15) ->
				    %% Line 264
				    apply 'start_port'/0
					()
			      after 'infinity' ->
				'true'
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'start_port_srv'/1 =
    %% Line 267
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 270
	    call 'erlang':'whereis'
		('kernel_sup')
	in  %% Line 270
	    case call 'erlang':'process_info'
		     (_cor1, %% Line 271
			     'group_leader') of
	      <{'group_leader',GL}> when 'true' ->
		  let <_cor3> =
		      %% Line 272
		      call 'erlang':'self'
			  ()
		  in  %% Line 272
		      case call 'erlang':'group_leader'
			       (GL, _cor3) of
			<'true'> when 'true' ->
			    do  %% Line 273
				call 'erlang':'process_flag'
				    ('trap_exit', 'true')
				let <_cor10> =
				    %% Line 274
				    try
					let <_cor5> =
					    call 'erlang':'self'
						()
					in  call 'erlang':'register'
						('os_cmd_port_creator', _cor5)
				    of <_cor6> ->
					_cor6
				    catch <_cor9,_cor8,_cor7> ->
					case <_cor9,_cor8,_cor7> of
					  %% Line 276
					  <'error',_cor14,_cor15> when 'true' ->
					      'false'
					  ( <_cor9,_cor8,_cor7> when 'true' ->
						primop 'raise'
						    (_cor7, _cor8)
					    -| ['compiler_generated'] )
					end
				in  do  %% Line 278
					apply 'start_port_srv_handle'/1
					    (_cor0)
					%% Line 279
					case _cor10 of
					  %% Line 280
					  <'true'> when 'true' ->
					      apply 'start_port_srv_loop'/0
						  ()
					  %% Line 281
					  <'false'> when 'true' ->
					      'exiting'
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'start_port_srv_handle'/1 =
    %% Line 284
    fun (_cor0) ->
	case _cor0 of
	  <{Ref,Client}> when 'true' ->
	      let <_cor1> =
		  %% Line 285
		  call 'erlang':'system_info'
		      ('system_architecture')
	      in  let <_cor3> =
		      %% Line 285
		      case call 'lists':'reverse'
			       (_cor1) of
			%% Line 287
			<[105|[98|[97|[101|[100|[105|[111|[114|[100|[110|[97|_cor14]]]]]]]]]]]> when 'true' ->
			    call 'filename':'join'
				([[47|[115|[121|[115|[116|[101|[109]]]]]]]|[[98|[105|[110|[47|[115|[104|[32|[45|[115|[32|[117|[110|[105|[120|[58|[99|[109|[100|[32|[50|[62|[38|[49]]]]]]]]]]]]]]]]]]]]]]]]])
			%% Line 288
			<_cor15> when 'true' ->
			    call 'filename':'join'
				([[47]|[[98|[105|[110|[47|[115|[104|[32|[45|[115|[32|[117|[110|[105|[120|[58|[99|[109|[100|[32|[50|[62|[38|[49]]]]]]]]]]]]]]]]]]]]]]]]])
		      end
		  in  let <_cor11> =
			  %% Line 290
			  try
			      call 'erlang':'open_port'
				  ({'spawn',_cor3}, ['stream'])
			  of <_cor5> ->
			      case _cor5 of
				%% Line 291
				<Port>
				    when call 'erlang':'is_port'
					  (_cor5) ->
				    do  catch
					    %% Line 292
					    call 'erlang':'port_connect'
						(Port, Client)
					do  %% Line 293
					    call 'erlang':'unlink'
						(Port)
					    %% Line 294
					    Port
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'try_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  catch <_cor9,_cor8,_cor7> ->
			      case <_cor9,_cor8,_cor7> of
				%% Line 296
				<'error',Reason,_cor16> when 'true' ->
				    let <_cor10> =
					%% Line 297
					call 'erlang':'get_stacktrace'
					    ()
				    in  %% Line 297
					{Reason,_cor10}
				( <_cor9,_cor8,_cor7> when 'true' ->
				      primop 'raise'
					  (_cor7, _cor8)
				  -| ['compiler_generated'] )
			      end
		      in  do  %% Line 299
			      call 'erlang':'!'
				  (Client, {Ref,_cor11})
			      %% Line 300
			      'ok'
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'start_port_srv_handle',1}}] )
	    -| ['compiler_generated'] )
	end
'start_port_srv_loop'/0 =
    %% Line 302
    fun () ->
	do  %% Line 303
	    receive
	      %% Line 304
	      <Request = {Ref,Client}>
		  when let <_cor0> =
			call 'erlang':'is_reference'
			    (Ref)
		    in  let <_cor1> =
			    %% Line 305
			    call 'erlang':'is_pid'
				(Client)
			in  call 'erlang':'and'
				(_cor0, _cor1) ->
		  %% Line 306
		  apply 'start_port_srv_handle'/1
		      (Request)
	      %% Line 307
	      <_X_Junk> when 'true' ->
		  'ok'
	    after 'infinity' ->
	      'ok'
	    %% Line 310
	    apply 'start_port_srv_loop'/0
		()
'unix_get_data'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 316
	apply 'unix_get_data'/2
	    (_cor0, [])
'unix_get_data'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	%% Line 319
	receive
	  %% Line 320
	  <{_cor5,{'data',Bytes}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 321
	      case apply 'eot'/1
		       (Bytes) of
		%% Line 322
		<{'done',Last}> when 'true' ->
		    %% Line 323
		    call 'lists':'flatten'
			([_cor0|Last])
		%% Line 324
		<'more'> when 'true' ->
		    %% Line 325
		    apply 'unix_get_data'/2
			(_cor1, [_cor0|Bytes])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 327
	  <{'EXIT',_cor6,_cor7}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 328
	      call 'lists':'flatten'
		  (_cor0)
	after 'infinity' ->
	  'true'
'eot'/1 =
    %% Line 334
    fun (_cor0) ->
	%% Line 335
	apply 'eot'/2
	    (_cor0, [])
'eot'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[4|_X_Bs],As> when 'true' ->
	      let <_cor2> =
		  %% Line 338
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 338
		  {'done',_cor2}
	  %% Line 339
	  <[B|Bs],As> when 'true' ->
	      %% Line 340
	      apply 'eot'/2
		  (Bs, [B|As])
	  %% Line 341
	  <[],_X_As> when 'true' ->
	      %% Line 342
	      'more'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'eot',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_cmd'/1 =
    %% Line 353
    fun (_cor0) ->
	case _cor0 of
	  <Cmd>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 354
		  call 'erlang':'atom_to_list'
		      (Cmd)
	      in  %% Line 354
		  apply 'mk_cmd'/1
		      (_cor1)
	  %% Line 355
	  <Cmd> when 'true' ->
	      let <_cor2> =
		  %% Line 358
		  call 'unicode':'characters_to_binary'
		      (Cmd)
	      in  %% Line 358
		  [40|[_cor2|[[10|[41|[32|[60|[47|[100|[101|[118|[47|[110|[117|[108|[108|[59|[32|[101|[99|[104|[111|[32|[32|[34|[4|[34|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	end
'validate'/1 =
    %% Line 361
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 362
	      'ok'
	  %% Line 363
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 364
	      apply 'validate1'/1
		  (List)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'validate',1}}] )
	    -| ['compiler_generated'] )
	end
'validate1'/1 =
    %% Line 366
    fun (_cor0) ->
	case _cor0 of
	  <[C|Rest]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      %% Line 367
	      apply 'validate1'/1
		  (Rest)
	  %% Line 368
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      do  %% Line 369
		  apply 'validate1'/1
		      (List)
		  %% Line 370
		  apply 'validate1'/1
		      (Rest)
	  %% Line 371
	  <[]> when 'true' ->
	      %% Line 372
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'validate1',1}}] )
	    -| ['compiler_generated'] )
	end
'get_data'/2 =
    %% Line 374
    fun (_cor1,_cor0) ->
	%% Line 375
	receive
	  %% Line 376
	  <{_cor5,{'data',Bytes}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 377
	      apply 'get_data'/2
		  (_cor1, [_cor0|Bytes])
	  %% Line 378
	  <{_cor6,'eof'}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      let <_cor2> =
		  %% Line 379
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 379
		      call 'erlang':'!'
			  (_cor1, {_cor2,'close'})
		      do  %% Line 380
			  receive
			    %% Line 381
			    <{_cor7,'closed'}>
				when call 'erlang':'=:='
				      (_cor7,
				       _cor1) ->
				'ok'
			  after 'infinity' ->
			    'ok'
			  do  %% Line 384
			      receive
				%% Line 385
				<{'EXIT',_cor8,_cor9}>
				    when call 'erlang':'=:='
					  (_cor8,
					   _cor1) ->
				    'ok'
			      after %% Line 387
				    1 ->
				'ok'
			      %% Line 390
			      call 'lists':'flatten'
				  (_cor0)
	after 'infinity' ->
	  'true'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('os')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('os', _cor0)
end