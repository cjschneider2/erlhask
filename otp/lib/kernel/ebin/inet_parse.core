module 'inet_parse' ['address'/1,
		     'domain'/1,
		     'dots'/1,
		     'host_conf_bsdos'/1,
		     'host_conf_bsdos'/2,
		     'host_conf_freebsd'/1,
		     'host_conf_freebsd'/2,
		     'host_conf_linux'/1,
		     'host_conf_linux'/2,
		     'hosts'/1,
		     'hosts'/2,
		     'ipv4_address'/1,
		     'ipv4strict_address'/1,
		     'ipv6_address'/1,
		     'ipv6strict_address'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'netmasks'/1,
		     'netmasks'/2,
		     'networks'/1,
		     'networks'/2,
		     'nsswitch_conf'/1,
		     'nsswitch_conf'/2,
		     'ntoa'/1,
		     'protocols'/1,
		     'protocols'/2,
		     'resolv'/1,
		     'resolv'/2,
		     'rpc'/1,
		     'rpc'/2,
		     'services'/1,
		     'services'/2,
		     'split_line'/1,
		     'strict_address'/1,
		     'visible_string'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'services'/1 =
    %% Line 55
    fun (_cor0) ->
	%% Line 56
	apply 'services'/2
	    ('noname', _cor0)
'services'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 59
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[Name|[PortProto|Aliases]]> when 'true' ->
			%% Line 60
			case apply 'port_proto'/2
				 (PortProto, 0) of
			  <{Proto,Port}> when 'true' ->
			      %% Line 61
			      {Name,Proto,Port,Aliases}
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-services/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-services/2-fun-0-'}}] )
	in  %% Line 63
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'rpc'/1 =
    %% Line 72
    fun (_cor0) ->
	%% Line 73
	apply 'rpc'/2
	    ('noname', _cor0)
'rpc'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 76
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[Name|[Program|Aliases]]> when 'true' ->
			let <Prog> =
			    %% Line 77
			    call 'erlang':'list_to_integer'
				(Program)
			in  %% Line 78
			    {Name,Prog,Aliases}
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-rpc/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-rpc/2-fun-0-'}}] )
	in  %% Line 80
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'hosts'/1 =
    %% Line 88
    fun (_cor0) ->
	%% Line 89
	apply 'hosts'/2
	    ('noname', _cor0)
'hosts'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 92
	    ( fun (_cor5) ->
		  case _cor5 of
		    <[Address|[Name|Aliases]]> when 'true' ->
			%% Line 97
			case call 'string':'tokens'
				 (Address, [37]) of
			  %% Line 98
			  <[Addr|[_cor10|[]]]> when 'true' ->
			      %% Line 99
			      case apply 'address'/1
				       (Addr) of
				<{'ok',_cor11}> when 'true' ->
				    %% Line 100
				    'skip'
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor2})
				  -| ['compiler_generated'] )
			      end
			  %% Line 101
			  <_cor12> when 'true' ->
			      %% Line 102
			      case apply 'address'/1
				       (Address) of
				<{'ok',IP}> when 'true' ->
				    %% Line 103
				    {IP,Name,Aliases}
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			end
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-hosts/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-hosts/2-fun-0-'}}] )
	in  %% Line 106
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'resolv'/1 =
    %% Line 118
    fun (_cor0) ->
	%% Line 119
	apply 'resolv'/2
	    ('noname', _cor0)
'resolv'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 122
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[[100|[111|[109|[97|[105|[110]]]]]]|[Domain|[]]]> when 'true' ->
			%% Line 123
			{'domain',Domain}
		    %% Line 124
		    <[[110|[97|[109|[101|[115|[101|[114|[118|[101|[114]]]]]]]]]]|[Address|[]]]> when 'true' ->
			%% Line 125
			case apply 'address'/1
				 (Address) of
			  <{'ok',IP}> when 'true' ->
			      %% Line 126
			      {'nameserver',IP}
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    %% Line 127
		    <[[115|[101|[97|[114|[99|[104]]]]]]|List]> when 'true' ->
			%% Line 128
			{'search',List}
		    %% Line 129
		    <[[108|[111|[111|[107|[117|[112]]]]]]|Types]> when 'true' ->
			%% Line 130
			{'lookup',Types}
		    %% Line 131
		    <_cor8> when 'true' ->
			%% Line 132
			'skip'
		  end
	      -| [{'id',{0,0,'-resolv/2-fun-0-'}}] )
	in  %% Line 134
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'host_conf_linux'/1 =
    %% Line 142
    fun (_cor0) ->
	%% Line 143
	apply 'host_conf_linux'/2
	    ('noname', _cor0)
'host_conf_linux'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 146
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[[111|[114|[100|[101|[114]]]]]|Order]> when 'true' ->
			let <_cor2> =
			    %% Line 148
			    apply 'split_comma'/1
				(Order)
			in  %% Line 148
			    {'lookup',_cor2}
		    %% Line 149
		    <_cor8> when 'true' ->
			%% Line 150
			'skip'
		  end
	      -| [{'id',{0,0,'-host_conf_linux/2-fun-0-'}}] )
	in  %% Line 152
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'host_conf_freebsd'/1 =
    %% Line 160
    fun (_cor0) ->
	%% Line 161
	apply 'host_conf_freebsd'/2
	    ('noname', _cor0)
'host_conf_freebsd'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 164
	    ( fun (_cor2) ->
		  case _cor2 of
		    <[Type|[]]> when 'true' ->
			Type
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-host_conf_freebsd/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-host_conf_freebsd/2-fun-0-'}}] )
	in  %% Line 165
	    case apply 'parse_file'/3
		     (_cor1, _cor0, Fn) of
	      %% Line 166
	      <{'ok',Ls}> when 'true' ->
		  {'ok',[{'lookup',Ls}|[]]}
	      %% Line 167
	      <Error> when 'true' ->
		  Error
	    end
'host_conf_bsdos'/1 =
    %% Line 182
    fun (_cor0) ->
	%% Line 183
	apply 'host_conf_bsdos'/2
	    ('noname', _cor0)
'host_conf_bsdos'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 186
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[[104|[111|[115|[116|[115]]]]]|List]> when 'true' ->
			let <_cor2> =
			    %% Line 187
			    apply 'split_comma'/1
				(List)
			in  %% Line 187
			    apply 'delete_options'/1
				(_cor2)
		    %% Line 188
		    <_cor10> when 'true' ->
			%% Line 189
			'skip'
		  end
	      -| [{'id',{0,0,'-host_conf_bsdos/2-fun-0-'}}] )
	in  %% Line 191
	    case apply 'parse_file'/3
		     (_cor1, _cor0, Fn) of
	      %% Line 192
	      <{'ok',Ls}> when 'true' ->
		  let <_cor6> =
		      %% Line 193
		      call 'lists':'append'
			  (Ls)
		  in  %% Line 193
		      {'ok',[{'lookup',_cor6}|[]]}
	      %% Line 194
	      <Error> when 'true' ->
		  Error
	    end
'delete_options'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <[[99|[111|[110|[116|[105|[110|[117|[101]]]]]]]]|T]> when 'true' ->
	      %% Line 198
	      apply 'delete_options'/1
		  (T)
	  %% Line 199
	  <[[109|[101|[114|[103|[101]]]]]|T]> when 'true' ->
	      %% Line 200
	      apply 'delete_options'/1
		  (T)
	  %% Line 201
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 202
		  apply 'delete_options'/1
		      (T)
	      in  %% Line 202
		  [H|_cor1]
	  %% Line 203
	  <[]> when 'true' ->
	      %% Line 204
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'delete_options',1}}] )
	    -| ['compiler_generated'] )
	end
'nsswitch_conf'/1 =
    %% Line 214
    fun (_cor0) ->
	%% Line 215
	apply 'nsswitch_conf'/2
	    ('noname', _cor0)
'nsswitch_conf'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 218
	    ( fun (_cor2) ->
		  case _cor2 of
		    <[[104|[111|[115|[116|[115|[58]]]]]]|Types]> when 'true' ->
			%% Line 219
			{'lookup',Types}
		    %% Line 220
		    <_cor7> when 'true' ->
			'skip'
		  end
	      -| [{'id',{0,0,'-nsswitch_conf/2-fun-0-'}}] )
	in  %% Line 222
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'protocols'/1 =
    %% Line 231
    fun (_cor0) ->
	%% Line 232
	apply 'protocols'/2
	    ('noname', _cor0)
'protocols'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 235
	    ( fun (_cor4) ->
		  case _cor4 of
		    <[Name|[Number|[DName|[]]]]> when 'true' ->
			let <_cor3> =
			    %% Line 236
			    call 'erlang':'list_to_atom'
				(Name)
			in  let <_cor2> =
				%% Line 236
				call 'erlang':'list_to_integer'
				    (Number)
			    in  %% Line 236
				{_cor3,_cor2,DName}
		    ( <_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5})
			    -| [{'function_name',{'-protocols/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-protocols/2-fun-0-'}}] )
	in  %% Line 238
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'netmasks'/1 =
    %% Line 247
    fun (_cor0) ->
	%% Line 248
	apply 'netmasks'/2
	    ('noname', _cor0)
'netmasks'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 251
	    ( fun (_cor4) ->
		  case _cor4 of
		    <[Net|[Subnetmask|[]]]> when 'true' ->
			%% Line 252
			case apply 'address'/1
				 (Net) of
			  <{'ok',NetIP}> when 'true' ->
			      %% Line 253
			      case apply 'address'/1
				       (Subnetmask) of
				<{'ok',Mask}> when 'true' ->
				    %% Line 254
				    {NetIP,Mask}
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5})
			    -| [{'function_name',{'-netmasks/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-netmasks/2-fun-0-'}}] )
	in  %% Line 256
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'networks'/1 =
    %% Line 265
    fun (_cor0) ->
	%% Line 266
	apply 'networks'/2
	    ('noname', _cor0)
'networks'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	let <Fn> =
	    %% Line 269
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[NetName|[NetNumber|[]]]> when 'true' ->
			let <Number> =
			    %% Line 270
			    call 'erlang':'list_to_integer'
				(NetNumber)
			in  %% Line 271
			    {NetName,Number}
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-networks/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-networks/2-fun-0-'}}] )
	in  %% Line 273
	    apply 'parse_file'/3
		(_cor1, _cor0, Fn)
'parse_file'/3 =
    %% Line 281
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fname,{'fd',Fd},Fn> when 'true' ->
	      %% Line 282
	      apply 'parse_fd'/5
		  (Fname, Fd, 1, Fn, [])
	  %% Line 283
	  <Fname,{'chars',Cs},Fn>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      %% Line 284
	      apply 'parse_cs'/5
		  (Fname, Cs, 1, Fn, [])
	  %% Line 285
	  <Fname,{'chars',Cs},Fn>
	      when call 'erlang':'is_binary'
		    (Cs) ->
	      let <_cor3> =
		  %% Line 286
		  call 'erlang':'binary_to_list'
		      (Cs)
	      in  %% Line 286
		  apply 'parse_cs'/5
		      (Fname, _cor3, 1, Fn, [])
	  %% Line 287
	  <_cor10,File,Fn> when 'true' ->
	      %% Line 288
	      case call 'file':'open'
		       (File, ['read']) of
		%% Line 289
		<{'ok',Fd}> when 'true' ->
		    let <Result> =
			%% Line 290
			apply 'parse_fd'/5
			    (File, Fd, 1, Fn, [])
		    in  do  %% Line 291
			    ( call 'file':'close'
				  (Fd)
			      -| ['result_not_wanted'] )
			    %% Line 292
			    Result
		%% Line 293
		<Error> when 'true' ->
		    Error
	      end
	end
'parse_fd'/5 =
    %% Line 296
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 297
	case apply 'read_line'/1
		 (_cor3) of
	  %% Line 298
	  <'eof'> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (_cor0)
	      in  {'ok',_cor5}
	  %% Line 299
	  <Cs> when 'true' ->
	      %% Line 300
	      case apply 'split_line'/1
		       (Cs) of
		%% Line 301
		<[]> when 'true' ->
		    let <_cor6> =
			call 'erlang':'+'
			    (_cor2, 1)
		    in  apply 'parse_fd'/5
			    (_cor4, _cor3, _cor6, _cor1, _cor0)
		%% Line 302
		<Toks> when 'true' ->
		    let <_cor7> =
			catch
			    %% Line 303
			    apply _cor1
				(Toks)
		    in  %% Line 303
			case _cor7 of
			  %% Line 304
			  <{'EXIT',_cor20}> when 'true' ->
			      do  %% Line 305
				  apply 'error'/2
				      ([126|[112|[58|[126|[112|[58|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[32|[108|[105|[110|[101|[44|[32|[83|[75|[73|[80|[80|[69|[68|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor2|[]]])
				  let <_cor8> =
				      %% Line 306
				      call 'erlang':'+'
					  (_cor2, 1)
				  in  %% Line 306
				      apply 'parse_fd'/5
					  (_cor4, _cor3, _cor8, _cor1, _cor0)
			  %% Line 307
			  <{'warning',Wlist,Val}> when 'true' ->
			      do  %% Line 308
				  apply 'warning'/2
				      ([126|[112|[58|[126|[112|[58|[32|[119|[97|[114|[110|[105|[110|[103|[33|[32|[115|[116|[114|[97|[110|[103|[101|[32|[100|[111|[109|[97|[105|[110|[32|[110|[97|[109|[101|[40|[115|[41|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor2|[Wlist|[]]]])
				  let <_cor9> =
				      %% Line 309
				      call 'erlang':'+'
					  (_cor2, 1)
				  in  %% Line 309
				      apply 'parse_fd'/5
					  (_cor4, _cor3, _cor9, _cor1, [Val|_cor0])
			  %% Line 311
			  <'skip'> when 'true' ->
			      let <_cor10> =
				  %% Line 312
				  call 'erlang':'+'
				      (_cor2, 1)
			      in  %% Line 312
				  apply 'parse_fd'/5
				      (_cor4, _cor3, _cor10, _cor1, _cor0)
			  %% Line 313
			  <Val> when 'true' ->
			      let <_cor11> =
				  call 'erlang':'+'
				      (_cor2, 1)
			      in  apply 'parse_fd'/5
				      (_cor4, _cor3, _cor11, _cor1, [Val|_cor0])
			end
	      end
	end
'parse_cs'/5 =
    %% Line 318
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 319
	case apply 'get_line'/1
		 (_cor3) of
	  %% Line 320
	  <'eof'> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (_cor0)
	      in  {'ok',_cor5}
	  %% Line 321
	  <{Cs,Chars1}> when 'true' ->
	      %% Line 322
	      case apply 'split_line'/1
		       (Cs) of
		%% Line 323
		<[]> when 'true' ->
		    let <_cor6> =
			call 'erlang':'+'
			    (_cor2, 1)
		    in  apply 'parse_cs'/5
			    (_cor4, Chars1, _cor6, _cor1, _cor0)
		%% Line 324
		<Toks> when 'true' ->
		    let <_cor7> =
			catch
			    %% Line 325
			    apply _cor1
				(Toks)
		    in  %% Line 325
			case _cor7 of
			  %% Line 326
			  <{'EXIT',_cor20}> when 'true' ->
			      do  %% Line 327
				  apply 'error'/2
				      ([126|[112|[58|[126|[112|[58|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[32|[108|[105|[110|[101|[44|[32|[83|[75|[73|[80|[80|[69|[68|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor2|[]]])
				  let <_cor8> =
				      %% Line 328
				      call 'erlang':'+'
					  (_cor2, 1)
				  in  %% Line 328
				      apply 'parse_cs'/5
					  (_cor4, Chars1, _cor8, _cor1, _cor0)
			  %% Line 329
			  <{'warning',Wlist,Val}> when 'true' ->
			      do  %% Line 330
				  apply 'warning'/2
				      ([126|[112|[58|[126|[112|[58|[32|[119|[97|[114|[110|[105|[110|[103|[33|[32|[115|[116|[114|[97|[110|[103|[101|[32|[100|[111|[109|[97|[105|[110|[32|[110|[97|[109|[101|[40|[115|[41|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor2|[Wlist|[]]]])
				  let <_cor9> =
				      %% Line 331
				      call 'erlang':'+'
					  (_cor2, 1)
				  in  %% Line 331
				      apply 'parse_cs'/5
					  (_cor4, Chars1, _cor9, _cor1, [Val|_cor0])
			  %% Line 333
			  <'skip'> when 'true' ->
			      let <_cor10> =
				  call 'erlang':'+'
				      (_cor2, 1)
			      in  apply 'parse_cs'/5
				      (_cor4, Chars1, _cor10, _cor1, _cor0)
			  %% Line 334
			  <Val> when 'true' ->
			      let <_cor11> =
				  call 'erlang':'+'
				      (_cor2, 1)
			      in  apply 'parse_cs'/5
				      (_cor4, Chars1, _cor11, _cor1, [Val|_cor0])
			end
	      end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'eof'
	  %% Line 340
	  <Chars> when 'true' ->
	      apply 'get_line'/2
		  (Chars, [])
	end
'get_line'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  call 'lists':'reverse'
		      (Acc)
	      in  {_cor2,[]}
	  %% Line 343
	  <[13|[10|Cs]],Acc> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      ([10|Acc])
	      in  {_cor3,Cs}
	  %% Line 344
	  <[10|Cs],Acc> when 'true' ->
	      let <_cor4> =
		  call 'lists':'reverse'
		      ([10|Acc])
	      in  {_cor4,Cs}
	  %% Line 345
	  <[C|Cs],Acc> when 'true' ->
	      apply 'get_line'/2
		  (Cs, [C|Acc])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_line',2}}] )
	    -| ['compiler_generated'] )
	end
'read_line'/1 =
    %% Line 350
    fun (_cor0) ->
	case _cor0 of
	  <Fd>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      call 'io':'get_line'
		  (Fd, '')
	  %% Line 351
	  <Fd = {'file_descriptor',_cor2,_cor3}> when 'true' ->
	      %% Line 352
	      apply 'collect_line'/2
		  (Fd, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'read_line',1}}] )
	    -| ['compiler_generated'] )
	end
'collect_line'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	%% Line 355
	case call 'file':'read'
		 (_cor1, 80) of
	  %% Line 356
	  <{'ok',Line}>
	      when call 'erlang':'is_binary'
		    (Line) ->
	      let <_cor3> =
		  %% Line 357
		  call 'erlang':'byte_size'
		      (Line)
	      in  let <_cor2> =
		      %% Line 357
		      call 'erlang':'binary_to_list'
			  (Line)
		  in  %% Line 357
		      apply 'collect_line'/4
			  (_cor1, _cor3, _cor2, _cor0)
	  %% Line 358
	  <{'ok',Line}> when 'true' ->
	      let <_cor4> =
		  %% Line 359
		  call 'erlang':'length'
		      (Line)
	      in  %% Line 359
		  apply 'collect_line'/4
		      (_cor1, _cor4, Line, _cor0)
	  %% Line 360
	  <'eof'>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      %% Line 361
	      'eof'
	  %% Line 362
	  <'eof'> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'collect_line'/4 =
    %% Line 365
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,N,[13|[10|_cor15]],Cs> when 'true' ->
	      let <_cor4> =
		  %% Line 366
		  call 'erlang':'-'
		      (N, 2)
	      in  let <_cor5> =
		      %% Line 366
		      call 'erlang':'-'
			  (_cor4)
		  in  %% Line 366
		      case call 'file':'position'
			       (Fd, {'cur',_cor5}) of
			<{'ok',_cor16}> when 'true' ->
			    %% Line 367
			    call 'lists':'reverse'
				([10|Cs])
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  %% Line 368
	  <Fd,N,[10|_cor17],Cs> when 'true' ->
	      let <_cor7> =
		  %% Line 369
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor8> =
		      %% Line 369
		      call 'erlang':'-'
			  (_cor7)
		  in  %% Line 369
		      case call 'file':'position'
			       (Fd, {'cur',_cor8}) of
			<{'ok',_cor18}> when 'true' ->
			    %% Line 370
			    call 'lists':'reverse'
				([10|Cs])
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  %% Line 371
	  <Fd,_cor19,[],Cs> when 'true' ->
	      %% Line 372
	      apply 'collect_line'/2
		  (Fd, Cs)
	  %% Line 373
	  <Fd,N,[X|Xs],Cs> when 'true' ->
	      let <_cor10> =
		  %% Line 374
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 374
		  apply 'collect_line'/4
		      (Fd, _cor10, Xs, [X|Cs])
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'collect_line',4}}] )
	    -| ['compiler_generated'] )
	end
'port_proto'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],N>
	      when let <_cor2> =
		    call 'erlang':'>='
			(X, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (X, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 379
		  call 'erlang':'*'
		      (N, 10)
	      in  let <_cor4> =
		      %% Line 379
		      call 'erlang':'-'
			  (X, 48)
		  in  let <_cor6> =
			  %% Line 379
			  call 'erlang':'+'
			      (_cor5, _cor4)
		      in  %% Line 379
			  apply 'port_proto'/2
			      (Xs, _cor6)
	  %% Line 380
	  <[47|Proto],Port>
	      when call 'erlang':'=/='
		    (Port,
		     0) ->
	      let <_cor7> =
		  %% Line 381
		  call 'erlang':'list_to_atom'
		      (Proto)
	      in  %% Line 381
		  {_cor7,Port}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'port_proto',2}}] )
	    -| ['compiler_generated'] )
	end
'visible_string'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 388
	      apply 'is_vis1'/1
		  ([H|T])
	  %% Line 389
	  <_cor2> when 'true' ->
	      %% Line 390
	      'false'
	end
'is_vis1'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 33)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 126)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      apply 'is_vis1'/1
		  (Cs)
	  %% Line 393
	  <[]> when 'true' ->
	      'true'
	  %% Line 394
	  <_cor4> when 'true' ->
	      'false'
	end
'domain'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 401
	      apply 'is_dom1'/1
		  ([H|T])
	  %% Line 402
	  <_cor2> when 'true' ->
	      %% Line 403
	      'false'
	end
'is_dom1'/1 =
    %% Line 405
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 406
	  <[C|Cs]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 407
	  <[C|Cs]>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 408
	      case apply 'is_dom_ldh'/1
		       (Cs) of
		%% Line 409
		<'true'> when 'true' ->
		    let <_cor7> =
			call 'string':'tokens'
			    ([C|Cs], [46])
		    in  apply 'is_dom2'/1
			    (_cor7)
		%% Line 410
		<'false'> when 'true' ->
		    'false'
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 412
	  <_cor10> when 'true' ->
	      'false'
	end
'is_dom_ldh'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 415
	  <[C|Cs]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 416
	  <[C|Cs]>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 417
	  <[45|[46|_cor8]]> when 'true' ->
	      'false'
	  %% Line 418
	  <[95|[46|_cor9]]> when 'true' ->
	      'false'
	  %% Line 419
	  <[95|Cs]> when 'true' ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 420
	  <[45|Cs]> when 'true' ->
	      apply 'is_dom_ldh'/1
		  (Cs)
	  %% Line 421
	  <[46|Cs]> when 'true' ->
	      apply 'is_dom1'/1
		  (Cs)
	  %% Line 422
	  <[]> when 'true' ->
	      'true'
	  %% Line 423
	  <_cor10> when 'true' ->
	      'false'
	end
'is_dom2'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <[A|[B|[C|[D|[]]]]]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 430
		      call 'erlang':'list_to_integer'
			  (D)
	      in  %% Line 430
		  case _cor1 of
		    %% Line 431
		    <Di>
			when call 'erlang':'is_integer'
			      (_cor1) ->
			let <_cor4> =
			    catch
				%% Line 432
				call 'erlang':'list_to_integer'
				    (A)
			in  let <_cor3> =
				catch
				    %% Line 432
				    call 'erlang':'list_to_integer'
					(B)
			    in  let <_cor2> =
				    catch
					%% Line 432
					call 'erlang':'list_to_integer'
					    (C)
				in  %% Line 432
				    case <_cor4,_cor3,_cor2> of
				      %% Line 433
				      <Ai,Bi,Ci>
					  when try
						let <_cor5> =
						    call 'erlang':'is_integer'
							(Ai)
						in  let <_cor6> =
							%% Line 434
							call 'erlang':'is_integer'
							    (Bi)
						    in  let <_cor7> =
							    %% Line 435
							    call 'erlang':'is_integer'
								(Ci)
							in  let <_cor8> =
								call 'erlang':'and'
								    (_cor6, _cor7)
							    in  call 'erlang':'and'
								    (_cor5, _cor8)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 435
					  'false'
				      %% Line 436
				      <_fol45,_fol46,_fol47> when 'true' ->
					  'true'
				    end
		    %% Line 438
		    <_cor13> when 'true' ->
			'true'
		  end
	  %% Line 440
	  <_cor14> when 'true' ->
	      %% Line 441
	      'true'
	end
'address'/1 =
    %% Line 449
    fun (_cor0) ->
	case _cor0 of
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 450
	      case apply 'ipv4_address'/1
		       (Cs) of
		%% Line 451
		<{'ok',IP}> when 'true' ->
		    %% Line 452
		    {'ok',IP}
		%% Line 453
		<_cor3> when 'true' ->
		    %% Line 454
		    apply 'ipv6strict_address'/1
			(Cs)
	      end
	  %% Line 456
	  <_cor4> when 'true' ->
	      %% Line 457
	      {'error','einval'}
	end
'strict_address'/1 =
    %% Line 460
    fun (_cor0) ->
	case _cor0 of
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 461
	      case apply 'ipv4strict_address'/1
		       (Cs) of
		%% Line 462
		<{'ok',IP}> when 'true' ->
		    %% Line 463
		    {'ok',IP}
		%% Line 464
		<_cor3> when 'true' ->
		    %% Line 465
		    apply 'ipv6strict_address'/1
			(Cs)
	      end
	  %% Line 467
	  <_cor4> when 'true' ->
	      %% Line 468
	      {'error','einval'}
	end
'ipv4_address'/1 =
    %% Line 483
    fun (_cor0) ->
	%% Line 484
	try
	    apply 'ipv4_addr'/1
		(_cor0)
	of <_cor1> ->
	    %% Line 486
	    {'ok',_cor1}
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 488
	      <'error','badarg',_cor7> when 'true' ->
		  %% Line 489
		  {'error','einval'}
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'ipv4_addr'/1 =
    %% Line 492
    fun (_cor0) ->
	%% Line 493
	case apply 'ipv4_addr'/2
		 (_cor0, []) of
	  %% Line 494
	  <[D|[]]>
	      when call 'erlang':'<'
		    (D,
		     4294967296) ->
	      %% Line 495
	      case #{#<D>(32,1,'integer',['unsigned'|['big']])}# of
		<#{#<D1>(8,1,'integer',['unsigned'|['big']]),
		   #<D2>(8,1,'integer',['unsigned'|['big']]),
		   #<D3>(8,1,'integer',['unsigned'|['big']]),
		   #<D4>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 496
		    {D1,D2,D3,D4}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 497
	  <[D|[D1|[]]]>
	      when let <_cor4> =
		    call 'erlang':'<'
			(D, 16777216)
		in  let <_cor5> =
			call 'erlang':'<'
			    (D1, 256)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 498
	      case #{#<D>(24,1,'integer',['unsigned'|['big']])}# of
		<#{#<D2>(8,1,'integer',['unsigned'|['big']]),
		   #<D3>(8,1,'integer',['unsigned'|['big']]),
		   #<D4>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 499
		    {D1,D2,D3,D4}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 500
	  <[D|[D2|[D1|[]]]]>
	      when try
		    let <_cor8> =
			call 'erlang':'<'
			    (D, 65536)
		    in  let <_cor9> =
			    call 'erlang':'bor'
				(D2, D1)
			in  let <_cor10> =
				call 'erlang':'<'
				    (_cor9, 256)
			    in  call 'erlang':'and'
				    (_cor8, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 501
	      case #{#<D>(16,1,'integer',['unsigned'|['big']])}# of
		<#{#<D3>(8,1,'integer',['unsigned'|['big']]),
		   #<D4>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 502
		    {D1,D2,D3,D4}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 503
	  <[D4|[D3|[D2|[D1|[]]]]]>
	      when try
		    let <_cor12> =
			call 'erlang':'bor'
			    (D4, D3)
		    in  let <_cor13> =
			    call 'erlang':'bor'
				(_cor12, D2)
			in  let <_cor14> =
				call 'erlang':'bor'
				    (_cor13, D1)
			    in  call 'erlang':'<'
				    (_cor14, 256)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 504
	      {D1,D2,D3,D4}
	  %% Line 505
	  <_cor17> when 'true' ->
	      %% Line 506
	      call 'erlang':'error'
		  ('badarg')
	end
'ipv4_addr'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_cor7|_cor8],[_cor9|[_cor10|[_cor11|[_cor12|[]]]]]> when 'true' ->
	      %% Line 511
	      call 'erlang':'error'
		  ('badarg')
	  %% Line 512
	  <[48|[120|Cs]],Ds> when 'true' ->
	      let <_cor2> =
		  %% Line 513
		  apply 'strip0'/1
		      (Cs)
	      in  %% Line 513
		  apply 'ipv4_addr'/5
		      (_cor2, Ds, [], 16, 8)
	  %% Line 514
	  <[48|[88|Cs]],Ds> when 'true' ->
	      let <_cor3> =
		  %% Line 515
		  apply 'strip0'/1
		      (Cs)
	      in  %% Line 515
		  apply 'ipv4_addr'/5
		      (_cor3, Ds, [], 16, 8)
	  %% Line 516
	  <[48|Cs],Ds> when 'true' ->
	      let <_cor4> =
		  %% Line 517
		  apply 'strip0'/1
		      (Cs)
	      in  %% Line 517
		  apply 'ipv4_addr'/5
		      (_cor4, Ds, [48], 8, 11)
	  %% Line 518
	  <Cs,Ds>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      %% Line 519
	      apply 'ipv4_addr'/5
		  (Cs, Ds, [], 10, 10)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ipv4_addr',2}}] )
	    -| ['compiler_generated'] )
	end
'ipv4_addr'/5 =
    %% Line 521
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 522
	case apply 'ipv4_field'/4
		 (_cor4, _cor0, _cor2, _cor1) of
	  %% Line 523
	  <{D,[]}> when 'true' ->
	      %% Line 524
	      [D|_cor3]
	  %% Line 525
	  <{D,[46|Cs = [_cor11|_cor12]]}> when 'true' ->
	      %% Line 526
	      apply 'ipv4_addr'/2
		  (Cs, [D|_cor3])
	  %% Line 527
	  <{_cor13,_cor14}> when 'true' ->
	      %% Line 528
	      call 'erlang':'error'
		  ('badarg')
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'strip0'/1 =
    %% Line 531
    fun (_cor0) ->
	case _cor0 of
	  <[48|Cs]> when 'true' ->
	      %% Line 532
	      apply 'strip0'/1
		  (Cs)
	  %% Line 533
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 534
	      Cs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'strip0',1}}] )
	    -| ['compiler_generated'] )
	end
'ipv4strict_address'/1 =
    %% Line 543
    fun (_cor0) ->
	%% Line 544
	try
	    apply 'ipv4strict_addr'/1
		(_cor0)
	of <_cor1> ->
	    %% Line 546
	    {'ok',_cor1}
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 548
	      <'error','badarg',_cor7> when 'true' ->
		  %% Line 549
		  {'error','einval'}
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'ipv4strict_addr'/1 =
    %% Line 552
    fun (_cor0) ->
	%% Line 553
	case apply 'ipv4strict_addr'/2
		 (_cor0, []) of
	  %% Line 554
	  <[D4|[D3|[D2|[D1|[]]]]]>
	      when try
		    let <_cor1> =
			call 'erlang':'bor'
			    (D4, D3)
		    in  let <_cor2> =
			    call 'erlang':'bor'
				(_cor1, D2)
			in  let <_cor3> =
				call 'erlang':'bor'
				    (_cor2, D1)
			    in  call 'erlang':'<'
				    (_cor3, 256)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 555
	      {D1,D2,D3,D4}
	  %% Line 556
	  <_cor6> when 'true' ->
	      %% Line 557
	      call 'erlang':'error'
		  ('badarg')
	end
'ipv4strict_addr'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[_cor5|_cor6],[_cor7|[_cor8|[_cor9|[_cor10|[]]]]]> when 'true' ->
	      %% Line 562
	      call 'erlang':'error'
		  ('badarg')
	  %% Line 563
	  <[48],Ds> when 'true' ->
	      %% Line 564
	      [0|Ds]
	  %% Line 565
	  <[48|[46|Cs]],Ds> when 'true' ->
	      %% Line 566
	      apply 'ipv4strict_addr'/2
		  (Cs, [0|Ds])
	  %% Line 567
	  <Cs0,Ds>
	      when call 'erlang':'is_list'
		    (Cs0) ->
	      %% Line 568
	      case apply 'ipv4_field'/4
		       (Cs0, 3, [], 10) of
		%% Line 569
		<{D,[]}> when 'true' ->
		    %% Line 570
		    [D|Ds]
		%% Line 571
		<{D,[46|Cs = [_cor11|_cor12]]}> when 'true' ->
		    %% Line 572
		    apply 'ipv4strict_addr'/2
			(Cs, [D|Ds])
		%% Line 573
		<{_cor13,_cor14}> when 'true' ->
		    %% Line 574
		    call 'erlang':'error'
			('badarg')
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'ipv4strict_addr',2}}] )
	    -| ['compiler_generated'] )
	end
'ipv4_field'/4 =
    %% Line 579
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor11,Rs,Base> when 'true' ->
	      let <_cor4> =
		  %% Line 580
		  apply 'ipv4_field'/2
		      (Rs, Base)
	      in  %% Line 580
		  {_cor4,[]}
	  %% Line 581
	  <Cs = [46|_cor12],_cor13,Rs,Base> when 'true' ->
	      let <_cor5> =
		  %% Line 582
		  apply 'ipv4_field'/2
		      (Rs, Base)
	      in  %% Line 582
		  {_cor5,Cs}
	  %% Line 583
	  <[48|_cor14],_cor15,[],_cor16> when 'true' ->
	      %% Line 584
	      call 'erlang':'error'
		  ('badarg')
	  %% Line 585
	  <[C|Cs],N,Rs,Base>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor6> =
		  %% Line 586
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 586
		  apply 'ipv4_field'/4
		      (Cs, _cor6, [C|Rs], Base)
	  %% Line 587
	  <Cs,_cor17,_cor18,_cor19>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      %% Line 588
	      call 'erlang':'error'
		  ('badarg')
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ipv4_field',4}}] )
	    -| ['compiler_generated'] )
	end
'ipv4_field'/2 =
    %% Line 590
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 591
	    call 'lists':'reverse'
		(_cor1)
	in  let <V> =
		%% Line 591
		call 'erlang':'list_to_integer'
		    (_cor2, _cor0)
	    in  %% Line 592
		case <> of
		  <>
		      when call 'erlang':'<'
			    (V,
			     0) ->
		      %% Line 593
		      call 'erlang':'error'
			  ('badarg')
		  %% Line 594
		  <> when 'true' ->
		      %% Line 595
		      V
		end
'ipv6_address'/1 =
    %% Line 605
    fun (_cor0) ->
	%% Line 606
	case apply 'ipv4_address'/1
		 (_cor0) of
	  %% Line 607
	  <{'ok',{D1,D2,D3,D4}}> when 'true' ->
	      let <_cor3> =
		  %% Line 608
		  call 'erlang':'bsl'
		      (D1, 8)
	      in  let <_cor4> =
		      %% Line 608
		      call 'erlang':'bor'
			  (_cor3, D2)
		  in  let <_cor1> =
			  %% Line 608
			  call 'erlang':'bsl'
			      (D3, 8)
		      in  let <_cor2> =
			      %% Line 608
			      call 'erlang':'bor'
				  (_cor1, D4)
			  in  %% Line 608
			      {'ok',{0,0,0,0,0,65535,_cor4,_cor2}}
	  %% Line 609
	  <_cor7> when 'true' ->
	      %% Line 610
	      apply 'ipv6strict_address'/1
		  (_cor0)
	end
'ipv6strict_address'/1 =
    %% Line 629
    fun (_cor0) ->
	%% Line 630
	try
	    apply 'ipv6_addr'/1
		(_cor0)
	of <_cor1> ->
	    %% Line 632
	    {'ok',_cor1}
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 634
	      <'error','badarg',_cor7> when 'true' ->
		  %% Line 635
		  {'error','einval'}
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'ipv6_addr'/1 =
    %% Line 638
    fun (_cor0) ->
	case _cor0 of
	  <[58|[58]]> when 'true' ->
	      %% Line 639
	      apply 'ipv6_addr_done'/3
		  ([], [], 0)
	  %% Line 640
	  <[58|[58|Cs]]> when 'true' ->
	      let <_cor1> =
		  %% Line 641
		  apply 'hex'/1
		      (Cs)
	      in  %% Line 641
		  apply 'ipv6_addr'/4
		      (_cor1, [], [], 0)
	  %% Line 642
	  <Cs> when 'true' ->
	      let <_cor2> =
		  %% Line 643
		  apply 'hex'/1
		      (Cs)
	      in  %% Line 643
		  apply 'ipv6_addr'/3
		      (_cor2, [], 0)
	end
'ipv6_addr'/3 =
    %% Line 646
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Cs0,[]},A,N>
	      when call 'erlang':'=='
		    (N,
		     7) ->
	      let <_cor3> =
		  %% Line 647
		  apply 'hex_to_int'/1
		      (Cs0)
	      in  %% Line 647
		  apply 'ipv6_addr_done'/1
		      ([_cor3|A])
	  %% Line 648
	  <{Cs0,[58|[58]]},A,N>
	      when call 'erlang':'=<'
		    (N,
		     6) ->
	      let <_cor5> =
		  %% Line 649
		  apply 'hex_to_int'/1
		      (Cs0)
	      in  let <_cor4> =
		      %% Line 649
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 649
		      apply 'ipv6_addr_done'/3
			  ([_cor5|A], [], _cor4)
	  %% Line 650
	  <{Cs0,[58|[58|Cs1]]},A,N>
	      when call 'erlang':'=<'
		    (N,
		     5) ->
	      let <_cor8> =
		  %% Line 651
		  apply 'hex'/1
		      (Cs1)
	      in  let <_cor7> =
		      %% Line 651
		      apply 'hex_to_int'/1
			  (Cs0)
		  in  let <_cor6> =
			  %% Line 651
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 651
			  apply 'ipv6_addr'/4
			      (_cor8, [_cor7|A], [], _cor6)
	  %% Line 652
	  <{Cs0,[58|Cs1]},A,N>
	      when call 'erlang':'=<'
		    (N,
		     6) ->
	      let <_cor11> =
		  %% Line 653
		  apply 'hex'/1
		      (Cs1)
	      in  let <_cor10> =
		      %% Line 653
		      apply 'hex_to_int'/1
			  (Cs0)
		  in  let <_cor9> =
			  %% Line 653
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 653
			  apply 'ipv6_addr'/3
			      (_cor11, [_cor10|A], _cor9)
	  %% Line 654
	  <{Cs0,Cs1 = [46|_cor17]},A,N>
	      when call 'erlang':'=='
		    (N,
		     6) ->
	      let <_cor12> =
		  %% Line 655
		  call 'erlang':'++'
		      (Cs0, Cs1)
	      in  let <_cor13> =
		      %% Line 655
		      apply 'ipv4strict_addr'/1
			  (_cor12)
		  in  %% Line 655
		      apply 'ipv6_addr_done'/4
			  (A, [], N, _cor13)
	  %% Line 656
	  <_cor18,_cor19,_cor20> when 'true' ->
	      %% Line 657
	      call 'erlang':'error'
		  ('badarg')
	end
'ipv6_addr'/4 =
    %% Line 660
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Cs0,[]},A,B,N>
	      when call 'erlang':'=<'
		    (N,
		     6) ->
	      let <_cor5> =
		  %% Line 661
		  apply 'hex_to_int'/1
		      (Cs0)
	      in  let <_cor4> =
		      %% Line 661
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 661
		      apply 'ipv6_addr_done'/3
			  (A, [_cor5|B], _cor4)
	  %% Line 662
	  <{Cs0,[58|Cs1]},A,B,N>
	      when call 'erlang':'=<'
		    (N,
		     5) ->
	      let <_cor8> =
		  %% Line 663
		  apply 'hex'/1
		      (Cs1)
	      in  let <_cor7> =
		      %% Line 663
		      apply 'hex_to_int'/1
			  (Cs0)
		  in  let <_cor6> =
			  %% Line 663
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 663
			  apply 'ipv6_addr'/4
			      (_cor8, A, [_cor7|B], _cor6)
	  %% Line 664
	  <{Cs0,Cs1 = [46|_cor15]},A,B,N>
	      when call 'erlang':'=<'
		    (N,
		     5) ->
	      let <_cor9> =
		  %% Line 665
		  call 'erlang':'++'
		      (Cs0, Cs1)
	      in  let <_cor10> =
		      %% Line 665
		      apply 'ipv4strict_addr'/1
			  (_cor9)
		  in  %% Line 665
		      apply 'ipv6_addr_done'/4
			  (A, B, N, _cor10)
	  %% Line 666
	  <_cor16,_cor17,_cor18,_cor19> when 'true' ->
	      %% Line 667
	      call 'erlang':'error'
		  ('badarg')
	end
'ipv6_addr_done'/4 =
    %% Line 669
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ar,Br,N,{D1,D2,D3,D4}> when 'true' ->
	      let <_cor5> =
		  %% Line 670
		  call 'erlang':'bsl'
		      (D3, 8)
	      in  let <_cor6> =
		      %% Line 670
		      call 'erlang':'bor'
			  (_cor5, D4)
		  in  let <_cor7> =
			  %% Line 670
			  call 'erlang':'bsl'
			      (D1, 8)
		      in  let <_cor8> =
			      %% Line 670
			      call 'erlang':'bor'
				  (_cor7, D2)
			  in  let <_cor4> =
				  %% Line 670
				  call 'erlang':'+'
				      (N, 2)
			      in  %% Line 670
				  apply 'ipv6_addr_done'/3
				      (Ar, [_cor6|[_cor8|Br]], _cor4)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'ipv6_addr_done',4}}] )
	    -| ['compiler_generated'] )
	end
'ipv6_addr_done'/3 =
    %% Line 672
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 673
	    call 'erlang':'-'
		(8, _cor0)
	in  let <_cor4> =
		%% Line 673
		apply 'dup'/3
		    (_cor3, 0, _cor2)
	    in  let <_cor5> =
		    %% Line 673
		    call 'erlang':'++'
			(_cor1, _cor4)
		in  %% Line 673
		    apply 'ipv6_addr_done'/1
			(_cor5)
'ipv6_addr_done'/1 =
    %% Line 675
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 676
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 676
	    call 'erlang':'list_to_tuple'
		(_cor1)
'hex'/1 =
    %% Line 679
    fun (_cor0) ->
	apply 'hex'/2
	    (_cor0, [])
'hex'/2 =
    %% Line 681
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],R>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 682
	      apply 'hex'/2
		  (Cs, [C|R])
	  %% Line 683
	  <[C|Cs],R>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 102)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 684
	      apply 'hex'/2
		  (Cs, [C|R])
	  %% Line 685
	  <[C|Cs],R>
	      when let <_cor6> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (C, 70)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 686
	      apply 'hex'/2
		  (Cs, [C|R])
	  %% Line 687
	  <Cs,R = [_cor11|_cor12]>
	      when call 'erlang':'is_list'
		    (Cs) ->
	      let <_cor8> =
		  %% Line 688
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 688
		  {_cor8,Cs}
	  %% Line 689
	  <_cor13,_cor14> when 'true' ->
	      %% Line 690
	      call 'erlang':'error'
		  ('badarg')
	end
'hex_to_int'/1 =
    %% Line 693
    fun (_cor0) ->
	%% Line 694
	case apply 'strip0'/1
		 (_cor0) of
	  %% Line 695
	  <Cs>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (Cs)
		    in  call 'erlang':'=<'
			    (_cor1, 4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor2> =
		  %% Line 696
		  [48|Cs]
	      in  %% Line 696
		  call 'erlang':'list_to_integer'
		      (_cor2, 16)
	  %% Line 697
	  <_cor5> when 'true' ->
	      %% Line 698
	      call 'erlang':'error'
		  ('badarg')
	end
'dup'/3 =
    %% Line 702
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor9,L> when 'true' ->
	      %% Line 703
	      L
	  %% Line 704
	  <N,E,L>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>='
			    (N, 1)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 705
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 705
		  apply 'dup'/3
		      (_cor5, E, [E|L])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'dup',3}}] )
	    -| ['compiler_generated'] )
	end
'ntoa'/1 =
    %% Line 711
    fun (_cor0) ->
	case _cor0 of
	  <{A,B,C,D}> when 'true' ->
	      let <_cor9> =
		  %% Line 712
		  call 'erlang':'integer_to_list'
		      (A)
	      in  let <_cor6> =
		      %% Line 712
		      call 'erlang':'integer_to_list'
			  (B)
		  in  let <_cor3> =
			  %% Line 713
			  call 'erlang':'integer_to_list'
			      (C)
		      in  let <_cor1> =
			      %% Line 713
			      call 'erlang':'integer_to_list'
				  (D)
			  in  let <_cor2> =
				  %% Line 713
				  [46|_cor1]
			      in  let <_cor4> =
				      %% Line 713
				      call 'erlang':'++'
					  (_cor3, _cor2)
				  in  let <_cor5> =
					  %% Line 712
					  [46|_cor4]
				      in  let <_cor7> =
					      %% Line 712
					      call 'erlang':'++'
						  (_cor6, _cor5)
					  in  let <_cor8> =
						  %% Line 712
						  [46|_cor7]
					      in  %% Line 712
						  call 'erlang':'++'
						      (_cor9, _cor8)
	  %% Line 715
	  <{0,0,0,0,0,0,0,0}> when 'true' ->
	      [58|[58]]
	  %% Line 717
	  <{0,0,0,0,0,0,0,1}> when 'true' ->
	      [58|[58|[49]]]
	  %% Line 719
	  <{0,0,0,0,0,0,A,B}> when 'true' ->
	      let <_cor12> =
		  apply 'dig_to_dec'/1
		      (A)
	      in  let <_cor10> =
		      apply 'dig_to_dec'/1
			  (B)
		  in  let <_cor11> =
			  [46|_cor10]
		      in  let <_cor13> =
			      call 'erlang':'++'
				  (_cor12, _cor11)
			  in  [58|[58|_cor13]]
	  %% Line 721
	  <{0,0,0,0,0,65535,A,B}> when 'true' ->
	      let <_cor16> =
		  %% Line 722
		  apply 'dig_to_dec'/1
		      (A)
	      in  let <_cor14> =
		      %% Line 722
		      apply 'dig_to_dec'/1
			  (B)
		  in  let <_cor15> =
			  %% Line 722
			  [46|_cor14]
		      in  let <_cor17> =
			      %% Line 722
			      call 'erlang':'++'
				  (_cor16, _cor15)
			  in  %% Line 722
			      call 'erlang':'++'
				  ([58|[58|[70|[70|[70|[70|[58]]]]]]], _cor17)
	  %% Line 723
	  <T = {_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      let <_cor18> =
		  %% Line 725
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 725
		  apply 'ntoa'/2
		      (_cor18, [])
	  %% Line 726
	  <_cor28> when 'true' ->
	      %% Line 727
	      {'error','einval'}
	end
'ntoa'/2 =
    %% Line 730
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      %% Line 731
	      apply 'ntoa_done'/1
		  (R)
	  %% Line 732
	  <[0|[0|T]],R> when 'true' ->
	      %% Line 733
	      apply 'ntoa'/3
		  (T, R, 2)
	  %% Line 734
	  <[D|T],R> when 'true' ->
	      %% Line 735
	      apply 'ntoa'/2
		  (T, [D|R])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ntoa',2}}] )
	    -| ['compiler_generated'] )
	end
'ntoa'/3 =
    %% Line 738
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],R,_cor7> when 'true' ->
	      %% Line 739
	      apply 'ntoa_done'/2
		  (R, [])
	  %% Line 740
	  <[0|T],R,N> when 'true' ->
	      let <_cor3> =
		  %% Line 741
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 741
		  apply 'ntoa'/3
		      (T, R, _cor3)
	  %% Line 742
	  <[D|T],R,N> when 'true' ->
	      %% Line 743
	      apply 'ntoa'/4
		  (T, R, N, [D|[]])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'ntoa',3}}] )
	    -| ['compiler_generated'] )
	end
'ntoa'/4 =
    %% Line 746
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],R1,_X_N1,R2> when 'true' ->
	      %% Line 747
	      apply 'ntoa_done'/2
		  (R1, R2)
	  %% Line 748
	  <[0|[0|T]],R1,N1,R2> when 'true' ->
	      %% Line 749
	      apply 'ntoa'/5
		  (T, R1, N1, R2, 2)
	  %% Line 750
	  <[D|T],R1,N1,R2> when 'true' ->
	      %% Line 751
	      apply 'ntoa'/4
		  (T, R1, N1, [D|R2])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'ntoa',4}}] )
	    -| ['compiler_generated'] )
	end
'ntoa'/5 =
    %% Line 754
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <T,R1,N1,R2,N2>
	      when call 'erlang':'>'
		    (N2,
		     N1) ->
	      let <_cor5> =
		  %% Line 756
		  apply 'dup'/3
		      (N1, 0, R1)
	      in  let <_cor6> =
		      %% Line 756
		      call 'erlang':'++'
			  (R2, _cor5)
		  in  %% Line 756
		      apply 'ntoa'/3
			  (T, _cor6, N2)
	  %% Line 757
	  <[],R1,_X_N1,R2,N2> when 'true' ->
	      let <_cor7> =
		  %% Line 758
		  apply 'dup'/3
		      (N2, 0, R2)
	      in  %% Line 758
		  apply 'ntoa_done'/2
		      (R1, _cor7)
	  %% Line 759
	  <[0|T],R1,N1,R2,N2> when 'true' ->
	      let <_cor8> =
		  %% Line 760
		  call 'erlang':'+'
		      (N2, 1)
	      in  %% Line 760
		  apply 'ntoa'/5
		      (T, R1, N1, R2, _cor8)
	  %% Line 761
	  <[D|T],R1,N1,R2,N2> when 'true' ->
	      let <_cor9> =
		  %% Line 762
		  apply 'dup'/3
		      (N2, 0, R2)
	      in  %% Line 762
		  apply 'ntoa'/4
		      (T, R1, N1, [D|_cor9])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'ntoa',5}}] )
	    -| ['compiler_generated'] )
	end
'ntoa_done'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 766
	    call 'lists':'reverse'
		(_cor1)
	in  let <_cor6> =
		%% Line 766
		call 'lists':'map'
		    (( 'dig_to_hex'/1
		       -| [{'id',{0,0,'-ntoa_done/2-fun-0-'}}] ), _cor5)
	    in  let <_cor7> =
		    %% Line 766
		    apply 'separate'/2
			([58], _cor6)
		in  let <_cor2> =
			%% Line 767
			call 'lists':'reverse'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 767
			    call 'lists':'map'
				(( 'dig_to_hex'/1
				   -| [{'id',{0,0,'-ntoa_done/2-fun-1-'}}] ), _cor2)
			in  let <_cor4> =
				%% Line 767
				apply 'separate'/2
				    ([58], _cor3)
			    in  let <_cor8> =
				    %% Line 766
				    call 'erlang':'++'
					(_cor7, %% Line 767
						[[58|[58]]|_cor4])
				in  %% Line 765
				    call 'lists':'append'
					(_cor8)
'ntoa_done'/1 =
    %% Line 769
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 770
	    call 'lists':'reverse'
		(_cor0)
	in  let <_cor2> =
		%% Line 770
		call 'lists':'map'
		    (( 'dig_to_hex'/1
		       -| [{'id',{0,0,'-ntoa_done/1-fun-0-'}}] ), _cor1)
	    in  let <_cor3> =
		    %% Line 770
		    apply 'separate'/2
			([58], _cor2)
		in  %% Line 770
		    call 'lists':'append'
			(_cor3)
'separate'/2 =
    %% Line 772
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_E,[]> when 'true' ->
	      %% Line 773
	      []
	  %% Line 774
	  <E,L = [_cor4|_cor5]> when 'true' ->
	      %% Line 775
	      apply 'separate'/3
		  (E, L, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'separate',2}}] )
	    -| ['compiler_generated'] )
	end
'separate'/3 =
    %% Line 777
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E,[H|T = [_cor6|_cor7]],R> when 'true' ->
	      %% Line 778
	      apply 'separate'/3
		  (E, T, [E|[H|R]])
	  %% Line 779
	  <_X_E,[H|[]],R> when 'true' ->
	      %% Line 780
	      call 'lists':'reverse'
		  (R, [H|[]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'separate',3}}] )
	    -| ['compiler_generated'] )
	end
'dig_to_dec'/1 =
    %% Line 783
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      [48|[46|[48]]]
	  %% Line 784
	  <X> when 'true' ->
	      let <_cor4> =
		  %% Line 785
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor5> =
		      %% Line 785
		      call 'erlang':'band'
			  (_cor4, 255)
		  in  let <_cor6> =
			  %% Line 785
			  call 'erlang':'integer_to_list'
			      (_cor5)
		      in  let <_cor1> =
			      %% Line 786
			      call 'erlang':'band'
				  (X, 255)
			  in  let <_cor2> =
				  %% Line 786
				  call 'erlang':'integer_to_list'
				      (_cor1)
			      in  let <_cor3> =
				      %% Line 785
				      [46|_cor2]
				  in  %% Line 785
				      call 'erlang':'++'
					  (_cor6, _cor3)
	end
'dig_to_hex'/1 =
    %% Line 789
    fun (_cor0) ->
	%% Line 790
	call 'erlang':'integer_to_list'
	    (_cor0, 16)
'dots'/1 =
    %% Line 797
    fun (_cor0) ->
	apply 'dots'/2
	    (_cor0, 0)
'dots'/2 =
    %% Line 799
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[46],N> when 'true' ->
	      {N,'true'}
	  %% Line 800
	  <[46|T],N> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (N, 1)
	      in  apply 'dots'/2
		      (T, _cor2)
	  %% Line 801
	  <[_X_C|T],N> when 'true' ->
	      apply 'dots'/2
		  (T, N)
	  %% Line 802
	  <[],N> when 'true' ->
	      {N,'false'}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'dots',2}}] )
	    -| ['compiler_generated'] )
	end
'split_line'/1 =
    %% Line 805
    fun (_cor0) ->
	%% Line 806
	apply 'split_line'/2
	    (_cor0, [])
'split_line'/2 =
    %% Line 808
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[35|_cor4],Tokens> when 'true' ->
	      call 'lists':'reverse'
		  (Tokens)
	  %% Line 809
	  <[32|L],Tokens> when 'true' ->
	      apply 'split_line'/2
		  (L, Tokens)
	  %% Line 810
	  <[9|L],Tokens> when 'true' ->
	      apply 'split_line'/2
		  (L, Tokens)
	  %% Line 811
	  <[10|L],Tokens> when 'true' ->
	      apply 'split_line'/2
		  (L, Tokens)
	  %% Line 812
	  <[],Tokens> when 'true' ->
	      call 'lists':'reverse'
		  (Tokens)
	  %% Line 813
	  <[C|Cs],Tokens> when 'true' ->
	      apply 'split_mid'/3
		  (Cs, [C|[]], Tokens)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'split_line',2}}] )
	    -| ['compiler_generated'] )
	end
'split_mid'/3 =
    %% Line 815
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[35|_X_Cs],Acc,Tokens> when 'true' ->
	      apply 'split_end'/2
		  (Acc, Tokens)
	  %% Line 816
	  <[32|Cs],Acc,Tokens> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Acc)
	      in  apply 'split_line'/2
		      (Cs, [_cor3|Tokens])
	  %% Line 817
	  <[9|Cs],Acc,Tokens> when 'true' ->
	      let <_cor4> =
		  call 'lists':'reverse'
		      (Acc)
	      in  apply 'split_line'/2
		      (Cs, [_cor4|Tokens])
	  %% Line 818
	  <[13|[10|Cs]],Acc,Tokens> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Acc)
	      in  apply 'split_line'/2
		      (Cs, [_cor5|Tokens])
	  %% Line 819
	  <[10|Cs],Acc,Tokens> when 'true' ->
	      let <_cor6> =
		  call 'lists':'reverse'
		      (Acc)
	      in  apply 'split_line'/2
		      (Cs, [_cor6|Tokens])
	  %% Line 820
	  <[],Acc,Tokens> when 'true' ->
	      apply 'split_end'/2
		  (Acc, Tokens)
	  %% Line 821
	  <[C|Cs],Acc,Tokens> when 'true' ->
	      apply 'split_mid'/3
		  (Cs, [C|Acc], Tokens)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split_mid',3}}] )
	    -| ['compiler_generated'] )
	end
'split_end'/2 =
    %% Line 823
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'lists':'reverse'
		(_cor1)
	in  call 'lists':'reverse'
		([_cor2|_cor0])
'split_comma'/1 =
    %% Line 833
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 834
	      []
	  %% Line 835
	  <[Token|Tokens]> when 'true' ->
	      let <_cor2> =
		  %% Line 836
		  apply 'split_comma'/2
		      (Token, [])
	      in  let <_cor1> =
		      %% Line 836
		      apply 'split_comma'/1
			  (Tokens)
		  in  %% Line 836
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'split_comma',1}}] )
	    -| ['compiler_generated'] )
	end
'split_comma'/2 =
    %% Line 838
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Tokens> when 'true' ->
	      call 'lists':'reverse'
		  (Tokens)
	  %% Line 839
	  <[44|L],Tokens> when 'true' ->
	      apply 'split_comma'/2
		  (L, Tokens)
	  %% Line 840
	  <[C|Cs],Tokens> when 'true' ->
	      apply 'split_mid_comma'/3
		  (Cs, [C|[]], Tokens)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'split_comma',2}}] )
	    -| ['compiler_generated'] )
	end
'split_mid_comma'/3 =
    %% Line 842
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[44|Cs],Acc,Tokens> when 'true' ->
	      let <_cor3> =
		  %% Line 843
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 843
		  apply 'split_comma'/2
		      (Cs, [_cor3|Tokens])
	  %% Line 844
	  <[],Acc,Tokens> when 'true' ->
	      %% Line 845
	      apply 'split_end'/2
		  (Acc, Tokens)
	  %% Line 846
	  <[C|Cs],Acc,Tokens> when 'true' ->
	      %% Line 847
	      apply 'split_mid_comma'/3
		  (Cs, [C|Acc], Tokens)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split_mid_comma',3}}] )
	    -| ['compiler_generated'] )
	end
'warning'/2 =
    %% Line 851
    fun (_cor1,_cor0) ->
	%% Line 852
	case call 'application':'get_env'
		 ('kernel', 'inet_warnings') of
	  %% Line 853
	  <{'ok','on'}> when 'true' ->
	      let <_cor2> =
		  %% Line 854
		  call 'erlang':'++'
		      ([105|[110|[101|[116|[95|[112|[97|[114|[115|[101|[58]]]]]]]]]]], _cor1)
	      in  %% Line 854
		  call 'error_logger':'info_msg'
		      (_cor2, _cor0)
	  %% Line 855
	  <_cor6> when 'true' ->
	      %% Line 856
	      'ok'
	end
'error'/2 =
    %% Line 859
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 860
	    call 'erlang':'++'
		([105|[110|[101|[116|[95|[112|[97|[114|[115|[101|[58]]]]]]]]]]], _cor1)
	in  %% Line 860
	    call 'error_logger':'info_msg'
		(_cor2, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('inet_parse')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('inet_parse', _cor0)
end