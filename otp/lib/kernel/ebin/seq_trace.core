module 'seq_trace' ['get_system_tracer'/0,
		    'get_token'/0,
		    'get_token'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'print'/1,
		    'print'/2,
		    'reset_trace'/0,
		    'set_system_tracer'/1,
		    'set_token'/1,
		    'set_token'/2]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{'flag',{'type',39,'union',[{'atom',39,'send'}|[{'atom',39,'receive'}|[{'atom',39,'print'}|[{'atom',39,'timestamp'}]]]]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'component',{'type',40,'union',[{'atom',40,'label'}|[{'atom',40,'serial'}|[{'type',40,'flag',[]}]]]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'value',{'type',41,'union',[{'paren_type',41,[{'ann_type',41,[{'var',41,'Integer'}|[{'type',41,'non_neg_integer',[]}]]}]}|[{'type',42,'tuple',[{'ann_type',42,[{'var',42,'Previous'}|[{'type',42,'non_neg_integer',[]}]]}|[{'ann_type',43,[{'var',43,'Current'}|[{'type',43,'non_neg_integer',[]}]]}]]}|[{'paren_type',44,[{'ann_type',44,[{'var',44,'Bool'}|[{'type',44,'boolean',[]}]]}]}]]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'token',{'type',48,'tuple',[{'type',48,'integer',[]}|[{'type',48,'boolean',[]}|[{'var',48,'_'}|[{'var',48,'_'}|[{'var',48,'_'}]]]]]},[]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'set_token',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Token'}]}|[{'type',49,'union',[{'var',49,'PreviousToken'}|[{'atom',49,'ok'}]]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Token'}|[{'type',50,'union',[{'type',50,'nil',[]}|[{'type',50,'token',[]}]]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'PreviousToken'}|[{'type',51,'union',[{'type',51,'nil',[]}|[{'type',51,'token',[]}]]}]]]]}]]]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'set_token',2},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'Component'}|[{'var',63,'Val'}]]}|[{'type',63,'tuple',[{'var',63,'Component'}|[{'var',63,'OldVal'}]]}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Component'}|[{'type',64,'component',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Val'}|[{'type',65,'value',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'OldVal'}|[{'type',66,'value',[]}]]]]}]]]]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'get_token',0},[{'type',71,'fun',[{'type',71,'product',[]}|[{'type',71,'union',[{'type',71,'nil',[]}|[{'type',71,'token',[]}]]}]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'get_token',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Component'}]}|[{'type',76,'tuple',[{'var',76,'Component'}|[{'var',76,'Val'}]]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Component'}|[{'type',77,'component',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Val'}|[{'type',78,'value',[]}]]]]}]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'print',1},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'TraceInfo'}]}|[{'atom',82,'ok'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'TraceInfo'}|[{'type',83,'term',[]}]]]]}]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'print',2},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'Label'}|[{'var',89,'TraceInfo'}]]}|[{'atom',89,'ok'}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Label'}|[{'type',90,'integer',[]}]]]]}|[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'TraceInfo'}|[{'type',91,'term',[]}]]]]}]]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'reset_trace',0},[{'type',99,'fun',[{'type',99,'product',[]}|[{'atom',99,'true'}]]}]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'tracer',{'type',106,'union',[{'paren_type',106,[{'ann_type',106,[{'var',106,'Pid'}|[{'type',106,'pid',[]}]]}]}|[{'type',106,'port',[]}|[{'atom',106,'false'}]]]},[]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'set_system_tracer',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Tracer'}]}|[{'var',108,'OldTracer'}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Tracer'}|[{'type',109,'tracer',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'OldTracer'}|[{'type',110,'tracer',[]}]]]]}]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'get_system_tracer',0},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[]}|[{'var',115,'Tracer'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Tracer'}|[{'type',116,'tracer',[]}]]]]}]]]}]}]]
'set_token'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 54
	      call 'erlang':'seq_trace'
		  ('sequential_trace_token', [])
	  %% Line 55
	  <{Flags,Label,Serial,_X_From,Lastcnt}> when 'true' ->
	      let <F> =
		  %% Line 56
		  apply 'decode_flags'/1
		      (Flags)
	      in  %% Line 57
		  apply 'set_token2'/1
		      ([{'label',Label}|[{'serial',{Lastcnt,Serial}}|F]])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'set_token',1}}] )
	    -| ['compiler_generated'] )
	end
'set_token'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	%% Line 69
	call 'erlang':'seq_trace'
	    (_cor1, _cor0)
'get_token'/0 =
    %% Line 73
    fun () ->
	let <_cor0> =
	    %% Line 74
	    call 'erlang':'self'
		()
	in  let <_cor1> =
		%% Line 74
		call 'erlang':'process_info'
		    (_cor0, 'sequential_trace_token')
	    in  %% Line 74
		call 'erlang':'element'
		    (2, _cor1)
'get_token'/1 =
    %% Line 79
    fun (_cor0) ->
	%% Line 80
	call 'erlang':'seq_trace_info'
	    (_cor0)
'print'/1 =
    %% Line 85
    fun (_cor0) ->
	do  %% Line 86
	    call 'erlang':'seq_trace_print'
		(_cor0)
	    %% Line 87
	    'ok'
'print'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,Term>
	      when call 'erlang':'is_atom'
		    (Label) ->
	      %% Line 94
	      call 'erlang':'error'
		  ('badarg', [Label|[Term|[]]])
	  %% Line 95
	  <Label,Term> when 'true' ->
	      do  %% Line 96
		  call 'erlang':'seq_trace_print'
		      (Label, Term)
		  %% Line 97
		  'ok'
	end
'reset_trace'/0 =
    %% Line 101
    fun () ->
	%% Line 102
	call 'erlang':'system_flag'
	    (1, 0)
'set_system_tracer'/1 =
    %% Line 112
    fun (_cor0) ->
	%% Line 113
	call 'erlang':'system_flag'
	    ('sequential_tracer', _cor0)
'get_system_tracer'/0 =
    %% Line 118
    fun () ->
	let <_cor0> =
	    %% Line 119
	    call 'erlang':'system_info'
		('sequential_tracer')
	in  %% Line 119
	    call 'erlang':'element'
		(2, _cor0)
'set_token2'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <[{Type,Val}|T]> when 'true' ->
	      let <_X_> =
		  %% Line 128
		  ( call 'erlang':'seq_trace'
			(Type, Val)
		    -| ['result_not_wanted'] )
	      in  %% Line 129
		  apply 'set_token2'/1
		      (T)
	  %% Line 130
	  <[]> when 'true' ->
	      %% Line 131
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'set_token2',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_flags'/1 =
    %% Line 133
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 134
	    call 'erlang':'band'
		(_cor0, 4)
	in  let <Print> =
		%% Line 134
		call 'erlang':'>'
		    (_cor1, 0)
	    in  let <_cor3> =
		    %% Line 135
		    call 'erlang':'band'
			(_cor0, 1)
		in  let <Send> =
			%% Line 135
			call 'erlang':'>'
			    (_cor3, 0)
		    in  let <_cor5> =
			    %% Line 136
			    call 'erlang':'band'
				(_cor0, 2)
			in  let <Rec> =
				%% Line 136
				call 'erlang':'>'
				    (_cor5, 0)
			    in  let <_cor7> =
				    %% Line 137
				    call 'erlang':'band'
					(_cor0, 8)
				in  let <Ts> =
					%% Line 137
					call 'erlang':'>'
					    (_cor7, 0)
				    in  %% Line 138
					[{'print',Print}|[{'send',Send}|[{'receive',Rec}|[{'timestamp',Ts}|[]]]]]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('seq_trace')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('seq_trace', _cor0)
end