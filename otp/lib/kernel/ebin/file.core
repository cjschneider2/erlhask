module 'file' ['advise'/4,
	       'allocate'/3,
	       'altname'/1,
	       'change_group'/2,
	       'change_mode'/2,
	       'change_owner'/2,
	       'change_owner'/3,
	       'change_time'/2,
	       'change_time'/3,
	       'close'/1,
	       'consult'/1,
	       'copy'/2,
	       'copy'/3,
	       'copy_opened'/3,
	       'datasync'/1,
	       'del_dir'/1,
	       'delete'/1,
	       'eval'/1,
	       'eval'/2,
	       'format_error'/1,
	       'get_cwd'/0,
	       'get_cwd'/1,
	       'ipread_s32bu_p32bu'/3,
	       'ipread_s32bu_p32bu_int'/3,
	       'list_dir'/1,
	       'list_dir_all'/1,
	       'make_dir'/1,
	       'make_link'/2,
	       'make_symlink'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'native_name_encoding'/0,
	       'open'/2,
	       'path_consult'/2,
	       'path_eval'/2,
	       'path_eval'/3,
	       'path_open'/3,
	       'path_script'/2,
	       'path_script'/3,
	       'pid2name'/1,
	       'position'/2,
	       'pread'/2,
	       'pread'/3,
	       'pwrite'/2,
	       'pwrite'/3,
	       'raw_read_file_info'/1,
	       'raw_write_file_info'/2,
	       'read'/2,
	       'read_file'/1,
	       'read_file_info'/1,
	       'read_file_info'/2,
	       'read_line'/1,
	       'read_link'/1,
	       'read_link_all'/1,
	       'read_link_info'/1,
	       'read_link_info'/2,
	       'rename'/2,
	       'script'/1,
	       'script'/2,
	       'sendfile'/2,
	       'sendfile'/5,
	       'set_cwd'/1,
	       'sync'/1,
	       'truncate'/1,
	       'write'/2,
	       'write_file'/2,
	       'write_file'/3,
	       'write_file_info'/2,
	       'write_file_info'/3]
    attributes [%% Line 70
		'export_type' =
		    %% Line 70
		    [{'date_time',0}|[{'fd',0}|[{'file_info',0}|[{'filename',0}|[{'filename_all',0}|[{'io_device',0}|[{'name',0}|[{'name_all',0}|[{'posix',0}]]]]]]]]],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'filename',{'type',83,'string',[]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'filename_all',{'type',84,'union',[{'type',84,'string',[]}|[{'type',84,'binary',[]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'file_info',{'type',85,'record',[{'atom',85,'file_info'}]},[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'fd',{'type',86,'record',[{'atom',86,'file_descriptor'}]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'io_device',{'type',87,'union',[{'type',87,'pid',[]}|[{'type',87,'fd',[]}]]},[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{'location',{'type',88,'union',[{'type',88,'integer',[]}|[{'type',88,'tuple',[{'atom',88,'bof'}|[{'ann_type',88,[{'var',88,'Offset'}|[{'type',88,'integer',[]}]]}]]}|[{'type',89,'tuple',[{'atom',89,'cur'}|[{'ann_type',89,[{'var',89,'Offset'}|[{'type',89,'integer',[]}]]}]]}|[{'type',90,'tuple',[{'atom',90,'eof'}|[{'ann_type',90,[{'var',90,'Offset'}|[{'type',90,'integer',[]}]]}]]}|[{'atom',90,'bof'}|[{'atom',90,'cur'}|[{'atom',90,'eof'}]]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'mode',{'type',91,'union',[{'atom',91,'read'}|[{'atom',91,'write'}|[{'atom',91,'append'}|[{'atom',92,'exclusive'}|[{'atom',92,'raw'}|[{'atom',92,'binary'}|[{'type',93,'tuple',[{'atom',93,'delayed_write'}|[{'ann_type',94,[{'var',94,'Size'}|[{'type',94,'non_neg_integer',[]}]]}|[{'ann_type',95,[{'var',95,'Delay'}|[{'type',95,'non_neg_integer',[]}]]}]]]}|[{'atom',96,'delayed_write'}|[{'type',96,'tuple',[{'atom',96,'read_ahead'}|[{'ann_type',96,[{'var',96,'Size'}|[{'type',96,'pos_integer',[]}]]}]]}|[{'atom',97,'read_ahead'}|[{'atom',97,'compressed'}|[{'type',98,'tuple',[{'atom',98,'encoding'}|[{'remote_type',98,[{'atom',98,'unicode'}|[{'atom',98,'encoding'}|[[]]]]}]]}|[{'atom',99,'sync'}]]]]]]]]]]]]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'deep_list',{'type',100,'list',[{'type',100,'union',[{'type',100,'char',[]}|[{'type',100,'atom',[]}|[{'type',100,'deep_list',[]}]]]}]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'name',{'type',101,'union',[{'type',101,'string',[]}|[{'type',101,'atom',[]}|[{'type',101,'deep_list',[]}]]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'name_all',{'type',102,'union',[{'type',102,'string',[]}|[{'type',102,'atom',[]}|[{'type',102,'deep_list',[]}|[{'paren_type',102,[{'ann_type',102,[{'var',102,'RawFilename'}|[{'type',102,'binary',[]}]]}]}]]]]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'posix',{'type',103,'union',[{'atom',103,'eacces'}|[{'atom',103,'eagain'}|[{'atom',103,'ebadf'}|[{'atom',103,'ebusy'}|[{'atom',103,'edquot'}|[{'atom',104,'eexist'}|[{'atom',104,'efault'}|[{'atom',104,'efbig'}|[{'atom',104,'eintr'}|[{'atom',104,'einval'}|[{'atom',105,'eio'}|[{'atom',105,'eisdir'}|[{'atom',105,'eloop'}|[{'atom',105,'emfile'}|[{'atom',105,'emlink'}|[{'atom',106,'enametoolong'}|[{'atom',107,'enfile'}|[{'atom',107,'enodev'}|[{'atom',107,'enoent'}|[{'atom',107,'enomem'}|[{'atom',107,'enospc'}|[{'atom',108,'enotblk'}|[{'atom',108,'enotdir'}|[{'atom',108,'enotsup'}|[{'atom',108,'enxio'}|[{'atom',108,'eperm'}|[{'atom',109,'epipe'}|[{'atom',109,'erofs'}|[{'atom',109,'espipe'}|[{'atom',109,'esrch'}|[{'atom',109,'estale'}|[{'atom',110,'exdev'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{'date_time',{'remote_type',111,[{'atom',111,'calendar'}|[{'atom',111,'datetime'}|[[]]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'posix_file_advise',{'type',112,'union',[{'atom',112,'normal'}|[{'atom',112,'sequential'}|[{'atom',112,'random'}|[{'atom',113,'no_reuse'}|[{'atom',113,'will_need'}|[{'atom',113,'dont_need'}]]]]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{'sendfile_option',{'type',114,'union',[{'type',114,'tuple',[{'atom',114,'chunk_size'}|[{'type',114,'non_neg_integer',[]}]]}|[{'type',115,'tuple',[{'atom',115,'use_threads'}|[{'type',115,'boolean',[]}]]}]]},[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'file_info_option',{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'time'}|[{'atom',116,'local'}]]}|[{'type',116,'tuple',[{'atom',116,'time'}|[{'atom',116,'universal'}]]}|[{'type',117,'tuple',[{'atom',117,'time'}|[{'atom',117,'posix'}]]}]]]},[]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'native_name_encoding',0},[{'type',122,'fun',[{'type',122,'product',[]}|[{'type',122,'union',[{'atom',122,'latin1'}|[{'atom',122,'utf8'}]]}]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'format_error',1},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'Reason'}]}|[{'var',133,'Chars'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Reason'}|[{'type',134,'union',[{'type',134,'posix',[]}|[{'atom',134,'badarg'}|[{'atom',134,'terminated'}|[{'atom',134,'system_limit'}|[{'type',135,'tuple',[{'ann_type',135,[{'var',135,'Line'}|[{'type',135,'integer',[]}]]}|[{'ann_type',135,[{'var',135,'Mod'}|[{'type',135,'module',[]}]]}|[{'ann_type',135,[{'var',135,'Term'}|[{'type',135,'term',[]}]]}]]]}]]]]]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Chars'}|[{'type',136,'string',[]}]]]]}]]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'pid2name',1},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'Pid'}]}|[{'type',157,'union',[{'type',157,'tuple',[{'atom',157,'ok'}|[{'var',157,'Filename'}]]}|[{'atom',157,'undefined'}]]}]]}|[[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Filename'}|[{'type',158,'filename_all',[]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Pid'}|[{'type',159,'pid',[]}]]]]}]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'get_cwd',0},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'var',178,'Dir'}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'var',178,'Reason'}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Dir'}|[{'type',179,'filename',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Reason'}|[{'type',180,'posix',[]}]]]]}]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'get_cwd',1},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'Drive'}]}|[{'type',185,'union',[{'type',185,'tuple',[{'atom',185,'ok'}|[{'var',185,'Dir'}]]}|[{'type',185,'tuple',[{'atom',185,'error'}|[{'var',185,'Reason'}]]}]]}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Drive'}|[{'type',186,'string',[]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Dir'}|[{'type',187,'filename',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Reason'}|[{'type',188,'union',[{'type',188,'posix',[]}|[{'atom',188,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'set_cwd',1},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'Dir'}]}|[{'type',193,'union',[{'atom',193,'ok'}|[{'type',193,'tuple',[{'atom',193,'error'}|[{'var',193,'Reason'}]]}]]}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Dir'}|[{'type',194,'union',[{'type',194,'name',[]}|[{'var',194,'EncodedBinary'}]]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'EncodedBinary'}|[{'type',195,'binary',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Reason'}|[{'type',196,'union',[{'type',196,'posix',[]}|[{'atom',196,'badarg'}|[{'atom',196,'no_translation'}]]]}]]]]}]]]]]}]}],
		%% Line 201
		'spec' =
		    %% Line 201
		    [{{'delete',1},[{'type',201,'bounded_fun',[{'type',201,'fun',[{'type',201,'product',[{'var',201,'Filename'}]}|[{'type',201,'union',[{'atom',201,'ok'}|[{'type',201,'tuple',[{'atom',201,'error'}|[{'var',201,'Reason'}]]}]]}]]}|[[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Filename'}|[{'type',202,'name_all',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Reason'}|[{'type',203,'union',[{'type',203,'posix',[]}|[{'atom',203,'badarg'}]]}]]]]}]]]]}]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'rename',2},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'Source'}|[{'var',208,'Destination'}]]}|[{'type',208,'union',[{'atom',208,'ok'}|[{'type',208,'tuple',[{'atom',208,'error'}|[{'var',208,'Reason'}]]}]]}]]}|[[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Source'}|[{'type',209,'name_all',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Destination'}|[{'type',210,'name_all',[]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Reason'}|[{'type',211,'union',[{'type',211,'posix',[]}|[{'atom',211,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'make_dir',1},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'Dir'}]}|[{'type',216,'union',[{'atom',216,'ok'}|[{'type',216,'tuple',[{'atom',216,'error'}|[{'var',216,'Reason'}]]}]]}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Dir'}|[{'type',217,'name_all',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Reason'}|[{'type',218,'union',[{'type',218,'posix',[]}|[{'atom',218,'badarg'}]]}]]]]}]]]]}]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'del_dir',1},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'Dir'}]}|[{'type',223,'union',[{'atom',223,'ok'}|[{'type',223,'tuple',[{'atom',223,'error'}|[{'var',223,'Reason'}]]}]]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Dir'}|[{'type',224,'name_all',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Reason'}|[{'type',225,'union',[{'type',225,'posix',[]}|[{'atom',225,'badarg'}]]}]]]]}]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'read_file_info',1},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'Filename'}]}|[{'type',230,'union',[{'type',230,'tuple',[{'atom',230,'ok'}|[{'var',230,'FileInfo'}]]}|[{'type',230,'tuple',[{'atom',230,'error'}|[{'var',230,'Reason'}]]}]]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Filename'}|[{'type',231,'name_all',[]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'FileInfo'}|[{'type',232,'file_info',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Reason'}|[{'type',233,'union',[{'type',233,'posix',[]}|[{'atom',233,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'read_file_info',2},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'Filename'}|[{'var',238,'Opts'}]]}|[{'type',238,'union',[{'type',238,'tuple',[{'atom',238,'ok'}|[{'var',238,'FileInfo'}]]}|[{'type',238,'tuple',[{'atom',238,'error'}|[{'var',238,'Reason'}]]}]]}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Filename'}|[{'type',239,'name_all',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Opts'}|[{'type',240,'list',[{'type',240,'file_info_option',[]}]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'FileInfo'}|[{'type',241,'file_info',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Reason'}|[{'type',242,'union',[{'type',242,'posix',[]}|[{'atom',242,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'altname',1},[{'type',247,'fun',[{'type',247,'product',[{'ann_type',247,[{'var',247,'Name'}|[{'type',247,'name_all',[]}]]}]}|[{'type',247,'any',[]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'read_link_info',1},[{'type',252,'bounded_fun',[{'type',252,'fun',[{'type',252,'product',[{'var',252,'Name'}]}|[{'type',252,'union',[{'type',252,'tuple',[{'atom',252,'ok'}|[{'var',252,'FileInfo'}]]}|[{'type',252,'tuple',[{'atom',252,'error'}|[{'var',252,'Reason'}]]}]]}]]}|[[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Name'}|[{'type',253,'name_all',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'FileInfo'}|[{'type',254,'file_info',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Reason'}|[{'type',255,'union',[{'type',255,'posix',[]}|[{'atom',255,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 260
		'spec' =
		    %% Line 260
		    [{{'read_link_info',2},[{'type',260,'bounded_fun',[{'type',260,'fun',[{'type',260,'product',[{'var',260,'Name'}|[{'var',260,'Opts'}]]}|[{'type',260,'union',[{'type',260,'tuple',[{'atom',260,'ok'}|[{'var',260,'FileInfo'}]]}|[{'type',260,'tuple',[{'atom',260,'error'}|[{'var',260,'Reason'}]]}]]}]]}|[[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Name'}|[{'type',261,'name_all',[]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'Opts'}|[{'type',262,'list',[{'type',262,'file_info_option',[]}]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'FileInfo'}|[{'type',263,'file_info',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Reason'}|[{'type',264,'union',[{'type',264,'posix',[]}|[{'atom',264,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'read_link',1},[{'type',270,'bounded_fun',[{'type',270,'fun',[{'type',270,'product',[{'var',270,'Name'}]}|[{'type',270,'union',[{'type',270,'tuple',[{'atom',270,'ok'}|[{'var',270,'Filename'}]]}|[{'type',270,'tuple',[{'atom',270,'error'}|[{'var',270,'Reason'}]]}]]}]]}|[[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Name'}|[{'type',271,'name_all',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Filename'}|[{'type',272,'filename',[]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Reason'}|[{'type',273,'union',[{'type',273,'posix',[]}|[{'atom',273,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'read_link_all',1},[{'type',278,'bounded_fun',[{'type',278,'fun',[{'type',278,'product',[{'var',278,'Name'}]}|[{'type',278,'union',[{'type',278,'tuple',[{'atom',278,'ok'}|[{'var',278,'Filename'}]]}|[{'type',278,'tuple',[{'atom',278,'error'}|[{'var',278,'Reason'}]]}]]}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Name'}|[{'type',279,'name_all',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Filename'}|[{'type',280,'filename_all',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Reason'}|[{'type',281,'union',[{'type',281,'posix',[]}|[{'atom',281,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'write_file_info',2},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'Filename'}|[{'var',286,'FileInfo'}]]}|[{'type',286,'union',[{'atom',286,'ok'}|[{'type',286,'tuple',[{'atom',286,'error'}|[{'var',286,'Reason'}]]}]]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Filename'}|[{'type',287,'name_all',[]}]]]]}|[{'type',288,'constraint',[{'atom',288,'is_subtype'}|[[{'var',288,'FileInfo'}|[{'type',288,'file_info',[]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Reason'}|[{'type',289,'union',[{'type',289,'posix',[]}|[{'atom',289,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'write_file_info',3},[{'type',294,'bounded_fun',[{'type',294,'fun',[{'type',294,'product',[{'var',294,'Filename'}|[{'var',294,'FileInfo'}|[{'var',294,'Opts'}]]]}|[{'type',294,'union',[{'atom',294,'ok'}|[{'type',294,'tuple',[{'atom',294,'error'}|[{'var',294,'Reason'}]]}]]}]]}|[[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'Filename'}|[{'type',295,'name_all',[]}]]]]}|[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'Opts'}|[{'type',296,'list',[{'type',296,'file_info_option',[]}]}]]]]}|[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'FileInfo'}|[{'type',297,'file_info',[]}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'Reason'}|[{'type',298,'union',[{'type',298,'posix',[]}|[{'atom',298,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'list_dir',1},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'Dir'}]}|[{'type',303,'union',[{'type',303,'tuple',[{'atom',303,'ok'}|[{'var',303,'Filenames'}]]}|[{'type',303,'tuple',[{'atom',303,'error'}|[{'var',303,'Reason'}]]}]]}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Dir'}|[{'type',304,'name_all',[]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Filenames'}|[{'type',305,'list',[{'type',305,'filename',[]}]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Reason'}|[{'type',306,'union',[{'type',306,'posix',[]}|[{'atom',307,'badarg'}|[{'type',308,'tuple',[{'atom',308,'no_translation'}|[{'ann_type',308,[{'var',308,'Filename'}|[{'remote_type',308,[{'atom',308,'unicode'}|[{'atom',308,'latin1_binary'}|[[]]]]}]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'list_dir_all',1},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'Dir'}]}|[{'type',313,'union',[{'type',313,'tuple',[{'atom',313,'ok'}|[{'var',313,'Filenames'}]]}|[{'type',313,'tuple',[{'atom',313,'error'}|[{'var',313,'Reason'}]]}]]}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Dir'}|[{'type',314,'name_all',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Filenames'}|[{'type',315,'list',[{'type',315,'filename_all',[]}]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Reason'}|[{'type',316,'union',[{'type',316,'posix',[]}|[{'atom',316,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'read_file',1},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'Filename'}]}|[{'type',321,'union',[{'type',321,'tuple',[{'atom',321,'ok'}|[{'var',321,'Binary'}]]}|[{'type',321,'tuple',[{'atom',321,'error'}|[{'var',321,'Reason'}]]}]]}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Filename'}|[{'type',322,'name_all',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Binary'}|[{'type',323,'binary',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Reason'}|[{'type',324,'union',[{'type',324,'posix',[]}|[{'atom',324,'badarg'}|[{'atom',324,'terminated'}|[{'atom',324,'system_limit'}]]]]}]]]]}]]]]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'make_link',2},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'Existing'}|[{'var',329,'New'}]]}|[{'type',329,'union',[{'atom',329,'ok'}|[{'type',329,'tuple',[{'atom',329,'error'}|[{'var',329,'Reason'}]]}]]}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Existing'}|[{'type',330,'name_all',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'New'}|[{'type',331,'name_all',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Reason'}|[{'type',332,'union',[{'type',332,'posix',[]}|[{'atom',332,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'make_symlink',2},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'Existing'}|[{'var',337,'New'}]]}|[{'type',337,'union',[{'atom',337,'ok'}|[{'type',337,'tuple',[{'atom',337,'error'}|[{'var',337,'Reason'}]]}]]}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Existing'}|[{'type',338,'name_all',[]}]]]]}|[{'type',339,'constraint',[{'atom',339,'is_subtype'}|[[{'var',339,'New'}|[{'type',339,'name_all',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Reason'}|[{'type',340,'union',[{'type',340,'posix',[]}|[{'atom',340,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'write_file',2},[{'type',345,'bounded_fun',[{'type',345,'fun',[{'type',345,'product',[{'var',345,'Filename'}|[{'var',345,'Bytes'}]]}|[{'type',345,'union',[{'atom',345,'ok'}|[{'type',345,'tuple',[{'atom',345,'error'}|[{'var',345,'Reason'}]]}]]}]]}|[[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'Filename'}|[{'type',346,'name_all',[]}]]]]}|[{'type',347,'constraint',[{'atom',347,'is_subtype'}|[[{'var',347,'Bytes'}|[{'type',347,'iodata',[]}]]]]}|[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Reason'}|[{'type',348,'union',[{'type',348,'posix',[]}|[{'atom',348,'badarg'}|[{'atom',348,'terminated'}|[{'atom',348,'system_limit'}]]]]}]]]]}]]]]]}]}],
		%% Line 357
		'spec' =
		    %% Line 357
		    [{{'write_file',3},[{'type',357,'bounded_fun',[{'type',357,'fun',[{'type',357,'product',[{'var',357,'Filename'}|[{'var',357,'Bytes'}|[{'var',357,'Modes'}]]]}|[{'type',357,'union',[{'atom',357,'ok'}|[{'type',357,'tuple',[{'atom',357,'error'}|[{'var',357,'Reason'}]]}]]}]]}|[[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Filename'}|[{'type',358,'name_all',[]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Bytes'}|[{'type',359,'iodata',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Modes'}|[{'type',360,'list',[{'type',360,'mode',[]}]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Reason'}|[{'type',361,'union',[{'type',361,'posix',[]}|[{'atom',361,'badarg'}|[{'atom',361,'terminated'}|[{'atom',361,'system_limit'}]]]]}]]]]}]]]]]]}]}],
		%% Line 415
		'spec' =
		    %% Line 415
		    [{{'open',2},[{'type',415,'bounded_fun',[{'type',415,'fun',[{'type',415,'product',[{'var',415,'File'}|[{'var',415,'Modes'}]]}|[{'type',415,'union',[{'type',415,'tuple',[{'atom',415,'ok'}|[{'var',415,'IoDevice'}]]}|[{'type',415,'tuple',[{'atom',415,'error'}|[{'var',415,'Reason'}]]}]]}]]}|[[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'File'}|[{'type',416,'union',[{'var',416,'Filename'}|[{'type',416,'iodata',[]}]]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Filename'}|[{'type',417,'name_all',[]}]]]]}|[{'type',418,'constraint',[{'atom',418,'is_subtype'}|[[{'var',418,'Modes'}|[{'type',418,'list',[{'type',418,'union',[{'type',418,'mode',[]}|[{'atom',418,'ram'}]]}]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'IoDevice'}|[{'type',419,'io_device',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Reason'}|[{'type',420,'union',[{'type',420,'posix',[]}|[{'atom',420,'badarg'}|[{'atom',420,'system_limit'}]]]}]]]]}]]]]]]]}]}],
		%% Line 473
		'spec' =
		    %% Line 473
		    [{{'close',1},[{'type',473,'bounded_fun',[{'type',473,'fun',[{'type',473,'product',[{'var',473,'IoDevice'}]}|[{'type',473,'union',[{'atom',473,'ok'}|[{'type',473,'tuple',[{'atom',473,'error'}|[{'var',473,'Reason'}]]}]]}]]}|[[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'IoDevice'}|[{'type',474,'io_device',[]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'Reason'}|[{'type',475,'union',[{'type',475,'posix',[]}|[{'atom',475,'badarg'}|[{'atom',475,'terminated'}]]]}]]]]}]]]]}]}],
		%% Line 492
		'spec' =
		    %% Line 492
		    [{{'advise',4},[{'type',492,'bounded_fun',[{'type',492,'fun',[{'type',492,'product',[{'var',492,'IoDevice'}|[{'var',492,'Offset'}|[{'var',492,'Length'}|[{'var',492,'Advise'}]]]]}|[{'type',492,'union',[{'atom',492,'ok'}|[{'type',492,'tuple',[{'atom',492,'error'}|[{'var',492,'Reason'}]]}]]}]]}|[[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'IoDevice'}|[{'type',493,'io_device',[]}]]]]}|[{'type',494,'constraint',[{'atom',494,'is_subtype'}|[[{'var',494,'Offset'}|[{'type',494,'integer',[]}]]]]}|[{'type',495,'constraint',[{'atom',495,'is_subtype'}|[[{'var',495,'Length'}|[{'type',495,'integer',[]}]]]]}|[{'type',496,'constraint',[{'atom',496,'is_subtype'}|[[{'var',496,'Advise'}|[{'type',496,'posix_file_advise',[]}]]]]}|[{'type',497,'constraint',[{'atom',497,'is_subtype'}|[[{'var',497,'Reason'}|[{'type',497,'union',[{'type',497,'posix',[]}|[{'atom',497,'badarg'}]]}]]]]}]]]]]]]}]}],
		%% Line 506
		'spec' =
		    %% Line 506
		    [{{'allocate',3},[{'type',506,'bounded_fun',[{'type',506,'fun',[{'type',506,'product',[{'var',506,'File'}|[{'var',506,'Offset'}|[{'var',506,'Length'}]]]}|[{'type',507,'union',[{'atom',507,'ok'}|[{'type',507,'tuple',[{'atom',507,'error'}|[{'type',507,'posix',[]}]]}]]}]]}|[[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'File'}|[{'type',508,'io_device',[]}]]]]}|[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Offset'}|[{'type',509,'non_neg_integer',[]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Length'}|[{'type',510,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 517
		'spec' =
		    %% Line 517
		    [{{'read',2},[{'type',517,'bounded_fun',[{'type',517,'fun',[{'type',517,'product',[{'var',517,'IoDevice'}|[{'var',517,'Number'}]]}|[{'type',517,'union',[{'type',517,'tuple',[{'atom',517,'ok'}|[{'var',517,'Data'}]]}|[{'atom',517,'eof'}|[{'type',517,'tuple',[{'atom',517,'error'}|[{'var',517,'Reason'}]]}]]]}]]}|[[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'IoDevice'}|[{'type',518,'union',[{'type',518,'io_device',[]}|[{'type',518,'atom',[]}]]}]]]]}|[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'Number'}|[{'type',519,'non_neg_integer',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Data'}|[{'type',520,'union',[{'type',520,'string',[]}|[{'type',520,'binary',[]}]]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Reason'}|[{'type',521,'union',[{'type',521,'posix',[]}|[{'atom',522,'badarg'}|[{'atom',523,'terminated'}|[{'type',524,'tuple',[{'atom',524,'no_translation'}|[{'atom',524,'unicode'}|[{'atom',524,'latin1'}]]]}]]]]}]]]]}]]]]]]}]}],
		%% Line 539
		'spec' =
		    %% Line 539
		    [{{'read_line',1},[{'type',539,'bounded_fun',[{'type',539,'fun',[{'type',539,'product',[{'var',539,'IoDevice'}]}|[{'type',539,'union',[{'type',539,'tuple',[{'atom',539,'ok'}|[{'var',539,'Data'}]]}|[{'atom',539,'eof'}|[{'type',539,'tuple',[{'atom',539,'error'}|[{'var',539,'Reason'}]]}]]]}]]}|[[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'IoDevice'}|[{'type',540,'union',[{'type',540,'io_device',[]}|[{'type',540,'atom',[]}]]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'Data'}|[{'type',541,'union',[{'type',541,'string',[]}|[{'type',541,'binary',[]}]]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'Reason'}|[{'type',542,'union',[{'type',542,'posix',[]}|[{'atom',543,'badarg'}|[{'atom',544,'terminated'}|[{'type',545,'tuple',[{'atom',545,'no_translation'}|[{'atom',545,'unicode'}|[{'atom',545,'latin1'}]]]}]]]]}]]]]}]]]]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'pread',2},[{'type',559,'bounded_fun',[{'type',559,'fun',[{'type',559,'product',[{'var',559,'IoDevice'}|[{'var',559,'LocNums'}]]}|[{'type',559,'union',[{'type',559,'tuple',[{'atom',559,'ok'}|[{'var',559,'DataL'}]]}|[{'atom',559,'eof'}|[{'type',559,'tuple',[{'atom',559,'error'}|[{'var',559,'Reason'}]]}]]]}]]}|[[{'type',560,'constraint',[{'atom',560,'is_subtype'}|[[{'var',560,'IoDevice'}|[{'type',560,'io_device',[]}]]]]}|[{'type',561,'constraint',[{'atom',561,'is_subtype'}|[[{'var',561,'LocNums'}|[{'type',561,'list',[{'type',561,'tuple',[{'ann_type',561,[{'var',561,'Location'}|[{'type',561,'location',[]}]]}|[{'ann_type',561,[{'var',561,'Number'}|[{'type',561,'non_neg_integer',[]}]]}]]}]}]]]]}|[{'type',562,'constraint',[{'atom',562,'is_subtype'}|[[{'var',562,'DataL'}|[{'type',562,'list',[{'var',562,'Data'}]}]]]]}|[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'Data'}|[{'type',563,'union',[{'type',563,'string',[]}|[{'type',563,'binary',[]}|[{'atom',563,'eof'}]]]}]]]]}|[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Reason'}|[{'type',564,'union',[{'type',564,'posix',[]}|[{'atom',564,'badarg'}|[{'atom',564,'terminated'}]]]}]]]]}]]]]]]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'pread',3},[{'type',587,'bounded_fun',[{'type',587,'fun',[{'type',587,'product',[{'var',587,'IoDevice'}|[{'var',587,'Location'}|[{'var',587,'Number'}]]]}|[{'type',588,'union',[{'type',588,'tuple',[{'atom',588,'ok'}|[{'var',588,'Data'}]]}|[{'atom',588,'eof'}|[{'type',588,'tuple',[{'atom',588,'error'}|[{'var',588,'Reason'}]]}]]]}]]}|[[{'type',589,'constraint',[{'atom',589,'is_subtype'}|[[{'var',589,'IoDevice'}|[{'type',589,'io_device',[]}]]]]}|[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'Location'}|[{'type',590,'location',[]}]]]]}|[{'type',591,'constraint',[{'atom',591,'is_subtype'}|[[{'var',591,'Number'}|[{'type',591,'non_neg_integer',[]}]]]]}|[{'type',592,'constraint',[{'atom',592,'is_subtype'}|[[{'var',592,'Data'}|[{'type',592,'union',[{'type',592,'string',[]}|[{'type',592,'binary',[]}]]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Reason'}|[{'type',593,'union',[{'type',593,'posix',[]}|[{'atom',593,'badarg'}|[{'atom',593,'terminated'}]]]}]]]]}]]]]]]]}]}],
		%% Line 603
		'spec' =
		    %% Line 603
		    [{{'write',2},[{'type',603,'bounded_fun',[{'type',603,'fun',[{'type',603,'product',[{'var',603,'IoDevice'}|[{'var',603,'Bytes'}]]}|[{'type',603,'union',[{'atom',603,'ok'}|[{'type',603,'tuple',[{'atom',603,'error'}|[{'var',603,'Reason'}]]}]]}]]}|[[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'IoDevice'}|[{'type',604,'union',[{'type',604,'io_device',[]}|[{'type',604,'atom',[]}]]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'Bytes'}|[{'type',605,'iodata',[]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'Reason'}|[{'type',606,'union',[{'type',606,'posix',[]}|[{'atom',606,'badarg'}|[{'atom',606,'terminated'}]]]}]]]]}]]]]]}]}],
		%% Line 620
		'spec' =
		    %% Line 620
		    [{{'pwrite',2},[{'type',620,'bounded_fun',[{'type',620,'fun',[{'type',620,'product',[{'var',620,'IoDevice'}|[{'var',620,'LocBytes'}]]}|[{'type',620,'union',[{'atom',620,'ok'}|[{'type',620,'tuple',[{'atom',620,'error'}|[{'type',620,'tuple',[{'var',620,'N'}|[{'var',620,'Reason'}]]}]]}]]}]]}|[[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'IoDevice'}|[{'type',621,'io_device',[]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'LocBytes'}|[{'type',622,'list',[{'type',622,'tuple',[{'ann_type',622,[{'var',622,'Location'}|[{'type',622,'location',[]}]]}|[{'ann_type',622,[{'var',622,'Bytes'}|[{'type',622,'iodata',[]}]]}]]}]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'N'}|[{'type',623,'non_neg_integer',[]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Reason'}|[{'type',624,'union',[{'type',624,'posix',[]}|[{'atom',624,'badarg'}|[{'atom',624,'terminated'}]]]}]]]]}]]]]]]}]}],
		%% Line 645
		'spec' =
		    %% Line 645
		    [{{'pwrite',3},[{'type',645,'bounded_fun',[{'type',645,'fun',[{'type',645,'product',[{'var',645,'IoDevice'}|[{'var',645,'Location'}|[{'var',645,'Bytes'}]]]}|[{'type',645,'union',[{'atom',645,'ok'}|[{'type',645,'tuple',[{'atom',645,'error'}|[{'var',645,'Reason'}]]}]]}]]}|[[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'IoDevice'}|[{'type',646,'io_device',[]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'Location'}|[{'type',647,'location',[]}]]]]}|[{'type',648,'constraint',[{'atom',648,'is_subtype'}|[[{'var',648,'Bytes'}|[{'type',648,'iodata',[]}]]]]}|[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'Reason'}|[{'type',649,'union',[{'type',649,'posix',[]}|[{'atom',649,'badarg'}|[{'atom',649,'terminated'}]]]}]]]]}]]]]]]}]}],
		%% Line 658
		'spec' =
		    %% Line 658
		    [{{'datasync',1},[{'type',658,'bounded_fun',[{'type',658,'fun',[{'type',658,'product',[{'var',658,'IoDevice'}]}|[{'type',658,'union',[{'atom',658,'ok'}|[{'type',658,'tuple',[{'atom',658,'error'}|[{'var',658,'Reason'}]]}]]}]]}|[[{'type',659,'constraint',[{'atom',659,'is_subtype'}|[[{'var',659,'IoDevice'}|[{'type',659,'io_device',[]}]]]]}|[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'Reason'}|[{'type',660,'union',[{'type',660,'posix',[]}|[{'atom',660,'badarg'}|[{'atom',660,'terminated'}]]]}]]]]}]]]]}]}],
		%% Line 669
		'spec' =
		    %% Line 669
		    [{{'sync',1},[{'type',669,'bounded_fun',[{'type',669,'fun',[{'type',669,'product',[{'var',669,'IoDevice'}]}|[{'type',669,'union',[{'atom',669,'ok'}|[{'type',669,'tuple',[{'atom',669,'error'}|[{'var',669,'Reason'}]]}]]}]]}|[[{'type',670,'constraint',[{'atom',670,'is_subtype'}|[[{'var',670,'IoDevice'}|[{'type',670,'io_device',[]}]]]]}|[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'Reason'}|[{'type',671,'union',[{'type',671,'posix',[]}|[{'atom',671,'badarg'}|[{'atom',671,'terminated'}]]]}]]]]}]]]]}]}],
		%% Line 680
		'spec' =
		    %% Line 680
		    [{{'position',2},[{'type',680,'bounded_fun',[{'type',680,'fun',[{'type',680,'product',[{'var',680,'IoDevice'}|[{'var',680,'Location'}]]}|[{'type',680,'union',[{'type',680,'tuple',[{'atom',680,'ok'}|[{'var',680,'NewPosition'}]]}|[{'type',680,'tuple',[{'atom',680,'error'}|[{'var',680,'Reason'}]]}]]}]]}|[[{'type',681,'constraint',[{'atom',681,'is_subtype'}|[[{'var',681,'IoDevice'}|[{'type',681,'io_device',[]}]]]]}|[{'type',682,'constraint',[{'atom',682,'is_subtype'}|[[{'var',682,'Location'}|[{'type',682,'location',[]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'NewPosition'}|[{'type',683,'integer',[]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Reason'}|[{'type',684,'union',[{'type',684,'posix',[]}|[{'atom',684,'badarg'}|[{'atom',684,'terminated'}]]]}]]]]}]]]]]]}]}],
		%% Line 693
		'spec' =
		    %% Line 693
		    [{{'truncate',1},[{'type',693,'bounded_fun',[{'type',693,'fun',[{'type',693,'product',[{'var',693,'IoDevice'}]}|[{'type',693,'union',[{'atom',693,'ok'}|[{'type',693,'tuple',[{'atom',693,'error'}|[{'var',693,'Reason'}]]}]]}]]}|[[{'type',694,'constraint',[{'atom',694,'is_subtype'}|[[{'var',694,'IoDevice'}|[{'type',694,'io_device',[]}]]]]}|[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'Reason'}|[{'type',695,'union',[{'type',695,'posix',[]}|[{'atom',695,'badarg'}|[{'atom',695,'terminated'}]]]}]]]]}]]]]}]}],
		%% Line 704
		'spec' =
		    %% Line 704
		    [{{'copy',2},[{'type',704,'bounded_fun',[{'type',704,'fun',[{'type',704,'product',[{'var',704,'Source'}|[{'var',704,'Destination'}]]}|[{'type',704,'union',[{'type',704,'tuple',[{'atom',704,'ok'}|[{'var',704,'BytesCopied'}]]}|[{'type',704,'tuple',[{'atom',704,'error'}|[{'var',704,'Reason'}]]}]]}]]}|[[{'type',705,'constraint',[{'atom',705,'is_subtype'}|[[{'var',705,'Source'}|[{'type',705,'union',[{'type',705,'io_device',[]}|[{'var',705,'Filename'}|[{'type',705,'tuple',[{'var',705,'Filename'}|[{'var',705,'Modes'}]]}]]]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'Destination'}|[{'type',706,'union',[{'type',706,'io_device',[]}|[{'var',706,'Filename'}|[{'type',706,'tuple',[{'var',706,'Filename'}|[{'var',706,'Modes'}]]}]]]}]]]]}|[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'Filename'}|[{'type',707,'name_all',[]}]]]]}|[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'Modes'}|[{'type',708,'list',[{'type',708,'mode',[]}]}]]]]}|[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'BytesCopied'}|[{'type',709,'non_neg_integer',[]}]]]]}|[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'Reason'}|[{'type',710,'union',[{'type',710,'posix',[]}|[{'atom',710,'badarg'}|[{'atom',710,'terminated'}]]]}]]]]}]]]]]]]]}]}],
		%% Line 715
		'spec' =
		    %% Line 715
		    [{{'copy',3},[{'type',715,'bounded_fun',[{'type',715,'fun',[{'type',715,'product',[{'var',715,'Source'}|[{'var',715,'Destination'}|[{'var',715,'ByteCount'}]]]}|[{'type',716,'union',[{'type',716,'tuple',[{'atom',716,'ok'}|[{'var',716,'BytesCopied'}]]}|[{'type',716,'tuple',[{'atom',716,'error'}|[{'var',716,'Reason'}]]}]]}]]}|[[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Source'}|[{'type',717,'union',[{'type',717,'io_device',[]}|[{'var',717,'Filename'}|[{'type',717,'tuple',[{'var',717,'Filename'}|[{'var',717,'Modes'}]]}]]]}]]]]}|[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'Destination'}|[{'type',718,'union',[{'type',718,'io_device',[]}|[{'var',718,'Filename'}|[{'type',718,'tuple',[{'var',718,'Filename'}|[{'var',718,'Modes'}]]}]]]}]]]]}|[{'type',719,'constraint',[{'atom',719,'is_subtype'}|[[{'var',719,'Filename'}|[{'type',719,'name_all',[]}]]]]}|[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'Modes'}|[{'type',720,'list',[{'type',720,'mode',[]}]}]]]]}|[{'type',721,'constraint',[{'atom',721,'is_subtype'}|[[{'var',721,'ByteCount'}|[{'type',721,'union',[{'type',721,'non_neg_integer',[]}|[{'atom',721,'infinity'}]]}]]]]}|[{'type',722,'constraint',[{'atom',722,'is_subtype'}|[[{'var',722,'BytesCopied'}|[{'type',722,'non_neg_integer',[]}]]]]}|[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'Reason'}|[{'type',723,'union',[{'type',723,'posix',[]}|[{'atom',723,'badarg'}|[{'atom',723,'terminated'}]]]}]]]]}]]]]]]]]]}]}],
		%% Line 952
		'spec' =
		    %% Line 952
		    [{{'consult',1},[{'type',952,'bounded_fun',[{'type',952,'fun',[{'type',952,'product',[{'var',952,'Filename'}]}|[{'type',952,'union',[{'type',952,'tuple',[{'atom',952,'ok'}|[{'var',952,'Terms'}]]}|[{'type',952,'tuple',[{'atom',952,'error'}|[{'var',952,'Reason'}]]}]]}]]}|[[{'type',953,'constraint',[{'atom',953,'is_subtype'}|[[{'var',953,'Filename'}|[{'type',953,'name_all',[]}]]]]}|[{'type',954,'constraint',[{'atom',954,'is_subtype'}|[[{'var',954,'Terms'}|[{'type',954,'list',[{'type',954,'term',[]}]}]]]]}|[{'type',955,'constraint',[{'atom',955,'is_subtype'}|[[{'var',955,'Reason'}|[{'type',955,'union',[{'type',955,'posix',[]}|[{'atom',955,'badarg'}|[{'atom',955,'terminated'}|[{'atom',955,'system_limit'}|[{'type',956,'tuple',[{'ann_type',956,[{'var',956,'Line'}|[{'type',956,'integer',[]}]]}|[{'ann_type',956,[{'var',956,'Mod'}|[{'type',956,'module',[]}]]}|[{'ann_type',956,[{'var',956,'Term'}|[{'type',956,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 968
		'spec' =
		    %% Line 968
		    [{{'path_consult',2},[{'type',968,'bounded_fun',[{'type',968,'fun',[{'type',968,'product',[{'var',968,'Path'}|[{'var',968,'Filename'}]]}|[{'type',968,'union',[{'type',968,'tuple',[{'atom',968,'ok'}|[{'var',968,'Terms'}|[{'var',968,'FullName'}]]]}|[{'type',968,'tuple',[{'atom',968,'error'}|[{'var',968,'Reason'}]]}]]}]]}|[[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'Path'}|[{'type',969,'list',[{'var',969,'Dir'}]}]]]]}|[{'type',970,'constraint',[{'atom',970,'is_subtype'}|[[{'var',970,'Dir'}|[{'type',970,'name_all',[]}]]]]}|[{'type',971,'constraint',[{'atom',971,'is_subtype'}|[[{'var',971,'Filename'}|[{'type',971,'name_all',[]}]]]]}|[{'type',972,'constraint',[{'atom',972,'is_subtype'}|[[{'var',972,'Terms'}|[{'type',972,'list',[{'type',972,'term',[]}]}]]]]}|[{'type',973,'constraint',[{'atom',973,'is_subtype'}|[[{'var',973,'FullName'}|[{'type',973,'filename_all',[]}]]]]}|[{'type',974,'constraint',[{'atom',974,'is_subtype'}|[[{'var',974,'Reason'}|[{'type',974,'union',[{'type',974,'posix',[]}|[{'atom',974,'badarg'}|[{'atom',974,'terminated'}|[{'atom',974,'system_limit'}|[{'type',975,'tuple',[{'ann_type',975,[{'var',975,'Line'}|[{'type',975,'integer',[]}]]}|[{'ann_type',975,[{'var',975,'Mod'}|[{'type',975,'module',[]}]]}|[{'ann_type',975,[{'var',975,'Term'}|[{'type',975,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]]]}]}],
		%% Line 992
		'spec' =
		    %% Line 992
		    [{{'eval',1},[{'type',992,'bounded_fun',[{'type',992,'fun',[{'type',992,'product',[{'var',992,'Filename'}]}|[{'type',992,'union',[{'atom',992,'ok'}|[{'type',992,'tuple',[{'atom',992,'error'}|[{'var',992,'Reason'}]]}]]}]]}|[[{'type',993,'constraint',[{'atom',993,'is_subtype'}|[[{'var',993,'Filename'}|[{'type',993,'name_all',[]}]]]]}|[{'type',994,'constraint',[{'atom',994,'is_subtype'}|[[{'var',994,'Reason'}|[{'type',994,'union',[{'type',994,'posix',[]}|[{'atom',994,'badarg'}|[{'atom',994,'terminated'}|[{'atom',994,'system_limit'}|[{'type',995,'tuple',[{'ann_type',995,[{'var',995,'Line'}|[{'type',995,'integer',[]}]]}|[{'ann_type',995,[{'var',995,'Mod'}|[{'type',995,'module',[]}]]}|[{'ann_type',995,[{'var',995,'Term'}|[{'type',995,'term',[]}]]}]]]}]]]]]}]]]]}]]]]}]}],
		%% Line 1000
		'spec' =
		    %% Line 1000
		    [{{'eval',2},[{'type',1000,'bounded_fun',[{'type',1000,'fun',[{'type',1000,'product',[{'var',1000,'Filename'}|[{'var',1000,'Bindings'}]]}|[{'type',1000,'union',[{'atom',1000,'ok'}|[{'type',1000,'tuple',[{'atom',1000,'error'}|[{'var',1000,'Reason'}]]}]]}]]}|[[{'type',1001,'constraint',[{'atom',1001,'is_subtype'}|[[{'var',1001,'Filename'}|[{'type',1001,'name_all',[]}]]]]}|[{'type',1002,'constraint',[{'atom',1002,'is_subtype'}|[[{'var',1002,'Bindings'}|[{'remote_type',1002,[{'atom',1002,'erl_eval'}|[{'atom',1002,'binding_struct'}|[[]]]]}]]]]}|[{'type',1003,'constraint',[{'atom',1003,'is_subtype'}|[[{'var',1003,'Reason'}|[{'type',1003,'union',[{'type',1003,'posix',[]}|[{'atom',1003,'badarg'}|[{'atom',1003,'terminated'}|[{'atom',1003,'system_limit'}|[{'type',1004,'tuple',[{'ann_type',1004,[{'var',1004,'Line'}|[{'type',1004,'integer',[]}]]}|[{'ann_type',1004,[{'var',1004,'Mod'}|[{'type',1004,'module',[]}]]}|[{'ann_type',1004,[{'var',1004,'Term'}|[{'type',1004,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 1016
		'spec' =
		    %% Line 1016
		    [{{'path_eval',2},[{'type',1016,'bounded_fun',[{'type',1016,'fun',[{'type',1016,'product',[{'var',1016,'Path'}|[{'var',1016,'Filename'}]]}|[{'type',1016,'union',[{'type',1016,'tuple',[{'atom',1016,'ok'}|[{'var',1016,'FullName'}]]}|[{'type',1016,'tuple',[{'atom',1016,'error'}|[{'var',1016,'Reason'}]]}]]}]]}|[[{'type',1017,'constraint',[{'atom',1017,'is_subtype'}|[[{'var',1017,'Path'}|[{'type',1017,'list',[{'ann_type',1017,[{'var',1017,'Dir'}|[{'type',1017,'name_all',[]}]]}]}]]]]}|[{'type',1018,'constraint',[{'atom',1018,'is_subtype'}|[[{'var',1018,'Filename'}|[{'type',1018,'name_all',[]}]]]]}|[{'type',1019,'constraint',[{'atom',1019,'is_subtype'}|[[{'var',1019,'FullName'}|[{'type',1019,'filename_all',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'Reason'}|[{'type',1020,'union',[{'type',1020,'posix',[]}|[{'atom',1020,'badarg'}|[{'atom',1020,'terminated'}|[{'atom',1020,'system_limit'}|[{'type',1021,'tuple',[{'ann_type',1021,[{'var',1021,'Line'}|[{'type',1021,'integer',[]}]]}|[{'ann_type',1021,[{'var',1021,'Mod'}|[{'type',1021,'module',[]}]]}|[{'ann_type',1021,[{'var',1021,'Term'}|[{'type',1021,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 1026
		'spec' =
		    %% Line 1026
		    [{{'path_eval',3},[{'type',1026,'bounded_fun',[{'type',1026,'fun',[{'type',1026,'product',[{'var',1026,'Path'}|[{'var',1026,'Filename'}|[{'var',1026,'Bindings'}]]]}|[{'type',1027,'union',[{'type',1027,'tuple',[{'atom',1027,'ok'}|[{'var',1027,'FullName'}]]}|[{'type',1027,'tuple',[{'atom',1027,'error'}|[{'var',1027,'Reason'}]]}]]}]]}|[[{'type',1028,'constraint',[{'atom',1028,'is_subtype'}|[[{'var',1028,'Path'}|[{'type',1028,'list',[{'ann_type',1028,[{'var',1028,'Dir'}|[{'type',1028,'name_all',[]}]]}]}]]]]}|[{'type',1029,'constraint',[{'atom',1029,'is_subtype'}|[[{'var',1029,'Filename'}|[{'type',1029,'name_all',[]}]]]]}|[{'type',1030,'constraint',[{'atom',1030,'is_subtype'}|[[{'var',1030,'Bindings'}|[{'remote_type',1030,[{'atom',1030,'erl_eval'}|[{'atom',1030,'binding_struct'}|[[]]]]}]]]]}|[{'type',1031,'constraint',[{'atom',1031,'is_subtype'}|[[{'var',1031,'FullName'}|[{'type',1031,'filename_all',[]}]]]]}|[{'type',1032,'constraint',[{'atom',1032,'is_subtype'}|[[{'var',1032,'Reason'}|[{'type',1032,'union',[{'type',1032,'posix',[]}|[{'atom',1032,'badarg'}|[{'atom',1032,'terminated'}|[{'atom',1032,'system_limit'}|[{'type',1033,'tuple',[{'ann_type',1033,[{'var',1033,'Line'}|[{'type',1033,'integer',[]}]]}|[{'ann_type',1033,[{'var',1033,'Mod'}|[{'type',1033,'module',[]}]]}|[{'ann_type',1033,[{'var',1033,'Term'}|[{'type',1033,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]]}]}],
		%% Line 1050
		'spec' =
		    %% Line 1050
		    [{{'script',1},[{'type',1050,'bounded_fun',[{'type',1050,'fun',[{'type',1050,'product',[{'var',1050,'Filename'}]}|[{'type',1050,'union',[{'type',1050,'tuple',[{'atom',1050,'ok'}|[{'var',1050,'Value'}]]}|[{'type',1050,'tuple',[{'atom',1050,'error'}|[{'var',1050,'Reason'}]]}]]}]]}|[[{'type',1051,'constraint',[{'atom',1051,'is_subtype'}|[[{'var',1051,'Filename'}|[{'type',1051,'name_all',[]}]]]]}|[{'type',1052,'constraint',[{'atom',1052,'is_subtype'}|[[{'var',1052,'Value'}|[{'type',1052,'term',[]}]]]]}|[{'type',1053,'constraint',[{'atom',1053,'is_subtype'}|[[{'var',1053,'Reason'}|[{'type',1053,'union',[{'type',1053,'posix',[]}|[{'atom',1053,'badarg'}|[{'atom',1053,'terminated'}|[{'atom',1053,'system_limit'}|[{'type',1054,'tuple',[{'ann_type',1054,[{'var',1054,'Line'}|[{'type',1054,'integer',[]}]]}|[{'ann_type',1054,[{'var',1054,'Mod'}|[{'type',1054,'module',[]}]]}|[{'ann_type',1054,[{'var',1054,'Term'}|[{'type',1054,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 1059
		'spec' =
		    %% Line 1059
		    [{{'script',2},[{'type',1059,'bounded_fun',[{'type',1059,'fun',[{'type',1059,'product',[{'var',1059,'Filename'}|[{'var',1059,'Bindings'}]]}|[{'type',1059,'union',[{'type',1059,'tuple',[{'atom',1059,'ok'}|[{'var',1059,'Value'}]]}|[{'type',1059,'tuple',[{'atom',1059,'error'}|[{'var',1059,'Reason'}]]}]]}]]}|[[{'type',1060,'constraint',[{'atom',1060,'is_subtype'}|[[{'var',1060,'Filename'}|[{'type',1060,'name_all',[]}]]]]}|[{'type',1061,'constraint',[{'atom',1061,'is_subtype'}|[[{'var',1061,'Bindings'}|[{'remote_type',1061,[{'atom',1061,'erl_eval'}|[{'atom',1061,'binding_struct'}|[[]]]]}]]]]}|[{'type',1062,'constraint',[{'atom',1062,'is_subtype'}|[[{'var',1062,'Value'}|[{'type',1062,'term',[]}]]]]}|[{'type',1063,'constraint',[{'atom',1063,'is_subtype'}|[[{'var',1063,'Reason'}|[{'type',1063,'union',[{'type',1063,'posix',[]}|[{'atom',1063,'badarg'}|[{'atom',1063,'terminated'}|[{'atom',1063,'system_limit'}|[{'type',1064,'tuple',[{'ann_type',1064,[{'var',1064,'Line'}|[{'type',1064,'integer',[]}]]}|[{'ann_type',1064,[{'var',1064,'Mod'}|[{'type',1064,'module',[]}]]}|[{'ann_type',1064,[{'var',1064,'Term'}|[{'type',1064,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 1076
		'spec' =
		    %% Line 1076
		    [{{'path_script',2},[{'type',1076,'bounded_fun',[{'type',1076,'fun',[{'type',1076,'product',[{'var',1076,'Path'}|[{'var',1076,'Filename'}]]}|[{'type',1077,'union',[{'type',1077,'tuple',[{'atom',1077,'ok'}|[{'var',1077,'Value'}|[{'var',1077,'FullName'}]]]}|[{'type',1077,'tuple',[{'atom',1077,'error'}|[{'var',1077,'Reason'}]]}]]}]]}|[[{'type',1078,'constraint',[{'atom',1078,'is_subtype'}|[[{'var',1078,'Path'}|[{'type',1078,'list',[{'ann_type',1078,[{'var',1078,'Dir'}|[{'type',1078,'name_all',[]}]]}]}]]]]}|[{'type',1079,'constraint',[{'atom',1079,'is_subtype'}|[[{'var',1079,'Filename'}|[{'type',1079,'name_all',[]}]]]]}|[{'type',1080,'constraint',[{'atom',1080,'is_subtype'}|[[{'var',1080,'Value'}|[{'type',1080,'term',[]}]]]]}|[{'type',1081,'constraint',[{'atom',1081,'is_subtype'}|[[{'var',1081,'FullName'}|[{'type',1081,'filename_all',[]}]]]]}|[{'type',1082,'constraint',[{'atom',1082,'is_subtype'}|[[{'var',1082,'Reason'}|[{'type',1082,'union',[{'type',1082,'posix',[]}|[{'atom',1082,'badarg'}|[{'atom',1082,'terminated'}|[{'atom',1082,'system_limit'}|[{'type',1083,'tuple',[{'ann_type',1083,[{'var',1083,'Line'}|[{'type',1083,'integer',[]}]]}|[{'ann_type',1083,[{'var',1083,'Mod'}|[{'type',1083,'module',[]}]]}|[{'ann_type',1083,[{'var',1083,'Term'}|[{'type',1083,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]]}]}],
		%% Line 1088
		'spec' =
		    %% Line 1088
		    [{{'path_script',3},[{'type',1088,'bounded_fun',[{'type',1088,'fun',[{'type',1088,'product',[{'var',1088,'Path'}|[{'var',1088,'Filename'}|[{'var',1088,'Bindings'}]]]}|[{'type',1089,'union',[{'type',1089,'tuple',[{'atom',1089,'ok'}|[{'var',1089,'Value'}|[{'var',1089,'FullName'}]]]}|[{'type',1089,'tuple',[{'atom',1089,'error'}|[{'var',1089,'Reason'}]]}]]}]]}|[[{'type',1090,'constraint',[{'atom',1090,'is_subtype'}|[[{'var',1090,'Path'}|[{'type',1090,'list',[{'ann_type',1090,[{'var',1090,'Dir'}|[{'type',1090,'name_all',[]}]]}]}]]]]}|[{'type',1091,'constraint',[{'atom',1091,'is_subtype'}|[[{'var',1091,'Filename'}|[{'type',1091,'name_all',[]}]]]]}|[{'type',1092,'constraint',[{'atom',1092,'is_subtype'}|[[{'var',1092,'Bindings'}|[{'remote_type',1092,[{'atom',1092,'erl_eval'}|[{'atom',1092,'binding_struct'}|[[]]]]}]]]]}|[{'type',1093,'constraint',[{'atom',1093,'is_subtype'}|[[{'var',1093,'Value'}|[{'type',1093,'term',[]}]]]]}|[{'type',1094,'constraint',[{'atom',1094,'is_subtype'}|[[{'var',1094,'FullName'}|[{'type',1094,'filename_all',[]}]]]]}|[{'type',1095,'constraint',[{'atom',1095,'is_subtype'}|[[{'var',1095,'Reason'}|[{'type',1095,'union',[{'type',1095,'posix',[]}|[{'atom',1095,'badarg'}|[{'atom',1095,'terminated'}|[{'atom',1095,'system_limit'}|[{'type',1096,'tuple',[{'ann_type',1096,[{'var',1096,'Line'}|[{'type',1096,'integer',[]}]]}|[{'ann_type',1096,[{'var',1096,'Mod'}|[{'type',1096,'module',[]}]]}|[{'ann_type',1096,[{'var',1096,'Term'}|[{'type',1096,'term',[]}]]}]]]}]]]]]}]]]]}]]]]]]]]}]}],
		%% Line 1121
		'spec' =
		    %% Line 1121
		    [{{'path_open',3},[{'type',1121,'bounded_fun',[{'type',1121,'fun',[{'type',1121,'product',[{'var',1121,'Path'}|[{'var',1121,'Filename'}|[{'var',1121,'Modes'}]]]}|[{'type',1122,'union',[{'type',1122,'tuple',[{'atom',1122,'ok'}|[{'var',1122,'IoDevice'}|[{'var',1122,'FullName'}]]]}|[{'type',1122,'tuple',[{'atom',1122,'error'}|[{'var',1122,'Reason'}]]}]]}]]}|[[{'type',1123,'constraint',[{'atom',1123,'is_subtype'}|[[{'var',1123,'Path'}|[{'type',1123,'list',[{'ann_type',1123,[{'var',1123,'Dir'}|[{'type',1123,'name_all',[]}]]}]}]]]]}|[{'type',1124,'constraint',[{'atom',1124,'is_subtype'}|[[{'var',1124,'Filename'}|[{'type',1124,'name_all',[]}]]]]}|[{'type',1125,'constraint',[{'atom',1125,'is_subtype'}|[[{'var',1125,'Modes'}|[{'type',1125,'list',[{'type',1125,'mode',[]}]}]]]]}|[{'type',1126,'constraint',[{'atom',1126,'is_subtype'}|[[{'var',1126,'IoDevice'}|[{'type',1126,'io_device',[]}]]]]}|[{'type',1127,'constraint',[{'atom',1127,'is_subtype'}|[[{'var',1127,'FullName'}|[{'type',1127,'filename_all',[]}]]]]}|[{'type',1128,'constraint',[{'atom',1128,'is_subtype'}|[[{'var',1128,'Reason'}|[{'type',1128,'union',[{'type',1128,'posix',[]}|[{'atom',1128,'badarg'}|[{'atom',1128,'system_limit'}]]]}]]]]}]]]]]]]]}]}],
		%% Line 1148
		'spec' =
		    %% Line 1148
		    [{{'change_mode',2},[{'type',1148,'bounded_fun',[{'type',1148,'fun',[{'type',1148,'product',[{'var',1148,'Filename'}|[{'var',1148,'Mode'}]]}|[{'type',1148,'union',[{'atom',1148,'ok'}|[{'type',1148,'tuple',[{'atom',1148,'error'}|[{'var',1148,'Reason'}]]}]]}]]}|[[{'type',1149,'constraint',[{'atom',1149,'is_subtype'}|[[{'var',1149,'Filename'}|[{'type',1149,'name_all',[]}]]]]}|[{'type',1150,'constraint',[{'atom',1150,'is_subtype'}|[[{'var',1150,'Mode'}|[{'type',1150,'integer',[]}]]]]}|[{'type',1151,'constraint',[{'atom',1151,'is_subtype'}|[[{'var',1151,'Reason'}|[{'type',1151,'union',[{'type',1151,'posix',[]}|[{'atom',1151,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 1157
		'spec' =
		    %% Line 1157
		    [{{'change_owner',2},[{'type',1157,'bounded_fun',[{'type',1157,'fun',[{'type',1157,'product',[{'var',1157,'Filename'}|[{'var',1157,'Uid'}]]}|[{'type',1157,'union',[{'atom',1157,'ok'}|[{'type',1157,'tuple',[{'atom',1157,'error'}|[{'var',1157,'Reason'}]]}]]}]]}|[[{'type',1158,'constraint',[{'atom',1158,'is_subtype'}|[[{'var',1158,'Filename'}|[{'type',1158,'name_all',[]}]]]]}|[{'type',1159,'constraint',[{'atom',1159,'is_subtype'}|[[{'var',1159,'Uid'}|[{'type',1159,'integer',[]}]]]]}|[{'type',1160,'constraint',[{'atom',1160,'is_subtype'}|[[{'var',1160,'Reason'}|[{'type',1160,'union',[{'type',1160,'posix',[]}|[{'atom',1160,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 1166
		'spec' =
		    %% Line 1166
		    [{{'change_owner',3},[{'type',1166,'bounded_fun',[{'type',1166,'fun',[{'type',1166,'product',[{'var',1166,'Filename'}|[{'var',1166,'Uid'}|[{'var',1166,'Gid'}]]]}|[{'type',1166,'union',[{'atom',1166,'ok'}|[{'type',1166,'tuple',[{'atom',1166,'error'}|[{'var',1166,'Reason'}]]}]]}]]}|[[{'type',1167,'constraint',[{'atom',1167,'is_subtype'}|[[{'var',1167,'Filename'}|[{'type',1167,'name_all',[]}]]]]}|[{'type',1168,'constraint',[{'atom',1168,'is_subtype'}|[[{'var',1168,'Uid'}|[{'type',1168,'integer',[]}]]]]}|[{'type',1169,'constraint',[{'atom',1169,'is_subtype'}|[[{'var',1169,'Gid'}|[{'type',1169,'integer',[]}]]]]}|[{'type',1170,'constraint',[{'atom',1170,'is_subtype'}|[[{'var',1170,'Reason'}|[{'type',1170,'union',[{'type',1170,'posix',[]}|[{'atom',1170,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 1176
		'spec' =
		    %% Line 1176
		    [{{'change_group',2},[{'type',1176,'bounded_fun',[{'type',1176,'fun',[{'type',1176,'product',[{'var',1176,'Filename'}|[{'var',1176,'Gid'}]]}|[{'type',1176,'union',[{'atom',1176,'ok'}|[{'type',1176,'tuple',[{'atom',1176,'error'}|[{'var',1176,'Reason'}]]}]]}]]}|[[{'type',1177,'constraint',[{'atom',1177,'is_subtype'}|[[{'var',1177,'Filename'}|[{'type',1177,'name_all',[]}]]]]}|[{'type',1178,'constraint',[{'atom',1178,'is_subtype'}|[[{'var',1178,'Gid'}|[{'type',1178,'integer',[]}]]]]}|[{'type',1179,'constraint',[{'atom',1179,'is_subtype'}|[[{'var',1179,'Reason'}|[{'type',1179,'union',[{'type',1179,'posix',[]}|[{'atom',1179,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 1185
		'spec' =
		    %% Line 1185
		    [{{'change_time',2},[{'type',1185,'bounded_fun',[{'type',1185,'fun',[{'type',1185,'product',[{'var',1185,'Filename'}|[{'var',1185,'Mtime'}]]}|[{'type',1185,'union',[{'atom',1185,'ok'}|[{'type',1185,'tuple',[{'atom',1185,'error'}|[{'var',1185,'Reason'}]]}]]}]]}|[[{'type',1186,'constraint',[{'atom',1186,'is_subtype'}|[[{'var',1186,'Filename'}|[{'type',1186,'name_all',[]}]]]]}|[{'type',1187,'constraint',[{'atom',1187,'is_subtype'}|[[{'var',1187,'Mtime'}|[{'type',1187,'date_time',[]}]]]]}|[{'type',1188,'constraint',[{'atom',1188,'is_subtype'}|[[{'var',1188,'Reason'}|[{'type',1188,'union',[{'type',1188,'posix',[]}|[{'atom',1188,'badarg'}]]}]]]]}]]]]]}]}],
		%% Line 1195
		'spec' =
		    %% Line 1195
		    [{{'change_time',3},[{'type',1195,'bounded_fun',[{'type',1195,'fun',[{'type',1195,'product',[{'var',1195,'Filename'}|[{'var',1195,'Atime'}|[{'var',1195,'Mtime'}]]]}|[{'type',1195,'union',[{'atom',1195,'ok'}|[{'type',1195,'tuple',[{'atom',1195,'error'}|[{'var',1195,'Reason'}]]}]]}]]}|[[{'type',1196,'constraint',[{'atom',1196,'is_subtype'}|[[{'var',1196,'Filename'}|[{'type',1196,'name_all',[]}]]]]}|[{'type',1197,'constraint',[{'atom',1197,'is_subtype'}|[[{'var',1197,'Atime'}|[{'type',1197,'date_time',[]}]]]]}|[{'type',1198,'constraint',[{'atom',1198,'is_subtype'}|[[{'var',1198,'Mtime'}|[{'type',1198,'date_time',[]}]]]]}|[{'type',1199,'constraint',[{'atom',1199,'is_subtype'}|[[{'var',1199,'Reason'}|[{'type',1199,'union',[{'type',1199,'posix',[]}|[{'atom',1199,'badarg'}]]}]]]]}]]]]]]}]}],
		%% Line 1215
		'spec' =
		    %% Line 1215
		    [{{'sendfile',5},[{'type',1215,'bounded_fun',[{'type',1215,'fun',[{'type',1215,'product',[{'var',1215,'RawFile'}|[{'var',1215,'Socket'}|[{'var',1215,'Offset'}|[{'var',1215,'Bytes'}|[{'var',1215,'Opts'}]]]]]}|[{'type',1216,'union',[{'type',1216,'tuple',[{'atom',1216,'ok'}|[{'type',1216,'non_neg_integer',[]}]]}|[{'type',1216,'tuple',[{'atom',1216,'error'}|[{'type',1216,'union',[{'remote_type',1216,[{'atom',1216,'inet'}|[{'atom',1216,'posix'}|[[]]]]}|[{'atom',1217,'closed'}|[{'atom',1217,'badarg'}|[{'atom',1217,'not_owner'}]]]]}]]}]]}]]}|[[{'type',1218,'constraint',[{'atom',1218,'is_subtype'}|[[{'var',1218,'RawFile'}|[{'type',1218,'fd',[]}]]]]}|[{'type',1219,'constraint',[{'atom',1219,'is_subtype'}|[[{'var',1219,'Socket'}|[{'remote_type',1219,[{'atom',1219,'inet'}|[{'atom',1219,'socket'}|[[]]]]}]]]]}|[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'Offset'}|[{'type',1220,'non_neg_integer',[]}]]]]}|[{'type',1221,'constraint',[{'atom',1221,'is_subtype'}|[[{'var',1221,'Bytes'}|[{'type',1221,'non_neg_integer',[]}]]]]}|[{'type',1222,'constraint',[{'atom',1222,'is_subtype'}|[[{'var',1222,'Opts'}|[{'type',1222,'list',[{'type',1222,'sendfile_option',[]}]}]]]]}]]]]]]]}]}],
		%% Line 1239
		'spec' =
		    %% Line 1239
		    [{{'sendfile',2},[{'type',1239,'bounded_fun',[{'type',1239,'fun',[{'type',1239,'product',[{'var',1239,'Filename'}|[{'var',1239,'Socket'}]]}|[{'type',1240,'union',[{'type',1240,'tuple',[{'atom',1240,'ok'}|[{'type',1240,'non_neg_integer',[]}]]}|[{'type',1240,'tuple',[{'atom',1240,'error'}|[{'type',1240,'union',[{'remote_type',1240,[{'atom',1240,'inet'}|[{'atom',1240,'posix'}|[[]]]]}|[{'atom',1241,'closed'}|[{'atom',1241,'badarg'}|[{'atom',1241,'not_owner'}]]]]}]]}]]}]]}|[[{'type',1242,'constraint',[{'atom',1242,'is_subtype'}|[[{'var',1242,'Filename'}|[{'type',1242,'name_all',[]}]]]]}|[{'type',1243,'constraint',[{'atom',1243,'is_subtype'}|[[{'var',1243,'Socket'}|[{'remote_type',1243,[{'atom',1243,'inet'}|[{'atom',1243,'socket'}|[[]]]]}]]]]}]]]]}]}]]
'native_name_encoding'/0 =
    %% Line 124
    fun () ->
	%% Line 125
	call 'erlang':'nif_error'
	    ('undef')
'format_error'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Line,'file','undefined_script'}> when 'true' ->
	      %% Line 139
	      [110|[111|[32|[118|[97|[108|[117|[101|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[102|[114|[111|[109|[32|[115|[99|[114|[105|[112|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 140
	  <{Line,'file',{Class,Reason,Stacktrace}}> when 'true' ->
	      %% Line 141
	      call 'io_lib':'format'
		  ([126|[119|[58|[32|[101|[118|[97|[108|[117|[97|[116|[105|[111|[110|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[58|[126|[119|[32|[97|[110|[100|[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 142
																																										       [Line|[Class|[Reason|[Stacktrace|[]]]]])
	  %% Line 143
	  <{Line,'file',{Reason,Stacktrace}}> when 'true' ->
	      %% Line 144
	      call 'io_lib':'format'
		  ([126|[119|[58|[32|[101|[118|[97|[108|[117|[97|[116|[105|[111|[110|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[97|[110|[100|[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 145
																																								      [Line|[Reason|[Stacktrace|[]]]])
	  %% Line 146
	  <{Line,Mod,Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 147
		  call Mod:'format_error'
		      (Reason)
	      in  %% Line 147
		  call 'io_lib':'format'
		      ([126|[119|[58|[32|[126|[116|[115]]]]]]], [Line|[_cor1|[]]])
	  %% Line 148
	  <'badarg'> when 'true' ->
	      %% Line 149
	      [98|[97|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116]]]]]]]]]]]]
	  %% Line 150
	  <'system_limit'> when 'true' ->
	      %% Line 151
	      [97|[32|[115|[121|[115|[116|[101|[109|[32|[108|[105|[109|[105|[116|[32|[119|[97|[115|[32|[104|[105|[116|[44|[32|[112|[114|[111|[98|[97|[98|[108|[121|[32|[110|[111|[116|[32|[101|[110|[111|[117|[103|[104|[32|[112|[111|[114|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 152
	  <'terminated'> when 'true' ->
	      %% Line 153
	      [116|[104|[101|[32|[102|[105|[108|[101|[32|[115|[101|[114|[118|[101|[114|[32|[112|[114|[111|[99|[101|[115|[115|[32|[105|[115|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 154
	  <ErrorId> when 'true' ->
	      %% Line 155
	      call 'erl_posix_msg':'message'
		  (ErrorId)
	end
'pid2name'/1 =
    %% Line 161
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 162
	      case call 'erlang':'whereis'
		       ('file_server_2') of
		%% Line 163
		<'undefined'> when 'true' ->
		    %% Line 164
		    'undefined'
		%% Line 165
		<_cor4> when 'true' ->
		    %% Line 166
		    case call 'ets':'lookup'
			     ('file_io_servers', Pid) of
		      %% Line 167
		      <[{_cor5,Name}|_cor6]> when 'true' ->
			  %% Line 168
			  {'ok',Name}
		      %% Line 169
		      <_cor7> when 'true' ->
			  %% Line 170
			  'undefined'
		    end
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'pid2name',1}}] )
	    -| ['compiler_generated'] )
	end
'get_cwd'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	apply 'call'/2
	    ('get_cwd', [])
'get_cwd'/1 =
    %% Line 190
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 191
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 191
	    apply 'check_and_call'/2
		('get_cwd', [_cor1|[]])
'set_cwd'/1 =
    %% Line 198
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 199
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 199
	    apply 'check_and_call'/2
		('set_cwd', [_cor1|[]])
'delete'/1 =
    %% Line 205
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 206
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 206
	    apply 'check_and_call'/2
		('delete', [_cor1|[]])
'rename'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 214
	    apply 'file_name'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 214
		apply 'file_name'/1
		    (_cor0)
	    in  %% Line 214
		apply 'check_and_call'/2
		    ('rename', [_cor2|[_cor3|[]]])
'make_dir'/1 =
    %% Line 220
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 221
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 221
	    apply 'check_and_call'/2
		('make_dir', [_cor1|[]])
'del_dir'/1 =
    %% Line 227
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 228
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 228
	    apply 'check_and_call'/2
		('del_dir', [_cor1|[]])
'read_file_info'/1 =
    %% Line 235
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 236
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 236
	    apply 'check_and_call'/2
		('read_file_info', [_cor1|[]])
'read_file_info'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_cor2> =
		  %% Line 245
		  apply 'file_name'/1
		      (Name)
	      in  %% Line 245
		  apply 'check_and_call'/2
		      ('read_file_info', [_cor2|[Opts|[]]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'read_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'altname'/1 =
    %% Line 249
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 250
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 250
	    apply 'check_and_call'/2
		('altname', [_cor1|[]])
'read_link_info'/1 =
    %% Line 257
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 258
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 258
	    apply 'check_and_call'/2
		('read_link_info', [_cor1|[]])
'read_link_info'/2 =
    %% Line 266
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_cor2> =
		  %% Line 267
		  apply 'file_name'/1
		      (Name)
	      in  %% Line 267
		  apply 'check_and_call'/2
		      ('read_link_info', [_cor2|[Opts|[]]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'read_link_info',2}}] )
	    -| ['compiler_generated'] )
	end
'read_link'/1 =
    %% Line 275
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 276
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 276
	    apply 'check_and_call'/2
		('read_link', [_cor1|[]])
'read_link_all'/1 =
    %% Line 283
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 284
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 284
	    apply 'check_and_call'/2
		('read_link_all', [_cor1|[]])
'write_file_info'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Info = {'file_info',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <_cor2> =
		  %% Line 292
		  apply 'file_name'/1
		      (Name)
	      in  %% Line 292
		  apply 'check_and_call'/2
		      ('write_file_info', [_cor2|[Info|[]]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'write_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'write_file_info'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Info = {'file_info',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_cor3> =
		  %% Line 301
		  apply 'file_name'/1
		      (Name)
	      in  %% Line 301
		  apply 'check_and_call'/2
		      ('write_file_info', [_cor3|[Info|[Opts|[]]]])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'write_file_info',3}}] )
	    -| ['compiler_generated'] )
	end
'list_dir'/1 =
    %% Line 310
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 311
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 311
	    apply 'check_and_call'/2
		('list_dir', [_cor1|[]])
'list_dir_all'/1 =
    %% Line 318
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 319
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 319
	    apply 'check_and_call'/2
		('list_dir_all', [_cor1|[]])
'read_file'/1 =
    %% Line 326
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 327
	    apply 'file_name'/1
		(_cor0)
	in  %% Line 327
	    apply 'check_and_call'/2
		('read_file', [_cor1|[]])
'make_link'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 335
	    apply 'file_name'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 335
		apply 'file_name'/1
		    (_cor0)
	    in  %% Line 335
		apply 'check_and_call'/2
		    ('make_link', [_cor2|[_cor3|[]]])
'make_symlink'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 343
	    apply 'file_name'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 343
		apply 'file_name'/1
		    (_cor0)
	    in  %% Line 343
		apply 'check_and_call'/2
		    ('make_symlink', [_cor2|[_cor3|[]]])
'write_file'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 351
	    apply 'file_name'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 351
		apply 'make_binary'/1
		    (_cor0)
	    in  %% Line 351
		apply 'check_and_call'/2
		    ('write_file', [_cor2|[_cor3|[]]])
'write_file'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Bin,ModeList>
	      when call 'erlang':'is_list'
		    (ModeList) ->
	      %% Line 364
	      case apply 'make_binary'/1
		       (Bin) of
		%% Line 365
		<B>
		    when call 'erlang':'is_binary'
			  (B) ->
		    let <_cor3> =
			%% Line 368
			call 'lists':'delete'
			    ('write', ModeList)
		    in  let <_cor4> =
			    %% Line 367
			    call 'lists':'delete'
				('binary', _cor3)
			in  %% Line 366
			    case apply 'open'/2
				     (Name, ['binary'|['write'|_cor4]]) of
			      %% Line 369
			      <{'ok',Handle}> when 'true' ->
				  %% Line 370
				  case apply 'write'/2
					   (Handle, B) of
				    %% Line 371
				    <'ok'> when 'true' ->
					%% Line 372
					apply 'close'/1
					    (Handle)
				    %% Line 373
				    <E1> when 'true' ->
					do  %% Line 374
					    apply 'close'/1
						(Handle)
					    %% Line 375
					    E1
				  end
			      %% Line 377
			      <E2> when 'true' ->
				  %% Line 378
				  E2
			    end
		%% Line 380
		<E3> when 'true' ->
		    %% Line 381
		    E3
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'write_file',3}}] )
	    -| ['compiler_generated'] )
	end
'raw_read_file_info'/1 =
    %% Line 386
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 387
	    apply 'file_name'/1
		(_cor0)
	in  let <Args> =
		%% Line 387
		[_cor1|[]]
	    in  %% Line 388
		case apply 'check_args'/1
			 (Args) of
		  %% Line 389
		  <'ok'> when 'true' ->
		      %% Line 390
		      case Args of
			<[FileName|[]]> when 'true' ->
			    %% Line 391
			    call 'prim_file':'read_file_info'
				(FileName)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
		  %% Line 392
		  <Error> when 'true' ->
		      %% Line 393
		      Error
		end
'raw_write_file_info'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Info = {'file_info',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      let <_cor2> =
		  %% Line 399
		  apply 'file_name'/1
		      (Name)
	      in  let <Args> =
		      %% Line 399
		      [_cor2|[]]
		  in  %% Line 400
		      case apply 'check_args'/1
			       (Args) of
			%% Line 401
			<'ok'> when 'true' ->
			    %% Line 402
			    case Args of
			      <[FileName|[]]> when 'true' ->
				  %% Line 403
				  call 'prim_file':'write_file_info'
				      (FileName, Info)
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 404
			<Error> when 'true' ->
			    %% Line 405
			    Error
		      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'raw_write_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'open'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Item,ModeList>
	      when call 'erlang':'is_list'
		    (ModeList) ->
	      %% Line 423
	      case call 'lists':'member'
		       ('raw', ModeList) of
		%% Line 425
		<'true'> when 'true' ->
		    let <_cor2> =
			catch
			    %% Line 427
			    call 'application':'get_env'
				('kernel', 'raw_files')
		    in  %% Line 427
			case _cor2 of
			  %% Line 428
			  <{'ok','false'}> when 'true' ->
			      let <_cor3> =
				  %% Line 429
				  call 'lists':'delete'
				      ('raw', ModeList)
			      in  %% Line 429
				  apply 'open'/2
				      (Item, _cor3)
			  %% Line 430
			  <_cor19> when 'true' ->
			      let <_cor4> =
				  %% Line 431
				  apply 'file_name'/1
				      (Item)
			      in  let <Args> =
				      %% Line 431
				      [_cor4|ModeList]
				  in  %% Line 432
				      case apply 'check_args'/1
					       (Args) of
					%% Line 433
					<'ok'> when 'true' ->
					    %% Line 434
					    case Args of
					      <[FileName|_cor20]> when 'true' ->
						  %% Line 437
						  call 'prim_file':'open'
						      (FileName, ModeList)
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor6})
						-| ['compiler_generated'] )
					    end
					%% Line 438
					<Error> when 'true' ->
					    %% Line 439
					    Error
				      end
			end
		%% Line 442
		<'false'> when 'true' ->
		    %% Line 443
		    case call 'lists':'member'
			     ('ram', ModeList) of
		      %% Line 445
		      <'true'> when 'true' ->
			  %% Line 446
			  case apply 'check_args'/1
				   (ModeList) of
			    %% Line 447
			    <'ok'> when 'true' ->
				%% Line 448
				call 'ram_file':'open'
				    (Item, ModeList)
			    %% Line 449
			    <Error> when 'true' ->
				%% Line 450
				Error
			  end
		      %% Line 453
		      <'false'> when 'true' ->
			  let <_cor10> =
			      %% Line 454
			      apply 'file_name'/1
				  (Item)
			  in  let <Args> =
				  %% Line 454
				  [_cor10|ModeList]
			      in  %% Line 455
				  case apply 'check_args'/1
					   (Args) of
				    %% Line 456
				    <'ok'> when 'true' ->
					%% Line 457
					case Args of
					  <[FileName|_cor21]> when 'true' ->
					      %% Line 458
					      apply 'call'/2
						  ('open', [FileName|[ModeList|[]]])
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor12})
					    -| ['compiler_generated'] )
					end
				    %% Line 459
				    <Error> when 'true' ->
					%% Line 460
					Error
				  end
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 465
	  <Item,Mode> when 'true' ->
	      let <_cor16> =
		  %% Line 466
		  apply 'mode_list'/1
		      (Mode)
	      in  %% Line 466
		  apply 'open'/2
		      (Item, _cor16)
	end
'close'/1 =
    %% Line 477
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 478
	      case apply 'file_request'/2
		       (File, 'close') of
		%% Line 479
		<{'error','terminated'}> when 'true' ->
		    %% Line 480
		    'ok'
		%% Line 481
		<Other> when 'true' ->
		    %% Line 482
		    Other
	      end
	  %% Line 487
	  <Handle = {'file_descriptor',Module,_cor3}> when 'true' ->
	      %% Line 488
	      call Module:'close'
		  (Handle)
	  %% Line 489
	  <_cor4> when 'true' ->
	      %% Line 490
	      {'error','badarg'}
	end
'advise'/4 =
    %% Line 499
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <File,Offset,Length,Advise>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 500
	      apply 'file_request'/2
		  (File, {'advise',Offset,Length,Advise})
	  %% Line 501
	  <Handle = {'file_descriptor',Module,_cor8},Offset,Length,Advise> when 'true' ->
	      %% Line 502
	      call Module:'advise'
		  (Handle, Offset, Length, Advise)
	  %% Line 503
	  <_cor9,_cor10,_cor11,_cor12> when 'true' ->
	      %% Line 504
	      {'error','badarg'}
	end
'allocate'/3 =
    %% Line 512
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Offset,Length>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 513
	      apply 'file_request'/2
		  (File, {'allocate',Offset,Length})
	  %% Line 514
	  <Handle = {'file_descriptor',Module,_cor6},Offset,Length> when 'true' ->
	      %% Line 515
	      call Module:'allocate'
		  (Handle, Offset, Length)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'allocate',3}}] )
	    -| ['compiler_generated'] )
	end
'read'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Sz>
	      when try
		    ( let <_cor4> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_pid'
					    (File)
					-| ['compiler_generated'] ) ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( call 'erlang':'is_atom'
					  (File)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor6> =
			      ( call 'erlang':'is_integer'
				    (Sz)
				-| ['compiler_generated'] )
			  in  let <_cor7> =
				  ( call 'erlang':'>='
					(Sz, 0)
				    -| ['compiler_generated'] )
			      in  let <_cor8> =
				      ( call 'erlang':'and'
					    (_cor6, _cor7)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'and'
					    (( _cor4
					       -| ['compiler_generated'] ), _cor8)
					-| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 527
	      case call 'io':'request'
		       (File, {'get_chars','',Sz}) of
		%% Line 528
		<Data>
		    when let <_cor9> =
			  call 'erlang':'is_list'
			      (Data)
		      in  let <_cor10> =
			      call 'erlang':'is_binary'
				  (Data)
			  in  call 'erlang':'or'
				  (_cor9, _cor10) ->
		    %% Line 529
		    {'ok',Data}
		%% Line 530
		<Other> when 'true' ->
		    %% Line 531
		    Other
	      end
	  %% Line 533
	  <Handle = {'file_descriptor',Module,_cor16},Sz>
	      when let <_cor12> =
		    %% Line 534
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_cor13> =
			%% Line 534
			call 'erlang':'>='
			    (Sz, 0)
		    in  %% Line 534
			call 'erlang':'and'
			    (_cor12, _cor13) ->
	      %% Line 535
	      call Module:'read'
		  (Handle, Sz)
	  %% Line 536
	  <_cor17,_cor18> when 'true' ->
	      %% Line 537
	      {'error','badarg'}
	end
'read_line'/1 =
    %% Line 547
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_pid'
				    (_cor0) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'is_atom'
				  (_cor0)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 548
	      case call 'io':'request'
		       (File, {'get_line',''}) of
		%% Line 549
		<Data>
		    when let <_cor4> =
			  call 'erlang':'is_list'
			      (Data)
		      in  let <_cor5> =
			      call 'erlang':'is_binary'
				  (Data)
			  in  call 'erlang':'or'
				  (_cor4, _cor5) ->
		    %% Line 550
		    {'ok',Data}
		%% Line 551
		<Other> when 'true' ->
		    %% Line 552
		    Other
	      end
	  %% Line 554
	  <Handle = {'file_descriptor',Module,_cor8}> when 'true' ->
	      %% Line 555
	      call Module:'read_line'
		  (Handle)
	  %% Line 556
	  <_cor9> when 'true' ->
	      %% Line 557
	      {'error','badarg'}
	end
'pread'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,L>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(File)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (L)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 567
	      apply 'pread_int'/3
		  (File, L, [])
	  %% Line 568
	  <Handle = {'file_descriptor',Module,_cor6},L>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 569
	      call Module:'pread'
		  (Handle, L)
	  %% Line 570
	  <_cor7,_cor8> when 'true' ->
	      %% Line 571
	      {'error','badarg'}
	end
'pread_int'/3 =
    %% Line 573
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_File,[],R> when 'true' ->
	      let <_cor3> =
		  %% Line 574
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 574
		  {'ok',_cor3}
	  %% Line 575
	  <File,[{At,Sz}|T],R>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_cor5> =
			call 'erlang':'>='
			    (Sz, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 576
	      case apply 'pread'/3
		       (File, At, Sz) of
		%% Line 577
		<{'ok',Data}> when 'true' ->
		    %% Line 578
		    apply 'pread_int'/3
			(File, T, [Data|R])
		%% Line 579
		<'eof'> when 'true' ->
		    %% Line 580
		    apply 'pread_int'/3
			(File, T, ['eof'|R])
		%% Line 581
		<Error = {'error',_cor10}> when 'true' ->
		    %% Line 582
		    Error
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 584
	  <_cor11,_cor12,_cor13> when 'true' ->
	      %% Line 585
	      {'error','badarg'}
	end
'pread'/3 =
    %% Line 595
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,At,Sz>
	      when try
		    let <_cor3> =
			call 'erlang':'is_pid'
			    (File)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Sz)
			in  let <_cor5> =
				call 'erlang':'>='
				    (Sz, 0)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 596
	      apply 'file_request'/2
		  (File, {'pread',At,Sz})
	  %% Line 597
	  <Handle = {'file_descriptor',Module,_cor12},Offs,Sz>
	      when let <_cor7> =
		    %% Line 598
		    call 'erlang':'is_integer'
			(Sz)
		in  let <_cor8> =
			%% Line 598
			call 'erlang':'>='
			    (Sz, 0)
		    in  %% Line 598
			call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 599
	      call Module:'pread'
		  (Handle, Offs, Sz)
	  %% Line 600
	  <_cor13,_cor14,_cor15> when 'true' ->
	      %% Line 601
	      {'error','badarg'}
	end
'write'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Bytes>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_pid'
				    (File) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'is_atom'
				  (File)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 609
	      case apply 'make_binary'/1
		       (Bytes) of
		%% Line 610
		<Bin>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    %% Line 611
		    call 'io':'request'
			(File, {'put_chars','latin1',Bin})
		%% Line 612
		<Error> when 'true' ->
		    %% Line 613
		    Error
	      end
	  %% Line 615
	  <Handle = {'file_descriptor',Module,_cor8},Bytes> when 'true' ->
	      %% Line 616
	      call Module:'write'
		  (Handle, Bytes)
	  %% Line 617
	  <_cor9,_cor10> when 'true' ->
	      %% Line 618
	      {'error','badarg'}
	end
'pwrite'/2 =
    %% Line 626
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,L>
	      when let <_cor2> =
		    call 'erlang':'is_pid'
			(File)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (L)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 627
	      apply 'pwrite_int'/3
		  (File, L, 0)
	  %% Line 628
	  <Handle = {'file_descriptor',Module,_cor6},L>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 629
	      call Module:'pwrite'
		  (Handle, L)
	  %% Line 630
	  <_cor7,_cor8> when 'true' ->
	      %% Line 631
	      {'error','badarg'}
	end
'pwrite_int'/3 =
    %% Line 633
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_File,[],_X_R> when 'true' ->
	      %% Line 634
	      'ok'
	  %% Line 635
	  <File,[{At,Bytes}|T],R> when 'true' ->
	      %% Line 636
	      case apply 'pwrite'/3
		       (File, At, Bytes) of
		%% Line 637
		<'ok'> when 'true' ->
		    let <_cor3> =
			%% Line 638
			call 'erlang':'+'
			    (R, 1)
		    in  %% Line 638
			apply 'pwrite_int'/3
			    (File, T, _cor3)
		%% Line 639
		<{'error',Reason}> when 'true' ->
		    %% Line 640
		    {'error',{R,Reason}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 642
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 643
	      {'error','badarg'}
	end
'pwrite'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,At,Bytes>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 652
	      apply 'file_request'/2
		  (File, {'pwrite',At,Bytes})
	  %% Line 653
	  <Handle = {'file_descriptor',Module,_cor6},Offs,Bytes> when 'true' ->
	      %% Line 654
	      call Module:'pwrite'
		  (Handle, Offs, Bytes)
	  %% Line 655
	  <_cor7,_cor8,_cor9> when 'true' ->
	      %% Line 656
	      {'error','badarg'}
	end
'datasync'/1 =
    %% Line 662
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 663
	      apply 'file_request'/2
		  (File, 'datasync')
	  %% Line 664
	  <Handle = {'file_descriptor',Module,_cor2}> when 'true' ->
	      %% Line 665
	      call Module:'datasync'
		  (Handle)
	  %% Line 666
	  <_cor3> when 'true' ->
	      %% Line 667
	      {'error','badarg'}
	end
'sync'/1 =
    %% Line 673
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 674
	      apply 'file_request'/2
		  (File, 'sync')
	  %% Line 675
	  <Handle = {'file_descriptor',Module,_cor2}> when 'true' ->
	      %% Line 676
	      call Module:'sync'
		  (Handle)
	  %% Line 677
	  <_cor3> when 'true' ->
	      %% Line 678
	      {'error','badarg'}
	end
'position'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,At>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 687
	      apply 'file_request'/2
		  (File, {'position',At})
	  %% Line 688
	  <Handle = {'file_descriptor',Module,_cor4},At> when 'true' ->
	      %% Line 689
	      call Module:'position'
		  (Handle, At)
	  %% Line 690
	  <_cor5,_cor6> when 'true' ->
	      %% Line 691
	      {'error','badarg'}
	end
'truncate'/1 =
    %% Line 697
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 698
	      apply 'file_request'/2
		  (File, 'truncate')
	  %% Line 699
	  <Handle = {'file_descriptor',Module,_cor2}> when 'true' ->
	      %% Line 700
	      call Module:'truncate'
		  (Handle)
	  %% Line 701
	  <_cor3> when 'true' ->
	      %% Line 702
	      {'error','badarg'}
	end
'copy'/2 =
    %% Line 712
    fun (_cor1,_cor0) ->
	%% Line 713
	apply 'copy_int'/3
	    (_cor1, _cor0, 'infinity')
'copy'/3 =
    %% Line 725
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source,Dest,Length>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 726
			call 'erlang':'is_integer'
			    (Length)
		    in  let <_cor4> =
			    %% Line 726
			    call 'erlang':'>='
				(Length, 0)
			in  %% Line 726
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor6> =
			%% Line 727
			call 'erlang':'is_atom'
			    (Length)
		    in  %% Line 726
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 728
	      apply 'copy_int'/3
		  (Source, Dest, Length)
	  %% Line 729
	  <_cor10,_cor11,_cor12> when 'true' ->
	      %% Line 730
	      {'error','badarg'}
	end
'copy_int'/3 =
    %% Line 736
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source,Dest,Length>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 737
			call 'erlang':'is_pid'
			    (Source)
		    in  let <_cor4> =
			    %% Line 737
			    call 'erlang':'is_pid'
				(Dest)
			in  %% Line 737
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor8> =
			%% Line 738
			try
			    let <_cor6> =
				call 'erlang':'is_pid'
				    (Source)
			    in  let <_cor7> =
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_record'
									   -| ['compiler_generated'] )
					  (Dest, 'file_descriptor', 3)
				      -| ['compiler_generated'] )
				in  call 'erlang':'and'
					(_cor6, _cor7)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor11> =
			    %% Line 739
			    ( try
				  let <_cor9> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'is_record'
									     -| ['compiler_generated'] )
					    (Source, 'file_descriptor', 3)
					-| ['compiler_generated'] )
				  in  let <_cor10> =
					  call 'erlang':'is_pid'
					      (Dest)
				      in  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor9, _cor10)
					    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false'
			      -| ['compiler_generated'] )
			in  let <_cor12> =
				%% Line 738
				call 'erlang':'or'
				    (_cor8, _cor11)
			    in  %% Line 737
				call 'erlang':'or'
				    (_cor5, _cor12) ->
	      %% Line 740
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 742
	  <Source = {'file_descriptor',Module,_cor45},Dest = %% Line 743
							     {'file_descriptor',_cor46,_cor47},%% Line 744
											       Length>
	      when call 'erlang':'=:='
		    (_cor46,
		     %% Line 743
		     Module) ->
	      %% Line 745
	      call Module:'copy'
		  (Source, Dest, Length)
	  %% Line 747
	  <Source = {'file_descriptor',_cor48,_cor49},Dest = %% Line 748
							     {'file_descriptor',_cor50,_cor51},%% Line 748
											       Length> when 'true' ->
	      %% Line 749
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 751
	  <{SourceName,SourceOpts},{DestName,DestOpts},Length>
	      when let <_cor13> =
		    %% Line 752
		    call 'erlang':'is_list'
			(SourceOpts)
		in  let <_cor14> =
			%% Line 752
			call 'erlang':'is_list'
			    (DestOpts)
		    in  %% Line 752
			call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor15> =
		  %% Line 754
		  apply 'file_name'/1
		      (SourceName)
	      in  let <_cor16> =
		      %% Line 755
		      apply 'file_name'/1
			  (DestName)
		  in  %% Line 753
		      apply 'check_and_call'/2
			  ('copy', %% Line 754
				   [_cor15|[SourceOpts|%% Line 755
						       [_cor16|[DestOpts|%% Line 756
									 [Length|[]]]]]])
	  %% Line 758
	  <{SourceName,SourceOpts},Dest,Length>
	      when let <_cor19> =
		    let <_cor17> =
			%% Line 759
			call 'erlang':'is_list'
			    (SourceOpts)
		    in  let <_cor18> =
			    %% Line 759
			    call 'erlang':'is_pid'
				(Dest)
			in  %% Line 759
			    call 'erlang':'and'
				(_cor17, _cor18)
		in  let <_cor22> =
			%% Line 760
			try
			    let <_cor20> =
				call 'erlang':'is_list'
				    (SourceOpts)
			    in  let <_cor21> =
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'is_record'
									   -| ['compiler_generated'] )
					  (Dest, 'file_descriptor', 3)
				      -| ['compiler_generated'] )
				in  call 'erlang':'and'
					(_cor20, _cor21)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 759
			call 'erlang':'or'
			    (_cor19, _cor22) ->
	      %% Line 761
	      case apply 'file_name'/1
		       (SourceName) of
		%% Line 762
		<Error = {'error',_cor52}> when 'true' ->
		    %% Line 763
		    Error
		%% Line 764
		<Source> when 'true' ->
		    %% Line 765
		    case apply 'open'/2
			     (Source, ['read'|SourceOpts]) of
		      %% Line 766
		      <{'ok',Handle}> when 'true' ->
			  let <Result> =
			      %% Line 767
			      apply 'copy_opened_int'/4
				  (Handle, Dest, Length, 0)
			  in  do  %% Line 768
				  apply 'close'/1
				      (Handle)
				  %% Line 769
				  Result
		      %% Line 770
		      <Error = {'error',_cor53}> when 'true' ->
			  %% Line 771
			  Error
		      ( <_cor25> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor25})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 775
	  <Source,{DestName,DestOpts},Length>
	      when let <_cor29> =
		    let <_cor27> =
			%% Line 776
			call 'erlang':'is_pid'
			    (Source)
		    in  let <_cor28> =
			    %% Line 776
			    call 'erlang':'is_list'
				(DestOpts)
			in  %% Line 776
			    call 'erlang':'and'
				(_cor27, _cor28)
		in  let <_cor32> =
			%% Line 777
			( try
			      let <_cor30> =
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(Source, 'file_descriptor', 3)
				    -| ['compiler_generated'] )
			      in  let <_cor31> =
				      call 'erlang':'is_list'
					  (DestOpts)
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor30, _cor31)
					-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false'
			  -| ['compiler_generated'] )
		    in  %% Line 776
			call 'erlang':'or'
			    (_cor29, _cor32) ->
	      %% Line 778
	      case apply 'file_name'/1
		       (DestName) of
		%% Line 779
		<Error = {'error',_cor54}> when 'true' ->
		    %% Line 780
		    Error
		%% Line 781
		<Dest> when 'true' ->
		    %% Line 782
		    case apply 'open'/2
			     (Dest, ['write'|DestOpts]) of
		      %% Line 783
		      <{'ok',Handle}> when 'true' ->
			  %% Line 784
			  case apply 'copy_opened_int'/4
				   (Source, Handle, Length, 0) of
			    %% Line 785
			    <OK = {'ok',_cor55}> when 'true' ->
				%% Line 786
				case apply 'close'/1
					 (Handle) of
				  %% Line 787
				  <'ok'> when 'true' ->
				      OK
				  %% Line 788
				  <Error> when 'true' ->
				      Error
				end
			    %% Line 790
			    <Error> when 'true' ->
				do  %% Line 791
				    apply 'close'/1
					(Handle)
				    %% Line 792
				    Error
			  end
		      %% Line 794
		      <Error = {'error',_cor56}> when 'true' ->
			  %% Line 795
			  Error
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor36})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 804
	  <Source,Dest,Length>
	      when let <_cor38> =
		    %% Line 805
		    call 'erlang':'is_pid'
			(Source)
		in  let <_cor39> =
			%% Line 806
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'is_record'
							       -| ['compiler_generated'] )
			      (Source, 'file_descriptor', 3)
			  -| ['compiler_generated'] )
		    in  %% Line 805
			call 'erlang':'or'
			    (_cor38, _cor39) ->
	      %% Line 807
	      apply 'copy_int'/3
		  (Source, {Dest,[]}, Length)
	  %% Line 808
	  <Source = {_X_SourceName,SourceOpts},Dest,Length>
	      when %% Line 809
		call 'erlang':'is_list'
		    (SourceOpts) ->
	      %% Line 810
	      apply 'copy_int'/3
		  (Source, {Dest,[]}, Length)
	  %% Line 812
	  <Source,Dest,Length>
	      when let <_cor40> =
		    %% Line 813
		    call 'erlang':'is_pid'
			(Dest)
		in  let <_cor41> =
			%% Line 814
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'is_record'
							       -| ['compiler_generated'] )
			      (Dest, 'file_descriptor', 3)
			  -| ['compiler_generated'] )
		    in  %% Line 813
			call 'erlang':'or'
			    (_cor40, _cor41) ->
	      %% Line 815
	      apply 'copy_int'/3
		  ({Source,[]}, Dest, Length)
	  %% Line 816
	  <Source,Dest = {_X_DestName,DestOpts},Length>
	      when %% Line 817
		call 'erlang':'is_list'
		    (DestOpts) ->
	      %% Line 818
	      apply 'copy_int'/3
		  ({Source,[]}, Dest, Length)
	  %% Line 821
	  <Source,Dest,Length> when 'true' ->
	      %% Line 822
	      apply 'copy_int'/3
		  ({Source,[]}, {Dest,[]}, Length)
	end
'copy_opened'/3 =
    %% Line 826
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source,Dest,Length>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 827
			call 'erlang':'is_integer'
			    (Length)
		    in  let <_cor4> =
			    %% Line 827
			    call 'erlang':'>='
				(Length, 0)
			in  %% Line 827
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor6> =
			%% Line 828
			call 'erlang':'is_atom'
			    (Length)
		    in  %% Line 827
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 829
	      apply 'copy_opened_int'/3
		  (Source, Dest, Length)
	  %% Line 830
	  <_cor10,_cor11,_cor12> when 'true' ->
	      %% Line 831
	      {'error','badarg'}
	end
'copy_opened_int'/3 =
    %% Line 836
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source,Dest,Length>
	      when let <_cor3> =
		    %% Line 837
		    call 'erlang':'is_pid'
			(Source)
		in  let <_cor4> =
			%% Line 837
			call 'erlang':'is_pid'
			    (Dest)
		    in  %% Line 837
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 838
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 839
	  <Source,Dest = {'file_descriptor',_cor10,_cor11},Length>
	      when %% Line 840
		call 'erlang':'is_pid'
		    (Source) ->
	      %% Line 841
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 842
	  <Source = {'file_descriptor',_cor12,_cor13},Dest,Length>
	      when %% Line 843
		call 'erlang':'is_pid'
		    (Dest) ->
	      %% Line 844
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 845
	  <Source = {'file_descriptor',_cor14,_cor15},Dest = {'file_descriptor',_cor16,_cor17},Length> when 'true' ->
	      %% Line 847
	      apply 'copy_opened_int'/4
		  (Source, Dest, Length, 0)
	  %% Line 848
	  <_cor18,_cor19,_cor20> when 'true' ->
	      %% Line 849
	      {'error','badarg'}
	end
'copy_opened_int'/4 =
    %% Line 855
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor18,_cor19,Length,Copied>
	      when call 'erlang':'=<'
		    (Length,
		     0) ->
	      %% Line 856
	      {'ok',Copied}
	  %% Line 857
	  <Source,Dest,Length,Copied> when 'true' ->
	      let <_cor4> =
		  %% Line 858
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Length,
			       65536) ->
			65536
		    <> when 'true' ->
			Length
		  end
	      in  %% Line 859
		  case apply 'read'/2
			   (Source, _cor4) of
		    %% Line 860
		    <{'ok',Data}> when 'true' ->
			let <_cor6> =
			    %% Line 861
			    case <> of
			      <>
				  when call 'erlang':'is_binary'
					(Data) ->
				  call 'erlang':'byte_size'
				      (Data)
			      %% Line 862
			      <>
				  when call 'erlang':'is_list'
					(Data) ->
				  call 'erlang':'length'
				      (Data)
			      ( <> when 'true' ->
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
			in  %% Line 864
			    case apply 'write'/2
				     (Dest, Data) of
			      %% Line 865
			      <'ok'> when 'true' ->
				  %% Line 866
				  case <> of
				    <>
					when call 'erlang':'<'
					      (_cor6,
					       _cor4) ->
					let <_cor8> =
					    %% Line 868
					    call 'erlang':'+'
						(Copied, _cor6)
					in  %% Line 868
					    {'ok',_cor8}
				    %% Line 869
				    <> when 'true' ->
					let <_cor9> =
					    %% Line 871
					    case <> of
					      <>
						  when call 'erlang':'is_atom'
							(Length) ->
						  Length
					      %% Line 872
					      <> when 'true' ->
						  call 'erlang':'-'
						      (Length, _cor6)
					    end
					in  let <_cor11> =
						%% Line 874
						call 'erlang':'+'
						    (Copied, _cor6)
					    in  %% Line 874
						apply 'copy_opened_int'/4
						    (Source, Dest, _cor9, _cor11)
				  end
			      %% Line 876
			      <Error = {'error',_cor20}> when 'true' ->
				  %% Line 877
				  Error
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
		    %% Line 879
		    <'eof'> when 'true' ->
			%% Line 880
			{'ok',Copied}
		    %% Line 881
		    <Error = {'error',_cor21}> when 'true' ->
			%% Line 882
			Error
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	end
'ipread_s32bu_p32bu'/3 =
    %% Line 892
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Pos,MaxSize>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 893
	      apply 'ipread_s32bu_p32bu_int'/3
		  (File, Pos, MaxSize)
	  %% Line 894
	  <Handle = {'file_descriptor',Module,_cor6},Pos,MaxSize> when 'true' ->
	      %% Line 895
	      call Module:'ipread_s32bu_p32bu'
		  (Handle, Pos, MaxSize)
	  %% Line 896
	  <_cor7,_cor8,_cor9> when 'true' ->
	      %% Line 897
	      {'error','badarg'}
	end
'ipread_s32bu_p32bu_int'/3 =
    %% Line 899
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Pos,Infinity>
	      when call 'erlang':'is_atom'
		    (Infinity) ->
	      %% Line 900
	      apply 'ipread_s32bu_p32bu_int'/3
		  (File, Pos, 2147483647)
	  %% Line 901
	  <File,Pos,MaxSize>
	      when let <_cor5> =
		    %% Line 902
		    call 'erlang':'is_integer'
			(MaxSize)
		in  let <_cor6> =
			%% Line 902
			call 'erlang':'>='
			    (MaxSize, 0)
		    in  %% Line 902
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 903
	      case <> of
		%% Line 904
		<>
		    when call 'erlang':'<'
			  (MaxSize,
			   2147483648) ->
		    %% Line 905
		    case apply 'pread'/3
			     (File, Pos, 8) of
		      %% Line 906
		      <{'ok',Header}> when 'true' ->
			  %% Line 907
			  apply 'ipread_s32bu_p32bu_2'/3
			      (File, Header, MaxSize)
		      %% Line 908
		      <Error> when 'true' ->
			  %% Line 909
			  Error
		    end
		%% Line 911
		<> when 'true' ->
		    %% Line 912
		    {'error','einval'}
	      end
	  %% Line 914
	  <_X_File,_X_Pos,_X_MaxSize> when 'true' ->
	      %% Line 915
	      {'error','badarg'}
	end
'ipread_s32bu_p32bu_2'/3 =
    %% Line 917
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_File,%% Line 918
		   #{#<0>(32,1,'integer',['unsigned'|['big']]),
		     #<Pos>(32,1,'integer',['unsigned'|['big']])}#,%% Line 919
								   _X_MaxSize> when 'true' ->
	      %% Line 920
	      {'ok',{0,Pos,'eof'}}
	  %% Line 921
	  <File,%% Line 922
		#{#<Size>(32,1,'integer',['unsigned'|['big']]),
		  #<Pos>(32,1,'integer',['unsigned'|['big']])}#,%% Line 923
								MaxSize>
	      when %% Line 924
		call 'erlang':'=<'
		    (Size,
		     MaxSize) ->
	      %% Line 925
	      case apply 'pread'/3
		       (File, Pos, Size) of
		%% Line 926
		<{'ok',Data}> when 'true' ->
		    %% Line 927
		    {'ok',{Size,Pos,Data}}
		%% Line 928
		<'eof'> when 'true' ->
		    %% Line 929
		    {'ok',{Size,Pos,'eof'}}
		%% Line 930
		<Error> when 'true' ->
		    %% Line 931
		    Error
	      end
	  %% Line 933
	  <_X_File,%% Line 934
		   #{#<_cor8>(8,8,'binary',['unsigned'|['big']])}#,%% Line 935
								   _X_MaxSize> when 'true' ->
	      %% Line 936
	      'eof'
	  %% Line 937
	  <_X_File,%% Line 938
		   #{#<_cor9>('all',8,'binary',['unsigned'|['big']])}#,%% Line 939
								       _X_MaxSize> when 'true' ->
	      %% Line 940
	      'eof'
	  %% Line 941
	  <File,%% Line 942
		Header,%% Line 943
		       MaxSize>
	      when %% Line 943
		call 'erlang':'is_list'
		    (Header) ->
	      let <_cor4> =
		  %% Line 944
		  call 'erlang':'list_to_binary'
		      (Header)
	      in  %% Line 944
		  apply 'ipread_s32bu_p32bu_2'/3
		      (File, _cor4, MaxSize)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ipread_s32bu_p32bu_2',3}}] )
	    -| ['compiler_generated'] )
	end
'consult'/1 =
    %% Line 958
    fun (_cor0) ->
	%% Line 959
	case apply 'open'/2
		 (_cor0, ['read']) of
	  %% Line 960
	  <{'ok',Fd}> when 'true' ->
	      let <R> =
		  %% Line 961
		  apply 'consult_stream'/1
		      (Fd)
	      in  do  %% Line 962
		      apply 'close'/1
			  (Fd)
		      %% Line 963
		      R
	  %% Line 964
	  <Error> when 'true' ->
	      %% Line 965
	      Error
	end
'path_consult'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	%% Line 978
	case apply 'path_open'/3
		 (_cor1, _cor0, ['read']) of
	  %% Line 979
	  <{'ok',Fd,Full}> when 'true' ->
	      %% Line 980
	      case apply 'consult_stream'/1
		       (Fd) of
		%% Line 981
		<{'ok',List}> when 'true' ->
		    let <_X_> =
			%% Line 982
			apply 'close'/1
			    (Fd)
		    in  %% Line 983
			{'ok',List,Full}
		%% Line 984
		<E1> when 'true' ->
		    do  %% Line 985
			apply 'close'/1
			    (Fd)
			%% Line 986
			E1
	      end
	  %% Line 988
	  <E2> when 'true' ->
	      %% Line 989
	      E2
	end
'eval'/1 =
    %% Line 997
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 998
	    call 'erl_eval':'new_bindings'
		()
	in  %% Line 998
	    apply 'eval'/2
		(_cor0, _cor1)
'eval'/2 =
    %% Line 1006
    fun (_cor1,_cor0) ->
	%% Line 1007
	case apply 'open'/2
		 (_cor1, ['read']) of
	  %% Line 1008
	  <{'ok',Fd}> when 'true' ->
	      let <R> =
		  %% Line 1009
		  apply 'eval_stream'/3
		      (Fd, 'ignore', _cor0)
	      in  do  %% Line 1010
		      apply 'close'/1
			  (Fd)
		      %% Line 1011
		      R
	  %% Line 1012
	  <Error> when 'true' ->
	      %% Line 1013
	      Error
	end
'path_eval'/2 =
    %% Line 1023
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1024
	    call 'erl_eval':'new_bindings'
		()
	in  %% Line 1024
	    apply 'path_eval'/3
		(_cor1, _cor0, _cor2)
'path_eval'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1036
	case apply 'path_open'/3
		 (_cor2, _cor1, ['read']) of
	  %% Line 1037
	  <{'ok',Fd,Full}> when 'true' ->
	      %% Line 1038
	      case apply 'eval_stream'/3
		       (Fd, 'ignore', _cor0) of
		%% Line 1039
		<'ok'> when 'true' ->
		    let <_X_> =
			%% Line 1040
			apply 'close'/1
			    (Fd)
		    in  %% Line 1041
			{'ok',Full}
		%% Line 1042
		<E1> when 'true' ->
		    do  %% Line 1043
			apply 'close'/1
			    (Fd)
			%% Line 1044
			E1
	      end
	  %% Line 1046
	  <E2> when 'true' ->
	      %% Line 1047
	      E2
	end
'script'/1 =
    %% Line 1056
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1057
	    call 'erl_eval':'new_bindings'
		()
	in  %% Line 1057
	    apply 'script'/2
		(_cor0, _cor1)
'script'/2 =
    %% Line 1066
    fun (_cor1,_cor0) ->
	%% Line 1067
	case apply 'open'/2
		 (_cor1, ['read']) of
	  %% Line 1068
	  <{'ok',Fd}> when 'true' ->
	      let <R> =
		  %% Line 1069
		  apply 'eval_stream'/3
		      (Fd, 'return', _cor0)
	      in  do  %% Line 1070
		      apply 'close'/1
			  (Fd)
		      %% Line 1071
		      R
	  %% Line 1072
	  <Error> when 'true' ->
	      %% Line 1073
	      Error
	end
'path_script'/2 =
    %% Line 1085
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1086
	    call 'erl_eval':'new_bindings'
		()
	in  %% Line 1086
	    apply 'path_script'/3
		(_cor1, _cor0, _cor2)
'path_script'/3 =
    %% Line 1098
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1099
	case apply 'path_open'/3
		 (_cor2, _cor1, ['read']) of
	  %% Line 1100
	  <{'ok',Fd,Full}> when 'true' ->
	      %% Line 1101
	      case apply 'eval_stream'/3
		       (Fd, 'return', _cor0) of
		%% Line 1102
		<{'ok',R}> when 'true' ->
		    let <_X_> =
			%% Line 1103
			apply 'close'/1
			    (Fd)
		    in  %% Line 1104
			{'ok',R,Full}
		%% Line 1105
		<E1> when 'true' ->
		    do  %% Line 1106
			apply 'close'/1
			    (Fd)
			%% Line 1107
			E1
	      end
	  %% Line 1109
	  <E2> when 'true' ->
	      %% Line 1110
	      E2
	end
'path_open'/3 =
    %% Line 1130
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1131
	case apply 'file_name'/1
		 (_cor1) of
	  %% Line 1132
	  <Error = {'error',_cor9}> when 'true' ->
	      %% Line 1133
	      Error
	  %% Line 1134
	  <FileName> when 'true' ->
	      %% Line 1135
	      case call 'filename':'pathtype'
		       (FileName) of
		%% Line 1136
		<'relative'> when 'true' ->
		    %% Line 1137
		    apply 'path_open_first'/4
			(_cor2, FileName, _cor0, 'enoent')
		%% Line 1138
		<_cor10> when 'true' ->
		    %% Line 1139
		    case apply 'open'/2
			     (_cor1, _cor0) of
		      %% Line 1140
		      <{'ok',Fd}> when 'true' ->
			  %% Line 1141
			  {'ok',Fd,_cor1}
		      %% Line 1142
		      <Error> when 'true' ->
			  %% Line 1143
			  Error
		    end
	      end
	end
'change_mode'/2 =
    %% Line 1153
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Mode>
	      when %% Line 1154
		call 'erlang':'is_integer'
		    (Mode) ->
	      %% Line 1155
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined','undefined','undefined','undefined',Mode,'undefined','undefined','undefined','undefined','undefined','undefined'})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_mode',2}}] )
	    -| ['compiler_generated'] )
	end
'change_owner'/2 =
    %% Line 1162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,OwnerId>
	      when %% Line 1163
		call 'erlang':'is_integer'
		    (OwnerId) ->
	      %% Line 1164
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',OwnerId,'undefined'})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_owner',2}}] )
	    -| ['compiler_generated'] )
	end
'change_owner'/3 =
    %% Line 1172
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,OwnerId,GroupId>
	      when let <_cor3> =
		    %% Line 1173
		    call 'erlang':'is_integer'
			(OwnerId)
		in  let <_cor4> =
			%% Line 1173
			call 'erlang':'is_integer'
			    (GroupId)
		    in  %% Line 1173
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1174
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',OwnerId,GroupId})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'change_owner',3}}] )
	    -| ['compiler_generated'] )
	end
'change_group'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,GroupId>
	      when %% Line 1182
		call 'erlang':'is_integer'
		    (GroupId) ->
	      %% Line 1183
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',GroupId})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'change_group',2}}] )
	    -| ['compiler_generated'] )
	end
'change_time'/2 =
    %% Line 1190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Time = {{Y,M,D},{H,Min,Sec}}>
	      when %% Line 1191
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (Y)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(M)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (D)
			    in  let <_cor5> =
				    %% Line 1192
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor6> =
					%% Line 1192
					call 'erlang':'is_integer'
					    (Min)
				    in  let <_cor7> =
					    %% Line 1192
					    call 'erlang':'is_integer'
						(Sec)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  let <_cor11> =
							    call 'erlang':'and'
								(_cor3, _cor10)
							in  call 'erlang':'and'
								(_cor2, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1193
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined','undefined',Time,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined'})
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'change_time',2}}] )
	    -| ['compiler_generated'] )
	end
'change_time'/3 =
    %% Line 1201
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Atime = {{AY,AM,AD},{AH,AMin,ASec}},Mtime = %% Line 1202
							    {{MY,MM,MD},{MH,MMin,MSec}}>
	      when %% Line 1203
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (AY)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(AM)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (AD)
			    in  let <_cor6> =
				    %% Line 1204
				    call 'erlang':'is_integer'
					(AH)
				in  let <_cor7> =
					%% Line 1204
					call 'erlang':'is_integer'
					    (AMin)
				    in  let <_cor8> =
					    %% Line 1204
					    call 'erlang':'is_integer'
						(ASec)
					in  let <_cor9> =
						%% Line 1205
						call 'erlang':'is_integer'
						    (MY)
					    in  let <_cor10> =
						    %% Line 1205
						    call 'erlang':'is_integer'
							(MM)
						in  let <_cor11> =
							%% Line 1205
							call 'erlang':'is_integer'
							    (MD)
						    in  let <_cor12> =
							    %% Line 1206
							    call 'erlang':'is_integer'
								(MH)
							in  let <_cor13> =
								%% Line 1206
								call 'erlang':'is_integer'
								    (MMin)
							    in  let <_cor14> =
								    %% Line 1206
								    call 'erlang':'is_integer'
									(MSec)
								in  let <_cor15> =
									call 'erlang':'and'
									    (_cor13, _cor14)
								    in  let <_cor16> =
									    call 'erlang':'and'
										(_cor12, _cor15)
									in  let <_cor17> =
										call 'erlang':'and'
										    (_cor11, _cor16)
									    in  let <_cor18> =
										    call 'erlang':'and'
											(_cor10, _cor17)
										in  let <_cor19> =
											call 'erlang':'and'
											    (_cor9, _cor18)
										    in  let <_cor20> =
											    call 'erlang':'and'
												(_cor8, _cor19)
											in  let <_cor21> =
												call 'erlang':'and'
												    (_cor7, _cor20)
											    in  let <_cor22> =
												    call 'erlang':'and'
													(_cor6, _cor21)
												in  let <_cor23> =
													call 'erlang':'and'
													    (_cor5, _cor22)
												    in  let <_cor24> =
													    call 'erlang':'and'
														(_cor4, _cor23)
													in  call 'erlang':'and'
														(_cor3, _cor24)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1207
	      apply 'write_file_info'/2
		  (Name, {'file_info','undefined','undefined','undefined',Atime,Mtime,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined'})
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'change_time',3}}] )
	    -| ['compiler_generated'] )
	end
'sendfile'/5 =
    %% Line 1223
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <File,_X_Sock,_X_Offet,_X_Bytes,_X_Opts>
	      when call 'erlang':'is_pid'
		    (File) ->
	      %% Line 1224
	      {'error','badarg'}
	  %% Line 1225
	  <File,Sock,Offset,Bytes,[]> when 'true' ->
	      %% Line 1226
	      apply 'sendfile'/8
		  (File, Sock, Offset, Bytes, 20971520, [], [], [])
	  %% Line 1227
	  <File,Sock,Offset,Bytes,Opts> when 'true' ->
	      let <ChunkSize0> =
		  %% Line 1228
		  call 'proplists':'get_value'
		      ('chunk_size', Opts, 20971520)
	      in  let <_cor13> =
		      %% Line 1229
		      case <> of
			<>
			    when call 'erlang':'>'
				  (ChunkSize0,
				   20971520) ->
			    20971520
			%% Line 1231
			<> when 'true' ->
			    ChunkSize0
		      end
		  in  %% Line 1236
		      apply 'sendfile'/8
			  (File, Sock, Offset, Bytes, _cor13, [], [], Opts)
	end
'sendfile'/2 =
    %% Line 1244
    fun (_cor1,_cor0) ->
	%% Line 1245
	case call 'file':'open'
		 (_cor1, ['read'|['raw'|['binary']]]) of
	  %% Line 1246
	  <{'error',Reason}> when 'true' ->
	      %% Line 1247
	      {'error',Reason}
	  %% Line 1248
	  <{'ok',Fd}> when 'true' ->
	      let <Res> =
		  %% Line 1249
		  apply 'sendfile'/5
		      (Fd, _cor0, 0, 0, [])
	      in  do  %% Line 1250
		      ( call 'file':'close'
			    (Fd)
			-| ['result_not_wanted'] )
		      %% Line 1251
		      Res
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'sendfile'/8 =
    %% Line 1255
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fd = {'file_descriptor',Mod,_cor17},Sock,Offset,Bytes,%% Line 1256
								 ChunkSize,%% Line 1256
									   Headers,%% Line 1256
										   Trailers,%% Line 1256
											    Opts>
	      when %% Line 1257
		call 'erlang':'is_port'
		    (Sock) ->
	      %% Line 1258
	      case call Mod:'sendfile'
		       (Fd, Sock, Offset, Bytes, ChunkSize, Headers, Trailers, %% Line 1259
									       Opts) of
		%% Line 1260
		<{'error','enotsup'}> when 'true' ->
		    %% Line 1261
		    apply 'sendfile_fallback'/7
			(Fd, Sock, Offset, Bytes, ChunkSize, %% Line 1262
							     Headers, %% Line 1262
								      Trailers)
		%% Line 1263
		<Else> when 'true' ->
		    %% Line 1264
		    Else
	      end
	  %% Line 1266
	  <_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25> when 'true' ->
	      %% Line 1267
	      {'error','badarg'}
	end
'sendfile_fallback'/7 =
    %% Line 1272
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <File,Sock,Offset,Bytes,ChunkSize,%% Line 1273
					    Headers,%% Line 1273
						    Trailers>
	      when let <_cor7> =
		    %% Line 1274
		    call 'erlang':'=:='
			(Headers, [])
		in  let <_cor8> =
			%% Line 1274
			call 'erlang':'is_integer'
			    (Headers)
		    in  %% Line 1274
			call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 1275
	      case apply 'sendfile_fallback'/5
		       (File, Sock, Offset, Bytes, ChunkSize) of
		%% Line 1276
		<{'ok',BytesSent}>
		    when try
			  let <_cor9> =
			      call 'erlang':'is_list'
				  (Trailers)
			  in  let <_cor10> =
				  %% Line 1277
				  call 'erlang':'=/='
				      (Trailers, [])
			      in  let <_cor11> =
				      %% Line 1278
				      call 'erlang':'is_integer'
					  (Headers)
				  in  let <_cor12> =
					  call 'erlang':'and'
					      (_cor10, _cor11)
				      in  call 'erlang':'and'
					      (_cor9, _cor12)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor13> =
			%% Line 1279
			call 'erlang':'+'
			    (BytesSent, Headers)
		    in  %% Line 1279
			apply 'sendfile_send'/3
			    (Sock, Trailers, _cor13)
		%% Line 1280
		<{'ok',BytesSent}>
		    when let <_cor14> =
			  call 'erlang':'is_list'
			      (Trailers)
		      in  let <_cor15> =
			      call 'erlang':'=/='
				  (Trailers, [])
			  in  call 'erlang':'and'
				  (_cor14, _cor15) ->
		    %% Line 1281
		    apply 'sendfile_send'/3
			(Sock, Trailers, BytesSent)
		%% Line 1282
		<{'ok',BytesSent}>
		    when call 'erlang':'is_integer'
			  (Headers) ->
		    let <_cor16> =
			%% Line 1283
			call 'erlang':'+'
			    (BytesSent, Headers)
		    in  %% Line 1283
			{'ok',_cor16}
		%% Line 1284
		<Else> when 'true' ->
		    %% Line 1285
		    Else
	      end
	  %% Line 1287
	  <File,Sock,Offset,Bytes,ChunkSize,Headers,Trailers> when 'true' ->
	      %% Line 1288
	      case apply 'sendfile_send'/3
		       (Sock, Headers, 0) of
		%% Line 1289
		<{'ok',BytesSent}> when 'true' ->
		    %% Line 1290
		    apply 'sendfile_fallback'/7
			(File, Sock, Offset, Bytes, ChunkSize, BytesSent, %% Line 1291
									  Trailers)
		%% Line 1292
		<Else> when 'true' ->
		    %% Line 1293
		    Else
	      end
	end
'sendfile_fallback'/5 =
    %% Line 1297
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1298
	case call 'file':'position'
		 (_cor4, {'cur',0}) of
	  <{'ok',CurrPos}> when 'true' ->
	      %% Line 1299
	      case call 'file':'position'
		       (_cor4, {'bof',_cor2}) of
		<{'ok',_X_NewPos}> when 'true' ->
		    let <Res> =
			%% Line 1300
			apply 'sendfile_fallback_int'/5
			    (_cor4, _cor3, _cor1, _cor0, 0)
		    in  do  %% Line 1301
			    ( call 'file':'position'
				  (_cor4, {'bof',CurrPos})
			      -| ['result_not_wanted'] )
			    %% Line 1302
			    Res
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'sendfile_fallback_int'/5 =
    %% Line 1305
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <File,Sock,Bytes,ChunkSize,BytesSent>
	      when let <_cor5> =
		    %% Line 1306
		    call 'erlang':'>'
			(Bytes, BytesSent)
		in  let <_cor6> =
			%% Line 1306
			call 'erlang':'=='
			    (Bytes, 0)
		    in  %% Line 1306
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      let <_cor8> =
		  %% Line 1307
		  case <> of
		    <>
			when call 'erlang':'=='
			      (Bytes,
			       0) ->
			%% Line 1308
			ChunkSize
		    %% Line 1309
		    <>
			when try
			      let <_cor7> =
				  call 'erlang':'-'
				      (Bytes, BytesSent)
			      in  call 'erlang':'<'
				      (_cor7, ChunkSize)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 1310
			call 'erlang':'-'
			    (Bytes, BytesSent)
		    %% Line 1311
		    <> when 'true' ->
			%% Line 1312
			ChunkSize
		  end
	      in  %% Line 1314
		  case call 'file':'read'
			   (File, _cor8) of
		    %% Line 1315
		    <{'ok',Data}> when 'true' ->
			%% Line 1316
			case apply 'sendfile_send'/3
				 (Sock, Data, BytesSent) of
			  %% Line 1317
			  <{'ok',NewBytesSent}> when 'true' ->
			      %% Line 1318
			      apply 'sendfile_fallback_int'/5
				  (%% Line 1319
				   File, %% Line 1319
					 Sock, %% Line 1319
					       Bytes, %% Line 1319
						      ChunkSize, %% Line 1320
								 NewBytesSent)
			  %% Line 1321
			  <Error> when 'true' ->
			      %% Line 1322
			      Error
			end
		    %% Line 1324
		    <'eof'> when 'true' ->
			%% Line 1325
			{'ok',BytesSent}
		    %% Line 1326
		    <Error> when 'true' ->
			%% Line 1327
			Error
		  end
	  %% Line 1329
	  <_X_File,_X_Sock,BytesSent,_X_ChunkSize,_cor17>
	      when call 'erlang':'=:='
		    (_cor17,
		     BytesSent) ->
	      %% Line 1330
	      {'ok',BytesSent}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'sendfile_fallback_int',5}}] )
	    -| ['compiler_generated'] )
	end
'sendfile_send'/3 =
    %% Line 1332
    fun (_cor2,_cor1,_cor0) ->
	let <Len> =
	    %% Line 1333
	    call 'erlang':'iolist_size'
		(_cor1)
	in  %% Line 1334
	    case call 'gen_tcp':'send'
		     (_cor2, _cor1) of
	      %% Line 1335
	      <'ok'> when 'true' ->
		  let <_cor4> =
		      %% Line 1336
		      call 'erlang':'+'
			  (Len, _cor0)
		  in  %% Line 1336
		      {'ok',_cor4}
	      %% Line 1337
	      <Else> when 'true' ->
		  %% Line 1338
		  Else
	    end
'consult_stream'/1 =
    %% Line 1346
    fun (_cor0) ->
	let <_X_> =
	    %% Line 1347
	    ( call 'epp':'set_encoding'
		  (_cor0)
	      -| ['result_not_wanted'] )
	in  %% Line 1348
	    apply 'consult_stream'/3
		(_cor0, 1, [])
'consult_stream'/3 =
    %% Line 1350
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1351
	case call 'io':'read'
		 (_cor2, '', _cor1) of
	  %% Line 1352
	  <{'ok',Term,EndLine}> when 'true' ->
	      %% Line 1353
	      apply 'consult_stream'/3
		  (_cor2, EndLine, [Term|_cor0])
	  %% Line 1354
	  <{'error',Error,_X_Line}> when 'true' ->
	      %% Line 1355
	      {'error',Error}
	  %% Line 1356
	  <{'eof',_X_Line}> when 'true' ->
	      let <_cor3> =
		  %% Line 1357
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 1357
		  {'ok',_cor3}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'eval_stream'/3 =
    %% Line 1360
    fun (_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 1361
	    ( call 'epp':'set_encoding'
		  (_cor2)
	      -| ['result_not_wanted'] )
	in  %% Line 1362
	    apply 'eval_stream'/6
		(_cor2, _cor1, 1, 'undefined', [], _cor0)
'eval_stream'/6 =
    %% Line 1364
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1365
	    call 'io':'parse_erl_exprs'
		(_cor5, '', _cor3)
	in  %% Line 1365
	    apply 'eval_stream2'/6
		(_cor6, _cor5, _cor4, _cor2, _cor1, _cor0)
'eval_stream2'/6 =
    %% Line 1367
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'ok',Form,EndLine},Fd,H,Last,E,Bs0> when 'true' ->
	      %% Line 1368
	      try
		  call 'erl_eval':'exprs'
		      (Form, Bs0)
	      of <_cor6> ->
		  case _cor6 of
		    %% Line 1369
		    <{'value',V,Bs}> when 'true' ->
			%% Line 1370
			apply 'eval_stream'/6
			    (Fd, H, EndLine, {V}, E, Bs)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor10,_cor9,_cor8> ->
		  let <_cor11> =
		      %% Line 1372
		      call 'erlang':'get_stacktrace'
			  ()
		  in  let <Error> = {%% Line 1372
			   EndLine,%% Line 1372
				   'file',%% Line 1372
					  {_cor10,_cor9,_cor11}}
		      in  %% Line 1373
			  apply 'eval_stream'/6
			      (Fd, H, EndLine, Last, [Error|E], Bs0)
	  %% Line 1375
	  <{'error',What,EndLine},Fd,H,Last,E,Bs> when 'true' ->
	      %% Line 1376
	      apply 'eval_stream'/6
		  (Fd, H, EndLine, Last, [What|E], Bs)
	  %% Line 1377
	  <{'eof',EndLine},_X_Fd,H,Last,E,_X_Bs> when 'true' ->
	      %% Line 1378
	      case <H,Last,E> of
		%% Line 1379
		<'return',{Val},[]> when 'true' ->
		    %% Line 1380
		    {'ok',Val}
		%% Line 1381
		<'return','undefined',_cor25>
		    when call 'erlang':'=:='
			  (_cor25,
			   E) ->
		    let <_cor13> =
			%% Line 1382
			call 'lists':'reverse'
			    (E, [{EndLine,'file','undefined_script'}|[]])
		    in  let <_cor14> =
			    %% Line 1382
			    call 'erlang':'hd'
				(_cor13)
			in  %% Line 1382
			    {'error',_cor14}
		%% Line 1383
		<'ignore',_cor26,[]> when 'true' ->
		    %% Line 1384
		    'ok'
		%% Line 1385
		<_cor27,_cor28,_cor29 = [_cor30|_cor31]>
		    when call 'erlang':'=:='
			  (_cor29,
			   E) ->
		    let <_cor15> =
			%% Line 1386
			call 'lists':'reverse'
			    (E)
		    in  let <_cor16> =
			    %% Line 1386
			    call 'erlang':'hd'
				(_cor15)
			in  %% Line 1386
			    {'error',_cor16}
		( <_fol72,_fol73,_fol74> when 'true' ->
		      let <_cor17> = {_fol72,_fol73,_fol74}
		      in  primop 'match_fail'
			      ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'eval_stream2',6}}] )
	    -| ['compiler_generated'] )
	end
'path_open_first'/4 =
    %% Line 1389
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Path|Rest],Name,Mode,LastError> when 'true' ->
	      %% Line 1390
	      case apply 'file_name'/1
		       (Path) of
		%% Line 1391
		<Error = {'error',_cor11}> when 'true' ->
		    %% Line 1392
		    Error
		%% Line 1393
		<FilePath> when 'true' ->
		    let <FileName> =
			%% Line 1394
			apply 'fname_join'/2
			    (FilePath, Name)
		    in  %% Line 1395
			case apply 'open'/2
				 (FileName, Mode) of
			  %% Line 1396
			  <{'ok',Fd}> when 'true' ->
			      %% Line 1397
			      {'ok',Fd,FileName}
			  %% Line 1398
			  <{'error','enoent'}> when 'true' ->
			      %% Line 1399
			      apply 'path_open_first'/4
				  (Rest, Name, Mode, LastError)
			  %% Line 1400
			  <Error> when 'true' ->
			      %% Line 1401
			      Error
			end
	      end
	  %% Line 1404
	  <[],_X_Name,_X_Mode,LastError> when 'true' ->
	      %% Line 1405
	      {'error',LastError}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'path_open_first',4}}] )
	    -| ['compiler_generated'] )
	end
'fname_join'/2 =
    %% Line 1407
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[46],Name> when 'true' ->
	      %% Line 1408
	      Name
	  %% Line 1409
	  <Dir,Name> when 'true' ->
	      %% Line 1410
	      call 'filename':'join'
		  (Dir, Name)
	end
'file_name'/1 =
    %% Line 1419
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1420
	      N
	  %% Line 1421
	  <N> when 'true' ->
	      %% Line 1422
	      try
		  let <_cor1> =
		      %% Line 1423
		      call 'file':'native_name_encoding'
			  ()
		  in  %% Line 1423
		      apply 'file_name_1'/2
			  (N, _cor1)
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 1424
		    <'throw',Reason,_cor7> when 'true' ->
			%% Line 1425
			{'error',Reason}
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	end
'file_name_1'/2 =
    %% Line 1428
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|T],'latin1'>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_cor3> =
			call 'erlang':'<'
			    (C, 256)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 1429
		  apply 'file_name_1'/2
		      (T, 'latin1')
	      in  %% Line 1429
		  [C|_cor4]
	  %% Line 1430
	  <[C|T],'utf8'>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_cor5> =
		  %% Line 1431
		  apply 'file_name_1'/2
		      (T, 'utf8')
	      in  %% Line 1431
		  [C|_cor5]
	  %% Line 1432
	  <[H|T],E> when 'true' ->
	      let <_cor7> =
		  %% Line 1433
		  apply 'file_name_1'/2
		      (H, E)
	      in  let <_cor6> =
		      %% Line 1433
		      apply 'file_name_1'/2
			  (T, E)
		  in  %% Line 1433
		      call 'erlang':'++'
			  (_cor7, _cor6)
	  %% Line 1434
	  <[],_cor10> when 'true' ->
	      %% Line 1435
	      []
	  %% Line 1436
	  <N,_cor11>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 1437
	      call 'erlang':'atom_to_list'
		  (N)
	  %% Line 1438
	  <_cor12,_cor13> when 'true' ->
	      %% Line 1439
	      call 'erlang':'throw'
		  ('badarg')
	end
'make_binary'/1 =
    %% Line 1441
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1442
	      Bin
	  %% Line 1443
	  <List> when 'true' ->
	      %% Line 1446
	      try
		  %% Line 1447
		  call 'erlang':'iolist_to_binary'
		      (List)
	      of <_cor1> ->
		  _cor1
	      catch <_cor4,_cor3,_cor2> ->
		  case <_cor4,_cor3,_cor2> of
		    %% Line 1448
		    <'error',Reason,_cor6> when 'true' ->
			%% Line 1449
			{'error',Reason}
		    ( <_cor4,_cor3,_cor2> when 'true' ->
			  primop 'raise'
			      (_cor2, _cor3)
		      -| ['compiler_generated'] )
		  end
	end
'mode_list'/1 =
    %% Line 1452
    fun (_cor0) ->
	case _cor0 of
	  <'read'> when 'true' ->
	      %% Line 1453
	      ['read']
	  %% Line 1454
	  <'write'> when 'true' ->
	      %% Line 1455
	      ['write']
	  %% Line 1456
	  <'read_write'> when 'true' ->
	      %% Line 1457
	      ['read'|['write']]
	  %% Line 1458
	  <{'binary',Mode}>
	      when call 'erlang':'is_atom'
		    (Mode) ->
	      let <_cor1> =
		  %% Line 1459
		  apply 'mode_list'/1
		      (Mode)
	      in  %% Line 1459
		  ['binary'|_cor1]
	  %% Line 1460
	  <{'character',Mode}>
	      when call 'erlang':'is_atom'
		    (Mode) ->
	      %% Line 1461
	      apply 'mode_list'/1
		  (Mode)
	  %% Line 1462
	  <_cor3> when 'true' ->
	      %% Line 1463
	      [{'error','badarg'}]
	end
'call'/2 =
    %% Line 1468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Command,Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      let <X> =
		  %% Line 1469
		  call 'erlang':'dt_spread_tag'
		      ('true')
	      in  let <_cor3> =
		      %% Line 1470
		      call 'erlang':'list_to_tuple'
			  ([Command|Args])
		  in  let <Y> =
			  %% Line 1470
			  call 'gen_server':'call'
			      ('file_server_2', _cor3, %% Line 1471
						       'infinity')
		      in  do  %% Line 1472
			      call 'erlang':'dt_restore_tag'
				  (X)
			      %% Line 1473
			      Y
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'call',2}}] )
	    -| ['compiler_generated'] )
	end
'check_and_call'/2 =
    %% Line 1475
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Command,Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      %% Line 1476
	      case apply 'check_args'/1
		       (Args) of
		%% Line 1477
		<'ok'> when 'true' ->
		    %% Line 1478
		    apply 'call'/2
			(Command, Args)
		%% Line 1479
		<Error> when 'true' ->
		    %% Line 1480
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_and_call',2}}] )
	    -| ['compiler_generated'] )
	end
'check_args'/1 =
    %% Line 1483
    fun (_cor0) ->
	case _cor0 of
	  <[Error = {'error',_cor2}|_X_Rest]> when 'true' ->
	      %% Line 1484
	      Error
	  %% Line 1485
	  <[_X_Name|Rest]> when 'true' ->
	      %% Line 1486
	      apply 'check_args'/1
		  (Rest)
	  %% Line 1487
	  <[]> when 'true' ->
	      %% Line 1488
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_args',1}}] )
	    -| ['compiler_generated'] )
	end
'file_request'/2 =
    %% Line 1497
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 1498
	    call 'erlang':'monitor'
		('process', _cor1)
	in  let <_cor3> =
		%% Line 1499
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1499
		    call 'erlang':'!'
			(_cor1, {'file_request',_cor3,Ref,_cor0})
		    %% Line 1500
		    receive
		      %% Line 1501
		      <{'file_reply',_cor6,Reply}>
			  when call 'erlang':'=:='
				(_cor6,
				 Ref) ->
			  do  %% Line 1502
			      call 'erlang':'demonitor'
				  (Ref, ['flush'])
			      %% Line 1503
			      Reply
		      %% Line 1504
		      <{'DOWN',_cor7,_cor8,_cor9,_cor10}>
			  when call 'erlang':'=:='
				(_cor7,
				 Ref) ->
			  %% Line 1505
			  {'error','terminated'}
		    after 'infinity' ->
		      'true'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('file')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('file', _cor0)
end