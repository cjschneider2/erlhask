module 'net_adm' ['dns_hostname'/1,
		  'host_file'/0,
		  'localhost'/0,
		  'module_info'/0,
		  'module_info'/1,
		  'names'/0,
		  'names'/1,
		  'ping'/1,
		  'ping_list'/1,
		  'world'/0,
		  'world'/1,
		  'world_list'/1,
		  'world_list'/2]
    attributes [%% Line 31
		'type' =
		    %% Line 31
		    [{'verbosity',{'type',31,'union',[{'atom',31,'silent'}|[{'atom',31,'verbose'}]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'host_file',0},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[]}|[{'type',38,'union',[{'var',38,'Hosts'}|[{'type',38,'tuple',[{'atom',38,'error'}|[{'var',38,'Reason'}]]}]]}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Hosts'}|[{'type',39,'list',[{'ann_type',39,[{'var',39,'Host'}|[{'type',39,'atom',[]}]]}]}]]]]}|[{'type',41,'constraint',[{'atom',41,'is_subtype'}|[[{'var',41,'Reason'}|[{'type',41,'union',[{'remote_type',41,[{'atom',41,'file'}|[{'atom',41,'posix'}|[[]]]]}|[{'atom',41,'badarg'}|[{'atom',41,'terminated'}|[{'atom',41,'system_limit'}|[{'type',42,'tuple',[{'ann_type',42,[{'var',42,'Line'}|[{'type',42,'integer',[]}]]}|[{'ann_type',42,[{'var',42,'Mod'}|[{'type',42,'module',[]}]]}|[{'ann_type',42,[{'var',42,'Term'}|[{'type',42,'term',[]}]]}]]]}]]]]]}]]]]}]]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'ping',1},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Node'}]}|[{'type',57,'union',[{'atom',57,'pong'}|[{'atom',57,'pang'}]]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Node'}|[{'type',58,'atom',[]}]]]]}]]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'localhost',0},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[]}|[{'var',71,'Name'}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Name'}|[{'type',72,'string',[]}]]]]}]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'names',0},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[]}|[{'type',82,'union',[{'type',82,'tuple',[{'atom',82,'ok'}|[{'type',82,'list',[{'type',82,'tuple',[{'var',82,'Name'}|[{'var',82,'Port'}]]}]}]]}|[{'type',82,'tuple',[{'atom',82,'error'}|[{'var',82,'Reason'}]]}]]}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Name'}|[{'type',83,'string',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Port'}|[{'type',84,'non_neg_integer',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Reason'}|[{'type',85,'union',[{'atom',85,'address'}|[{'remote_type',85,[{'atom',85,'file'}|[{'atom',85,'posix'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'names',1},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Host'}]}|[{'type',91,'union',[{'type',91,'tuple',[{'atom',91,'ok'}|[{'type',91,'list',[{'type',91,'tuple',[{'var',91,'Name'}|[{'var',91,'Port'}]]}]}]]}|[{'type',91,'tuple',[{'atom',91,'error'}|[{'var',91,'Reason'}]]}]]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Host'}|[{'type',92,'union',[{'type',92,'atom',[]}|[{'type',92,'string',[]}]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Name'}|[{'type',93,'string',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Port'}|[{'type',94,'non_neg_integer',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Reason'}|[{'type',95,'union',[{'atom',95,'address'}|[{'remote_type',95,[{'atom',95,'file'}|[{'atom',95,'posix'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'dns_hostname',1},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Host'}]}|[{'type',105,'union',[{'type',105,'tuple',[{'atom',105,'ok'}|[{'var',105,'Name'}]]}|[{'type',105,'tuple',[{'atom',105,'error'}|[{'var',105,'Host'}]]}]]}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Host'}|[{'type',106,'union',[{'type',106,'atom',[]}|[{'type',106,'string',[]}]]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Name'}|[{'type',107,'string',[]}]]]]}]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'ping_list',1},[{'type',133,'fun',[{'type',133,'product',[{'type',133,'list',[{'type',133,'atom',[]}]}]}|[{'type',133,'list',[{'type',133,'atom',[]}]}]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'world',0},[{'type',177,'fun',[{'type',177,'product',[]}|[{'type',177,'list',[{'type',177,'node',[]}]}]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'world',1},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'Arg'}]}|[{'type',182,'list',[{'type',182,'node',[]}]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Arg'}|[{'type',183,'verbosity',[]}]]]]}]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'world_list',1},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'Hosts'}]}|[{'type',191,'list',[{'type',191,'node',[]}]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Hosts'}|[{'type',192,'list',[{'type',192,'atom',[]}]}]]]]}]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'world_list',2},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Hosts'}|[{'var',197,'Arg'}]]}|[{'type',197,'list',[{'type',197,'node',[]}]}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Hosts'}|[{'type',198,'list',[{'type',198,'atom',[]}]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Arg'}|[{'type',199,'verbosity',[]}]]]]}]]]]}]}]]
'host_file'/0 =
    %% Line 44
    fun () ->
	let <_cor1> =
	    %% Line 45
	    case call 'init':'get_argument'
		     ('home') of
	      %% Line 46
	      <{'ok',[[H|[]]|[]]}> when 'true' ->
		  [H|[]]
	      %% Line 47
	      <_cor7> when 'true' ->
		  []
	    end
	in  let <_cor3> =
		%% Line 49
		call 'code':'root_dir'
		    ()
	    in  let <_cor4> =
		    %% Line 49
		    call 'erlang':'++'
			(_cor1, [_cor3|[]])
		in  let <_cor5> =
			%% Line 49
			[[46]|_cor4]
		    in  %% Line 49
			case call 'file':'path_consult'
				 (_cor5, [46|[104|[111|[115|[116|[115|[46|[101|[114|[108|[97|[110|[103]]]]]]]]]]]]]) of
			  %% Line 50
			  <{'ok',Hosts,_cor8}> when 'true' ->
			      Hosts
			  %% Line 51
			  <Error> when 'true' ->
			      Error
			end
'ping'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor2> =
		  catch
		      let <_cor1> =
			  %% Line 63
			  call 'erlang':'node'
			      ()
		      in  %% Line 61
			  call 'gen':'call'
			      ({'net_kernel',Node}, %% Line 62
						    '$gen_call', %% Line 63
								 {'is_auth',_cor1}, %% Line 64
										    'infinity')
	      in  %% Line 61
		  case _cor2 of
		    %% Line 65
		    <{'ok','yes'}> when 'true' ->
			'pong'
		    %% Line 66
		    <_cor5> when 'true' ->
			do  %% Line 67
			    call 'erlang':'disconnect_node'
				(Node)
			    %% Line 68
			    'pang'
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ping',1}}] )
	    -| ['compiler_generated'] )
	end
'localhost'/0 =
    %% Line 74
    fun () ->
	%% Line 75
	case call 'inet':'gethostname'
		 () of
	  <{'ok',Host}> when 'true' ->
	      %% Line 76
	      case call 'inet_db':'res_option'
		       ('domain') of
		%% Line 77
		<[]> when 'true' ->
		    Host
		%% Line 78
		<Domain> when 'true' ->
		    let <_cor1> =
			[46|Domain]
		    in  call 'erlang':'++'
			    (Host, _cor1)
	      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'names'/0 =
    %% Line 87
    fun () ->
	let <_cor0> =
	    %% Line 88
	    apply 'localhost'/0
		()
	in  %% Line 88
	    apply 'names'/1
		(_cor0)
'names'/1 =
    %% Line 97
    fun (_cor0) ->
	%% Line 98
	case call 'inet':'gethostbyname'
		 (_cor0) of
	  %% Line 99
	  <{'ok',{'hostent',_X_Name,_cor3,_X_Af,_X_Size,[Addr|_cor4]}}> when 'true' ->
	      %% Line 100
	      call 'erl_epmd':'names'
		  (Addr)
	  %% Line 101
	  <Else> when 'true' ->
	      %% Line 102
	      Else
	end
'dns_hostname'/1 =
    %% Line 109
    fun (_cor0) ->
	%% Line 110
	case call 'inet':'gethostbyname'
		 (_cor0) of
	  %% Line 111
	  <{'ok',{'hostent',Name,_cor3,_X_Af,_X_Size,_X_Addr}}> when 'true' ->
	      %% Line 112
	      {'ok',Name}
	  %% Line 113
	  <_cor4> when 'true' ->
	      %% Line 114
	      {'error',_cor0}
	end
'ping_list'/1 =
    %% Line 135
    fun (_cor0) ->
	%% Line 136
	case call 'net_kernel':'monitor_nodes'
		 ('true') of
	  <'ok'> when 'true' ->
	      let <_cor2> =
		  %% Line 137
		  call 'erlang':'nodes'
		      ()
	      in  let <Sofar> =
		      %% Line 137
		      apply 'ping_first'/2
			  (_cor0, _cor2)
		  in  %% Line 138
		      apply 'collect_new'/2
			  (Sofar, _cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'ping_first'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_S> when 'true' ->
	      %% Line 141
	      []
	  %% Line 142
	  <[Node|Nodes],S> when 'true' ->
	      %% Line 143
	      case call 'lists':'member'
		       (Node, S) of
		%% Line 144
		<'true'> when 'true' ->
		    let <_cor2> =
			apply 'ping_first'/2
			    (Nodes, S)
		    in  [Node|_cor2]
		%% Line 145
		<'false'> when 'true' ->
		    %% Line 146
		    case apply 'ping'/1
			     (Node) of
		      %% Line 147
		      <'pong'> when 'true' ->
			  [Node|[]]
		      %% Line 148
		      <'pang'> when 'true' ->
			  apply 'ping_first'/2
			      (Nodes, S)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ping_first',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_new'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	%% Line 153
	receive
	  %% Line 154
	  <{'nodeup',Node}> when 'true' ->
	      %% Line 155
	      case call 'lists':'member'
		       (Node, _cor0) of
		%% Line 156
		<'true'> when 'true' ->
		    %% Line 157
		    apply 'collect_new'/2
			(_cor1, _cor0)
		%% Line 158
		<'false'> when 'true' ->
		    %% Line 159
		    apply 'collect_new'/2
			([Node|_cor1], _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	after %% Line 161
	      3000 ->
	  %% Line 162
	  case call 'net_kernel':'monitor_nodes'
		   ('false') of
	    <'ok'> when 'true' ->
		_cor1
	    ( <_cor2> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_cor2})
	      -| ['compiler_generated'] )
	  end
'world'/0 =
    %% Line 179
    fun () ->
	%% Line 180
	apply 'world'/1
	    ('silent')
'world'/1 =
    %% Line 185
    fun (_cor0) ->
	%% Line 186
	case call 'net_adm':'host_file'
		 () of
	  %% Line 187
	  <{'error',R}> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',R})
	  %% Line 188
	  <Hosts> when 'true' ->
	      apply 'expand_hosts'/2
		  (Hosts, _cor0)
	end
'world_list'/1 =
    %% Line 194
    fun (_cor0) ->
	case _cor0 of
	  <Hosts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 195
	      apply 'expand_hosts'/2
		  (Hosts, 'silent')
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'world_list',1}}] )
	    -| ['compiler_generated'] )
	end
'world_list'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Hosts,Verbose>
	      when call 'erlang':'is_list'
		    (Hosts) ->
	      %% Line 202
	      apply 'expand_hosts'/2
		  (Hosts, Verbose)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'world_list',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_hosts'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 205
	    apply 'collect_nodes'/2
		(_cor1, _cor0)
	in  %% Line 205
	    call 'lists':'flatten'
		(_cor2)
'collect_nodes'/2 =
    %% Line 207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor6> when 'true' ->
	      []
	  %% Line 208
	  <[Host|Tail],Verbose> when 'true' ->
	      %% Line 209
	      case apply 'collect_host_nodes'/2
		       (Host, Verbose) of
		%% Line 210
		<'nil'> when 'true' ->
		    %% Line 211
		    apply 'collect_nodes'/2
			(Tail, Verbose)
		%% Line 212
		<L> when 'true' ->
		    let <_cor2> =
			%% Line 213
			apply 'collect_nodes'/2
			    (Tail, Verbose)
		    in  %% Line 213
			[L|_cor2]
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'collect_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_host_nodes'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	%% Line 217
	case apply 'names'/1
		 (_cor1) of
	  %% Line 218
	  <{'ok',Namelist}> when 'true' ->
	      let <_cor2> =
		  %% Line 219
		  call 'erlang':'atom_to_list'
		      (_cor1)
	      in  %% Line 219
		  apply 'do_ping'/3
		      (Namelist, _cor2, _cor0)
	  %% Line 220
	  <_cor6> when 'true' ->
	      %% Line 221
	      'nil'
	end
'do_ping'/3 =
    %% Line 224
    fun (_cor2,_cor1,_cor0) ->
	%% Line 225
	case apply 'longshort'/1
		 (_cor1) of
	  %% Line 226
	  <'ignored'> when 'true' ->
	      []
	  %% Line 227
	  <Host> when 'true' ->
	      apply 'do_ping_1'/3
		  (_cor2, Host, _cor0)
	end
'do_ping_1'/3 =
    %% Line 230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Host,_X_Verbose> when 'true' ->
	      %% Line 231
	      []
	  %% Line 232
	  <[{Name,_cor13}|Rest],Host,Verbose> when 'true' ->
	      let <_cor3> =
		  %% Line 233
		  apply 'longshort'/1
		      (Host)
	      in  let <_cor4> =
		      %% Line 233
		      [64|_cor3]
		  in  let <_cor5> =
			  %% Line 233
			  call 'erlang':'++'
			      (Name, _cor4)
		      in  let <Node> =
			      %% Line 233
			      call 'erlang':'list_to_atom'
				  (_cor5)
			  in  do  %% Line 234
				  apply 'verbose'/3
				      (Verbose, [80|[105|[110|[103|[105|[110|[103|[32|[126|[119|[32|[45|[62|[32]]]]]]]]]]]]]], [Node|[]])
				  let <Result> =
				      %% Line 235
				      apply 'ping'/1
					  (Node)
				  in  do  %% Line 236
					  apply 'verbose'/3
					      (Verbose, [126|[112|[10]]], [Result|[]])
					  %% Line 237
					  case Result of
					    %% Line 238
					    <'pong'> when 'true' ->
						let <_cor8> =
						    %% Line 239
						    apply 'do_ping_1'/3
							(Rest, Host, Verbose)
						in  %% Line 239
						    [Node|_cor8]
					    %% Line 240
					    <'pang'> when 'true' ->
						%% Line 241
						apply 'do_ping_1'/3
						    (Rest, Host, Verbose)
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor9})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_ping_1',3}}] )
	    -| ['compiler_generated'] )
	end
'verbose'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'verbose',Format,Args> when 'true' ->
	      %% Line 245
	      call 'io':'format'
		  (Format, Args)
	  %% Line 246
	  <_cor6,_cor7,_cor8> when 'true' ->
	      %% Line 247
	      'ok'
	end
'longshort'/1 =
    %% Line 249
    fun (_cor0) ->
	%% Line 250
	case call 'net_kernel':'longnames'
		 () of
	  %% Line 251
	  <'false'> when 'true' ->
	      apply 'uptodot'/1
		  (_cor0)
	  %% Line 252
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 253
	  <'ignored'> when 'true' ->
	      'ignored'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'uptodot'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <[46|_cor3]> when 'true' ->
	      []
	  %% Line 257
	  <[]> when 'true' ->
	      []
	  %% Line 258
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'uptodot'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'uptodot',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('net_adm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('net_adm', _cor0)
end