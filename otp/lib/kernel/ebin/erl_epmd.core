module 'erl_epmd' ['code_change'/3,
		   'handle_call'/3,
		   'handle_cast'/2,
		   'handle_info'/2,
		   'init'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'names'/0,
		   'names'/1,
		   'open'/0,
		   'open'/1,
		   'open'/2,
		   'port_please'/2,
		   'port_please'/3,
		   'register_node'/2,
		   'start'/0,
		   'start_link'/0,
		   'stop'/0,
		   'terminate'/2]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','state'},[{'record_field',42,{'atom',42,'socket'}}|[{'record_field',42,{'atom',42,'port_no'},{'op',42,'-',{'integer',42,1}}}|[{'record_field',42,{'atom',42,'name'},{'string',42,[]}}]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'state',{'type',43,'record',[{'atom',43,'state'}]},[]}],
		%% Line 374
		'type' =
		    %% Line 374
		    [{{'record','connect_opts'},[{'record_field',376,{'atom',376,'ifaddr'},{'atom',376,'any'}}|[{'record_field',377,{'atom',377,'port'},{'integer',377,0}}|[{'record_field',378,{'atom',378,'fd'},{'op',378,'-',{'integer',378,1}}}|[{'record_field',379,{'atom',379,'opts'},{'nil',379}}]]]],[]}],
		%% Line 382
		'type' =
		    %% Line 382
		    [{{'record','listen_opts'},[{'record_field',384,{'atom',384,'ifaddr'},{'atom',384,'any'}}|[{'record_field',385,{'atom',385,'port'},{'integer',385,0}}|[{'record_field',386,{'atom',386,'backlog'},{'integer',386,5}}|[{'record_field',387,{'atom',387,'fd'},{'op',387,'-',{'integer',387,1}}}|[{'record_field',388,{'atom',388,'opts'},{'nil',388}}]]]]],[]}],
		%% Line 392
		'type' =
		    %% Line 392
		    [{{'record','udp_opts'},[{'record_field',394,{'atom',394,'ifaddr'},{'atom',394,'any'}}|[{'record_field',395,{'atom',395,'port'},{'integer',395,0}}|[{'record_field',396,{'atom',396,'fd'},{'op',396,'-',{'integer',396,1}}}|[{'record_field',397,{'atom',397,'opts'},{'cons',397,{'tuple',397,[{'atom',397,'active'}|[{'atom',397,'true'}]]},{'nil',397}}}]]]],[]}],
		%% Line 402
		'type' =
		    %% Line 402
		    [{{'record','sctp_opts'},[{'record_field',404,{'atom',404,'ifaddr'}}|[{'record_field',405,{'atom',405,'port'},{'integer',405,0}}|[{'record_field',406,{'atom',406,'fd'},{'op',406,'-',{'integer',406,1}}}|[{'record_field',407,{'atom',407,'type'},{'atom',407,'seqpacket'}}|[{'record_field',408,{'atom',408,'opts'},{'cons',408,{'tuple',408,[{'atom',408,'mode'}|[{'atom',408,'binary'}]]},{'cons',409,{'tuple',409,[{'atom',409,'buffer'}|[{'integer',409,65536}]]},{'cons',410,{'tuple',410,[{'atom',410,'sndbuf'}|[{'integer',410,65536}]]},{'cons',411,{'tuple',411,[{'atom',411,'recbuf'}|[{'integer',411,1024}]]},{'cons',412,{'tuple',412,[{'atom',412,'sctp_events'}|[{'atom',412,'undefined'}]]},{'nil',414}}}}}}}]]]]],[]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'init',1},[{'type',115,'fun',[{'type',115,'product',[{'var',115,'_'}]}|[{'type',115,'tuple',[{'atom',115,'ok'}|[{'type',115,'state',[]}]]}]]}]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'calls',{'type',122,'union',[{'atom',122,'client_info_req'}|[{'atom',122,'stop'}|[{'type',122,'tuple',[{'atom',122,'register'}|[{'type',122,'term',[]}|[{'type',122,'term',[]}]]]}]]]},[]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'handle_call',3},[{'type',124,'fun',[{'type',124,'product',[{'type',124,'calls',[]}|[{'type',124,'term',[]}|[{'type',124,'state',[]}]]]}|[{'type',125,'union',[{'type',125,'tuple',[{'atom',125,'reply'}|[{'type',125,'term',[]}|[{'type',125,'state',[]}]]]}|[{'type',125,'tuple',[{'atom',125,'stop'}|[{'atom',125,'shutdown'}|[{'atom',125,'ok'}|[{'type',125,'state',[]}]]]]}]]}]]}]}],
		%% Line 152
		'spec' =
		    %% Line 152
		    [{{'handle_cast',2},[{'type',152,'fun',[{'type',152,'product',[{'type',152,'term',[]}|[{'type',152,'state',[]}]]}|[{'type',152,'tuple',[{'atom',152,'noreply'}|[{'type',152,'state',[]}]]}]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'handle_info',2},[{'type',159,'fun',[{'type',159,'product',[{'type',159,'term',[]}|[{'type',159,'state',[]}]]}|[{'type',159,'tuple',[{'atom',159,'noreply'}|[{'type',159,'state',[]}]]}]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'terminate',2},[{'type',168,'fun',[{'type',168,'product',[{'type',168,'term',[]}|[{'type',168,'state',[]}]]}|[{'atom',168,'ok'}]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'code_change',3},[{'type',178,'fun',[{'type',178,'product',[{'type',178,'term',[]}|[{'type',178,'state',[]}|[{'type',178,'term',[]}]]]}|[{'type',178,'tuple',[{'atom',178,'ok'}|[{'type',178,'state',[]}]]}]]}]}]]
'start'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	call 'gen_server':'start'
	    ({'local','erl_epmd'}, 'erl_epmd', [], [])
'start_link'/0 =
    %% Line 56
    fun () ->
	%% Line 57
	call 'gen_server':'start_link'
	    ({'local','erl_epmd'}, 'erl_epmd', [], [])
'stop'/0 =
    %% Line 60
    fun () ->
	%% Line 61
	call 'gen_server':'call'
	    ('erl_epmd', 'stop', 'infinity')
'port_please'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	%% Line 69
	apply 'port_please'/3
	    (_cor1, _cor0, 'infinity')
'port_please'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,HostName,Timeout>
	      when call 'erlang':'is_atom'
		    (HostName) ->
	      let <_cor3> =
		  %% Line 72
		  call 'erlang':'atom_to_list'
		      (HostName)
	      in  %% Line 72
		  apply 'port_please1'/3
		      (Node, _cor3, Timeout)
	  %% Line 73
	  <Node,HostName,Timeout>
	      when call 'erlang':'is_list'
		    (HostName) ->
	      %% Line 74
	      apply 'port_please1'/3
		  (Node, HostName, Timeout)
	  %% Line 75
	  <Node,EpmdAddr,Timeout> when 'true' ->
	      %% Line 76
	      apply 'get_port'/3
		  (Node, EpmdAddr, Timeout)
	end
'port_please1'/3 =
    %% Line 80
    fun (_cor2,_cor1,_cor0) ->
	%% Line 81
	case call 'inet':'gethostbyname'
		 (_cor1, 'inet', _cor0) of
	  %% Line 82
	  <{'ok',{'hostent',_X_Name,_cor7,_X_Af,_X_Size,[EpmdAddr|_cor8]}}> when 'true' ->
	      %% Line 83
	      apply 'get_port'/3
		  (_cor2, EpmdAddr, _cor0)
	  %% Line 84
	  <Else> when 'true' ->
	      %% Line 85
	      Else
	end
'names'/0 =
    %% Line 88
    fun () ->
	%% Line 89
	case call 'inet':'gethostname'
		 () of
	  <{'ok',H}> when 'true' ->
	      %% Line 90
	      apply 'names'/1
		  (H)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'names'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <HostName>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 93
		  call 'erlang':'atom_to_list'
		      (HostName)
	      in  %% Line 93
		  apply 'names1'/1
		      (_cor1)
	  %% Line 94
	  <HostName>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 95
	      apply 'names1'/1
		  (HostName)
	  %% Line 96
	  <EpmdAddr> when 'true' ->
	      %% Line 97
	      apply 'get_names'/1
		  (EpmdAddr)
	end
'names1'/1 =
    %% Line 99
    fun (_cor0) ->
	%% Line 100
	case call 'inet':'gethostbyname'
		 (_cor0) of
	  %% Line 101
	  <{'ok',{'hostent',_X_Name,_cor3,_X_Af,_X_Size,[EpmdAddr|_cor4]}}> when 'true' ->
	      %% Line 102
	      apply 'get_names'/1
		  (EpmdAddr)
	  %% Line 103
	  <Else> when 'true' ->
	      %% Line 104
	      Else
	end
'register_node'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	%% Line 109
	call 'gen_server':'call'
	    ('erl_epmd', {'register',_cor1,_cor0}, 'infinity')
'init'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	{'ok',{'state',-1,-1,[]}}
'handle_call'/3 =
    %% Line 127
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'register',Name,PortNo},_X_From,State> when 'true' ->
	      %% Line 128
	      ( case State of
		  ( <( {'state',_rec0,_cor19,_cor20}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec0 of
			  %% Line 129
			  <P>
			      when call 'erlang':'<'
				    (_rec0,
				     0) ->
			      %% Line 130
			      case apply 'do_register_node'/2
				       (Name, PortNo) of
				%% Line 131
				<{'alive',Socket,Creation}> when 'true' ->
				    let <_cor7> =
					%% Line 134
					{'state',Socket,PortNo,Name}
				    in  %% Line 135
					{'reply',{'ok',Creation},_cor7}
				%% Line 136
				<Error> when 'true' ->
				    %% Line 137
				    {'reply',Error,State}
			      end
			  %% Line 139
			  <_cor23> when 'true' ->
			      %% Line 140
			      {'reply',{'error','already_registered'},State}
			end
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 143
	  <'client_info_req',_X_From,State> when 'true' ->
	      %% Line 144
	      ( case State of
		  ( <( {'state',_cor24,_cor25,_rec5}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Reply> = {'ok',{'r4',_rec5,_cor25}}
			in  %% Line 145
			    {'reply',Reply,State}
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 147
	  <'stop',_X_From,State> when 'true' ->
	      %% Line 148
	      {'stop','shutdown','ok',State}
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	%% Line 155
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 161
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'tcp_closed',Socket},State = {'state',_cor14,_cor15,_cor16}>
	      when call 'erlang':'=:='
		    (_cor14,
		     Socket) ->
	      let <_cor11> =
		  %% Line 162
		  call 'erlang':'setelement'
		      (2, State, -1)
	      in  %% Line 162
		  {'noreply',_cor11}
	  %% Line 163
	  <_cor21,State> when 'true' ->
	      %% Line 164
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,{'state',Socket,_cor5,_cor6}>
	      when call 'erlang':'>'
		    (Socket,
		     0) ->
	      do  %% Line 171
		  apply 'close'/1
		      (Socket)
		  %% Line 172
		  'ok'
	  %% Line 173
	  <_cor7,_cor8> when 'true' ->
	      %% Line 174
	      'ok'
	end
'code_change'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	%% Line 181
	{'ok',_cor1}
'get_epmd_port'/0 =
    %% Line 187
    fun () ->
	%% Line 188
	case call 'init':'get_argument'
		 ('epmd_port') of
	  %% Line 189
	  <{'ok',[[PortStr|_cor1]|_cor2]}>
	      when call 'erlang':'is_list'
		    (PortStr) ->
	      %% Line 190
	      call 'erlang':'list_to_integer'
		  (PortStr)
	  %% Line 191
	  <'error'> when 'true' ->
	      %% Line 192
	      4369
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'open'/0 =
    %% Line 198
    fun () ->
	apply 'open'/1
	    ({127,0,0,1})
'open'/1 =
    %% Line 200
    fun (_cor0) ->
	case _cor0 of
	  <EpmdAddr = {A,B,C,D}>
	      when try
		    let <_cor2> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor3> =
			    call 'erlang':'bor'
				(_cor2, C)
			in  let <_cor4> =
				call 'erlang':'bor'
				    (_cor3, D)
			    in  let <_cor5> =
				    call 'erlang':'band'
					(_cor4, -256)
				in  call 'erlang':'=:='
					(_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 201
		  apply 'get_epmd_port'/0
		      ()
	      in  %% Line 201
		  call 'gen_tcp':'connect'
		      (EpmdAddr, _cor6, ['inet'])
	  %% Line 202
	  <EpmdAddr = {A,B,C,D,E,F,G,H}>
	      when try
		    let <_cor8> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor9> =
			    call 'erlang':'bor'
				(_cor8, C)
			in  let <_cor10> =
				call 'erlang':'bor'
				    (_cor9, D)
			    in  let <_cor11> =
				    call 'erlang':'bor'
					(_cor10, E)
				in  let <_cor12> =
					call 'erlang':'bor'
					    (_cor11, F)
				    in  let <_cor13> =
					    call 'erlang':'bor'
						(_cor12, G)
					in  let <_cor14> =
						call 'erlang':'bor'
						    (_cor13, H)
					    in  let <_cor15> =
						    call 'erlang':'band'
							(_cor14, -65536)
						in  call 'erlang':'=:='
							(_cor15, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor16> =
		  %% Line 203
		  apply 'get_epmd_port'/0
		      ()
	      in  %% Line 203
		  call 'gen_tcp':'connect'
		      (EpmdAddr, _cor16, ['inet6'])
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'open',1}}] )
	    -| ['compiler_generated'] )
	end
'open'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <EpmdAddr = {A,B,C,D},Timeout>
	      when try
		    let <_cor3> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor4> =
			    call 'erlang':'bor'
				(_cor3, C)
			in  let <_cor5> =
				call 'erlang':'bor'
				    (_cor4, D)
			    in  let <_cor6> =
				    call 'erlang':'band'
					(_cor5, -256)
				in  call 'erlang':'=:='
					(_cor6, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 206
		  apply 'get_epmd_port'/0
		      ()
	      in  %% Line 206
		  call 'gen_tcp':'connect'
		      (EpmdAddr, _cor7, ['inet'], Timeout)
	  %% Line 207
	  <EpmdAddr = {A,B,C,D,E,F,G,H},Timeout>
	      when try
		    let <_cor9> =
			call 'erlang':'bor'
			    (A, B)
		    in  let <_cor10> =
			    call 'erlang':'bor'
				(_cor9, C)
			in  let <_cor11> =
				call 'erlang':'bor'
				    (_cor10, D)
			    in  let <_cor12> =
				    call 'erlang':'bor'
					(_cor11, E)
				in  let <_cor13> =
					call 'erlang':'bor'
					    (_cor12, F)
				    in  let <_cor14> =
					    call 'erlang':'bor'
						(_cor13, G)
					in  let <_cor15> =
						call 'erlang':'bor'
						    (_cor14, H)
					    in  let <_cor16> =
						    call 'erlang':'band'
							(_cor15, -65536)
						in  call 'erlang':'=:='
							(_cor16, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor17> =
		  %% Line 208
		  apply 'get_epmd_port'/0
		      ()
	      in  %% Line 208
		  call 'gen_tcp':'connect'
		      (EpmdAddr, _cor17, ['inet6'], Timeout)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'open',2}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	call 'gen_tcp':'close'
	    (_cor0)
'do_register_node'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	%% Line 214
	case apply 'open'/0
		 () of
	  %% Line 215
	  <{'ok',Socket}> when 'true' ->
	      let <Name> =
		  %% Line 216
		  apply 'to_string'/1
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 219
		      call 'erlang':'length'
			  (Name)
		  in  let <_cor12> =
			  %% Line 219
			  call 'erlang':'+'
			      (11, _cor5)
		      in  let <_cor13> =
			      %% Line 219
			      call 'erlang':'+'
				  (_cor12, 2)
			  in  let <Len> =
				  %% Line 219
				  call 'erlang':'+'
				      (_cor13, 0)
			      in  let <_cor15> =
				      %% Line 220
				      call 'erlang':'bsr'
					  (Len, 8)
				  in  let <_cor16> =
					  %% Line 220
					  call 'erlang':'band'
					      (_cor15, 255)
				      in  let <_cor17> =
					      %% Line 220
					      call 'erlang':'band'
						  (Len, 255)
					  in  let <_cor18> =
						  %% Line 221
						  call 'erlang':'bsr'
						      (_cor0, 8)
					      in  let <_cor19> =
						      %% Line 221
						      call 'erlang':'band'
							  (_cor18, 255)
						  in  let <_cor20> =
							  %% Line 221
							  call 'erlang':'band'
							      (_cor0, 255)
						      in  let <_cor21> =
							      %% Line 224
							      apply 'epmd_dist_high'/0
								  ()
							  in  let <_cor22> =
								  %% Line 224
								  call 'erlang':'bsr'
								      (_cor21, 8)
							      in  let <_cor23> =
								      %% Line 224
								      call 'erlang':'band'
									  (_cor22, 255)
								  in  let <_cor24> =
									  %% Line 224
									  apply 'epmd_dist_high'/0
									      ()
								      in  let <_cor25> =
									      %% Line 224
									      call 'erlang':'band'
										  (_cor24, 255)
									  in  let <_cor26> =
										  %% Line 225
										  apply 'epmd_dist_low'/0
										      ()
									      in  let <_cor27> =
										      %% Line 225
										      call 'erlang':'bsr'
											  (_cor26, 8)
										  in  let <_cor28> =
											  %% Line 225
											  call 'erlang':'band'
											      (_cor27, 255)
										      in  let <_cor29> =
											      %% Line 225
											      apply 'epmd_dist_low'/0
												  ()
											  in  let <_cor30> =
												  %% Line 225
												  call 'erlang':'band'
												      (_cor29, 255)
											      in  let <_cor31> =
												      %% Line 226
												      call 'erlang':'length'
													  (Name)
												  in  let <_cor32> =
													  %% Line 226
													  call 'erlang':'bsr'
													      (_cor31, 8)
												      in  let <_cor33> =
													      %% Line 226
													      call 'erlang':'band'
														  (_cor32, 255)
													  in  let <_cor34> =
														  %% Line 226
														  call 'erlang':'length'
														      (Name)
													      in  let <_cor35> =
														      %% Line 226
														      call 'erlang':'band'
															  (_cor34, 255)
														  in  let <Packet> =
															  %% Line 220
															  [[_cor16|[_cor17|[]]]|[120|%% Line 221
																		     [[_cor19|[_cor20|[]]]|%% Line 222
																					   [77|%% Line 223
																					       [0|%% Line 224
																						  [[_cor23|[_cor25|[]]]|%% Line 225
																									[[_cor28|[_cor30|[]]]|%% Line 226
																											      [[_cor33|[_cor35|[]]]|%% Line 227
																														    [Name|%% Line 228
																															  [[0|[0]]|[[]]]]]]]]]]]]
														      in  %% Line 230
															  case call 'gen_tcp':'send'
																   (Socket, Packet) of
															    %% Line 231
															    <'ok'> when 'true' ->
																%% Line 232
																apply 'wait_for_reg_reply'/2
																    (Socket, [])
															    %% Line 233
															    <Error> when 'true' ->
																do  %% Line 234
																    apply 'close'/1
																	(Socket)
																    %% Line 235
																    Error
															  end
	  %% Line 237
	  <Error> when 'true' ->
	      %% Line 238
	      Error
	end
'epmd_dist_high'/0 =
    %% Line 241
    fun () ->
	%% Line 242
	case call 'os':'getenv'
		 ([69|[82|[76|[95|[69|[80|[77|[68|[95|[68|[73|[83|[84|[95|[72|[73|[71|[72]]]]]]]]]]]]]]]]]]) of
	  %% Line 243
	  <'false'> when 'true' ->
	      %% Line 244
	      5
	  %% Line 245
	  <Version> when 'true' ->
	      let <_cor0> =
		  catch
		      %% Line 246
		      call 'erlang':'list_to_integer'
			  (Version)
	      in  %% Line 246
		  case _cor0 of
		    %% Line 247
		    <N>
			when let <_cor1> =
			      call 'erlang':'is_integer'
				  (_cor0)
			  in  let <_cor2> =
				  call 'erlang':'<'
				      (_cor0, 5)
			      in  call 'erlang':'and'
				      (_cor1, _cor2) ->
			%% Line 248
			N
		    %% Line 249
		    <_cor5> when 'true' ->
			%% Line 250
			5
		  end
	end
'epmd_dist_low'/0 =
    %% Line 254
    fun () ->
	%% Line 255
	case call 'os':'getenv'
		 ([69|[82|[76|[95|[69|[80|[77|[68|[95|[68|[73|[83|[84|[95|[76|[79|[87]]]]]]]]]]]]]]]]]) of
	  %% Line 256
	  <'false'> when 'true' ->
	      %% Line 257
	      5
	  %% Line 258
	  <Version> when 'true' ->
	      let <_cor0> =
		  catch
		      %% Line 259
		      call 'erlang':'list_to_integer'
			  (Version)
	      in  %% Line 259
		  case _cor0 of
		    %% Line 260
		    <N>
			when let <_cor1> =
			      call 'erlang':'is_integer'
				  (_cor0)
			  in  let <_cor2> =
				  call 'erlang':'>'
				      (_cor0, 5)
			      in  call 'erlang':'and'
				      (_cor1, _cor2) ->
			%% Line 261
			N
		    %% Line 262
		    <_cor5> when 'true' ->
			%% Line 263
			5
		  end
	end
'wait_for_reg_reply'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	%% Line 272
	receive
	  %% Line 273
	  <{'tcp',_cor9,Data0}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor1) ->
	      %% Line 274
	      case call 'erlang':'++'
		       (_cor0, Data0) of
		%% Line 275
		<[121|[Result|[A|[B|[]]]]]> when 'true' ->
		    %% Line 276
		    case Result of
		      %% Line 277
		      <0> when 'true' ->
			  let <_cor2> =
			      %% Line 278
			      call 'erlang':'bsl'
				  (A, 8)
			  in  let <_cor3> =
				  %% Line 278
				  call 'erlang':'bor'
				      (_cor2, B)
			      in  %% Line 278
				  {'alive',_cor1,_cor3}
		      %% Line 279
		      <_cor10> when 'true' ->
			  %% Line 280
			  {'error','duplicate_name'}
		    end
		%% Line 282
		<Data>
		    when try
			  let <_cor5> =
			      call 'erlang':'length'
				  (Data)
			  in  call 'erlang':'<'
				  (_cor5, 4)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 283
		    apply 'wait_for_reg_reply'/2
			(_cor1, Data)
		%% Line 284
		<Garbage> when 'true' ->
		    %% Line 285
		    {'error',{'garbage_from_epmd',Garbage}}
	      end
	  %% Line 287
	  <{'tcp_closed',_cor11}>
	      when call 'erlang':'=:='
		    (_cor11,
		     _cor1) ->
	      %% Line 288
	      {'error','epmd_close'}
	after %% Line 289
	      10000 ->
	  do  %% Line 290
	      call 'gen_tcp':'close'
		  (_cor1)
	      %% Line 291
	      {'error','no_reg_reply_from_epmd'}
'get_port'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	%% Line 299
	case apply 'open'/2
		 (_cor1, _cor0) of
	  %% Line 300
	  <{'ok',Socket}> when 'true' ->
	      let <Name> =
		  %% Line 301
		  apply 'to_string'/1
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 302
		      call 'erlang':'length'
			  (Name)
		  in  let <Len> =
			  %% Line 302
			  call 'erlang':'+'
			      (1, _cor4)
		      in  let <_cor6> =
			      %% Line 303
			      call 'erlang':'bsr'
				  (Len, 8)
			  in  let <_cor7> =
				  %% Line 303
				  call 'erlang':'band'
				      (_cor6, 255)
			      in  let <_cor8> =
				      %% Line 303
				      call 'erlang':'band'
					  (Len, 255)
				  in  let <Msg> =
					  %% Line 303
					  [[_cor7|[_cor8|[]]]|[122|[Name|[]]]]
				      in  %% Line 304
					  case call 'gen_tcp':'send'
						   (Socket, Msg) of
					    %% Line 305
					    <'ok'> when 'true' ->
						%% Line 306
						apply 'wait_for_port_reply'/2
						    (Socket, [])
					    %% Line 307
					    <_X_Error> when 'true' ->
						%% Line 309
						'noport'
					  end
	  %% Line 311
	  <_X_Error> when 'true' ->
	      %% Line 313
	      'noport'
	end
'wait_for_port_reply'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	%% Line 318
	receive
	  %% Line 319
	  <{'tcp',_cor7,Data0}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 321
	      case call 'erlang':'++'
		       (_cor0, Data0) of
		%% Line 322
		<[119|[Result|Rest]]> when 'true' ->
		    %% Line 323
		    case Result of
		      %% Line 324
		      <0> when 'true' ->
			  %% Line 325
			  apply 'wait_for_port_reply_cont'/2
			      (_cor1, Rest)
		      %% Line 326
		      <_cor8> when 'true' ->
			  %% Line 328
			  apply 'wait_for_close'/2
			      (_cor1, 'noport')
		    end
		%% Line 330
		<Data>
		    when try
			  let <_cor3> =
			      call 'erlang':'length'
				  (Data)
			  in  call 'erlang':'<'
				  (_cor3, 2)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 331
		    apply 'wait_for_port_reply'/2
			(_cor1, Data)
		%% Line 332
		<Garbage> when 'true' ->
		    %% Line 334
		    {'error',{'garbage_from_epmd',Garbage}}
	      end
	  %% Line 336
	  <{'tcp_closed',_cor9}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor1) ->
	      %% Line 338
	      'closed'
	after %% Line 339
	      10000 ->
	  do  %% Line 341
	      call 'gen_tcp':'close'
		  (_cor1)
	      %% Line 342
	      'noport'
'wait_for_port_reply_cont'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Socket,SoFar>
	      when try
		    let <_cor2> =
			call 'erlang':'length'
			    (SoFar)
		    in  call 'erlang':'>='
			    (_cor2, 10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 346
	      apply 'wait_for_port_reply_cont2'/2
		  (Socket, SoFar)
	  %% Line 347
	  <Socket,SoFar> when 'true' ->
	      %% Line 348
	      receive
		%% Line 349
		<{'tcp',_cor8,Data0}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Socket) ->
		    %% Line 350
		    case call 'erlang':'++'
			     (SoFar, Data0) of
		      %% Line 351
		      <Data>
			  when try
				let <_cor3> =
				    call 'erlang':'length'
					(Data)
				in  call 'erlang':'>='
					(_cor3, 10)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 352
			  apply 'wait_for_port_reply_cont2'/2
			      (Socket, Data)
		      %% Line 353
		      <Data>
			  when try
				let <_cor4> =
				    call 'erlang':'length'
					(Data)
				in  call 'erlang':'<'
					(_cor4, 10)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 354
			  apply 'wait_for_port_reply_cont'/2
			      (Socket, Data)
		      %% Line 355
		      <Garbage> when 'true' ->
			  %% Line 357
			  {'error',{'garbage_from_epmd',Garbage}}
		    end
		%% Line 359
		<{'tcp_closed',_cor9}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Socket) ->
		    %% Line 361
		    'noport'
	      after %% Line 362
		    10000 ->
		do  %% Line 364
		    call 'gen_tcp':'close'
			(Socket)
		    %% Line 365
		    'noport'
	end
'wait_for_port_reply_cont2'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	%% Line 370
	case _cor0 of
	  <[A|[B|[_X_Type|[_X_Proto|[HighA|[HighB|[LowA|[LowB|[NLenA|[NLenB|Rest]]]]]]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 372
		  call 'erlang':'bsl'
		      (NLenA, 8)
	      in  let <_cor4> =
		      %% Line 372
		      call 'erlang':'bor'
			  (_cor3, NLenB)
		  in  do  %% Line 371
			  apply 'wait_for_port_reply_name'/3
			      (_cor1, _cor4, %% Line 373
					     Rest)
			  let <_cor5> =
			      %% Line 374
			      call 'erlang':'bsl'
				  (LowA, 8)
			  in  let <Low> =
				  %% Line 374
				  call 'erlang':'bor'
				      (_cor5, LowB)
			      in  let <_cor7> =
				      %% Line 375
				      call 'erlang':'bsl'
					  (HighA, 8)
				  in  let <High> =
					  %% Line 375
					  call 'erlang':'bor'
					      (_cor7, HighB)
				      in  let <Version> =
					      %% Line 376
					      apply 'best_version'/2
						  (Low, High)
					  in  let <_cor10> =
						  %% Line 378
						  call 'erlang':'bsl'
						      (A, 8)
					      in  let <_cor11> =
						      %% Line 378
						      call 'erlang':'bor'
							  (_cor10, B)
						  in  %% Line 378
						      {'port',_cor11,Version}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'wait_for_port_reply_name'/3 =
    %% Line 383
    fun (_cor2,_cor1,_cor0) ->
	%% Line 384
	receive
	  %% Line 385
	  <{'tcp',_cor6,_X_Data}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor2) ->
	      %% Line 387
	      apply 'wait_for_port_reply_name'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 388
	  <{'tcp_closed',_cor7}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      %% Line 389
	      'ok'
	after 'infinity' ->
	  'true'
'best_version'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	let <OurLow> =
	    %% Line 394
	    apply 'epmd_dist_low'/0
		()
	in  let <OurHigh> =
		%% Line 395
		apply 'epmd_dist_high'/0
		    ()
	    in  %% Line 396
		apply 'select_best_version'/4
		    (OurLow, OurHigh, _cor1, _cor0)
'select_best_version'/4 =
    %% Line 400
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L1,_X_H1,_X_L2,H2>
	      when call 'erlang':'>'
		    (L1,
		     H2) ->
	      %% Line 401
	      0
	  %% Line 402
	  <_X_L1,H1,L2,_X_H2>
	      when call 'erlang':'>'
		    (L2,
		     H1) ->
	      %% Line 403
	      0
	  %% Line 404
	  <_X_L1,H1,L2,_X_H2>
	      when call 'erlang':'>'
		    (L2,
		     H1) ->
	      %% Line 405
	      0
	  %% Line 406
	  <_X_L1,H1,_X_L2,H2> when 'true' ->
	      %% Line 407
	      call 'erlang':'min'
		  (H1, H2)
	end
'wait_for_close'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	%% Line 410
	receive
	  %% Line 411
	  <{'tcp_closed',_cor4}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      _cor0
	after %% Line 413
	      10000 ->
	  do  %% Line 414
	      call 'gen_tcp':'close'
		  (_cor1)
	      _cor0
'to_string'/1 =
    %% Line 423
    fun (_cor0) ->
	case _cor0 of
	  <S>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (S)
	  %% Line 424
	  <S>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      S
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'get_names'/1 =
    %% Line 430
    fun (_cor0) ->
	%% Line 431
	case apply 'open'/1
		 (_cor0) of
	  %% Line 432
	  <{'ok',Socket}> when 'true' ->
	      %% Line 433
	      apply 'do_get_names'/1
		  (Socket)
	  %% Line 434
	  <_X_Error> when 'true' ->
	      %% Line 435
	      {'error','address'}
	end
'do_get_names'/1 =
    %% Line 438
    fun (_cor0) ->
	%% Line 439
	case call 'gen_tcp':'send'
		 (_cor0, [[0|[1]]|[110]]) of
	  %% Line 440
	  <'ok'> when 'true' ->
	      %% Line 441
	      receive
		%% Line 442
		<{'tcp',_cor13,[P0|[P1|[P2|[P3|T]]]]}>
		    when call 'erlang':'=:='
			  (_cor13,
			   _cor0) ->
		    let <_cor6> =
			%% Line 443
			call 'erlang':'bsl'
			    (P0, 24)
		    in  let <_cor5> =
			    %% Line 443
			    call 'erlang':'bsl'
				(P1, 16)
			in  let <_cor7> =
				%% Line 443
				call 'erlang':'bor'
				    (_cor6, _cor5)
			    in  let <_cor4> =
				    %% Line 443
				    call 'erlang':'bsl'
					(P2, 8)
				in  let <_cor8> =
					%% Line 443
					call 'erlang':'bor'
					    (_cor7, _cor4)
				    in  let <EpmdPort> =
					    %% Line 443
					    call 'erlang':'bor'
						(_cor8, P3)
					in  %% Line 444
					    case apply 'get_epmd_port'/0
						     () of
					      %% Line 445
					      <_cor14>
						  when call 'erlang':'=:='
							(_cor14,
							 EpmdPort) ->
						  %% Line 446
						  apply 'names_loop'/3
						      (_cor0, T, [])
					      %% Line 447
					      <_cor15> when 'true' ->
						  do  %% Line 448
						      apply 'close'/1
							  (_cor0)
						      %% Line 449
						      {'error','address'}
					    end
		%% Line 451
		<{'tcp_closed',_cor16}>
		    when call 'erlang':'=:='
			  (_cor16,
			   _cor0) ->
		    %% Line 452
		    {'ok',[]}
	      after 'infinity' ->
		'true'
	  %% Line 454
	  <_cor17> when 'true' ->
	      do  %% Line 455
		  apply 'close'/1
		      (_cor0)
		  %% Line 456
		  {'error','address'}
	end
'names_loop'/3 =
    %% Line 459
    fun (_cor2,_cor1,_cor0) ->
	%% Line 460
	receive
	  %% Line 461
	  <{'tcp',_cor9,Bytes}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor2) ->
	      let <_cor3> =
		  %% Line 462
		  call 'erlang':'++'
		      (_cor1, Bytes)
	      in  %% Line 462
		  case apply 'scan_names'/2
			   (_cor3, _cor0) of
		    <{NAcc,NPs}> when 'true' ->
			%% Line 463
			apply 'names_loop'/3
			    (_cor2, NAcc, NPs)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 464
	  <{'tcp_closed',_cor10}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor2) ->
	      %% Line 465
	      case apply 'scan_names'/2
		       (_cor1, _cor0) of
		<{_cor11,NPs}> when 'true' ->
		    %% Line 466
		    {'ok',NPs}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	after 'infinity' ->
	  'true'
'scan_names'/2 =
    %% Line 469
    fun (_cor1,_cor0) ->
	%% Line 470
	case apply 'scan_line'/2
		 (_cor1, []) of
	  %% Line 471
	  <{Line,NBuf}> when 'true' ->
	      %% Line 472
	      case apply 'parse_line'/1
		       (Line) of
		%% Line 473
		<{'ok',Entry}> when 'true' ->
		    %% Line 474
		    apply 'scan_names'/2
			(NBuf, [Entry|_cor0])
		%% Line 475
		<'error'> when 'true' ->
		    %% Line 476
		    apply 'scan_names'/2
			(NBuf, _cor0)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 478
	  <[]> when 'true' ->
	      {_cor1,_cor0}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'scan_line'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[10|Buf],Line> when 'true' ->
	      let <_cor2> =
		  call 'lists':'reverse'
		      (Line)
	      in  {_cor2,Buf}
	  %% Line 483
	  <[C|Buf],Line> when 'true' ->
	      apply 'scan_line'/2
		  (Buf, [C|Line])
	  %% Line 484
	  <[],_cor5> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'scan_line',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_line'/1 =
    %% Line 486
    fun (_cor0) ->
	case _cor0 of
	  <[110|[97|[109|[101|[32|Buf0]]]]]> when 'true' ->
	      %% Line 487
	      case apply 'parse_name'/2
		       (Buf0, []) of
		%% Line 488
		<{Name,Buf1}> when 'true' ->
		    %% Line 489
		    case Buf1 of
		      %% Line 490
		      <[97|[116|[32|[112|[111|[114|[116|[32|Buf2]]]]]]]]> when 'true' ->
			  let <_cor1> =
			      catch
				  %% Line 491
				  call 'erlang':'list_to_integer'
				      (Buf2)
			  in  %% Line 491
			      case _cor1 of
				%% Line 492
				<{'EXIT',_cor6}> when 'true' ->
				    'error'
				%% Line 493
				<Port> when 'true' ->
				    {'ok',{Name,Port}}
			      end
		      %% Line 495
		      <_cor7> when 'true' ->
			  'error'
		    end
		%% Line 497
		<'error'> when 'true' ->
		    'error'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 499
	  <_cor8> when 'true' ->
	      'error'
	end
'parse_name'/2 =
    %% Line 502
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[32|Buf],Name> when 'true' ->
	      let <_cor2> =
		  call 'lists':'reverse'
		      (Name)
	      in  {_cor2,Buf}
	  %% Line 503
	  <[C|Buf],Name> when 'true' ->
	      apply 'parse_name'/2
		  (Buf, [C|Name])
	  %% Line 504
	  <[],_X_Name> when 'true' ->
	      'error'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'parse_name',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_epmd')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_epmd', _cor0)
end