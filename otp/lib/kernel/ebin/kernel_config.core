module 'kernel_config' ['code_change'/3,
			'handle_call'/3,
			'handle_cast'/2,
			'handle_info'/2,
			'init'/1,
			'module_info'/0,
			'module_info'/1,
			'send_timeout'/2,
			'start_link'/0,
			'terminate'/2]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'init',1},[{'type',44,'fun',[{'type',44,'product',[{'type',44,'nil',[]}]}|[{'type',44,'union',[{'type',44,'tuple',[{'atom',44,'ok'}|[{'type',44,'nil',[]}]]}|[{'type',44,'tuple',[{'atom',44,'stop'}|[{'type',44,'term',[]}]]}]]}]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'handle_info',2},[{'type',65,'fun',[{'type',65,'product',[{'type',65,'term',[]}|[{'var',65,'State'}]]}|[{'type',65,'tuple',[{'atom',65,'noreply'}|[{'var',65,'State'}]]}]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'terminate',2},[{'type',70,'fun',[{'type',70,'product',[{'type',70,'term',[]}|[{'type',70,'term',[]}]]}|[{'atom',70,'ok'}]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'handle_call',3},[{'type',75,'fun',[{'type',75,'product',[{'type',75,'term',[]}|[{'type',75,'term',[]}|[{'var',75,'State'}]]]}|[{'type',75,'tuple',[{'atom',75,'reply'}|[{'atom',75,'ok'}|[{'var',75,'State'}]]]}]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'handle_cast',2},[{'type',80,'fun',[{'type',80,'product',[{'type',80,'term',[]}|[{'var',80,'State'}]]}|[{'type',80,'tuple',[{'atom',80,'noreply'}|[{'var',80,'State'}]]}]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'code_change',3},[{'type',85,'fun',[{'type',85,'product',[{'type',85,'term',[]}|[{'var',85,'State'}|[{'type',85,'term',[]}]]]}|[{'type',85,'tuple',[{'atom',85,'ok'}|[{'var',85,'State'}]]}]]}]}]]
'start_link'/0 =
    %% Line 38
    fun () ->
	call 'gen_server':'start_link'
	    ('kernel_config', [], [])
'init'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 47
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 48
		  case apply 'sync_nodes'/0
			   () of
		    %% Line 49
		    <'ok'> when 'true' ->
			do  %% Line 50
			    case call 'erlang':'whereis'
				     ('dist_ac') of
			      %% Line 51
			      <DAC>
				  when call 'erlang':'is_pid'
					(DAC) ->
				  let <_cor1> =
				      %% Line 52
				      call 'erlang':'self'
					  ()
				  in  do  %% Line 52
					  call 'erlang':'!'
					      (DAC, {'go',_cor1})
					  %% Line 53
					  receive
					    %% Line 54
					    <'dist_ac_took_control'> when 'true' ->
						'ok'
					  after 'infinity' ->
					    'ok'
			      %% Line 57
			      <_cor5> when 'true' ->
				  'ok'
			    end
			    %% Line 60
			    {'ok',[]}
		    %% Line 61
		    <{'error',Error}> when 'true' ->
			%% Line 62
			{'stop',Error}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	%% Line 68
	{'noreply',_cor0}
'terminate'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	'ok'
'handle_call'/3 =
    %% Line 77
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'__not_used',_X_From,State> when 'true' ->
	      %% Line 78
	      {'reply','ok',State}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'__not_used',State> when 'true' ->
	      %% Line 83
	      {'noreply',State}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 87
    fun (_cor2,_cor1,_cor0) ->
	%% Line 88
	{'ok',_cor1}
'sync_nodes'/0 =
    %% Line 93
    fun () ->
	let <_cor0> =
	    catch
		%% Line 94
		apply 'get_sync_data'/0
		    ()
	in  %% Line 94
	    case _cor0 of
	      %% Line 95
	      <Error = {'error',Reason}> when 'true' ->
		  do  %% Line 96
		      call 'error_logger':'format'
			  ([126|[116|[112]]], [Reason|[]])
		      %% Line 97
		      Error
	      %% Line 98
	      <{'infinity',MandatoryNodes,OptionalNodes}> when 'true' ->
		  %% Line 99
		  case apply 'wait_nodes'/2
			   (MandatoryNodes, OptionalNodes) of
		    %% Line 100
		    <'ok'> when 'true' ->
			%% Line 102
			'ok'
		    %% Line 103
		    <Error> when 'true' ->
			%% Line 104
			Error
		  end
	      %% Line 106
	      <{Timeout,MandatoryNodes,OptionalNodes}> when 'true' ->
		  let <_cor2> =
		      %% Line 107
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 107
			  call 'erlang':'spawn_link'
			      ('kernel_config', 'send_timeout', [Timeout|[_cor2|[]]])
			  %% Line 108
			  case apply 'wait_nodes'/2
				   (MandatoryNodes, OptionalNodes) of
			    %% Line 109
			    <'ok'> when 'true' ->
				%% Line 111
				'ok'
			    %% Line 112
			    <Error> when 'true' ->
				%% Line 113
				Error
			  end
	      %% Line 115
	      <'undefined'> when 'true' ->
		  'ok'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'send_timeout'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	%% Line 119
	receive
	  
	after _cor1 ->
	  %% Line 120
	  call 'erlang':'!'
	      (_cor0, 'timeout')
'wait_nodes'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	%% Line 124
	case call 'net_kernel':'monitor_nodes'
		 ('true') of
	  <'ok'> when 'true' ->
	      let <_cor8> =
		  %% Line 125
		  ( fun (_cor6) ->
			%% Line 126
			case call 'net_adm':'ping'
				 (_cor6) of
			  %% Line 127
			  <'pong'> when 'true' ->
			      let <_cor4> =
				  call 'erlang':'self'
				      ()
			      in  call 'erlang':'!'
				      (_cor4, {'nodeup',_cor6})
			  %% Line 128
			  <_cor13> when 'true' ->
			      'ok'
			end
		    -| [{'id',{0,0,'-wait_nodes/2-fun-0-'}}] )
	      in  let <_cor3> =
		      %% Line 131
		      call 'erlang':'++'
			  (_cor1, _cor0)
		  in  do  %% Line 125
			  call 'lists':'foreach'
			      (_cor8, _cor3)
			  let <R> =
			      %% Line 132
			      apply 'rec_nodes'/2
				  (_cor1, _cor0)
			  in  %% Line 133
			      case call 'net_kernel':'monitor_nodes'
				       ('false') of
				<'ok'> when 'true' ->
				    %% Line 134
				    R
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor10})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'rec_nodes'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      'ok'
	  %% Line 137
	  <Mandatory,Optional> when 'true' ->
	      %% Line 138
	      receive
		%% Line 139
		<{'nodeup',Node}> when 'true' ->
		    apply 'check_up'/3
			(Node, Mandatory, Optional)
		%% Line 140
		<'timeout'>
		    when call 'erlang':'=:='
			  (Mandatory,
			   []) ->
		    'ok'
		%% Line 141
		<'timeout'> when 'true' ->
		    {'error',{'mandatory_nodes_down',Mandatory}}
	      after 'infinity' ->
		'true'
	end
'check_up'/3 =
    %% Line 144
    fun (_cor2,_cor1,_cor0) ->
	%% Line 145
	case call 'lists':'member'
		 (_cor2, _cor1) of
	  %% Line 146
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 147
		  call 'lists':'delete'
		      (_cor2, _cor1)
	      in  %% Line 147
		  apply 'rec_nodes'/2
		      (_cor3, _cor0)
	  %% Line 148
	  <'false'> when 'true' ->
	      %% Line 149
	      case call 'lists':'member'
		       (_cor2, _cor0) of
		%% Line 150
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 151
			call 'lists':'delete'
			    (_cor2, _cor0)
		    in  %% Line 151
			apply 'rec_nodes'/2
			    (_cor1, _cor4)
		%% Line 152
		<'false'> when 'true' ->
		    %% Line 153
		    apply 'rec_nodes'/2
			(_cor1, _cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'get_sync_data'/0 =
    %% Line 161
    fun () ->
	let <Timeout> =
	    %% Line 162
	    apply 'get_sync_timeout'/0
		()
	in  let <MandatoryNodes> =
		%% Line 163
		apply 'get_sync_mandatory_nodes'/0
		    ()
	    in  let <OptionalNodes> =
		    %% Line 164
		    apply 'get_sync_optional_nodes'/0
			()
		in  %% Line 165
		    {Timeout,MandatoryNodes,OptionalNodes}
'get_sync_timeout'/0 =
    %% Line 167
    fun () ->
	%% Line 168
	case call 'application':'get_env'
		 ('sync_nodes_timeout') of
	  %% Line 169
	  <{'ok',Timeout}>
	      when let <_cor0> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor1> =
			call 'erlang':'>'
			    (Timeout, 0)
		    in  call 'erlang':'and'
			    (_cor0, _cor1) ->
	      Timeout
	  %% Line 170
	  <{'ok','infinity'}> when 'true' ->
	      'infinity'
	  %% Line 171
	  <'undefined'> when 'true' ->
	      call 'erlang':'throw'
		  ('undefined')
	  %% Line 172
	  <{'ok',Else}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'badopt',{'sync_nodes_timeout',Else}}})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_sync_mandatory_nodes'/0 =
    %% Line 175
    fun () ->
	%% Line 176
	case call 'application':'get_env'
		 ('sync_nodes_mandatory') of
	  %% Line 177
	  <{'ok',Nodes}>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      Nodes
	  %% Line 178
	  <'undefined'> when 'true' ->
	      []
	  %% Line 179
	  <{'ok',Else}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'badopt',{'sync_nodes_mandatory',Else}}})
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'get_sync_optional_nodes'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	case call 'application':'get_env'
		 ('sync_nodes_optional') of
	  %% Line 184
	  <{'ok',Nodes}>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      Nodes
	  %% Line 185
	  <'undefined'> when 'true' ->
	      []
	  %% Line 186
	  <{'ok',Else}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'badopt',{'sync_nodes_optional',Else}}})
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('kernel_config')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('kernel_config', _cor0)
end