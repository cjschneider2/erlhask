module 'disk_log' ['accessible_logs'/0,
		   'alog'/2,
		   'alog_terms'/2,
		   'balog'/2,
		   'balog_terms'/2,
		   'bchunk'/2,
		   'bchunk'/3,
		   'block'/1,
		   'block'/2,
		   'blog'/2,
		   'blog_terms'/2,
		   'breopen'/3,
		   'btruncate'/2,
		   'change_header'/2,
		   'change_notify'/3,
		   'change_size'/2,
		   'chunk'/2,
		   'chunk'/3,
		   'chunk_info'/1,
		   'chunk_step'/3,
		   'close'/1,
		   'do_info'/2,
		   'do_log'/2,
		   'do_sync'/1,
		   'format_error'/1,
		   'ichunk_end'/2,
		   'inc_wrap_file'/1,
		   'info'/1,
		   'init'/2,
		   'internal_open'/2,
		   'istart_link'/1,
		   'lclose'/1,
		   'lclose'/2,
		   'll_close'/1,
		   'll_open'/1,
		   'log'/2,
		   'log_terms'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/1,
		   'pid2name'/1,
		   'reopen'/2,
		   'reopen'/3,
		   'start'/0,
		   'sync'/1,
		   'system_code_change'/4,
		   'system_continue'/3,
		   'system_terminate'/4,
		   'truncate'/1,
		   'truncate'/2,
		   'unblock'/1]
    attributes [%% Line 47
		'export_type' =
		    %% Line 47
		    [{'continuation',0}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'dlog_state_error',{'type',49,'union',[{'atom',49,'ok'}|[{'type',49,'tuple',[{'atom',49,'error'}|[{'type',49,'term',[]}]]}]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','state'},[{'record_field',51,{'atom',51,'queue'},{'nil',51}}|[{'record_field',52,{'atom',52,'messages'},{'nil',52}}|[{'record_field',53,{'atom',53,'parent'}}|[{'record_field',54,{'atom',54,'server'}}|[{'typed_record_field',{'record_field',55,{'atom',55,'cnt'},{'integer',55,0}},{'type',55,'non_neg_integer',[]}}|[{'record_field',56,{'atom',56,'args'}}|[{'typed_record_field',{'record_field',57,{'atom',57,'error_status'},{'atom',57,'ok'}},{'type',57,'dlog_state_error',[]}}|[{'record_field',58,{'atom',58,'cache_error'},{'atom',58,'ok'}}]]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dlog_byte',{'type',56,'union',[{'type',56,'list',[{'type',56,'dlog_byte',[]}]}|[{'type',56,'byte',[]}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'dlog_format',{'type',57,'union',[{'atom',57,'external'}|[{'atom',57,'internal'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'dlog_format_type',{'type',58,'union',[{'atom',58,'halt_ext'}|[{'atom',58,'halt_int'}|[{'atom',58,'wrap_ext'}|[{'atom',58,'wrap_int'}]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'dlog_head',{'type',59,'union',[{'atom',59,'none'}|[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'binary',[]}]]}|[{'type',59,'mfa',[]}]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'dlog_head_opt',{'type',60,'union',[{'atom',60,'none'}|[{'type',60,'term',[]}|[{'type',60,'binary',[]}|[{'type',60,'list',[{'type',60,'dlog_byte',[]}]}]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'log',{'type',61,'term',[]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'dlog_mode',{'type',62,'union',[{'atom',62,'read_only'}|[{'atom',62,'read_write'}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'dlog_name',{'type',63,'union',[{'type',63,'atom',[]}|[{'type',63,'string',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'dlog_optattr',{'type',64,'union',[{'atom',64,'name'}|[{'atom',64,'file'}|[{'atom',64,'linkto'}|[{'atom',64,'repair'}|[{'atom',64,'type'}|[{'atom',65,'format'}|[{'atom',65,'size'}|[{'atom',65,'distributed'}|[{'atom',65,'notify'}|[{'atom',66,'head'}|[{'atom',66,'head_func'}|[{'atom',66,'mode'}]]]]]]]]]]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'dlog_option',{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'name'}|[{'ann_type',67,[{'var',67,'Log'}|[{'type',67,'log',[]}]]}]]}|[{'type',68,'tuple',[{'atom',68,'file'}|[{'ann_type',68,[{'var',68,'FileName'}|[{'remote_type',68,[{'atom',68,'file'}|[{'atom',68,'filename'}|[[]]]]}]]}]]}|[{'type',69,'tuple',[{'atom',69,'linkto'}|[{'ann_type',69,[{'var',69,'LinkTo'}|[{'type',69,'union',[{'atom',69,'none'}|[{'type',69,'pid',[]}]]}]]}]]}|[{'type',70,'tuple',[{'atom',70,'repair'}|[{'ann_type',70,[{'var',70,'Repair'}|[{'type',70,'union',[{'atom',70,'true'}|[{'atom',70,'false'}|[{'atom',70,'truncate'}]]]}]]}]]}|[{'type',71,'tuple',[{'atom',71,'type'}|[{'ann_type',71,[{'var',71,'Type'}|[{'atom',71,'dlog_type'}]]}]]}|[{'type',72,'tuple',[{'atom',72,'format'}|[{'ann_type',72,[{'var',72,'Format'}|[{'type',72,'dlog_format',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'size'}|[{'ann_type',73,[{'var',73,'Size'}|[{'type',73,'dlog_size',[]}]]}]]}|[{'type',74,'tuple',[{'atom',74,'distributed'}|[{'ann_type',74,[{'var',74,'Nodes'}|[{'type',74,'list',[{'type',74,'node',[]}]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'notify'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'head'}|[{'ann_type',76,[{'var',76,'Head'}|[{'type',76,'dlog_head_opt',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'head_func'}|[{'ann_type',77,[{'var',77,'MFA'}|[{'type',77,'tuple',[{'type',77,'atom',[]}|[{'type',77,'atom',[]}|[{'type',77,'list',[]}]]]}]]}]]}|[{'type',78,'tuple',[{'atom',78,'mode'}|[{'ann_type',78,[{'var',78,'Mode'}|[{'type',78,'dlog_mode',[]}]]}]]}]]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'dlog_options',{'type',79,'list',[{'type',79,'dlog_option',[]}]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'dlog_repair',{'type',80,'union',[{'atom',80,'truncate'}|[{'type',80,'boolean',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'dlog_size',{'type',81,'union',[{'atom',81,'infinity'}|[{'type',81,'pos_integer',[]}|[{'type',82,'tuple',[{'ann_type',82,[{'var',82,'MaxNoBytes'}|[{'type',82,'pos_integer',[]}]]}|[{'ann_type',83,[{'var',83,'MaxNoFiles'}|[{'type',83,'pos_integer',[]}]]}]]}]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dlog_status',{'type',84,'union',[{'atom',84,'ok'}|[{'type',84,'tuple',[{'atom',84,'blocked'}|[{'type',84,'union',[{'atom',84,'false'}|[{'type',84,'list',[{'var',84,'_'}]}]]}]]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'dlog_type',{'type',85,'union',[{'atom',85,'halt'}|[{'atom',85,'wrap'}]]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','arg'},[{'record_field',92,{'atom',92,'name'},{'integer',92,0}}|[{'record_field',93,{'atom',93,'version'},{'atom',93,'undefined'}}|[{'typed_record_field',{'record_field',94,{'atom',94,'file'},{'atom',94,'none'}},{'type',94,'union',[{'atom',94,'none'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'repair'},{'atom',95,'true'}},{'type',95,'dlog_repair',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'size'},{'atom',96,'infinity'}},{'type',96,'dlog_size',[]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'type'},{'atom',97,'halt'}},{'type',97,'dlog_type',[]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'distributed'},{'atom',98,'false'}},{'type',98,'union',[{'atom',98,'false'}|[{'type',98,'tuple',[{'atom',98,'true'}|[{'type',98,'list',[{'type',98,'node',[]}]}]]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'format'},{'atom',99,'internal'}},{'type',99,'dlog_format',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'linkto'},{'call',100,{'atom',100,'self'},[]}},{'type',100,'union',[{'atom',100,'none'}|[{'type',100,'pid',[]}]]}}|[{'record_field',101,{'atom',101,'head'},{'atom',101,'none'}}|[{'typed_record_field',{'record_field',102,{'atom',102,'mode'},{'atom',102,'read_write'}},{'type',102,'dlog_mode',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'notify'},{'atom',103,'false'}},{'type',103,'boolean',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'options'},{'nil',104}},{'type',104,'dlog_options',[]}}]]]]]]]]]]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','cache'},[{'typed_record_field',{'record_field',107,{'atom',107,'fd'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'fd'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'sz'},{'integer',108,0}},{'type',108,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'c'},{'nil',109}},{'type',109,'iodata',[]}}]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','halt'},[{'typed_record_field',{'record_field',113,{'atom',113,'fdc'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'record',[{'atom',113,'cache'}]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'curB'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'size'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'dlog_size',[]}]]}}]]],[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{{'record','handle'},[{'typed_record_field',{'record_field',119,{'atom',119,'filename'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'maxB'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'maxF'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'pos_integer',[]}|[{'type',121,'tuple',[{'type',121,'pos_integer',[]}|[{'type',121,'pos_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'curB'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'curF'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'integer',[]}]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'cur_fdc'}},{'type',131,'union',[{'atom',131,'undefined'}|[{'type',131,'record',[{'atom',131,'cache'}]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'cur_name'}},{'type',132,'union',[{'atom',132,'undefined'}|[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'cur_cnt'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'acc_cnt'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'firstPos'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'noFull'}},{'type',139,'union',[{'atom',139,'undefined'}|[{'type',139,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'accFull'}},{'type',143,'union',[{'atom',143,'undefined'}|[{'type',143,'non_neg_integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','log'},[{'typed_record_field',{'record_field',148,{'atom',148,'status'},{'atom',148,'ok'}},{'type',148,'dlog_status',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'name'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'dlog_name',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'blocked_by'},{'atom',150,'none'}},{'type',150,'union',[{'atom',150,'none'}|[{'type',150,'pid',[]}]]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'users'},{'integer',151,0}},{'type',151,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'filename'}},{'type',152,'union',[{'atom',152,'undefined'}|[{'remote_type',152,[{'atom',152,'file'}|[{'atom',152,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'owners'},{'nil',153}},{'type',153,'list',[{'type',153,'tuple',[{'type',153,'pid',[]}|[{'type',153,'boolean',[]}]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'type'},{'atom',154,'halt'}},{'type',154,'dlog_type',[]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'format'},{'atom',155,'internal'}},{'type',155,'dlog_format',[]}}|[{'typed_record_field',{'record_field',156,{'atom',156,'format_type'}},{'type',156,'union',[{'atom',156,'undefined'}|[{'type',156,'dlog_format_type',[]}]]}}|[{'record_field',157,{'atom',157,'head'},{'atom',157,'none'}}|[{'typed_record_field',{'record_field',159,{'atom',159,'mode'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'dlog_mode',[]}]]}}|[{'record_field',160,{'atom',160,'size'}}|[{'typed_record_field',{'record_field',161,{'atom',161,'extra'}},{'type',161,'union',[{'atom',161,'undefined'}|[{'type',161,'record',[{'atom',161,'halt'}]}|[{'type',161,'record',[{'atom',161,'handle'}]}]]]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'version'}},{'type',162,'union',[{'atom',162,'undefined'}|[{'type',162,'integer',[]}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{{'record','continuation'},[{'typed_record_field',{'record_field',166,{'atom',166,'pid'},{'call',166,{'atom',166,'self'},[]}},{'type',166,'pid',[]}}|[{'typed_record_field',{'record_field',167,{'atom',167,'pos'}},{'type',167,'union',[{'atom',167,'undefined'}|[{'type',167,'non_neg_integer',[]}|[{'type',167,'tuple',[{'type',167,'integer',[]}|[{'type',167,'non_neg_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',168,{'atom',168,'b'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'binary',[]}|[{'type',168,'nil',[]}|[{'type',168,'pos_integer',[]}]]]]}}]]],[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'dlog_cont',{'type',171,'union',[{'atom',171,'start'}|[{'type',171,'record',[{'atom',171,'continuation'}]}]]},[]}],
		%% Line 75
		'opaque' =
		    %% Line 75
		    [{'continuation',{'type',75,'record',[{'atom',75,'continuation'}]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'bytes',{'type',77,'union',[{'type',77,'binary',[]}|[{'type',77,'list',[{'type',77,'byte',[]}]}]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'file_error',{'type',79,'term',[]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'invalid_header',{'type',80,'term',[]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'open_error_rsn',{'type',91,'union',[{'atom',91,'no_such_log'}|[{'type',92,'tuple',[{'atom',92,'badarg'}|[{'type',92,'term',[]}]]}|[{'type',93,'tuple',[{'atom',93,'size_mismatch'}|[{'ann_type',93,[{'var',93,'CurrentSize'}|[{'type',93,'dlog_size',[]}]]}|[{'ann_type',94,[{'var',94,'NewSize'}|[{'type',94,'dlog_size',[]}]]}]]]}|[{'type',95,'tuple',[{'atom',95,'arg_mismatch'}|[{'ann_type',95,[{'var',95,'OptionName'}|[{'type',95,'dlog_optattr',[]}]]}|[{'ann_type',96,[{'var',96,'CurrentValue'}|[{'type',96,'term',[]}]]}|[{'ann_type',96,[{'var',96,'Value'}|[{'type',96,'term',[]}]]}]]]]}|[{'type',97,'tuple',[{'atom',97,'name_already_open'}|[{'ann_type',97,[{'var',97,'Log'}|[{'type',97,'log',[]}]]}]]}|[{'type',98,'tuple',[{'atom',98,'open_read_write'}|[{'ann_type',98,[{'var',98,'Log'}|[{'type',98,'log',[]}]]}]]}|[{'type',99,'tuple',[{'atom',99,'open_read_only'}|[{'ann_type',99,[{'var',99,'Log'}|[{'type',99,'log',[]}]]}]]}|[{'type',100,'tuple',[{'atom',100,'need_repair'}|[{'ann_type',100,[{'var',100,'Log'}|[{'type',100,'log',[]}]]}]]}|[{'type',101,'tuple',[{'atom',101,'not_a_log_file'}|[{'ann_type',101,[{'var',101,'FileName'}|[{'remote_type',101,[{'atom',101,'file'}|[{'atom',101,'filename'}|[[]]]]}]]}]]}|[{'type',102,'tuple',[{'atom',102,'invalid_index_file'}|[{'ann_type',102,[{'var',102,'FileName'}|[{'remote_type',102,[{'atom',102,'file'}|[{'atom',102,'filename'}|[[]]]]}]]}]]}|[{'type',103,'tuple',[{'atom',103,'invalid_header'}|[{'type',103,'invalid_header',[]}]]}|[{'type',104,'tuple',[{'atom',104,'file_error'}|[{'remote_type',104,[{'atom',104,'file'}|[{'atom',104,'filename'}|[[]]]]}|[{'type',104,'file_error',[]}]]]}|[{'type',105,'tuple',[{'atom',105,'node_already_open'}|[{'ann_type',105,[{'var',105,'Log'}|[{'type',105,'log',[]}]]}]]}]]]]]]]]]]]]]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'dist_error_rsn',{'type',106,'union',[{'atom',106,'nodedown'}|[{'type',106,'open_error_rsn',[]}]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'ret',{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'ok'}|[{'ann_type',107,[{'var',107,'Log'}|[{'type',107,'log',[]}]]}]]}|[{'type',108,'tuple',[{'atom',108,'repaired'}|[{'ann_type',108,[{'var',108,'Log'}|[{'type',108,'log',[]}]]}|[{'type',109,'tuple',[{'atom',109,'recovered'}|[{'ann_type',109,[{'var',109,'Rec'}|[{'type',109,'non_neg_integer',[]}]]}]]}|[{'type',110,'tuple',[{'atom',110,'badbytes'}|[{'ann_type',110,[{'var',110,'Bad'}|[{'type',110,'non_neg_integer',[]}]]}]]}]]]]}]]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{'open_ret',{'type',111,'union',[{'type',111,'ret',[]}|[{'type',111,'tuple',[{'atom',111,'error'}|[{'type',111,'open_error_rsn',[]}]]}]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'dist_open_ret',{'type',112,'tuple',[{'type',112,'list',[{'type',112,'tuple',[{'type',112,'node',[]}|[{'type',112,'ret',[]}]]}]}|[{'type',113,'list',[{'type',113,'tuple',[{'type',113,'node',[]}|[{'type',113,'tuple',[{'atom',113,'error'}|[{'type',113,'dist_error_rsn',[]}]]}]]}]}]]},[]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'open',1},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'ArgL'}]}|[{'type',115,'union',[{'type',115,'open_ret',[]}|[{'type',115,'dist_open_ret',[]}]]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'ArgL'}|[{'type',116,'dlog_options',[]}]]]]}]]]}]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{'log_error_rsn',{'type',120,'union',[{'atom',120,'no_such_log'}|[{'atom',120,'nonode'}|[{'type',120,'tuple',[{'atom',120,'read_only_mode'}|[{'type',120,'log',[]}]]}|[{'type',121,'tuple',[{'atom',121,'format_external'}|[{'type',121,'log',[]}]]}|[{'type',121,'tuple',[{'atom',121,'blocked_log'}|[{'type',121,'log',[]}]]}|[{'type',122,'tuple',[{'atom',122,'full'}|[{'type',122,'log',[]}]]}|[{'type',122,'tuple',[{'atom',122,'invalid_header'}|[{'type',122,'invalid_header',[]}]]}|[{'type',123,'tuple',[{'atom',123,'file_error'}|[{'remote_type',123,[{'atom',123,'file'}|[{'atom',123,'filename'}|[[]]]]}|[{'type',123,'file_error',[]}]]]}]]]]]]]]},[]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'log',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Log'}|[{'var',125,'Term'}]]}|[{'type',125,'union',[{'atom',125,'ok'}|[{'type',125,'tuple',[{'atom',125,'error'}|[{'ann_type',125,[{'var',125,'Reason'}|[{'type',125,'log_error_rsn',[]}]]}]]}]]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Log'}|[{'type',126,'log',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Term'}|[{'type',127,'term',[]}]]]]}]]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'blog',2},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'Log'}|[{'var',131,'Bytes'}]]}|[{'type',131,'union',[{'atom',131,'ok'}|[{'type',131,'tuple',[{'atom',131,'error'}|[{'ann_type',131,[{'var',131,'Reason'}|[{'type',131,'log_error_rsn',[]}]]}]]}]]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Log'}|[{'type',132,'log',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Bytes'}|[{'type',133,'bytes',[]}]]]]}]]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'log_terms',2},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'Log'}|[{'var',137,'TermList'}]]}|[{'type',137,'union',[{'atom',137,'ok'}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'ann_type',137,[{'var',137,'Resaon'}|[{'type',137,'log_error_rsn',[]}]]}]]}]]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Log'}|[{'type',138,'log',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'TermList'}|[{'type',139,'list',[{'type',139,'term',[]}]}]]]]}]]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'blog_terms',2},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'Log'}|[{'var',144,'BytesList'}]]}|[{'type',145,'union',[{'atom',145,'ok'}|[{'type',145,'tuple',[{'atom',145,'error'}|[{'ann_type',145,[{'var',145,'Reason'}|[{'type',145,'log_error_rsn',[]}]]}]]}]]}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Log'}|[{'type',146,'log',[]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'BytesList'}|[{'type',147,'list',[{'type',147,'bytes',[]}]}]]]]}]]]]}]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'notify_ret',{'type',152,'union',[{'atom',152,'ok'}|[{'type',152,'tuple',[{'atom',152,'error'}|[{'atom',152,'no_such_log'}]]}]]},[]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'alog',2},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'Log'}|[{'var',154,'Term'}]]}|[{'type',154,'notify_ret',[]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Log'}|[{'type',155,'log',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Term'}|[{'type',156,'term',[]}]]]]}]]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'alog_terms',2},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Log'}|[{'var',160,'TermList'}]]}|[{'type',160,'notify_ret',[]}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Log'}|[{'type',161,'log',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'TermList'}|[{'type',162,'list',[{'type',162,'term',[]}]}]]]]}]]]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'balog',2},[{'type',167,'bounded_fun',[{'type',167,'fun',[{'type',167,'product',[{'var',167,'Log'}|[{'var',167,'Bytes'}]]}|[{'type',167,'notify_ret',[]}]]}|[[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Log'}|[{'type',168,'log',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Bytes'}|[{'type',169,'bytes',[]}]]]]}]]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'balog_terms',2},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'Log'}|[{'var',173,'ByteList'}]]}|[{'type',173,'notify_ret',[]}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Log'}|[{'type',174,'log',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'ByteList'}|[{'type',175,'list',[{'type',175,'bytes',[]}]}]]]]}]]]]}]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'close_error_rsn',{'type',180,'union',[{'atom',180,'no_such_log'}|[{'atom',180,'nonode'}|[{'type',181,'tuple',[{'atom',181,'file_error'}|[{'remote_type',181,[{'atom',181,'file'}|[{'atom',181,'filename'}|[[]]]]}|[{'type',181,'file_error',[]}]]]}]]]},[]}],
		%% Line 183
		'spec' =
		    %% Line 183
		    [{{'close',1},[{'type',183,'bounded_fun',[{'type',183,'fun',[{'type',183,'product',[{'var',183,'Log'}]}|[{'type',183,'union',[{'atom',183,'ok'}|[{'type',183,'tuple',[{'atom',183,'error'}|[{'type',183,'close_error_rsn',[]}]]}]]}]]}|[[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Log'}|[{'type',184,'log',[]}]]]]}]]]}]}],
		%% Line 188
		'type' =
		    %% Line 188
		    [{'lclose_error_rsn',{'type',188,'union',[{'atom',188,'no_such_log'}|[{'type',189,'tuple',[{'atom',189,'file_error'}|[{'remote_type',189,[{'atom',189,'file'}|[{'atom',189,'filename'}|[[]]]]}|[{'type',189,'file_error',[]}]]]}]]},[]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'lclose',1},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'Log'}]}|[{'type',191,'union',[{'atom',191,'ok'}|[{'type',191,'tuple',[{'atom',191,'error'}|[{'type',191,'lclose_error_rsn',[]}]]}]]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Log'}|[{'type',192,'log',[]}]]]]}]]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'lclose',2},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'Log'}|[{'var',196,'Node'}]]}|[{'type',196,'union',[{'atom',196,'ok'}|[{'type',196,'tuple',[{'atom',196,'error'}|[{'type',196,'lclose_error_rsn',[]}]]}]]}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Log'}|[{'type',197,'log',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Node'}|[{'type',198,'node',[]}]]]]}]]]]}]}],
		%% Line 202
		'type' =
		    %% Line 202
		    [{'trunc_error_rsn',{'type',202,'union',[{'atom',202,'no_such_log'}|[{'atom',202,'nonode'}|[{'type',203,'tuple',[{'atom',203,'read_only_mode'}|[{'type',203,'log',[]}]]}|[{'type',204,'tuple',[{'atom',204,'blocked_log'}|[{'type',204,'log',[]}]]}|[{'type',205,'tuple',[{'atom',205,'invalid_header'}|[{'type',205,'invalid_header',[]}]]}|[{'type',206,'tuple',[{'atom',206,'file_error'}|[{'remote_type',206,[{'atom',206,'file'}|[{'atom',206,'filename'}|[[]]]]}|[{'type',206,'file_error',[]}]]]}]]]]]]},[]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'truncate',1},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'Log'}]}|[{'type',208,'union',[{'atom',208,'ok'}|[{'type',208,'tuple',[{'atom',208,'error'}|[{'type',208,'trunc_error_rsn',[]}]]}]]}]]}|[[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Log'}|[{'type',209,'log',[]}]]]]}]]]}]}],
		%% Line 213
		'spec' =
		    %% Line 213
		    [{{'truncate',2},[{'type',213,'bounded_fun',[{'type',213,'fun',[{'type',213,'product',[{'var',213,'Log'}|[{'var',213,'Head'}]]}|[{'type',213,'union',[{'atom',213,'ok'}|[{'type',213,'tuple',[{'atom',213,'error'}|[{'type',213,'trunc_error_rsn',[]}]]}]]}]]}|[[{'type',214,'constraint',[{'atom',214,'is_subtype'}|[[{'var',214,'Log'}|[{'type',214,'log',[]}]]]]}|[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Head'}|[{'type',215,'term',[]}]]]]}]]]]}]}],
		%% Line 219
		'spec' =
		    %% Line 219
		    [{{'btruncate',2},[{'type',219,'bounded_fun',[{'type',219,'fun',[{'type',219,'product',[{'var',219,'Log'}|[{'var',219,'BHead'}]]}|[{'type',219,'union',[{'atom',219,'ok'}|[{'type',219,'tuple',[{'atom',219,'error'}|[{'type',219,'trunc_error_rsn',[]}]]}]]}]]}|[[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Log'}|[{'type',220,'log',[]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'BHead'}|[{'type',221,'bytes',[]}]]]]}]]]]}]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'reopen_error_rsn',{'type',225,'union',[{'atom',225,'no_such_log'}|[{'atom',226,'nonode'}|[{'type',227,'tuple',[{'atom',227,'read_only_mode'}|[{'type',227,'log',[]}]]}|[{'type',228,'tuple',[{'atom',228,'blocked_log'}|[{'type',228,'log',[]}]]}|[{'type',229,'tuple',[{'atom',229,'same_file_name'}|[{'type',229,'log',[]}]]}|[{'type',230,'tuple',[{'atom',230,'invalid_index_file'}|[{'remote_type',230,[{'atom',230,'file'}|[{'atom',230,'filename'}|[[]]]]}]]}|[{'type',231,'tuple',[{'atom',231,'invalid_header'}|[{'type',231,'invalid_header',[]}]]}|[{'type',232,'tuple',[{'atom',232,'file_error'}|[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'filename'}|[[]]]]}|[{'type',232,'file_error',[]}]]]}]]]]]]]]},[]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'reopen',2},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'Log'}|[{'var',234,'File'}]]}|[{'type',234,'union',[{'atom',234,'ok'}|[{'type',234,'tuple',[{'atom',234,'error'}|[{'type',234,'reopen_error_rsn',[]}]]}]]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Log'}|[{'type',235,'log',[]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'File'}|[{'remote_type',236,[{'atom',236,'file'}|[{'atom',236,'filename'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 240
		'spec' =
		    %% Line 240
		    [{{'reopen',3},[{'type',240,'bounded_fun',[{'type',240,'fun',[{'type',240,'product',[{'var',240,'Log'}|[{'var',240,'File'}|[{'var',240,'Head'}]]]}|[{'type',240,'union',[{'atom',240,'ok'}|[{'type',240,'tuple',[{'atom',240,'error'}|[{'type',240,'reopen_error_rsn',[]}]]}]]}]]}|[[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Log'}|[{'type',241,'log',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'File'}|[{'remote_type',242,[{'atom',242,'file'}|[{'atom',242,'filename'}|[[]]]]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Head'}|[{'type',243,'term',[]}]]]]}]]]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'breopen',3},[{'type',247,'bounded_fun',[{'type',247,'fun',[{'type',247,'product',[{'var',247,'Log'}|[{'var',247,'File'}|[{'var',247,'BHead'}]]]}|[{'type',247,'union',[{'atom',247,'ok'}|[{'type',247,'tuple',[{'atom',247,'error'}|[{'type',247,'reopen_error_rsn',[]}]]}]]}]]}|[[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Log'}|[{'type',248,'log',[]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'File'}|[{'remote_type',249,[{'atom',249,'file'}|[{'atom',249,'filename'}|[[]]]]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'BHead'}|[{'type',250,'bytes',[]}]]]]}]]]]]}]}],
		%% Line 254
		'type' =
		    %% Line 254
		    [{'inc_wrap_error_rsn',{'type',254,'union',[{'atom',254,'no_such_log'}|[{'atom',254,'nonode'}|[{'type',255,'tuple',[{'atom',255,'read_only_mode'}|[{'type',255,'log',[]}]]}|[{'type',256,'tuple',[{'atom',256,'blocked_log'}|[{'type',256,'log',[]}]]}|[{'type',256,'tuple',[{'atom',256,'halt_log'}|[{'type',256,'log',[]}]]}|[{'type',257,'tuple',[{'atom',257,'invalid_header'}|[{'type',257,'invalid_header',[]}]]}|[{'type',258,'tuple',[{'atom',258,'file_error'}|[{'remote_type',258,[{'atom',258,'file'}|[{'atom',258,'filename'}|[[]]]]}|[{'type',258,'file_error',[]}]]]}]]]]]]]},[]}],
		%% Line 260
		'spec' =
		    %% Line 260
		    [{{'inc_wrap_file',1},[{'type',260,'bounded_fun',[{'type',260,'fun',[{'type',260,'product',[{'var',260,'Log'}]}|[{'type',260,'union',[{'atom',260,'ok'}|[{'type',260,'tuple',[{'atom',260,'error'}|[{'type',260,'inc_wrap_error_rsn',[]}]]}]]}]]}|[[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Log'}|[{'type',261,'log',[]}]]]]}]]]}]}],
		%% Line 265
		'spec' =
		    %% Line 265
		    [{{'change_size',2},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'Log'}|[{'var',265,'Size'}]]}|[{'type',265,'union',[{'atom',265,'ok'}|[{'type',265,'tuple',[{'atom',265,'error'}|[{'var',265,'Reason'}]]}]]}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Log'}|[{'type',266,'log',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Size'}|[{'type',267,'dlog_size',[]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Reason'}|[{'type',268,'union',[{'atom',268,'no_such_log'}|[{'atom',268,'nonode'}|[{'type',268,'tuple',[{'atom',268,'read_only_mode'}|[{'var',268,'Log'}]]}|[{'type',269,'tuple',[{'atom',269,'blocked_log'}|[{'var',269,'Log'}]]}|[{'type',270,'tuple',[{'atom',270,'new_size_too_small'}|[{'ann_type',270,[{'var',270,'CurrentSize'}|[{'type',270,'pos_integer',[]}]]}]]}|[{'type',271,'tuple',[{'atom',271,'badarg'}|[{'atom',271,'size'}]]}|[{'type',272,'tuple',[{'atom',272,'file_error'}|[{'remote_type',272,[{'atom',272,'file'}|[{'atom',272,'filename'}|[[]]]]}|[{'type',272,'file_error',[]}]]]}]]]]]]]}]]]]}]]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'change_notify',3},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'Log'}|[{'var',276,'Owner'}|[{'var',276,'Notify'}]]]}|[{'type',276,'union',[{'atom',276,'ok'}|[{'type',276,'tuple',[{'atom',276,'error'}|[{'var',276,'Reason'}]]}]]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Log'}|[{'type',277,'log',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Owner'}|[{'type',278,'pid',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Notify'}|[{'type',279,'boolean',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Reason'}|[{'type',280,'union',[{'atom',280,'no_such_log'}|[{'atom',280,'nonode'}|[{'type',280,'tuple',[{'atom',280,'blocked_log'}|[{'var',280,'Log'}]]}|[{'type',281,'tuple',[{'atom',281,'badarg'}|[{'atom',281,'notify'}]]}|[{'type',281,'tuple',[{'atom',281,'not_owner'}|[{'var',281,'Owner'}]]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'change_header',2},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'Log'}|[{'var',285,'Header'}]]}|[{'type',285,'union',[{'atom',285,'ok'}|[{'type',285,'tuple',[{'atom',285,'error'}|[{'var',285,'Reason'}]]}]]}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Log'}|[{'type',286,'log',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Header'}|[{'type',287,'union',[{'type',287,'tuple',[{'atom',287,'head'}|[{'type',287,'dlog_head_opt',[]}]]}|[{'type',288,'tuple',[{'atom',288,'head_func'}|[{'ann_type',288,[{'var',288,'MFA'}|[{'type',288,'tuple',[{'type',288,'atom',[]}|[{'type',288,'atom',[]}|[{'type',288,'list',[]}]]]}]]}]]}]]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Reason'}|[{'type',289,'union',[{'atom',289,'no_such_log'}|[{'atom',289,'nonode'}|[{'type',289,'tuple',[{'atom',289,'read_only_mode'}|[{'var',289,'Log'}]]}|[{'type',290,'tuple',[{'atom',290,'blocked_log'}|[{'var',290,'Log'}]]}|[{'type',290,'tuple',[{'atom',290,'badarg'}|[{'atom',290,'head'}]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'sync_error_rsn',{'type',294,'union',[{'atom',294,'no_such_log'}|[{'atom',294,'nonode'}|[{'type',294,'tuple',[{'atom',294,'read_only_mode'}|[{'type',294,'log',[]}]]}|[{'type',295,'tuple',[{'atom',295,'blocked_log'}|[{'type',295,'log',[]}]]}|[{'type',296,'tuple',[{'atom',296,'file_error'}|[{'remote_type',296,[{'atom',296,'file'}|[{'atom',296,'filename'}|[[]]]]}|[{'type',296,'file_error',[]}]]]}]]]]]},[]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'sync',1},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'var',298,'Log'}]}|[{'type',298,'union',[{'atom',298,'ok'}|[{'type',298,'tuple',[{'atom',298,'error'}|[{'type',298,'sync_error_rsn',[]}]]}]]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Log'}|[{'type',299,'log',[]}]]]]}]]]}]}],
		%% Line 303
		'type' =
		    %% Line 303
		    [{'block_error_rsn',{'type',303,'union',[{'atom',303,'no_such_log'}|[{'atom',303,'nonode'}|[{'type',303,'tuple',[{'atom',303,'blocked_log'}|[{'type',303,'log',[]}]]}]]]},[]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'block',1},[{'type',305,'bounded_fun',[{'type',305,'fun',[{'type',305,'product',[{'var',305,'Log'}]}|[{'type',305,'union',[{'atom',305,'ok'}|[{'type',305,'tuple',[{'atom',305,'error'}|[{'type',305,'block_error_rsn',[]}]]}]]}]]}|[[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Log'}|[{'type',306,'log',[]}]]]]}]]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'block',2},[{'type',310,'bounded_fun',[{'type',310,'fun',[{'type',310,'product',[{'var',310,'Log'}|[{'var',310,'QueueLogRecords'}]]}|[{'type',310,'union',[{'atom',310,'ok'}|[{'type',310,'tuple',[{'atom',310,'error'}|[{'type',310,'block_error_rsn',[]}]]}]]}]]}|[[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Log'}|[{'type',311,'log',[]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'QueueLogRecords'}|[{'type',312,'boolean',[]}]]]]}]]]]}]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'unblock_error_rsn',{'type',316,'union',[{'atom',316,'no_such_log'}|[{'atom',316,'nonode'}|[{'type',317,'tuple',[{'atom',317,'not_blocked'}|[{'type',317,'log',[]}]]}|[{'type',318,'tuple',[{'atom',318,'not_blocked_by_pid'}|[{'type',318,'log',[]}]]}]]]]},[]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'unblock',1},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'Log'}]}|[{'type',320,'union',[{'atom',320,'ok'}|[{'type',320,'tuple',[{'atom',320,'error'}|[{'type',320,'unblock_error_rsn',[]}]]}]]}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Log'}|[{'type',321,'log',[]}]]]]}]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'format_error',1},[{'type',325,'bounded_fun',[{'type',325,'fun',[{'type',325,'product',[{'var',325,'Error'}]}|[{'remote_type',325,[{'atom',325,'io_lib'}|[{'atom',325,'chars'}|[[]]]]}]]}|[[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Error'}|[{'type',326,'term',[]}]]]]}]]]}]}],
		%% Line 330
		'type' =
		    %% Line 330
		    [{'dlog_info',{'type',330,'union',[{'type',330,'tuple',[{'atom',330,'name'}|[{'ann_type',330,[{'var',330,'Log'}|[{'type',330,'log',[]}]]}]]}|[{'type',331,'tuple',[{'atom',331,'file'}|[{'ann_type',331,[{'var',331,'File'}|[{'remote_type',331,[{'atom',331,'file'}|[{'atom',331,'filename'}|[[]]]]}]]}]]}|[{'type',332,'tuple',[{'atom',332,'type'}|[{'ann_type',332,[{'var',332,'Type'}|[{'type',332,'dlog_type',[]}]]}]]}|[{'type',333,'tuple',[{'atom',333,'format'}|[{'ann_type',333,[{'var',333,'Format'}|[{'type',333,'dlog_format',[]}]]}]]}|[{'type',334,'tuple',[{'atom',334,'size'}|[{'ann_type',334,[{'var',334,'Size'}|[{'type',334,'dlog_size',[]}]]}]]}|[{'type',335,'tuple',[{'atom',335,'mode'}|[{'ann_type',335,[{'var',335,'Mode'}|[{'type',335,'dlog_mode',[]}]]}]]}|[{'type',336,'tuple',[{'atom',336,'owners'}|[{'type',336,'list',[{'type',336,'tuple',[{'type',336,'pid',[]}|[{'ann_type',336,[{'var',336,'Notify'}|[{'type',336,'boolean',[]}]]}]]}]}]]}|[{'type',337,'tuple',[{'atom',337,'users'}|[{'ann_type',337,[{'var',337,'Users'}|[{'type',337,'non_neg_integer',[]}]]}]]}|[{'type',338,'tuple',[{'atom',338,'status'}|[{'ann_type',338,[{'var',338,'Status'}|[{'type',339,'union',[{'atom',339,'ok'}|[{'type',339,'tuple',[{'atom',339,'blocked'}|[{'ann_type',339,[{'var',339,'QueueLogRecords'}|[{'type',339,'boolean',[]}]]}]]}]]}]]}]]}|[{'type',340,'tuple',[{'atom',340,'node'}|[{'ann_type',340,[{'var',340,'Node'}|[{'type',340,'node',[]}]]}]]}|[{'type',341,'tuple',[{'atom',341,'distributed'}|[{'ann_type',341,[{'var',341,'Dist'}|[{'type',341,'union',[{'atom',341,'local'}|[{'type',341,'list',[{'type',341,'node',[]}]}]]}]]}]]}|[{'type',342,'tuple',[{'atom',342,'head'}|[{'ann_type',342,[{'var',342,'Head'}|[{'type',342,'union',[{'atom',342,'none'}|[{'type',343,'tuple',[{'atom',343,'head'}|[{'type',343,'term',[]}]]}|[{'paren_type',344,[{'ann_type',344,[{'var',344,'MFA'}|[{'type',344,'tuple',[{'type',344,'atom',[]}|[{'type',344,'atom',[]}|[{'type',344,'list',[]}]]]}]]}]}]]]}]]}]]}|[{'type',345,'tuple',[{'atom',345,'no_written_items'}|[{'ann_type',345,[{'var',345,'NoWrittenItems'}|[{'type',345,'non_neg_integer',[]}]]}]]}|[{'type',346,'tuple',[{'atom',346,'full'}|[{'ann_type',346,[{'var',346,'Full'}|[{'atom',346,'boolean'}]]}]]}|[{'type',347,'tuple',[{'atom',347,'no_current_bytes'}|[{'type',347,'non_neg_integer',[]}]]}|[{'type',348,'tuple',[{'atom',348,'no_current_items'}|[{'type',348,'non_neg_integer',[]}]]}|[{'type',349,'tuple',[{'atom',349,'no_items'}|[{'type',349,'non_neg_integer',[]}]]}|[{'type',350,'tuple',[{'atom',350,'current_file'}|[{'type',350,'pos_integer',[]}]]}|[{'type',351,'tuple',[{'atom',351,'no_overflows'}|[{'type',351,'tuple',[{'ann_type',351,[{'var',351,'SinceLogWasOpened'}|[{'type',351,'non_neg_integer',[]}]]}|[{'ann_type',352,[{'var',352,'SinceLastInfo'}|[{'type',352,'non_neg_integer',[]}]]}]]}]]}]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 353
		'spec' =
		    %% Line 353
		    [{{'info',1},[{'type',353,'bounded_fun',[{'type',353,'fun',[{'type',353,'product',[{'var',353,'Log'}]}|[{'type',353,'union',[{'var',353,'InfoList'}|[{'type',353,'tuple',[{'atom',353,'error'}|[{'atom',353,'no_such_log'}]]}]]}]]}|[[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'Log'}|[{'type',354,'log',[]}]]]]}|[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'InfoList'}|[{'type',355,'list',[{'type',355,'dlog_info',[]}]}]]]]}]]]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'pid2name',1},[{'type',359,'bounded_fun',[{'type',359,'fun',[{'type',359,'product',[{'var',359,'Pid'}]}|[{'type',359,'union',[{'type',359,'tuple',[{'atom',359,'ok'}|[{'var',359,'Log'}]]}|[{'atom',359,'undefined'}]]}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Pid'}|[{'type',360,'pid',[]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Log'}|[{'type',361,'log',[]}]]]]}]]]]}]}],
		%% Line 373
		'type' =
		    %% Line 373
		    [{'chunk_error_rsn',{'type',373,'union',[{'atom',373,'no_such_log'}|[{'type',374,'tuple',[{'atom',374,'format_external'}|[{'type',374,'log',[]}]]}|[{'type',375,'tuple',[{'atom',375,'blocked_log'}|[{'type',375,'log',[]}]]}|[{'type',376,'tuple',[{'atom',376,'badarg'}|[{'atom',376,'continuation'}]]}|[{'type',377,'tuple',[{'atom',377,'not_internal_wrap'}|[{'type',377,'log',[]}]]}|[{'type',378,'tuple',[{'atom',378,'corrupt_log_file'}|[{'ann_type',378,[{'var',378,'FileName'}|[{'remote_type',378,[{'atom',378,'file'}|[{'atom',378,'filename'}|[[]]]]}]]}]]}|[{'type',379,'tuple',[{'atom',379,'file_error'}|[{'remote_type',379,[{'atom',379,'file'}|[{'atom',379,'filename'}|[[]]]]}|[{'type',379,'file_error',[]}]]]}]]]]]]]},[]}],
		%% Line 381
		'type' =
		    %% Line 381
		    [{'chunk_ret',{'type',381,'union',[{'type',381,'tuple',[{'ann_type',381,[{'var',381,'Continuation2'}|[{'type',381,'continuation',[]}]]}|[{'ann_type',381,[{'var',381,'Terms'}|[{'type',381,'list',[{'type',381,'term',[]}]}]]}]]}|[{'type',382,'tuple',[{'ann_type',382,[{'var',382,'Continuation2'}|[{'type',382,'continuation',[]}]]}|[{'ann_type',383,[{'var',383,'Terms'}|[{'type',383,'list',[{'type',383,'term',[]}]}]]}|[{'ann_type',384,[{'var',384,'Badbytes'}|[{'type',384,'non_neg_integer',[]}]]}]]]}|[{'atom',385,'eof'}|[{'type',386,'tuple',[{'atom',386,'error'}|[{'ann_type',386,[{'var',386,'Reason'}|[{'type',386,'chunk_error_rsn',[]}]]}]]}]]]]},[]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'chunk',2},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'Log'}|[{'var',388,'Continuation'}]]}|[{'type',388,'chunk_ret',[]}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Log'}|[{'type',389,'log',[]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Continuation'}|[{'type',390,'union',[{'atom',390,'start'}|[{'type',390,'continuation',[]}]]}]]]]}]]]]}]}],
		%% Line 394
		'spec' =
		    %% Line 394
		    [{{'chunk',3},[{'type',394,'bounded_fun',[{'type',394,'fun',[{'type',394,'product',[{'var',394,'Log'}|[{'var',394,'Continuation'}|[{'var',394,'N'}]]]}|[{'type',394,'chunk_ret',[]}]]}|[[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Log'}|[{'type',395,'log',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Continuation'}|[{'type',396,'union',[{'atom',396,'start'}|[{'type',396,'continuation',[]}]]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'N'}|[{'type',397,'union',[{'type',397,'pos_integer',[]}|[{'atom',397,'infinity'}]]}]]]]}]]]]]}]}],
		%% Line 463
		'type' =
		    %% Line 463
		    [{'bchunk_ret',{'type',463,'union',[{'type',463,'tuple',[{'ann_type',463,[{'var',463,'Continuation2'}|[{'type',463,'continuation',[]}]]}|[{'ann_type',464,[{'var',464,'Binaries'}|[{'type',464,'list',[{'type',464,'binary',[]}]}]]}]]}|[{'type',465,'tuple',[{'ann_type',465,[{'var',465,'Continuation2'}|[{'type',465,'continuation',[]}]]}|[{'ann_type',466,[{'var',466,'Binaries'}|[{'type',466,'list',[{'type',466,'binary',[]}]}]]}|[{'ann_type',467,[{'var',467,'Badbytes'}|[{'type',467,'non_neg_integer',[]}]]}]]]}|[{'atom',468,'eof'}|[{'type',469,'tuple',[{'atom',469,'error'}|[{'ann_type',469,[{'var',469,'Reason'}|[{'type',469,'chunk_error_rsn',[]}]]}]]}]]]]},[]}],
		%% Line 471
		'spec' =
		    %% Line 471
		    [{{'bchunk',2},[{'type',471,'bounded_fun',[{'type',471,'fun',[{'type',471,'product',[{'var',471,'Log'}|[{'var',471,'Continuation'}]]}|[{'type',471,'bchunk_ret',[]}]]}|[[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Log'}|[{'type',472,'log',[]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'Continuation'}|[{'type',473,'union',[{'atom',473,'start'}|[{'type',473,'continuation',[]}]]}]]]]}]]]]}]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'bchunk',3},[{'type',477,'bounded_fun',[{'type',477,'fun',[{'type',477,'product',[{'var',477,'Log'}|[{'var',477,'Continuation'}|[{'var',477,'N'}]]]}|[{'type',477,'bchunk_ret',[]}]]}|[[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'Log'}|[{'type',478,'log',[]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Continuation'}|[{'type',479,'union',[{'atom',479,'start'}|[{'type',479,'continuation',[]}]]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'N'}|[{'type',480,'union',[{'type',480,'pos_integer',[]}|[{'atom',480,'infinity'}]]}]]]]}]]]]]}]}],
		%% Line 503
		'spec' =
		    %% Line 503
		    [{{'chunk_step',3},[{'type',503,'bounded_fun',[{'type',503,'fun',[{'type',503,'product',[{'var',503,'Log'}|[{'var',503,'Continuation'}|[{'var',503,'Step'}]]]}|[{'type',504,'union',[{'type',504,'tuple',[{'atom',504,'ok'}|[{'type',504,'any',[]}]]}|[{'type',504,'tuple',[{'atom',504,'error'}|[{'var',504,'Reason'}]]}]]}]]}|[[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Log'}|[{'type',505,'log',[]}]]]]}|[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'Continuation'}|[{'type',506,'union',[{'atom',506,'start'}|[{'type',506,'continuation',[]}]]}]]]]}|[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'Step'}|[{'type',507,'integer',[]}]]]]}|[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'Reason'}|[{'type',508,'union',[{'atom',508,'no_such_log'}|[{'atom',508,'end_of_log'}|[{'type',508,'tuple',[{'atom',508,'format_external'}|[{'var',508,'Log'}]]}|[{'type',509,'tuple',[{'atom',509,'blocked_log'}|[{'var',509,'Log'}]]}|[{'type',509,'tuple',[{'atom',509,'badarg'}|[{'atom',509,'continuation'}]]}|[{'type',510,'tuple',[{'atom',510,'file_error'}|[{'remote_type',510,[{'atom',510,'file'}|[{'atom',510,'filename'}|[[]]]]}|[{'type',510,'file_error',[]}]]]}]]]]]]}]]]]}]]]]]]}]}],
		%% Line 521
		'spec' =
		    %% Line 521
		    [{{'chunk_info',1},[{'type',521,'bounded_fun',[{'type',521,'fun',[{'type',521,'product',[{'var',521,'Continuation'}]}|[{'type',521,'union',[{'var',521,'InfoList'}|[{'type',521,'tuple',[{'atom',521,'error'}|[{'var',521,'Reason'}]]}]]}]]}|[[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'Continuation'}|[{'type',522,'continuation',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'InfoList'}|[{'type',523,'nonempty_list',[{'type',523,'tuple',[{'atom',523,'node'}|[{'ann_type',523,[{'var',523,'Node'}|[{'type',523,'node',[]}]]}]]}]}]]]]}|[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'Reason'}|[{'type',524,'tuple',[{'atom',524,'no_continuation'}|[{'var',524,'Continuation'}]]}]]]]}]]]]]}]}],
		%% Line 530
		'spec' =
		    %% Line 530
		    [{{'accessible_logs',0},[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[]}|[{'type',530,'tuple',[{'type',530,'list',[{'var',530,'LocalLog'}]}|[{'type',530,'list',[{'var',530,'DistributedLog'}]}]]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'LocalLog'}|[{'type',531,'log',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'DistributedLog'}|[{'type',532,'log',[]}]]]]}]]]]}]}],
		%% Line 540
		'spec' =
		    %% Line 540
		    [{{'start',0},[{'type',540,'fun',[{'type',540,'product',[]}|[{'atom',540,'ok'}]]}]}],
		%% Line 1161
		'spec' =
		    %% Line 1161
		    [{{'system_terminate',4},[{'type',1161,'fun',[{'type',1161,'product',[{'var',1161,'_'}|[{'var',1161,'_'}|[{'var',1161,'_'}|[{'type',1161,'record',[{'atom',1161,'state'}]}]]]]}|[{'type',1161,'no_return',[]}]]}]}],
		%% Line 1176
		'spec' =
		    %% Line 1176
		    [{{'do_exit',4},[{'type',1176,'fun',[{'type',1176,'product',[{'type',1176,'record',[{'atom',1176,'state'}]}|[{'type',1176,'pid',[]}|[{'var',1176,'_'}|[{'var',1176,'_'}]]]]}|[{'type',1176,'no_return',[]}]]}]}],
		%% Line 1190
		'spec' =
		    %% Line 1190
		    [{{'do_fast_exit',3},[{'type',1190,'fun',[{'type',1190,'product',[{'type',1190,'record',[{'atom',1190,'state'}]}|[{'type',1190,'pid',[]}|[{'var',1190,'_'}]]]}|[{'type',1190,'no_return',[]}]]}]}],
		%% Line 1292
		'spec' =
		    %% Line 1292
		    [{{'compare_arg',3},[{'type',1292,'fun',[{'type',1292,'product',[{'type',1292,'atom',[]}|[{'var',1292,'_'}|[{'type',1292,'record',[{'atom',1292,'arg'}]}]]]}|[{'type',1293,'union',[{'atom',1293,'ok'}|[{'type',1293,'tuple',[{'atom',1293,'not_ok'}|[{'var',1293,'_'}]]}|[{'type',1293,'tuple',[{'atom',1293,'error'}|[{'type',1293,'tuple',[{'type',1293,'atom',[]}|[{'var',1293,'_'}]]}]]}]]]}]]}]}],
		%% Line 1502
		'spec' =
		    %% Line 1502
		    [{{'close_disk_log2',1},[{'type',1502,'fun',[{'type',1502,'product',[{'type',1502,'record',[{'atom',1502,'log'}]}]}|[{'atom',1502,'closed'}]]}]}],
		%% Line 1698
		'spec' =
		    %% Line 1698
		    [{{'do_log',2},[{'type',1698,'fun',[{'type',1698,'product',[{'type',1698,'record',[{'atom',1698,'log'}]}|[{'type',1698,'list',[{'type',1698,'binary',[]}]}]]}|[{'type',1698,'union',[{'type',1698,'integer',[]}|[{'type',1698,'tuple',[{'atom',1698,'error'}|[{'var',1698,'_'}|[{'type',1698,'integer',[]}]]]}]]}]]}]}],
		%% Line 1950
		'spec' =
		    %% Line 1950
		    [{{'get_near_pid',2},[{'type',1950,'fun',[{'type',1950,'product',[{'type',1950,'nonempty_list',[{'type',1950,'pid',[]}]}|[{'type',1950,'node',[]}]]}|[{'type',1950,'pid',[]}]]}]}],
		%% Line 2032
		'spec' =
		    %% Line 2032
		    [{{'state_err',2},[{'type',2032,'fun',[{'type',2032,'product',[{'type',2032,'record',[{'atom',2032,'state'}]}|[{'type',2032,'dlog_state_error',[]}]]}|[{'type',2032,'record',[{'atom',2032,'state'}]}]]}]}]]
'open'/1 =
    %% Line 117
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'self'
		()
	in  let <_cor2> =
		%% Line 118
		apply 'check_arg'/2
		    (_cor0, {'arg',0,'undefined','none','true','infinity','halt','false','internal',_cor1,'none','read_write','false',_cor0})
	    in  %% Line 118
		call 'disk_log_server':'open'
		    (_cor2)
'log'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 129
	    call 'erlang':'term_to_binary'
		(_cor0)
	in  %% Line 129
	    apply 'req'/2
		(_cor1, {'log',_cor2})
'blog'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 135
	    apply 'check_bytes'/1
		(_cor0)
	in  %% Line 135
	    apply 'req'/2
		(_cor1, {'blog',_cor2})
'log_terms'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	let <Bs> =
	    %% Line 141
	    apply 'terms2bins'/1
		(_cor0)
	in  %% Line 142
	    apply 'req'/2
		(_cor1, {'log',Bs})
'blog_terms'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	let <Bs> =
	    %% Line 149
	    apply 'check_bytes_list'/2
		(_cor0, _cor0)
	in  %% Line 150
	    apply 'req'/2
		(_cor1, {'blog',Bs})
'alog'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 158
	    call 'erlang':'term_to_binary'
		(_cor0)
	in  %% Line 158
	    apply 'notify'/2
		(_cor1, {'alog',_cor2})
'alog_terms'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	let <Bs> =
	    %% Line 164
	    apply 'terms2bins'/1
		(_cor0)
	in  %% Line 165
	    apply 'notify'/2
		(_cor1, {'alog',Bs})
'balog'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 171
	    apply 'check_bytes'/1
		(_cor0)
	in  %% Line 171
	    apply 'notify'/2
		(_cor1, {'balog',_cor2})
'balog_terms'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	let <Bs> =
	    %% Line 177
	    apply 'check_bytes_list'/2
		(_cor0, _cor0)
	in  %% Line 178
	    apply 'notify'/2
		(_cor1, {'balog',Bs})
'close'/1 =
    %% Line 185
    fun (_cor0) ->
	%% Line 186
	apply 'req'/2
	    (_cor0, 'close')
'lclose'/1 =
    %% Line 193
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 194
	    call 'erlang':'node'
		()
	in  %% Line 194
	    apply 'lclose'/2
		(_cor0, _cor1)
'lclose'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	%% Line 200
	apply 'lreq'/3
	    (_cor1, 'close', _cor0)
'truncate'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	apply 'req'/2
	    (_cor0, {'truncate','none','truncate',1})
'truncate'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 217
	    call 'erlang':'term_to_binary'
		(_cor0)
	in  %% Line 217
	    apply 'req'/2
		(_cor1, {'truncate',{'ok',_cor2},'truncate',2})
'btruncate'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 223
	    apply 'check_bytes'/1
		(_cor0)
	in  %% Line 223
	    apply 'req'/2
		(_cor1, {'truncate',{'ok',_cor2},'btruncate',2})
'reopen'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	%% Line 238
	apply 'req'/2
	    (_cor1, {'reopen',_cor0,'none','reopen',2})
'reopen'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 245
	    call 'erlang':'term_to_binary'
		(_cor0)
	in  %% Line 245
	    apply 'req'/2
		(_cor2, {'reopen',_cor1,{'ok',_cor3},'reopen',3})
'breopen'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 252
	    apply 'check_bytes'/1
		(_cor0)
	in  %% Line 252
	    apply 'req'/2
		(_cor2, {'reopen',_cor1,{'ok',_cor3},'breopen',3})
'inc_wrap_file'/1 =
    %% Line 262
    fun (_cor0) ->
	%% Line 263
	apply 'req'/2
	    (_cor0, 'inc_wrap_file')
'change_size'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	%% Line 274
	apply 'req'/2
	    (_cor1, {'change_size',_cor0})
'change_notify'/3 =
    %% Line 282
    fun (_cor2,_cor1,_cor0) ->
	%% Line 283
	apply 'req'/2
	    (_cor2, {'change_notify',_cor1,_cor0})
'change_header'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	%% Line 292
	apply 'req'/2
	    (_cor1, {'change_header',_cor0})
'sync'/1 =
    %% Line 300
    fun (_cor0) ->
	%% Line 301
	apply 'req'/2
	    (_cor0, 'sync')
'block'/1 =
    %% Line 307
    fun (_cor0) ->
	%% Line 308
	apply 'block'/2
	    (_cor0, 'true')
'block'/2 =
    %% Line 313
    fun (_cor1,_cor0) ->
	%% Line 314
	apply 'req'/2
	    (_cor1, {'block',_cor0})
'unblock'/1 =
    %% Line 322
    fun (_cor0) ->
	%% Line 323
	apply 'req'/2
	    (_cor0, 'unblock')
'format_error'/1 =
    %% Line 327
    fun (_cor0) ->
	%% Line 328
	apply 'do_format_error'/1
	    (_cor0)
'info'/1 =
    %% Line 356
    fun (_cor0) ->
	%% Line 357
	apply 'sreq'/2
	    (_cor0, 'info')
'pid2name'/1 =
    %% Line 362
    fun (_cor0) ->
	do  %% Line 363
	    call 'disk_log_server':'start'
		()
	    %% Line 364
	    case call 'ets':'lookup'
		     ('disk_log_pids', _cor0) of
	      %% Line 365
	      <[]> when 'true' ->
		  'undefined'
	      %% Line 366
	      <[{_X_Pid,Log}|[]]> when 'true' ->
		  {'ok',Log}
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'chunk'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	%% Line 392
	apply 'chunk'/3
	    (_cor1, _cor0, 'infinity')
'chunk'/3 =
    %% Line 398
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,Cont,'infinity'> when 'true' ->
	      %% Line 400
	      apply 'ichunk'/3
		  (Log, Cont, 65536)
	  %% Line 401
	  <Log,Cont,N>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 402
	      apply 'ichunk'/3
		  (Log, Cont, N)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'chunk',3}}] )
	    -| ['compiler_generated'] )
	end
'ichunk'/3 =
    %% Line 404
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,'start',N> when 'true' ->
	      let <R> =
		  %% Line 405
		  apply 'sreq'/2
		      (Log, {'chunk',0,[],N})
	      in  %% Line 406
		  apply 'ichunk_end'/2
		      (R, Log)
	  %% Line 407
	  <Log,More = {'continuation',_cor14,_cor15,_cor16},N> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      let <R> =
		  %% Line 408
		  apply 'req2'/2
		      (_cor14, %% Line 409
			       {'chunk',_cor15,_cor16,N})
	      in  %% Line 410
		  apply 'ichunk_end'/2
		      (R, Log)
	  %% Line 411
	  <_X_Log,_cor26,_cor27> when 'true' ->
	      %% Line 412
	      {'error',{'badarg','continuation'}}
	end
'ichunk_end'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{C = {'continuation',_cor4,_cor5,_cor6},R},Log> when ( 'true'
								  -| ['compiler_generated'] ) ->
	      %% Line 415
	      apply 'ichunk_end'/5
		  (R, 'read_write', Log, C, 0)
	  %% Line 416
	  <{C = {'continuation',_cor7,_cor8,_cor9},R,Bad},Log> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      %% Line 417
	      apply 'ichunk_end'/5
		  (R, 'read_only', Log, C, Bad)
	  %% Line 418
	  <R,_X_Log> when 'true' ->
	      %% Line 419
	      R
	end
'ichunk_end'/5 =
    %% Line 423
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    catch
		%% Line 424
		apply 'bins2terms'/2
		    (_cor4, [])
	in  %% Line 424
	    case _cor5 of
	      %% Line 425
	      <{'EXIT',_cor13}> when 'true' ->
		  let <RR> =
		      %% Line 426
		      call 'lists':'reverse'
			  (_cor4)
		  in  %% Line 427
		      apply 'ichunk_bad_end'/6
			  (RR, _cor3, _cor2, _cor1, _cor0, [])
	      %% Line 428
	      <Ts>
		  when call 'erlang':'>'
			(_cor0,
			 0) ->
		  %% Line 429
		  {_cor1,Ts,_cor0}
	      %% Line 430
	      <Ts>
		  when call 'erlang':'=:='
			(_cor0,
			 0) ->
		  %% Line 431
		  {_cor1,Ts}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'bins2terms'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],L> when 'true' ->
	      %% Line 435
	      L
	  %% Line 436
	  <[B|Bs],L> when 'true' ->
	      let <_cor2> =
		  %% Line 437
		  call 'erlang':'binary_to_term'
		      (B)
	      in  %% Line 437
		  apply 'bins2terms'/2
		      (Bs, [_cor2|L])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'bins2terms',2}}] )
	    -| ['compiler_generated'] )
	end
'ichunk_bad_end'/6 =
    %% Line 439
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],Mode,Log,C,Bad,A> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 440
		      call 'erlang':'binary_to_term'
			  (B)
	      in  %% Line 440
		  case _cor6 of
		    %% Line 441
		    <{'EXIT',_cor41}>
			when call 'erlang':'=:='
			      ('read_write',
			       Mode) ->
			let <InfoList> =
			    %% Line 442
			    apply 'info'/1
				(Log)
			in  %% Line 443
			    case call 'lists':'keysearch'
				     ('file', 1, InfoList) of
			      <{'value',{'file',FileName}}> when 'true' ->
				  %% Line 444
				  ( case C of
				      ( <( {'continuation',_cor42,_rec3,_cor43}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor12> =
						case _rec3 of
						  %% Line 445
						  <Pos>
						      when call 'erlang':'is_integer'
							    (_rec3) ->
						      FileName
						  %% Line 446
						  <{FileNo,_cor45}> when 'true' ->
						      apply 'add_ext'/2
							  (FileName, FileNo)
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor11})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 448
						{'error',{'corrupt_log_file',_cor12}}
					-| ['compiler_generated'] )
				      ( <_cor44> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','continuation'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    %% Line 449
		    <{'EXIT',_cor46}>
			when call 'erlang':'=:='
			      ('read_only',
			       Mode) ->
			let <_cor20> =
			    %% Line 450
			    ( fun (_cor17,_cor16) ->
				  let <_cor14> =
				      %% Line 451
				      call 'erlang':'byte_size'
					  (_cor17)
				  in  let <_cor15> =
					  %% Line 451
					  call 'erlang':'+'
					      (_cor16, _cor14)
				      in  %% Line 451
					  call 'erlang':'+'
					      (_cor15, 8)
			      -| [{'id',{0,0,'-ichunk_bad_end/6-fun-0-'}}] )
			in  let <Reread> =
				%% Line 450
				call 'lists':'foldl'
				    (_cor20, %% Line 452
					     0, %% Line 452
						Bs)
			    in  %% Line 453
				( case C of
				    ( <( {'continuation',_cor47,_rec4,_cor48}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor26> =
					      case _rec4 of
						%% Line 454
						<Pos>
						    when call 'erlang':'is_integer'
							  (_rec4) ->
						    call 'erlang':'-'
							(Pos, Reread)
						%% Line 455
						<{FileNo,Pos}> when 'true' ->
						    let <_cor24> =
							call 'erlang':'-'
							    (Pos, Reread)
						    in  {FileNo,_cor24}
						( <_cor25> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor25})
						  -| ['compiler_generated'] )
					      end
					  in  let <_cor28> =
						  %% Line 457
						  call 'erlang':'byte_size'
						      (B)
					      in  let <NewBad> =
						      %% Line 457
						      call 'erlang':'+'
							  (Bad, _cor28)
						  in  let <_cor33> =
							  %% Line 458
							  {'continuation',_cor47,_cor26,[]}
						      in  let <_cor30> =
							      %% Line 458
							      call 'lists':'reverse'
								  (A)
							  in  %% Line 458
							      {_cor33,_cor30,NewBad}
				      -| ['compiler_generated'] )
				    ( <_cor49> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','continuation'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    %% Line 459
		    <T> when 'true' ->
			%% Line 460
			apply 'ichunk_bad_end'/6
			    (Bs, Mode, Log, C, Bad, [T|A])
		  end
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36,_cor35})
		  -| [{'function_name',{'ichunk_bad_end',6}}] )
	    -| ['compiler_generated'] )
	end
'bchunk'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	%% Line 475
	apply 'bchunk'/3
	    (_cor1, _cor0, 'infinity')
'bchunk'/3 =
    %% Line 481
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,Cont,'infinity'> when 'true' ->
	      %% Line 483
	      apply 'bichunk'/3
		  (Log, Cont, 65536)
	  %% Line 484
	  <Log,Cont,N>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 485
	      apply 'bichunk'/3
		  (Log, Cont, N)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'bchunk',3}}] )
	    -| ['compiler_generated'] )
	end
'bichunk'/3 =
    %% Line 487
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,'start',N> when 'true' ->
	      let <R> =
		  %% Line 488
		  apply 'sreq'/2
		      (Log, {'chunk',0,[],N})
	      in  %% Line 489
		  apply 'bichunk_end'/1
		      (R)
	  %% Line 490
	  <_X_Log,{'continuation',Pid,Pos,B},N> when 'true' ->
	      let <R> =
		  %% Line 491
		  apply 'req2'/2
		      (Pid, {'chunk',Pos,B,N})
	      in  %% Line 492
		  apply 'bichunk_end'/1
		      (R)
	  %% Line 493
	  <_X_Log,_cor8,_cor9> when 'true' ->
	      %% Line 494
	      {'error',{'badarg','continuation'}}
	end
'bichunk_end'/1 =
    %% Line 496
    fun (_cor0) ->
	case _cor0 of
	  <{C = {'continuation',_cor4,_cor5,_cor6},R}> when 'true' ->
	      let <_cor1> =
		  %% Line 497
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 497
		  {C,_cor1}
	  %% Line 498
	  <{C = {'continuation',_cor7,_cor8,_cor9},R,Bad}> when 'true' ->
	      let <_cor2> =
		  %% Line 499
		  call 'lists':'reverse'
		      (R)
	      in  %% Line 499
		  {C,_cor2,Bad}
	  %% Line 500
	  <R> when 'true' ->
	      %% Line 501
	      R
	end
'chunk_step'/3 =
    %% Line 511
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,Cont,N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 512
	      apply 'ichunk_step'/3
		  (Log, Cont, N)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'chunk_step',3}}] )
	    -| ['compiler_generated'] )
	end
'ichunk_step'/3 =
    %% Line 514
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Log,'start',N> when 'true' ->
	      %% Line 515
	      apply 'sreq'/2
		  (Log, {'chunk_step',0,N})
	  %% Line 516
	  <_X_Log,More = {'continuation',_cor10,_cor11,_cor12},N> when ( 'true'
									 -| ['compiler_generated'] ) ->
	      %% Line 517
	      apply 'req2'/2
		  (_cor10, {'chunk_step',_cor11,N})
	  %% Line 518
	  <_X_Log,_cor19,_cor20> when 'true' ->
	      %% Line 519
	      {'error',{'badarg','continuation'}}
	end
'chunk_info'/1 =
    %% Line 525
    fun (_cor0) ->
	case _cor0 of
	  <More = {'continuation',_cor5,_cor6,_cor7}> when 'true' ->
	      let <_cor3> =
		  %% Line 526
		  call 'erlang':'node'
		      (_cor5)
	      in  %% Line 526
		  [{'node',_cor3}|[]]
	  %% Line 527
	  <BadCont> when 'true' ->
	      %% Line 528
	      {'error',{'no_continuation',BadCont}}
	end
'accessible_logs'/0 =
    %% Line 533
    fun () ->
	%% Line 534
	call 'disk_log_server':'accessible_logs'
	    ()
'istart_link'/1 =
    %% Line 536
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 537
	    call 'erlang':'self'
		()
	in  let <_cor2> =
		%% Line 537
		call 'proc_lib':'spawn_link'
		    ('disk_log', 'init', [_cor1|[_cor0|[]]])
	    in  %% Line 537
		{'ok',_cor2}
'start'/0 =
    %% Line 541
    fun () ->
	%% Line 542
	call 'disk_log_server':'start'
	    ()
'internal_open'/2 =
    %% Line 544
    fun (_cor1,_cor0) ->
	%% Line 545
	apply 'req2'/2
	    (_cor1, {'internal_open',_cor0})
'll_open'/1 =
    %% Line 551
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'self'
		()
	in  %% Line 552
	    case apply 'check_arg'/2
		     (_cor0, {'arg',0,'undefined','none','true','infinity','halt','false','internal',_cor1,'none','read_write','false',_cor0}) of
	      %% Line 553
	      <{'ok',L}> when 'true' ->
		  apply 'do_open'/1
		      (L)
	      %% Line 554
	      <Error> when 'true' ->
		  Error
	    end
'll_close'/1 =
    %% Line 558
    fun (_cor0) ->
	%% Line 559
	apply 'close_disk_log2'/1
	    (_cor0)
'check_arg'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Res> when 'true' ->
	      %% Line 562
	      ( case Res of
		  ( <( {'arg',_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_rec12,_cor159,_cor160,_cor161}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor13> =
			    case _rec12 of
			      %% Line 563
			      <'none'> when 'true' ->
				  %% Line 564
				  {'ok',Res}
			      %% Line 565
			      <_cor163> when 'true' ->
				  %% Line 566
				  case apply 'check_head'/2
					   (_rec12, _cor157) of
				    %% Line 567
				    <{'ok',Head}> when 'true' ->
					let <_cor10> =
					    %% Line 568
					    call 'erlang':'setelement'
						(11, Res, Head)
					in  %% Line 568
					    {'ok',_cor10}
				    %% Line 569
				    <Error> when 'true' ->
					%% Line 570
					Error
				  end
			    end
			in  %% Line 574
			    case <> of
			      %% Line 575
			      <>
				  when ( call 'erlang':'=:='
					  (_cor150,
					   0)
				      -| ['compiler_generated'] ) ->
				  %% Line 576
				  {'error',{'badarg','name'}}
			      %% Line 577
			      <>
				  when ( call 'erlang':'=:='
					  (_cor152,
					   'none')
				      -| ['compiler_generated'] ) ->
				  let <_cor29> =
				      catch
					  %% Line 578
					  call 'lists':'concat'
					      ([_cor150|[[46|[76|[79|[71]]]]]])
				  in  %% Line 578
				      case _cor29 of
					%% Line 579
					<{'EXIT',_cor217}> when 'true' ->
					    {'error',{'badarg','file'}}
					%% Line 580
					<FName> when 'true' ->
					    let <_cor32> =
						call 'erlang':'setelement'
						    (4, Res, FName)
					    in  apply 'check_arg'/2
						    ([], _cor32)
				      end
			      %% Line 582
			      <>
				  when let <_cor39> =
					( call 'erlang':'=:='
					      (_cor153, 'truncate')
					  -| ['compiler_generated'] )
				    in  let <_cor42> =
					    ( call 'erlang':'=:='
						  (_cor159, 'read_only')
					      -| ['compiler_generated'] )
					in  ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'and'
										   -| ['compiler_generated'] )
						  (_cor39, _cor42)
					      -| ['compiler_generated'] ) ->
				  %% Line 583
				  {'error',{'badarg','repair_read_only'}}
			      %% Line 584
			      <>
				  when let <_cor48> =
					( call 'erlang':'=:='
					      (_cor155, 'halt')
					  -| ['compiler_generated'] )
				    in  let <_cor51> =
					    ( call 'erlang':'is_tuple'
						  (_cor154)
					      -| ['compiler_generated'] )
					in  ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'and'
										   -| ['compiler_generated'] )
						  (_cor48, _cor51)
					      -| ['compiler_generated'] ) ->
				  %% Line 585
				  {'error',{'badarg','size'}}
			      %% Line 586
			      <>
				  when ( call 'erlang':'=:='
					  (_cor155,
					   'wrap')
				      -| ['compiler_generated'] ) ->
				  %% Line 587
				  case %% Line 588
				       call 'disk_log_1':'read_size_file_version'
					   (_cor152) of
				    <{OldSize,Version}> when 'true' ->
					%% Line 589
					apply 'check_wrap_arg'/3
					    (_cor13, OldSize, Version)
				    ( <_cor60> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor60})
				      -| ['compiler_generated'] )
				  end
			      %% Line 590
			      <> when 'true' ->
				  _cor13
			    end
		    -| ['compiler_generated'] )
		  ( <_cor162> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','arg'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 593
	  <[{'file',F}|Tail],Res>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 594
	      case Res of
		<{'arg',_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257}> when 'true' ->
		    let <_cor63> =
			call 'erlang':'setelement'
			    (4, Res, F)
		    in  apply 'check_arg'/2
			    (Tail, _cor63)
		( <_cor258> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 595
	  <[{'file',F}|Tail],Res>
	      when call 'erlang':'is_atom'
		    (F) ->
	      %% Line 596
	      case Res of
		<{'arg',_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271}> when 'true' ->
		    let <_cor66> =
			call 'erlang':'setelement'
			    (4, Res, F)
		    in  apply 'check_arg'/2
			    (Tail, _cor66)
		( <_cor272> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 597
	  <[{'linkto',Pid}|Tail],Res>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 598
	      case Res of
		<{'arg',_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285}> when 'true' ->
		    let <_cor69> =
			call 'erlang':'setelement'
			    (10, Res, Pid)
		    in  apply 'check_arg'/2
			    (Tail, _cor69)
		( <_cor286> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 599
	  <[{'linkto','none'}|Tail],Res> when 'true' ->
	      %% Line 600
	      case Res of
		<{'arg',_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299}> when 'true' ->
		    let <_cor72> =
			call 'erlang':'setelement'
			    (10, Res, 'none')
		    in  apply 'check_arg'/2
			    (Tail, _cor72)
		( <_cor300> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 601
	  <[{'name',Name}|Tail],Res> when 'true' ->
	      %% Line 602
	      case Res of
		<{'arg',_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313}> when 'true' ->
		    let <_cor75> =
			call 'erlang':'setelement'
			    (2, Res, Name)
		    in  apply 'check_arg'/2
			    (Tail, _cor75)
		( <_cor314> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 603
	  <[{'repair','true'}|Tail],Res> when 'true' ->
	      %% Line 604
	      case Res of
		<{'arg',_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327}> when 'true' ->
		    let <_cor78> =
			call 'erlang':'setelement'
			    (5, Res, 'true')
		    in  apply 'check_arg'/2
			    (Tail, _cor78)
		( <_cor328> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 605
	  <[{'repair','false'}|Tail],Res> when 'true' ->
	      %% Line 606
	      case Res of
		<{'arg',_cor329,_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341}> when 'true' ->
		    let <_cor81> =
			call 'erlang':'setelement'
			    (5, Res, 'false')
		    in  apply 'check_arg'/2
			    (Tail, _cor81)
		( <_cor342> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 607
	  <[{'repair','truncate'}|Tail],Res> when 'true' ->
	      %% Line 608
	      case Res of
		<{'arg',_cor343,_cor344,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355}> when 'true' ->
		    let <_cor84> =
			call 'erlang':'setelement'
			    (5, Res, 'truncate')
		    in  apply 'check_arg'/2
			    (Tail, _cor84)
		( <_cor356> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 609
	  <[{'size',Int}|Tail],Res>
	      when let <_cor85> =
		    call 'erlang':'is_integer'
			(Int)
		in  let <_cor86> =
			call 'erlang':'>'
			    (Int, 0)
		    in  call 'erlang':'and'
			    (_cor85, _cor86) ->
	      %% Line 610
	      case Res of
		<{'arg',_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369}> when 'true' ->
		    let <_cor89> =
			call 'erlang':'setelement'
			    (6, Res, Int)
		    in  apply 'check_arg'/2
			    (Tail, _cor89)
		( <_cor370> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 611
	  <[{'size','infinity'}|Tail],Res> when 'true' ->
	      %% Line 612
	      case Res of
		<{'arg',_cor371,_cor372,_cor373,_cor374,_cor375,_cor376,_cor377,_cor378,_cor379,_cor380,_cor381,_cor382,_cor383}> when 'true' ->
		    let <_cor92> =
			call 'erlang':'setelement'
			    (6, Res, 'infinity')
		    in  apply 'check_arg'/2
			    (Tail, _cor92)
		( <_cor384> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 613
	  <[{'size',{MaxB,MaxF}}|Tail],Res>
	      when try
		    let <_cor93> =
			call 'erlang':'is_integer'
			    (MaxB)
		    in  let <_cor94> =
			    %% Line 614
			    call 'erlang':'is_integer'
				(MaxF)
			in  let <_cor95> =
				%% Line 615
				call 'erlang':'>'
				    (MaxB, 0)
			    in  let <_cor98> =
				    %% Line 615
				    call 'erlang':'=<'
					(MaxB, 18446744073709551615)
				in  let <_cor99> =
					%% Line 616
					call 'erlang':'>'
					    (MaxF, 0)
				    in  let <_cor100> =
					    %% Line 616
					    call 'erlang':'<'
						(MaxF, 65000)
					in  let <_cor101> =
						call 'erlang':'and'
						    (_cor99, _cor100)
					    in  let <_cor102> =
						    call 'erlang':'and'
							(_cor98, _cor101)
						in  let <_cor103> =
							call 'erlang':'and'
							    (_cor95, _cor102)
						    in  let <_cor104> =
							    call 'erlang':'and'
								(_cor94, _cor103)
							in  call 'erlang':'and'
								(_cor93, _cor104)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_rec29> = {%% Line 617
		   MaxB,%% Line 617
			MaxF}
	      in  %% Line 617
		  case Res of
		    <{'arg',_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394,_cor395,_cor396,_cor397}> when 'true' ->
			let <_cor108> =
			    call 'erlang':'setelement'
				(6, Res, _rec29)
			in  apply 'check_arg'/2
				(Tail, _cor108)
		    ( <_cor398> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','arg'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 618
	  <[{'type','wrap'}|Tail],Res> when 'true' ->
	      %% Line 619
	      case Res of
		<{'arg',_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411}> when 'true' ->
		    let <_cor111> =
			call 'erlang':'setelement'
			    (7, Res, 'wrap')
		    in  apply 'check_arg'/2
			    (Tail, _cor111)
		( <_cor412> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 620
	  <[{'type','halt'}|Tail],Res> when 'true' ->
	      %% Line 621
	      case Res of
		<{'arg',_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425}> when 'true' ->
		    let <_cor114> =
			call 'erlang':'setelement'
			    (7, Res, 'halt')
		    in  apply 'check_arg'/2
			    (Tail, _cor114)
		( <_cor426> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 622
	  <[{'format','internal'}|Tail],Res> when 'true' ->
	      %% Line 623
	      case Res of
		<{'arg',_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436,_cor437,_cor438,_cor439}> when 'true' ->
		    let <_cor117> =
			call 'erlang':'setelement'
			    (9, Res, 'internal')
		    in  apply 'check_arg'/2
			    (Tail, _cor117)
		( <_cor440> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 624
	  <[{'format','external'}|Tail],Res> when 'true' ->
	      %% Line 625
	      case Res of
		<{'arg',_cor441,_cor442,_cor443,_cor444,_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452,_cor453}> when 'true' ->
		    let <_cor120> =
			call 'erlang':'setelement'
			    (9, Res, 'external')
		    in  apply 'check_arg'/2
			    (Tail, _cor120)
		( <_cor454> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 626
	  <[{'distributed',[]}|Tail],Res> when 'true' ->
	      %% Line 627
	      case Res of
		<{'arg',_cor455,_cor456,_cor457,_cor458,_cor459,_cor460,_cor461,_cor462,_cor463,_cor464,_cor465,_cor466,_cor467}> when 'true' ->
		    let <_cor123> =
			call 'erlang':'setelement'
			    (8, Res, 'false')
		    in  apply 'check_arg'/2
			    (Tail, _cor123)
		( <_cor468> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 628
	  <[{'distributed',Nodes}|Tail],Res>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_rec36> = {%% Line 629
		   'true',%% Line 629
			  Nodes}
	      in  %% Line 629
		  case Res of
		    <{'arg',_cor469,_cor470,_cor471,_cor472,_cor473,_cor474,_cor475,_cor476,_cor477,_cor478,_cor479,_cor480,_cor481}> when 'true' ->
			let <_cor127> =
			    call 'erlang':'setelement'
				(8, Res, _rec36)
			in  apply 'check_arg'/2
				(Tail, _cor127)
		    ( <_cor482> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','arg'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 630
	  <[{'notify','true'}|Tail],Res> when 'true' ->
	      %% Line 631
	      case Res of
		<{'arg',_cor483,_cor484,_cor485,_cor486,_cor487,_cor488,_cor489,_cor490,_cor491,_cor492,_cor493,_cor494,_cor495}> when 'true' ->
		    let <_cor130> =
			call 'erlang':'setelement'
			    (13, Res, 'true')
		    in  apply 'check_arg'/2
			    (Tail, _cor130)
		( <_cor496> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 632
	  <[{'notify','false'}|Tail],Res> when 'true' ->
	      %% Line 633
	      case Res of
		<{'arg',_cor497,_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_cor507,_cor508,_cor509}> when 'true' ->
		    let <_cor133> =
			call 'erlang':'setelement'
			    (13, Res, 'false')
		    in  apply 'check_arg'/2
			    (Tail, _cor133)
		( <_cor510> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 634
	  <[{'head_func',HeadFunc}|Tail],Res> when 'true' ->
	      let <_rec40> = {%% Line 635
		   'head_func',%% Line 635
			       HeadFunc}
	      in  %% Line 635
		  case Res of
		    <{'arg',_cor511,_cor512,_cor513,_cor514,_cor515,_cor516,_cor517,_cor518,_cor519,_cor520,_cor521,_cor522,_cor523}> when 'true' ->
			let <_cor137> =
			    call 'erlang':'setelement'
				(11, Res, _rec40)
			in  apply 'check_arg'/2
				(Tail, _cor137)
		    ( <_cor524> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','arg'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 636
	  <[{'head',Term}|Tail],Res> when 'true' ->
	      let <_rec42> = {%% Line 637
		   'head',%% Line 637
			  Term}
	      in  %% Line 637
		  case Res of
		    <{'arg',_cor525,_cor526,_cor527,_cor528,_cor529,_cor530,_cor531,_cor532,_cor533,_cor534,_cor535,_cor536,_cor537}> when 'true' ->
			let <_cor141> =
			    call 'erlang':'setelement'
				(11, Res, _rec42)
			in  apply 'check_arg'/2
				(Tail, _cor141)
		    ( <_cor538> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','arg'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 638
	  <[{'mode','read_only'}|Tail],Res> when 'true' ->
	      %% Line 639
	      case Res of
		<{'arg',_cor539,_cor540,_cor541,_cor542,_cor543,_cor544,_cor545,_cor546,_cor547,_cor548,_cor549,_cor550,_cor551}> when 'true' ->
		    let <_cor144> =
			call 'erlang':'setelement'
			    (12, Res, 'read_only')
		    in  apply 'check_arg'/2
			    (Tail, _cor144)
		( <_cor552> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 640
	  <[{'mode','read_write'}|Tail],Res> when 'true' ->
	      %% Line 641
	      case Res of
		<{'arg',_cor553,_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,_cor560,_cor561,_cor562,_cor563,_cor564,_cor565}> when 'true' ->
		    let <_cor147> =
			call 'erlang':'setelement'
			    (12, Res, 'read_write')
		    in  apply 'check_arg'/2
			    (Tail, _cor147)
		( <_cor566> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 642
	  <Arg,_cor567> when 'true' ->
	      %% Line 643
	      {'error',{'badarg',Arg}}
	end
'check_wrap_arg'/3 =
    %% Line 645
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'ok',Res = {'arg',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}},{0,0},_X_Version>
	      when call 'erlang':'=:='
		    (_cor58,
		     'infinity') ->
	      %% Line 646
	      {'error',{'badarg','size'}}
	  %% Line 647
	  <{'ok',Res = {'arg',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}},OldSize,Version>
	      when call 'erlang':'=:='
		    (_cor71,
		     'infinity') ->
	      let <_cor17> =
		  %% Line 648
		  call 'erlang':'setelement'
		      (6, Res, OldSize)
	      in  %% Line 649
		  apply 'check_wrap_arg'/3
		      ({'ok',_cor17}, OldSize, Version)
	  %% Line 650
	  <{'ok',Res},{0,0},Version> when 'true' ->
	      %% Line 651
	      case Res of
		<{'arg',_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}> when 'true' ->
		    let <_cor21> =
			call 'erlang':'setelement'
			    (3, Res, Version)
		    in  {'ok',_cor21}
		( <_cor107> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','arg'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 652
	  <{'ok',Res = {'arg',_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120}},OldSize,Version>
	      when call 'erlang':'=:='
		    (OldSize,
		     _cor112) ->
	      let <_cor30> =
		  %% Line 653
		  call 'erlang':'setelement'
		      (3, Res, Version)
	      in  %% Line 653
		  {'ok',_cor30}
	  %% Line 654
	  <{'ok',Res = {'arg',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147}},_X_OldSize,Version>
	      when let <_cor36> =
		    call 'erlang':'=:='
			(_cor138, 'truncate')
		in  let <_cor39> =
			%% Line 655
			call 'erlang':'is_tuple'
			    (_cor139)
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor36, _cor39)
			  -| ['compiler_generated'] ) ->
	      let <_cor42> =
		  %% Line 656
		  call 'erlang':'setelement'
		      (3, Res, Version)
	      in  %% Line 656
		  {'ok',_cor42}
	  %% Line 657
	  <{'ok',Res = {'arg',_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174}},OldSize,_X_Version>
	      when call 'erlang':'is_tuple'
		    (_cor166) ->
	      %% Line 658
	      {'error',{'size_mismatch',OldSize,_cor166}}
	  %% Line 659
	  <{'ok',_X_Res},_X_OldSize,_X_Version> when 'true' ->
	      %% Line 660
	      {'error',{'badarg','size'}}
	  %% Line 661
	  <Ret,_X_OldSize,_X_Version> when 'true' ->
	      %% Line 662
	      Ret
	end
'init'/2 =
    %% Line 667
    fun (_cor1,_cor0) ->
	do  %% Line 669
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 670
	    apply 'loop'/1
		({'state',[],[],_cor1,_cor0,0,'undefined','ok','ok'})
'loop'/1 =
    %% Line 672
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}>
	      when call 'erlang':'=:='
		    (_cor15,
		     []) ->
	      %% Line 673
	      receive
		%% Line 674
		<Message> when 'true' ->
		    %% Line 675
		    apply 'handle'/2
			(Message, State)
	      after 'infinity' ->
		'true'
	  %% Line 677
	  <State> when 'true' ->
	      %% Line 678
	      ( case State of
		  ( <( {'state',_cor22,_rec51,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec51 of
			  <[M|Ms]> when 'true' ->
			      let <_cor12> =
				  %% Line 679
				  call 'erlang':'setelement'
				      (3, State, Ms)
			      in  %% Line 679
				  apply 'handle'/2
				      (M, _cor12)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'handle'/2 =
    %% Line 681
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{From,'write_cache'},S>
	      when try
		    let <_cor2> =
			call 'erlang':'self'
			    ()
		    in  call 'erlang':'=:='
			    (From, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  catch
		      let <_cor3> =
			  %% Line 682
			  call 'erlang':'get'
			      ('log')
		      in  %% Line 682
			  apply 'do_write_cache'/1
			      (_cor3)
	      in  %% Line 682
		  case _cor4 of
		    %% Line 683
		    <'ok'> when 'true' ->
			%% Line 684
			apply 'loop'/1
			    (S)
		    %% Line 685
		    <Error> when 'true' ->
			%% Line 686
			case S of
			  <{'state',_cor732,_cor733,_cor734,_cor735,_cor736,_cor737,_cor738,_cor739}> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'setelement'
				      (9, S, Error)
			      in  apply 'loop'/1
				      (_cor7)
			  ( <_cor740> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 688
	  <{From,{'log',B}},S> when 'true' ->
	      %% Line 689
	      case call 'erlang':'get'
		       ('log') of
		%% Line 690
		<L = {'log',_cor741,_cor742,_cor743,_cor744,_cor745,_cor746,_cor747,_cor748,_cor749,_cor750,_cor751,_cor752,_cor753,_cor754}>
		    when call 'erlang':'=:='
			  (_cor751,
			   'read_only') ->
		    %% Line 691
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor742}}, S)
		%% Line 692
		<L = {'log',_cor769,_cor770,_cor771,_cor772,_cor773,_cor774,_cor775,_cor776,_cor777,_cor778,_cor779,_cor780,_cor781,_cor782}>
		    when let <_cor22> =
			  call 'erlang':'=:='
			      (_cor769, 'ok')
		      in  let <_cor25> =
			      call 'erlang':'=:='
				  (_cor776, 'internal')
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'and'
								     -| ['compiler_generated'] )
				    (_cor22, _cor25)
				-| ['compiler_generated'] ) ->
		    let <_cor26> =
			%% Line 693
			call 'erlang':'iolist_size'
			    (B)
		    in  let <_cor2> =
			    %% Line 693
			    [B|[]]
			in  %% Line 1042
			    ( case <S,From,( _cor2
					     -| ['compiler_generated'] ),_cor26> of
				( <( _fol433 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor20
										  -| ['compiler_generated'] ),( _cor21
														-| ['compiler_generated'] ),( _cor22
																	      -| ['compiler_generated'] ),( _cor23
																					    -| ['compiler_generated'] ),( _cor24
																									  -| ['compiler_generated'] ),( _cor25
																													-| ['compiler_generated'] ),_fol434,( CE
																																	      -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( _X_Bins
												 -| ['compiler_generated'] ),( _X_Sz
															       -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=/='
									       -| ['compiler_generated'] )
					      (( CE
						 -| ['compiler_generated'] ),
					       ( 'ok'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( let <_cor5> =
					    %% Line 1043
					    ( apply ( 'cache_error'/2
						      -| ['compiler_generated'] )
						  (_fol433, ( Pids
							      -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  %% Line 1043
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor5
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1044
				( <( _fol435 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor27
										  -| ['compiler_generated'] ),( _cor28
														-| ['compiler_generated'] ),( _cor29
																	      -| ['compiler_generated'] ),( _cor30
																					    -| ['compiler_generated'] ),( _cor31
																									  -| ['compiler_generated'] ),( _cor32
																													-| ['compiler_generated'] ),( _cor33
																																      -| ['compiler_generated'] ),( _cor34
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '>'
									       -| ['compiler_generated'] )
					      (( Sz
						 -| ['compiler_generated'] ),
					       65536)
					  -| ['compiler_generated'] ) ->
				      ( let <_cor7> =
					    %% Line 1045
					    ( apply ( 'log_end'/4
						      -| ['compiler_generated'] )
						  (_fol435, ( Pids
							      -| ['compiler_generated'] ), ( Bins
											     -| ['compiler_generated'] ), [])
					      -| ['compiler_generated'] )
					in  %% Line 1045
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor7
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1046
				( <( _fol436 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor35
										  -| ['compiler_generated'] ),( []
														-| ['compiler_generated'] ),( _cor36
																	      -| ['compiler_generated'] ),( _cor37
																					    -| ['compiler_generated'] ),( _cor38
																									  -| ['compiler_generated'] ),( _cor39
																													-| ['compiler_generated'] ),( _cor40
																																      -| ['compiler_generated'] ),( _cor41
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      %% Line 1047
				      ( receive
					  %% Line 1048
					  ( <( Message
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_cor9> =
						      %% Line 1049
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'get'
											     -| ['compiler_generated'] )
							    (( 'log'
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1049
						      ( apply ( 'log_loop'/7
								-| ['compiler_generated'] )
							    (( Message
							       -| ['compiler_generated'] ), ( Pids
											      -| ['compiler_generated'] ), ( Bins
															     -| ['compiler_generated'] ), [], ( Sz
																				-| ['compiler_generated'] ), _fol436, ( _cor9
																									-| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					after %% Line 1050
					      ( 0
						-| ['compiler_generated'] ) ->
					  ( let <_cor8> =
						%% Line 1051
						( apply ( 'log_end'/4
							  -| ['compiler_generated'] )
						      (_fol436, ( Pids
								  -| ['compiler_generated'] ), ( Bins
												 -| ['compiler_generated'] ), [])
						  -| ['compiler_generated'] )
					    in  %% Line 1051
						( apply ( 'loop'/1
							  -| ['compiler_generated'] )
						      (( _cor8
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1053
				( <( _fol437 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor42
										  -| ['compiler_generated'] ),( [( M
														   -| ['compiler_generated'] )|( Ms
																		 -| ['compiler_generated'] )]
														-| ['compiler_generated'] ),( _cor43
																	      -| ['compiler_generated'] ),( _cor44
																					    -| ['compiler_generated'] ),( _cor45
																									  -| ['compiler_generated'] ),( _cor46
																													-| ['compiler_generated'] ),( _cor47
																																      -| ['compiler_generated'] ),( _cor48
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      ( let <_cor12> =
					    %% Line 1054
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'setelement'
										   -| ['compiler_generated'] )
						  (( 3
						     -| ['compiler_generated'] ), _fol437, ( Ms
											     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor14> =
						  %% Line 1055
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'get'
											 -| ['compiler_generated'] )
							(( 'log'
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1055
						  ( apply ( 'log_loop'/7
							    -| ['compiler_generated'] )
							(( M
							   -| ['compiler_generated'] ), ( Pids
											  -| ['compiler_generated'] ), ( Bins
															 -| ['compiler_generated'] ), [], ( Sz
																			    -| ['compiler_generated'] ), ( _cor12
																							   -| ['compiler_generated'] ), ( _cor14
																											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor19
				     -| ['compiler_generated'] ),( _cor18
								   -| ['compiler_generated'] ),( _cor17
												 -| ['compiler_generated'] ),( _cor15
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),( _cor19
										-| ['compiler_generated'] ),( _cor18
													      -| ['compiler_generated'] ),( _cor17
																	    -| ['compiler_generated'] ),[],( _cor15
																					     -| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 694
		<L = {'log',_cor783,_cor784,_cor785,_cor786,_cor787,_cor788,_cor789,_cor790,_cor791,_cor792,_cor793,_cor794,_cor795,_cor796}>
		    when let <_cor32> =
			  call 'erlang':'=:='
			      (_cor783, 'ok')
		      in  let <_cor35> =
			      call 'erlang':'=:='
				  (_cor790, 'external')
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'and'
								     -| ['compiler_generated'] )
				    (_cor32, _cor35)
				-| ['compiler_generated'] ) ->
		    %% Line 695
		    apply 'reply'/3
			(From, {'error',{'format_external',_cor784}}, S)
		%% Line 696
		<L = {'log',_cor811,_cor812,_cor813,_cor814,_cor815,_cor816,_cor817,_cor818,_cor819,_cor820,_cor821,_cor822,_cor823,_cor824}>
		    when call 'erlang':'=:='
			  (_cor811,
			   {'blocked','false'}) ->
		    %% Line 697
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor812}}, S)
		%% Line 698
		<L = {'log',_cor839,_cor840,_cor841,_cor842,_cor843,_cor844,_cor845,_cor846,_cor847,_cor848,_cor849,_cor850,_cor851,_cor852}>
		    when call 'erlang':'=:='
			  (_cor841,
			   From) ->
		    %% Line 699
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor840}}, S)
		%% Line 700
		<_cor867> when 'true' ->
		    %% Line 701
		    ( case S of
			( <( {'state',_rec60,_cor868,_cor869,_cor870,_cor871,_cor872,_cor873,_cor874}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec58> =
				  [{From,{'log',B}}|_rec60]
			      in  let <_cor59> =
				      call 'erlang':'setelement'
					  (2, S, _rec58)
				  in  apply 'loop'/1
					  (_cor59)
			  -| ['compiler_generated'] )
			( <_cor875> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 703
	  <{From,{'blog',B}},S> when 'true' ->
	      %% Line 704
	      case call 'erlang':'get'
		       ('log') of
		%% Line 705
		<L = {'log',_cor885,_cor886,_cor887,_cor888,_cor889,_cor890,_cor891,_cor892,_cor893,_cor894,_cor895,_cor896,_cor897,_cor898}>
		    when call 'erlang':'=:='
			  (_cor895,
			   'read_only') ->
		    %% Line 706
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor886}}, S)
		%% Line 707
		<L = {'log',_cor913,_cor914,_cor915,_cor916,_cor917,_cor918,_cor919,_cor920,_cor921,_cor922,_cor923,_cor924,_cor925,_cor926}>
		    when call 'erlang':'=:='
			  (_cor913,
			   'ok') ->
		    let <_cor75> =
			%% Line 708
			call 'erlang':'iolist_size'
			    (B)
		    in  let <_cor2> =
			    %% Line 708
			    [B|[]]
			in  %% Line 1042
			    ( case <S,From,( _cor2
					     -| ['compiler_generated'] ),_cor75> of
				( <( _fol593 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor20
										  -| ['compiler_generated'] ),( _cor21
														-| ['compiler_generated'] ),( _cor22
																	      -| ['compiler_generated'] ),( _cor23
																					    -| ['compiler_generated'] ),( _cor24
																									  -| ['compiler_generated'] ),( _cor25
																													-| ['compiler_generated'] ),( _cor26
																																      -| ['compiler_generated'] ),( CE
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( _X_Bins
												 -| ['compiler_generated'] ),( _X_Sz
															       -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=/='
									       -| ['compiler_generated'] )
					      (( CE
						 -| ['compiler_generated'] ),
					       ( 'ok'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( let <_cor5> =
					    %% Line 1043
					    ( apply ( 'cache_error'/2
						      -| ['compiler_generated'] )
						  (_fol593, ( Pids
							      -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  %% Line 1043
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor5
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1044
				( <( _fol594 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor27
										  -| ['compiler_generated'] ),( _cor28
														-| ['compiler_generated'] ),( _cor29
																	      -| ['compiler_generated'] ),( _cor30
																					    -| ['compiler_generated'] ),( _cor31
																									  -| ['compiler_generated'] ),( _cor32
																													-| ['compiler_generated'] ),( _cor33
																																      -| ['compiler_generated'] ),( _cor34
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '>'
									       -| ['compiler_generated'] )
					      (( Sz
						 -| ['compiler_generated'] ),
					       65536)
					  -| ['compiler_generated'] ) ->
				      ( let <_cor7> =
					    %% Line 1045
					    ( apply ( 'log_end'/4
						      -| ['compiler_generated'] )
						  (_fol594, ( Pids
							      -| ['compiler_generated'] ), ( Bins
											     -| ['compiler_generated'] ), [])
					      -| ['compiler_generated'] )
					in  %% Line 1045
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor7
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1046
				( <( _fol595 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor35
										  -| ['compiler_generated'] ),( []
														-| ['compiler_generated'] ),( _cor36
																	      -| ['compiler_generated'] ),( _cor37
																					    -| ['compiler_generated'] ),( _cor38
																									  -| ['compiler_generated'] ),( _cor39
																													-| ['compiler_generated'] ),( _cor40
																																      -| ['compiler_generated'] ),( _cor41
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      %% Line 1047
				      ( receive
					  %% Line 1048
					  ( <( Message
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_cor9> =
						      %% Line 1049
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'get'
											     -| ['compiler_generated'] )
							    (( 'log'
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1049
						      ( apply ( 'log_loop'/7
								-| ['compiler_generated'] )
							    (( Message
							       -| ['compiler_generated'] ), ( Pids
											      -| ['compiler_generated'] ), ( Bins
															     -| ['compiler_generated'] ), [], ( Sz
																				-| ['compiler_generated'] ), _fol595, ( _cor9
																									-| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					after %% Line 1050
					      ( 0
						-| ['compiler_generated'] ) ->
					  ( let <_cor8> =
						%% Line 1051
						( apply ( 'log_end'/4
							  -| ['compiler_generated'] )
						      (_fol595, ( Pids
								  -| ['compiler_generated'] ), ( Bins
												 -| ['compiler_generated'] ), [])
						  -| ['compiler_generated'] )
					    in  %% Line 1051
						( apply ( 'loop'/1
							  -| ['compiler_generated'] )
						      (( _cor8
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1053
				( <( _fol596 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor42
										  -| ['compiler_generated'] ),( [( M
														   -| ['compiler_generated'] )|( Ms
																		 -| ['compiler_generated'] )]
														-| ['compiler_generated'] ),( _cor43
																	      -| ['compiler_generated'] ),( _cor44
																					    -| ['compiler_generated'] ),( _cor45
																									  -| ['compiler_generated'] ),( _cor46
																													-| ['compiler_generated'] ),( _cor47
																																      -| ['compiler_generated'] ),( _cor48
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Pids
								   -| ['compiler_generated'] ),( Bins
												 -| ['compiler_generated'] ),( Sz
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      ( let <_cor12> =
					    %% Line 1054
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'setelement'
										   -| ['compiler_generated'] )
						  (( 3
						     -| ['compiler_generated'] ), _fol596, ( Ms
											     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor14> =
						  %% Line 1055
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'get'
											 -| ['compiler_generated'] )
							(( 'log'
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1055
						  ( apply ( 'log_loop'/7
							    -| ['compiler_generated'] )
							(( M
							   -| ['compiler_generated'] ), ( Pids
											  -| ['compiler_generated'] ), ( Bins
															 -| ['compiler_generated'] ), [], ( Sz
																			    -| ['compiler_generated'] ), ( _cor12
																							   -| ['compiler_generated'] ), ( _cor14
																											  -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor19
				     -| ['compiler_generated'] ),( _cor18
								   -| ['compiler_generated'] ),( _cor17
												 -| ['compiler_generated'] ),( _cor15
															       -| ['compiler_generated'] )> when ( 'true'
																				   -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),( _cor19
										-| ['compiler_generated'] ),( _cor18
													      -| ['compiler_generated'] ),( _cor17
																	    -| ['compiler_generated'] ),[],( _cor15
																					     -| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 709
		<L = {'log',_cor927,_cor928,_cor929,_cor930,_cor931,_cor932,_cor933,_cor934,_cor935,_cor936,_cor937,_cor938,_cor939,_cor940}>
		    when call 'erlang':'=:='
			  (_cor927,
			   {'blocked','false'}) ->
		    %% Line 710
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor928}}, S)
		%% Line 711
		<L = {'log',_cor955,_cor956,_cor957,_cor958,_cor959,_cor960,_cor961,_cor962,_cor963,_cor964,_cor965,_cor966,_cor967,_cor968}>
		    when call 'erlang':'=:='
			  (_cor957,
			   From) ->
		    %% Line 712
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor956}}, S)
		%% Line 713
		<_cor983> when 'true' ->
		    %% Line 714
		    ( case S of
			( <( {'state',_rec66,_cor984,_cor985,_cor986,_cor987,_cor988,_cor989,_cor990}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec64> =
				  [{From,{'blog',B}}|_rec66]
			      in  let <_cor97> =
				      call 'erlang':'setelement'
					  (2, S, _rec64)
				  in  apply 'loop'/1
					  (_cor97)
			  -| ['compiler_generated'] )
			( <_cor991> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 716
	  <{'alog',B},S> when 'true' ->
	      %% Line 717
	      case call 'erlang':'get'
		       ('log') of
		%% Line 718
		<L = {'log',_cor1001,_cor1002,_cor1003,_cor1004,_cor1005,_cor1006,_cor1007,_cor1008,_cor1009,_cor1010,_cor1011,_cor1012,_cor1013,_cor1014}>
		    when call 'erlang':'=:='
			  (_cor1011,
			   'read_only') ->
		    do  %% Line 719
			apply 'notify_owners'/1
			    ({'read_only',B})
			%% Line 720
			apply 'loop'/1
			    (S)
		%% Line 721
		<L = {'log',_cor1015,_cor1016,_cor1017,_cor1018,_cor1019,_cor1020,_cor1021,_cor1022,_cor1023,_cor1024,_cor1025,_cor1026,_cor1027,_cor1028}>
		    when let <_cor110> =
			  call 'erlang':'=:='
			      (_cor1015, 'ok')
		      in  let <_cor113> =
			      call 'erlang':'=:='
				  (_cor1022, 'internal')
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'and'
								     -| ['compiler_generated'] )
				    (_cor110, _cor113)
				-| ['compiler_generated'] ) ->
		    let <_cor114> =
			%% Line 722
			call 'erlang':'iolist_size'
			    (B)
		    in  let <_cor2> =
			    %% Line 722
			    [B|[]]
			in  %% Line 1042
			    ( case <S,( _cor2
					-| ['compiler_generated'] ),_cor114> of
				( <( _fol694 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor20
										  -| ['compiler_generated'] ),( _cor21
														-| ['compiler_generated'] ),( _cor22
																	      -| ['compiler_generated'] ),( _cor23
																					    -| ['compiler_generated'] ),( _cor24
																									  -| ['compiler_generated'] ),( _cor25
																													-| ['compiler_generated'] ),( _cor26
																																      -| ['compiler_generated'] ),( CE
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( _X_Bins
								   -| ['compiler_generated'] ),( _X_Sz
												 -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=/='
									       -| ['compiler_generated'] )
					      (( CE
						 -| ['compiler_generated'] ),
					       ( 'ok'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( let <_cor5> =
					    %% Line 1043
					    ( apply ( 'cache_error'/2
						      -| ['compiler_generated'] )
						  (_fol694, [])
					      -| ['compiler_generated'] )
					in  %% Line 1043
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor5
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1044
				( <( _fol695 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor27
										  -| ['compiler_generated'] ),( _cor28
														-| ['compiler_generated'] ),( _cor29
																	      -| ['compiler_generated'] ),( _cor30
																					    -| ['compiler_generated'] ),( _cor31
																									  -| ['compiler_generated'] ),( _cor32
																													-| ['compiler_generated'] ),( _cor33
																																      -| ['compiler_generated'] ),( _cor34
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '>'
									       -| ['compiler_generated'] )
					      (( Sz
						 -| ['compiler_generated'] ),
					       65536)
					  -| ['compiler_generated'] ) ->
				      ( let <_cor7> =
					    %% Line 1045
					    ( apply ( 'log_end'/4
						      -| ['compiler_generated'] )
						  (_fol695, [], ( Bins
								  -| ['compiler_generated'] ), [])
					      -| ['compiler_generated'] )
					in  %% Line 1045
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor7
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1046
				( <( _fol696 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor35
										  -| ['compiler_generated'] ),( []
														-| ['compiler_generated'] ),( _cor36
																	      -| ['compiler_generated'] ),( _cor37
																					    -| ['compiler_generated'] ),( _cor38
																									  -| ['compiler_generated'] ),( _cor39
																													-| ['compiler_generated'] ),( _cor40
																																      -| ['compiler_generated'] ),( _cor41
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      %% Line 1047
				      ( receive
					  %% Line 1048
					  ( <( Message
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_cor9> =
						      %% Line 1049
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'get'
											     -| ['compiler_generated'] )
							    (( 'log'
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1049
						      ( apply ( 'log_loop'/7
								-| ['compiler_generated'] )
							    (( Message
							       -| ['compiler_generated'] ), [], ( Bins
												  -| ['compiler_generated'] ), [], ( Sz
																     -| ['compiler_generated'] ), _fol696, ( _cor9
																					     -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					after %% Line 1050
					      ( 0
						-| ['compiler_generated'] ) ->
					  ( let <_cor8> =
						%% Line 1051
						( apply ( 'log_end'/4
							  -| ['compiler_generated'] )
						      (_fol696, [], ( Bins
								      -| ['compiler_generated'] ), [])
						  -| ['compiler_generated'] )
					    in  %% Line 1051
						( apply ( 'loop'/1
							  -| ['compiler_generated'] )
						      (( _cor8
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1053
				( <( _fol697 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor42
										  -| ['compiler_generated'] ),( [( M
														   -| ['compiler_generated'] )|( Ms
																		 -| ['compiler_generated'] )]
														-| ['compiler_generated'] ),( _cor43
																	      -| ['compiler_generated'] ),( _cor44
																					    -| ['compiler_generated'] ),( _cor45
																									  -| ['compiler_generated'] ),( _cor46
																													-| ['compiler_generated'] ),( _cor47
																																      -| ['compiler_generated'] ),( _cor48
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      ( let <_cor12> =
					    %% Line 1054
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'setelement'
										   -| ['compiler_generated'] )
						  (( 3
						     -| ['compiler_generated'] ), _fol697, ( Ms
											     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor14> =
						  %% Line 1055
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'get'
											 -| ['compiler_generated'] )
							(( 'log'
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1055
						  ( apply ( 'log_loop'/7
							    -| ['compiler_generated'] )
							(( M
							   -| ['compiler_generated'] ), [], ( Bins
											      -| ['compiler_generated'] ), [], ( Sz
																 -| ['compiler_generated'] ), ( _cor12
																				-| ['compiler_generated'] ), ( _cor14
																							       -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor19
				     -| ['compiler_generated'] ),( _cor17
								   -| ['compiler_generated'] ),( _cor15
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),( _cor19
										-| ['compiler_generated'] ),[],( _cor17
														 -| ['compiler_generated'] ),[],( _cor15
																		  -| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 723
		<L = {'log',_cor1029,_cor1030,_cor1031,_cor1032,_cor1033,_cor1034,_cor1035,_cor1036,_cor1037,_cor1038,_cor1039,_cor1040,_cor1041,_cor1042}>
		    when call 'erlang':'=:='
			  (_cor1029,
			   'ok') ->
		    do  %% Line 724
			apply 'notify_owners'/1
			    ({'format_external',B})
			%% Line 725
			apply 'loop'/1
			    (S)
		%% Line 726
		<L = {'log',_cor1043,_cor1044,_cor1045,_cor1046,_cor1047,_cor1048,_cor1049,_cor1050,_cor1051,_cor1052,_cor1053,_cor1054,_cor1055,_cor1056}>
		    when call 'erlang':'=:='
			  (_cor1043,
			   {'blocked','false'}) ->
		    do  %% Line 727
			apply 'notify_owners'/1
			    ({'blocked_log',B})
			%% Line 728
			apply 'loop'/1
			    (S)
		%% Line 729
		<_cor1057> when 'true' ->
		    %% Line 730
		    ( case S of
			( <( {'state',_rec69,_cor1058,_cor1059,_cor1060,_cor1061,_cor1062,_cor1063,_cor1064}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec67> =
				  [{'alog',B}|_rec69]
			      in  let <_cor132> =
				      call 'erlang':'setelement'
					  (2, S, _rec67)
				  in  apply 'loop'/1
					  (_cor132)
			  -| ['compiler_generated'] )
			( <_cor1065> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 732
	  <{'balog',B},S> when 'true' ->
	      %% Line 733
	      case call 'erlang':'get'
		       ('log') of
		%% Line 734
		<L = {'log',_cor1075,_cor1076,_cor1077,_cor1078,_cor1079,_cor1080,_cor1081,_cor1082,_cor1083,_cor1084,_cor1085,_cor1086,_cor1087,_cor1088}>
		    when call 'erlang':'=:='
			  (_cor1085,
			   'read_only') ->
		    do  %% Line 735
			apply 'notify_owners'/1
			    ({'read_only',B})
			%% Line 736
			apply 'loop'/1
			    (S)
		%% Line 737
		<L = {'log',_cor1089,_cor1090,_cor1091,_cor1092,_cor1093,_cor1094,_cor1095,_cor1096,_cor1097,_cor1098,_cor1099,_cor1100,_cor1101,_cor1102}>
		    when call 'erlang':'=:='
			  (_cor1089,
			   'ok') ->
		    let <_cor146> =
			%% Line 738
			call 'erlang':'iolist_size'
			    (B)
		    in  let <_cor2> =
			    %% Line 738
			    [B|[]]
			in  %% Line 1042
			    ( case <S,( _cor2
					-| ['compiler_generated'] ),_cor146> of
				( <( _fol737 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor20
										  -| ['compiler_generated'] ),( _cor21
														-| ['compiler_generated'] ),( _cor22
																	      -| ['compiler_generated'] ),( _cor23
																					    -| ['compiler_generated'] ),( _cor24
																									  -| ['compiler_generated'] ),( _cor25
																													-| ['compiler_generated'] ),( _cor26
																																      -| ['compiler_generated'] ),( CE
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( _X_Bins
								   -| ['compiler_generated'] ),( _X_Sz
												 -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '=/='
									       -| ['compiler_generated'] )
					      (( CE
						 -| ['compiler_generated'] ),
					       ( 'ok'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      ( let <_cor5> =
					    %% Line 1043
					    ( apply ( 'cache_error'/2
						      -| ['compiler_generated'] )
						  (_fol737, [])
					      -| ['compiler_generated'] )
					in  %% Line 1043
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor5
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1044
				( <( _fol738 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor27
										  -| ['compiler_generated'] ),( _cor28
														-| ['compiler_generated'] ),( _cor29
																	      -| ['compiler_generated'] ),( _cor30
																					    -| ['compiler_generated'] ),( _cor31
																									  -| ['compiler_generated'] ),( _cor32
																													-| ['compiler_generated'] ),( _cor33
																																      -| ['compiler_generated'] ),( _cor34
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( '>'
									       -| ['compiler_generated'] )
					      (( Sz
						 -| ['compiler_generated'] ),
					       65536)
					  -| ['compiler_generated'] ) ->
				      ( let <_cor7> =
					    %% Line 1045
					    ( apply ( 'log_end'/4
						      -| ['compiler_generated'] )
						  (_fol738, [], ( Bins
								  -| ['compiler_generated'] ), [])
					      -| ['compiler_generated'] )
					in  %% Line 1045
					    ( apply ( 'loop'/1
						      -| ['compiler_generated'] )
						  (( _cor7
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1046
				( <( _fol739 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor35
										  -| ['compiler_generated'] ),( []
														-| ['compiler_generated'] ),( _cor36
																	      -| ['compiler_generated'] ),( _cor37
																					    -| ['compiler_generated'] ),( _cor38
																									  -| ['compiler_generated'] ),( _cor39
																													-| ['compiler_generated'] ),( _cor40
																																      -| ['compiler_generated'] ),( _cor41
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      %% Line 1047
				      ( receive
					  %% Line 1048
					  ( <( Message
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_cor9> =
						      %% Line 1049
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'get'
											     -| ['compiler_generated'] )
							    (( 'log'
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  in  %% Line 1049
						      ( apply ( 'log_loop'/7
								-| ['compiler_generated'] )
							    (( Message
							       -| ['compiler_generated'] ), [], ( Bins
												  -| ['compiler_generated'] ), [], ( Sz
																     -| ['compiler_generated'] ), _fol739, ( _cor9
																					     -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					after %% Line 1050
					      ( 0
						-| ['compiler_generated'] ) ->
					  ( let <_cor8> =
						%% Line 1051
						( apply ( 'log_end'/4
							  -| ['compiler_generated'] )
						      (_fol739, [], ( Bins
								      -| ['compiler_generated'] ), [])
						  -| ['compiler_generated'] )
					    in  %% Line 1051
						( apply ( 'loop'/1
							  -| ['compiler_generated'] )
						      (( _cor8
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				%% Line 1053
				( <( _fol740 = ( {( 'state'
						    -| ['compiler_generated'] ),( _cor42
										  -| ['compiler_generated'] ),( [( M
														   -| ['compiler_generated'] )|( Ms
																		 -| ['compiler_generated'] )]
														-| ['compiler_generated'] ),( _cor43
																	      -| ['compiler_generated'] ),( _cor44
																					    -| ['compiler_generated'] ),( _cor45
																									  -| ['compiler_generated'] ),( _cor46
																													-| ['compiler_generated'] ),( _cor47
																																      -| ['compiler_generated'] ),( _cor48
																																				    -| ['compiler_generated'] )}
						 -| ['compiler_generated'] )
				     -| ['compiler_generated'] ),( Bins
								   -| ['compiler_generated'] ),( Sz
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      ( let <_cor12> =
					    %% Line 1054
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'setelement'
										   -| ['compiler_generated'] )
						  (( 3
						     -| ['compiler_generated'] ), _fol740, ( Ms
											     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( let <_cor14> =
						  %% Line 1055
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'get'
											 -| ['compiler_generated'] )
							(( 'log'
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      in  %% Line 1055
						  ( apply ( 'log_loop'/7
							    -| ['compiler_generated'] )
							(( M
							   -| ['compiler_generated'] ), [], ( Bins
											      -| ['compiler_generated'] ), [], ( Sz
																 -| ['compiler_generated'] ), ( _cor12
																				-| ['compiler_generated'] ), ( _cor14
																							       -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( _cor19
				     -| ['compiler_generated'] ),( _cor17
								   -| ['compiler_generated'] ),( _cor15
												 -| ['compiler_generated'] )> when ( 'true'
																     -| ['compiler_generated'] ) ->
				      ( primop ( 'match_fail'
						 -| ['compiler_generated'] )
					    (( {( 'function_clause'
						  -| ['compiler_generated'] ),( _cor19
										-| ['compiler_generated'] ),[],( _cor17
														 -| ['compiler_generated'] ),[],( _cor15
																		  -| ['compiler_generated'] )}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 739
		<L = {'log',_cor1103,_cor1104,_cor1105,_cor1106,_cor1107,_cor1108,_cor1109,_cor1110,_cor1111,_cor1112,_cor1113,_cor1114,_cor1115,_cor1116}>
		    when call 'erlang':'=:='
			  (_cor1103,
			   {'blocked','false'}) ->
		    do  %% Line 740
			apply 'notify_owners'/1
			    ({'blocked_log',B})
			%% Line 741
			apply 'loop'/1
			    (S)
		%% Line 742
		<_cor1117> when 'true' ->
		    %% Line 743
		    ( case S of
			( <( {'state',_rec72,_cor1118,_cor1119,_cor1120,_cor1121,_cor1122,_cor1123,_cor1124}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec70> =
				  [{'balog',B}|_rec72]
			      in  let <_cor158> =
				      call 'erlang':'setelement'
					  (2, S, _rec70)
				  in  apply 'loop'/1
					  (_cor158)
			  -| ['compiler_generated'] )
			( <_cor1125> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 745
	  <{From,{'block',QueueLogRecs}},S> when 'true' ->
	      %% Line 746
	      case call 'erlang':'get'
		       ('log') of
		%% Line 747
		<L = {'log',_cor1135,_cor1136,_cor1137,_cor1138,_cor1139,_cor1140,_cor1141,_cor1142,_cor1143,_cor1144,_cor1145,_cor1146,_cor1147,_cor1148}>
		    when call 'erlang':'=:='
			  (_cor1135,
			   'ok') ->
		    do  %% Line 748
			apply 'do_block'/3
			    (From, QueueLogRecs, L)
			%% Line 749
			apply 'reply'/3
			    (From, 'ok', S)
		%% Line 750
		<L = {'log',_cor1149,_cor1150,_cor1151,_cor1152,_cor1153,_cor1154,_cor1155,_cor1156,_cor1157,_cor1158,_cor1159,_cor1160,_cor1161,_cor1162}>
		    when call 'erlang':'=:='
			  (_cor1149,
			   {'blocked','false'}) ->
		    %% Line 751
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1150}}, S)
		%% Line 752
		<L = {'log',_cor1177,_cor1178,_cor1179,_cor1180,_cor1181,_cor1182,_cor1183,_cor1184,_cor1185,_cor1186,_cor1187,_cor1188,_cor1189,_cor1190}>
		    when call 'erlang':'=:='
			  (_cor1179,
			   From) ->
		    %% Line 753
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1178}}, S)
		%% Line 754
		<_cor1205> when 'true' ->
		    %% Line 756
		    ( case S of
			( <( {'state',_rec77,_cor1206,_cor1207,_cor1208,_cor1209,_cor1210,_cor1211,_cor1212}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec75> =
				  [{From,{'block',QueueLogRecs}}|_rec77]
			      in  let <_cor187> =
				      call 'erlang':'setelement'
					  (2, S, _rec75)
				  in  apply 'loop'/1
					  (_cor187)
			  -| ['compiler_generated'] )
			( <_cor1213> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 758
	  <{From,'unblock'},S> when 'true' ->
	      %% Line 759
	      case call 'erlang':'get'
		       ('log') of
		%% Line 760
		<L = {'log',_cor1223,_cor1224,_cor1225,_cor1226,_cor1227,_cor1228,_cor1229,_cor1230,_cor1231,_cor1232,_cor1233,_cor1234,_cor1235,_cor1236}>
		    when call 'erlang':'=:='
			  (_cor1223,
			   'ok') ->
		    %% Line 761
		    apply 'reply'/3
			(From, {'error',{'not_blocked',_cor1224}}, S)
		%% Line 762
		<L = {'log',_cor1251,_cor1252,_cor1253,_cor1254,_cor1255,_cor1256,_cor1257,_cor1258,_cor1259,_cor1260,_cor1261,_cor1262,_cor1263,_cor1264}>
		    when call 'erlang':'=:='
			  (_cor1253,
			   From) ->
		    let <S2> =
			%% Line 763
			apply 'do_unblock'/2
			    (L, S)
		    in  %% Line 764
			apply 'reply'/3
			    (From, 'ok', S2)
		%% Line 765
		<L> when 'true' ->
		    %% Line 766
		    ( case L of
			( <( {'log',_cor1265,_rec79,_cor1266,_cor1267,_cor1268,_cor1269,_cor1270,_cor1271,_cor1272,_cor1273,_cor1274,_cor1275,_cor1276,_cor1277}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'reply'/3
				  (From, {'error',{'not_blocked_by_pid',_rec79}}, S)
			  -| ['compiler_generated'] )
			( <_cor1278> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','log'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 768
	  <{From,'sync'},S> when 'true' ->
	      %% Line 769
	      case call 'erlang':'get'
		       ('log') of
		%% Line 770
		<L = {'log',_cor1279,_cor1280,_cor1281,_cor1282,_cor1283,_cor1284,_cor1285,_cor1286,_cor1287,_cor1288,_cor1289,_cor1290,_cor1291,_cor1292}>
		    when call 'erlang':'=:='
			  (_cor1289,
			   'read_only') ->
		    %% Line 771
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor1280}}, S)
		%% Line 772
		<L = {'log',_cor1307,_cor1308,_cor1309,_cor1310,_cor1311,_cor1312,_cor1313,_cor1314,_cor1315,_cor1316,_cor1317,_cor1318,_cor1319,_cor1320}>
		    when call 'erlang':'=:='
			  (_cor1307,
			   'ok') ->
		    %% Line 773
		    apply 'sync_loop'/2
			([From|[]], S)
		%% Line 774
		<L = {'log',_cor1321,_cor1322,_cor1323,_cor1324,_cor1325,_cor1326,_cor1327,_cor1328,_cor1329,_cor1330,_cor1331,_cor1332,_cor1333,_cor1334}>
		    when call 'erlang':'=:='
			  (_cor1321,
			   {'blocked','false'}) ->
		    %% Line 775
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1322}}, S)
		%% Line 776
		<L = {'log',_cor1349,_cor1350,_cor1351,_cor1352,_cor1353,_cor1354,_cor1355,_cor1356,_cor1357,_cor1358,_cor1359,_cor1360,_cor1361,_cor1362}>
		    when call 'erlang':'=:='
			  (_cor1351,
			   From) ->
		    %% Line 777
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1350}}, S)
		%% Line 778
		<_cor1377> when 'true' ->
		    %% Line 779
		    ( case S of
			( <( {'state',_rec85,_cor1378,_cor1379,_cor1380,_cor1381,_cor1382,_cor1383,_cor1384}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec83> =
				  [{From,'sync'}|_rec85]
			      in  let <_cor242> =
				      call 'erlang':'setelement'
					  (2, S, _rec83)
				  in  apply 'loop'/1
					  (_cor242)
			  -| ['compiler_generated'] )
			( <_cor1385> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 781
	  <{From,{'truncate',Head,F,A}},S> when 'true' ->
	      %% Line 782
	      case call 'erlang':'get'
		       ('log') of
		%% Line 783
		<L = {'log',_cor1395,_cor1396,_cor1397,_cor1398,_cor1399,_cor1400,_cor1401,_cor1402,_cor1403,_cor1404,_cor1405,_cor1406,_cor1407,_cor1408}>
		    when call 'erlang':'=:='
			  (_cor1405,
			   'read_only') ->
		    %% Line 784
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor1396}}, S)
		%% Line 785
		<L = {'log',_cor1423,_cor1424,_cor1425,_cor1426,_cor1427,_cor1428,_cor1429,_cor1430,_cor1431,_cor1432,_cor1433,_cor1434,_cor1435,_cor1436}>
		    when ( try
			    let <_cor257> =
				call 'erlang':'=:='
				    (_cor1423, 'ok')
			    in  ( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 9
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor263> =
					      ( call 'erlang':'element'
						    (9, S)
						-| ['compiler_generated'] )
					  in  let <_cor264> =
						  ( call 'erlang':'=/='
							(_cor263, 'ok')
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor257, _cor264)
						    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor266> =
			%% Line 786
			apply 'cache_error'/2
			    (S, [From|[]])
		    in  %% Line 786
			apply 'loop'/1
			    (_cor266)
		%% Line 787
		<L = {'log',_cor1437,_cor1438,_cor1439,_cor1440,_cor1441,_cor1442,_cor1443,_cor1444,_cor1445,_cor1446,_cor1447,_cor1448,_cor1449,_cor1450}>
		    when call 'erlang':'=:='
			  (_cor1437,
			   'ok') ->
		    let <H> =
			%% Line 788
			apply 'merge_head'/2
			    (Head, _cor1446)
		    in  let <_cor276> =
			    catch
				%% Line 789
				apply 'do_trunc'/2
				    (L, H)
			in  %% Line 789
			    case _cor276 of
			      %% Line 790
			      <'ok'> when 'true' ->
				  do  %% Line 791
				      call 'erlang':'erase'
					  ('is_full')
				      %% Line 792
				      ( case S of
					  ( <( {'state',_cor1465,_cor1466,_cor1467,_cor1468,_rec88,_cor1469,_cor1470,_cor1471}
					       -| ['compiler_generated'] )> when 'true' ->
						do  apply 'notify_owners'/1
							({'truncated',_rec88})
						    let <_cor279> =
							%% Line 793
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (Head,
								     'none') ->
							      0
							  <> when 'true' ->
							      1
							end
						    in  let <_rec89> =
							    %% Line 794
							    apply 'state_ok'/1
								(S)
							in  %% Line 794
							    case _rec89 of
							      <{'state',_cor1473,_cor1474,_cor1475,_cor1476,_cor1477,_cor1478,_cor1479,_cor1480}> when 'true' ->
								  let <_cor283> =
								      call 'erlang':'setelement'
									  (6, _rec89, _cor279)
								  in  apply 'reply'/3
									  (From, 'ok', _cor283)
							      ( <_cor1481> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
					    -| ['compiler_generated'] )
					  ( <_cor1472> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      %% Line 795
			      <Error> when 'true' ->
				  %% Line 796
				  apply 'do_exit'/4
				      (S, From, Error, {{'failed',Error},[{'disk_log',F,A}|[]]})
			    end
		%% Line 798
		<L = {'log',_cor1482,_cor1483,_cor1484,_cor1485,_cor1486,_cor1487,_cor1488,_cor1489,_cor1490,_cor1491,_cor1492,_cor1493,_cor1494,_cor1495}>
		    when call 'erlang':'=:='
			  (_cor1482,
			   {'blocked','false'}) ->
		    %% Line 799
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1483}}, S)
		%% Line 800
		<L = {'log',_cor1510,_cor1511,_cor1512,_cor1513,_cor1514,_cor1515,_cor1516,_cor1517,_cor1518,_cor1519,_cor1520,_cor1521,_cor1522,_cor1523}>
		    when call 'erlang':'=:='
			  (_cor1512,
			   From) ->
		    %% Line 801
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1511}}, S)
		%% Line 802
		<_cor1538> when 'true' ->
		    %% Line 804
		    ( case S of
			( <( {'state',_rec94,_cor1539,_cor1540,_cor1541,_cor1542,_cor1543,_cor1544,_cor1545}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec92> =
				  [{From,{'truncate',Head,F,A}}|_rec94]
			      in  let <_cor306> =
				      call 'erlang':'setelement'
					  (2, S, _rec92)
				  in  apply 'loop'/1
					  (_cor306)
			  -| ['compiler_generated'] )
			( <_cor1546> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 806
	  <{From,{'chunk',Pos,B,N}},S> when 'true' ->
	      %% Line 807
	      case call 'erlang':'get'
		       ('log') of
		%% Line 808
		<L = {'log',_cor1556,_cor1557,_cor1558,_cor1559,_cor1560,_cor1561,_cor1562,_cor1563,_cor1564,_cor1565,_cor1566,_cor1567,_cor1568,_cor1569}>
		    when ( try
			    let <_cor313> =
				call 'erlang':'=:='
				    (_cor1556, 'ok')
			    in  ( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 9
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor319> =
					      ( call 'erlang':'element'
						    (9, S)
						-| ['compiler_generated'] )
					  in  let <_cor320> =
						  ( call 'erlang':'=/='
							(_cor319, 'ok')
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor313, _cor320)
						    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor322> =
			%% Line 809
			apply 'cache_error'/2
			    (S, [From|[]])
		    in  %% Line 809
			apply 'loop'/1
			    (_cor322)
		%% Line 810
		<L = {'log',_cor1570,_cor1571,_cor1572,_cor1573,_cor1574,_cor1575,_cor1576,_cor1577,_cor1578,_cor1579,_cor1580,_cor1581,_cor1582,_cor1583}>
		    when call 'erlang':'=:='
			  (_cor1570,
			   'ok') ->
		    let <R> =
			%% Line 811
			apply 'do_chunk'/4
			    (L, Pos, B, N)
		    in  %% Line 812
			apply 'reply'/3
			    (From, R, S)
		%% Line 813
		<L = {'log',_cor1584,_cor1585,_cor1586,_cor1587,_cor1588,_cor1589,_cor1590,_cor1591,_cor1592,_cor1593,_cor1594,_cor1595,_cor1596,_cor1597}>
		    when call 'erlang':'=:='
			  (_cor1586,
			   From) ->
		    let <R> =
			%% Line 814
			apply 'do_chunk'/4
			    (L, Pos, B, N)
		    in  %% Line 815
			apply 'reply'/3
			    (From, R, S)
		%% Line 816
		<L = {'log',_cor1598,_cor1599,_cor1600,_cor1601,_cor1602,_cor1603,_cor1604,_cor1605,_cor1606,_cor1607,_cor1608,_cor1609,_cor1610,_cor1611}>
		    when call 'erlang':'=:='
			  (_cor1598,
			   {'blocked','false'}) ->
		    %% Line 817
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1599}}, S)
		%% Line 818
		<_X_L> when 'true' ->
		    %% Line 819
		    ( case S of
			( <( {'state',_rec98,_cor1626,_cor1627,_cor1628,_cor1629,_cor1630,_cor1631,_cor1632}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec96> =
				  [{From,{'chunk',Pos,B,N}}|_rec98]
			      in  let <_cor350> =
				      call 'erlang':'setelement'
					  (2, S, _rec96)
				  in  apply 'loop'/1
					  (_cor350)
			  -| ['compiler_generated'] )
			( <_cor1633> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 821
	  <{From,{'chunk_step',Pos,N}},S> when 'true' ->
	      %% Line 822
	      case call 'erlang':'get'
		       ('log') of
		%% Line 823
		<L = {'log',_cor1643,_cor1644,_cor1645,_cor1646,_cor1647,_cor1648,_cor1649,_cor1650,_cor1651,_cor1652,_cor1653,_cor1654,_cor1655,_cor1656}>
		    when ( try
			    let <_cor357> =
				call 'erlang':'=:='
				    (_cor1643, 'ok')
			    in  ( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 9
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor363> =
					      ( call 'erlang':'element'
						    (9, S)
						-| ['compiler_generated'] )
					  in  let <_cor364> =
						  ( call 'erlang':'=/='
							(_cor363, 'ok')
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor357, _cor364)
						    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor366> =
			%% Line 824
			apply 'cache_error'/2
			    (S, [From|[]])
		    in  %% Line 824
			apply 'loop'/1
			    (_cor366)
		%% Line 825
		<L = {'log',_cor1657,_cor1658,_cor1659,_cor1660,_cor1661,_cor1662,_cor1663,_cor1664,_cor1665,_cor1666,_cor1667,_cor1668,_cor1669,_cor1670}>
		    when call 'erlang':'=:='
			  (_cor1657,
			   'ok') ->
		    let <R> =
			%% Line 826
			apply 'do_chunk_step'/3
			    (L, Pos, N)
		    in  %% Line 827
			apply 'reply'/3
			    (From, R, S)
		%% Line 828
		<L = {'log',_cor1671,_cor1672,_cor1673,_cor1674,_cor1675,_cor1676,_cor1677,_cor1678,_cor1679,_cor1680,_cor1681,_cor1682,_cor1683,_cor1684}>
		    when call 'erlang':'=:='
			  (_cor1673,
			   From) ->
		    let <R> =
			%% Line 829
			apply 'do_chunk_step'/3
			    (L, Pos, N)
		    in  %% Line 830
			apply 'reply'/3
			    (From, R, S)
		%% Line 831
		<L = {'log',_cor1685,_cor1686,_cor1687,_cor1688,_cor1689,_cor1690,_cor1691,_cor1692,_cor1693,_cor1694,_cor1695,_cor1696,_cor1697,_cor1698}>
		    when call 'erlang':'=:='
			  (_cor1685,
			   {'blocked','false'}) ->
		    %% Line 832
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1686}}, S)
		%% Line 833
		<_cor1713> when 'true' ->
		    %% Line 835
		    ( case S of
			( <( {'state',_rec102,_cor1714,_cor1715,_cor1716,_cor1717,_cor1718,_cor1719,_cor1720}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec100> =
				  [{From,{'chunk_step',Pos,N}}|_rec102]
			      in  let <_cor394> =
				      call 'erlang':'setelement'
					  (2, S, _rec100)
				  in  apply 'loop'/1
					  (_cor394)
			  -| ['compiler_generated'] )
			( <_cor1721> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 837
	  <{From,{'change_notify',Pid,NewNotify}},S> when 'true' ->
	      %% Line 838
	      case call 'erlang':'get'
		       ('log') of
		%% Line 839
		<L = {'log',_cor1731,_cor1732,_cor1733,_cor1734,_cor1735,_cor1736,_cor1737,_cor1738,_cor1739,_cor1740,_cor1741,_cor1742,_cor1743,_cor1744}>
		    when call 'erlang':'=:='
			  (_cor1731,
			   'ok') ->
		    %% Line 840
		    case apply 'do_change_notify'/3
			     (L, Pid, NewNotify) of
		      %% Line 841
		      <{'ok',L1}> when 'true' ->
			  do  %% Line 842
			      call 'erlang':'put'
				  ('log', L1)
			      %% Line 843
			      apply 'reply'/3
				  (From, 'ok', S)
		      %% Line 844
		      <Error> when 'true' ->
			  %% Line 845
			  apply 'reply'/3
			      (From, Error, S)
		    end
		%% Line 847
		<L = {'log',_cor1745,_cor1746,_cor1747,_cor1748,_cor1749,_cor1750,_cor1751,_cor1752,_cor1753,_cor1754,_cor1755,_cor1756,_cor1757,_cor1758}>
		    when call 'erlang':'=:='
			  (_cor1745,
			   {'blocked','false'}) ->
		    %% Line 848
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1746}}, S)
		%% Line 849
		<L = {'log',_cor1773,_cor1774,_cor1775,_cor1776,_cor1777,_cor1778,_cor1779,_cor1780,_cor1781,_cor1782,_cor1783,_cor1784,_cor1785,_cor1786}>
		    when call 'erlang':'=:='
			  (_cor1775,
			   From) ->
		    %% Line 850
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1774}}, S)
		%% Line 851
		<_cor1801> when 'true' ->
		    %% Line 853
		    ( case S of
			( <( {'state',_rec107,_cor1802,_cor1803,_cor1804,_cor1805,_cor1806,_cor1807,_cor1808}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec105> =
				  [{From,{'change_notify',Pid,NewNotify}}|_rec107]
			      in  let <_cor424> =
				      call 'erlang':'setelement'
					  (2, S, _rec105)
				  in  apply 'loop'/1
					  (_cor424)
			  -| ['compiler_generated'] )
			( <_cor1809> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 855
	  <{From,{'change_header',NewHead}},S> when 'true' ->
	      %% Line 856
	      case call 'erlang':'get'
		       ('log') of
		%% Line 857
		<L = {'log',_cor1819,_cor1820,_cor1821,_cor1822,_cor1823,_cor1824,_cor1825,_cor1826,_cor1827,_cor1828,_cor1829,_cor1830,_cor1831,_cor1832}>
		    when call 'erlang':'=:='
			  (_cor1829,
			   'read_only') ->
		    %% Line 858
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor1820}}, S)
		%% Line 859
		<L = {'log',_cor1847,_cor1848,_cor1849,_cor1850,_cor1851,_cor1852,_cor1853,_cor1854,_cor1855,_cor1856,_cor1857,_cor1858,_cor1859,_cor1860}>
		    when call 'erlang':'=:='
			  (_cor1847,
			   'ok') ->
		    %% Line 860
		    case apply 'check_head'/2
			     (NewHead, _cor1854) of
		      %% Line 861
		      <{'ok',Head}> when 'true' ->
			  let <_rec110> =
			      %% Line 862
			      apply 'mk_head'/2
				  (Head, _cor1854)
			  in  let <_cor447> =
				  %% Line 862
				  call 'erlang':'setelement'
				      (11, L, _rec110)
			      in  do  %% Line 862
				      call 'erlang':'put'
					  ('log', _cor447)
				      %% Line 863
				      apply 'reply'/3
					  (From, 'ok', S)
		      %% Line 864
		      <Error> when 'true' ->
			  %% Line 865
			  apply 'reply'/3
			      (From, Error, S)
		    end
		%% Line 867
		<L = {'log',_cor1904,_cor1905,_cor1906,_cor1907,_cor1908,_cor1909,_cor1910,_cor1911,_cor1912,_cor1913,_cor1914,_cor1915,_cor1916,_cor1917}>
		    when call 'erlang':'=:='
			  (_cor1904,
			   {'blocked','false'}) ->
		    %% Line 868
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1905}}, S)
		%% Line 869
		<L = {'log',_cor1932,_cor1933,_cor1934,_cor1935,_cor1936,_cor1937,_cor1938,_cor1939,_cor1940,_cor1941,_cor1942,_cor1943,_cor1944,_cor1945}>
		    when call 'erlang':'=:='
			  (_cor1934,
			   From) ->
		    %% Line 870
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor1933}}, S)
		%% Line 871
		<_cor1960> when 'true' ->
		    %% Line 873
		    ( case S of
			( <( {'state',_rec117,_cor1961,_cor1962,_cor1963,_cor1964,_cor1965,_cor1966,_cor1967}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec115> =
				  [{From,{'change_header',NewHead}}|_rec117]
			      in  let <_cor470> =
				      call 'erlang':'setelement'
					  (2, S, _rec115)
				  in  apply 'loop'/1
					  (_cor470)
			  -| ['compiler_generated'] )
			( <_cor1968> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 875
	  <{From,{'change_size',NewSize}},S> when 'true' ->
	      %% Line 876
	      case call 'erlang':'get'
		       ('log') of
		%% Line 877
		<L = {'log',_cor1978,_cor1979,_cor1980,_cor1981,_cor1982,_cor1983,_cor1984,_cor1985,_cor1986,_cor1987,_cor1988,_cor1989,_cor1990,_cor1991}>
		    when call 'erlang':'=:='
			  (_cor1988,
			   'read_only') ->
		    %% Line 878
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor1979}}, S)
		%% Line 879
		<L = {'log',_cor2006,_cor2007,_cor2008,_cor2009,_cor2010,_cor2011,_cor2012,_cor2013,_cor2014,_cor2015,_cor2016,_cor2017,_cor2018,_cor2019}>
		    when call 'erlang':'=:='
			  (_cor2006,
			   'ok') ->
		    %% Line 880
		    case apply 'check_size'/2
			     (_cor2012, NewSize) of
		      %% Line 881
		      <'ok'> when 'true' ->
			  let <_cor488> =
			      catch
				  %% Line 882
				  apply 'do_change_size'/2
				      (L, NewSize)
			  in  %% Line 882
			      case _cor488 of
				%% Line 883
				<'ok'> when 'true' ->
				    %% Line 884
				    apply 'reply'/3
					(From, 'ok', S)
				%% Line 885
				<{'big',CurSize}> when 'true' ->
				    %% Line 886
				    apply 'reply'/3
					(From, %% Line 887
					       {'error',%% Line 888
							{'new_size_too_small',_cor2007,CurSize}}, %% Line 889
												  S)
				%% Line 890
				<Else> when 'true' ->
				    let <_cor491> =
					%% Line 891
					apply 'state_err'/2
					    (S, Else)
				    in  %% Line 891
					apply 'reply'/3
					    (From, Else, _cor491)
			      end
		      %% Line 893
		      <'not_ok'> when 'true' ->
			  %% Line 894
			  apply 'reply'/3
			      (From, {'error',{'badarg','size'}}, S)
		      ( <_cor493> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor493})
			-| ['compiler_generated'] )
		    end
		%% Line 896
		<L = {'log',_cor2048,_cor2049,_cor2050,_cor2051,_cor2052,_cor2053,_cor2054,_cor2055,_cor2056,_cor2057,_cor2058,_cor2059,_cor2060,_cor2061}>
		    when call 'erlang':'=:='
			  (_cor2048,
			   {'blocked','false'}) ->
		    %% Line 897
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor2049}}, S)
		%% Line 898
		<L = {'log',_cor2076,_cor2077,_cor2078,_cor2079,_cor2080,_cor2081,_cor2082,_cor2083,_cor2084,_cor2085,_cor2086,_cor2087,_cor2088,_cor2089}>
		    when call 'erlang':'=:='
			  (_cor2078,
			   From) ->
		    %% Line 899
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor2077}}, S)
		%% Line 900
		<_cor2104> when 'true' ->
		    %% Line 902
		    ( case S of
			( <( {'state',_rec125,_cor2105,_cor2106,_cor2107,_cor2108,_cor2109,_cor2110,_cor2111}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec123> =
				  [{From,{'change_size',NewSize}}|_rec125]
			      in  let <_cor515> =
				      call 'erlang':'setelement'
					  (2, S, _rec123)
				  in  apply 'loop'/1
					  (_cor515)
			  -| ['compiler_generated'] )
			( <_cor2112> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 904
	  <{From,'inc_wrap_file'},S> when 'true' ->
	      %% Line 905
	      case call 'erlang':'get'
		       ('log') of
		%% Line 906
		<L = {'log',_cor2122,_cor2123,_cor2124,_cor2125,_cor2126,_cor2127,_cor2128,_cor2129,_cor2130,_cor2131,_cor2132,_cor2133,_cor2134,_cor2135}>
		    when call 'erlang':'=:='
			  (_cor2132,
			   'read_only') ->
		    %% Line 907
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor2123}}, S)
		%% Line 908
		<L = {'log',_cor2150,_cor2151,_cor2152,_cor2153,_cor2154,_cor2155,_cor2156,_cor2157,_cor2158,_cor2159,_cor2160,_cor2161,_cor2162,_cor2163}>
		    when call 'erlang':'=:='
			  (_cor2156,
			   'halt') ->
		    %% Line 909
		    apply 'reply'/3
			(From, {'error',{'halt_log',_cor2151}}, S)
		%% Line 910
		<L = {'log',_cor2178,_cor2179,_cor2180,_cor2181,_cor2182,_cor2183,_cor2184,_cor2185,_cor2186,_cor2187,_cor2188,_cor2189,_cor2190,_cor2191}>
		    when ( try
			    let <_cor538> =
				call 'erlang':'=:='
				    (_cor2178, 'ok')
			    in  ( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 9
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor544> =
					      ( call 'erlang':'element'
						    (9, S)
						-| ['compiler_generated'] )
					  in  let <_cor545> =
						  ( call 'erlang':'=/='
							(_cor544, 'ok')
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor538, _cor545)
						    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor547> =
			%% Line 911
			apply 'cache_error'/2
			    (S, [From|[]])
		    in  %% Line 911
			apply 'loop'/1
			    (_cor547)
		%% Line 912
		<L = {'log',_cor2192,_cor2193,_cor2194,_cor2195,_cor2196,_cor2197,_cor2198,_cor2199,_cor2200,_cor2201,_cor2202,_cor2203,_cor2204,_cor2205}>
		    when call 'erlang':'=:='
			  (_cor2192,
			   'ok') ->
		    let <_cor554> =
			catch
			    %% Line 913
			    apply 'do_inc_wrap_file'/1
				(L)
		    in  %% Line 913
			case _cor554 of
			  %% Line 914
			  <{'ok',L2,Lost}> when 'true' ->
			      do  %% Line 915
				  call 'erlang':'put'
				      ('log', L2)
				  do  %% Line 916
				      apply 'notify_owners'/1
					  ({'wrap',Lost})
				      %% Line 917
				      ( case S of
					  ( <( {'state',_cor2206,_cor2207,_cor2208,_cor2209,_rec130,_cor2210,_cor2211,_cor2212}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_rec128> =
						    call 'erlang':'-'
							(_rec130, Lost)
						in  let <_cor560> =
							call 'erlang':'setelement'
							    (6, S, _rec128)
						    in  apply 'reply'/3
							    (From, 'ok', _cor560)
					    -| ['compiler_generated'] )
					  ( <_cor2213> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  %% Line 918
			  <{'error',Error,L2}> when 'true' ->
			      do  %% Line 919
				  call 'erlang':'put'
				      ('log', L2)
				  let <_cor561> =
				      %% Line 920
				      apply 'state_err'/2
					  (S, Error)
				  in  %% Line 920
				      apply 'reply'/3
					  (From, Error, _cor561)
			  ( <_cor562> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor562})
			    -| ['compiler_generated'] )
			end
		%% Line 922
		<L = {'log',_cor2223,_cor2224,_cor2225,_cor2226,_cor2227,_cor2228,_cor2229,_cor2230,_cor2231,_cor2232,_cor2233,_cor2234,_cor2235,_cor2236}>
		    when call 'erlang':'=:='
			  (_cor2223,
			   {'blocked','false'}) ->
		    %% Line 923
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor2224}}, S)
		%% Line 924
		<L = {'log',_cor2251,_cor2252,_cor2253,_cor2254,_cor2255,_cor2256,_cor2257,_cor2258,_cor2259,_cor2260,_cor2261,_cor2262,_cor2263,_cor2264}>
		    when call 'erlang':'=:='
			  (_cor2253,
			   From) ->
		    %% Line 925
		    apply 'reply'/3
			(From, {'error',{'blocked_log',_cor2252}}, S)
		%% Line 926
		<_cor2279> when 'true' ->
		    %% Line 927
		    ( case S of
			( <( {'state',_rec135,_cor2280,_cor2281,_cor2282,_cor2283,_cor2284,_cor2285,_cor2286}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec133> =
				  [{From,'inc_wrap_file'}|_rec135]
			      in  let <_cor584> =
				      call 'erlang':'setelement'
					  (2, S, _rec133)
				  in  apply 'loop'/1
					  (_cor584)
			  -| ['compiler_generated'] )
			( <_cor2287> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 929
	  <{From,{'reopen',NewFile,Head,F,A}},S> when 'true' ->
	      %% Line 930
	      case call 'erlang':'get'
		       ('log') of
		%% Line 931
		<L = {'log',_cor2297,_cor2298,_cor2299,_cor2300,_cor2301,_cor2302,_cor2303,_cor2304,_cor2305,_cor2306,_cor2307,_cor2308,_cor2309,_cor2310}>
		    when call 'erlang':'=:='
			  (_cor2307,
			   'read_only') ->
		    %% Line 932
		    apply 'reply'/3
			(From, {'error',{'read_only_mode',_cor2298}}, S)
		%% Line 933
		<L = {'log',_cor2325,_cor2326,_cor2327,_cor2328,_cor2329,_cor2330,_cor2331,_cor2332,_cor2333,_cor2334,_cor2335,_cor2336,_cor2337,_cor2338}>
		    when ( try
			    let <_cor599> =
				call 'erlang':'=:='
				    (_cor2325, 'ok')
			    in  ( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 9
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor605> =
					      ( call 'erlang':'element'
						    (9, S)
						-| ['compiler_generated'] )
					  in  let <_cor606> =
						  ( call 'erlang':'=/='
							(_cor605, 'ok')
						    -| ['compiler_generated'] )
					      in  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'and'
											 -| ['compiler_generated'] )
							(_cor599, _cor606)
						    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    let <_cor608> =
			%% Line 934
			apply 'cache_error'/2
			    (S, [From|[]])
		    in  %% Line 934
			apply 'loop'/1
			    (_cor608)
		%% Line 935
		<L = {'log',_cor2339,_cor2340,_cor2341,_cor2342,_cor2343,_cor2344,_cor2345,_cor2346,_cor2347,_cor2348,_cor2349,_cor2350,_cor2351,_cor2352}>
		    when let <_cor614> =
			  call 'erlang':'=:='
			      (_cor2339, 'ok')
		      in  let <_cor617> =
			      call 'erlang':'=/='
				  (_cor2343, NewFile)
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'and'
								     -| ['compiler_generated'] )
				    (_cor614, _cor617)
				-| ['compiler_generated'] ) ->
		    let <_cor618> =
			catch
			    %% Line 936
			    apply 'close_disk_log2'/1
				(L)
		    in  %% Line 936
			case _cor618 of
			  %% Line 937
			  <'closed'> when 'true' ->
			      let <_cor624> =
				  catch
				      %% Line 939
				      apply 'rename_file'/3
					  (_cor2343, NewFile, _cor2345)
			      in  %% Line 939
				  case _cor624 of
				    %% Line 940
				    <'ok'> when 'true' ->
					let <H> =
					    %% Line 941
					    apply 'merge_head'/2
						(Head, _cor2348)
					in  %% Line 942
					    ( case S of
						( <( {'state',_cor2409,_cor2410,_cor2411,_cor2412,_cor2413,_rec143,_cor2414,_cor2415}
						     -| ['compiler_generated'] )> when 'true' ->
						      case _rec143 of
							<{'arg',_cor2417,_cor2418,_cor2419,_cor2420,_cor2421,_cor2422,_cor2423,_cor2424,_cor2425,_cor2426,_cor2427,_cor2428,_cor2429}> when 'true' ->
							    let <_cor634> =
								%% Line 944
								call 'erlang':'setelement'
								    (11, _rec143, H)
							    in  let <_cor635> =
								    %% Line 943
								    call 'erlang':'setelement'
									(5, _cor634, 'truncate')
								in  let <_cor636> =
									%% Line 945
									call 'erlang':'setelement'
									    (4, _cor635, _cor2343)
								    in  let <_cor638> =
									    call 'erlang':'setelement'
										(2, _cor636, _cor2340)
									in  case apply 'do_open'/1
										     (_cor638) of
									      %% Line 946
									      <{'ok',Res,L2,Cnt}> when 'true' ->
										  %% Line 949
										  case L2 of
										    <{'log',_cor2473,_cor2474,_cor2475,_cor2476,_cor2477,_cor2478,_cor2479,_cor2480,_cor2481,_cor2482,_cor2483,_cor2484,_cor2485,_cor2486}> when 'true' ->
											let <_cor649> =
											    call 'erlang':'setelement'
												(11, L2, _cor2348)
											in  let <_cor650> =
												call 'erlang':'setelement'
												    (7, _cor649, _cor2344)
											    in  let <_cor652> =
												    call 'erlang':'setelement'
													(5, _cor650, _cor2342)
												in  do  call 'erlang':'put'
													    ('log', _cor652)
													do  %% Line 950
													    apply 'notify_owners'/1
														({'truncated',_cor2413})
													    do  %% Line 951
														call 'erlang':'erase'
														    ('is_full')
														%% Line 952
														case Res of
														  %% Line 953
														  <{'error',_cor2496}> when 'true' ->
														      %% Line 954
														      apply 'do_exit'/4
															  (S, From, Res, %% Line 955
																	 {{'failed',Res},[{'disk_log',F,A}|[]]})
														  %% Line 956
														  <_cor2497> when 'true' ->
														      let <_cor657> =
															  %% Line 957
															  call 'erlang':'setelement'
															      (6, S, Cnt)
														      in  %% Line 957
															  apply 'reply'/3
															      (From, 'ok', _cor657)
														end
										    ( <_cor2487> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {'badrecord','log'}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
									      %% Line 959
									      <Res> when 'true' ->
										  %% Line 960
										  apply 'do_exit'/4
										      (S, From, Res, {{'failed',Res},[{'disk_log',F,A}|[]]})
									    end
							( <_cor2430> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','arg'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						  -| ['compiler_generated'] )
						( <_cor2416> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    %% Line 962
				    <Error> when 'true' ->
					%% Line 963
					apply 'do_exit'/4
					    (S, From, Error, {{'failed',Error},[{'disk_log','reopen',2}]})
				  end
			  %% Line 965
			  <Error> when 'true' ->
			      %% Line 966
			      apply 'do_exit'/4
				  (S, From, Error, {{'failed',Error},[{'disk_log',F,A}|[]]})
			end
		%% Line 968
		<L = {'log',_cor2507,_cor2508,_cor2509,_cor2510,_cor2511,_cor2512,_cor2513,_cor2514,_cor2515,_cor2516,_cor2517,_cor2518,_cor2519,_cor2520}>
		    when call 'erlang':'=:='
			  (_cor2507,
			   'ok') ->
		    %% Line 969
		    apply 'reply'/3
			(From, {'error',{'same_file_name',_cor2508}}, S)
		%% Line 970
		<L> when 'true' ->
		    %% Line 971
		    ( case L of
			( <( {'log',_cor2535,_rec154,_cor2536,_cor2537,_cor2538,_cor2539,_cor2540,_cor2541,_cor2542,_cor2543,_cor2544,_cor2545,_cor2546,_cor2547}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'reply'/3
				  (From, {'error',{'blocked_log',_rec154}}, S)
			  -| ['compiler_generated'] )
			( <_cor2548> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','log'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 973
	  <{Server,{'internal_open',A}},S> when 'true' ->
	      %% Line 974
	      case call 'erlang':'get'
		       ('log') of
		%% Line 975
		<'undefined'> when 'true' ->
		    %% Line 976
		    case apply 'do_open'/1
			     (A) of
		      %% Line 977
		      <{'ok',Res,L,Cnt}> when 'true' ->
			  %% Line 978
			  ( case A of
			      ( <( {'arg',_cor2549,_cor2550,_cor2551,_cor2552,_cor2553,_cor2554,_cor2555,_cor2556,_rec155,_cor2557,_cor2558,_cor2559,_cor2560}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor677> =
					apply 'opening_pid'/3
					    (_rec155, _cor2559, L)
				    in  do  call 'erlang':'put'
						('log', _cor677)
					    %% Line 979
					    case S of
					      <{'state',_cor2575,_cor2576,_cor2577,_cor2578,_cor2579,_cor2580,_cor2581,_cor2582}> when 'true' ->
						  let <_cor679> =
						      call 'erlang':'setelement'
							  (7, S, A)
						  in  let <_cor681> =
							  call 'erlang':'setelement'
							      (6, _cor679, Cnt)
						      in  apply 'reply'/3
							      (Server, Res, _cor681)
					      ( <_cor2583> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
				-| ['compiler_generated'] )
			      ( <_cor2561> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','arg'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 980
		      <Res> when 'true' ->
			  %% Line 981
			  apply 'do_fast_exit'/3
			      (S, Server, Res)
		    end
		%% Line 983
		<L> when 'true' ->
		    %% Line 984
		    ( case A of
			( <( {'arg',_cor2584,_cor2585,_cor2586,_cor2587,_cor2588,_cor2589,_cor2590,_cor2591,_cor2592,_rec158,_cor2593,_cor2594,_cor2595}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <TestH> =
				  apply 'mk_head'/2
				      (_rec158, _cor2591)
			      in  %% Line 985
				  ( case S of
				      ( <( {'state',_cor2623,_cor2624,_cor2625,_cor2626,_cor2627,_rec161,_cor2628,_cor2629}
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case L of
						( <( {'log',_cor2631,_cor2632,_cor2633,_cor2634,_cor2635,_cor2636,_cor2637,_cor2638,_cor2639,_rec162,_cor2640,_cor2641,_cor2642,_cor2643}
						     -| ['compiler_generated'] )> when 'true' ->
						      case apply 'compare_arg'/4
							       (_cor2595, _rec161, TestH, _rec162) of
							%% Line 986
							<'ok'> when 'true' ->
							    %% Line 987
							    case apply 'add_pid'/3
								     (_cor2592, _cor2594, L) of
							      %% Line 988
							      <{'ok',L1}> when 'true' ->
								  do  %% Line 989
								      call 'erlang':'put'
									  ('log', L1)
								      %% Line 990
								      apply 'reply'/3
									  (Server, {'ok',_cor2632}, S)
							      %% Line 991
							      <Error> when 'true' ->
								  %% Line 992
								  apply 'reply'/3
								      (Server, Error, S)
							    end
							%% Line 994
							<Error> when 'true' ->
							    %% Line 995
							    apply 'reply'/3
								(Server, Error, S)
						      end
						  -| ['compiler_generated'] )
						( <_cor2644> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','log'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor2630> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_cor2596> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','arg'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 998
	  <{From,'close'},S> when 'true' ->
	      %% Line 999
	      case apply 'do_close'/2
		       (From, S) of
		%% Line 1000
		<{'stop',S1}> when 'true' ->
		    %% Line 1001
		    apply 'do_exit'/4
			(S1, From, 'ok', 'normal')
		%% Line 1002
		<{'continue',S1}> when 'true' ->
		    %% Line 1003
		    apply 'reply'/3
			(From, 'ok', S1)
		( <_cor703> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor703})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1005
	  <{From,'info'},S> when 'true' ->
	      let <_cor706> =
		  %% Line 1006
		  call 'erlang':'get'
		      ('log')
	      in  %% Line 1006
		  ( case S of
		      ( <( {'state',_cor2685,_cor2686,_cor2687,_cor2688,_rec166,_cor2689,_cor2690,_cor2691}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor707> =
				apply 'do_info'/2
				    (_cor706, _rec166)
			    in  apply 'reply'/3
				    (From, _cor707, S)
			-| ['compiler_generated'] )
		      ( <_cor2692> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1007
	  <{'EXIT',From,Reason},S = {'state',_cor2693,_cor2694,_cor2695,_cor2696,_cor2697,_cor2698,_cor2699,_cor2700}>
	      when call 'erlang':'=:='
		    (From,
		     _cor2695) ->
	      let <_X_> =
		  %% Line 1009
		  apply 'do_stop'/1
		      (S)
	      in  %% Line 1010
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 1011
	  <{'EXIT',From,Reason},S = {'state',_cor2701,_cor2702,_cor2703,_cor2704,_cor2705,_cor2706,_cor2707,_cor2708}>
	      when call 'erlang':'=:='
		    (From,
		     _cor2704) ->
	      let <_X_> =
		  %% Line 1013
		  apply 'do_stop'/1
		      (S)
	      in  %% Line 1014
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 1015
	  <{'EXIT',From,_X_Reason},S> when 'true' ->
	      let <L> =
		  %% Line 1016
		  call 'erlang':'get'
		      ('log')
	      in  %% Line 1017
		  case apply 'is_owner'/2
			   (From, L) of
		    %% Line 1018
		    <{'true',_X_Notify}> when 'true' ->
			%% Line 1019
			case apply 'close_owner'/3
				 (From, L, S) of
			  %% Line 1020
			  <{'stop',S1}> when 'true' ->
			      let <_X_> =
				  %% Line 1021
				  apply 'do_stop'/1
				      (S1)
			      in  %% Line 1022
				  call 'erlang':'exit'
				      ('normal')
			  %% Line 1023
			  <{'continue',S1}> when 'true' ->
			      %% Line 1024
			      apply 'loop'/1
				  (S1)
			  ( <_cor724> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor724})
			    -| ['compiler_generated'] )
			end
		    %% Line 1026
		    <'false'> when 'true' ->
			let <_cor725> =
			    %% Line 1028
			    call 'erlang':'get'
				('log')
			in  let <S1> =
				%% Line 1028
				apply 'do_unblock'/3
				    (From, _cor725, S)
			    in  %% Line 1029
				apply 'loop'/1
				    (S1)
		    ( <_cor727> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor727})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1031
	  <{'system',From,Req},S> when 'true' ->
	      %% Line 1032
	      ( case S of
		  ( <( {'state',_cor2709,_cor2710,_rec167,_cor2711,_cor2712,_cor2713,_cor2714,_cor2715}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'sys':'handle_system_msg'
			    (Req, From, _rec167, 'disk_log', [], S)
		    -| ['compiler_generated'] )
		  ( <_cor2716> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1033
	  <_cor2717,S> when 'true' ->
	      %% Line 1034
	      apply 'loop'/1
		  (S)
	end
'sync_loop'/2 =
    %% Line 1036
    fun (_cor1,_cor0) ->
	%% Line 1042
	( case <_cor0,_cor1> of
	    ( <( _fol2290 = ( {( 'state'
				 -| ['compiler_generated'] ),( _cor20
							       -| ['compiler_generated'] ),( _cor21
											     -| ['compiler_generated'] ),( _cor22
															   -| ['compiler_generated'] ),( _cor23
																			 -| ['compiler_generated'] ),( _cor24
																						       -| ['compiler_generated'] ),( _cor25
																										     -| ['compiler_generated'] ),( _cor26
																														   -| ['compiler_generated'] ),( CE
																																		 -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
		 -| ['compiler_generated'] ),( _X_Sync
					       -| ['compiler_generated'] )>
		  when ( call ( 'erlang'
			     -| ['compiler_generated'] ):( '=/='
							   -| ['compiler_generated'] )
			  (( CE
			     -| ['compiler_generated'] ),
			   ( 'ok'
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] ) ->
		  ( let <_cor5> =
			%% Line 1043
			( apply ( 'cache_error'/2
				  -| ['compiler_generated'] )
			      (_fol2290, [])
			  -| ['compiler_generated'] )
		    in  %% Line 1043
			( apply ( 'loop'/1
				  -| ['compiler_generated'] )
			      (( _cor5
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    %% Line 1046
	    ( <( _fol2292 = ( {( 'state'
				 -| ['compiler_generated'] ),( _cor35
							       -| ['compiler_generated'] ),( []
											     -| ['compiler_generated'] ),( _cor36
															   -| ['compiler_generated'] ),( _cor37
																			 -| ['compiler_generated'] ),( _cor38
																						       -| ['compiler_generated'] ),( _cor39
																										     -| ['compiler_generated'] ),( _cor40
																														   -| ['compiler_generated'] ),( _cor41
																																		 -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
		 -| ['compiler_generated'] ),( Sync
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
		  %% Line 1047
		  ( receive
		      %% Line 1048
		      ( <( Message
			   -| ['compiler_generated'] )> when ( 'true'
							       -| ['compiler_generated'] ) ->
			    ( let <_cor9> =
				  %% Line 1049
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'get'
									 -| ['compiler_generated'] )
					(( 'log'
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  %% Line 1049
				  ( apply ( 'log_loop'/7
					    -| ['compiler_generated'] )
					(( Message
					   -| ['compiler_generated'] ), [], [], ( Sync
										  -| ['compiler_generated'] ), 0, _fol2292, ( _cor9
															      -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    after %% Line 1050
			  ( 0
			    -| ['compiler_generated'] ) ->
		      ( let <_cor8> =
			    %% Line 1051
			    ( apply ( 'log_end'/4
				      -| ['compiler_generated'] )
				  (_fol2292, [], [], ( Sync
						       -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			in  %% Line 1051
			    ( apply ( 'loop'/1
				      -| ['compiler_generated'] )
				  (( _cor8
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    %% Line 1053
	    ( <( _fol2293 = ( {( 'state'
				 -| ['compiler_generated'] ),( _cor42
							       -| ['compiler_generated'] ),( [( M
												-| ['compiler_generated'] )|( Ms
															      -| ['compiler_generated'] )]
											     -| ['compiler_generated'] ),( _cor43
															   -| ['compiler_generated'] ),( _cor44
																			 -| ['compiler_generated'] ),( _cor45
																						       -| ['compiler_generated'] ),( _cor46
																										     -| ['compiler_generated'] ),( _cor47
																														   -| ['compiler_generated'] ),( _cor48
																																		 -| ['compiler_generated'] )}
			      -| ['compiler_generated'] )
		 -| ['compiler_generated'] ),( Sync
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
		  ( let <_cor12> =
			%% Line 1054
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'setelement'
							       -| ['compiler_generated'] )
			      (( 3
				 -| ['compiler_generated'] ), _fol2293, ( Ms
									  -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    in  ( let <_cor14> =
			      %% Line 1055
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'get'
								     -| ['compiler_generated'] )
				    (( 'log'
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  %% Line 1055
			      ( apply ( 'log_loop'/7
					-| ['compiler_generated'] )
				    (( M
				       -| ['compiler_generated'] ), [], [], ( Sync
									      -| ['compiler_generated'] ), 0, ( _cor12
														-| ['compiler_generated'] ), ( _cor14
																	       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <( _cor19
		 -| ['compiler_generated'] ),( _cor16
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'function_clause'
			      -| ['compiler_generated'] ),( _cor19
							    -| ['compiler_generated'] ),[],[],( _cor16
												-| ['compiler_generated'] ),0}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'log_loop'/5 =
    %% Line 1042
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S = {'state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,CE},Pids,_X_Bins,_X_Sync,_X_Sz>
	      when call 'erlang':'=/='
		    (CE,
		     'ok') ->
	      let <_cor5> =
		  %% Line 1043
		  apply 'cache_error'/2
		      (S, Pids)
	      in  %% Line 1043
		  apply 'loop'/1
		      (_cor5)
	  %% Line 1044
	  <S = {'state',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},Pids,Bins,Sync,Sz>
	      when call 'erlang':'>'
		    (Sz,
		     65536) ->
	      let <_cor7> =
		  %% Line 1045
		  apply 'log_end'/4
		      (S, Pids, Bins, Sync)
	      in  %% Line 1045
		  apply 'loop'/1
		      (_cor7)
	  %% Line 1046
	  <S = {'state',_cor35,[],_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},Pids,Bins,Sync,Sz> when 'true' ->
	      %% Line 1047
	      receive
		%% Line 1048
		<Message> when 'true' ->
		    let <_cor9> =
			%% Line 1049
			call 'erlang':'get'
			    ('log')
		    in  %% Line 1049
			apply 'log_loop'/7
			    (Message, Pids, Bins, Sync, Sz, S, _cor9)
	      after %% Line 1050
		    0 ->
		let <_cor8> =
		    %% Line 1051
		    apply 'log_end'/4
			(S, Pids, Bins, Sync)
		in  %% Line 1051
		    apply 'loop'/1
			(_cor8)
	  %% Line 1053
	  <S = {'state',_cor42,[M|Ms],_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},Pids,Bins,Sync,Sz> when 'true' ->
	      let <_cor12> =
		  %% Line 1054
		  call 'erlang':'setelement'
		      (3, S, Ms)
	      in  let <_cor14> =
		      %% Line 1055
		      call 'erlang':'get'
			  ('log')
		  in  %% Line 1055
		      apply 'log_loop'/7
			  (M, Pids, Bins, Sync, Sz, _cor12, _cor14)
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'log_loop',5}}] )
	    -| ['compiler_generated'] )
	end
'log_loop'/7 =
    %% Line 1058
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'alog',B},Pids,Bins,Sync,Sz,S,{'log',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,'internal',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <_cor7> =
		  %% Line 1060
		  call 'erlang':'iolist_size'
		      (B)
	      in  let <_cor8> =
		      %% Line 1060
		      call 'erlang':'+'
			  (Sz, _cor7)
		  in  let <_cor2> =
			  %% Line 1060
			  [B|Bins]
		      in  ( case %% Line 1060
				 <S,Pids,( _cor2
					   -| ['compiler_generated'] ),Sync,_cor8> of
			      ( <( _fol2340 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor20
										 -| ['compiler_generated'] ),( _cor21
													       -| ['compiler_generated'] ),( _cor22
																	     -| ['compiler_generated'] ),( _cor23
																					   -| ['compiler_generated'] ),( _cor24
																									 -| ['compiler_generated'] ),( _cor25
																												       -| ['compiler_generated'] ),( _cor26
																																     -| ['compiler_generated'] ),( CE
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2341,( _X_Bins
									  -| ['compiler_generated'] ),( _X_Sync
													-| ['compiler_generated'] ),( _X_Sz
																      -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=/='
									     -| ['compiler_generated'] )
					    (( CE
					       -| ['compiler_generated'] ),
					     ( 'ok'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    ( let <_cor5> =
					  ( apply ( 'cache_error'/2
						    -| ['compiler_generated'] )
						(_fol2340, _fol2341)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor5
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2342 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor27
										 -| ['compiler_generated'] ),( _cor28
													       -| ['compiler_generated'] ),( _cor29
																	     -| ['compiler_generated'] ),( _cor30
																					   -| ['compiler_generated'] ),( _cor31
																									 -| ['compiler_generated'] ),( _cor32
																												       -| ['compiler_generated'] ),( _cor33
																																     -| ['compiler_generated'] ),( _cor34
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2343,( Bins
									  -| ['compiler_generated'] ),_fol2344,( Sz
														 -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>'
									     -| ['compiler_generated'] )
					    (( Sz
					       -| ['compiler_generated'] ),
					     65536)
					-| ['compiler_generated'] ) ->
				    ( let <_cor7> =
					  ( apply ( 'log_end'/4
						    -| ['compiler_generated'] )
						(_fol2342, _fol2343, ( Bins
								       -| ['compiler_generated'] ), _fol2344)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor7
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2345 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor35
										 -| ['compiler_generated'] ),( []
													       -| ['compiler_generated'] ),( _cor36
																	     -| ['compiler_generated'] ),( _cor37
																					   -| ['compiler_generated'] ),( _cor38
																									 -| ['compiler_generated'] ),( _cor39
																												       -| ['compiler_generated'] ),( _cor40
																																     -| ['compiler_generated'] ),( _cor41
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2346,( Bins
									  -| ['compiler_generated'] ),_fol2347,( Sz
														 -| ['compiler_generated'] )> when ( 'true'
																		     -| ['compiler_generated'] ) ->
				    ( receive
					( <( Message
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor9> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'get'
											   -| ['compiler_generated'] )
							  (( 'log'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( apply ( 'log_loop'/7
							      -| ['compiler_generated'] )
							  (( Message
							     -| ['compiler_generated'] ), _fol2346, ( Bins
												      -| ['compiler_generated'] ), _fol2347, ( Sz
																	       -| ['compiler_generated'] ), _fol2345, ( _cor9
																							-| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      after ( 0
					      -| ['compiler_generated'] ) ->
					( let <_fol2348> =
					      ( apply ( 'log_end'/4
							-| ['compiler_generated'] )
						    (_fol2345, _fol2346, ( Bins
									   -| ['compiler_generated'] ), _fol2347)
						-| ['compiler_generated'] )
					  in  ( apply ( 'loop'/1
							-| ['compiler_generated'] )
						    (_fol2348)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2349 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor42
										 -| ['compiler_generated'] ),( [( M
														  -| ['compiler_generated'] )|( Ms
																		-| ['compiler_generated'] )]
													       -| ['compiler_generated'] ),( _cor43
																	     -| ['compiler_generated'] ),( _cor44
																					   -| ['compiler_generated'] ),( _cor45
																									 -| ['compiler_generated'] ),( _cor46
																												       -| ['compiler_generated'] ),( _cor47
																																     -| ['compiler_generated'] ),( _cor48
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2350,( Bins
									  -| ['compiler_generated'] ),_fol2351,( Sz
														 -| ['compiler_generated'] )> when ( 'true'
																		     -| ['compiler_generated'] ) ->
				    ( let <_cor12> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'setelement'
										 -| ['compiler_generated'] )
						(( 3
						   -| ['compiler_generated'] ), _fol2349, ( Ms
											    -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_cor14> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'get'
										       -| ['compiler_generated'] )
						      (( 'log'
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( apply ( 'log_loop'/7
							  -| ['compiler_generated'] )
						      (( M
							 -| ['compiler_generated'] ), _fol2350, ( Bins
												  -| ['compiler_generated'] ), _fol2351, ( Sz
																	   -| ['compiler_generated'] ), ( _cor12
																					  -| ['compiler_generated'] ), ( _cor14
																									 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor19
				   -| ['compiler_generated'] ),( _cor18
								 -| ['compiler_generated'] ),( _cor17
											       -| ['compiler_generated'] ),( _cor16
															     -| ['compiler_generated'] ),( _cor15
																			   -| ['compiler_generated'] )> when ( 'true'
																							       -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor19
									      -| ['compiler_generated'] ),( _cor18
													    -| ['compiler_generated'] ),( _cor17
																	  -| ['compiler_generated'] ),( _cor16
																					-| ['compiler_generated'] ),( _cor15
																								      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1061
	  <{'balog',B},Pids,Bins,Sync,Sz,S,_X_L> when 'true' ->
	      let <_cor9> =
		  %% Line 1062
		  call 'erlang':'iolist_size'
		      (B)
	      in  let <_cor10> =
		      %% Line 1062
		      call 'erlang':'+'
			  (Sz, _cor9)
		  in  let <_cor2> =
			  %% Line 1062
			  [B|Bins]
		      in  ( case %% Line 1062
				 <S,Pids,( _cor2
					   -| ['compiler_generated'] ),Sync,_cor10> of
			      ( <( _fol2374 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor20
										 -| ['compiler_generated'] ),( _cor21
													       -| ['compiler_generated'] ),( _cor22
																	     -| ['compiler_generated'] ),( _cor23
																					   -| ['compiler_generated'] ),( _cor24
																									 -| ['compiler_generated'] ),( _cor25
																												       -| ['compiler_generated'] ),( _cor26
																																     -| ['compiler_generated'] ),( CE
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2375,( _X_Bins
									  -| ['compiler_generated'] ),( _X_Sync
													-| ['compiler_generated'] ),( _X_Sz
																      -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=/='
									     -| ['compiler_generated'] )
					    (( CE
					       -| ['compiler_generated'] ),
					     ( 'ok'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    ( let <_cor5> =
					  ( apply ( 'cache_error'/2
						    -| ['compiler_generated'] )
						(_fol2374, _fol2375)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor5
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2376 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor27
										 -| ['compiler_generated'] ),( _cor28
													       -| ['compiler_generated'] ),( _cor29
																	     -| ['compiler_generated'] ),( _cor30
																					   -| ['compiler_generated'] ),( _cor31
																									 -| ['compiler_generated'] ),( _cor32
																												       -| ['compiler_generated'] ),( _cor33
																																     -| ['compiler_generated'] ),( _cor34
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2377,( Bins
									  -| ['compiler_generated'] ),_fol2378,( Sz
														 -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>'
									     -| ['compiler_generated'] )
					    (( Sz
					       -| ['compiler_generated'] ),
					     65536)
					-| ['compiler_generated'] ) ->
				    ( let <_cor7> =
					  ( apply ( 'log_end'/4
						    -| ['compiler_generated'] )
						(_fol2376, _fol2377, ( Bins
								       -| ['compiler_generated'] ), _fol2378)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor7
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2379 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor35
										 -| ['compiler_generated'] ),( []
													       -| ['compiler_generated'] ),( _cor36
																	     -| ['compiler_generated'] ),( _cor37
																					   -| ['compiler_generated'] ),( _cor38
																									 -| ['compiler_generated'] ),( _cor39
																												       -| ['compiler_generated'] ),( _cor40
																																     -| ['compiler_generated'] ),( _cor41
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2380,( Bins
									  -| ['compiler_generated'] ),_fol2381,( Sz
														 -| ['compiler_generated'] )> when ( 'true'
																		     -| ['compiler_generated'] ) ->
				    ( receive
					( <( Message
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor9> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'get'
											   -| ['compiler_generated'] )
							  (( 'log'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( apply ( 'log_loop'/7
							      -| ['compiler_generated'] )
							  (( Message
							     -| ['compiler_generated'] ), _fol2380, ( Bins
												      -| ['compiler_generated'] ), _fol2381, ( Sz
																	       -| ['compiler_generated'] ), _fol2379, ( _cor9
																							-| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      after ( 0
					      -| ['compiler_generated'] ) ->
					( let <_cor8> =
					      ( apply ( 'log_end'/4
							-| ['compiler_generated'] )
						    (_fol2379, _fol2380, ( Bins
									   -| ['compiler_generated'] ), _fol2381)
						-| ['compiler_generated'] )
					  in  ( apply ( 'loop'/1
							-| ['compiler_generated'] )
						    (( _cor8
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2382 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor42
										 -| ['compiler_generated'] ),( [( M
														  -| ['compiler_generated'] )|( Ms
																		-| ['compiler_generated'] )]
													       -| ['compiler_generated'] ),( _cor43
																	     -| ['compiler_generated'] ),( _cor44
																					   -| ['compiler_generated'] ),( _cor45
																									 -| ['compiler_generated'] ),( _cor46
																												       -| ['compiler_generated'] ),( _cor47
																																     -| ['compiler_generated'] ),( _cor48
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),_fol2383,( Bins
									  -| ['compiler_generated'] ),_fol2384,( Sz
														 -| ['compiler_generated'] )> when ( 'true'
																		     -| ['compiler_generated'] ) ->
				    ( let <_cor12> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'setelement'
										 -| ['compiler_generated'] )
						(( 3
						   -| ['compiler_generated'] ), _fol2382, ( Ms
											    -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_cor14> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'get'
										       -| ['compiler_generated'] )
						      (( 'log'
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( apply ( 'log_loop'/7
							  -| ['compiler_generated'] )
						      (( M
							 -| ['compiler_generated'] ), _fol2383, ( Bins
												  -| ['compiler_generated'] ), _fol2384, ( Sz
																	   -| ['compiler_generated'] ), ( _cor12
																					  -| ['compiler_generated'] ), ( _cor14
																									 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor19
				   -| ['compiler_generated'] ),( _cor18
								 -| ['compiler_generated'] ),( _cor17
											       -| ['compiler_generated'] ),( _cor16
															     -| ['compiler_generated'] ),( _cor15
																			   -| ['compiler_generated'] )> when ( 'true'
																							       -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor19
									      -| ['compiler_generated'] ),( _cor18
													    -| ['compiler_generated'] ),( _cor17
																	  -| ['compiler_generated'] ),( _cor16
																					-| ['compiler_generated'] ),( _cor15
																								      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1063
	  <{From,{'log',B}},Pids,Bins,Sync,Sz,S,{'log',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,'internal',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
	      let <_cor11> =
		  %% Line 1065
		  call 'erlang':'iolist_size'
		      (B)
	      in  let <_cor12> =
		      %% Line 1065
		      call 'erlang':'+'
			  (Sz, _cor11)
		  in  let <_cor3,_cor2> =
			  %% Line 1065
			  <[From|Pids],[B|Bins]>
		      in  ( case %% Line 1065
				 <S,( _cor3
				      -| ['compiler_generated'] ),( _cor2
								    -| ['compiler_generated'] ),Sync,_cor12> of
			      ( <( _fol2407 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor20
										 -| ['compiler_generated'] ),( _cor21
													       -| ['compiler_generated'] ),( _cor22
																	     -| ['compiler_generated'] ),( _cor23
																					   -| ['compiler_generated'] ),( _cor24
																									 -| ['compiler_generated'] ),( _cor25
																												       -| ['compiler_generated'] ),( _cor26
																																     -| ['compiler_generated'] ),( CE
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( _X_Bins
											       -| ['compiler_generated'] ),( _X_Sync
															     -| ['compiler_generated'] ),( _X_Sz
																			   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=/='
									     -| ['compiler_generated'] )
					    (( CE
					       -| ['compiler_generated'] ),
					     ( 'ok'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    ( let <_cor5> =
					  ( apply ( 'cache_error'/2
						    -| ['compiler_generated'] )
						(_fol2407, ( Pids
							     -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor5
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2408 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor27
										 -| ['compiler_generated'] ),( _cor28
													       -| ['compiler_generated'] ),( _cor29
																	     -| ['compiler_generated'] ),( _cor30
																					   -| ['compiler_generated'] ),( _cor31
																									 -| ['compiler_generated'] ),( _cor32
																												       -| ['compiler_generated'] ),( _cor33
																																     -| ['compiler_generated'] ),( _cor34
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2409,( Sz
																      -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>'
									     -| ['compiler_generated'] )
					    (( Sz
					       -| ['compiler_generated'] ),
					     65536)
					-| ['compiler_generated'] ) ->
				    ( let <_cor7> =
					  ( apply ( 'log_end'/4
						    -| ['compiler_generated'] )
						(_fol2408, ( Pids
							     -| ['compiler_generated'] ), ( Bins
											    -| ['compiler_generated'] ), _fol2409)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor7
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2410 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor35
										 -| ['compiler_generated'] ),( []
													       -| ['compiler_generated'] ),( _cor36
																	     -| ['compiler_generated'] ),( _cor37
																					   -| ['compiler_generated'] ),( _cor38
																									 -| ['compiler_generated'] ),( _cor39
																												       -| ['compiler_generated'] ),( _cor40
																																     -| ['compiler_generated'] ),( _cor41
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2411,( Sz
																      -| ['compiler_generated'] )> when ( 'true'
																					  -| ['compiler_generated'] ) ->
				    ( receive
					( <( Message
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor9> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'get'
											   -| ['compiler_generated'] )
							  (( 'log'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( apply ( 'log_loop'/7
							      -| ['compiler_generated'] )
							  (( Message
							     -| ['compiler_generated'] ), ( Pids
											    -| ['compiler_generated'] ), ( Bins
															   -| ['compiler_generated'] ), _fol2411, ( Sz
																				    -| ['compiler_generated'] ), _fol2410, ( _cor9
																									     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      after ( 0
					      -| ['compiler_generated'] ) ->
					( let <_cor8> =
					      ( apply ( 'log_end'/4
							-| ['compiler_generated'] )
						    (_fol2410, ( Pids
								 -| ['compiler_generated'] ), ( Bins
												-| ['compiler_generated'] ), _fol2411)
						-| ['compiler_generated'] )
					  in  ( apply ( 'loop'/1
							-| ['compiler_generated'] )
						    (( _cor8
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2412 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor42
										 -| ['compiler_generated'] ),( [( M
														  -| ['compiler_generated'] )|( Ms
																		-| ['compiler_generated'] )]
													       -| ['compiler_generated'] ),( _cor43
																	     -| ['compiler_generated'] ),( _cor44
																					   -| ['compiler_generated'] ),( _cor45
																									 -| ['compiler_generated'] ),( _cor46
																												       -| ['compiler_generated'] ),( _cor47
																																     -| ['compiler_generated'] ),( _cor48
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2413,( Sz
																      -| ['compiler_generated'] )> when ( 'true'
																					  -| ['compiler_generated'] ) ->
				    ( let <_fol2414> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'setelement'
										 -| ['compiler_generated'] )
						(( 3
						   -| ['compiler_generated'] ), _fol2412, ( Ms
											    -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_cor14> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'get'
										       -| ['compiler_generated'] )
						      (( 'log'
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( apply ( 'log_loop'/7
							  -| ['compiler_generated'] )
						      (( M
							 -| ['compiler_generated'] ), ( Pids
											-| ['compiler_generated'] ), ( Bins
														       -| ['compiler_generated'] ), _fol2413, ( Sz
																				-| ['compiler_generated'] ), _fol2414, ( _cor14
																									 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor19
				   -| ['compiler_generated'] ),( _cor18
								 -| ['compiler_generated'] ),( _cor17
											       -| ['compiler_generated'] ),( _cor16
															     -| ['compiler_generated'] ),( _cor15
																			   -| ['compiler_generated'] )> when ( 'true'
																							       -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor19
									      -| ['compiler_generated'] ),( _cor18
													    -| ['compiler_generated'] ),( _cor17
																	  -| ['compiler_generated'] ),( _cor16
																					-| ['compiler_generated'] ),( _cor15
																								      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1066
	  <{From,{'blog',B}},Pids,Bins,Sync,Sz,S,_X_L> when 'true' ->
	      let <_cor13> =
		  %% Line 1067
		  call 'erlang':'iolist_size'
		      (B)
	      in  let <_cor14> =
		      %% Line 1067
		      call 'erlang':'+'
			  (Sz, _cor13)
		  in  let <_cor3,_cor2> =
			  %% Line 1067
			  <[From|Pids],[B|Bins]>
		      in  ( case %% Line 1067
				 <S,( _cor3
				      -| ['compiler_generated'] ),( _cor2
								    -| ['compiler_generated'] ),Sync,_cor14> of
			      ( <( _fol2437 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor20
										 -| ['compiler_generated'] ),( _cor21
													       -| ['compiler_generated'] ),( _cor22
																	     -| ['compiler_generated'] ),( _cor23
																					   -| ['compiler_generated'] ),( _cor24
																									 -| ['compiler_generated'] ),( _cor25
																												       -| ['compiler_generated'] ),( _cor26
																																     -| ['compiler_generated'] ),( CE
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( _X_Bins
											       -| ['compiler_generated'] ),( _X_Sync
															     -| ['compiler_generated'] ),( _X_Sz
																			   -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '=/='
									     -| ['compiler_generated'] )
					    (( CE
					       -| ['compiler_generated'] ),
					     ( 'ok'
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    ( let <_cor5> =
					  ( apply ( 'cache_error'/2
						    -| ['compiler_generated'] )
						(_fol2437, ( Pids
							     -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor5
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2438 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor27
										 -| ['compiler_generated'] ),( _cor28
													       -| ['compiler_generated'] ),( _cor29
																	     -| ['compiler_generated'] ),( _cor30
																					   -| ['compiler_generated'] ),( _cor31
																									 -| ['compiler_generated'] ),( _cor32
																												       -| ['compiler_generated'] ),( _cor33
																																     -| ['compiler_generated'] ),( _cor34
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2439,( Sz
																      -| ['compiler_generated'] )>
				    when ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>'
									     -| ['compiler_generated'] )
					    (( Sz
					       -| ['compiler_generated'] ),
					     65536)
					-| ['compiler_generated'] ) ->
				    ( let <_cor7> =
					  ( apply ( 'log_end'/4
						    -| ['compiler_generated'] )
						(_fol2438, ( Pids
							     -| ['compiler_generated'] ), ( Bins
											    -| ['compiler_generated'] ), _fol2439)
					    -| ['compiler_generated'] )
				      in  ( apply ( 'loop'/1
						    -| ['compiler_generated'] )
						(( _cor7
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2440 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor35
										 -| ['compiler_generated'] ),( []
													       -| ['compiler_generated'] ),( _cor36
																	     -| ['compiler_generated'] ),( _cor37
																					   -| ['compiler_generated'] ),( _cor38
																									 -| ['compiler_generated'] ),( _cor39
																												       -| ['compiler_generated'] ),( _cor40
																																     -| ['compiler_generated'] ),( _cor41
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2441,( Sz
																      -| ['compiler_generated'] )> when ( 'true'
																					  -| ['compiler_generated'] ) ->
				    ( receive
					( <( Message
					     -| ['compiler_generated'] )> when ( 'true'
										 -| ['compiler_generated'] ) ->
					      ( let <_cor9> =
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'get'
											   -| ['compiler_generated'] )
							  (( 'log'
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						in  ( apply ( 'log_loop'/7
							      -| ['compiler_generated'] )
							  (( Message
							     -| ['compiler_generated'] ), ( Pids
											    -| ['compiler_generated'] ), ( Bins
															   -| ['compiler_generated'] ), _fol2441, ( Sz
																				    -| ['compiler_generated'] ), _fol2440, ( _cor9
																									     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      after ( 0
					      -| ['compiler_generated'] ) ->
					( let <_cor8> =
					      ( apply ( 'log_end'/4
							-| ['compiler_generated'] )
						    (_fol2440, ( Pids
								 -| ['compiler_generated'] ), ( Bins
												-| ['compiler_generated'] ), _fol2441)
						-| ['compiler_generated'] )
					  in  ( apply ( 'loop'/1
							-| ['compiler_generated'] )
						    (( _cor8
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _fol2442 = ( {( 'state'
						   -| ['compiler_generated'] ),( _cor42
										 -| ['compiler_generated'] ),( [( M
														  -| ['compiler_generated'] )|( Ms
																		-| ['compiler_generated'] )]
													       -| ['compiler_generated'] ),( _cor43
																	     -| ['compiler_generated'] ),( _cor44
																					   -| ['compiler_generated'] ),( _cor45
																									 -| ['compiler_generated'] ),( _cor46
																												       -| ['compiler_generated'] ),( _cor47
																																     -| ['compiler_generated'] ),( _cor48
																																				   -| ['compiler_generated'] )}
						-| ['compiler_generated'] )
				   -| ['compiler_generated'] ),( Pids
								 -| ['compiler_generated'] ),( Bins
											       -| ['compiler_generated'] ),_fol2443,( Sz
																      -| ['compiler_generated'] )> when ( 'true'
																					  -| ['compiler_generated'] ) ->
				    ( let <_cor12> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'setelement'
										 -| ['compiler_generated'] )
						(( 3
						   -| ['compiler_generated'] ), _fol2442, ( Ms
											    -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( let <_fol2444> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'get'
										       -| ['compiler_generated'] )
						      (( 'log'
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( apply ( 'log_loop'/7
							  -| ['compiler_generated'] )
						      (( M
							 -| ['compiler_generated'] ), ( Pids
											-| ['compiler_generated'] ), ( Bins
														       -| ['compiler_generated'] ), _fol2443, ( Sz
																				-| ['compiler_generated'] ), ( _cor12
																							       -| ['compiler_generated'] ), _fol2444)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( _cor19
				   -| ['compiler_generated'] ),( _cor18
								 -| ['compiler_generated'] ),( _cor17
											       -| ['compiler_generated'] ),( _cor16
															     -| ['compiler_generated'] ),( _cor15
																			   -| ['compiler_generated'] )> when ( 'true'
																							       -| ['compiler_generated'] ) ->
				    ( primop ( 'match_fail'
					       -| ['compiler_generated'] )
					  (( {( 'function_clause'
						-| ['compiler_generated'] ),( _cor19
									      -| ['compiler_generated'] ),( _cor18
													    -| ['compiler_generated'] ),( _cor17
																	  -| ['compiler_generated'] ),( _cor16
																					-| ['compiler_generated'] ),( _cor15
																								      -| ['compiler_generated'] )}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1068
	  <{From,'sync'},Pids,Bins,Sync,Sz,S,_X_L> when 'true' ->
	      let <_cor1> =
		  %% Line 1069
		  [From|Sync]
	      in  ( case %% Line 1069
			 <S,Pids,Bins,( _cor1
					-| ['compiler_generated'] ),Sz> of
		      ( <( _fol2467 = ( {( 'state'
					   -| ['compiler_generated'] ),( _cor20
									 -| ['compiler_generated'] ),( _cor21
												       -| ['compiler_generated'] ),( _cor22
																     -| ['compiler_generated'] ),( _cor23
																				   -| ['compiler_generated'] ),( _cor24
																								 -| ['compiler_generated'] ),( _cor25
																											       -| ['compiler_generated'] ),( _cor26
																															     -| ['compiler_generated'] ),( CE
																																			   -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
			   -| ['compiler_generated'] ),_fol2468,( _X_Bins
								  -| ['compiler_generated'] ),( _X_Sync
												-| ['compiler_generated'] ),( _X_Sz
															      -| ['compiler_generated'] )>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=/='
								     -| ['compiler_generated'] )
				    (( CE
				       -| ['compiler_generated'] ),
				     ( 'ok'
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] ) ->
			    ( let <_cor5> =
				  ( apply ( 'cache_error'/2
					    -| ['compiler_generated'] )
					(_fol2467, _fol2468)
				    -| ['compiler_generated'] )
			      in  ( apply ( 'loop'/1
					    -| ['compiler_generated'] )
					(( _cor5
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _fol2469 = ( {( 'state'
					   -| ['compiler_generated'] ),( _cor27
									 -| ['compiler_generated'] ),( _cor28
												       -| ['compiler_generated'] ),( _cor29
																     -| ['compiler_generated'] ),( _cor30
																				   -| ['compiler_generated'] ),( _cor31
																								 -| ['compiler_generated'] ),( _cor32
																											       -| ['compiler_generated'] ),( _cor33
																															     -| ['compiler_generated'] ),( _cor34
																																			   -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
			   -| ['compiler_generated'] ),_fol2470,_fol2471,( Sync
									   -| ['compiler_generated'] ),_fol2472>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '>'
								     -| ['compiler_generated'] )
				    (_fol2472,
				     65536)
				-| ['compiler_generated'] ) ->
			    ( let <_cor7> =
				  ( apply ( 'log_end'/4
					    -| ['compiler_generated'] )
					(_fol2469, _fol2470, _fol2471, ( Sync
									 -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( apply ( 'loop'/1
					    -| ['compiler_generated'] )
					(( _cor7
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _fol2473 = ( {( 'state'
					   -| ['compiler_generated'] ),( _cor35
									 -| ['compiler_generated'] ),( []
												       -| ['compiler_generated'] ),( _cor36
																     -| ['compiler_generated'] ),( _cor37
																				   -| ['compiler_generated'] ),( _cor38
																								 -| ['compiler_generated'] ),( _cor39
																											       -| ['compiler_generated'] ),( _cor40
																															     -| ['compiler_generated'] ),( _cor41
																																			   -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
			   -| ['compiler_generated'] ),_fol2474,_fol2475,( Sync
									   -| ['compiler_generated'] ),_fol2476> when ( 'true'
															-| ['compiler_generated'] ) ->
			    ( receive
				( <( Message
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_cor9> =
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'get'
										   -| ['compiler_generated'] )
						  (( 'log'
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					in  ( apply ( 'log_loop'/7
						      -| ['compiler_generated'] )
						  (( Message
						     -| ['compiler_generated'] ), _fol2474, _fol2475, ( Sync
													-| ['compiler_generated'] ), _fol2476, _fol2473, ( _cor9
																			   -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      after ( 0
				      -| ['compiler_generated'] ) ->
				( let <_cor8> =
				      ( apply ( 'log_end'/4
						-| ['compiler_generated'] )
					    (_fol2473, _fol2474, _fol2475, ( Sync
									     -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  in  ( apply ( 'loop'/1
						-| ['compiler_generated'] )
					    (( _cor8
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _fol2477 = ( {( 'state'
					   -| ['compiler_generated'] ),( _cor42
									 -| ['compiler_generated'] ),( [( M
													  -| ['compiler_generated'] )|( Ms
																	-| ['compiler_generated'] )]
												       -| ['compiler_generated'] ),( _cor43
																     -| ['compiler_generated'] ),( _cor44
																				   -| ['compiler_generated'] ),( _cor45
																								 -| ['compiler_generated'] ),( _cor46
																											       -| ['compiler_generated'] ),( _cor47
																															     -| ['compiler_generated'] ),( _cor48
																																			   -| ['compiler_generated'] )}
					-| ['compiler_generated'] )
			   -| ['compiler_generated'] ),_fol2478,_fol2479,( Sync
									   -| ['compiler_generated'] ),_fol2480> when ( 'true'
															-| ['compiler_generated'] ) ->
			    ( let <_cor12> =
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'setelement'
									 -| ['compiler_generated'] )
					(( 3
					   -| ['compiler_generated'] ), _fol2477, ( Ms
										    -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  ( let <_cor14> =
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'get'
									       -| ['compiler_generated'] )
					      (( 'log'
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  ( apply ( 'log_loop'/7
						  -| ['compiler_generated'] )
					      (( M
						 -| ['compiler_generated'] ), _fol2478, _fol2479, ( Sync
												    -| ['compiler_generated'] ), _fol2480, ( _cor12
																	     -| ['compiler_generated'] ), ( _cor14
																					    -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <( _cor19
			   -| ['compiler_generated'] ),( _cor18
							 -| ['compiler_generated'] ),( _cor17
										       -| ['compiler_generated'] ),( _cor16
														     -| ['compiler_generated'] ),( _cor15
																		   -| ['compiler_generated'] )> when ( 'true'
																						       -| ['compiler_generated'] ) ->
			    ( primop ( 'match_fail'
				       -| ['compiler_generated'] )
				  (( {( 'function_clause'
					-| ['compiler_generated'] ),( _cor19
								      -| ['compiler_generated'] ),( _cor18
												    -| ['compiler_generated'] ),( _cor17
																  -| ['compiler_generated'] ),( _cor16
																				-| ['compiler_generated'] ),( _cor15
																							      -| ['compiler_generated'] )}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1070
	  <Message,Pids,Bins,Sync,_X_Sz,S,_X_L> when 'true' ->
	      let <NS> =
		  %% Line 1071
		  apply 'log_end'/4
		      (S, Pids, Bins, Sync)
	      in  %% Line 1072
		  apply 'handle'/2
		      (Message, NS)
	end
'log_end'/4 =
    %% Line 1074
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <S,[],[],Sync> when 'true' ->
	      %% Line 1090
	      ( case <S,Sync> of
		  ( <_fol2503,( []
				-| ['compiler_generated'] )> when ( 'true'
								    -| ['compiler_generated'] ) ->
			_fol2503
		    -| ['compiler_generated'] )
		  %% Line 1092
		  ( <_fol2504,_fol2505> when ( 'true'
					       -| ['compiler_generated'] ) ->
			( let <_cor2> =
			      %% Line 1093
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'get'
								     -| ['compiler_generated'] )
				    (( 'log'
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  in  ( let <Res> =
				    %% Line 1093
				    ( apply ( 'do_sync'/1
					      -| ['compiler_generated'] )
					  (( _cor2
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				in  ( let <_fol2508> =
					  %% Line 1880
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'self'
										 -| ['compiler_generated'] )
						()
					    -| ['compiler_generated'] )
				      in  ( let <M> = {%% Line 1880
						 ( 'disk_log'
						   -| ['compiler_generated'] ),_fol2508,%% Line 1094
											( Res
											  -| ['compiler_generated'] )}
					    in  %% Line 1094
						( case %% Line 1881
						       ( apply ( 'send_reply'/2
								 -| ['compiler_generated'] )
							     (_fol2505, ( M
									  -| ['compiler_generated'] ))
							 -| ['compiler_generated'] ) of
						    ( <( 'ok'
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
							  %% Line 1095
							  ( apply ( 'state_err'/2
								    -| ['compiler_generated'] )
								(_fol2504, ( Res
									     -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <( _cor4
							 -| ['compiler_generated'] )> when ( 'true'
											     -| ['compiler_generated'] ) ->
							  ( primop ( 'match_fail'
								     -| ['compiler_generated'] )
								(( {( 'badmatch'
								      -| ['compiler_generated'] ),( _cor4
												    -| ['compiler_generated'] )}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1076
	  <S,Pids,Bins,Sync> when 'true' ->
	      let <_cor5> =
		  %% Line 1077
		  call 'erlang':'get'
		      ('log')
	      in  let <_cor4> =
		      %% Line 1098
		      ( case Bins of
			  ( <( ( L
				 -| ['compiler_generated'] ) = ( [( B
								    -| ['compiler_generated'] )|( []
												  -| ['compiler_generated'] )]
								 -| ['compiler_generated'] )
			       -| ['compiler_generated'] )>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_binary'
									 -| ['compiler_generated'] )
					(( B
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				( L
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1099
			  ( <( [( B
				  -| ['compiler_generated'] )|( []
								-| ['compiler_generated'] )]
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( B
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  %% Line 1100
			  ( <( B
			       -| ['compiler_generated'] )> when ( 'true'
								   -| ['compiler_generated'] ) ->
				( apply ( 'rflat'/2
					  -| ['compiler_generated'] )
				      (( B
					 -| ['compiler_generated'] ), ( []
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1077
		      case apply 'do_log'/2
			       (_cor5, _cor4) of
			%% Line 1078
			<N>
			    when call 'erlang':'is_integer'
				  (N) ->
			    ( let <_fol2516> =
				  %% Line 1880
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'self'
									 -| ['compiler_generated'] )
					()
				    -| ['compiler_generated'] )
			      in  ( let <M> = {%% Line 1880
					 ( 'disk_log'
					   -| ['compiler_generated'] ),_fol2516,%% Line 1079
										'ok'}
				    in  %% Line 1079
					case %% Line 1881
					     ( apply ( 'send_reply'/2
						       -| ['compiler_generated'] )
						   (Pids, ( M
							    -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  <'ok'> when 'true' ->
					      %% Line 1080
					      ( case S of
						  ( <( {'state',_cor33,_cor34,_cor35,_cor36,_rec171,_cor37,_cor38,_cor39}
						       -| ['compiler_generated'] )> when 'true' ->
							let <_rec169> =
							    call 'erlang':'+'
								(_rec171, N)
							in  let <_rec170> =
								apply 'state_ok'/1
								    (S)
							    in  case _rec170 of
								  <{'state',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
								      let <_cor12> =
									  call 'erlang':'setelement'
									      (6, _rec170, _rec169)
								      in  %% Line 1090
									  ( case <_cor12,Sync> of
									      ( <( S
										   -| ['compiler_generated'] ),( []
														 -| ['compiler_generated'] )> when ( 'true'
																		     -| ['compiler_generated'] ) ->
										    %% Line 1091
										    ( S
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      %% Line 1092
									      ( <( S
										   -| ['compiler_generated'] ),_fol2512> when ( 'true'
																-| ['compiler_generated'] ) ->
										    ( let <_cor2> =
											  %% Line 1093
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'get'
																 -| ['compiler_generated'] )
												(( 'log'
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      in  ( let <Res> =
												%% Line 1093
												( apply ( 'do_sync'/1
													  -| ['compiler_generated'] )
												      (( _cor2
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    in  ( let <_fol2515> =
												      %% Line 1880
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'self'
																	     -| ['compiler_generated'] )
													    ()
													-| ['compiler_generated'] )
												  in  ( let <M> = {%% Line 1880
													     ( 'disk_log'
													       -| ['compiler_generated'] ),_fol2515,%% Line 1094
																		    ( Res
																		      -| ['compiler_generated'] )}
													in  %% Line 1094
													    ( case %% Line 1881
														   ( apply ( 'send_reply'/2
															     -| ['compiler_generated'] )
															 (_fol2512, ( M
																      -| ['compiler_generated'] ))
														     -| ['compiler_generated'] ) of
														( <( 'ok'
														     -| ['compiler_generated'] )> when ( 'true'
																			 -| ['compiler_generated'] ) ->
														      %% Line 1095
														      ( apply ( 'state_err'/2
																-| ['compiler_generated'] )
															    (( S
															       -| ['compiler_generated'] ), ( Res
																			      -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  -| ['compiler_generated'] )
														( <( _cor4
														     -| ['compiler_generated'] )> when ( 'true'
																			 -| ['compiler_generated'] ) ->
														      ( primop ( 'match_fail'
																 -| ['compiler_generated'] )
															    (( {( 'badmatch'
																  -| ['compiler_generated'] ),( _cor4
																				-| ['compiler_generated'] )}
															       -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  -| ['compiler_generated'] )
													      end
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								  ( <_cor49> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','state'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
						    -| ['compiler_generated'] )
						  ( <_cor40> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor6})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			%% Line 1082
			<{'error',{'error',{'full',_X_Name}},N}>
			    when call 'erlang':'=:='
				  (Pids,
				   []) ->
			    %% Line 1083
			    ( case S of
				( <( {'state',_cor50,_cor51,_cor52,_cor53,_rec174,_cor54,_cor55,_cor56}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec172> =
					  call 'erlang':'+'
					      (_rec174, N)
				      in  let <_cor19> =
					      call 'erlang':'setelement'
						  (6, S, _rec172)
					  in  let <_cor20> =
						  apply 'state_ok'/1
						      (_cor19)
					      in  %% Line 1090
						  ( case <_cor20,Sync> of
						      ( <_fol2517,( []
								    -| ['compiler_generated'] )> when ( 'true'
													-| ['compiler_generated'] ) ->
							    _fol2517
							-| ['compiler_generated'] )
						      %% Line 1092
						      ( <_fol2518,_fol2519> when ( 'true'
										   -| ['compiler_generated'] ) ->
							    ( let <_cor2> =
								  %% Line 1093
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'get'
													 -| ['compiler_generated'] )
									(( 'log'
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      in  ( let <Res> =
									%% Line 1093
									( apply ( 'do_sync'/1
										  -| ['compiler_generated'] )
									      (( _cor2
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    in  ( let <_fol2522> =
									      %% Line 1880
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'self'
														     -| ['compiler_generated'] )
										    ()
										-| ['compiler_generated'] )
									  in  ( let <M> = {%% Line 1880
										     ( 'disk_log'
										       -| ['compiler_generated'] ),_fol2522,%% Line 1094
															    ( Res
															      -| ['compiler_generated'] )}
										in  %% Line 1094
										    ( case %% Line 1881
											   ( apply ( 'send_reply'/2
												     -| ['compiler_generated'] )
												 (_fol2519, ( M
													      -| ['compiler_generated'] ))
											     -| ['compiler_generated'] ) of
											( <( 'ok'
											     -| ['compiler_generated'] )> when ( 'true'
																 -| ['compiler_generated'] ) ->
											      %% Line 1095
											      ( apply ( 'state_err'/2
													-| ['compiler_generated'] )
												    (_fol2518, ( Res
														 -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
											( <( _cor4
											     -| ['compiler_generated'] )> when ( 'true'
																 -| ['compiler_generated'] ) ->
											      ( primop ( 'match_fail'
													 -| ['compiler_generated'] )
												    (( {( 'badmatch'
													  -| ['compiler_generated'] ),( _cor4
																	-| ['compiler_generated'] )}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor57> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 1084
			<{'error',Error,N}> when 'true' ->
			    ( let <_fol2560> =
				  %% Line 1880
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'self'
									 -| ['compiler_generated'] )
					()
				    -| ['compiler_generated'] )
			      in  ( let <M> = {%% Line 1880
					 ( 'disk_log'
					   -| ['compiler_generated'] ),_fol2560,%% Line 1085
										Error}
				    in  %% Line 1085
					case %% Line 1881
					     ( apply ( 'send_reply'/2
						       -| ['compiler_generated'] )
						   (Pids, ( M
							    -| ['compiler_generated'] ))
					       -| ['compiler_generated'] ) of
					  <'ok'> when 'true' ->
					      %% Line 1086
					      ( case S of
						  ( <( {'state',_cor67,_cor68,_cor69,_cor70,_rec177,_cor71,_cor72,_cor73}
						       -| ['compiler_generated'] )> when 'true' ->
							let <_rec175> =
							    call 'erlang':'+'
								(_rec177, N)
							in  let <_cor27> =
								call 'erlang':'setelement'
								    (6, S, _rec175)
							    in  apply 'state_err'/2
								    (_cor27, Error)
						    -| ['compiler_generated'] )
						  ( <_cor74> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor21> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor21})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			( <_cor28> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor28})
			  -| ['compiler_generated'] )
		      end
	end
'log_end_sync'/2 =
    %% Line 1090
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[]> when 'true' ->
	      %% Line 1091
	      S
	  %% Line 1092
	  <S,Sync> when 'true' ->
	      let <_cor2> =
		  %% Line 1093
		  call 'erlang':'get'
		      ('log')
	      in  let <Res> =
		      %% Line 1093
		      apply 'do_sync'/1
			  (_cor2)
		  in  ( let <_fol2563> =
			    %% Line 1880
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'self'
								   -| ['compiler_generated'] )
				  ()
			      -| ['compiler_generated'] )
			in  ( let <M> = {%% Line 1880
				   ( 'disk_log'
				     -| ['compiler_generated'] ),_fol2563,%% Line 1094
									  Res}
			      in  %% Line 1094
				  case %% Line 1881
				       ( apply ( 'send_reply'/2
						 -| ['compiler_generated'] )
					     (Sync, ( M
						      -| ['compiler_generated'] ))
					 -| ['compiler_generated'] ) of
				    <'ok'> when 'true' ->
					%% Line 1095
					apply 'state_err'/2
					    (S, Res)
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor4})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
	end
'rflat'/1 =
    %% Line 1098
    fun (_cor0) ->
	case _cor0 of
	  <L = [B|[]]>
	      when call 'erlang':'is_binary'
		    (B) ->
	      L
	  %% Line 1099
	  <[B|[]]> when 'true' ->
	      B
	  %% Line 1100
	  <B> when 'true' ->
	      apply 'rflat'/2
		  (B, [])
	end
'rflat'/2 =
    %% Line 1102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|Bs],L>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1103
	      apply 'rflat'/2
		  (Bs, [B|L])
	  %% Line 1104
	  <[B|Bs],L> when 'true' ->
	      let <_cor2> =
		  %% Line 1105
		  call 'erlang':'++'
		      (B, L)
	      in  %% Line 1105
		  apply 'rflat'/2
		      (Bs, _cor2)
	  %% Line 1106
	  <[],L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rflat',2}}] )
	    -| ['compiler_generated'] )
	end
'do_change_notify'/3 =
    %% Line 1109
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1110
	case apply 'is_owner'/2
		 (_cor1, _cor2) of
	  %% Line 1111
	  <{'true',_cor17}>
	      when call 'erlang':'=:='
		    (_cor17,
		     _cor0) ->
	      %% Line 1112
	      {'ok',_cor2}
	  %% Line 1113
	  <{'true',_X_OldNotify}>
	      when let <_cor3> =
		    call 'erlang':'=/='
			(_cor0, 'true')
		in  let <_cor4> =
			call 'erlang':'=/='
			    (_cor0, 'false')
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1114
	      {'error',{'badarg','notify'}}
	  %% Line 1115
	  <{'true',_X_OldNotify}> when 'true' ->
	      %% Line 1116
	      ( case _cor2 of
		  ( <( {'log',_cor18,_cor19,_cor20,_cor21,_cor22,_rec178,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Owners> =
			    call 'lists':'keydelete'
				(_cor1, 1, _rec178)
			in  let <_rec179> =
				%% Line 1117
				[{_cor1,_cor0}|Owners]
			    in  let <_cor11> =
				    %% Line 1117
				    call 'erlang':'setelement'
					(7, _cor2, _rec179)
				in  %% Line 1118
				    {'ok',_cor11}
		    -| ['compiler_generated'] )
		  ( <_cor31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','log'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1119
	  <'false'> when 'true' ->
	      %% Line 1120
	      {'error',{'not_owner',_cor1}}
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'do_close'/2 =
    %% Line 1124
    fun (_cor1,_cor0) ->
	let <L> =
	    %% Line 1125
	    call 'erlang':'get'
		('log')
	in  %% Line 1126
	    case apply 'is_owner'/2
		     (_cor1, L) of
	      %% Line 1127
	      <{'true',_X_Notify}> when 'true' ->
		  %% Line 1128
		  apply 'close_owner'/3
		      (_cor1, L, _cor0)
	      %% Line 1129
	      <'false'> when 'true' ->
		  %% Line 1130
		  apply 'close_user'/3
		      (_cor1, L, _cor0)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'close_owner'/3 =
    %% Line 1134
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1135
	( case _cor1 of
	    ( <( {'log',_cor15,_cor16,_cor17,_cor18,_cor19,_rec183,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec181> =
		      call 'lists':'keydelete'
			  (_cor2, 1, _rec183)
		  in  let <_cor8> =
			  call 'erlang':'setelement'
			      (7, _cor1, _rec181)
		      in  do  %% Line 1136
			      call 'erlang':'put'
				  ('log', _cor8)
			      let <_cor10> =
				  %% Line 1137
				  call 'erlang':'get'
				      ('log')
			      in  let <S2> =
				      %% Line 1137
				      apply 'do_unblock'/3
					  (_cor2, _cor10, _cor0)
				  in  do  %% Line 1138
					  call 'erlang':'unlink'
					      (_cor2)
					  %% Line 1139
					  apply 'do_close2'/2
					      (_cor8, S2)
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','log'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'close_user'/3 =
    %% Line 1142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,L = {'log',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},S>
	      when call 'erlang':'>'
		    (_cor24,
		     0) ->
	      let <_rec184> =
		  %% Line 1143
		  call 'erlang':'-'
		      (_cor24, 1)
	      in  let <_cor14> =
		      %% Line 1143
		      call 'erlang':'setelement'
			  (5, L, _rec184)
		  in  do  %% Line 1144
			  call 'erlang':'put'
			      ('log', _cor14)
			  let <_cor16> =
			      %% Line 1145
			      call 'erlang':'get'
				  ('log')
			  in  let <S2> =
				  %% Line 1145
				  apply 'do_unblock'/3
				      (Pid, _cor16, S)
			      in  %% Line 1146
				  apply 'do_close2'/2
				      (_cor14, S2)
	  %% Line 1147
	  <_X_Pid,_X_L,S> when 'true' ->
	      %% Line 1148
	      {'continue',S}
	end
'do_close2'/2 =
    %% Line 1150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = {'log',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},S>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor16, 0)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (_cor18, [])
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor7, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 1151
	      {'stop',S}
	  %% Line 1152
	  <_X_L,S> when 'true' ->
	      %% Line 1153
	      {'continue',S}
	end
'system_continue'/3 =
    %% Line 1158
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1159
	apply 'loop'/1
	    (_cor0)
'system_terminate'/4 =
    %% Line 1162
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 1163
	    apply 'do_stop'/1
		(_cor0)
	in  %% Line 1164
	    call 'erlang':'exit'
		(_cor3)
'system_code_change'/4 =
    %% Line 1169
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1170
	{'ok',_cor3}
'do_exit'/4 =
    %% Line 1177
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <R> =
	    %% Line 1178
	    apply 'do_stop'/1
		(_cor3)
	in  %% Line 1179
	    ( case _cor3 of
		( <( {'state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec187}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor8> =
			  case _rec187 of
			    %% Line 1180
			    <Err>
				when call 'erlang':'=/='
				      (_rec187,
				       'ok') ->
				Err
			    %% Line 1181
			    <_cor25>
				when call 'erlang':'=:='
				      (R,
				       'closed') ->
				_cor1
			    %% Line 1182
			    <_cor26>
				when call 'erlang':'=:='
				      (_cor1,
				       'ok') ->
				R
			    %% Line 1183
			    <_cor27> when 'true' ->
				_cor1
			  end
		      in  let <_cor10> =
			      %% Line 1185
			      ( call 'erlang':'self'
				    ()
				-| ['result_not_wanted'] )
			  in  let <_X_> =
				  %% Line 1185
				  ( call 'disk_log_server':'close'
					(_cor10)
				    -| ['result_not_wanted'] )
			      in  ( let <_fol2701> =
					%% Line 1880
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'self'
									       -| ['compiler_generated'] )
					      ()
					  -| ['compiler_generated'] )
				    in  ( let <M> = {%% Line 1880
					       ( 'disk_log'
						 -| ['compiler_generated'] ),_fol2701,_cor8}
					  in  %% Line 1186
					      case %% Line 1881
						   ( apply ( 'send_reply'/2
							     -| ['compiler_generated'] )
							 (_cor2, ( M
								   -| ['compiler_generated'] ))
						     -| ['compiler_generated'] ) of
						<'ok'> when 'true' ->
						    %% Line 1188
						    call 'erlang':'exit'
							(_cor0)
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_cor24> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'do_fast_exit'/3 =
    %% Line 1191
    fun (_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 1192
	    apply 'do_stop'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1193
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1193
		    call 'erlang':'!'
			(_cor1, {'disk_log',_cor4,_cor0})
		    %% Line 1194
		    call 'erlang':'exit'
			('normal')
'do_stop'/1 =
    %% Line 1197
    fun (_cor0) ->
	%% Line 1198
	( case _cor0 of
	    ( <( {'state',_rec188,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor5> =
		      call 'erlang':'++'
			  (_rec188, _cor8)
		  in  do  apply 'proc_q'/1
			      (_cor5)
			  let <_cor6> =
			      %% Line 1199
			      call 'erlang':'get'
				  ('log')
			  in  %% Line 1199
			      apply 'close_disk_log'/1
				  (_cor6)
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'proc_q'/1 =
    %% Line 1201
    fun (_cor0) ->
	case _cor0 of
	  <[{From,_X_R}|Tail]>
	      when call 'erlang':'is_pid'
		    (From) ->
	      let <_cor1> =
		  %% Line 1202
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 1202
		      call 'erlang':'!'
			  (From, {'disk_log',_cor1,{'error','disk_log_stopped'}})
		      %% Line 1203
		      apply 'proc_q'/1
			  (Tail)
	  %% Line 1204
	  <[_cor3|T]> when 'true' ->
	      %% Line 1205
	      apply 'proc_q'/1
		  (T)
	  %% Line 1206
	  <[]> when 'true' ->
	      %% Line 1207
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'proc_q',1}}] )
	    -| ['compiler_generated'] )
	end
'opening_pid'/3 =
    %% Line 1210
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1211
	case apply 'add_pid'/3
		 (_cor2, _cor1, _cor0) of
	  <{'ok',L1}> when 'true' ->
	      %% Line 1212
	      L1
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'add_pid'/3 =
    %% Line 1215
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,Notify,L>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 1216
	      case apply 'is_owner'/2
		       (Pid, L) of
		%% Line 1217
		<'false'> when 'true' ->
		    do  %% Line 1218
			call 'erlang':'link'
			    (Pid)
			%% Line 1219
			( case L of
			    ( <( {'log',_cor19,_cor20,_cor21,_cor22,_cor23,_rec192,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec190> =
				      [{Pid,Notify}|_rec192]
				  in  let <_cor8> =
					  call 'erlang':'setelement'
					      (7, L, _rec190)
				      in  {'ok',_cor8}
			      -| ['compiler_generated'] )
			    ( <_cor32> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','log'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1220
		<{'true',_cor48}>
		    when call 'erlang':'=:='
			  (_cor48,
			   Notify) ->
		    %% Line 1222
		    {'ok',L}
		%% Line 1223
		<{'true',CurNotify}>
		    when call 'erlang':'=/='
			  (Notify,
			   CurNotify) ->
		    %% Line 1224
		    {'error',{'arg_mismatch','notify',CurNotify,Notify}}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1226
	  <_X_NotAPid,_X_Notify,L> when 'true' ->
	      %% Line 1227
	      ( case L of
		  ( <( {'log',_cor49,_cor50,_cor51,_rec195,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec193> =
			    call 'erlang':'+'
				(_rec195, 1)
			in  let <_cor15> =
				call 'erlang':'setelement'
				    (5, L, _rec193)
			    in  {'ok',_cor15}
		    -| ['compiler_generated'] )
		  ( <_cor62> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','log'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'unblock_pid'/1 =
    %% Line 1229
    fun (_cor0) ->
	case _cor0 of
	  <L = {'log',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}>
	      when call 'erlang':'=:='
		    (_cor15,
		     'none') ->
	      %% Line 1230
	      'ok'
	  %% Line 1231
	  <L> when 'true' ->
	      %% Line 1232
	      ( case L of
		  ( <( {'log',_cor27,_cor28,_rec196,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'is_owner'/2
				 (_rec196, L) of
			  %% Line 1233
			  <{'true',_X_Notify}> when 'true' ->
			      %% Line 1234
			      'ok'
			  %% Line 1235
			  <'false'> when 'true' ->
			      %% Line 1236
			      call 'erlang':'unlink'
				  (_rec196)
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor40> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','log'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'is_owner'/2 =
    %% Line 1240
    fun (_cor1,_cor0) ->
	%% Line 1241
	( case _cor0 of
	    ( <( {'log',_cor7,_cor8,_cor9,_cor10,_cor11,_rec198,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor1, 1, _rec198) of
		    %% Line 1242
		    <{'value',{_X_Pid,Notify}}> when 'true' ->
			%% Line 1243
			{'true',Notify}
		    %% Line 1244
		    <'false'> when 'true' ->
			%% Line 1245
			'false'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','log'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rename_file'/3 =
    %% Line 1249
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,NewFile,'halt'> when 'true' ->
	      %% Line 1250
	      case call 'file':'rename'
		       (File, NewFile) of
		%% Line 1251
		<'ok'> when 'true' ->
		    %% Line 1252
		    'ok'
		%% Line 1253
		<Else> when 'true' ->
		    %% Line 1254
		    apply 'file_error'/2
			(NewFile, Else)
	      end
	  %% Line 1256
	  <File,NewFile,'wrap'> when 'true' ->
	      let <_cor4> =
		  %% Line 1257
		  apply 'wrap_file_extensions'/1
		      (File)
	      in  %% Line 1257
		  apply 'rename_file'/4
		      (_cor4, File, NewFile, 'ok')
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rename_file',3}}] )
	    -| ['compiler_generated'] )
	end
'rename_file'/4 =
    %% Line 1259
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Ext|Exts],File,NewFile0,Res> when 'true' ->
	      let <NewFile> =
		  %% Line 1260
		  apply 'add_ext'/2
		      (NewFile0, Ext)
	      in  let <_cor5> =
		      %% Line 1261
		      apply 'add_ext'/2
			  (File, Ext)
		  in  let <_cor7> =
			  %% Line 1261
			  case call 'file':'rename'
				   (_cor5, NewFile) of
			    %% Line 1262
			    <'ok'> when 'true' ->
				%% Line 1263
				Res
			    %% Line 1264
			    <Else> when 'true' ->
				%% Line 1265
				apply 'file_error'/2
				    (NewFile, Else)
			  end
		      in  %% Line 1267
			  apply 'rename_file'/4
			      (Exts, File, NewFile0, _cor7)
	  %% Line 1268
	  <[],_X_File,_X_NewFiles,Res> when 'true' ->
	      Res
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rename_file',4}}] )
	    -| ['compiler_generated'] )
	end
'file_error'/2 =
    %% Line 1270
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FileName,{'error',Error}> when 'true' ->
	      %% Line 1271
	      {'error',{'file_error',FileName,Error}}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'compare_arg'/4 =
    %% Line 1275
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_A,'none',_X_OrigHead> when 'true' ->
	      %% Line 1277
	      'ok'
	  %% Line 1278
	  <[],_X_A,Head,OrigHead>
	      when call 'erlang':'=/='
		    (Head,
		     OrigHead) ->
	      %% Line 1279
	      {'error',{'arg_mismatch','head',OrigHead,Head}}
	  %% Line 1280
	  <[],_X_A,_X_Head,_X_OrigHead> when 'true' ->
	      %% Line 1281
	      'ok'
	  %% Line 1282
	  <[{Attr,Val}|Tail],A,Head,OrigHead> when 'true' ->
	      %% Line 1283
	      case apply 'compare_arg'/3
		       (Attr, Val, A) of
		%% Line 1284
		<{'not_ok',OrigVal}> when 'true' ->
		    %% Line 1285
		    {'error',{'arg_mismatch',Attr,OrigVal,Val}}
		%% Line 1286
		<'ok'> when 'true' ->
		    %% Line 1287
		    apply 'compare_arg'/4
			(Tail, A, Head, OrigHead)
		%% Line 1288
		<Error> when 'true' ->
		    %% Line 1289
		    Error
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'compare_arg',4}}] )
	    -| ['compiler_generated'] )
	end
'compare_arg'/3 =
    %% Line 1294
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'file',F,A = {'arg',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}>
	      when call 'erlang':'=/='
		    (F,
		     _cor56) ->
	      %% Line 1295
	      {'error',{'name_already_open',_cor54}}
	  %% Line 1296
	  <'mode','read_only',A = {'arg',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}>
	      when call 'erlang':'=:='
		    (_cor90,
		     'read_write') ->
	      %% Line 1297
	      {'error',{'open_read_write',_cor80}}
	  %% Line 1298
	  <'mode','read_write',A = {'arg',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118}>
	      when call 'erlang':'=:='
		    (_cor116,
		     'read_only') ->
	      %% Line 1299
	      {'error',{'open_read_only',_cor106}}
	  %% Line 1300
	  <'type',T,A = {'arg',_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144}>
	      when call 'erlang':'=/='
		    (T,
		     _cor137) ->
	      %% Line 1301
	      {'not_ok',_cor137}
	  %% Line 1302
	  <'format',F,A = {'arg',_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170}>
	      when call 'erlang':'=/='
		    (F,
		     _cor165) ->
	      %% Line 1303
	      {'not_ok',_cor165}
	  %% Line 1304
	  <'repair',R,A = {'arg',_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196}>
	      when call 'erlang':'=/='
		    (R,
		     _cor187) ->
	      %% Line 1306
	      {'not_ok',_cor187}
	  %% Line 1307
	  <_X_Attr,_X_Val,_X_A> when 'true' ->
	      %% Line 1308
	      'ok'
	end
'do_open'/1 =
    %% Line 1311
    fun (_cor0) ->
	%% Line 1312
	( case _cor0 of
	    ( <( {'arg',_rec205,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor11> =
		      %% Line 1315
		      apply 'mk_head'/2
			  (_cor26, _cor24)
		  in  let <L> =
			  {'log','ok',_rec205,'none',0,_cor19,[],'halt','internal','undefined',_cor11,_cor27,_cor21,'undefined',_cor18}
		      in  %% Line 1318
			  apply 'do_open2'/2
			      (L, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor30> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','arg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'mk_head'/2 =
    %% Line 1320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'head',Term},'internal'> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'term_to_binary'
		      (Term)
	      in  {'ok',_cor2}
	  %% Line 1321
	  <{'head',Bytes},'external'> when 'true' ->
	      let <_cor3> =
		  apply 'check_bytes'/1
		      (Bytes)
	      in  {'ok',_cor3}
	  %% Line 1322
	  <H,_cor6> when 'true' ->
	      H
	end
'terms2bins'/1 =
    %% Line 1324
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 1325
		  call 'erlang':'term_to_binary'
		      (T)
	      in  let <_cor2> =
		      %% Line 1325
		      apply 'terms2bins'/1
			  (Ts)
		  in  %% Line 1325
		      [_cor1|_cor2]
	  %% Line 1326
	  <[]> when 'true' ->
	      %% Line 1327
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'terms2bins',1}}] )
	    -| ['compiler_generated'] )
	end
'check_bytes_list'/2 =
    %% Line 1329
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|Bs],Bs0>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 1330
	      apply 'check_bytes_list'/2
		  (Bs, Bs0)
	  %% Line 1331
	  <[],Bs0> when 'true' ->
	      %% Line 1332
	      Bs0
	  %% Line 1333
	  <_cor4,Bs0> when 'true' ->
	      %% Line 1334
	      apply 'check_bytes_list'/1
		  (Bs0)
	end
'check_bytes_list'/1 =
    %% Line 1336
    fun (_cor0) ->
	case _cor0 of
	  <[B|Bs]>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_cor1> =
		  %% Line 1337
		  apply 'check_bytes_list'/1
		      (Bs)
	      in  %% Line 1337
		  [B|_cor1]
	  %% Line 1338
	  <[B|Bs]> when 'true' ->
	      let <_cor2> =
		  %% Line 1339
		  call 'erlang':'list_to_binary'
		      (B)
	      in  let <_cor3> =
		      %% Line 1339
		      apply 'check_bytes_list'/1
			  (Bs)
		  in  %% Line 1339
		      [_cor2|_cor3]
	  %% Line 1340
	  <[]> when 'true' ->
	      %% Line 1341
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'check_bytes_list',1}}] )
	    -| ['compiler_generated'] )
	end
'check_bytes'/1 =
    %% Line 1343
    fun (_cor0) ->
	case _cor0 of
	  <Binary>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1344
	      Binary
	  %% Line 1345
	  <Bytes> when 'true' ->
	      %% Line 1346
	      call 'erlang':'list_to_binary'
		  (Bytes)
	end
'do_change_size'/2 =
    %% Line 1352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = {'log',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},NewSize>
	      when call 'erlang':'=:='
		    (_cor41,
		     'halt') ->
	      %% Line 1354
	      ( case _cor47 of
		  ( <( {'halt',_cor63,_rec213,_cor64}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor16> =
			    %% Line 1355
			    call 'erlang':'setelement'
				(4, _cor47, NewSize)
			in  let <_cor20> =
				%% Line 1355
				call 'erlang':'setelement'
				    (14, L, _cor16)
			    in  %% Line 1356
				case <> of
				  %% Line 1357
				  <>
				      when call 'erlang':'=:='
					    (NewSize,
					     'infinity') ->
				      do  %% Line 1358
					  call 'erlang':'erase'
					      ('is_full')
					  do  %% Line 1359
					      call 'erlang':'put'
						  ('log', _cor20)
					      %% Line 1360
					      'ok'
				  %% Line 1361
				  <>
				      when call 'erlang':'=<'
					    (_rec213,
					     NewSize) ->
				      do  %% Line 1362
					  call 'erlang':'erase'
					      ('is_full')
					  do  %% Line 1363
					      call 'erlang':'put'
						  ('log', _cor20)
					      %% Line 1364
					      'ok'
				  %% Line 1365
				  <> when 'true' ->
				      %% Line 1366
				      {'big',_rec213}
				end
		    -| ['compiler_generated'] )
		  ( <_cor65> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','halt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1368
	  <L = {'log',_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98},NewSize>
	      when call 'erlang':'=:='
		    (_cor91,
		     'wrap') ->
	      %% Line 1370
	      case call 'disk_log_1':'change_size_wrap'
		       (_cor97, NewSize, _cor98) of
		<{'ok',Handle}> when 'true' ->
		    do  %% Line 1371
			call 'erlang':'erase'
			    ('is_full')
			let <_cor32> =
			    %% Line 1372
			    call 'erlang':'setelement'
				(14, L, Handle)
			in  do  %% Line 1372
				call 'erlang':'put'
				    ('log', _cor32)
				%% Line 1373
				'ok'
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor29})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33})
		  -| [{'function_name',{'do_change_size',2}}] )
	    -| ['compiler_generated'] )
	end
'check_head'/2 =
    %% Line 1376
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'head','none'},_X_Format> when 'true' ->
	      %% Line 1377
	      {'ok','none'}
	  %% Line 1378
	  <{'head_func',{M,F,A}},_X_Format>
	      when try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor3> =
			    %% Line 1379
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor4> =
				%% Line 1380
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1381
	      {'ok',{M,F,A}}
	  %% Line 1382
	  <{'head',Head},'external'> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 1383
		      apply 'check_bytes'/1
			  (Head)
	      in  %% Line 1383
		  case _cor6 of
		    %% Line 1384
		    <{'EXIT',_cor10}> when 'true' ->
			%% Line 1385
			{'error',{'badarg','head'}}
		    %% Line 1386
		    <_cor11> when 'true' ->
			%% Line 1387
			{'ok',{'head',Head}}
		  end
	  %% Line 1389
	  <{'head',Term},'internal'> when 'true' ->
	      %% Line 1390
	      {'ok',{'head',Term}}
	  %% Line 1391
	  <_X_Head,_X_Format> when 'true' ->
	      %% Line 1392
	      {'error',{'badarg','head'}}
	end
'check_size'/2 =
    %% Line 1394
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'wrap',{NewMaxB,NewMaxF}>
	      when %% Line 1395
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (NewMaxB)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(NewMaxF)
			in  let <_cor4> =
				%% Line 1396
				call 'erlang':'>'
				    (NewMaxB, 0)
			    in  let <_cor7> =
				    %% Line 1396
				    call 'erlang':'=<'
					(NewMaxB, 18446744073709551615)
				in  let <_cor8> =
					%% Line 1396
					call 'erlang':'>'
					    (NewMaxF, 0)
				    in  let <_cor9> =
					    %% Line 1396
					    call 'erlang':'<'
						(NewMaxF, 65000)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor8, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor7, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor4, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor3, _cor12)
							in  call 'erlang':'and'
								(_cor2, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1397
	      'ok'
	  %% Line 1398
	  <'halt',NewSize>
	      when let <_cor14> =
		    call 'erlang':'is_integer'
			(NewSize)
		in  let <_cor15> =
			call 'erlang':'>'
			    (NewSize, 0)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 1399
	      'ok'
	  %% Line 1400
	  <'halt','infinity'> when 'true' ->
	      %% Line 1401
	      'ok'
	  %% Line 1402
	  <_cor18,_cor19> when 'true' ->
	      %% Line 1403
	      'not_ok'
	end
'do_inc_wrap_file'/1 =
    %% Line 1409
    fun (_cor0) ->
	%% Line 1410
	case _cor0 of
	  <{'log',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,Format,_cor29,_cor30,_cor31,_cor32,Handle,_cor33}> when 'true' ->
	      %% Line 1411
	      case Format of
		%% Line 1412
		<'internal'> when 'true' ->
		    %% Line 1413
		    case call 'disk_log_1':'mf_int_inc'
			     (Handle, _cor30) of
		      %% Line 1414
		      <{'ok',Handle2,Lost}> when 'true' ->
			  let <_cor6> =
			      %% Line 1415
			      call 'erlang':'setelement'
				  (14, _cor0, Handle2)
			  in  %% Line 1415
			      {'ok',_cor6,Lost}
		      %% Line 1416
		      <{'error',Error,Handle2}> when 'true' ->
			  let <_cor9> =
			      %% Line 1417
			      call 'erlang':'setelement'
				  (14, _cor0, Handle2)
			  in  %% Line 1417
			      {'error',Error,_cor9}
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 1419
		<'external'> when 'true' ->
		    %% Line 1420
		    case call 'disk_log_1':'mf_ext_inc'
			     (Handle, _cor30) of
		      %% Line 1421
		      <{'ok',Handle2,Lost}> when 'true' ->
			  let <_cor15> =
			      %% Line 1422
			      call 'erlang':'setelement'
				  (14, _cor0, Handle2)
			  in  %% Line 1422
			      {'ok',_cor15,Lost}
		      %% Line 1423
		      <{'error',Error,Handle2}> when 'true' ->
			  let <_cor18> =
			      %% Line 1424
			      call 'erlang':'setelement'
				  (14, _cor0, Handle2)
			  in  %% Line 1424
			      {'error',Error,_cor18}
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_open2'/2 =
    %% Line 1434
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L,{'arg',Name,_cor52,%% Line 1435
				FName,%% Line 1435
				      Repair,%% Line 1435
					     Size,'halt',_cor53,'internal',_cor54,_cor55,%% Line 1435
											 Mode,_cor56,_cor57}> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 1436
		      ( case L of
			  ( <( {'log',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_rec224,_cor67,_cor68,_cor69,_cor70}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'disk_log_1':'int_open'
				    (FName, Repair, Mode, _rec224)
			    -| ['compiler_generated'] )
			  ( <_cor71> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1436
		  case _cor4 of
		    %% Line 1437
		    <{'ok',{_X_Alloc,FdC,{NoItems,_X_NoBytes},FileSize}}> when 'true' ->
			let <Halt> =
			    %% Line 1438
			    {'halt',FdC,FileSize,Size}
			in  %% Line 1439
			    case L of
			      <{'log',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
				  let <_cor7> =
				      call 'erlang':'setelement'
					  (14, L, Halt)
				  in  let <_cor9> =
					  call 'erlang':'setelement'
					      (10, _cor7, 'halt_int')
				      in  {'ok',{'ok',Name},_cor9,%% Line 1440
								  NoItems}
			      ( <_cor86> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','log'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    %% Line 1441
		    <{'repaired',FdC,Rec,Bad,FileSize}> when 'true' ->
			let <Halt> =
			    %% Line 1442
			    {'halt',FdC,FileSize,Size}
			in  %% Line 1444
			    case L of
			      <{'log',_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100}> when 'true' ->
				  let <_cor12> =
				      call 'erlang':'setelement'
					  (14, L, Halt)
				  in  let <_cor14> =
					  call 'erlang':'setelement'
					      (10, _cor12, 'halt_int')
				      in  {'ok',{'repaired',Name,{'recovered',Rec},{'badbytes',Bad}},_cor14,%% Line 1445
													    Rec}
			      ( <_cor101> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','log'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    %% Line 1446
		    <Error> when 'true' ->
			%% Line 1447
			Error
		  end
	  %% Line 1449
	  <L,{'arg',%% Line 1450
		    Name,%% Line 1451
			 V,%% Line 1450
			   FName,%% Line 1450
				 Repair,{MaxB,MaxF},'wrap',_cor102,'internal',_cor103,_cor104,%% Line 1450
											      Mode,_cor105,_cor106}> when 'true' ->
	      let <_cor18> =
		  catch
		      %% Line 1453
		      ( case L of
			  ( <( {'log',_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_rec227,_cor116,_cor117,_cor118,_cor119}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'disk_log_1':'mf_int_open'
				    (FName, MaxB, MaxF, Repair, Mode, _rec227, V)
			    -| ['compiler_generated'] )
			  ( <_cor120> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1452
		  case _cor18 of
		    %% Line 1454
		    <{'ok',Handle,Cnt}> when 'true' ->
			%% Line 1455
			case L of
			  <{'log',_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134}> when 'true' ->
			      let <_cor20> =
				  %% Line 1457
				  call 'erlang':'setelement'
				      (14, L, Handle)
			      in  let <_cor21> =
				      %% Line 1456
				      call 'erlang':'setelement'
					  (10, _cor20, 'wrap_int')
				  in  let <_cor23> =
					  call 'erlang':'setelement'
					      (8, _cor21, 'wrap')
				      in  {'ok',{'ok',Name},_cor23,%% Line 1457
								   Cnt}
			  ( <_cor135> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1458
		    <{'repaired',Handle,Rec,Bad,Cnt}> when 'true' ->
			%% Line 1460
			case L of
			  <{'log',_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149}> when 'true' ->
			      let <_cor25> =
				  call 'erlang':'setelement'
				      (14, L, Handle)
			      in  let <_cor26> =
				      call 'erlang':'setelement'
					  (10, _cor25, 'wrap_int')
				  in  let <_cor28> =
					  call 'erlang':'setelement'
					      (8, _cor26, 'wrap')
				      in  {'ok',{'repaired',Name,{'recovered',Rec},{'badbytes',Bad}},_cor28,Cnt}
			  ( <_cor150> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1461
		    <Error> when 'true' ->
			%% Line 1462
			Error
		  end
	  %% Line 1464
	  <L,{'arg',Name,_cor151,FName,%% Line 1465
				       Repair,%% Line 1465
					      Size,'halt',_cor152,'external',_cor153,_cor154,%% Line 1465
											     Mode,_cor155,_cor156}> when 'true' ->
	      let <_cor32> =
		  catch
		      %% Line 1466
		      ( case L of
			  ( <( {'log',_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_rec230,_cor166,_cor167,_cor168,_cor169}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'disk_log_1':'ext_open'
				    (FName, Repair, Mode, _rec230)
			    -| ['compiler_generated'] )
			  ( <_cor170> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1466
		  case _cor32 of
		    %% Line 1467
		    <{'ok',{_X_Alloc,FdC,{NoItems,_X_NoBytes},FileSize}}> when 'true' ->
			let <Halt> =
			    %% Line 1468
			    {'halt',FdC,FileSize,Size}
			in  %% Line 1470
			    case L of
			      <{'log',_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184}> when 'true' ->
				  let <_cor35> =
				      call 'erlang':'setelement'
					  (14, L, Halt)
				  in  let <_cor36> =
					  call 'erlang':'setelement'
					      (10, _cor35, 'halt_ext')
				      in  let <_cor38> =
					      call 'erlang':'setelement'
						  (9, _cor36, 'external')
					  in  {'ok',{'ok',Name},_cor38,%% Line 1471
								       NoItems}
			      ( <_cor185> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','log'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    %% Line 1472
		    <Error> when 'true' ->
			%% Line 1473
			Error
		  end
	  %% Line 1475
	  <L,{'arg',%% Line 1476
		    Name,%% Line 1477
			 V,%% Line 1476
			   FName,%% Line 1476
				 Repair,{MaxB,MaxF},'wrap',_cor186,'external',_cor187,_cor188,%% Line 1476
											      Mode,_cor189,_cor190}> when 'true' ->
	      let <_cor42> =
		  catch
		      %% Line 1479
		      ( case L of
			  ( <( {'log',_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_rec232,_cor200,_cor201,_cor202,_cor203}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'disk_log_1':'mf_ext_open'
				    (FName, MaxB, MaxF, Repair, Mode, _rec232, V)
			    -| ['compiler_generated'] )
			  ( <_cor204> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 1478
		  case _cor42 of
		    %% Line 1480
		    <{'ok',Handle,Cnt}> when 'true' ->
			%% Line 1481
			case L of
			  <{'log',_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218}> when 'true' ->
			      let <_cor44> =
				  %% Line 1483
				  call 'erlang':'setelement'
				      (14, L, Handle)
			      in  let <_cor45> =
				      %% Line 1482
				      call 'erlang':'setelement'
					  (10, _cor44, 'wrap_ext')
				  in  let <_cor46> =
					  %% Line 1484
					  call 'erlang':'setelement'
					      (9, _cor45, 'external')
				      in  let <_cor48> =
					      call 'erlang':'setelement'
						  (8, _cor46, 'wrap')
					  in  {'ok',{'ok',Name},_cor48,%% Line 1484
								       Cnt}
			  ( <_cor219> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 1485
		    <Error> when 'true' ->
			%% Line 1486
			Error
		  end
	  ( <_cor51,_cor50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor51,_cor50})
		  -| [{'function_name',{'do_open2',2}}] )
	    -| ['compiler_generated'] )
	end
'close_disk_log'/1 =
    %% Line 1490
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 1491
	      'closed'
	  %% Line 1492
	  <L> when 'true' ->
	      do  %% Line 1493
		  apply 'unblock_pid'/1
		      (L)
		  let <F> =
		      %% Line 1494
		      ( fun (_cor1) ->
			    case _cor1 of
			      <{Pid,_cor9}> when 'true' ->
				  %% Line 1495
				  call 'erlang':'unlink'
				      (Pid)
			      ( <_cor2> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor2})
				      -| [{'function_name',{'-close_disk_log/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-close_disk_log/1-fun-0-'}}] )
		  in  %% Line 1497
		      ( case L of
			  ( <( {'log',_cor10,_cor11,_cor12,_cor13,_cor14,_rec234,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
			       -| ['compiler_generated'] )> when 'true' ->
				do  call 'lists':'foreach'
					(F, _rec234)
				    let <_cor6> =
					catch
					    %% Line 1498
					    apply 'close_disk_log2'/1
						(L)
				    in  do  %% Line 1499
					    call 'erlang':'erase'
						('log')
					    _cor6
			    -| ['compiler_generated'] )
			  ( <_cor23> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	end
'close_disk_log2'/1 =
    %% Line 1504
    fun (_cor0) ->
	do  %% Line 1505
	    case _cor0 of
	      %% Line 1506
	      <{'log',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,'halt_int',_cor19,Mode,_cor20,Halt,_cor21}> when 'true' ->
		  %% Line 1507
		  ( case Halt of
		      ( <( {'halt',_rec235,_cor22,_cor23}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'disk_log_1':'close'
				(_rec235, _cor15, Mode)
			-| ['compiler_generated'] )
		      ( <_cor24> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','halt'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1508
	      <{'log',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,'wrap_int',_cor47,Mode,_cor48,Handle,_cor49}> when 'true' ->
		  %% Line 1509
		  call 'disk_log_1':'mf_int_close'
		      (Handle, Mode)
	      %% Line 1510
	      <{'log',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,'halt_ext',_cor58,_cor59,_cor60,Halt,_cor61}> when 'true' ->
		  %% Line 1511
		  ( case Halt of
		      ( <( {'halt',_rec237,_cor62,_cor63}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'disk_log_1':'fclose'
				(_rec237, _cor54)
			-| ['compiler_generated'] )
		      ( <_cor64> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','halt'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1512
	      <{'log',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,'wrap_ext',_cor87,Mode,_cor88,Handle,_cor89}> when 'true' ->
		  %% Line 1513
		  call 'disk_log_1':'mf_ext_close'
		      (Handle, Mode)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor9})
		-| ['compiler_generated'] )
	    end
	    %% Line 1515
	    'closed'
'do_format_error'/1 =
    %% Line 1517
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 1518
	      call Module:'format_error'
		  (Error)
	  %% Line 1519
	  <{'error',Reason}> when 'true' ->
	      %% Line 1520
	      apply 'do_format_error'/1
		  (Reason)
	  %% Line 1521
	  <{Node,Error = {'error',_X_Reason}}> when 'true' ->
	      let <_cor2> =
		  %% Line 1522
		  call 'io_lib':'format'
		      ([126|[112|[58|[32]]]], [Node|[]])
	      in  let <_cor1> =
		      %% Line 1522
		      apply 'do_format_error'/1
			  (Error)
		  in  %% Line 1522
		      call 'lists':'append'
			  (_cor2, _cor1)
	  %% Line 1523
	  <{'badarg',Arg}> when 'true' ->
	      %% Line 1524
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103|[44|[32|[110|[111|[116|[32|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[111|[114|[32|[110|[111|[116|[32|[119|[101|[108|[108|[102|[111|[114|[109|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1525
																																															   [Arg|[]])
	  %% Line 1526
	  <{'size_mismatch',OldSize,ArgSize}> when 'true' ->
	      %% Line 1527
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[103|[105|[118|[101|[110|[32|[115|[105|[122|[101|[32|[126|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[116|[104|[101|[32|[115|[105|[122|[101|[32|[126|[112|[32|[102|[111|[117|[110|[100|[32|[111|[110|[32|[116|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[115|[105|[122|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1528
																																																										     [ArgSize|[OldSize|[]]])
	  %% Line 1529
	  <{'read_only_mode',Log}> when 'true' ->
	      %% Line 1530
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[104|[97|[115|[32|[98|[101|[101|[110|[32|[111|[112|[101|[110|[101|[100|[32|[114|[101|[97|[100|[45|[111|[110|[108|[121|[44|[32|[98|[117|[116|[32|[116|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[101|[100|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[110|[101|[101|[100|[115|[32|[114|[101|[97|[100|[45|[119|[114|[105|[116|[101|[32|[97|[99|[99|[101|[115|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1531
																																																																							       [Log|[]])
	  %% Line 1532
	  <{'format_external',Log}> when 'true' ->
	      %% Line 1533
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[101|[100|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[97|[112|[112|[108|[105|[101|[100|[32|[111|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[108|[121|[32|[102|[111|[114|[109|[97|[116|[116|[101|[100|[32|[100|[105|[115|[107|[32|[108|[111|[103|[115|[44|[32|[98|[117|[116|[32|[126|[116|[112|[32|[105|[115|[32|[101|[120|[116|[101|[114|[110|[97|[108|[108|[121|[32|[102|[111|[114|[109|[97|[116|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1535
																																																																																			[Log|[]])
	  %% Line 1536
	  <{'blocked_log',Log}> when 'true' ->
	      %% Line 1537
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[98|[108|[111|[99|[107|[101|[100|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[113|[117|[101|[117|[101|[32|[114|[101|[113|[117|[101|[115|[116|[115|[44|[32|[111|[114|[32|[116|[104|[101|[32|[108|[111|[103|[32|[104|[97|[115|[32|[98|[101|[101|[110|[32|[98|[108|[111|[99|[107|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[99|[97|[108|[108|[105|[110|[103|[32|[112|[114|[111|[99|[101|[115|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1538
																																																																											  [Log|[]])
	  %% Line 1539
	  <{'full',Log}> when 'true' ->
	      %% Line 1540
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[104|[97|[108|[116|[32|[108|[111|[103|[32|[126|[116|[112|[32|[105|[115|[32|[102|[117|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [Log|[]])
	  %% Line 1541
	  <{'not_blocked',Log}> when 'true' ->
	      %% Line 1542
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[98|[108|[111|[99|[107|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Log|[]])
	  %% Line 1543
	  <{'not_owner',Pid}> when 'true' ->
	      %% Line 1544
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[112|[105|[100|[32|[126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[111|[119|[110|[101|[114|[32|[111|[102|[32|[116|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Pid|[]])
	  %% Line 1545
	  <{'not_blocked_by_pid',Log}> when 'true' ->
	      %% Line 1546
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[105|[115|[32|[98|[108|[111|[99|[107|[101|[100|[44|[32|[98|[117|[116|[32|[111|[110|[108|[121|[32|[116|[104|[101|[32|[98|[108|[111|[99|[107|[105|[110|[103|[32|[112|[105|[100|[32|[99|[97|[110|[32|[117|[110|[98|[108|[111|[99|[107|[32|[97|[32|[100|[105|[115|[107|[32|[108|[111|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1547
																																																										   [Log|[]])
	  %% Line 1548
	  <{'new_size_too_small',Log,CurrentSize}> when 'true' ->
	      %% Line 1549
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[115|[105|[122|[101|[32|[126|[112|[32|[111|[102|[32|[116|[104|[101|[32|[104|[97|[108|[116|[32|[108|[111|[103|[32|[126|[116|[112|[32|[105|[115|[32|[103|[114|[101|[97|[116|[101|[114|[32|[116|[104|[97|[110|[32|[116|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[101|[100|[32|[110|[101|[119|[32|[115|[105|[122|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1550
																																																												[CurrentSize|[Log|[]]])
	  %% Line 1551
	  <{'halt_log',Log}> when 'true' ->
	      %% Line 1552
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[104|[97|[108|[116|[32|[108|[111|[103|[32|[126|[116|[112|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[119|[114|[97|[112|[112|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Log|[]])
	  %% Line 1553
	  <{'same_file_name',Log}> when 'true' ->
	      %% Line 1554
	      call 'io_lib':'format'
		  ([67|[117|[114|[114|[101|[110|[116|[32|[97|[110|[100|[32|[110|[101|[119|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[111|[102|[32|[116|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[97|[114|[101|[32|[116|[104|[101|[32|[115|[97|[109|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1555
																																													   [Log|[]])
	  %% Line 1556
	  <{'arg_mismatch',Option,FirstValue,ArgValue}> when 'true' ->
	      %% Line 1557
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[118|[97|[108|[117|[101|[32|[126|[116|[112|[32|[111|[102|[32|[116|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[111|[112|[116|[105|[111|[110|[32|[126|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[116|[104|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[118|[97|[108|[117|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1558
																																																										   [ArgValue|[Option|[FirstValue|[]]]])
	  %% Line 1559
	  <{'name_already_open',Log}> when 'true' ->
	      %% Line 1560
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[104|[97|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[111|[112|[101|[110|[101|[100|[32|[97|[110|[111|[116|[104|[101|[114|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Log|[]])
	  %% Line 1561
	  <{'node_already_open',Log}> when 'true' ->
	      %% Line 1562
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[116|[114|[105|[98|[117|[116|[105|[111|[110|[32|[111|[112|[116|[105|[111|[110|[32|[111|[102|[32|[116|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[97|[108|[114|[101|[97|[100|[121|[32|[111|[112|[101|[110|[32|[108|[111|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1563
																																																									       [Log|[]])
	  %% Line 1564
	  <{'open_read_write',Log}> when 'true' ->
	      %% Line 1565
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[104|[97|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[98|[101|[101|[110|[32|[111|[112|[101|[110|[101|[100|[32|[114|[101|[97|[100|[45|[119|[114|[105|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1566
																																								   [Log|[]])
	  %% Line 1567
	  <{'open_read_only',Log}> when 'true' ->
	      %% Line 1568
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[126|[116|[112|[32|[104|[97|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[98|[101|[101|[110|[32|[111|[112|[101|[110|[101|[100|[32|[114|[101|[97|[100|[45|[111|[110|[108|[121|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1569
																																							     [Log|[]])
	  %% Line 1570
	  <{'not_internal_wrap',Log}> when 'true' ->
	      %% Line 1571
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[101|[100|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[97|[112|[112|[108|[105|[101|[100|[32|[115|[105|[110|[99|[101|[32|[126|[116|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[108|[121|[32|[102|[111|[114|[109|[97|[116|[116|[101|[100|[32|[100|[105|[115|[107|[32|[108|[111|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1572
																																																																					  [Log|[]])
	  %% Line 1573
	  <'no_such_log'> when 'true' ->
	      %% Line 1574
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[103|[105|[118|[101|[110|[32|[110|[97|[109|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 1575
	  <'nonode'> when 'true' ->
	      %% Line 1576
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[115|[101|[101|[109|[115|[32|[116|[111|[32|[98|[101|[32|[110|[111|[32|[110|[111|[100|[101|[32|[117|[112|[32|[116|[104|[97|[116|[32|[99|[97|[110|[32|[104|[97|[110|[100|[108|[101|[32|[116|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1577
																																											       [])
	  %% Line 1578
	  <'nodedown'> when 'true' ->
	      %% Line 1579
	      call 'io_lib':'format'
		  ([84|[104|[101|[114|[101|[32|[115|[101|[101|[109|[115|[32|[116|[111|[32|[98|[101|[32|[110|[111|[32|[110|[111|[100|[101|[32|[117|[112|[32|[116|[104|[97|[116|[32|[99|[97|[110|[32|[104|[97|[110|[100|[108|[101|[32|[116|[104|[101|[32|[114|[101|[113|[117|[101|[115|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1580
																																											       [])
	  %% Line 1581
	  <{'corrupt_log_file',FileName}> when 'true' ->
	      %% Line 1582
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[99|[111|[114|[114|[117|[112|[116|[32|[100|[97|[116|[97|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1583
																																			       [FileName|[]])
	  %% Line 1584
	  <{'need_repair',FileName}> when 'true' ->
	      %% Line 1585
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[104|[97|[115|[32|[110|[111|[116|[32|[98|[101|[101|[110|[32|[99|[108|[111|[115|[101|[100|[32|[112|[114|[111|[112|[101|[114|[108|[121|[32|[97|[110|[100|[32|[110|[101|[101|[100|[115|[32|[114|[101|[112|[97|[105|[114|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1586
																																																					  [FileName|[]])
	  %% Line 1587
	  <{'not_a_log_file',FileName}> when 'true' ->
	      %% Line 1588
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[119|[114|[97|[112|[32|[108|[111|[103|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [FileName|[]])
	  %% Line 1589
	  <{'invalid_header',InvalidHeader}> when 'true' ->
	      %% Line 1590
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[100|[105|[115|[107|[32|[108|[111|[103|[32|[104|[101|[97|[100|[101|[114|[32|[105|[115|[32|[110|[111|[116|[32|[119|[101|[108|[108|[102|[111|[114|[109|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1591
																																	    [InvalidHeader|[]])
	  %% Line 1592
	  <'end_of_log'> when 'true' ->
	      %% Line 1593
	      call 'io_lib':'format'
		  ([65|[110|[32|[97|[116|[116|[101|[109|[112|[116|[32|[119|[97|[115|[32|[109|[97|[100|[101|[32|[116|[111|[32|[115|[116|[101|[112|[32|[111|[117|[116|[115|[105|[100|[101|[32|[97|[32|[110|[111|[116|[32|[121|[101|[116|[32|[102|[117|[108|[108|[32|[119|[114|[97|[112|[32|[108|[111|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1594
																																														[])
	  %% Line 1595
	  <{'invalid_index_file',FileName}> when 'true' ->
	      %% Line 1596
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[119|[114|[97|[112|[32|[108|[111|[103|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101|[32|[34|[126|[116|[115|[34|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[117|[115|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1597
																																			 [FileName|[]])
	  %% Line 1598
	  <{'no_continuation',BadCont}> when 'true' ->
	      %% Line 1599
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[116|[101|[114|[109|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[99|[104|[117|[110|[107|[32|[99|[111|[110|[116|[105|[110|[117|[97|[116|[105|[111|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [BadCont|[]])
	  %% Line 1600
	  <{'file_error',FileName,Reason}> when 'true' ->
	      let <_cor3> =
		  %% Line 1601
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 1601
		  call 'io_lib':'format'
		      ([34|[126|[116|[115|[34|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]], [FileName|[_cor3|[]]])
	  %% Line 1602
	  <E> when 'true' ->
	      %% Line 1603
	      call 'io_lib':'format'
		  ([126|[116|[112|[126|[110]]]]], [E|[]])
	end
'do_info'/2 =
    %% Line 1605
    fun (_cor1,_cor0) ->
	%% Line 1608
	case _cor1 of
	  <{'log',Status,Name,_cor40,Users,File,Owners,Type,Format,_cor41,Head,Mode,_cor42,Extra,_cor43}> when 'true' ->
	      let <_cor5> =
		  %% Line 1609
		  case Type of
		    %% Line 1610
		    <'wrap'> when 'true' ->
			%% Line 1611
			call 'disk_log_1':'get_wrap_size'
			    (Extra)
		    %% Line 1612
		    <'halt'> when 'true' ->
			%% Line 1613
			( case Extra of
			    ( <( {'halt',_cor44,_cor45,_rec239}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec239
			      -| ['compiler_generated'] )
			    ( <_cor46> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','halt'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 1616
		      case call 'disk_log_server':'get_log_pids'
			       (Name) of
			%% Line 1617
			<{'local',_X_Pid}> when 'true' ->
			    %% Line 1618
			    'local'
			%% Line 1619
			<{'distributed',Pids}> when 'true' ->
			    %% Line 1620
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor9) ->
					  case _cor9 of
					    <[P|_cor8]> when 'true' ->
						let <_cor10> =
						    call 'erlang':'node'
							(P)
						in  let <_cor11> =
							apply 'lc$^0'/1
							    (_cor8)
						    in  ( [_cor10|_cor11]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor9> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Pids)
			      -| ['list_comprehension'] )
			%% Line 1621
			<'undefined'> when 'true' ->
			    %% Line 1622
			    []
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor30> =
			  %% Line 1624
			  case Type of
			    %% Line 1625
			    <'wrap'>
				when call 'erlang':'=:='
				      (Mode,
				       'read_write') ->
				%% Line 1628
				case Extra of
				  <{'handle',_cor47,_cor48,_cor49,CurB,CurF,_cor50,_cor51,CurCnt,AccCnt,_cor52,NoFull,AccFull}> when 'true' ->
				      let <NewAccFull> =
					  %% Line 1629
					  call 'erlang':'+'
					      (AccFull, NoFull)
				      in  let <_cor18> =
					      %% Line 1630
					      call 'erlang':'setelement'
						  (13, Extra, NewAccFull)
					  in  let <_cor20> =
						  %% Line 1630
						  call 'erlang':'setelement'
						      (12, _cor18, 0)
					      in  let <_cor24> =
						      %% Line 1631
						      call 'erlang':'setelement'
							  (14, _cor1, _cor20)
						  in  do  %% Line 1631
							  call 'erlang':'put'
							      ('log', _cor24)
							  let <_cor25> =
							      %% Line 1635
							      call 'erlang':'+'
								  (CurCnt, AccCnt)
							  in  %% Line 1632
							      [{'no_current_bytes',CurB}|%% Line 1633
											 [{'no_current_items',CurCnt}|%% Line 1634
														      [{'no_items',_cor0}|%% Line 1635
																	  [{'no_written_items',_cor25}|%% Line 1636
																				       [{'current_file',CurF}|%% Line 1637
																							      [{'no_overflows',{NewAccFull,NoFull}}|%% Line 1638
																												    []]]]]]]
				  ( <_cor15> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor15})
				    -| ['compiler_generated'] )
				end
			    %% Line 1639
			    <'halt'>
				when call 'erlang':'=:='
				      (Mode,
				       'read_write') ->
				let <_cor27> =
				    %% Line 1640
				    case call 'erlang':'get'
					     ('is_full') of
				      %% Line 1641
				      <'undefined'> when 'true' ->
					  'false'
				      %% Line 1642
				      <_cor81> when 'true' ->
					  'true'
				    end
				in  %% Line 1644
				    [{'full',_cor27}|%% Line 1645
						     [{'no_written_items',_cor0}|%% Line 1646
										 []]]
			    %% Line 1647
			    <_cor82>
				when call 'erlang':'=:='
				      (Mode,
				       'read_only') ->
				%% Line 1648
				[]
			    ( <_cor29> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor29})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor33> =
			      %% Line 1650
			      case Mode of
				%% Line 1651
				<'read_write'> when 'true' ->
				    %% Line 1652
				    [{'head',Head}|[]]
				%% Line 1653
				<'read_only'> when 'true' ->
				    %% Line 1654
				    []
				( <_cor32> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor32})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor35> =
				  %% Line 1667
				  call 'erlang':'node'
				      ()
			      in  let <_cor36> =
				      %% Line 1664
				      call 'erlang':'++'
					  (_cor33, %% Line 1665
						   [{'mode',Mode}|%% Line 1666
								  [{'status',Status}|%% Line 1667
										     [{'node',_cor35}|%% Line 1668
												      [{'distributed',_cor13}|%% Line 1669
															      []]]]])
				  in  let <Common> =
					  %% Line 1656
					  [{'name',Name}|%% Line 1657
							 [{'file',File}|%% Line 1658
									[{'type',Type}|%% Line 1659
										       [{'format',Format}|%% Line 1660
													  [{'size',_cor5}|%% Line 1661
															  [{'items',_cor0}|%% Line 1662
																	   [{'owners',Owners}|%% Line 1663
																			      [{'users',Users}|_cor36]]]]]]]]
				      in  %% Line 1670
					  call 'erlang':'++'
					      (Common, _cor30)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_block'/3 =
    %% Line 1672
    fun (_cor2,_cor1,_cor0) ->
	let <_rec242> = {%% Line 1673
	     'blocked',_cor1}
	in  %% Line 1673
	    case _cor0 of
	      <{'log',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
		  let <_cor5> =
		      call 'erlang':'setelement'
			  (4, _cor0, _cor2)
		  in  let <_cor7> =
			  call 'erlang':'setelement'
			      (2, _cor5, _rec242)
		      in  do  %% Line 1674
			      call 'erlang':'put'
				  ('log', _cor7)
			      %% Line 1675
			      case apply 'is_owner'/2
				       (_cor2, _cor7) of
				%% Line 1676
				<{'true',_X_Notify}> when 'true' ->
				    %% Line 1677
				    'ok'
				%% Line 1678
				<'false'> when 'true' ->
				    %% Line 1679
				    call 'erlang':'link'
					(_cor2)
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor27> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','log'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'do_unblock'/3 =
    %% Line 1682
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,L = {'log',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},S>
	      when call 'erlang':'=:='
		    (_cor14,
		     Pid) ->
	      %% Line 1683
	      apply 'do_unblock'/2
		  (L, S)
	  %% Line 1684
	  <_X_Pid,_X_L,S> when 'true' ->
	      %% Line 1685
	      S
	end
'do_unblock'/2 =
    %% Line 1687
    fun (_cor1,_cor0) ->
	do  %% Line 1688
	    apply 'unblock_pid'/1
		(_cor1)
	    %% Line 1689
	    case _cor1 of
	      <{'log',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
		  let <_cor3> =
		      call 'erlang':'setelement'
			  (4, _cor1, 'none')
		  in  let <_cor5> =
			  call 'erlang':'setelement'
			      (2, _cor3, 'ok')
		      in  do  %% Line 1690
			      call 'erlang':'put'
				  ('log', _cor5)
			      %% Line 1695
			      ( case _cor0 of
				  ( <( {'state',_cor33,_rec245,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
				       -| ['compiler_generated'] )> when 'true' ->
					case _rec245 of
					  <[]> when 'true' ->
					      let <_rec246> =
						  %% Line 1696
						  call 'lists':'reverse'
						      (_cor33)
					      in  let <_cor14> =
						      %% Line 1696
						      call 'erlang':'setelement'
							  (3, _cor0, _rec246)
						  in  %% Line 1696
						      call 'erlang':'setelement'
							  (2, _cor14, [])
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor40> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	      ( <_cor32> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','log'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'do_log'/2 =
    %% Line 1700
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = {'log',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74},B>
	      when call 'erlang':'=:='
		    (_cor67,
		     'halt') ->
	      %% Line 1702
	      case _cor73 of
		<{'halt',_cor87,CurSize,Sz}> when 'true' ->
		    %% Line 1703
		    case apply 'bsize'/2
			     (B, _cor68) of
		      <{Bs,BSize}> when 'true' ->
			  %% Line 1704
			  case call 'erlang':'get'
				   ('is_full') of
			    %% Line 1705
			    <'true'> when 'true' ->
				%% Line 1706
				{'error',{'error',{'full',_cor62}},0}
			    %% Line 1707
			    <'undefined'>
				when let <_cor13> =
				      call 'erlang':'=:='
					  (Sz, 'infinity')
				  in  let <_cor15> =
					  try
					      let <_cor14> =
						  call 'erlang':'+'
						      (CurSize, BSize)
					      in  call 'erlang':'=<'
						      (_cor14, Sz)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'or'
					      (_cor13, _cor15) ->
				%% Line 1708
				apply 'halt_write'/5
				    (_cor73, L, B, Bs, BSize)
			    %% Line 1709
			    <'undefined'> when 'true' ->
				%% Line 1710
				apply 'halt_write_full'/4
				    (L, B, _cor68, 0)
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor16})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1712
	  <L = {'log',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115},B>
	      when call 'erlang':'=:='
		    (_cor110,
		     'wrap_int') ->
	      %% Line 1713
	      case call 'disk_log_1':'mf_int_log'
		       (_cor114, B, _cor111) of
		%% Line 1714
		<{'ok',Handle,Logged,Lost,Wraps}> when 'true' ->
		    do  %% Line 1715
			apply 'notify_owners_wrap'/1
			    (Wraps)
			let <_cor29> =
			    %% Line 1716
			    call 'erlang':'setelement'
				(14, L, Handle)
			in  do  %% Line 1716
				call 'erlang':'put'
				    ('log', _cor29)
				%% Line 1717
				call 'erlang':'-'
				    (Logged, Lost)
		%% Line 1718
		<{'ok',Handle,Logged}> when 'true' ->
		    let <_cor32> =
			%% Line 1719
			call 'erlang':'setelement'
			    (14, L, Handle)
		    in  do  %% Line 1719
			    call 'erlang':'put'
				('log', _cor32)
			    %% Line 1720
			    Logged
		%% Line 1721
		<{'error',Error,Handle,Logged,Lost}> when 'true' ->
		    let <_cor35> =
			%% Line 1722
			call 'erlang':'setelement'
			    (14, L, Handle)
		    in  do  %% Line 1722
			    call 'erlang':'put'
				('log', _cor35)
			    let <_cor36> =
				%% Line 1723
				call 'erlang':'-'
				    (Logged, Lost)
			    in  %% Line 1723
				{'error',Error,_cor36}
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1725
	  <L = {'log',_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202},B>
	      when call 'erlang':'=:='
		    (_cor197,
		     'wrap_ext') ->
	      %% Line 1726
	      case call 'disk_log_1':'mf_ext_log'
		       (_cor201, B, _cor198) of
		%% Line 1727
		<{'ok',Handle,Logged,Lost,Wraps}> when 'true' ->
		    do  %% Line 1728
			apply 'notify_owners_wrap'/1
			    (Wraps)
			let <_cor50> =
			    %% Line 1729
			    call 'erlang':'setelement'
				(14, L, Handle)
			in  do  %% Line 1729
				call 'erlang':'put'
				    ('log', _cor50)
				%% Line 1730
				call 'erlang':'-'
				    (Logged, Lost)
		%% Line 1731
		<{'ok',Handle,Logged}> when 'true' ->
		    let <_cor53> =
			%% Line 1732
			call 'erlang':'setelement'
			    (14, L, Handle)
		    in  do  %% Line 1732
			    call 'erlang':'put'
				('log', _cor53)
			    %% Line 1733
			    Logged
		%% Line 1734
		<{'error',Error,Handle,Logged,Lost}> when 'true' ->
		    let <_cor56> =
			%% Line 1735
			call 'erlang':'setelement'
			    (14, L, Handle)
		    in  do  %% Line 1735
			    call 'erlang':'put'
				('log', _cor56)
			    let <_cor57> =
				%% Line 1736
				call 'erlang':'-'
				    (Logged, Lost)
			    in  %% Line 1736
				{'error',Error,_cor57}
		( <_cor58> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor58})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor60,_cor59> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor60,_cor59})
		  -| [{'function_name',{'do_log',2}}] )
	    -| ['compiler_generated'] )
	end
'bsize'/2 =
    %% Line 1739
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,'external'> when 'true' ->
	      let <_cor2> =
		  %% Line 1740
		  apply 'xsz'/2
		      (B, 0)
	      in  %% Line 1740
		  {B,_cor2}
	  %% Line 1741
	  <B,'internal'> when 'true' ->
	      %% Line 1742
	      call 'disk_log_1':'logl'
		  (B)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'bsize',2}}] )
	    -| ['compiler_generated'] )
	end
'xsz'/2 =
    %% Line 1744
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|T],Sz> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor3> =
		      call 'erlang':'+'
			  (_cor2, Sz)
		  in  apply 'xsz'/2
			  (T, _cor3)
	  %% Line 1745
	  <[],Sz> when 'true' ->
	      Sz
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'xsz',2}}] )
	    -| ['compiler_generated'] )
	end
'halt_write_full'/4 =
    %% Line 1747
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L,[Bin|Bins],Format,N> when 'true' ->
	      let <B> =
		  %% Line 1748
		  [Bin|[]]
	      in  %% Line 1749
		  case apply 'bsize'/2
			   (B, Format) of
		    <{Bs,BSize}> when 'true' ->
			%% Line 1750
			( case L of
			    ( <( {'log',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec260,_cor32}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1751
				  case _rec260 of
				    <{'halt',_cor34,CurSize,Sz}> when 'true' ->
					%% Line 1752
					case <> of
					  %% Line 1753
					  <>
					      when try
						    let <_cor10> =
							call 'erlang':'+'
							    (CurSize, BSize)
						    in  call 'erlang':'=<'
							    (_cor10, Sz)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      %% Line 1754
					      case apply 'halt_write'/5
						       (_rec260, L, B, Bs, BSize) of
						%% Line 1755
						<N1>
						    when call 'erlang':'is_integer'
							  (N1) ->
						    let <_cor12> =
							%% Line 1756
							call 'erlang':'get'
							    ('log')
						    in  let <_cor11> =
							    %% Line 1756
							    call 'erlang':'+'
								(N, N1)
							in  %% Line 1756
							    apply 'halt_write_full'/4
								(_cor12, Bins, Format, _cor11)
						%% Line 1757
						<Error> when 'true' ->
						    %% Line 1758
						    Error
					      end
					  %% Line 1760
					  <> when 'true' ->
					      %% Line 1761
					      apply 'halt_write_full'/4
						  (L, [], Format, N)
					end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','log'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1763
	  <L,_X_Bs,_X_Format,N> when 'true' ->
	      do  %% Line 1764
		  call 'erlang':'put'
		      ('is_full', 'true')
		  do  %% Line 1765
		      apply 'notify_owners'/1
			  ('full')
		      %% Line 1766
		      ( case L of
			  ( <( {'log',_cor35,_rec261,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
			       -| ['compiler_generated'] )> when 'true' ->
				{'error',{'error',{'full',_rec261}},N}
			    -| ['compiler_generated'] )
			  ( <_cor48> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','log'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	end
'halt_write'/5 =
    %% Line 1768
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1769
	( case _cor4 of
	    ( <( {'halt',_rec262,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _cor3 of
		      ( <( {'log',_cor35,_cor36,_cor37,_cor38,_rec263,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
			   -| ['compiler_generated'] )> when 'true' ->
			    case call 'disk_log_1':'fwrite'
				     (_rec262, _rec263, _cor1, _cor0) of
			      %% Line 1770
			      <{'ok',NewFdC}> when 'true' ->
				  let <NCurB> =
				      %% Line 1771
				      call 'erlang':'+'
					  (_cor32, _cor0)
				  in  let <_cor14> =
					  %% Line 1772
					  {'halt',NewFdC,NCurB,_cor33}
				      in  let <_cor18> =
					      %% Line 1773
					      call 'erlang':'setelement'
						  (14, _cor3, _cor14)
					  in  do  %% Line 1773
						  call 'erlang':'put'
						      ('log', _cor18)
						  %% Line 1774
						  call 'erlang':'length'
						      (_cor2)
			      %% Line 1775
			      <{Error,NewFdC}> when 'true' ->
				  let <_cor21> =
				      %% Line 1776
				      call 'erlang':'setelement'
					  (2, _cor4, NewFdC)
				  in  let <_cor25> =
					  %% Line 1776
					  call 'erlang':'setelement'
					      (14, _cor3, _cor21)
				      in  do  %% Line 1776
					      call 'erlang':'put'
						  ('log', _cor25)
					      %% Line 1777
					      {'error',Error,0}
			      ( <_cor26> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor26})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor48> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','log'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','halt'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_write_cache'/1 =
    %% Line 1781
    fun (_cor0) ->
	case _cor0 of
	  <Log = {'log',_cor16,_cor17,_cor18,_cor19,FName,_cor20,'halt',_cor21,_cor22,_cor23,_cor24,_cor25,Halt,_cor26}> when 'true' ->
	      %% Line 1782
	      ( case Halt of
		  ( <( {'halt',_rec273,_cor27,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'disk_log_1':'write_cache'
				 (_rec273, FName) of
			  <{Reply,NewFdC}> when 'true' ->
			      let <_cor6> =
				  %% Line 1783
				  call 'erlang':'setelement'
				      (2, Halt, NewFdC)
			      in  let <_cor10> =
				      %% Line 1783
				      call 'erlang':'setelement'
					  (14, Log, _cor6)
				  in  do  %% Line 1783
					  call 'erlang':'put'
					      ('log', _cor10)
					  %% Line 1784
					  Reply
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','halt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1785
	  <Log = {'log',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,'wrap',_cor55,_cor56,_cor57,_cor58,_cor59,Handle,_cor60}> when 'true' ->
	      %% Line 1786
	      case call 'disk_log_1':'mf_write_cache'
		       (Handle) of
		<{Reply,NewHandle}> when 'true' ->
		    let <_cor14> =
			%% Line 1787
			call 'erlang':'setelement'
			    (14, Log, NewHandle)
		    in  do  %% Line 1787
			    call 'erlang':'put'
				('log', _cor14)
			    %% Line 1788
			    Reply
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'do_write_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'do_sync'/1 =
    %% Line 1791
    fun (_cor0) ->
	case _cor0 of
	  <Log = {'log',_cor16,_cor17,_cor18,_cor19,FName,_cor20,'halt',_cor21,_cor22,_cor23,_cor24,_cor25,Halt,_cor26}> when 'true' ->
	      %% Line 1792
	      ( case Halt of
		  ( <( {'halt',_rec278,_cor27,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'disk_log_1':'sync'
				 (_rec278, FName) of
			  <{Reply,NewFdC}> when 'true' ->
			      let <_cor6> =
				  %% Line 1793
				  call 'erlang':'setelement'
				      (2, Halt, NewFdC)
			      in  let <_cor10> =
				      %% Line 1793
				      call 'erlang':'setelement'
					  (14, Log, _cor6)
				  in  do  %% Line 1793
					  call 'erlang':'put'
					      ('log', _cor10)
					  %% Line 1794
					  Reply
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','halt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1795
	  <Log = {'log',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,'wrap',_cor55,_cor56,_cor57,_cor58,_cor59,Handle,_cor60}> when 'true' ->
	      %% Line 1796
	      case call 'disk_log_1':'mf_sync'
		       (Handle) of
		<{Reply,NewHandle}> when 'true' ->
		    let <_cor14> =
			%% Line 1797
			call 'erlang':'setelement'
			    (14, Log, NewHandle)
		    in  do  %% Line 1797
			    call 'erlang':'put'
				('log', _cor14)
			    %% Line 1798
			    Reply
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'do_sync',1}}] )
	    -| ['compiler_generated'] )
	end
'do_trunc'/2 =
    %% Line 1801
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = {'log',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80},Head>
	      when call 'erlang':'=:='
		    (_cor73,
		     'halt') ->
	      %% Line 1803
	      ( case _cor79 of
		  ( <( {'halt',_rec283,_cor93,_cor94}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor18> =
			    %% Line 1805
			    case _cor74 of
			      %% Line 1806
			      <'internal'> when 'true' ->
				  %% Line 1807
				  call 'disk_log_1':'truncate'
				      (_rec283, _cor71, Head)
			      %% Line 1808
			      <'external'> when 'true' ->
				  %% Line 1809
				  case call 'disk_log_1':'truncate_at'
					   (_rec283, _cor71, 'bof') of
				    %% Line 1810
				    <{'ok',NFdC}>
					when call 'erlang':'=:='
					      (Head,
					       'none') ->
					%% Line 1811
					{'ok',NFdC}
				    %% Line 1812
				    <{'ok',NFdC}> when 'true' ->
					%% Line 1813
					case Head of
					  <{'ok',H}> when 'true' ->
					      let <_cor15> =
						  %% Line 1814
						  call 'erlang':'byte_size'
						      (H)
					      in  %% Line 1814
						  call 'disk_log_1':'fwrite'
						      (NFdC, _cor71, H, _cor15)
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor14})
					    -| ['compiler_generated'] )
					end
				    %% Line 1815
				    <R> when 'true' ->
					%% Line 1816
					R
				  end
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
			in  %% Line 1804
			    case _cor18 of
			      <{Reply1,FdC2}> when 'true' ->
				  let <Reply,NewHalt> =
				      %% Line 1820
				      case call 'disk_log_1':'position'
					       (FdC2, _cor71, 'cur') of
					%% Line 1821
					<{'ok',NewFdC,FileSize}>
					    when call 'erlang':'=:='
						  (Reply1,
						   'ok') ->
					    let <_cor22> =
						%% Line 1822
						{'halt',NewFdC,FileSize,_cor94}
					    in  %% Line 1822
						<'ok',_cor22>
					%% Line 1823
					<{Reply2,NewFdC}> when 'true' ->
					    let <_cor25> =
						%% Line 1824
						call 'erlang':'setelement'
						    (2, _cor79, NewFdC)
					    in  %% Line 1824
						<Reply2,_cor25>
					%% Line 1825
					<{'ok',NewFdC,_cor115}> when 'true' ->
					    let <_cor28> =
						%% Line 1826
						call 'erlang':'setelement'
						    (2, _cor79, NewFdC)
					    in  %% Line 1826
						<Reply1,_cor28>
					( <_cor29> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor29})
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor34> =
					  %% Line 1828
					  call 'erlang':'setelement'
					      (14, L, NewHalt)
				      in  do  %% Line 1828
					      call 'erlang':'put'
						  ('log', _cor34)
					      %% Line 1829
					      Reply
			      ( <_cor19> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor19})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor95> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','halt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1830
	  <L = {'log',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148},Head>
	      when call 'erlang':'=:='
		    (_cor141,
		     'wrap') ->
	      %% Line 1833
	      case call 'disk_log_1':'get_wrap_size'
		       (_cor147) of
		<{MaxB,MaxF}> when 'true' ->
		    %% Line 1834
		    case apply 'do_change_size'/2
			     (L, {MaxB,1}) of
		      <'ok'> when 'true' ->
			  let <_rec294> =
			      %% Line 1835
			      call 'erlang':'get'
				  ('log')
			  in  %% Line 1835
			      case _rec294 of
				<{'log',_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190}> when 'true' ->
				    let <_cor51> =
					call 'erlang':'setelement'
					    (11, _rec294, Head)
				    in  let <NewLog> =
					    apply 'trunc_wrap'/1
						(_cor51)
					in  let <NewLog2> =
						%% Line 1837
						apply 'trunc_wrap'/1
						    (NewLog)
					    in  %% Line 1838
						( case NewLog2 of
						    ( <( {'log',_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_rec296,_cor204}
							 -| ['compiler_generated'] )> when 'true' ->
							  case _rec296 of
							    <{'handle',_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217}> when 'true' ->
								let <_cor57> =
								    call 'erlang':'setelement'
									(13, _rec296, 0)
								in  let <_cor59> =
									call 'erlang':'setelement'
									    (12, _cor57, 0)
								    in  let <_cor62> =
									    %% Line 1839
									    call 'erlang':'setelement'
										(14, NewLog2, _cor59)
									in  let <_cor64> =
										%% Line 1839
										call 'erlang':'setelement'
										    (11, _cor62, _cor144)
									    in  %% Line 1839
										apply 'do_change_size'/2
										    (_cor64, %% Line 1840
											     {MaxB,MaxF})
							    ( <_cor218> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','handle'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
						      -| ['compiler_generated'] )
						    ( <_cor205> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','log'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				( <_cor191> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','log'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		      ( <_cor48> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor48})
			-| ['compiler_generated'] )
		    end
		( <_cor47> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor47})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor66,_cor65> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor66,_cor65})
		  -| [{'function_name',{'do_trunc',2}}] )
	    -| ['compiler_generated'] )
	end
'trunc_wrap'/1 =
    %% Line 1842
    fun (_cor0) ->
	%% Line 1843
	case apply 'do_inc_wrap_file'/1
		 (_cor0) of
	  %% Line 1844
	  <{'ok',L2,_X_Lost}> when 'true' ->
	      %% Line 1845
	      L2
	  %% Line 1846
	  <{'error',Error,_X_L2}> when 'true' ->
	      %% Line 1847
	      call 'erlang':'throw'
		  (Error)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_chunk'/4 =
    %% Line 1850
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <L = {'log',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,'halt_int',_cor45,_cor46,_cor47,Halt,_cor48},Pos,B,N> when 'true' ->
	      %% Line 1851
	      ( case Halt of
		  ( <( {'halt',_rec298,_cor49,_cor50}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor14> =
			    %% Line 1853
			    case _cor46 of
			      %% Line 1854
			      <'read_only'> when 'true' ->
				  %% Line 1855
				  call 'disk_log_1':'chunk_read_only'
				      (_rec298, _cor41, Pos, B, N)
			      %% Line 1856
			      <'read_write'> when 'true' ->
				  %% Line 1857
				  call 'disk_log_1':'chunk'
				      (_rec298, _cor41, Pos, B, N)
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
			in  %% Line 1852
			    case _cor14 of
			      <{NewFdC,Reply}> when 'true' ->
				  let <_cor18> =
				      %% Line 1859
				      call 'erlang':'setelement'
					  (2, Halt, NewFdC)
				  in  let <_cor22> =
					  %% Line 1859
					  call 'erlang':'setelement'
					      (14, L, _cor18)
				      in  do  %% Line 1859
					      call 'erlang':'put'
						  ('log', _cor22)
					      %% Line 1860
					      Reply
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor51> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','halt'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1861
	  <Log = {'log',_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,'wrap_int',_cor121,'read_only',_cor122,%% Line 1862
															       Handle,_cor123},%% Line 1862
																	       Pos,%% Line 1862
																		   B,%% Line 1862
																		     N> when 'true' ->
	      %% Line 1863
	      case call 'disk_log_1':'mf_int_chunk_read_only'
		       (Handle, Pos, B, N) of
		<{NewHandle,Reply}> when 'true' ->
		    let <_cor26> =
			%% Line 1864
			call 'erlang':'setelement'
			    (14, Log, NewHandle)
		    in  do  %% Line 1864
			    call 'erlang':'put'
				('log', _cor26)
			    %% Line 1865
			    Reply
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1866
	  <Log = {'log',_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,'wrap_int',_cor147,_cor148,_cor149,Handle,_cor150},Pos,B,N> when 'true' ->
	      %% Line 1867
	      case call 'disk_log_1':'mf_int_chunk'
		       (Handle, Pos, B, N) of
		<{NewHandle,Reply}> when 'true' ->
		    let <_cor30> =
			%% Line 1868
			call 'erlang':'setelement'
			    (14, Log, NewHandle)
		    in  do  %% Line 1868
			    call 'erlang':'put'
				('log', _cor30)
			    %% Line 1869
			    Reply
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor27})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1870
	  <Log,_X_Pos,_X_B,_cor166> when 'true' ->
	      %% Line 1871
	      ( case Log of
		  ( <( {'log',_cor167,_rec307,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179}
		       -| ['compiler_generated'] )> when 'true' ->
			{'error',{'format_external',_rec307}}
		    -| ['compiler_generated'] )
		  ( <_cor180> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','log'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'do_chunk_step'/3 =
    %% Line 1873
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'log',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,'wrap_int',_cor16,_cor17,_cor18,Handle,_cor19},Pos,N> when 'true' ->
	      %% Line 1874
	      call 'disk_log_1':'mf_int_chunk_step'
		  (Handle, Pos, N)
	  %% Line 1875
	  <Log,_X_Pos,_X_N> when 'true' ->
	      %% Line 1876
	      ( case Log of
		  ( <( {'log',_cor20,_rec308,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			{'error',{'not_internal_wrap',_rec308}}
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','log'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'replies'/2 =
    %% Line 1879
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1880
	    call 'erlang':'self'
		()
	in  let <M> = {%% Line 1880
		 'disk_log',_cor2,_cor0}
	    in  %% Line 1881
		apply 'send_reply'/2
		    (_cor1, M)
'send_reply'/2 =
    %% Line 1883
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,M>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      do  %% Line 1884
		  call 'erlang':'!'
		      (Pid, M)
		  %% Line 1885
		  'ok'
	  %% Line 1886
	  <[Pid|Pids],M> when 'true' ->
	      do  %% Line 1887
		  call 'erlang':'!'
		      (Pid, M)
		  %% Line 1888
		  apply 'send_reply'/2
		      (Pids, M)
	  %% Line 1889
	  <[],_X_M> when 'true' ->
	      %% Line 1890
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'send_reply',2}}] )
	    -| ['compiler_generated'] )
	end
'reply'/3 =
    %% Line 1892
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1893
	    call 'erlang':'self'
		()
	in  do  %% Line 1893
		call 'erlang':'!'
		    (_cor2, {'disk_log',_cor3,_cor1})
		%% Line 1894
		apply 'loop'/1
		    (_cor0)
'req'/2 =
    %% Line 1896
    fun (_cor1,_cor0) ->
	%% Line 1897
	case call 'disk_log_server':'get_log_pids'
		 (_cor1) of
	  %% Line 1898
	  <{'local',Pid}> when 'true' ->
	      %% Line 1899
	      apply 'monitor_request'/2
		  (Pid, _cor0)
	  %% Line 1900
	  <'undefined'> when 'true' ->
	      %% Line 1901
	      {'error','no_such_log'}
	  %% Line 1902
	  <{'distributed',Pids}> when 'true' ->
	      let <_cor2> =
		  %% Line 1903
		  call 'erlang':'self'
		      ()
	      in  %% Line 1903
		  apply 'multi_req'/2
		      ({_cor2,_cor0}, Pids)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'multi_req'/2 =
    %% Line 1906
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1908
	    ( fun (_cor3) ->
		  let <Ref> =
		      %% Line 1909
		      call 'erlang':'monitor'
			  ('process', _cor3)
		  in  do  %% Line 1910
			  call 'erlang':'!'
			      (_cor3, _cor1)
			  %% Line 1911
			  {_cor3,Ref}
	      -| [{'id',{0,0,'-multi_req/2-fun-0-'}}] )
	in  let <Refs> =
		%% Line 1908
		call 'lists':'map'
		    (_cor5, _cor0)
	    in  let <_cor11> =
		    %% Line 1913
		    ( fun (_cor8,_cor7) ->
			  case <_cor8,_cor7> of
			    <{Pid,Ref},Reply> when 'true' ->
				%% Line 1914
				receive
				  %% Line 1915
				  <{'DOWN',_cor14,'process',_cor15,_X_Info}>
				      when let <_cor16> =
					    call 'erlang':'=:='
						(_cor14, Ref)
					in  let <_cor17> =
						call 'erlang':'=:='
						    (_cor15, Pid)
					    in  call 'erlang':'and'
						    (_cor16, _cor17) ->
				      %% Line 1916
				      Reply
				  %% Line 1917
				  <{'disk_log',_cor18,_X_Reply}>
				      when call 'erlang':'=:='
					    (_cor18,
					     Pid) ->
				      do  %% Line 1918
					  call 'erlang':'demonitor'
					      (Ref, ['flush'])
					  %% Line 1919
					  'ok'
				after 'infinity' ->
				  'true'
			    ( <_cor10,_cor9> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10,_cor9})
				    -| [{'function_name',{'-multi_req/2-fun-1-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-multi_req/2-fun-1-'}}] )
		in  %% Line 1913
		    call 'lists':'foldl'
			(_cor11, %% Line 1921
				 {'error','nonode'}, %% Line 1921
						     Refs)
'sreq'/2 =
    %% Line 1923
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1924
	    call 'erlang':'node'
		()
	in  %% Line 1924
	    case apply 'nearby_pid'/2
		     (_cor1, _cor2) of
	      %% Line 1925
	      <'undefined'> when 'true' ->
		  %% Line 1926
		  {'error','no_such_log'}
	      %% Line 1927
	      <Pid> when 'true' ->
		  %% Line 1928
		  apply 'monitor_request'/2
		      (Pid, _cor0)
	    end
'lreq'/3 =
    %% Line 1932
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1933
	case apply 'nearby_pid'/2
		 (_cor2, _cor0) of
	  %% Line 1934
	  <Pid>
	      when try
		    let <_cor3> =
			call 'erlang':'is_pid'
			    (Pid)
		    in  let <_cor4> =
			    call 'erlang':'node'
				(Pid)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (_cor4, _cor0)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1935
	      apply 'monitor_request'/2
		  (Pid, _cor1)
	  %% Line 1936
	  <_X_Else> when 'true' ->
	      %% Line 1937
	      {'error','no_such_log'}
	end
'nearby_pid'/2 =
    %% Line 1940
    fun (_cor1,_cor0) ->
	%% Line 1941
	case call 'disk_log_server':'get_log_pids'
		 (_cor1) of
	  %% Line 1942
	  <'undefined'> when 'true' ->
	      %% Line 1943
	      'undefined'
	  %% Line 1944
	  <{'local',Pid}> when 'true' ->
	      %% Line 1945
	      Pid
	  %% Line 1946
	  <{'distributed',Pids}> when 'true' ->
	      %% Line 1947
	      apply 'get_near_pid'/2
		  (Pids, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_near_pid'/2 =
    %% Line 1952
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Pid|_cor5],Node>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    (Pid)
		    in  call 'erlang':'=:='
			    (_cor2, Node)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      Pid
	  %% Line 1953
	  <[Pid|[]],_cor6> when 'true' ->
	      Pid
	  %% Line 1954
	  <[_cor7|T],Node> when 'true' ->
	      apply 'get_near_pid'/2
		  (T, Node)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_near_pid',2}}] )
	    -| ['compiler_generated'] )
	end
'monitor_request'/2 =
    %% Line 1956
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 1957
	    call 'erlang':'monitor'
		('process', _cor1)
	in  let <_cor3> =
		%% Line 1958
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1958
		    call 'erlang':'!'
			(_cor1, {_cor3,_cor0})
		    %% Line 1959
		    receive
		      %% Line 1960
		      <{'DOWN',_cor11,'process',_cor12,_X_Info}>
			  when let <_cor13> =
				call 'erlang':'=:='
				    (_cor11, Ref)
			    in  let <_cor14> =
				    call 'erlang':'=:='
					(_cor12, _cor1)
				in  call 'erlang':'and'
					(_cor13, _cor14) ->
			  %% Line 1961
			  {'error','no_such_log'}
		      %% Line 1962
		      <{'disk_log',_cor15,Reply}>
			  when let <_cor16> =
				call 'erlang':'=:='
				    (_cor15, _cor1)
			    in  let <_cor17> =
				    try
					( case <> of
					    ( <>
						  when call 'erlang':'is_tuple'
							(Reply) ->
						  let <_cor6> =
						      %% Line 1963
						      call 'erlang':'element'
							  (2, Reply)
						  in  %% Line 1963
						      call 'erlang':'=/='
							  (_cor6, 'disk_log_stopped')
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false'
				in  call 'erlang':'and'
					(_cor16, _cor17) ->
			  do  %% Line 1964
			      call 'erlang':'demonitor'
				  (Ref, ['flush'])
			      %% Line 1965
			      Reply
		    after 'infinity' ->
		      'true'
'req2'/2 =
    %% Line 1968
    fun (_cor1,_cor0) ->
	%% Line 1969
	apply 'monitor_request'/2
	    (_cor1, _cor0)
'merge_head'/2 =
    %% Line 1971
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',Head> when 'true' ->
	      %% Line 1972
	      Head
	  %% Line 1973
	  <Head,_cor4> when 'true' ->
	      %% Line 1974
	      Head
	end
'wrap_file_extensions'/1 =
    %% Line 1977
    fun (_cor0) ->
	%% Line 1978
	case %% Line 1979
	     call 'disk_log_1':'read_index_file'
		 (_cor0) of
	  <{_X_CurF,_X_CurFSz,_X_TotSz,NoOfFiles}> when 'true' ->
	      let <_cor2> =
		  %% Line 1980
		  case <> of
		    %% Line 1981
		    <>
			when call 'erlang':'>='
			      (NoOfFiles,
			       1) ->
			%% Line 1982
			call 'lists':'seq'
			    (1, NoOfFiles)
		    %% Line 1983
		    <>
			when call 'erlang':'=:='
			      (NoOfFiles,
			       0) ->
			%% Line 1984
			[]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <Fun> =
		      %% Line 1986
		      ( fun (_cor6) ->
			    let <_cor4> =
				%% Line 1987
				apply 'add_ext'/2
				    (_cor0, _cor6)
			    in  %% Line 1987
				case call 'file':'read_file_info'
					 (_cor4) of
				  %% Line 1988
				  <{'ok',_cor10}> when 'true' ->
				      %% Line 1989
				      'true'
				  %% Line 1990
				  <_X_Else> when 'true' ->
				      %% Line 1991
				      'false'
				end
			-| [{'id',{0,0,'-wrap_file_extensions/1-fun-0-'}}] )
		  in  %% Line 1994
		      call 'lists':'filter'
			  (Fun, [[105|[100|[120]]]|[[115|[105|[122]]]|_cor2]])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'add_ext'/2 =
    %% Line 1996
    fun (_cor1,_cor0) ->
	%% Line 1997
	call 'lists':'concat'
	    ([_cor1|[[46]|[_cor0|[]]]])
'notify'/2 =
    %% Line 1999
    fun (_cor1,_cor0) ->
	%% Line 2000
	case call 'disk_log_server':'get_log_pids'
		 (_cor1) of
	  %% Line 2001
	  <'undefined'> when 'true' ->
	      %% Line 2002
	      {'error','no_such_log'}
	  %% Line 2003
	  <{'local',Pid}> when 'true' ->
	      do  %% Line 2004
		  call 'erlang':'!'
		      (Pid, _cor0)
		  %% Line 2005
		  'ok'
	  %% Line 2006
	  <{'distributed',Pids}> when 'true' ->
	      let <_cor4> =
		  %% Line 2007
		  ( fun (_cor2) ->
			call 'erlang':'!'
			    (_cor2, _cor0)
		    -| [{'id',{0,0,'-notify/2-fun-0-'}}] )
	      in  do  %% Line 2007
		      call 'lists':'foreach'
			  (_cor4, Pids)
		      %% Line 2008
		      'ok'
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'notify_owners_wrap'/1 =
    %% Line 2011
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2012
	      'ok'
	  %% Line 2013
	  <[N|Wraps]> when 'true' ->
	      do  %% Line 2014
		  apply 'notify_owners'/1
		      ({'wrap',N})
		  %% Line 2015
		  apply 'notify_owners_wrap'/1
		      (Wraps)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'notify_owners_wrap',1}}] )
	    -| ['compiler_generated'] )
	end
'notify_owners'/1 =
    %% Line 2017
    fun (_cor0) ->
	let <L> =
	    %% Line 2018
	    call 'erlang':'get'
		('log')
	in  let <_cor4> =
		%% Line 2019
		call 'erlang':'node'
		    ()
	    in  %% Line 2019
		( case L of
		    ( <( {'log',_cor12,_rec309,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Msg> =
			      {'disk_log',_cor4,_rec309,_cor0}
			  in  let <_cor10> =
				  %% Line 2020
				  ( fun (_cor8) ->
					case _cor8 of
					  <{Pid,'true'}> when 'true' ->
					      call 'erlang':'!'
						  (Pid, Msg)
					  %% Line 2021
					  <_cor26> when 'true' ->
					      'ok'
					end
				    -| [{'id',{0,0,'-notify_owners/1-fun-0-'}}] )
			      in  %% Line 2020
				  call 'lists':'foreach'
				      (_cor10, _cor16)
		      -| ['compiler_generated'] )
		    ( <_cor25> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','log'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'cache_error'/2 =
    %% Line 2024
    fun (_cor1,_cor0) ->
	%% Line 2025
	( case _cor1 of
	    ( <( {'state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec311}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( let <_cor2> =
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'self'
							       -| ['compiler_generated'] )
			      ()
			  -| ['compiler_generated'] )
		    in  ( let <M> = {( 'disk_log'
				 -| ['compiler_generated'] ),( _cor2
							       -| ['compiler_generated'] ),_rec311}
			  in  %% Line 2026
			      case ( apply ( 'send_reply'/2
					     -| ['compiler_generated'] )
					 (_cor0, ( M
						   -| ['compiler_generated'] ))
				     -| ['compiler_generated'] ) of
				<'ok'> when 'true' ->
				    let <_cor8> =
					%% Line 2027
					call 'erlang':'setelement'
					    (9, _cor1, 'ok')
				    in  %% Line 2027
					apply 'state_err'/2
					    (_cor8, _rec311)
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'state_ok'/1 =
    %% Line 2029
    fun (_cor0) ->
	%% Line 2030
	apply 'state_err'/2
	    (_cor0, 'ok')
'state_err'/2 =
    %% Line 2034
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Err>
	      when call 'erlang':'=:='
		    (_cor18,
		     Err) ->
	      S
	  %% Line 2035
	  <S,Err> when 'true' ->
	      do  %% Line 2036
		  apply 'notify_owners'/1
		      ({'error_status',Err})
		  %% Line 2037
		  case S of
		    <{'state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
			call 'erlang':'setelement'
			    (8, S, Err)
		    ( <_cor28> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('disk_log')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('disk_log', _cor0)
end