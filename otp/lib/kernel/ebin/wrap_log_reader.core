module 'wrap_log_reader' ['chunk'/1,
			  'chunk'/2,
			  'close'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'open'/1,
			  'open'/2]
    attributes [%% Line 33
		'export_type' =
		    %% Line 33
		    [{'continuation',0}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dlog_byte',{'type',56,'union',[{'type',56,'list',[{'type',56,'dlog_byte',[]}]}|[{'type',56,'byte',[]}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'dlog_format',{'type',57,'union',[{'atom',57,'external'}|[{'atom',57,'internal'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'dlog_format_type',{'type',58,'union',[{'atom',58,'halt_ext'}|[{'atom',58,'halt_int'}|[{'atom',58,'wrap_ext'}|[{'atom',58,'wrap_int'}]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'dlog_head',{'type',59,'union',[{'atom',59,'none'}|[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'binary',[]}]]}|[{'type',59,'mfa',[]}]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'dlog_head_opt',{'type',60,'union',[{'atom',60,'none'}|[{'type',60,'term',[]}|[{'type',60,'binary',[]}|[{'type',60,'list',[{'type',60,'dlog_byte',[]}]}]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'log',{'type',61,'term',[]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'dlog_mode',{'type',62,'union',[{'atom',62,'read_only'}|[{'atom',62,'read_write'}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'dlog_name',{'type',63,'union',[{'type',63,'atom',[]}|[{'type',63,'string',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'dlog_optattr',{'type',64,'union',[{'atom',64,'name'}|[{'atom',64,'file'}|[{'atom',64,'linkto'}|[{'atom',64,'repair'}|[{'atom',64,'type'}|[{'atom',65,'format'}|[{'atom',65,'size'}|[{'atom',65,'distributed'}|[{'atom',65,'notify'}|[{'atom',66,'head'}|[{'atom',66,'head_func'}|[{'atom',66,'mode'}]]]]]]]]]]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'dlog_option',{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'name'}|[{'ann_type',67,[{'var',67,'Log'}|[{'type',67,'log',[]}]]}]]}|[{'type',68,'tuple',[{'atom',68,'file'}|[{'ann_type',68,[{'var',68,'FileName'}|[{'remote_type',68,[{'atom',68,'file'}|[{'atom',68,'filename'}|[[]]]]}]]}]]}|[{'type',69,'tuple',[{'atom',69,'linkto'}|[{'ann_type',69,[{'var',69,'LinkTo'}|[{'type',69,'union',[{'atom',69,'none'}|[{'type',69,'pid',[]}]]}]]}]]}|[{'type',70,'tuple',[{'atom',70,'repair'}|[{'ann_type',70,[{'var',70,'Repair'}|[{'type',70,'union',[{'atom',70,'true'}|[{'atom',70,'false'}|[{'atom',70,'truncate'}]]]}]]}]]}|[{'type',71,'tuple',[{'atom',71,'type'}|[{'ann_type',71,[{'var',71,'Type'}|[{'atom',71,'dlog_type'}]]}]]}|[{'type',72,'tuple',[{'atom',72,'format'}|[{'ann_type',72,[{'var',72,'Format'}|[{'type',72,'dlog_format',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'size'}|[{'ann_type',73,[{'var',73,'Size'}|[{'type',73,'dlog_size',[]}]]}]]}|[{'type',74,'tuple',[{'atom',74,'distributed'}|[{'ann_type',74,[{'var',74,'Nodes'}|[{'type',74,'list',[{'type',74,'node',[]}]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'notify'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'head'}|[{'ann_type',76,[{'var',76,'Head'}|[{'type',76,'dlog_head_opt',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'head_func'}|[{'ann_type',77,[{'var',77,'MFA'}|[{'type',77,'tuple',[{'type',77,'atom',[]}|[{'type',77,'atom',[]}|[{'type',77,'list',[]}]]]}]]}]]}|[{'type',78,'tuple',[{'atom',78,'mode'}|[{'ann_type',78,[{'var',78,'Mode'}|[{'type',78,'dlog_mode',[]}]]}]]}]]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'dlog_options',{'type',79,'list',[{'type',79,'dlog_option',[]}]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'dlog_repair',{'type',80,'union',[{'atom',80,'truncate'}|[{'type',80,'boolean',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'dlog_size',{'type',81,'union',[{'atom',81,'infinity'}|[{'type',81,'pos_integer',[]}|[{'type',82,'tuple',[{'ann_type',82,[{'var',82,'MaxNoBytes'}|[{'type',82,'pos_integer',[]}]]}|[{'ann_type',83,[{'var',83,'MaxNoFiles'}|[{'type',83,'pos_integer',[]}]]}]]}]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dlog_status',{'type',84,'union',[{'atom',84,'ok'}|[{'type',84,'tuple',[{'atom',84,'blocked'}|[{'type',84,'union',[{'atom',84,'false'}|[{'type',84,'list',[{'var',84,'_'}]}]]}]]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'dlog_type',{'type',85,'union',[{'atom',85,'halt'}|[{'atom',85,'wrap'}]]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','arg'},[{'record_field',92,{'atom',92,'name'},{'integer',92,0}}|[{'record_field',93,{'atom',93,'version'},{'atom',93,'undefined'}}|[{'typed_record_field',{'record_field',94,{'atom',94,'file'},{'atom',94,'none'}},{'type',94,'union',[{'atom',94,'none'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'repair'},{'atom',95,'true'}},{'type',95,'dlog_repair',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'size'},{'atom',96,'infinity'}},{'type',96,'dlog_size',[]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'type'},{'atom',97,'halt'}},{'type',97,'dlog_type',[]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'distributed'},{'atom',98,'false'}},{'type',98,'union',[{'atom',98,'false'}|[{'type',98,'tuple',[{'atom',98,'true'}|[{'type',98,'list',[{'type',98,'node',[]}]}]]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'format'},{'atom',99,'internal'}},{'type',99,'dlog_format',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'linkto'},{'call',100,{'atom',100,'self'},[]}},{'type',100,'union',[{'atom',100,'none'}|[{'type',100,'pid',[]}]]}}|[{'record_field',101,{'atom',101,'head'},{'atom',101,'none'}}|[{'typed_record_field',{'record_field',102,{'atom',102,'mode'},{'atom',102,'read_write'}},{'type',102,'dlog_mode',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'notify'},{'atom',103,'false'}},{'type',103,'boolean',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'options'},{'nil',104}},{'type',104,'dlog_options',[]}}]]]]]]]]]]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','cache'},[{'typed_record_field',{'record_field',107,{'atom',107,'fd'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'fd'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'sz'},{'integer',108,0}},{'type',108,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'c'},{'nil',109}},{'type',109,'iodata',[]}}]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','halt'},[{'typed_record_field',{'record_field',113,{'atom',113,'fdc'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'record',[{'atom',113,'cache'}]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'curB'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'size'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'dlog_size',[]}]]}}]]],[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{{'record','handle'},[{'typed_record_field',{'record_field',119,{'atom',119,'filename'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'maxB'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'maxF'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'pos_integer',[]}|[{'type',121,'tuple',[{'type',121,'pos_integer',[]}|[{'type',121,'pos_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'curB'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'curF'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'integer',[]}]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'cur_fdc'}},{'type',131,'union',[{'atom',131,'undefined'}|[{'type',131,'record',[{'atom',131,'cache'}]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'cur_name'}},{'type',132,'union',[{'atom',132,'undefined'}|[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'cur_cnt'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'acc_cnt'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'firstPos'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'noFull'}},{'type',139,'union',[{'atom',139,'undefined'}|[{'type',139,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'accFull'}},{'type',143,'union',[{'atom',143,'undefined'}|[{'type',143,'non_neg_integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','log'},[{'typed_record_field',{'record_field',148,{'atom',148,'status'},{'atom',148,'ok'}},{'type',148,'dlog_status',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'name'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'dlog_name',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'blocked_by'},{'atom',150,'none'}},{'type',150,'union',[{'atom',150,'none'}|[{'type',150,'pid',[]}]]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'users'},{'integer',151,0}},{'type',151,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'filename'}},{'type',152,'union',[{'atom',152,'undefined'}|[{'remote_type',152,[{'atom',152,'file'}|[{'atom',152,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'owners'},{'nil',153}},{'type',153,'list',[{'type',153,'tuple',[{'type',153,'pid',[]}|[{'type',153,'boolean',[]}]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'type'},{'atom',154,'halt'}},{'type',154,'dlog_type',[]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'format'},{'atom',155,'internal'}},{'type',155,'dlog_format',[]}}|[{'typed_record_field',{'record_field',156,{'atom',156,'format_type'}},{'type',156,'union',[{'atom',156,'undefined'}|[{'type',156,'dlog_format_type',[]}]]}}|[{'record_field',157,{'atom',157,'head'},{'atom',157,'none'}}|[{'typed_record_field',{'record_field',159,{'atom',159,'mode'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'dlog_mode',[]}]]}}|[{'record_field',160,{'atom',160,'size'}}|[{'typed_record_field',{'record_field',161,{'atom',161,'extra'}},{'type',161,'union',[{'atom',161,'undefined'}|[{'type',161,'record',[{'atom',161,'halt'}]}|[{'type',161,'record',[{'atom',161,'handle'}]}]]]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'version'}},{'type',162,'union',[{'atom',162,'undefined'}|[{'type',162,'integer',[]}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{{'record','continuation'},[{'typed_record_field',{'record_field',166,{'atom',166,'pid'},{'call',166,{'atom',166,'self'},[]}},{'type',166,'pid',[]}}|[{'typed_record_field',{'record_field',167,{'atom',167,'pos'}},{'type',167,'union',[{'atom',167,'undefined'}|[{'type',167,'non_neg_integer',[]}|[{'type',167,'tuple',[{'type',167,'integer',[]}|[{'type',167,'non_neg_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',168,{'atom',168,'b'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'binary',[]}|[{'type',168,'nil',[]}|[{'type',168,'pos_integer',[]}]]]]}}]]],[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'dlog_cont',{'type',171,'union',[{'atom',171,'start'}|[{'type',171,'record',[{'atom',171,'continuation'}]}]]},[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','wrap_reader'},[{'typed_record_field',{'record_field',38,{'atom',38,'fd'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'fd'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'cont'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'dlog_cont',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'file'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'remote_type',40,[{'atom',40,'file'}|[{'atom',40,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'file_no'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mod_time'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'file'}|[{'atom',42,'date_time'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'first_no'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}|[{'atom',43,'one'}]]]}}]]]]]],[]}],
		%% Line 46
		'opaque' =
		    %% Line 46
		    [{'continuation',{'type',46,'record',[{'atom',46,'wrap_reader'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'open_ret',{'type',57,'union',[{'type',57,'tuple',[{'atom',57,'ok'}|[{'ann_type',57,[{'var',57,'Continuation'}|[{'type',57,'continuation',[]}]]}]]}|[{'type',58,'tuple',[{'atom',58,'error'}|[{'ann_type',58,[{'var',58,'Reason'}|[{'type',58,'tuple','any'}]]}]]}]]},[]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'open',1},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'var',60,'Filename'}]}|[{'type',60,'open_ret',[]}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Filename'}|[{'type',61,'union',[{'type',61,'string',[]}|[{'type',61,'atom',[]}]]}]]]]}]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'open',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'Filename'}|[{'var',86,'N'}]]}|[{'type',86,'open_ret',[]}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Filename'}|[{'type',87,'union',[{'type',87,'string',[]}|[{'type',87,'atom',[]}]]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'N'}|[{'type',88,'integer',[]}]]]]}]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'close',1},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Continuation'}]}|[{'type',111,'union',[{'atom',111,'ok'}|[{'type',111,'tuple',[{'atom',111,'error'}|[{'var',111,'Reason'}]]}]]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Continuation'}|[{'type',112,'continuation',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Reason'}|[{'remote_type',113,[{'atom',113,'file'}|[{'atom',113,'posix'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'chunk_ret',{'type',118,'union',[{'type',118,'tuple',[{'var',118,'Continuation2'}|[{'ann_type',118,[{'var',118,'Terms'}|[{'type',118,'list',[{'type',118,'term',[]}]}]]}]]}|[{'type',119,'tuple',[{'var',119,'Continuation2'}|[{'ann_type',120,[{'var',120,'Terms'}|[{'type',120,'list',[{'type',120,'term',[]}]}]]}|[{'ann_type',121,[{'var',121,'Badbytes'}|[{'type',121,'non_neg_integer',[]}]]}]]]}|[{'type',122,'tuple',[{'var',122,'Continuation2'}|[{'atom',122,'eof'}]]}|[{'type',123,'tuple',[{'atom',123,'error'}|[{'ann_type',123,[{'var',123,'Reason'}|[{'type',123,'term',[]}]]}]]}]]]]},[]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'chunk',1},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Continuation'}]}|[{'type',125,'chunk_ret',[]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Continuation'}|[{'type',126,'continuation',[]}]]]]}]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'chunk',2},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'Continuation'}|[{'var',131,'N'}]]}|[{'type',131,'chunk_ret',[]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Continuation'}|[{'type',132,'continuation',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'N'}|[{'type',133,'union',[{'atom',133,'infinity'}|[{'type',133,'pos_integer',[]}]]}]]]]}]]]]}]}]]
'open'/1 =
    %% Line 63
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 64
		  call 'erlang':'atom_to_list'
		      (File)
	      in  %% Line 64
		  apply 'open'/1
		      (_cor1)
	  %% Line 65
	  <File>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 66
	      case apply 'read_index_file'/1
		       (File) of
		%% Line 68
		<{'ok',{CurFileNo,_X_CurFileSz,_X_TotSz,NoOfFiles}}>
		    when %% Line 69
		      try
			  let <_cor2> =
			      call 'erlang':'+'
				  (NoOfFiles, 1)
			  in  call 'erlang':'=:='
				  (CurFileNo, _cor2)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 73
		    apply 'open_int'/3
			(File, 1, 1)
		%% Line 74
		<{'ok',{CurFileNo,_X_CurFileSz,_X_TotSz,NoOfFiles}}> when 'true' ->
		    let <_cor4> =
			%% Line 75
			call 'erlang':'+'
			    (CurFileNo, 1)
		    in  let <_cor6> =
			    %% Line 75
			    case call 'erlang':'rem'
				     (_cor4, NoOfFiles) of
			      %% Line 76
			      <0> when 'true' ->
				  NoOfFiles
			      %% Line 77
			      <No> when 'true' ->
				  No
			    end
			in  %% Line 81
			    apply 'open_int'/3
				(File, _cor6, _cor6)
		%% Line 82
		<Error> when 'true' ->
		    %% Line 83
		    Error
	      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'open',1}}] )
	    -| ['compiler_generated'] )
	end
'open'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,FileNo>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(File)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (FileNo)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 91
		  call 'erlang':'atom_to_list'
		      (File)
	      in  %% Line 91
		  apply 'open'/2
		      (_cor4, FileNo)
	  %% Line 92
	  <File,FileNo>
	      when let <_cor5> =
		    call 'erlang':'is_list'
			(File)
		in  let <_cor6> =
			call 'erlang':'is_integer'
			    (FileNo)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 93
	      case apply 'read_index_file'/1
		       (File) of
		%% Line 94
		<{'ok',{_X_CurFileNo,_X_CurFileSz,_X_TotSz,NoOfFiles}}>
		    when %% Line 95
		      call 'erlang':'>='
			  (NoOfFiles,
			   FileNo) ->
		    %% Line 98
		    apply 'open_int'/3
			(File, FileNo, 'one')
		%% Line 100
		<{'ok',{CurFileNo,_X_CurFileSz,_X_TotSz,NoOfFiles}}>
		    when %% Line 101
		      try
			  let <_cor7> =
			      call 'erlang':'=:='
				  (CurFileNo, FileNo)
			  in  let <_cor8> =
				  call 'erlang':'+'
				      (NoOfFiles, 1)
			      in  let <_cor9> =
				      call 'erlang':'=:='
					  (CurFileNo, _cor8)
				  in  call 'erlang':'and'
					  (_cor7, _cor9)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 104
		    apply 'open_int'/3
			(File, FileNo, 'one')
		%% Line 105
		<{'ok',{_X_CurFileNo,_X_CurFileSz,_X_TotSz,_X_NoOfFiles}}> when 'true' ->
		    let <_cor10> =
			%% Line 106
			apply 'add_ext'/2
			    (File, FileNo)
		    in  %% Line 106
			{'error',{'file_not_found',_cor10}}
		%% Line 107
		<Error> when 'true' ->
		    %% Line 108
		    Error
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'open',2}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <{'wrap_reader',FD,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 116
	      call 'file':'close'
		  (FD)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'chunk'/1 =
    %% Line 128
    fun (_cor0) ->
	case _cor0 of
	  <WR = {'wrap_reader',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 129
	      apply 'chunk'/3
		  (WR, 65536, 0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'chunk',1}}] )
	    -| ['compiler_generated'] )
	end
'chunk'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <WR = {'wrap_reader',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11},'infinity'> when 'true' ->
	      %% Line 136
	      apply 'chunk'/3
		  (WR, 65536, 0)
	  %% Line 137
	  <WR = {'wrap_reader',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17},N>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			call 'erlang':'>'
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 138
	      apply 'chunk'/3
		  (WR, N, 0)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'chunk',2}}] )
	    -| ['compiler_generated'] )
	end
'open_int'/3 =
    %% Line 144
    fun (_cor2,_cor1,_cor0) ->
	let <FName> =
	    %% Line 145
	    apply 'add_ext'/2
		(_cor2, _cor1)
	in  %% Line 146
	    case call 'file':'open'
		     (FName, ['raw'|['binary'|['read']]]) of
	      %% Line 147
	      <{'ok',Fd}> when 'true' ->
		  %% Line 148
		  case call 'file':'read'
			   (Fd, 8) of
		    %% Line 149
		    <{'ok',Head}> when 'true' ->
			%% Line 150
			case call 'disk_log_1':'is_head'
				 (Head) of
			  %% Line 151
			  <'no'> when 'true' ->
			      let <_X_> =
				  %% Line 152
				  ( call 'file':'close'
					(Fd)
				    -| ['result_not_wanted'] )
			      in  %% Line 153
				  {'error',{'not_a_log_file',FName}}
			  %% Line 154
			  <_cor15> when 'true' ->
			      %% Line 155
			      case apply 'last_mod_time'/1
				       (FName) of
				%% Line 156
				<{'ok',ModTime}> when 'true' ->
				    let <WR> =
					%% Line 157
					{'wrap_reader',Fd,'start',_cor2,_cor1,%% Line 160
									      ModTime,_cor0}
				    in  %% Line 162
					{'ok',WR}
				%% Line 163
				<{'error',E}> when 'true' ->
				    let <_X_> =
					%% Line 164
					( call 'file':'close'
					      (Fd)
					  -| ['result_not_wanted'] )
				    in  %% Line 165
					{'error',{'file_error',FName,E}}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			end
		    %% Line 168
		    <_X_Other> when 'true' ->
			let <_X_> =
			    %% Line 169
			    ( call 'file':'close'
				  (Fd)
			      -| ['result_not_wanted'] )
			in  %% Line 170
			    {'error',{'not_a_log_file',FName}}
		  end
	      %% Line 172
	      <_X_Other> when 'true' ->
		  %% Line 173
		  {'error',{'not_a_log_file',FName}}
	    end
'chunk'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	%% Line 178
	case _cor2 of
	  <{'wrap_reader',Fd,Continue,File,CurFileNo,_cor22,FirstFileNo}> when 'true' ->
	      let <_cor4> =
		  %% Line 179
		  apply 'add_ext'/2
		      (File, CurFileNo)
	      in  %% Line 179
		  case apply 'read_a_chunk'/4
			   (Fd, _cor1, Continue, _cor4) of
		    %% Line 180
		    <'eof'> when 'true' ->
			%% Line 181
			case FirstFileNo of
			  %% Line 182
			  <'one'> when 'true' ->
			      %% Line 183
			      {_cor2,'eof'}
			  %% Line 184
			  <_X_Else> when 'true' ->
			      %% Line 185
			      apply 'chunk_at_eof'/3
				  (_cor2, _cor1, _cor0)
			end
		    %% Line 187
		    <{ContOut,[],BadBytes}> when 'true' ->
			let <_cor9> =
			    %% Line 189
			    call 'erlang':'setelement'
				(3, _cor2, ContOut)
			in  let <_cor6> =
				%% Line 189
				call 'erlang':'+'
				    (_cor0, BadBytes)
			    in  %% Line 189
				apply 'chunk'/3
				    (_cor9, _cor1, _cor6)
		    %% Line 190
		    <{ContOut,Chunk,BadBytes}>
			when try
			      let <_cor10> =
				  call 'erlang':'+'
				      (_cor0, BadBytes)
			      in  call 'erlang':'=:='
				      (_cor10, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor13> =
			    %% Line 191
			    call 'erlang':'setelement'
				(3, _cor2, ContOut)
			in  %% Line 191
			    {_cor13,Chunk}
		    %% Line 192
		    <{ContOut,Chunk,BadBytes}> when 'true' ->
			let <_cor17> =
			    %% Line 194
			    call 'erlang':'setelement'
				(3, _cor2, ContOut)
			in  let <_cor14> =
				%% Line 194
				call 'erlang':'+'
				    (_cor0, BadBytes)
			    in  %% Line 194
				{_cor17,Chunk,_cor14}
		    %% Line 195
		    <Error> when 'true' ->
			%% Line 196
			Error
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_a_chunk'/4 =
    %% Line 199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fd,N,'start',FileName> when 'true' ->
	      %% Line 200
	      apply 'read_a_chunk'/5
		  (Fd, FileName, 0, [], N)
	  %% Line 201
	  <Fd,N,More,FileName> when 'true' ->
	      %% Line 202
	      ( case More of
		  ( <( {'continuation',_cor14,_rec3,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 204
			apply 'read_a_chunk'/5
			    (Fd, FileName, _rec3, _cor15, N)
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','continuation'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'read_a_chunk'/5 =
    %% Line 206
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <R> =
	    %% Line 207
	    call 'disk_log_1':'chunk_read_only'
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	in  %% Line 211
	    case call 'disk_log':'ichunk_end'
		     (R, 'foo') of
	      %% Line 212
	      <{C = {'continuation',_cor13,_cor14,_cor15},S}> when 'true' ->
		  %% Line 213
		  {C,S,0}
	      %% Line 214
	      <Else> when 'true' ->
		  %% Line 215
		  Else
	    end
'chunk_at_eof'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	%% Line 220
	case _cor2 of
	  <{'wrap_reader',_cor17,_cor18,File,CurFileNo,_cor19,FirstFileNo}> when 'true' ->
	      %% Line 221
	      case apply 'read_index_file'/1
		       (File) of
		%% Line 222
		<{'ok',IndexFile}> when 'true' ->
		    %% Line 223
		    case IndexFile of
		      <{_cor20,_cor21,_cor22,NoOfFiles}> when 'true' ->
			  let <_cor5> =
			      %% Line 224
			      call 'erlang':'+'
				  (CurFileNo, 1)
			  in  let <_cor10> =
				  %% Line 224
				  case call 'erlang':'rem'
					   (_cor5, NoOfFiles) of
				    %% Line 226
				    <_cor23>
					when call 'erlang':'>'
					      (CurFileNo,
					       NoOfFiles) ->
					1
				    %% Line 227
				    <0>
					when call 'erlang':'>'
					      (NoOfFiles,
					       1) ->
					NoOfFiles
				    %% Line 228
				    <No>
					when call 'erlang':'=:='
					      (CurFileNo,
					       NoOfFiles) ->
					let <_cor6> =
					    %% Line 229
					    call 'erlang':'+'
						(CurFileNo, 1)
					in  let <FileName> =
						%% Line 229
						apply 'add_ext'/2
						    (File, _cor6)
					    in  %% Line 230
						case call 'file':'read_file_info'
							 (FileName) of
						  %% Line 231
						  <{'ok',_cor24}> when 'true' ->
						      call 'erlang':'+'
							  (CurFileNo, 1)
						  %% Line 232
						  <_cor25> when 'true' ->
						      No
						end
				    %% Line 234
				    <No> when 'true' ->
					No
				  end
			      in  %% Line 240
				  case <FirstFileNo,_cor10> of
				    %% Line 241
				    <_cor26,0> when 'true' ->
					{_cor2,'eof'}
				    %% Line 242
				    <_cor27,_cor28>
					when call 'erlang':'=:='
					      (_cor28,
					       FirstFileNo) ->
					{_cor2,'eof'}
				    %% Line 243
				    <_fol57,_fol58> when 'true' ->
					apply 'read_next_file'/4
					    (_cor2, _cor1, _cor10, _cor0)
				  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 245
		<Error> when 'true' ->
		    %% Line 246
		    Error
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_index_file'/1 =
    %% Line 251
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 252
		call 'disk_log_1':'read_index_file'
		    (_cor0)
	in  %% Line 252
	    case _cor1 of
	      %% Line 253
	      <{1,0,0,0}> when 'true' ->
		  %% Line 254
		  {'error',{'index_file_not_found',_cor0}}
	      %% Line 255
	      <{'error',_X_Reason}> when 'true' ->
		  %% Line 256
		  {'error',{'index_file_not_found',_cor0}}
	      %% Line 257
	      <FileData> when 'true' ->
		  %% Line 258
		  {'ok',FileData}
	    end
'read_next_file'/4 =
    %% Line 263
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 265
	case _cor3 of
	  <{'wrap_reader',_cor18,_cor19,File,CurFileNo,ModTime,FirstFileNo}> when 'true' ->
	      let <_cor5> =
		  %% Line 268
		  apply 'add_ext'/2
		      (File, _cor1)
	      in  %% Line 268
		  case apply 'last_mod_time'/1
			   (_cor5) of
		    %% Line 269
		    <{'ok',NewModTime}> when 'true' ->
			let <OldMT> =
			    %% Line 270
			    call 'calendar':'datetime_to_gregorian_seconds'
				(ModTime)
			in  let <NewMT> =
				%% Line 271
				call 'calendar':'datetime_to_gregorian_seconds'
				    (NewModTime)
			    in  let <Diff> =
				    %% Line 272
				    call 'erlang':'-'
					(NewMT, OldMT)
				in  %% Line 276
				    case <> of
				      %% Line 277
				      <>
					  when call 'erlang':'<'
						(Diff,
						 0) ->
					  let <_cor9> =
					      %% Line 279
					      apply 'add_ext'/2
						  (File, CurFileNo)
					  in  %% Line 279
					      {'error',{'is_wrapped',_cor9}}
				      %% Line 280
				      <> when 'true' ->
					  %% Line 281
					  case apply 'open_int'/3
						   (File, _cor1, FirstFileNo) of
					    %% Line 282
					    <{'ok',NWR}> when 'true' ->
						let <_X_> =
						    %% Line 283
						    apply 'close'/1
							(_cor3)
						in  %% Line 284
						    apply 'chunk'/3
							(NWR, _cor2, _cor0)
					    %% Line 285
					    <Error> when 'true' ->
						%% Line 286
						Error
					  end
				    end
		    %% Line 289
		    <{'error',EN}> when 'true' ->
			let <_cor12> =
			    %% Line 290
			    apply 'add_ext'/2
				(File, _cor1)
			in  %% Line 290
			    {'error',{'file_error',_cor12,EN}}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'last_mod_time'/1 =
    %% Line 294
    fun (_cor0) ->
	%% Line 295
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 296
	  <{'ok',FileInfo}> when 'true' ->
	      %% Line 297
	      ( case FileInfo of
		  ( <( {'file_info',_cor5,_cor6,_cor7,_cor8,_rec5,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
		       -| ['compiler_generated'] )> when 'true' ->
			{'ok',_rec5}
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 298
	  <E> when 'true' ->
	      %% Line 299
	      {'error',E}
	end
'add_ext'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	%% Line 303
	call 'lists':'concat'
	    ([_cor1|[[46]|[_cor0|[]]]])
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wrap_log_reader')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wrap_log_reader', _cor0)
end