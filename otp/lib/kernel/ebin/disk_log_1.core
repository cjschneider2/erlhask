module 'disk_log_1' ['change_size_wrap'/3,
		     'chunk'/5,
		     'chunk_read_only'/5,
		     'close'/3,
		     'ext_open'/4,
		     'fclose'/2,
		     'fwrite'/4,
		     'get_wrap_size'/1,
		     'int_open'/4,
		     'is_head'/1,
		     'logl'/1,
		     'mf_ext_close'/2,
		     'mf_ext_inc'/2,
		     'mf_ext_log'/3,
		     'mf_ext_open'/7,
		     'mf_int_chunk'/4,
		     'mf_int_chunk_read_only'/4,
		     'mf_int_chunk_step'/3,
		     'mf_int_close'/2,
		     'mf_int_inc'/2,
		     'mf_int_log'/3,
		     'mf_int_open'/7,
		     'mf_sync'/1,
		     'mf_write_cache'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'position'/3,
		     'print_index_file'/1,
		     'read_index_file'/1,
		     'read_size_file'/1,
		     'read_size_file_version'/1,
		     'sync'/2,
		     'truncate'/3,
		     'truncate_at'/3,
		     'write_cache'/2]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dlog_byte',{'type',56,'union',[{'type',56,'list',[{'type',56,'dlog_byte',[]}]}|[{'type',56,'byte',[]}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'dlog_format',{'type',57,'union',[{'atom',57,'external'}|[{'atom',57,'internal'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'dlog_format_type',{'type',58,'union',[{'atom',58,'halt_ext'}|[{'atom',58,'halt_int'}|[{'atom',58,'wrap_ext'}|[{'atom',58,'wrap_int'}]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'dlog_head',{'type',59,'union',[{'atom',59,'none'}|[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'binary',[]}]]}|[{'type',59,'mfa',[]}]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'dlog_head_opt',{'type',60,'union',[{'atom',60,'none'}|[{'type',60,'term',[]}|[{'type',60,'binary',[]}|[{'type',60,'list',[{'type',60,'dlog_byte',[]}]}]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'log',{'type',61,'term',[]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'dlog_mode',{'type',62,'union',[{'atom',62,'read_only'}|[{'atom',62,'read_write'}]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'dlog_name',{'type',63,'union',[{'type',63,'atom',[]}|[{'type',63,'string',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'dlog_optattr',{'type',64,'union',[{'atom',64,'name'}|[{'atom',64,'file'}|[{'atom',64,'linkto'}|[{'atom',64,'repair'}|[{'atom',64,'type'}|[{'atom',65,'format'}|[{'atom',65,'size'}|[{'atom',65,'distributed'}|[{'atom',65,'notify'}|[{'atom',66,'head'}|[{'atom',66,'head_func'}|[{'atom',66,'mode'}]]]]]]]]]]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'dlog_option',{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'name'}|[{'ann_type',67,[{'var',67,'Log'}|[{'type',67,'log',[]}]]}]]}|[{'type',68,'tuple',[{'atom',68,'file'}|[{'ann_type',68,[{'var',68,'FileName'}|[{'remote_type',68,[{'atom',68,'file'}|[{'atom',68,'filename'}|[[]]]]}]]}]]}|[{'type',69,'tuple',[{'atom',69,'linkto'}|[{'ann_type',69,[{'var',69,'LinkTo'}|[{'type',69,'union',[{'atom',69,'none'}|[{'type',69,'pid',[]}]]}]]}]]}|[{'type',70,'tuple',[{'atom',70,'repair'}|[{'ann_type',70,[{'var',70,'Repair'}|[{'type',70,'union',[{'atom',70,'true'}|[{'atom',70,'false'}|[{'atom',70,'truncate'}]]]}]]}]]}|[{'type',71,'tuple',[{'atom',71,'type'}|[{'ann_type',71,[{'var',71,'Type'}|[{'atom',71,'dlog_type'}]]}]]}|[{'type',72,'tuple',[{'atom',72,'format'}|[{'ann_type',72,[{'var',72,'Format'}|[{'type',72,'dlog_format',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'size'}|[{'ann_type',73,[{'var',73,'Size'}|[{'type',73,'dlog_size',[]}]]}]]}|[{'type',74,'tuple',[{'atom',74,'distributed'}|[{'ann_type',74,[{'var',74,'Nodes'}|[{'type',74,'list',[{'type',74,'node',[]}]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'notify'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'head'}|[{'ann_type',76,[{'var',76,'Head'}|[{'type',76,'dlog_head_opt',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'head_func'}|[{'ann_type',77,[{'var',77,'MFA'}|[{'type',77,'tuple',[{'type',77,'atom',[]}|[{'type',77,'atom',[]}|[{'type',77,'list',[]}]]]}]]}]]}|[{'type',78,'tuple',[{'atom',78,'mode'}|[{'ann_type',78,[{'var',78,'Mode'}|[{'type',78,'dlog_mode',[]}]]}]]}]]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'dlog_options',{'type',79,'list',[{'type',79,'dlog_option',[]}]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'dlog_repair',{'type',80,'union',[{'atom',80,'truncate'}|[{'type',80,'boolean',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'dlog_size',{'type',81,'union',[{'atom',81,'infinity'}|[{'type',81,'pos_integer',[]}|[{'type',82,'tuple',[{'ann_type',82,[{'var',82,'MaxNoBytes'}|[{'type',82,'pos_integer',[]}]]}|[{'ann_type',83,[{'var',83,'MaxNoFiles'}|[{'type',83,'pos_integer',[]}]]}]]}]]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dlog_status',{'type',84,'union',[{'atom',84,'ok'}|[{'type',84,'tuple',[{'atom',84,'blocked'}|[{'type',84,'union',[{'atom',84,'false'}|[{'type',84,'list',[{'var',84,'_'}]}]]}]]}]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'dlog_type',{'type',85,'union',[{'atom',85,'halt'}|[{'atom',85,'wrap'}]]},[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','arg'},[{'record_field',92,{'atom',92,'name'},{'integer',92,0}}|[{'record_field',93,{'atom',93,'version'},{'atom',93,'undefined'}}|[{'typed_record_field',{'record_field',94,{'atom',94,'file'},{'atom',94,'none'}},{'type',94,'union',[{'atom',94,'none'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'repair'},{'atom',95,'true'}},{'type',95,'dlog_repair',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'size'},{'atom',96,'infinity'}},{'type',96,'dlog_size',[]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'type'},{'atom',97,'halt'}},{'type',97,'dlog_type',[]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'distributed'},{'atom',98,'false'}},{'type',98,'union',[{'atom',98,'false'}|[{'type',98,'tuple',[{'atom',98,'true'}|[{'type',98,'list',[{'type',98,'node',[]}]}]]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'format'},{'atom',99,'internal'}},{'type',99,'dlog_format',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'linkto'},{'call',100,{'atom',100,'self'},[]}},{'type',100,'union',[{'atom',100,'none'}|[{'type',100,'pid',[]}]]}}|[{'record_field',101,{'atom',101,'head'},{'atom',101,'none'}}|[{'typed_record_field',{'record_field',102,{'atom',102,'mode'},{'atom',102,'read_write'}},{'type',102,'dlog_mode',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'notify'},{'atom',103,'false'}},{'type',103,'boolean',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'options'},{'nil',104}},{'type',104,'dlog_options',[]}}]]]]]]]]]]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','cache'},[{'typed_record_field',{'record_field',107,{'atom',107,'fd'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'fd'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'sz'},{'integer',108,0}},{'type',108,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'c'},{'nil',109}},{'type',109,'iodata',[]}}]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','halt'},[{'typed_record_field',{'record_field',113,{'atom',113,'fdc'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'record',[{'atom',113,'cache'}]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'curB'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'size'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'dlog_size',[]}]]}}]]],[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{{'record','handle'},[{'typed_record_field',{'record_field',119,{'atom',119,'filename'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'maxB'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'maxF'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'pos_integer',[]}|[{'type',121,'tuple',[{'type',121,'pos_integer',[]}|[{'type',121,'pos_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'curB'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'curF'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'integer',[]}]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'cur_fdc'}},{'type',131,'union',[{'atom',131,'undefined'}|[{'type',131,'record',[{'atom',131,'cache'}]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'cur_name'}},{'type',132,'union',[{'atom',132,'undefined'}|[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'cur_cnt'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'acc_cnt'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'firstPos'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'noFull'}},{'type',139,'union',[{'atom',139,'undefined'}|[{'type',139,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'accFull'}},{'type',143,'union',[{'atom',143,'undefined'}|[{'type',143,'non_neg_integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','log'},[{'typed_record_field',{'record_field',148,{'atom',148,'status'},{'atom',148,'ok'}},{'type',148,'dlog_status',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'name'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'dlog_name',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'blocked_by'},{'atom',150,'none'}},{'type',150,'union',[{'atom',150,'none'}|[{'type',150,'pid',[]}]]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'users'},{'integer',151,0}},{'type',151,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'filename'}},{'type',152,'union',[{'atom',152,'undefined'}|[{'remote_type',152,[{'atom',152,'file'}|[{'atom',152,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'owners'},{'nil',153}},{'type',153,'list',[{'type',153,'tuple',[{'type',153,'pid',[]}|[{'type',153,'boolean',[]}]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'type'},{'atom',154,'halt'}},{'type',154,'dlog_type',[]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'format'},{'atom',155,'internal'}},{'type',155,'dlog_format',[]}}|[{'typed_record_field',{'record_field',156,{'atom',156,'format_type'}},{'type',156,'union',[{'atom',156,'undefined'}|[{'type',156,'dlog_format_type',[]}]]}}|[{'record_field',157,{'atom',157,'head'},{'atom',157,'none'}}|[{'typed_record_field',{'record_field',159,{'atom',159,'mode'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'dlog_mode',[]}]]}}|[{'record_field',160,{'atom',160,'size'}}|[{'typed_record_field',{'record_field',161,{'atom',161,'extra'}},{'type',161,'union',[{'atom',161,'undefined'}|[{'type',161,'record',[{'atom',161,'halt'}]}|[{'type',161,'record',[{'atom',161,'handle'}]}]]]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'version'}},{'type',162,'union',[{'atom',162,'undefined'}|[{'type',162,'integer',[]}]]}}]]]]]]]]]]]]]],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{{'record','continuation'},[{'typed_record_field',{'record_field',166,{'atom',166,'pid'},{'call',166,{'atom',166,'self'},[]}},{'type',166,'pid',[]}}|[{'typed_record_field',{'record_field',167,{'atom',167,'pos'}},{'type',167,'union',[{'atom',167,'undefined'}|[{'type',167,'non_neg_integer',[]}|[{'type',167,'tuple',[{'type',167,'integer',[]}|[{'type',167,'non_neg_integer',[]}]]}]]]}}|[{'typed_record_field',{'record_field',168,{'atom',168,'b'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'binary',[]}|[{'type',168,'nil',[]}|[{'type',168,'pos_integer',[]}]]]]}}]]],[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'dlog_cont',{'type',171,'union',[{'atom',171,'start'}|[{'type',171,'record',[{'atom',171,'continuation'}]}]]},[]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'logl',1},[{'type',77,'fun',[{'type',77,'product',[{'type',77,'list',[{'type',77,'binary',[]}]}]}|[{'type',77,'tuple',[{'type',77,'iolist',[]}|[{'type',77,'non_neg_integer',[]}]]}]]}]}],
		%% Line 594
		'spec' =
		    %% Line 594
		    [{{'repair_err',5},[{'type',594,'fun',[{'type',594,'product',[{'remote_type',594,[{'atom',594,'file'}|[{'atom',594,'io_device'}|[[]]]]}|[{'type',594,'record',[{'atom',594,'cache'}]}|[{'remote_type',594,[{'atom',594,'file'}|[{'atom',594,'filename'}|[[]]]]}|[{'remote_type',595,[{'atom',595,'file'}|[{'atom',595,'filename'}|[[]]]]}|[{'type',595,'tuple',[{'atom',595,'error'}|[{'remote_type',595,[{'atom',595,'file'}|[{'atom',595,'posix'}|[[]]]]}]]}]]]]]}|[{'type',595,'no_return',[]}]]}]}],
		%% Line 604
		'spec' =
		    %% Line 604
		    [{{'is_head',1},[{'type',604,'fun',[{'type',604,'product',[{'type',604,'binary',[]}]}|[{'type',604,'union',[{'atom',604,'yes'}|[{'atom',604,'yes_not_closed'}|[{'atom',604,'no'}]]]}]]}]}],
		%% Line 633
		'spec' =
		    %% Line 633
		    [{{'mf_int_open',7},[{'type',633,'fun',[{'type',633,'product',[{'ann_type',633,[{'var',633,'FName'}|[{'remote_type',633,[{'atom',633,'file'}|[{'atom',633,'filename'}|[[]]]]}]]}|[{'ann_type',634,[{'var',634,'MaxB'}|[{'type',634,'integer',[]}]]}|[{'ann_type',635,[{'var',635,'MaxF'}|[{'type',635,'integer',[]}]]}|[{'ann_type',636,[{'var',636,'Repair'}|[{'type',636,'dlog_repair',[]}]]}|[{'ann_type',637,[{'var',637,'Mode'}|[{'type',637,'dlog_mode',[]}]]}|[{'ann_type',638,[{'var',638,'Head'}|[{'type',638,'dlog_head',[]}]]}|[{'ann_type',639,[{'var',639,'Version'}|[{'type',639,'integer',[]}]]}]]]]]]]}|[{'type',640,'union',[{'type',640,'tuple',[{'atom',640,'ok'}|[{'type',640,'record',[{'atom',640,'handle'}]}|[{'type',640,'integer',[]}]]]}|[{'type',641,'tuple',[{'atom',641,'repaired'}|[{'type',641,'record',[{'atom',641,'handle'}]}|[{'type',642,'non_neg_integer',[]}|[{'type',642,'non_neg_integer',[]}|[{'type',642,'non_neg_integer',[]}]]]]]}]]}]]}]}],
		%% Line 1544
		'spec' =
		    %% Line 1544
		    [{{'write_cache_close',3},[{'type',1544,'fun',[{'type',1544,'product',[{'remote_type',1544,[{'atom',1544,'file'}|[{'atom',1544,'fd'}|[[]]]]}|[{'remote_type',1544,[{'atom',1544,'file'}|[{'atom',1544,'filename'}|[[]]]]}|[{'type',1544,'iodata',[]}]]]}|[{'type',1544,'record',[{'atom',1544,'cache'}]}]]}]}],
		%% Line 1554
		'spec' =
		    %% Line 1554
		    [{{'file_error',2},[{'type',1554,'fun',[{'type',1554,'product',[{'remote_type',1554,[{'atom',1554,'file'}|[{'atom',1554,'filename'}|[[]]]]}|[{'type',1554,'tuple',[{'atom',1554,'error'}|[{'remote_type',1554,[{'atom',1554,'file'}|[{'atom',1554,'posix'}|[[]]]]}]]}]]}|[{'type',1554,'no_return',[]}]]}]}],
		%% Line 1559
		'spec' =
		    %% Line 1559
		    [{{'file_error_close',3},[{'type',1559,'fun',[{'type',1559,'product',[{'remote_type',1559,[{'atom',1559,'file'}|[{'atom',1559,'fd'}|[[]]]]}|[{'remote_type',1559,[{'atom',1559,'file'}|[{'atom',1559,'filename'}|[[]]]]}|[{'type',1559,'tuple',[{'atom',1559,'error'}|[{'remote_type',1559,[{'atom',1559,'file'}|[{'atom',1559,'posix'}|[[]]]]}]]}]]]}|[{'type',1559,'no_return',[]}]]}]}]]
'log'/3 =
    %% Line 68
    fun (_cor2,_cor1,_cor0) ->
	%% Line 69
	case apply 'logl'/3
		 (_cor0, [], 0) of
	  <{Bs,Size}> when 'true' ->
	      %% Line 70
	      case apply 'fwrite'/4
		       (_cor2, _cor1, Bs, Size) of
		%% Line 71
		<{'ok',NewFdC}> when 'true' ->
		    %% Line 72
		    {'ok',Size,NewFdC}
		%% Line 73
		<Error> when 'true' ->
		    %% Line 74
		    Error
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'logl'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	apply 'logl'/3
	    (_cor0, [], 0)
'logl'/3 =
    %% Line 81
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|T],Bs,Size> when 'true' ->
	      let <Sz> =
		  %% Line 82
		  call 'erlang':'byte_size'
		      (X)
	      in  let <BSz> =
		      %% Line 83
		      #{#<Sz>(4,8,'integer',['unsigned'|['big']])}#
		  in  let <_cor7> =
			  %% Line 84
			  case <> of
			    %% Line 85
			    <>
				when call 'erlang':'<'
				      (Sz,
				       65528) ->
				%% Line 86
				[Bs|[BSz|[#{#<98>(8,1,'integer',['unsigned'|['big']]),
					    #<87>(8,1,'integer',['unsigned'|['big']]),
					    #<76>(8,1,'integer',['unsigned'|['big']]),
					    #<65>(8,1,'integer',['unsigned'|['big']])}#|X]]]
			    %% Line 87
			    <> when 'true' ->
				let <MD5> =
				    %% Line 88
				    call 'erlang':'md5'
					(BSz)
				in  %% Line 89
				    [Bs|[BSz|[#{#<98>(8,1,'integer',['unsigned'|['big']]),
						#<87>(8,1,'integer',['unsigned'|['big']]),
						#<76>(8,1,'integer',['unsigned'|['big']]),
						#<65>(8,1,'integer',['unsigned'|['big']])}#|[MD5|X]]]]
			  end
		      in  let <_cor9> =
			      %% Line 91
			      call 'erlang':'+'
				  (Size, 8)
			  in  let <_cor10> =
				  %% Line 91
				  call 'erlang':'+'
				      (_cor9, Sz)
			      in  %% Line 91
				  apply 'logl'/3
				      (T, _cor7, _cor10)
	  %% Line 92
	  <[],Bs,Size> when 'true' ->
	      %% Line 93
	      {Bs,Size}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'logl',3}}] )
	    -| ['compiler_generated'] )
	end
'write_cache'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cache',Fd,_cor4,C},FName> when 'true' ->
	      do  %% Line 97
		  call 'erlang':'erase'
		      ('write_cache_timer_is_running')
		  %% Line 98
		  apply 'write_cache'/3
		      (Fd, FName, C)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'write_cache',2}}] )
	    -| ['compiler_generated'] )
	end
'sync'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	%% Line 102
	apply 'fsync'/2
	    (_cor1, _cor0)
'truncate'/3 =
    %% Line 105
    fun (_cor2,_cor1,_cor0) ->
	let <Reply> =
	    %% Line 106
	    apply 'truncate_at'/3
		(_cor2, _cor1, 8)
	in  %% Line 107
	    case Reply of
	      %% Line 108
	      <{'ok',_cor10}>
		  when call 'erlang':'=:='
			(_cor0,
			 'none') ->
		  %% Line 109
		  Reply
	      %% Line 110
	      <{'ok',FdC1}> when 'true' ->
		  %% Line 111
		  case _cor0 of
		    <{'ok',B}> when 'true' ->
			%% Line 112
			case apply 'log'/3
				 (FdC1, _cor1, [B|[]]) of
			  %% Line 113
			  <{'ok',_X_NoBytes,NewFdC}> when 'true' ->
			      %% Line 114
			      {'ok',NewFdC}
			  %% Line 115
			  <Reply2> when 'true' ->
			      %% Line 116
			      Reply2
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 118
	      <_cor11> when 'true' ->
		  %% Line 119
		  Reply
	    end
'chunk'/5 =
    %% Line 123
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <FdC,FileName,Pos,B,N>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_cor5> =
		  %% Line 124
		  call 'erlang':'byte_size'
		      (B)
	      in  %% Line 124
		  case call 'erlang':'>='
			   (_cor5, 8) of
		    <'true'> when 'true' ->
			%% Line 125
			apply 'do_handle_chunk'/5
			    (FdC, FileName, Pos, B, N)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 126
	  <FdC,FileName,Pos,NoBytes,N> when 'true' ->
	      let <_cor8> =
		  %% Line 127
		  case NoBytes of
		    %% Line 128
		    <[]> when 'true' ->
			65536
		    %% Line 129
		    <_cor22> when 'true' ->
			call 'erlang':'max'
			    (NoBytes, 65536)
		  end
	      in  %% Line 131
		  case apply 'read_chunk'/4
			   (FdC, FileName, Pos, _cor8) of
		    %% Line 132
		    <{NewFdC,{'ok',Bin}}>
			when try
			      let <_cor10> =
				  call 'erlang':'byte_size'
				      (Bin)
			      in  call 'erlang':'<'
				      (_cor10, 8)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 133
			{NewFdC,{'error',{'corrupt_log_file',FileName}}}
		    %% Line 134
		    <{NewFdC,{'ok',Bin}}>
			when let <_cor11> =
			      call 'erlang':'=:='
				  (NoBytes, [])
			  in  let <_cor13> =
				  try
				      let <_cor12> =
					  call 'erlang':'byte_size'
					      (Bin)
				      in  call 'erlang':'>='
					      (_cor12, NoBytes)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  call 'erlang':'or'
				      (_cor11, _cor13) ->
			let <_cor14> =
			    %% Line 135
			    call 'erlang':'byte_size'
				(Bin)
			in  let <NewPos> =
				%% Line 135
				call 'erlang':'+'
				    (Pos, _cor14)
			    in  %% Line 136
				apply 'do_handle_chunk'/5
				    (NewFdC, FileName, NewPos, Bin, N)
		    %% Line 137
		    <{NewFdC,{'ok',_X_Bin}}> when 'true' ->
			%% Line 138
			{NewFdC,{'error',{'corrupt_log_file',FileName}}}
		    %% Line 139
		    <{NewFdC,'eof'}>
			when call 'erlang':'is_integer'
			      (NoBytes) ->
			%% Line 140
			{NewFdC,{'error',{'corrupt_log_file',FileName}}}
		    %% Line 141
		    <Other> when 'true' ->
			%% Line 142
			Other
		  end
	end
'do_handle_chunk'/5 =
    %% Line 145
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 146
	case apply 'handle_chunk'/4
		 (_cor1, _cor2, _cor0, []) of
	  %% Line 147
	  <'corrupt'> when 'true' ->
	      %% Line 148
	      {_cor4,{'error',{'corrupt_log_file',_cor3}}}
	  %% Line 149
	  <{C,[]}> when 'true' ->
	      %% Line 150
	      ( case C of
		  ( <( {'continuation',_cor15,_rec0,_cor16}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'chunk'/5
			    (_cor4, _cor3, _rec0, _cor16, _cor0)
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','continuation'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 151
	  <C_Ack> when 'true' ->
	      %% Line 152
	      {_cor4,C_Ack}
	end
'handle_chunk'/4 =
    %% Line 155
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <B,Pos,0,Ack>
	      when try
		    let <_cor4> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (_cor4, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 166
		  call 'erlang':'self'
		      ()
	      in  %% Line 156
		  {{'continuation',_cor5,Pos,B},Ack}
	  %% Line 157
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<%% Line 158
		   Tail>(%% Line 158
			 'all',8,'binary',['unsigned'|['big']])}#,%% Line 158
								  Pos,%% Line 158
								      N,%% Line 158
									Ack>
	      when %% Line 158
		call 'erlang':'<'
		    (Size,
		     65528) ->
	      %% Line 159
	      case ( Tail
		     -| ['reuse_for_context'] ) of
		%% Line 160
		<#{#<BinTerm>(Size,8,'binary',['unsigned'|['big']]),
		   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor6> =
			%% Line 162
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 162
			apply 'handle_chunk'/4
			    (Tail2, Pos, _cor6, [BinTerm|Ack])
		%% Line 163
		<_cor39> when 'true' ->
		    let <BytesToRead> =
			%% Line 164
			call 'erlang':'+'
			    (Size, 8)
		    in  let <_cor10> =
			    %% Line 166
			    call 'erlang':'self'
				()
			in  let <_cor8> =
				%% Line 165
				call 'erlang':'byte_size'
				    (B)
			    in  let <_cor9> =
				    %% Line 165
				    call 'erlang':'-'
					(Pos, _cor8)
				in  %% Line 165
				    {{'continuation',_cor10,_cor9,BytesToRead},Ack}
	      end
	  %% Line 167
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<%% Line 168
		   Tail>(%% Line 168
			 'all',8,'binary',['unsigned'|['big']])}#,%% Line 168
								  Pos,%% Line 168
								      _X_N,%% Line 168
									   Ack> when 'true' ->
	      let <_cor12> =
		  %% Line 169
		  #{#<Size>(4,8,'integer',['unsigned'|['big']])}#
	      in  let <MD5> =
		      %% Line 169
		      call 'erlang':'md5'
			  (_cor12)
		  in  %% Line 170
		      case Tail of
			%% Line 172
			<#{#<_cor40>(16,8,'binary',['unsigned'|['big']]),
			   #<Bin>(Size,8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor40,
				   MD5) ->
			    let <_cor14> =
				call 'erlang':'self'
				    ()
			    in  %% Line 173
				{{'continuation',_cor14,Pos,[]},[Bin|Ack]}
			%% Line 174
			<#{#<_cor41>(16,8,'binary',['unsigned'|['big']]),
			   #<_cor42>('all',8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor41,
				   MD5) ->
			    let <_cor15> =
				%% Line 175
				call 'erlang':'+'
				    (Size, 8)
			    in  let <BytesToRead> =
				    %% Line 175
				    call 'erlang':'+'
					(_cor15, 16)
				in  let <_cor19> =
					call 'erlang':'self'
					    ()
				    in  let <_cor17> =
					    %% Line 176
					    call 'erlang':'byte_size'
						(B)
					in  let <_cor18> =
						%% Line 176
						call 'erlang':'-'
						    (Pos, _cor17)
					    in  %% Line 176
						{{'continuation',_cor19,_cor18,BytesToRead},Ack}
			%% Line 177
			<_cor43>
			    when try
				  let <_cor20> =
				      call 'erlang':'byte_size'
					  (Tail)
				  in  call 'erlang':'>='
					  (_cor20, 16)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 178
			    'corrupt'
			%% Line 179
			<_cor44> when 'true' ->
			    let <_cor23> =
				call 'erlang':'self'
				    ()
			    in  let <_cor21> =
				    %% Line 180
				    call 'erlang':'byte_size'
					(B)
				in  let <_cor22> =
					%% Line 180
					call 'erlang':'-'
					    (Pos, _cor21)
				    in  %% Line 180
					{{'continuation',_cor23,_cor22,[]},Ack}
		      end
	  %% Line 182
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<203500599>(4,8,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#,%% Line 183
								  Pos,%% Line 183
								      N,%% Line 183
									Ack> when 'true' ->
	      %% Line 185
	      case ( Tail
		     -| ['reuse_for_context'] ) of
		%% Line 186
		<#{#<BinTerm>(Size,8,'binary',['unsigned'|['big']]),
		   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor25> =
			%% Line 187
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 187
			apply 'handle_chunk'/4
			    (Tail2, Pos, _cor25, [BinTerm|Ack])
		%% Line 188
		<_cor45> when 'true' ->
		    let <BytesToRead> =
			%% Line 190
			call 'erlang':'+'
			    (Size, 8)
		    in  let <_cor29> =
			    call 'erlang':'self'
				()
			in  let <_cor27> =
				%% Line 191
				call 'erlang':'byte_size'
				    (B)
			    in  let <_cor28> =
				    %% Line 191
				    call 'erlang':'-'
					(Pos, _cor27)
				in  %% Line 191
				    {{'continuation',_cor29,_cor28,BytesToRead},Ack}
	      end
	  %% Line 193
	  <B,_X_Pos,_X_N,_X_Ack>
	      when try
		    let <_cor31> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (_cor31, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 194
	      'corrupt'
	  %% Line 195
	  <B,Pos,_X_N,Ack> when 'true' ->
	      let <_cor34> =
		  call 'erlang':'self'
		      ()
	      in  let <_cor32> =
		      %% Line 196
		      call 'erlang':'byte_size'
			  (B)
		  in  let <_cor33> =
			  %% Line 196
			  call 'erlang':'-'
			      (Pos, _cor32)
		      in  %% Line 196
			  {{'continuation',_cor34,_cor33,[]},Ack}
	end
'read_chunk'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 199
	    call 'erlang':'+'
		(_cor1, 8)
	in  %% Line 199
	    case apply 'pread'/4
		     (_cor3, _cor2, _cor4, _cor0) of
	      <{FdC1,R}> when 'true' ->
		  %% Line 200
		  case apply 'position'/3
			   (FdC1, _cor2, 'eof') of
		    %% Line 201
		    <{'ok',NewFdC,_X_Pos}> when 'true' ->
			%% Line 202
			{NewFdC,R}
		    %% Line 203
		    <{Error,NewFdC}> when 'true' ->
			%% Line 204
			{NewFdC,Error}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'chunk_read_only'/5 =
    %% Line 210
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <FdC = {'cache',_cor12,_cor13,_cor14},FileName,Pos,B,N> when 'true' ->
	      %% Line 211
	      apply 'do_chunk_read_only'/5
		  (FdC, FileName, Pos, B, N)
	  %% Line 212
	  <Fd,FileName,Pos,B,N> when 'true' ->
	      let <FdC> =
		  %% Line 214
		  {'cache',Fd,0,[]}
	      in  %% Line 215
		  case apply 'do_chunk_read_only'/5
			   (FdC, FileName, Pos, B, N) of
		    <{_X_NFdC,Reply}> when 'true' ->
			%% Line 216
			Reply
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	end
'do_chunk_read_only'/5 =
    %% Line 218
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <FdC,FileName,Pos,B,N>
	      when call 'erlang':'is_binary'
		    (B) ->
	      let <_cor5> =
		  %% Line 219
		  call 'erlang':'byte_size'
		      (B)
	      in  %% Line 219
		  case call 'erlang':'>='
			   (_cor5, 8) of
		    <'true'> when 'true' ->
			%% Line 220
			apply 'do_handle_chunk_ro'/5
			    (FdC, FileName, Pos, B, N)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 221
	  <FdC,FileName,Pos,NoBytes,N> when 'true' ->
	      let <_cor8> =
		  %% Line 222
		  case NoBytes of
		    %% Line 223
		    <[]> when 'true' ->
			65536
		    %% Line 224
		    <_cor33> when 'true' ->
			call 'erlang':'max'
			    (NoBytes, 65536)
		  end
	      in  %% Line 226
		  case apply 'read_chunk_ro'/4
			   (FdC, FileName, Pos, _cor8) of
		    %% Line 227
		    <{NewFdC,{'ok',Bin}}>
			when try
			      let <_cor10> =
				  call 'erlang':'byte_size'
				      (Bin)
			      in  call 'erlang':'<'
				      (_cor10, 8)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor13> =
			    call 'erlang':'self'
				()
			in  let <_cor11> =
				%% Line 228
				call 'erlang':'byte_size'
				    (Bin)
			    in  let <_cor12> =
				    %% Line 228
				    call 'erlang':'+'
					(Pos, _cor11)
				in  let <NewCont> =
					%% Line 228
					{'continuation',_cor13,_cor12,[]}
				    in  let <_cor15> =
					    %% Line 229
					    call 'erlang':'byte_size'
						(Bin)
					in  %% Line 229
					    {NewFdC,{NewCont,[],_cor15}}
		    %% Line 230
		    <{NewFdC,{'ok',Bin}}>
			when let <_cor16> =
			      call 'erlang':'=:='
				  (NoBytes, [])
			  in  let <_cor18> =
				  try
				      let <_cor17> =
					  call 'erlang':'byte_size'
					      (Bin)
				      in  call 'erlang':'>='
					      (_cor17, NoBytes)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  call 'erlang':'or'
				      (_cor16, _cor18) ->
			let <_cor19> =
			    %% Line 231
			    call 'erlang':'byte_size'
				(Bin)
			in  let <NewPos> =
				%% Line 231
				call 'erlang':'+'
				    (Pos, _cor19)
			    in  %% Line 232
				apply 'do_handle_chunk_ro'/5
				    (NewFdC, FileName, NewPos, Bin, N)
		    %% Line 233
		    <{NewFdC,{'ok',Bin}}> when 'true' ->
			let <_cor23> =
			    call 'erlang':'self'
				()
			in  let <_cor21> =
				%% Line 234
				call 'erlang':'byte_size'
				    (Bin)
			    in  let <_cor22> =
				    %% Line 234
				    call 'erlang':'+'
					(Pos, _cor21)
				in  let <NewCont> =
					%% Line 234
					{'continuation',_cor23,_cor22,[]}
				    in  let <_cor25> =
					    %% Line 235
					    call 'erlang':'byte_size'
						(Bin)
					in  let <_cor26> =
						%% Line 235
						call 'erlang':'-'
						    (_cor25, 8)
					    in  %% Line 235
						{NewFdC,{NewCont,[],_cor26}}
		    %% Line 236
		    <{NewFdC,'eof'}>
			when call 'erlang':'is_integer'
			      (NoBytes) ->
			%% Line 237
			{NewFdC,'eof'}
		    %% Line 238
		    <Other> when 'true' ->
			%% Line 239
			Other
		  end
	end
'do_handle_chunk_ro'/5 =
    %% Line 242
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 243
	case apply 'handle_chunk_ro'/5
		 (_cor1, _cor2, _cor0, [], 0) of
	  %% Line 244
	  <{C,[],0}> when 'true' ->
	      %% Line 245
	      case C of
		<{'continuation',_cor12,NewPos,NoBytes}> when 'true' ->
		    %% Line 246
		    apply 'do_chunk_read_only'/5
			(_cor4, _cor3, NewPos, NoBytes, _cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 247
	  <C_Ack_Bad> when 'true' ->
	      %% Line 248
	      {_cor4,C_Ack_Bad}
	end
'handle_chunk_ro'/5 =
    %% Line 251
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <B,Pos,0,Ack,Bad>
	      when try
		    let <_cor5> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (_cor5, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  call 'erlang':'self'
		      ()
	      in  %% Line 252
		  {{'continuation',_cor6,Pos,B},Ack,Bad}
	  %% Line 253
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<%% Line 254
		   Tail>(%% Line 254
			 'all',8,'binary',['unsigned'|['big']])}#,%% Line 254
								  Pos,%% Line 254
								      N,%% Line 254
									Ack,%% Line 254
									    Bad>
	      when %% Line 254
		call 'erlang':'<'
		    (Size,
		     65528) ->
	      %% Line 255
	      case ( Tail
		     -| ['reuse_for_context'] ) of
		%% Line 256
		<#{#<BinTerm>(Size,8,'binary',['unsigned'|['big']]),
		   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor7> =
			%% Line 257
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 257
			apply 'handle_chunk_ro'/5
			    (Tail2, Pos, _cor7, [BinTerm|Ack], Bad)
		%% Line 258
		<_cor45> when 'true' ->
		    let <BytesToRead> =
			%% Line 259
			call 'erlang':'+'
			    (Size, 8)
		    in  let <_cor11> =
			    call 'erlang':'self'
				()
			in  let <_cor9> =
				%% Line 260
				call 'erlang':'byte_size'
				    (B)
			    in  let <_cor10> =
				    %% Line 260
				    call 'erlang':'-'
					(Pos, _cor9)
				in  %% Line 260
				    {{'continuation',_cor11,_cor10,BytesToRead},Ack,Bad}
	      end
	  %% Line 262
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<%% Line 263
		   Tail>(%% Line 263
			 'all',8,'binary',['unsigned'|['big']])}#,%% Line 263
								  Pos,%% Line 263
								      N,%% Line 263
									Ack,%% Line 263
									    Bad> when 'true' ->
	      let <_cor13> =
		  %% Line 264
		  #{#<Size>(4,8,'integer',['unsigned'|['big']])}#
	      in  let <MD5> =
		      %% Line 264
		      call 'erlang':'md5'
			  (_cor13)
		  in  %% Line 265
		      case ( Tail
			     -| ['reuse_for_context'] ) of
			%% Line 266
			<#{#<_cor46>(16,8,'binary',['unsigned'|['big']]),
			   #<Bin>(Size,8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor46,
				   MD5) ->
			    let <_cor15> =
				call 'erlang':'self'
				    ()
			    in  %% Line 268
				{{'continuation',_cor15,Pos,[]},[Bin|Ack],Bad}
			%% Line 269
			<#{#<_cor47>(16,8,'binary',['unsigned'|['big']]),
			   #<_cor48>('all',8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor47,
				   MD5) ->
			    let <_cor16> =
				%% Line 270
				call 'erlang':'+'
				    (Size, 8)
			    in  let <BytesToRead> =
				    %% Line 270
				    call 'erlang':'+'
					(_cor16, 16)
				in  let <_cor20> =
					call 'erlang':'self'
					    ()
				    in  let <_cor18> =
					    %% Line 271
					    call 'erlang':'byte_size'
						(B)
					in  let <_cor19> =
						%% Line 271
						call 'erlang':'-'
						    (Pos, _cor18)
					    in  %% Line 271
						{{'continuation',_cor20,_cor19,BytesToRead},Ack,Bad}
			%% Line 272
			<#{#<_X_BadMD5>(16,8,'binary',['unsigned'|['big']]),
			   #<_cor49>(1,8,'integer',['unsigned'|['big']]),
			   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    let <_cor22> =
				%% Line 273
				call 'erlang':'-'
				    (N, 1)
			    in  let <_cor21> =
				    %% Line 273
				    call 'erlang':'+'
					(Bad, 1)
				in  %% Line 273
				    apply 'handle_chunk_ro'/5
					(Tail2, Pos, _cor22, Ack, _cor21)
			%% Line 274
			<_cor50> when 'true' ->
			    let <_cor25> =
				call 'erlang':'self'
				    ()
			    in  let <_cor23> =
				    %% Line 275
				    call 'erlang':'byte_size'
					(B)
				in  let <_cor24> =
					%% Line 275
					call 'erlang':'-'
					    (Pos, _cor23)
				    in  %% Line 275
					{{'continuation',_cor25,_cor24,[]},Ack,Bad}
		      end
	  %% Line 277
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<203500599>(4,8,'integer',['unsigned'|['big']]),
		 #<%% Line 278
		   Tail>(%% Line 278
			 'all',8,'binary',['unsigned'|['big']])}#,%% Line 278
								  Pos,%% Line 278
								      N,%% Line 278
									Ack,%% Line 278
									    Bad> when 'true' ->
	      %% Line 280
	      case ( Tail
		     -| ['reuse_for_context'] ) of
		%% Line 281
		<#{#<BinTerm>(Size,8,'binary',['unsigned'|['big']]),
		   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor27> =
			%% Line 282
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 282
			apply 'handle_chunk_ro'/5
			    (Tail2, Pos, _cor27, [BinTerm|Ack], Bad)
		%% Line 283
		<_cor51> when 'true' ->
		    let <BytesToRead> =
			%% Line 285
			call 'erlang':'+'
			    (Size, 8)
		    in  let <_cor31> =
			    call 'erlang':'self'
				()
			in  let <_cor29> =
				%% Line 286
				call 'erlang':'byte_size'
				    (B)
			    in  let <_cor30> =
				    %% Line 286
				    call 'erlang':'-'
					(Pos, _cor29)
				in  %% Line 286
				    {{'continuation',_cor31,_cor30,BytesToRead},Ack,Bad}
	      end
	  %% Line 288
	  <B,Pos,N,Ack,Bad>
	      when try
		    let <_cor33> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (_cor33, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 289
	      case ( B
		     -| ['reuse_for_context'] ) of
		<#{#<_cor52>(1,8,'integer',['unsigned'|['big']]),
		   #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor36> =
			%% Line 290
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor35> =
			    %% Line 290
			    call 'erlang':'+'
				(Bad, 1)
			in  %% Line 290
			    apply 'handle_chunk_ro'/5
				(B2, Pos, _cor36, Ack, _cor35)
		( <_cor34> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor34)
			  primop 'match_fail'
			      ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 291
	  <B,Pos,_X_N,Ack,Bad> when 'true' ->
	      let <_cor39> =
		  call 'erlang':'self'
		      ()
	      in  let <_cor37> =
		      %% Line 292
		      call 'erlang':'byte_size'
			  (B)
		  in  let <_cor38> =
			  %% Line 292
			  call 'erlang':'-'
			      (Pos, _cor37)
		      in  %% Line 292
			  {{'continuation',_cor39,_cor38,[]},Ack,Bad}
	end
'read_chunk_ro'/4 =
    %% Line 294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 295
	    call 'erlang':'+'
		(_cor1, 8)
	in  %% Line 295
	    apply 'pread'/4
		(_cor3, _cor2, _cor4, _cor0)
'close'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cache',Fd,_cor9,[]},FileName,'read_only'> when 'true' ->
	      %% Line 299
	      case call 'file':'close'
		       (Fd) of
		%% Line 300
		<'ok'> when 'true' ->
		    'ok'
		%% Line 301
		<Error> when 'true' ->
		    apply 'file_error'/2
			(FileName, Error)
	      end
	  %% Line 303
	  <{'cache',Fd,_cor10,C},FileName,'read_write'> when 'true' ->
	      %% Line 304
	      case apply 'write_cache'/3
		       (Fd, FileName, C) of
		<{Reply,_X_NewFdC}> when 'true' ->
		    do  %% Line 305
			apply 'mark'/3
			    (Fd, FileName, #{#<99>(8,1,'integer',['unsigned'|['big']]),
					     #<88>(8,1,'integer',['unsigned'|['big']]),
					     #<77>(8,1,'integer',['unsigned'|['big']]),
					     #<11>(8,1,'integer',['unsigned'|['big']])}#)
			do  %% Line 306
			    case call 'file':'close'
				     (Fd) of
			      %% Line 307
			      <'ok'> when 'true' ->
				  'ok'
			      %% Line 308
			      <Error> when 'true' ->
				  apply 'file_error'/2
				      (FileName, Error)
			    end
			    %% Line 310
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Reply,
					 'ok') ->
				  'ok'
			      <> when 'true' ->
				  call 'erlang':'throw'
				      (Reply)
			    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'close',3}}] )
	    -| ['compiler_generated'] )
	end
'int_open'/4 =
    %% Line 320
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <FName,'truncate','read_write',Head> when 'true' ->
	      %% Line 321
	      apply 'new_int_file'/2
		  (FName, Head)
	  %% Line 322
	  <FName,Repair,'read_write',Head> when 'true' ->
	      %% Line 323
	      case apply 'open_read'/1
		       (FName) of
		%% Line 324
		<{'ok',Fd}> when 'true' ->
		    %% Line 325
		    case call 'file':'read'
			     (Fd, 8) of
		      %% Line 326
		      <{'ok',FileHead}> when 'true' ->
			  %% Line 327
			  case apply 'is_head'/1
				   (FileHead) of
			    %% Line 328
			    <'yes'> when 'true' ->
				do  %% Line 329
				    case call 'file':'close'
					     (Fd) of
				      %% Line 330
				      <'ok'> when 'true' ->
					  'ok'
				      %% Line 331
				      <Error2> when 'true' ->
					  apply 'file_error'/2
					      (FName, Error2)
				    end
				    %% Line 333
				    case apply 'open_update'/1
					     (FName) of
				      %% Line 334
				      <{'ok',Fd2}> when 'true' ->
					  do  %% Line 335
					      apply 'mark'/3
						  (Fd2, FName, #{#<6>(8,1,'integer',['unsigned'|['big']]),
								 #<7>(8,1,'integer',['unsigned'|['big']]),
								 #<8>(8,1,'integer',['unsigned'|['big']]),
								 #<9>(8,1,'integer',['unsigned'|['big']])}#)
					      let <FdC1> =
						  %% Line 336
						  {'cache',Fd2,0,[]}
					      in  %% Line 337
						  case apply 'position_close'/3
							   (FdC1, FName, 'eof') of
						    <{FdC,P}> when 'true' ->
							%% Line 338
							{'ok',{'existed',FdC,{0,0},P}}
						    ( <_cor6> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor6})
						      -| ['compiler_generated'] )
						  end
				      %% Line 339
				      <Error> when 'true' ->
					  %% Line 340
					  apply 'file_error'/2
					      (FName, Error)
				    end
			    %% Line 342
			    <'yes_not_closed'>
				when call 'erlang':'=:='
				      (Repair,
				       'true') ->
				%% Line 343
				apply 'repair'/2
				    (Fd, FName)
			    %% Line 344
			    <'yes_not_closed'>
				when let <_cor8> =
				      call 'erlang':'=:='
					  (Repair, 'false')
				  in  let <_cor9> =
					  call 'erlang':'is_boolean'
					      (Repair)
				      in  call 'erlang':'and'
					      (_cor8, _cor9) ->
				let <_X_> =
				    %% Line 345
				    ( call 'file':'close'
					  (Fd)
				      -| ['result_not_wanted'] )
				in  %% Line 346
				    call 'erlang':'throw'
					({'error',{'need_repair',FName}})
			    %% Line 347
			    <'no'> when 'true' ->
				let <_X_> =
				    %% Line 348
				    ( call 'file':'close'
					  (Fd)
				      -| ['result_not_wanted'] )
				in  %% Line 349
				    call 'erlang':'throw'
					({'error',{'not_a_log_file',FName}})
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      %% Line 351
		      <'eof'> when 'true' ->
			  let <_X_> =
			      %% Line 352
			      ( call 'file':'close'
				    (Fd)
				-| ['result_not_wanted'] )
			  in  %% Line 353
			      call 'erlang':'throw'
				  ({'error',{'not_a_log_file',FName}})
		      %% Line 354
		      <Error> when 'true' ->
			  %% Line 355
			  apply 'file_error_close'/3
			      (Fd, FName, Error)
		    end
		%% Line 357
		<_X_Other> when 'true' ->
		    %% Line 358
		    apply 'new_int_file'/2
			(FName, Head)
	      end
	  %% Line 360
	  <FName,_X_Repair,'read_only',_X_Head> when 'true' ->
	      %% Line 361
	      case apply 'open_read'/1
		       (FName) of
		%% Line 362
		<{'ok',Fd}> when 'true' ->
		    %% Line 363
		    case call 'file':'read'
			     (Fd, 8) of
		      %% Line 364
		      <{'ok',Head}> when 'true' ->
			  %% Line 365
			  case apply 'is_head'/1
				   (Head) of
			    %% Line 366
			    <'yes'> when 'true' ->
				%% Line 367
				case apply 'position_close2'/3
					 (Fd, FName, 'eof') of
				  <{'ok',P}> when 'true' ->
				      let <FdC> =
					  %% Line 368
					  {'cache',Fd,0,[]}
				      in  %% Line 369
					  {'ok',{'existed',FdC,{0,0},P}}
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor16})
				    -| ['compiler_generated'] )
				end
			    %% Line 370
			    <'yes_not_closed'> when 'true' ->
				%% Line 371
				case apply 'position_close2'/3
					 (Fd, FName, 'eof') of
				  <{'ok',P}> when 'true' ->
				      let <FdC> =
					  %% Line 372
					  {'cache',Fd,0,[]}
				      in  %% Line 373
					  {'ok',{'existed',FdC,{0,0},P}}
				  ( <_cor18> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor18})
				    -| ['compiler_generated'] )
				end
			    %% Line 374
			    <'no'> when 'true' ->
				let <_X_> =
				    %% Line 375
				    ( call 'file':'close'
					  (Fd)
				      -| ['result_not_wanted'] )
				in  %% Line 376
				    call 'erlang':'throw'
					({'error',{'not_a_log_file',FName}})
			    ( <_cor21> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor21})
			      -| ['compiler_generated'] )
			  end
		      %% Line 378
		      <'eof'> when 'true' ->
			  let <_X_> =
			      %% Line 379
			      ( call 'file':'close'
				    (Fd)
				-| ['result_not_wanted'] )
			  in  %% Line 380
			      call 'erlang':'throw'
				  ({'error',{'not_a_log_file',FName}})
		      %% Line 381
		      <Error> when 'true' ->
			  %% Line 382
			  apply 'file_error_close'/3
			      (Fd, FName, Error)
		    end
		%% Line 384
		<Error> when 'true' ->
		    %% Line 385
		    apply 'file_error'/2
			(FName, Error)
	      end
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'int_open',4}}] )
	    -| ['compiler_generated'] )
	end
'new_int_file'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	%% Line 389
	case apply 'open_update'/1
		 (_cor1) of
	  %% Line 390
	  <{'ok',Fd}> when 'true' ->
	      %% Line 391
	      case apply 'truncate_at_close2'/3
		       (Fd, _cor1, 'bof') of
		<'ok'> when 'true' ->
		    do  %% Line 392
			apply 'fwrite_close2'/3
			    (Fd, _cor1, [#{#<1>(8,1,'integer',['unsigned'|['big']]),
					   #<2>(8,1,'integer',['unsigned'|['big']]),
					   #<3>(8,1,'integer',['unsigned'|['big']]),
					   #<4>(8,1,'integer',['unsigned'|['big']])}#|[#{#<6>(8,1,'integer',['unsigned'|['big']]),
											 #<7>(8,1,'integer',['unsigned'|['big']]),
											 #<8>(8,1,'integer',['unsigned'|['big']]),
											 #<9>(8,1,'integer',['unsigned'|['big']])}#]])
			%% Line 393
			case apply 'int_log_head'/2
				 (Fd, _cor0) of
			  <{FdC1,Nh,HeadSz}> when 'true' ->
			      %% Line 394
			      case apply 'position_close'/3
				       (FdC1, _cor1, 'cur') of
				<{FdC,FileSize}> when 'true' ->
				    let <_cor5> =
					%% Line 395
					call 'erlang':'+'
					    (8, HeadSz)
				    in  %% Line 395
					{'ok',{'new',FdC,{Nh,_cor5},FileSize}}
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 396
	  <Error> when 'true' ->
	      %% Line 397
	      apply 'file_error'/2
		  (_cor1, Error)
	end
'int_log_head'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	%% Line 402
	case apply 'lh'/2
		 (_cor0, 'internal') of
	  %% Line 403
	  <{'ok',BinHead}> when 'true' ->
	      %% Line 404
	      case apply 'logl'/1
		       ([BinHead|[]]) of
		<{Bs,Size}> when 'true' ->
		    %% Line 405
		    case apply 'fwrite_header'/3
			     (_cor1, Bs, Size) of
		      <{'ok',FdC}> when 'true' ->
			  %% Line 406
			  {FdC,1,Size}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 407
	  <'none'> when 'true' ->
	      %% Line 408
	      {{'cache',_cor1,0,[]},0,0}
	  %% Line 409
	  <Error> when 'true' ->
	      let <_X_> =
		  %% Line 410
		  ( call 'file':'close'
			(_cor1)
		    -| ['result_not_wanted'] )
	      in  %% Line 411
		  call 'erlang':'throw'
		      (Error)
	end
'ext_open'/4 =
    %% Line 416
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <FName,'truncate','read_write',Head> when 'true' ->
	      %% Line 417
	      apply 'new_ext_file'/2
		  (FName, Head)
	  %% Line 418
	  <FName,_X_Repair,'read_write',Head> when 'true' ->
	      %% Line 419
	      case call 'file':'read_file_info'
		       (FName) of
		%% Line 420
		<{'ok',_X_FileInfo}> when 'true' ->
		    %% Line 421
		    case apply 'open_update'/1
			     (FName) of
		      %% Line 422
		      <{'ok',Fd}> when 'true' ->
			  %% Line 423
			  case apply 'position_close2'/3
				   (Fd, FName, 'eof') of
			    <{'ok',P}> when 'true' ->
				let <FdC> =
				    %% Line 424
				    {'cache',Fd,0,[]}
				in  %% Line 425
				    {'ok',{'existed',FdC,{0,0},P}}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      %% Line 426
		      <Error> when 'true' ->
			  %% Line 427
			  apply 'file_error'/2
			      (FName, Error)
		    end
		%% Line 429
		<_X_Other> when 'true' ->
		    %% Line 430
		    apply 'new_ext_file'/2
			(FName, Head)
	      end
	  %% Line 432
	  <FName,_X_Repair,'read_only',_X_Head> when 'true' ->
	      %% Line 433
	      case apply 'open_read'/1
		       (FName) of
		%% Line 434
		<{'ok',Fd}> when 'true' ->
		    %% Line 435
		    case apply 'position_close2'/3
			     (Fd, FName, 'eof') of
		      <{'ok',P}> when 'true' ->
			  let <FdC> =
			      %% Line 436
			      {'cache',Fd,0,[]}
			  in  %% Line 437
			      {'ok',{'existed',FdC,{0,0},P}}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 438
		<Error> when 'true' ->
		    %% Line 439
		    apply 'file_error'/2
			(FName, Error)
	      end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'ext_open',4}}] )
	    -| ['compiler_generated'] )
	end
'new_ext_file'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	%% Line 443
	case apply 'open_truncate'/1
		 (_cor1) of
	  %% Line 444
	  <{'ok',Fd}> when 'true' ->
	      %% Line 445
	      case apply 'ext_log_head'/2
		       (Fd, _cor0) of
		<{FdC1,HeadSize}> when 'true' ->
		    %% Line 446
		    case apply 'position_close'/3
			     (FdC1, _cor1, 'cur') of
		      <{FdC,FileSize}> when 'true' ->
			  %% Line 447
			  {'ok',{'new',FdC,HeadSize,FileSize}}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 448
	  <Error> when 'true' ->
	      %% Line 449
	      apply 'file_error'/2
		  (_cor1, Error)
	end
'ext_log_head'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	%% Line 454
	case apply 'lh'/2
		 (_cor0, 'external') of
	  %% Line 455
	  <{'ok',BinHead}> when 'true' ->
	      let <Size> =
		  %% Line 456
		  call 'erlang':'byte_size'
		      (BinHead)
	      in  %% Line 457
		  case apply 'fwrite_header'/3
			   (_cor1, BinHead, Size) of
		    <{'ok',FdC}> when 'true' ->
			%% Line 458
			{FdC,{1,Size}}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 459
	  <'none'> when 'true' ->
	      %% Line 460
	      {{'cache',_cor1,0,[]},{0,0}}
	  %% Line 461
	  <Error> when 'true' ->
	      let <_X_> =
		  %% Line 462
		  ( call 'file':'close'
			(_cor1)
		    -| ['result_not_wanted'] )
	      in  %% Line 463
		  call 'erlang':'throw'
		      (Error)
	end
'mark'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	%% Line 468
	case apply 'position_close2'/3
		 (_cor2, _cor1, 4) of
	  <{'ok',_cor7}> when 'true' ->
	      %% Line 469
	      apply 'fwrite_close2'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'lh'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ok',Bin},_X_Format> when 'true' ->
	      %% Line 473
	      {'ok',Bin}
	  %% Line 474
	  <{M,F,A},Format>
	      when call 'erlang':'is_list'
		    (A) ->
	      let <_cor2> =
		  catch
		      %% Line 475
		      call 'erlang':'apply'
			  (M, F, A)
	      in  %% Line 475
		  case _cor2 of
		    %% Line 476
		    <{'ok',Head}>
			when call 'erlang':'=:='
			      (Format,
			       'internal') ->
			let <_cor3> =
			    %% Line 477
			    call 'erlang':'term_to_binary'
				(Head)
			in  %% Line 477
			    {'ok',_cor3}
		    %% Line 478
		    <{'ok',Bin}>
			when call 'erlang':'is_binary'
			      (Bin) ->
			%% Line 479
			{'ok',Bin}
		    %% Line 480
		    <{'ok',Bytes}> when 'true' ->
			let <_cor4> =
			    catch
				%% Line 481
				call 'erlang':'list_to_binary'
				    (Bytes)
			in  %% Line 481
			    case _cor4 of
			      %% Line 482
			      <{'EXIT',_cor9}> when 'true' ->
				  %% Line 483
				  {'error',{'invalid_header',{{M,F,A},{'ok',Bytes}}}}
			      %% Line 484
			      <Bin> when 'true' ->
				  %% Line 485
				  {'ok',Bin}
			    end
		    %% Line 487
		    <{'EXIT',Error}> when 'true' ->
			%% Line 488
			{'error',{'invalid_header',{{M,F,A},Error}}}
		    %% Line 489
		    <Error> when 'true' ->
			%% Line 490
			{'error',{'invalid_header',{{M,F,A},Error}}}
		  end
	  %% Line 492
	  <{M,F,A},_X_Format> when 'true' ->
	      %% Line 493
	      {'error',{'invalid_header',{M,F,A}}}
	  %% Line 494
	  <'none',_X_Format> when 'true' ->
	      %% Line 495
	      'none'
	  %% Line 496
	  <H,_X_F> when 'true' ->
	      %% Line 497
	      {'error',{'invalid_header',H}}
	end
'repair'/2 =
    %% Line 499
    fun (_cor1,_cor0) ->
	let <FSz> =
	    %% Line 500
	    apply 'file_size'/1
		(_cor0)
	in  do  %% Line 501
		call 'error_logger':'info_msg'
		    ([100|[105|[115|[107|[95|[108|[111|[103|[58|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[126|[116|[112|[32|[46|[46|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		let <Tmp> =
		    %% Line 502
		    apply 'add_ext'/2
			(_cor0, [84|[77|[80]]])
		in  %% Line 503
		    case apply 'new_int_file'/2
			     (Tmp, 'none') of
		      <{'ok',{_X_Alloc,Out,{0,_cor7},_X_FileSize}}> when 'true' ->
			  %% Line 504
			  apply 'scan_f_read'/9
			      (#{}#, _cor1, Out, _cor0, FSz, Tmp, 65536, 0, 0)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
'scan_f_read'/9 =
    %% Line 506
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 507
	case call 'file':'read'
		 (_cor7, _cor2) of
	  %% Line 508
	  <'eof'> when 'true' ->
	      let <_cor9> =
		  %% Line 509
		  call 'erlang':'byte_size'
		      (_cor8)
	      in  let <_cor10> =
		      %% Line 509
		      call 'erlang':'+'
			  (_cor0, _cor9)
		  in  %% Line 509
		      apply 'done_scan'/6
			  (_cor7, _cor6, _cor3, _cor5, _cor1, _cor10)
	  %% Line 510
	  <{'ok',Bin}> when 'true' ->
	      let <NewBin> =
		  %% Line 511
		  call 'erlang':'list_to_binary'
		      ([_cor8|[Bin|[]]])
	      in  %% Line 512
		  case %% Line 513
		       apply 'scan_f'/5
			   (NewBin, _cor4, [], _cor1, _cor0) of
		    <{NB,NMax,Ack,NNo,NBad}> when 'true' ->
			let <_cor13> =
			    %% Line 514
			    call 'lists':'reverse'
				(Ack)
			in  %% Line 514
			    case apply 'log'/3
				     (_cor6, _cor3, _cor13) of
			      %% Line 515
			      <{'ok',_X_Size,NewOut}> when 'true' ->
				  %% Line 516
				  apply 'scan_f_read'/9
				      (NB, _cor7, NewOut, _cor5, _cor4, _cor3, NMax, NNo, NBad)
			      %% Line 517
			      <{{'error',{'file_error',_X_Filename,Error}},NewOut}> when 'true' ->
				  %% Line 518
				  apply 'repair_err'/5
				      (_cor7, NewOut, _cor3, _cor5, {'error',Error})
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor14})
				-| ['compiler_generated'] )
			    end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 520
	  <Error> when 'true' ->
	      %% Line 521
	      apply 'repair_err'/5
		  (_cor7, _cor6, _cor3, _cor5, Error)
	end
'scan_f'/5 =
    %% Line 524
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#,%% Line 525
								  FSz,%% Line 525
								      Ack,%% Line 525
									  No,%% Line 525
									     Bad>
	      when %% Line 525
		call 'erlang':'<'
		    (Size,
		     65528) ->
	      %% Line 558
	      ( case ( Tail
		       -| ['reuse_for_context'] ) of
		  %% Line 559
		  ( <( #{#<( BinTerm
			     -| ['compiler_generated'] )>(Size,( 8
								 -| ['compiler_generated'] ),( 'binary'
											       -| ['compiler_generated'] ),( ['unsigned'|['big']]
															     -| ['compiler_generated'] )),
			 #<( Tail2
			     -| ['compiler_generated'] )>(( 'all'
							    -| ['compiler_generated'] ),( 8
											  -| ['compiler_generated'] ),( 'binary'
															-| ['compiler_generated'] ),( ['unsigned'|['big']]
																		      -| ['compiler_generated'] ))}#
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_cor7> =
			      ( catch
				    %% Line 560
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'binary_to_term'
									   -| ['compiler_generated'] )
					  (( BinTerm
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  in  %% Line 560
			      ( case ( _cor7
				       -| ['compiler_generated'] ) of
				  %% Line 561
				  ( <( {( 'EXIT'
					  -| ['compiler_generated'] ),( _cor22
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					%% Line 562
					( case ( B
						 -| ['reuse_for_context'] ) of
					    ( <( #{#<( _cor23
						       -| ['compiler_generated'] )>(( 8
										      -| ['compiler_generated'] ),( 1
														    -| ['compiler_generated'] ),( 'integer'
																		  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						-| ['compiler_generated'] )),
						   #<( B2
						       -| ['compiler_generated'] )>(( 'all'
										      -| ['compiler_generated'] ),( 8
														    -| ['compiler_generated'] ),( 'binary'
																		  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						-| ['compiler_generated'] ))}#
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( let <_cor9> =
							%% Line 563
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (Bad, ( 1
								      -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  %% Line 563
							( apply ( 'scan_f'/5
								  -| ['compiler_generated'] )
							      (( B2
								 -| ['compiler_generated'] ), FSz, Ack, No, ( _cor9
													      -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor8
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  do  primop 'bs_context_to_binary'
							  (_cor8)
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'badmatch'
								  -| ['compiler_generated'] ),( _cor8
												-| ['compiler_generated'] )}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 564
				  ( <( _X_Term
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					( let <_cor10> =
					      %% Line 565
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '+'
										     -| ['compiler_generated'] )
						    (No, ( 1
							   -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 565
					      ( apply ( 'scan_f'/5
							-| ['compiler_generated'] )
						    (( Tail2
						       -| ['compiler_generated'] ), FSz, ( [( BinTerm
											      -| ['compiler_generated'] )|Ack]
											   -| ['compiler_generated'] ), ( _cor10
															  -| ['compiler_generated'] ), Bad)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 567
		  ( <( _cor24
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			do  primop 'bs_context_to_binary'
				(Tail)
			    ( let <_cor12> =
				  %% Line 568
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'byte_size'
									 -| ['compiler_generated'] )
					(Tail)
				    -| ['compiler_generated'] )
			      in  ( let <_cor13> =
					%% Line 568
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (Size, ( _cor12
						       -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  %% Line 568
					( {B,( _cor13
					       -| ['compiler_generated'] ),Ack,No,Bad}
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 527
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<1649888321>(4,8,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#,%% Line 528
								  FSz,%% Line 528
								      Ack,%% Line 528
									  No,%% Line 528
									     Bad> when 'true' ->
	      let <_cor5> =
		  %% Line 529
		  #{#<Size>(4,8,'integer',['unsigned'|['big']])}#
	      in  let <MD5> =
		      %% Line 529
		      call 'erlang':'md5'
			  (_cor5)
		  in  %% Line 530
		      case Tail of
			%% Line 531
			<#{#<_cor28>(16,8,'binary',['unsigned'|['big']]),
			   #<BinTerm>(Size,8,'binary',['unsigned'|['big']]),
			   #<Tail2>('all',8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor28,
				   MD5) ->
			    let <_cor7> =
				catch
				    %% Line 532
				    call 'erlang':'binary_to_term'
					(BinTerm)
			    in  %% Line 532
				case _cor7 of
				  %% Line 533
				  <{'EXIT',_cor29}> when 'true' ->
				      let <_cor8> =
					  %% Line 534
					  call 'erlang':'+'
					      (Bad, Size)
				      in  %% Line 534
					  apply 'scan_f'/5
					      (Tail2, FSz, Ack, No, _cor8)
				  %% Line 535
				  <_X_Term> when 'true' ->
				      let <_cor9> =
					  %% Line 536
					  call 'erlang':'+'
					      (No, 1)
				      in  %% Line 536
					  apply 'scan_f'/5
					      (Tail2, FSz, [BinTerm|Ack], _cor9, Bad)
				end
			%% Line 538
			<#{#<_cor30>(16,8,'binary',['unsigned'|['big']]),
			   #<_cor31>('all',8,'binary',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor30,
				   MD5) ->
			    let <_cor11> =
				%% Line 539
				call 'erlang':'byte_size'
				    (Tail)
			    in  let <_cor12> =
				    %% Line 539
				    call 'erlang':'-'
					(Size, _cor11)
				in  let <_cor13> =
					%% Line 539
					call 'erlang':'+'
					    (_cor12, 16)
				    in  %% Line 539
					{B,_cor13,Ack,No,Bad}
			%% Line 540
			<_cor32>
			    when try
				  let <_cor14> =
				      call 'erlang':'byte_size'
					  (Tail)
				  in  call 'erlang':'<'
					  (_cor14, 16)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor15> =
				%% Line 541
				call 'erlang':'byte_size'
				    (Tail)
			    in  let <_cor16> =
				    %% Line 541
				    call 'erlang':'-'
					(Size, _cor15)
				in  let <_cor17> =
					%% Line 541
					call 'erlang':'+'
					    (_cor16, 16)
				    in  %% Line 541
					{B,_cor17,Ack,No,Bad}
			%% Line 542
			<_cor33> when 'true' ->
			    %% Line 543
			    case ( B
				   -| ['reuse_for_context'] ) of
			      <#{#<_cor34>(8,1,'integer',['unsigned'|['big']]),
				 #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_cor19> =
				      %% Line 544
				      call 'erlang':'+'
					  (Bad, 1)
				  in  %% Line 544
				      apply 'scan_f'/5
					  (B2, FSz, Ack, No, _cor19)
			      ( <_cor18> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor18)
					primop 'match_fail'
					    ({'badmatch',_cor18})
				-| ['compiler_generated'] )
			    end
		      end
	  %% Line 546
	  <B = #{#<Size>(4,8,'integer',['unsigned'|['big']]),
		 #<203500599>(4,8,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#,%% Line 547
								  FSz,%% Line 547
								      Ack,%% Line 547
									  No,%% Line 547
									     Bad>
	      when %% Line 547
		call 'erlang':'=<'
		    (Size,
		     FSz) ->
	      %% Line 558
	      ( case ( Tail
		       -| ['reuse_for_context'] ) of
		  %% Line 559
		  ( <( #{#<( BinTerm
			     -| ['compiler_generated'] )>(Size,( 8
								 -| ['compiler_generated'] ),( 'binary'
											       -| ['compiler_generated'] ),( ['unsigned'|['big']]
															     -| ['compiler_generated'] )),
			 #<( Tail2
			     -| ['compiler_generated'] )>(( 'all'
							    -| ['compiler_generated'] ),( 8
											  -| ['compiler_generated'] ),( 'binary'
															-| ['compiler_generated'] ),( ['unsigned'|['big']]
																		      -| ['compiler_generated'] ))}#
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			( let <_cor7> =
			      ( catch
				    %% Line 560
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'binary_to_term'
									   -| ['compiler_generated'] )
					  (( BinTerm
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			  in  %% Line 560
			      ( case ( _cor7
				       -| ['compiler_generated'] ) of
				  %% Line 561
				  ( <( {( 'EXIT'
					  -| ['compiler_generated'] ),( _cor22
									-| ['compiler_generated'] )}
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					%% Line 562
					( case ( B
						 -| ['reuse_for_context'] ) of
					    ( <( #{#<( _cor23
						       -| ['compiler_generated'] )>(( 8
										      -| ['compiler_generated'] ),( 1
														    -| ['compiler_generated'] ),( 'integer'
																		  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						-| ['compiler_generated'] )),
						   #<( B2
						       -| ['compiler_generated'] )>(( 'all'
										      -| ['compiler_generated'] ),( 8
														    -| ['compiler_generated'] ),( 'binary'
																		  -| ['compiler_generated'] ),( ['unsigned'|['big']]
																						-| ['compiler_generated'] ))}#
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  ( let <_cor9> =
							%% Line 563
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( '+'
											       -| ['compiler_generated'] )
							      (Bad, ( 1
								      -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    in  %% Line 563
							( apply ( 'scan_f'/5
								  -| ['compiler_generated'] )
							      (( B2
								 -| ['compiler_generated'] ), FSz, Ack, No, ( _cor9
													      -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <( _cor8
						 -| ['compiler_generated'] )> when ( 'true'
										     -| ['compiler_generated'] ) ->
						  do  primop 'bs_context_to_binary'
							  (_cor8)
						      ( primop ( 'match_fail'
								 -| ['compiler_generated'] )
							    (( {( 'badmatch'
								  -| ['compiler_generated'] ),( _cor8
												-| ['compiler_generated'] )}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  %% Line 564
				  ( <( _X_Term
				       -| ['compiler_generated'] )> when ( 'true'
									   -| ['compiler_generated'] ) ->
					( let <_cor10> =
					      %% Line 565
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( '+'
										     -| ['compiler_generated'] )
						    (No, ( 1
							   -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  in  %% Line 565
					      ( apply ( 'scan_f'/5
							-| ['compiler_generated'] )
						    (( Tail2
						       -| ['compiler_generated'] ), FSz, ( [( BinTerm
											      -| ['compiler_generated'] )|Ack]
											   -| ['compiler_generated'] ), ( _cor10
															  -| ['compiler_generated'] ), Bad)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  %% Line 567
		  ( <( _cor24
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			do  primop 'bs_context_to_binary'
				(Tail)
			    ( let <_cor12> =
				  %% Line 568
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'byte_size'
									 -| ['compiler_generated'] )
					(Tail)
				    -| ['compiler_generated'] )
			      in  ( let <_cor13> =
					%% Line 568
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( '-'
									       -| ['compiler_generated'] )
					      (Size, ( _cor12
						       -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    in  %% Line 568
					( {B,( _cor13
					       -| ['compiler_generated'] ),Ack,No,Bad}
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 551
	  <B = #{#<_cor35>(8,8,'integer',['unsigned'|['big']]),
		 #<_cor36>('all',8,'binary',['unsigned'|['big']])}#,FSz,Ack,No,Bad> when 'true' ->
	      %% Line 552
	      case ( B
		     -| ['reuse_for_context'] ) of
		<#{#<_cor37>(8,1,'integer',['unsigned'|['big']]),
		   #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor22> =
			%% Line 553
			call 'erlang':'+'
			    (Bad, 1)
		    in  %% Line 553
			apply 'scan_f'/5
			    (B2, FSz, Ack, No, _cor22)
		( <_cor21> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor21)
			  primop 'match_fail'
			      ({'badmatch',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 554
	  <B,_X_FSz,Ack,No,Bad> when 'true' ->
	      %% Line 555
	      {B,65536,Ack,No,Bad}
	end
'scan_f2'/7 =
    %% Line 557
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 558
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  %% Line 559
	  <#{#<BinTerm>(_cor1,8,'binary',['unsigned'|['big']]),
	     #<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 560
		      call 'erlang':'binary_to_term'
			  (BinTerm)
	      in  %% Line 560
		  case _cor7 of
		    %% Line 561
		    <{'EXIT',_cor22}> when 'true' ->
			%% Line 562
			case ( _cor6
			       -| ['reuse_for_context'] ) of
			  <#{#<_cor23>(8,1,'integer',['unsigned'|['big']]),
			     #<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <_cor9> =
				  %% Line 563
				  call 'erlang':'+'
				      (_cor2, 1)
			      in  %% Line 563
				  apply 'scan_f'/5
				      (B2, _cor5, _cor4, _cor3, _cor9)
			  ( <_cor8> when 'true' ->
				do  primop 'bs_context_to_binary'
					(_cor8)
				    primop 'match_fail'
					({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		    %% Line 564
		    <_X_Term> when 'true' ->
			let <_cor10> =
			    %% Line 565
			    call 'erlang':'+'
				(_cor3, 1)
			in  %% Line 565
			    apply 'scan_f'/5
				(Tail2, _cor5, [BinTerm|_cor4], _cor10, _cor2)
		  end
	  %% Line 567
	  <_cor24> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (_cor0)
		  let <_cor12> =
		      %% Line 568
		      call 'erlang':'byte_size'
			  (_cor0)
		  in  let <_cor13> =
			  %% Line 568
			  call 'erlang':'-'
			      (_cor1, _cor12)
		      in  %% Line 568
			  {_cor6,_cor13,_cor4,_cor3,_cor2}
	end
'done_scan'/6 =
    %% Line 571
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 572
	    ( call 'file':'close'
		  (_cor5)
	      -| ['result_not_wanted'] )
	in  let <_cor7> =
		catch
		    %% Line 573
		    apply 'fclose'/2
			(_cor4, _cor3)
	    in  %% Line 573
		case _cor7 of
		  %% Line 574
		  <'ok'> when 'true' ->
		      %% Line 575
		      case call 'file':'rename'
			       (_cor3, _cor2) of
			%% Line 576
			<'ok'> when 'true' ->
			    %% Line 577
			    case apply 'open_update'/1
				     (_cor2) of
			      %% Line 578
			      <{'ok',New}> when 'true' ->
				  %% Line 579
				  case apply 'position_close2'/3
					   (New, _cor2, 'eof') of
				    <{'ok',P}> when 'true' ->
					let <FdC> =
					    %% Line 580
					    {'cache',New,0,[]}
					in  %% Line 581
					    {'repaired',FdC,_cor1,_cor0,P}
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 582
			      <Error> when 'true' ->
				  %% Line 583
				  apply 'file_error'/2
				      (_cor2, Error)
			    end
			%% Line 585
			<Error> when 'true' ->
			    let <_X_> =
				%% Line 586
				( call 'file':'delete'
				      (_cor3)
				  -| ['result_not_wanted'] )
			    in  %% Line 587
				apply 'file_error'/2
				    (_cor2, Error)
		      end
		  %% Line 589
		  <Error> when 'true' ->
		      let <_X_> =
			  %% Line 590
			  ( call 'file':'delete'
				(_cor3)
			    -| ['result_not_wanted'] )
		      in  %% Line 591
			  call 'erlang':'throw'
			      (Error)
		end
'repair_err'/5 =
    %% Line 596
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 597
	    ( call 'file':'close'
		  (_cor4)
	      -| ['result_not_wanted'] )
	in  do  catch
		    %% Line 598
		    apply 'fclose'/2
			(_cor3, _cor2)
		let <_X_> =
		    %% Line 600
		    ( call 'file':'delete'
			  (_cor2)
		      -| ['result_not_wanted'] )
		in  %% Line 601
		    apply 'file_error'/2
			(_cor1, _cor0)
'is_head'/1 =
    %% Line 605
    fun (_cor0) ->
	case _cor0 of
	  <#{#<M>(4,8,'binary',['unsigned'|['big']]),
	     #<S>(4,8,'binary',['unsigned'|['big']])}#>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(#{#<1>(8,1,'integer',['unsigned'|['big']]),
			   #<2>(8,1,'integer',['unsigned'|['big']]),
			   #<3>(8,1,'integer',['unsigned'|['big']]),
			   #<4>(8,1,'integer',['unsigned'|['big']])}#, M)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (#{#<99>(8,1,'integer',['unsigned'|['big']]),
			       #<88>(8,1,'integer',['unsigned'|['big']]),
			       #<77>(8,1,'integer',['unsigned'|['big']]),
			       #<11>(8,1,'integer',['unsigned'|['big']])}#, S)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 606
	      'yes'
	  %% Line 607
	  <#{#<M>(4,8,'binary',['unsigned'|['big']]),
	     #<S>(4,8,'binary',['unsigned'|['big']])}#>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(#{#<1>(8,1,'integer',['unsigned'|['big']]),
			   #<2>(8,1,'integer',['unsigned'|['big']]),
			   #<3>(8,1,'integer',['unsigned'|['big']]),
			   #<4>(8,1,'integer',['unsigned'|['big']])}#, M)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (#{#<6>(8,1,'integer',['unsigned'|['big']]),
			       #<7>(8,1,'integer',['unsigned'|['big']]),
			       #<8>(8,1,'integer',['unsigned'|['big']]),
			       #<9>(8,1,'integer',['unsigned'|['big']])}#, S)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 608
	      'yes_not_closed'
	  %% Line 609
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 610
	      'no'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'is_head',1}}] )
	    -| ['compiler_generated'] )
	end
'mf_int_open'/7 =
    %% Line 644
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 645
	case apply 'read_index_file'/3
		 (_cor3, _cor6, _cor4) of
	  <{First,Sz,TotSz,NFiles}> when 'true' ->
	      do  %% Line 646
		  apply 'write_size_file'/5
		      (_cor2, _cor6, _cor5, _cor4, _cor0)
		  let <_cor8> =
		      %% Line 647
		      case <> of
			%% Line 648
			<>
			    when call 'erlang':'>'
				  (NFiles,
				   _cor4) ->
			    %% Line 649
			    {_cor4,NFiles}
			%% Line 650
			<> when 'true' ->
			    _cor4
		      end
		  in  %% Line 653
		      case apply 'int_file_open'/7
			       (_cor6, First, 0, 0, _cor1, _cor3, _cor2) of
			%% Line 654
			<{'ok',FdC,FileName,Lost,{NoItems,NoBytes},FSz}> when 'true' ->
			    let <_cor10> =
				%% Line 658
				call 'erlang':'+'
				    (Sz, NoItems)
			    in  let <CurCnt> =
				    %% Line 658
				    call 'erlang':'-'
					(_cor10, Lost)
				in  let <_cor13> =
					%% Line 662
					call 'erlang':'-'
					    (Sz)
				    in  let <_cor12> =
					    %% Line 664
					    call 'erlang':'+'
						(TotSz, CurCnt)
					in  %% Line 659
					    {'ok',{'handle',_cor6,_cor5,_cor8,%% Line 662
									      FSz,%% Line 660
										  First,%% Line 660
											FdC,%% Line 661
											    FileName,%% Line 661
												     CurCnt,_cor13,%% Line 663
														   NoBytes,%% Line 663
															   0,%% Line 663
															     0},_cor12}
			%% Line 665
			<{'repaired',FdC,FileName,Rec,Bad,FSz}> when 'true' ->
			    let <_cor15> =
				%% Line 669
				call 'erlang':'-'
				    (Rec)
			    in  let <_cor14> =
				    %% Line 671
				    call 'erlang':'+'
					(TotSz, Rec)
				in  %% Line 666
				    {'repaired',%% Line 667
						{'handle',_cor6,_cor5,_cor8,%% Line 669
									    FSz,%% Line 668
										First,%% Line 668
										      FdC,FileName,%% Line 669
												   Rec,_cor15,%% Line 670
													      0,%% Line 670
														0,%% Line 670
														  0},%% Line 671
														     Rec,%% Line 671
															 Bad,_cor14}
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor16})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'mf_int_inc'/2 =
    %% Line 675
    fun (_cor1,_cor0) ->
	%% Line 678
	case _cor1 of
	  <{'handle',FName,_cor15,MaxF,_cor16,CurF,CurFdC,FileName,CurCnt,AccCnt,_cor17,NoFull,_cor18}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 679
		      apply 'wrap_int_log'/5
			  (FName, CurF, MaxF, CurCnt, _cor0)
	      in  %% Line 679
		  case _cor3 of
		    %% Line 680
		    <{NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}> when 'true' ->
			let <_rec2> =
			    %% Line 683
			    call 'erlang':'+'
				(AccCnt, CurCnt)
			in  let <_rec3> =
				%% Line 685
				call 'erlang':'+'
				    (NoFull, 1)
			    in  let <_cor8> =
				    %% Line 685
				    {'handle',FName,_cor15,NewMaxF,FirstPos,NewF,NewFdC,NewFileName,Nh,_rec2,FirstPos,_rec3,_cor18}
				in  let <_cor10> =
					catch
					    %% Line 686
					    apply 'close'/3
						(CurFdC, FileName, 'read_write')
				    in  %% Line 686
					case _cor10 of
					  %% Line 687
					  <'ok'> when 'true' ->
					      %% Line 688
					      {'ok',_cor8,Lost}
					  %% Line 689
					  <Error> when 'true' ->
					      %% Line 690
					      {'error',Error,_cor8}
					end
		    %% Line 692
		    <Error> when 'true' ->
			%% Line 693
			{'error',Error,_cor1}
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'mf_int_log'/3 =
    %% Line 700
    fun (_cor2,_cor1,_cor0) ->
	%% Line 701
	apply 'mf_int_log'/5
	    (_cor2, _cor1, _cor0, 0, [])
'mf_int_log'/5 =
    %% Line 703
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Handle,[],_X_Head,No,[]> when 'true' ->
	      %% Line 704
	      {'ok',Handle,No}
	  %% Line 705
	  <Handle,[],_X_Head,No,Wraps0> when 'true' ->
	      let <Wraps> =
		  %% Line 706
		  call 'lists':'reverse'
		      (Wraps0)
	      in  let <_cor6> =
		      %% Line 707
		      call 'lists':'sum'
			  (Wraps)
		  in  %% Line 707
		      {'ok',Handle,No,_cor6,Wraps}
	  %% Line 708
	  <Handle,Bins,Head,No0,Wraps> when 'true' ->
	      %% Line 710
	      case Handle of
		<{'handle',_cor46,MaxB,_cor47,CurB,_cor48,CurFdC,FileName,CurCnt,_cor49,FirstPos0,_cor50,_cor51}> when 'true' ->
		    %% Line 711
		    case %% Line 712
			 apply 'int_split_bins'/4
			     (CurB, MaxB, FirstPos0, Bins) of
		      <{FirstBins,LastBins,NoBytes,N}> when 'true' ->
			  %% Line 713
			  case FirstBins of
			    %% Line 714
			    <[]> when 'true' ->
				let <_cor10> =
				    catch
					%% Line 717
					apply 'wrap_int_log'/5
					    (_cor46, _cor48, _cor47, CurCnt, Head)
				in  %% Line 717
				    case _cor10 of
				      %% Line 718
				      <{NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}> when 'true' ->
					  let <_rec17> =
					      %% Line 722
					      call 'erlang':'+'
						  (_cor49, CurCnt)
					  in  let <_rec18> =
						  %% Line 726
						  call 'erlang':'+'
						      (_cor50, 1)
					      in  let <_cor15> =
						      %% Line 726
						      {'handle',_cor46,MaxB,NewMaxF,FirstPos,NewF,NewFdC,NewFileName,Nh,_rec17,FirstPos,_rec18,_cor51}
						  in  let <_cor17> =
							  catch
							      %% Line 727
							      apply 'close'/3
								  (CurFdC, FileName, 'read_write')
						      in  %% Line 727
							  case _cor17 of
							    %% Line 728
							    <'ok'> when 'true' ->
								let <_cor18> =
								    %% Line 729
								    call 'erlang':'+'
									(No0, Nh)
								in  %% Line 729
								    apply 'mf_int_log'/5
									(_cor15, Bins, Head, _cor18, %% Line 730
												     [Lost|Wraps])
							    %% Line 731
							    <Error> when 'true' ->
								let <_cor19> =
								    %% Line 732
								    call 'lists':'sum'
									(Wraps)
								in  let <Lost1> =
									%% Line 732
									call 'erlang':'+'
									    (Lost, _cor19)
								    in  let <_cor21> =
									    %% Line 733
									    call 'erlang':'+'
										(No0, Nh)
									in  %% Line 733
									    {'error',Error,_cor15,_cor21,Lost1}
							  end
				      %% Line 735
				      <Error> when 'true' ->
					  let <_cor23> =
					      %% Line 736
					      call 'lists':'sum'
						  (Wraps)
					  in  %% Line 736
					      {'error',Error,Handle,No0,_cor23}
				    end
			    %% Line 738
			    <_cor60> when 'true' ->
				%% Line 739
				case apply 'fwrite'/4
					 (CurFdC, FileName, FirstBins, NoBytes) of
				  %% Line 740
				  <{'ok',NewCurFdC}> when 'true' ->
				      let <_rec32> =
					  %% Line 742
					  call 'erlang':'+'
					      (CurB, NoBytes)
				      in  let <_rec33> =
					      %% Line 743
					      call 'erlang':'+'
						  (CurCnt, N)
					  in  let <_cor28> =
						  %% Line 743
						  call 'erlang':'setelement'
						      (9, Handle, _rec33)
					      in  let <_cor29> =
						      %% Line 741
						      call 'erlang':'setelement'
							  (7, _cor28, NewCurFdC)
						  in  let <_cor31> =
							  %% Line 742
							  call 'erlang':'setelement'
							      (5, _cor29, _rec32)
						      in  let <_cor33> =
							      %% Line 744
							      call 'erlang':'+'
								  (No0, N)
							  in  %% Line 744
							      apply 'mf_int_log'/5
								  (_cor31, LastBins, Head, _cor33, Wraps)
				  %% Line 745
				  <{Error,NewCurFdC}> when 'true' ->
				      let <_cor36> =
					  %% Line 746
					  call 'erlang':'setelement'
					      (7, Handle, NewCurFdC)
				      in  let <_cor38> =
					      %% Line 747
					      call 'lists':'sum'
						  (Wraps)
					  in  %% Line 747
					      {'error',Error,_cor36,No0,_cor38}
				  ( <_cor39> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor39})
				    -| ['compiler_generated'] )
				end
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'wrap_int_log'/5 =
    %% Line 751
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 752
	case apply 'inc_wrap'/3
		 (_cor4, _cor3, _cor2) of
	  <{NewF,NewMaxF}> when 'true' ->
	      %% Line 753
	      case %% Line 754
		   apply 'int_file_open'/5
		       (_cor4, NewF, _cor3, _cor1, _cor0) of
		<{'ok',NewFdC,NewFileName,Lost,{Nh,FirstPos},_X_FileSize}> when 'true' ->
		    %% Line 755
		    {NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'mf_int_chunk'/4 =
    %% Line 758
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Handle,0,Bin,N> when 'true' ->
	      let <FirstF> =
		  %% Line 759
		  apply 'find_first_file'/1
		      (Handle)
	      in  %% Line 760
		  apply 'mf_int_chunk'/4
		      (Handle, {FirstF,0}, Bin, N)
	  %% Line 761
	  <Handle = {'handle',_cor30,_cor31,_cor32,_cor33,FileNo,FdC,FileName,_cor34,_cor35,_cor36,_cor37,_cor38},%% Line 762
														  {_cor39,Pos},%% Line 762
															       Bin,%% Line 762
																   N>
	      when call 'erlang':'=:='
		    (_cor39,
		     %% Line 762
		     FileNo) ->
	      %% Line 763
	      case apply 'chunk'/5
		       (FdC, FileName, Pos, Bin, N) of
		<{NewFdC,Reply}> when 'true' ->
		    let <_cor9> =
			%% Line 764
			call 'erlang':'setelement'
			    (7, Handle, NewFdC)
		    in  let <_cor6> =
			    %% Line 764
			    apply 'conv'/2
				(Reply, FileNo)
			in  %% Line 764
			    {_cor9,_cor6}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 765
	  <Handle,{FileNo,Pos},Bin,N> when 'true' ->
	      %% Line 766
	      ( case Handle of
		  ( <( {'handle',_rec37,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
		       -| ['compiler_generated'] )> when 'true' ->
			let <FName> =
			    apply 'add_ext'/2
				(_rec37, FileNo)
			in  let <NFileNo> =
				%% Line 767
				apply 'inc'/2
				    (FileNo, _cor54)
			    in  let <_cor16> =
				    catch
					%% Line 768
					apply 'int_open'/4
					    (FName, 'true', 'read_only', 'any')
				in  %% Line 768
				    case _cor16 of
				      %% Line 769
				      <{'error',_X_Reason}> when 'true' ->
					  do  %% Line 770
					      call 'error_logger':'info_msg'
						  ([100|[105|[115|[107|[95|[108|[111|[103|[58|[32|[99|[104|[117|[110|[107|[32|[101|[114|[114|[111|[114|[46|[32|[70|[105|[108|[101|[32|[126|[116|[112|[32|[109|[105|[115|[115|[105|[110|[103|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 771
																																				   [FName|[]])
					      %% Line 772
					      apply 'mf_int_chunk'/4
						  (Handle, {NFileNo,0}, [], N)
				      %% Line 773
				      <{'ok',{_X_Alloc,FdC,_X_HeadSize,_X_FileSize}}> when 'true' ->
					  %% Line 774
					  case apply 'chunk'/5
						   (FdC, FName, Pos, Bin, N) of
					    %% Line 775
					    <{NewFdC,'eof'}> when 'true' ->
						%% Line 776
						( case NewFdC of
						    ( <( {'cache',_rec39,_cor77,_cor78}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_X_> =
							      ( call 'file':'close'
								    (_rec39)
								-| ['result_not_wanted'] )
							  in  %% Line 777
							      apply 'mf_int_chunk'/4
								  (Handle, {NFileNo,0}, [], N)
						      -| ['compiler_generated'] )
						    ( <_cor79> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','cache'}
								   -| ['compiler_generated'] ))
							    -| ['result_not_wanted','compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    %% Line 778
					    <{NewFdC,Other}> when 'true' ->
						%% Line 779
						( case NewFdC of
						    ( <( {'cache',_rec40,_cor80,_cor81}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_X_> =
							      ( call 'file':'close'
								    (_rec40)
								-| ['result_not_wanted'] )
							  in  let <_cor23> =
								  %% Line 780
								  apply 'conv'/2
								      (Other, FileNo)
							      in  %% Line 780
								  {Handle,_cor23}
						      -| ['compiler_generated'] )
						    ( <_cor82> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','cache'}
								   -| ['compiler_generated'] ))
							    -| ['result_not_wanted','compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_cor24> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor24})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor25> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor25})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor64> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handle'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'mf_int_chunk',4}}] )
	    -| ['compiler_generated'] )
	end
'mf_int_chunk_read_only'/4 =
    %% Line 786
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Handle,0,Bin,N> when 'true' ->
	      let <FirstF> =
		  %% Line 787
		  apply 'find_first_file'/1
		      (Handle)
	      in  %% Line 788
		  apply 'mf_int_chunk_read_only'/4
		      (Handle, {FirstF,0}, Bin, N)
	  %% Line 789
	  <Handle = {'handle',_cor30,_cor31,_cor32,_cor33,FileNo,FdC,FileName,_cor34,_cor35,_cor36,_cor37,_cor38},%% Line 790
														  {_cor39,Pos},%% Line 790
															       Bin,%% Line 790
																   N>
	      when call 'erlang':'=:='
		    (_cor39,
		     %% Line 790
		     FileNo) ->
	      %% Line 791
	      case apply 'do_chunk_read_only'/5
		       (FdC, FileName, Pos, Bin, N) of
		<{NewFdC,Reply}> when 'true' ->
		    let <_cor9> =
			%% Line 792
			call 'erlang':'setelement'
			    (7, Handle, NewFdC)
		    in  let <_cor6> =
			    %% Line 792
			    apply 'conv'/2
				(Reply, FileNo)
			in  %% Line 792
			    {_cor9,_cor6}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 793
	  <Handle,{FileNo,Pos},Bin,N> when 'true' ->
	      %% Line 794
	      ( case Handle of
		  ( <( {'handle',_rec42,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
		       -| ['compiler_generated'] )> when 'true' ->
			let <FName> =
			    apply 'add_ext'/2
				(_rec42, FileNo)
			in  let <NFileNo> =
				%% Line 795
				apply 'inc'/2
				    (FileNo, _cor54)
			    in  let <_cor16> =
				    catch
					%% Line 796
					apply 'int_open'/4
					    (FName, 'true', 'read_only', 'any')
				in  %% Line 796
				    case _cor16 of
				      %% Line 797
				      <{'error',_X_Reason}> when 'true' ->
					  do  %% Line 798
					      call 'error_logger':'info_msg'
						  ([100|[105|[115|[107|[95|[108|[111|[103|[58|[32|[99|[104|[117|[110|[107|[32|[101|[114|[114|[111|[114|[46|[32|[70|[105|[108|[101|[32|[126|[116|[112|[32|[109|[105|[115|[115|[105|[110|[103|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 799
																																				   [FName|[]])
					      %% Line 800
					      apply 'mf_int_chunk_read_only'/4
						  (Handle, {NFileNo,0}, [], N)
				      %% Line 801
				      <{'ok',{_X_Alloc,FdC,_X_HeadSize,_X_FileSize}}> when 'true' ->
					  %% Line 802
					  case apply 'do_chunk_read_only'/5
						   (FdC, FName, Pos, Bin, N) of
					    %% Line 803
					    <{NewFdC,'eof'}> when 'true' ->
						%% Line 804
						( case NewFdC of
						    ( <( {'cache',_rec44,_cor77,_cor78}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_X_> =
							      ( call 'file':'close'
								    (_rec44)
								-| ['result_not_wanted'] )
							  in  %% Line 805
							      apply 'mf_int_chunk_read_only'/4
								  (Handle, {NFileNo,0}, [], N)
						      -| ['compiler_generated'] )
						    ( <_cor79> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','cache'}
								   -| ['compiler_generated'] ))
							    -| ['result_not_wanted','compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    %% Line 806
					    <{NewFdC,Other}> when 'true' ->
						%% Line 807
						( case NewFdC of
						    ( <( {'cache',_rec45,_cor80,_cor81}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_X_> =
							      ( call 'file':'close'
								    (_rec45)
								-| ['result_not_wanted'] )
							  in  let <_cor23> =
								  %% Line 808
								  apply 'conv'/2
								      (Other, FileNo)
							      in  %% Line 808
								  {Handle,_cor23}
						      -| ['compiler_generated'] )
						    ( <_cor82> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','cache'}
								   -| ['compiler_generated'] ))
							    -| ['result_not_wanted','compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_cor24> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor24})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor25> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor25})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor64> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handle'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'mf_int_chunk_read_only',4}}] )
	    -| ['compiler_generated'] )
	end
'mf_int_chunk_step'/3 =
    %% Line 813
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle,0,Step> when 'true' ->
	      let <FirstF> =
		  %% Line 814
		  apply 'find_first_file'/1
		      (Handle)
	      in  %% Line 815
		  apply 'mf_int_chunk_step'/3
		      (Handle, {FirstF,0}, Step)
	  %% Line 816
	  <Handle,{FileNo,_X_Pos},Step> when 'true' ->
	      %% Line 817
	      ( case Handle of
		  ( <( {'handle',_cor15,_cor16,_rec46,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		       -| ['compiler_generated'] )> when 'true' ->
			let <NFileNo> =
			    apply 'inc'/3
				(FileNo, _rec46, Step)
			in  let <FileName> =
				%% Line 818
				apply 'add_ext'/2
				    (_cor15, NFileNo)
			    in  %% Line 819
				case call 'file':'read_file_info'
					 (FileName) of
				  %% Line 820
				  <{'ok',_X_FileInfo}> when 'true' ->
				      let <_cor10> =
					  call 'erlang':'self'
					      ()
				      in  %% Line 821
					  {'ok',{'continuation',_cor10,{NFileNo,0},[]}}
				  %% Line 822
				  <_X_Error> when 'true' ->
				      %% Line 823
				      {'error','end_of_log'}
				end
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handle'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'mf_int_chunk_step',3}}] )
	    -| ['compiler_generated'] )
	end
'mf_write_cache'/1 =
    %% Line 827
    fun (_cor0) ->
	case _cor0 of
	  <Handle = {'handle',FName,_cor7,_cor8,_cor9,_cor10,FdC,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      do  %% Line 828
		  call 'erlang':'erase'
		      ('write_cache_timer_is_running')
		  %% Line 829
		  case FdC of
		    <{'cache',Fd,_cor17,C}> when 'true' ->
			%% Line 830
			case apply 'write_cache'/3
				 (Fd, FName, C) of
			  <{Reply,NewFdC}> when 'true' ->
			      let <_cor5> =
				  %% Line 831
				  call 'erlang':'setelement'
				      (7, Handle, NewFdC)
			      in  %% Line 831
				  {Reply,_cor5}
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'mf_write_cache',1}}] )
	    -| ['compiler_generated'] )
	end
'mf_sync'/1 =
    %% Line 834
    fun (_cor0) ->
	case _cor0 of
	  <Handle = {'handle',FName,_cor6,_cor7,_cor8,_cor9,FdC,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 835
	      case apply 'fsync'/2
		       (FdC, FName) of
		<{Reply,NewFdC}> when 'true' ->
		    let <_cor4> =
			%% Line 836
			call 'erlang':'setelement'
			    (7, Handle, NewFdC)
		    in  %% Line 836
			{Reply,_cor4}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'mf_sync',1}}] )
	    -| ['compiler_generated'] )
	end
'mf_int_close'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'handle',FName,_cor4,_cor5,_cor6,CurF,%% Line 840
						  CurFdC,FileName,%% Line 840
								  CurCnt,_cor7,_cor8,_cor9,_cor10},%% Line 840
												   Mode> when 'true' ->
	      do  %% Line 841
		  apply 'close'/3
		      (CurFdC, FileName, Mode)
		  do  %% Line 842
		      apply 'write_index_file'/5
			  (Mode, FName, CurF, CurF, CurCnt)
		      %% Line 843
		      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mf_int_close',2}}] )
	    -| ['compiler_generated'] )
	end
'mf_ext_open'/7 =
    %% Line 846
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 847
	case apply 'read_index_file'/3
		 (_cor3, _cor6, _cor4) of
	  <{First,Sz,TotSz,NFiles}> when 'true' ->
	      do  %% Line 848
		  apply 'write_size_file'/5
		      (_cor2, _cor6, _cor5, _cor4, _cor0)
		  let <_cor8> =
		      %% Line 849
		      case <> of
			%% Line 850
			<>
			    when call 'erlang':'>'
				  (NFiles,
				   _cor4) ->
			    %% Line 851
			    {_cor4,NFiles}
			%% Line 852
			<> when 'true' ->
			    _cor4
		      end
		  in  %% Line 855
		      case %% Line 856
			   apply 'ext_file_open'/7
			       (_cor6, First, 0, 0, _cor1, _cor3, _cor2) of
			<{'ok',FdC,FileName,Lost,{NoItems,NoBytes},CurB}> when 'true' ->
			    let <_cor11> =
				%% Line 857
				call 'erlang':'+'
				    (Sz, NoItems)
			    in  let <CurCnt> =
				    %% Line 857
				    call 'erlang':'-'
					(_cor11, Lost)
				in  let <_cor14> =
					%% Line 859
					call 'erlang':'-'
					    (Sz)
				    in  let <_cor13> =
					    %% Line 862
					    call 'erlang':'+'
						(TotSz, CurCnt)
					in  %% Line 858
					    {'ok',{'handle',_cor6,_cor5,_cor8,%% Line 861
									      CurB,%% Line 860
										   First,%% Line 860
											 FdC,FileName,%% Line 859
												      CurCnt,_cor14,%% Line 860
														    NoBytes,%% Line 861
															    0,%% Line 861
															      0},_cor13}
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'mf_ext_inc'/2 =
    %% Line 868
    fun (_cor1,_cor0) ->
	%% Line 871
	case _cor1 of
	  <{'handle',FName,_cor15,MaxF,_cor16,CurF,CurFdC,FileName,CurCnt,AccCnt,_cor17,NoFull,_cor18}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 872
		      apply 'wrap_ext_log'/5
			  (FName, CurF, MaxF, CurCnt, _cor0)
	      in  %% Line 872
		  case _cor3 of
		    %% Line 873
		    <{NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}> when 'true' ->
			let <_rec50> =
			    %% Line 876
			    call 'erlang':'+'
				(AccCnt, CurCnt)
			in  let <_rec51> =
				%% Line 878
				call 'erlang':'+'
				    (NoFull, 1)
			    in  let <_cor8> =
				    %% Line 878
				    {'handle',FName,_cor15,NewMaxF,FirstPos,NewF,NewFdC,NewFileName,Nh,_rec50,FirstPos,_rec51,_cor18}
				in  let <_cor10> =
					catch
					    %% Line 879
					    apply 'fclose'/2
						(CurFdC, FileName)
				    in  %% Line 879
					case _cor10 of
					  %% Line 880
					  <'ok'> when 'true' ->
					      %% Line 881
					      {'ok',_cor8,Lost}
					  %% Line 882
					  <Error> when 'true' ->
					      %% Line 883
					      {'error',Error,_cor8}
					end
		    %% Line 885
		    <Error> when 'true' ->
			%% Line 886
			{'error',Error,_cor1}
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'mf_ext_log'/3 =
    %% Line 894
    fun (_cor2,_cor1,_cor0) ->
	%% Line 895
	apply 'mf_ext_log'/5
	    (_cor2, _cor1, _cor0, 0, [])
'mf_ext_log'/5 =
    %% Line 897
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Handle,[],_X_Head,No,[]> when 'true' ->
	      %% Line 898
	      {'ok',Handle,No}
	  %% Line 899
	  <Handle,[],_X_Head,No,Wraps0> when 'true' ->
	      let <Wraps> =
		  %% Line 900
		  call 'lists':'reverse'
		      (Wraps0)
	      in  let <_cor6> =
		      %% Line 901
		      call 'lists':'sum'
			  (Wraps)
		  in  %% Line 901
		      {'ok',Handle,No,_cor6,Wraps}
	  %% Line 902
	  <Handle,Bins,Head,No0,Wraps> when 'true' ->
	      %% Line 904
	      case Handle of
		<{'handle',_cor46,MaxB,_cor47,CurB,_cor48,CurFdC,FileName,CurCnt,_cor49,FirstPos0,_cor50,_cor51}> when 'true' ->
		    %% Line 905
		    case %% Line 906
			 apply 'ext_split_bins'/4
			     (CurB, MaxB, FirstPos0, Bins) of
		      <{FirstBins,LastBins,NoBytes,N}> when 'true' ->
			  %% Line 907
			  case FirstBins of
			    %% Line 908
			    <[]> when 'true' ->
				let <_cor10> =
				    catch
					%% Line 911
					apply 'wrap_ext_log'/5
					    (_cor46, _cor48, _cor47, CurCnt, Head)
				in  %% Line 911
				    case _cor10 of
				      %% Line 912
				      <{NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}> when 'true' ->
					  let <_rec65> =
					      %% Line 916
					      call 'erlang':'+'
						  (_cor49, CurCnt)
					  in  let <_rec66> =
						  %% Line 920
						  call 'erlang':'+'
						      (_cor50, 1)
					      in  let <_cor15> =
						      %% Line 920
						      {'handle',_cor46,MaxB,NewMaxF,FirstPos,NewF,NewFdC,NewFileName,Nh,_rec65,FirstPos,_rec66,_cor51}
						  in  let <_cor17> =
							  catch
							      %% Line 921
							      apply 'fclose'/2
								  (CurFdC, FileName)
						      in  %% Line 921
							  case _cor17 of
							    %% Line 922
							    <'ok'> when 'true' ->
								let <_cor18> =
								    %% Line 923
								    call 'erlang':'+'
									(No0, Nh)
								in  %% Line 923
								    apply 'mf_ext_log'/5
									(_cor15, Bins, Head, _cor18, %% Line 924
												     [Lost|Wraps])
							    %% Line 925
							    <Error> when 'true' ->
								let <_cor19> =
								    %% Line 926
								    call 'lists':'sum'
									(Wraps)
								in  let <Lost1> =
									%% Line 926
									call 'erlang':'+'
									    (Lost, _cor19)
								    in  let <_cor21> =
									    %% Line 927
									    call 'erlang':'+'
										(No0, Nh)
									in  %% Line 927
									    {'error',Error,_cor15,_cor21,Lost1}
							  end
				      %% Line 929
				      <Error> when 'true' ->
					  let <_cor23> =
					      %% Line 930
					      call 'lists':'sum'
						  (Wraps)
					  in  %% Line 930
					      {'error',Error,Handle,No0,_cor23}
				    end
			    %% Line 932
			    <_cor60> when 'true' ->
				%% Line 933
				case apply 'fwrite'/4
					 (CurFdC, FileName, FirstBins, NoBytes) of
				  %% Line 934
				  <{'ok',NewCurFdC}> when 'true' ->
				      let <_rec80> =
					  %% Line 936
					  call 'erlang':'+'
					      (CurB, NoBytes)
				      in  let <_rec81> =
					      %% Line 937
					      call 'erlang':'+'
						  (CurCnt, N)
					  in  let <_cor28> =
						  %% Line 937
						  call 'erlang':'setelement'
						      (9, Handle, _rec81)
					      in  let <_cor29> =
						      %% Line 935
						      call 'erlang':'setelement'
							  (7, _cor28, NewCurFdC)
						  in  let <_cor31> =
							  %% Line 936
							  call 'erlang':'setelement'
							      (5, _cor29, _rec80)
						      in  let <_cor33> =
							      %% Line 938
							      call 'erlang':'+'
								  (No0, N)
							  in  %% Line 938
							      apply 'mf_ext_log'/5
								  (_cor31, LastBins, Head, _cor33, Wraps)
				  %% Line 939
				  <{Error,NewCurFdC}> when 'true' ->
				      let <_cor36> =
					  %% Line 940
					  call 'erlang':'setelement'
					      (7, Handle, NewCurFdC)
				      in  let <_cor38> =
					      %% Line 941
					      call 'lists':'sum'
						  (Wraps)
					  in  %% Line 941
					      {'error',Error,_cor36,No0,_cor38}
				  ( <_cor39> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor39})
				    -| ['compiler_generated'] )
				end
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'wrap_ext_log'/5 =
    %% Line 945
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 946
	case apply 'inc_wrap'/3
		 (_cor4, _cor3, _cor2) of
	  <{NewF,NewMaxF}> when 'true' ->
	      %% Line 947
	      case %% Line 948
		   apply 'ext_file_open'/5
		       (_cor4, NewF, _cor3, _cor1, _cor0) of
		<{'ok',NewFdC,NewFileName,Lost,{Nh,FirstPos},_X_FileSize}> when 'true' ->
		    %% Line 949
		    {NewF,NewMaxF,NewFdC,NewFileName,Nh,FirstPos,Lost}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'mf_ext_close'/2 =
    %% Line 952
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'handle',FName,_cor6,_cor7,_cor8,CurF,%% Line 953
						  CurFdC,_cor9,%% Line 953
							       CurCnt,_cor10,_cor11,_cor12,_cor13},%% Line 953
												   Mode> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 954
		      apply 'fclose'/2
			  (CurFdC, FName)
	      in  do  %% Line 955
		      apply 'write_index_file'/5
			  (Mode, FName, CurF, CurF, CurCnt)
		      _cor2
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'mf_ext_close',2}}] )
	    -| ['compiler_generated'] )
	end
'change_size_wrap'/3 =
    %% Line 959
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle,{NewMaxB,NewMaxF},Version> when 'true' ->
	      %% Line 960
	      ( case Handle of
		  ( <( {'handle',_rec84,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 961
			case apply 'get_wrap_size'/1
				 (Handle) of
			  <{_X_MaxB,MaxF}> when 'true' ->
			      do  %% Line 962
				  apply 'write_size_file'/5
				      ('read_write', _rec84, NewMaxB, NewMaxF, Version)
				  %% Line 963
				  case <> of
				    %% Line 964
				    <>
					when call 'erlang':'>'
					      (NewMaxF,
					       MaxF) ->
					let <_cor7> =
					    %% Line 965
					    call 'erlang':'+'
						(MaxF, 1)
					in  do  %% Line 965
						apply 'remove_files'/3
						    (_rec84, _cor7, NewMaxF)
						let <_cor9> =
						    %% Line 966
						    call 'erlang':'setelement'
							(4, Handle, NewMaxF)
						in  let <_cor11> =
							%% Line 966
							call 'erlang':'setelement'
							    (3, _cor9, NewMaxB)
						    in  %% Line 966
							{'ok',_cor11}
				    %% Line 967
				    <>
					when call 'erlang':'<'
					      (NewMaxF,
					       MaxF) ->
					let <_rec86> = {%% Line 968
					     NewMaxF,%% Line 968
						     MaxF}
					in  let <_cor14> =
						%% Line 968
						call 'erlang':'setelement'
						    (4, Handle, _rec86)
					    in  let <_cor16> =
						    %% Line 968
						    call 'erlang':'setelement'
							(3, _cor14, NewMaxB)
						in  %% Line 968
						    {'ok',_cor16}
				    %% Line 969
				    <> when 'true' ->
					let <_cor18> =
					    %% Line 970
					    call 'erlang':'setelement'
						(4, Handle, NewMaxF)
					in  let <_cor20> =
						%% Line 970
						call 'erlang':'setelement'
						    (3, _cor18, NewMaxB)
					    in  %% Line 970
						{'ok',_cor20}
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor35> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','handle'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'change_size_wrap',3}}] )
	    -| ['compiler_generated'] )
	end
'int_file_open'/5 =
    %% Line 977
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 979
	apply 'int_file_open'/7
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'truncate', 'read_write')
'int_file_open'/7 =
    %% Line 984
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <N> =
	    %% Line 985
	    apply 'add_ext'/2
		(_cor6, _cor5)
	in  %% Line 986
	    case apply 'int_open'/4
		     (N, _cor1, _cor0, _cor2) of
	      %% Line 987
	      <{'ok',{_X_Alloc,FdC,HeadSize,FileSize}}> when 'true' ->
		  let <Lost> =
		      %% Line 988
		      apply 'write_index_file'/5
			  (_cor0, _cor6, _cor5, _cor4, _cor3)
		  in  %% Line 989
		      {'ok',FdC,N,Lost,HeadSize,FileSize}
	      %% Line 990
	      <{'repaired',FdC,Recovered,BadBytes,FileSize}> when 'true' ->
		  do  %% Line 991
		      apply 'write_index_file'/5
			  (_cor0, _cor6, _cor5, _cor4, _cor3)
		      %% Line 992
		      {'repaired',FdC,N,Recovered,BadBytes,FileSize}
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor9})
		-| ['compiler_generated'] )
	    end
'ext_file_open'/5 =
    %% Line 996
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 998
	apply 'ext_file_open'/7
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'truncate', 'read_write')
'ext_file_open'/7 =
    %% Line 1000
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FileName> =
	    %% Line 1001
	    apply 'add_ext'/2
		(_cor6, _cor5)
	in  %% Line 1002
	    case %% Line 1003
		 apply 'ext_open'/4
		     (FileName, _cor1, _cor0, _cor2) of
	      <{'ok',{_X_Alloc,FdC,HeadSize,FileSize}}> when 'true' ->
		  let <Lost> =
		      %% Line 1004
		      apply 'write_index_file'/5
			  (_cor0, _cor6, _cor5, _cor4, _cor3)
		  in  %% Line 1005
		      {'ok',FdC,FileName,Lost,HeadSize,FileSize}
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'read_index_file'/3 =
    %% Line 1027
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'truncate',FName,MaxF> when 'true' ->
	      do  %% Line 1028
		  apply 'remove_files'/3
		      (FName, 2, MaxF)
		  let <_cor3> =
		      %% Line 1029
		      apply 'add_ext'/2
			  (FName, [105|[100|[120]]])
		  in  do  %% Line 1029
			  ( call 'file':'delete'
				(_cor3)
			    -| ['result_not_wanted'] )
			  %% Line 1030
			  {1,0,0,0}
	  %% Line 1031
	  <_cor8,FName,_X_MaxF> when 'true' ->
	      %% Line 1032
	      apply 'read_index_file'/1
		  (FName)
	end
'read_index_file'/1 =
    %% Line 1038
    fun (_cor0) ->
	let <FileName> =
	    %% Line 1039
	    apply 'add_ext'/2
		(_cor0, [105|[100|[120]]])
	in  %% Line 1040
	    case apply 'open_read'/1
		     (FileName) of
	      %% Line 1041
	      <{'ok',Fd}> when 'true' ->
		  let <_cor9> =
		      %% Line 1042
		      case call 'file':'read'
			       (Fd, 65536) of
			%% Line 1043
			<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
				 #<0>(32,1,'integer',['unsigned'|['big']]),
				 #<Version>(8,1,'integer',['unsigned'|['big']]),
				 #<CurF>(32,1,'integer',['unsigned'|['big']]),
				 #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
			    when %% Line 1044
			      try
				  let <_cor2> =
				      call 'erlang':'=:='
					  (Version, 2)
				  in  let <_cor3> =
					  %% Line 1045
					  call 'erlang':'<'
					      (0, CurF)
				      in  let <_cor4> =
					      %% Line 1045
					      call 'erlang':'<'
						  (CurF, 65000)
					  in  let <_cor5> =
						  call 'erlang':'and'
						      (_cor3, _cor4)
					      in  call 'erlang':'and'
						      (_cor2, _cor5)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 1046
			    apply 'parse_index'/8
				(CurF, Version, 1, Tail, Fd, 0, 0, 0)
			%% Line 1047
			<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
				 #<CurF>(32,1,'integer',['unsigned'|['big']]),
				 #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
			    when let <_cor6> =
				  %% Line 1048
				  call 'erlang':'<'
				      (0, CurF)
			      in  let <_cor7> =
				      %% Line 1048
				      call 'erlang':'<'
					  (CurF, 65000)
				  in  %% Line 1048
				      call 'erlang':'and'
					  (_cor6, _cor7) ->
			    %% Line 1049
			    apply 'parse_index'/8
				(CurF, 1, 1, Tail, Fd, 0, 0, 0)
			%% Line 1050
			<{'ok',#{#<CurF>(8,1,'integer',['unsigned'|['big']]),
				 #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
			    when call 'erlang':'<'
				  (0,
				   CurF) ->
			    %% Line 1051
			    apply 'parse_index'/8
				(CurF, 1, 1, Tail, Fd, 0, 0, 0)
			%% Line 1052
			<_X_ErrorOrEof> when 'true' ->
			    %% Line 1053
			    {1,0,0,0}
		      end
		  in  do  %% Line 1055
			  ( call 'file':'close'
				(Fd)
			    -| ['result_not_wanted'] )
			  _cor9
	      %% Line 1057
	      <_X_Error> when 'true' ->
		  %% Line 1058
		  {1,0,0,0}
	    end
'parse_index'/8 =
    %% Line 1061
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CurF,V,_cor29,#{#<CurSz>(64,1,'integer',['unsigned'|['big']]),
			   #<Tail>('all',8,'binary',['unsigned'|['big']])}#,Fd,_cor30,TotSz,NFiles>
	      when let <_cor31> =
		    call 'erlang':'=:='
			(_cor29, CurF)
		in  let <_cor32> =
			%% Line 1062
			call 'erlang':'=:='
			    (V, 2)
		    in  call 'erlang':'and'
			    (_cor31, _cor32) ->
	      let <_cor9> =
		  %% Line 1063
		  call 'erlang':'+'
		      (CurF, 1)
	      in  let <_cor8> =
		      %% Line 1063
		      call 'erlang':'+'
			  (NFiles, 1)
		  in  %% Line 1063
		      apply 'parse_index'/8
			  (CurF, V, _cor9, Tail, Fd, CurSz, TotSz, _cor8)
	  %% Line 1064
	  <CurF,V,N,#{#<Sz>(64,1,'integer',['unsigned'|['big']]),
		      #<Tail>('all',8,'binary',['unsigned'|['big']])}#,Fd,CurSz,TotSz,NFiles>
	      when %% Line 1065
		call 'erlang':'=:='
		    (V,
		     2) ->
	      let <_cor12> =
		  %% Line 1066
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor11> =
		      %% Line 1066
		      call 'erlang':'+'
			  (TotSz, Sz)
		  in  let <_cor10> =
			  %% Line 1066
			  call 'erlang':'+'
			      (NFiles, 1)
		      in  %% Line 1066
			  apply 'parse_index'/8
			      (CurF, V, _cor12, Tail, Fd, CurSz, _cor11, _cor10)
	  %% Line 1067
	  <CurF,V,_cor33,#{#<CurSz>(32,1,'integer',['unsigned'|['big']]),
			   #<Tail>('all',8,'binary',['unsigned'|['big']])}#,Fd,_cor34,TotSz,NFiles>
	      when let <_cor35> =
		    call 'erlang':'=:='
			(_cor33, CurF)
		in  let <_cor36> =
			%% Line 1068
			call 'erlang':'<'
			    (V, 2)
		    in  call 'erlang':'and'
			    (_cor35, _cor36) ->
	      let <_cor14> =
		  %% Line 1069
		  call 'erlang':'+'
		      (CurF, 1)
	      in  let <_cor13> =
		      %% Line 1069
		      call 'erlang':'+'
			  (NFiles, 1)
		  in  %% Line 1069
		      apply 'parse_index'/8
			  (CurF, V, _cor14, Tail, Fd, CurSz, TotSz, _cor13)
	  %% Line 1070
	  <CurF,V,N,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		      #<Tail>('all',8,'binary',['unsigned'|['big']])}#,Fd,CurSz,TotSz,NFiles>
	      when %% Line 1071
		call 'erlang':'<'
		    (V,
		     2) ->
	      let <_cor17> =
		  %% Line 1072
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor16> =
		      %% Line 1072
		      call 'erlang':'+'
			  (TotSz, Sz)
		  in  let <_cor15> =
			  %% Line 1072
			  call 'erlang':'+'
			      (NFiles, 1)
		      in  %% Line 1072
			  apply 'parse_index'/8
			      (CurF, V, _cor17, Tail, Fd, CurSz, _cor16, _cor15)
	  %% Line 1073
	  <CurF,V,N,B,Fd,CurSz,TotSz,NFiles> when 'true' ->
	      %% Line 1074
	      case call 'file':'read'
		       (Fd, 65536) of
		%% Line 1075
		<'eof'>
		    when try
			  let <_cor18> =
			      call 'erlang':'byte_size'
				  (B)
			  in  call 'erlang':'=:='
				  (0, _cor18)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1076
		    {CurF,CurSz,TotSz,NFiles}
		%% Line 1077
		<{'ok',Bin}> when 'true' ->
		    let <NewB> =
			%% Line 1078
			call 'erlang':'list_to_binary'
			    ([B|[Bin|[]]])
		    in  %% Line 1079
			apply 'parse_index'/8
			    (CurF, V, N, NewB, Fd, CurSz, TotSz, NFiles)
		%% Line 1080
		<_X_ErrorOrEof> when 'true' ->
		    %% Line 1081
		    {1,0,0,0}
	      end
	end
'write_index_file'/5 =
    %% Line 1086
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'read_only',_X_FName,_X_NewFile,_X_OldFile,_X_OldCnt> when 'true' ->
	      %% Line 1087
	      0
	  %% Line 1088
	  <'read_write',FName,NewFile,OldFile,OldCnt> when 'true' ->
	      let <FileName> =
		  %% Line 1089
		  apply 'add_ext'/2
		      (FName, [105|[100|[120]]])
	      in  %% Line 1090
		  case apply 'open_update'/1
			   (FileName) of
		    %% Line 1091
		    <{'ok',Fd}> when 'true' ->
			let <_cor14> =
			    %% Line 1093
			    case call 'file':'read'
				     (Fd, 6) of
			      %% Line 1094
			      <'eof'> when 'true' ->
				  let <Bin> =
				      %% Line 1095
				      #{#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<2>(8,1,'integer',['unsigned'|['big']]),
					#<NewFile>(32,1,'integer',['unsigned'|['big']])}#
				  in  do  %% Line 1096
					  apply 'fwrite_close2'/3
					      (Fd, FileName, Bin)
					  %% Line 1097
					  {10,8}
			      %% Line 1098
			      <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
				       #<0>(32,1,'integer',['unsigned'|['big']]),
				       #<_X_Version>(8,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
				  let <_cor7> =
				      %% Line 1099
				      #{#<NewFile>(32,1,'integer',['unsigned'|['big']])}#
				  in  do  %% Line 1099
					  apply 'pwrite_close2'/4
					      (Fd, FileName, 6, _cor7)
					  %% Line 1100
					  {10,8}
			      %% Line 1101
			      <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
				       #<_cor33>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
				  let <_cor8> =
				      %% Line 1102
				      #{#<NewFile>(32,1,'integer',['unsigned'|['big']])}#
				  in  do  %% Line 1102
					  apply 'pwrite_close2'/4
					      (Fd, FileName, 1, _cor8)
					  %% Line 1103
					  {5,4}
			      %% Line 1104
			      <{'ok',#{#<_cor34>(8,1,'integer',['unsigned'|['big']]),
				       #<_cor35>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
				  %% Line 1106
				  case call 'file':'read_file'
					   (FileName) of
				    %% Line 1107
				    <{'ok',#{#<_X_CurF>(8,1,'integer',['unsigned'|['big']]),
					     #<Tail>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
					%% Line 1108
					case apply 'position_close2'/3
						 (Fd, FileName, 'bof') of
					  <{'ok',_cor36}> when 'true' ->
					      let <Bin> =
						  %% Line 1109
						  #{#<0>(8,1,'integer',['unsigned'|['big']]),
						    #<0>(32,1,'integer',['unsigned'|['big']]),
						    #<2>(8,1,'integer',['unsigned'|['big']]),
						    #<NewFile>(32,1,'integer',['unsigned'|['big']])}#
					      in  let <NewTail> =
						      %% Line 1110
						      apply 'to_8_bytes'/4
							  (Tail, [], FileName, Fd)
						  in  do  %% Line 1111
							  apply 'fwrite_close2'/3
							      (Fd, FileName, [Bin|NewTail])
							  %% Line 1112
							  {10,8}
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
				    %% Line 1113
				    <Error> when 'true' ->
					%% Line 1114
					apply 'file_error_close'/3
					    (Fd, FileName, Error)
				  end
			      %% Line 1116
			      <Error> when 'true' ->
				  %% Line 1117
				  apply 'file_error_close'/3
				      (Fd, FileName, Error)
			    end
			in  %% Line 1092
			    case _cor14 of
			      <{Offset,SzSz}> when 'true' ->
				  let <_cor16> =
				      %% Line 1120
				      call 'erlang':'-'
					  (NewFile, 1)
				  in  let <_cor17> =
					  %% Line 1120
					  call 'erlang':'*'
					      (_cor16, SzSz)
				      in  let <NewPos> =
					      %% Line 1120
					      call 'erlang':'+'
						  (Offset, _cor17)
					  in  let <OldCntBin> =
						  %% Line 1121
						  #{#<OldCnt>(SzSz,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1122
						  case <> of
						    %% Line 1123
						    <>
							when call 'erlang':'>'
							      (OldFile,
							       0) ->
							let <R> =
							    %% Line 1124
							    call 'file':'pread'
								(Fd, NewPos, SzSz)
							in  let <_cor21> =
								%% Line 1125
								call 'erlang':'-'
								    (OldFile, 1)
							    in  let <_cor22> =
								    %% Line 1125
								    call 'erlang':'*'
									(_cor21, SzSz)
								in  let <OldPos> =
									%% Line 1125
									call 'erlang':'+'
									    (Offset, _cor22)
								    in  do  %% Line 1126
									    apply 'pwrite_close2'/4
										(Fd, FileName, OldPos, OldCntBin)
									    let <_X_> =
										%% Line 1127
										( call 'file':'close'
										      (Fd)
										  -| ['result_not_wanted'] )
									    in  %% Line 1128
										case R of
										  %% Line 1129
										  <{'ok',#{#<Lost>(SzSz,8,'integer',['unsigned'|['big']])}#}> when 'true' ->
										      Lost
										  %% Line 1130
										  <{'ok',_cor37}> when 'true' ->
										      %% Line 1131
										      call 'erlang':'throw'
											  ({'error',{'invalid_index_file',FileName}})
										  %% Line 1132
										  <'eof'> when 'true' ->
										      0
										  %% Line 1133
										  <Error2> when 'true' ->
										      apply 'file_error'/2
											  (FileName, Error2)
										end
						    %% Line 1135
						    <> when 'true' ->
							do  %% Line 1136
							    apply 'pwrite_close2'/4
								(Fd, FileName, NewPos, OldCntBin)
							    do  %% Line 1137
								( call 'file':'close'
								      (Fd)
								  -| ['result_not_wanted'] )
								%% Line 1138
								0
						  end
			      ( <_cor15> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor15})
				-| ['compiler_generated'] )
			    end
		    %% Line 1140
		    <E> when 'true' ->
			%% Line 1141
			apply 'file_error'/2
			    (FileName, E)
		  end
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'write_index_file',5}}] )
	    -| ['compiler_generated'] )
	end
'to_8_bytes'/4 =
    %% Line 1144
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{#<N>(32,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,NT,FileName,Fd> when 'true' ->
	      let <_cor4> =
		  %% Line 1145
		  #{#<N>(64,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 1145
		  apply 'to_8_bytes'/4
		      (T, [NT|_cor4], FileName, Fd)
	  %% Line 1146
	  <B,NT,_X_FileName,_X_Fd>
	      when try
		    let <_cor5> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'=:='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1147
	      NT
	  %% Line 1148
	  <_X_B,_X_NT,FileName,Fd> when 'true' ->
	      let <_X_> =
		  %% Line 1149
		  ( call 'file':'close'
			(Fd)
		    -| ['result_not_wanted'] )
	      in  %% Line 1150
		  call 'erlang':'throw'
		      ({'error',{'invalid_index_file',FileName}})
	end
'index_file_trunc'/2 =
    %% Line 1153
    fun (_cor1,_cor0) ->
	let <FileName> =
	    %% Line 1154
	    apply 'add_ext'/2
		(_cor1, [105|[100|[120]]])
	in  %% Line 1155
	    case apply 'open_update'/1
		     (FileName) of
	      %% Line 1156
	      <{'ok',Fd}> when 'true' ->
		  %% Line 1157
		  case call 'file':'read'
			   (Fd, 6) of
		    %% Line 1158
		    <'eof'> when 'true' ->
			do  %% Line 1159
			    ( call 'file':'close'
				  (Fd)
			      -| ['result_not_wanted'] )
			    %% Line 1160
			    'ok'
		    %% Line 1161
		    <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			     #<0>(32,1,'integer',['unsigned'|['big']]),
			     #<Version>(8,1,'integer',['unsigned'|['big']])}#}>
			when call 'erlang':'=:='
			      (Version,
			       2) ->
			%% Line 1162
			apply 'truncate_index_file'/5
			    (Fd, FileName, 10, 8, _cor0)
		    %% Line 1163
		    <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			     #<_cor8>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
			%% Line 1164
			apply 'truncate_index_file'/5
			    (Fd, FileName, 5, 4, _cor0)
		    %% Line 1165
		    <{'ok',#{#<_cor9>(8,1,'integer',['unsigned'|['big']]),
			     #<_cor10>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
			%% Line 1166
			apply 'truncate_index_file'/5
			    (Fd, FileName, 1, 4, _cor0)
		    %% Line 1167
		    <Error> when 'true' ->
			%% Line 1168
			apply 'file_error_close'/3
			    (Fd, FileName, Error)
		  end
	      %% Line 1170
	      <Error> when 'true' ->
		  %% Line 1171
		  apply 'file_error'/2
		      (FileName, Error)
	    end
'truncate_index_file'/5 =
    %% Line 1174
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1175
	    call 'erlang':'*'
		(_cor1, _cor0)
	in  let <Pos> =
		%% Line 1175
		call 'erlang':'+'
		    (_cor2, _cor5)
	    in  let <_cor7> =
		    %% Line 1176
		    apply 'file_size'/1
			(_cor3)
		in  do  %% Line 1176
			case <> of
			  %% Line 1177
			  <>
			      when call 'erlang':'>'
				    (Pos,
				     _cor7) ->
			      %% Line 1178
			      case call 'file':'close'
				       (_cor4) of
				<'ok'> when 'true' ->
				    'ok'
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1179
			  <> when 'true' ->
			      do  %% Line 1180
				  apply 'truncate_at_close2'/3
				      (_cor4, _cor3, {'bof',Pos})
				  %% Line 1181
				  case call 'file':'close'
					   (_cor4) of
				    <'ok'> when 'true' ->
					'ok'
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			end
			%% Line 1183
			'ok'
'print_index_file'/1 =
    %% Line 1185
    fun (_cor0) ->
	do  %% Line 1186
	    call 'io':'format'
		([45|[45|[32|[73|[110|[100|[101|[120|[32|[98|[101|[103|[105|[110|[32|[45|[45|[126|[110]]]]]]]]]]]]]]]]]]])
	    do  %% Line 1187
		case call 'file':'read_file'
			 (_cor0) of
		  %% Line 1188
		  <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			   #<0>(32,1,'integer',['unsigned'|['big']]),
			   #<Version>(8,1,'integer',['unsigned'|['big']]),
			   #<CurF>(32,1,'integer',['unsigned'|['big']]),
			   #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
		      when %% Line 1189
			try
			    let <_cor1> =
				call 'erlang':'=:='
				    (Version, 2)
			    in  let <_cor2> =
				    call 'erlang':'<'
					(0, CurF)
				in  let <_cor3> =
					call 'erlang':'<'
					    (CurF, 65000)
				    in  let <_cor4> =
					    call 'erlang':'and'
						(_cor2, _cor3)
					in  call 'erlang':'and'
						(_cor1, _cor4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      do  %% Line 1190
			  call 'io':'format'
			      ([99|[117|[114|[32|[102|[105|[108|[101|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]], [CurF|[]])
			  %% Line 1191
			  apply 'loop_index'/3
			      (1, Version, Tail)
		  %% Line 1192
		  <{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			   #<CurF>(32,1,'integer',['unsigned'|['big']]),
			   #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
		      when let <_cor5> =
			    call 'erlang':'<'
				(0, CurF)
			in  let <_cor6> =
				call 'erlang':'<'
				    (CurF, 65000)
			    in  call 'erlang':'and'
				    (_cor5, _cor6) ->
		      do  %% Line 1193
			  call 'io':'format'
			      ([99|[117|[114|[32|[102|[105|[108|[101|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]], [CurF|[]])
			  %% Line 1194
			  apply 'loop_index'/3
			      (1, 1, Tail)
		  %% Line 1195
		  <{'ok',#{#<CurF>(8,1,'integer',['unsigned'|['big']]),
			   #<Tail>('all',8,'binary',['unsigned'|['big']])}#}>
		      when call 'erlang':'<'
			    (0,
			     CurF) ->
		      do  %% Line 1196
			  call 'io':'format'
			      ([99|[117|[114|[32|[102|[105|[108|[101|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]], [CurF|[]])
			  %% Line 1197
			  apply 'loop_index'/3
			      (1, 1, Tail)
		  %% Line 1198
		  <_X_Else> when 'true' ->
		      'ok'
		end
		%% Line 1201
		call 'io':'format'
		    ([45|[45|[32|[101|[110|[100|[32|[45|[45|[126|[110]]]]]]]]]]])
'loop_index'/3 =
    %% Line 1203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,V,#{#<Sz>(64,1,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'=:='
		    (V,
		     2) ->
	      do  %% Line 1204
		  call 'io':'format'
		      ([32|[126|[112|[32|[32|[105|[116|[101|[109|[115|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [N|[Sz|[]]])
		  let <_cor3> =
		      %% Line 1205
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 1205
		      apply 'loop_index'/3
			  (_cor3, V, Tail)
	  %% Line 1206
	  <N,V,#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		 #<Tail>('all',8,'binary',['unsigned'|['big']])}#>
	      when call 'erlang':'<'
		    (V,
		     2) ->
	      do  %% Line 1207
		  call 'io':'format'
		      ([32|[126|[112|[32|[32|[105|[116|[101|[109|[115|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [N|[Sz|[]]])
		  let <_cor4> =
		      %% Line 1208
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 1208
		      apply 'loop_index'/3
			  (_cor4, V, Tail)
	  %% Line 1209
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1210
	      'ok'
	end
'write_size_file'/5 =
    %% Line 1219
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'read_only',_X_FName,_X_NewSize,_X_NewMaxFiles,_X_Version> when 'true' ->
	      %% Line 1220
	      'ok'
	  %% Line 1221
	  <'read_write',FName,NewSize,NewMaxFiles,Version> when 'true' ->
	      let <FileName> =
		  %% Line 1222
		  apply 'add_ext'/2
		      (FName, [115|[105|[122]]])
	      in  let <_cor6> =
		      %% Line 1223
		      case <> of
			%% Line 1224
			<>
			    when call 'erlang':'=:='
				  (Version,
				   2) ->
			    %% Line 1225
			    #{#<Version>(8,1,'integer',['unsigned'|['big']]),
			      #<NewSize>(64,1,'integer',['unsigned'|['big']]),
			      #<NewMaxFiles>(32,1,'integer',['unsigned'|['big']])}#
			%% Line 1226
			<> when 'true' ->
			    %% Line 1227
			    #{#<NewSize>(32,1,'integer',['unsigned'|['big']]),
			      #<NewMaxFiles>(32,1,'integer',['unsigned'|['big']])}#
		      end
		  in  %% Line 1229
		      case call 'file':'write_file'
			       (FileName, _cor6) of
			%% Line 1230
			<'ok'> when 'true' ->
			    %% Line 1231
			    'ok'
			%% Line 1232
			<E> when 'true' ->
			    %% Line 1233
			    apply 'file_error'/2
				(FileName, E)
		      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'write_size_file',5}}] )
	    -| ['compiler_generated'] )
	end
'read_size_file'/1 =
    %% Line 1237
    fun (_cor0) ->
	%% Line 1238
	case apply 'read_size_file_version'/1
		 (_cor0) of
	  <{Size,_X_Version}> when 'true' ->
	      %% Line 1239
	      Size
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'read_size_file_version'/1 =
    %% Line 1242
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1243
	    apply 'add_ext'/2
		(_cor0, [115|[105|[122]]])
	in  %% Line 1243
	    case call 'file':'read_file'
		     (_cor1) of
	      %% Line 1244
	      <{'ok',#{#<Version>(8,1,'integer',['unsigned'|['big']]),
		       #<Size>(64,1,'integer',['unsigned'|['big']]),
		       #<MaxFiles>(32,1,'integer',['unsigned'|['big']])}#}>
		  when call 'erlang':'=:='
			(Version,
			 2) ->
		  %% Line 1245
		  {{Size,MaxFiles},Version}
	      %% Line 1246
	      <{'ok',#{#<Size>(32,1,'integer',['unsigned'|['big']]),
		       #<MaxFiles>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
		  %% Line 1247
		  {{Size,MaxFiles},1}
	      %% Line 1248
	      <_cor4> when 'true' ->
		  %% Line 1250
		  {{0,0},2}
	    end
'conv'/2 =
    %% Line 1253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{More = {'continuation',_cor18,_cor19,_cor20},Terms},FileNo> when ( 'true'
									       -| ['compiler_generated'] ) ->
	      let <_rec89> = {%% Line 1254
		   FileNo,_cor19}
	      in  let <_cor7> =
		      %% Line 1254
		      call 'erlang':'setelement'
			  (3, More, _rec89)
		  in  %% Line 1255
		      {_cor7,Terms}
	  %% Line 1256
	  <{More = {'continuation',_cor28,_cor29,_cor30},Terms,Bad},FileNo> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      let <_rec92> = {%% Line 1257
		   FileNo,_cor29}
	      in  let <_cor14> =
		      %% Line 1257
		      call 'erlang':'setelement'
			  (3, More, _rec92)
		  in  %% Line 1258
		      {_cor14,Terms,Bad}
	  %% Line 1259
	  <Other,_cor38> when 'true' ->
	      %% Line 1260
	      Other
	end
'find_first_file'/1 =
    %% Line 1262
    fun (_cor0) ->
	case _cor0 of
	  <{'handle',FName,_cor3,MaxF,_cor4,CurF,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor1> =
		  %% Line 1263
		  apply 'inc'/2
		      (CurF, MaxF)
	      in  %% Line 1263
		  apply 'fff'/4
		      (FName, _cor1, CurF, MaxF)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'find_first_file',1}}] )
	    -| ['compiler_generated'] )
	end
'fff'/4 =
    %% Line 1265
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_FName,CurF,_cor11,_X_MaxF>
	      when call 'erlang':'=:='
		    (_cor11,
		     CurF) ->
	      CurF
	  %% Line 1266
	  <FName,MaybeFirstF,CurF,MaxF> when 'true' ->
	      let <N> =
		  %% Line 1267
		  apply 'add_ext'/2
		      (FName, MaybeFirstF)
	      in  %% Line 1268
		  case call 'file':'read_file_info'
			   (N) of
		    %% Line 1269
		    <{'ok',_cor12}> when 'true' ->
			MaybeFirstF
		    %% Line 1270
		    <_cor13> when 'true' ->
			let <_cor5> =
			    apply 'inc'/2
				(MaybeFirstF, MaxF)
			in  apply 'fff'/4
				(FName, _cor5, CurF, MaxF)
		  end
	end
'ext_split_bins'/4 =
    %% Line 1274
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <MaxBs> =
	    %% Line 1275
	    call 'erlang':'-'
		(_cor2, _cor3)
	in  let <IsFirst> =
		%% Line 1275
		call 'erlang':'=:='
		    (_cor3, _cor1)
	    in  %% Line 1276
		apply 'ext_split_bins'/6
		    (MaxBs, IsFirst, [], _cor0, 0, 0)
'ext_split_bins'/6 =
    %% Line 1278
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MaxBs,IsFirst,First,[X|Last],Bs,N> when 'true' ->
	      let <_cor6> =
		  %% Line 1279
		  call 'erlang':'byte_size'
		      (X)
	      in  let <NBs> =
		      %% Line 1279
		      call 'erlang':'+'
			  (Bs, _cor6)
		  in  %% Line 1280
		      case <> of
			%% Line 1281
			<>
			    when call 'erlang':'=<'
				  (NBs,
				   MaxBs) ->
			    let <_cor8> =
				%% Line 1282
				call 'erlang':'+'
				    (N, 1)
			    in  %% Line 1282
				apply 'ext_split_bins'/6
				    (MaxBs, IsFirst, [First|X], Last, NBs, _cor8)
			%% Line 1283
			<>
			    when let <_cor9> =
				  call 'erlang':'=:='
				      (IsFirst, 'true')
			      in  let <_cor10> =
				      call 'erlang':'=:='
					  (First, [])
				  in  call 'erlang':'and'
					  (_cor9, _cor10) ->
			    let <_cor11> =
				%% Line 1286
				call 'erlang':'+'
				    (N, 1)
			    in  %% Line 1286
				{[X|[]],Last,NBs,_cor11}
			%% Line 1287
			<> when 'true' ->
			    %% Line 1288
			    {First,[X|Last],Bs,N}
		      end
	  %% Line 1290
	  <_cor18,_cor19,First,[],Bs,N> when 'true' ->
	      %% Line 1291
	      {First,[],Bs,N}
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'ext_split_bins',6}}] )
	    -| ['compiler_generated'] )
	end
'int_split_bins'/4 =
    %% Line 1294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <MaxBs> =
	    %% Line 1295
	    call 'erlang':'-'
		(_cor2, _cor3)
	in  let <IsFirst> =
		%% Line 1295
		call 'erlang':'=:='
		    (_cor3, _cor1)
	    in  %% Line 1296
		apply 'int_split_bins'/6
		    (MaxBs, IsFirst, [], _cor0, 0, 0)
'int_split_bins'/6 =
    %% Line 1298
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MaxBs,IsFirst,First,[X|Last],Bs,N> when 'true' ->
	      let <Sz> =
		  %% Line 1299
		  call 'erlang':'byte_size'
		      (X)
	      in  let <_cor7> =
		      %% Line 1300
		      call 'erlang':'+'
			  (Bs, Sz)
		  in  let <NBs> =
			  %% Line 1300
			  call 'erlang':'+'
			      (_cor7, 8)
		      in  let <BSz> =
			      %% Line 1301
			      #{#<Sz>(4,8,'integer',['unsigned'|['big']])}#
			  in  let <_cor12> =
				  %% Line 1302
				  case <> of
				    %% Line 1303
				    <>
					when call 'erlang':'<'
					      (Sz,
					       65528) ->
					%% Line 1304
					[BSz|[#{#<98>(8,1,'integer',['unsigned'|['big']]),
						#<87>(8,1,'integer',['unsigned'|['big']]),
						#<76>(8,1,'integer',['unsigned'|['big']]),
						#<65>(8,1,'integer',['unsigned'|['big']])}#|X]]
				    %% Line 1305
				    <> when 'true' ->
					let <MD5> =
					    %% Line 1306
					    call 'erlang':'md5'
						(BSz)
					in  %% Line 1307
					    [BSz|[#{#<98>(8,1,'integer',['unsigned'|['big']]),
						    #<87>(8,1,'integer',['unsigned'|['big']]),
						    #<76>(8,1,'integer',['unsigned'|['big']]),
						    #<65>(8,1,'integer',['unsigned'|['big']])}#|[MD5|X]]]
				  end
			      in  %% Line 1309
				  case <> of
				    %% Line 1310
				    <>
					when call 'erlang':'=<'
					      (NBs,
					       MaxBs) ->
					let <_cor14> =
					    %% Line 1311
					    call 'erlang':'+'
						(N, 1)
					in  %% Line 1311
					    apply 'int_split_bins'/6
						(MaxBs, IsFirst, [First|_cor12], Last, NBs, _cor14)
				    %% Line 1312
				    <>
					when let <_cor15> =
					      call 'erlang':'=:='
						  (IsFirst, 'true')
					  in  let <_cor16> =
						  call 'erlang':'=:='
						      (First, [])
					      in  call 'erlang':'and'
						      (_cor15, _cor16) ->
					let <_cor17> =
					    %% Line 1315
					    call 'erlang':'+'
						(N, 1)
					in  %% Line 1315
					    {[_cor12|[]],Last,NBs,_cor17}
				    %% Line 1316
				    <> when 'true' ->
					%% Line 1317
					{First,[X|Last],Bs,N}
				  end
	  %% Line 1319
	  <_cor24,_cor25,First,[],Bs,N> when 'true' ->
	      %% Line 1320
	      {First,[],Bs,N}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'int_split_bins',6}}] )
	    -| ['compiler_generated'] )
	end
'inc_wrap'/3 =
    %% Line 1323
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1324
	case _cor0 of
	  %% Line 1326
	  <{NewMaxF,OldMaxF}> when 'true' ->
	      %% Line 1327
	      case <> of
		%% Line 1328
		<>
		    when call 'erlang':'>='
			  (_cor1,
			   NewMaxF) ->
		    let <_cor3> =
			%% Line 1330
			call 'erlang':'+'
			    (_cor1, 1)
		    in  do  %% Line 1330
			    apply 'remove_files'/3
				(_cor2, _cor3, OldMaxF)
			    %% Line 1331
			    case <> of
			      %% Line 1332
			      <>
				  when call 'erlang':'>'
					(_cor1,
					 NewMaxF) ->
				  %% Line 1341
				  {1,{NewMaxF,_cor1}}
			      %% Line 1342
			      <> when 'true' ->
				  do  %% Line 1346
				      apply 'index_file_trunc'/2
					  (_cor2, NewMaxF)
				      %% Line 1347
				      {1,NewMaxF}
			    end
		%% Line 1349
		<> when 'true' ->
		    let <NewFt> =
			%% Line 1351
			apply 'inc'/2
			    (_cor1, NewMaxF)
		    in  %% Line 1352
			{NewFt,_cor0}
	      end
	  %% Line 1354
	  <_cor10> when 'true' ->
	      let <NewFt> =
		  %% Line 1356
		  apply 'inc'/2
		      (_cor1, _cor0)
	      in  %% Line 1357
		  {NewFt,_cor0}
	end
'inc'/2 =
    %% Line 1360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,{_X_NewMax,OldMax}> when 'true' ->
	      apply 'inc'/3
		  (N, OldMax, 1)
	  %% Line 1361
	  <N,Max> when 'true' ->
	      apply 'inc'/3
		  (N, Max, 1)
	end
'inc'/3 =
    %% Line 1363
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1364
	    call 'erlang':'+'
		(_cor2, _cor0)
	in  let <Nx> =
		%% Line 1364
		call 'erlang':'rem'
		    (_cor3, _cor1)
	    in  %% Line 1365
		case <> of
		  %% Line 1366
		  <>
		      when call 'erlang':'>'
			    (Nx,
			     0) ->
		      Nx
		  %% Line 1367
		  <> when 'true' ->
		      call 'erlang':'+'
			  (Nx, _cor1)
		end
'file_size'/1 =
    %% Line 1371
    fun (_cor0) ->
	%% Line 1372
	case call 'file':'read_file_info'
		 (_cor0) of
	  <{'ok',Fi}> when 'true' ->
	      %% Line 1373
	      ( case Fi of
		  ( <( {'file_info',_rec95,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec95
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'remove_files'/3 =
    %% Line 1377
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1378
	apply 'remove_files'/4
	    (_cor2, _cor1, _cor0, 'ok')
'remove_files'/4 =
    %% Line 1380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_FName,N,Max,'ok'>
	      when call 'erlang':'>'
		    (N,
		     Max) ->
	      %% Line 1381
	      'ok'
	  %% Line 1382
	  <_X_FName,N,Max,{FileName,Error}>
	      when call 'erlang':'>'
		    (N,
		     Max) ->
	      %% Line 1383
	      apply 'file_error'/2
		  (FileName, Error)
	  %% Line 1384
	  <FName,N,Max,Reply> when 'true' ->
	      let <FileName> =
		  %% Line 1385
		  apply 'add_ext'/2
		      (FName, N)
	      in  let <_cor6> =
		      %% Line 1386
		      case call 'file':'delete'
			       (FileName) of
			%% Line 1387
			<'ok'> when 'true' ->
			    Reply
			%% Line 1388
			<{'error','enoent'}> when 'true' ->
			    Reply
			%% Line 1389
			<Error> when 'true' ->
			    {FileName,Error}
		      end
		  in  let <_cor8> =
			  %% Line 1391
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 1391
			  apply 'remove_files'/4
			      (FName, _cor8, Max, _cor6)
	end
'get_wrap_size'/1 =
    %% Line 1394
    fun (_cor0) ->
	case _cor0 of
	  <{'handle',_cor3,MaxB,MaxF,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 1395
	      case MaxF of
		%% Line 1396
		<{NewMaxF,_cor13}> when 'true' ->
		    {MaxB,NewMaxF}
		%% Line 1397
		<_cor14> when 'true' ->
		    {MaxB,MaxF}
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_wrap_size',1}}] )
	    -| ['compiler_generated'] )
	end
'add_ext'/2 =
    %% Line 1400
    fun (_cor1,_cor0) ->
	%% Line 1401
	call 'lists':'concat'
	    ([_cor1|[[46]|[_cor0|[]]]])
'open_read'/1 =
    %% Line 1403
    fun (_cor0) ->
	%% Line 1404
	call 'file':'open'
	    (_cor0, ['raw'|['binary'|['read']]])
'open_update'/1 =
    %% Line 1406
    fun (_cor0) ->
	%% Line 1407
	call 'file':'open'
	    (_cor0, ['raw'|['binary'|['read'|['write']]]])
'open_truncate'/1 =
    %% Line 1409
    fun (_cor0) ->
	%% Line 1410
	call 'file':'open'
	    (_cor0, ['raw'|['binary'|['write']]])
'fwrite'/4 =
    %% Line 1418
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <FdC = {'cache',_cor19,_cor20,[]},_X_FN,B,Size> when 'true' ->
	      do  %% Line 1419
		  case call 'erlang':'get'
			   ('write_cache_timer_is_running') of
		    %% Line 1420
		    <'true'> when 'true' ->
			'ok'
		    %% Line 1422
		    <_cor21> when 'true' ->
			do  %% Line 1423
			    call 'erlang':'put'
				('write_cache_timer_is_running', 'true')
			    let <_cor5> =
				%% Line 1424
				call 'erlang':'self'
				    ()
			    in  let <_cor4> =
				    %% Line 1424
				    call 'erlang':'self'
					()
				in  do  %% Line 1424
					call 'erlang':'send_after'
					    (2000, _cor5, {_cor4,'write_cache'})
					'ok'
		  end
		  let <_cor9> =
		      %% Line 1427
		      {'cache',_cor19,Size,B}
		  in  %% Line 1427
		      {'ok',_cor9}
	  %% Line 1428
	  <FdC = {'cache',_cor23,Sz,C},_X_FN,B,Size>
	      when call 'erlang':'<'
		    (Sz,
		     16384) ->
	      let <_rec100> =
		  %% Line 1429
		  call 'erlang':'+'
		      (Sz, Size)
	      in  let <_rec101> =
		      %% Line 1429
		      [C|B]
		  in  let <_cor14> =
			  %% Line 1429
			  {'cache',_cor23,_rec100,_rec101}
		      in  %% Line 1429
			  {'ok',_cor14}
	  %% Line 1430
	  <{'cache',Fd,_cor25,C},FileName,B,_X_Size> when 'true' ->
	      %% Line 1431
	      apply 'write_cache'/3
		  (Fd, FileName, [C|B])
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'fwrite',4}}] )
	    -| ['compiler_generated'] )
	end
'fwrite_header'/3 =
    %% Line 1433
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1434
	{'ok',{'cache',_cor2,_cor0,_cor1}}
'pread'/4 =
    %% Line 1437
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'cache',Fd,_cor12,C},FileName,Position,MaxBytes> when 'true' ->
	      %% Line 1439
	      case apply 'write_cache'/3
		       (Fd, FileName, C) of
		%% Line 1440
		<{'ok',NewFdC}> when 'true' ->
		    %% Line 1441
		    case call 'file':'pread'
			     (Fd, Position, MaxBytes) of
		      %% Line 1442
		      <{'error',Error}> when 'true' ->
			  let <_cor5> =
			      catch
				  %% Line 1443
				  apply 'file_error'/2
				      (FileName, {'error',Error})
			  in  %% Line 1443
			      {NewFdC,_cor5}
		      %% Line 1444
		      <R> when 'true' ->
			  %% Line 1445
			  {NewFdC,R}
		    end
		%% Line 1447
		<{Error,NewFdC}> when 'true' ->
		    %% Line 1448
		    {NewFdC,Error}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pread',4}}] )
	    -| ['compiler_generated'] )
	end
'position'/3 =
    %% Line 1452
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cache',Fd,_cor9,C},FileName,Pos> when 'true' ->
	      let <Reply> =
		  %% Line 1453
		  apply 'write_cache'/3
		      (Fd, FileName, C)
	      in  %% Line 1454
		  case Reply of
		    %% Line 1455
		    <{'ok',NewFdC}> when 'true' ->
			%% Line 1456
			case apply 'position2'/3
				 (Fd, FileName, Pos) of
			  %% Line 1457
			  <{'ok',Loc}> when 'true' ->
			      %% Line 1458
			      {'ok',NewFdC,Loc}
			  %% Line 1459
			  <Error> when 'true' ->
			      %% Line 1460
			      {Error,NewFdC}
			end
		    %% Line 1462
		    <_X_Error> when 'true' ->
			%% Line 1463
			Reply
		  end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'position',3}}] )
	    -| ['compiler_generated'] )
	end
'position_close'/3 =
    %% Line 1466
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'cache',Fd,_cor8,C},FileName,Pos> when 'true' ->
	      let <NewFdC> =
		  %% Line 1467
		  apply 'write_cache_close'/3
		      (Fd, FileName, C)
	      in  %% Line 1468
		  case apply 'position_close2'/3
			   (Fd, FileName, Pos) of
		    <{'ok',Loc}> when 'true' ->
			%% Line 1469
			{NewFdC,Loc}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'position_close',3}}] )
	    -| ['compiler_generated'] )
	end
'fsync'/2 =
    %% Line 1471
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cache',Fd,_cor8,C},FileName> when 'true' ->
	      let <Reply> =
		  %% Line 1472
		  apply 'write_cache'/3
		      (Fd, FileName, C)
	      in  %% Line 1473
		  case Reply of
		    %% Line 1474
		    <{'ok',NewFdC}> when 'true' ->
			%% Line 1475
			case call 'file':'sync'
				 (Fd) of
			  %% Line 1476
			  <'ok'> when 'true' ->
			      %% Line 1477
			      Reply
			  %% Line 1478
			  <Error> when 'true' ->
			      let <_cor3> =
				  catch
				      %% Line 1479
				      apply 'file_error'/2
					  (FileName, Error)
			      in  %% Line 1479
				  {_cor3,NewFdC}
			end
		    %% Line 1481
		    <_X_Error> when 'true' ->
			%% Line 1482
			Reply
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'fsync',2}}] )
	    -| ['compiler_generated'] )
	end
'truncate_at'/3 =
    %% Line 1486
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1487
	case apply 'position'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1488
	  <{'ok',NewFdC,_X_Pos}> when 'true' ->
	      %% Line 1489
	      ( case NewFdC of
		  ( <( {'cache',_rec106,_cor11,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'file':'truncate'
				 (_rec106) of
			  %% Line 1490
			  <'ok'> when 'true' ->
			      %% Line 1491
			      {'ok',NewFdC}
			  %% Line 1492
			  <Error> when 'true' ->
			      let <_cor5> =
				  catch
				      %% Line 1493
				      apply 'file_error'/2
					  (_cor1, Error)
			      in  %% Line 1493
				  {_cor5,NewFdC}
			end
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cache'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1495
	  <Reply> when 'true' ->
	      %% Line 1496
	      Reply
	end
'fwrite_close2'/3 =
    %% Line 1499
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1500
	case call 'file':'write'
		 (_cor2, _cor0) of
	  %% Line 1501
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1502
	  <Error> when 'true' ->
	      apply 'file_error_close'/3
		  (_cor2, _cor1, Error)
	end
'pwrite_close2'/4 =
    %% Line 1505
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1506
	case call 'file':'pwrite'
		 (_cor3, _cor1, _cor0) of
	  %% Line 1507
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1508
	  <{'error',Error}> when 'true' ->
	      apply 'file_error'/2
		  (_cor2, {'error',Error})
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'position2'/3 =
    %% Line 1511
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1512
	case call 'file':'position'
		 (_cor2, _cor0) of
	  %% Line 1513
	  <{'error',Error}> when 'true' ->
	      catch
		  apply 'file_error'/2
		      (_cor1, {'error',Error})
	  %% Line 1514
	  <OK> when 'true' ->
	      OK
	end
'position_close2'/3 =
    %% Line 1517
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1518
	case call 'file':'position'
		 (_cor2, _cor0) of
	  %% Line 1519
	  <{'error',Error}> when 'true' ->
	      apply 'file_error_close'/3
		  (_cor2, _cor1, {'error',Error})
	  %% Line 1520
	  <OK> when 'true' ->
	      OK
	end
'truncate_at_close2'/3 =
    %% Line 1523
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1524
	case apply 'position_close2'/3
		 (_cor2, _cor1, _cor0) of
	  <{'ok',_cor8}> when 'true' ->
	      %% Line 1525
	      case call 'file':'truncate'
		       (_cor2) of
		%% Line 1526
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1527
		<Error> when 'true' ->
		    apply 'file_error_close'/3
			(_cor2, _cor1, Error)
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'fclose'/2 =
    %% Line 1530
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'cache',Fd,_cor5,C},FileName> when 'true' ->
	      let <_X_> =
		  %% Line 1532
		  apply 'write_cache_close'/3
		      (Fd, FileName, C)
	      in  %% Line 1533
		  call 'file':'close'
		      (Fd)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fclose',2}}] )
	    -| ['compiler_generated'] )
	end
'write_cache'/3 =
    %% Line 1536
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fd,_X_FileName,[]> when 'true' ->
	      %% Line 1537
	      {'ok',{'cache',Fd,0,[]}}
	  %% Line 1538
	  <Fd,FileName,C> when 'true' ->
	      %% Line 1539
	      case call 'file':'write'
		       (Fd, C) of
		%% Line 1540
		<'ok'> when 'true' ->
		    {'ok',{'cache',Fd,0,[]}}
		%% Line 1541
		<Error> when 'true' ->
		    let <_cor3> =
			catch
			    apply 'file_error'/2
				(FileName, Error)
		    in  {_cor3,{'cache',Fd,0,[]}}
	      end
	end
'write_cache_close'/3 =
    %% Line 1546
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fd,_X_FileName,[]> when 'true' ->
	      %% Line 1547
	      {'cache',Fd,0,[]}
	  %% Line 1548
	  <Fd,FileName,C> when 'true' ->
	      %% Line 1549
	      case call 'file':'write'
		       (Fd, C) of
		%% Line 1550
		<'ok'> when 'true' ->
		    {'cache',Fd,0,[]}
		%% Line 1551
		<Error> when 'true' ->
		    apply 'file_error_close'/3
			(Fd, FileName, Error)
	      end
	end
'file_error'/2 =
    %% Line 1556
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FileName,{'error',Error}> when 'true' ->
	      %% Line 1557
	      call 'erlang':'throw'
		  ({'error',{'file_error',FileName,Error}})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'file_error',2}}] )
	    -| ['compiler_generated'] )
	end
'file_error_close'/3 =
    %% Line 1561
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fd,FileName,{'error',Error}> when 'true' ->
	      let <_X_> =
		  %% Line 1562
		  ( call 'file':'close'
			(Fd)
		    -| ['result_not_wanted'] )
	      in  %% Line 1563
		  call 'erlang':'throw'
		      ({'error',{'file_error',FileName,Error}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'file_error_close',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('disk_log_1')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('disk_log_1', _cor0)
end