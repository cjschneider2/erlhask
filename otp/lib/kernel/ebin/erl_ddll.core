module 'erl_ddll' ['demonitor'/1,
		   'format_error'/1,
		   'format_error_int'/1,
		   'info'/0,
		   'info'/1,
		   'info'/2,
		   'load'/2,
		   'load_driver'/2,
		   'loaded_drivers'/0,
		   'module_info'/0,
		   'module_info'/1,
		   'monitor'/2,
		   'reload'/2,
		   'reload_driver'/2,
		   'start'/0,
		   'stop'/0,
		   'try_load'/3,
		   'try_unload'/2,
		   'unload'/1,
		   'unload_driver'/1]
    attributes [%% Line 32
		'type' =
		    %% Line 32
		    [{'path',{'type',32,'union',[{'type',32,'string',[]}|[{'type',32,'atom',[]}]]},[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'driver',{'type',33,'union',[{'type',33,'iolist',[]}|[{'type',33,'atom',[]}]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'demonitor',1},[{'type',41,'bounded_fun',[{'type',41,'fun',[{'type',41,'product',[{'var',41,'MonitorRef'}]}|[{'atom',41,'ok'}]]}|[[{'type',42,'constraint',[{'atom',42,'is_subtype'}|[[{'var',42,'MonitorRef'}|[{'type',42,'reference',[]}]]]]}]]]}]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'info',2},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'Name'}|[{'var',47,'Tag'}]]}|[{'var',47,'Value'}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Name'}|[{'type',48,'driver',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Tag'}|[{'type',49,'union',[{'atom',49,'processes'}|[{'atom',49,'driver_options'}|[{'atom',49,'port_count'}|[{'atom',49,'linked_in_driver'}|[{'atom',50,'permanent'}|[{'atom',50,'awaiting_load'}|[{'atom',50,'awaiting_unload'}]]]]]]]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Value'}|[{'type',51,'term',[]}]]]]}]]]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'format_error_int',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'ErrSpec'}]}|[{'type',56,'string',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'ErrSpec'}|[{'type',57,'term',[]}]]]]}]]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'monitor',2},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'Tag'}|[{'var',62,'Item'}]]}|[{'var',62,'MonitorRef'}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Tag'}|[{'atom',63,'driver'}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Item'}|[{'type',64,'tuple',[{'var',64,'Name'}|[{'var',64,'When'}]]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Name'}|[{'type',65,'driver',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'When'}|[{'type',66,'union',[{'atom',66,'loaded'}|[{'atom',66,'unloaded'}|[{'atom',66,'unloaded_only'}]]]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'MonitorRef'}|[{'type',67,'reference',[]}]]]]}]]]]]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'try_load',3},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'Path'}|[{'var',72,'Name'}|[{'var',72,'OptionList'}]]]}|[{'type',73,'union',[{'type',73,'tuple',[{'atom',73,'ok'}|[{'var',73,'Status'}]]}|[{'type',74,'tuple',[{'atom',74,'ok'}|[{'var',74,'PendingStatus'}|[{'var',74,'Ref'}]]]}|[{'type',75,'tuple',[{'atom',75,'error'}|[{'var',75,'ErrorDesc'}]]}]]]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Path'}|[{'type',76,'path',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Name'}|[{'type',77,'driver',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'OptionList'}|[{'type',78,'list',[{'var',78,'Option'}]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Option'}|[{'type',79,'union',[{'type',79,'tuple',[{'atom',79,'driver_options'}|[{'var',79,'DriverOptionList'}]]}|[{'type',80,'tuple',[{'atom',80,'monitor'}|[{'var',80,'MonitorOption'}]]}|[{'type',81,'tuple',[{'atom',81,'reload'}|[{'var',81,'ReloadOption'}]]}]]]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'DriverOptionList'}|[{'type',82,'list',[{'var',82,'DriverOption'}]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'DriverOption'}|[{'atom',83,'kill_ports'}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'MonitorOption'}|[{'type',84,'union',[{'atom',84,'pending_driver'}|[{'atom',84,'pending'}]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'ReloadOption'}|[{'type',85,'union',[{'atom',85,'pending_driver'}|[{'atom',85,'pending'}]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Status'}|[{'type',86,'union',[{'atom',86,'loaded'}|[{'atom',86,'already_loaded'}|[{'var',86,'PendingStatus'}]]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'PendingStatus'}|[{'type',87,'union',[{'atom',87,'pending_driver'}|[{'atom',87,'pending_process'}]]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Ref'}|[{'type',88,'reference',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'ErrorDesc'}|[{'type',89,'union',[{'var',89,'ErrorAtom'}|[{'var',89,'OpaqueError'}]]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'ErrorAtom'}|[{'type',90,'union',[{'atom',90,'linked_in_driver'}|[{'atom',90,'inconsistent'}|[{'atom',90,'permanent'}|[{'atom',91,'not_loaded_by_this_process'}|[{'atom',91,'not_loaded'}|[{'atom',92,'pending_reload'}|[{'atom',92,'pending_process'}]]]]]]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'OpaqueError'}|[{'type',93,'term',[]}]]]]}]]]]]]]]]]]]]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'try_unload',2},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'Name'}|[{'var',98,'OptionList'}]]}|[{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'ok'}|[{'var',99,'Status'}]]}|[{'type',100,'tuple',[{'atom',100,'ok'}|[{'var',100,'PendingStatus'}|[{'var',100,'Ref'}]]]}|[{'type',101,'tuple',[{'atom',101,'error'}|[{'var',101,'ErrorAtom'}]]}]]]}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Name'}|[{'type',102,'driver',[]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'OptionList'}|[{'type',103,'list',[{'var',103,'Option'}]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Option'}|[{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'monitor'}|[{'var',104,'MonitorOption'}]]}|[{'atom',104,'kill_ports'}]]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'MonitorOption'}|[{'type',105,'union',[{'atom',105,'pending_driver'}|[{'atom',105,'pending'}]]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Status'}|[{'type',106,'union',[{'atom',106,'unloaded'}|[{'var',106,'PendingStatus'}]]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'PendingStatus'}|[{'type',107,'union',[{'atom',107,'pending_driver'}|[{'atom',107,'pending_process'}]]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Ref'}|[{'type',108,'reference',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'ErrorAtom'}|[{'type',109,'union',[{'atom',109,'linked_in_driver'}|[{'atom',109,'not_loaded'}|[{'atom',110,'not_loaded_by_this_process'}|[{'atom',110,'permanent'}]]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'loaded_drivers',0},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[]}|[{'type',115,'tuple',[{'atom',115,'ok'}|[{'var',115,'Drivers'}]]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Drivers'}|[{'type',116,'list',[{'var',116,'Driver'}]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Driver'}|[{'type',117,'string',[]}]]]]}]]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'start',0},[{'type',125,'fun',[{'type',125,'product',[]}|[{'type',125,'tuple',[{'atom',125,'error'}|[{'type',125,'tuple',[{'atom',125,'already_started'}|[{'atom',125,'undefined'}]]}]]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'stop',0},[{'type',130,'fun',[{'type',130,'product',[]}|[{'atom',130,'ok'}]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'load_driver',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'Path'}|[{'var',135,'Name'}]]}|[{'type',135,'union',[{'atom',135,'ok'}|[{'type',135,'tuple',[{'atom',135,'error'}|[{'var',135,'ErrorDesc'}]]}]]}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Path'}|[{'type',136,'path',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Name'}|[{'type',137,'driver',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'ErrorDesc'}|[{'type',138,'term',[]}]]]]}]]]]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'load',2},[{'type',143,'bounded_fun',[{'type',143,'fun',[{'type',143,'product',[{'var',143,'Path'}|[{'var',143,'Name'}]]}|[{'type',143,'union',[{'atom',143,'ok'}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'var',143,'ErrorDesc'}]]}]]}]]}|[[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Path'}|[{'type',144,'path',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Name'}|[{'type',145,'driver',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'ErrorDesc'}|[{'type',146,'term',[]}]]]]}]]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'unload_driver',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'Name'}]}|[{'type',195,'union',[{'atom',195,'ok'}|[{'type',195,'tuple',[{'atom',195,'error'}|[{'var',195,'ErrorDesc'}]]}]]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Name'}|[{'type',196,'driver',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'ErrorDesc'}|[{'type',197,'term',[]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'unload',1},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'Name'}]}|[{'type',202,'union',[{'atom',202,'ok'}|[{'type',202,'tuple',[{'atom',202,'error'}|[{'var',202,'ErrorDesc'}]]}]]}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Name'}|[{'type',203,'driver',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'ErrorDesc'}|[{'type',204,'term',[]}]]]]}]]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'reload',2},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Path'}|[{'var',209,'Name'}]]}|[{'type',209,'union',[{'atom',209,'ok'}|[{'type',209,'tuple',[{'atom',209,'error'}|[{'var',209,'ErrorDesc'}]]}]]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Path'}|[{'type',210,'path',[]}]]]]}|[{'type',211,'constraint',[{'atom',211,'is_subtype'}|[[{'var',211,'Name'}|[{'type',211,'driver',[]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'ErrorDesc'}|[{'type',212,'union',[{'atom',212,'pending_process'}|[{'var',212,'OpaqueError'}]]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'OpaqueError'}|[{'type',213,'term',[]}]]]]}]]]]]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'reload_driver',2},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'Path'}|[{'var',218,'Name'}]]}|[{'type',218,'union',[{'atom',218,'ok'}|[{'type',218,'tuple',[{'atom',218,'error'}|[{'var',218,'ErrorDesc'}]]}]]}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Path'}|[{'type',219,'path',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Name'}|[{'type',220,'driver',[]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'ErrorDesc'}|[{'type',221,'union',[{'atom',221,'pending_process'}|[{'var',221,'OpaqueError'}]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'OpaqueError'}|[{'type',222,'term',[]}]]]]}]]]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'format_error',1},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'ErrorDesc'}]}|[{'type',228,'string',[]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'ErrorDesc'}|[{'type',229,'term',[]}]]]]}]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'info',1},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'Name'}]}|[{'var',241,'InfoList'}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Name'}|[{'type',242,'driver',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'InfoList'}|[{'type',243,'nonempty_list',[{'var',243,'InfoItem'}]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'InfoItem'}|[{'type',244,'tuple',[{'ann_type',244,[{'var',244,'Tag'}|[{'type',244,'atom',[]}]]}|[{'ann_type',244,[{'var',244,'Value'}|[{'type',244,'term',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'info',0},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[]}|[{'var',255,'AllInfoList'}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'AllInfoList'}|[{'type',256,'list',[{'var',256,'DriverInfo'}]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'DriverInfo'}|[{'type',257,'tuple',[{'var',257,'DriverName'}|[{'var',257,'InfoList'}]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'DriverName'}|[{'type',258,'string',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'InfoList'}|[{'type',259,'list',[{'var',259,'InfoItem'}]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'InfoItem'}|[{'type',260,'tuple',[{'ann_type',260,[{'var',260,'Tag'}|[{'type',260,'atom',[]}]]}|[{'ann_type',260,[{'var',260,'Value'}|[{'type',260,'term',[]}]]}]]}]]]]}]]]]]]]}]}]]
'demonitor'/1 =
    %% Line 44
    fun (_cor0) ->
	%% Line 45
	call 'erlang':'nif_error'
	    ('undef')
'info'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	%% Line 54
	call 'erlang':'nif_error'
	    ('undef')
'format_error_int'/1 =
    %% Line 59
    fun (_cor0) ->
	%% Line 60
	call 'erlang':'nif_error'
	    ('undef')
'monitor'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	%% Line 70
	call 'erlang':'nif_error'
	    ('undef')
'try_load'/3 =
    %% Line 95
    fun (_cor2,_cor1,_cor0) ->
	%% Line 96
	call 'erlang':'nif_error'
	    ('undef')
'try_unload'/2 =
    %% Line 112
    fun (_cor1,_cor0) ->
	%% Line 113
	call 'erlang':'nif_error'
	    ('undef')
'loaded_drivers'/0 =
    %% Line 119
    fun () ->
	%% Line 120
	call 'erlang':'nif_error'
	    ('undef')
'start'/0 =
    %% Line 127
    fun () ->
	%% Line 128
	{'error',{'already_started','undefined'}}
'stop'/0 =
    %% Line 132
    fun () ->
	%% Line 133
	'ok'
'load_driver'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	%% Line 141
	apply 'do_load_driver'/3
	    (_cor1, _cor0, [{'driver_options',['kill_ports']}])
'load'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	%% Line 149
	apply 'do_load_driver'/3
	    (_cor1, _cor0, [])
'do_load_driver'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 152
	    [{'monitor','pending_driver'}|_cor0]
	in  %% Line 152
	    case call 'erl_ddll':'try_load'
		     (_cor2, _cor1, _cor3) of
	      %% Line 153
	      <{'error','inconsistent'}> when 'true' ->
		  %% Line 154
		  {'error','bad_driver_name'}
	      %% Line 155
	      <{'error',What}> when 'true' ->
		  %% Line 156
		  {'error',What}
	      %% Line 157
	      <{'ok','already_loaded'}> when 'true' ->
		  %% Line 158
		  'ok'
	      %% Line 159
	      <{'ok','loaded'}> when 'true' ->
		  %% Line 160
		  'ok'
	      %% Line 161
	      <{'ok','pending_driver',Ref}> when 'true' ->
		  %% Line 162
		  receive
		    %% Line 163
		    <{'DOWN',_cor8,'driver',_cor9,'load_cancelled'}>
			when call 'erlang':'=:='
			      (_cor8,
			       Ref) ->
			%% Line 164
			{'error','load_cancelled'}
		    %% Line 165
		    <{'UP',_cor10,'driver',_cor11,'permanent'}>
			when call 'erlang':'=:='
			      (_cor10,
			       Ref) ->
			%% Line 166
			{'error','permanent'}
		    %% Line 167
		    <{'DOWN',_cor12,'driver',_cor13,{'load_failure',Failure}}>
			when call 'erlang':'=:='
			      (_cor12,
			       Ref) ->
			%% Line 168
			{'error',Failure}
		    %% Line 169
		    <{'UP',_cor14,'driver',_cor15,'loaded'}>
			when call 'erlang':'=:='
			      (_cor14,
			       Ref) ->
			%% Line 170
			'ok'
		  after 'infinity' ->
		    'true'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'do_unload_driver'/2 =
    %% Line 174
    fun (_cor1,_cor0) ->
	%% Line 175
	case call 'erl_ddll':'try_unload'
		 (_cor1, _cor0) of
	  %% Line 176
	  <{'error',What}> when 'true' ->
	      %% Line 177
	      {'error',What}
	  %% Line 178
	  <{'ok','pending_process'}> when 'true' ->
	      %% Line 179
	      'ok'
	  %% Line 180
	  <{'ok','unloaded'}> when 'true' ->
	      %% Line 181
	      'ok'
	  %% Line 182
	  <{'ok','pending_driver'}> when 'true' ->
	      %% Line 183
	      'ok'
	  %% Line 184
	  <{'ok','pending_driver',Ref}> when 'true' ->
	      %% Line 185
	      receive
		%% Line 186
		<{'UP',_cor5,'driver',_cor6,'permanent'}>
		    when call 'erlang':'=:='
			  (_cor5,
			   Ref) ->
		    %% Line 187
		    {'error','permanent'}
		%% Line 188
		<{'UP',_cor7,'driver',_cor8,'unload_cancelled'}>
		    when call 'erlang':'=:='
			  (_cor7,
			   Ref) ->
		    %% Line 189
		    'ok'
		%% Line 190
		<{'DOWN',_cor9,'driver',_cor10,'unloaded'}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Ref) ->
		    %% Line 191
		    'ok'
	      after 'infinity' ->
		'true'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'unload_driver'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	apply 'do_unload_driver'/2
	    (_cor0, [{'monitor','pending_driver'}|['kill_ports']])
'unload'/1 =
    %% Line 206
    fun (_cor0) ->
	%% Line 207
	apply 'do_unload_driver'/2
	    (_cor0, [])
'reload'/2 =
    %% Line 215
    fun (_cor1,_cor0) ->
	%% Line 216
	apply 'do_load_driver'/3
	    (_cor1, _cor0, [{'reload','pending_driver'}])
'reload_driver'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	%% Line 225
	apply 'do_load_driver'/3
	    (_cor1, _cor0, [{'reload','pending_driver'}|[{'driver_options',['kill_ports']}]])
'format_error'/1 =
    %% Line 231
    fun (_cor0) ->
	%% Line 232
	case _cor0 of
	  %% Line 235
	  <'load_cancelled'> when 'true' ->
	      %% Line 236
	      [76|[111|[97|[100|[105|[110|[103|[32|[119|[97|[115|[32|[99|[97|[110|[99|[101|[108|[108|[101|[100|[32|[102|[114|[111|[109|[32|[111|[116|[104|[101|[114|[32|[112|[114|[111|[99|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 237
	  <_cor3> when 'true' ->
	      %% Line 238
	      call 'erl_ddll':'format_error_int'
		  (_cor0)
	end
'info'/1 =
    %% Line 246
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 247
	    call 'erl_ddll':'info'
		(_cor0, 'processes')
	in  let <_cor2> =
		%% Line 248
		call 'erl_ddll':'info'
		    (_cor0, 'driver_options')
	    in  let <_cor3> =
		    %% Line 249
		    call 'erl_ddll':'info'
			(_cor0, 'port_count')
		in  let <_cor4> =
			%% Line 250
			call 'erl_ddll':'info'
			    (_cor0, 'linked_in_driver')
		    in  let <_cor5> =
			    %% Line 251
			    call 'erl_ddll':'info'
				(_cor0, 'permanent')
			in  let <_cor6> =
				%% Line 252
				call 'erl_ddll':'info'
				    (_cor0, 'awaiting_load')
			    in  let <_cor7> =
				    %% Line 253
				    call 'erl_ddll':'info'
					(_cor0, 'awaiting_unload')
				in  %% Line 247
				    [{'processes',_cor1}|%% Line 248
							 [{'driver_options',_cor2}|%% Line 249
										   [{'port_count',_cor3}|%% Line 250
													 [{'linked_in_driver',_cor4}|%% Line 251
																     [{'permanent',_cor5}|%% Line 252
																			  [{'awaiting_load',_cor6}|%% Line 253
																						   [{'awaiting_unload',_cor7}|[]]]]]]]]
'info'/0 =
    %% Line 262
    fun () ->
	%% Line 263
	case call 'erl_ddll':'loaded_drivers'
		 () of
	  <{'ok',DriverList}> when 'true' ->
	      %% Line 264
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor7) ->
			    case _cor7 of
			      <[X|_cor2]> when 'true' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor8) ->
						case _cor8 of
						  <[%% Line 265
						    Y|_cor4]>
						      when %% Line 266
							call 'erlang':'is_list'
							    (Y) ->
						      %% Line 266
						      ( case call 'lists':'member'
								 ({'linked_in_driver','true'}, Y) of
							  <'false'> when 'true' ->
							      let <_cor9> =
								  apply 'lc$^1'/1
								      (_cor4)
							      in  ( [{X,Y}|_cor9]
								    -| ['compiler_generated'] )
							  ( <'true'> when 'true' ->
								apply 'lc$^1'/1
								    (_cor4)
							    -| ['compiler_generated'] )
							  ( <_cor_variable> when 'true' ->
								call 'erlang':'error'
								    ('badarg')
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
						  ( <[%% Line 265
						      Y|_cor4]> when 'true' ->
							%% Line 265
							apply 'lc$^1'/1
							    (_cor4)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor2)
						  ( <_cor8> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor8})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor5> =
					    catch
						%% Line 265
						apply 'info'/1
						    (X)
					in  apply 'lc$^1'/1
						(%% Line 265
						 [_cor5|[]])
				    -| ['list_comprehension'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor7})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(DriverList)
		-| ['list_comprehension'] )
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_ddll')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_ddll', _cor0)
end