module 'inet_gethost_native' ['control'/1,
			      'gethostbyaddr'/1,
			      'gethostbyname'/1,
			      'gethostbyname'/2,
			      'init'/1,
			      'main_loop'/1,
			      'module_info'/0,
			      'module_info'/1,
			      'run_once'/0,
			      'server_init'/2,
			      'start_link'/0,
			      'start_raw'/0,
			      'system_code_change'/4,
			      'system_continue'/3,
			      'system_terminate'/4,
			      'terminate'/2]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['supervisor_bridge'],
		%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','hostent'},[{'typed_record_field',{'record_field',24,{'atom',24,'h_name'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'remote_type',24,[{'atom',24,'inet'}|[{'atom',24,'hostname'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'h_aliases'},{'nil',25}},{'type',25,'list',[{'remote_type',25,[{'atom',25,'inet'}|[{'atom',25,'hostname'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'h_addrtype'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'inet'}|[{'atom',26,'inet6'}]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'h_length'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'h_addr_list'},{'nil',28}},{'type',28,'list',[{'remote_type',28,[{'atom',28,'inet'}|[{'atom',28,'ip_address'}|[[]]]]}]}}]]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','request'},[{'record_field',79,{'atom',79,'rid'}}|[{'record_field',80,{'atom',80,'op'}}|[{'record_field',81,{'atom',81,'proto'}}|[{'record_field',82,{'atom',82,'rdata'}}|[{'record_field',83,{'atom',83,'clients'},{'nil',83}}]]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','statistics'},[{'record_field',89,{'atom',89,'netdb_timeout'},{'integer',89,0}}|[{'record_field',90,{'atom',90,'netdb_internal'},{'integer',90,0}}|[{'record_field',91,{'atom',91,'port_crash'},{'integer',91,0}}|[{'record_field',92,{'atom',92,'notsup'},{'integer',92,0}}|[{'record_field',93,{'atom',93,'host_not_found'},{'integer',93,0}}|[{'record_field',94,{'atom',94,'try_again'},{'integer',94,0}}|[{'record_field',95,{'atom',95,'no_recovery'},{'integer',95,0}}|[{'record_field',96,{'atom',96,'no_data'},{'integer',96,0}}]]]]]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','state'},[{'record_field',101,{'atom',101,'port'},{'atom',101,'noport'}}|[{'record_field',102,{'atom',102,'timeout'},{'integer',102,8000}}|[{'record_field',103,{'atom',103,'requests'}}|[{'record_field',104,{'atom',104,'req_index'}}|[{'record_field',105,{'atom',105,'parent'}}|[{'record_field',106,{'atom',106,'pool_size'},{'integer',106,4}}|[{'record_field',107,{'atom',107,'statistics'}}]]]]]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'state',{'type',109,'record',[{'atom',109,'state'}]},[]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'init',1},[{'type',112,'fun',[{'type',112,'product',[{'type',112,'nil',[]}]}|[{'type',112,'union',[{'type',112,'tuple',[{'atom',112,'ok'}|[{'type',112,'pid',[]}|[{'type',112,'pid',[]}]]]}|[{'type',112,'tuple',[{'atom',112,'error'}|[{'type',112,'term',[]}]]}]]}]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'terminate',2},[{'type',160,'fun',[{'type',160,'product',[{'type',160,'term',[]}|[{'type',160,'pid',[]}]]}|[{'atom',160,'ok'}]]}]}],
		%% Line 438
		'spec' =
		    %% Line 438
		    [{{'system_code_change',4},[{'type',438,'fun',[{'type',438,'product',[{'type',438,'state',[]}|[{'type',438,'module',[]}|[{'type',438,'term',[]}|[{'type',438,'term',[]}]]]]}|[{'type',438,'tuple',[{'atom',438,'ok'}|[{'type',438,'state',[]}]]}]]}]}]]
'init'/1 =
    %% Line 114
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      let <Ref> =
		  %% Line 115
		  call 'erlang':'make_ref'
		      ()
	      in  let <SaveTE> =
		      %% Line 116
		      call 'erlang':'process_flag'
			  ('trap_exit', 'true')
		  in  let <_cor3> =
			  %% Line 117
			  call 'erlang':'self'
			      ()
		      in  let <Pid> =
			      %% Line 117
			      call 'erlang':'spawn_link'
				  ('inet_gethost_native', 'server_init', [_cor3|[Ref|[]]])
			  in  %% Line 118
			      receive
				%% Line 119
				<_cor6>
				    when call 'erlang':'=:='
					  (_cor6,
					   Ref) ->
				    do  %% Line 120
					call 'erlang':'process_flag'
					    ('trap_exit', SaveTE)
					%% Line 121
					{'ok',Pid,Pid}
				%% Line 122
				<{'EXIT',_cor7,Message}>
				    when call 'erlang':'=:='
					  (_cor7,
					   Pid) ->
				    do  %% Line 123
					call 'erlang':'process_flag'
					    ('trap_exit', SaveTE)
					%% Line 124
					{'error',Message}
			      after %% Line 125
				    10000 ->
				do  %% Line 126
				    call 'erlang':'process_flag'
					('trap_exit', SaveTE)
				    %% Line 127
				    {'error',{'timeout','inet_gethost_native'}}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'start_link'/0 =
    %% Line 130
    fun () ->
	%% Line 131
	call 'supervisor_bridge':'start_link'
	    ({'local','inet_gethost_native_sup'}, 'inet_gethost_native', [])
'start_raw'/0 =
    %% Line 135
    fun () ->
	%% Line 136
	call 'erlang':'spawn'
	    ('inet_gethost_native', 'run_once', [])
'run_once'/0 =
    %% Line 138
    fun () ->
	let <_cor1> =
	    %% Line 139
	    apply 'get_poolsize'/0
		()
	in  let <_cor0> =
		%% Line 139
		apply 'get_extra_args'/0
		    ()
	    in  let <Port> =
		    %% Line 139
		    apply 'do_open_port'/2
			(_cor1, _cor0)
		in  let <_cor3> =
			%% Line 140
			call 'inet_db':'res_option'
			    ('timeout')
		    in  let <Timeout> =
			    %% Line 140
			    call 'erlang':'*'
				(_cor3, 4)
			in  let <Pid,R,Request> =
				%% Line 142
				receive
				  %% Line 143
				  <{{Pid0,R0},{1,Proto0,Name0}}> when 'true' ->
				      let <_cor5> =
					  %% Line 145
					  #{#<1>(32,1,'integer',['unsigned'|['big']]),
					    #<1>(8,1,'integer',['unsigned'|['big']]),
					    #<Proto0>(8,1,'integer',['unsigned'|['big']])}#
				      in  %% Line 144
					  <Pid0,R0,%% Line 145
						   [_cor5|[Name0|[0]]]>
				  %% Line 146
				  <{{Pid1,R1},{2,Proto1,Data1}}> when 'true' ->
				      let <_cor6> =
					  %% Line 148
					  #{#<1>(32,1,'integer',['unsigned'|['big']]),
					    #<2>(8,1,'integer',['unsigned'|['big']]),
					    #<Proto1>(8,1,'integer',['unsigned'|['big']]),
					    #<Data1>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 147
					  <Pid1,R1,_cor6>
				after %% Line 149
				      Timeout ->
				  %% Line 150
				  call 'erlang':'exit'
				      ('normal')
			    in  do  catch
					%% Line 152
					call 'erlang':'port_command'
					    (Port, Request)
				    %% Line 153
				    receive
				      %% Line 154
				      <{_cor9,{'data',#{#<1>(32,1,'integer',['unsigned'|['big']]),
							#<BinReply>('all',8,'binary',['unsigned'|['big']])}#}}>
					  when call 'erlang':'=:='
						(_cor9,
						 Port) ->
					  %% Line 155
					  call 'erlang':'!'
					      (Pid, {R,{'ok',BinReply}})
				    after %% Line 156
					  Timeout ->
				      %% Line 157
				      call 'erlang':'!'
					  (Pid, {R,{'error','timeout'}})
'terminate'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	do  catch
		%% Line 163
		call 'erlang':'exit'
		    (_cor0, 'kill')
	    %% Line 164
	    'ok'
'server_init'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	do  %% Line 170
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    do  %% Line 171
		case call 'erlang':'whereis'
			 ('inet_gethost_native') of
		  %% Line 172
		  <'undefined'> when 'true' ->
		      let <_cor3> =
			  catch
			      let <_cor2> =
				  %% Line 173
				  call 'erlang':'self'
				      ()
			      in  %% Line 173
				  call 'erlang':'register'
				      ('inet_gethost_native', _cor2)
		      in  %% Line 173
			  case _cor3 of
			    %% Line 174
			    <'true'> when 'true' ->
				%% Line 175
				call 'erlang':'!'
				    (_cor1, _cor0)
			    %% Line 176
			    <_cor17> when 'true' ->
				let <_cor4> =
				    %% Line 177
				    call 'erlang':'whereis'
					('inet_gethost_native')
				in  %% Line 177
				    call 'erlang':'exit'
					({'already_started',_cor4})
			  end
		  %% Line 179
		  <Winner> when 'true' ->
		      %% Line 180
		      call 'erlang':'exit'
			  ({'already_started',Winner})
		end
		let <Poolsize> =
		    %% Line 182
		    apply 'get_poolsize'/0
			()
		in  let <_cor8> =
			%% Line 183
			apply 'get_extra_args'/0
			    ()
		    in  let <Port> =
			    %% Line 183
			    apply 'do_open_port'/2
				(Poolsize, _cor8)
			in  let <_cor10> =
				%% Line 184
				call 'inet_db':'res_option'
				    ('timeout')
			    in  let <Timeout> =
				    %% Line 184
				    call 'erlang':'*'
					(_cor10, 4)
				in  do  %% Line 185
					call 'erlang':'put'
					    ('rid', 0)
					do  %% Line 186
					    call 'erlang':'put'
						('num_requests', 0)
					    let <RequestTab> =
						%% Line 187
						call 'ets':'new'
						    ('ign_requests', [{'keypos',2}|['set'|['protected']]])
					    in  let <RequestIndex> =
						    %% Line 188
						    call 'ets':'new'
							('ign_req_index', ['set'|['protected']])
						in  let <State> =
							%% Line 189
							{'state',Port,Timeout,RequestTab,%% Line 190
											 RequestIndex,_cor1,%% Line 191
													    Poolsize,%% Line 192
														     {'statistics',0,0,0,0,0,0,0,0}}
						    in  %% Line 194
							apply 'main_loop'/1
							    (State)
'main_loop'/1 =
    %% Line 196
    fun (_cor0) ->
	%% Line 197
	receive
	  %% Line 198
	  <Any> when 'true' ->
	      %% Line 199
	      apply 'handle_message'/2
		  (Any, _cor0)
	after 'infinity' ->
	  'true'
'handle_message'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Client = {Pid,_cor51},R = {1,Proto,Name}},%% Line 203
						      State>
	      when %% Line 203
		call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor2> =
		  %% Line 205
		  #{#<1>(8,1,'integer',['unsigned'|['big']]),
		    #<Proto>(8,1,'integer',['unsigned'|['big']])}#
	      in  let <NewState> =
		      %% Line 204
		      apply 'do_handle_call'/4
			  (R, Client, State, %% Line 205
					     [_cor2|[Name|[0]]])
		  in  %% Line 206
		      apply 'main_loop'/1
			  (NewState)
	  %% Line 208
	  <{Client = {Pid,_cor52},R = {2,Proto,Data}},%% Line 209
						      State>
	      when %% Line 209
		call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor4> =
		  %% Line 211
		  #{#<2>(8,1,'integer',['unsigned'|['big']]),
		    #<Proto>(8,1,'integer',['unsigned'|['big']]),
		    #<Data>('all',8,'binary',['unsigned'|['big']])}#
	      in  let <NewState> =
		      %% Line 210
		      apply 'do_handle_call'/4
			  (R, Client, State, _cor4)
		  in  %% Line 212
		      apply 'main_loop'/1
			  (NewState)
	  %% Line 214
	  <{{Pid,Ref},{4,Ctl,Data}},State>
	      when %% Line 215
		call 'erlang':'is_pid'
		    (Pid) ->
	      do  catch
		      %% Line 216
		      ( case State of
			  ( <( {'state',_rec0,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor6> =
				    %% Line 217
				    #{#<4294967295>(32,1,'integer',['unsigned'|['big']]),
				      #<4>(8,1,'integer',['unsigned'|['big']]),
				      #<%% Line 218
					Ctl>(%% Line 218
					     8,1,'integer',['unsigned'|['big']]),
				      #<%% Line 218
					Data>(%% Line 218
					      'all',8,'binary',['unsigned'|['big']])}#
				in  call 'erlang':'port_command'
					(_rec0, _cor6)
			    -| ['compiler_generated'] )
			  ( <_cor59> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  do  %% Line 219
		      call 'erlang':'!'
			  (Pid, {Ref,'ok'})
		      %% Line 220
		      apply 'main_loop'/1
			  (State)
	  %% Line 222
	  <{{Pid,Ref},'restart_port'},State>
	      when %% Line 223
		call 'erlang':'is_pid'
		    (Pid) ->
	      let <NewPort> =
		  %% Line 224
		  apply 'restart_port'/1
		      (State)
	      in  do  %% Line 225
		      call 'erlang':'!'
			  (Pid, {Ref,'ok'})
		      %% Line 226
		      case State of
			<{'state',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}> when 'true' ->
			    let <_cor12> =
				call 'erlang':'setelement'
				    (2, State, NewPort)
			    in  apply 'main_loop'/1
				    (_cor12)
			( <_cor67> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 228
	  <{Port,{'data',Data}},State = {'state',_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}>
	      when call 'erlang':'=:='
		    (_cor68,
		     Port) ->
	      let <_cor32> =
		  %% Line 229
		  case ( Data
			 -| ['reuse_for_context'] ) of
		    %% Line 230
		    <#{#<RID>(32,1,'integer',['unsigned'|['big']]),
		       #<BinReply>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			%% Line 231
			case BinReply of
			  %% Line 232
			  <#{#<Unit>(8,1,'integer',['unsigned'|['big']]),
			     #<_cor75>('all',8,'binary',['unsigned'|['big']])}#>
			      when let <_cor13> =
				    call 'erlang':'=:='
					(Unit, 0)
				in  let <_cor14> =
					%% Line 233
					call 'erlang':'=:='
					    (Unit, 4)
				    in  let <_cor15> =
					    %% Line 234
					    call 'erlang':'=:='
						(Unit, 16)
					in  let <_cor16> =
						%% Line 233
						call 'erlang':'or'
						    (_cor14, _cor15)
					    in  call 'erlang':'or'
						    (_cor13, _cor16) ->
			      %% Line 235
			      case apply 'pick_request'/2
				       (State, RID) of
				%% Line 236
				<'false'> when 'true' ->
				    %% Line 237
				    State
				%% Line 238
				<Req> when 'true' ->
				    let <_cor22> =
					%% Line 239
					( fun (_cor20) ->
					      case _cor20 of
						<{P,R,TR}> when 'true' ->
						    let <_X_> =
							%% Line 240
							( call 'erlang':'cancel_timer'
							      (TR)
							  -| ['result_not_wanted'] )
						    in  %% Line 241
							call 'erlang':'!'
							    (P, {R,%% Line 242
								   {'ok',%% Line 243
									 BinReply}})
						( <_cor21> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor21})
							-| [{'function_name',{'-handle_message/2-fun-0-',1}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-handle_message/2-fun-0-'}}] )
				    in  %% Line 245
					( case Req of
					    ( <( {'request',_cor76,_cor77,_cor78,_cor79,_rec2}
						 -| ['compiler_generated'] )> when 'true' ->
						  do  call 'lists':'foreach'
							  (_cor22, _rec2)
						      %% Line 246
						      State
					      -| ['compiler_generated'] )
					    ( <_cor80> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','request'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
			      end
			  %% Line 248
			  <_X_UnitError> when 'true' ->
			      let <NewPort> =
				  %% Line 251
				  apply 'restart_port'/1
				      (State)
			      in  %% Line 252
				  call 'erlang':'setelement'
				      (2, State, NewPort)
			end
		    %% Line 254
		    <_X_BasicFormatError> when 'true' ->
			let <NewPort> =
			    %% Line 255
			    apply 'restart_port'/1
				(State)
			in  %% Line 256
			    call 'erlang':'setelement'
				(2, State, NewPort)
		  end
	      in  %% Line 258
		  apply 'main_loop'/1
		      (_cor32)
	  %% Line 260
	  <{'EXIT',Port,_X_Reason},State = {'state',_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103}>
	      when call 'erlang':'=:='
		    (_cor97,
		     Port) ->
	      let <NewPort> =
		  %% Line 262
		  apply 'restart_port'/1
		      (State)
	      in  let <_cor37> =
		      %% Line 263
		      call 'erlang':'setelement'
			  (2, State, NewPort)
		  in  %% Line 263
		      apply 'main_loop'/1
			  (_cor37)
	  %% Line 265
	  <{Port,'eof'},State = {'state',_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118}>
	      when call 'erlang':'=:='
		    (_cor112,
		     Port) ->
	      let <NewPort> =
		  %% Line 267
		  apply 'restart_port'/1
		      (State)
	      in  let <_cor41> =
		      %% Line 268
		      call 'erlang':'setelement'
			  (2, State, NewPort)
		  in  %% Line 268
		      apply 'main_loop'/1
			  (_cor41)
	  %% Line 270
	  <{'timeout',Pid,RID},State> when 'true' ->
	      do  %% Line 271
		  case apply 'pick_client'/3
			   (State, RID, Pid) of
		    %% Line 272
		    <'false'> when 'true' ->
			'ok'
		    %% Line 274
		    <{'more',{P,R,_cor127}}> when 'true' ->
			%% Line 275
			call 'erlang':'!'
			    (P, {R,{'error','timeout'}})
		    %% Line 276
		    <{'last',{LP,LR,_cor128}}> when 'true' ->
			do  %% Line 277
			    call 'erlang':'!'
				(LP, {LR,{'error','timeout'}})
			    do  %% Line 279
				apply 'pick_request'/2
				    (State, RID)
				catch
				    %% Line 281
				    ( case State of
					( <( {'state',_rec7,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor43> =
						  %% Line 282
						  #{#<RID>(32,1,'integer',['unsigned'|['big']]),
						    #<3>(8,1,'integer',['unsigned'|['big']])}#
					      in  call 'erlang':'port_command'
						      (_rec7, _cor43)
					  -| ['compiler_generated'] )
					( <_cor135> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
		    ( <_cor46> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor46})
		      -| ['compiler_generated'] )
		  end
		  %% Line 284
		  apply 'main_loop'/1
		      (State)
	  %% Line 286
	  <{'system',From,Req},State> when 'true' ->
	      %% Line 287
	      ( case State of
		  ( <( {'state',_cor136,_cor137,_cor138,_cor139,_rec8,_cor140,_cor141}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'sys':'handle_system_msg'
			    (Req, From, _rec8, 'inet_gethost_native', [], %% Line 288
									  State)
		    -| ['compiler_generated'] )
		  ( <_cor142> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 290
	  <_cor143,State> when 'true' ->
	      %% Line 291
	      apply 'main_loop'/1
		  (State)
	end
'do_handle_call'/4 =
    %% Line 294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Req> =
	    %% Line 295
	    apply 'find_request'/2
		(_cor1, _cor3)
	in  %% Line 296
	    ( case _cor1 of
		( <( {'state',_cor39,_rec9,_cor40,_cor41,_cor42,_cor43,_cor44}
		     -| ['compiler_generated'] )> when 'true' ->
		      %% Line 297
		      case _cor2 of
			<{P,Ref}> when 'true' ->
			    let <_cor11> =
				%% Line 298
				call 'erlang':'self'
				    ()
			    in  %% Line 298
				( case Req of
				    ( <( {'request',_rec10,_cor46,_cor47,_cor48,_cor49}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <TR> =
					      call 'erlang':'send_after'
						  (_rec9, _cor11, {'timeout',P,_rec10})
					  in  let <Client> = {%% Line 299
						   P,%% Line 299
						     Ref,%% Line 299
							 TR}
					      in  do  %% Line 300
						      case _cor49 of
							%% Line 301
							<[]> when 'true' ->
							    let <_cor18> =
								%% Line 302
								#{#<_rec10>(32,1,'integer',['unsigned'|['big']])}#
							    in  let <RealRData> =
								    %% Line 302
								    [_cor18|_cor0]
								in  do  catch
									    %% Line 303
									    call 'erlang':'port_command'
										(_cor39, RealRData)
									let <_rec15> =
									    %% Line 304
									    [Client|[]]
									in  let <_cor25> =
										%% Line 304
										call 'erlang':'setelement'
										    (6, Req, _rec15)
									    in  %% Line 304
										call 'ets':'insert'
										    (_cor40, _cor25)
							%% Line 305
							<Tail> when 'true' ->
							    let <_rec18> =
								%% Line 306
								[Client|Tail]
							    in  let <_cor31> =
								    %% Line 306
								    call 'erlang':'setelement'
									(6, Req, _rec18)
								in  %% Line 306
								    call 'ets':'insert'
									(_cor40, _cor31)
						      end
						      _cor1
				      -| ['compiler_generated'] )
				    ( <_cor50> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','request'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
		  -| ['compiler_generated'] )
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'find_request'/2 =
    %% Line 310
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,R = {Op,Proto,Data}> when 'true' ->
	      %% Line 311
	      ( case State of
		  ( <( {'state',_cor18,_cor19,_cor20,_rec20,_cor21,_cor22,_cor23}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'lookup'
				 (_rec20, R) of
			  %% Line 312
			  <[{_cor25,Rid}|[]]>
			      when call 'erlang':'=:='
				    (_cor25,
				     R) ->
			      %% Line 313
			      case call 'ets':'lookup'
				       (_cor20, Rid) of
				<[Ret|[]]> when 'true' ->
				    %% Line 314
				    Ret
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 315
			  <[]> when 'true' ->
			      let <NRid> =
				  %% Line 316
				  apply 'get_rid'/0
				      ()
			      in  let <Req> =
				      %% Line 317
				      {'request',NRid,Op,Proto,Data,[]}
				  in  do  %% Line 318
					  call 'ets':'insert'
					      (_cor20, Req)
					  do  %% Line 319
					      call 'ets':'insert'
						  (_rec20, {R,NRid})
					      let <_cor13> =
						  %% Line 320
						  call 'erlang':'get'
						      ('num_requests')
					      in  let <_cor14> =
						      %% Line 320
						      call 'erlang':'+'
							  (_cor13, 1)
						  in  do  %% Line 320
							  call 'erlang':'put'
							      ('num_requests', _cor14)
							  %% Line 321
							  Req
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor24> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'find_request',2}}] )
	    -| ['compiler_generated'] )
	end
'pick_request'/2 =
    %% Line 324
    fun (_cor1,_cor0) ->
	%% Line 325
	( case _cor1 of
	    ( <( {'state',_cor13,_cor14,_rec24,_cor15,_cor16,_cor17,_cor18}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec24, _cor0) of
		    %% Line 326
		    <[]> when 'true' ->
			%% Line 327
			'false'
		    %% Line 328
		    <[R = {'request',_cor20,Op,Proto,Data,_cor21}|[]]>
			when call 'erlang':'=:='
			      (_cor20,
			       _cor0) ->
			do  %% Line 329
			    call 'ets':'delete'
				(_rec24, _cor0)
			    do  %% Line 330
				call 'ets':'delete'
				    (_cor15, {Op,Proto,Data})
				let <_cor8> =
				    %% Line 331
				    call 'erlang':'get'
					('num_requests')
				in  let <_cor9> =
					%% Line 331
					call 'erlang':'-'
					    (_cor8, 1)
				    in  do  %% Line 331
					    call 'erlang':'put'
						('num_requests', _cor9)
					    %% Line 332
					    R
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pick_client'/3 =
    %% Line 335
    fun (_cor2,_cor1,_cor0) ->
	%% Line 336
	( case _cor2 of
	    ( <( {'state',_cor19,_cor20,_rec27,_cor21,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec27, _cor1) of
		    %% Line 337
		    <[]> when 'true' ->
			%% Line 338
			'false'
		    %% Line 339
		    <[R|[]]> when 'true' ->
			%% Line 340
			( case R of
			    ( <( {'request',_cor26,_cor27,_cor28,_cor29,_rec28}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec28 of
				    %% Line 341
				    <[SoleClient|[]]> when 'true' ->
					%% Line 342
					{'last',SoleClient}
				    %% Line 344
				    <CList> when 'true' ->
					%% Line 345
					case call 'lists':'keyfind'
						 (_cor0, 1, CList) of
					  %% Line 346
					  <'false'> when 'true' ->
					      %% Line 347
					      'false'
					  %% Line 348
					  <Client> when 'true' ->
					      let <NCList> =
						  %% Line 349
						  call 'lists':'keydelete'
						      (_cor0, 1, CList)
					      in  let <_cor10> =
						      %% Line 351
						      call 'erlang':'setelement'
							  (6, R, NCList)
						  in  do  %% Line 350
							  call 'ets':'insert'
							      (_rec27, _cor10)
							  %% Line 352
							  {'more',Client}
					end
				  end
			      -| ['compiler_generated'] )
			    ( <_cor30> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','request'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_rid'/0 =
    %% Line 357
    fun () ->
	let <_cor0> =
	    %% Line 358
	    call 'erlang':'get'
		('rid')
	in  let <_cor1> =
		%% Line 358
		call 'erlang':'+'
		    (_cor0, 1)
	    in  let <New> =
		    %% Line 358
		    call 'erlang':'rem'
			(_cor1, 134217727)
		in  do  %% Line 359
			call 'erlang':'put'
			    ('rid', New)
			%% Line 360
			New
'foreach'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 364
	    call 'ets':'first'
		(_cor0)
	in  %% Line 364
	    apply 'foreach'/3
		(_cor1, _cor0, _cor2)
'foreach'/3 =
    %% Line 366
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Fun,_X_Table,'$end_of_table'> when 'true' ->
	      %% Line 367
	      'ok'
	  %% Line 368
	  <Fun,Table,Key> when 'true' ->
	      %% Line 369
	      case call 'ets':'lookup'
		       (Table, Key) of
		<[Object|[]]> when 'true' ->
		    do  %% Line 370
			apply Fun
			    (Object)
			let <_cor4> =
			    %% Line 371
			    call 'ets':'next'
				(Table, Key)
			in  %% Line 371
			    apply 'foreach'/3
				(Fun, Table, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'restart_port'/1 =
    %% Line 373
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Port,_cor11,Requests,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      do  catch
		      %% Line 374
		      call 'erlang':'port_close'
			  (Port)
		  let <_cor2> =
		      %% Line 375
		      apply 'get_poolsize'/0
			  ()
		  in  let <_cor1> =
			  %% Line 375
			  apply 'get_extra_args'/0
			      ()
		      in  let <NewPort> =
			      %% Line 375
			      apply 'do_open_port'/2
				  (_cor2, _cor1)
			  in  let <_cor9> =
				  %% Line 376
				  ( fun (_cor7) ->
					case _cor7 of
					  <{'request',Rid,Op,Proto,Rdata,_cor16}> when 'true' ->
					      %% Line 377
					      case Op of
						%% Line 378
						<1> when 'true' ->
						    let <_cor4> =
							%% Line 379
							#{#<Rid>(32,1,'integer',['unsigned'|['big']]),
							  #<1>(8,1,'integer',['unsigned'|['big']]),
							  #<%% Line 380
							    Proto>(%% Line 380
								   8,1,'integer',['unsigned'|['big']])}#
						    in  %% Line 379
							call 'erlang':'port_command'
							    (NewPort, [_cor4|%% Line 381
									     [Rdata|[0]]])
						%% Line 382
						<2> when 'true' ->
						    let <_cor5> =
							%% Line 384
							#{#<Rid>(32,1,'integer',['unsigned'|['big']]),
							  #<2>(8,1,'integer',['unsigned'|['big']]),
							  #<Proto>(8,1,'integer',['unsigned'|['big']]),
							  #<%% Line 385
							    Rdata>(%% Line 385
								   'all',8,'binary',['unsigned'|['big']])}#
						    in  %% Line 383
							call 'erlang':'port_command'
							    (NewPort, _cor5)
						( <_cor6> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor6})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor8> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor8})
						  -| [{'function_name',{'-restart_port/1-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-restart_port/1-fun-0-'}}] )
			      in  do  %% Line 376
				      apply 'foreach'/2
					  (_cor9, %% Line 388
						  Requests)
				      %% Line 389
				      NewPort
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'restart_port',1}}] )
	    -| ['compiler_generated'] )
	end
'do_open_port'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	%% Line 393
	try
	    let <_cor3> =
		%% Line 395
		call 'erlang':'integer_to_list'
		    (_cor1)
	    in  let <_cor2> =
		    %% Line 395
		    [32|_cor0]
		in  let <_cor4> =
			%% Line 395
			call 'erlang':'++'
			    (_cor3, _cor2)
		    in  let <_cor5> =
			    %% Line 395
			    [32|_cor4]
			in  let <_cor6> =
				%% Line 395
				call 'erlang':'++'
				    ([105|[110|[101|[116|[95|[103|[101|[116|[104|[111|[115|[116]]]]]]]]]]]], _cor5)
			    in  %% Line 394
				call 'erlang':'open_port'
				    ({'spawn',_cor6}, %% Line 397
						      [{'packet',4}|['eof'|['binary'|['overlapped_io']]]])
	of <_cor7> ->
	    _cor7
	catch <_cor10,_cor9,_cor8> ->
	    case <_cor10,_cor9,_cor8> of
	      %% Line 399
	      <'error',_cor18,_cor19> when 'true' ->
		  let <_cor12> =
		      %% Line 401
		      call 'erlang':'integer_to_list'
			  (_cor1)
		  in  let <_cor11> =
			  %% Line 402
			  [32|_cor0]
		      in  let <_cor13> =
			      %% Line 401
			      call 'erlang':'++'
				  (_cor12, _cor11)
			  in  let <_cor14> =
				  %% Line 401
				  [32|_cor13]
			      in  let <_cor15> =
				      %% Line 401
				      call 'erlang':'++'
					  ([105|[110|[101|[116|[95|[103|[101|[116|[104|[111|[115|[116]]]]]]]]]]]], _cor14)
				  in  %% Line 400
				      call 'erlang':'open_port'
					  ({'spawn',_cor15}, %% Line 403
							     [{'packet',4}|['eof'|['binary']]])
	      ( <_cor10,_cor9,_cor8> when 'true' ->
		    primop 'raise'
			(_cor8, _cor9)
		-| ['compiler_generated'] )
	    end
'get_extra_args'/0 =
    %% Line 406
    fun () ->
	let <_cor1> =
	    %% Line 407
	    case call 'application':'get_env'
		     ('kernel', 'gethost_prioritize') of
	      %% Line 408
	      <{'ok','false'}> when 'true' ->
		  %% Line 409
		  [32|[45|[110|[103]]]]
	      %% Line 410
	      <_cor5> when 'true' ->
		  %% Line 411
		  []
	    end
	in  %% Line 413
	    case call 'application':'get_env'
		     ('kernel', 'gethost_extra_args') of
	      %% Line 414
	      <{'ok',L}>
		  when call 'erlang':'is_list'
			(L) ->
		  let <_cor3> =
		      %% Line 415
		      [32|L]
		  in  %% Line 415
		      call 'erlang':'++'
			  (_cor1, _cor3)
	      %% Line 416
	      <_cor6> when 'true' ->
		  %% Line 417
		  call 'erlang':'++'
		      (_cor1, [])
	    end
'get_poolsize'/0 =
    %% Line 420
    fun () ->
	%% Line 421
	case call 'application':'get_env'
		 ('kernel', 'gethost_poolsize') of
	  %% Line 422
	  <{'ok',I}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 423
	      I
	  %% Line 424
	  <_cor1> when 'true' ->
	      %% Line 425
	      4
	end
'system_continue'/3 =
    %% Line 432
    fun (_cor2,_cor1,_cor0) ->
	%% Line 433
	apply 'main_loop'/1
	    (_cor0)
'system_terminate'/4 =
    %% Line 435
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 436
	call 'erlang':'exit'
	    (_cor3)
'system_code_change'/4 =
    %% Line 439
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 440
	{'ok',_cor3}
'gethostbyname'/1 =
    %% Line 447
    fun (_cor0) ->
	%% Line 448
	apply 'gethostbyname'/2
	    (_cor0, 'inet')
'gethostbyname'/2 =
    %% Line 450
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,'inet'>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 451
	      apply 'getit'/4
		  (1, 1, Name, Name)
	  %% Line 452
	  <Name,'inet6'>
	      when call 'erlang':'is_list'
		    (Name) ->
	      %% Line 453
	      apply 'getit'/4
		  (1, 2, Name, Name)
	  %% Line 454
	  <Name,Type>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor2> =
		  %% Line 455
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 455
		  apply 'gethostbyname'/2
		      (_cor2, Type)
	  %% Line 456
	  <_cor5,_cor6> when 'true' ->
	      %% Line 457
	      {'error','formerr'}
	end
'gethostbyaddr'/1 =
    %% Line 459
    fun (_cor0) ->
	case _cor0 of
	  <Addr = {A,B,C,D}>
	      when %% Line 460
		try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (A)
		    in  let <_cor2> =
			    call 'erlang':'<'
				(A, 256)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (B)
			    in  let <_cor4> =
				    call 'erlang':'<'
					(B, 256)
				in  let <_cor5> =
					call 'erlang':'is_integer'
					    (C)
				    in  let <_cor6> =
					    call 'erlang':'<'
						(C, 256)
					in  let <_cor7> =
						call 'erlang':'is_integer'
						    (D)
					    in  let <_cor8> =
						    call 'erlang':'<'
							(D, 256)
						in  let <_cor9> =
							call 'erlang':'and'
							    (_cor7, _cor8)
						    in  let <_cor10> =
							    call 'erlang':'and'
								(_cor6, _cor9)
							in  let <_cor11> =
								call 'erlang':'and'
								    (_cor5, _cor10)
							    in  let <_cor12> =
								    call 'erlang':'and'
									(_cor4, _cor11)
								in  let <_cor13> =
									call 'erlang':'and'
									    (_cor3, _cor12)
								    in  let <_cor14> =
									    call 'erlang':'and'
										(_cor2, _cor13)
									in  call 'erlang':'and'
										(_cor1, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor15> =
		  %% Line 461
		  #{#<A>(8,1,'integer',['unsigned'|['big']]),
		    #<B>(8,1,'integer',['unsigned'|['big']]),
		    #<C>(8,1,'integer',['unsigned'|['big']]),
		    #<D>(8,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 461
		  apply 'getit'/4
		      (2, 1, _cor15, Addr)
	  %% Line 462
	  <Addr = {A,B,C,D,E,F,G,H}>
	      when %% Line 463
		try
		    let <_cor16> =
			call 'erlang':'is_integer'
			    (A)
		    in  let <_cor17> =
			    call 'erlang':'<'
				(A, 65536)
			in  let <_cor18> =
				call 'erlang':'is_integer'
				    (B)
			    in  let <_cor19> =
				    call 'erlang':'<'
					(B, 65536)
				in  let <_cor20> =
					call 'erlang':'is_integer'
					    (C)
				    in  let <_cor21> =
					    call 'erlang':'<'
						(C, 65536)
					in  let <_cor22> =
						call 'erlang':'is_integer'
						    (D)
					    in  let <_cor23> =
						    call 'erlang':'<'
							(D, 65536)
						in  let <_cor24> =
							%% Line 464
							call 'erlang':'is_integer'
							    (E)
						    in  let <_cor25> =
							    %% Line 464
							    call 'erlang':'<'
								(E, 65536)
							in  let <_cor26> =
								%% Line 464
								call 'erlang':'is_integer'
								    (F)
							    in  let <_cor27> =
								    %% Line 464
								    call 'erlang':'<'
									(F, 65536)
								in  let <_cor28> =
									%% Line 464
									call 'erlang':'is_integer'
									    (G)
								    in  let <_cor29> =
									    %% Line 464
									    call 'erlang':'<'
										(G, 65536)
									in  let <_cor30> =
										%% Line 464
										call 'erlang':'is_integer'
										    (H)
									    in  let <_cor31> =
										    %% Line 464
										    call 'erlang':'<'
											(H, 65536)
										in  let <_cor32> =
											call 'erlang':'and'
											    (_cor30, _cor31)
										    in  let <_cor33> =
											    call 'erlang':'and'
												(_cor29, _cor32)
											in  let <_cor34> =
												call 'erlang':'and'
												    (_cor28, _cor33)
											    in  let <_cor35> =
												    call 'erlang':'and'
													(_cor27, _cor34)
												in  let <_cor36> =
													call 'erlang':'and'
													    (_cor26, _cor35)
												    in  let <_cor37> =
													    call 'erlang':'and'
														(_cor25, _cor36)
													in  let <_cor38> =
														call 'erlang':'and'
														    (_cor24, _cor37)
													    in  let <_cor39> =
														    call 'erlang':'and'
															(_cor23, _cor38)
														in  let <_cor40> =
															call 'erlang':'and'
															    (_cor22, _cor39)
														    in  let <_cor41> =
															    call 'erlang':'and'
																(_cor21, _cor40)
															in  let <_cor42> =
																call 'erlang':'and'
																    (_cor20, _cor41)
															    in  let <_cor43> =
																    call 'erlang':'and'
																	(_cor19, _cor42)
																in  let <_cor44> =
																	call 'erlang':'and'
																	    (_cor18, _cor43)
																    in  let <_cor45> =
																	    call 'erlang':'and'
																		(_cor17, _cor44)
																	in  call 'erlang':'and'
																		(_cor16, _cor45)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor46> =
		  %% Line 467
		  #{#<A>(16,1,'integer',['unsigned'|['big']]),
		    #<B>(16,1,'integer',['unsigned'|['big']]),
		    #<C>(16,1,'integer',['unsigned'|['big']]),
		    #<D>(16,1,'integer',['unsigned'|['big']]),
		    #<E>(16,1,'integer',['unsigned'|['big']]),
		    #<F>(16,1,'integer',['unsigned'|['big']]),
		    #<G>(16,1,'integer',['unsigned'|['big']]),
		    #<H>(16,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 465
		  apply 'getit'/4
		      (%% Line 466
		       2, %% Line 466
			  2, _cor46, %% Line 467
				     Addr)
	  %% Line 468
	  <Addr>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 469
	      case call 'inet_parse':'address'
		       (Addr) of
		%% Line 470
		<{'ok',IP}> when 'true' ->
		    apply 'gethostbyaddr'/1
			(IP)
		%% Line 471
		<_X_Error> when 'true' ->
		    {'error','formerr'}
	      end
	  %% Line 473
	  <Addr>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor48> =
		  %% Line 474
		  call 'erlang':'atom_to_list'
		      (Addr)
	      in  %% Line 474
		  apply 'gethostbyaddr'/1
		      (_cor48)
	  %% Line 475
	  <_cor50> when 'true' ->
	      {'error','formerr'}
	end
'control'/1 =
    %% Line 477
    fun (_cor0) ->
	case _cor0 of
	  <{'debug_level',Level}>
	      when call 'erlang':'is_integer'
		    (Level) ->
	      let <_cor1> =
		  %% Line 478
		  #{#<Level>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 478
		  apply 'getit'/4
		      (4, 0, _cor1, 'undefined')
	  %% Line 479
	  <'soft_restart'> when 'true' ->
	      %% Line 480
	      apply 'getit'/2
		  ('restart_port', 'undefined')
	  %% Line 481
	  <_cor3> when 'true' ->
	      {'error','formerr'}
	end
'getit'/4 =
    %% Line 483
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 484
	apply 'getit'/2
	    ({_cor3,_cor2,_cor1}, _cor0)
'getit'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	let <Pid> =
	    %% Line 487
	    apply 'ensure_started'/0
		()
	in  let <Ref> =
		%% Line 488
		call 'erlang':'make_ref'
		    ()
	    in  let <_cor4> =
		    %% Line 489
		    call 'erlang':'self'
			()
		in  do  %% Line 489
			call 'erlang':'!'
			    (Pid, {{_cor4,Ref},_cor1})
			%% Line 490
			receive
			  %% Line 491
			  <{_cor10,{'ok',BinHostent}}>
			      when call 'erlang':'=:='
				    (_cor10,
				     Ref) ->
			      %% Line 492
			      apply 'parse_address'/2
				  (BinHostent, _cor0)
			  %% Line 493
			  <{_cor11,Result}>
			      when call 'erlang':'=:='
				    (_cor11,
				     Ref) ->
			      %% Line 494
			      Result
			after %% Line 495
			      5000 ->
			  let <Ref2> =
			      %% Line 496
			      call 'erlang':'monitor'
				  ('process', Pid)
			  in  let <_cor6> =
				  %% Line 497
				  receive
				    %% Line 498
				    <{_cor12,{'ok',BinHostent}}>
					when call 'erlang':'=:='
					      (_cor12,
					       Ref) ->
					%% Line 499
					apply 'parse_address'/2
					    (BinHostent, _cor0)
				    %% Line 500
				    <{_cor13,Result}>
					when call 'erlang':'=:='
					      (_cor13,
					       Ref) ->
					%% Line 501
					Result
				    %% Line 502
				    <{'DOWN',_cor14,'process',_cor15,%% Line 503
								     Reason}>
					when let <_cor16> =
					      call 'erlang':'=:='
						  (_cor14, Ref2)
					  in  let <_cor17> =
						  call 'erlang':'=:='
						      (_cor15, %% Line 503
							       Pid)
					      in  call 'erlang':'and'
						      (_cor16, _cor17) ->
					%% Line 504
					{'error',Reason}
				  after 'infinity' ->
				    'true'
			      in  do  catch
					  %% Line 506
					  call 'erlang':'demonitor'
					      (Ref2, ['flush'])
				      _cor6
'do_start'/2 =
    %% Line 510
    fun (_cor1,_cor0) ->
	%% Line 511
	case _cor0 of
	  <{Child,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 512
	      case call 'supervisor':'start_child'
		       (_cor1, _cor0) of
		%% Line 513
		<{'ok',_cor12}> when 'true' ->
		    %% Line 514
		    'ok'
		%% Line 515
		<{'error',{'already_started',Pid}}>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 516
		    'ok'
		%% Line 517
		<{'error',{{'already_started',Pid},_X_Child}}>
		    when call 'erlang':'is_pid'
			  (Pid) ->
		    %% Line 518
		    'ok'
		%% Line 519
		<{'error','already_present'}> when 'true' ->
		    let <_X_> =
			%% Line 520
			( call 'supervisor':'delete_child'
			      (_cor1, Child)
			  -| ['result_not_wanted'] )
		    in  %% Line 521
			apply 'do_start'/2
			    (_cor1, _cor0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'ensure_started'/0 =
    %% Line 524
    fun () ->
	%% Line 525
	case call 'erlang':'whereis'
		 ('inet_gethost_native') of
	  %% Line 526
	  <'undefined'> when 'true' ->
	      %% Line 529
	      case call 'erlang':'whereis'
		       ('kernel_safe_sup') of
		%% Line 530
		<'undefined'> when 'true' ->
		    %% Line 531
		    case call 'erlang':'whereis'
			     ('net_sup') of
		      %% Line 532
		      <'undefined'> when 'true' ->
			  %% Line 534
			  apply 'start_raw'/0
			      ()
		      %% Line 535
		      <_cor6> when 'true' ->
			  do  %% Line 536
			      apply 'do_start'/2
				  ('net_sup', {'inet_gethost_native_sup',{'inet_gethost_native','start_link',[]},'temporary',1000,'worker',['inet_gethost_native']})
			      %% Line 537
			      case call 'erlang':'whereis'
				       ('inet_gethost_native') of
				%% Line 538
				<'undefined'> when 'true' ->
				    %% Line 539
				    call 'erlang':'exit'
					({'could_not_start_server','inet_gethost_native'})
				%% Line 540
				<Pid0> when 'true' ->
				    %% Line 541
				    Pid0
			      end
		    end
		%% Line 544
		<_cor7> when 'true' ->
		    do  %% Line 545
			apply 'do_start'/2
			    ('kernel_safe_sup', {'inet_gethost_native_sup',{'inet_gethost_native','start_link',[]},'temporary',1000,'worker',['inet_gethost_native']})
			%% Line 546
			case call 'erlang':'whereis'
				 ('inet_gethost_native') of
			  %% Line 547
			  <'undefined'> when 'true' ->
			      %% Line 548
			      call 'erlang':'exit'
				  ({'could_not_start_server','inet_gethost_native'})
			  %% Line 549
			  <Pid1> when 'true' ->
			      %% Line 550
			      Pid1
			end
	      end
	  %% Line 553
	  <Pid> when 'true' ->
	      %% Line 554
	      Pid
	end
'parse_address'/2 =
    %% Line 557
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    catch
		%% Line 560
		case ( _cor1
		       -| ['reuse_for_context'] ) of
		  %% Line 561
		  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
		     #<Errstring>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		      let <_cor2> =
			  %% Line 562
			  apply 'listify'/1
			      (Errstring)
		      in  let <_cor3> =
			      %% Line 562
			      call 'erlang':'list_to_atom'
				  (_cor2)
			  in  %% Line 562
			      {'error',_cor3}
		  %% Line 563
		  <#{#<4>(8,1,'integer',['unsigned'|['big']]),
		     #<Naddr>(32,1,'integer',['unsigned'|['big']]),
		     #<T0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		      %% Line 564
		      case apply 'pick_addresses_v4'/2
			       (Naddr, T0) of
			<{T1,Addresses}> when 'true' ->
			    let <_cor5> =
				%% Line 566
				apply 'pick_names'/1
				    (T1)
			    in  %% Line 565
				case %% Line 566
				     apply 'expand_default_name'/2
					 (_cor5, _cor0) of
				  <{Name,Names}> when 'true' ->
				      %% Line 567
				      {'ok',{'hostent',%% Line 569
						       Name,%% Line 568
							    Names,'inet',%% Line 568
									 4,Addresses}}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
		  %% Line 570
		  <#{#<16>(8,1,'integer',['unsigned'|['big']]),
		     #<Naddr>(32,1,'integer',['unsigned'|['big']]),
		     #<T0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		      %% Line 571
		      case apply 'pick_addresses_v6'/2
			       (Naddr, T0) of
			<{T1,Addresses}> when 'true' ->
			    let <_cor8> =
				%% Line 573
				apply 'pick_names'/1
				    (T1)
			    in  %% Line 572
				case %% Line 573
				     apply 'expand_default_name'/2
					 (_cor8, _cor0) of
				  <{Name,Names}> when 'true' ->
				      %% Line 574
				      {'ok',{'hostent',%% Line 576
						       Name,%% Line 575
							    Names,'inet6',%% Line 575
									  16,Addresses}}
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor9})
				    -| ['compiler_generated'] )
				end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
		  %% Line 577
		  <_X_Else> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  %% Line 578
			  {'error',{'internal_error',{'malformed_response',_cor1}}}
		end
	in  %% Line 558
	    case _cor11 of
	      %% Line 581
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 582
		  Reason
	      %% Line 583
	      <Normal> when 'true' ->
		  %% Line 584
		  Normal
	    end
'expand_default_name'/2 =
    %% Line 587
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],DefaultName>
	      when call 'erlang':'is_list'
		    (DefaultName) ->
	      %% Line 588
	      {DefaultName,[]}
	  %% Line 589
	  <[],DefaultName>
	      when call 'erlang':'is_tuple'
		    (DefaultName) ->
	      let <_cor2> =
		  %% Line 590
		  call 'inet_parse':'ntoa'
		      (DefaultName)
	      in  %% Line 590
		  {_cor2,[]}
	  %% Line 591
	  <[Name|Names],DefaultName>
	      when let <_cor3> =
		    %% Line 592
		    call 'erlang':'is_list'
			(DefaultName)
		in  let <_cor4> =
			%% Line 592
			call 'erlang':'is_tuple'
			    (DefaultName)
		    in  %% Line 592
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 593
	      {Name,Names}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'expand_default_name',2}}] )
	    -| ['compiler_generated'] )
	end
'listify'/1 =
    %% Line 595
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 596
	    call 'erlang':'byte_size'
		(_cor0)
	in  let <N> =
		%% Line 596
		call 'erlang':'-'
		    (_cor1, 1)
	    in  %% Line 597
		case _cor0 of
		  <#{#<Bin2>(N,8,'binary',['unsigned'|['big']]),
		     #<Ch>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		      %% Line 598
		      case Ch of
			%% Line 599
			<0> when 'true' ->
			    %% Line 600
			    apply 'listify'/1
				(Bin2)
			%% Line 601
			<_cor6> when 'true' ->
			    %% Line 602
			    call 'erlang':'binary_to_list'
				(_cor0)
		      end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'pick_addresses_v4'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <0,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Tail)
		  %% Line 606
		  {Tail,[]}
	  %% Line 607
	  <N,#{#<A>(8,1,'integer',['unsigned'|['big']]),
	       #<B>(8,1,'integer',['unsigned'|['big']]),
	       #<C>(8,1,'integer',['unsigned'|['big']]),
	       #<D>(8,1,'integer',['unsigned'|['big']]),
	       #<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 608
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 608
		  case apply 'pick_addresses_v4'/2
			   (_cor2, Tail) of
		    <{NTail,OList}> when 'true' ->
			%% Line 609
			{NTail,[{A,B,C,D}|OList]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor4)
		    ( primop 'match_fail'
			  ({'function_clause',_cor5,_cor4})
		      -| [{'function_name',{'pick_addresses_v4',2}}] )
	    -| ['compiler_generated'] )
	end
'pick_addresses_v6'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	case <_cor1,( _cor0
		      -| ['reuse_for_context'] )> of
	  <0,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Tail)
		  %% Line 612
		  {Tail,[]}
	  %% Line 613
	  <Num,#{#<A>(16,1,'integer',['unsigned'|['big']]),
		 #<B>(16,1,'integer',['unsigned'|['big']]),
		 #<C>(16,1,'integer',['unsigned'|['big']]),
		 #<D>(16,1,'integer',['unsigned'|['big']]),
		 #<E>(16,1,'integer',['unsigned'|['big']]),
		 #<F>(16,1,'integer',['unsigned'|['big']]),
		 #<G>(16,1,'integer',['unsigned'|['big']]),
		 #<H>(16,1,'integer',['unsigned'|['big']]),
		 #<%% Line 614
		   Tail>(%% Line 614
			 'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 615
		  call 'erlang':'-'
		      (Num, 1)
	      in  %% Line 615
		  case apply 'pick_addresses_v6'/2
			   (_cor2, Tail) of
		    <{NTail,OList}> when 'true' ->
			%% Line 616
			{NTail,[{A,B,C,D,E,F,G,H}|OList]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor4)
		    ( primop 'match_fail'
			  ({'function_clause',_cor5,_cor4})
		      -| [{'function_name',{'pick_addresses_v6',2}}] )
	    -| ['compiler_generated'] )
	end
'ndx'/2 =
    %% Line 618
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 619
	    call 'erlang':'byte_size'
		(_cor0)
	in  %% Line 619
	    apply 'ndx'/4
		(_cor1, 0, _cor2, _cor0)
'ndx'/4 =
    %% Line 621
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor10,N,_cor11,_cor12>
	      when call 'erlang':'=:='
		    (_cor11,
		     N) ->
	      %% Line 622
	      'undefined'
	  %% Line 623
	  <Ch,I,N,Bin> when 'true' ->
	      %% Line 624
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		%% Line 625
		<#{#<_cor13>(I,8,'binary',['unsigned'|['big']]),
		   #<_cor14>(8,1,'integer',['unsigned'|['big']]),
		   #<_cor15>('all',8,'binary',['unsigned'|['big']])}#>
		    when call 'erlang':'=:='
			  (_cor14,
			   Ch) ->
		    %% Line 626
		    I
		%% Line 627
		<_cor16> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (Bin)
			let <_cor4> =
			    %% Line 628
			    call 'erlang':'+'
				(I, 1)
			in  %% Line 628
			    apply 'ndx'/4
				(Ch, _cor4, N, Bin)
	      end
	end
'pick_names'/1 =
    %% Line 631
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Length>(32,1,'integer',['unsigned'|['big']]),
	     #<Namelist>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 632
	      apply 'pick_names'/2
		  (Length, Namelist)
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'pick_names',1}}] )
	    -| ['compiler_generated'] )
	end
'pick_names'/2 =
    %% Line 634
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,#{}#> when 'true' ->
	      %% Line 635
	      []
	  %% Line 636
	  <0,_cor9> when 'true' ->
	      %% Line 637
	      call 'erlang':'exit'
		  ({'error','format_error'})
	  %% Line 638
	  <_X_N,#{}#> when 'true' ->
	      %% Line 639
	      call 'erlang':'exit'
		  ({'error','format_error'})
	  %% Line 640
	  <N,Bin> when 'true' ->
	      let <Ndx> =
		  %% Line 641
		  apply 'ndx'/2
		      (0, Bin)
	      in  %% Line 642
		  case ( Bin
			 -| ['reuse_for_context'] ) of
		    <#{#<Str>(Ndx,8,'binary',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor4> =
			    %% Line 643
			    call 'erlang':'binary_to_list'
				(Str)
			in  let <_cor5> =
				%% Line 643
				call 'erlang':'-'
				    (N, 1)
			    in  let <_cor6> =
				    %% Line 643
				    apply 'pick_names'/2
					(_cor5, Rest)
				in  %% Line 643
				    [_cor4|_cor6]
		    ( <_cor3> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor3)
			      primop 'match_fail'
				  ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('inet_gethost_native')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('inet_gethost_native', _cor0)
end