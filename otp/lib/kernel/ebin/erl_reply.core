module 'erl_reply' ['module_info'/0,
		    'module_info'/1,
		    'reply'/1]
    attributes [%% Line 28
		'spec' =
		    %% Line 28
		    [{{'reply',1},[{'type',28,'fun',[{'type',28,'product',[{'type',28,'list',[{'type',28,'atom',[]}]}]}|[{'type',28,'union',[{'atom',28,'ok'}|[{'atom',28,'reply_done'}]]}]]}]}]]
'reply'/1 =
    %% Line 30
    fun (_cor0) ->
	case _cor0 of
	  <[Addr|[Port|[Msg|[]]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 31
		  call 'erlang':'atom_to_list'
		      (Addr)
	      in  let <Ip> =
		      %% Line 31
		      apply 'ip_string_to_tuple'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 32
			  call 'erlang':'atom_to_list'
			      (Port)
		      in  let <P> =
			      %% Line 32
			      call 'erlang':'list_to_integer'
				  (_cor3)
			  in  let <M> =
				  %% Line 33
				  call 'erlang':'atom_to_list'
				      (Msg)
			      in  %% Line 34
				  case call 'gen_tcp':'connect'
					   (Ip, P, []) of
				    <{'ok',S}> when 'true' ->
					%% Line 35
					case call 'gen_tcp':'send'
						 (S, M) of
					  <'ok'> when 'true' ->
					      do  %% Line 36
						  call 'gen_tcp':'close'
						      (S)
						  %% Line 37
						  'reply_done'
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor7})
					    -| ['compiler_generated'] )
					end
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
	  %% Line 38
	  <_cor9> when 'true' ->
	      %% Line 39
	      call 'error_logger':'error_msg'
		  ([101|[114|[108|[95|[114|[101|[112|[108|[121|[58|[32|[67|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[97|[100|[100|[114|[101|[115|[115|[32|[97|[110|[100|[32|[112|[111|[114|[116|[32|[116|[111|[32|[114|[101|[112|[108|[121|[32|[116|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'ip_string_to_tuple'/1 =
    %% Line 43
    fun (_cor0) ->
	%% Line 44
	case call 'string':'tokens'
		 (_cor0, [46]) of
	  <[Ip1|[Ip2|[Ip3|[Ip4|[]]]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 45
		  call 'erlang':'list_to_integer'
		      (Ip1)
	      in  let <_cor4> =
		      %% Line 46
		      call 'erlang':'list_to_integer'
			  (Ip2)
		  in  let <_cor3> =
			  %% Line 47
			  call 'erlang':'list_to_integer'
			      (Ip3)
		      in  let <_cor2> =
			      %% Line 48
			      call 'erlang':'list_to_integer'
				  (Ip4)
			  in  %% Line 45
			      {_cor5,_cor4,_cor3,_cor2}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_reply')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_reply', _cor0)
end