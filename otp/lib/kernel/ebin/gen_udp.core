module 'gen_udp' ['close'/1,
		  'connect'/3,
		  'controlling_process'/2,
		  'fdopen'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'open'/1,
		  'open'/2,
		  'recv'/2,
		  'recv'/3,
		  'send'/2,
		  'send'/4]
    attributes [%% Line 374
		'type' =
		    %% Line 374
		    [{{'record','connect_opts'},[{'record_field',376,{'atom',376,'ifaddr'},{'atom',376,'any'}}|[{'record_field',377,{'atom',377,'port'},{'integer',377,0}}|[{'record_field',378,{'atom',378,'fd'},{'op',378,'-',{'integer',378,1}}}|[{'record_field',379,{'atom',379,'opts'},{'nil',379}}]]]],[]}],
		%% Line 382
		'type' =
		    %% Line 382
		    [{{'record','listen_opts'},[{'record_field',384,{'atom',384,'ifaddr'},{'atom',384,'any'}}|[{'record_field',385,{'atom',385,'port'},{'integer',385,0}}|[{'record_field',386,{'atom',386,'backlog'},{'integer',386,5}}|[{'record_field',387,{'atom',387,'fd'},{'op',387,'-',{'integer',387,1}}}|[{'record_field',388,{'atom',388,'opts'},{'nil',388}}]]]]],[]}],
		%% Line 392
		'type' =
		    %% Line 392
		    [{{'record','udp_opts'},[{'record_field',394,{'atom',394,'ifaddr'},{'atom',394,'any'}}|[{'record_field',395,{'atom',395,'port'},{'integer',395,0}}|[{'record_field',396,{'atom',396,'fd'},{'op',396,'-',{'integer',396,1}}}|[{'record_field',397,{'atom',397,'opts'},{'cons',397,{'tuple',397,[{'atom',397,'active'}|[{'atom',397,'true'}]]},{'nil',397}}}]]]],[]}],
		%% Line 402
		'type' =
		    %% Line 402
		    [{{'record','sctp_opts'},[{'record_field',404,{'atom',404,'ifaddr'}}|[{'record_field',405,{'atom',405,'port'},{'integer',405,0}}|[{'record_field',406,{'atom',406,'fd'},{'op',406,'-',{'integer',406,1}}}|[{'record_field',407,{'atom',407,'type'},{'atom',407,'seqpacket'}}|[{'record_field',408,{'atom',408,'opts'},{'cons',408,{'tuple',408,[{'atom',408,'mode'}|[{'atom',408,'binary'}]]},{'cons',409,{'tuple',409,[{'atom',409,'buffer'}|[{'integer',409,65536}]]},{'cons',410,{'tuple',410,[{'atom',410,'sndbuf'}|[{'integer',410,65536}]]},{'cons',411,{'tuple',411,[{'atom',411,'recbuf'}|[{'integer',411,1024}]]},{'cons',412,{'tuple',412,[{'atom',412,'sctp_events'}|[{'atom',412,'undefined'}]]},{'nil',414}}}}}}}]]]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'option',{'type',29,'union',[{'type',29,'tuple',[{'atom',29,'active'}|[{'type',29,'union',[{'atom',29,'true'}|[{'atom',29,'false'}|[{'atom',29,'once'}|[{'type',29,'range',[{'op',29,'-',{'integer',29,32768}}|[{'integer',29,32767}]]}]]]]}]]}|[{'type',30,'tuple',[{'atom',30,'add_membership'}|[{'type',30,'tuple',[{'remote_type',30,[{'atom',30,'inet'}|[{'atom',30,'ip_address'}|[[]]]]}|[{'remote_type',30,[{'atom',30,'inet'}|[{'atom',30,'ip_address'}|[[]]]]}]]}]]}|[{'type',31,'tuple',[{'atom',31,'broadcast'}|[{'type',31,'boolean',[]}]]}|[{'type',32,'tuple',[{'atom',32,'buffer'}|[{'type',32,'non_neg_integer',[]}]]}|[{'type',33,'tuple',[{'atom',33,'deliver'}|[{'type',33,'union',[{'atom',33,'port'}|[{'atom',33,'term'}]]}]]}|[{'type',34,'tuple',[{'atom',34,'dontroute'}|[{'type',34,'boolean',[]}]]}|[{'type',35,'tuple',[{'atom',35,'drop_membership'}|[{'type',35,'tuple',[{'remote_type',35,[{'atom',35,'inet'}|[{'atom',35,'ip_address'}|[[]]]]}|[{'remote_type',35,[{'atom',35,'inet'}|[{'atom',35,'ip_address'}|[[]]]]}]]}]]}|[{'type',36,'tuple',[{'atom',36,'header'}|[{'type',36,'non_neg_integer',[]}]]}|[{'type',37,'tuple',[{'atom',37,'high_msgq_watermark'}|[{'type',37,'pos_integer',[]}]]}|[{'type',38,'tuple',[{'atom',38,'low_msgq_watermark'}|[{'type',38,'pos_integer',[]}]]}|[{'type',39,'tuple',[{'atom',39,'mode'}|[{'type',39,'union',[{'atom',39,'list'}|[{'atom',39,'binary'}]]}]]}|[{'atom',39,'list'}|[{'atom',39,'binary'}|[{'type',40,'tuple',[{'atom',40,'multicast_if'}|[{'remote_type',40,[{'atom',40,'inet'}|[{'atom',40,'ip_address'}|[[]]]]}]]}|[{'type',41,'tuple',[{'atom',41,'multicast_loop'}|[{'type',41,'boolean',[]}]]}|[{'type',42,'tuple',[{'atom',42,'multicast_ttl'}|[{'type',42,'non_neg_integer',[]}]]}|[{'type',43,'tuple',[{'atom',43,'priority'}|[{'type',43,'non_neg_integer',[]}]]}|[{'type',44,'tuple',[{'atom',44,'raw'}|[{'ann_type',45,[{'var',45,'Protocol'}|[{'type',45,'non_neg_integer',[]}]]}|[{'ann_type',46,[{'var',46,'OptionNum'}|[{'type',46,'non_neg_integer',[]}]]}|[{'ann_type',47,[{'var',47,'ValueBin'}|[{'type',47,'binary',[]}]]}]]]]}|[{'type',48,'tuple',[{'atom',48,'read_packets'}|[{'type',48,'non_neg_integer',[]}]]}|[{'type',49,'tuple',[{'atom',49,'recbuf'}|[{'type',49,'non_neg_integer',[]}]]}|[{'type',50,'tuple',[{'atom',50,'reuseaddr'}|[{'type',50,'boolean',[]}]]}|[{'type',51,'tuple',[{'atom',51,'sndbuf'}|[{'type',51,'non_neg_integer',[]}]]}|[{'type',52,'tuple',[{'atom',52,'tos'}|[{'type',52,'non_neg_integer',[]}]]}|[{'type',53,'tuple',[{'atom',53,'ipv6_v6only'}|[{'type',53,'boolean',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'option_name',{'type',55,'union',[{'atom',55,'active'}|[{'atom',56,'broadcast'}|[{'atom',57,'buffer'}|[{'atom',58,'deliver'}|[{'atom',59,'dontroute'}|[{'atom',60,'header'}|[{'atom',61,'high_msgq_watermark'}|[{'atom',62,'low_msgq_watermark'}|[{'atom',63,'mode'}|[{'atom',64,'multicast_if'}|[{'atom',65,'multicast_loop'}|[{'atom',66,'multicast_ttl'}|[{'atom',67,'priority'}|[{'type',68,'tuple',[{'atom',68,'raw'}|[{'ann_type',69,[{'var',69,'Protocol'}|[{'type',69,'non_neg_integer',[]}]]}|[{'ann_type',70,[{'var',70,'OptionNum'}|[{'type',70,'non_neg_integer',[]}]]}|[{'ann_type',71,[{'var',71,'ValueSpec'}|[{'type',71,'union',[{'paren_type',71,[{'ann_type',71,[{'var',71,'ValueSize'}|[{'type',71,'non_neg_integer',[]}]]}]}|[{'paren_type',72,[{'ann_type',72,[{'var',72,'ValueBin'}|[{'type',72,'binary',[]}]]}]}]]}]]}]]]]}|[{'atom',73,'read_packets'}|[{'atom',74,'recbuf'}|[{'atom',75,'reuseaddr'}|[{'atom',76,'sndbuf'}|[{'atom',77,'tos'}|[{'atom',78,'ipv6_v6only'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'socket',{'type',79,'port',[]},[]}],
		%% Line 81
		'export_type' =
		    %% Line 81
		    [{'option',0}|[{'option_name',0}]],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'open',1},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Port'}]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'var',83,'Socket'}]]}|[{'type',83,'tuple',[{'atom',83,'error'}|[{'var',83,'Reason'}]]}]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Port'}|[{'remote_type',84,[{'atom',84,'inet'}|[{'atom',84,'port_number'}|[[]]]]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Socket'}|[{'type',85,'socket',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Reason'}|[{'remote_type',86,[{'atom',86,'inet'}|[{'atom',86,'posix'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'open',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'Port'}|[{'var',91,'Opts'}]]}|[{'type',91,'union',[{'type',91,'tuple',[{'atom',91,'ok'}|[{'var',91,'Socket'}]]}|[{'type',91,'tuple',[{'atom',91,'error'}|[{'var',91,'Reason'}]]}]]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Port'}|[{'remote_type',92,[{'atom',92,'inet'}|[{'atom',92,'port_number'}|[[]]]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Opts'}|[{'type',93,'list',[{'var',93,'Option'}]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Option'}|[{'type',94,'union',[{'type',94,'tuple',[{'atom',94,'ip'}|[{'remote_type',94,[{'atom',94,'inet'}|[{'atom',94,'ip_address'}|[[]]]]}]]}|[{'type',95,'tuple',[{'atom',95,'fd'}|[{'type',95,'non_neg_integer',[]}]]}|[{'type',96,'tuple',[{'atom',96,'ifaddr'}|[{'remote_type',96,[{'atom',96,'inet'}|[{'atom',96,'ip_address'}|[[]]]]}]]}|[{'remote_type',97,[{'atom',97,'inet'}|[{'atom',97,'address_family'}|[[]]]]}|[{'type',98,'tuple',[{'atom',98,'port'}|[{'remote_type',98,[{'atom',98,'inet'}|[{'atom',98,'port_number'}|[[]]]]}]]}|[{'type',99,'option',[]}]]]]]]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Socket'}|[{'type',100,'socket',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Reason'}|[{'remote_type',101,[{'atom',101,'inet'}|[{'atom',101,'posix'}|[[]]]]}]]]]}]]]]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'close',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Socket'}]}|[{'atom',108,'ok'}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Socket'}|[{'type',109,'socket',[]}]]]]}]]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'send',4},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'Socket'}|[{'var',114,'Address'}|[{'var',114,'Port'}|[{'var',114,'Packet'}]]]]}|[{'type',114,'union',[{'atom',114,'ok'}|[{'type',114,'tuple',[{'atom',114,'error'}|[{'var',114,'Reason'}]]}]]}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Socket'}|[{'type',115,'socket',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Address'}|[{'type',116,'union',[{'remote_type',116,[{'atom',116,'inet'}|[{'atom',116,'ip_address'}|[[]]]]}|[{'remote_type',116,[{'atom',116,'inet'}|[{'atom',116,'hostname'}|[[]]]]}]]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Port'}|[{'remote_type',117,[{'atom',117,'inet'}|[{'atom',117,'port_number'}|[[]]]]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Packet'}|[{'type',118,'iodata',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Reason'}|[{'type',119,'union',[{'atom',119,'not_owner'}|[{'remote_type',119,[{'atom',119,'inet'}|[{'atom',119,'posix'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'recv',2},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'Socket'}|[{'var',146,'Length'}]]}|[{'type',147,'union',[{'type',147,'tuple',[{'atom',147,'ok'}|[{'type',147,'tuple',[{'var',147,'Address'}|[{'var',147,'Port'}|[{'var',147,'Packet'}]]]}]]}|[{'type',147,'tuple',[{'atom',147,'error'}|[{'var',147,'Reason'}]]}]]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Socket'}|[{'type',148,'socket',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Length'}|[{'type',149,'non_neg_integer',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Address'}|[{'remote_type',150,[{'atom',150,'inet'}|[{'atom',150,'ip_address'}|[[]]]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Port'}|[{'remote_type',151,[{'atom',151,'inet'}|[{'atom',151,'port_number'}|[[]]]]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Packet'}|[{'type',152,'union',[{'type',152,'string',[]}|[{'type',152,'binary',[]}]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Reason'}|[{'type',153,'union',[{'atom',153,'not_owner'}|[{'remote_type',153,[{'atom',153,'inet'}|[{'atom',153,'posix'}|[[]]]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'recv',3},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Socket'}|[{'var',163,'Length'}|[{'var',163,'Timeout'}]]]}|[{'type',164,'union',[{'type',164,'tuple',[{'atom',164,'ok'}|[{'type',164,'tuple',[{'var',164,'Address'}|[{'var',164,'Port'}|[{'var',164,'Packet'}]]]}]]}|[{'type',164,'tuple',[{'atom',164,'error'}|[{'var',164,'Reason'}]]}]]}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Socket'}|[{'type',165,'socket',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Length'}|[{'type',166,'non_neg_integer',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Timeout'}|[{'type',167,'timeout',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Address'}|[{'remote_type',168,[{'atom',168,'inet'}|[{'atom',168,'ip_address'}|[[]]]]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Port'}|[{'remote_type',169,[{'atom',169,'inet'}|[{'atom',169,'port_number'}|[[]]]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Packet'}|[{'type',170,'union',[{'type',170,'string',[]}|[{'type',170,'binary',[]}]]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Reason'}|[{'type',171,'union',[{'atom',171,'not_owner'}|[{'remote_type',171,[{'atom',171,'inet'}|[{'atom',171,'posix'}|[[]]]]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'controlling_process',2},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'Socket'}|[{'var',194,'Pid'}]]}|[{'type',194,'union',[{'atom',194,'ok'}|[{'type',194,'tuple',[{'atom',194,'error'}|[{'var',194,'Reason'}]]}]]}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Socket'}|[{'type',195,'socket',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Pid'}|[{'type',196,'pid',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Reason'}|[{'type',197,'union',[{'atom',197,'closed'}|[{'atom',197,'not_owner'}|[{'remote_type',197,[{'atom',197,'inet'}|[{'atom',197,'posix'}|[[]]]]}]]]}]]]]}]]]]]}]}]]
'open'/1 =
    %% Line 88
    fun (_cor0) ->
	%% Line 89
	apply 'open'/2
	    (_cor0, [])
'open'/2 =
    %% Line 103
    fun (_cor1,_cor0) ->
	let <Mod> =
	    %% Line 104
	    apply 'mod'/2
		(_cor0, 'undefined')
	in  %% Line 105
	    case call Mod:'getserv'
		     (_cor1) of
	      <{'ok',UP}> when 'true' ->
		  %% Line 106
		  call Mod:'open'
		      (UP, _cor0)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'close'/1 =
    %% Line 111
    fun (_cor0) ->
	%% Line 112
	call 'inet':'udp_close'
	    (_cor0)
'send'/4 =
    %% Line 121
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <S,Address,Port,Packet>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 122
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 123
		<{'ok',Mod}> when 'true' ->
		    %% Line 124
		    case call Mod:'getaddr'
			     (Address) of
		      %% Line 125
		      <{'ok',IP}> when 'true' ->
			  %% Line 126
			  case call Mod:'getserv'
				   (Port) of
			    %% Line 127
			    <{'ok',UP}> when 'true' ->
				call Mod:'send'
				    (S, IP, UP, Packet)
			    %% Line 128
			    <{'error','einval'}> when 'true' ->
				call 'erlang':'exit'
				    ('badarg')
			    %% Line 129
			    <Error> when 'true' ->
				Error
			  end
		      %% Line 131
		      <{'error','einval'}> when 'true' ->
			  call 'erlang':'exit'
			      ('badarg')
		      %% Line 132
		      <Error> when 'true' ->
			  Error
		    end
		%% Line 134
		<Error> when 'true' ->
		    %% Line 135
		    Error
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'send',4}}] )
	    -| ['compiler_generated'] )
	end
'send'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Packet>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 139
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 140
		<{'ok',Mod}> when 'true' ->
		    %% Line 141
		    call Mod:'send'
			(S, Packet)
		%% Line 142
		<Error> when 'true' ->
		    %% Line 143
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'send',2}}] )
	    -| ['compiler_generated'] )
	end
'recv'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,Len>
	      when let <_cor2> =
		    call 'erlang':'is_port'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Len)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 156
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 157
		<{'ok',Mod}> when 'true' ->
		    %% Line 158
		    call Mod:'recv'
			(S, Len)
		%% Line 159
		<Error> when 'true' ->
		    %% Line 160
		    Error
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'recv',2}}] )
	    -| ['compiler_generated'] )
	end
'recv'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Len,Time>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 174
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 175
		<{'ok',Mod}> when 'true' ->
		    %% Line 176
		    call Mod:'recv'
			(S, Len, Time)
		%% Line 177
		<Error> when 'true' ->
		    %% Line 178
		    Error
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'recv',3}}] )
	    -| ['compiler_generated'] )
	end
'connect'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,Address,Port>
	      when call 'erlang':'is_port'
		    (S) ->
	      %% Line 182
	      case call 'inet_db':'lookup_socket'
		       (S) of
		%% Line 183
		<{'ok',Mod}> when 'true' ->
		    %% Line 184
		    case call Mod:'getaddr'
			     (Address) of
		      %% Line 185
		      <{'ok',IP}> when 'true' ->
			  %% Line 186
			  call Mod:'connect'
			      (S, IP, Port)
		      %% Line 187
		      <Error> when 'true' ->
			  %% Line 188
			  Error
		    end
		%% Line 190
		<Error> when 'true' ->
		    %% Line 191
		    Error
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'connect',3}}] )
	    -| ['compiler_generated'] )
	end
'controlling_process'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	%% Line 200
	call 'inet':'udp_controlling_process'
	    (_cor1, _cor0)
'fdopen'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	let <Mod> =
	    %% Line 206
	    apply 'mod'/2
		(_cor0, 'undefined')
	in  %% Line 207
	    call Mod:'fdopen'
		(_cor1, _cor0)
'mod'/1 =
    %% Line 211
    fun (_cor0) ->
	%% Line 212
	case call 'inet_db':'udp_module'
		 () of
	  %% Line 213
	  <'inet_udp'>
	      when try
		    let <_cor1> =
			call 'erlang':'tuple_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 214
	      'inet6_udp'
	  %% Line 215
	  <Mod> when 'true' ->
	      %% Line 216
	      Mod
	end
'mod'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'udp_module',Mod}|_cor4],_X_Address> when 'true' ->
	      %% Line 221
	      Mod
	  %% Line 222
	  <['inet'|_cor5],_X_Address> when 'true' ->
	      %% Line 223
	      'inet_udp'
	  %% Line 224
	  <['inet6'|_cor6],_X_Address> when 'true' ->
	      %% Line 225
	      'inet6_udp'
	  %% Line 226
	  <[{'ip',Address}|Opts],_cor7> when 'true' ->
	      %% Line 227
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 228
	  <[{'ifaddr',Address}|Opts],_cor8> when 'true' ->
	      %% Line 229
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 230
	  <[_cor9|Opts],Address> when 'true' ->
	      %% Line 231
	      apply 'mod'/2
		  (Opts, Address)
	  %% Line 232
	  <[],Address> when 'true' ->
	      %% Line 233
	      apply 'mod'/1
		  (Address)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mod',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gen_udp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gen_udp', _cor0)
end