module 'docgen_edoc_xml_cb' ['module'/2,
			     'module_info'/0,
			     'module_info'/1,
			     'overview'/2]
    attributes []
'module'/2 =
    %% Line 40
    fun (_cor1,_cor0) ->
	let <SortP> =
	    %% Line 41
	    call 'proplists':'get_value'
		('sort_functions', _cor0, 'true')
	in  let <XML> =
		%% Line 42
		apply 'layout_module'/2
		    (_cor1, SortP)
	    in  let <RootAttributes> =
		    %% Line 43
		    apply 'root_attributes'/2
			(_cor1, _cor0)
		in  %% Line 44
		    call 'xmerl':'export_simple'
			([XML|[]], 'docgen_xmerl_xml_cb', RootAttributes)
'overview'/2 =
    %% Line 47
    fun (_cor1,_cor0) ->
	let <XML> =
	    %% Line 48
	    apply 'layout_chapter'/1
		(_cor1)
	in  let <RootAttributes> =
		%% Line 49
		apply 'root_attributes'/2
		    (_cor1, _cor0)
	    in  %% Line 50
		call 'xmerl':'export_simple'
		    ([XML|[]], 'docgen_xmerl_xml_cb', RootAttributes)
'layout_module'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','module',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,Es,_cor55,_cor56,_cor57},SortP> when 'true' ->
	      let <Name> =
		  %% Line 55
		  apply 'get_attrval'/2
		      ('name', E)
	      in  let <Desc> =
		      %% Line 56
		      apply 'get_content'/2
			  ('description', Es)
		  in  let <_cor4> =
			  %% Line 57
			  apply 'get_content'/2
			      ('briefDescription', Desc)
		      in  let <ShortDesc> =
			      %% Line 57
			      apply 'text_only'/1
				  (_cor4)
			  in  let <_cor6> =
				  %% Line 58
				  apply 'get_content'/2
				      ('fullDescription', Desc)
			      in  let <FullDesc> =
				      %% Line 58
				      apply 'otp_xmlify'/1
					  (_cor6)
				  in  let <Types0> =
					  %% Line 59
					  apply 'get_content'/2
					      ('typedecls', Es)
				      in  let <_cor14> =
					      %% Line 60
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor11) ->
							    case _cor11 of
							      <[Et|_cor10]> when 'true' ->
								  let <_cor12> =
								      apply 'type_name'/1
									  (Et)
								  in  let <_cor13> =
									  apply 'lc$^0'/1
									      (_cor10)
								      in  ( [{_cor12,Et}|_cor13]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor11> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor11})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^0'/1
							(Types0)
						-| ['list_comprehension'] )
					  in  let <Types1> =
						  %% Line 60
						  call 'lists':'sort'
						      (_cor14)
					      in  let <_cor30> =
						      %% Line 62
						      case SortP of
							%% Line 63
							<'true'> when 'true' ->
							    let <_cor22> =
								%% Line 64
								( letrec
								      'lc$^1'/1 =
									  fun (_cor19) ->
									      case _cor19 of
										<[%% Line 65
										  Ef|_cor17]> when 'true' ->
										    let <_cor20> =
											apply 'function_name'/1
											    (Ef)
										    in  let <_cor21> =
											    %% Line 65
											    apply 'lc$^1'/1
												(_cor17)
											in  ( [{_cor20,Ef}|_cor21]
											      -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_cor19> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor19})
											-| [{'function_name',{'lc$^1',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  let <_cor18> =
									  %% Line 65
									  apply 'get_content'/2
									      ('functions', Es)
								      in  apply 'lc$^1'/1
									      (_cor18)
								  -| ['list_comprehension'] )
							    in  %% Line 64
								call 'lists':'sort'
								    (_cor22)
							%% Line 66
							<'false'> when 'true' ->
							    %% Line 67
							    ( letrec
								  'lc$^2'/1 =
								      fun (_cor26) ->
									  case _cor26 of
									    <[%% Line 68
									      Ef|_cor24]> when 'true' ->
										let <_cor27> =
										    apply 'function_name'/1
											(Ef)
										in  let <_cor28> =
											%% Line 68
											apply 'lc$^2'/1
											    (_cor24)
										    in  ( [{_cor27,Ef}|_cor28]
											  -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_cor26> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor26})
										    -| [{'function_name',{'lc$^2',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  let <_cor25> =
								      %% Line 68
								      apply 'get_content'/2
									  ('functions', Es)
								  in  apply 'lc$^2'/1
									  (_cor25)
							      -| ['list_comprehension'] )
							( <_cor29> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor29})
							  -| ['compiler_generated'] )
						      end
						  in  let <_cor32> =
							  %% Line 79
							  call 'erlang':'++'
							      (Name, [46|[120|[109|[108]]]])
						      in  let <Header> =
							      %% Line 70
							      {'header',[%% Line 71
									 [10]|%% Line 71
									      [{'title',[Name|[]]}|%% Line 72
												   [[10]|[{'prepared',[[]]}|%% Line 73
															    [[10]|[{'responsible',[[]]}|%% Line 74
																			[[10]|[{'docno',[[49]]}|%% Line 75
																						[[10]|[{'approved',[[]]}|%% Line 76
																									 [[10]|[{'checked',[[]]}|%% Line 77
																												 [[10]|[{'date',[[]]}|%% Line 78
																														      [[10]|[{'rev',[[65]]}|%% Line 79
																																	    [[10]|[{'file',[_cor32|[]]}|%% Line 80
																																					[]]]]]]]]]]]]]]]]]]]}
							  in  let <Module> =
								  %% Line 81
								  {'module',[Name|[]]}
							      in  let <ModuleSummary> = {%% Line 82
								       'modulesummary',%% Line 82
										       ShortDesc}
								  in  let <Description> =
									  %% Line 83
									  {'description',[[10]|FullDesc]}
								      in  let <_cor39> =
									      %% Line 84
									      case Types1 of
										%% Line 85
										<[]> when 'true' ->
										    []
										%% Line 86
										<_cor58> when 'true' ->
										    let <_cor37> =
											%% Line 89
											apply 'types'/1
											    (Types1)
										    in  %% Line 87
											[[10]|[{'section',[{'title',[[68|[65|[84|[65|[32|[84|[89|[80|[69|[83]]]]]]]]]]]}|%% Line 88
																					 [{'marker',[{'id',[116|[121|[112|[101|[115]]]]]}],[]}|%% Line 89
																											       [[10]|_cor37]]]}|%% Line 89
																														[]]]
									      end
									  in  let <Funcs> =
										  %% Line 91
										  apply 'functions'/1
										      (_cor30)
									      in  let <See> =
										      %% Line 92
										      apply 'seealso_module'/1
											  (Es)
										  in  let <_cor43> =
											  %% Line 93
											  apply 'authors'/1
											      (Es)
										      in  let <Authors> = {%% Line 93
											       'authors',_cor43}
											  in  let <_cor45> =
												  %% Line 99
												  call 'erlang':'++'
												      (_cor39, %% Line 100
													       [[10]|[Funcs|%% Line 101
															    [[10]|[See|%% Line 102
																       [[10]|[Authors|[]]]]]]])
											      in  let <_cor46> =
												      %% Line 95
												      [[10]|[Header|%% Line 96
														    [[10]|[Module|%% Line 97
																  [[10]|[ModuleSummary|%% Line 98
																		       [[10]|[Description|_cor45]]]]]]]]
												  in  %% Line 94
												      {'erlref',_cor46}
	  ( <_cor48,_cor47> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor48,_cor47})
		  -| [{'function_name',{'layout_module',2}}] )
	    -| ['compiler_generated'] )
	end
'root_attributes'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 106
	    case apply 'get_attrval'/2
		     ('encoding', _cor1) of
	      %% Line 107
	      <[]> when 'true' ->
		  let <DefaultEncoding> =
		      %% Line 108
		      call 'epp':'default_encoding'
			  ()
		  in  %% Line 109
		      call 'proplists':'get_value'
			  ('encoding', _cor0, DefaultEncoding)
	      %% Line 110
	      <Enc> when 'true' ->
		  %% Line 111
		  Enc
	    end
	in  %% Line 113
	    [{'xmlAttribute','encoding',[],[],[],[],'undefined',[],_cor4,'undefined'}|[]]
'layout_chapter'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement','overview',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      let <Title> =
		  %% Line 116
		  apply 'get_text'/2
		      ('title', Es)
	      in  let <Header> =
		      %% Line 117
		      {'header',[%% Line 118
				 [10]|%% Line 118
				      [{'title',[Title|[]]}|%% Line 119
							    [[10]|[{'prepared',[[]]}|[[10]|[{'docno',[[]]}|[[10]|[{'date',[[]]}|[[10]|[{'rev',[[]]}|[[10]|[{'file',[[99|[104|[97|[112|[116|[101|[114|[46|[120|[109|[108]]]]]]]]]]]]}]]]]]]]]]]]]}
		  in  let <DescEs> =
			  %% Line 125
			  apply 'get_content'/2
			      ('description', Es)
		      in  let <FullDescEs> =
			      %% Line 126
			      apply 'get_content'/2
				  ('fullDescription', DescEs)
			  in  let <Sections> =
				  %% Line 127
				  apply 'chapter_ify'/2
				      (FullDescEs, 'first')
			      in  %% Line 128
				  {'chapter',[[10]|[Header|[[10]|Sections]]]}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'layout_chapter',1}}] )
	    -| ['compiler_generated'] )
	end
'chapter_ify'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor12> when 'true' ->
	      %% Line 131
	      []
	  %% Line 132
	  <Es,'first'> when 'true' ->
	      %% Line 136
	      case apply 'find_next'/2
		       ('h3', Es) of
		%% Line 137
		<{_cor13,[]}>
		    when call 'erlang':'=:='
			  (_cor13,
			   Es) ->
		    let <SubSections> =
			%% Line 138
			apply 'subchapter_ify'/2
			    (Es, 'first')
		    in  %% Line 139
			[{'section',[[10]|[{'title',[[79|[118|[101|[114|[118|[105|[101|[119]]]]]]]]]}|%% Line 140
												      [[10]|SubSections]]]}|%% Line 140
															    []]
		%% Line 141
		<{FirstEs,RestEs}> when 'true' ->
		    let <_cor4> =
			%% Line 142
			apply 'otp_xmlify'/1
			    (FirstEs)
		    in  let <_cor3> =
			    %% Line 142
			    apply 'chapter_ify'/2
				(RestEs, 'next')
			in  %% Line 142
			    call 'erlang':'++'
				(_cor4, _cor3)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 144
	  <[E = {'xmlElement','h3',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}|Es],'next'> when 'true' ->
	      %% Line 145
	      case apply 'find_next'/2
		       ('h3', Es) of
		<{SectionEs,RestEs}> when 'true' ->
		    let <SubSections> =
			%% Line 146
			apply 'subchapter_ify'/2
			    (SectionEs, 'first')
		    in  %% Line 147
			case apply 'chapter_title'/1
				 (E) of
			  <{Marker,Title}> when 'true' ->
			      let <_cor9> =
				  %% Line 150
				  apply 'chapter_ify'/2
				      (RestEs, 'next')
			      in  %% Line 148
				  [{'section',[[10]|[{'marker',[{'id',Marker}|[]],[]}|%% Line 149
										      [[10]|[{'title',[Title|[]]}|%% Line 150
														  [[10]|SubSections]]]]]}|_cor9]
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'chapter_ify',2}}] )
	    -| ['compiler_generated'] )
	end
'subchapter_ify'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor11> when 'true' ->
	      %% Line 153
	      []
	  %% Line 154
	  <Es,'first'> when 'true' ->
	      %% Line 157
	      case apply 'find_next'/2
		       ('h4', Es) of
		<{FirstEs,RestEs}> when 'true' ->
		    let <_cor4> =
			%% Line 158
			apply 'otp_xmlify'/1
			    (FirstEs)
		    in  let <_cor3> =
			    %% Line 158
			    apply 'subchapter_ify'/2
				(RestEs, 'next')
			in  %% Line 158
			    call 'erlang':'++'
				(_cor4, _cor3)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 159
	  <[E = {'xmlElement','h4',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|Es],'next'> when 'true' ->
	      %% Line 160
	      case apply 'find_next'/2
		       ('h4', Es) of
		<{SectionEs,RestEs}> when 'true' ->
		    let <Elements> =
			%% Line 161
			apply 'otp_xmlify'/1
			    (SectionEs)
		    in  %% Line 162
			case apply 'chapter_title'/1
				 (E) of
			  <{Marker,Title}> when 'true' ->
			      let <_cor8> =
				  %% Line 165
				  apply 'subchapter_ify'/2
				      (RestEs, 'next')
			      in  %% Line 163
				  [{'section',[[10]|[{'marker',[{'id',Marker}|[]],[]}|%% Line 164
										      [[10]|[{'title',[Title|[]]}|%% Line 165
														  [[10]|Elements]]]]]}|_cor8]
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'subchapter_ify',2}}] )
	    -| ['compiler_generated'] )
	end
'chapter_title'/1 =
    %% Line 167
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 168
	      case Es of
		%% Line 169
		<[E = {'xmlElement','a',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|[]]> when 'true' ->
		    let <_cor2> =
			%% Line 170
			apply 'get_attrval'/2
			    ('name', E)
		    in  let <_cor1> =
			    %% Line 170
			    apply 'get_text'/1
				(E)
			in  %% Line 170
			    {_cor2,_cor1}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'chapter_title',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify'/1 =
    %% Line 204
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 205
	      []
	  %% Line 206
	  <Es0> when 'true' ->
	      let <_cor1> =
		  %% Line 207
		  call 'erlang':'hd'
		      (Es0)
	      in  let <_cor5> =
		      %% Line 207
		      case apply 'is_paragraph'/1
			       (_cor1) of
			%% Line 211
			<'true'> when 'true' ->
			    %% Line 212
			    Es0
			%% Line 218
			<'false'> when 'true' ->
			    %% Line 219
			    case apply 'find_next'/3
				     ('p', Es0, []) of
			      %% Line 220
			      <{First = [{'xmlText',_cor9,_cor10,_cor11,Str,_cor12}|[]],Rest}> when 'true' ->
				  %% Line 223
				  case apply 'is_empty'/1
					   (Str) of
				    %% Line 224
				    <'true'> when 'true' ->
					%% Line 225
					Rest
				    %% Line 226
				    <'false'> when 'true' ->
					%% Line 227
					[{'p',First}|Rest]
				    ( <_cor2> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor2})
				      -| ['compiler_generated'] )
				  end
			      %% Line 229
			      <{First,Rest}> when 'true' ->
				  %% Line 230
				  [{'p',First}|Rest]
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		  in  let <EsFixed> =
			  %% Line 235
			  apply 'otp_xmlify_fix'/1
			      (_cor5)
		      in  %% Line 237
			  apply 'otp_xmlify_es'/1
			      (EsFixed)
	end
'otp_xmlify_fix'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	apply 'otp_xmlify_fix'/2
	    (_cor0, [])
'otp_xmlify_fix'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E1 = {'xmlText',_cor8,_cor9,_cor10,[10|[32|[10|_cor11]]],_cor12}|[E2|Es]],Res> when 'true' ->
	      %% Line 245
	      case apply 'is_paragraph'/1
		       (E2) of
		%% Line 246
		<'false'> when 'true' ->
		    %% Line 247
		    case apply 'find_p_ending'/2
			     (Es, []) of
		      <{P,After}> when 'true' ->
			  %% Line 248
			  apply 'otp_xmlify_fix'/2
			      (After, [{'p',[E2|P]}|[E1|Res]])
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 249
		<'true'> when 'true' ->
		    %% Line 250
		    apply 'otp_xmlify_fix'/2
			([E2|Es], [E1|Res])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 252
	  <[E1 = {'xmlText',_cor13,_cor14,_cor15,[10|[10]],_cor16}|[E2|Es]],Res> when 'true' ->
	      %% Line 254
	      case apply 'is_paragraph'/1
		       (E2) of
		%% Line 255
		<'false'> when 'true' ->
		    %% Line 256
		    case apply 'find_p_ending'/2
			     (Es, []) of
		      <{P,After}> when 'true' ->
			  %% Line 257
			  apply 'otp_xmlify_fix'/2
			      (After, [{'p',[E2|P]}|[E1|Res]])
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 258
		<'true'> when 'true' ->
		    %% Line 259
		    apply 'otp_xmlify_fix'/2
			([E2|Es], [E1|Res])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 261
	  <[E|Es],Res> when 'true' ->
	      %% Line 262
	      apply 'otp_xmlify_fix'/2
		  (Es, [E|Res])
	  %% Line 263
	  <[],Res> when 'true' ->
	      %% Line 264
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'otp_xmlify_fix',2}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_es'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      %% Line 267
	      case apply 'is_paragraph'/1
		       (E) of
		%% Line 268
		<'true'> when 'true' ->
		    %% Line 269
		    case apply 'otp_xmlify_psplit'/1
			     (E) of
		      %% Line 272
		      <'nosplit'> when 'true' ->
			  let <_cor2> =
			      %% Line 273
			      apply 'otp_xmlify_e'/1
				  (E)
			  in  let <_cor1> =
				  %% Line 273
				  apply 'otp_xmlify_es'/1
				      (Es)
			      in  %% Line 273
				  call 'erlang':'++'
				      (_cor2, _cor1)
		      %% Line 277
		      <SubEs> when 'true' ->
			  let <_cor4> =
			      %% Line 278
			      call 'lists':'flatmap'
				  (( 'otp_xmlify_e'/1
				     -| [{'id',{0,0,'-otp_xmlify_es/1-fun-0-'}}] ), SubEs)
			  in  let <_cor3> =
				  %% Line 279
				  apply 'otp_xmlify_es'/1
				      (Es)
			      in  %% Line 278
				  call 'erlang':'++'
				      (_cor4, _cor3)
		    end
		%% Line 281
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 282
			apply 'otp_xmlify_e'/1
			    (E)
		    in  let <_cor6> =
			    %% Line 282
			    apply 'otp_xmlify_es'/1
				(Es)
			in  %% Line 282
			    call 'erlang':'++'
				(_cor7, _cor6)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 284
	  <[]> when 'true' ->
	      %% Line 285
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'otp_xmlify_es',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_psplit'/1 =
    %% Line 291
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 292
	    apply 'p_content'/1
		(_cor0)
	in  %% Line 292
	    apply 'otp_xmlify_psplit'/3
		(_cor1, [], [])
'otp_xmlify_psplit'/3 =
    %% Line 293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[E = {'xmlElement',Name,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}|Es],Content,Res> when 'true' ->
	      %% Line 294
	      case <> of
		%% Line 295
		<>
		    when let <_cor3> =
			  call 'erlang':'=:='
			      (Name, 'blockquote')
		      in  let <_cor4> =
			      call 'erlang':'=:='
				  (Name, 'ul')
			  in  let <_cor5> =
				  call 'erlang':'=:='
				      (Name, 'ol')
			      in  let <_cor6> =
				      call 'erlang':'=:='
					  (Name, 'dl')
				  in  let <_cor7> =
					  call 'erlang':'=:='
					      (Name, 'pre')
				      in  let <_cor8> =
					      %% Line 296
					      call 'erlang':'=:='
						  (Name, 'table')
					  in  let <_cor9> =
						  call 'erlang':'or'
						      (_cor7, _cor8)
					      in  let <_cor10> =
						      call 'erlang':'or'
							  (_cor6, _cor9)
						  in  let <_cor11> =
							  call 'erlang':'or'
							      (_cor5, _cor10)
						      in  let <_cor12> =
							      call 'erlang':'or'
								  (_cor4, _cor11)
							  in  call 'erlang':'or'
								  (_cor3, _cor12) ->
		    %% Line 297
		    case Content of
		      %% Line 298
		      <[]> when 'true' ->
			  %% Line 299
			  apply 'otp_xmlify_psplit'/3
			      (Es, [], [E|Res])
		      %% Line 300
		      <[{'xmlText',_cor34,_cor35,_cor36,Str,_cor37}|[]]> when 'true' ->
			  %% Line 305
			  case apply 'is_empty'/1
				   (Str) of
			    %% Line 306
			    <'true'> when 'true' ->
				%% Line 307
				apply 'otp_xmlify_psplit'/3
				    (Es, [], [E|Res])
			    %% Line 308
			    <'false'> when 'true' ->
				let <_cor13> =
				    %% Line 309
				    call 'lists':'reverse'
					(Content)
				in  let <Pnew> = {%% Line 309
					 'p',_cor13}
				    in  %% Line 310
					apply 'otp_xmlify_psplit'/3
					    (Es, [], [E|[Pnew|Res]])
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor15})
			      -| ['compiler_generated'] )
			  end
		      %% Line 312
		      <_cor38> when 'true' ->
			  let <_cor16> =
			      %% Line 313
			      call 'lists':'reverse'
				  (Content)
			  in  let <Pnew> = {%% Line 313
				   'p',_cor16}
			      in  %% Line 314
				  apply 'otp_xmlify_psplit'/3
				      (Es, [], [E|[Pnew|Res]])
		    end
		%% Line 317
		<> when 'true' ->
		    %% Line 318
		    apply 'otp_xmlify_psplit'/3
			(Es, [E|Content], Res)
	      end
	  %% Line 320
	  <[E|Es],Content,Res> when 'true' ->
	      %% Line 321
	      apply 'otp_xmlify_psplit'/3
		  (Es, [E|Content], Res)
	  %% Line 322
	  <[],_X_Content,[]> when 'true' ->
	      %% Line 323
	      'nosplit'
	  %% Line 324
	  <[],[],Res> when 'true' ->
	      %% Line 325
	      call 'lists':'reverse'
		  (Res)
	  %% Line 326
	  <[],[{'xmlText',_cor39,_cor40,_cor41,[10|[10]],_cor42}|[]],Res> when 'true' ->
	      %% Line 327
	      call 'lists':'reverse'
		  (Res)
	  %% Line 328
	  <[],Content,Res> when 'true' ->
	      let <_cor19> =
		  %% Line 329
		  call 'lists':'reverse'
		      (Content)
	      in  let <Pnew> = {%% Line 329
		       'p',_cor19}
		  in  %% Line 330
		      call 'lists':'reverse'
			  ([Pnew|Res])
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'otp_xmlify_psplit',3}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_e'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement','a',_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169}> when 'true' ->
	      %% Line 340
	      apply 'otp_xmlify_a'/1
		  (E)
	  %% Line 341
	  <E = {'xmlElement',Tag,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179}>
	      when let <_cor1> =
		    %% Line 342
		    call 'erlang':'=:='
			(Tag, 'b')
		in  let <_cor2> =
			%% Line 342
			call 'erlang':'=:='
			    (Tag, 'em')
		    in  let <_cor3> =
			    %% Line 342
			    call 'erlang':'=:='
				(Tag, 'pre')
			in  let <_cor4> =
				%% Line 342
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  %% Line 342
				call 'erlang':'or'
				    (_cor1, _cor4) ->
	      let <Content> =
		  %% Line 343
		  apply 'text_only'/1
		      (_cor176)
	      in  let <_cor10> =
		      %% Line 344
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 344
		      [_cor10|[]]
	  %% Line 345
	  <E = {'xmlElement','code',_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212}> when 'true' ->
	      let <_cor13> =
		  catch
		      %% Line 346
		      apply 'text_only'/1
			  (_cor209)
	      in  %% Line 346
		  case _cor13 of
		    %% Line 347
		    <{'EXIT',_X_Error}> when 'true' ->
			%% Line 348
			apply 'otp_xmlify_code'/1
			    (E)
		    %% Line 349
		    <Content> when 'true' ->
			let <_cor16> =
			    %% Line 350
			    call 'erlang':'setelement'
				(9, E, Content)
			in  %% Line 350
			    [_cor16|[]]
		  end
	  %% Line 352
	  <E = {'xmlElement',Tag,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245}>
	      when let <_cor18> =
		    %% Line 353
		    call 'erlang':'=:='
			(Tag, 'h1')
		in  let <_cor19> =
			%% Line 353
			call 'erlang':'=:='
			    (Tag, 'h2')
		    in  let <_cor20> =
			    %% Line 353
			    call 'erlang':'=:='
				(Tag, 'h3')
			in  let <_cor21> =
				%% Line 353
				call 'erlang':'=:='
				    (Tag, 'h4')
			    in  let <_cor22> =
				    %% Line 353
				    call 'erlang':'=:='
					(Tag, 'h5')
				in  let <_cor23> =
					%% Line 353
					call 'erlang':'or'
					    (_cor21, _cor22)
				    in  let <_cor24> =
					    %% Line 353
					    call 'erlang':'or'
						(_cor20, _cor23)
					in  let <_cor25> =
						%% Line 353
						call 'erlang':'or'
						    (_cor19, _cor24)
					    in  %% Line 353
						call 'erlang':'or'
						    (_cor18, _cor25) ->
	      let <Content> =
		  %% Line 354
		  apply 'text_and_a_name_only'/1
		      (_cor242)
	      in  let <_cor30> =
		      %% Line 355
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  let <_cor32> =
			  %% Line 355
			  call 'erlang':'setelement'
			      (2, _cor30, 'b')
		      in  %% Line 355
			  [_cor32|[]]
	  %% Line 356
	  <E = {'xmlElement',Tag,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278}>
	      when let <_cor33> =
		    %% Line 357
		    call 'erlang':'=:='
			(Tag, 'center')
		in  let <_cor34> =
			%% Line 358
			call 'erlang':'=:='
			    (Tag, 'font')
		    in  %% Line 357
			call 'erlang':'or'
			    (_cor33, _cor34) ->
	      %% Line 359
	      apply 'otp_xmlify_e'/1
		  (_cor275)
	  %% Line 360
	  <E = {'xmlElement','table',_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299}> when 'true' ->
	      %% Line 361
	      case apply 'parent'/1
		       (E) of
		%% Line 362
		<'module'> when 'true' ->
		    %% Line 363
		    apply 'otp_xmlify_table'/1
			(_cor296)
		%% Line 364
		<'overview'> when 'true' ->
		    let <Content0> =
			%% Line 365
			apply 'otp_xmlify_e'/1
			    (_cor296)
		    in  let <_cor42> =
			    %% Line 366
			    apply 'get_attrval'/2
				('summary', E)
			in  let <Summary> =
				%% Line 366
				{'xmlText',[],'undefined',[],_cor42,'text'}
			    in  let <_rec9> =
				    %% Line 369
				    [Summary|[]]
				in  let <_cor46> =
					%% Line 369
					call 'erlang':'setelement'
					    (9, E, _rec9)
				    in  let <_cor47> =
					    %% Line 368
					    call 'erlang':'setelement'
						(8, _cor46, [])
					in  let <_cor49> =
						%% Line 367
						call 'erlang':'setelement'
						    (2, _cor47, 'tcaption')
					    in  let <Content> =
						    %% Line 370
						    call 'erlang':'++'
							(Content0, [_cor49|[]])
						in  let <_cor53> =
							%% Line 371
							call 'erlang':'setelement'
							    (9, E, Content)
						    in  let <_cor55> =
							    %% Line 371
							    call 'erlang':'setelement'
								(8, _cor53, [])
							in  %% Line 371
							    [_cor55|[]]
		( <_cor56> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor56})
		  -| ['compiler_generated'] )
	      end
	  %% Line 373
	  <E = {'xmlElement','tbody',_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355}> when 'true' ->
	      %% Line 374
	      apply 'otp_xmlify_e'/1
		  (_cor352)
	  %% Line 375
	  <E = {'xmlElement','sup',_cor367,_cor368,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375,_cor376}> when 'true' ->
	      let <Text> =
		  %% Line 376
		  apply 'get_text'/1
		      (E)
	      in  let <_cor60> =
		      %% Line 380
		      call 'erlang':'++'
			  (Text, [41])
		  in  let <_cor61> =
			  %% Line 380
			  [40|_cor60]
		      in  %% Line 377
			  [{'xmlText',_cor370,_cor371,_cor374,_cor61,'text'}|%% Line 380
									     []]
	  %% Line 381
	  <E = {'xmlElement','blockquote',_cor410,_cor411,_cor412,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419}> when 'true' ->
	      let <Content> =
		  %% Line 382
		  apply 'otp_xmlify_blockquote'/1
		      (_cor416)
	      in  let <_cor73> =
		      %% Line 383
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 383
		      [_cor73|[]]
	  %% Line 384
	  <E = {'xmlElement','th',_cor443,_cor444,_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452}> when 'true' ->
	      let <Content> =
		  %% Line 385
		  apply 'otp_xmlify_e'/1
		      (_cor449)
	      in  let <_cor78> =
		      %% Line 386
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  let <_cor80> =
			  %% Line 386
			  call 'erlang':'setelement'
			      (2, _cor78, 'em')
		      in  let <_rec20> =
			      %% Line 387
			      [_cor80|[]]
			  in  let <_cor84> =
				  %% Line 387
				  call 'erlang':'setelement'
				      (9, E, _rec20)
			      in  let <_cor86> =
				      %% Line 387
				      call 'erlang':'setelement'
					  (2, _cor84, 'td')
				  in  %% Line 387
				      [_cor86|[]]
	  %% Line 388
	  <E = {'xmlElement','p',_cor488,_cor489,_cor490,_cor491,_cor492,_cor493,_cor494,_cor495,_cor496,_cor497}> when 'true' ->
	      let <Content> =
		  %% Line 389
		  apply 'otp_xmlify_e'/1
		      (_cor494)
	      in  let <_cor92> =
		      %% Line 390
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 390
		      [_cor92|[]]
	  %% Line 391
	  <{'p',Content1}> when 'true' ->
	      let <Content2> =
		  %% Line 392
		  apply 'otp_xmlify_e'/1
		      (Content1)
	      in  %% Line 393
		  [{'p',Content2}|[]]
	  %% Line 394
	  <E = {'xmlElement','ul',_cor521,_cor522,_cor523,_cor524,_cor525,_cor526,_cor527,_cor528,_cor529,_cor530}> when 'true' ->
	      let <Content> =
		  %% Line 395
		  apply 'otp_xmlify_e'/1
		      (_cor527)
	      in  let <_cor99> =
		      %% Line 396
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 396
		      [_cor99|[]]
	  %% Line 397
	  <E = {'xmlElement','li',_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,_cor560,_cor561,_cor562,_cor563}> when 'true' ->
	      let <Content> =
		  %% Line 399
		  apply 'otp_xmlify'/1
		      (_cor560)
	      in  let <_cor105> =
		      %% Line 400
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 400
		      [_cor105|[]]
	  %% Line 401
	  <E = {'xmlElement','dl',_cor587,_cor588,_cor589,_cor590,_cor591,_cor592,_cor593,_cor594,_cor595,_cor596}> when 'true' ->
	      let <Content0> =
		  %% Line 402
		  apply 'otp_xmlify_e'/1
		      (_cor593)
	      in  let <Content> =
		      %% Line 403
		      apply 'otp_xmlify_dl'/1
			  (Content0)
		  in  let <_cor112> =
			  %% Line 404
			  call 'erlang':'setelement'
			      (9, E, Content)
		      in  %% Line 404
			  [_cor112|[]]
	  %% Line 405
	  <E = {'xmlElement','dt',_cor620,_cor621,_cor622,_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629}> when 'true' ->
	      let <_cor121> =
		  %% Line 409
		  case _cor626 of
		    %% Line 410
		    <[A = {'xmlElement','a',_cor641,_cor642,_cor643,_cor644,_cor645,_cor646,_cor647,_cor648,_cor649,_cor650}|[]]> when 'true' ->
			let <_cor115> =
			    %% Line 411
			    apply 'otp_xmlify_e'/1
				(A)
			in  do  %% Line 411
				call 'erlang':'put'
				    ('dt_marker', _cor115)
				%% Line 412
				apply 'otp_xmlify_e'/1
				    (_cor647)
		    %% Line 413
		    <_cor662> when 'true' ->
			%% Line 414
			apply 'otp_xmlify_e'/1
			    (_cor626)
		  end
	      in  let <_cor125> =
		      %% Line 416
		      call 'erlang':'setelement'
			  (9, E, _cor121)
		  in  %% Line 416
		      [_cor125|[]]
	  %% Line 417
	  <E = {'xmlElement','dd',_cor686,_cor687,_cor688,_cor689,_cor690,_cor691,_cor692,_cor693,_cor694,_cor695}> when 'true' ->
	      let <Content0> =
		  %% Line 419
		  apply 'otp_xmlify'/1
		      (_cor692)
	      in  let <_cor133> =
		      %% Line 420
		      case call 'erlang':'get'
			       ('dt_marker') of
			%% Line 421
			<'undefined'> when 'true' ->
			    Content0
			%% Line 422
			<[Marker|[]]> when 'true' ->
			    do  %% Line 423
				call 'erlang':'put'
				    ('dt_marker', 'undefined')
				%% Line 424
				case Marker of
				  <{'xmlElement',_cor707,_cor708,_cor709,_cor710,_cor711,_cor712,_cor713,_cor714,_cor715,_cor716,_cor717}> when 'true' ->
				      let <_cor131> =
					  call 'erlang':'setelement'
					      (9, Marker, [])
				      in  [_cor131|Content0]
				  ( <_cor718> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlElement'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_cor132> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor132})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor137> =
			  %% Line 426
			  call 'erlang':'setelement'
			      (9, E, _cor133)
		      in  %% Line 426
			  [_cor137|[]]
	  %% Line 427
	  <E = {'xmlElement','tr',_cor731,_cor732,_cor733,_cor734,_cor735,_cor736,_cor737,_cor738,_cor739,_cor740}> when 'true' ->
	      let <Content> =
		  %% Line 428
		  apply 'otp_xmlify_e'/1
		      (_cor737)
	      in  let <_cor143> =
		      %% Line 429
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 429
		      [_cor143|[]]
	  %% Line 430
	  <E = {'xmlElement','td',_cor764,_cor765,_cor766,_cor767,_cor768,_cor769,_cor770,_cor771,_cor772,_cor773}> when 'true' ->
	      let <Content> =
		  %% Line 431
		  apply 'otp_xmlify_e'/1
		      (_cor770)
	      in  let <_cor149> =
		      %% Line 432
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  %% Line 432
		      [_cor149|[]]
	  %% Line 433
	  <E = {'xmlElement','img',_cor797,_cor798,_cor799,_cor800,_cor801,_cor802,_cor803,_cor804,_cor805,_cor806}> when 'true' ->
	      let <Content> =
		  %% Line 434
		  apply 'otp_xmlify_e'/1
		      (_cor803)
	      in  let <_cor155> =
		      %% Line 435
		      call 'erlang':'setelement'
			  (9, E, Content)
		  in  let <_cor156> =
			  %% Line 435
			  apply 'otp_xmlify_img'/1
			      (_cor155)
		      in  %% Line 435
			  [_cor156|[]]
	  %% Line 436
	  <[E|Es]> when 'true' ->
	      let <_cor158> =
		  %% Line 437
		  apply 'otp_xmlify_e'/1
		      (E)
	      in  let <_cor157> =
		      %% Line 437
		      apply 'otp_xmlify_e'/1
			  (Es)
		  in  %% Line 437
		      call 'erlang':'++'
			  (_cor158, _cor157)
	  %% Line 438
	  <[]> when 'true' ->
	      %% Line 439
	      []
	  %% Line 440
	  <E> when 'true' ->
	      %% Line 441
	      [E|[]]
	end
'otp_xmlify_a'/1 =
    %% Line 454
    fun (_cor0) ->
	%% Line 455
	( case _cor0 of
	    ( <( {'xmlElement',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec43,_cor32,_cor33,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'filter_a_attrs'/1
			   (_rec43) of
		    <[Attr0|[]]> when 'true' ->
			%% Line 456
			case Attr0 of
			  %% Line 457
			  <{'xmlAttribute','href',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,Href0,_cor43}> when 'true' ->
			      let <Content0> =
				  %% Line 458
				  apply 'text_only'/1
				      (_cor32)
			      in  %% Line 459
				  case apply 'otp_xmlify_a_href'/2
					   (Href0, Content0) of
				    <{Href,Content}> when 'true' ->
					let <_cor10> =
					    %% Line 460
					    call 'erlang':'setelement'
						(9, Attr0, Href)
					in  let <_rec45> =
						%% Line 460
						[_cor10|[]]
					    in  let <_cor13> =
						    %% Line 461
						    call 'erlang':'setelement'
							(9, _cor0, Content)
						in  let <_cor15> =
							%% Line 460
							call 'erlang':'setelement'
							    (8, _cor13, _rec45)
						    in  %% Line 460
							[_cor15|%% Line 461
								[]]
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  %% Line 462
			  <{'xmlAttribute','name',_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84}> when 'true' ->
			      let <Content> =
				  %% Line 463
				  apply 'otp_xmlify_e'/1
				      (_cor32)
			      in  let <_rec49> =
				      %% Line 464
				      [Attr0|[]]
				  in  let <_cor21> =
					  %% Line 464
					  call 'erlang':'setelement'
					      (9, _cor0, Content)
				      in  let <_cor23> =
					      %% Line 464
					      call 'erlang':'setelement'
						  (8, _cor21, _rec49)
					  in  %% Line 464
					      [_cor23|[]]
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor24})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filter_a_attrs'/1 =
    %% Line 470
    fun (_cor0) ->
	case _cor0 of
	  <[Attr = {'xmlAttribute','href',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}|_X_Attrs]> when 'true' ->
	      %% Line 471
	      [Attr|[]]
	  %% Line 472
	  <[Attr = {'xmlAttribute','name',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}|_X_Attrs]> when 'true' ->
	      %% Line 473
	      [Attr|[]]
	  %% Line 474
	  <[_X_Attr|Attrs]> when 'true' ->
	      %% Line 475
	      apply 'filter_a_attrs'/1
		  (Attrs)
	  %% Line 476
	  <[]> when 'true' ->
	      %% Line 477
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'filter_a_attrs',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_a_href'/2 =
    %% Line 481
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Marker = [35|_cor19],Es0> when 'true' ->
	      %% Line 482
	      {Marker,Es0}
	  %% Line 483
	  <URL = [104|[116|[116|[112|[58|_cor20]]]]],Es0> when 'true' ->
	      %% Line 484
	      {URL,Es0}
	  %% Line 485
	  <[79|[84|[80|[82|[79|[79|[84|AppRef]]]]]]],Es0> when 'true' ->
	      %% Line 486
	      case apply 'split'/2
		       (AppRef, [47]) of
		<[AppS|[[100|[111|[99]]]|[FileRef1|[]]]]> when 'true' ->
		    let <_cor3> =
			%% Line 487
			apply 'otp_xmlify_a_fileref'/2
			    (FileRef1, AppS)
		    in  let <_cor4> =
			    %% Line 487
			    [58|_cor3]
			in  let <FileRef> =
				%% Line 487
				call 'erlang':'++'
				    (AppS, _cor4)
			    in  %% Line 488
				case Es0 of
				  <[T = {'xmlText',_cor21,_cor22,_cor23,Str0,_cor24}|[]]> when 'true' ->
				      let <_cor10> =
					  %% Line 489
					  case apply 'split'/2
						   (Str0, [47]) of
					    %% Line 491
					    <[AppS2|[]]> when 'true' ->
						%% Line 494
						AppS2
					    %% Line 495
					    <[_X_AppS|[ModRef|[]]]> when 'true' ->
						%% Line 496
						case apply 'split'/2
							 (ModRef, [58]) of
						  %% Line 498
						  <[Module|[]]> when 'true' ->
						      %% Line 499
						      call 'erlang':'++'
							  (Module, [40|[51|[41]]])
						  %% Line 501
						  <[_X_Module|[_X_Type|[]]]> when 'true' ->
						      %% Line 502
						      ModRef
						  ( <_cor7> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor7})
						    -| ['compiler_generated'] )
						end
					    %% Line 505
					    <[_X_AppS|[ModFunc|[Arity|[]]]]> when 'true' ->
						let <_cor8> =
						    %% Line 506
						    [47|Arity]
						in  %% Line 506
						    call 'erlang':'++'
							(ModFunc, _cor8)
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor9})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor14> =
					      %% Line 508
					      call 'erlang':'setelement'
						  (5, T, _cor10)
					  in  %% Line 508
					      {FileRef,[_cor14|[]]}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 509
	  <[46|[46|[47|File]]],Es0> when 'true' ->
	      let <_cor15> =
		  %% Line 514
		  call 'erlang':'++'
		      ([46|[46|[47|[46|[46|[47]]]]]], File)
	      in  %% Line 514
		  {_cor15,Es0}
	  %% Line 515
	  <FileRef1,Es0> when 'true' ->
	      let <FileRef2> =
		  %% Line 516
		  apply 'otp_xmlify_a_fileref'/2
		      (FileRef1, 'this')
	      in  %% Line 517
		  {FileRef2,Es0}
	end
'otp_xmlify_a_fileref'/2 =
    %% Line 521
    fun (_cor1,_cor0) ->
	%% Line 522
	case apply 'split'/2
		 (_cor1, [46|[35]]) of
	  %% Line 526
	  <[[111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121]]]]]]]]]]]]]]]]|[_X_Ext|[]]]> when 'true' ->
	      %% Line 527
	      [99|[104|[97|[112|[116|[101|[114]]]]]]]
	  %% Line 528
	  <[[111|[118|[101|[114|[118|[105|[101|[119|[45|[115|[117|[109|[109|[97|[114|[121]]]]]]]]]]]]]]]]|[_X_Ext|[Marker|[]]]]> when 'true' ->
	      %% Line 529
	      call 'erlang':'++'
		  ([99|[104|[97|[112|[116|[101|[114|[35]]]]]]]], Marker)
	  %% Line 531
	  <[File|[Ext|[]]]>
	      when let <_cor2> =
		    call 'erlang':'=='
			(Ext, [120|[109|[108]]])
		in  let <_cor3> =
			%% Line 532
			call 'erlang':'=='
			    (Ext, [104|[116|[109|[108]]]])
		    in  let <_cor4> =
			    %% Line 532
			    call 'erlang':'=/='
				(_cor0, 'this')
			in  let <_cor5> =
				%% Line 532
				call 'erlang':'and'
				    (_cor3, _cor4)
			    in  call 'erlang':'or'
				    (_cor2, _cor5) ->
	      %% Line 533
	      File
	  %% Line 534
	  <[File|[Ext|[Marker0|[]]]]> when 'true' ->
	      let <IsEDocGenerated> =
		  %% Line 549
		  call 'lists':'member'
		      (_cor0, [[101|[100|[111|[99]]]]|[[104|[105|[112|[101]]]]|[[115|[121|[110|[116|[97|[120|[95|[116|[111|[111|[108|[115]]]]]]]]]]]]|[[120|[109|[101|[114|[108]]]]]]]]])
	      in  let <_cor12> =
		      %% Line 550
		      case <> of
			%% Line 556
			<>
			    when let <_cor8> =
				  call 'erlang':'=:='
				      (_cor0, 'this')
			      in  let <_cor9> =
				      call 'erlang':'=:='
					  (IsEDocGenerated, 'true')
				  in  call 'erlang':'or'
					  (_cor8, _cor9) ->
			    %% Line 557
			    Marker0
			%% Line 562
			<> when 'true' ->
			    %% Line 563
			    case apply 'split'/2
				     (Marker0, [45]) of
			      %% Line 564
			      <[Func|[Arity|[]]]> when 'true' ->
				  let <_cor10> =
				      %% Line 565
				      [47|Arity]
				  in  %% Line 565
				      call 'erlang':'++'
					  (Func, _cor10)
			      %% Line 566
			      <_cor25> when 'true' ->
				  %% Line 567
				  Marker0
			    end
		      end
		  in  %% Line 570
		      case <> of
			%% Line 574
			<>
			    when let <_cor14> =
				  call 'erlang':'=='
				      (Ext, [120|[109|[108]]])
			      in  let <_cor15> =
				      %% Line 575
				      call 'erlang':'=='
					  (Ext, [104|[116|[109|[108]]]])
				  in  let <_cor16> =
					  %% Line 575
					  call 'erlang':'=/='
					      (_cor0, 'this')
				      in  let <_cor17> =
					      %% Line 575
					      call 'erlang':'and'
						  (_cor15, _cor16)
					  in  call 'erlang':'or'
						  (_cor14, _cor17) ->
			    let <_cor18> =
				%% Line 576
				[35|_cor12]
			    in  %% Line 576
				call 'erlang':'++'
				    (File, _cor18)
			%% Line 577
			<> when 'true' ->
			    let <_cor19> =
				%% Line 578
				[35|_cor12]
			    in  let <_cor20> =
				    %% Line 578
				    call 'erlang':'++'
					(Ext, _cor19)
				in  let <_cor21> =
					%% Line 578
					[46|_cor20]
				    in  %% Line 578
					call 'erlang':'++'
					    (File, _cor21)
		      end
	  %% Line 582
	  <_cor26> when 'true' ->
	      _cor1
	end
'otp_xmlify_blockquote'/1 =
    %% Line 589
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','p',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 590
		  apply 'otp_xmlify_blockquote'/1
		      (Es)
	      in  %% Line 590
		  [E|_cor1]
	  %% Line 591
	  <[E = {'xmlText',_cor15,_cor16,_cor17,_cor18,_cor19}|Es]> when 'true' ->
	      %% Line 592
	      case apply 'find_p_ending'/2
		       (Es, []) of
		<{P,After}> when 'true' ->
		    let <_cor3> =
			%% Line 593
			apply 'otp_xmlify_blockquote'/1
			    (After)
		    in  %% Line 593
			[{'p',[E|P]}|_cor3]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 594
	  <[]> when 'true' ->
	      %% Line 595
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'otp_xmlify_blockquote',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_code'/1 =
    %% Line 608
    fun (_cor0) ->
	%% Line 609
	( case _cor0 of
	    ( <( {'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_rec52,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'otp_xmlify_code'/3
		      (_cor0, _rec52, [])
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'otp_xmlify_code'/3 =
    %% Line 610
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Code,[E = {'xmlText',_cor10,_cor11,_cor12,_cor13,_cor14}|Es],Acc> when 'true' ->
	      let <_rec53> =
		  %% Line 611
		  [E|[]]
	      in  %% Line 611
		  case Code of
		    <{'xmlElement',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
			let <_cor6> =
			    call 'erlang':'setelement'
				(9, Code, _rec53)
			in  apply 'otp_xmlify_code'/3
				(Code, Es, [_cor6|Acc])
		    ( <_cor26> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xmlElement'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 612
	  <Code,[E = {'xmlElement',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}|Es],Acc> when 'true' ->
	      %% Line 613
	      apply 'otp_xmlify_code'/3
		  (Code, Es, [E|Acc])
	  %% Line 614
	  <_X_Code,[],Acc> when 'true' ->
	      %% Line 615
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'otp_xmlify_code',3}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_dl'/1 =
    %% Line 620
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','dt',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 621
		  apply 'otp_xmlify_dl'/2
		      (Es, E)
	      in  %% Line 621
		  [E|_cor1]
	  %% Line 622
	  <[E|Es]> when 'true' ->
	      let <_cor2> =
		  %% Line 623
		  apply 'otp_xmlify_dl'/1
		      (Es)
	      in  %% Line 623
		  [E|_cor2]
	  %% Line 624
	  <[]> when 'true' ->
	      %% Line 625
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'otp_xmlify_dl',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_dl'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E = {'xmlElement','dd',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}|Es],_X_DT> when 'true' ->
	      let <_cor2> =
		  %% Line 628
		  apply 'otp_xmlify_dl'/1
		      (Es)
	      in  %% Line 628
		  [E|_cor2]
	  %% Line 629
	  <[E = {'xmlElement','dt',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}|Es],DT> when 'true' ->
	      %% Line 630
	      case DT of
		<{'xmlElement',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (9, DT, [])
		    in  let <_cor5> =
			    call 'erlang':'setelement'
				(8, _cor4, [])
			in  let <_cor7> =
				call 'erlang':'setelement'
				    (2, _cor5, 'dd')
			    in  let <_cor9> =
				    %% Line 631
				    apply 'otp_xmlify_dl'/2
					(Es, E)
				in  %% Line 631
				    [_cor7|[E|_cor9]]
		( <_cor50> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmlElement'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 632
	  <[E|Es],DT> when 'true' ->
	      let <_cor10> =
		  %% Line 633
		  apply 'otp_xmlify_dl'/2
		      (Es, DT)
	      in  %% Line 633
		  [E|_cor10]
	  %% Line 634
	  <[],DT> when 'true' ->
	      %% Line 635
	      case DT of
		<{'xmlElement',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
		    let <_cor12> =
			call 'erlang':'setelement'
			    (9, DT, [])
		    in  let <_cor13> =
			    call 'erlang':'setelement'
				(8, _cor12, [])
			in  let <_cor15> =
				call 'erlang':'setelement'
				    (2, _cor13, 'dd')
			    in  %% Line 636
				[_cor15|[]]
		( <_cor62> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmlElement'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'otp_xmlify_dl',2}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_table'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlText',_cor13,_cor14,_cor15,_cor16,_cor17}|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 641
		  apply 'otp_xmlify_table'/1
		      (Es)
	      in  %% Line 641
		  [E|_cor1]
	  %% Line 642
	  <[E = {'xmlElement','tbody',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}|Es]> when 'true' ->
	      let <_cor5> =
		  %% Line 643
		  apply 'otp_xmlify_table'/1
		      (_cor24)
	      in  let <_cor2> =
		      %% Line 643
		      apply 'otp_xmlify_table'/1
			  (Es)
		  in  %% Line 643
		      call 'erlang':'++'
			  (_cor5, _cor2)
	  %% Line 644
	  <[{'xmlElement','tr',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,Content,_cor45,_cor46,_cor47}|Es]> when 'true' ->
	      let <_cor8> =
		  %% Line 646
		  apply 'otp_xmlify_table'/1
		      (Content)
	      in  let <_cor6> =
		      %% Line 646
		      apply 'otp_xmlify_table'/1
			  (Es)
		  in  let <_cor7> =
			  %% Line 646
			  [{'br',[]}|_cor6]
		      in  %% Line 646
			  call 'erlang':'++'
			      (_cor8, _cor7)
	  %% Line 647
	  <[{'xmlElement','th',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,Content,_cor54,_cor55,_cor56}|Es]> when 'true' ->
	      let <_cor9> =
		  %% Line 648
		  apply 'otp_xmlify_table'/1
		      (Es)
	      in  %% Line 648
		  [{'em',Content}|_cor9]
	  %% Line 649
	  <[{'xmlElement','td',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,Content,_cor63,_cor64,_cor65}|Es]> when 'true' ->
	      let <_cor11> =
		  %% Line 650
		  apply 'otp_xmlify_e'/1
		      (Content)
	      in  let <_cor10> =
		      %% Line 650
		      apply 'otp_xmlify_table'/1
			  (Es)
		  in  %% Line 650
		      call 'erlang':'++'
			  (_cor11, _cor10)
	  %% Line 651
	  <[]> when 'true' ->
	      %% Line 652
	      []
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'otp_xmlify_table',1}}] )
	    -| ['compiler_generated'] )
	end
'otp_xmlify_img'/1 =
    %% Line 656
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 658
	    ( fun (_cor7) ->
		  case _cor7 of
		    <A = {'xmlAttribute','src',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,Path,_cor22}> when 'true' ->
			let <V> =
			    %% Line 659
			    apply 'otp_xmlify_a_fileref'/2
				(Path, 'this')
			in  let <_cor5> =
				%% Line 661
				call 'erlang':'setelement'
				    (9, A, V)
			    in  %% Line 660
				call 'erlang':'setelement'
				    (2, _cor5, 'file')
		    %% Line 662
		    <A> when 'true' ->
			%% Line 663
			A
		  end
	      -| [{'id',{0,0,'-otp_xmlify_img/1-fun-0-'}}] )
	in  %% Line 664
	    ( case _cor0 of
		( <( {'xmlElement',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_rec59,_cor39,_cor40,_cor41,_cor42}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Attrs> =
			  call 'lists':'map'
			      (_cor9, _rec59)
		      in  let <_cor12> =
			      %% Line 666
			      call 'erlang':'setelement'
				  (8, _cor0, Attrs)
			  in  let <_cor13> =
				  %% Line 665
				  call 'erlang':'setelement'
				      (3, _cor12, 'image')
			      in  %% Line 665
				  call 'erlang':'setelement'
				      (2, _cor13, 'image')
		  -| ['compiler_generated'] )
		( <_cor43> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmlElement'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'find_next'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	%% Line 675
	apply 'find_next'/3
	    (_cor1, _cor0, [])
'find_next'/3 =
    %% Line 676
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tag,[E = {'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}|Es],AccEs>
	      when call 'erlang':'=:='
		    (_cor8,
		     Tag) ->
	      let <_cor3> =
		  %% Line 677
		  call 'lists':'reverse'
		      (AccEs)
	      in  %% Line 677
		  {_cor3,[E|Es]}
	  %% Line 678
	  <Tag,[E|Es],AccEs> when 'true' ->
	      %% Line 679
	      apply 'find_next'/3
		  (Tag, Es, [E|AccEs])
	  %% Line 680
	  <_X_Tag,[],AccEs> when 'true' ->
	      let <_cor4> =
		  %% Line 681
		  call 'lists':'reverse'
		      (AccEs)
	      in  %% Line 681
		  {_cor4,[]}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'find_next',3}}] )
	    -| ['compiler_generated'] )
	end
'find_p_ending'/2 =
    %% Line 690
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E = {'xmlText',_cor7,_cor8,_cor9,[10|[32|[10|_cor10]]],_cor11}|Es],P> when 'true' ->
	      let <_cor2> =
		  %% Line 691
		  call 'lists':'reverse'
		      (P)
	      in  %% Line 691
		  {_cor2,[E|Es]}
	  %% Line 692
	  <[E = {'xmlElement','p',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|Es],P> when 'true' ->
	      let <_cor3> =
		  %% Line 693
		  call 'lists':'reverse'
		      (P)
	      in  %% Line 693
		  {_cor3,[E|Es]}
	  %% Line 694
	  <[E|Es],P> when 'true' ->
	      %% Line 695
	      apply 'find_p_ending'/2
		  (Es, [E|P])
	  %% Line 696
	  <[],P> when 'true' ->
	      let <_cor4> =
		  %% Line 697
		  call 'lists':'reverse'
		      (P)
	      in  %% Line 697
		  {_cor4,[]}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'find_p_ending',2}}] )
	    -| ['compiler_generated'] )
	end
'is_paragraph'/1 =
    %% Line 701
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement','p',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      'true'
	  %% Line 702
	  <{'p',_X_Es}> when 'true' ->
	      'true'
	  %% Line 703
	  <_X_E> when 'true' ->
	      'false'
	end
'p_content'/1 =
    %% Line 706
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Content,_cor9,_cor10,_cor11}> when 'true' ->
	      Content
	  %% Line 707
	  <{'p',Content}> when 'true' ->
	      Content
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'p_content',1}}] )
	    -| ['compiler_generated'] )
	end
'is_empty'/1 =
    %% Line 713
    fun (_cor0) ->
	case _cor0 of
	  <[10|Str]> when 'true' ->
	      %% Line 714
	      apply 'is_empty'/1
		  (Str)
	  %% Line 715
	  <[32|Str]> when 'true' ->
	      %% Line 716
	      apply 'is_empty'/1
		  (Str)
	  %% Line 717
	  <[9|Str]> when 'true' ->
	      %% Line 718
	      apply 'is_empty'/1
		  (Str)
	  %% Line 719
	  <[]> when 'true' ->
	      %% Line 720
	      'true'
	  %% Line 721
	  <_cor2> when 'true' ->
	      %% Line 722
	      'false'
	end
'split'/2 =
    %% Line 725
    fun (_cor1,_cor0) ->
	%% Line 726
	apply 'split'/3
	    (_cor1, _cor0, [])
'split'/3 =
    %% Line 728
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Ch|Str],Seps,Acc> when 'true' ->
	      %% Line 729
	      case call 'lists':'member'
		       (Ch, Seps) of
		%% Line 730
		<'true'> when 'true' ->
		    apply 'split'/3
			(Str, Seps, Acc)
		%% Line 731
		<'false'> when 'true' ->
		    apply 'split'/4
			(Str, Seps, Acc, [Ch|[]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 733
	  <[],_X_Seps,Acc> when 'true' ->
	      %% Line 734
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'split',3}}] )
	    -| ['compiler_generated'] )
	end
'split'/4 =
    %% Line 736
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Ch|Str],Seps,Acc,Chs> when 'true' ->
	      %% Line 737
	      case call 'lists':'member'
		       (Ch, Seps) of
		%% Line 738
		<'true'> when 'true' ->
		    let <_cor4> =
			call 'lists':'reverse'
			    (Chs)
		    in  apply 'split'/3
			    (Str, Seps, [_cor4|Acc])
		%% Line 739
		<'false'> when 'true' ->
		    apply 'split'/4
			(Str, Seps, Acc, [Ch|Chs])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 741
	  <[],_X_Seps,Acc,Chs> when 'true' ->
	      let <_cor6> =
		  %% Line 742
		  call 'lists':'reverse'
		      (Chs)
	      in  %% Line 742
		  call 'lists':'reverse'
		      ([_cor6|Acc])
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split',4}}] )
	    -| ['compiler_generated'] )
	end
'function_name'/1 =
    %% Line 749
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 750
	    apply 'get_attrval'/2
		('name', _cor0)
	in  let <_cor1> =
		%% Line 750
		apply 'get_attrval'/2
		    ('arity', _cor0)
	    in  let <_cor2> =
		    %% Line 750
		    [47|_cor1]
		in  %% Line 750
		    call 'erlang':'++'
			(_cor3, _cor2)
'functions'/1 =
    %% Line 756
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 757
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Name,E}> when 'true' ->
			apply 'function'/2
			    (Name, E)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-functions/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-functions/1-fun-0-'}}] )
	in  let <Es> =
		%% Line 757
		call 'lists':'flatmap'
		    (_cor3, _cor0)
	    in  %% Line 758
		case <> of
		  %% Line 759
		  <>
		      when call 'erlang':'=:='
			    (Es,
			     []) ->
		      %% Line 760
		      []
		  %% Line 761
		  <> when 'true' ->
		      %% Line 762
		      {'funcs',Es}
		end
'function'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Name,E = {'xmlElement',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,Es,_cor25,_cor26,_cor27}> when 'true' ->
	      let <TypeSpec> =
		  %% Line 766
		  apply 'get_content'/2
		      ('typespec', Es)
	      in  let <_cor6> =
		      %% Line 769
		      case apply 'funcheader'/1
			       (TypeSpec) of
			%% Line 770
			<[]> when 'true' ->
			    let <_cor4> =
				%% Line 771
				apply 'get_content'/2
				    ('args', Es)
			    in  let <_cor3> =
				    %% Line 772
				    apply 'get_attrval'/2
					('name', E)
				in  %% Line 771
				    apply 'signature'/2
					(_cor4, _cor3)
			%% Line 773
			<Spec> when 'true' ->
			    Spec
		      end
		  in  let <_cor7> =
			  %% Line 776
			  apply 'fsummary'/1
			      (Es)
		      in  let <_cor8> =
			      %% Line 777
			      apply 'local_types'/1
				  (TypeSpec)
			  in  let <_cor14> =
				  %% Line 779
				  apply 'label_anchor'/1
				      (E)
			      in  let <_cor12> =
				      %% Line 780
				      apply 'deprecated'/1
					  (Es)
				  in  let <_cor10> =
					  %% Line 781
					  apply 'fulldesc'/1
					      (Es)
				      in  let <_cor9> =
					      %% Line 782
					      apply 'seealso_function'/1
						  (Es)
					  in  let <_cor11> =
						  %% Line 781
						  call 'erlang':'++'
						      (_cor10, _cor9)
					      in  let <_cor13> =
						      %% Line 780
						      call 'erlang':'++'
							  (_cor12, _cor11)
						  in  let <_cor15> =
							  %% Line 779
							  call 'erlang':'++'
							      (_cor14, _cor13)
						      in  %% Line 767
							  [[10]|[{'func',[[10]|%% Line 768
									       [{'name',_cor6}|%% Line 776
											       [[10]|[{'fsummary',_cor7}|%% Line 777
															 [[10]|[_cor8|%% Line 778
																      [[10]|[{'desc',_cor15}|%% Line 783
																			     []]]]]]]]]}|%% Line 783
																					 []]]
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'function',2}}] )
	    -| ['compiler_generated'] )
	end
'fsummary'/1 =
    %% Line 785
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 786
	  <Es> when 'true' ->
	      let <Desc> =
		  %% Line 787
		  apply 'get_content'/2
		      ('description', Es)
	      in  %% Line 788
		  case apply 'get_content'/2
			   ('briefDescription', Desc) of
		    %% Line 789
		    <[]> when 'true' ->
			%% Line 790
			apply 'fsummary_equiv'/1
			    (Es)
		    %% Line 791
		    <ShortDesc> when 'true' ->
			%% Line 792
			apply 'text_only'/1
			    (ShortDesc)
		  end
	end
'fsummary_equiv'/1 =
    %% Line 795
    fun (_cor0) ->
	%% Line 796
	case apply 'get_content'/2
		 ('equiv', _cor0) of
	  %% Line 797
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 798
	  <Es1> when 'true' ->
	      %% Line 799
	      case apply 'get_content'/2
		       ('expr', Es1) of
		%% Line 800
		<[]> when 'true' ->
		    [[32]]
		%% Line 801
		<[Expr|[]]> when 'true' ->
		    %% Line 802
		    [[69|[113|[117|[105|[118|[97|[108|[101|[110|[116|[32|[116|[111|[32]]]]]]]]]]]]]]|[Expr|[[46]|[[10]]]]]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'label_anchor'/1 =
    %% Line 806
    fun (_cor0) ->
	%% Line 807
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 808
	  <[]> when 'true' ->
	      []
	  %% Line 809
	  <Ref> when 'true' ->
	      [{'marker',[{'id',Ref}|[]],[]}|[[10]]]
	end
'label_anchor'/2 =
    %% Line 812
    fun (_cor1,_cor0) ->
	%% Line 813
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 814
	  <[]> when 'true' ->
	      _cor1
	  %% Line 815
	  <Ref> when 'true' ->
	      {'p',[{'marker',[{'id',Ref}|[]],[]}|%% Line 816
						  [{'em',_cor1}|[]]]}
	end
'signature'/2 =
    %% Line 819
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 820
	    apply 'seq'/2
		(( 'arg'/1
		   -| [{'id',{0,0,'-signature/2-fun-0-'}}] ), _cor1)
	in  let <_cor3> =
		%% Line 820
		call 'erlang':'++'
		    (_cor2, [[41|[32|[45|[62|[32|[116|[101|[114|[109|[40|[41]]]]]]]]]]]|[[10]]])
	    in  %% Line 820
		[_cor0|[[40]|_cor3]]
'arg'/1 =
    %% Line 822
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Es,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor1> =
		  %% Line 823
		  apply 'get_text'/2
		      ('argName', Es)
	      in  %% Line 823
		  [_cor1|[]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'arg',1}}] )
	    -| ['compiler_generated'] )
	end
'funcheader'/1 =
    %% Line 825
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 826
	  <Es> when 'true' ->
	      let <_cor3> =
		  %% Line 827
		  apply 'get_elem'/2
		      ('erlangName', Es)
	      in  let <_cor4> =
		      %% Line 827
		      apply 't_name'/1
			  (_cor3)
		  in  let <_cor1> =
			  %% Line 827
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor2> =
			      %% Line 827
			      apply 't_utype'/1
				  (_cor1)
			  in  %% Line 827
			      [_cor4|_cor2]
	end
'local_types'/1 =
    %% Line 829
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 830
	  <Es> when 'true' ->
	      let <_cor1> =
		  %% Line 831
		  apply 'get_elem'/2
		      ('localdef', Es)
	      in  %% Line 831
		  apply 'local_defs2'/1
		      (_cor1)
	end
'local_defs2'/1 =
    %% Line 833
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 834
	  <Es> when 'true' ->
	      let <_cor6> =
		  %% Line 835
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[E|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'localdef2'/1
					      (E)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{'v',_cor4}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 835
		  {'type',[[10]|_cor6]}
	end
'localdef2'/1 =
    %% Line 839
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Es,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 840
	      case apply 'get_elem'/2
		       ('typevar', Es) of
		%% Line 841
		<[]> when 'true' ->
		    let <_cor1> =
			%% Line 842
			apply 'get_elem'/2
			    ('type', Es)
		    in  %% Line 842
			apply 't_utype'/1
			    (_cor1)
		%% Line 843
		<[V|[]]> when 'true' ->
		    let <_cor5> =
			%% Line 844
			apply 't_var'/1
			    (V)
		    in  let <_cor2> =
			    %% Line 844
			    apply 'get_elem'/2
				('type', Es)
			in  let <_cor3> =
				%% Line 844
				apply 't_utype'/1
				    (_cor2)
			    in  let <_cor4> =
				    %% Line 844
				    [[32|[61|[32]]]|_cor3]
				in  %% Line 844
				    call 'erlang':'++'
					(_cor5, _cor4)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'localdef2',1}}] )
	    -| ['compiler_generated'] )
	end
'type_name'/1 =
    %% Line 847
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Es,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor1> =
		  %% Line 848
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <_cor2> =
		      %% Line 848
		      apply 'get_elem'/2
			  ('erlangName', _cor1)
		  in  %% Line 848
		      apply 't_name'/1
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'type_name',1}}] )
	    -| ['compiler_generated'] )
	end
'types'/1 =
    %% Line 850
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 851
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Name,E}> when 'true' ->
			apply 'typedecl'/2
			    (Name, E)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-types/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-types/1-fun-0-'}}] )
	in  let <Es> =
		%% Line 851
		call 'lists':'flatmap'
		    (_cor3, _cor0)
	    in  %% Line 852
		[[10]|[{'taglist',[[10]|Es]}|[]]]
'typedecl'/2 =
    %% Line 854
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Es,_cor18,_cor19,_cor20}> when 'true' ->
	      let <TypedefEs> =
		  %% Line 855
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <Id> =
		      %% Line 856
		      call 'erlang':'++'
			  ([116|[121|[112|[101|[45]]]]], Name)
		  in  let <_cor4> =
			  %% Line 857
			  apply 'typedef'/1
			      (TypedefEs)
		      in  let <_cor6> =
			      %% Line 860
			      apply 'get_elem'/2
				  ('localdef', TypedefEs)
			  in  let <_cor7> =
				  %% Line 860
				  apply 'local_defs'/1
				      (_cor6)
			      in  let <_cor5> =
				      %% Line 860
				      apply 'fulldesc'/1
					  (Es)
				  in  let <_cor8> =
					  %% Line 860
					  call 'erlang':'++'
					      (_cor7, _cor5)
				      in  %% Line 857
					  [{'tag',_cor4}|%% Line 858
							 [[10]|%% Line 859
							       [{'item',[{'marker',[{'id',Id}|[]],[]}|_cor8]}|%% Line 861
													      [[10]]]]]
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'typedecl',2}}] )
	    -| ['compiler_generated'] )
	end
'typedef'/1 =
    %% Line 863
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 864
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor4> =
		%% Line 864
		apply 't_name'/1
		    (_cor3)
	    in  let <_cor1> =
		    %% Line 865
		    apply 'get_content'/2
			('argtypes', _cor0)
		in  let <_cor2> =
			%% Line 865
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-typedef/1-fun-0-'}}] ), _cor1, [[41]])
		    in  let <Name> =
			    %% Line 864
			    [_cor4|%% Line 865
				   [[40]|_cor2]]
			in  %% Line 866
			    case apply 'get_elem'/2
				     ('type', _cor0) of
			      %% Line 867
			      <[]> when 'true' ->
				  %% Line 868
				  [{'tt',Name}|[]]
			      %% Line 869
			      <Type> when 'true' ->
				  let <_cor6> =
				      %% Line 870
				      apply 't_utype'/1
					  (Type)
				  in  let <_cor7> =
					  %% Line 870
					  [[32|[61|[32]]]|_cor6]
				      in  let <_cor8> =
					      %% Line 870
					      call 'erlang':'++'
						  (Name, _cor7)
					  in  %% Line 870
					      [{'tt',_cor8}|[]]
			    end
'local_defs'/1 =
    %% Line 873
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 874
	  <Es> when 'true' ->
	      let <_cor6> =
		  %% Line 875
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[E|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'localdef'/1
					      (E)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{'li',[{'tt',_cor4}|[]]}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Es)
		    -| ['list_comprehension'] )
	      in  %% Line 875
		  [[10]|[{'ul',_cor6}|[]]]
	end
'localdef'/1 =
    %% Line 877
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Es,_cor18,_cor19,_cor20}> when 'true' ->
	      let <_cor5> =
		  %% Line 878
		  case apply 'get_elem'/2
			   ('typevar', Es) of
		    %% Line 879
		    <[]> when 'true' ->
			let <_cor1> =
			    %% Line 880
			    apply 'get_content'/2
				('abstype', Es)
			in  let <_cor2> =
				%% Line 880
				apply 't_abstype'/1
				    (_cor1)
			    in  let <_cor3> =
				    %% Line 880
				    apply 'label_anchor'/2
					(_cor2, E)
				in  %% Line 880
				    [_cor3|[]]
		    %% Line 881
		    <[V|[]]> when 'true' ->
			%% Line 882
			apply 't_var'/1
			    (V)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 884
		      apply 'get_elem'/2
			  ('type', Es)
		  in  let <_cor8> =
			  %% Line 884
			  apply 't_utype'/1
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 884
			      [[32|[61|[32]]]|_cor8]
			  in  %% Line 884
			      call 'erlang':'++'
				  (_cor5, _cor9)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'localdef',1}}] )
	    -| ['compiler_generated'] )
	end
'deprecated'/1 =
    %% Line 886
    fun (_cor0) ->
	%% Line 887
	case apply 'get_content'/2
		 ('deprecated', _cor0) of
	  %% Line 888
	  <[]> when 'true' ->
	      []
	  %% Line 889
	  <DeprEs> when 'true' ->
	      let <_cor1> =
		  %% Line 891
		  apply 'get_content'/2
		      ('description', DeprEs)
	      in  let <Es2> =
		      %% Line 890
		      apply 'get_content'/2
			  ('fullDescription', _cor1)
		  in  let <Es3> =
			  %% Line 892
			  apply 'otp_xmlify_e'/1
			      (Es2)
		      in  %% Line 893
			  [{'p',[{'em',[[84|[104|[105|[115|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|Es3]}|[[10]]]
	end
'fulldesc'/1 =
    %% Line 896
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 897
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 897
	    case apply 'get_content'/2
		     ('fullDescription', _cor1) of
	      %% Line 898
	      <[]> when 'true' ->
		  %% Line 899
		  apply 'index_desc'/1
		      (_cor0)
	      %% Line 900
	      <Desc> when 'true' ->
		  let <_cor2> =
		      %% Line 901
		      apply 'otp_xmlify'/1
			  (Desc)
		  in  %% Line 901
		      [[10]|call 'erlang':'++'
				(_cor2, [[10]])]
	    end
'index_desc'/1 =
    %% Line 904
    fun (_cor0) ->
	let <Desc> =
	    %% Line 905
	    apply 'get_content'/2
		('description', _cor0)
	in  %% Line 906
	    case apply 'get_content'/2
		     ('briefDescription', Desc) of
	      %% Line 907
	      <[]> when 'true' ->
		  %% Line 908
		  apply 'equiv'/1
		      (_cor0)
	      %% Line 909
	      <ShortDesc> when 'true' ->
		  %% Line 910
		  ShortDesc
	    end
'seealso_module'/1 =
    %% Line 913
    fun (_cor0) ->
	%% Line 914
	case apply 'get_elem'/2
		 ('see', _cor0) of
	  %% Line 915
	  <[]> when 'true' ->
	      []
	  %% Line 916
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 917
		  apply 'seq'/3
		      (( 'see'/1
			 -| [{'id',{0,0,'-seealso_module/1-fun-0-'}}] ), Es1, [])
	      in  %% Line 917
		  {'section',[{'title',[[83|[101|[101|[32|[97|[108|[115|[111]]]]]]]]]}|[{'p',_cor1}|[]]]}
	end
'seealso_function'/1 =
    %% Line 919
    fun (_cor0) ->
	%% Line 920
	case apply 'get_elem'/2
		 ('see', _cor0) of
	  %% Line 921
	  <[]> when 'true' ->
	      []
	  %% Line 922
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 923
		  apply 'seq'/3
		      (( 'see'/1
			 -| [{'id',{0,0,'-seealso_function/1-fun-0-'}}] ), Es1, [[46]])
	      in  let <_cor2> =
		      %% Line 923
		      [{'em',[[83|[101|[101|[32|[97|[108|[115|[111|[58]]]]]]]]]]}|[[32]|_cor1]]
		  in  %% Line 923
		      [{'p',_cor2}|%% Line 924
				   [[10]]]
	end
'see'/1 =
    %% Line 930
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Es0,_cor11,_cor12,_cor13}> when 'true' ->
	      let <Href0> =
		  %% Line 931
		  apply 'get_attrval'/2
		      ('href', E)
	      in  %% Line 932
		  case apply 'otp_xmlify_a_href'/2
			   (Href0, Es0) of
		    <{Href,Es}> when 'true' ->
			%% Line 933
			[{'seealso',[{'marker',Href}|[]],Es}|[]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'see',1}}] )
	    -| ['compiler_generated'] )
	end
'equiv'/1 =
    %% Line 935
    fun (_cor0) ->
	%% Line 936
	case apply 'get_content'/2
		 ('equiv', _cor0) of
	  %% Line 937
	  <[]> when 'true' ->
	      [[32]]
	  %% Line 938
	  <Es1> when 'true' ->
	      %% Line 939
	      case apply 'get_content'/2
		       ('expr', Es1) of
		%% Line 940
		<[]> when 'true' ->
		    []
		%% Line 941
		<[Expr|[]]> when 'true' ->
		    let <Expr1> =
			%% Line 942
			[Expr|[]]
		    in  let <_cor4> =
			    %% Line 943
			    case apply 'get_elem'/2
				     ('see', Es1) of
			      %% Line 944
			      <[]> when 'true' ->
				  %% Line 945
				  {'c',Expr1}
			      %% Line 946
			      <[E = {'xmlElement',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}|[]]> when 'true' ->
				  %% Line 947
				  case apply 'get_attrval'/2
					   ('href', E) of
				    %% Line 948
				    <[]> when 'true' ->
					%% Line 949
					{'c',Expr1}
				    %% Line 950
				    <Ref> when 'true' ->
					%% Line 951
					{'seealso',[{'marker',Ref}|[]],Expr1}
				  end
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
			in  %% Line 954
			    [{'p',[[69|[113|[117|[105|[118|[97|[108|[101|[110|[116|[32|[116|[111|[32]]]]]]]]]]]]]]|[_cor4|[[46]]]]}|[[10]]]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'authors'/1 =
    %% Line 958
    fun (_cor0) ->
	%% Line 959
	case apply 'get_elem'/2
		 ('author', _cor0) of
	  %% Line 960
	  <[]> when 'true' ->
	      %% Line 961
	      [[10]|[{'aname',[[32]]}|[[10]|[{'email',[[32]]}]]]]
	  %% Line 962
	  <Es1> when 'true' ->
	      let <_cor1> =
		  %% Line 963
		  apply 'seq'/4
		      (( 'author'/1
			 -| [{'id',{0,0,'-authors/1-fun-0-'}}] ), Es1, [], [])
	      in  %% Line 963
		  [[10]|_cor1]
	end
'author'/1 =
    %% Line 966
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor2> =
		  %% Line 967
		  case apply 'get_attrval'/2
			   ('name', E) of
		    %% Line 968
		    <[]> when 'true' ->
			[32]
		    %% Line 969
		    <N> when 'true' ->
			N
		  end
	      in  let <_cor5> =
		      %% Line 971
		      case apply 'get_attrval'/2
			       ('email', E) of
			%% Line 972
			<[]> when 'true' ->
			    [32]
			%% Line 973
			<M> when 'true' ->
			    M
		      end
		  in  %% Line 975
		      [[10]|[{'aname',[_cor2|[]]}|[[10]|[{'email',[_cor5|[]]}|[]]]]]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'author',1}}] )
	    -| ['compiler_generated'] )
	end
't_name'/1 =
    %% Line 977
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <N> =
		  %% Line 978
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 979
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 980
		    <[]> when 'true' ->
			N
		    %% Line 981
		    <M> when 'true' ->
			let <_cor2> =
			    %% Line 982
			    [58|N]
			in  let <S> =
				%% Line 982
				call 'erlang':'++'
				    (M, _cor2)
			    in  %% Line 983
				case apply 'get_attrval'/2
					 ('app', E) of
				  %% Line 984
				  <[]> when 'true' ->
				      S
				  %% Line 985
				  <A> when 'true' ->
				      let <_cor4> =
					  [47|S]
				      in  let <_cor5> =
					      call 'erlang':'++'
						  (A, _cor4)
					  in  [47|[47|_cor5]]
				end
		  end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'t_name',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype'/1 =
    %% Line 989
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 990
	      apply 't_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_utype',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype_elem'/1 =
    %% Line 992
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 993
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 994
		<[]> when 'true' ->
		    apply 't_type'/1
			(Es)
		%% Line 995
		<Name> when 'true' ->
		    let <T> =
			%% Line 996
			apply 't_type'/1
			    (Es)
		    in  %% Line 997
			case T of
			  %% Line 998
			  <[_cor16|[]]>
			      when call 'erlang':'=:='
				    (_cor16,
				     Name) ->
			      T
			  %% Line 999
			  <_cor17> when 'true' ->
			      let <_cor2> =
				  [[58|[58]]|T]
			      in  [Name|_cor2]
			end
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
't_type'/1 =
    %% Line 1003
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}|[]]> when 'true' ->
	      %% Line 1004
	      apply 't_var'/1
		  (E)
	  %% Line 1005
	  <[E = {'xmlElement','atom',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|[]]> when 'true' ->
	      %% Line 1006
	      apply 't_atom'/1
		  (E)
	  %% Line 1007
	  <[E = {'xmlElement','integer',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}|[]]> when 'true' ->
	      %% Line 1008
	      apply 't_integer'/1
		  (E)
	  %% Line 1009
	  <[E = {'xmlElement','range',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}|[]]> when 'true' ->
	      %% Line 1010
	      apply 't_range'/1
		  (E)
	  %% Line 1011
	  <[E = {'xmlElement','float',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}|[]]> when 'true' ->
	      %% Line 1012
	      apply 't_float'/1
		  (E)
	  %% Line 1013
	  <[{'xmlElement','nil',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}|[]]> when 'true' ->
	      %% Line 1014
	      apply 't_nil'/0
		  ()
	  %% Line 1015
	  <[{'xmlElement','list',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,Es,_cor68,_cor69,_cor70}|[]]> when 'true' ->
	      %% Line 1016
	      apply 't_list'/1
		  (Es)
	  %% Line 1017
	  <[{'xmlElement','nonempty_list',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,Es,_cor77,_cor78,_cor79}|[]]> when 'true' ->
	      %% Line 1018
	      apply 't_nonempty_list'/1
		  (Es)
	  %% Line 1019
	  <[{'xmlElement','tuple',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,Es,_cor86,_cor87,_cor88}|[]]> when 'true' ->
	      %% Line 1020
	      apply 't_tuple'/1
		  (Es)
	  %% Line 1021
	  <[{'xmlElement','fun',_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,Es,_cor95,_cor96,_cor97}|[]]> when 'true' ->
	      %% Line 1022
	      apply 't_fun'/1
		  (Es)
	  %% Line 1023
	  <[{'xmlElement','abstype',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,Es,_cor104,_cor105,_cor106}|[]]> when 'true' ->
	      %% Line 1024
	      apply 't_abstype'/1
		  (Es)
	  %% Line 1025
	  <[{'xmlElement','union',_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,Es,_cor113,_cor114,_cor115}|[]]> when 'true' ->
	      %% Line 1026
	      apply 't_union'/1
		  (Es)
	  %% Line 1027
	  <[{'xmlElement','record',_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,Es,_cor122,_cor123,_cor124}|[]]> when 'true' ->
	      %% Line 1028
	      apply 't_record'/1
		  (Es)
	  %% Line 1029
	  <[{'xmlElement','map',_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,Es,_cor131,_cor132,_cor133}|[]]> when 'true' ->
	      %% Line 1030
	      apply 't_map'/1
		  (Es)
	  %% Line 1031
	  <[{'xmlElement','map_field',_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,Es,_cor140,_cor141,_cor142}|[]]> when 'true' ->
	      %% Line 1032
	      apply 't_map_field'/1
		  (Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_type',1}}] )
	    -| ['compiler_generated'] )
	end
't_var'/1 =
    %% Line 1034
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1035
	    apply 'get_attrval'/2
		('name', _cor0)
	in  %% Line 1035
	    [_cor1|[]]
't_atom'/1 =
    %% Line 1037
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1038
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1038
	    [_cor1|[]]
't_integer'/1 =
    %% Line 1040
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1041
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1041
	    [_cor1|[]]
't_range'/1 =
    %% Line 1043
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1044
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1044
	    [_cor1|[]]
't_float'/1 =
    %% Line 1046
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1047
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 1047
	    [_cor1|[]]
't_nil'/0 =
    %% Line 1049
    fun () ->
	%% Line 1050
	[[91|[93]]]
't_list'/1 =
    %% Line 1052
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1053
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 1053
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1053
		    call 'erlang':'++'
			(_cor2, [[93]])
		in  %% Line 1053
		    [[91]|_cor3]
't_nonempty_list'/1 =
    %% Line 1055
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1056
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 1056
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1056
		    call 'erlang':'++'
			(_cor2, [[44|[32|[46|[46|[46|[93]]]]]]])
		in  %% Line 1056
		    [[91]|_cor3]
't_tuple'/1 =
    %% Line 1058
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1059
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_tuple/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 1059
	    [[123]|_cor1]
't_fun'/1 =
    %% Line 1061
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1062
	    apply 'get_content'/2
		('argtypes', _cor0)
	in  let <_cor1> =
		%% Line 1063
		apply 'get_elem'/2
		    ('type', _cor0)
	    in  let <_cor2> =
		    %% Line 1063
		    apply 't_utype'/1
			(_cor1)
		in  let <_cor3> =
			%% Line 1063
			[[41|[32|[45|[62|[32]]]]]|_cor2]
		    in  let <_cor5> =
			    %% Line 1062
			    apply 'seq'/3
				(( 't_utype_elem'/1
				   -| [{'id',{0,0,'-t_fun/1-fun-0-'}}] ), _cor4, _cor3)
			in  %% Line 1062
			    [[40]|_cor5]
't_record'/1 =
    %% Line 1065
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 1066
		  apply 'get_attrval'/2
		      ('value', E)
	      in  let <_cor2> =
		      %% Line 1066
		      apply 'seq'/2
			  (( 't_field'/1
			     -| [{'id',{0,0,'-t_record/1-fun-0-'}}] ), Es)
		  in  let <_cor3> =
			  %% Line 1066
			  call 'erlang':'++'
			      (_cor2, [125])
		      in  let <_cor4> =
			      %% Line 1066
			      [123|_cor3]
			  in  %% Line 1066
			      [[35]|[_cor1|[_cor4|[]]]]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_record',1}}] )
	    -| ['compiler_generated'] )
	end
't_field'/1 =
    %% Line 1067
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement','field',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,[Atom|[Type|[]]],_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor2> =
		  %% Line 1068
		  apply 'get_attrval'/2
		      ('value', Atom)
	      in  let <_cor1> =
		      %% Line 1068
		      apply 't_utype_elem'/1
			  (Type)
		  in  %% Line 1068
		      [_cor2|[[61]|_cor1]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'t_field',1}}] )
	    -| ['compiler_generated'] )
	end
't_map'/1 =
    %% Line 1070
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1071
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_map/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 1071
	    [[35|[123]]|_cor1]
't_map_field'/1 =
    %% Line 1073
    fun (_cor0) ->
	case _cor0 of
	  <[K|[V|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1074
		  apply 't_utype_elem'/1
		      (K)
	      in  let <_cor1> =
		      %% Line 1074
		      apply 't_utype_elem'/1
			  (V)
		  in  let <_cor2> =
			  %% Line 1074
			  [32|[61|[62|[32|_cor1]]]]
		      in  let <_cor4> =
			      %% Line 1074
			      call 'erlang':'++'
				  (_cor3, _cor2)
			  in  %% Line 1074
			      [_cor4|[]]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_map_field',1}}] )
	    -| ['compiler_generated'] )
	end
't_abstype'/1 =
    %% Line 1076
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1077
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor2> =
		%% Line 1077
		apply 't_name'/1
		    (_cor1)
	    in  %% Line 1077
		case apply 'split_at_colon'/2
			 (_cor2, []) of
		  %% Line 1078
		  <{Mod,Type}> when 'true' ->
		      let <_cor3> =
			  %% Line 1080
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  let <_cor4> =
			      %% Line 1080
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/1-fun-0-'}}] ), _cor3, [[41]])
			  in  let <_cor5> =
				  %% Line 1080
				  call 'erlang':'++'
				      (_cor4, %% Line 1081
					      [[32|[40|[115|[101|[101|[32|[109|[111|[100|[117|[108|[101|[32]]]]]]]]]]]]]|[Mod|[[41]]]])
			      in  %% Line 1079
				  [Type|[[40]|_cor5]]
		  %% Line 1082
		  <Type> when 'true' ->
		      let <_cor6> =
			  %% Line 1084
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  let <_cor7> =
			      %% Line 1084
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/1-fun-1-'}}] ), _cor6, [[41]])
			  in  %% Line 1083
			      [Type|[[40]|_cor7]]
		end
'split_at_colon'/2 =
    %% Line 1088
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rest = [58|[58|_cor6]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1089
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1089
		  call 'erlang':'++'
		      (_cor2, Rest)
	  %% Line 1090
	  <[58|Type],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1091
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1091
		  {_cor3,Type}
	  %% Line 1092
	  <[Char|Rest],Acc> when 'true' ->
	      %% Line 1093
	      apply 'split_at_colon'/2
		  (Rest, [Char|Acc])
	  %% Line 1094
	  <[],Acc> when 'true' ->
	      %% Line 1095
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'split_at_colon',2}}] )
	    -| ['compiler_generated'] )
	end
't_union'/1 =
    %% Line 1097
    fun (_cor0) ->
	%% Line 1098
	apply 'seq'/4
	    (( 't_utype_elem'/1
	       -| [{'id',{0,0,'-t_union/1-fun-0-'}}] ), _cor0, [32|[124|[32]]], [])
'seq'/2 =
    %% Line 1109
    fun (_cor1,_cor0) ->
	%% Line 1110
	apply 'seq'/3
	    (_cor1, _cor0, [])
'seq'/3 =
    %% Line 1111
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1112
	apply 'seq'/4
	    (_cor2, _cor1, [44|[32]], _cor0)
'seq'/4 =
    %% Line 1113
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fun,[E|[]],_X_Sep,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 1114
		  apply Fun
		      (E)
	      in  %% Line 1114
		  call 'erlang':'++'
		      (_cor4, Tail)
	  %% Line 1115
	  <Fun,[E|Es],Sep,Tail> when 'true' ->
	      let <_cor7> =
		  %% Line 1116
		  apply Fun
		      (E)
	      in  let <_cor5> =
		      %% Line 1116
		      apply 'seq'/4
			  (Fun, Es, Sep, Tail)
		  in  let <_cor6> =
			  %% Line 1116
			  [Sep|_cor5]
		      in  %% Line 1116
			  call 'erlang':'++'
			      (_cor7, _cor6)
	  %% Line 1117
	  <_X_Fun,[],_X_Sep,Tail> when 'true' ->
	      %% Line 1118
	      Tail
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'seq',4}}] )
	    -| ['compiler_generated'] )
	end
'parent'/1 =
    %% Line 1131
    fun (_cor0) ->
	%% Line 1132
	( case _cor0 of
	    ( <( {'xmlElement',_cor6,_cor7,_cor8,_cor9,_rec61,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1133
		  case call 'lists':'last'
			   (_rec61) of
		    <{Parent,_cor17}> when 'true' ->
			%% Line 1134
			Parent
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_elem'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[E = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}|Es]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 1139
		  apply 'get_elem'/2
		      (Name, Es)
	      in  %% Line 1139
		  [E|_cor2]
	  %% Line 1140
	  <Name,[_cor16|Es]> when 'true' ->
	      %% Line 1141
	      apply 'get_elem'/2
		  (Name, Es)
	  %% Line 1142
	  <_cor17,[]> when 'true' ->
	      %% Line 1143
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_elem',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attr'/2 =
    %% Line 1147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[A = {'xmlAttribute',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|As]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 1148
		  apply 'get_attr'/2
		      (Name, As)
	      in  %% Line 1148
		  [A|_cor2]
	  %% Line 1149
	  <Name,[_cor14|As]> when 'true' ->
	      %% Line 1150
	      apply 'get_attr'/2
		  (Name, As)
	  %% Line 1151
	  <_cor15,[]> when 'true' ->
	      %% Line 1152
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attrval'/2 =
    %% Line 1156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,As,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 1157
	      case apply 'get_attr'/2
		       (Name, As) of
		%% Line 1158
		<[{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}|[]]> when 'true' ->
		    %% Line 1159
		    V
		%% Line 1160
		<[]> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attrval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_content'/2 =
    %% Line 1166
    fun (_cor1,_cor0) ->
	%% Line 1167
	case apply 'get_elem'/2
		 (_cor1, _cor0) of
	  %% Line 1168
	  <[{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es1,_cor12,_cor13,_cor14}|[]]> when 'true' ->
	      %% Line 1169
	      Es1
	  %% Line 1170
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_text'/2 =
    %% Line 1177
    fun (_cor1,_cor0) ->
	%% Line 1178
	case apply 'get_content'/2
		 (_cor1, _cor0) of
	  %% Line 1179
	  <[{'xmlText',_cor5,_cor6,_cor7,Text,_cor8}|[]]> when 'true' ->
	      %% Line 1180
	      Text
	  %% Line 1181
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_text'/1 =
    %% Line 1187
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,[{'xmlText',_cor9,_cor10,_cor11,Text,_cor12}|[]],_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 1188
	      Text
	  %% Line 1189
	  <{'xmlElement',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,[E|[]],_cor23,_cor24,_cor25}> when 'true' ->
	      %% Line 1190
	      apply 'get_text'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_text',1}}] )
	    -| ['compiler_generated'] )
	end
'text_and_a_name_only'/1 =
    %% Line 1193
    fun (_cor0) ->
	case _cor0 of
	  <[Name = {'xmlElement',%% Line 1194
				 'a',_cor6,_cor7,_cor8,_cor9,_cor10,%% Line 1195
								    [{'xmlAttribute','name',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}|[]],_cor19,_cor20,_cor21,_cor22}|%% Line 1195
																						      Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 1196
		  apply 'text_and_a_name_only'/1
		      (Es)
	      in  %% Line 1196
		  [Name|_cor1]
	  %% Line 1197
	  <[{'xmlElement',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,Content,_cor30,_cor31,_cor32}|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 1198
		  apply 'text_and_a_name_only'/1
		      (Content)
	      in  let <_cor2> =
		      %% Line 1198
		      apply 'text_and_a_name_only'/1
			  (Es)
		  in  %% Line 1198
		      call 'erlang':'++'
			  (_cor3, _cor2)
	  %% Line 1199
	  <[E = {'xmlText',_cor33,_cor34,_cor35,_cor36,_cor37}|Es]> when 'true' ->
	      let <_cor4> =
		  %% Line 1200
		  apply 'text_and_a_name_only'/1
		      (Es)
	      in  %% Line 1200
		  [E|_cor4]
	  %% Line 1201
	  <[]> when 'true' ->
	      %% Line 1202
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'text_and_a_name_only',1}}] )
	    -| ['compiler_generated'] )
	end
'text_only'/1 =
    %% Line 1206
    fun (_cor0) ->
	case _cor0 of
	  <[{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Content,_cor12,_cor13,_cor14}|Es]> when 'true' ->
	      let <_cor2> =
		  %% Line 1207
		  apply 'text_only'/1
		      (Content)
	      in  let <_cor1> =
		      %% Line 1207
		      apply 'text_only'/1
			  (Es)
		  in  %% Line 1207
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  %% Line 1208
	  <[E = {'xmlText',_cor15,_cor16,_cor17,_cor18,_cor19}|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 1209
		  apply 'text_only'/1
		      (Es)
	      in  %% Line 1209
		  [E|_cor3]
	  %% Line 1210
	  <[]> when 'true' ->
	      %% Line 1211
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'text_only',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('docgen_edoc_xml_cb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('docgen_edoc_xml_cb', _cor0)
end