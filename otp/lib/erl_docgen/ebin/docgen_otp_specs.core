module 'docgen_otp_specs' ['module'/2,
			   'module_info'/0,
			   'module_info'/1,
			   'overview'/2,
			   'package'/2,
			   'type'/1]
    attributes []
'module'/2 =
    %% Line 32
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 33
	    apply 'init_opts'/1
		(_cor0)
	in  let <XML> =
		%% Line 33
		apply 'layout_module'/2
		    (_cor1, _cor2)
	    in  let <Export> =
		    %% Line 34
		    call 'proplists':'get_value'
			('xml_export', _cor0, %% Line 35
					      'xmerl_xml')
		in  %% Line 36
		    call 'xmerl':'export_simple'
			(XML, Export, [{'xmlAttribute','prolog',[],[],[],[],'undefined',[],[],'undefined'}])
'init_opts'/1 =
    %% Line 41
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 42
	    call 'proplists':'get_value'
		('pretty_print', _cor0, %% Line 43
					'erl_pp')
	in  let <_cor1> =
		%% Line 45
		call 'proplists':'get_value'
		    ('file_suffix', _cor0, [46|[104|[116|[109|[108]]]]])
	    in  %% Line 42
		{'opts',_cor2,_cor1}
'layout_module'/2 =
    %% Line 47
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement','module',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,Es,_cor36,_cor37,_cor38},Opts> when 'true' ->
	      let <Name> =
		  %% Line 48
		  apply 'get_attrval'/2
		      ('name', E)
	      in  let <_cor9> =
		      %% Line 49
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[%% Line 50
					Elem|_cor4]> when 'true' ->
					  let <_cor7> =
					      apply 'function_name'/1
						  (Elem)
					  in  let <_cor8> =
						  %% Line 50
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [{_cor7,Elem}|_cor8]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor5> =
				%% Line 50
				apply 'get_content'/2
				    ('functions', Es)
			    in  apply 'lc$^0'/1
				    (_cor5)
			-| ['list_comprehension'] )
		  in  let <_cor17> =
			  %% Line 51
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor14) ->
					case _cor14 of
					  <[Elem|_cor12]> when 'true' ->
					      let <_cor15> =
						  apply 'type_name'/1
						      (Elem)
					      in  let <_cor16> =
						      apply 'lc$^1'/1
							  (_cor12)
						  in  ( [{_cor15,Elem}|_cor16]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor14> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor14})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor13> =
				    apply 'get_content'/2
					('typedecls', Es)
				in  apply 'lc$^1'/1
					(_cor13)
			    -| ['list_comprehension'] )
		      in  let <_cor23> =
			      %% Line 54
			      call 'lists':'sort'
				  (_cor17)
			  in  let <_cor24> =
				  %% Line 54
				  apply 'types'/2
				      (_cor23, Opts)
			      in  let <_cor20> =
				      %% Line 55
				      call 'lists':'sort'
					  (_cor9)
				  in  let <_cor21> =
					  %% Line 55
					  apply 'functions'/2
					      (_cor20, Opts)
				      in  let <_cor19> =
					      %% Line 56
					      apply 'timestamp'/0
						  ()
					  in  let <_cor22> =
						  %% Line 56
						  call 'erlang':'++'
						      (_cor21, _cor19)
					      in  let <_cor25> =
						      %% Line 55
						      call 'erlang':'++'
							  (_cor24, _cor22)
						  in  let <_cor26> =
							  %% Line 54
							  [[10]|_cor25]
						      in  %% Line 52
							  [{'module',%% Line 53
								     [{'name',[Name|[]]}|[]],_cor26}|%% Line 56
												     []]
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'layout_module',2}}] )
	    -| ['compiler_generated'] )
	end
'timestamp'/0 =
    %% Line 59
    fun () ->
	let <_cor0> =
	    %% Line 61
	    call 'erlang':'date'
		()
	in  let <_cor1> =
		%% Line 61
		call 'edoc_lib':'datestr'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 62
		    call 'erlang':'time'
			()
		in  let <_cor3> =
			%% Line 62
			call 'edoc_lib':'timestr'
			    (_cor2)
		    in  let <_cor4> =
			    %% Line 60
			    call 'io_lib':'fwrite'
				([71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[69|[68|[111|[99|[44|[32|[126|[115|[44|[32|[126|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 61
																						 [_cor1|%% Line 62
																							[_cor3|[]]])
			in  %% Line 60
			    [{'timestamp',[_cor4|%% Line 62
						 []]}|%% Line 62
						      [[10]]]
'functions'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 65
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{Name,E}> when 'true' ->
			apply 'function'/3
			    (Name, E, _cor0)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-functions/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-functions/2-fun-0-'}}] )
	in  %% Line 65
	    call 'lists':'flatmap'
		(_cor4, _cor1)
'function'/3 =
    %% Line 67
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'xmlElement',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,Es,_cor20,_cor21,_cor22},Opts> when 'true' ->
	      let <TS> =
		  %% Line 68
		  apply 'get_content'/2
		      ('typespec', Es)
	      in  let <Spec> =
		      %% Line 69
		      apply 'typespec'/2
			  (TS, Opts)
		  in  let <_cor6> =
			  %% Line 71
			  call 'lists':'duplicate'
			      (2, 32)
		      in  let <_cor7> =
			      %% Line 71
			      [10|_cor6]
			  in  let <_cor5> =
				  %% Line 72
				  apply 'typespec_annos'/1
				      (TS)
			      in  let <_cor8> =
				      %% Line 71
				      [{'xmlText',%% Line 90
						  [],%% Line 91
						     'undefined',%% Line 92
								 [],_cor7,%% Line 94
									  'text'}|[{'contract',Spec}|_cor5]]
				  in  let <_cor9> =
					  %% Line 71
					  call 'erlang':'++'
					      (Name, _cor8)
				      in  %% Line 70
					  [{'spec',_cor9}|%% Line 73
							  [[10]]]
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'function',3}}] )
	    -| ['compiler_generated'] )
	end
'function_name'/1 =
    %% Line 75
    fun (_cor0) ->
	%% Line 76
	case apply 'get_attrval'/2
		 ('module', _cor0) of
	  <[]> when 'true' ->
	      let <_cor2> =
		  %% Line 77
		  call 'lists':'duplicate'
		      (2, 32)
	      in  let <_cor3> =
		      %% Line 77
		      [10|_cor2]
		  in  let <_cor4> =
			  %% Line 77
			  apply 'get_attrval'/2
			      ('name', _cor0)
		      in  let <_cor5> =
			      %% Line 77
			      apply 'atom'/1
				  (_cor4)
			  in  let <_cor6> =
				  %% Line 78
				  call 'lists':'duplicate'
				      (2, 32)
			      in  let <_cor7> =
				      %% Line 78
				      [10|_cor6]
				  in  let <_cor8> =
					  %% Line 78
					  apply 'get_attrval'/2
					      ('arity', _cor0)
				      in  %% Line 77
					  [{'xmlText',%% Line 90
						      [],%% Line 91
							 'undefined',%% Line 92
								     [],_cor3,%% Line 94
									      'text'}|[{'name',[_cor5|[]]}|%% Line 78
													   [{'xmlText',%% Line 90
														       [],%% Line 91
															  'undefined',%% Line 92
																      [],_cor7,%% Line 94
																	       'text'}|[{'arity',[_cor8|[]]}|[]]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'label_anchor'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	%% Line 81
	case apply 'get_attrval'/2
		 ('label', _cor0) of
	  %% Line 82
	  <[]> when 'true' ->
	      _cor1
	  %% Line 83
	  <Ref> when 'true' ->
	      [{'marker',[{'id',Ref}|[]],_cor1}|[]]
	end
'typespec'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Opts> when 'true' ->
	      []
	  %% Line 87
	  <Es,Opts> when 'true' ->
	      %% Line 88
	      case apply 'collect_clause'/2
		       (Es, Opts) of
		<{Head,LDefs}> when 'true' ->
		    let <_cor5> =
			%% Line 89
			apply 'clause'/2
			    (Head, LDefs)
		    in  let <_cor3> =
			    %% Line 89
			    call 'lists':'duplicate'
				(2, 32)
			in  let <_cor4> =
				%% Line 89
				[10|_cor3]
			    in  %% Line 89
				call 'erlang':'++'
				    (_cor5, [{'xmlText',%% Line 90
							[],%% Line 91
							   'undefined',%% Line 92
								       [],_cor4,%% Line 94
										'text'}|[]])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'collect_clause'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 92
	    apply 'get_elem'/2
		('erlangName', _cor1)
	in  let <Name> =
		%% Line 92
		apply 't_name'/1
		    (_cor2)
	    in  let <Defs> =
		    %% Line 93
		    apply 'get_elem'/2
			('localdef', _cor1)
		in  %% Line 94
		    case apply 'get_elem'/2
			     ('type', _cor1) of
		      <[Type|[]]> when 'true' ->
			  let <_cor7> =
			      %% Line 95
			      apply 'format_spec'/3
				  (Name, Type, _cor0)
			  in  let <_cor6> =
				  %% Line 95
				  apply 'collect_local_defs'/2
				      (Defs, _cor0)
			      in  %% Line 95
				  {_cor7,_cor6}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
'clause'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 98
	    call 'lists':'duplicate'
		(6, 32)
	in  let <_cor4> =
		%% Line 98
		[10|_cor3]
	    in  let <_cor2> =
		    %% Line 98
		    apply 'local_clause_defs'/1
			(_cor0)
		in  let <FC> =
			%% Line 98
			[{'xmlText',[],'undefined',[],_cor4,'text'}|[{'head',_cor1}|_cor2]]
		    in  let <_cor6> =
			    %% Line 99
			    call 'lists':'duplicate'
				(4, 32)
			in  let <_cor7> =
				%% Line 99
				[10|_cor6]
			    in  %% Line 99
				[{'xmlText',[],'undefined',[],_cor7,'text'}|[{'clause',FC}|[]]]
'local_clause_defs'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 102
	  <LDefs> when 'true' ->
	      let <_cor6> =
		  %% Line 103
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[T|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{'subtype',T}|_cor5]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    apply 'coalesce_local_defs'/2
				(LDefs, [])
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 104
		      call 'lists':'duplicate'
			  (6, 32)
		  in  let <_cor9> =
			  %% Line 104
			  [10|_cor8]
		      in  let <_cor10> =
			      %% Line 104
			      apply 'margin'/2
				  (8, _cor6)
			  in  %% Line 104
			      [{'xmlText',[],'undefined',[],_cor9,'text'}|[{'guard',_cor10}|[]]]
	end
'types'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 107
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{Name,E}> when 'true' ->
			apply 'typedecl'/3
			    (Name, E, _cor0)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-types/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-types/2-fun-0-'}}] )
	in  %% Line 107
	    call 'lists':'flatmap'
		(_cor4, _cor1)
'typedecl'/3 =
    %% Line 109
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,E = {'xmlElement',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,Es,_cor20,_cor21,_cor22},Opts> when 'true' ->
	      let <TD> =
		  %% Line 110
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  let <TypeDef> =
		      %% Line 111
		      apply 'typedef'/3
			  (E, TD, Opts)
		  in  let <_cor6> =
			  %% Line 113
			  call 'lists':'duplicate'
			      (2, 32)
		      in  let <_cor7> =
			      %% Line 113
			      [10|_cor6]
			  in  let <_cor5> =
				  %% Line 114
				  apply 'typedef_annos'/1
				      (TD)
			      in  let <_cor8> =
				      %% Line 113
				      [{'xmlText',[],'undefined',[],_cor7,'text'}|[{'typedecl',TypeDef}|_cor5]]
				  in  let <_cor9> =
					  %% Line 113
					  call 'erlang':'++'
					      (Name, _cor8)
				      in  %% Line 112
					  [{'type',_cor9}|%% Line 115
							  [[10]]]
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'typedecl',3}}] )
	    -| ['compiler_generated'] )
	end
'type_name'/1 =
    %% Line 117
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Es,_cor21,_cor22,_cor23}> when 'true' ->
	      let <Typedef> =
		  %% Line 118
		  apply 'get_content'/2
		      ('typedef', Es)
	      in  %% Line 119
		  case apply 'get_elem'/2
			   ('erlangName', Typedef) of
		    <[E|[]]> when 'true' ->
			let <Args> =
			    %% Line 120
			    apply 'get_content'/2
				('argtypes', Typedef)
			in  %% Line 121
			    case apply 'get_attrval'/2
				     ('module', E) of
			      <[]> when 'true' ->
				  let <_cor5> =
				      %% Line 122
				      call 'lists':'duplicate'
					  (2, 32)
				  in  let <_cor6> =
					  %% Line 122
					  [10|_cor5]
				      in  let <_cor7> =
					      %% Line 122
					      apply 'get_attrval'/2
						  ('name', E)
					  in  let <_cor8> =
						  %% Line 122
						  apply 'atom'/1
						      (_cor7)
					      in  let <_cor9> =
						      %% Line 123
						      call 'lists':'duplicate'
							  (2, 32)
						  in  let <_cor10> =
							  %% Line 123
							  [10|_cor9]
						      in  let <_cor11> =
							      %% Line 123
							      call 'erlang':'length'
								  (Args)
							  in  let <_cor12> =
								  %% Line 123
								  call 'erlang':'integer_to_list'
								      (_cor11)
							      in  %% Line 122
								  [{'xmlText',[],'undefined',[],_cor6,'text'}|[{'name',[_cor8|[]]}|%% Line 123
																   [{'xmlText',[],'undefined',[],_cor10,'text'}|[{'n_vars',[_cor12|[]]}|[]]]]]
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'type_name',1}}] )
	    -| ['compiler_generated'] )
	end
'typedef'/3 =
    %% Line 125
    fun (_cor2,_cor1,_cor0) ->
	let <Ns> =
	    %% Line 126
	    apply 'get_elem'/2
		('erlangName', _cor1)
	in  let <_cor6> =
		%% Line 128
		apply 't_name'/1
		    (Ns)
	    in  let <_cor4> =
		    %% Line 129
		    apply 'get_content'/2
			('argtypes', _cor1)
		in  let <_cor5> =
			%% Line 129
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-typedef/3-fun-0-'}}] ), _cor4, [[41]])
		    in  let <Name> =
			    %% Line 128
			    [_cor6|%% Line 129
				   [[40]|_cor5]]
			in  let <_cor8> =
				%% Line 130
				apply 'get_elem'/2
				    ('localdef', _cor1)
			    in  let <LDefs> =
				    %% Line 130
				    apply 'collect_local_defs'/2
					(_cor8, _cor0)
				in  let <_cor13> =
					%% Line 131
					case apply 'get_elem'/2
						 ('type', _cor1) of
					  %% Line 132
					  <[]> when 'true' ->
					      apply 'label_anchor'/2
						  (Name, _cor2)
					  %% Line 133
					  <Type> when 'true' ->
					      let <_cor11> =
						  apply 'label_anchor'/2
						      (Name, _cor2)
					      in  let <_cor10> =
						      %% Line 134
						      apply 'format_type'/3
							  (Name, Type, _cor0)
						  in  %% Line 134
						      call 'erlang':'++'
							  (_cor11, _cor10)
					end
				    in  let <_cor16> =
					    %% Line 136
					    call 'lists':'duplicate'
						(6, 32)
					in  let <_cor17> =
						%% Line 136
						[10|_cor16]
					    in  let <_cor15> =
						    %% Line 137
						    apply 'local_type_defs'/2
							(LDefs, [])
						in  %% Line 136
						    [{'xmlText',[],'undefined',[],_cor17,'text'}|[{'typehead',_cor13}|_cor15]]
'local_type_defs'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor14> when 'true' ->
	      []
	  %% Line 140
	  <LDefs,Last> when 'true' ->
	      let <_cor7> =
		  %% Line 141
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[T|_cor3]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [{'local_def',T}|_cor6]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    apply 'coalesce_local_defs'/2
				(LDefs, Last)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  let <_cor9> =
		      %% Line 142
		      call 'lists':'duplicate'
			  (6, 32)
		  in  let <_cor10> =
			  %% Line 142
			  [10|_cor9]
		      in  let <_cor11> =
			      %% Line 142
			      apply 'margin'/2
				  (8, _cor7)
			  in  %% Line 142
			      [{'xmlText',[],'undefined',[],_cor10,'text'}|[{'local_defs',_cor11}|[]]]
	end
'collect_local_defs'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	%% Line 145
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[E|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'collect_localdef'/2
				    (E, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'collect_localdef'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,Es,_cor20,_cor21,_cor22},Opts> when 'true' ->
	      let <_cor7,N0> =
		  %% Line 148
		  case apply 'get_elem'/2
			   ('typevar', Es) of
		    %% Line 149
		    <[]> when 'true' ->
			let <_cor2> =
			    %% Line 150
			    apply 'get_content'/2
				('abstype', Es)
			in  let <_cor4> =
				%% Line 150
				apply 't_abstype'/1
				    (_cor2)
			    in  %% Line 150
				<apply 'label_anchor'/2
				     (_cor4, E),_cor4>
		    %% Line 151
		    <[V|[]]> when 'true' ->
			let <N0> =
			    %% Line 152
			    apply 't_var'/1
				(V)
			in  <N0,N0>
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor9> =
		      %% Line 154
		      apply 'get_elem'/2
			  ('type', Es)
		  in  let <_cor10> =
			  %% Line 154
			  apply 'format_type'/3
			      (N0, _cor9, Opts)
		      in  %% Line 154
			  {_cor7,N0,_cor10}
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'collect_localdef',2}}] )
	    -| ['compiler_generated'] )
	end
'coalesce_local_defs'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Last> when 'true' ->
	      %% Line 159
	      []
	  %% Line 160
	  <[{Name,N0,TypeS}|L],Last>
	      when call 'erlang':'=:='
		    (Name,
		     N0) ->
	      %% Line 161
	      apply 'cld'/4
		  (L, [{Name,N0}|[]], TypeS, Last)
	  %% Line 162
	  <[{Name,N0,TypeS}|L],Last> when 'true' ->
	      let <_cor2> =
		  %% Line 163
		  apply 'local_def'/5
		      (N0, Name, TypeS, Last, L)
	      in  let <_cor3> =
		      %% Line 163
		      apply 'coalesce_local_defs'/2
			  (L, Last)
		  in  %% Line 163
		      [_cor2|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'coalesce_local_defs',2}}] )
	    -| ['compiler_generated'] )
	end
'cld'/4 =
    %% Line 165
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Name,N0,TypeS}|L],Names,_cor23,Last>
	      when let <_cor24> =
		    call 'erlang':'=:='
			(_cor23, TypeS)
		in  let <_cor25> =
			call 'erlang':'=:='
			    (Name, N0)
		    in  call 'erlang':'and'
			    (_cor24, _cor25) ->
	      %% Line 166
	      apply 'cld'/4
		  (L, [{Name,N0}|Names], TypeS, Last)
	  %% Line 167
	  <L,Names0,TypeS,Last> when 'true' ->
	      %% Line 168
	      case call 'lists':'reverse'
		       (Names0) of
		<Names = [{_cor26,Name0}|Names1]> when 'true' ->
		    let <_cor9> =
			%% Line 169
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[{N,_cor27}|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'lc$^0'/1
						    (_cor6)
					    in  ( [N|_cor8]
						  -| ['compiler_generated'] )
					( <[_cor5|_cor6]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor6)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Names)
			  -| ['list_comprehension'] )
		    in  let <NS> =
			    %% Line 169
			    apply 'join'/2
				(_cor9, [[32|[61|[32]]]])
			in  let <_cor12> =
				%% Line 170
				apply 'local_def'/5
				    (Name0, NS, TypeS, Last, L)
			    in  let <_cor18> =
				    %% Line 171
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor15) ->
						  case _cor15 of
						    <[{_cor28,N0}|_cor14]> when 'true' ->
							let <_cor16> =
							    apply 'local_def'/5
								(N0, [], [], [], L)
							in  let <_cor17> =
								apply 'lc$^1'/1
								    (_cor14)
							    in  ( [_cor16|_cor17]
								  -| ['compiler_generated'] )
						    ( <[_cor13|_cor14]> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor14)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor15> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor15})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (Names1)
				      -| ['list_comprehension'] )
				in  let <_cor11> =
					%% Line 172
					apply 'coalesce_local_defs'/2
					    (L, Last)
				    in  %% Line 170
					[_cor12|%% Line 172
						call 'erlang':'++'
						    (_cor18, _cor11)]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'local_def'/5 =
    %% Line 174
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 175
	    ( case <> of
		<>
		    when call 'erlang':'=:='
			  (_cor0,
			   []) ->
		    ( [_cor1|[]]
		      -| ['compiler_generated'] )
		( <> when 'true' ->
		      []
		  -| ['compiler_generated'] )
	      end
	      -| ['list_comprehension'] )
	in  let <_cor6> =
		%% Line 175
		call 'erlang':'++'
		    (_cor2, _cor5)
	    in  let <_cor7> =
		    %% Line 175
		    call 'erlang':'++'
			(_cor3, _cor6)
		in  %% Line 175
		    [{'typename',_cor4}|[{'string',_cor7}|[]]]
'join'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Sep> when 'true' ->
	      let <_cor7> =
		  %% Line 180
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor3]> when 'true' ->
				      let <_cor5> =
					  call 'erlang':'++'
					      (Sep, X)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (T)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 180
		      call 'lists':'append'
			  (_cor7)
		  in  %% Line 180
		      call 'erlang':'++'
			  (H, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'format_spec'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Type,Opts = {'opts','erl_pp',_cor16}> when 'true' ->
	      %% Line 186
	      try
		  let <L> =
		      %% Line 187
		      apply 't_clause'/2
			  (Name, Type)
		  in  let <O> =
			  %% Line 188
			  apply 'pp_clause'/2
			      (Name, Type)
		      in  %% Line 189
			  case apply 'diaf'/3
				   (L, O, Opts) of
			    <{R,[46|[10]]}> when 'true' ->
				%% Line 190
				R
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	      of <_cor6> ->
		  _cor6
	      catch <_cor9,_cor8,_cor7> ->
		  let <_cor12> =
		      %% Line 193
		      call 'erlang':'setelement'
			  (2, Opts, 'default')
		  in  %% Line 193
		      apply 'format_spec'/3
			  (Name, Type, _cor12)
	  %% Line 195
	  <Sep,Type,_X_Opts> when 'true' ->
	      %% Line 196
	      apply 't_clause'/2
		  (Sep, Type)
	end
't_clause'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	%% Line 199
	case _cor0 of
	  <{'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,[{'xmlElement','fun',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,C,_cor19,_cor20,_cor21}|[]],_cor22,_cor23,_cor24}> when 'true' ->
	      let <_cor3> =
		  %% Line 200
		  apply 't_fun'/1
		      (C)
	      in  %% Line 200
		  [_cor1|_cor3]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'pp_clause'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	let <Types> =
	    %% Line 203
	    apply 'ot_utype'/1
		([_cor0|[]])
	in  let <_cor3> =
		%% Line 204
		call 'erlang':'iolist_size'
		    (_cor1)
	    in  let <Atom> =
		    %% Line 204
		    call 'lists':'duplicate'
			(_cor3, 97)
		in  let <_cor5> =
			%% Line 205
			call 'erlang':'list_to_atom'
			    (Atom)
		    in  let <L1> =
			    %% Line 205
			    call 'erl_pp':'attribute'
				({'attribute',0,'spec',{{_cor5,0},[Types|[]]}})
			in  %% Line 206
			    case call 'lists':'flatten'
				     (L1) of
			      <[45|[115|[112|[101|[99|[32|L2]]]]]]> when 'true' ->
				  let <_cor8> =
				      %% Line 207
				      call 'erlang':'length'
					  (Atom)
				  in  let <_cor9> =
					  %% Line 207
					  call 'lists':'nthtail'
					      (_cor8, L2)
				      in  let <L3> =
					      %% Line 207
					      call 'erlang':'++'
						  (_cor1, _cor9)
					  in  %% Line 208
					      call 're':'replace'
						  (L3, [10|[32|[32|[32|[32|[32|[32]]]]]]], [10], [{'return','list'}|['global']])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
'format_type'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Type,Opts = {'opts','erl_pp',_cor17}> when 'true' ->
	      %% Line 211
	      try
		  let <L> =
		      %% Line 212
		      apply 't_utype'/1
			  (Type)
		  in  let <O> =
			  %% Line 213
			  apply 'pp_type'/2
			      (Name, Type)
		      in  %% Line 214
			  case apply 'diaf'/3
				   (L, O, Opts) of
			    <{R,[46|[10]]}> when 'true' ->
				%% Line 215
				[[32|[61|[32]]]|R]
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	      of <_cor6> ->
		  _cor6
	      catch <_cor9,_cor8,_cor7> ->
		  let <_cor12> =
		      %% Line 218
		      call 'erlang':'setelement'
			  (2, Opts, 'default')
		  in  %% Line 218
		      apply 'format_type'/3
			  (Name, Type, _cor12)
	  %% Line 220
	  <_X_Name,Type,_X_Opts> when 'true' ->
	      let <_cor13> =
		  %% Line 221
		  apply 't_utype'/1
		      (Type)
	      in  %% Line 221
		  [[32|[61|[32]]]|_cor13]
	end
'pp_type'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 224
	    call 'erlang':'iolist_size'
		(_cor1)
	in  let <_cor3> =
		%% Line 224
		call 'lists':'duplicate'
		    (_cor2, 97)
	    in  let <Atom> =
		    %% Line 224
		    call 'erlang':'list_to_atom'
			(_cor3)
		in  let <_cor5> =
			%% Line 225
			apply 'ot_utype'/1
			    (_cor0)
		    in  let <L1> =
			    %% Line 225
			    call 'erl_pp':'attribute'
				({'attribute',0,'type',{Atom,_cor5,[]}})
			in  let <_cor10> =
				%% Line 226
				( fun (_cor8) ->
				      call 'erlang':'=/='
					  (_cor8, 58)
				  -| [{'id',{0,0,'-pp_type/2-fun-0-'}}] )
			    in  let <_cor7> =
				    %% Line 226
				    call 'lists':'flatten'
					(L1)
				in  let <L2,N> =
					%% Line 226
					case call 'lists':'dropwhile'
						 (_cor10, _cor7) of
					  %% Line 227
					  <[58|[58|[32|L3]]]> when 'true' ->
					      <L3,9>
					  %% Line 228
					  <[58|[58|[10|L3]]]> when 'true' ->
					      let <_cor11> =
						  [10|L3]
					      in  <_cor11,6>
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
				    in  let <Ss> =
					    %% Line 230
					    call 'lists':'duplicate'
						(N, 32)
					in  let <_cor16> =
						%% Line 231
						[10|Ss]
					    in  %% Line 231
						call 're':'replace'
						    (L2, _cor16, [10], [{'return','list'}|['global']])
'diaf'/3 =
    %% Line 233
    fun (_cor2,_cor1,_cor0) ->
	%% Line 234
	case apply 'diaf'/5
		 (_cor2, [], _cor1, [], _cor0) of
	  <{R0,O}> when 'true' ->
	      let <_cor4> =
		  %% Line 235
		  call 'lists':'reverse'
		      (R0)
	      in  let <R1> =
		      %% Line 235
		      apply 'rewrite_some_predefs'/1
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 236
			  call 'lists':'flatten'
			      (R1)
		      in  let <R> =
			      %% Line 236
			      apply 'indentation'/1
				  (_cor6)
			  in  %% Line 237
			      {R,O}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'diaf'/5 =
    %% Line 239
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|L],St,[_cor20|O],R,Opts>
	      when call 'erlang':'=:='
		    (_cor20,
		     C) ->
	      %% Line 240
	      apply 'diaf'/5
		  (L, St, O, [[C|[]]|R], Opts)
	  %% Line 241
	  <[32|L],St,O,R,Opts> when 'true' ->
	      %% Line 242
	      apply 'diaf'/5
		  (L, St, O, R, Opts)
	  %% Line 243
	  <[],[Cs|St],O,R,Opts> when 'true' ->
	      %% Line 244
	      apply 'diaf'/5
		  (Cs, St, O, R, Opts)
	  %% Line 245
	  <[],[],O,R,_X_Opts> when 'true' ->
	      %% Line 246
	      {R,O}
	  %% Line 247
	  <L,St,[32|O],R,Opts> when 'true' ->
	      %% Line 248
	      apply 'diaf'/5
		  (L, St, O, [[32]|R], Opts)
	  %% Line 249
	  <L,St,[10|O],R,Opts> when 'true' ->
	      let <_cor7> =
		  %% Line 250
		  ( fun (_cor5) ->
			call 'erlang':'=:='
			    (_cor5, 32)
		    -| [{'id',{0,0,'-diaf/5-fun-0-'}}] )
	      in  let <Ss> =
		      %% Line 250
		      call 'lists':'takewhile'
			  (_cor7, O)
		  in  let <_cor10> =
			  %% Line 251
			  call 'erlang':'length'
			      (Ss)
		      in  let <_cor11> =
			      %% Line 251
			      call 'lists':'nthtail'
				  (_cor10, O)
			  in  let <_cor9> =
				  %% Line 251
				  [10|Ss]
			      in  %% Line 251
				  apply 'diaf'/5
				      (L, St, _cor11, [_cor9|R], Opts)
	  %% Line 252
	  <[{'seealso',HRef0,S0}|L],St,O0,R,Opts> when 'true' ->
	      let <_cor12> =
		  %% Line 253
		  apply 'app_fix'/1
		      (O0)
	      in  %% Line 253
		  case apply 'diaf'/3
			   (S0, _cor12, Opts) of
		    <{S,O}> when 'true' ->
			let <HRef> =
			    %% Line 254
			    apply 'fix_mod_ref'/2
				(HRef0, Opts)
			in  %% Line 255
			    apply 'diaf'/5
				(L, St, O, [{'seealso',HRef,S}|R], Opts)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 256
	  <[61|L],St,[58|[58|O]],R,Opts> when 'true' ->
	      %% Line 260
	      apply 'diaf'/5
		  (L, St, O, [[61]|R], Opts)
	  %% Line 261
	  <[Cs|L],St,O,R,Opts> when 'true' ->
	      %% Line 262
	      apply 'diaf'/5
		  (Cs, [L|St], O, R, Opts)
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'diaf',5}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_some_predefs'/1 =
    %% Line 264
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 265
	    call 'lists':'flatten'
		(_cor0)
	in  %% Line 265
	    apply 'xpredef'/1
		(_cor1)
'xpredef'/1 =
    %% Line 267
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 268
	      []
	  %% Line 269
	  <[110|[101|[103|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41|L]]]]]]]]]]]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 270
		  apply 'xpredef'/1
		      (L)
	      in  %% Line 270
		  [[105|[110|[116|[101|[103|[101|[114|[40|[41|[32|[61|[60|[32|[45|[49]]]]]]]]]]]]]]]|_cor1]
	  %% Line 271
	  <[110|[111|[110|[95|[110|[101|[103|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41|L]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor2> =
		  %% Line 272
		  apply 'xpredef'/1
		      (L)
	      in  %% Line 272
		  [[105|[110|[116|[101|[103|[101|[114|[40|[41|[32|[62|[61|[32|[48]]]]]]]]]]]]]]|_cor2]
	  %% Line 273
	  <[112|[111|[115|[95|[105|[110|[116|[101|[103|[101|[114|[40|[41|L]]]]]]]]]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 274
		  apply 'xpredef'/1
		      (L)
	      in  %% Line 274
		  [[105|[110|[116|[101|[103|[101|[114|[40|[41|[32|[62|[61|[32|[49]]]]]]]]]]]]]]|_cor3]
	  %% Line 275
	  <[T|Es]>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor4> =
		  %% Line 276
		  apply 'xpredef'/1
		      (Es)
	      in  %% Line 276
		  [T|_cor4]
	  %% Line 277
	  <[E|Es]> when 'true' ->
	      let <_cor5> =
		  %% Line 278
		  apply 'xpredef'/1
		      (Es)
	      in  %% Line 278
		  [[E|[]]|_cor5]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'xpredef',1}}] )
	    -| ['compiler_generated'] )
	end
'indentation'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 281
	      []
	  %% Line 282
	  <[10|L]> when 'true' ->
	      let <_cor1> =
		  %% Line 283
		  apply 'indent'/1
		      (L)
	      in  %% Line 283
		  [{'br',[]}|_cor1]
	  %% Line 284
	  <[T|Es]>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 285
		  apply 'indentation'/1
		      (Es)
	      in  %% Line 285
		  [T|_cor2]
	  %% Line 286
	  <[E|L]> when 'true' ->
	      let <_cor3> =
		  %% Line 287
		  apply 'indentation'/1
		      (L)
	      in  %% Line 287
		  [[E|[]]|_cor3]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'indentation',1}}] )
	    -| ['compiler_generated'] )
	end
'indent'/1 =
    %% Line 289
    fun (_cor0) ->
	case _cor0 of
	  <[32|L]> when 'true' ->
	      let <_cor1> =
		  %% Line 290
		  apply 'indent'/1
		      (L)
	      in  %% Line 290
		  [{'nbsp',[]}|_cor1]
	  %% Line 291
	  <L> when 'true' ->
	      %% Line 292
	      apply 'indentation'/1
		  (L)
	end
'app_fix'/1 =
    %% Line 294
    fun (_cor0) ->
	%% Line 295
	try
	    %% Line 296
	    case apply 'app_fix'/2
		     (_cor0, 1) of
	      <{[47|[47|R1]],L2}> when 'true' ->
		  %% Line 297
		  case call 'string':'tokens'
			   (R1, [47]) of
		    <[App|[Mod|[]]]> when 'true' ->
			let <_cor6> =
			    %% Line 298
			    apply 'atom'/1
				(App)
			in  let <_cor3> =
				%% Line 298
				apply 'atom'/1
				    (Mod)
			    in  let <_cor4> =
				    %% Line 298
				    call 'erlang':'++'
					(_cor3, L2)
				in  let <_cor5> =
					%% Line 298
					[47|_cor4]
				    in  let <_cor7> =
					    %% Line 298
					    call 'erlang':'++'
						(_cor6, _cor5)
					in  %% Line 298
					    [47|[47|_cor7]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor8> ->
	    _cor8
	catch <_cor11,_cor10,_cor9> ->
	    _cor0
'app_fix'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	%% Line 303
	case call 'lists':'split'
		 (_cor0, _cor1) of
	  <{L1,L2}> when 'true' ->
	      let <_cor3> =
		  %% Line 304
		  call 'erlang':'++'
		      (L1, [46|[32]])
	      in  %% Line 304
		  case call 'erl_scan':'tokens'
			   ([], _cor3, 1) of
		    %% Line 305
		    <{'done',{'ok',[{'atom',_cor9,Atom}|_cor10],_cor11},_cor12}> when 'true' ->
			let <_cor4> =
			    call 'erlang':'atom_to_list'
				(Atom)
			in  {_cor4,L2}
		    %% Line 306
		    <_cor13> when 'true' ->
			let <_cor5> =
			    call 'erlang':'+'
				(_cor0, 1)
			in  apply 'app_fix'/2
				(_cor1, _cor5)
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'fix_mod_ref'/2 =
    %% Line 310
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <HRef,{'opts',_cor16,[]}> when 'true' ->
	      %% Line 311
	      HRef
	  %% Line 312
	  <HRef0 = [{'marker',S}|[]],{'opts',_cor17,FS}> when 'true' ->
	      let <_cor4> =
		  %% Line 313
		  ( fun (_cor2) ->
			call 'erlang':'=/='
			    (_cor2, 35)
		    -| [{'id',{0,0,'-fix_mod_ref/2-fun-0-'}}] )
	      in  %% Line 313
		  case call 'lists':'splitwith'
			   (_cor4, S) of
		    <{A,B}> when 'true' ->
			%% Line 314
			case call 'lists':'member'
				 (58, A) of
			  %% Line 315
			  <'true'> when 'true' ->
			      %% Line 316
			      HRef0
			  %% Line 317
			  <'false'> when 'true' ->
			      let <_cor6> =
				  %% Line 318
				  call 'lists':'suffix'
				      (FS, A)
			      in  %% Line 318
				  case <_cor6,B> of
				    %% Line 319
				    <'true',[35|_cor18]> when 'true' ->
					let <_cor8> =
					    %% Line 320
					    call 'erlang':'length'
						(A)
					in  let <_cor7> =
						%% Line 320
						call 'erlang':'length'
						    (FS)
					    in  let <_cor9> =
						    %% Line 320
						    call 'erlang':'-'
							(_cor8, _cor7)
						in  let <_cor10> =
							%% Line 320
							call 'lists':'sublist'
							    (A, _cor9)
						    in  let <_cor11> =
							    %% Line 320
							    call 'erlang':'++'
								(_cor10, B)
							in  %% Line 320
							    [{'marker',_cor11}|[]]
				    %% Line 321
				    <_fol57,_fol58> when 'true' ->
					%% Line 322
					HRef0
				  end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'fix_mod_ref',2}}] )
	    -| ['compiler_generated'] )
	end
'see'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	%% Line 327
	case apply 'href'/1
		 (_cor1) of
	  %% Line 328
	  <[]> when 'true' ->
	      _cor0
	  %% Line 329
	  <Ref> when 'true' ->
	      %% Line 330
	      [{'seealso',Ref,_cor0}|[]]
	end
'href'/1 =
    %% Line 333
    fun (_cor0) ->
	%% Line 334
	case apply 'get_attrval'/2
		 ('href', _cor0) of
	  %% Line 335
	  <[]> when 'true' ->
	      []
	  %% Line 336
	  <URI> when 'true' ->
	      %% Line 337
	      [{'marker',URI}|[]]
	end
'atom'/1 =
    %% Line 340
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 341
	    call 'erlang':'list_to_atom'
		(_cor0)
	in  %% Line 341
	    call 'io_lib':'write_atom'
		(_cor1)
't_name'/1 =
    %% Line 343
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <N> =
		  %% Line 344
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 345
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 346
		    <[]> when 'true' ->
			apply 'atom'/1
			    (N)
		    %% Line 347
		    <M> when 'true' ->
			let <_cor4> =
			    %% Line 348
			    apply 'atom'/1
				(M)
			in  let <_cor2> =
				%% Line 348
				apply 'atom'/1
				    (N)
			    in  let <_cor3> =
				    %% Line 348
				    [58|_cor2]
				in  let <S> =
					%% Line 348
					call 'erlang':'++'
					    (_cor4, _cor3)
				    in  %% Line 349
					case apply 'get_attrval'/2
						 ('app', E) of
					  %% Line 350
					  <[]> when 'true' ->
					      S
					  %% Line 351
					  <A> when 'true' ->
					      let <_cor7> =
						  apply 'atom'/1
						      (A)
					      in  let <_cor6> =
						      [47|S]
						  in  let <_cor8> =
							  call 'erlang':'++'
							      (_cor7, _cor6)
						      in  [47|[47|_cor8]]
					end
		  end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'t_name',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype'/1 =
    %% Line 355
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 356
	      apply 't_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_utype',1}}] )
	    -| ['compiler_generated'] )
	end
't_utype_elem'/1 =
    %% Line 358
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 359
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 360
		<[]> when 'true' ->
		    apply 't_type'/1
			(Es)
		%% Line 361
		<Name> when 'true' ->
		    let <T> =
			%% Line 362
			apply 't_type'/1
			    (Es)
		    in  %% Line 363
			case T of
			  %% Line 364
			  <[_cor16|[]]>
			      when call 'erlang':'=:='
				    (_cor16,
				     Name) ->
			      T
			  %% Line 365
			  <_cor17> when 'true' ->
			      let <_cor2> =
				  [[58|[58]]|T]
			      in  [Name|_cor2]
			end
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'t_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
't_type'/1 =
    %% Line 369
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|[]]> when 'true' ->
	      %% Line 370
	      apply 't_var'/1
		  (E)
	  %% Line 371
	  <[E = {'xmlElement','atom',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}|[]]> when 'true' ->
	      %% Line 372
	      apply 't_atom'/1
		  (E)
	  %% Line 373
	  <[E = {'xmlElement','integer',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}|[]]> when 'true' ->
	      %% Line 374
	      apply 't_integer'/1
		  (E)
	  %% Line 375
	  <[E = {'xmlElement','range',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}|[]]> when 'true' ->
	      %% Line 376
	      apply 't_range'/1
		  (E)
	  %% Line 377
	  <[E = {'xmlElement','binary',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}|[]]> when 'true' ->
	      %% Line 378
	      apply 't_binary'/1
		  (E)
	  %% Line 379
	  <[E = {'xmlElement','float',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}|[]]> when 'true' ->
	      %% Line 380
	      apply 't_float'/1
		  (E)
	  %% Line 381
	  <[{'xmlElement','nil',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}|[]]> when 'true' ->
	      %% Line 382
	      apply 't_nil'/0
		  ()
	  %% Line 383
	  <[{'xmlElement','paren',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,Es,_cor80,_cor81,_cor82}|[]]> when 'true' ->
	      %% Line 384
	      apply 't_paren'/1
		  (Es)
	  %% Line 385
	  <[{'xmlElement','list',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,Es,_cor89,_cor90,_cor91}|[]]> when 'true' ->
	      %% Line 386
	      apply 't_list'/1
		  (Es)
	  %% Line 387
	  <[{'xmlElement','nonempty_list',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,Es,_cor98,_cor99,_cor100}|[]]> when 'true' ->
	      %% Line 388
	      apply 't_nonempty_list'/1
		  (Es)
	  %% Line 389
	  <[{'xmlElement','tuple',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,Es,_cor107,_cor108,_cor109}|[]]> when 'true' ->
	      %% Line 390
	      apply 't_tuple'/1
		  (Es)
	  %% Line 391
	  <[{'xmlElement','map',_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119}|[]]> when 'true' ->
	      %% Line 392
	      apply 't_map'/0
		  ()
	  %% Line 393
	  <[{'xmlElement','fun',_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,Es,_cor126,_cor127,_cor128}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 394
		  apply 't_fun'/1
		      (Es)
	      in  let <_cor2> =
		      %% Line 394
		      call 'erlang':'++'
			  (_cor1, [[41]])
		  in  %% Line 394
		      [[102|[117|[110|[40]]]]|_cor2]
	  %% Line 395
	  <[E = {'xmlElement','record',_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,Es,_cor135,_cor136,_cor137}|[]]> when 'true' ->
	      %% Line 396
	      apply 't_record'/2
		  (E, Es)
	  %% Line 397
	  <[E = {'xmlElement','abstype',_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,Es,_cor144,_cor145,_cor146}|[]]> when 'true' ->
	      %% Line 398
	      apply 't_abstype'/2
		  (E, Es)
	  %% Line 399
	  <[{'xmlElement','union',_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,Es,_cor153,_cor154,_cor155}|[]]> when 'true' ->
	      %% Line 400
	      apply 't_union'/1
		  (Es)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'t_type',1}}] )
	    -| ['compiler_generated'] )
	end
't_var'/1 =
    %% Line 402
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 403
	    apply 'get_attrval'/2
		('name', _cor0)
	in  %% Line 403
	    [_cor1|[]]
't_atom'/1 =
    %% Line 405
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 406
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 406
	    [_cor1|[]]
't_integer'/1 =
    %% Line 408
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 409
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 409
	    [_cor1|[]]
't_range'/1 =
    %% Line 411
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 412
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 412
	    [_cor1|[]]
't_binary'/1 =
    %% Line 414
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 415
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 415
	    [_cor1|[]]
't_float'/1 =
    %% Line 417
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 418
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 418
	    [_cor1|[]]
't_nil'/0 =
    %% Line 420
    fun () ->
	%% Line 421
	[[91|[93]]]
't_paren'/1 =
    %% Line 423
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 424
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 424
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 424
		    call 'erlang':'++'
			(_cor2, [[41]])
		in  %% Line 424
		    [[40]|_cor3]
't_list'/1 =
    %% Line 426
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 427
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 427
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 427
		    call 'erlang':'++'
			(_cor2, [[93]])
		in  %% Line 427
		    [[91]|_cor3]
't_nonempty_list'/1 =
    %% Line 429
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 430
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 430
		apply 't_utype'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 430
		    call 'erlang':'++'
			(_cor2, [[44|[32|[46|[46|[46|[93]]]]]]])
		in  %% Line 430
		    [[91]|_cor3]
't_tuple'/1 =
    %% Line 432
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 433
	    apply 'seq'/3
		(( 't_utype_elem'/1
		   -| [{'id',{0,0,'-t_tuple/1-fun-0-'}}] ), _cor0, [[125]])
	in  %% Line 433
	    [[123]|_cor1]
't_map'/0 =
    %% Line 435
    fun () ->
	%% Line 436
	[[109|[97|[112|[40|[41]]]]]]
't_fun'/1 =
    %% Line 438
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 439
	    apply 'get_content'/2
		('argtypes', _cor0)
	in  let <_cor1> =
		%% Line 440
		apply 'get_elem'/2
		    ('type', _cor0)
	    in  let <_cor2> =
		    %% Line 440
		    apply 't_utype'/1
			(_cor1)
		in  let <_cor3> =
			%% Line 440
			[[41|[32|[45|[62|[32]]]]]|_cor2]
		    in  let <_cor5> =
			    %% Line 439
			    apply 'seq'/3
				(( 't_utype_elem'/1
				   -| [{'id',{0,0,'-t_fun/1-fun-0-'}}] ), _cor4, _cor3)
			in  %% Line 439
			    [[40]|_cor5]
't_record'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 443
	    apply 'get_elem'/2
		('atom', _cor0)
	in  let <_cor3> =
		%% Line 443
		apply 't_type'/1
		    (_cor2)
	    in  let <Name> =
		    %% Line 443
		    [[35]|_cor3]
		in  %% Line 444
		    case apply 'get_elem'/2
			     ('field', _cor0) of
		      %% Line 445
		      <[]> when 'true' ->
			  %% Line 446
			  apply 'see'/2
			      (_cor1, [Name|[[123|[125]]]])
		      %% Line 447
		      <Fs> when 'true' ->
			  let <_cor7> =
			      %% Line 448
			      apply 'see'/2
				  (_cor1, Name)
			  in  let <_cor5> =
				  %% Line 448
				  apply 'seq'/3
				      (( 't_field'/1
					 -| [{'id',{0,0,'-t_record/2-fun-0-'}}] ), Fs, [[125]])
			      in  let <_cor6> =
				      %% Line 448
				      [[123]|_cor5]
				  in  %% Line 448
				      call 'erlang':'++'
					  (_cor7, _cor6)
		    end
't_field'/1 =
    %% Line 451
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Es,_cor14,_cor15,_cor16}> when 'true' ->
	      let <_cor4> =
		  %% Line 452
		  apply 'get_elem'/2
		      ('atom', Es)
	      in  let <_cor5> =
		      %% Line 452
		      apply 't_type'/1
			  (_cor4)
		  in  let <_cor1> =
			  %% Line 452
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor2> =
			      %% Line 452
			      apply 't_utype'/1
				  (_cor1)
			  in  let <_cor3> =
				  %% Line 452
				  [[32|[61|[32]]]|_cor2]
			      in  %% Line 452
				  call 'erlang':'++'
				      (_cor5, _cor3)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'t_field',1}}] )
	    -| ['compiler_generated'] )
	end
't_abstype'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 455
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <Name> =
		%% Line 455
		apply 't_name'/1
		    (_cor2)
	    in  %% Line 456
		case apply 'get_elem'/2
			 ('type', _cor0) of
		  %% Line 457
		  <[]> when 'true' ->
		      %% Line 458
		      apply 'see'/2
			  (_cor1, [Name|[[40|[41]]]])
		  %% Line 459
		  <Ts> when 'true' ->
		      let <_cor6> =
			  %% Line 460
			  apply 'see'/2
			      (_cor1, [Name|[]])
		      in  let <_cor4> =
			      %% Line 460
			      apply 'seq'/3
				  (( 't_utype_elem'/1
				     -| [{'id',{0,0,'-t_abstype/2-fun-0-'}}] ), Ts, [[41]])
			  in  let <_cor5> =
				  %% Line 460
				  [[40]|_cor4]
			      in  %% Line 460
				  call 'erlang':'++'
				      (_cor6, _cor5)
		end
't_abstype'/1 =
    %% Line 463
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 464
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor4> =
		%% Line 464
		apply 't_name'/1
		    (_cor3)
	    in  let <_cor1> =
		    %% Line 465
		    apply 'get_elem'/2
			('type', _cor0)
		in  let <_cor2> =
			%% Line 465
			apply 'seq'/3
			    (( 't_utype_elem'/1
			       -| [{'id',{0,0,'-t_abstype/1-fun-0-'}}] ), _cor1, [[41]])
		    in  %% Line 464
			[_cor4|%% Line 465
			       [[40]|_cor2]]
't_union'/1 =
    %% Line 467
    fun (_cor0) ->
	%% Line 468
	apply 'seq'/4
	    (( 't_utype_elem'/1
	       -| [{'id',{0,0,'-t_union/1-fun-0-'}}] ), _cor0, [32|[124|[32]]], [])
'seq'/3 =
    %% Line 470
    fun (_cor2,_cor1,_cor0) ->
	%% Line 471
	apply 'seq'/4
	    (_cor2, _cor1, [44|[32]], _cor0)
'seq'/4 =
    %% Line 473
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,[E|[]],_X_Sep,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 474
		  apply F
		      (E)
	      in  %% Line 474
		  call 'erlang':'++'
		      (_cor4, Tail)
	  %% Line 475
	  <F,[E|Es],Sep,Tail> when 'true' ->
	      let <_cor7> =
		  %% Line 476
		  apply F
		      (E)
	      in  let <_cor5> =
		      %% Line 476
		      apply 'seq'/4
			  (F, Es, Sep, Tail)
		  in  let <_cor6> =
			  %% Line 476
			  [Sep|_cor5]
		      in  %% Line 476
			  call 'erlang':'++'
			      (_cor7, _cor6)
	  %% Line 477
	  <_X_F,[],_X_Sep,Tail> when 'true' ->
	      %% Line 478
	      Tail
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'seq',4}}] )
	    -| ['compiler_generated'] )
	end
'get_elem'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[E = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}|Es]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 481
		  apply 'get_elem'/2
		      (Name, Es)
	      in  %% Line 481
		  [E|_cor2]
	  %% Line 482
	  <Name,[_cor16|Es]> when 'true' ->
	      %% Line 483
	      apply 'get_elem'/2
		  (Name, Es)
	  %% Line 484
	  <_cor17,[]> when 'true' ->
	      %% Line 485
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_elem',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attr'/2 =
    %% Line 487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[A = {'xmlAttribute',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|As]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Name) ->
	      let <_cor2> =
		  %% Line 488
		  apply 'get_attr'/2
		      (Name, As)
	      in  %% Line 488
		  [A|_cor2]
	  %% Line 489
	  <Name,[_cor14|As]> when 'true' ->
	      %% Line 490
	      apply 'get_attr'/2
		  (Name, As)
	  %% Line 491
	  <_cor15,[]> when 'true' ->
	      %% Line 492
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'get_attrval'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,As,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 495
	      case apply 'get_attr'/2
		       (Name, As) of
		%% Line 496
		<[{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}|[]]> when 'true' ->
		    %% Line 497
		    V
		%% Line 498
		<[]> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_attrval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_content'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	%% Line 502
	case apply 'get_elem'/2
		 (_cor1, _cor0) of
	  %% Line 503
	  <[{'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Es1,_cor12,_cor13,_cor14}|[]]> when 'true' ->
	      %% Line 504
	      Es1
	  %% Line 505
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'overview'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	[]
'package'/2 =
    %% Line 510
    fun (_cor1,_cor0) ->
	[]
'type'/1 =
    %% Line 512
    fun (_cor0) ->
	[]
'ot_utype'/1 =
    %% Line 516
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 517
	      apply 'ot_utype_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ot_utype',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_utype_elem'/1 =
    %% Line 519
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,Es,_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 520
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 521
		<[]> when 'true' ->
		    apply 'ot_type'/1
			(Es)
		%% Line 522
		<N> when 'true' ->
		    let <_cor1> =
			%% Line 523
			call 'erlang':'list_to_atom'
			    (N)
		    in  let <Name> = {%% Line 523
			     'var',%% Line 523
				   0,_cor1}
			in  let <T> =
				%% Line 524
				apply 'ot_type'/1
				    (Es)
			    in  %% Line 525
				case T of
				  %% Line 526
				  <_cor17>
				      when call 'erlang':'=:='
					    (T,
					     Name) ->
				      T
				  %% Line 527
				  <_cor18> when 'true' ->
				      {'ann_type',0,[Name|[T|[]]]}
				end
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'ot_utype_elem',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_type'/1 =
    %% Line 531
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlElement','typevar',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}|[]]> when 'true' ->
	      %% Line 532
	      apply 'ot_var'/1
		  (E)
	  %% Line 533
	  <[E = {'xmlElement','atom',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|[]]> when 'true' ->
	      %% Line 534
	      apply 'ot_atom'/1
		  (E)
	  %% Line 535
	  <[E = {'xmlElement','integer',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}|[]]> when 'true' ->
	      %% Line 536
	      apply 'ot_integer'/1
		  (E)
	  %% Line 537
	  <[E = {'xmlElement','range',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}|[]]> when 'true' ->
	      %% Line 538
	      apply 'ot_range'/1
		  (E)
	  %% Line 539
	  <[E = {'xmlElement','binary',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}|[]]> when 'true' ->
	      %% Line 540
	      apply 'ot_binary'/1
		  (E)
	  %% Line 541
	  <[E = {'xmlElement','float',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}|[]]> when 'true' ->
	      %% Line 542
	      apply 'ot_float'/1
		  (E)
	  %% Line 543
	  <[{'xmlElement','nil',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}|[]]> when 'true' ->
	      %% Line 544
	      apply 'ot_nil'/0
		  ()
	  %% Line 545
	  <[{'xmlElement','paren',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,Es,_cor78,_cor79,_cor80}|[]]> when 'true' ->
	      %% Line 546
	      apply 'ot_paren'/1
		  (Es)
	  %% Line 547
	  <[{'xmlElement','list',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,Es,_cor87,_cor88,_cor89}|[]]> when 'true' ->
	      %% Line 548
	      apply 'ot_list'/1
		  (Es)
	  %% Line 549
	  <[{'xmlElement','nonempty_list',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,Es,_cor96,_cor97,_cor98}|[]]> when 'true' ->
	      %% Line 550
	      apply 'ot_nonempty_list'/1
		  (Es)
	  %% Line 551
	  <[{'xmlElement','tuple',_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,Es,_cor105,_cor106,_cor107}|[]]> when 'true' ->
	      %% Line 552
	      apply 'ot_tuple'/1
		  (Es)
	  %% Line 553
	  <[{'xmlElement','fun',_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,Es,_cor114,_cor115,_cor116}|[]]> when 'true' ->
	      %% Line 554
	      apply 'ot_fun'/1
		  (Es)
	  %% Line 555
	  <[{'xmlElement','record',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,Es,_cor123,_cor124,_cor125}|[]]> when 'true' ->
	      %% Line 556
	      apply 'ot_record'/1
		  (Es)
	  %% Line 557
	  <[{'xmlElement','abstype',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,Es,_cor132,_cor133,_cor134}|[]]> when 'true' ->
	      %% Line 558
	      apply 'ot_abstype'/1
		  (Es)
	  %% Line 559
	  <[{'xmlElement','union',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,Es,_cor141,_cor142,_cor143}|[]]> when 'true' ->
	      %% Line 560
	      apply 'ot_union'/1
		  (Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ot_type',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_var'/1 =
    %% Line 562
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 563
	    apply 'get_attrval'/2
		('name', _cor0)
	in  let <_cor2> =
		%% Line 563
		call 'erlang':'list_to_atom'
		    (_cor1)
	    in  %% Line 563
		{'var',0,_cor2}
'ot_atom'/1 =
    %% Line 565
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 566
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 566
	    case call 'erl_scan':'string'
		     (_cor1, 0) of
	      <{'ok',[Atom|[]],_cor4}> when 'true' ->
		  %% Line 567
		  Atom
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'ot_integer'/1 =
    %% Line 569
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 570
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <_cor2> =
		%% Line 570
		call 'erlang':'list_to_integer'
		    (_cor1)
	    in  %% Line 570
		{'integer',0,_cor2}
'ot_range'/1 =
    %% Line 572
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 573
	    apply 'get_attrval'/2
		('value', _cor0)
	in  %% Line 573
	    case call 'string':'tokens'
		     (_cor1, [46]) of
	      <[I1|[I2|[]]]> when 'true' ->
		  let <_cor3> =
		      %% Line 574
		      call 'erlang':'list_to_integer'
			  (I1)
		  in  let <_cor4> =
			  %% Line 575
			  call 'erlang':'list_to_integer'
			      (I2)
		      in  %% Line 574
			  {'type',0,'range',[{'integer',0,_cor3}|%% Line 575
								 [{'integer',0,_cor4}|[]]]}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'ot_binary'/1 =
    %% Line 577
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 579
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <Base,Unit> =
		%% Line 579
		case call 'string':'tokens'
			 (_cor1, [44|[58|[42|[62|[60]]]]]) of
		  %% Line 580
		  <[]> when 'true' ->
		      %% Line 581
		      <0,0>
		  %% Line 582
		  <[[95]|[B|[]]]> when 'true' ->
		      let <_cor2> =
			  %% Line 583
			  call 'erlang':'list_to_integer'
			      (B)
		      in  <_cor2,%% Line 583
				 0>
		  %% Line 584
		  <[[95]|[[95]|[U|[]]]]> when 'true' ->
		      let <_cor3> =
			  %% Line 585
			  call 'erlang':'list_to_integer'
			      (U)
		      in  %% Line 585
			  <0,_cor3>
		  %% Line 586
		  <[[95]|[B|[_cor10|[[95]|[U|[]]]]]]> when 'true' ->
		      let <_cor5> =
			  %% Line 587
			  call 'erlang':'list_to_integer'
			      (B)
		      in  let <_cor4> =
			      %% Line 587
			      call 'erlang':'list_to_integer'
				  (U)
			  in  <_cor5,_cor4>
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 589
		{'type',0,'binary',[{'integer',0,Base}|[{'integer',0,Unit}|[]]]}
'ot_float'/1 =
    %% Line 591
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 592
	    apply 'get_attrval'/2
		('value', _cor0)
	in  let <_cor2> =
		%% Line 592
		call 'erlang':'list_to_float'
		    (_cor1)
	    in  %% Line 592
		{'float',0,_cor2}
'ot_nil'/0 =
    %% Line 594
    fun () ->
	%% Line 595
	{'nil',0}
'ot_paren'/1 =
    %% Line 597
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 598
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 598
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 598
		{'paren_type',0,[_cor2|[]]}
'ot_list'/1 =
    %% Line 600
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 601
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 601
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 601
		{'type',0,'list',[_cor2|[]]}
'ot_nonempty_list'/1 =
    %% Line 603
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 604
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 604
		apply 'ot_utype'/1
		    (_cor1)
	    in  %% Line 604
		{'type',0,'nonempty_list',[_cor2|[]]}
'ot_tuple'/1 =
    %% Line 606
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 607
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[E|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'ot_utype_elem'/1
					(E)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 607
	    {'type',0,'tuple',_cor6}
'ot_fun'/1 =
    %% Line 609
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 610
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <Range> =
		%% Line 610
		apply 'ot_utype'/1
		    (_cor1)
	    in  let <_cor9> =
		    %% Line 611
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[A|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'ot_utype_elem'/1
						(A)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'get_content'/2
				  ('argtypes', _cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 612
		    {'type',0,'fun',[{'type',0,'product',_cor9}|[Range|[]]]}
'ot_record'/1 =
    %% Line 614
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 615
	    apply 'get_elem'/2
		('atom', _cor0)
	in  let <_cor2> =
		%% Line 615
		apply 'ot_type'/1
		    (_cor1)
	    in  let <_cor9> =
		    %% Line 616
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[F|_cor4]> when 'true' ->
					let <_cor7> =
					    apply 'ot_field'/1
						(F)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      apply 'get_elem'/2
				  ('field', _cor0)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 615
		    {'type',0,'record',[_cor2|_cor9]}
'ot_field'/1 =
    %% Line 618
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Es,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor1> =
		  %% Line 620
		  apply 'get_elem'/2
		      ('atom', Es)
	      in  let <_cor2> =
		      %% Line 620
		      apply 'ot_type'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 620
			  apply 'get_elem'/2
			      ('type', Es)
		      in  let <_cor4> =
			      %% Line 620
			      apply 'ot_utype'/1
				  (_cor3)
			  in  %% Line 619
			      {'type',0,'field_type',%% Line 620
						     [_cor2|[_cor4|[]]]}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'ot_field',1}}] )
	    -| ['compiler_generated'] )
	end
'ot_abstype'/1 =
    %% Line 622
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 623
	    apply 'get_elem'/2
		('erlangName', _cor0)
	in  let <_cor7> =
		%% Line 624
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[Elem|_cor2]> when 'true' ->
				    let <_cor5> =
					apply 'ot_utype_elem'/1
					    (Elem)
				    in  let <_cor6> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [_cor5|_cor6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor3> =
			  apply 'get_elem'/2
			      ('type', _cor0)
		      in  apply 'lc$^0'/1
			      (_cor3)
		  -| ['list_comprehension'] )
	    in  %% Line 623
		apply 'ot_name'/2
		    (_cor8, _cor7)
'ot_union'/1 =
    %% Line 626
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 627
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[E|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'ot_utype_elem'/1
					(E)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 627
	    {'type',0,'union',_cor6}
'ot_name'/2 =
    %% Line 629
    fun (_cor1,_cor0) ->
	%% Line 630
	case apply 'ot_name'/1
		 (_cor1) of
	  %% Line 631
	  <[Mod|[[58]|[Atom|[]]]]> when 'true' ->
	      let <_cor2> =
		  %% Line 632
		  call 'erlang':'list_to_atom'
		      (Mod)
	      in  let <_cor3> =
		      %% Line 633
		      call 'erlang':'list_to_atom'
			  (Atom)
		  in  %% Line 632
		      {'remote_type',0,[{'atom',0,_cor2}|%% Line 633
							 [{'atom',0,_cor3}|[_cor0|[]]]]}
	  %% Line 634
	  <[116|[117|[112|[108|[101]]]]]>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      %% Line 635
	      {'type',0,'tuple','any'}
	  %% Line 636
	  <Atom> when 'true' ->
	      let <_cor4> =
		  %% Line 637
		  call 'erlang':'list_to_atom'
		      (Atom)
	      in  %% Line 637
		  {'type',0,_cor4,_cor0}
	end
'ot_name'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      let <Atom> =
		  %% Line 641
		  apply 'get_attrval'/2
		      ('name', E)
	      in  %% Line 642
		  case apply 'get_attrval'/2
			   ('module', E) of
		    %% Line 643
		    <[]> when 'true' ->
			Atom
		    %% Line 644
		    <M> when 'true' ->
			%% Line 645
			case apply 'get_attrval'/2
				 ('app', E) of
			  %% Line 646
			  <[]> when 'true' ->
			      %% Line 647
			      [M|[[58]|[Atom|[]]]]
			  %% Line 648
			  <A> when 'true' ->
			      let <_cor2> =
				  %% Line 649
				  [47|M]
			      in  let <_cor3> =
				      %% Line 649
				      call 'erlang':'++'
					  (A, _cor2)
				  in  let <_cor4> =
					  %% Line 649
					  [47|[47|_cor3]]
				      in  %% Line 649
					  [_cor4|[[58]|[Atom|[]]]]
			end
		  end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'ot_name',1}}] )
	    -| ['compiler_generated'] )
	end
'typespec_annos'/1 =
    %% Line 657
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      [[10]]
	  %% Line 658
	  <[_cor3|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 659
		  apply 'clause_annos'/1
		      (Es)
	      in  %% Line 659
		  apply 'annotations'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'typespec_annos',1}}] )
	    -| ['compiler_generated'] )
	end
'clause_annos'/1 =
    %% Line 661
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 662
	    apply 'get_elem'/2
		('type', _cor0)
	in  let <_cor2> =
		%% Line 662
		apply 'annos'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 662
		    apply 'get_elem'/2
			('localdef', _cor0)
		in  let <_cor4> =
			%% Line 662
			apply 'local_defs_annos'/1
			    (_cor3)
		    in  %% Line 662
			[_cor2|[_cor4|[]]]
'typedef_annos'/1 =
    %% Line 664
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 665
	    case apply 'get_elem'/2
		     ('type', _cor0) of
	      %% Line 666
	      <[]> when 'true' ->
		  []
	      %% Line 667
	      <T> when 'true' ->
		  apply 'annos'/1
		      (T)
	    end
	in  let <_cor1> =
		%% Line 670
		apply 'get_content'/2
		    ('argtypes', _cor0)
	    in  let <_cor2> =
		    %% Line 669
		    call 'lists':'flatmap'
			(( 'annos_elem'/1
			   -| [{'id',{0,0,'-typedef_annos/1-fun-0-'}}] ), _cor1)
		in  let <_cor5> =
			%% Line 669
			call 'erlang':'++'
			    (_cor4, _cor2)
		    in  let <_cor6> =
			    %% Line 671
			    apply 'get_elem'/2
				('localdef', _cor0)
			in  let <_cor7> =
				%% Line 671
				apply 'local_defs_annos'/1
				    (_cor6)
			    in  %% Line 665
				apply 'annotations'/1
				    ([_cor5|%% Line 671
					    [_cor7|[]]])
'local_defs_annos'/1 =
    %% Line 673
    fun (_cor0) ->
	%% Line 674
	call 'lists':'flatmap'
	    (( 'localdef_annos'/1
	       -| [{'id',{0,0,'-local_defs_annos/1-fun-0-'}}] ), _cor0)
'localdef_annos'/1 =
    %% Line 676
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Es,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor1> =
		  %% Line 677
		  apply 'get_elem'/2
		      ('type', Es)
	      in  %% Line 677
		  apply 'annos'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'localdef_annos',1}}] )
	    -| ['compiler_generated'] )
	end
'annotations'/1 =
    %% Line 679
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 680
	    call 'lists':'flatten'
		(_cor0)
	in  let <Annos> =
		%% Line 680
		call 'lists':'usort'
		    (_cor1)
	    in  %% Line 681
		apply 'margin'/2
		    (2, Annos)
'margin'/2 =
    %% Line 683
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 684
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[E|_cor6]> when 'true' ->
				let <_cor8> =
				    call 'lists':'duplicate'
					(_cor1, 32)
				in  let <_cor9> =
					[10|_cor8]
				    in  let <_cor10> =
					    apply 'lc$^0'/1
						(_cor6)
					in  ( [[{'xmlText',[],'undefined',[],_cor9,'text'}|[E|[]]]|_cor10]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor12> =
		%% Line 684
		call 'lists':'append'
		    (_cor11)
	    in  let <_cor2> =
		    %% Line 684
		    call 'erlang':'-'
			(_cor1, 2)
		in  let <_cor3> =
			%% Line 684
			call 'lists':'duplicate'
			    (_cor2, 32)
		    in  let <_cor4> =
			    %% Line 684
			    [10|_cor3]
			in  %% Line 684
			    call 'erlang':'++'
				(_cor12, [{'xmlText',[],'undefined',[],_cor4,'text'}|[]])
'annos'/1 =
    %% Line 686
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      %% Line 687
	      apply 'annos_elem'/1
		  (E)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'annos',1}}] )
	    -| ['compiler_generated'] )
	end
'annos_elem'/1 =
    %% Line 689
    fun (_cor0) ->
	case _cor0 of
	  <E = {'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Es,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 690
	      case apply 'get_attrval'/2
		       ('name', E) of
		%% Line 691
		<[]> when 'true' ->
		    apply 'annos_type'/1
			(Es)
		%% Line 692
		<[46|[46|[46]]]> when 'true' ->
		    apply 'annos_type'/1
			(Es)
		%% Line 693
		<N> when 'true' ->
		    let <_cor1> =
			%% Line 694
			apply 'annos_type'/1
			    (Es)
		    in  %% Line 694
			[{'anno',[N|[]]}|_cor1]
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'annos_elem',1}}] )
	    -| ['compiler_generated'] )
	end
'annos_type'/1 =
    %% Line 697
    fun (_cor0) ->
	case _cor0 of
	  <[{'xmlElement','list',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,Es,_cor24,_cor25,_cor26}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 698
		  apply 'get_elem'/2
		      ('type', Es)
	      in  %% Line 698
		  apply 'annos'/1
		      (_cor1)
	  %% Line 699
	  <[{'xmlElement','nonempty_list',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,Es,_cor33,_cor34,_cor35}|[]]> when 'true' ->
	      let <_cor2> =
		  %% Line 700
		  apply 'get_elem'/2
		      ('type', Es)
	      in  %% Line 700
		  apply 'annos'/1
		      (_cor2)
	  %% Line 701
	  <[{'xmlElement','tuple',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Es,_cor42,_cor43,_cor44}|[]]> when 'true' ->
	      %% Line 702
	      call 'lists':'flatmap'
		  (( 'annos_elem'/1
		     -| [{'id',{0,0,'-annos_type/1-fun-0-'}}] ), Es)
	  %% Line 703
	  <[{'xmlElement','fun',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,Es,_cor51,_cor52,_cor53}|[]]> when 'true' ->
	      let <_cor5> =
		  %% Line 704
		  apply 'get_elem'/2
		      ('type', Es)
	      in  let <_cor6> =
		      %% Line 704
		      apply 'annos'/1
			  (_cor5)
		  in  let <_cor3> =
			  %% Line 705
			  apply 'get_content'/2
			      ('argtypes', Es)
		      in  let <_cor4> =
			      %% Line 705
			      call 'lists':'flatmap'
				  (( 'annos_elem'/1
				     -| [{'id',{0,0,'-annos_type/1-fun-1-'}}] ), _cor3)
			  in  %% Line 705
			      call 'erlang':'++'
				  (_cor6, _cor4)
	  %% Line 706
	  <[{'xmlElement','record',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Es,_cor60,_cor61,_cor62}|[]]> when 'true' ->
	      let <_cor14> =
		  %% Line 707
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[%% Line 708
				    {'xmlElement',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,Es1,_cor70,_cor71,_cor72}|_cor8]> when 'true' ->
				      let <_cor11> =
					  apply 'get_elem'/2
					      ('type', Es1)
				      in  let <_cor12> =
					      apply 'annos'/1
						  (_cor11)
					  in  let <_cor13> =
						  %% Line 708
						  apply 'lc$^0'/1
						      (_cor8)
					      in  ( [_cor12|_cor13]
						    -| ['compiler_generated'] )
				  ( <[_cor7|_cor8]> when 'true' ->
					%% Line 708
					apply 'lc$^0'/1
					    (_cor8)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor10> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor9> =
			    %% Line 708
			    apply 'get_elem'/2
				('field', Es)
			in  apply 'lc$^0'/1
				(_cor9)
		    -| ['list_comprehension'] )
	      in  %% Line 707
		  call 'lists':'append'
		      (_cor14)
	  %% Line 709
	  <[{'xmlElement','abstype',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,Es,_cor79,_cor80,_cor81}|[]]> when 'true' ->
	      let <_cor15> =
		  %% Line 710
		  apply 'get_elem'/2
		      ('type', Es)
	      in  %% Line 710
		  call 'lists':'flatmap'
		      (( 'annos_elem'/1
			 -| [{'id',{0,0,'-annos_type/1-fun-2-'}}] ), _cor15)
	  %% Line 711
	  <[{'xmlElement','union',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,Es,_cor88,_cor89,_cor90}|[]]> when 'true' ->
	      %% Line 712
	      call 'lists':'flatmap'
		  (( 'annos_elem'/1
		     -| [{'id',{0,0,'-annos_type/1-fun-3-'}}] ), Es)
	  %% Line 713
	  <[E = {'xmlElement','typevar',_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100}|[]]> when 'true' ->
	      %% Line 714
	      apply 'annos_elem'/1
		  (E)
	  %% Line 715
	  <[{'xmlElement','paren',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,Es,_cor107,_cor108,_cor109}|[]]> when 'true' ->
	      let <_cor16> =
		  %% Line 716
		  apply 'get_elem'/2
		      ('type', Es)
	      in  %% Line 716
		  apply 'annos'/1
		      (_cor16)
	  %% Line 717
	  <_cor110> when 'true' ->
	      %% Line 718
	      []
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('docgen_otp_specs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('docgen_otp_specs', _cor0)
end