module 'wxPalette' ['create'/4,
		    'destroy'/1,
		    'getColoursCount'/1,
		    'getPixel'/4,
		    'getRGB'/2,
		    'isOk'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'new'/0,
		    'new'/3,
		    'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 33
		'export_type' =
		    %% Line 33
		    [{'wxPalette',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'wxPalette',{'remote_type',37,[{'atom',37,'wx'}|[{'atom',37,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'type',39,'wxPalette',[]}]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',3},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'Red'}|[{'var',45,'Green'}|[{'var',45,'Blue'}]]]}|[{'type',45,'wxPalette',[]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Red'}|[{'type',46,'binary',[]}]]]]}|[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Green'}|[{'type',46,'binary',[]}]]]]}|[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Blue'}|[{'type',46,'binary',[]}]]]]}]]]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'create',4},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'This'}|[{'var',56,'Red'}|[{'var',56,'Green'}|[{'var',56,'Blue'}]]]]}|[{'type',56,'boolean',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'This'}|[{'type',57,'wxPalette',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Red'}|[{'type',57,'binary',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Green'}|[{'type',57,'binary',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Blue'}|[{'type',57,'binary',[]}]]]]}]]]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'getColoursCount',1},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'This'}]}|[{'type',68,'integer',[]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'This'}|[{'type',69,'wxPalette',[]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'getPixel',4},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'This'}|[{'var',76,'Red'}|[{'var',76,'Green'}|[{'var',76,'Blue'}]]]]}|[{'type',76,'integer',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'This'}|[{'type',77,'wxPalette',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Red'}|[{'type',77,'integer',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Green'}|[{'type',77,'integer',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Blue'}|[{'type',77,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'getRGB',2},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'This'}|[{'var',85,'Pixel'}]]}|[{'var',85,'Result'}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Result'}|[{'type',86,'tuple',[{'ann_type',86,[{'var',86,'Res'}|[{'type',86,'boolean',[]}]]}|[{'ann_type',86,[{'var',86,'Red'}|[{'type',86,'integer',[]}]]}|[{'ann_type',86,[{'var',86,'Green'}|[{'type',86,'integer',[]}]]}|[{'ann_type',86,[{'var',86,'Blue'}|[{'type',86,'integer',[]}]]}]]]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'This'}|[{'type',87,'wxPalette',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Pixel'}|[{'type',87,'integer',[]}]]]]}]]]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'isOk',1},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'This'}]}|[{'type',95,'boolean',[]}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'This'}|[{'type',96,'wxPalette',[]}]]]]}]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'destroy',1},[{'type',103,'fun',[{'type',103,'product',[{'ann_type',103,[{'var',103,'This'}|[{'type',103,'wxPalette',[]}]]}]}|[{'atom',103,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 35
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxPalette'})
'new'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	call 'wxe_util':'construct'
	    (2212, %% Line 42
		   #{}#)
'new'/3 =
    %% Line 47
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Red,Green,Blue>
	      when %% Line 48
		try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (Red)
		    in  let <_cor4> =
			    call 'erlang':'is_binary'
				(Green)
			in  let <_cor5> =
				call 'erlang':'is_binary'
				    (Blue)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 49
		  call 'wxe_util':'send_bin'
		      (Red)
		  do  %% Line 50
		      call 'wxe_util':'send_bin'
			  (Green)
		      do  %% Line 51
			  call 'wxe_util':'send_bin'
			      (Blue)
			  %% Line 52
			  call 'wxe_util':'construct'
			      (2213, %% Line 53
				     #{}#)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/4 =
    %% Line 58
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Red,Green,Blue>
	      when %% Line 59
		try
		    let <_cor4> =
			call 'erlang':'is_binary'
			    (Red)
		    in  let <_cor5> =
			    call 'erlang':'is_binary'
				(Green)
			in  let <_cor6> =
				call 'erlang':'is_binary'
				    (Blue)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 60
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 61
		      call 'wxe_util':'send_bin'
			  (Red)
		      do  %% Line 62
			  call 'wxe_util':'send_bin'
			      (Green)
			  do  %% Line 63
			      call 'wxe_util':'send_bin'
				  (Blue)
			      let <_cor10> =
				  %% Line 65
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
			      in  %% Line 64
				  call 'wxe_util':'call'
				      (2216, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'getColoursCount'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 71
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 73
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 72
		      call 'wxe_util':'call'
			  (2217, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColoursCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getPixel'/4 =
    %% Line 78
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Red,Green,Blue>
	      when %% Line 79
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Red)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Green)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Blue)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 80
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 82
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Red>(32,1,'integer',['unsigned'|['native']]),
			#<Green>(32,1,'integer',['unsigned'|['native']]),
			#<Blue>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 81
		      call 'wxe_util':'call'
			  (2218, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'getPixel',4}}] )
	    -| ['compiler_generated'] )
	end
'getRGB'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pixel>
	      when %% Line 89
		call 'erlang':'is_integer'
		    (Pixel) ->
	      do  %% Line 90
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 92
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pixel>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 91
		      call 'wxe_util':'call'
			  (2219, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getRGB',2}}] )
	    -| ['compiler_generated'] )
	end
'isOk'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 98
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 100
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 99
		      call 'wxe_util':'call'
			  (2220, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isOk',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 104
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 105
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxPalette') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxPalette')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 106
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 107
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxPalette')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxPalette', _cor0)
end