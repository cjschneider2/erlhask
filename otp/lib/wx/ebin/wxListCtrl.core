module 'wxListCtrl' ['arrange'/1,
		     'arrange'/2,
		     'assignImageList'/3,
		     'cacheBestSize'/2,
		     'captureMouse'/1,
		     'center'/1,
		     'center'/2,
		     'centerOnParent'/1,
		     'centerOnParent'/2,
		     'centre'/1,
		     'centre'/2,
		     'centreOnParent'/1,
		     'centreOnParent'/2,
		     'clearAll'/1,
		     'clearBackground'/1,
		     'clientToScreen'/2,
		     'clientToScreen'/3,
		     'close'/1,
		     'close'/2,
		     'connect'/2,
		     'connect'/3,
		     'convertDialogToPixels'/2,
		     'convertPixelsToDialog'/2,
		     'create'/2,
		     'create'/3,
		     'deleteAllItems'/1,
		     'deleteColumn'/2,
		     'deleteItem'/2,
		     'destroy'/1,
		     'destroyChildren'/1,
		     'disable'/1,
		     'disconnect'/1,
		     'disconnect'/2,
		     'disconnect'/3,
		     'editLabel'/2,
		     'enable'/1,
		     'enable'/2,
		     'ensureVisible'/2,
		     'findItem'/3,
		     'findItem'/4,
		     'findWindow'/2,
		     'fit'/1,
		     'fitInside'/1,
		     'freeze'/1,
		     'getAcceleratorTable'/1,
		     'getBackgroundColour'/1,
		     'getBackgroundStyle'/1,
		     'getBestSize'/1,
		     'getCaret'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getChildren'/1,
		     'getClientSize'/1,
		     'getColumn'/3,
		     'getColumnCount'/1,
		     'getColumnWidth'/2,
		     'getContainingSizer'/1,
		     'getCountPerPage'/1,
		     'getCursor'/1,
		     'getDropTarget'/1,
		     'getEditControl'/1,
		     'getEventHandler'/1,
		     'getExtraStyle'/1,
		     'getFont'/1,
		     'getForegroundColour'/1,
		     'getGrandParent'/1,
		     'getHandle'/1,
		     'getHelpText'/1,
		     'getId'/1,
		     'getImageList'/2,
		     'getItem'/2,
		     'getItemBackgroundColour'/2,
		     'getItemCount'/1,
		     'getItemData'/2,
		     'getItemFont'/2,
		     'getItemPosition'/2,
		     'getItemRect'/2,
		     'getItemRect'/3,
		     'getItemSpacing'/1,
		     'getItemState'/3,
		     'getItemText'/2,
		     'getItemTextColour'/2,
		     'getLabel'/1,
		     'getMaxSize'/1,
		     'getMinSize'/1,
		     'getName'/1,
		     'getNextItem'/2,
		     'getNextItem'/3,
		     'getParent'/1,
		     'getPosition'/1,
		     'getRect'/1,
		     'getScreenPosition'/1,
		     'getScreenRect'/1,
		     'getScrollPos'/2,
		     'getScrollRange'/2,
		     'getScrollThumb'/2,
		     'getSelectedItemCount'/1,
		     'getSize'/1,
		     'getSizer'/1,
		     'getTextColour'/1,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getToolTip'/1,
		     'getTopItem'/1,
		     'getUpdateRegion'/1,
		     'getViewRect'/1,
		     'getVirtualSize'/1,
		     'getWindowStyleFlag'/1,
		     'getWindowVariant'/1,
		     'hasCapture'/1,
		     'hasScrollbar'/2,
		     'hasTransparentBackground'/1,
		     'hide'/1,
		     'hitTest'/3,
		     'inheritAttributes'/1,
		     'initDialog'/1,
		     'insertColumn'/3,
		     'insertColumn'/4,
		     'insertItem'/2,
		     'insertItem'/3,
		     'insertItem'/4,
		     'invalidateBestSize'/1,
		     'isEnabled'/1,
		     'isExposed'/2,
		     'isExposed'/3,
		     'isExposed'/5,
		     'isRetained'/1,
		     'isShown'/1,
		     'isTopLevel'/1,
		     'layout'/1,
		     'lineDown'/1,
		     'lineUp'/1,
		     'lower'/1,
		     'makeModal'/1,
		     'makeModal'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'move'/2,
		     'move'/3,
		     'move'/4,
		     'moveAfterInTabOrder'/2,
		     'moveBeforeInTabOrder'/2,
		     'navigate'/1,
		     'navigate'/2,
		     'new'/0,
		     'new'/1,
		     'new'/2,
		     'pageDown'/1,
		     'pageUp'/1,
		     'parent_class'/1,
		     'popEventHandler'/1,
		     'popEventHandler'/2,
		     'popupMenu'/2,
		     'popupMenu'/3,
		     'popupMenu'/4,
		     'raise'/1,
		     'refresh'/1,
		     'refresh'/2,
		     'refreshItem'/2,
		     'refreshItems'/3,
		     'refreshRect'/2,
		     'refreshRect'/3,
		     'releaseMouse'/1,
		     'removeChild'/2,
		     'reparent'/2,
		     'screenToClient'/1,
		     'screenToClient'/2,
		     'scrollLines'/2,
		     'scrollList'/3,
		     'scrollPages'/2,
		     'scrollWindow'/3,
		     'scrollWindow'/4,
		     'setAcceleratorTable'/2,
		     'setAutoLayout'/2,
		     'setBackgroundColour'/2,
		     'setBackgroundStyle'/2,
		     'setCaret'/2,
		     'setClientSize'/2,
		     'setClientSize'/3,
		     'setColumn'/3,
		     'setColumnWidth'/3,
		     'setContainingSizer'/2,
		     'setCursor'/2,
		     'setDropTarget'/2,
		     'setExtraStyle'/2,
		     'setFocus'/1,
		     'setFocusFromKbd'/1,
		     'setFont'/2,
		     'setForegroundColour'/2,
		     'setHelpText'/2,
		     'setId'/2,
		     'setImageList'/3,
		     'setItem'/2,
		     'setItem'/4,
		     'setItem'/5,
		     'setItemBackgroundColour'/3,
		     'setItemColumnImage'/4,
		     'setItemCount'/2,
		     'setItemData'/3,
		     'setItemFont'/3,
		     'setItemImage'/3,
		     'setItemImage'/4,
		     'setItemPosition'/3,
		     'setItemState'/4,
		     'setItemText'/3,
		     'setItemTextColour'/3,
		     'setLabel'/2,
		     'setMaxSize'/2,
		     'setMinSize'/2,
		     'setName'/2,
		     'setOwnBackgroundColour'/2,
		     'setOwnFont'/2,
		     'setOwnForegroundColour'/2,
		     'setPalette'/2,
		     'setScrollPos'/3,
		     'setScrollPos'/4,
		     'setScrollbar'/5,
		     'setScrollbar'/6,
		     'setSingleStyle'/2,
		     'setSingleStyle'/3,
		     'setSize'/2,
		     'setSize'/3,
		     'setSize'/5,
		     'setSize'/6,
		     'setSizeHints'/2,
		     'setSizeHints'/3,
		     'setSizeHints'/4,
		     'setSizer'/2,
		     'setSizer'/3,
		     'setSizerAndFit'/2,
		     'setSizerAndFit'/3,
		     'setTextColour'/2,
		     'setThemeEnabled'/2,
		     'setToolTip'/2,
		     'setVirtualSize'/2,
		     'setVirtualSize'/3,
		     'setVirtualSizeHints'/2,
		     'setVirtualSizeHints'/3,
		     'setVirtualSizeHints'/4,
		     'setWindowStyle'/2,
		     'setWindowStyleFlag'/2,
		     'setWindowVariant'/2,
		     'shouldInheritColours'/1,
		     'show'/1,
		     'show'/2,
		     'sortItems'/2,
		     'thaw'/1,
		     'transferDataFromWindow'/1,
		     'transferDataToWindow'/1,
		     'update'/1,
		     'updateWindowUI'/1,
		     'updateWindowUI'/2,
		     'validate'/1,
		     'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 86
		'export_type' =
		    %% Line 86
		    [{'wxListCtrl',0}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'wxListCtrl',{'remote_type',93,[{'atom',93,'wx'}|[{'atom',93,'wx_object'}|[[]]]]},[]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'arrange',1},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'This'}]}|[{'type',147,'boolean',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'This'}|[{'type',148,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'arrange',2},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'This'}|[{'type',155,'list',[{'var',155,'Option'}]}]]}|[{'type',155,'boolean',[]}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'This'}|[{'type',156,'wxListCtrl',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Option'}|[{'type',157,'tuple',[{'atom',157,'flag'}|[{'type',157,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'assignImageList',3},[{'type',168,'bounded_fun',[{'type',168,'fun',[{'type',168,'product',[{'var',168,'This'}|[{'var',168,'ImageList'}|[{'var',168,'Which'}]]]}|[{'atom',168,'ok'}]]}|[[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'This'}|[{'type',169,'wxListCtrl',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'ImageList'}|[{'remote_type',169,[{'atom',169,'wxImageList'}|[{'atom',169,'wxImageList'}|[[]]]]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Which'}|[{'type',169,'integer',[]}]]]]}]]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'clearAll',1},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'This'}]}|[{'atom',178,'ok'}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'This'}|[{'type',179,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'deleteAllItems',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}]}|[{'type',221,'boolean',[]}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'deleteColumn',2},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}|[{'var',229,'Col'}]]}|[{'type',229,'boolean',[]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxListCtrl',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Col'}|[{'type',230,'integer',[]}]]]]}]]]]}]}],
		%% Line 238
		'spec' =
		    %% Line 238
		    [{{'deleteItem',2},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'This'}|[{'var',238,'Item'}]]}|[{'type',238,'boolean',[]}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'This'}|[{'type',239,'wxListCtrl',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Item'}|[{'type',239,'integer',[]}]]]]}]]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'editLabel',2},[{'type',247,'bounded_fun',[{'type',247,'fun',[{'type',247,'product',[{'var',247,'This'}|[{'var',247,'Item'}]]}|[{'remote_type',247,[{'atom',247,'wxTextCtrl'}|[{'atom',247,'wxTextCtrl'}|[[]]]]}]]}|[[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'This'}|[{'type',248,'wxListCtrl',[]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'Item'}|[{'type',248,'integer',[]}]]]]}]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'ensureVisible',2},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'This'}|[{'var',256,'Item'}]]}|[{'type',256,'boolean',[]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'This'}|[{'type',257,'wxListCtrl',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Item'}|[{'type',257,'integer',[]}]]]]}]]]]}]}],
		%% Line 265
		'spec' =
		    %% Line 265
		    [{{'findItem',3},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'This'}|[{'var',265,'Start'}|[{'var',265,'Str'}]]]}|[{'type',265,'integer',[]}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'This'}|[{'type',266,'wxListCtrl',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Start'}|[{'type',266,'integer',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Str'}|[{'remote_type',266,[{'atom',266,'unicode'}|[{'atom',266,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'findItem',4},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'This'}|[{'var',277,'Start'}|[{'var',277,'Str'}|[{'type',277,'list',[{'var',277,'Option'}]}]]]]}|[{'type',277,'integer',[]}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'This'}|[{'type',278,'wxListCtrl',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Start'}|[{'type',278,'integer',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Str'}|[{'remote_type',278,[{'atom',278,'unicode'}|[{'atom',278,'chardata'}|[[]]]]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Option'}|[{'type',279,'tuple',[{'atom',279,'partial'}|[{'type',279,'boolean',[]}]]}]]]]}]]]]]]}|[{'type',280,'bounded_fun',[{'type',280,'fun',[{'type',280,'product',[{'var',280,'This'}|[{'var',280,'Start'}|[{'var',280,'Pt'}|[{'var',280,'Direction'}]]]]}|[{'type',280,'integer',[]}]]}|[[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'This'}|[{'type',281,'wxListCtrl',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Start'}|[{'type',281,'integer',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Pt'}|[{'type',281,'tuple',[{'ann_type',281,[{'var',281,'X'}|[{'type',281,'integer',[]}]]}|[{'ann_type',281,[{'var',281,'Y'}|[{'type',281,'integer',[]}]]}]]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Direction'}|[{'type',281,'integer',[]}]]]]}]]]]]]}]]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'getColumn',3},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'var',298,'This'}|[{'var',298,'Col'}|[{'var',298,'Item'}]]]}|[{'type',298,'boolean',[]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'This'}|[{'type',299,'wxListCtrl',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Col'}|[{'type',299,'integer',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Item'}|[{'remote_type',299,[{'atom',299,'wxListItem'}|[{'atom',299,'wxListItem'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'getColumnCount',1},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'This'}]}|[{'type',308,'integer',[]}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'This'}|[{'type',309,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'getColumnWidth',2},[{'type',316,'bounded_fun',[{'type',316,'fun',[{'type',316,'product',[{'var',316,'This'}|[{'var',316,'Col'}]]}|[{'type',316,'integer',[]}]]}|[[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'This'}|[{'type',317,'wxListCtrl',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Col'}|[{'type',317,'integer',[]}]]]]}]]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'getCountPerPage',1},[{'type',325,'bounded_fun',[{'type',325,'fun',[{'type',325,'product',[{'var',325,'This'}]}|[{'type',325,'integer',[]}]]}|[[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'This'}|[{'type',326,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 333
		'spec' =
		    %% Line 333
		    [{{'getEditControl',1},[{'type',333,'bounded_fun',[{'type',333,'fun',[{'type',333,'product',[{'var',333,'This'}]}|[{'remote_type',333,[{'atom',333,'wxTextCtrl'}|[{'atom',333,'wxTextCtrl'}|[[]]]]}]]}|[[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'This'}|[{'type',334,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 341
		'spec' =
		    %% Line 341
		    [{{'getImageList',2},[{'type',341,'bounded_fun',[{'type',341,'fun',[{'type',341,'product',[{'var',341,'This'}|[{'var',341,'Which'}]]}|[{'remote_type',341,[{'atom',341,'wxImageList'}|[{'atom',341,'wxImageList'}|[[]]]]}]]}|[[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'This'}|[{'type',342,'wxListCtrl',[]}]]]]}|[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'Which'}|[{'type',342,'integer',[]}]]]]}]]]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'getItem',2},[{'type',350,'bounded_fun',[{'type',350,'fun',[{'type',350,'product',[{'var',350,'This'}|[{'var',350,'Info'}]]}|[{'type',350,'boolean',[]}]]}|[[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'This'}|[{'type',351,'wxListCtrl',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Info'}|[{'remote_type',351,[{'atom',351,'wxListItem'}|[{'atom',351,'wxListItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 359
		'spec' =
		    %% Line 359
		    [{{'getItemBackgroundColour',2},[{'type',359,'bounded_fun',[{'type',359,'fun',[{'type',359,'product',[{'var',359,'This'}|[{'var',359,'Item'}]]}|[{'remote_type',359,[{'atom',359,'wx'}|[{'atom',359,'wx_colour4'}|[[]]]]}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'This'}|[{'type',360,'wxListCtrl',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Item'}|[{'type',360,'integer',[]}]]]]}]]]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'getItemCount',1},[{'type',368,'bounded_fun',[{'type',368,'fun',[{'type',368,'product',[{'var',368,'This'}]}|[{'type',368,'integer',[]}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'This'}|[{'type',369,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'getItemData',2},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'This'}|[{'var',376,'Item'}]]}|[{'type',376,'integer',[]}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'This'}|[{'type',377,'wxListCtrl',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Item'}|[{'type',377,'integer',[]}]]]]}]]]]}]}],
		%% Line 385
		'spec' =
		    %% Line 385
		    [{{'getItemFont',2},[{'type',385,'bounded_fun',[{'type',385,'fun',[{'type',385,'product',[{'var',385,'This'}|[{'var',385,'Item'}]]}|[{'remote_type',385,[{'atom',385,'wxFont'}|[{'atom',385,'wxFont'}|[[]]]]}]]}|[[{'type',386,'constraint',[{'atom',386,'is_subtype'}|[[{'var',386,'This'}|[{'type',386,'wxListCtrl',[]}]]]]}|[{'type',386,'constraint',[{'atom',386,'is_subtype'}|[[{'var',386,'Item'}|[{'type',386,'integer',[]}]]]]}]]]]}]}],
		%% Line 394
		'spec' =
		    %% Line 394
		    [{{'getItemPosition',2},[{'type',394,'bounded_fun',[{'type',394,'fun',[{'type',394,'product',[{'var',394,'This'}|[{'var',394,'Item'}]]}|[{'var',394,'Result'}]]}|[[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Result'}|[{'type',395,'tuple',[{'ann_type',395,[{'var',395,'Res'}|[{'type',395,'boolean',[]}]]}|[{'ann_type',395,[{'var',395,'Pos'}|[{'type',395,'tuple',[{'ann_type',395,[{'var',395,'X'}|[{'type',395,'integer',[]}]]}|[{'ann_type',395,[{'var',395,'Y'}|[{'type',395,'integer',[]}]]}]]}]]}]]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'This'}|[{'type',396,'wxListCtrl',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Item'}|[{'type',396,'integer',[]}]]]]}]]]]]}]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'getItemRect',2},[{'type',404,'bounded_fun',[{'type',404,'fun',[{'type',404,'product',[{'var',404,'This'}|[{'var',404,'Item'}]]}|[{'var',404,'Result'}]]}|[[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Result'}|[{'type',405,'tuple',[{'ann_type',405,[{'var',405,'Res'}|[{'type',405,'boolean',[]}]]}|[{'ann_type',405,[{'var',405,'Rect'}|[{'type',405,'tuple',[{'ann_type',405,[{'var',405,'X'}|[{'type',405,'integer',[]}]]}|[{'ann_type',405,[{'var',405,'Y'}|[{'type',405,'integer',[]}]]}|[{'ann_type',405,[{'var',405,'W'}|[{'type',405,'integer',[]}]]}|[{'ann_type',405,[{'var',405,'H'}|[{'type',405,'integer',[]}]]}]]]]}]]}]]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'This'}|[{'type',406,'wxListCtrl',[]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Item'}|[{'type',406,'integer',[]}]]]]}]]]]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'getItemRect',3},[{'type',413,'bounded_fun',[{'type',413,'fun',[{'type',413,'product',[{'var',413,'This'}|[{'var',413,'Item'}|[{'type',413,'list',[{'var',413,'Option'}]}]]]}|[{'var',413,'Result'}]]}|[[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Result'}|[{'type',414,'tuple',[{'ann_type',414,[{'var',414,'Res'}|[{'type',414,'boolean',[]}]]}|[{'ann_type',414,[{'var',414,'Rect'}|[{'type',414,'tuple',[{'ann_type',414,[{'var',414,'X'}|[{'type',414,'integer',[]}]]}|[{'ann_type',414,[{'var',414,'Y'}|[{'type',414,'integer',[]}]]}|[{'ann_type',414,[{'var',414,'W'}|[{'type',414,'integer',[]}]]}|[{'ann_type',414,[{'var',414,'H'}|[{'type',414,'integer',[]}]]}]]]]}]]}]]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'This'}|[{'type',415,'wxListCtrl',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Item'}|[{'type',415,'integer',[]}]]]]}|[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'Option'}|[{'type',416,'tuple',[{'atom',416,'code'}|[{'type',416,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'getItemSpacing',1},[{'type',427,'bounded_fun',[{'type',427,'fun',[{'type',427,'product',[{'var',427,'This'}]}|[{'type',427,'tuple',[{'ann_type',427,[{'var',427,'W'}|[{'type',427,'integer',[]}]]}|[{'ann_type',427,[{'var',427,'H'}|[{'type',427,'integer',[]}]]}]]}]]}|[[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'This'}|[{'type',428,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'getItemState',3},[{'type',435,'bounded_fun',[{'type',435,'fun',[{'type',435,'product',[{'var',435,'This'}|[{'var',435,'Item'}|[{'var',435,'StateMask'}]]]}|[{'type',435,'integer',[]}]]}|[[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'This'}|[{'type',436,'wxListCtrl',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Item'}|[{'type',436,'integer',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'StateMask'}|[{'type',436,'integer',[]}]]]]}]]]]]}]}],
		%% Line 444
		'spec' =
		    %% Line 444
		    [{{'getItemText',2},[{'type',444,'bounded_fun',[{'type',444,'fun',[{'type',444,'product',[{'var',444,'This'}|[{'var',444,'Item'}]]}|[{'remote_type',444,[{'atom',444,'unicode'}|[{'atom',444,'charlist'}|[[]]]]}]]}|[[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'This'}|[{'type',445,'wxListCtrl',[]}]]]]}|[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'Item'}|[{'type',445,'integer',[]}]]]]}]]]]}]}],
		%% Line 453
		'spec' =
		    %% Line 453
		    [{{'getItemTextColour',2},[{'type',453,'bounded_fun',[{'type',453,'fun',[{'type',453,'product',[{'var',453,'This'}|[{'var',453,'Item'}]]}|[{'remote_type',453,[{'atom',453,'wx'}|[{'atom',453,'wx_colour4'}|[[]]]]}]]}|[[{'type',454,'constraint',[{'atom',454,'is_subtype'}|[[{'var',454,'This'}|[{'type',454,'wxListCtrl',[]}]]]]}|[{'type',454,'constraint',[{'atom',454,'is_subtype'}|[[{'var',454,'Item'}|[{'type',454,'integer',[]}]]]]}]]]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'getNextItem',2},[{'type',462,'bounded_fun',[{'type',462,'fun',[{'type',462,'product',[{'var',462,'This'}|[{'var',462,'Item'}]]}|[{'type',462,'integer',[]}]]}|[[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'This'}|[{'type',463,'wxListCtrl',[]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'Item'}|[{'type',463,'integer',[]}]]]]}]]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'getNextItem',3},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'This'}|[{'var',470,'Item'}|[{'type',470,'list',[{'var',470,'Option'}]}]]]}|[{'type',470,'integer',[]}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'This'}|[{'type',471,'wxListCtrl',[]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Item'}|[{'type',471,'integer',[]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Option'}|[{'type',472,'union',[{'type',472,'tuple',[{'atom',472,'geometry'}|[{'type',472,'integer',[]}]]}|[{'type',473,'tuple',[{'atom',473,'state'}|[{'type',473,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 485
		'spec' =
		    %% Line 485
		    [{{'getSelectedItemCount',1},[{'type',485,'bounded_fun',[{'type',485,'fun',[{'type',485,'product',[{'var',485,'This'}]}|[{'type',485,'integer',[]}]]}|[[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'This'}|[{'type',486,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 493
		'spec' =
		    %% Line 493
		    [{{'getTextColour',1},[{'type',493,'bounded_fun',[{'type',493,'fun',[{'type',493,'product',[{'var',493,'This'}]}|[{'remote_type',493,[{'atom',493,'wx'}|[{'atom',493,'wx_colour4'}|[[]]]]}]]}|[[{'type',494,'constraint',[{'atom',494,'is_subtype'}|[[{'var',494,'This'}|[{'type',494,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 501
		'spec' =
		    %% Line 501
		    [{{'getTopItem',1},[{'type',501,'bounded_fun',[{'type',501,'fun',[{'type',501,'product',[{'var',501,'This'}]}|[{'type',501,'integer',[]}]]}|[[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'This'}|[{'type',502,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 509
		'spec' =
		    %% Line 509
		    [{{'getViewRect',1},[{'type',509,'bounded_fun',[{'type',509,'fun',[{'type',509,'product',[{'var',509,'This'}]}|[{'type',509,'tuple',[{'ann_type',509,[{'var',509,'X'}|[{'type',509,'integer',[]}]]}|[{'ann_type',509,[{'var',509,'Y'}|[{'type',509,'integer',[]}]]}|[{'ann_type',509,[{'var',509,'W'}|[{'type',509,'integer',[]}]]}|[{'ann_type',509,[{'var',509,'H'}|[{'type',509,'integer',[]}]]}]]]]}]]}|[[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'This'}|[{'type',510,'wxListCtrl',[]}]]]]}]]]}]}],
		%% Line 517
		'spec' =
		    %% Line 517
		    [{{'hitTest',3},[{'type',517,'bounded_fun',[{'type',517,'fun',[{'type',517,'product',[{'var',517,'This'}|[{'var',517,'Point'}|[{'var',517,'Flags'}]]]}|[{'type',517,'integer',[]}]]}|[[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'This'}|[{'type',518,'wxListCtrl',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Point'}|[{'type',518,'tuple',[{'ann_type',518,[{'var',518,'X'}|[{'type',518,'integer',[]}]]}|[{'ann_type',518,[{'var',518,'Y'}|[{'type',518,'integer',[]}]]}]]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Flags'}|[{'type',518,'integer',[]}]]]]}]]]]]}]}],
		%% Line 530
		'spec' =
		    %% Line 530
		    [{{'insertColumn',3},[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[{'var',530,'This'}|[{'var',530,'Col'}|[{'var',530,'Heading'}]]]}|[{'type',530,'integer',[]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'This'}|[{'type',531,'wxListCtrl',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Col'}|[{'type',531,'integer',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Heading'}|[{'remote_type',531,[{'atom',531,'unicode'}|[{'atom',531,'chardata'}|[[]]]]}]]]]}]]]]]}|[{'type',532,'bounded_fun',[{'type',532,'fun',[{'type',532,'product',[{'var',532,'This'}|[{'var',532,'Col'}|[{'var',532,'Info'}]]]}|[{'type',532,'integer',[]}]]}|[[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'This'}|[{'type',533,'wxListCtrl',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Col'}|[{'type',533,'integer',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Info'}|[{'remote_type',533,[{'atom',533,'wxListItem'}|[{'atom',533,'wxListItem'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 546
		'spec' =
		    %% Line 546
		    [{{'insertColumn',4},[{'type',546,'bounded_fun',[{'type',546,'fun',[{'type',546,'product',[{'var',546,'This'}|[{'var',546,'Col'}|[{'var',546,'Heading'}|[{'type',546,'list',[{'var',546,'Option'}]}]]]]}|[{'type',546,'integer',[]}]]}|[[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'This'}|[{'type',547,'wxListCtrl',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Col'}|[{'type',547,'integer',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Heading'}|[{'remote_type',547,[{'atom',547,'unicode'}|[{'atom',547,'chardata'}|[[]]]]}]]]]}|[{'type',548,'constraint',[{'atom',548,'is_subtype'}|[[{'var',548,'Option'}|[{'type',548,'union',[{'type',548,'tuple',[{'atom',548,'format'}|[{'type',548,'integer',[]}]]}|[{'type',549,'tuple',[{'atom',549,'width'}|[{'type',549,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'insertItem',2},[{'type',562,'bounded_fun',[{'type',562,'fun',[{'type',562,'product',[{'var',562,'This'}|[{'var',562,'Info'}]]}|[{'type',562,'integer',[]}]]}|[[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'This'}|[{'type',563,'wxListCtrl',[]}]]]]}|[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'Info'}|[{'remote_type',563,[{'atom',563,'wxListItem'}|[{'atom',563,'wxListItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 575
		'spec' =
		    %% Line 575
		    [{{'insertItem',3},[{'type',575,'bounded_fun',[{'type',575,'fun',[{'type',575,'product',[{'var',575,'This'}|[{'var',575,'Index'}|[{'var',575,'ImageIndex'}]]]}|[{'type',575,'integer',[]}]]}|[[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'This'}|[{'type',576,'wxListCtrl',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Index'}|[{'type',576,'integer',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'ImageIndex'}|[{'type',576,'integer',[]}]]]]}]]]]]}|[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'This'}|[{'var',577,'Index'}|[{'var',577,'Label'}]]]}|[{'type',577,'integer',[]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'This'}|[{'type',578,'wxListCtrl',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Index'}|[{'type',578,'integer',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Label'}|[{'remote_type',578,[{'atom',578,'unicode'}|[{'atom',578,'chardata'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 592
		'spec' =
		    %% Line 592
		    [{{'insertItem',4},[{'type',592,'bounded_fun',[{'type',592,'fun',[{'type',592,'product',[{'var',592,'This'}|[{'var',592,'Index'}|[{'var',592,'Label'}|[{'var',592,'ImageIndex'}]]]]}|[{'type',592,'integer',[]}]]}|[[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'This'}|[{'type',593,'wxListCtrl',[]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Index'}|[{'type',593,'integer',[]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'Label'}|[{'remote_type',593,[{'atom',593,'unicode'}|[{'atom',593,'chardata'}|[[]]]]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'ImageIndex'}|[{'type',593,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 602
		'spec' =
		    %% Line 602
		    [{{'refreshItem',2},[{'type',602,'bounded_fun',[{'type',602,'fun',[{'type',602,'product',[{'var',602,'This'}|[{'var',602,'Item'}]]}|[{'atom',602,'ok'}]]}|[[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'This'}|[{'type',603,'wxListCtrl',[]}]]]]}|[{'type',603,'constraint',[{'atom',603,'is_subtype'}|[[{'var',603,'Item'}|[{'type',603,'integer',[]}]]]]}]]]]}]}],
		%% Line 611
		'spec' =
		    %% Line 611
		    [{{'refreshItems',3},[{'type',611,'bounded_fun',[{'type',611,'fun',[{'type',611,'product',[{'var',611,'This'}|[{'var',611,'ItemFrom'}|[{'var',611,'ItemTo'}]]]}|[{'atom',611,'ok'}]]}|[[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'This'}|[{'type',612,'wxListCtrl',[]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'ItemFrom'}|[{'type',612,'integer',[]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'ItemTo'}|[{'type',612,'integer',[]}]]]]}]]]]]}]}],
		%% Line 620
		'spec' =
		    %% Line 620
		    [{{'scrollList',3},[{'type',620,'bounded_fun',[{'type',620,'fun',[{'type',620,'product',[{'var',620,'This'}|[{'var',620,'Dx'}|[{'var',620,'Dy'}]]]}|[{'type',620,'boolean',[]}]]}|[[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'This'}|[{'type',621,'wxListCtrl',[]}]]]]}|[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'Dx'}|[{'type',621,'integer',[]}]]]]}|[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'Dy'}|[{'type',621,'integer',[]}]]]]}]]]]]}]}],
		%% Line 629
		'spec' =
		    %% Line 629
		    [{{'setBackgroundColour',2},[{'type',629,'bounded_fun',[{'type',629,'fun',[{'type',629,'product',[{'var',629,'This'}|[{'var',629,'Colour'}]]}|[{'type',629,'boolean',[]}]]}|[[{'type',630,'constraint',[{'atom',630,'is_subtype'}|[[{'var',630,'This'}|[{'type',630,'wxListCtrl',[]}]]]]}|[{'type',630,'constraint',[{'atom',630,'is_subtype'}|[[{'var',630,'Colour'}|[{'remote_type',630,[{'atom',630,'wx'}|[{'atom',630,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'setColumn',3},[{'type',638,'bounded_fun',[{'type',638,'fun',[{'type',638,'product',[{'var',638,'This'}|[{'var',638,'Col'}|[{'var',638,'Item'}]]]}|[{'type',638,'boolean',[]}]]}|[[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'This'}|[{'type',639,'wxListCtrl',[]}]]]]}|[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'Col'}|[{'type',639,'integer',[]}]]]]}|[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'Item'}|[{'remote_type',639,[{'atom',639,'wxListItem'}|[{'atom',639,'wxListItem'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 648
		'spec' =
		    %% Line 648
		    [{{'setColumnWidth',3},[{'type',648,'bounded_fun',[{'type',648,'fun',[{'type',648,'product',[{'var',648,'This'}|[{'var',648,'Col'}|[{'var',648,'Width'}]]]}|[{'type',648,'boolean',[]}]]}|[[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'This'}|[{'type',649,'wxListCtrl',[]}]]]]}|[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'Col'}|[{'type',649,'integer',[]}]]]]}|[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'Width'}|[{'type',649,'integer',[]}]]]]}]]]]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'setImageList',3},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'This'}|[{'var',657,'ImageList'}|[{'var',657,'Which'}]]]}|[{'atom',657,'ok'}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'This'}|[{'type',658,'wxListCtrl',[]}]]]]}|[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'ImageList'}|[{'remote_type',658,[{'atom',658,'wxImageList'}|[{'atom',658,'wxImageList'}|[[]]]]}]]]]}|[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'Which'}|[{'type',658,'integer',[]}]]]]}]]]]]}]}],
		%% Line 667
		'spec' =
		    %% Line 667
		    [{{'setItem',2},[{'type',667,'bounded_fun',[{'type',667,'fun',[{'type',667,'product',[{'var',667,'This'}|[{'var',667,'Info'}]]}|[{'type',667,'boolean',[]}]]}|[[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'This'}|[{'type',668,'wxListCtrl',[]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'Info'}|[{'remote_type',668,[{'atom',668,'wxListItem'}|[{'atom',668,'wxListItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 676
		'spec' =
		    %% Line 676
		    [{{'setItem',4},[{'type',676,'bounded_fun',[{'type',676,'fun',[{'type',676,'product',[{'var',676,'This'}|[{'var',676,'Index'}|[{'var',676,'Col'}|[{'var',676,'Label'}]]]]}|[{'type',676,'integer',[]}]]}|[[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'This'}|[{'type',677,'wxListCtrl',[]}]]]]}|[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'Index'}|[{'type',677,'integer',[]}]]]]}|[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'Col'}|[{'type',677,'integer',[]}]]]]}|[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'Label'}|[{'remote_type',677,[{'atom',677,'unicode'}|[{'atom',677,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 684
		'spec' =
		    %% Line 684
		    [{{'setItem',5},[{'type',684,'bounded_fun',[{'type',684,'fun',[{'type',684,'product',[{'var',684,'This'}|[{'var',684,'Index'}|[{'var',684,'Col'}|[{'var',684,'Label'}|[{'type',684,'list',[{'var',684,'Option'}]}]]]]]}|[{'type',684,'integer',[]}]]}|[[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'This'}|[{'type',685,'wxListCtrl',[]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'Index'}|[{'type',685,'integer',[]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'Col'}|[{'type',685,'integer',[]}]]]]}|[{'type',685,'constraint',[{'atom',685,'is_subtype'}|[[{'var',685,'Label'}|[{'remote_type',685,[{'atom',685,'unicode'}|[{'atom',685,'chardata'}|[[]]]]}]]]]}|[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'Option'}|[{'type',686,'tuple',[{'atom',686,'imageId'}|[{'type',686,'integer',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 698
		'spec' =
		    %% Line 698
		    [{{'setItemBackgroundColour',3},[{'type',698,'bounded_fun',[{'type',698,'fun',[{'type',698,'product',[{'var',698,'This'}|[{'var',698,'Item'}|[{'var',698,'Col'}]]]}|[{'atom',698,'ok'}]]}|[[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'This'}|[{'type',699,'wxListCtrl',[]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Item'}|[{'type',699,'integer',[]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Col'}|[{'remote_type',699,[{'atom',699,'wx'}|[{'atom',699,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 707
		'spec' =
		    %% Line 707
		    [{{'setItemCount',2},[{'type',707,'bounded_fun',[{'type',707,'fun',[{'type',707,'product',[{'var',707,'This'}|[{'var',707,'Count'}]]}|[{'atom',707,'ok'}]]}|[[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'This'}|[{'type',708,'wxListCtrl',[]}]]]]}|[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'Count'}|[{'type',708,'integer',[]}]]]]}]]]]}]}],
		%% Line 716
		'spec' =
		    %% Line 716
		    [{{'setItemData',3},[{'type',716,'bounded_fun',[{'type',716,'fun',[{'type',716,'product',[{'var',716,'This'}|[{'var',716,'Item'}|[{'var',716,'Data'}]]]}|[{'type',716,'boolean',[]}]]}|[[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'This'}|[{'type',717,'wxListCtrl',[]}]]]]}|[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Item'}|[{'type',717,'integer',[]}]]]]}|[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Data'}|[{'type',717,'integer',[]}]]]]}]]]]]}]}],
		%% Line 725
		'spec' =
		    %% Line 725
		    [{{'setItemFont',3},[{'type',725,'bounded_fun',[{'type',725,'fun',[{'type',725,'product',[{'var',725,'This'}|[{'var',725,'Item'}|[{'var',725,'F'}]]]}|[{'atom',725,'ok'}]]}|[[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'This'}|[{'type',726,'wxListCtrl',[]}]]]]}|[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'Item'}|[{'type',726,'integer',[]}]]]]}|[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'F'}|[{'remote_type',726,[{'atom',726,'wxFont'}|[{'atom',726,'wxFont'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 735
		'spec' =
		    %% Line 735
		    [{{'setItemImage',3},[{'type',735,'bounded_fun',[{'type',735,'fun',[{'type',735,'product',[{'var',735,'This'}|[{'var',735,'Item'}|[{'var',735,'Image'}]]]}|[{'type',735,'boolean',[]}]]}|[[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'This'}|[{'type',736,'wxListCtrl',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Item'}|[{'type',736,'integer',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Image'}|[{'type',736,'integer',[]}]]]]}]]]]]}]}],
		%% Line 743
		'spec' =
		    %% Line 743
		    [{{'setItemImage',4},[{'type',743,'bounded_fun',[{'type',743,'fun',[{'type',743,'product',[{'var',743,'This'}|[{'var',743,'Item'}|[{'var',743,'Image'}|[{'type',743,'list',[{'var',743,'Option'}]}]]]]}|[{'type',743,'boolean',[]}]]}|[[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'This'}|[{'type',744,'wxListCtrl',[]}]]]]}|[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'Item'}|[{'type',744,'integer',[]}]]]]}|[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'Image'}|[{'type',744,'integer',[]}]]]]}|[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'Option'}|[{'type',745,'tuple',[{'atom',745,'selImage'}|[{'type',745,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 756
		'spec' =
		    %% Line 756
		    [{{'setItemColumnImage',4},[{'type',756,'bounded_fun',[{'type',756,'fun',[{'type',756,'product',[{'var',756,'This'}|[{'var',756,'Item'}|[{'var',756,'Column'}|[{'var',756,'Image'}]]]]}|[{'type',756,'boolean',[]}]]}|[[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'This'}|[{'type',757,'wxListCtrl',[]}]]]]}|[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'Item'}|[{'type',757,'integer',[]}]]]]}|[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'Column'}|[{'type',757,'integer',[]}]]]]}|[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'Image'}|[{'type',757,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 765
		'spec' =
		    %% Line 765
		    [{{'setItemPosition',3},[{'type',765,'bounded_fun',[{'type',765,'fun',[{'type',765,'product',[{'var',765,'This'}|[{'var',765,'Item'}|[{'var',765,'Pos'}]]]}|[{'type',765,'boolean',[]}]]}|[[{'type',766,'constraint',[{'atom',766,'is_subtype'}|[[{'var',766,'This'}|[{'type',766,'wxListCtrl',[]}]]]]}|[{'type',766,'constraint',[{'atom',766,'is_subtype'}|[[{'var',766,'Item'}|[{'type',766,'integer',[]}]]]]}|[{'type',766,'constraint',[{'atom',766,'is_subtype'}|[[{'var',766,'Pos'}|[{'type',766,'tuple',[{'ann_type',766,[{'var',766,'X'}|[{'type',766,'integer',[]}]]}|[{'ann_type',766,[{'var',766,'Y'}|[{'type',766,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 774
		'spec' =
		    %% Line 774
		    [{{'setItemState',4},[{'type',774,'bounded_fun',[{'type',774,'fun',[{'type',774,'product',[{'var',774,'This'}|[{'var',774,'Item'}|[{'var',774,'State'}|[{'var',774,'StateMask'}]]]]}|[{'type',774,'boolean',[]}]]}|[[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'This'}|[{'type',775,'wxListCtrl',[]}]]]]}|[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'Item'}|[{'type',775,'integer',[]}]]]]}|[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'State'}|[{'type',775,'integer',[]}]]]]}|[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'StateMask'}|[{'type',775,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 783
		'spec' =
		    %% Line 783
		    [{{'setItemText',3},[{'type',783,'bounded_fun',[{'type',783,'fun',[{'type',783,'product',[{'var',783,'This'}|[{'var',783,'Item'}|[{'var',783,'Str'}]]]}|[{'atom',783,'ok'}]]}|[[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'This'}|[{'type',784,'wxListCtrl',[]}]]]]}|[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'Item'}|[{'type',784,'integer',[]}]]]]}|[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'Str'}|[{'remote_type',784,[{'atom',784,'unicode'}|[{'atom',784,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 793
		'spec' =
		    %% Line 793
		    [{{'setItemTextColour',3},[{'type',793,'bounded_fun',[{'type',793,'fun',[{'type',793,'product',[{'var',793,'This'}|[{'var',793,'Item'}|[{'var',793,'Col'}]]]}|[{'atom',793,'ok'}]]}|[[{'type',794,'constraint',[{'atom',794,'is_subtype'}|[[{'var',794,'This'}|[{'type',794,'wxListCtrl',[]}]]]]}|[{'type',794,'constraint',[{'atom',794,'is_subtype'}|[[{'var',794,'Item'}|[{'type',794,'integer',[]}]]]]}|[{'type',794,'constraint',[{'atom',794,'is_subtype'}|[[{'var',794,'Col'}|[{'remote_type',794,[{'atom',794,'wx'}|[{'atom',794,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 802
		'spec' =
		    %% Line 802
		    [{{'setSingleStyle',2},[{'type',802,'bounded_fun',[{'type',802,'fun',[{'type',802,'product',[{'var',802,'This'}|[{'var',802,'Style'}]]}|[{'atom',802,'ok'}]]}|[[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'This'}|[{'type',803,'wxListCtrl',[]}]]]]}|[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'Style'}|[{'type',803,'integer',[]}]]]]}]]]]}]}],
		%% Line 810
		'spec' =
		    %% Line 810
		    [{{'setSingleStyle',3},[{'type',810,'bounded_fun',[{'type',810,'fun',[{'type',810,'product',[{'var',810,'This'}|[{'var',810,'Style'}|[{'type',810,'list',[{'var',810,'Option'}]}]]]}|[{'atom',810,'ok'}]]}|[[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'This'}|[{'type',811,'wxListCtrl',[]}]]]]}|[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'Style'}|[{'type',811,'integer',[]}]]]]}|[{'type',812,'constraint',[{'atom',812,'is_subtype'}|[[{'var',812,'Option'}|[{'type',812,'tuple',[{'atom',812,'add'}|[{'type',812,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 823
		'spec' =
		    %% Line 823
		    [{{'setTextColour',2},[{'type',823,'bounded_fun',[{'type',823,'fun',[{'type',823,'product',[{'var',823,'This'}|[{'var',823,'Col'}]]}|[{'atom',823,'ok'}]]}|[[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'This'}|[{'type',824,'wxListCtrl',[]}]]]]}|[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'Col'}|[{'remote_type',824,[{'atom',824,'wx'}|[{'atom',824,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 832
		'spec' =
		    %% Line 832
		    [{{'setWindowStyleFlag',2},[{'type',832,'bounded_fun',[{'type',832,'fun',[{'type',832,'product',[{'var',832,'This'}|[{'var',832,'Style'}]]}|[{'atom',832,'ok'}]]}|[[{'type',833,'constraint',[{'atom',833,'is_subtype'}|[[{'var',833,'This'}|[{'type',833,'wxListCtrl',[]}]]]]}|[{'type',833,'constraint',[{'atom',833,'is_subtype'}|[[{'var',833,'Style'}|[{'type',833,'integer',[]}]]]]}]]]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'destroy',1},[{'type',859,'fun',[{'type',859,'product',[{'ann_type',859,[{'var',859,'This'}|[{'type',859,'wxListCtrl',[]}]]}]}|[{'atom',859,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 89
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 90
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 91
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxListCtrl'})
	end
'new'/0 =
    %% Line 97
    fun () ->
	%% Line 98
	call 'wxe_util':'construct'
	    (1657, #{}#)
'new'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <Parent = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 103
						       ( 'true'
							 -| ['compiler_generated'] ) ->
	      %% Line 104
	      apply 'new'/2
		  (Parent, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor39},Options>
	      when %% Line 122
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 123
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 124
		      ( fun (_cor30,_cor29) ->
			    case <_cor30,_cor29> of
			      <{'winid',Winid},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Winid>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 125
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor5|Acc]
			      %% Line 126
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor6|Acc]
			      %% Line 127
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 128
			      <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor40}},Acc> when 'true' ->
				  do  %% Line 129
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ValidatorT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ValidatorT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor10> =
					  %% Line 129
					  #{#<5>(32,1,'integer',['unsigned'|['native']]),
					    #<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  %% Line 129
					  [_cor10|Acc]
			      %% Line 130
			      <{'onGetItemText',F},Acc>
				  when call 'erlang':'is_function'
					(F) ->
				  let <Fun> =
				      %% Line 131
				      ( fun (_cor12) ->
					    case _cor12 of
					      <[This|[Item|[Col|[]]]]> when 'true' ->
						  let <_cor11> =
						      apply F
							  (This, Item, Col)
						  in  call 'unicode':'characters_to_binary'
							  ([_cor11|[0]])
					      ( <_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'-new/2-fun-0-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-new/2-fun-0-'}}] )
				  in  let <_cor15> =
					  %% Line 132
					  call 'wxe_util':'get_cbId'
					      (Fun)
				      in  let <_cor16> =
					      %% Line 132
					      #{#<6>(32,1,'integer',['unsigned'|['native']]),
						#<_cor15>(32,1,'integer',['unsigned'|['native']])}#
					  in  %% Line 132
					      [_cor16|Acc]
			      %% Line 133
			      <{'onGetItemAttr',F},Acc>
				  when call 'erlang':'is_function'
					(F) ->
				  let <Fun> =
				      %% Line 134
				      ( fun (_cor18) ->
					    case _cor18 of
					      <[This|[Item|[]]]> when 'true' ->
						  %% Line 135
						  case apply F
							   (This, Item) of
						    <{'wx_ref',ThisRef,'wxListItemAttr',_cor41}> when 'true' ->
							%% Line 136
							#{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
						    ( <_cor17> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor17})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor19})
						      -| [{'function_name',{'-new/2-fun-1-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-new/2-fun-1-'}}] )
				  in  let <_cor21> =
					  %% Line 138
					  call 'wxe_util':'get_cbId'
					      (Fun)
				      in  let <_cor22> =
					      %% Line 138
					      #{#<7>(32,1,'integer',['unsigned'|['native']]),
						#<_cor21>(32,1,'integer',['unsigned'|['native']])}#
					  in  %% Line 138
					      [_cor22|Acc]
			      %% Line 139
			      <{'onGetItemColumnImage',F},Acc>
				  when call 'erlang':'is_function'
					(F) ->
				  let <Fun> =
				      %% Line 140
				      ( fun (_cor24) ->
					    case _cor24 of
					      <[This|[Item|[Col|[]]]]> when 'true' ->
						  let <_cor23> =
						      apply F
							  (This, Item, Col)
						  in  #{#<_cor23>(32,1,'integer',['signed'|['native']])}#
					      ( <_cor25> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor25})
						      -| [{'function_name',{'-new/2-fun-2-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-new/2-fun-2-'}}] )
				  in  let <_cor27> =
					  %% Line 141
					  call 'wxe_util':'get_cbId'
					      (Fun)
				      in  let <_cor28> =
					      %% Line 141
					      #{#<8>(32,1,'integer',['unsigned'|['native']]),
						#<_cor27>(32,1,'integer',['unsigned'|['native']])}#
					  in  %% Line 141
					      [_cor28|Acc]
			      %% Line 142
			      <BadOpt,_cor42> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-3-'}}] )
		  in  let <_cor34> =
			  %% Line 143
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 143
			      call 'erlang':'list_to_binary'
				  (_cor34)
			  in  let <_cor36> =
				  %% Line 144
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 144
				  call 'wxe_util':'construct'
				      (1658, _cor36)
	  ( <_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'arrange'/1 =
    %% Line 150
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 151
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 152
	      apply 'arrange'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'arrange',1}}] )
	    -| ['compiler_generated'] )
	end
'arrange'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 159
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 161
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 162
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-arrange/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 163
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 163
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 165
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 164
				  call 'wxe_util':'call'
				      (1659, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'arrange',2}}] )
	    -| ['compiler_generated'] )
	end
'assignImageList'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},{'wx_ref',ImageListRef,ImageListT,_cor12},Which>
	      when %% Line 171
		call 'erlang':'is_integer'
		    (Which) ->
	      do  %% Line 172
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 173
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 175
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Which>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 174
			  call 'wxe_util':'cast'
			      (1660, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'assignImageList',3}}] )
	    -| ['compiler_generated'] )
	end
'clearAll'/1 =
    %% Line 180
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 181
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 183
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 182
		      call 'wxe_util':'cast'
			  (1661, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clearAll',1}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Parent = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 190
	      apply 'create'/3
		  (This, Parent, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor25},{'wx_ref',ParentRef,ParentT,_cor26},Options>
	      when %% Line 207
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 208
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 209
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 210
			  ( fun (_cor15,_cor14) ->
				case <_cor15,_cor14> of
				  <{'winid',Winid},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Winid>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 211
				  <{'pos',{PosX,PosY}},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<PosX>(32,1,'integer',['unsigned'|['native']]),
					    #<PosY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor8|Acc]
				  %% Line 212
				  <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				      let <_cor9> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor9|Acc]
				  %% Line 213
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor10> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor10|Acc]
				  %% Line 214
				  <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor27}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (ValidatorT,
							   'wx') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call ValidatorT:'parent_class'
							('wx')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor13> =
					      #{#<5>(32,1,'integer',['unsigned'|['native']]),
						#<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor13|Acc]
				  %% Line 215
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/3-fun-0-'}}] )
		      in  let <_cor19> =
			      %% Line 216
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 216
				  call 'erlang':'list_to_binary'
				      (_cor19)
			      in  let <_cor21> =
				      %% Line 218
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 217
				      call 'wxe_util':'call'
					  (1662, _cor21)
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'deleteAllItems'/1 =
    %% Line 223
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 224
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 226
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 225
		      call 'wxe_util':'call'
			  (1663, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'deleteAllItems',1}}] )
	    -| ['compiler_generated'] )
	end
'deleteColumn'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Col>
	      when %% Line 232
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 233
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 235
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 234
		      call 'wxe_util':'call'
			  (1664, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deleteColumn',2}}] )
	    -| ['compiler_generated'] )
	end
'deleteItem'/2 =
    %% Line 240
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 241
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 242
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 244
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 243
		      call 'wxe_util':'call'
			  (1665, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deleteItem',2}}] )
	    -| ['compiler_generated'] )
	end
'editLabel'/2 =
    %% Line 249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 250
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 251
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 253
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 252
		      call 'wxe_util':'call'
			  (1666, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'editLabel',2}}] )
	    -| ['compiler_generated'] )
	end
'ensureVisible'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 259
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 260
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 262
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 261
		      call 'wxe_util':'call'
			  (1667, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ensureVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'findItem'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Start,Str>
	      when let <_cor3> =
		    %% Line 269
		    call 'erlang':'is_integer'
			(Start)
		in  let <_cor4> =
			%% Line 269
			call 'erlang':'is_list'
			    (Str)
		    in  %% Line 269
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 270
	      apply 'findItem'/4
		  (This, Start, Str, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'findItem',3}}] )
	    -| ['compiler_generated'] )
	end
'findItem'/4 =
    %% Line 282
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor40},Start,Str,Options>
	      when %% Line 283
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Start)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Str)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 284
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 285
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  let <MOpts> =
			  %% Line 286
			  ( fun (_cor14,_cor13) ->
				case <_cor14,_cor13> of
				  <{'partial',Partial},Acc> when 'true' ->
				      let <_cor11> =
					  call 'wxe_util':'from_bool'
					      (Partial)
				      in  let <_cor12> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor11>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor12|Acc]
				  %% Line 287
				  <BadOpt,_cor41> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-findItem/4-fun-0-'}}] )
		      in  let <_cor18> =
			      %% Line 288
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 288
				  call 'erlang':'list_to_binary'
				      (_cor18)
			      in  let <_cor25> =
				      %% Line 290
				      call 'erlang':'byte_size'
					  (Str_UC)
				  in  let <_cor20> =
					  %% Line 290
					  call 'erlang':'byte_size'
					      (Str_UC)
				      in  let <_cor21> =
					      %% Line 290
					      call 'erlang':'+'
						  (4, _cor20)
					  in  let <_cor22> =
						  %% Line 290
						  call 'erlang':'band'
						      (_cor21, 7)
					      in  let <_cor23> =
						      %% Line 290
						      call 'erlang':'-'
							  (8, _cor22)
						  in  let <_cor24> =
							  %% Line 290
							  call 'erlang':'band'
							      (_cor23, 7)
						      in  let <_cor26> =
							      %% Line 290
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Start>(32,1,'integer',['unsigned'|['native']]),
								#<_cor25>(32,1,'integer',['unsigned'|['native']]),
								#<Str_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor24,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 289
							      call 'wxe_util':'call'
								  (1668, _cor26)
	  %% Line 291
	  <{'wx_ref',ThisRef,ThisT,_cor42},Start,{PtX,PtY},Direction>
	      when %% Line 292
		try
		    let <_cor27> =
			call 'erlang':'is_integer'
			    (Start)
		    in  let <_cor28> =
			    call 'erlang':'is_integer'
				(PtX)
			in  let <_cor29> =
				call 'erlang':'is_integer'
				    (PtY)
			    in  let <_cor30> =
				    call 'erlang':'is_integer'
					(Direction)
				in  let <_cor31> =
					call 'erlang':'and'
					    (_cor29, _cor30)
				    in  let <_cor32> =
					    call 'erlang':'and'
						(_cor28, _cor31)
					in  call 'erlang':'and'
						(_cor27, _cor32)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 293
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor35> =
		      %% Line 295
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Start>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']]),
			#<Direction>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 294
		      call 'wxe_util':'call'
			  (1669, _cor35)
	  ( <_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'findItem',4}}] )
	    -| ['compiler_generated'] )
	end
'getColumn'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,{'wx_ref',ItemRef,ItemT,_cor12}>
	      when %% Line 301
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 302
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 303
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 305
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 304
			  call 'wxe_util':'call'
			      (1670, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getColumn',3}}] )
	    -| ['compiler_generated'] )
	end
'getColumnCount'/1 =
    %% Line 310
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 311
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 313
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 312
		      call 'wxe_util':'call'
			  (1671, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColumnCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getColumnWidth'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Col>
	      when %% Line 319
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 320
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 322
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 321
		      call 'wxe_util':'call'
			  (1672, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getColumnWidth',2}}] )
	    -| ['compiler_generated'] )
	end
'getCountPerPage'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 328
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 330
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 329
		      call 'wxe_util':'call'
			  (1673, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCountPerPage',1}}] )
	    -| ['compiler_generated'] )
	end
'getEditControl'/1 =
    %% Line 335
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 336
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 338
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 337
		      call 'wxe_util':'call'
			  (1674, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'getImageList'/2 =
    %% Line 343
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Which>
	      when %% Line 344
		call 'erlang':'is_integer'
		    (Which) ->
	      do  %% Line 345
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 347
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Which>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 346
		      call 'wxe_util':'call'
			  (1675, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getImageList',2}}] )
	    -| ['compiler_generated'] )
	end
'getItem'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',InfoRef,InfoT,_cor10}> when 'true' ->
	      do  %% Line 353
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 354
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (InfoT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call InfoT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 356
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<InfoRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 355
			  call 'wxe_util':'call'
			      (1676, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'getItem',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemBackgroundColour'/2 =
    %% Line 361
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 362
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 363
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 365
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 364
		      call 'wxe_util':'call'
			  (1677, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemCount'/1 =
    %% Line 370
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 371
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 373
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 372
		      call 'wxe_util':'call'
			  (1678, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getItemCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getItemData'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 379
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 380
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 382
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 381
		      call 'wxe_util':'call'
			  (1679, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemData',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemFont'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 388
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 389
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 391
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 390
		      call 'wxe_util':'call'
			  (1680, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemFont',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemPosition'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 398
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 399
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 401
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 400
		      call 'wxe_util':'call'
			  (1681, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemRect'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 409
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 410
	      apply 'getItemRect'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getItemRect',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemRect'/3 =
    %% Line 417
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Item,Options>
	      when let <_cor3> =
		    %% Line 418
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 418
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 418
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 419
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 420
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'code',Code},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Code>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 421
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getItemRect/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 422
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 422
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 424
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Item>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 423
				  call 'wxe_util':'call'
				      (1682, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'getItemRect',3}}] )
	    -| ['compiler_generated'] )
	end
'getItemSpacing'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 430
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 432
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 431
		      call 'wxe_util':'call'
			  (1683, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getItemSpacing',1}}] )
	    -| ['compiler_generated'] )
	end
'getItemState'/3 =
    %% Line 437
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,StateMask>
	      when let <_cor3> =
		    %% Line 438
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 438
			call 'erlang':'is_integer'
			    (StateMask)
		    in  %% Line 438
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 439
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 441
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']]),
			#<StateMask>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 440
		      call 'wxe_util':'call'
			  (1684, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getItemState',3}}] )
	    -| ['compiler_generated'] )
	end
'getItemText'/2 =
    %% Line 446
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 447
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 448
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 450
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 449
		      call 'wxe_util':'call'
			  (1685, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemText',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemTextColour'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 456
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 457
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 459
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 458
		      call 'wxe_util':'call'
			  (1686, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'getNextItem'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 466
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 467
	      apply 'getNextItem'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getNextItem',2}}] )
	    -| ['compiler_generated'] )
	end
'getNextItem'/3 =
    %% Line 474
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 475
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 475
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 475
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 476
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 477
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'geometry',Geometry},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Geometry>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 478
			      <{'state',State},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<State>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 479
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getNextItem/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 480
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 480
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 482
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Item>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 481
				  call 'wxe_util':'call'
				      (1687, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'getNextItem',3}}] )
	    -| ['compiler_generated'] )
	end
'getSelectedItemCount'/1 =
    %% Line 487
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 488
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 490
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 489
		      call 'wxe_util':'call'
			  (1688, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectedItemCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextColour'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 496
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 498
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 497
		      call 'wxe_util':'call'
			  (1689, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getTopItem'/1 =
    %% Line 503
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 504
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 506
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 505
		      call 'wxe_util':'call'
			  (1690, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTopItem',1}}] )
	    -| ['compiler_generated'] )
	end
'getViewRect'/1 =
    %% Line 511
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 512
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 514
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 513
		      call 'wxe_util':'call'
			  (1691, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getViewRect',1}}] )
	    -| ['compiler_generated'] )
	end
'hitTest'/3 =
    %% Line 519
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{PointX,PointY},Flags>
	      when %% Line 520
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (PointX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PointY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Flags)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 521
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 523
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PointX>(32,1,'integer',['unsigned'|['native']]),
			#<PointY>(32,1,'integer',['unsigned'|['native']]),
			#<Flags>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 522
		      call 'wxe_util':'call'
			  (1692, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'hitTest',3}}] )
	    -| ['compiler_generated'] )
	end
'insertColumn'/3 =
    %% Line 535
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor14,_cor15,_cor16},Col,Heading>
	      when let <_cor3> =
		    %% Line 536
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 536
			call 'erlang':'is_list'
			    (Heading)
		    in  %% Line 536
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 537
	      apply 'insertColumn'/4
		  (This, Col, Heading, [])
	  %% Line 538
	  <{'wx_ref',ThisRef,ThisT,_cor17},Col,{'wx_ref',InfoRef,InfoT,_cor18}>
	      when %% Line 539
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 540
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 541
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (InfoT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call InfoT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 543
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<InfoRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 542
			  call 'wxe_util':'call'
			      (1693, _cor10)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'insertColumn',3}}] )
	    -| ['compiler_generated'] )
	end
'insertColumn'/4 =
    %% Line 550
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor31},Col,Heading,Options>
	      when %% Line 551
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Col)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Heading)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 552
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Heading_UC> =
		      %% Line 553
		      call 'unicode':'characters_to_binary'
			  ([Heading|[0]])
		  in  let <MOpts> =
			  %% Line 554
			  ( fun (_cor14,_cor13) ->
				case <_cor14,_cor13> of
				  <{'format',Format},Acc> when 'true' ->
				      let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Format>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
				  %% Line 555
				  <{'width',Width},Acc> when 'true' ->
				      let <_cor12> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<Width>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor12|Acc]
				  %% Line 556
				  <BadOpt,_cor32> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-insertColumn/4-fun-0-'}}] )
		      in  let <_cor18> =
			      %% Line 557
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 557
				  call 'erlang':'list_to_binary'
				      (_cor18)
			      in  let <_cor25> =
				      %% Line 559
				      call 'erlang':'byte_size'
					  (Heading_UC)
				  in  let <_cor20> =
					  %% Line 559
					  call 'erlang':'byte_size'
					      (Heading_UC)
				      in  let <_cor21> =
					      %% Line 559
					      call 'erlang':'+'
						  (4, _cor20)
					  in  let <_cor22> =
						  %% Line 559
						  call 'erlang':'band'
						      (_cor21, 7)
					      in  let <_cor23> =
						      %% Line 559
						      call 'erlang':'-'
							  (8, _cor22)
						  in  let <_cor24> =
							  %% Line 559
							  call 'erlang':'band'
							      (_cor23, 7)
						      in  let <_cor26> =
							      %% Line 559
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Col>(32,1,'integer',['unsigned'|['native']]),
								#<_cor25>(32,1,'integer',['unsigned'|['native']]),
								#<Heading_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor24,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 558
							      call 'wxe_util':'call'
								  (1694, _cor26)
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'insertColumn',4}}] )
	    -| ['compiler_generated'] )
	end
'insertItem'/2 =
    %% Line 564
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',InfoRef,InfoT,_cor10}> when 'true' ->
	      do  %% Line 565
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 566
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (InfoT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call InfoT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 568
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<InfoRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 567
			  call 'wxe_util':'call'
			      (1695, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'insertItem',2}}] )
	    -| ['compiler_generated'] )
	end
'insertItem'/3 =
    %% Line 579
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Index,ImageIndex>
	      when let <_cor3> =
		    %% Line 580
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			%% Line 580
			call 'erlang':'is_integer'
			    (ImageIndex)
		    in  %% Line 580
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 581
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 583
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<ImageIndex>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 582
		      call 'wxe_util':'call'
			  (1697, _cor7)
	  %% Line 584
	  <{'wx_ref',ThisRef,ThisT,_cor24},Index,Label>
	      when let <_cor8> =
		    %% Line 585
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor9> =
			%% Line 585
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 585
			call 'erlang':'and'
			    (_cor8, _cor9) ->
	      do  %% Line 586
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 587
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  let <_cor18> =
			  %% Line 589
			  call 'erlang':'byte_size'
			      (Label_UC)
		      in  let <_cor13> =
			      %% Line 589
			      call 'erlang':'byte_size'
				  (Label_UC)
			  in  let <_cor14> =
				  %% Line 589
				  call 'erlang':'+'
				      (4, _cor13)
			      in  let <_cor15> =
				      %% Line 589
				      call 'erlang':'band'
					  (_cor14, 7)
				  in  let <_cor16> =
					  %% Line 589
					  call 'erlang':'-'
					      (8, _cor15)
				      in  let <_cor17> =
					      %% Line 589
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor19> =
						  %% Line 589
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Index>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor18>(32,1,'integer',['unsigned'|['native']]),
						    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor17,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 588
						  call 'wxe_util':'call'
						      (1696, _cor19)
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'insertItem',3}}] )
	    -| ['compiler_generated'] )
	end
'insertItem'/4 =
    %% Line 594
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Index,Label,ImageIndex>
	      when %% Line 595
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Label)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (ImageIndex)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 596
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 597
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  let <_cor16> =
			  %% Line 599
			  call 'erlang':'byte_size'
			      (Label_UC)
		      in  let <_cor11> =
			      %% Line 599
			      call 'erlang':'byte_size'
				  (Label_UC)
			  in  let <_cor12> =
				  %% Line 599
				  call 'erlang':'+'
				      (4, _cor11)
			      in  let <_cor13> =
				      %% Line 599
				      call 'erlang':'band'
					  (_cor12, 7)
				  in  let <_cor14> =
					  %% Line 599
					  call 'erlang':'-'
					      (8, _cor13)
				      in  let <_cor15> =
					      %% Line 599
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor17> =
						  %% Line 599
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Index>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
						    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor15,8,'integer',['unsigned'|['big']]),
						    #<ImageIndex>(32,1,'integer',['unsigned'|['native']])}#
					      in  %% Line 598
						  call 'wxe_util':'call'
						      (1698, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'insertItem',4}}] )
	    -| ['compiler_generated'] )
	end
'refreshItem'/2 =
    %% Line 604
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 605
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 606
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 608
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 607
		      call 'wxe_util':'cast'
			  (1699, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'refreshItem',2}}] )
	    -| ['compiler_generated'] )
	end
'refreshItems'/3 =
    %% Line 613
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},ItemFrom,ItemTo>
	      when let <_cor3> =
		    %% Line 614
		    call 'erlang':'is_integer'
			(ItemFrom)
		in  let <_cor4> =
			%% Line 614
			call 'erlang':'is_integer'
			    (ItemTo)
		    in  %% Line 614
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 615
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 617
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<ItemFrom>(32,1,'integer',['unsigned'|['native']]),
			#<ItemTo>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 616
		      call 'wxe_util':'cast'
			  (1700, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'refreshItems',3}}] )
	    -| ['compiler_generated'] )
	end
'scrollList'/3 =
    %% Line 622
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Dx,Dy>
	      when let <_cor3> =
		    %% Line 623
		    call 'erlang':'is_integer'
			(Dx)
		in  let <_cor4> =
			%% Line 623
			call 'erlang':'is_integer'
			    (Dy)
		    in  %% Line 623
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 624
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 626
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Dx>(32,1,'integer',['unsigned'|['native']]),
			#<Dy>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 625
		      call 'wxe_util':'call'
			  (1701, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'scrollList',3}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundColour'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 632
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 632
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 632
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 633
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 635
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 635
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 634
			  call 'wxe_util':'call'
			      (1702, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setColumn'/3 =
    %% Line 640
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,{'wx_ref',ItemRef,ItemT,_cor12}>
	      when %% Line 641
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 642
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 643
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 645
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 644
			  call 'wxe_util':'call'
			      (1703, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColumn',3}}] )
	    -| ['compiler_generated'] )
	end
'setColumnWidth'/3 =
    %% Line 650
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,Width>
	      when let <_cor3> =
		    %% Line 651
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 651
			call 'erlang':'is_integer'
			    (Width)
		    in  %% Line 651
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 652
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 654
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 653
		      call 'wxe_util':'call'
			  (1704, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColumnWidth',3}}] )
	    -| ['compiler_generated'] )
	end
'setImageList'/3 =
    %% Line 659
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},{'wx_ref',ImageListRef,ImageListT,_cor12},Which>
	      when %% Line 660
		call 'erlang':'is_integer'
		    (Which) ->
	      do  %% Line 661
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 662
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 664
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Which>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 663
			  call 'wxe_util':'cast'
			      (1705, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setImageList',3}}] )
	    -| ['compiler_generated'] )
	end
'setItem'/2 =
    %% Line 669
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',InfoRef,InfoT,_cor10}> when 'true' ->
	      do  %% Line 670
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 671
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (InfoT,
				       'wxListItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call InfoT:'parent_class'
				    ('wxListItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 673
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<InfoRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 672
			  call 'wxe_util':'call'
			      (1706, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setItem',2}}] )
	    -| ['compiler_generated'] )
	end
'setItem'/4 =
    %% Line 679
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Index,Col,Label>
	      when %% Line 680
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Index)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Col)
			  in  let <_cor6> =
				  call 'erlang':'is_list'
				      (Label)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 681
	      apply 'setItem'/5
		  (This, Index, Col, Label, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'setItem',4}}] )
	    -| ['compiler_generated'] )
	end
'setItem'/5 =
    %% Line 687
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor34},Index,Col,Label,Options>
	      when %% Line 688
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Col)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Label)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 689
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 690
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  let <MOpts> =
			  %% Line 691
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'imageId',ImageId},Acc> when 'true' ->
				      let <_cor14> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ImageId>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor14|Acc]
				  %% Line 692
				  <BadOpt,_cor35> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setItem/5-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 693
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 693
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor27> =
				      %% Line 695
				      call 'erlang':'byte_size'
					  (Label_UC)
				  in  let <_cor22> =
					  %% Line 695
					  call 'erlang':'byte_size'
					      (Label_UC)
				      in  let <_cor23> =
					      %% Line 695
					      call 'erlang':'+'
						  (0, _cor22)
					  in  let <_cor24> =
						  %% Line 695
						  call 'erlang':'band'
						      (_cor23, 7)
					      in  let <_cor25> =
						      %% Line 695
						      call 'erlang':'-'
							  (8, _cor24)
						  in  let <_cor26> =
							  %% Line 695
							  call 'erlang':'band'
							      (_cor25, 7)
						      in  let <_cor28> =
							      %% Line 695
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Index>(32,1,'integer',['unsigned'|['native']]),
								#<Col>(32,1,'integer',['unsigned'|['native']]),
								#<_cor27>(32,1,'integer',['unsigned'|['native']]),
								#<Label_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor26,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 694
							      call 'wxe_util':'call'
								  (1707, _cor28)
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'setItem',5}}] )
	    -| ['compiler_generated'] )
	end
'setItemBackgroundColour'/3 =
    %% Line 700
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Item,Col>
	      when let <_cor6> =
		    %% Line 701
		    try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(Item)
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 701
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 701
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 702
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 704
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor12> =
			  %% Line 704
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Item>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 703
			  call 'wxe_util':'cast'
			      (1708, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setItemBackgroundColour',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemCount'/2 =
    %% Line 709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Count>
	      when %% Line 710
		call 'erlang':'is_integer'
		    (Count) ->
	      do  %% Line 711
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 713
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Count>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 712
		      call 'wxe_util':'cast'
			  (1709, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setItemCount',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemData'/3 =
    %% Line 718
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,Data>
	      when let <_cor3> =
		    %% Line 719
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 719
			call 'erlang':'is_integer'
			    (Data)
		    in  %% Line 719
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 720
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 722
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']]),
			#<Data>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 721
		      call 'wxe_util':'call'
			  (1710, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setItemData',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemFont'/3 =
    %% Line 727
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,{'wx_ref',FRef,FT,_cor12}>
	      when %% Line 728
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 729
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 730
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 732
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Item>(32,1,'integer',['unsigned'|['native']]),
			    #<FRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 731
			  call 'wxe_util':'cast'
			      (1711, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setItemFont',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemImage'/3 =
    %% Line 738
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Item,Image>
	      when let <_cor3> =
		    %% Line 739
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 739
			call 'erlang':'is_integer'
			    (Image)
		    in  %% Line 739
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 740
	      apply 'setItemImage'/4
		  (This, Item, Image, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'setItemImage',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemImage'/4 =
    %% Line 746
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Item,Image,Options>
	      when %% Line 747
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Item)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Image)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 748
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 749
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'selImage',SelImage},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<SelImage>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 750
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setItemImage/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 751
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 751
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 753
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Item>(32,1,'integer',['unsigned'|['native']]),
				    #<Image>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 752
				  call 'wxe_util':'call'
				      (1712, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'setItemImage',4}}] )
	    -| ['compiler_generated'] )
	end
'setItemColumnImage'/4 =
    %% Line 758
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Item,Column,Image>
	      when %% Line 759
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Item)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Column)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Image)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 760
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 762
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']]),
			#<Column>(32,1,'integer',['unsigned'|['native']]),
			#<Image>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 761
		      call 'wxe_util':'call'
			  (1713, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setItemColumnImage',4}}] )
	    -| ['compiler_generated'] )
	end
'setItemPosition'/3 =
    %% Line 767
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},Item,{PosX,PosY}>
	      when %% Line 768
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Item)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PosX)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (PosY)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 769
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 771
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']]),
			#<PosX>(32,1,'integer',['unsigned'|['native']]),
			#<PosY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 770
		      call 'wxe_util':'call'
			  (1714, _cor9)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'setItemPosition',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemState'/4 =
    %% Line 776
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Item,State,StateMask>
	      when %% Line 777
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Item)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(State)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (StateMask)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 778
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 780
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Item>(32,1,'integer',['unsigned'|['native']]),
			#<State>(32,1,'integer',['unsigned'|['native']]),
			#<StateMask>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 779
		      call 'wxe_util':'call'
			  (1715, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setItemState',4}}] )
	    -| ['compiler_generated'] )
	end
'setItemText'/3 =
    %% Line 785
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Item,Str>
	      when let <_cor3> =
		    %% Line 786
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 786
			call 'erlang':'is_list'
			    (Str)
		    in  %% Line 786
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 787
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 788
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  let <_cor13> =
			  %% Line 790
			  call 'erlang':'byte_size'
			      (Str_UC)
		      in  let <_cor8> =
			      %% Line 790
			      call 'erlang':'byte_size'
				  (Str_UC)
			  in  let <_cor9> =
				  %% Line 790
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 790
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 790
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 790
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 790
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Item>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Str_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 789
						  call 'wxe_util':'cast'
						      (1716, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setItemText',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemTextColour'/3 =
    %% Line 795
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Item,Col>
	      when let <_cor6> =
		    %% Line 796
		    try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(Item)
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 796
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 796
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 797
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 799
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor12> =
			  %% Line 799
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Item>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 798
			  call 'wxe_util':'cast'
			      (1717, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setItemTextColour',3}}] )
	    -| ['compiler_generated'] )
	end
'setSingleStyle'/2 =
    %% Line 805
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Style>
	      when %% Line 806
		call 'erlang':'is_integer'
		    (Style) ->
	      %% Line 807
	      apply 'setSingleStyle'/3
		  (This, Style, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setSingleStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setSingleStyle'/3 =
    %% Line 813
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Style,Options>
	      when let <_cor3> =
		    %% Line 814
		    call 'erlang':'is_integer'
			(Style)
		in  let <_cor4> =
			%% Line 814
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 814
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 815
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 816
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'add',Add},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Add)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 817
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSingleStyle/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 818
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 818
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 820
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Style>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 819
				  call 'wxe_util':'cast'
				      (1718, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setSingleStyle',3}}] )
	    -| ['compiler_generated'] )
	end
'setTextColour'/2 =
    %% Line 825
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Col>
	      when let <_cor3> =
		    %% Line 826
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Col)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 826
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 826
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 827
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 829
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor9> =
			  %% Line 829
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 828
			  call 'wxe_util':'cast'
			      (1719, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setWindowStyleFlag'/2 =
    %% Line 834
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 835
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 836
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 838
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 837
		      call 'wxe_util':'cast'
			  (1720, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWindowStyleFlag',2}}] )
	    -| ['compiler_generated'] )
	end
'sortItems'/2 =
    %% Line 849
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},SortCallBack>
	      when %% Line 850
		call 'erlang':'is_function'
		    (SortCallBack,
		     2) ->
	      do  %% Line 851
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Sort> =
		      %% Line 852
		      ( fun (_cor5) ->
			    case _cor5 of
			      <[Item1|[Item2|[]]]> when 'true' ->
				  let <Result> =
				      %% Line 853
				      apply SortCallBack
					  (Item1, Item2)
				  in  %% Line 854
				      #{#<Result>(32,1,'integer',['unsigned'|['native']])}#
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'-sortItems/2-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-sortItems/2-fun-0-'}}] )
		  in  let <SortId> =
			  %% Line 856
			  call 'wxe_util':'get_cbId'
			      (Sort)
		      in  let <_cor9> =
			      %% Line 857
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<SortId>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 857
			      call 'wxe_util':'call'
				  (1721, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'sortItems',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 860
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 861
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxListCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxListCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 862
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 863
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 866
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 868
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 871
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 873
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 875
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 877
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 879
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 881
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 883
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 885
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 887
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 889
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 891
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 893
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 895
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 897
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 899
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 903
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 905
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 907
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 909
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 911
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 915
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 917
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 919
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 921
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 923
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 925
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 927
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 929
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 931
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 933
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 935
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 937
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 939
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 941
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 943
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 945
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 947
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 949
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 951
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 953
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 955
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 957
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 961
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 963
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 965
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 967
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 969
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 971
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 973
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 975
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 979
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 981
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 983
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 985
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 987
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 989
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 991
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 993
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 995
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 997
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 999
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 1001
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 1003
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 1005
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 1007
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 1009
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 1011
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 1013
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 1015
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 1017
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 1019
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 1021
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 1023
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 1025
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 1027
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 1029
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 1031
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 1033
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 1035
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 1037
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 1039
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 1041
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 1043
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 1045
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 1047
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 1049
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 1051
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 1053
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 1055
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 1057
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 1059
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 1061
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 1063
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 1065
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 1067
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 1069
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 1071
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 1073
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 1075
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 1077
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 1079
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 1081
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 1083
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 1085
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 1087
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 1089
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 1091
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 1093
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 1095
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 1097
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 1099
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 1101
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 1103
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 1105
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 1107
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 1109
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 1111
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 1113
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 1115
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 1117
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 1119
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 1121
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 1123
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 1125
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 1127
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 1129
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 1131
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 1133
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 1135
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 1137
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 1139
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 1141
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 1143
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 1145
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 1147
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 1149
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 1151
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 1153
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 1155
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 1157
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 1159
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 1161
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 1163
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 1165
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 1167
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 1169
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 1171
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 1173
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 1175
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 1177
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 1179
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 1183
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 1185
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 1187
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 1189
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 1191
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 1193
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 1195
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 1197
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 1199
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 1201
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 1203
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 1205
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 1207
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 1209
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 1211
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 1214
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 1216
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 1218
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 1220
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 1222
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxListCtrl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxListCtrl', _cor0)
end