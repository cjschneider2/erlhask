module 'gl' ['accum'/2,
	     'activeShaderProgram'/2,
	     'activeTexture'/1,
	     'alphaFunc'/2,
	     'areTexturesResident'/1,
	     'arrayElement'/1,
	     'attachObjectARB'/2,
	     'attachShader'/2,
	     'begin'/1,
	     'beginConditionalRender'/2,
	     'beginQuery'/2,
	     'beginQueryIndexed'/3,
	     'beginTransformFeedback'/1,
	     'bindAttribLocation'/3,
	     'bindAttribLocationARB'/3,
	     'bindBuffer'/2,
	     'bindBufferBase'/3,
	     'bindBufferRange'/5,
	     'bindFragDataLocation'/3,
	     'bindFragDataLocationIndexed'/4,
	     'bindFramebuffer'/2,
	     'bindImageTexture'/7,
	     'bindProgramARB'/2,
	     'bindProgramPipeline'/1,
	     'bindRenderbuffer'/2,
	     'bindSampler'/2,
	     'bindTexture'/2,
	     'bindTransformFeedback'/2,
	     'bindVertexArray'/1,
	     'bitmap'/7,
	     'blendColor'/4,
	     'blendEquation'/1,
	     'blendEquationSeparate'/2,
	     'blendEquationSeparatei'/3,
	     'blendEquationi'/2,
	     'blendFunc'/2,
	     'blendFuncSeparate'/4,
	     'blendFuncSeparatei'/5,
	     'blendFunci'/3,
	     'blitFramebuffer'/10,
	     'bufferData'/4,
	     'bufferSubData'/4,
	     'call'/2,
	     'callList'/1,
	     'callLists'/1,
	     'cast'/2,
	     'checkFramebufferStatus'/1,
	     'clampColor'/2,
	     'clear'/1,
	     'clearAccum'/4,
	     'clearBufferfi'/4,
	     'clearBufferfv'/3,
	     'clearBufferiv'/3,
	     'clearBufferuiv'/3,
	     'clearColor'/4,
	     'clearDepth'/1,
	     'clearDepthf'/1,
	     'clearIndex'/1,
	     'clearStencil'/1,
	     'clientActiveTexture'/1,
	     'clientWaitSync'/3,
	     'clipPlane'/2,
	     'color3b'/3,
	     'color3bv'/1,
	     'color3d'/3,
	     'color3dv'/1,
	     'color3f'/3,
	     'color3fv'/1,
	     'color3i'/3,
	     'color3iv'/1,
	     'color3s'/3,
	     'color3sv'/1,
	     'color3ub'/3,
	     'color3ubv'/1,
	     'color3ui'/3,
	     'color3uiv'/1,
	     'color3us'/3,
	     'color3usv'/1,
	     'color4b'/4,
	     'color4bv'/1,
	     'color4d'/4,
	     'color4dv'/1,
	     'color4f'/4,
	     'color4fv'/1,
	     'color4i'/4,
	     'color4iv'/1,
	     'color4s'/4,
	     'color4sv'/1,
	     'color4ub'/4,
	     'color4ubv'/1,
	     'color4ui'/4,
	     'color4uiv'/1,
	     'color4us'/4,
	     'color4usv'/1,
	     'colorMask'/4,
	     'colorMaski'/5,
	     'colorMaterial'/2,
	     'colorPointer'/4,
	     'colorSubTable'/6,
	     'colorTable'/6,
	     'colorTableParameterfv'/3,
	     'colorTableParameteriv'/3,
	     'compileShader'/1,
	     'compileShaderARB'/1,
	     'compileShaderIncludeARB'/2,
	     'compressedTexImage1D'/7,
	     'compressedTexImage2D'/8,
	     'compressedTexImage3D'/9,
	     'compressedTexSubImage1D'/7,
	     'compressedTexSubImage2D'/9,
	     'compressedTexSubImage3D'/11,
	     'convolutionFilter1D'/6,
	     'convolutionFilter2D'/7,
	     'convolutionParameterf'/3,
	     'convolutionParameterfv'/3,
	     'convolutionParameteri'/3,
	     'convolutionParameteriv'/3,
	     'copyBufferSubData'/5,
	     'copyColorSubTable'/5,
	     'copyColorTable'/5,
	     'copyConvolutionFilter1D'/5,
	     'copyConvolutionFilter2D'/6,
	     'copyPixels'/5,
	     'copyTexImage1D'/7,
	     'copyTexImage2D'/8,
	     'copyTexSubImage1D'/6,
	     'copyTexSubImage2D'/8,
	     'copyTexSubImage3D'/9,
	     'createProgram'/0,
	     'createProgramObjectARB'/0,
	     'createShader'/1,
	     'createShaderObjectARB'/1,
	     'createShaderProgramv'/2,
	     'cullFace'/1,
	     'currentPaletteMatrixARB'/1,
	     'debugMessageControlARB'/5,
	     'debugMessageInsertARB'/5,
	     'deleteBuffers'/1,
	     'deleteFramebuffers'/1,
	     'deleteLists'/2,
	     'deleteNamedStringARB'/1,
	     'deleteObjectARB'/1,
	     'deleteProgram'/1,
	     'deleteProgramPipelines'/1,
	     'deleteProgramsARB'/1,
	     'deleteQueries'/1,
	     'deleteRenderbuffers'/1,
	     'deleteSamplers'/1,
	     'deleteShader'/1,
	     'deleteSync'/1,
	     'deleteTextures'/1,
	     'deleteTransformFeedbacks'/1,
	     'deleteVertexArrays'/1,
	     'depthBoundsEXT'/2,
	     'depthFunc'/1,
	     'depthMask'/1,
	     'depthRange'/2,
	     'depthRangeArrayv'/2,
	     'depthRangeIndexed'/3,
	     'depthRangef'/2,
	     'detachObjectARB'/2,
	     'detachShader'/2,
	     'disable'/1,
	     'disableClientState'/1,
	     'disableVertexAttribArray'/1,
	     'disablei'/2,
	     'drawArrays'/3,
	     'drawArraysIndirect'/2,
	     'drawArraysInstanced'/4,
	     'drawArraysInstancedBaseInstance'/5,
	     'drawBuffer'/1,
	     'drawBuffers'/1,
	     'drawElements'/4,
	     'drawElementsBaseVertex'/5,
	     'drawElementsIndirect'/3,
	     'drawElementsInstanced'/5,
	     'drawElementsInstancedBaseInstance'/6,
	     'drawElementsInstancedBaseVertex'/6,
	     'drawElementsInstancedBaseVertexBaseInstance'/7,
	     'drawPixels'/5,
	     'drawRangeElements'/6,
	     'drawRangeElementsBaseVertex'/7,
	     'drawTransformFeedback'/2,
	     'drawTransformFeedbackInstanced'/3,
	     'drawTransformFeedbackStream'/3,
	     'drawTransformFeedbackStreamInstanced'/4,
	     'edgeFlag'/1,
	     'edgeFlagPointer'/2,
	     'edgeFlagv'/1,
	     'enable'/1,
	     'enableClientState'/1,
	     'enableVertexAttribArray'/1,
	     'enablei'/2,
	     'end'/0,
	     'endConditionalRender'/0,
	     'endList'/0,
	     'endQuery'/1,
	     'endQueryIndexed'/2,
	     'endTransformFeedback'/0,
	     'evalCoord1d'/1,
	     'evalCoord1dv'/1,
	     'evalCoord1f'/1,
	     'evalCoord1fv'/1,
	     'evalCoord2d'/2,
	     'evalCoord2dv'/1,
	     'evalCoord2f'/2,
	     'evalCoord2fv'/1,
	     'evalMesh1'/3,
	     'evalMesh2'/5,
	     'evalPoint1'/1,
	     'evalPoint2'/2,
	     'feedbackBuffer'/3,
	     'fenceSync'/2,
	     'finish'/0,
	     'flush'/0,
	     'flushMappedBufferRange'/3,
	     'fogCoordPointer'/3,
	     'fogCoordd'/1,
	     'fogCoorddv'/1,
	     'fogCoordf'/1,
	     'fogCoordfv'/1,
	     'fogf'/2,
	     'fogfv'/2,
	     'fogi'/2,
	     'fogiv'/2,
	     'framebufferRenderbuffer'/4,
	     'framebufferTexture'/4,
	     'framebufferTexture1D'/5,
	     'framebufferTexture2D'/5,
	     'framebufferTexture3D'/6,
	     'framebufferTextureFaceARB'/5,
	     'framebufferTextureLayer'/5,
	     'frontFace'/1,
	     'frustum'/6,
	     'genBuffers'/1,
	     'genFramebuffers'/1,
	     'genLists'/1,
	     'genProgramPipelines'/1,
	     'genProgramsARB'/1,
	     'genQueries'/1,
	     'genRenderbuffers'/1,
	     'genSamplers'/1,
	     'genTextures'/1,
	     'genTransformFeedbacks'/1,
	     'genVertexArrays'/1,
	     'generateMipmap'/1,
	     'getActiveAttrib'/3,
	     'getActiveAttribARB'/3,
	     'getActiveSubroutineName'/4,
	     'getActiveSubroutineUniformName'/4,
	     'getActiveUniform'/3,
	     'getActiveUniformARB'/3,
	     'getActiveUniformBlockName'/3,
	     'getActiveUniformBlockiv'/4,
	     'getActiveUniformName'/3,
	     'getActiveUniformsiv'/3,
	     'getAttachedObjectsARB'/2,
	     'getAttachedShaders'/2,
	     'getAttribLocation'/2,
	     'getAttribLocationARB'/2,
	     'getBooleani_v'/2,
	     'getBooleanv'/1,
	     'getBufferParameteri64v'/2,
	     'getBufferParameteriv'/2,
	     'getBufferParameterivARB'/2,
	     'getBufferSubData'/4,
	     'getClipPlane'/1,
	     'getColorTable'/4,
	     'getColorTableParameterfv'/2,
	     'getColorTableParameteriv'/2,
	     'getCompressedTexImage'/3,
	     'getConvolutionFilter'/4,
	     'getConvolutionParameterfv'/2,
	     'getConvolutionParameteriv'/2,
	     'getDebugMessageLogARB'/2,
	     'getDoublei_v'/2,
	     'getDoublev'/1,
	     'getError'/0,
	     'getFloati_v'/2,
	     'getFloatv'/1,
	     'getFragDataIndex'/2,
	     'getFragDataLocation'/2,
	     'getFramebufferAttachmentParameteriv'/3,
	     'getGraphicsResetStatusARB'/0,
	     'getHandleARB'/1,
	     'getHistogram'/5,
	     'getHistogramParameterfv'/2,
	     'getHistogramParameteriv'/2,
	     'getInfoLogARB'/2,
	     'getInteger64i_v'/2,
	     'getInteger64v'/1,
	     'getIntegeri_v'/2,
	     'getIntegerv'/1,
	     'getInternalformativ'/4,
	     'getLightfv'/2,
	     'getLightiv'/2,
	     'getMapdv'/3,
	     'getMapfv'/3,
	     'getMapiv'/3,
	     'getMaterialfv'/2,
	     'getMaterialiv'/2,
	     'getMinmax'/5,
	     'getMinmaxParameterfv'/2,
	     'getMinmaxParameteriv'/2,
	     'getMultisamplefv'/2,
	     'getNamedStringARB'/2,
	     'getNamedStringivARB'/2,
	     'getObjectParameterfvARB'/2,
	     'getObjectParameterivARB'/2,
	     'getPixelMapfv'/2,
	     'getPixelMapuiv'/2,
	     'getPixelMapusv'/2,
	     'getPolygonStipple'/0,
	     'getProgramBinary'/2,
	     'getProgramEnvParameterdvARB'/2,
	     'getProgramEnvParameterfvARB'/2,
	     'getProgramInfoLog'/2,
	     'getProgramLocalParameterdvARB'/2,
	     'getProgramLocalParameterfvARB'/2,
	     'getProgramPipelineInfoLog'/2,
	     'getProgramPipelineiv'/2,
	     'getProgramStageiv'/3,
	     'getProgramStringARB'/3,
	     'getProgramiv'/2,
	     'getQueryIndexediv'/3,
	     'getQueryObjecti64v'/2,
	     'getQueryObjectiv'/2,
	     'getQueryObjectui64v'/2,
	     'getQueryObjectuiv'/2,
	     'getQueryiv'/2,
	     'getRenderbufferParameteriv'/2,
	     'getSamplerParameterIiv'/2,
	     'getSamplerParameterIuiv'/2,
	     'getSamplerParameterfv'/2,
	     'getSamplerParameteriv'/2,
	     'getShaderInfoLog'/2,
	     'getShaderPrecisionFormat'/2,
	     'getShaderSource'/2,
	     'getShaderSourceARB'/2,
	     'getShaderiv'/2,
	     'getString'/1,
	     'getStringi'/2,
	     'getSubroutineIndex'/3,
	     'getSubroutineUniformLocation'/3,
	     'getSynciv'/3,
	     'getTexEnvfv'/2,
	     'getTexEnviv'/2,
	     'getTexGendv'/2,
	     'getTexGenfv'/2,
	     'getTexGeniv'/2,
	     'getTexImage'/5,
	     'getTexLevelParameterfv'/3,
	     'getTexLevelParameteriv'/3,
	     'getTexParameterIiv'/2,
	     'getTexParameterIuiv'/2,
	     'getTexParameterfv'/2,
	     'getTexParameteriv'/2,
	     'getTransformFeedbackVarying'/3,
	     'getUniformBlockIndex'/2,
	     'getUniformIndices'/2,
	     'getUniformLocation'/2,
	     'getUniformLocationARB'/2,
	     'getUniformSubroutineuiv'/2,
	     'getUniformdv'/2,
	     'getUniformfv'/2,
	     'getUniformfvARB'/2,
	     'getUniformiv'/2,
	     'getUniformivARB'/2,
	     'getUniformuiv'/2,
	     'getVertexAttribIiv'/2,
	     'getVertexAttribIuiv'/2,
	     'getVertexAttribLdv'/2,
	     'getVertexAttribdv'/2,
	     'getVertexAttribfv'/2,
	     'getVertexAttribiv'/2,
	     'hint'/2,
	     'histogram'/4,
	     'indexMask'/1,
	     'indexPointer'/3,
	     'indexd'/1,
	     'indexdv'/1,
	     'indexf'/1,
	     'indexfv'/1,
	     'indexi'/1,
	     'indexiv'/1,
	     'indexs'/1,
	     'indexsv'/1,
	     'indexub'/1,
	     'indexubv'/1,
	     'initNames'/0,
	     'interleavedArrays'/3,
	     'isBuffer'/1,
	     'isEnabled'/1,
	     'isEnabledi'/2,
	     'isFramebuffer'/1,
	     'isList'/1,
	     'isNamedStringARB'/1,
	     'isProgram'/1,
	     'isProgramPipeline'/1,
	     'isQuery'/1,
	     'isRenderbuffer'/1,
	     'isSampler'/1,
	     'isShader'/1,
	     'isSync'/1,
	     'isTexture'/1,
	     'isTransformFeedback'/1,
	     'isVertexArray'/1,
	     'lightModelf'/2,
	     'lightModelfv'/2,
	     'lightModeli'/2,
	     'lightModeliv'/2,
	     'lightf'/3,
	     'lightfv'/3,
	     'lighti'/3,
	     'lightiv'/3,
	     'lineStipple'/2,
	     'lineWidth'/1,
	     'linkProgram'/1,
	     'linkProgramARB'/1,
	     'listBase'/1,
	     'loadIdentity'/0,
	     'loadMatrixd'/1,
	     'loadMatrixf'/1,
	     'loadName'/1,
	     'loadTransposeMatrixd'/1,
	     'loadTransposeMatrixdARB'/1,
	     'loadTransposeMatrixf'/1,
	     'loadTransposeMatrixfARB'/1,
	     'logicOp'/1,
	     'map1d'/6,
	     'map1f'/6,
	     'map2d'/10,
	     'map2f'/10,
	     'mapGrid1d'/3,
	     'mapGrid1f'/3,
	     'mapGrid2d'/6,
	     'mapGrid2f'/6,
	     'materialf'/3,
	     'materialfv'/3,
	     'materiali'/3,
	     'materialiv'/3,
	     'matrixIndexubvARB'/1,
	     'matrixIndexuivARB'/1,
	     'matrixIndexusvARB'/1,
	     'matrixMode'/1,
	     'memoryBarrier'/1,
	     'minSampleShading'/1,
	     'minmax'/3,
	     'module_info'/0,
	     'module_info'/1,
	     'multMatrixd'/1,
	     'multMatrixf'/1,
	     'multTransposeMatrixd'/1,
	     'multTransposeMatrixdARB'/1,
	     'multTransposeMatrixf'/1,
	     'multTransposeMatrixfARB'/1,
	     'multiDrawArrays'/3,
	     'multiTexCoord1d'/2,
	     'multiTexCoord1dv'/2,
	     'multiTexCoord1f'/2,
	     'multiTexCoord1fv'/2,
	     'multiTexCoord1i'/2,
	     'multiTexCoord1iv'/2,
	     'multiTexCoord1s'/2,
	     'multiTexCoord1sv'/2,
	     'multiTexCoord2d'/3,
	     'multiTexCoord2dv'/2,
	     'multiTexCoord2f'/3,
	     'multiTexCoord2fv'/2,
	     'multiTexCoord2i'/3,
	     'multiTexCoord2iv'/2,
	     'multiTexCoord2s'/3,
	     'multiTexCoord2sv'/2,
	     'multiTexCoord3d'/4,
	     'multiTexCoord3dv'/2,
	     'multiTexCoord3f'/4,
	     'multiTexCoord3fv'/2,
	     'multiTexCoord3i'/4,
	     'multiTexCoord3iv'/2,
	     'multiTexCoord3s'/4,
	     'multiTexCoord3sv'/2,
	     'multiTexCoord4d'/5,
	     'multiTexCoord4dv'/2,
	     'multiTexCoord4f'/5,
	     'multiTexCoord4fv'/2,
	     'multiTexCoord4i'/5,
	     'multiTexCoord4iv'/2,
	     'multiTexCoord4s'/5,
	     'multiTexCoord4sv'/2,
	     'namedStringARB'/3,
	     'newList'/2,
	     'normal3b'/3,
	     'normal3bv'/1,
	     'normal3d'/3,
	     'normal3dv'/1,
	     'normal3f'/3,
	     'normal3fv'/1,
	     'normal3i'/3,
	     'normal3iv'/1,
	     'normal3s'/3,
	     'normal3sv'/1,
	     'normalPointer'/3,
	     'ortho'/6,
	     'passThrough'/1,
	     'patchParameterfv'/2,
	     'patchParameteri'/2,
	     'pauseTransformFeedback'/0,
	     'pixelMapfv'/3,
	     'pixelMapuiv'/3,
	     'pixelMapusv'/3,
	     'pixelStoref'/2,
	     'pixelStorei'/2,
	     'pixelTransferf'/2,
	     'pixelTransferi'/2,
	     'pixelZoom'/2,
	     'pointParameterf'/2,
	     'pointParameterfv'/2,
	     'pointParameteri'/2,
	     'pointParameteriv'/2,
	     'pointSize'/1,
	     'polygonMode'/2,
	     'polygonOffset'/2,
	     'polygonStipple'/1,
	     'popAttrib'/0,
	     'popClientAttrib'/0,
	     'popMatrix'/0,
	     'popName'/0,
	     'primitiveRestartIndex'/1,
	     'prioritizeTextures'/2,
	     'programBinary'/3,
	     'programEnvParameter4dARB'/6,
	     'programEnvParameter4dvARB'/3,
	     'programEnvParameter4fARB'/6,
	     'programEnvParameter4fvARB'/3,
	     'programLocalParameter4dARB'/6,
	     'programLocalParameter4dvARB'/3,
	     'programLocalParameter4fARB'/6,
	     'programLocalParameter4fvARB'/3,
	     'programParameteri'/3,
	     'programStringARB'/3,
	     'programUniform1d'/3,
	     'programUniform1dv'/3,
	     'programUniform1f'/3,
	     'programUniform1fv'/3,
	     'programUniform1i'/3,
	     'programUniform1iv'/3,
	     'programUniform1ui'/3,
	     'programUniform1uiv'/3,
	     'programUniform2d'/4,
	     'programUniform2dv'/3,
	     'programUniform2f'/4,
	     'programUniform2fv'/3,
	     'programUniform2i'/4,
	     'programUniform2iv'/3,
	     'programUniform2ui'/4,
	     'programUniform2uiv'/3,
	     'programUniform3d'/5,
	     'programUniform3dv'/3,
	     'programUniform3f'/5,
	     'programUniform3fv'/3,
	     'programUniform3i'/5,
	     'programUniform3iv'/3,
	     'programUniform3ui'/5,
	     'programUniform3uiv'/3,
	     'programUniform4d'/6,
	     'programUniform4dv'/3,
	     'programUniform4f'/6,
	     'programUniform4fv'/3,
	     'programUniform4i'/6,
	     'programUniform4iv'/3,
	     'programUniform4ui'/6,
	     'programUniform4uiv'/3,
	     'programUniformMatrix2dv'/4,
	     'programUniformMatrix2fv'/4,
	     'programUniformMatrix2x3dv'/4,
	     'programUniformMatrix2x3fv'/4,
	     'programUniformMatrix2x4dv'/4,
	     'programUniformMatrix2x4fv'/4,
	     'programUniformMatrix3dv'/4,
	     'programUniformMatrix3fv'/4,
	     'programUniformMatrix3x2dv'/4,
	     'programUniformMatrix3x2fv'/4,
	     'programUniformMatrix3x4dv'/4,
	     'programUniformMatrix3x4fv'/4,
	     'programUniformMatrix4dv'/4,
	     'programUniformMatrix4fv'/4,
	     'programUniformMatrix4x2dv'/4,
	     'programUniformMatrix4x2fv'/4,
	     'programUniformMatrix4x3dv'/4,
	     'programUniformMatrix4x3fv'/4,
	     'provokingVertex'/1,
	     'pushAttrib'/1,
	     'pushClientAttrib'/1,
	     'pushMatrix'/0,
	     'pushName'/1,
	     'queryCounter'/2,
	     'rasterPos2d'/2,
	     'rasterPos2dv'/1,
	     'rasterPos2f'/2,
	     'rasterPos2fv'/1,
	     'rasterPos2i'/2,
	     'rasterPos2iv'/1,
	     'rasterPos2s'/2,
	     'rasterPos2sv'/1,
	     'rasterPos3d'/3,
	     'rasterPos3dv'/1,
	     'rasterPos3f'/3,
	     'rasterPos3fv'/1,
	     'rasterPos3i'/3,
	     'rasterPos3iv'/1,
	     'rasterPos3s'/3,
	     'rasterPos3sv'/1,
	     'rasterPos4d'/4,
	     'rasterPos4dv'/1,
	     'rasterPos4f'/4,
	     'rasterPos4fv'/1,
	     'rasterPos4i'/4,
	     'rasterPos4iv'/1,
	     'rasterPos4s'/4,
	     'rasterPos4sv'/1,
	     'readBuffer'/1,
	     'readPixels'/7,
	     'rectd'/4,
	     'rectdv'/2,
	     'rectf'/4,
	     'rectfv'/2,
	     'recti'/4,
	     'rectiv'/2,
	     'rects'/4,
	     'rectsv'/2,
	     'releaseShaderCompiler'/0,
	     'renderMode'/1,
	     'renderbufferStorage'/4,
	     'renderbufferStorageMultisample'/5,
	     'resetHistogram'/1,
	     'resetMinmax'/1,
	     'resumeTransformFeedback'/0,
	     'rotated'/4,
	     'rotatef'/4,
	     'sampleCoverage'/2,
	     'sampleMaski'/2,
	     'samplerParameterIiv'/3,
	     'samplerParameterIuiv'/3,
	     'samplerParameterf'/3,
	     'samplerParameterfv'/3,
	     'samplerParameteri'/3,
	     'samplerParameteriv'/3,
	     'scaled'/3,
	     'scalef'/3,
	     'scissor'/4,
	     'scissorArrayv'/2,
	     'scissorIndexed'/5,
	     'scissorIndexedv'/2,
	     'secondaryColor3b'/3,
	     'secondaryColor3bv'/1,
	     'secondaryColor3d'/3,
	     'secondaryColor3dv'/1,
	     'secondaryColor3f'/3,
	     'secondaryColor3fv'/1,
	     'secondaryColor3i'/3,
	     'secondaryColor3iv'/1,
	     'secondaryColor3s'/3,
	     'secondaryColor3sv'/1,
	     'secondaryColor3ub'/3,
	     'secondaryColor3ubv'/1,
	     'secondaryColor3ui'/3,
	     'secondaryColor3uiv'/1,
	     'secondaryColor3us'/3,
	     'secondaryColor3usv'/1,
	     'secondaryColorPointer'/4,
	     'selectBuffer'/2,
	     'send_bin'/1,
	     'separableFilter2D'/8,
	     'shadeModel'/1,
	     'shaderBinary'/3,
	     'shaderSource'/2,
	     'shaderSourceARB'/2,
	     'stencilClearTagEXT'/2,
	     'stencilFunc'/3,
	     'stencilFuncSeparate'/4,
	     'stencilMask'/1,
	     'stencilMaskSeparate'/2,
	     'stencilOp'/3,
	     'stencilOpSeparate'/4,
	     'texBuffer'/3,
	     'texCoord1d'/1,
	     'texCoord1dv'/1,
	     'texCoord1f'/1,
	     'texCoord1fv'/1,
	     'texCoord1i'/1,
	     'texCoord1iv'/1,
	     'texCoord1s'/1,
	     'texCoord1sv'/1,
	     'texCoord2d'/2,
	     'texCoord2dv'/1,
	     'texCoord2f'/2,
	     'texCoord2fv'/1,
	     'texCoord2i'/2,
	     'texCoord2iv'/1,
	     'texCoord2s'/2,
	     'texCoord2sv'/1,
	     'texCoord3d'/3,
	     'texCoord3dv'/1,
	     'texCoord3f'/3,
	     'texCoord3fv'/1,
	     'texCoord3i'/3,
	     'texCoord3iv'/1,
	     'texCoord3s'/3,
	     'texCoord3sv'/1,
	     'texCoord4d'/4,
	     'texCoord4dv'/1,
	     'texCoord4f'/4,
	     'texCoord4fv'/1,
	     'texCoord4i'/4,
	     'texCoord4iv'/1,
	     'texCoord4s'/4,
	     'texCoord4sv'/1,
	     'texCoordPointer'/4,
	     'texEnvf'/3,
	     'texEnvfv'/3,
	     'texEnvi'/3,
	     'texEnviv'/3,
	     'texGend'/3,
	     'texGendv'/3,
	     'texGenf'/3,
	     'texGenfv'/3,
	     'texGeni'/3,
	     'texGeniv'/3,
	     'texImage1D'/8,
	     'texImage2D'/9,
	     'texImage2DMultisample'/6,
	     'texImage3D'/10,
	     'texImage3DMultisample'/7,
	     'texParameterIiv'/3,
	     'texParameterIuiv'/3,
	     'texParameterf'/3,
	     'texParameterfv'/3,
	     'texParameteri'/3,
	     'texParameteriv'/3,
	     'texStorage1D'/4,
	     'texStorage2D'/5,
	     'texStorage3D'/6,
	     'texSubImage1D'/7,
	     'texSubImage2D'/9,
	     'texSubImage3D'/11,
	     'transformFeedbackVaryings'/3,
	     'translated'/3,
	     'translatef'/3,
	     'uniform1d'/2,
	     'uniform1dv'/2,
	     'uniform1f'/2,
	     'uniform1fv'/2,
	     'uniform1i'/2,
	     'uniform1iv'/2,
	     'uniform1ui'/2,
	     'uniform1uiv'/2,
	     'uniform2d'/3,
	     'uniform2dv'/2,
	     'uniform2f'/3,
	     'uniform2fv'/2,
	     'uniform2i'/3,
	     'uniform2iv'/2,
	     'uniform2ui'/3,
	     'uniform2uiv'/2,
	     'uniform3d'/4,
	     'uniform3dv'/2,
	     'uniform3f'/4,
	     'uniform3fv'/2,
	     'uniform3i'/4,
	     'uniform3iv'/2,
	     'uniform3ui'/4,
	     'uniform3uiv'/2,
	     'uniform4d'/5,
	     'uniform4dv'/2,
	     'uniform4f'/5,
	     'uniform4fv'/2,
	     'uniform4i'/5,
	     'uniform4iv'/2,
	     'uniform4ui'/5,
	     'uniform4uiv'/2,
	     'uniformBlockBinding'/3,
	     'uniformMatrix2dv'/3,
	     'uniformMatrix2fv'/3,
	     'uniformMatrix2x3dv'/3,
	     'uniformMatrix2x3fv'/3,
	     'uniformMatrix2x4dv'/3,
	     'uniformMatrix2x4fv'/3,
	     'uniformMatrix3dv'/3,
	     'uniformMatrix3fv'/3,
	     'uniformMatrix3x2dv'/3,
	     'uniformMatrix3x2fv'/3,
	     'uniformMatrix3x4dv'/3,
	     'uniformMatrix3x4fv'/3,
	     'uniformMatrix4dv'/3,
	     'uniformMatrix4fv'/3,
	     'uniformMatrix4x2dv'/3,
	     'uniformMatrix4x2fv'/3,
	     'uniformMatrix4x3dv'/3,
	     'uniformMatrix4x3fv'/3,
	     'uniformSubroutinesuiv'/2,
	     'useProgram'/1,
	     'useProgramObjectARB'/1,
	     'useProgramStages'/3,
	     'validateProgram'/1,
	     'validateProgramARB'/1,
	     'validateProgramPipeline'/1,
	     'vertex2d'/2,
	     'vertex2dv'/1,
	     'vertex2f'/2,
	     'vertex2fv'/1,
	     'vertex2i'/2,
	     'vertex2iv'/1,
	     'vertex2s'/2,
	     'vertex2sv'/1,
	     'vertex3d'/3,
	     'vertex3dv'/1,
	     'vertex3f'/3,
	     'vertex3fv'/1,
	     'vertex3i'/3,
	     'vertex3iv'/1,
	     'vertex3s'/3,
	     'vertex3sv'/1,
	     'vertex4d'/4,
	     'vertex4dv'/1,
	     'vertex4f'/4,
	     'vertex4fv'/1,
	     'vertex4i'/4,
	     'vertex4iv'/1,
	     'vertex4s'/4,
	     'vertex4sv'/1,
	     'vertexAttrib1d'/2,
	     'vertexAttrib1dv'/2,
	     'vertexAttrib1f'/2,
	     'vertexAttrib1fv'/2,
	     'vertexAttrib1s'/2,
	     'vertexAttrib1sv'/2,
	     'vertexAttrib2d'/3,
	     'vertexAttrib2dv'/2,
	     'vertexAttrib2f'/3,
	     'vertexAttrib2fv'/2,
	     'vertexAttrib2s'/3,
	     'vertexAttrib2sv'/2,
	     'vertexAttrib3d'/4,
	     'vertexAttrib3dv'/2,
	     'vertexAttrib3f'/4,
	     'vertexAttrib3fv'/2,
	     'vertexAttrib3s'/4,
	     'vertexAttrib3sv'/2,
	     'vertexAttrib4Nbv'/2,
	     'vertexAttrib4Niv'/2,
	     'vertexAttrib4Nsv'/2,
	     'vertexAttrib4Nub'/5,
	     'vertexAttrib4Nubv'/2,
	     'vertexAttrib4Nuiv'/2,
	     'vertexAttrib4Nusv'/2,
	     'vertexAttrib4bv'/2,
	     'vertexAttrib4d'/5,
	     'vertexAttrib4dv'/2,
	     'vertexAttrib4f'/5,
	     'vertexAttrib4fv'/2,
	     'vertexAttrib4iv'/2,
	     'vertexAttrib4s'/5,
	     'vertexAttrib4sv'/2,
	     'vertexAttrib4ubv'/2,
	     'vertexAttrib4uiv'/2,
	     'vertexAttrib4usv'/2,
	     'vertexAttribDivisor'/2,
	     'vertexAttribI1i'/2,
	     'vertexAttribI1iv'/2,
	     'vertexAttribI1ui'/2,
	     'vertexAttribI1uiv'/2,
	     'vertexAttribI2i'/3,
	     'vertexAttribI2iv'/2,
	     'vertexAttribI2ui'/3,
	     'vertexAttribI2uiv'/2,
	     'vertexAttribI3i'/4,
	     'vertexAttribI3iv'/2,
	     'vertexAttribI3ui'/4,
	     'vertexAttribI3uiv'/2,
	     'vertexAttribI4bv'/2,
	     'vertexAttribI4i'/5,
	     'vertexAttribI4iv'/2,
	     'vertexAttribI4sv'/2,
	     'vertexAttribI4ubv'/2,
	     'vertexAttribI4ui'/5,
	     'vertexAttribI4uiv'/2,
	     'vertexAttribI4usv'/2,
	     'vertexAttribIPointer'/5,
	     'vertexAttribL1d'/2,
	     'vertexAttribL1dv'/2,
	     'vertexAttribL2d'/3,
	     'vertexAttribL2dv'/2,
	     'vertexAttribL3d'/4,
	     'vertexAttribL3dv'/2,
	     'vertexAttribL4d'/5,
	     'vertexAttribL4dv'/2,
	     'vertexAttribLPointer'/5,
	     'vertexAttribPointer'/6,
	     'vertexBlendARB'/1,
	     'vertexPointer'/4,
	     'viewport'/4,
	     'viewportArrayv'/2,
	     'viewportIndexedf'/5,
	     'viewportIndexedfv'/2,
	     'waitSync'/3,
	     'weightbvARB'/1,
	     'weightdvARB'/1,
	     'weightfvARB'/1,
	     'weightivARB'/1,
	     'weightsvARB'/1,
	     'weightubvARB'/1,
	     'weightuivARB'/1,
	     'weightusvARB'/1,
	     'windowPos2d'/2,
	     'windowPos2dv'/1,
	     'windowPos2f'/2,
	     'windowPos2fv'/1,
	     'windowPos2i'/2,
	     'windowPos2iv'/1,
	     'windowPos2s'/2,
	     'windowPos2sv'/1,
	     'windowPos3d'/3,
	     'windowPos3dv'/1,
	     'windowPos3f'/3,
	     'windowPos3fv'/1,
	     'windowPos3i'/3,
	     'windowPos3iv'/1,
	     'windowPos3s'/3,
	     'windowPos3sv'/1]
    attributes [%% Line 52
		'type' =
		    %% Line 52
		    [{'enum',{'type',52,'non_neg_integer',[]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'clamp',{'type',53,'float',[]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'offset',{'type',54,'non_neg_integer',[]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'matrix',{'type',55,'tuple',[{'type',55,'float',[]}|[{'type',55,'float',[]}|[{'type',55,'float',[]}|[{'type',55,'float',[]}|[{'type',56,'float',[]}|[{'type',56,'float',[]}|[{'type',56,'float',[]}|[{'type',56,'float',[]}|[{'type',57,'float',[]}|[{'type',57,'float',[]}|[{'type',57,'float',[]}|[{'type',57,'float',[]}|[{'type',58,'float',[]}|[{'type',58,'float',[]}|[{'type',58,'float',[]}|[{'type',58,'float',[]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'mem',{'type',59,'union',[{'type',59,'binary',[]}|[{'type',59,'tuple','any'}]]},[]}],
		%% Line 319
		'spec' =
		    %% Line 319
		    [{{'clearIndex',1},[{'type',319,'bounded_fun',[{'type',319,'fun',[{'type',319,'product',[{'var',319,'C'}]}|[{'atom',319,'ok'}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'C'}|[{'type',319,'float',[]}]]]]}]]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'clearColor',4},[{'type',330,'bounded_fun',[{'type',330,'fun',[{'type',330,'product',[{'var',330,'Red'}|[{'var',330,'Green'}|[{'var',330,'Blue'}|[{'var',330,'Alpha'}]]]]}|[{'atom',330,'ok'}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Red'}|[{'type',330,'clamp',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Green'}|[{'type',330,'clamp',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Blue'}|[{'type',330,'clamp',[]}]]]]}|[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Alpha'}|[{'type',330,'clamp',[]}]]]]}]]]]]]}]}],
		%% Line 360
		'spec' =
		    %% Line 360
		    [{{'clear',1},[{'type',360,'bounded_fun',[{'type',360,'fun',[{'type',360,'product',[{'var',360,'Mask'}]}|[{'atom',360,'ok'}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Mask'}|[{'type',360,'integer',[]}]]]]}]]]}]}],
		%% Line 377
		'spec' =
		    %% Line 377
		    [{{'indexMask',1},[{'type',377,'bounded_fun',[{'type',377,'fun',[{'type',377,'product',[{'var',377,'Mask'}]}|[{'atom',377,'ok'}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Mask'}|[{'type',377,'integer',[]}]]]]}]]]}]}],
		%% Line 393
		'spec' =
		    %% Line 393
		    [{{'colorMask',4},[{'type',393,'bounded_fun',[{'type',393,'fun',[{'type',393,'product',[{'var',393,'Red'}|[{'var',393,'Green'}|[{'var',393,'Blue'}|[{'var',393,'Alpha'}]]]]}|[{'atom',393,'ok'}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Red'}|[{'type',393,'union',[{'integer',393,0}|[{'integer',393,1}]]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Green'}|[{'type',393,'union',[{'integer',393,0}|[{'integer',393,1}]]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Blue'}|[{'type',393,'union',[{'integer',393,0}|[{'integer',393,1}]]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Alpha'}|[{'type',393,'union',[{'integer',393,0}|[{'integer',393,1}]]}]]]]}]]]]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'alphaFunc',2},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'Func'}|[{'var',436,'Ref'}]]}|[{'atom',436,'ok'}]]}|[[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Func'}|[{'type',436,'enum',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Ref'}|[{'type',436,'clamp',[]}]]]]}]]]]}]}],
		%% Line 511
		'spec' =
		    %% Line 511
		    [{{'blendFunc',2},[{'type',511,'bounded_fun',[{'type',511,'fun',[{'type',511,'product',[{'var',511,'Sfactor'}|[{'var',511,'Dfactor'}]]}|[{'atom',511,'ok'}]]}|[[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Sfactor'}|[{'type',511,'enum',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Dfactor'}|[{'type',511,'enum',[]}]]]]}]]]]}]}],
		%% Line 541
		'spec' =
		    %% Line 541
		    [{{'logicOp',1},[{'type',541,'bounded_fun',[{'type',541,'fun',[{'type',541,'product',[{'var',541,'Opcode'}]}|[{'atom',541,'ok'}]]}|[[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'Opcode'}|[{'type',541,'enum',[]}]]]]}]]]}]}],
		%% Line 557
		'spec' =
		    %% Line 557
		    [{{'cullFace',1},[{'type',557,'bounded_fun',[{'type',557,'fun',[{'type',557,'product',[{'var',557,'Mode'}]}|[{'atom',557,'ok'}]]}|[[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'Mode'}|[{'type',557,'enum',[]}]]]]}]]]}]}],
		%% Line 580
		'spec' =
		    %% Line 580
		    [{{'frontFace',1},[{'type',580,'bounded_fun',[{'type',580,'fun',[{'type',580,'product',[{'var',580,'Mode'}]}|[{'atom',580,'ok'}]]}|[[{'type',580,'constraint',[{'atom',580,'is_subtype'}|[[{'var',580,'Mode'}|[{'type',580,'enum',[]}]]]]}]]]}]}],
		%% Line 592
		'spec' =
		    %% Line 592
		    [{{'pointSize',1},[{'type',592,'bounded_fun',[{'type',592,'fun',[{'type',592,'product',[{'var',592,'Size'}]}|[{'atom',592,'ok'}]]}|[[{'type',592,'constraint',[{'atom',592,'is_subtype'}|[[{'var',592,'Size'}|[{'type',592,'float',[]}]]]]}]]]}]}],
		%% Line 624
		'spec' =
		    %% Line 624
		    [{{'lineWidth',1},[{'type',624,'bounded_fun',[{'type',624,'fun',[{'type',624,'product',[{'var',624,'Width'}]}|[{'atom',624,'ok'}]]}|[[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Width'}|[{'type',624,'float',[]}]]]]}]]]}]}],
		%% Line 656
		'spec' =
		    %% Line 656
		    [{{'lineStipple',2},[{'type',656,'bounded_fun',[{'type',656,'fun',[{'type',656,'product',[{'var',656,'Factor'}|[{'var',656,'Pattern'}]]}|[{'atom',656,'ok'}]]}|[[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'Factor'}|[{'type',656,'integer',[]}]]]]}|[{'type',656,'constraint',[{'atom',656,'is_subtype'}|[[{'var',656,'Pattern'}|[{'type',656,'integer',[]}]]]]}]]]]}]}],
		%% Line 684
		'spec' =
		    %% Line 684
		    [{{'polygonMode',2},[{'type',684,'bounded_fun',[{'type',684,'fun',[{'type',684,'product',[{'var',684,'Face'}|[{'var',684,'Mode'}]]}|[{'atom',684,'ok'}]]}|[[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Face'}|[{'type',684,'enum',[]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Mode'}|[{'type',684,'enum',[]}]]]]}]]]]}]}],
		%% Line 702
		'spec' =
		    %% Line 702
		    [{{'polygonOffset',2},[{'type',702,'bounded_fun',[{'type',702,'fun',[{'type',702,'product',[{'var',702,'Factor'}|[{'var',702,'Units'}]]}|[{'atom',702,'ok'}]]}|[[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'Factor'}|[{'type',702,'float',[]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'Units'}|[{'type',702,'float',[]}]]]]}]]]]}]}],
		%% Line 733
		'spec' =
		    %% Line 733
		    [{{'polygonStipple',1},[{'type',733,'bounded_fun',[{'type',733,'fun',[{'type',733,'product',[{'var',733,'Mask'}]}|[{'atom',733,'ok'}]]}|[[{'type',733,'constraint',[{'atom',733,'is_subtype'}|[[{'var',733,'Mask'}|[{'type',733,'binary',[]}]]]]}]]]}]}],
		%% Line 752
		'spec' =
		    %% Line 752
		    [{{'getPolygonStipple',0},[{'type',752,'fun',[{'type',752,'product',[]}|[{'type',752,'binary',[]}]]}]}],
		%% Line 772
		'spec' =
		    %% Line 772
		    [{{'edgeFlag',1},[{'type',772,'bounded_fun',[{'type',772,'fun',[{'type',772,'product',[{'var',772,'Flag'}]}|[{'atom',772,'ok'}]]}|[[{'type',772,'constraint',[{'atom',772,'is_subtype'}|[[{'var',772,'Flag'}|[{'type',772,'union',[{'integer',772,0}|[{'integer',772,1}]]}]]]]}]]]}]}],
		%% Line 777
		'spec' =
		    %% Line 777
		    [{{'edgeFlagv',1},[{'type',777,'bounded_fun',[{'type',777,'fun',[{'type',777,'product',[{'var',777,'Flag'}]}|[{'atom',777,'ok'}]]}|[[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'Flag'}|[{'type',777,'tuple',[{'ann_type',777,[{'var',777,'Flag'}|[{'type',777,'union',[{'integer',777,0}|[{'integer',777,1}]]}]]}]}]]]]}]]]}]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'scissor',4},[{'type',797,'bounded_fun',[{'type',797,'fun',[{'type',797,'product',[{'var',797,'X'}|[{'var',797,'Y'}|[{'var',797,'Width'}|[{'var',797,'Height'}]]]]}|[{'atom',797,'ok'}]]}|[[{'type',797,'constraint',[{'atom',797,'is_subtype'}|[[{'var',797,'X'}|[{'type',797,'integer',[]}]]]]}|[{'type',797,'constraint',[{'atom',797,'is_subtype'}|[[{'var',797,'Y'}|[{'type',797,'integer',[]}]]]]}|[{'type',797,'constraint',[{'atom',797,'is_subtype'}|[[{'var',797,'Width'}|[{'type',797,'integer',[]}]]]]}|[{'type',797,'constraint',[{'atom',797,'is_subtype'}|[[{'var',797,'Height'}|[{'type',797,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 825
		'spec' =
		    %% Line 825
		    [{{'clipPlane',2},[{'type',825,'bounded_fun',[{'type',825,'fun',[{'type',825,'product',[{'var',825,'Plane'}|[{'var',825,'Equation'}]]}|[{'atom',825,'ok'}]]}|[[{'type',825,'constraint',[{'atom',825,'is_subtype'}|[[{'var',825,'Plane'}|[{'type',825,'enum',[]}]]]]}|[{'type',825,'constraint',[{'atom',825,'is_subtype'}|[[{'var',825,'Equation'}|[{'type',825,'tuple',[{'type',825,'float',[]}|[{'type',825,'float',[]}|[{'type',825,'float',[]}|[{'type',825,'float',[]}]]]]}]]]]}]]]]}]}],
		%% Line 835
		'spec' =
		    %% Line 835
		    [{{'getClipPlane',1},[{'type',835,'bounded_fun',[{'type',835,'fun',[{'type',835,'product',[{'var',835,'Plane'}]}|[{'type',835,'tuple',[{'type',835,'float',[]}|[{'type',835,'float',[]}|[{'type',835,'float',[]}|[{'type',835,'float',[]}]]]]}]]}|[[{'type',835,'constraint',[{'atom',835,'is_subtype'}|[[{'var',835,'Plane'}|[{'type',835,'enum',[]}]]]]}]]]}]}],
		%% Line 882
		'spec' =
		    %% Line 882
		    [{{'drawBuffer',1},[{'type',882,'bounded_fun',[{'type',882,'fun',[{'type',882,'product',[{'var',882,'Mode'}]}|[{'atom',882,'ok'}]]}|[[{'type',882,'constraint',[{'atom',882,'is_subtype'}|[[{'var',882,'Mode'}|[{'type',882,'enum',[]}]]]]}]]]}]}],
		%% Line 907
		'spec' =
		    %% Line 907
		    [{{'readBuffer',1},[{'type',907,'bounded_fun',[{'type',907,'fun',[{'type',907,'product',[{'var',907,'Mode'}]}|[{'atom',907,'ok'}]]}|[[{'type',907,'constraint',[{'atom',907,'is_subtype'}|[[{'var',907,'Mode'}|[{'type',907,'enum',[]}]]]]}]]]}]}],
		%% Line 1017
		'spec' =
		    %% Line 1017
		    [{{'enable',1},[{'type',1017,'bounded_fun',[{'type',1017,'fun',[{'type',1017,'product',[{'var',1017,'Cap'}]}|[{'atom',1017,'ok'}]]}|[[{'type',1017,'constraint',[{'atom',1017,'is_subtype'}|[[{'var',1017,'Cap'}|[{'type',1017,'enum',[]}]]]]}]]]}]}],
		%% Line 1023
		'spec' =
		    %% Line 1023
		    [{{'disable',1},[{'type',1023,'bounded_fun',[{'type',1023,'fun',[{'type',1023,'product',[{'var',1023,'Cap'}]}|[{'atom',1023,'ok'}]]}|[[{'type',1023,'constraint',[{'atom',1023,'is_subtype'}|[[{'var',1023,'Cap'}|[{'type',1023,'enum',[]}]]]]}]]]}]}],
		%% Line 1061
		'spec' =
		    %% Line 1061
		    [{{'isEnabled',1},[{'type',1061,'bounded_fun',[{'type',1061,'fun',[{'type',1061,'product',[{'var',1061,'Cap'}]}|[{'type',1061,'union',[{'integer',1061,0}|[{'integer',1061,1}]]}]]}|[[{'type',1061,'constraint',[{'atom',1061,'is_subtype'}|[[{'var',1061,'Cap'}|[{'type',1061,'enum',[]}]]]]}]]]}]}],
		%% Line 1113
		'spec' =
		    %% Line 1113
		    [{{'enableClientState',1},[{'type',1113,'bounded_fun',[{'type',1113,'fun',[{'type',1113,'product',[{'var',1113,'Cap'}]}|[{'atom',1113,'ok'}]]}|[[{'type',1113,'constraint',[{'atom',1113,'is_subtype'}|[[{'var',1113,'Cap'}|[{'type',1113,'enum',[]}]]]]}]]]}]}],
		%% Line 1119
		'spec' =
		    %% Line 1119
		    [{{'disableClientState',1},[{'type',1119,'bounded_fun',[{'type',1119,'fun',[{'type',1119,'product',[{'var',1119,'Cap'}]}|[{'atom',1119,'ok'}]]}|[[{'type',1119,'constraint',[{'atom',1119,'is_subtype'}|[[{'var',1119,'Cap'}|[{'type',1119,'enum',[]}]]]]}]]]}]}],
		%% Line 1932
		'spec' =
		    %% Line 1932
		    [{{'getBooleanv',1},[{'type',1932,'bounded_fun',[{'type',1932,'fun',[{'type',1932,'product',[{'var',1932,'Pname'}]}|[{'type',1932,'list',[{'type',1932,'union',[{'integer',1932,0}|[{'integer',1932,1}]]}]}]]}|[[{'type',1932,'constraint',[{'atom',1932,'is_subtype'}|[[{'var',1932,'Pname'}|[{'type',1932,'enum',[]}]]]]}]]]}]}],
		%% Line 1938
		'spec' =
		    %% Line 1938
		    [{{'getDoublev',1},[{'type',1938,'bounded_fun',[{'type',1938,'fun',[{'type',1938,'product',[{'var',1938,'Pname'}]}|[{'type',1938,'list',[{'type',1938,'float',[]}]}]]}|[[{'type',1938,'constraint',[{'atom',1938,'is_subtype'}|[[{'var',1938,'Pname'}|[{'type',1938,'enum',[]}]]]]}]]]}]}],
		%% Line 1944
		'spec' =
		    %% Line 1944
		    [{{'getFloatv',1},[{'type',1944,'bounded_fun',[{'type',1944,'fun',[{'type',1944,'product',[{'var',1944,'Pname'}]}|[{'type',1944,'list',[{'type',1944,'float',[]}]}]]}|[[{'type',1944,'constraint',[{'atom',1944,'is_subtype'}|[[{'var',1944,'Pname'}|[{'type',1944,'enum',[]}]]]]}]]]}]}],
		%% Line 1950
		'spec' =
		    %% Line 1950
		    [{{'getIntegerv',1},[{'type',1950,'bounded_fun',[{'type',1950,'fun',[{'type',1950,'product',[{'var',1950,'Pname'}]}|[{'type',1950,'list',[{'type',1950,'integer',[]}]}]]}|[[{'type',1950,'constraint',[{'atom',1950,'is_subtype'}|[[{'var',1950,'Pname'}|[{'type',1950,'enum',[]}]]]]}]]]}]}],
		%% Line 2087
		'spec' =
		    %% Line 2087
		    [{{'pushAttrib',1},[{'type',2087,'bounded_fun',[{'type',2087,'fun',[{'type',2087,'product',[{'var',2087,'Mask'}]}|[{'atom',2087,'ok'}]]}|[[{'type',2087,'constraint',[{'atom',2087,'is_subtype'}|[[{'var',2087,'Mask'}|[{'type',2087,'integer',[]}]]]]}]]]}]}],
		%% Line 2093
		'spec' =
		    %% Line 2093
		    [{{'popAttrib',0},[{'type',2093,'fun',[{'type',2093,'product',[]}|[{'atom',2093,'ok'}]]}]}],
		%% Line 2121
		'spec' =
		    %% Line 2121
		    [{{'pushClientAttrib',1},[{'type',2121,'bounded_fun',[{'type',2121,'fun',[{'type',2121,'product',[{'var',2121,'Mask'}]}|[{'atom',2121,'ok'}]]}|[[{'type',2121,'constraint',[{'atom',2121,'is_subtype'}|[[{'var',2121,'Mask'}|[{'type',2121,'integer',[]}]]]]}]]]}]}],
		%% Line 2127
		'spec' =
		    %% Line 2127
		    [{{'popClientAttrib',0},[{'type',2127,'fun',[{'type',2127,'product',[]}|[{'atom',2127,'ok'}]]}]}],
		%% Line 2167
		'spec' =
		    %% Line 2167
		    [{{'renderMode',1},[{'type',2167,'bounded_fun',[{'type',2167,'fun',[{'type',2167,'product',[{'var',2167,'Mode'}]}|[{'type',2167,'integer',[]}]]}|[[{'type',2167,'constraint',[{'atom',2167,'is_subtype'}|[[{'var',2167,'Mode'}|[{'type',2167,'enum',[]}]]]]}]]]}]}],
		%% Line 2218
		'spec' =
		    %% Line 2218
		    [{{'getError',0},[{'type',2218,'fun',[{'type',2218,'product',[]}|[{'type',2218,'enum',[]}]]}]}],
		%% Line 2261
		'spec' =
		    %% Line 2261
		    [{{'getString',1},[{'type',2261,'bounded_fun',[{'type',2261,'fun',[{'type',2261,'product',[{'var',2261,'Name'}]}|[{'type',2261,'string',[]}]]}|[[{'type',2261,'constraint',[{'atom',2261,'is_subtype'}|[[{'var',2261,'Name'}|[{'type',2261,'enum',[]}]]]]}]]]}]}],
		%% Line 2272
		'spec' =
		    %% Line 2272
		    [{{'finish',0},[{'type',2272,'fun',[{'type',2272,'product',[]}|[{'atom',2272,'ok'}]]}]}],
		%% Line 2290
		'spec' =
		    %% Line 2290
		    [{{'flush',0},[{'type',2290,'fun',[{'type',2290,'product',[]}|[{'atom',2290,'ok'}]]}]}],
		%% Line 2332
		'spec' =
		    %% Line 2332
		    [{{'hint',2},[{'type',2332,'bounded_fun',[{'type',2332,'fun',[{'type',2332,'product',[{'var',2332,'Target'}|[{'var',2332,'Mode'}]]}|[{'atom',2332,'ok'}]]}|[[{'type',2332,'constraint',[{'atom',2332,'is_subtype'}|[[{'var',2332,'Target'}|[{'type',2332,'enum',[]}]]]]}|[{'type',2332,'constraint',[{'atom',2332,'is_subtype'}|[[{'var',2332,'Mode'}|[{'type',2332,'enum',[]}]]]]}]]]]}]}],
		%% Line 2342
		'spec' =
		    %% Line 2342
		    [{{'clearDepth',1},[{'type',2342,'bounded_fun',[{'type',2342,'fun',[{'type',2342,'product',[{'var',2342,'Depth'}]}|[{'atom',2342,'ok'}]]}|[[{'type',2342,'constraint',[{'atom',2342,'is_subtype'}|[[{'var',2342,'Depth'}|[{'type',2342,'clamp',[]}]]]]}]]]}]}],
		%% Line 2383
		'spec' =
		    %% Line 2383
		    [{{'depthFunc',1},[{'type',2383,'bounded_fun',[{'type',2383,'fun',[{'type',2383,'product',[{'var',2383,'Func'}]}|[{'atom',2383,'ok'}]]}|[[{'type',2383,'constraint',[{'atom',2383,'is_subtype'}|[[{'var',2383,'Func'}|[{'type',2383,'enum',[]}]]]]}]]]}]}],
		%% Line 2394
		'spec' =
		    %% Line 2394
		    [{{'depthMask',1},[{'type',2394,'bounded_fun',[{'type',2394,'fun',[{'type',2394,'product',[{'var',2394,'Flag'}]}|[{'atom',2394,'ok'}]]}|[[{'type',2394,'constraint',[{'atom',2394,'is_subtype'}|[[{'var',2394,'Flag'}|[{'type',2394,'union',[{'integer',2394,0}|[{'integer',2394,1}]]}]]]]}]]]}]}],
		%% Line 2411
		'spec' =
		    %% Line 2411
		    [{{'depthRange',2},[{'type',2411,'bounded_fun',[{'type',2411,'fun',[{'type',2411,'product',[{'var',2411,'Near_val'}|[{'var',2411,'Far_val'}]]}|[{'atom',2411,'ok'}]]}|[[{'type',2411,'constraint',[{'atom',2411,'is_subtype'}|[[{'var',2411,'Near_val'}|[{'type',2411,'clamp',[]}]]]]}|[{'type',2411,'constraint',[{'atom',2411,'is_subtype'}|[[{'var',2411,'Far_val'}|[{'type',2411,'clamp',[]}]]]]}]]]]}]}],
		%% Line 2423
		'spec' =
		    %% Line 2423
		    [{{'clearAccum',4},[{'type',2423,'bounded_fun',[{'type',2423,'fun',[{'type',2423,'product',[{'var',2423,'Red'}|[{'var',2423,'Green'}|[{'var',2423,'Blue'}|[{'var',2423,'Alpha'}]]]]}|[{'atom',2423,'ok'}]]}|[[{'type',2423,'constraint',[{'atom',2423,'is_subtype'}|[[{'var',2423,'Red'}|[{'type',2423,'float',[]}]]]]}|[{'type',2423,'constraint',[{'atom',2423,'is_subtype'}|[[{'var',2423,'Green'}|[{'type',2423,'float',[]}]]]]}|[{'type',2423,'constraint',[{'atom',2423,'is_subtype'}|[[{'var',2423,'Blue'}|[{'type',2423,'float',[]}]]]]}|[{'type',2423,'constraint',[{'atom',2423,'is_subtype'}|[[{'var',2423,'Alpha'}|[{'type',2423,'float',[]}]]]]}]]]]]]}]}],
		%% Line 2482
		'spec' =
		    %% Line 2482
		    [{{'accum',2},[{'type',2482,'bounded_fun',[{'type',2482,'fun',[{'type',2482,'product',[{'var',2482,'Op'}|[{'var',2482,'Value'}]]}|[{'atom',2482,'ok'}]]}|[[{'type',2482,'constraint',[{'atom',2482,'is_subtype'}|[[{'var',2482,'Op'}|[{'type',2482,'enum',[]}]]]]}|[{'type',2482,'constraint',[{'atom',2482,'is_subtype'}|[[{'var',2482,'Value'}|[{'type',2482,'float',[]}]]]]}]]]]}]}],
		%% Line 2505
		'spec' =
		    %% Line 2505
		    [{{'matrixMode',1},[{'type',2505,'bounded_fun',[{'type',2505,'fun',[{'type',2505,'product',[{'var',2505,'Mode'}]}|[{'atom',2505,'ok'}]]}|[[{'type',2505,'constraint',[{'atom',2505,'is_subtype'}|[[{'var',2505,'Mode'}|[{'type',2505,'enum',[]}]]]]}]]]}]}],
		%% Line 2530
		'spec' =
		    %% Line 2530
		    [{{'ortho',6},[{'type',2530,'bounded_fun',[{'type',2530,'fun',[{'type',2530,'product',[{'var',2530,'Left'}|[{'var',2530,'Right'}|[{'var',2530,'Bottom'}|[{'var',2530,'Top'}|[{'var',2530,'Near_val'}|[{'var',2530,'Far_val'}]]]]]]}|[{'atom',2530,'ok'}]]}|[[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Left'}|[{'type',2530,'float',[]}]]]]}|[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Right'}|[{'type',2530,'float',[]}]]]]}|[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Bottom'}|[{'type',2530,'float',[]}]]]]}|[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Top'}|[{'type',2530,'float',[]}]]]]}|[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Near_val'}|[{'type',2530,'float',[]}]]]]}|[{'type',2530,'constraint',[{'atom',2530,'is_subtype'}|[[{'var',2530,'Far_val'}|[{'type',2530,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 2560
		'spec' =
		    %% Line 2560
		    [{{'frustum',6},[{'type',2560,'bounded_fun',[{'type',2560,'fun',[{'type',2560,'product',[{'var',2560,'Left'}|[{'var',2560,'Right'}|[{'var',2560,'Bottom'}|[{'var',2560,'Top'}|[{'var',2560,'Near_val'}|[{'var',2560,'Far_val'}]]]]]]}|[{'atom',2560,'ok'}]]}|[[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Left'}|[{'type',2560,'float',[]}]]]]}|[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Right'}|[{'type',2560,'float',[]}]]]]}|[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Bottom'}|[{'type',2560,'float',[]}]]]]}|[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Top'}|[{'type',2560,'float',[]}]]]]}|[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Near_val'}|[{'type',2560,'float',[]}]]]]}|[{'type',2560,'constraint',[{'atom',2560,'is_subtype'}|[[{'var',2560,'Far_val'}|[{'type',2560,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 2578
		'spec' =
		    %% Line 2578
		    [{{'viewport',4},[{'type',2578,'bounded_fun',[{'type',2578,'fun',[{'type',2578,'product',[{'var',2578,'X'}|[{'var',2578,'Y'}|[{'var',2578,'Width'}|[{'var',2578,'Height'}]]]]}|[{'atom',2578,'ok'}]]}|[[{'type',2578,'constraint',[{'atom',2578,'is_subtype'}|[[{'var',2578,'X'}|[{'type',2578,'integer',[]}]]]]}|[{'type',2578,'constraint',[{'atom',2578,'is_subtype'}|[[{'var',2578,'Y'}|[{'type',2578,'integer',[]}]]]]}|[{'type',2578,'constraint',[{'atom',2578,'is_subtype'}|[[{'var',2578,'Width'}|[{'type',2578,'integer',[]}]]]]}|[{'type',2578,'constraint',[{'atom',2578,'is_subtype'}|[[{'var',2578,'Height'}|[{'type',2578,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 2603
		'spec' =
		    %% Line 2603
		    [{{'pushMatrix',0},[{'type',2603,'fun',[{'type',2603,'product',[]}|[{'atom',2603,'ok'}]]}]}],
		%% Line 2609
		'spec' =
		    %% Line 2609
		    [{{'popMatrix',0},[{'type',2609,'fun',[{'type',2609,'product',[]}|[{'atom',2609,'ok'}]]}]}],
		%% Line 2623
		'spec' =
		    %% Line 2623
		    [{{'loadIdentity',0},[{'type',2623,'fun',[{'type',2623,'product',[]}|[{'atom',2623,'ok'}]]}]}],
		%% Line 2643
		'spec' =
		    %% Line 2643
		    [{{'loadMatrixd',1},[{'type',2643,'bounded_fun',[{'type',2643,'fun',[{'type',2643,'product',[{'var',2643,'M'}]}|[{'atom',2643,'ok'}]]}|[[{'type',2643,'constraint',[{'atom',2643,'is_subtype'}|[[{'var',2643,'M'}|[{'type',2643,'matrix',[]}]]]]}]]]}]}],
		%% Line 2651
		'spec' =
		    %% Line 2651
		    [{{'loadMatrixf',1},[{'type',2651,'bounded_fun',[{'type',2651,'fun',[{'type',2651,'product',[{'var',2651,'M'}]}|[{'atom',2651,'ok'}]]}|[[{'type',2651,'constraint',[{'atom',2651,'is_subtype'}|[[{'var',2651,'M'}|[{'type',2651,'matrix',[]}]]]]}]]]}]}],
		%% Line 2666
		'spec' =
		    %% Line 2666
		    [{{'multMatrixd',1},[{'type',2666,'bounded_fun',[{'type',2666,'fun',[{'type',2666,'product',[{'var',2666,'M'}]}|[{'atom',2666,'ok'}]]}|[[{'type',2666,'constraint',[{'atom',2666,'is_subtype'}|[[{'var',2666,'M'}|[{'type',2666,'matrix',[]}]]]]}]]]}]}],
		%% Line 2674
		'spec' =
		    %% Line 2674
		    [{{'multMatrixf',1},[{'type',2674,'bounded_fun',[{'type',2674,'fun',[{'type',2674,'product',[{'var',2674,'M'}]}|[{'atom',2674,'ok'}]]}|[[{'type',2674,'constraint',[{'atom',2674,'is_subtype'}|[[{'var',2674,'M'}|[{'type',2674,'matrix',[]}]]]]}]]]}]}],
		%% Line 2697
		'spec' =
		    %% Line 2697
		    [{{'rotated',4},[{'type',2697,'bounded_fun',[{'type',2697,'fun',[{'type',2697,'product',[{'var',2697,'Angle'}|[{'var',2697,'X'}|[{'var',2697,'Y'}|[{'var',2697,'Z'}]]]]}|[{'atom',2697,'ok'}]]}|[[{'type',2697,'constraint',[{'atom',2697,'is_subtype'}|[[{'var',2697,'Angle'}|[{'type',2697,'float',[]}]]]]}|[{'type',2697,'constraint',[{'atom',2697,'is_subtype'}|[[{'var',2697,'X'}|[{'type',2697,'float',[]}]]]]}|[{'type',2697,'constraint',[{'atom',2697,'is_subtype'}|[[{'var',2697,'Y'}|[{'type',2697,'float',[]}]]]]}|[{'type',2697,'constraint',[{'atom',2697,'is_subtype'}|[[{'var',2697,'Z'}|[{'type',2697,'float',[]}]]]]}]]]]]]}]}],
		%% Line 2703
		'spec' =
		    %% Line 2703
		    [{{'rotatef',4},[{'type',2703,'bounded_fun',[{'type',2703,'fun',[{'type',2703,'product',[{'var',2703,'Angle'}|[{'var',2703,'X'}|[{'var',2703,'Y'}|[{'var',2703,'Z'}]]]]}|[{'atom',2703,'ok'}]]}|[[{'type',2703,'constraint',[{'atom',2703,'is_subtype'}|[[{'var',2703,'Angle'}|[{'type',2703,'float',[]}]]]]}|[{'type',2703,'constraint',[{'atom',2703,'is_subtype'}|[[{'var',2703,'X'}|[{'type',2703,'float',[]}]]]]}|[{'type',2703,'constraint',[{'atom',2703,'is_subtype'}|[[{'var',2703,'Y'}|[{'type',2703,'float',[]}]]]]}|[{'type',2703,'constraint',[{'atom',2703,'is_subtype'}|[[{'var',2703,'Z'}|[{'type',2703,'float',[]}]]]]}]]]]]]}]}],
		%% Line 2726
		'spec' =
		    %% Line 2726
		    [{{'scaled',3},[{'type',2726,'bounded_fun',[{'type',2726,'fun',[{'type',2726,'product',[{'var',2726,'X'}|[{'var',2726,'Y'}|[{'var',2726,'Z'}]]]}|[{'atom',2726,'ok'}]]}|[[{'type',2726,'constraint',[{'atom',2726,'is_subtype'}|[[{'var',2726,'X'}|[{'type',2726,'float',[]}]]]]}|[{'type',2726,'constraint',[{'atom',2726,'is_subtype'}|[[{'var',2726,'Y'}|[{'type',2726,'float',[]}]]]]}|[{'type',2726,'constraint',[{'atom',2726,'is_subtype'}|[[{'var',2726,'Z'}|[{'type',2726,'float',[]}]]]]}]]]]]}]}],
		%% Line 2732
		'spec' =
		    %% Line 2732
		    [{{'scalef',3},[{'type',2732,'bounded_fun',[{'type',2732,'fun',[{'type',2732,'product',[{'var',2732,'X'}|[{'var',2732,'Y'}|[{'var',2732,'Z'}]]]}|[{'atom',2732,'ok'}]]}|[[{'type',2732,'constraint',[{'atom',2732,'is_subtype'}|[[{'var',2732,'X'}|[{'type',2732,'float',[]}]]]]}|[{'type',2732,'constraint',[{'atom',2732,'is_subtype'}|[[{'var',2732,'Y'}|[{'type',2732,'float',[]}]]]]}|[{'type',2732,'constraint',[{'atom',2732,'is_subtype'}|[[{'var',2732,'Z'}|[{'type',2732,'float',[]}]]]]}]]]]]}]}],
		%% Line 2751
		'spec' =
		    %% Line 2751
		    [{{'translated',3},[{'type',2751,'bounded_fun',[{'type',2751,'fun',[{'type',2751,'product',[{'var',2751,'X'}|[{'var',2751,'Y'}|[{'var',2751,'Z'}]]]}|[{'atom',2751,'ok'}]]}|[[{'type',2751,'constraint',[{'atom',2751,'is_subtype'}|[[{'var',2751,'X'}|[{'type',2751,'float',[]}]]]]}|[{'type',2751,'constraint',[{'atom',2751,'is_subtype'}|[[{'var',2751,'Y'}|[{'type',2751,'float',[]}]]]]}|[{'type',2751,'constraint',[{'atom',2751,'is_subtype'}|[[{'var',2751,'Z'}|[{'type',2751,'float',[]}]]]]}]]]]]}]}],
		%% Line 2757
		'spec' =
		    %% Line 2757
		    [{{'translatef',3},[{'type',2757,'bounded_fun',[{'type',2757,'fun',[{'type',2757,'product',[{'var',2757,'X'}|[{'var',2757,'Y'}|[{'var',2757,'Z'}]]]}|[{'atom',2757,'ok'}]]}|[[{'type',2757,'constraint',[{'atom',2757,'is_subtype'}|[[{'var',2757,'X'}|[{'type',2757,'float',[]}]]]]}|[{'type',2757,'constraint',[{'atom',2757,'is_subtype'}|[[{'var',2757,'Y'}|[{'type',2757,'float',[]}]]]]}|[{'type',2757,'constraint',[{'atom',2757,'is_subtype'}|[[{'var',2757,'Z'}|[{'type',2757,'float',[]}]]]]}]]]]]}]}],
		%% Line 2770
		'spec' =
		    %% Line 2770
		    [{{'isList',1},[{'type',2770,'bounded_fun',[{'type',2770,'fun',[{'type',2770,'product',[{'var',2770,'List'}]}|[{'type',2770,'union',[{'integer',2770,0}|[{'integer',2770,1}]]}]]}|[[{'type',2770,'constraint',[{'atom',2770,'is_subtype'}|[[{'var',2770,'List'}|[{'type',2770,'integer',[]}]]]]}]]]}]}],
		%% Line 2786
		'spec' =
		    %% Line 2786
		    [{{'deleteLists',2},[{'type',2786,'bounded_fun',[{'type',2786,'fun',[{'type',2786,'product',[{'var',2786,'List'}|[{'var',2786,'Range'}]]}|[{'atom',2786,'ok'}]]}|[[{'type',2786,'constraint',[{'atom',2786,'is_subtype'}|[[{'var',2786,'List'}|[{'type',2786,'integer',[]}]]]]}|[{'type',2786,'constraint',[{'atom',2786,'is_subtype'}|[[{'var',2786,'Range'}|[{'type',2786,'integer',[]}]]]]}]]]]}]}],
		%% Line 2799
		'spec' =
		    %% Line 2799
		    [{{'genLists',1},[{'type',2799,'bounded_fun',[{'type',2799,'fun',[{'type',2799,'product',[{'var',2799,'Range'}]}|[{'type',2799,'integer',[]}]]}|[[{'type',2799,'constraint',[{'atom',2799,'is_subtype'}|[[{'var',2799,'Range'}|[{'type',2799,'integer',[]}]]]]}]]]}]}],
		%% Line 2849
		'spec' =
		    %% Line 2849
		    [{{'newList',2},[{'type',2849,'bounded_fun',[{'type',2849,'fun',[{'type',2849,'product',[{'var',2849,'List'}|[{'var',2849,'Mode'}]]}|[{'atom',2849,'ok'}]]}|[[{'type',2849,'constraint',[{'atom',2849,'is_subtype'}|[[{'var',2849,'List'}|[{'type',2849,'integer',[]}]]]]}|[{'type',2849,'constraint',[{'atom',2849,'is_subtype'}|[[{'var',2849,'Mode'}|[{'type',2849,'enum',[]}]]]]}]]]]}]}],
		%% Line 2856
		'spec' =
		    %% Line 2856
		    [{{'endList',0},[{'type',2856,'fun',[{'type',2856,'product',[]}|[{'atom',2856,'ok'}]]}]}],
		%% Line 2878
		'spec' =
		    %% Line 2878
		    [{{'callList',1},[{'type',2878,'bounded_fun',[{'type',2878,'fun',[{'type',2878,'product',[{'var',2878,'List'}]}|[{'atom',2878,'ok'}]]}|[[{'type',2878,'constraint',[{'atom',2878,'is_subtype'}|[[{'var',2878,'List'}|[{'type',2878,'integer',[]}]]]]}]]]}]}],
		%% Line 2945
		'spec' =
		    %% Line 2945
		    [{{'callLists',1},[{'type',2945,'bounded_fun',[{'type',2945,'fun',[{'type',2945,'product',[{'var',2945,'Lists'}]}|[{'atom',2945,'ok'}]]}|[[{'type',2945,'constraint',[{'atom',2945,'is_subtype'}|[[{'var',2945,'Lists'}|[{'type',2945,'list',[{'type',2945,'integer',[]}]}]]]]}]]]}]}],
		%% Line 2959
		'spec' =
		    %% Line 2959
		    [{{'listBase',1},[{'type',2959,'bounded_fun',[{'type',2959,'fun',[{'type',2959,'product',[{'var',2959,'Base'}]}|[{'atom',2959,'ok'}]]}|[[{'type',2959,'constraint',[{'atom',2959,'is_subtype'}|[[{'var',2959,'Base'}|[{'type',2959,'integer',[]}]]]]}]]]}]}],
		%% Line 3030
		'spec' =
		    %% Line 3030
		    [{{'begin',1},[{'type',3030,'bounded_fun',[{'type',3030,'fun',[{'type',3030,'product',[{'var',3030,'Mode'}]}|[{'atom',3030,'ok'}]]}|[[{'type',3030,'constraint',[{'atom',3030,'is_subtype'}|[[{'var',3030,'Mode'}|[{'type',3030,'enum',[]}]]]]}]]]}]}],
		%% Line 3036
		'spec' =
		    %% Line 3036
		    [{{'end',0},[{'type',3036,'fun',[{'type',3036,'product',[]}|[{'atom',3036,'ok'}]]}]}],
		%% Line 3050
		'spec' =
		    %% Line 3050
		    [{{'vertex2d',2},[{'type',3050,'bounded_fun',[{'type',3050,'fun',[{'type',3050,'product',[{'var',3050,'X'}|[{'var',3050,'Y'}]]}|[{'atom',3050,'ok'}]]}|[[{'type',3050,'constraint',[{'atom',3050,'is_subtype'}|[[{'var',3050,'X'}|[{'type',3050,'float',[]}]]]]}|[{'type',3050,'constraint',[{'atom',3050,'is_subtype'}|[[{'var',3050,'Y'}|[{'type',3050,'float',[]}]]]]}]]]]}]}],
		%% Line 3056
		'spec' =
		    %% Line 3056
		    [{{'vertex2f',2},[{'type',3056,'bounded_fun',[{'type',3056,'fun',[{'type',3056,'product',[{'var',3056,'X'}|[{'var',3056,'Y'}]]}|[{'atom',3056,'ok'}]]}|[[{'type',3056,'constraint',[{'atom',3056,'is_subtype'}|[[{'var',3056,'X'}|[{'type',3056,'float',[]}]]]]}|[{'type',3056,'constraint',[{'atom',3056,'is_subtype'}|[[{'var',3056,'Y'}|[{'type',3056,'float',[]}]]]]}]]]]}]}],
		%% Line 3062
		'spec' =
		    %% Line 3062
		    [{{'vertex2i',2},[{'type',3062,'bounded_fun',[{'type',3062,'fun',[{'type',3062,'product',[{'var',3062,'X'}|[{'var',3062,'Y'}]]}|[{'atom',3062,'ok'}]]}|[[{'type',3062,'constraint',[{'atom',3062,'is_subtype'}|[[{'var',3062,'X'}|[{'type',3062,'integer',[]}]]]]}|[{'type',3062,'constraint',[{'atom',3062,'is_subtype'}|[[{'var',3062,'Y'}|[{'type',3062,'integer',[]}]]]]}]]]]}]}],
		%% Line 3068
		'spec' =
		    %% Line 3068
		    [{{'vertex2s',2},[{'type',3068,'bounded_fun',[{'type',3068,'fun',[{'type',3068,'product',[{'var',3068,'X'}|[{'var',3068,'Y'}]]}|[{'atom',3068,'ok'}]]}|[[{'type',3068,'constraint',[{'atom',3068,'is_subtype'}|[[{'var',3068,'X'}|[{'type',3068,'integer',[]}]]]]}|[{'type',3068,'constraint',[{'atom',3068,'is_subtype'}|[[{'var',3068,'Y'}|[{'type',3068,'integer',[]}]]]]}]]]]}]}],
		%% Line 3074
		'spec' =
		    %% Line 3074
		    [{{'vertex3d',3},[{'type',3074,'bounded_fun',[{'type',3074,'fun',[{'type',3074,'product',[{'var',3074,'X'}|[{'var',3074,'Y'}|[{'var',3074,'Z'}]]]}|[{'atom',3074,'ok'}]]}|[[{'type',3074,'constraint',[{'atom',3074,'is_subtype'}|[[{'var',3074,'X'}|[{'type',3074,'float',[]}]]]]}|[{'type',3074,'constraint',[{'atom',3074,'is_subtype'}|[[{'var',3074,'Y'}|[{'type',3074,'float',[]}]]]]}|[{'type',3074,'constraint',[{'atom',3074,'is_subtype'}|[[{'var',3074,'Z'}|[{'type',3074,'float',[]}]]]]}]]]]]}]}],
		%% Line 3080
		'spec' =
		    %% Line 3080
		    [{{'vertex3f',3},[{'type',3080,'bounded_fun',[{'type',3080,'fun',[{'type',3080,'product',[{'var',3080,'X'}|[{'var',3080,'Y'}|[{'var',3080,'Z'}]]]}|[{'atom',3080,'ok'}]]}|[[{'type',3080,'constraint',[{'atom',3080,'is_subtype'}|[[{'var',3080,'X'}|[{'type',3080,'float',[]}]]]]}|[{'type',3080,'constraint',[{'atom',3080,'is_subtype'}|[[{'var',3080,'Y'}|[{'type',3080,'float',[]}]]]]}|[{'type',3080,'constraint',[{'atom',3080,'is_subtype'}|[[{'var',3080,'Z'}|[{'type',3080,'float',[]}]]]]}]]]]]}]}],
		%% Line 3086
		'spec' =
		    %% Line 3086
		    [{{'vertex3i',3},[{'type',3086,'bounded_fun',[{'type',3086,'fun',[{'type',3086,'product',[{'var',3086,'X'}|[{'var',3086,'Y'}|[{'var',3086,'Z'}]]]}|[{'atom',3086,'ok'}]]}|[[{'type',3086,'constraint',[{'atom',3086,'is_subtype'}|[[{'var',3086,'X'}|[{'type',3086,'integer',[]}]]]]}|[{'type',3086,'constraint',[{'atom',3086,'is_subtype'}|[[{'var',3086,'Y'}|[{'type',3086,'integer',[]}]]]]}|[{'type',3086,'constraint',[{'atom',3086,'is_subtype'}|[[{'var',3086,'Z'}|[{'type',3086,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3092
		'spec' =
		    %% Line 3092
		    [{{'vertex3s',3},[{'type',3092,'bounded_fun',[{'type',3092,'fun',[{'type',3092,'product',[{'var',3092,'X'}|[{'var',3092,'Y'}|[{'var',3092,'Z'}]]]}|[{'atom',3092,'ok'}]]}|[[{'type',3092,'constraint',[{'atom',3092,'is_subtype'}|[[{'var',3092,'X'}|[{'type',3092,'integer',[]}]]]]}|[{'type',3092,'constraint',[{'atom',3092,'is_subtype'}|[[{'var',3092,'Y'}|[{'type',3092,'integer',[]}]]]]}|[{'type',3092,'constraint',[{'atom',3092,'is_subtype'}|[[{'var',3092,'Z'}|[{'type',3092,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3098
		'spec' =
		    %% Line 3098
		    [{{'vertex4d',4},[{'type',3098,'bounded_fun',[{'type',3098,'fun',[{'type',3098,'product',[{'var',3098,'X'}|[{'var',3098,'Y'}|[{'var',3098,'Z'}|[{'var',3098,'W'}]]]]}|[{'atom',3098,'ok'}]]}|[[{'type',3098,'constraint',[{'atom',3098,'is_subtype'}|[[{'var',3098,'X'}|[{'type',3098,'float',[]}]]]]}|[{'type',3098,'constraint',[{'atom',3098,'is_subtype'}|[[{'var',3098,'Y'}|[{'type',3098,'float',[]}]]]]}|[{'type',3098,'constraint',[{'atom',3098,'is_subtype'}|[[{'var',3098,'Z'}|[{'type',3098,'float',[]}]]]]}|[{'type',3098,'constraint',[{'atom',3098,'is_subtype'}|[[{'var',3098,'W'}|[{'type',3098,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3104
		'spec' =
		    %% Line 3104
		    [{{'vertex4f',4},[{'type',3104,'bounded_fun',[{'type',3104,'fun',[{'type',3104,'product',[{'var',3104,'X'}|[{'var',3104,'Y'}|[{'var',3104,'Z'}|[{'var',3104,'W'}]]]]}|[{'atom',3104,'ok'}]]}|[[{'type',3104,'constraint',[{'atom',3104,'is_subtype'}|[[{'var',3104,'X'}|[{'type',3104,'float',[]}]]]]}|[{'type',3104,'constraint',[{'atom',3104,'is_subtype'}|[[{'var',3104,'Y'}|[{'type',3104,'float',[]}]]]]}|[{'type',3104,'constraint',[{'atom',3104,'is_subtype'}|[[{'var',3104,'Z'}|[{'type',3104,'float',[]}]]]]}|[{'type',3104,'constraint',[{'atom',3104,'is_subtype'}|[[{'var',3104,'W'}|[{'type',3104,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3110
		'spec' =
		    %% Line 3110
		    [{{'vertex4i',4},[{'type',3110,'bounded_fun',[{'type',3110,'fun',[{'type',3110,'product',[{'var',3110,'X'}|[{'var',3110,'Y'}|[{'var',3110,'Z'}|[{'var',3110,'W'}]]]]}|[{'atom',3110,'ok'}]]}|[[{'type',3110,'constraint',[{'atom',3110,'is_subtype'}|[[{'var',3110,'X'}|[{'type',3110,'integer',[]}]]]]}|[{'type',3110,'constraint',[{'atom',3110,'is_subtype'}|[[{'var',3110,'Y'}|[{'type',3110,'integer',[]}]]]]}|[{'type',3110,'constraint',[{'atom',3110,'is_subtype'}|[[{'var',3110,'Z'}|[{'type',3110,'integer',[]}]]]]}|[{'type',3110,'constraint',[{'atom',3110,'is_subtype'}|[[{'var',3110,'W'}|[{'type',3110,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3116
		'spec' =
		    %% Line 3116
		    [{{'vertex4s',4},[{'type',3116,'bounded_fun',[{'type',3116,'fun',[{'type',3116,'product',[{'var',3116,'X'}|[{'var',3116,'Y'}|[{'var',3116,'Z'}|[{'var',3116,'W'}]]]]}|[{'atom',3116,'ok'}]]}|[[{'type',3116,'constraint',[{'atom',3116,'is_subtype'}|[[{'var',3116,'X'}|[{'type',3116,'integer',[]}]]]]}|[{'type',3116,'constraint',[{'atom',3116,'is_subtype'}|[[{'var',3116,'Y'}|[{'type',3116,'integer',[]}]]]]}|[{'type',3116,'constraint',[{'atom',3116,'is_subtype'}|[[{'var',3116,'Z'}|[{'type',3116,'integer',[]}]]]]}|[{'type',3116,'constraint',[{'atom',3116,'is_subtype'}|[[{'var',3116,'W'}|[{'type',3116,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3121
		'spec' =
		    %% Line 3121
		    [{{'vertex2dv',1},[{'type',3121,'bounded_fun',[{'type',3121,'fun',[{'type',3121,'product',[{'var',3121,'V'}]}|[{'atom',3121,'ok'}]]}|[[{'type',3121,'constraint',[{'atom',3121,'is_subtype'}|[[{'var',3121,'V'}|[{'type',3121,'tuple',[{'ann_type',3121,[{'var',3121,'X'}|[{'type',3121,'float',[]}]]}|[{'ann_type',3121,[{'var',3121,'Y'}|[{'type',3121,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3125
		'spec' =
		    %% Line 3125
		    [{{'vertex2fv',1},[{'type',3125,'bounded_fun',[{'type',3125,'fun',[{'type',3125,'product',[{'var',3125,'V'}]}|[{'atom',3125,'ok'}]]}|[[{'type',3125,'constraint',[{'atom',3125,'is_subtype'}|[[{'var',3125,'V'}|[{'type',3125,'tuple',[{'ann_type',3125,[{'var',3125,'X'}|[{'type',3125,'float',[]}]]}|[{'ann_type',3125,[{'var',3125,'Y'}|[{'type',3125,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3129
		'spec' =
		    %% Line 3129
		    [{{'vertex2iv',1},[{'type',3129,'bounded_fun',[{'type',3129,'fun',[{'type',3129,'product',[{'var',3129,'V'}]}|[{'atom',3129,'ok'}]]}|[[{'type',3129,'constraint',[{'atom',3129,'is_subtype'}|[[{'var',3129,'V'}|[{'type',3129,'tuple',[{'ann_type',3129,[{'var',3129,'X'}|[{'type',3129,'integer',[]}]]}|[{'ann_type',3129,[{'var',3129,'Y'}|[{'type',3129,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3133
		'spec' =
		    %% Line 3133
		    [{{'vertex2sv',1},[{'type',3133,'bounded_fun',[{'type',3133,'fun',[{'type',3133,'product',[{'var',3133,'V'}]}|[{'atom',3133,'ok'}]]}|[[{'type',3133,'constraint',[{'atom',3133,'is_subtype'}|[[{'var',3133,'V'}|[{'type',3133,'tuple',[{'ann_type',3133,[{'var',3133,'X'}|[{'type',3133,'integer',[]}]]}|[{'ann_type',3133,[{'var',3133,'Y'}|[{'type',3133,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3137
		'spec' =
		    %% Line 3137
		    [{{'vertex3dv',1},[{'type',3137,'bounded_fun',[{'type',3137,'fun',[{'type',3137,'product',[{'var',3137,'V'}]}|[{'atom',3137,'ok'}]]}|[[{'type',3137,'constraint',[{'atom',3137,'is_subtype'}|[[{'var',3137,'V'}|[{'type',3137,'tuple',[{'ann_type',3137,[{'var',3137,'X'}|[{'type',3137,'float',[]}]]}|[{'ann_type',3137,[{'var',3137,'Y'}|[{'type',3137,'float',[]}]]}|[{'ann_type',3137,[{'var',3137,'Z'}|[{'type',3137,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3141
		'spec' =
		    %% Line 3141
		    [{{'vertex3fv',1},[{'type',3141,'bounded_fun',[{'type',3141,'fun',[{'type',3141,'product',[{'var',3141,'V'}]}|[{'atom',3141,'ok'}]]}|[[{'type',3141,'constraint',[{'atom',3141,'is_subtype'}|[[{'var',3141,'V'}|[{'type',3141,'tuple',[{'ann_type',3141,[{'var',3141,'X'}|[{'type',3141,'float',[]}]]}|[{'ann_type',3141,[{'var',3141,'Y'}|[{'type',3141,'float',[]}]]}|[{'ann_type',3141,[{'var',3141,'Z'}|[{'type',3141,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3145
		'spec' =
		    %% Line 3145
		    [{{'vertex3iv',1},[{'type',3145,'bounded_fun',[{'type',3145,'fun',[{'type',3145,'product',[{'var',3145,'V'}]}|[{'atom',3145,'ok'}]]}|[[{'type',3145,'constraint',[{'atom',3145,'is_subtype'}|[[{'var',3145,'V'}|[{'type',3145,'tuple',[{'ann_type',3145,[{'var',3145,'X'}|[{'type',3145,'integer',[]}]]}|[{'ann_type',3145,[{'var',3145,'Y'}|[{'type',3145,'integer',[]}]]}|[{'ann_type',3145,[{'var',3145,'Z'}|[{'type',3145,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3149
		'spec' =
		    %% Line 3149
		    [{{'vertex3sv',1},[{'type',3149,'bounded_fun',[{'type',3149,'fun',[{'type',3149,'product',[{'var',3149,'V'}]}|[{'atom',3149,'ok'}]]}|[[{'type',3149,'constraint',[{'atom',3149,'is_subtype'}|[[{'var',3149,'V'}|[{'type',3149,'tuple',[{'ann_type',3149,[{'var',3149,'X'}|[{'type',3149,'integer',[]}]]}|[{'ann_type',3149,[{'var',3149,'Y'}|[{'type',3149,'integer',[]}]]}|[{'ann_type',3149,[{'var',3149,'Z'}|[{'type',3149,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3153
		'spec' =
		    %% Line 3153
		    [{{'vertex4dv',1},[{'type',3153,'bounded_fun',[{'type',3153,'fun',[{'type',3153,'product',[{'var',3153,'V'}]}|[{'atom',3153,'ok'}]]}|[[{'type',3153,'constraint',[{'atom',3153,'is_subtype'}|[[{'var',3153,'V'}|[{'type',3153,'tuple',[{'ann_type',3153,[{'var',3153,'X'}|[{'type',3153,'float',[]}]]}|[{'ann_type',3153,[{'var',3153,'Y'}|[{'type',3153,'float',[]}]]}|[{'ann_type',3153,[{'var',3153,'Z'}|[{'type',3153,'float',[]}]]}|[{'ann_type',3153,[{'var',3153,'W'}|[{'type',3153,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3157
		'spec' =
		    %% Line 3157
		    [{{'vertex4fv',1},[{'type',3157,'bounded_fun',[{'type',3157,'fun',[{'type',3157,'product',[{'var',3157,'V'}]}|[{'atom',3157,'ok'}]]}|[[{'type',3157,'constraint',[{'atom',3157,'is_subtype'}|[[{'var',3157,'V'}|[{'type',3157,'tuple',[{'ann_type',3157,[{'var',3157,'X'}|[{'type',3157,'float',[]}]]}|[{'ann_type',3157,[{'var',3157,'Y'}|[{'type',3157,'float',[]}]]}|[{'ann_type',3157,[{'var',3157,'Z'}|[{'type',3157,'float',[]}]]}|[{'ann_type',3157,[{'var',3157,'W'}|[{'type',3157,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3161
		'spec' =
		    %% Line 3161
		    [{{'vertex4iv',1},[{'type',3161,'bounded_fun',[{'type',3161,'fun',[{'type',3161,'product',[{'var',3161,'V'}]}|[{'atom',3161,'ok'}]]}|[[{'type',3161,'constraint',[{'atom',3161,'is_subtype'}|[[{'var',3161,'V'}|[{'type',3161,'tuple',[{'ann_type',3161,[{'var',3161,'X'}|[{'type',3161,'integer',[]}]]}|[{'ann_type',3161,[{'var',3161,'Y'}|[{'type',3161,'integer',[]}]]}|[{'ann_type',3161,[{'var',3161,'Z'}|[{'type',3161,'integer',[]}]]}|[{'ann_type',3161,[{'var',3161,'W'}|[{'type',3161,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3165
		'spec' =
		    %% Line 3165
		    [{{'vertex4sv',1},[{'type',3165,'bounded_fun',[{'type',3165,'fun',[{'type',3165,'product',[{'var',3165,'V'}]}|[{'atom',3165,'ok'}]]}|[[{'type',3165,'constraint',[{'atom',3165,'is_subtype'}|[[{'var',3165,'V'}|[{'type',3165,'tuple',[{'ann_type',3165,[{'var',3165,'X'}|[{'type',3165,'integer',[]}]]}|[{'ann_type',3165,[{'var',3165,'Y'}|[{'type',3165,'integer',[]}]]}|[{'ann_type',3165,[{'var',3165,'Z'}|[{'type',3165,'integer',[]}]]}|[{'ann_type',3165,[{'var',3165,'W'}|[{'type',3165,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3185
		'spec' =
		    %% Line 3185
		    [{{'normal3b',3},[{'type',3185,'bounded_fun',[{'type',3185,'fun',[{'type',3185,'product',[{'var',3185,'Nx'}|[{'var',3185,'Ny'}|[{'var',3185,'Nz'}]]]}|[{'atom',3185,'ok'}]]}|[[{'type',3185,'constraint',[{'atom',3185,'is_subtype'}|[[{'var',3185,'Nx'}|[{'type',3185,'integer',[]}]]]]}|[{'type',3185,'constraint',[{'atom',3185,'is_subtype'}|[[{'var',3185,'Ny'}|[{'type',3185,'integer',[]}]]]]}|[{'type',3185,'constraint',[{'atom',3185,'is_subtype'}|[[{'var',3185,'Nz'}|[{'type',3185,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3191
		'spec' =
		    %% Line 3191
		    [{{'normal3d',3},[{'type',3191,'bounded_fun',[{'type',3191,'fun',[{'type',3191,'product',[{'var',3191,'Nx'}|[{'var',3191,'Ny'}|[{'var',3191,'Nz'}]]]}|[{'atom',3191,'ok'}]]}|[[{'type',3191,'constraint',[{'atom',3191,'is_subtype'}|[[{'var',3191,'Nx'}|[{'type',3191,'float',[]}]]]]}|[{'type',3191,'constraint',[{'atom',3191,'is_subtype'}|[[{'var',3191,'Ny'}|[{'type',3191,'float',[]}]]]]}|[{'type',3191,'constraint',[{'atom',3191,'is_subtype'}|[[{'var',3191,'Nz'}|[{'type',3191,'float',[]}]]]]}]]]]]}]}],
		%% Line 3197
		'spec' =
		    %% Line 3197
		    [{{'normal3f',3},[{'type',3197,'bounded_fun',[{'type',3197,'fun',[{'type',3197,'product',[{'var',3197,'Nx'}|[{'var',3197,'Ny'}|[{'var',3197,'Nz'}]]]}|[{'atom',3197,'ok'}]]}|[[{'type',3197,'constraint',[{'atom',3197,'is_subtype'}|[[{'var',3197,'Nx'}|[{'type',3197,'float',[]}]]]]}|[{'type',3197,'constraint',[{'atom',3197,'is_subtype'}|[[{'var',3197,'Ny'}|[{'type',3197,'float',[]}]]]]}|[{'type',3197,'constraint',[{'atom',3197,'is_subtype'}|[[{'var',3197,'Nz'}|[{'type',3197,'float',[]}]]]]}]]]]]}]}],
		%% Line 3203
		'spec' =
		    %% Line 3203
		    [{{'normal3i',3},[{'type',3203,'bounded_fun',[{'type',3203,'fun',[{'type',3203,'product',[{'var',3203,'Nx'}|[{'var',3203,'Ny'}|[{'var',3203,'Nz'}]]]}|[{'atom',3203,'ok'}]]}|[[{'type',3203,'constraint',[{'atom',3203,'is_subtype'}|[[{'var',3203,'Nx'}|[{'type',3203,'integer',[]}]]]]}|[{'type',3203,'constraint',[{'atom',3203,'is_subtype'}|[[{'var',3203,'Ny'}|[{'type',3203,'integer',[]}]]]]}|[{'type',3203,'constraint',[{'atom',3203,'is_subtype'}|[[{'var',3203,'Nz'}|[{'type',3203,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3209
		'spec' =
		    %% Line 3209
		    [{{'normal3s',3},[{'type',3209,'bounded_fun',[{'type',3209,'fun',[{'type',3209,'product',[{'var',3209,'Nx'}|[{'var',3209,'Ny'}|[{'var',3209,'Nz'}]]]}|[{'atom',3209,'ok'}]]}|[[{'type',3209,'constraint',[{'atom',3209,'is_subtype'}|[[{'var',3209,'Nx'}|[{'type',3209,'integer',[]}]]]]}|[{'type',3209,'constraint',[{'atom',3209,'is_subtype'}|[[{'var',3209,'Ny'}|[{'type',3209,'integer',[]}]]]]}|[{'type',3209,'constraint',[{'atom',3209,'is_subtype'}|[[{'var',3209,'Nz'}|[{'type',3209,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3214
		'spec' =
		    %% Line 3214
		    [{{'normal3bv',1},[{'type',3214,'bounded_fun',[{'type',3214,'fun',[{'type',3214,'product',[{'var',3214,'V'}]}|[{'atom',3214,'ok'}]]}|[[{'type',3214,'constraint',[{'atom',3214,'is_subtype'}|[[{'var',3214,'V'}|[{'type',3214,'tuple',[{'ann_type',3214,[{'var',3214,'Nx'}|[{'type',3214,'integer',[]}]]}|[{'ann_type',3214,[{'var',3214,'Ny'}|[{'type',3214,'integer',[]}]]}|[{'ann_type',3214,[{'var',3214,'Nz'}|[{'type',3214,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3218
		'spec' =
		    %% Line 3218
		    [{{'normal3dv',1},[{'type',3218,'bounded_fun',[{'type',3218,'fun',[{'type',3218,'product',[{'var',3218,'V'}]}|[{'atom',3218,'ok'}]]}|[[{'type',3218,'constraint',[{'atom',3218,'is_subtype'}|[[{'var',3218,'V'}|[{'type',3218,'tuple',[{'ann_type',3218,[{'var',3218,'Nx'}|[{'type',3218,'float',[]}]]}|[{'ann_type',3218,[{'var',3218,'Ny'}|[{'type',3218,'float',[]}]]}|[{'ann_type',3218,[{'var',3218,'Nz'}|[{'type',3218,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3222
		'spec' =
		    %% Line 3222
		    [{{'normal3fv',1},[{'type',3222,'bounded_fun',[{'type',3222,'fun',[{'type',3222,'product',[{'var',3222,'V'}]}|[{'atom',3222,'ok'}]]}|[[{'type',3222,'constraint',[{'atom',3222,'is_subtype'}|[[{'var',3222,'V'}|[{'type',3222,'tuple',[{'ann_type',3222,[{'var',3222,'Nx'}|[{'type',3222,'float',[]}]]}|[{'ann_type',3222,[{'var',3222,'Ny'}|[{'type',3222,'float',[]}]]}|[{'ann_type',3222,[{'var',3222,'Nz'}|[{'type',3222,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3226
		'spec' =
		    %% Line 3226
		    [{{'normal3iv',1},[{'type',3226,'bounded_fun',[{'type',3226,'fun',[{'type',3226,'product',[{'var',3226,'V'}]}|[{'atom',3226,'ok'}]]}|[[{'type',3226,'constraint',[{'atom',3226,'is_subtype'}|[[{'var',3226,'V'}|[{'type',3226,'tuple',[{'ann_type',3226,[{'var',3226,'Nx'}|[{'type',3226,'integer',[]}]]}|[{'ann_type',3226,[{'var',3226,'Ny'}|[{'type',3226,'integer',[]}]]}|[{'ann_type',3226,[{'var',3226,'Nz'}|[{'type',3226,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3230
		'spec' =
		    %% Line 3230
		    [{{'normal3sv',1},[{'type',3230,'bounded_fun',[{'type',3230,'fun',[{'type',3230,'product',[{'var',3230,'V'}]}|[{'atom',3230,'ok'}]]}|[[{'type',3230,'constraint',[{'atom',3230,'is_subtype'}|[[{'var',3230,'V'}|[{'type',3230,'tuple',[{'ann_type',3230,[{'var',3230,'Nx'}|[{'type',3230,'integer',[]}]]}|[{'ann_type',3230,[{'var',3230,'Ny'}|[{'type',3230,'integer',[]}]]}|[{'ann_type',3230,[{'var',3230,'Nz'}|[{'type',3230,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3247
		'spec' =
		    %% Line 3247
		    [{{'indexd',1},[{'type',3247,'bounded_fun',[{'type',3247,'fun',[{'type',3247,'product',[{'var',3247,'C'}]}|[{'atom',3247,'ok'}]]}|[[{'type',3247,'constraint',[{'atom',3247,'is_subtype'}|[[{'var',3247,'C'}|[{'type',3247,'float',[]}]]]]}]]]}]}],
		%% Line 3253
		'spec' =
		    %% Line 3253
		    [{{'indexf',1},[{'type',3253,'bounded_fun',[{'type',3253,'fun',[{'type',3253,'product',[{'var',3253,'C'}]}|[{'atom',3253,'ok'}]]}|[[{'type',3253,'constraint',[{'atom',3253,'is_subtype'}|[[{'var',3253,'C'}|[{'type',3253,'float',[]}]]]]}]]]}]}],
		%% Line 3259
		'spec' =
		    %% Line 3259
		    [{{'indexi',1},[{'type',3259,'bounded_fun',[{'type',3259,'fun',[{'type',3259,'product',[{'var',3259,'C'}]}|[{'atom',3259,'ok'}]]}|[[{'type',3259,'constraint',[{'atom',3259,'is_subtype'}|[[{'var',3259,'C'}|[{'type',3259,'integer',[]}]]]]}]]]}]}],
		%% Line 3265
		'spec' =
		    %% Line 3265
		    [{{'indexs',1},[{'type',3265,'bounded_fun',[{'type',3265,'fun',[{'type',3265,'product',[{'var',3265,'C'}]}|[{'atom',3265,'ok'}]]}|[[{'type',3265,'constraint',[{'atom',3265,'is_subtype'}|[[{'var',3265,'C'}|[{'type',3265,'integer',[]}]]]]}]]]}]}],
		%% Line 3271
		'spec' =
		    %% Line 3271
		    [{{'indexub',1},[{'type',3271,'bounded_fun',[{'type',3271,'fun',[{'type',3271,'product',[{'var',3271,'C'}]}|[{'atom',3271,'ok'}]]}|[[{'type',3271,'constraint',[{'atom',3271,'is_subtype'}|[[{'var',3271,'C'}|[{'type',3271,'integer',[]}]]]]}]]]}]}],
		%% Line 3276
		'spec' =
		    %% Line 3276
		    [{{'indexdv',1},[{'type',3276,'bounded_fun',[{'type',3276,'fun',[{'type',3276,'product',[{'var',3276,'C'}]}|[{'atom',3276,'ok'}]]}|[[{'type',3276,'constraint',[{'atom',3276,'is_subtype'}|[[{'var',3276,'C'}|[{'type',3276,'tuple',[{'ann_type',3276,[{'var',3276,'C'}|[{'type',3276,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 3280
		'spec' =
		    %% Line 3280
		    [{{'indexfv',1},[{'type',3280,'bounded_fun',[{'type',3280,'fun',[{'type',3280,'product',[{'var',3280,'C'}]}|[{'atom',3280,'ok'}]]}|[[{'type',3280,'constraint',[{'atom',3280,'is_subtype'}|[[{'var',3280,'C'}|[{'type',3280,'tuple',[{'ann_type',3280,[{'var',3280,'C'}|[{'type',3280,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 3284
		'spec' =
		    %% Line 3284
		    [{{'indexiv',1},[{'type',3284,'bounded_fun',[{'type',3284,'fun',[{'type',3284,'product',[{'var',3284,'C'}]}|[{'atom',3284,'ok'}]]}|[[{'type',3284,'constraint',[{'atom',3284,'is_subtype'}|[[{'var',3284,'C'}|[{'type',3284,'tuple',[{'ann_type',3284,[{'var',3284,'C'}|[{'type',3284,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 3288
		'spec' =
		    %% Line 3288
		    [{{'indexsv',1},[{'type',3288,'bounded_fun',[{'type',3288,'fun',[{'type',3288,'product',[{'var',3288,'C'}]}|[{'atom',3288,'ok'}]]}|[[{'type',3288,'constraint',[{'atom',3288,'is_subtype'}|[[{'var',3288,'C'}|[{'type',3288,'tuple',[{'ann_type',3288,[{'var',3288,'C'}|[{'type',3288,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 3292
		'spec' =
		    %% Line 3292
		    [{{'indexubv',1},[{'type',3292,'bounded_fun',[{'type',3292,'fun',[{'type',3292,'product',[{'var',3292,'C'}]}|[{'atom',3292,'ok'}]]}|[[{'type',3292,'constraint',[{'atom',3292,'is_subtype'}|[[{'var',3292,'C'}|[{'type',3292,'tuple',[{'ann_type',3292,[{'var',3292,'C'}|[{'type',3292,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 3321
		'spec' =
		    %% Line 3321
		    [{{'color3b',3},[{'type',3321,'bounded_fun',[{'type',3321,'fun',[{'type',3321,'product',[{'var',3321,'Red'}|[{'var',3321,'Green'}|[{'var',3321,'Blue'}]]]}|[{'atom',3321,'ok'}]]}|[[{'type',3321,'constraint',[{'atom',3321,'is_subtype'}|[[{'var',3321,'Red'}|[{'type',3321,'integer',[]}]]]]}|[{'type',3321,'constraint',[{'atom',3321,'is_subtype'}|[[{'var',3321,'Green'}|[{'type',3321,'integer',[]}]]]]}|[{'type',3321,'constraint',[{'atom',3321,'is_subtype'}|[[{'var',3321,'Blue'}|[{'type',3321,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3327
		'spec' =
		    %% Line 3327
		    [{{'color3d',3},[{'type',3327,'bounded_fun',[{'type',3327,'fun',[{'type',3327,'product',[{'var',3327,'Red'}|[{'var',3327,'Green'}|[{'var',3327,'Blue'}]]]}|[{'atom',3327,'ok'}]]}|[[{'type',3327,'constraint',[{'atom',3327,'is_subtype'}|[[{'var',3327,'Red'}|[{'type',3327,'float',[]}]]]]}|[{'type',3327,'constraint',[{'atom',3327,'is_subtype'}|[[{'var',3327,'Green'}|[{'type',3327,'float',[]}]]]]}|[{'type',3327,'constraint',[{'atom',3327,'is_subtype'}|[[{'var',3327,'Blue'}|[{'type',3327,'float',[]}]]]]}]]]]]}]}],
		%% Line 3333
		'spec' =
		    %% Line 3333
		    [{{'color3f',3},[{'type',3333,'bounded_fun',[{'type',3333,'fun',[{'type',3333,'product',[{'var',3333,'Red'}|[{'var',3333,'Green'}|[{'var',3333,'Blue'}]]]}|[{'atom',3333,'ok'}]]}|[[{'type',3333,'constraint',[{'atom',3333,'is_subtype'}|[[{'var',3333,'Red'}|[{'type',3333,'float',[]}]]]]}|[{'type',3333,'constraint',[{'atom',3333,'is_subtype'}|[[{'var',3333,'Green'}|[{'type',3333,'float',[]}]]]]}|[{'type',3333,'constraint',[{'atom',3333,'is_subtype'}|[[{'var',3333,'Blue'}|[{'type',3333,'float',[]}]]]]}]]]]]}]}],
		%% Line 3339
		'spec' =
		    %% Line 3339
		    [{{'color3i',3},[{'type',3339,'bounded_fun',[{'type',3339,'fun',[{'type',3339,'product',[{'var',3339,'Red'}|[{'var',3339,'Green'}|[{'var',3339,'Blue'}]]]}|[{'atom',3339,'ok'}]]}|[[{'type',3339,'constraint',[{'atom',3339,'is_subtype'}|[[{'var',3339,'Red'}|[{'type',3339,'integer',[]}]]]]}|[{'type',3339,'constraint',[{'atom',3339,'is_subtype'}|[[{'var',3339,'Green'}|[{'type',3339,'integer',[]}]]]]}|[{'type',3339,'constraint',[{'atom',3339,'is_subtype'}|[[{'var',3339,'Blue'}|[{'type',3339,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3345
		'spec' =
		    %% Line 3345
		    [{{'color3s',3},[{'type',3345,'bounded_fun',[{'type',3345,'fun',[{'type',3345,'product',[{'var',3345,'Red'}|[{'var',3345,'Green'}|[{'var',3345,'Blue'}]]]}|[{'atom',3345,'ok'}]]}|[[{'type',3345,'constraint',[{'atom',3345,'is_subtype'}|[[{'var',3345,'Red'}|[{'type',3345,'integer',[]}]]]]}|[{'type',3345,'constraint',[{'atom',3345,'is_subtype'}|[[{'var',3345,'Green'}|[{'type',3345,'integer',[]}]]]]}|[{'type',3345,'constraint',[{'atom',3345,'is_subtype'}|[[{'var',3345,'Blue'}|[{'type',3345,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3351
		'spec' =
		    %% Line 3351
		    [{{'color3ub',3},[{'type',3351,'bounded_fun',[{'type',3351,'fun',[{'type',3351,'product',[{'var',3351,'Red'}|[{'var',3351,'Green'}|[{'var',3351,'Blue'}]]]}|[{'atom',3351,'ok'}]]}|[[{'type',3351,'constraint',[{'atom',3351,'is_subtype'}|[[{'var',3351,'Red'}|[{'type',3351,'integer',[]}]]]]}|[{'type',3351,'constraint',[{'atom',3351,'is_subtype'}|[[{'var',3351,'Green'}|[{'type',3351,'integer',[]}]]]]}|[{'type',3351,'constraint',[{'atom',3351,'is_subtype'}|[[{'var',3351,'Blue'}|[{'type',3351,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3357
		'spec' =
		    %% Line 3357
		    [{{'color3ui',3},[{'type',3357,'bounded_fun',[{'type',3357,'fun',[{'type',3357,'product',[{'var',3357,'Red'}|[{'var',3357,'Green'}|[{'var',3357,'Blue'}]]]}|[{'atom',3357,'ok'}]]}|[[{'type',3357,'constraint',[{'atom',3357,'is_subtype'}|[[{'var',3357,'Red'}|[{'type',3357,'integer',[]}]]]]}|[{'type',3357,'constraint',[{'atom',3357,'is_subtype'}|[[{'var',3357,'Green'}|[{'type',3357,'integer',[]}]]]]}|[{'type',3357,'constraint',[{'atom',3357,'is_subtype'}|[[{'var',3357,'Blue'}|[{'type',3357,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3363
		'spec' =
		    %% Line 3363
		    [{{'color3us',3},[{'type',3363,'bounded_fun',[{'type',3363,'fun',[{'type',3363,'product',[{'var',3363,'Red'}|[{'var',3363,'Green'}|[{'var',3363,'Blue'}]]]}|[{'atom',3363,'ok'}]]}|[[{'type',3363,'constraint',[{'atom',3363,'is_subtype'}|[[{'var',3363,'Red'}|[{'type',3363,'integer',[]}]]]]}|[{'type',3363,'constraint',[{'atom',3363,'is_subtype'}|[[{'var',3363,'Green'}|[{'type',3363,'integer',[]}]]]]}|[{'type',3363,'constraint',[{'atom',3363,'is_subtype'}|[[{'var',3363,'Blue'}|[{'type',3363,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3369
		'spec' =
		    %% Line 3369
		    [{{'color4b',4},[{'type',3369,'bounded_fun',[{'type',3369,'fun',[{'type',3369,'product',[{'var',3369,'Red'}|[{'var',3369,'Green'}|[{'var',3369,'Blue'}|[{'var',3369,'Alpha'}]]]]}|[{'atom',3369,'ok'}]]}|[[{'type',3369,'constraint',[{'atom',3369,'is_subtype'}|[[{'var',3369,'Red'}|[{'type',3369,'integer',[]}]]]]}|[{'type',3369,'constraint',[{'atom',3369,'is_subtype'}|[[{'var',3369,'Green'}|[{'type',3369,'integer',[]}]]]]}|[{'type',3369,'constraint',[{'atom',3369,'is_subtype'}|[[{'var',3369,'Blue'}|[{'type',3369,'integer',[]}]]]]}|[{'type',3369,'constraint',[{'atom',3369,'is_subtype'}|[[{'var',3369,'Alpha'}|[{'type',3369,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3375
		'spec' =
		    %% Line 3375
		    [{{'color4d',4},[{'type',3375,'bounded_fun',[{'type',3375,'fun',[{'type',3375,'product',[{'var',3375,'Red'}|[{'var',3375,'Green'}|[{'var',3375,'Blue'}|[{'var',3375,'Alpha'}]]]]}|[{'atom',3375,'ok'}]]}|[[{'type',3375,'constraint',[{'atom',3375,'is_subtype'}|[[{'var',3375,'Red'}|[{'type',3375,'float',[]}]]]]}|[{'type',3375,'constraint',[{'atom',3375,'is_subtype'}|[[{'var',3375,'Green'}|[{'type',3375,'float',[]}]]]]}|[{'type',3375,'constraint',[{'atom',3375,'is_subtype'}|[[{'var',3375,'Blue'}|[{'type',3375,'float',[]}]]]]}|[{'type',3375,'constraint',[{'atom',3375,'is_subtype'}|[[{'var',3375,'Alpha'}|[{'type',3375,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3381
		'spec' =
		    %% Line 3381
		    [{{'color4f',4},[{'type',3381,'bounded_fun',[{'type',3381,'fun',[{'type',3381,'product',[{'var',3381,'Red'}|[{'var',3381,'Green'}|[{'var',3381,'Blue'}|[{'var',3381,'Alpha'}]]]]}|[{'atom',3381,'ok'}]]}|[[{'type',3381,'constraint',[{'atom',3381,'is_subtype'}|[[{'var',3381,'Red'}|[{'type',3381,'float',[]}]]]]}|[{'type',3381,'constraint',[{'atom',3381,'is_subtype'}|[[{'var',3381,'Green'}|[{'type',3381,'float',[]}]]]]}|[{'type',3381,'constraint',[{'atom',3381,'is_subtype'}|[[{'var',3381,'Blue'}|[{'type',3381,'float',[]}]]]]}|[{'type',3381,'constraint',[{'atom',3381,'is_subtype'}|[[{'var',3381,'Alpha'}|[{'type',3381,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3387
		'spec' =
		    %% Line 3387
		    [{{'color4i',4},[{'type',3387,'bounded_fun',[{'type',3387,'fun',[{'type',3387,'product',[{'var',3387,'Red'}|[{'var',3387,'Green'}|[{'var',3387,'Blue'}|[{'var',3387,'Alpha'}]]]]}|[{'atom',3387,'ok'}]]}|[[{'type',3387,'constraint',[{'atom',3387,'is_subtype'}|[[{'var',3387,'Red'}|[{'type',3387,'integer',[]}]]]]}|[{'type',3387,'constraint',[{'atom',3387,'is_subtype'}|[[{'var',3387,'Green'}|[{'type',3387,'integer',[]}]]]]}|[{'type',3387,'constraint',[{'atom',3387,'is_subtype'}|[[{'var',3387,'Blue'}|[{'type',3387,'integer',[]}]]]]}|[{'type',3387,'constraint',[{'atom',3387,'is_subtype'}|[[{'var',3387,'Alpha'}|[{'type',3387,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3393
		'spec' =
		    %% Line 3393
		    [{{'color4s',4},[{'type',3393,'bounded_fun',[{'type',3393,'fun',[{'type',3393,'product',[{'var',3393,'Red'}|[{'var',3393,'Green'}|[{'var',3393,'Blue'}|[{'var',3393,'Alpha'}]]]]}|[{'atom',3393,'ok'}]]}|[[{'type',3393,'constraint',[{'atom',3393,'is_subtype'}|[[{'var',3393,'Red'}|[{'type',3393,'integer',[]}]]]]}|[{'type',3393,'constraint',[{'atom',3393,'is_subtype'}|[[{'var',3393,'Green'}|[{'type',3393,'integer',[]}]]]]}|[{'type',3393,'constraint',[{'atom',3393,'is_subtype'}|[[{'var',3393,'Blue'}|[{'type',3393,'integer',[]}]]]]}|[{'type',3393,'constraint',[{'atom',3393,'is_subtype'}|[[{'var',3393,'Alpha'}|[{'type',3393,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3399
		'spec' =
		    %% Line 3399
		    [{{'color4ub',4},[{'type',3399,'bounded_fun',[{'type',3399,'fun',[{'type',3399,'product',[{'var',3399,'Red'}|[{'var',3399,'Green'}|[{'var',3399,'Blue'}|[{'var',3399,'Alpha'}]]]]}|[{'atom',3399,'ok'}]]}|[[{'type',3399,'constraint',[{'atom',3399,'is_subtype'}|[[{'var',3399,'Red'}|[{'type',3399,'integer',[]}]]]]}|[{'type',3399,'constraint',[{'atom',3399,'is_subtype'}|[[{'var',3399,'Green'}|[{'type',3399,'integer',[]}]]]]}|[{'type',3399,'constraint',[{'atom',3399,'is_subtype'}|[[{'var',3399,'Blue'}|[{'type',3399,'integer',[]}]]]]}|[{'type',3399,'constraint',[{'atom',3399,'is_subtype'}|[[{'var',3399,'Alpha'}|[{'type',3399,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3405
		'spec' =
		    %% Line 3405
		    [{{'color4ui',4},[{'type',3405,'bounded_fun',[{'type',3405,'fun',[{'type',3405,'product',[{'var',3405,'Red'}|[{'var',3405,'Green'}|[{'var',3405,'Blue'}|[{'var',3405,'Alpha'}]]]]}|[{'atom',3405,'ok'}]]}|[[{'type',3405,'constraint',[{'atom',3405,'is_subtype'}|[[{'var',3405,'Red'}|[{'type',3405,'integer',[]}]]]]}|[{'type',3405,'constraint',[{'atom',3405,'is_subtype'}|[[{'var',3405,'Green'}|[{'type',3405,'integer',[]}]]]]}|[{'type',3405,'constraint',[{'atom',3405,'is_subtype'}|[[{'var',3405,'Blue'}|[{'type',3405,'integer',[]}]]]]}|[{'type',3405,'constraint',[{'atom',3405,'is_subtype'}|[[{'var',3405,'Alpha'}|[{'type',3405,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3411
		'spec' =
		    %% Line 3411
		    [{{'color4us',4},[{'type',3411,'bounded_fun',[{'type',3411,'fun',[{'type',3411,'product',[{'var',3411,'Red'}|[{'var',3411,'Green'}|[{'var',3411,'Blue'}|[{'var',3411,'Alpha'}]]]]}|[{'atom',3411,'ok'}]]}|[[{'type',3411,'constraint',[{'atom',3411,'is_subtype'}|[[{'var',3411,'Red'}|[{'type',3411,'integer',[]}]]]]}|[{'type',3411,'constraint',[{'atom',3411,'is_subtype'}|[[{'var',3411,'Green'}|[{'type',3411,'integer',[]}]]]]}|[{'type',3411,'constraint',[{'atom',3411,'is_subtype'}|[[{'var',3411,'Blue'}|[{'type',3411,'integer',[]}]]]]}|[{'type',3411,'constraint',[{'atom',3411,'is_subtype'}|[[{'var',3411,'Alpha'}|[{'type',3411,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3416
		'spec' =
		    %% Line 3416
		    [{{'color3bv',1},[{'type',3416,'bounded_fun',[{'type',3416,'fun',[{'type',3416,'product',[{'var',3416,'V'}]}|[{'atom',3416,'ok'}]]}|[[{'type',3416,'constraint',[{'atom',3416,'is_subtype'}|[[{'var',3416,'V'}|[{'type',3416,'tuple',[{'ann_type',3416,[{'var',3416,'Red'}|[{'type',3416,'integer',[]}]]}|[{'ann_type',3416,[{'var',3416,'Green'}|[{'type',3416,'integer',[]}]]}|[{'ann_type',3416,[{'var',3416,'Blue'}|[{'type',3416,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3420
		'spec' =
		    %% Line 3420
		    [{{'color3dv',1},[{'type',3420,'bounded_fun',[{'type',3420,'fun',[{'type',3420,'product',[{'var',3420,'V'}]}|[{'atom',3420,'ok'}]]}|[[{'type',3420,'constraint',[{'atom',3420,'is_subtype'}|[[{'var',3420,'V'}|[{'type',3420,'tuple',[{'ann_type',3420,[{'var',3420,'Red'}|[{'type',3420,'float',[]}]]}|[{'ann_type',3420,[{'var',3420,'Green'}|[{'type',3420,'float',[]}]]}|[{'ann_type',3420,[{'var',3420,'Blue'}|[{'type',3420,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3424
		'spec' =
		    %% Line 3424
		    [{{'color3fv',1},[{'type',3424,'bounded_fun',[{'type',3424,'fun',[{'type',3424,'product',[{'var',3424,'V'}]}|[{'atom',3424,'ok'}]]}|[[{'type',3424,'constraint',[{'atom',3424,'is_subtype'}|[[{'var',3424,'V'}|[{'type',3424,'tuple',[{'ann_type',3424,[{'var',3424,'Red'}|[{'type',3424,'float',[]}]]}|[{'ann_type',3424,[{'var',3424,'Green'}|[{'type',3424,'float',[]}]]}|[{'ann_type',3424,[{'var',3424,'Blue'}|[{'type',3424,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3428
		'spec' =
		    %% Line 3428
		    [{{'color3iv',1},[{'type',3428,'bounded_fun',[{'type',3428,'fun',[{'type',3428,'product',[{'var',3428,'V'}]}|[{'atom',3428,'ok'}]]}|[[{'type',3428,'constraint',[{'atom',3428,'is_subtype'}|[[{'var',3428,'V'}|[{'type',3428,'tuple',[{'ann_type',3428,[{'var',3428,'Red'}|[{'type',3428,'integer',[]}]]}|[{'ann_type',3428,[{'var',3428,'Green'}|[{'type',3428,'integer',[]}]]}|[{'ann_type',3428,[{'var',3428,'Blue'}|[{'type',3428,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3432
		'spec' =
		    %% Line 3432
		    [{{'color3sv',1},[{'type',3432,'bounded_fun',[{'type',3432,'fun',[{'type',3432,'product',[{'var',3432,'V'}]}|[{'atom',3432,'ok'}]]}|[[{'type',3432,'constraint',[{'atom',3432,'is_subtype'}|[[{'var',3432,'V'}|[{'type',3432,'tuple',[{'ann_type',3432,[{'var',3432,'Red'}|[{'type',3432,'integer',[]}]]}|[{'ann_type',3432,[{'var',3432,'Green'}|[{'type',3432,'integer',[]}]]}|[{'ann_type',3432,[{'var',3432,'Blue'}|[{'type',3432,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3436
		'spec' =
		    %% Line 3436
		    [{{'color3ubv',1},[{'type',3436,'bounded_fun',[{'type',3436,'fun',[{'type',3436,'product',[{'var',3436,'V'}]}|[{'atom',3436,'ok'}]]}|[[{'type',3436,'constraint',[{'atom',3436,'is_subtype'}|[[{'var',3436,'V'}|[{'type',3436,'tuple',[{'ann_type',3436,[{'var',3436,'Red'}|[{'type',3436,'integer',[]}]]}|[{'ann_type',3436,[{'var',3436,'Green'}|[{'type',3436,'integer',[]}]]}|[{'ann_type',3436,[{'var',3436,'Blue'}|[{'type',3436,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3440
		'spec' =
		    %% Line 3440
		    [{{'color3uiv',1},[{'type',3440,'bounded_fun',[{'type',3440,'fun',[{'type',3440,'product',[{'var',3440,'V'}]}|[{'atom',3440,'ok'}]]}|[[{'type',3440,'constraint',[{'atom',3440,'is_subtype'}|[[{'var',3440,'V'}|[{'type',3440,'tuple',[{'ann_type',3440,[{'var',3440,'Red'}|[{'type',3440,'integer',[]}]]}|[{'ann_type',3440,[{'var',3440,'Green'}|[{'type',3440,'integer',[]}]]}|[{'ann_type',3440,[{'var',3440,'Blue'}|[{'type',3440,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3444
		'spec' =
		    %% Line 3444
		    [{{'color3usv',1},[{'type',3444,'bounded_fun',[{'type',3444,'fun',[{'type',3444,'product',[{'var',3444,'V'}]}|[{'atom',3444,'ok'}]]}|[[{'type',3444,'constraint',[{'atom',3444,'is_subtype'}|[[{'var',3444,'V'}|[{'type',3444,'tuple',[{'ann_type',3444,[{'var',3444,'Red'}|[{'type',3444,'integer',[]}]]}|[{'ann_type',3444,[{'var',3444,'Green'}|[{'type',3444,'integer',[]}]]}|[{'ann_type',3444,[{'var',3444,'Blue'}|[{'type',3444,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3448
		'spec' =
		    %% Line 3448
		    [{{'color4bv',1},[{'type',3448,'bounded_fun',[{'type',3448,'fun',[{'type',3448,'product',[{'var',3448,'V'}]}|[{'atom',3448,'ok'}]]}|[[{'type',3448,'constraint',[{'atom',3448,'is_subtype'}|[[{'var',3448,'V'}|[{'type',3448,'tuple',[{'ann_type',3448,[{'var',3448,'Red'}|[{'type',3448,'integer',[]}]]}|[{'ann_type',3448,[{'var',3448,'Green'}|[{'type',3448,'integer',[]}]]}|[{'ann_type',3448,[{'var',3448,'Blue'}|[{'type',3448,'integer',[]}]]}|[{'ann_type',3448,[{'var',3448,'Alpha'}|[{'type',3448,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3452
		'spec' =
		    %% Line 3452
		    [{{'color4dv',1},[{'type',3452,'bounded_fun',[{'type',3452,'fun',[{'type',3452,'product',[{'var',3452,'V'}]}|[{'atom',3452,'ok'}]]}|[[{'type',3452,'constraint',[{'atom',3452,'is_subtype'}|[[{'var',3452,'V'}|[{'type',3452,'tuple',[{'ann_type',3452,[{'var',3452,'Red'}|[{'type',3452,'float',[]}]]}|[{'ann_type',3452,[{'var',3452,'Green'}|[{'type',3452,'float',[]}]]}|[{'ann_type',3452,[{'var',3452,'Blue'}|[{'type',3452,'float',[]}]]}|[{'ann_type',3452,[{'var',3452,'Alpha'}|[{'type',3452,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3456
		'spec' =
		    %% Line 3456
		    [{{'color4fv',1},[{'type',3456,'bounded_fun',[{'type',3456,'fun',[{'type',3456,'product',[{'var',3456,'V'}]}|[{'atom',3456,'ok'}]]}|[[{'type',3456,'constraint',[{'atom',3456,'is_subtype'}|[[{'var',3456,'V'}|[{'type',3456,'tuple',[{'ann_type',3456,[{'var',3456,'Red'}|[{'type',3456,'float',[]}]]}|[{'ann_type',3456,[{'var',3456,'Green'}|[{'type',3456,'float',[]}]]}|[{'ann_type',3456,[{'var',3456,'Blue'}|[{'type',3456,'float',[]}]]}|[{'ann_type',3456,[{'var',3456,'Alpha'}|[{'type',3456,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3460
		'spec' =
		    %% Line 3460
		    [{{'color4iv',1},[{'type',3460,'bounded_fun',[{'type',3460,'fun',[{'type',3460,'product',[{'var',3460,'V'}]}|[{'atom',3460,'ok'}]]}|[[{'type',3460,'constraint',[{'atom',3460,'is_subtype'}|[[{'var',3460,'V'}|[{'type',3460,'tuple',[{'ann_type',3460,[{'var',3460,'Red'}|[{'type',3460,'integer',[]}]]}|[{'ann_type',3460,[{'var',3460,'Green'}|[{'type',3460,'integer',[]}]]}|[{'ann_type',3460,[{'var',3460,'Blue'}|[{'type',3460,'integer',[]}]]}|[{'ann_type',3460,[{'var',3460,'Alpha'}|[{'type',3460,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3464
		'spec' =
		    %% Line 3464
		    [{{'color4sv',1},[{'type',3464,'bounded_fun',[{'type',3464,'fun',[{'type',3464,'product',[{'var',3464,'V'}]}|[{'atom',3464,'ok'}]]}|[[{'type',3464,'constraint',[{'atom',3464,'is_subtype'}|[[{'var',3464,'V'}|[{'type',3464,'tuple',[{'ann_type',3464,[{'var',3464,'Red'}|[{'type',3464,'integer',[]}]]}|[{'ann_type',3464,[{'var',3464,'Green'}|[{'type',3464,'integer',[]}]]}|[{'ann_type',3464,[{'var',3464,'Blue'}|[{'type',3464,'integer',[]}]]}|[{'ann_type',3464,[{'var',3464,'Alpha'}|[{'type',3464,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3468
		'spec' =
		    %% Line 3468
		    [{{'color4ubv',1},[{'type',3468,'bounded_fun',[{'type',3468,'fun',[{'type',3468,'product',[{'var',3468,'V'}]}|[{'atom',3468,'ok'}]]}|[[{'type',3468,'constraint',[{'atom',3468,'is_subtype'}|[[{'var',3468,'V'}|[{'type',3468,'tuple',[{'ann_type',3468,[{'var',3468,'Red'}|[{'type',3468,'integer',[]}]]}|[{'ann_type',3468,[{'var',3468,'Green'}|[{'type',3468,'integer',[]}]]}|[{'ann_type',3468,[{'var',3468,'Blue'}|[{'type',3468,'integer',[]}]]}|[{'ann_type',3468,[{'var',3468,'Alpha'}|[{'type',3468,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3472
		'spec' =
		    %% Line 3472
		    [{{'color4uiv',1},[{'type',3472,'bounded_fun',[{'type',3472,'fun',[{'type',3472,'product',[{'var',3472,'V'}]}|[{'atom',3472,'ok'}]]}|[[{'type',3472,'constraint',[{'atom',3472,'is_subtype'}|[[{'var',3472,'V'}|[{'type',3472,'tuple',[{'ann_type',3472,[{'var',3472,'Red'}|[{'type',3472,'integer',[]}]]}|[{'ann_type',3472,[{'var',3472,'Green'}|[{'type',3472,'integer',[]}]]}|[{'ann_type',3472,[{'var',3472,'Blue'}|[{'type',3472,'integer',[]}]]}|[{'ann_type',3472,[{'var',3472,'Alpha'}|[{'type',3472,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3476
		'spec' =
		    %% Line 3476
		    [{{'color4usv',1},[{'type',3476,'bounded_fun',[{'type',3476,'fun',[{'type',3476,'product',[{'var',3476,'V'}]}|[{'atom',3476,'ok'}]]}|[[{'type',3476,'constraint',[{'atom',3476,'is_subtype'}|[[{'var',3476,'V'}|[{'type',3476,'tuple',[{'ann_type',3476,[{'var',3476,'Red'}|[{'type',3476,'integer',[]}]]}|[{'ann_type',3476,[{'var',3476,'Green'}|[{'type',3476,'integer',[]}]]}|[{'ann_type',3476,[{'var',3476,'Blue'}|[{'type',3476,'integer',[]}]]}|[{'ann_type',3476,[{'var',3476,'Alpha'}|[{'type',3476,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3494
		'spec' =
		    %% Line 3494
		    [{{'texCoord1d',1},[{'type',3494,'bounded_fun',[{'type',3494,'fun',[{'type',3494,'product',[{'var',3494,'S'}]}|[{'atom',3494,'ok'}]]}|[[{'type',3494,'constraint',[{'atom',3494,'is_subtype'}|[[{'var',3494,'S'}|[{'type',3494,'float',[]}]]]]}]]]}]}],
		%% Line 3500
		'spec' =
		    %% Line 3500
		    [{{'texCoord1f',1},[{'type',3500,'bounded_fun',[{'type',3500,'fun',[{'type',3500,'product',[{'var',3500,'S'}]}|[{'atom',3500,'ok'}]]}|[[{'type',3500,'constraint',[{'atom',3500,'is_subtype'}|[[{'var',3500,'S'}|[{'type',3500,'float',[]}]]]]}]]]}]}],
		%% Line 3506
		'spec' =
		    %% Line 3506
		    [{{'texCoord1i',1},[{'type',3506,'bounded_fun',[{'type',3506,'fun',[{'type',3506,'product',[{'var',3506,'S'}]}|[{'atom',3506,'ok'}]]}|[[{'type',3506,'constraint',[{'atom',3506,'is_subtype'}|[[{'var',3506,'S'}|[{'type',3506,'integer',[]}]]]]}]]]}]}],
		%% Line 3512
		'spec' =
		    %% Line 3512
		    [{{'texCoord1s',1},[{'type',3512,'bounded_fun',[{'type',3512,'fun',[{'type',3512,'product',[{'var',3512,'S'}]}|[{'atom',3512,'ok'}]]}|[[{'type',3512,'constraint',[{'atom',3512,'is_subtype'}|[[{'var',3512,'S'}|[{'type',3512,'integer',[]}]]]]}]]]}]}],
		%% Line 3518
		'spec' =
		    %% Line 3518
		    [{{'texCoord2d',2},[{'type',3518,'bounded_fun',[{'type',3518,'fun',[{'type',3518,'product',[{'var',3518,'S'}|[{'var',3518,'T'}]]}|[{'atom',3518,'ok'}]]}|[[{'type',3518,'constraint',[{'atom',3518,'is_subtype'}|[[{'var',3518,'S'}|[{'type',3518,'float',[]}]]]]}|[{'type',3518,'constraint',[{'atom',3518,'is_subtype'}|[[{'var',3518,'T'}|[{'type',3518,'float',[]}]]]]}]]]]}]}],
		%% Line 3524
		'spec' =
		    %% Line 3524
		    [{{'texCoord2f',2},[{'type',3524,'bounded_fun',[{'type',3524,'fun',[{'type',3524,'product',[{'var',3524,'S'}|[{'var',3524,'T'}]]}|[{'atom',3524,'ok'}]]}|[[{'type',3524,'constraint',[{'atom',3524,'is_subtype'}|[[{'var',3524,'S'}|[{'type',3524,'float',[]}]]]]}|[{'type',3524,'constraint',[{'atom',3524,'is_subtype'}|[[{'var',3524,'T'}|[{'type',3524,'float',[]}]]]]}]]]]}]}],
		%% Line 3530
		'spec' =
		    %% Line 3530
		    [{{'texCoord2i',2},[{'type',3530,'bounded_fun',[{'type',3530,'fun',[{'type',3530,'product',[{'var',3530,'S'}|[{'var',3530,'T'}]]}|[{'atom',3530,'ok'}]]}|[[{'type',3530,'constraint',[{'atom',3530,'is_subtype'}|[[{'var',3530,'S'}|[{'type',3530,'integer',[]}]]]]}|[{'type',3530,'constraint',[{'atom',3530,'is_subtype'}|[[{'var',3530,'T'}|[{'type',3530,'integer',[]}]]]]}]]]]}]}],
		%% Line 3536
		'spec' =
		    %% Line 3536
		    [{{'texCoord2s',2},[{'type',3536,'bounded_fun',[{'type',3536,'fun',[{'type',3536,'product',[{'var',3536,'S'}|[{'var',3536,'T'}]]}|[{'atom',3536,'ok'}]]}|[[{'type',3536,'constraint',[{'atom',3536,'is_subtype'}|[[{'var',3536,'S'}|[{'type',3536,'integer',[]}]]]]}|[{'type',3536,'constraint',[{'atom',3536,'is_subtype'}|[[{'var',3536,'T'}|[{'type',3536,'integer',[]}]]]]}]]]]}]}],
		%% Line 3542
		'spec' =
		    %% Line 3542
		    [{{'texCoord3d',3},[{'type',3542,'bounded_fun',[{'type',3542,'fun',[{'type',3542,'product',[{'var',3542,'S'}|[{'var',3542,'T'}|[{'var',3542,'R'}]]]}|[{'atom',3542,'ok'}]]}|[[{'type',3542,'constraint',[{'atom',3542,'is_subtype'}|[[{'var',3542,'S'}|[{'type',3542,'float',[]}]]]]}|[{'type',3542,'constraint',[{'atom',3542,'is_subtype'}|[[{'var',3542,'T'}|[{'type',3542,'float',[]}]]]]}|[{'type',3542,'constraint',[{'atom',3542,'is_subtype'}|[[{'var',3542,'R'}|[{'type',3542,'float',[]}]]]]}]]]]]}]}],
		%% Line 3548
		'spec' =
		    %% Line 3548
		    [{{'texCoord3f',3},[{'type',3548,'bounded_fun',[{'type',3548,'fun',[{'type',3548,'product',[{'var',3548,'S'}|[{'var',3548,'T'}|[{'var',3548,'R'}]]]}|[{'atom',3548,'ok'}]]}|[[{'type',3548,'constraint',[{'atom',3548,'is_subtype'}|[[{'var',3548,'S'}|[{'type',3548,'float',[]}]]]]}|[{'type',3548,'constraint',[{'atom',3548,'is_subtype'}|[[{'var',3548,'T'}|[{'type',3548,'float',[]}]]]]}|[{'type',3548,'constraint',[{'atom',3548,'is_subtype'}|[[{'var',3548,'R'}|[{'type',3548,'float',[]}]]]]}]]]]]}]}],
		%% Line 3554
		'spec' =
		    %% Line 3554
		    [{{'texCoord3i',3},[{'type',3554,'bounded_fun',[{'type',3554,'fun',[{'type',3554,'product',[{'var',3554,'S'}|[{'var',3554,'T'}|[{'var',3554,'R'}]]]}|[{'atom',3554,'ok'}]]}|[[{'type',3554,'constraint',[{'atom',3554,'is_subtype'}|[[{'var',3554,'S'}|[{'type',3554,'integer',[]}]]]]}|[{'type',3554,'constraint',[{'atom',3554,'is_subtype'}|[[{'var',3554,'T'}|[{'type',3554,'integer',[]}]]]]}|[{'type',3554,'constraint',[{'atom',3554,'is_subtype'}|[[{'var',3554,'R'}|[{'type',3554,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3560
		'spec' =
		    %% Line 3560
		    [{{'texCoord3s',3},[{'type',3560,'bounded_fun',[{'type',3560,'fun',[{'type',3560,'product',[{'var',3560,'S'}|[{'var',3560,'T'}|[{'var',3560,'R'}]]]}|[{'atom',3560,'ok'}]]}|[[{'type',3560,'constraint',[{'atom',3560,'is_subtype'}|[[{'var',3560,'S'}|[{'type',3560,'integer',[]}]]]]}|[{'type',3560,'constraint',[{'atom',3560,'is_subtype'}|[[{'var',3560,'T'}|[{'type',3560,'integer',[]}]]]]}|[{'type',3560,'constraint',[{'atom',3560,'is_subtype'}|[[{'var',3560,'R'}|[{'type',3560,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3566
		'spec' =
		    %% Line 3566
		    [{{'texCoord4d',4},[{'type',3566,'bounded_fun',[{'type',3566,'fun',[{'type',3566,'product',[{'var',3566,'S'}|[{'var',3566,'T'}|[{'var',3566,'R'}|[{'var',3566,'Q'}]]]]}|[{'atom',3566,'ok'}]]}|[[{'type',3566,'constraint',[{'atom',3566,'is_subtype'}|[[{'var',3566,'S'}|[{'type',3566,'float',[]}]]]]}|[{'type',3566,'constraint',[{'atom',3566,'is_subtype'}|[[{'var',3566,'T'}|[{'type',3566,'float',[]}]]]]}|[{'type',3566,'constraint',[{'atom',3566,'is_subtype'}|[[{'var',3566,'R'}|[{'type',3566,'float',[]}]]]]}|[{'type',3566,'constraint',[{'atom',3566,'is_subtype'}|[[{'var',3566,'Q'}|[{'type',3566,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3572
		'spec' =
		    %% Line 3572
		    [{{'texCoord4f',4},[{'type',3572,'bounded_fun',[{'type',3572,'fun',[{'type',3572,'product',[{'var',3572,'S'}|[{'var',3572,'T'}|[{'var',3572,'R'}|[{'var',3572,'Q'}]]]]}|[{'atom',3572,'ok'}]]}|[[{'type',3572,'constraint',[{'atom',3572,'is_subtype'}|[[{'var',3572,'S'}|[{'type',3572,'float',[]}]]]]}|[{'type',3572,'constraint',[{'atom',3572,'is_subtype'}|[[{'var',3572,'T'}|[{'type',3572,'float',[]}]]]]}|[{'type',3572,'constraint',[{'atom',3572,'is_subtype'}|[[{'var',3572,'R'}|[{'type',3572,'float',[]}]]]]}|[{'type',3572,'constraint',[{'atom',3572,'is_subtype'}|[[{'var',3572,'Q'}|[{'type',3572,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3578
		'spec' =
		    %% Line 3578
		    [{{'texCoord4i',4},[{'type',3578,'bounded_fun',[{'type',3578,'fun',[{'type',3578,'product',[{'var',3578,'S'}|[{'var',3578,'T'}|[{'var',3578,'R'}|[{'var',3578,'Q'}]]]]}|[{'atom',3578,'ok'}]]}|[[{'type',3578,'constraint',[{'atom',3578,'is_subtype'}|[[{'var',3578,'S'}|[{'type',3578,'integer',[]}]]]]}|[{'type',3578,'constraint',[{'atom',3578,'is_subtype'}|[[{'var',3578,'T'}|[{'type',3578,'integer',[]}]]]]}|[{'type',3578,'constraint',[{'atom',3578,'is_subtype'}|[[{'var',3578,'R'}|[{'type',3578,'integer',[]}]]]]}|[{'type',3578,'constraint',[{'atom',3578,'is_subtype'}|[[{'var',3578,'Q'}|[{'type',3578,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3584
		'spec' =
		    %% Line 3584
		    [{{'texCoord4s',4},[{'type',3584,'bounded_fun',[{'type',3584,'fun',[{'type',3584,'product',[{'var',3584,'S'}|[{'var',3584,'T'}|[{'var',3584,'R'}|[{'var',3584,'Q'}]]]]}|[{'atom',3584,'ok'}]]}|[[{'type',3584,'constraint',[{'atom',3584,'is_subtype'}|[[{'var',3584,'S'}|[{'type',3584,'integer',[]}]]]]}|[{'type',3584,'constraint',[{'atom',3584,'is_subtype'}|[[{'var',3584,'T'}|[{'type',3584,'integer',[]}]]]]}|[{'type',3584,'constraint',[{'atom',3584,'is_subtype'}|[[{'var',3584,'R'}|[{'type',3584,'integer',[]}]]]]}|[{'type',3584,'constraint',[{'atom',3584,'is_subtype'}|[[{'var',3584,'Q'}|[{'type',3584,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3589
		'spec' =
		    %% Line 3589
		    [{{'texCoord1dv',1},[{'type',3589,'bounded_fun',[{'type',3589,'fun',[{'type',3589,'product',[{'var',3589,'V'}]}|[{'atom',3589,'ok'}]]}|[[{'type',3589,'constraint',[{'atom',3589,'is_subtype'}|[[{'var',3589,'V'}|[{'type',3589,'tuple',[{'ann_type',3589,[{'var',3589,'S'}|[{'type',3589,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 3593
		'spec' =
		    %% Line 3593
		    [{{'texCoord1fv',1},[{'type',3593,'bounded_fun',[{'type',3593,'fun',[{'type',3593,'product',[{'var',3593,'V'}]}|[{'atom',3593,'ok'}]]}|[[{'type',3593,'constraint',[{'atom',3593,'is_subtype'}|[[{'var',3593,'V'}|[{'type',3593,'tuple',[{'ann_type',3593,[{'var',3593,'S'}|[{'type',3593,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 3597
		'spec' =
		    %% Line 3597
		    [{{'texCoord1iv',1},[{'type',3597,'bounded_fun',[{'type',3597,'fun',[{'type',3597,'product',[{'var',3597,'V'}]}|[{'atom',3597,'ok'}]]}|[[{'type',3597,'constraint',[{'atom',3597,'is_subtype'}|[[{'var',3597,'V'}|[{'type',3597,'tuple',[{'ann_type',3597,[{'var',3597,'S'}|[{'type',3597,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 3601
		'spec' =
		    %% Line 3601
		    [{{'texCoord1sv',1},[{'type',3601,'bounded_fun',[{'type',3601,'fun',[{'type',3601,'product',[{'var',3601,'V'}]}|[{'atom',3601,'ok'}]]}|[[{'type',3601,'constraint',[{'atom',3601,'is_subtype'}|[[{'var',3601,'V'}|[{'type',3601,'tuple',[{'ann_type',3601,[{'var',3601,'S'}|[{'type',3601,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 3605
		'spec' =
		    %% Line 3605
		    [{{'texCoord2dv',1},[{'type',3605,'bounded_fun',[{'type',3605,'fun',[{'type',3605,'product',[{'var',3605,'V'}]}|[{'atom',3605,'ok'}]]}|[[{'type',3605,'constraint',[{'atom',3605,'is_subtype'}|[[{'var',3605,'V'}|[{'type',3605,'tuple',[{'ann_type',3605,[{'var',3605,'S'}|[{'type',3605,'float',[]}]]}|[{'ann_type',3605,[{'var',3605,'T'}|[{'type',3605,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3609
		'spec' =
		    %% Line 3609
		    [{{'texCoord2fv',1},[{'type',3609,'bounded_fun',[{'type',3609,'fun',[{'type',3609,'product',[{'var',3609,'V'}]}|[{'atom',3609,'ok'}]]}|[[{'type',3609,'constraint',[{'atom',3609,'is_subtype'}|[[{'var',3609,'V'}|[{'type',3609,'tuple',[{'ann_type',3609,[{'var',3609,'S'}|[{'type',3609,'float',[]}]]}|[{'ann_type',3609,[{'var',3609,'T'}|[{'type',3609,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3613
		'spec' =
		    %% Line 3613
		    [{{'texCoord2iv',1},[{'type',3613,'bounded_fun',[{'type',3613,'fun',[{'type',3613,'product',[{'var',3613,'V'}]}|[{'atom',3613,'ok'}]]}|[[{'type',3613,'constraint',[{'atom',3613,'is_subtype'}|[[{'var',3613,'V'}|[{'type',3613,'tuple',[{'ann_type',3613,[{'var',3613,'S'}|[{'type',3613,'integer',[]}]]}|[{'ann_type',3613,[{'var',3613,'T'}|[{'type',3613,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3617
		'spec' =
		    %% Line 3617
		    [{{'texCoord2sv',1},[{'type',3617,'bounded_fun',[{'type',3617,'fun',[{'type',3617,'product',[{'var',3617,'V'}]}|[{'atom',3617,'ok'}]]}|[[{'type',3617,'constraint',[{'atom',3617,'is_subtype'}|[[{'var',3617,'V'}|[{'type',3617,'tuple',[{'ann_type',3617,[{'var',3617,'S'}|[{'type',3617,'integer',[]}]]}|[{'ann_type',3617,[{'var',3617,'T'}|[{'type',3617,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3621
		'spec' =
		    %% Line 3621
		    [{{'texCoord3dv',1},[{'type',3621,'bounded_fun',[{'type',3621,'fun',[{'type',3621,'product',[{'var',3621,'V'}]}|[{'atom',3621,'ok'}]]}|[[{'type',3621,'constraint',[{'atom',3621,'is_subtype'}|[[{'var',3621,'V'}|[{'type',3621,'tuple',[{'ann_type',3621,[{'var',3621,'S'}|[{'type',3621,'float',[]}]]}|[{'ann_type',3621,[{'var',3621,'T'}|[{'type',3621,'float',[]}]]}|[{'ann_type',3621,[{'var',3621,'R'}|[{'type',3621,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3625
		'spec' =
		    %% Line 3625
		    [{{'texCoord3fv',1},[{'type',3625,'bounded_fun',[{'type',3625,'fun',[{'type',3625,'product',[{'var',3625,'V'}]}|[{'atom',3625,'ok'}]]}|[[{'type',3625,'constraint',[{'atom',3625,'is_subtype'}|[[{'var',3625,'V'}|[{'type',3625,'tuple',[{'ann_type',3625,[{'var',3625,'S'}|[{'type',3625,'float',[]}]]}|[{'ann_type',3625,[{'var',3625,'T'}|[{'type',3625,'float',[]}]]}|[{'ann_type',3625,[{'var',3625,'R'}|[{'type',3625,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3629
		'spec' =
		    %% Line 3629
		    [{{'texCoord3iv',1},[{'type',3629,'bounded_fun',[{'type',3629,'fun',[{'type',3629,'product',[{'var',3629,'V'}]}|[{'atom',3629,'ok'}]]}|[[{'type',3629,'constraint',[{'atom',3629,'is_subtype'}|[[{'var',3629,'V'}|[{'type',3629,'tuple',[{'ann_type',3629,[{'var',3629,'S'}|[{'type',3629,'integer',[]}]]}|[{'ann_type',3629,[{'var',3629,'T'}|[{'type',3629,'integer',[]}]]}|[{'ann_type',3629,[{'var',3629,'R'}|[{'type',3629,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3633
		'spec' =
		    %% Line 3633
		    [{{'texCoord3sv',1},[{'type',3633,'bounded_fun',[{'type',3633,'fun',[{'type',3633,'product',[{'var',3633,'V'}]}|[{'atom',3633,'ok'}]]}|[[{'type',3633,'constraint',[{'atom',3633,'is_subtype'}|[[{'var',3633,'V'}|[{'type',3633,'tuple',[{'ann_type',3633,[{'var',3633,'S'}|[{'type',3633,'integer',[]}]]}|[{'ann_type',3633,[{'var',3633,'T'}|[{'type',3633,'integer',[]}]]}|[{'ann_type',3633,[{'var',3633,'R'}|[{'type',3633,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3637
		'spec' =
		    %% Line 3637
		    [{{'texCoord4dv',1},[{'type',3637,'bounded_fun',[{'type',3637,'fun',[{'type',3637,'product',[{'var',3637,'V'}]}|[{'atom',3637,'ok'}]]}|[[{'type',3637,'constraint',[{'atom',3637,'is_subtype'}|[[{'var',3637,'V'}|[{'type',3637,'tuple',[{'ann_type',3637,[{'var',3637,'S'}|[{'type',3637,'float',[]}]]}|[{'ann_type',3637,[{'var',3637,'T'}|[{'type',3637,'float',[]}]]}|[{'ann_type',3637,[{'var',3637,'R'}|[{'type',3637,'float',[]}]]}|[{'ann_type',3637,[{'var',3637,'Q'}|[{'type',3637,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3641
		'spec' =
		    %% Line 3641
		    [{{'texCoord4fv',1},[{'type',3641,'bounded_fun',[{'type',3641,'fun',[{'type',3641,'product',[{'var',3641,'V'}]}|[{'atom',3641,'ok'}]]}|[[{'type',3641,'constraint',[{'atom',3641,'is_subtype'}|[[{'var',3641,'V'}|[{'type',3641,'tuple',[{'ann_type',3641,[{'var',3641,'S'}|[{'type',3641,'float',[]}]]}|[{'ann_type',3641,[{'var',3641,'T'}|[{'type',3641,'float',[]}]]}|[{'ann_type',3641,[{'var',3641,'R'}|[{'type',3641,'float',[]}]]}|[{'ann_type',3641,[{'var',3641,'Q'}|[{'type',3641,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3645
		'spec' =
		    %% Line 3645
		    [{{'texCoord4iv',1},[{'type',3645,'bounded_fun',[{'type',3645,'fun',[{'type',3645,'product',[{'var',3645,'V'}]}|[{'atom',3645,'ok'}]]}|[[{'type',3645,'constraint',[{'atom',3645,'is_subtype'}|[[{'var',3645,'V'}|[{'type',3645,'tuple',[{'ann_type',3645,[{'var',3645,'S'}|[{'type',3645,'integer',[]}]]}|[{'ann_type',3645,[{'var',3645,'T'}|[{'type',3645,'integer',[]}]]}|[{'ann_type',3645,[{'var',3645,'R'}|[{'type',3645,'integer',[]}]]}|[{'ann_type',3645,[{'var',3645,'Q'}|[{'type',3645,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3649
		'spec' =
		    %% Line 3649
		    [{{'texCoord4sv',1},[{'type',3649,'bounded_fun',[{'type',3649,'fun',[{'type',3649,'product',[{'var',3649,'V'}]}|[{'atom',3649,'ok'}]]}|[[{'type',3649,'constraint',[{'atom',3649,'is_subtype'}|[[{'var',3649,'V'}|[{'type',3649,'tuple',[{'ann_type',3649,[{'var',3649,'S'}|[{'type',3649,'integer',[]}]]}|[{'ann_type',3649,[{'var',3649,'T'}|[{'type',3649,'integer',[]}]]}|[{'ann_type',3649,[{'var',3649,'R'}|[{'type',3649,'integer',[]}]]}|[{'ann_type',3649,[{'var',3649,'Q'}|[{'type',3649,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3694
		'spec' =
		    %% Line 3694
		    [{{'rasterPos2d',2},[{'type',3694,'bounded_fun',[{'type',3694,'fun',[{'type',3694,'product',[{'var',3694,'X'}|[{'var',3694,'Y'}]]}|[{'atom',3694,'ok'}]]}|[[{'type',3694,'constraint',[{'atom',3694,'is_subtype'}|[[{'var',3694,'X'}|[{'type',3694,'float',[]}]]]]}|[{'type',3694,'constraint',[{'atom',3694,'is_subtype'}|[[{'var',3694,'Y'}|[{'type',3694,'float',[]}]]]]}]]]]}]}],
		%% Line 3700
		'spec' =
		    %% Line 3700
		    [{{'rasterPos2f',2},[{'type',3700,'bounded_fun',[{'type',3700,'fun',[{'type',3700,'product',[{'var',3700,'X'}|[{'var',3700,'Y'}]]}|[{'atom',3700,'ok'}]]}|[[{'type',3700,'constraint',[{'atom',3700,'is_subtype'}|[[{'var',3700,'X'}|[{'type',3700,'float',[]}]]]]}|[{'type',3700,'constraint',[{'atom',3700,'is_subtype'}|[[{'var',3700,'Y'}|[{'type',3700,'float',[]}]]]]}]]]]}]}],
		%% Line 3706
		'spec' =
		    %% Line 3706
		    [{{'rasterPos2i',2},[{'type',3706,'bounded_fun',[{'type',3706,'fun',[{'type',3706,'product',[{'var',3706,'X'}|[{'var',3706,'Y'}]]}|[{'atom',3706,'ok'}]]}|[[{'type',3706,'constraint',[{'atom',3706,'is_subtype'}|[[{'var',3706,'X'}|[{'type',3706,'integer',[]}]]]]}|[{'type',3706,'constraint',[{'atom',3706,'is_subtype'}|[[{'var',3706,'Y'}|[{'type',3706,'integer',[]}]]]]}]]]]}]}],
		%% Line 3712
		'spec' =
		    %% Line 3712
		    [{{'rasterPos2s',2},[{'type',3712,'bounded_fun',[{'type',3712,'fun',[{'type',3712,'product',[{'var',3712,'X'}|[{'var',3712,'Y'}]]}|[{'atom',3712,'ok'}]]}|[[{'type',3712,'constraint',[{'atom',3712,'is_subtype'}|[[{'var',3712,'X'}|[{'type',3712,'integer',[]}]]]]}|[{'type',3712,'constraint',[{'atom',3712,'is_subtype'}|[[{'var',3712,'Y'}|[{'type',3712,'integer',[]}]]]]}]]]]}]}],
		%% Line 3718
		'spec' =
		    %% Line 3718
		    [{{'rasterPos3d',3},[{'type',3718,'bounded_fun',[{'type',3718,'fun',[{'type',3718,'product',[{'var',3718,'X'}|[{'var',3718,'Y'}|[{'var',3718,'Z'}]]]}|[{'atom',3718,'ok'}]]}|[[{'type',3718,'constraint',[{'atom',3718,'is_subtype'}|[[{'var',3718,'X'}|[{'type',3718,'float',[]}]]]]}|[{'type',3718,'constraint',[{'atom',3718,'is_subtype'}|[[{'var',3718,'Y'}|[{'type',3718,'float',[]}]]]]}|[{'type',3718,'constraint',[{'atom',3718,'is_subtype'}|[[{'var',3718,'Z'}|[{'type',3718,'float',[]}]]]]}]]]]]}]}],
		%% Line 3724
		'spec' =
		    %% Line 3724
		    [{{'rasterPos3f',3},[{'type',3724,'bounded_fun',[{'type',3724,'fun',[{'type',3724,'product',[{'var',3724,'X'}|[{'var',3724,'Y'}|[{'var',3724,'Z'}]]]}|[{'atom',3724,'ok'}]]}|[[{'type',3724,'constraint',[{'atom',3724,'is_subtype'}|[[{'var',3724,'X'}|[{'type',3724,'float',[]}]]]]}|[{'type',3724,'constraint',[{'atom',3724,'is_subtype'}|[[{'var',3724,'Y'}|[{'type',3724,'float',[]}]]]]}|[{'type',3724,'constraint',[{'atom',3724,'is_subtype'}|[[{'var',3724,'Z'}|[{'type',3724,'float',[]}]]]]}]]]]]}]}],
		%% Line 3730
		'spec' =
		    %% Line 3730
		    [{{'rasterPos3i',3},[{'type',3730,'bounded_fun',[{'type',3730,'fun',[{'type',3730,'product',[{'var',3730,'X'}|[{'var',3730,'Y'}|[{'var',3730,'Z'}]]]}|[{'atom',3730,'ok'}]]}|[[{'type',3730,'constraint',[{'atom',3730,'is_subtype'}|[[{'var',3730,'X'}|[{'type',3730,'integer',[]}]]]]}|[{'type',3730,'constraint',[{'atom',3730,'is_subtype'}|[[{'var',3730,'Y'}|[{'type',3730,'integer',[]}]]]]}|[{'type',3730,'constraint',[{'atom',3730,'is_subtype'}|[[{'var',3730,'Z'}|[{'type',3730,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3736
		'spec' =
		    %% Line 3736
		    [{{'rasterPos3s',3},[{'type',3736,'bounded_fun',[{'type',3736,'fun',[{'type',3736,'product',[{'var',3736,'X'}|[{'var',3736,'Y'}|[{'var',3736,'Z'}]]]}|[{'atom',3736,'ok'}]]}|[[{'type',3736,'constraint',[{'atom',3736,'is_subtype'}|[[{'var',3736,'X'}|[{'type',3736,'integer',[]}]]]]}|[{'type',3736,'constraint',[{'atom',3736,'is_subtype'}|[[{'var',3736,'Y'}|[{'type',3736,'integer',[]}]]]]}|[{'type',3736,'constraint',[{'atom',3736,'is_subtype'}|[[{'var',3736,'Z'}|[{'type',3736,'integer',[]}]]]]}]]]]]}]}],
		%% Line 3742
		'spec' =
		    %% Line 3742
		    [{{'rasterPos4d',4},[{'type',3742,'bounded_fun',[{'type',3742,'fun',[{'type',3742,'product',[{'var',3742,'X'}|[{'var',3742,'Y'}|[{'var',3742,'Z'}|[{'var',3742,'W'}]]]]}|[{'atom',3742,'ok'}]]}|[[{'type',3742,'constraint',[{'atom',3742,'is_subtype'}|[[{'var',3742,'X'}|[{'type',3742,'float',[]}]]]]}|[{'type',3742,'constraint',[{'atom',3742,'is_subtype'}|[[{'var',3742,'Y'}|[{'type',3742,'float',[]}]]]]}|[{'type',3742,'constraint',[{'atom',3742,'is_subtype'}|[[{'var',3742,'Z'}|[{'type',3742,'float',[]}]]]]}|[{'type',3742,'constraint',[{'atom',3742,'is_subtype'}|[[{'var',3742,'W'}|[{'type',3742,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3748
		'spec' =
		    %% Line 3748
		    [{{'rasterPos4f',4},[{'type',3748,'bounded_fun',[{'type',3748,'fun',[{'type',3748,'product',[{'var',3748,'X'}|[{'var',3748,'Y'}|[{'var',3748,'Z'}|[{'var',3748,'W'}]]]]}|[{'atom',3748,'ok'}]]}|[[{'type',3748,'constraint',[{'atom',3748,'is_subtype'}|[[{'var',3748,'X'}|[{'type',3748,'float',[]}]]]]}|[{'type',3748,'constraint',[{'atom',3748,'is_subtype'}|[[{'var',3748,'Y'}|[{'type',3748,'float',[]}]]]]}|[{'type',3748,'constraint',[{'atom',3748,'is_subtype'}|[[{'var',3748,'Z'}|[{'type',3748,'float',[]}]]]]}|[{'type',3748,'constraint',[{'atom',3748,'is_subtype'}|[[{'var',3748,'W'}|[{'type',3748,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3754
		'spec' =
		    %% Line 3754
		    [{{'rasterPos4i',4},[{'type',3754,'bounded_fun',[{'type',3754,'fun',[{'type',3754,'product',[{'var',3754,'X'}|[{'var',3754,'Y'}|[{'var',3754,'Z'}|[{'var',3754,'W'}]]]]}|[{'atom',3754,'ok'}]]}|[[{'type',3754,'constraint',[{'atom',3754,'is_subtype'}|[[{'var',3754,'X'}|[{'type',3754,'integer',[]}]]]]}|[{'type',3754,'constraint',[{'atom',3754,'is_subtype'}|[[{'var',3754,'Y'}|[{'type',3754,'integer',[]}]]]]}|[{'type',3754,'constraint',[{'atom',3754,'is_subtype'}|[[{'var',3754,'Z'}|[{'type',3754,'integer',[]}]]]]}|[{'type',3754,'constraint',[{'atom',3754,'is_subtype'}|[[{'var',3754,'W'}|[{'type',3754,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3760
		'spec' =
		    %% Line 3760
		    [{{'rasterPos4s',4},[{'type',3760,'bounded_fun',[{'type',3760,'fun',[{'type',3760,'product',[{'var',3760,'X'}|[{'var',3760,'Y'}|[{'var',3760,'Z'}|[{'var',3760,'W'}]]]]}|[{'atom',3760,'ok'}]]}|[[{'type',3760,'constraint',[{'atom',3760,'is_subtype'}|[[{'var',3760,'X'}|[{'type',3760,'integer',[]}]]]]}|[{'type',3760,'constraint',[{'atom',3760,'is_subtype'}|[[{'var',3760,'Y'}|[{'type',3760,'integer',[]}]]]]}|[{'type',3760,'constraint',[{'atom',3760,'is_subtype'}|[[{'var',3760,'Z'}|[{'type',3760,'integer',[]}]]]]}|[{'type',3760,'constraint',[{'atom',3760,'is_subtype'}|[[{'var',3760,'W'}|[{'type',3760,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3765
		'spec' =
		    %% Line 3765
		    [{{'rasterPos2dv',1},[{'type',3765,'bounded_fun',[{'type',3765,'fun',[{'type',3765,'product',[{'var',3765,'V'}]}|[{'atom',3765,'ok'}]]}|[[{'type',3765,'constraint',[{'atom',3765,'is_subtype'}|[[{'var',3765,'V'}|[{'type',3765,'tuple',[{'ann_type',3765,[{'var',3765,'X'}|[{'type',3765,'float',[]}]]}|[{'ann_type',3765,[{'var',3765,'Y'}|[{'type',3765,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3769
		'spec' =
		    %% Line 3769
		    [{{'rasterPos2fv',1},[{'type',3769,'bounded_fun',[{'type',3769,'fun',[{'type',3769,'product',[{'var',3769,'V'}]}|[{'atom',3769,'ok'}]]}|[[{'type',3769,'constraint',[{'atom',3769,'is_subtype'}|[[{'var',3769,'V'}|[{'type',3769,'tuple',[{'ann_type',3769,[{'var',3769,'X'}|[{'type',3769,'float',[]}]]}|[{'ann_type',3769,[{'var',3769,'Y'}|[{'type',3769,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3773
		'spec' =
		    %% Line 3773
		    [{{'rasterPos2iv',1},[{'type',3773,'bounded_fun',[{'type',3773,'fun',[{'type',3773,'product',[{'var',3773,'V'}]}|[{'atom',3773,'ok'}]]}|[[{'type',3773,'constraint',[{'atom',3773,'is_subtype'}|[[{'var',3773,'V'}|[{'type',3773,'tuple',[{'ann_type',3773,[{'var',3773,'X'}|[{'type',3773,'integer',[]}]]}|[{'ann_type',3773,[{'var',3773,'Y'}|[{'type',3773,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3777
		'spec' =
		    %% Line 3777
		    [{{'rasterPos2sv',1},[{'type',3777,'bounded_fun',[{'type',3777,'fun',[{'type',3777,'product',[{'var',3777,'V'}]}|[{'atom',3777,'ok'}]]}|[[{'type',3777,'constraint',[{'atom',3777,'is_subtype'}|[[{'var',3777,'V'}|[{'type',3777,'tuple',[{'ann_type',3777,[{'var',3777,'X'}|[{'type',3777,'integer',[]}]]}|[{'ann_type',3777,[{'var',3777,'Y'}|[{'type',3777,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 3781
		'spec' =
		    %% Line 3781
		    [{{'rasterPos3dv',1},[{'type',3781,'bounded_fun',[{'type',3781,'fun',[{'type',3781,'product',[{'var',3781,'V'}]}|[{'atom',3781,'ok'}]]}|[[{'type',3781,'constraint',[{'atom',3781,'is_subtype'}|[[{'var',3781,'V'}|[{'type',3781,'tuple',[{'ann_type',3781,[{'var',3781,'X'}|[{'type',3781,'float',[]}]]}|[{'ann_type',3781,[{'var',3781,'Y'}|[{'type',3781,'float',[]}]]}|[{'ann_type',3781,[{'var',3781,'Z'}|[{'type',3781,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3785
		'spec' =
		    %% Line 3785
		    [{{'rasterPos3fv',1},[{'type',3785,'bounded_fun',[{'type',3785,'fun',[{'type',3785,'product',[{'var',3785,'V'}]}|[{'atom',3785,'ok'}]]}|[[{'type',3785,'constraint',[{'atom',3785,'is_subtype'}|[[{'var',3785,'V'}|[{'type',3785,'tuple',[{'ann_type',3785,[{'var',3785,'X'}|[{'type',3785,'float',[]}]]}|[{'ann_type',3785,[{'var',3785,'Y'}|[{'type',3785,'float',[]}]]}|[{'ann_type',3785,[{'var',3785,'Z'}|[{'type',3785,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3789
		'spec' =
		    %% Line 3789
		    [{{'rasterPos3iv',1},[{'type',3789,'bounded_fun',[{'type',3789,'fun',[{'type',3789,'product',[{'var',3789,'V'}]}|[{'atom',3789,'ok'}]]}|[[{'type',3789,'constraint',[{'atom',3789,'is_subtype'}|[[{'var',3789,'V'}|[{'type',3789,'tuple',[{'ann_type',3789,[{'var',3789,'X'}|[{'type',3789,'integer',[]}]]}|[{'ann_type',3789,[{'var',3789,'Y'}|[{'type',3789,'integer',[]}]]}|[{'ann_type',3789,[{'var',3789,'Z'}|[{'type',3789,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3793
		'spec' =
		    %% Line 3793
		    [{{'rasterPos3sv',1},[{'type',3793,'bounded_fun',[{'type',3793,'fun',[{'type',3793,'product',[{'var',3793,'V'}]}|[{'atom',3793,'ok'}]]}|[[{'type',3793,'constraint',[{'atom',3793,'is_subtype'}|[[{'var',3793,'V'}|[{'type',3793,'tuple',[{'ann_type',3793,[{'var',3793,'X'}|[{'type',3793,'integer',[]}]]}|[{'ann_type',3793,[{'var',3793,'Y'}|[{'type',3793,'integer',[]}]]}|[{'ann_type',3793,[{'var',3793,'Z'}|[{'type',3793,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 3797
		'spec' =
		    %% Line 3797
		    [{{'rasterPos4dv',1},[{'type',3797,'bounded_fun',[{'type',3797,'fun',[{'type',3797,'product',[{'var',3797,'V'}]}|[{'atom',3797,'ok'}]]}|[[{'type',3797,'constraint',[{'atom',3797,'is_subtype'}|[[{'var',3797,'V'}|[{'type',3797,'tuple',[{'ann_type',3797,[{'var',3797,'X'}|[{'type',3797,'float',[]}]]}|[{'ann_type',3797,[{'var',3797,'Y'}|[{'type',3797,'float',[]}]]}|[{'ann_type',3797,[{'var',3797,'Z'}|[{'type',3797,'float',[]}]]}|[{'ann_type',3797,[{'var',3797,'W'}|[{'type',3797,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3801
		'spec' =
		    %% Line 3801
		    [{{'rasterPos4fv',1},[{'type',3801,'bounded_fun',[{'type',3801,'fun',[{'type',3801,'product',[{'var',3801,'V'}]}|[{'atom',3801,'ok'}]]}|[[{'type',3801,'constraint',[{'atom',3801,'is_subtype'}|[[{'var',3801,'V'}|[{'type',3801,'tuple',[{'ann_type',3801,[{'var',3801,'X'}|[{'type',3801,'float',[]}]]}|[{'ann_type',3801,[{'var',3801,'Y'}|[{'type',3801,'float',[]}]]}|[{'ann_type',3801,[{'var',3801,'Z'}|[{'type',3801,'float',[]}]]}|[{'ann_type',3801,[{'var',3801,'W'}|[{'type',3801,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3805
		'spec' =
		    %% Line 3805
		    [{{'rasterPos4iv',1},[{'type',3805,'bounded_fun',[{'type',3805,'fun',[{'type',3805,'product',[{'var',3805,'V'}]}|[{'atom',3805,'ok'}]]}|[[{'type',3805,'constraint',[{'atom',3805,'is_subtype'}|[[{'var',3805,'V'}|[{'type',3805,'tuple',[{'ann_type',3805,[{'var',3805,'X'}|[{'type',3805,'integer',[]}]]}|[{'ann_type',3805,[{'var',3805,'Y'}|[{'type',3805,'integer',[]}]]}|[{'ann_type',3805,[{'var',3805,'Z'}|[{'type',3805,'integer',[]}]]}|[{'ann_type',3805,[{'var',3805,'W'}|[{'type',3805,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3809
		'spec' =
		    %% Line 3809
		    [{{'rasterPos4sv',1},[{'type',3809,'bounded_fun',[{'type',3809,'fun',[{'type',3809,'product',[{'var',3809,'V'}]}|[{'atom',3809,'ok'}]]}|[[{'type',3809,'constraint',[{'atom',3809,'is_subtype'}|[[{'var',3809,'V'}|[{'type',3809,'tuple',[{'ann_type',3809,[{'var',3809,'X'}|[{'type',3809,'integer',[]}]]}|[{'ann_type',3809,[{'var',3809,'Y'}|[{'type',3809,'integer',[]}]]}|[{'ann_type',3809,[{'var',3809,'Z'}|[{'type',3809,'integer',[]}]]}|[{'ann_type',3809,[{'var',3809,'W'}|[{'type',3809,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 3826
		'spec' =
		    %% Line 3826
		    [{{'rectd',4},[{'type',3826,'bounded_fun',[{'type',3826,'fun',[{'type',3826,'product',[{'var',3826,'X1'}|[{'var',3826,'Y1'}|[{'var',3826,'X2'}|[{'var',3826,'Y2'}]]]]}|[{'atom',3826,'ok'}]]}|[[{'type',3826,'constraint',[{'atom',3826,'is_subtype'}|[[{'var',3826,'X1'}|[{'type',3826,'float',[]}]]]]}|[{'type',3826,'constraint',[{'atom',3826,'is_subtype'}|[[{'var',3826,'Y1'}|[{'type',3826,'float',[]}]]]]}|[{'type',3826,'constraint',[{'atom',3826,'is_subtype'}|[[{'var',3826,'X2'}|[{'type',3826,'float',[]}]]]]}|[{'type',3826,'constraint',[{'atom',3826,'is_subtype'}|[[{'var',3826,'Y2'}|[{'type',3826,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3832
		'spec' =
		    %% Line 3832
		    [{{'rectf',4},[{'type',3832,'bounded_fun',[{'type',3832,'fun',[{'type',3832,'product',[{'var',3832,'X1'}|[{'var',3832,'Y1'}|[{'var',3832,'X2'}|[{'var',3832,'Y2'}]]]]}|[{'atom',3832,'ok'}]]}|[[{'type',3832,'constraint',[{'atom',3832,'is_subtype'}|[[{'var',3832,'X1'}|[{'type',3832,'float',[]}]]]]}|[{'type',3832,'constraint',[{'atom',3832,'is_subtype'}|[[{'var',3832,'Y1'}|[{'type',3832,'float',[]}]]]]}|[{'type',3832,'constraint',[{'atom',3832,'is_subtype'}|[[{'var',3832,'X2'}|[{'type',3832,'float',[]}]]]]}|[{'type',3832,'constraint',[{'atom',3832,'is_subtype'}|[[{'var',3832,'Y2'}|[{'type',3832,'float',[]}]]]]}]]]]]]}]}],
		%% Line 3838
		'spec' =
		    %% Line 3838
		    [{{'recti',4},[{'type',3838,'bounded_fun',[{'type',3838,'fun',[{'type',3838,'product',[{'var',3838,'X1'}|[{'var',3838,'Y1'}|[{'var',3838,'X2'}|[{'var',3838,'Y2'}]]]]}|[{'atom',3838,'ok'}]]}|[[{'type',3838,'constraint',[{'atom',3838,'is_subtype'}|[[{'var',3838,'X1'}|[{'type',3838,'integer',[]}]]]]}|[{'type',3838,'constraint',[{'atom',3838,'is_subtype'}|[[{'var',3838,'Y1'}|[{'type',3838,'integer',[]}]]]]}|[{'type',3838,'constraint',[{'atom',3838,'is_subtype'}|[[{'var',3838,'X2'}|[{'type',3838,'integer',[]}]]]]}|[{'type',3838,'constraint',[{'atom',3838,'is_subtype'}|[[{'var',3838,'Y2'}|[{'type',3838,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3844
		'spec' =
		    %% Line 3844
		    [{{'rects',4},[{'type',3844,'bounded_fun',[{'type',3844,'fun',[{'type',3844,'product',[{'var',3844,'X1'}|[{'var',3844,'Y1'}|[{'var',3844,'X2'}|[{'var',3844,'Y2'}]]]]}|[{'atom',3844,'ok'}]]}|[[{'type',3844,'constraint',[{'atom',3844,'is_subtype'}|[[{'var',3844,'X1'}|[{'type',3844,'integer',[]}]]]]}|[{'type',3844,'constraint',[{'atom',3844,'is_subtype'}|[[{'var',3844,'Y1'}|[{'type',3844,'integer',[]}]]]]}|[{'type',3844,'constraint',[{'atom',3844,'is_subtype'}|[[{'var',3844,'X2'}|[{'type',3844,'integer',[]}]]]]}|[{'type',3844,'constraint',[{'atom',3844,'is_subtype'}|[[{'var',3844,'Y2'}|[{'type',3844,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 3850
		'spec' =
		    %% Line 3850
		    [{{'rectdv',2},[{'type',3850,'bounded_fun',[{'type',3850,'fun',[{'type',3850,'product',[{'var',3850,'V1'}|[{'var',3850,'V2'}]]}|[{'atom',3850,'ok'}]]}|[[{'type',3850,'constraint',[{'atom',3850,'is_subtype'}|[[{'var',3850,'V1'}|[{'type',3850,'tuple',[{'type',3850,'float',[]}|[{'type',3850,'float',[]}]]}]]]]}|[{'type',3850,'constraint',[{'atom',3850,'is_subtype'}|[[{'var',3850,'V2'}|[{'type',3850,'tuple',[{'type',3850,'float',[]}|[{'type',3850,'float',[]}]]}]]]]}]]]]}]}],
		%% Line 3856
		'spec' =
		    %% Line 3856
		    [{{'rectfv',2},[{'type',3856,'bounded_fun',[{'type',3856,'fun',[{'type',3856,'product',[{'var',3856,'V1'}|[{'var',3856,'V2'}]]}|[{'atom',3856,'ok'}]]}|[[{'type',3856,'constraint',[{'atom',3856,'is_subtype'}|[[{'var',3856,'V1'}|[{'type',3856,'tuple',[{'type',3856,'float',[]}|[{'type',3856,'float',[]}]]}]]]]}|[{'type',3856,'constraint',[{'atom',3856,'is_subtype'}|[[{'var',3856,'V2'}|[{'type',3856,'tuple',[{'type',3856,'float',[]}|[{'type',3856,'float',[]}]]}]]]]}]]]]}]}],
		%% Line 3862
		'spec' =
		    %% Line 3862
		    [{{'rectiv',2},[{'type',3862,'bounded_fun',[{'type',3862,'fun',[{'type',3862,'product',[{'var',3862,'V1'}|[{'var',3862,'V2'}]]}|[{'atom',3862,'ok'}]]}|[[{'type',3862,'constraint',[{'atom',3862,'is_subtype'}|[[{'var',3862,'V1'}|[{'type',3862,'tuple',[{'type',3862,'integer',[]}|[{'type',3862,'integer',[]}]]}]]]]}|[{'type',3862,'constraint',[{'atom',3862,'is_subtype'}|[[{'var',3862,'V2'}|[{'type',3862,'tuple',[{'type',3862,'integer',[]}|[{'type',3862,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 3868
		'spec' =
		    %% Line 3868
		    [{{'rectsv',2},[{'type',3868,'bounded_fun',[{'type',3868,'fun',[{'type',3868,'product',[{'var',3868,'V1'}|[{'var',3868,'V2'}]]}|[{'atom',3868,'ok'}]]}|[[{'type',3868,'constraint',[{'atom',3868,'is_subtype'}|[[{'var',3868,'V1'}|[{'type',3868,'tuple',[{'type',3868,'integer',[]}|[{'type',3868,'integer',[]}]]}]]]]}|[{'type',3868,'constraint',[{'atom',3868,'is_subtype'}|[[{'var',3868,'V2'}|[{'type',3868,'tuple',[{'type',3868,'integer',[]}|[{'type',3868,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 3896
		'spec' =
		    %% Line 3896
		    [{{'vertexPointer',4},[{'type',3896,'bounded_fun',[{'type',3896,'fun',[{'type',3896,'product',[{'var',3896,'Size'}|[{'var',3896,'Type'}|[{'var',3896,'Stride'}|[{'var',3896,'Ptr'}]]]]}|[{'atom',3896,'ok'}]]}|[[{'type',3896,'constraint',[{'atom',3896,'is_subtype'}|[[{'var',3896,'Size'}|[{'type',3896,'integer',[]}]]]]}|[{'type',3896,'constraint',[{'atom',3896,'is_subtype'}|[[{'var',3896,'Type'}|[{'type',3896,'enum',[]}]]]]}|[{'type',3896,'constraint',[{'atom',3896,'is_subtype'}|[[{'var',3896,'Stride'}|[{'type',3896,'integer',[]}]]]]}|[{'type',3896,'constraint',[{'atom',3896,'is_subtype'}|[[{'var',3896,'Ptr'}|[{'type',3896,'union',[{'type',3896,'offset',[]}|[{'type',3896,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 3927
		'spec' =
		    %% Line 3927
		    [{{'normalPointer',3},[{'type',3927,'bounded_fun',[{'type',3927,'fun',[{'type',3927,'product',[{'var',3927,'Type'}|[{'var',3927,'Stride'}|[{'var',3927,'Ptr'}]]]}|[{'atom',3927,'ok'}]]}|[[{'type',3927,'constraint',[{'atom',3927,'is_subtype'}|[[{'var',3927,'Type'}|[{'type',3927,'enum',[]}]]]]}|[{'type',3927,'constraint',[{'atom',3927,'is_subtype'}|[[{'var',3927,'Stride'}|[{'type',3927,'integer',[]}]]]]}|[{'type',3927,'constraint',[{'atom',3927,'is_subtype'}|[[{'var',3927,'Ptr'}|[{'type',3927,'union',[{'type',3927,'offset',[]}|[{'type',3927,'mem',[]}]]}]]]]}]]]]]}]}],
		%% Line 3959
		'spec' =
		    %% Line 3959
		    [{{'colorPointer',4},[{'type',3959,'bounded_fun',[{'type',3959,'fun',[{'type',3959,'product',[{'var',3959,'Size'}|[{'var',3959,'Type'}|[{'var',3959,'Stride'}|[{'var',3959,'Ptr'}]]]]}|[{'atom',3959,'ok'}]]}|[[{'type',3959,'constraint',[{'atom',3959,'is_subtype'}|[[{'var',3959,'Size'}|[{'type',3959,'integer',[]}]]]]}|[{'type',3959,'constraint',[{'atom',3959,'is_subtype'}|[[{'var',3959,'Type'}|[{'type',3959,'enum',[]}]]]]}|[{'type',3959,'constraint',[{'atom',3959,'is_subtype'}|[[{'var',3959,'Stride'}|[{'type',3959,'integer',[]}]]]]}|[{'type',3959,'constraint',[{'atom',3959,'is_subtype'}|[[{'var',3959,'Ptr'}|[{'type',3959,'union',[{'type',3959,'offset',[]}|[{'type',3959,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 3989
		'spec' =
		    %% Line 3989
		    [{{'indexPointer',3},[{'type',3989,'bounded_fun',[{'type',3989,'fun',[{'type',3989,'product',[{'var',3989,'Type'}|[{'var',3989,'Stride'}|[{'var',3989,'Ptr'}]]]}|[{'atom',3989,'ok'}]]}|[[{'type',3989,'constraint',[{'atom',3989,'is_subtype'}|[[{'var',3989,'Type'}|[{'type',3989,'enum',[]}]]]]}|[{'type',3989,'constraint',[{'atom',3989,'is_subtype'}|[[{'var',3989,'Stride'}|[{'type',3989,'integer',[]}]]]]}|[{'type',3989,'constraint',[{'atom',3989,'is_subtype'}|[[{'var',3989,'Ptr'}|[{'type',3989,'union',[{'type',3989,'offset',[]}|[{'type',3989,'mem',[]}]]}]]]]}]]]]]}]}],
		%% Line 4023
		'spec' =
		    %% Line 4023
		    [{{'texCoordPointer',4},[{'type',4023,'bounded_fun',[{'type',4023,'fun',[{'type',4023,'product',[{'var',4023,'Size'}|[{'var',4023,'Type'}|[{'var',4023,'Stride'}|[{'var',4023,'Ptr'}]]]]}|[{'atom',4023,'ok'}]]}|[[{'type',4023,'constraint',[{'atom',4023,'is_subtype'}|[[{'var',4023,'Size'}|[{'type',4023,'integer',[]}]]]]}|[{'type',4023,'constraint',[{'atom',4023,'is_subtype'}|[[{'var',4023,'Type'}|[{'type',4023,'enum',[]}]]]]}|[{'type',4023,'constraint',[{'atom',4023,'is_subtype'}|[[{'var',4023,'Stride'}|[{'type',4023,'integer',[]}]]]]}|[{'type',4023,'constraint',[{'atom',4023,'is_subtype'}|[[{'var',4023,'Ptr'}|[{'type',4023,'union',[{'type',4023,'offset',[]}|[{'type',4023,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 4052
		'spec' =
		    %% Line 4052
		    [{{'edgeFlagPointer',2},[{'type',4052,'bounded_fun',[{'type',4052,'fun',[{'type',4052,'product',[{'var',4052,'Stride'}|[{'var',4052,'Ptr'}]]}|[{'atom',4052,'ok'}]]}|[[{'type',4052,'constraint',[{'atom',4052,'is_subtype'}|[[{'var',4052,'Stride'}|[{'type',4052,'integer',[]}]]]]}|[{'type',4052,'constraint',[{'atom',4052,'is_subtype'}|[[{'var',4052,'Ptr'}|[{'type',4052,'union',[{'type',4052,'offset',[]}|[{'type',4052,'mem',[]}]]}]]]]}]]]]}]}],
		%% Line 4080
		'spec' =
		    %% Line 4080
		    [{{'arrayElement',1},[{'type',4080,'bounded_fun',[{'type',4080,'fun',[{'type',4080,'product',[{'var',4080,'I'}]}|[{'atom',4080,'ok'}]]}|[[{'type',4080,'constraint',[{'atom',4080,'is_subtype'}|[[{'var',4080,'I'}|[{'type',4080,'integer',[]}]]]]}]]]}]}],
		%% Line 4101
		'spec' =
		    %% Line 4101
		    [{{'drawArrays',3},[{'type',4101,'bounded_fun',[{'type',4101,'fun',[{'type',4101,'product',[{'var',4101,'Mode'}|[{'var',4101,'First'}|[{'var',4101,'Count'}]]]}|[{'atom',4101,'ok'}]]}|[[{'type',4101,'constraint',[{'atom',4101,'is_subtype'}|[[{'var',4101,'Mode'}|[{'type',4101,'enum',[]}]]]]}|[{'type',4101,'constraint',[{'atom',4101,'is_subtype'}|[[{'var',4101,'First'}|[{'type',4101,'integer',[]}]]]]}|[{'type',4101,'constraint',[{'atom',4101,'is_subtype'}|[[{'var',4101,'Count'}|[{'type',4101,'integer',[]}]]]]}]]]]]}]}],
		%% Line 4123
		'spec' =
		    %% Line 4123
		    [{{'drawElements',4},[{'type',4123,'bounded_fun',[{'type',4123,'fun',[{'type',4123,'product',[{'var',4123,'Mode'}|[{'var',4123,'Count'}|[{'var',4123,'Type'}|[{'var',4123,'Indices'}]]]]}|[{'atom',4123,'ok'}]]}|[[{'type',4123,'constraint',[{'atom',4123,'is_subtype'}|[[{'var',4123,'Mode'}|[{'type',4123,'enum',[]}]]]]}|[{'type',4123,'constraint',[{'atom',4123,'is_subtype'}|[[{'var',4123,'Count'}|[{'type',4123,'integer',[]}]]]]}|[{'type',4123,'constraint',[{'atom',4123,'is_subtype'}|[[{'var',4123,'Type'}|[{'type',4123,'enum',[]}]]]]}|[{'type',4123,'constraint',[{'atom',4123,'is_subtype'}|[[{'var',4123,'Indices'}|[{'type',4123,'union',[{'type',4123,'offset',[]}|[{'type',4123,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 4151
		'spec' =
		    %% Line 4151
		    [{{'interleavedArrays',3},[{'type',4151,'bounded_fun',[{'type',4151,'fun',[{'type',4151,'product',[{'var',4151,'Format'}|[{'var',4151,'Stride'}|[{'var',4151,'Pointer'}]]]}|[{'atom',4151,'ok'}]]}|[[{'type',4151,'constraint',[{'atom',4151,'is_subtype'}|[[{'var',4151,'Format'}|[{'type',4151,'enum',[]}]]]]}|[{'type',4151,'constraint',[{'atom',4151,'is_subtype'}|[[{'var',4151,'Stride'}|[{'type',4151,'integer',[]}]]]]}|[{'type',4151,'constraint',[{'atom',4151,'is_subtype'}|[[{'var',4151,'Pointer'}|[{'type',4151,'union',[{'type',4151,'offset',[]}|[{'type',4151,'mem',[]}]]}]]]]}]]]]]}]}],
		%% Line 4185
		'spec' =
		    %% Line 4185
		    [{{'shadeModel',1},[{'type',4185,'bounded_fun',[{'type',4185,'fun',[{'type',4185,'product',[{'var',4185,'Mode'}]}|[{'atom',4185,'ok'}]]}|[[{'type',4185,'constraint',[{'atom',4185,'is_subtype'}|[[{'var',4185,'Mode'}|[{'type',4185,'enum',[]}]]]]}]]]}]}],
		%% Line 4279
		'spec' =
		    %% Line 4279
		    [{{'lightf',3},[{'type',4279,'bounded_fun',[{'type',4279,'fun',[{'type',4279,'product',[{'var',4279,'Light'}|[{'var',4279,'Pname'}|[{'var',4279,'Param'}]]]}|[{'atom',4279,'ok'}]]}|[[{'type',4279,'constraint',[{'atom',4279,'is_subtype'}|[[{'var',4279,'Light'}|[{'type',4279,'enum',[]}]]]]}|[{'type',4279,'constraint',[{'atom',4279,'is_subtype'}|[[{'var',4279,'Pname'}|[{'type',4279,'enum',[]}]]]]}|[{'type',4279,'constraint',[{'atom',4279,'is_subtype'}|[[{'var',4279,'Param'}|[{'type',4279,'float',[]}]]]]}]]]]]}]}],
		%% Line 4285
		'spec' =
		    %% Line 4285
		    [{{'lighti',3},[{'type',4285,'bounded_fun',[{'type',4285,'fun',[{'type',4285,'product',[{'var',4285,'Light'}|[{'var',4285,'Pname'}|[{'var',4285,'Param'}]]]}|[{'atom',4285,'ok'}]]}|[[{'type',4285,'constraint',[{'atom',4285,'is_subtype'}|[[{'var',4285,'Light'}|[{'type',4285,'enum',[]}]]]]}|[{'type',4285,'constraint',[{'atom',4285,'is_subtype'}|[[{'var',4285,'Pname'}|[{'type',4285,'enum',[]}]]]]}|[{'type',4285,'constraint',[{'atom',4285,'is_subtype'}|[[{'var',4285,'Param'}|[{'type',4285,'integer',[]}]]]]}]]]]]}]}],
		%% Line 4291
		'spec' =
		    %% Line 4291
		    [{{'lightfv',3},[{'type',4291,'bounded_fun',[{'type',4291,'fun',[{'type',4291,'product',[{'var',4291,'Light'}|[{'var',4291,'Pname'}|[{'var',4291,'Params'}]]]}|[{'atom',4291,'ok'}]]}|[[{'type',4291,'constraint',[{'atom',4291,'is_subtype'}|[[{'var',4291,'Light'}|[{'type',4291,'enum',[]}]]]]}|[{'type',4291,'constraint',[{'atom',4291,'is_subtype'}|[[{'var',4291,'Pname'}|[{'type',4291,'enum',[]}]]]]}|[{'type',4291,'constraint',[{'atom',4291,'is_subtype'}|[[{'var',4291,'Params'}|[{'type',4291,'tuple',[{'type',4291,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 4298
		'spec' =
		    %% Line 4298
		    [{{'lightiv',3},[{'type',4298,'bounded_fun',[{'type',4298,'fun',[{'type',4298,'product',[{'var',4298,'Light'}|[{'var',4298,'Pname'}|[{'var',4298,'Params'}]]]}|[{'atom',4298,'ok'}]]}|[[{'type',4298,'constraint',[{'atom',4298,'is_subtype'}|[[{'var',4298,'Light'}|[{'type',4298,'enum',[]}]]]]}|[{'type',4298,'constraint',[{'atom',4298,'is_subtype'}|[[{'var',4298,'Pname'}|[{'type',4298,'enum',[]}]]]]}|[{'type',4298,'constraint',[{'atom',4298,'is_subtype'}|[[{'var',4298,'Params'}|[{'type',4298,'tuple',[{'type',4298,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 4378
		'spec' =
		    %% Line 4378
		    [{{'getLightfv',2},[{'type',4378,'bounded_fun',[{'type',4378,'fun',[{'type',4378,'product',[{'var',4378,'Light'}|[{'var',4378,'Pname'}]]}|[{'type',4378,'tuple',[{'type',4378,'float',[]}|[{'type',4378,'float',[]}|[{'type',4378,'float',[]}|[{'type',4378,'float',[]}]]]]}]]}|[[{'type',4378,'constraint',[{'atom',4378,'is_subtype'}|[[{'var',4378,'Light'}|[{'type',4378,'enum',[]}]]]]}|[{'type',4378,'constraint',[{'atom',4378,'is_subtype'}|[[{'var',4378,'Pname'}|[{'type',4378,'enum',[]}]]]]}]]]]}]}],
		%% Line 4384
		'spec' =
		    %% Line 4384
		    [{{'getLightiv',2},[{'type',4384,'bounded_fun',[{'type',4384,'fun',[{'type',4384,'product',[{'var',4384,'Light'}|[{'var',4384,'Pname'}]]}|[{'type',4384,'tuple',[{'type',4384,'integer',[]}|[{'type',4384,'integer',[]}|[{'type',4384,'integer',[]}|[{'type',4384,'integer',[]}]]]]}]]}|[[{'type',4384,'constraint',[{'atom',4384,'is_subtype'}|[[{'var',4384,'Light'}|[{'type',4384,'enum',[]}]]]]}|[{'type',4384,'constraint',[{'atom',4384,'is_subtype'}|[[{'var',4384,'Pname'}|[{'type',4384,'enum',[]}]]]]}]]]]}]}],
		%% Line 4450
		'spec' =
		    %% Line 4450
		    [{{'lightModelf',2},[{'type',4450,'bounded_fun',[{'type',4450,'fun',[{'type',4450,'product',[{'var',4450,'Pname'}|[{'var',4450,'Param'}]]}|[{'atom',4450,'ok'}]]}|[[{'type',4450,'constraint',[{'atom',4450,'is_subtype'}|[[{'var',4450,'Pname'}|[{'type',4450,'enum',[]}]]]]}|[{'type',4450,'constraint',[{'atom',4450,'is_subtype'}|[[{'var',4450,'Param'}|[{'type',4450,'float',[]}]]]]}]]]]}]}],
		%% Line 4456
		'spec' =
		    %% Line 4456
		    [{{'lightModeli',2},[{'type',4456,'bounded_fun',[{'type',4456,'fun',[{'type',4456,'product',[{'var',4456,'Pname'}|[{'var',4456,'Param'}]]}|[{'atom',4456,'ok'}]]}|[[{'type',4456,'constraint',[{'atom',4456,'is_subtype'}|[[{'var',4456,'Pname'}|[{'type',4456,'enum',[]}]]]]}|[{'type',4456,'constraint',[{'atom',4456,'is_subtype'}|[[{'var',4456,'Param'}|[{'type',4456,'integer',[]}]]]]}]]]]}]}],
		%% Line 4462
		'spec' =
		    %% Line 4462
		    [{{'lightModelfv',2},[{'type',4462,'bounded_fun',[{'type',4462,'fun',[{'type',4462,'product',[{'var',4462,'Pname'}|[{'var',4462,'Params'}]]}|[{'atom',4462,'ok'}]]}|[[{'type',4462,'constraint',[{'atom',4462,'is_subtype'}|[[{'var',4462,'Pname'}|[{'type',4462,'enum',[]}]]]]}|[{'type',4462,'constraint',[{'atom',4462,'is_subtype'}|[[{'var',4462,'Params'}|[{'type',4462,'tuple',[{'type',4462,'float',[]}]}]]]]}]]]]}]}],
		%% Line 4469
		'spec' =
		    %% Line 4469
		    [{{'lightModeliv',2},[{'type',4469,'bounded_fun',[{'type',4469,'fun',[{'type',4469,'product',[{'var',4469,'Pname'}|[{'var',4469,'Params'}]]}|[{'atom',4469,'ok'}]]}|[[{'type',4469,'constraint',[{'atom',4469,'is_subtype'}|[[{'var',4469,'Pname'}|[{'type',4469,'enum',[]}]]]]}|[{'type',4469,'constraint',[{'atom',4469,'is_subtype'}|[[{'var',4469,'Params'}|[{'type',4469,'tuple',[{'type',4469,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 4537
		'spec' =
		    %% Line 4537
		    [{{'materialf',3},[{'type',4537,'bounded_fun',[{'type',4537,'fun',[{'type',4537,'product',[{'var',4537,'Face'}|[{'var',4537,'Pname'}|[{'var',4537,'Param'}]]]}|[{'atom',4537,'ok'}]]}|[[{'type',4537,'constraint',[{'atom',4537,'is_subtype'}|[[{'var',4537,'Face'}|[{'type',4537,'enum',[]}]]]]}|[{'type',4537,'constraint',[{'atom',4537,'is_subtype'}|[[{'var',4537,'Pname'}|[{'type',4537,'enum',[]}]]]]}|[{'type',4537,'constraint',[{'atom',4537,'is_subtype'}|[[{'var',4537,'Param'}|[{'type',4537,'float',[]}]]]]}]]]]]}]}],
		%% Line 4543
		'spec' =
		    %% Line 4543
		    [{{'materiali',3},[{'type',4543,'bounded_fun',[{'type',4543,'fun',[{'type',4543,'product',[{'var',4543,'Face'}|[{'var',4543,'Pname'}|[{'var',4543,'Param'}]]]}|[{'atom',4543,'ok'}]]}|[[{'type',4543,'constraint',[{'atom',4543,'is_subtype'}|[[{'var',4543,'Face'}|[{'type',4543,'enum',[]}]]]]}|[{'type',4543,'constraint',[{'atom',4543,'is_subtype'}|[[{'var',4543,'Pname'}|[{'type',4543,'enum',[]}]]]]}|[{'type',4543,'constraint',[{'atom',4543,'is_subtype'}|[[{'var',4543,'Param'}|[{'type',4543,'integer',[]}]]]]}]]]]]}]}],
		%% Line 4549
		'spec' =
		    %% Line 4549
		    [{{'materialfv',3},[{'type',4549,'bounded_fun',[{'type',4549,'fun',[{'type',4549,'product',[{'var',4549,'Face'}|[{'var',4549,'Pname'}|[{'var',4549,'Params'}]]]}|[{'atom',4549,'ok'}]]}|[[{'type',4549,'constraint',[{'atom',4549,'is_subtype'}|[[{'var',4549,'Face'}|[{'type',4549,'enum',[]}]]]]}|[{'type',4549,'constraint',[{'atom',4549,'is_subtype'}|[[{'var',4549,'Pname'}|[{'type',4549,'enum',[]}]]]]}|[{'type',4549,'constraint',[{'atom',4549,'is_subtype'}|[[{'var',4549,'Params'}|[{'type',4549,'tuple',[{'type',4549,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 4556
		'spec' =
		    %% Line 4556
		    [{{'materialiv',3},[{'type',4556,'bounded_fun',[{'type',4556,'fun',[{'type',4556,'product',[{'var',4556,'Face'}|[{'var',4556,'Pname'}|[{'var',4556,'Params'}]]]}|[{'atom',4556,'ok'}]]}|[[{'type',4556,'constraint',[{'atom',4556,'is_subtype'}|[[{'var',4556,'Face'}|[{'type',4556,'enum',[]}]]]]}|[{'type',4556,'constraint',[{'atom',4556,'is_subtype'}|[[{'var',4556,'Pname'}|[{'type',4556,'enum',[]}]]]]}|[{'type',4556,'constraint',[{'atom',4556,'is_subtype'}|[[{'var',4556,'Params'}|[{'type',4556,'tuple',[{'type',4556,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 4606
		'spec' =
		    %% Line 4606
		    [{{'getMaterialfv',2},[{'type',4606,'bounded_fun',[{'type',4606,'fun',[{'type',4606,'product',[{'var',4606,'Face'}|[{'var',4606,'Pname'}]]}|[{'type',4606,'tuple',[{'type',4606,'float',[]}|[{'type',4606,'float',[]}|[{'type',4606,'float',[]}|[{'type',4606,'float',[]}]]]]}]]}|[[{'type',4606,'constraint',[{'atom',4606,'is_subtype'}|[[{'var',4606,'Face'}|[{'type',4606,'enum',[]}]]]]}|[{'type',4606,'constraint',[{'atom',4606,'is_subtype'}|[[{'var',4606,'Pname'}|[{'type',4606,'enum',[]}]]]]}]]]]}]}],
		%% Line 4612
		'spec' =
		    %% Line 4612
		    [{{'getMaterialiv',2},[{'type',4612,'bounded_fun',[{'type',4612,'fun',[{'type',4612,'product',[{'var',4612,'Face'}|[{'var',4612,'Pname'}]]}|[{'type',4612,'tuple',[{'type',4612,'integer',[]}|[{'type',4612,'integer',[]}|[{'type',4612,'integer',[]}|[{'type',4612,'integer',[]}]]]]}]]}|[[{'type',4612,'constraint',[{'atom',4612,'is_subtype'}|[[{'var',4612,'Face'}|[{'type',4612,'enum',[]}]]]]}|[{'type',4612,'constraint',[{'atom',4612,'is_subtype'}|[[{'var',4612,'Pname'}|[{'type',4612,'enum',[]}]]]]}]]]]}]}],
		%% Line 4627
		'spec' =
		    %% Line 4627
		    [{{'colorMaterial',2},[{'type',4627,'bounded_fun',[{'type',4627,'fun',[{'type',4627,'product',[{'var',4627,'Face'}|[{'var',4627,'Mode'}]]}|[{'atom',4627,'ok'}]]}|[[{'type',4627,'constraint',[{'atom',4627,'is_subtype'}|[[{'var',4627,'Face'}|[{'type',4627,'enum',[]}]]]]}|[{'type',4627,'constraint',[{'atom',4627,'is_subtype'}|[[{'var',4627,'Mode'}|[{'type',4627,'enum',[]}]]]]}]]]]}]}],
		%% Line 4649
		'spec' =
		    %% Line 4649
		    [{{'pixelZoom',2},[{'type',4649,'bounded_fun',[{'type',4649,'fun',[{'type',4649,'product',[{'var',4649,'Xfactor'}|[{'var',4649,'Yfactor'}]]}|[{'atom',4649,'ok'}]]}|[[{'type',4649,'constraint',[{'atom',4649,'is_subtype'}|[[{'var',4649,'Xfactor'}|[{'type',4649,'float',[]}]]]]}|[{'type',4649,'constraint',[{'atom',4649,'is_subtype'}|[[{'var',4649,'Yfactor'}|[{'type',4649,'float',[]}]]]]}]]]]}]}],
		%% Line 4837
		'spec' =
		    %% Line 4837
		    [{{'pixelStoref',2},[{'type',4837,'bounded_fun',[{'type',4837,'fun',[{'type',4837,'product',[{'var',4837,'Pname'}|[{'var',4837,'Param'}]]}|[{'atom',4837,'ok'}]]}|[[{'type',4837,'constraint',[{'atom',4837,'is_subtype'}|[[{'var',4837,'Pname'}|[{'type',4837,'enum',[]}]]]]}|[{'type',4837,'constraint',[{'atom',4837,'is_subtype'}|[[{'var',4837,'Param'}|[{'type',4837,'float',[]}]]]]}]]]]}]}],
		%% Line 4843
		'spec' =
		    %% Line 4843
		    [{{'pixelStorei',2},[{'type',4843,'bounded_fun',[{'type',4843,'fun',[{'type',4843,'product',[{'var',4843,'Pname'}|[{'var',4843,'Param'}]]}|[{'atom',4843,'ok'}]]}|[[{'type',4843,'constraint',[{'atom',4843,'is_subtype'}|[[{'var',4843,'Pname'}|[{'type',4843,'enum',[]}]]]]}|[{'type',4843,'constraint',[{'atom',4843,'is_subtype'}|[[{'var',4843,'Param'}|[{'type',4843,'integer',[]}]]]]}]]]]}]}],
		%% Line 4995
		'spec' =
		    %% Line 4995
		    [{{'pixelTransferf',2},[{'type',4995,'bounded_fun',[{'type',4995,'fun',[{'type',4995,'product',[{'var',4995,'Pname'}|[{'var',4995,'Param'}]]}|[{'atom',4995,'ok'}]]}|[[{'type',4995,'constraint',[{'atom',4995,'is_subtype'}|[[{'var',4995,'Pname'}|[{'type',4995,'enum',[]}]]]]}|[{'type',4995,'constraint',[{'atom',4995,'is_subtype'}|[[{'var',4995,'Param'}|[{'type',4995,'float',[]}]]]]}]]]]}]}],
		%% Line 5001
		'spec' =
		    %% Line 5001
		    [{{'pixelTransferi',2},[{'type',5001,'bounded_fun',[{'type',5001,'fun',[{'type',5001,'product',[{'var',5001,'Pname'}|[{'var',5001,'Param'}]]}|[{'atom',5001,'ok'}]]}|[[{'type',5001,'constraint',[{'atom',5001,'is_subtype'}|[[{'var',5001,'Pname'}|[{'type',5001,'enum',[]}]]]]}|[{'type',5001,'constraint',[{'atom',5001,'is_subtype'}|[[{'var',5001,'Param'}|[{'type',5001,'integer',[]}]]]]}]]]]}]}],
		%% Line 5084
		'spec' =
		    %% Line 5084
		    [{{'pixelMapfv',3},[{'type',5084,'bounded_fun',[{'type',5084,'fun',[{'type',5084,'product',[{'var',5084,'Map'}|[{'var',5084,'Mapsize'}|[{'var',5084,'Values'}]]]}|[{'atom',5084,'ok'}]]}|[[{'type',5084,'constraint',[{'atom',5084,'is_subtype'}|[[{'var',5084,'Map'}|[{'type',5084,'enum',[]}]]]]}|[{'type',5084,'constraint',[{'atom',5084,'is_subtype'}|[[{'var',5084,'Mapsize'}|[{'type',5084,'integer',[]}]]]]}|[{'type',5084,'constraint',[{'atom',5084,'is_subtype'}|[[{'var',5084,'Values'}|[{'type',5084,'binary',[]}]]]]}]]]]]}]}],
		%% Line 5091
		'spec' =
		    %% Line 5091
		    [{{'pixelMapuiv',3},[{'type',5091,'bounded_fun',[{'type',5091,'fun',[{'type',5091,'product',[{'var',5091,'Map'}|[{'var',5091,'Mapsize'}|[{'var',5091,'Values'}]]]}|[{'atom',5091,'ok'}]]}|[[{'type',5091,'constraint',[{'atom',5091,'is_subtype'}|[[{'var',5091,'Map'}|[{'type',5091,'enum',[]}]]]]}|[{'type',5091,'constraint',[{'atom',5091,'is_subtype'}|[[{'var',5091,'Mapsize'}|[{'type',5091,'integer',[]}]]]]}|[{'type',5091,'constraint',[{'atom',5091,'is_subtype'}|[[{'var',5091,'Values'}|[{'type',5091,'binary',[]}]]]]}]]]]]}]}],
		%% Line 5098
		'spec' =
		    %% Line 5098
		    [{{'pixelMapusv',3},[{'type',5098,'bounded_fun',[{'type',5098,'fun',[{'type',5098,'product',[{'var',5098,'Map'}|[{'var',5098,'Mapsize'}|[{'var',5098,'Values'}]]]}|[{'atom',5098,'ok'}]]}|[[{'type',5098,'constraint',[{'atom',5098,'is_subtype'}|[[{'var',5098,'Map'}|[{'type',5098,'enum',[]}]]]]}|[{'type',5098,'constraint',[{'atom',5098,'is_subtype'}|[[{'var',5098,'Mapsize'}|[{'type',5098,'integer',[]}]]]]}|[{'type',5098,'constraint',[{'atom',5098,'is_subtype'}|[[{'var',5098,'Values'}|[{'type',5098,'binary',[]}]]]]}]]]]]}]}],
		%% Line 5127
		'spec' =
		    %% Line 5127
		    [{{'getPixelMapfv',2},[{'type',5127,'bounded_fun',[{'type',5127,'fun',[{'type',5127,'product',[{'var',5127,'Map'}|[{'var',5127,'Values'}]]}|[{'atom',5127,'ok'}]]}|[[{'type',5127,'constraint',[{'atom',5127,'is_subtype'}|[[{'var',5127,'Map'}|[{'type',5127,'enum',[]}]]]]}|[{'type',5127,'constraint',[{'atom',5127,'is_subtype'}|[[{'var',5127,'Values'}|[{'type',5127,'mem',[]}]]]]}]]]]}]}],
		%% Line 5134
		'spec' =
		    %% Line 5134
		    [{{'getPixelMapuiv',2},[{'type',5134,'bounded_fun',[{'type',5134,'fun',[{'type',5134,'product',[{'var',5134,'Map'}|[{'var',5134,'Values'}]]}|[{'atom',5134,'ok'}]]}|[[{'type',5134,'constraint',[{'atom',5134,'is_subtype'}|[[{'var',5134,'Map'}|[{'type',5134,'enum',[]}]]]]}|[{'type',5134,'constraint',[{'atom',5134,'is_subtype'}|[[{'var',5134,'Values'}|[{'type',5134,'mem',[]}]]]]}]]]]}]}],
		%% Line 5141
		'spec' =
		    %% Line 5141
		    [{{'getPixelMapusv',2},[{'type',5141,'bounded_fun',[{'type',5141,'fun',[{'type',5141,'product',[{'var',5141,'Map'}|[{'var',5141,'Values'}]]}|[{'atom',5141,'ok'}]]}|[[{'type',5141,'constraint',[{'atom',5141,'is_subtype'}|[[{'var',5141,'Map'}|[{'type',5141,'enum',[]}]]]]}|[{'type',5141,'constraint',[{'atom',5141,'is_subtype'}|[[{'var',5141,'Values'}|[{'type',5141,'mem',[]}]]]]}]]]]}]}],
		%% Line 5189
		'spec' =
		    %% Line 5189
		    [{{'bitmap',7},[{'type',5189,'bounded_fun',[{'type',5189,'fun',[{'type',5189,'product',[{'var',5189,'Width'}|[{'var',5189,'Height'}|[{'var',5189,'Xorig'}|[{'var',5189,'Yorig'}|[{'var',5189,'Xmove'}|[{'var',5189,'Ymove'}|[{'var',5189,'Bitmap'}]]]]]]]}|[{'atom',5189,'ok'}]]}|[[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Width'}|[{'type',5189,'integer',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Height'}|[{'type',5189,'integer',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Xorig'}|[{'type',5189,'float',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Yorig'}|[{'type',5189,'float',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Xmove'}|[{'type',5189,'float',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Ymove'}|[{'type',5189,'float',[]}]]]]}|[{'type',5189,'constraint',[{'atom',5189,'is_subtype'}|[[{'var',5189,'Bitmap'}|[{'type',5189,'union',[{'type',5189,'offset',[]}|[{'type',5189,'mem',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 5290
		'spec' =
		    %% Line 5290
		    [{{'readPixels',7},[{'type',5290,'bounded_fun',[{'type',5290,'fun',[{'type',5290,'product',[{'var',5290,'X'}|[{'var',5290,'Y'}|[{'var',5290,'Width'}|[{'var',5290,'Height'}|[{'var',5290,'Format'}|[{'var',5290,'Type'}|[{'var',5290,'Pixels'}]]]]]]]}|[{'atom',5290,'ok'}]]}|[[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'X'}|[{'type',5290,'integer',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Y'}|[{'type',5290,'integer',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Width'}|[{'type',5290,'integer',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Height'}|[{'type',5290,'integer',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Format'}|[{'type',5290,'enum',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Type'}|[{'type',5290,'enum',[]}]]]]}|[{'type',5290,'constraint',[{'atom',5290,'is_subtype'}|[[{'var',5290,'Pixels'}|[{'type',5290,'mem',[]}]]]]}]]]]]]]]]}]}],
		%% Line 5535
		'spec' =
		    %% Line 5535
		    [{{'drawPixels',5},[{'type',5535,'bounded_fun',[{'type',5535,'fun',[{'type',5535,'product',[{'var',5535,'Width'}|[{'var',5535,'Height'}|[{'var',5535,'Format'}|[{'var',5535,'Type'}|[{'var',5535,'Pixels'}]]]]]}|[{'atom',5535,'ok'}]]}|[[{'type',5535,'constraint',[{'atom',5535,'is_subtype'}|[[{'var',5535,'Width'}|[{'type',5535,'integer',[]}]]]]}|[{'type',5535,'constraint',[{'atom',5535,'is_subtype'}|[[{'var',5535,'Height'}|[{'type',5535,'integer',[]}]]]]}|[{'type',5535,'constraint',[{'atom',5535,'is_subtype'}|[[{'var',5535,'Format'}|[{'type',5535,'enum',[]}]]]]}|[{'type',5535,'constraint',[{'atom',5535,'is_subtype'}|[[{'var',5535,'Type'}|[{'type',5535,'enum',[]}]]]]}|[{'type',5535,'constraint',[{'atom',5535,'is_subtype'}|[[{'var',5535,'Pixels'}|[{'type',5535,'union',[{'type',5535,'offset',[]}|[{'type',5535,'mem',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 5642
		'spec' =
		    %% Line 5642
		    [{{'copyPixels',5},[{'type',5642,'bounded_fun',[{'type',5642,'fun',[{'type',5642,'product',[{'var',5642,'X'}|[{'var',5642,'Y'}|[{'var',5642,'Width'}|[{'var',5642,'Height'}|[{'var',5642,'Type'}]]]]]}|[{'atom',5642,'ok'}]]}|[[{'type',5642,'constraint',[{'atom',5642,'is_subtype'}|[[{'var',5642,'X'}|[{'type',5642,'integer',[]}]]]]}|[{'type',5642,'constraint',[{'atom',5642,'is_subtype'}|[[{'var',5642,'Y'}|[{'type',5642,'integer',[]}]]]]}|[{'type',5642,'constraint',[{'atom',5642,'is_subtype'}|[[{'var',5642,'Width'}|[{'type',5642,'integer',[]}]]]]}|[{'type',5642,'constraint',[{'atom',5642,'is_subtype'}|[[{'var',5642,'Height'}|[{'type',5642,'integer',[]}]]]]}|[{'type',5642,'constraint',[{'atom',5642,'is_subtype'}|[[{'var',5642,'Type'}|[{'type',5642,'enum',[]}]]]]}]]]]]]]}]}],
		%% Line 5705
		'spec' =
		    %% Line 5705
		    [{{'stencilFunc',3},[{'type',5705,'bounded_fun',[{'type',5705,'fun',[{'type',5705,'product',[{'var',5705,'Func'}|[{'var',5705,'Ref'}|[{'var',5705,'Mask'}]]]}|[{'atom',5705,'ok'}]]}|[[{'type',5705,'constraint',[{'atom',5705,'is_subtype'}|[[{'var',5705,'Func'}|[{'type',5705,'enum',[]}]]]]}|[{'type',5705,'constraint',[{'atom',5705,'is_subtype'}|[[{'var',5705,'Ref'}|[{'type',5705,'integer',[]}]]]]}|[{'type',5705,'constraint',[{'atom',5705,'is_subtype'}|[[{'var',5705,'Mask'}|[{'type',5705,'integer',[]}]]]]}]]]]]}]}],
		%% Line 5723
		'spec' =
		    %% Line 5723
		    [{{'stencilMask',1},[{'type',5723,'bounded_fun',[{'type',5723,'fun',[{'type',5723,'product',[{'var',5723,'Mask'}]}|[{'atom',5723,'ok'}]]}|[[{'type',5723,'constraint',[{'atom',5723,'is_subtype'}|[[{'var',5723,'Mask'}|[{'type',5723,'integer',[]}]]]]}]]]}]}],
		%% Line 5784
		'spec' =
		    %% Line 5784
		    [{{'stencilOp',3},[{'type',5784,'bounded_fun',[{'type',5784,'fun',[{'type',5784,'product',[{'var',5784,'Fail'}|[{'var',5784,'Zfail'}|[{'var',5784,'Zpass'}]]]}|[{'atom',5784,'ok'}]]}|[[{'type',5784,'constraint',[{'atom',5784,'is_subtype'}|[[{'var',5784,'Fail'}|[{'type',5784,'enum',[]}]]]]}|[{'type',5784,'constraint',[{'atom',5784,'is_subtype'}|[[{'var',5784,'Zfail'}|[{'type',5784,'enum',[]}]]]]}|[{'type',5784,'constraint',[{'atom',5784,'is_subtype'}|[[{'var',5784,'Zpass'}|[{'type',5784,'enum',[]}]]]]}]]]]]}]}],
		%% Line 5795
		'spec' =
		    %% Line 5795
		    [{{'clearStencil',1},[{'type',5795,'bounded_fun',[{'type',5795,'fun',[{'type',5795,'product',[{'var',5795,'S'}]}|[{'atom',5795,'ok'}]]}|[[{'type',5795,'constraint',[{'atom',5795,'is_subtype'}|[[{'var',5795,'S'}|[{'type',5795,'integer',[]}]]]]}]]]}]}],
		%% Line 5874
		'spec' =
		    %% Line 5874
		    [{{'texGend',3},[{'type',5874,'bounded_fun',[{'type',5874,'fun',[{'type',5874,'product',[{'var',5874,'Coord'}|[{'var',5874,'Pname'}|[{'var',5874,'Param'}]]]}|[{'atom',5874,'ok'}]]}|[[{'type',5874,'constraint',[{'atom',5874,'is_subtype'}|[[{'var',5874,'Coord'}|[{'type',5874,'enum',[]}]]]]}|[{'type',5874,'constraint',[{'atom',5874,'is_subtype'}|[[{'var',5874,'Pname'}|[{'type',5874,'enum',[]}]]]]}|[{'type',5874,'constraint',[{'atom',5874,'is_subtype'}|[[{'var',5874,'Param'}|[{'type',5874,'float',[]}]]]]}]]]]]}]}],
		%% Line 5880
		'spec' =
		    %% Line 5880
		    [{{'texGenf',3},[{'type',5880,'bounded_fun',[{'type',5880,'fun',[{'type',5880,'product',[{'var',5880,'Coord'}|[{'var',5880,'Pname'}|[{'var',5880,'Param'}]]]}|[{'atom',5880,'ok'}]]}|[[{'type',5880,'constraint',[{'atom',5880,'is_subtype'}|[[{'var',5880,'Coord'}|[{'type',5880,'enum',[]}]]]]}|[{'type',5880,'constraint',[{'atom',5880,'is_subtype'}|[[{'var',5880,'Pname'}|[{'type',5880,'enum',[]}]]]]}|[{'type',5880,'constraint',[{'atom',5880,'is_subtype'}|[[{'var',5880,'Param'}|[{'type',5880,'float',[]}]]]]}]]]]]}]}],
		%% Line 5886
		'spec' =
		    %% Line 5886
		    [{{'texGeni',3},[{'type',5886,'bounded_fun',[{'type',5886,'fun',[{'type',5886,'product',[{'var',5886,'Coord'}|[{'var',5886,'Pname'}|[{'var',5886,'Param'}]]]}|[{'atom',5886,'ok'}]]}|[[{'type',5886,'constraint',[{'atom',5886,'is_subtype'}|[[{'var',5886,'Coord'}|[{'type',5886,'enum',[]}]]]]}|[{'type',5886,'constraint',[{'atom',5886,'is_subtype'}|[[{'var',5886,'Pname'}|[{'type',5886,'enum',[]}]]]]}|[{'type',5886,'constraint',[{'atom',5886,'is_subtype'}|[[{'var',5886,'Param'}|[{'type',5886,'integer',[]}]]]]}]]]]]}]}],
		%% Line 5892
		'spec' =
		    %% Line 5892
		    [{{'texGendv',3},[{'type',5892,'bounded_fun',[{'type',5892,'fun',[{'type',5892,'product',[{'var',5892,'Coord'}|[{'var',5892,'Pname'}|[{'var',5892,'Params'}]]]}|[{'atom',5892,'ok'}]]}|[[{'type',5892,'constraint',[{'atom',5892,'is_subtype'}|[[{'var',5892,'Coord'}|[{'type',5892,'enum',[]}]]]]}|[{'type',5892,'constraint',[{'atom',5892,'is_subtype'}|[[{'var',5892,'Pname'}|[{'type',5892,'enum',[]}]]]]}|[{'type',5892,'constraint',[{'atom',5892,'is_subtype'}|[[{'var',5892,'Params'}|[{'type',5892,'tuple',[{'type',5892,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 5899
		'spec' =
		    %% Line 5899
		    [{{'texGenfv',3},[{'type',5899,'bounded_fun',[{'type',5899,'fun',[{'type',5899,'product',[{'var',5899,'Coord'}|[{'var',5899,'Pname'}|[{'var',5899,'Params'}]]]}|[{'atom',5899,'ok'}]]}|[[{'type',5899,'constraint',[{'atom',5899,'is_subtype'}|[[{'var',5899,'Coord'}|[{'type',5899,'enum',[]}]]]]}|[{'type',5899,'constraint',[{'atom',5899,'is_subtype'}|[[{'var',5899,'Pname'}|[{'type',5899,'enum',[]}]]]]}|[{'type',5899,'constraint',[{'atom',5899,'is_subtype'}|[[{'var',5899,'Params'}|[{'type',5899,'tuple',[{'type',5899,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 5906
		'spec' =
		    %% Line 5906
		    [{{'texGeniv',3},[{'type',5906,'bounded_fun',[{'type',5906,'fun',[{'type',5906,'product',[{'var',5906,'Coord'}|[{'var',5906,'Pname'}|[{'var',5906,'Params'}]]]}|[{'atom',5906,'ok'}]]}|[[{'type',5906,'constraint',[{'atom',5906,'is_subtype'}|[[{'var',5906,'Coord'}|[{'type',5906,'enum',[]}]]]]}|[{'type',5906,'constraint',[{'atom',5906,'is_subtype'}|[[{'var',5906,'Pname'}|[{'type',5906,'enum',[]}]]]]}|[{'type',5906,'constraint',[{'atom',5906,'is_subtype'}|[[{'var',5906,'Params'}|[{'type',5906,'tuple',[{'type',5906,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 5934
		'spec' =
		    %% Line 5934
		    [{{'getTexGendv',2},[{'type',5934,'bounded_fun',[{'type',5934,'fun',[{'type',5934,'product',[{'var',5934,'Coord'}|[{'var',5934,'Pname'}]]}|[{'type',5934,'tuple',[{'type',5934,'float',[]}|[{'type',5934,'float',[]}|[{'type',5934,'float',[]}|[{'type',5934,'float',[]}]]]]}]]}|[[{'type',5934,'constraint',[{'atom',5934,'is_subtype'}|[[{'var',5934,'Coord'}|[{'type',5934,'enum',[]}]]]]}|[{'type',5934,'constraint',[{'atom',5934,'is_subtype'}|[[{'var',5934,'Pname'}|[{'type',5934,'enum',[]}]]]]}]]]]}]}],
		%% Line 5940
		'spec' =
		    %% Line 5940
		    [{{'getTexGenfv',2},[{'type',5940,'bounded_fun',[{'type',5940,'fun',[{'type',5940,'product',[{'var',5940,'Coord'}|[{'var',5940,'Pname'}]]}|[{'type',5940,'tuple',[{'type',5940,'float',[]}|[{'type',5940,'float',[]}|[{'type',5940,'float',[]}|[{'type',5940,'float',[]}]]]]}]]}|[[{'type',5940,'constraint',[{'atom',5940,'is_subtype'}|[[{'var',5940,'Coord'}|[{'type',5940,'enum',[]}]]]]}|[{'type',5940,'constraint',[{'atom',5940,'is_subtype'}|[[{'var',5940,'Pname'}|[{'type',5940,'enum',[]}]]]]}]]]]}]}],
		%% Line 5946
		'spec' =
		    %% Line 5946
		    [{{'getTexGeniv',2},[{'type',5946,'bounded_fun',[{'type',5946,'fun',[{'type',5946,'product',[{'var',5946,'Coord'}|[{'var',5946,'Pname'}]]}|[{'type',5946,'tuple',[{'type',5946,'integer',[]}|[{'type',5946,'integer',[]}|[{'type',5946,'integer',[]}|[{'type',5946,'integer',[]}]]]]}]]}|[[{'type',5946,'constraint',[{'atom',5946,'is_subtype'}|[[{'var',5946,'Coord'}|[{'type',5946,'enum',[]}]]]]}|[{'type',5946,'constraint',[{'atom',5946,'is_subtype'}|[[{'var',5946,'Pname'}|[{'type',5946,'enum',[]}]]]]}]]]]}]}],
		%% Line 5953
		'spec' =
		    %% Line 5953
		    [{{'texEnvf',3},[{'type',5953,'bounded_fun',[{'type',5953,'fun',[{'type',5953,'product',[{'var',5953,'Target'}|[{'var',5953,'Pname'}|[{'var',5953,'Param'}]]]}|[{'atom',5953,'ok'}]]}|[[{'type',5953,'constraint',[{'atom',5953,'is_subtype'}|[[{'var',5953,'Target'}|[{'type',5953,'enum',[]}]]]]}|[{'type',5953,'constraint',[{'atom',5953,'is_subtype'}|[[{'var',5953,'Pname'}|[{'type',5953,'enum',[]}]]]]}|[{'type',5953,'constraint',[{'atom',5953,'is_subtype'}|[[{'var',5953,'Param'}|[{'type',5953,'float',[]}]]]]}]]]]]}]}],
		%% Line 5960
		'spec' =
		    %% Line 5960
		    [{{'texEnvi',3},[{'type',5960,'bounded_fun',[{'type',5960,'fun',[{'type',5960,'product',[{'var',5960,'Target'}|[{'var',5960,'Pname'}|[{'var',5960,'Param'}]]]}|[{'atom',5960,'ok'}]]}|[[{'type',5960,'constraint',[{'atom',5960,'is_subtype'}|[[{'var',5960,'Target'}|[{'type',5960,'enum',[]}]]]]}|[{'type',5960,'constraint',[{'atom',5960,'is_subtype'}|[[{'var',5960,'Pname'}|[{'type',5960,'enum',[]}]]]]}|[{'type',5960,'constraint',[{'atom',5960,'is_subtype'}|[[{'var',5960,'Param'}|[{'type',5960,'integer',[]}]]]]}]]]]]}]}],
		%% Line 6125
		'spec' =
		    %% Line 6125
		    [{{'texEnvfv',3},[{'type',6125,'bounded_fun',[{'type',6125,'fun',[{'type',6125,'product',[{'var',6125,'Target'}|[{'var',6125,'Pname'}|[{'var',6125,'Params'}]]]}|[{'atom',6125,'ok'}]]}|[[{'type',6125,'constraint',[{'atom',6125,'is_subtype'}|[[{'var',6125,'Target'}|[{'type',6125,'enum',[]}]]]]}|[{'type',6125,'constraint',[{'atom',6125,'is_subtype'}|[[{'var',6125,'Pname'}|[{'type',6125,'enum',[]}]]]]}|[{'type',6125,'constraint',[{'atom',6125,'is_subtype'}|[[{'var',6125,'Params'}|[{'type',6125,'tuple',[{'type',6125,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 6132
		'spec' =
		    %% Line 6132
		    [{{'texEnviv',3},[{'type',6132,'bounded_fun',[{'type',6132,'fun',[{'type',6132,'product',[{'var',6132,'Target'}|[{'var',6132,'Pname'}|[{'var',6132,'Params'}]]]}|[{'atom',6132,'ok'}]]}|[[{'type',6132,'constraint',[{'atom',6132,'is_subtype'}|[[{'var',6132,'Target'}|[{'type',6132,'enum',[]}]]]]}|[{'type',6132,'constraint',[{'atom',6132,'is_subtype'}|[[{'var',6132,'Pname'}|[{'type',6132,'enum',[]}]]]]}|[{'type',6132,'constraint',[{'atom',6132,'is_subtype'}|[[{'var',6132,'Params'}|[{'type',6132,'tuple',[{'type',6132,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 6216
		'spec' =
		    %% Line 6216
		    [{{'getTexEnvfv',2},[{'type',6216,'bounded_fun',[{'type',6216,'fun',[{'type',6216,'product',[{'var',6216,'Target'}|[{'var',6216,'Pname'}]]}|[{'type',6216,'tuple',[{'type',6216,'float',[]}|[{'type',6216,'float',[]}|[{'type',6216,'float',[]}|[{'type',6216,'float',[]}]]]]}]]}|[[{'type',6216,'constraint',[{'atom',6216,'is_subtype'}|[[{'var',6216,'Target'}|[{'type',6216,'enum',[]}]]]]}|[{'type',6216,'constraint',[{'atom',6216,'is_subtype'}|[[{'var',6216,'Pname'}|[{'type',6216,'enum',[]}]]]]}]]]]}]}],
		%% Line 6222
		'spec' =
		    %% Line 6222
		    [{{'getTexEnviv',2},[{'type',6222,'bounded_fun',[{'type',6222,'fun',[{'type',6222,'product',[{'var',6222,'Target'}|[{'var',6222,'Pname'}]]}|[{'type',6222,'tuple',[{'type',6222,'integer',[]}|[{'type',6222,'integer',[]}|[{'type',6222,'integer',[]}|[{'type',6222,'integer',[]}]]]]}]]}|[[{'type',6222,'constraint',[{'atom',6222,'is_subtype'}|[[{'var',6222,'Target'}|[{'type',6222,'enum',[]}]]]]}|[{'type',6222,'constraint',[{'atom',6222,'is_subtype'}|[[{'var',6222,'Pname'}|[{'type',6222,'enum',[]}]]]]}]]]]}]}],
		%% Line 6445
		'spec' =
		    %% Line 6445
		    [{{'texParameterf',3},[{'type',6445,'bounded_fun',[{'type',6445,'fun',[{'type',6445,'product',[{'var',6445,'Target'}|[{'var',6445,'Pname'}|[{'var',6445,'Param'}]]]}|[{'atom',6445,'ok'}]]}|[[{'type',6445,'constraint',[{'atom',6445,'is_subtype'}|[[{'var',6445,'Target'}|[{'type',6445,'enum',[]}]]]]}|[{'type',6445,'constraint',[{'atom',6445,'is_subtype'}|[[{'var',6445,'Pname'}|[{'type',6445,'enum',[]}]]]]}|[{'type',6445,'constraint',[{'atom',6445,'is_subtype'}|[[{'var',6445,'Param'}|[{'type',6445,'float',[]}]]]]}]]]]]}]}],
		%% Line 6451
		'spec' =
		    %% Line 6451
		    [{{'texParameteri',3},[{'type',6451,'bounded_fun',[{'type',6451,'fun',[{'type',6451,'product',[{'var',6451,'Target'}|[{'var',6451,'Pname'}|[{'var',6451,'Param'}]]]}|[{'atom',6451,'ok'}]]}|[[{'type',6451,'constraint',[{'atom',6451,'is_subtype'}|[[{'var',6451,'Target'}|[{'type',6451,'enum',[]}]]]]}|[{'type',6451,'constraint',[{'atom',6451,'is_subtype'}|[[{'var',6451,'Pname'}|[{'type',6451,'enum',[]}]]]]}|[{'type',6451,'constraint',[{'atom',6451,'is_subtype'}|[[{'var',6451,'Param'}|[{'type',6451,'integer',[]}]]]]}]]]]]}]}],
		%% Line 6457
		'spec' =
		    %% Line 6457
		    [{{'texParameterfv',3},[{'type',6457,'bounded_fun',[{'type',6457,'fun',[{'type',6457,'product',[{'var',6457,'Target'}|[{'var',6457,'Pname'}|[{'var',6457,'Params'}]]]}|[{'atom',6457,'ok'}]]}|[[{'type',6457,'constraint',[{'atom',6457,'is_subtype'}|[[{'var',6457,'Target'}|[{'type',6457,'enum',[]}]]]]}|[{'type',6457,'constraint',[{'atom',6457,'is_subtype'}|[[{'var',6457,'Pname'}|[{'type',6457,'enum',[]}]]]]}|[{'type',6457,'constraint',[{'atom',6457,'is_subtype'}|[[{'var',6457,'Params'}|[{'type',6457,'tuple',[{'type',6457,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 6464
		'spec' =
		    %% Line 6464
		    [{{'texParameteriv',3},[{'type',6464,'bounded_fun',[{'type',6464,'fun',[{'type',6464,'product',[{'var',6464,'Target'}|[{'var',6464,'Pname'}|[{'var',6464,'Params'}]]]}|[{'atom',6464,'ok'}]]}|[[{'type',6464,'constraint',[{'atom',6464,'is_subtype'}|[[{'var',6464,'Target'}|[{'type',6464,'enum',[]}]]]]}|[{'type',6464,'constraint',[{'atom',6464,'is_subtype'}|[[{'var',6464,'Pname'}|[{'type',6464,'enum',[]}]]]]}|[{'type',6464,'constraint',[{'atom',6464,'is_subtype'}|[[{'var',6464,'Params'}|[{'type',6464,'tuple',[{'type',6464,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 6543
		'spec' =
		    %% Line 6543
		    [{{'getTexParameterfv',2},[{'type',6543,'bounded_fun',[{'type',6543,'fun',[{'type',6543,'product',[{'var',6543,'Target'}|[{'var',6543,'Pname'}]]}|[{'type',6543,'tuple',[{'type',6543,'float',[]}|[{'type',6543,'float',[]}|[{'type',6543,'float',[]}|[{'type',6543,'float',[]}]]]]}]]}|[[{'type',6543,'constraint',[{'atom',6543,'is_subtype'}|[[{'var',6543,'Target'}|[{'type',6543,'enum',[]}]]]]}|[{'type',6543,'constraint',[{'atom',6543,'is_subtype'}|[[{'var',6543,'Pname'}|[{'type',6543,'enum',[]}]]]]}]]]]}]}],
		%% Line 6549
		'spec' =
		    %% Line 6549
		    [{{'getTexParameteriv',2},[{'type',6549,'bounded_fun',[{'type',6549,'fun',[{'type',6549,'product',[{'var',6549,'Target'}|[{'var',6549,'Pname'}]]}|[{'type',6549,'tuple',[{'type',6549,'integer',[]}|[{'type',6549,'integer',[]}|[{'type',6549,'integer',[]}|[{'type',6549,'integer',[]}]]]]}]]}|[[{'type',6549,'constraint',[{'atom',6549,'is_subtype'}|[[{'var',6549,'Target'}|[{'type',6549,'enum',[]}]]]]}|[{'type',6549,'constraint',[{'atom',6549,'is_subtype'}|[[{'var',6549,'Pname'}|[{'type',6549,'enum',[]}]]]]}]]]]}]}],
		%% Line 6624
		'spec' =
		    %% Line 6624
		    [{{'getTexLevelParameterfv',3},[{'type',6624,'bounded_fun',[{'type',6624,'fun',[{'type',6624,'product',[{'var',6624,'Target'}|[{'var',6624,'Level'}|[{'var',6624,'Pname'}]]]}|[{'type',6624,'tuple',[{'type',6624,'float',[]}]}]]}|[[{'type',6624,'constraint',[{'atom',6624,'is_subtype'}|[[{'var',6624,'Target'}|[{'type',6624,'enum',[]}]]]]}|[{'type',6624,'constraint',[{'atom',6624,'is_subtype'}|[[{'var',6624,'Level'}|[{'type',6624,'integer',[]}]]]]}|[{'type',6624,'constraint',[{'atom',6624,'is_subtype'}|[[{'var',6624,'Pname'}|[{'type',6624,'enum',[]}]]]]}]]]]]}]}],
		%% Line 6630
		'spec' =
		    %% Line 6630
		    [{{'getTexLevelParameteriv',3},[{'type',6630,'bounded_fun',[{'type',6630,'fun',[{'type',6630,'product',[{'var',6630,'Target'}|[{'var',6630,'Level'}|[{'var',6630,'Pname'}]]]}|[{'type',6630,'tuple',[{'type',6630,'integer',[]}]}]]}|[[{'type',6630,'constraint',[{'atom',6630,'is_subtype'}|[[{'var',6630,'Target'}|[{'type',6630,'enum',[]}]]]]}|[{'type',6630,'constraint',[{'atom',6630,'is_subtype'}|[[{'var',6630,'Level'}|[{'type',6630,'integer',[]}]]]]}|[{'type',6630,'constraint',[{'atom',6630,'is_subtype'}|[[{'var',6630,'Pname'}|[{'type',6630,'enum',[]}]]]]}]]]]]}]}],
		%% Line 6741
		'spec' =
		    %% Line 6741
		    [{{'texImage1D',8},[{'type',6741,'bounded_fun',[{'type',6741,'fun',[{'type',6741,'product',[{'var',6741,'Target'}|[{'var',6741,'Level'}|[{'var',6741,'InternalFormat'}|[{'var',6741,'Width'}|[{'var',6741,'Border'}|[{'var',6741,'Format'}|[{'var',6741,'Type'}|[{'var',6741,'Pixels'}]]]]]]]]}|[{'atom',6741,'ok'}]]}|[[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Target'}|[{'type',6741,'enum',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Level'}|[{'type',6741,'integer',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'InternalFormat'}|[{'type',6741,'integer',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Width'}|[{'type',6741,'integer',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Border'}|[{'type',6741,'integer',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Format'}|[{'type',6741,'enum',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Type'}|[{'type',6741,'enum',[]}]]]]}|[{'type',6741,'constraint',[{'atom',6741,'is_subtype'}|[[{'var',6741,'Pixels'}|[{'type',6741,'union',[{'type',6741,'offset',[]}|[{'type',6741,'mem',[]}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 6863
		'spec' =
		    %% Line 6863
		    [{{'texImage2D',9},[{'type',6863,'bounded_fun',[{'type',6863,'fun',[{'type',6863,'product',[{'var',6863,'Target'}|[{'var',6863,'Level'}|[{'var',6863,'InternalFormat'}|[{'var',6863,'Width'}|[{'var',6863,'Height'}|[{'var',6863,'Border'}|[{'var',6863,'Format'}|[{'var',6863,'Type'}|[{'var',6863,'Pixels'}]]]]]]]]]}|[{'atom',6863,'ok'}]]}|[[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Target'}|[{'type',6863,'enum',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Level'}|[{'type',6863,'integer',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'InternalFormat'}|[{'type',6863,'integer',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Width'}|[{'type',6863,'integer',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Height'}|[{'type',6863,'integer',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Border'}|[{'type',6863,'integer',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Format'}|[{'type',6863,'enum',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Type'}|[{'type',6863,'enum',[]}]]]]}|[{'type',6863,'constraint',[{'atom',6863,'is_subtype'}|[[{'var',6863,'Pixels'}|[{'type',6863,'union',[{'type',6863,'offset',[]}|[{'type',6863,'mem',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 6908
		'spec' =
		    %% Line 6908
		    [{{'getTexImage',5},[{'type',6908,'bounded_fun',[{'type',6908,'fun',[{'type',6908,'product',[{'var',6908,'Target'}|[{'var',6908,'Level'}|[{'var',6908,'Format'}|[{'var',6908,'Type'}|[{'var',6908,'Pixels'}]]]]]}|[{'atom',6908,'ok'}]]}|[[{'type',6908,'constraint',[{'atom',6908,'is_subtype'}|[[{'var',6908,'Target'}|[{'type',6908,'enum',[]}]]]]}|[{'type',6908,'constraint',[{'atom',6908,'is_subtype'}|[[{'var',6908,'Level'}|[{'type',6908,'integer',[]}]]]]}|[{'type',6908,'constraint',[{'atom',6908,'is_subtype'}|[[{'var',6908,'Format'}|[{'type',6908,'enum',[]}]]]]}|[{'type',6908,'constraint',[{'atom',6908,'is_subtype'}|[[{'var',6908,'Type'}|[{'type',6908,'enum',[]}]]]]}|[{'type',6908,'constraint',[{'atom',6908,'is_subtype'}|[[{'var',6908,'Pixels'}|[{'type',6908,'mem',[]}]]]]}]]]]]]]}]}],
		%% Line 6926
		'spec' =
		    %% Line 6926
		    [{{'genTextures',1},[{'type',6926,'bounded_fun',[{'type',6926,'fun',[{'type',6926,'product',[{'var',6926,'N'}]}|[{'type',6926,'list',[{'type',6926,'integer',[]}]}]]}|[[{'type',6926,'constraint',[{'atom',6926,'is_subtype'}|[[{'var',6926,'N'}|[{'type',6926,'integer',[]}]]]]}]]]}]}],
		%% Line 6941
		'spec' =
		    %% Line 6941
		    [{{'deleteTextures',1},[{'type',6941,'bounded_fun',[{'type',6941,'fun',[{'type',6941,'product',[{'var',6941,'Textures'}]}|[{'atom',6941,'ok'}]]}|[[{'type',6941,'constraint',[{'atom',6941,'is_subtype'}|[[{'var',6941,'Textures'}|[{'type',6941,'list',[{'type',6941,'integer',[]}]}]]]]}]]]}]}],
		%% Line 6993
		'spec' =
		    %% Line 6993
		    [{{'bindTexture',2},[{'type',6993,'bounded_fun',[{'type',6993,'fun',[{'type',6993,'product',[{'var',6993,'Target'}|[{'var',6993,'Texture'}]]}|[{'atom',6993,'ok'}]]}|[[{'type',6993,'constraint',[{'atom',6993,'is_subtype'}|[[{'var',6993,'Target'}|[{'type',6993,'enum',[]}]]]]}|[{'type',6993,'constraint',[{'atom',6993,'is_subtype'}|[[{'var',6993,'Texture'}|[{'type',6993,'integer',[]}]]]]}]]]]}]}],
		%% Line 7022
		'spec' =
		    %% Line 7022
		    [{{'prioritizeTextures',2},[{'type',7022,'bounded_fun',[{'type',7022,'fun',[{'type',7022,'product',[{'var',7022,'Textures'}|[{'var',7022,'Priorities'}]]}|[{'atom',7022,'ok'}]]}|[[{'type',7022,'constraint',[{'atom',7022,'is_subtype'}|[[{'var',7022,'Textures'}|[{'type',7022,'list',[{'type',7022,'integer',[]}]}]]]]}|[{'type',7022,'constraint',[{'atom',7022,'is_subtype'}|[[{'var',7022,'Priorities'}|[{'type',7022,'list',[{'type',7022,'clamp',[]}]}]]]]}]]]]}]}],
		%% Line 7048
		'spec' =
		    %% Line 7048
		    [{{'areTexturesResident',1},[{'type',7048,'bounded_fun',[{'type',7048,'fun',[{'type',7048,'product',[{'var',7048,'Textures'}]}|[{'type',7048,'tuple',[{'type',7048,'union',[{'integer',7048,0}|[{'integer',7048,1}]]}|[{'ann_type',7048,[{'var',7048,'Residences'}|[{'type',7048,'list',[{'type',7048,'union',[{'integer',7048,0}|[{'integer',7048,1}]]}]}]]}]]}]]}|[[{'type',7048,'constraint',[{'atom',7048,'is_subtype'}|[[{'var',7048,'Textures'}|[{'type',7048,'list',[{'type',7048,'integer',[]}]}]]]]}]]]}]}],
		%% Line 7063
		'spec' =
		    %% Line 7063
		    [{{'isTexture',1},[{'type',7063,'bounded_fun',[{'type',7063,'fun',[{'type',7063,'product',[{'var',7063,'Texture'}]}|[{'type',7063,'union',[{'integer',7063,0}|[{'integer',7063,1}]]}]]}|[[{'type',7063,'constraint',[{'atom',7063,'is_subtype'}|[[{'var',7063,'Texture'}|[{'type',7063,'integer',[]}]]]]}]]]}]}],
		%% Line 7070
		'spec' =
		    %% Line 7070
		    [{{'texSubImage1D',7},[{'type',7070,'bounded_fun',[{'type',7070,'fun',[{'type',7070,'product',[{'var',7070,'Target'}|[{'var',7070,'Level'}|[{'var',7070,'Xoffset'}|[{'var',7070,'Width'}|[{'var',7070,'Format'}|[{'var',7070,'Type'}|[{'var',7070,'Pixels'}]]]]]]]}|[{'atom',7070,'ok'}]]}|[[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Target'}|[{'type',7070,'enum',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Level'}|[{'type',7070,'integer',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Xoffset'}|[{'type',7070,'integer',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Width'}|[{'type',7070,'integer',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Format'}|[{'type',7070,'enum',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Type'}|[{'type',7070,'enum',[]}]]]]}|[{'type',7070,'constraint',[{'atom',7070,'is_subtype'}|[[{'var',7070,'Pixels'}|[{'type',7070,'union',[{'type',7070,'offset',[]}|[{'type',7070,'mem',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 7080
		'spec' =
		    %% Line 7080
		    [{{'texSubImage2D',9},[{'type',7080,'bounded_fun',[{'type',7080,'fun',[{'type',7080,'product',[{'var',7080,'Target'}|[{'var',7080,'Level'}|[{'var',7080,'Xoffset'}|[{'var',7080,'Yoffset'}|[{'var',7080,'Width'}|[{'var',7080,'Height'}|[{'var',7080,'Format'}|[{'var',7080,'Type'}|[{'var',7080,'Pixels'}]]]]]]]]]}|[{'atom',7080,'ok'}]]}|[[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Target'}|[{'type',7080,'enum',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Level'}|[{'type',7080,'integer',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Xoffset'}|[{'type',7080,'integer',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Yoffset'}|[{'type',7080,'integer',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Width'}|[{'type',7080,'integer',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Height'}|[{'type',7080,'integer',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Format'}|[{'type',7080,'enum',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Type'}|[{'type',7080,'enum',[]}]]]]}|[{'type',7080,'constraint',[{'atom',7080,'is_subtype'}|[[{'var',7080,'Pixels'}|[{'type',7080,'union',[{'type',7080,'offset',[]}|[{'type',7080,'mem',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 7116
		'spec' =
		    %% Line 7116
		    [{{'copyTexImage1D',7},[{'type',7116,'bounded_fun',[{'type',7116,'fun',[{'type',7116,'product',[{'var',7116,'Target'}|[{'var',7116,'Level'}|[{'var',7116,'Internalformat'}|[{'var',7116,'X'}|[{'var',7116,'Y'}|[{'var',7116,'Width'}|[{'var',7116,'Border'}]]]]]]]}|[{'atom',7116,'ok'}]]}|[[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Target'}|[{'type',7116,'enum',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Level'}|[{'type',7116,'integer',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Internalformat'}|[{'type',7116,'enum',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'X'}|[{'type',7116,'integer',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Y'}|[{'type',7116,'integer',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Width'}|[{'type',7116,'integer',[]}]]]]}|[{'type',7116,'constraint',[{'atom',7116,'is_subtype'}|[[{'var',7116,'Border'}|[{'type',7116,'integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 7147
		'spec' =
		    %% Line 7147
		    [{{'copyTexImage2D',8},[{'type',7147,'bounded_fun',[{'type',7147,'fun',[{'type',7147,'product',[{'var',7147,'Target'}|[{'var',7147,'Level'}|[{'var',7147,'Internalformat'}|[{'var',7147,'X'}|[{'var',7147,'Y'}|[{'var',7147,'Width'}|[{'var',7147,'Height'}|[{'var',7147,'Border'}]]]]]]]]}|[{'atom',7147,'ok'}]]}|[[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Target'}|[{'type',7147,'enum',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Level'}|[{'type',7147,'integer',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Internalformat'}|[{'type',7147,'enum',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'X'}|[{'type',7147,'integer',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Y'}|[{'type',7147,'integer',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Width'}|[{'type',7147,'integer',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Height'}|[{'type',7147,'integer',[]}]]]]}|[{'type',7147,'constraint',[{'atom',7147,'is_subtype'}|[[{'var',7147,'Border'}|[{'type',7147,'integer',[]}]]]]}]]]]]]]]]]}]}],
		%% Line 7176
		'spec' =
		    %% Line 7176
		    [{{'copyTexSubImage1D',6},[{'type',7176,'bounded_fun',[{'type',7176,'fun',[{'type',7176,'product',[{'var',7176,'Target'}|[{'var',7176,'Level'}|[{'var',7176,'Xoffset'}|[{'var',7176,'X'}|[{'var',7176,'Y'}|[{'var',7176,'Width'}]]]]]]}|[{'atom',7176,'ok'}]]}|[[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'Target'}|[{'type',7176,'enum',[]}]]]]}|[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'Level'}|[{'type',7176,'integer',[]}]]]]}|[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'Xoffset'}|[{'type',7176,'integer',[]}]]]]}|[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'X'}|[{'type',7176,'integer',[]}]]]]}|[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'Y'}|[{'type',7176,'integer',[]}]]]]}|[{'type',7176,'constraint',[{'atom',7176,'is_subtype'}|[[{'var',7176,'Width'}|[{'type',7176,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 7209
		'spec' =
		    %% Line 7209
		    [{{'copyTexSubImage2D',8},[{'type',7209,'bounded_fun',[{'type',7209,'fun',[{'type',7209,'product',[{'var',7209,'Target'}|[{'var',7209,'Level'}|[{'var',7209,'Xoffset'}|[{'var',7209,'Yoffset'}|[{'var',7209,'X'}|[{'var',7209,'Y'}|[{'var',7209,'Width'}|[{'var',7209,'Height'}]]]]]]]]}|[{'atom',7209,'ok'}]]}|[[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Target'}|[{'type',7209,'enum',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Level'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Xoffset'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Yoffset'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'X'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Y'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Width'}|[{'type',7209,'integer',[]}]]]]}|[{'type',7209,'constraint',[{'atom',7209,'is_subtype'}|[[{'var',7209,'Height'}|[{'type',7209,'integer',[]}]]]]}]]]]]]]]]]}]}],
		%% Line 7216
		'spec' =
		    %% Line 7216
		    [{{'map1d',6},[{'type',7216,'bounded_fun',[{'type',7216,'fun',[{'type',7216,'product',[{'var',7216,'Target'}|[{'var',7216,'U1'}|[{'var',7216,'U2'}|[{'var',7216,'Stride'}|[{'var',7216,'Order'}|[{'var',7216,'Points'}]]]]]]}|[{'atom',7216,'ok'}]]}|[[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'Target'}|[{'type',7216,'enum',[]}]]]]}|[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'U1'}|[{'type',7216,'float',[]}]]]]}|[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'U2'}|[{'type',7216,'float',[]}]]]]}|[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'Stride'}|[{'type',7216,'integer',[]}]]]]}|[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'Order'}|[{'type',7216,'integer',[]}]]]]}|[{'type',7216,'constraint',[{'atom',7216,'is_subtype'}|[[{'var',7216,'Points'}|[{'type',7216,'binary',[]}]]]]}]]]]]]]]}]}],
		%% Line 7224
		'spec' =
		    %% Line 7224
		    [{{'map1f',6},[{'type',7224,'bounded_fun',[{'type',7224,'fun',[{'type',7224,'product',[{'var',7224,'Target'}|[{'var',7224,'U1'}|[{'var',7224,'U2'}|[{'var',7224,'Stride'}|[{'var',7224,'Order'}|[{'var',7224,'Points'}]]]]]]}|[{'atom',7224,'ok'}]]}|[[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'Target'}|[{'type',7224,'enum',[]}]]]]}|[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'U1'}|[{'type',7224,'float',[]}]]]]}|[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'U2'}|[{'type',7224,'float',[]}]]]]}|[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'Stride'}|[{'type',7224,'integer',[]}]]]]}|[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'Order'}|[{'type',7224,'integer',[]}]]]]}|[{'type',7224,'constraint',[{'atom',7224,'is_subtype'}|[[{'var',7224,'Points'}|[{'type',7224,'binary',[]}]]]]}]]]]]]]]}]}],
		%% Line 7232
		'spec' =
		    %% Line 7232
		    [{{'map2d',10},[{'type',7232,'bounded_fun',[{'type',7232,'fun',[{'type',7232,'product',[{'var',7232,'Target'}|[{'var',7232,'U1'}|[{'var',7232,'U2'}|[{'var',7232,'Ustride'}|[{'var',7232,'Uorder'}|[{'var',7232,'V1'}|[{'var',7232,'V2'}|[{'var',7232,'Vstride'}|[{'var',7232,'Vorder'}|[{'var',7232,'Points'}]]]]]]]]]]}|[{'atom',7232,'ok'}]]}|[[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Target'}|[{'type',7232,'enum',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'U1'}|[{'type',7232,'float',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'U2'}|[{'type',7232,'float',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Ustride'}|[{'type',7232,'integer',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Uorder'}|[{'type',7232,'integer',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'V1'}|[{'type',7232,'float',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'V2'}|[{'type',7232,'float',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Vstride'}|[{'type',7232,'integer',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Vorder'}|[{'type',7232,'integer',[]}]]]]}|[{'type',7232,'constraint',[{'atom',7232,'is_subtype'}|[[{'var',7232,'Points'}|[{'type',7232,'binary',[]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 7240
		'spec' =
		    %% Line 7240
		    [{{'map2f',10},[{'type',7240,'bounded_fun',[{'type',7240,'fun',[{'type',7240,'product',[{'var',7240,'Target'}|[{'var',7240,'U1'}|[{'var',7240,'U2'}|[{'var',7240,'Ustride'}|[{'var',7240,'Uorder'}|[{'var',7240,'V1'}|[{'var',7240,'V2'}|[{'var',7240,'Vstride'}|[{'var',7240,'Vorder'}|[{'var',7240,'Points'}]]]]]]]]]]}|[{'atom',7240,'ok'}]]}|[[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Target'}|[{'type',7240,'enum',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'U1'}|[{'type',7240,'float',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'U2'}|[{'type',7240,'float',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Ustride'}|[{'type',7240,'integer',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Uorder'}|[{'type',7240,'integer',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'V1'}|[{'type',7240,'float',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'V2'}|[{'type',7240,'float',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Vstride'}|[{'type',7240,'integer',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Vorder'}|[{'type',7240,'integer',[]}]]]]}|[{'type',7240,'constraint',[{'atom',7240,'is_subtype'}|[[{'var',7240,'Points'}|[{'type',7240,'binary',[]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 7276
		'spec' =
		    %% Line 7276
		    [{{'getMapdv',3},[{'type',7276,'bounded_fun',[{'type',7276,'fun',[{'type',7276,'product',[{'var',7276,'Target'}|[{'var',7276,'Query'}|[{'var',7276,'V'}]]]}|[{'atom',7276,'ok'}]]}|[[{'type',7276,'constraint',[{'atom',7276,'is_subtype'}|[[{'var',7276,'Target'}|[{'type',7276,'enum',[]}]]]]}|[{'type',7276,'constraint',[{'atom',7276,'is_subtype'}|[[{'var',7276,'Query'}|[{'type',7276,'enum',[]}]]]]}|[{'type',7276,'constraint',[{'atom',7276,'is_subtype'}|[[{'var',7276,'V'}|[{'type',7276,'mem',[]}]]]]}]]]]]}]}],
		%% Line 7283
		'spec' =
		    %% Line 7283
		    [{{'getMapfv',3},[{'type',7283,'bounded_fun',[{'type',7283,'fun',[{'type',7283,'product',[{'var',7283,'Target'}|[{'var',7283,'Query'}|[{'var',7283,'V'}]]]}|[{'atom',7283,'ok'}]]}|[[{'type',7283,'constraint',[{'atom',7283,'is_subtype'}|[[{'var',7283,'Target'}|[{'type',7283,'enum',[]}]]]]}|[{'type',7283,'constraint',[{'atom',7283,'is_subtype'}|[[{'var',7283,'Query'}|[{'type',7283,'enum',[]}]]]]}|[{'type',7283,'constraint',[{'atom',7283,'is_subtype'}|[[{'var',7283,'V'}|[{'type',7283,'mem',[]}]]]]}]]]]]}]}],
		%% Line 7290
		'spec' =
		    %% Line 7290
		    [{{'getMapiv',3},[{'type',7290,'bounded_fun',[{'type',7290,'fun',[{'type',7290,'product',[{'var',7290,'Target'}|[{'var',7290,'Query'}|[{'var',7290,'V'}]]]}|[{'atom',7290,'ok'}]]}|[[{'type',7290,'constraint',[{'atom',7290,'is_subtype'}|[[{'var',7290,'Target'}|[{'type',7290,'enum',[]}]]]]}|[{'type',7290,'constraint',[{'atom',7290,'is_subtype'}|[[{'var',7290,'Query'}|[{'type',7290,'enum',[]}]]]]}|[{'type',7290,'constraint',[{'atom',7290,'is_subtype'}|[[{'var',7290,'V'}|[{'type',7290,'mem',[]}]]]]}]]]]]}]}],
		%% Line 7341
		'spec' =
		    %% Line 7341
		    [{{'evalCoord1d',1},[{'type',7341,'bounded_fun',[{'type',7341,'fun',[{'type',7341,'product',[{'var',7341,'U'}]}|[{'atom',7341,'ok'}]]}|[[{'type',7341,'constraint',[{'atom',7341,'is_subtype'}|[[{'var',7341,'U'}|[{'type',7341,'float',[]}]]]]}]]]}]}],
		%% Line 7347
		'spec' =
		    %% Line 7347
		    [{{'evalCoord1f',1},[{'type',7347,'bounded_fun',[{'type',7347,'fun',[{'type',7347,'product',[{'var',7347,'U'}]}|[{'atom',7347,'ok'}]]}|[[{'type',7347,'constraint',[{'atom',7347,'is_subtype'}|[[{'var',7347,'U'}|[{'type',7347,'float',[]}]]]]}]]]}]}],
		%% Line 7352
		'spec' =
		    %% Line 7352
		    [{{'evalCoord1dv',1},[{'type',7352,'bounded_fun',[{'type',7352,'fun',[{'type',7352,'product',[{'var',7352,'U'}]}|[{'atom',7352,'ok'}]]}|[[{'type',7352,'constraint',[{'atom',7352,'is_subtype'}|[[{'var',7352,'U'}|[{'type',7352,'tuple',[{'ann_type',7352,[{'var',7352,'U'}|[{'type',7352,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 7356
		'spec' =
		    %% Line 7356
		    [{{'evalCoord1fv',1},[{'type',7356,'bounded_fun',[{'type',7356,'fun',[{'type',7356,'product',[{'var',7356,'U'}]}|[{'atom',7356,'ok'}]]}|[[{'type',7356,'constraint',[{'atom',7356,'is_subtype'}|[[{'var',7356,'U'}|[{'type',7356,'tuple',[{'ann_type',7356,[{'var',7356,'U'}|[{'type',7356,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 7361
		'spec' =
		    %% Line 7361
		    [{{'evalCoord2d',2},[{'type',7361,'bounded_fun',[{'type',7361,'fun',[{'type',7361,'product',[{'var',7361,'U'}|[{'var',7361,'V'}]]}|[{'atom',7361,'ok'}]]}|[[{'type',7361,'constraint',[{'atom',7361,'is_subtype'}|[[{'var',7361,'U'}|[{'type',7361,'float',[]}]]]]}|[{'type',7361,'constraint',[{'atom',7361,'is_subtype'}|[[{'var',7361,'V'}|[{'type',7361,'float',[]}]]]]}]]]]}]}],
		%% Line 7367
		'spec' =
		    %% Line 7367
		    [{{'evalCoord2f',2},[{'type',7367,'bounded_fun',[{'type',7367,'fun',[{'type',7367,'product',[{'var',7367,'U'}|[{'var',7367,'V'}]]}|[{'atom',7367,'ok'}]]}|[[{'type',7367,'constraint',[{'atom',7367,'is_subtype'}|[[{'var',7367,'U'}|[{'type',7367,'float',[]}]]]]}|[{'type',7367,'constraint',[{'atom',7367,'is_subtype'}|[[{'var',7367,'V'}|[{'type',7367,'float',[]}]]]]}]]]]}]}],
		%% Line 7372
		'spec' =
		    %% Line 7372
		    [{{'evalCoord2dv',1},[{'type',7372,'bounded_fun',[{'type',7372,'fun',[{'type',7372,'product',[{'var',7372,'U'}]}|[{'atom',7372,'ok'}]]}|[[{'type',7372,'constraint',[{'atom',7372,'is_subtype'}|[[{'var',7372,'U'}|[{'type',7372,'tuple',[{'ann_type',7372,[{'var',7372,'U'}|[{'type',7372,'float',[]}]]}|[{'ann_type',7372,[{'var',7372,'V'}|[{'type',7372,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 7376
		'spec' =
		    %% Line 7376
		    [{{'evalCoord2fv',1},[{'type',7376,'bounded_fun',[{'type',7376,'fun',[{'type',7376,'product',[{'var',7376,'U'}]}|[{'atom',7376,'ok'}]]}|[[{'type',7376,'constraint',[{'atom',7376,'is_subtype'}|[[{'var',7376,'U'}|[{'type',7376,'tuple',[{'ann_type',7376,[{'var',7376,'U'}|[{'type',7376,'float',[]}]]}|[{'ann_type',7376,[{'var',7376,'V'}|[{'type',7376,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 7411
		'spec' =
		    %% Line 7411
		    [{{'mapGrid1d',3},[{'type',7411,'bounded_fun',[{'type',7411,'fun',[{'type',7411,'product',[{'var',7411,'Un'}|[{'var',7411,'U1'}|[{'var',7411,'U2'}]]]}|[{'atom',7411,'ok'}]]}|[[{'type',7411,'constraint',[{'atom',7411,'is_subtype'}|[[{'var',7411,'Un'}|[{'type',7411,'integer',[]}]]]]}|[{'type',7411,'constraint',[{'atom',7411,'is_subtype'}|[[{'var',7411,'U1'}|[{'type',7411,'float',[]}]]]]}|[{'type',7411,'constraint',[{'atom',7411,'is_subtype'}|[[{'var',7411,'U2'}|[{'type',7411,'float',[]}]]]]}]]]]]}]}],
		%% Line 7417
		'spec' =
		    %% Line 7417
		    [{{'mapGrid1f',3},[{'type',7417,'bounded_fun',[{'type',7417,'fun',[{'type',7417,'product',[{'var',7417,'Un'}|[{'var',7417,'U1'}|[{'var',7417,'U2'}]]]}|[{'atom',7417,'ok'}]]}|[[{'type',7417,'constraint',[{'atom',7417,'is_subtype'}|[[{'var',7417,'Un'}|[{'type',7417,'integer',[]}]]]]}|[{'type',7417,'constraint',[{'atom',7417,'is_subtype'}|[[{'var',7417,'U1'}|[{'type',7417,'float',[]}]]]]}|[{'type',7417,'constraint',[{'atom',7417,'is_subtype'}|[[{'var',7417,'U2'}|[{'type',7417,'float',[]}]]]]}]]]]]}]}],
		%% Line 7423
		'spec' =
		    %% Line 7423
		    [{{'mapGrid2d',6},[{'type',7423,'bounded_fun',[{'type',7423,'fun',[{'type',7423,'product',[{'var',7423,'Un'}|[{'var',7423,'U1'}|[{'var',7423,'U2'}|[{'var',7423,'Vn'}|[{'var',7423,'V1'}|[{'var',7423,'V2'}]]]]]]}|[{'atom',7423,'ok'}]]}|[[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'Un'}|[{'type',7423,'integer',[]}]]]]}|[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'U1'}|[{'type',7423,'float',[]}]]]]}|[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'U2'}|[{'type',7423,'float',[]}]]]]}|[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'Vn'}|[{'type',7423,'integer',[]}]]]]}|[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'V1'}|[{'type',7423,'float',[]}]]]]}|[{'type',7423,'constraint',[{'atom',7423,'is_subtype'}|[[{'var',7423,'V2'}|[{'type',7423,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 7429
		'spec' =
		    %% Line 7429
		    [{{'mapGrid2f',6},[{'type',7429,'bounded_fun',[{'type',7429,'fun',[{'type',7429,'product',[{'var',7429,'Un'}|[{'var',7429,'U1'}|[{'var',7429,'U2'}|[{'var',7429,'Vn'}|[{'var',7429,'V1'}|[{'var',7429,'V2'}]]]]]]}|[{'atom',7429,'ok'}]]}|[[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'Un'}|[{'type',7429,'integer',[]}]]]]}|[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'U1'}|[{'type',7429,'float',[]}]]]]}|[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'U2'}|[{'type',7429,'float',[]}]]]]}|[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'Vn'}|[{'type',7429,'integer',[]}]]]]}|[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'V1'}|[{'type',7429,'float',[]}]]]]}|[{'type',7429,'constraint',[{'atom',7429,'is_subtype'}|[[{'var',7429,'V2'}|[{'type',7429,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 7458
		'spec' =
		    %% Line 7458
		    [{{'evalPoint1',1},[{'type',7458,'bounded_fun',[{'type',7458,'fun',[{'type',7458,'product',[{'var',7458,'I'}]}|[{'atom',7458,'ok'}]]}|[[{'type',7458,'constraint',[{'atom',7458,'is_subtype'}|[[{'var',7458,'I'}|[{'type',7458,'integer',[]}]]]]}]]]}]}],
		%% Line 7464
		'spec' =
		    %% Line 7464
		    [{{'evalPoint2',2},[{'type',7464,'bounded_fun',[{'type',7464,'fun',[{'type',7464,'product',[{'var',7464,'I'}|[{'var',7464,'J'}]]}|[{'atom',7464,'ok'}]]}|[[{'type',7464,'constraint',[{'atom',7464,'is_subtype'}|[[{'var',7464,'I'}|[{'type',7464,'integer',[]}]]]]}|[{'type',7464,'constraint',[{'atom',7464,'is_subtype'}|[[{'var',7464,'J'}|[{'type',7464,'integer',[]}]]]]}]]]]}]}],
		%% Line 7523
		'spec' =
		    %% Line 7523
		    [{{'evalMesh1',3},[{'type',7523,'bounded_fun',[{'type',7523,'fun',[{'type',7523,'product',[{'var',7523,'Mode'}|[{'var',7523,'I1'}|[{'var',7523,'I2'}]]]}|[{'atom',7523,'ok'}]]}|[[{'type',7523,'constraint',[{'atom',7523,'is_subtype'}|[[{'var',7523,'Mode'}|[{'type',7523,'enum',[]}]]]]}|[{'type',7523,'constraint',[{'atom',7523,'is_subtype'}|[[{'var',7523,'I1'}|[{'type',7523,'integer',[]}]]]]}|[{'type',7523,'constraint',[{'atom',7523,'is_subtype'}|[[{'var',7523,'I2'}|[{'type',7523,'integer',[]}]]]]}]]]]]}]}],
		%% Line 7529
		'spec' =
		    %% Line 7529
		    [{{'evalMesh2',5},[{'type',7529,'bounded_fun',[{'type',7529,'fun',[{'type',7529,'product',[{'var',7529,'Mode'}|[{'var',7529,'I1'}|[{'var',7529,'I2'}|[{'var',7529,'J1'}|[{'var',7529,'J2'}]]]]]}|[{'atom',7529,'ok'}]]}|[[{'type',7529,'constraint',[{'atom',7529,'is_subtype'}|[[{'var',7529,'Mode'}|[{'type',7529,'enum',[]}]]]]}|[{'type',7529,'constraint',[{'atom',7529,'is_subtype'}|[[{'var',7529,'I1'}|[{'type',7529,'integer',[]}]]]]}|[{'type',7529,'constraint',[{'atom',7529,'is_subtype'}|[[{'var',7529,'I2'}|[{'type',7529,'integer',[]}]]]]}|[{'type',7529,'constraint',[{'atom',7529,'is_subtype'}|[[{'var',7529,'J1'}|[{'type',7529,'integer',[]}]]]]}|[{'type',7529,'constraint',[{'atom',7529,'is_subtype'}|[[{'var',7529,'J2'}|[{'type',7529,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 7599
		'spec' =
		    %% Line 7599
		    [{{'fogf',2},[{'type',7599,'bounded_fun',[{'type',7599,'fun',[{'type',7599,'product',[{'var',7599,'Pname'}|[{'var',7599,'Param'}]]}|[{'atom',7599,'ok'}]]}|[[{'type',7599,'constraint',[{'atom',7599,'is_subtype'}|[[{'var',7599,'Pname'}|[{'type',7599,'enum',[]}]]]]}|[{'type',7599,'constraint',[{'atom',7599,'is_subtype'}|[[{'var',7599,'Param'}|[{'type',7599,'float',[]}]]]]}]]]]}]}],
		%% Line 7605
		'spec' =
		    %% Line 7605
		    [{{'fogi',2},[{'type',7605,'bounded_fun',[{'type',7605,'fun',[{'type',7605,'product',[{'var',7605,'Pname'}|[{'var',7605,'Param'}]]}|[{'atom',7605,'ok'}]]}|[[{'type',7605,'constraint',[{'atom',7605,'is_subtype'}|[[{'var',7605,'Pname'}|[{'type',7605,'enum',[]}]]]]}|[{'type',7605,'constraint',[{'atom',7605,'is_subtype'}|[[{'var',7605,'Param'}|[{'type',7605,'integer',[]}]]]]}]]]]}]}],
		%% Line 7611
		'spec' =
		    %% Line 7611
		    [{{'fogfv',2},[{'type',7611,'bounded_fun',[{'type',7611,'fun',[{'type',7611,'product',[{'var',7611,'Pname'}|[{'var',7611,'Params'}]]}|[{'atom',7611,'ok'}]]}|[[{'type',7611,'constraint',[{'atom',7611,'is_subtype'}|[[{'var',7611,'Pname'}|[{'type',7611,'enum',[]}]]]]}|[{'type',7611,'constraint',[{'atom',7611,'is_subtype'}|[[{'var',7611,'Params'}|[{'type',7611,'tuple',[{'type',7611,'float',[]}]}]]]]}]]]]}]}],
		%% Line 7618
		'spec' =
		    %% Line 7618
		    [{{'fogiv',2},[{'type',7618,'bounded_fun',[{'type',7618,'fun',[{'type',7618,'product',[{'var',7618,'Pname'}|[{'var',7618,'Params'}]]}|[{'atom',7618,'ok'}]]}|[[{'type',7618,'constraint',[{'atom',7618,'is_subtype'}|[[{'var',7618,'Pname'}|[{'type',7618,'enum',[]}]]]]}|[{'type',7618,'constraint',[{'atom',7618,'is_subtype'}|[[{'var',7618,'Params'}|[{'type',7618,'tuple',[{'type',7618,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 7731
		'spec' =
		    %% Line 7731
		    [{{'feedbackBuffer',3},[{'type',7731,'bounded_fun',[{'type',7731,'fun',[{'type',7731,'product',[{'var',7731,'Size'}|[{'var',7731,'Type'}|[{'var',7731,'Buffer'}]]]}|[{'atom',7731,'ok'}]]}|[[{'type',7731,'constraint',[{'atom',7731,'is_subtype'}|[[{'var',7731,'Size'}|[{'type',7731,'integer',[]}]]]]}|[{'type',7731,'constraint',[{'atom',7731,'is_subtype'}|[[{'var',7731,'Type'}|[{'type',7731,'enum',[]}]]]]}|[{'type',7731,'constraint',[{'atom',7731,'is_subtype'}|[[{'var',7731,'Buffer'}|[{'type',7731,'mem',[]}]]]]}]]]]]}]}],
		%% Line 7750
		'spec' =
		    %% Line 7750
		    [{{'passThrough',1},[{'type',7750,'bounded_fun',[{'type',7750,'fun',[{'type',7750,'product',[{'var',7750,'Token'}]}|[{'atom',7750,'ok'}]]}|[[{'type',7750,'constraint',[{'atom',7750,'is_subtype'}|[[{'var',7750,'Token'}|[{'type',7750,'float',[]}]]]]}]]]}]}],
		%% Line 7795
		'spec' =
		    %% Line 7795
		    [{{'selectBuffer',2},[{'type',7795,'bounded_fun',[{'type',7795,'fun',[{'type',7795,'product',[{'var',7795,'Size'}|[{'var',7795,'Buffer'}]]}|[{'atom',7795,'ok'}]]}|[[{'type',7795,'constraint',[{'atom',7795,'is_subtype'}|[[{'var',7795,'Size'}|[{'type',7795,'integer',[]}]]]]}|[{'type',7795,'constraint',[{'atom',7795,'is_subtype'}|[[{'var',7795,'Buffer'}|[{'type',7795,'mem',[]}]]]]}]]]]}]}],
		%% Line 7810
		'spec' =
		    %% Line 7810
		    [{{'initNames',0},[{'type',7810,'fun',[{'type',7810,'product',[]}|[{'atom',7810,'ok'}]]}]}],
		%% Line 7826
		'spec' =
		    %% Line 7826
		    [{{'loadName',1},[{'type',7826,'bounded_fun',[{'type',7826,'fun',[{'type',7826,'product',[{'var',7826,'Name'}]}|[{'atom',7826,'ok'}]]}|[[{'type',7826,'constraint',[{'atom',7826,'is_subtype'}|[[{'var',7826,'Name'}|[{'type',7826,'integer',[]}]]]]}]]]}]}],
		%% Line 7850
		'spec' =
		    %% Line 7850
		    [{{'pushName',1},[{'type',7850,'bounded_fun',[{'type',7850,'fun',[{'type',7850,'product',[{'var',7850,'Name'}]}|[{'atom',7850,'ok'}]]}|[[{'type',7850,'constraint',[{'atom',7850,'is_subtype'}|[[{'var',7850,'Name'}|[{'type',7850,'integer',[]}]]]]}]]]}]}],
		%% Line 7856
		'spec' =
		    %% Line 7856
		    [{{'popName',0},[{'type',7856,'fun',[{'type',7856,'product',[]}|[{'atom',7856,'ok'}]]}]}],
		%% Line 7868
		'spec' =
		    %% Line 7868
		    [{{'blendColor',4},[{'type',7868,'bounded_fun',[{'type',7868,'fun',[{'type',7868,'product',[{'var',7868,'Red'}|[{'var',7868,'Green'}|[{'var',7868,'Blue'}|[{'var',7868,'Alpha'}]]]]}|[{'atom',7868,'ok'}]]}|[[{'type',7868,'constraint',[{'atom',7868,'is_subtype'}|[[{'var',7868,'Red'}|[{'type',7868,'clamp',[]}]]]]}|[{'type',7868,'constraint',[{'atom',7868,'is_subtype'}|[[{'var',7868,'Green'}|[{'type',7868,'clamp',[]}]]]]}|[{'type',7868,'constraint',[{'atom',7868,'is_subtype'}|[[{'var',7868,'Blue'}|[{'type',7868,'clamp',[]}]]]]}|[{'type',7868,'constraint',[{'atom',7868,'is_subtype'}|[[{'var',7868,'Alpha'}|[{'type',7868,'clamp',[]}]]]]}]]]]]]}]}],
		%% Line 7909
		'spec' =
		    %% Line 7909
		    [{{'blendEquation',1},[{'type',7909,'bounded_fun',[{'type',7909,'fun',[{'type',7909,'product',[{'var',7909,'Mode'}]}|[{'atom',7909,'ok'}]]}|[[{'type',7909,'constraint',[{'atom',7909,'is_subtype'}|[[{'var',7909,'Mode'}|[{'type',7909,'enum',[]}]]]]}]]]}]}],
		%% Line 7938
		'spec' =
		    %% Line 7938
		    [{{'drawRangeElements',6},[{'type',7938,'bounded_fun',[{'type',7938,'fun',[{'type',7938,'product',[{'var',7938,'Mode'}|[{'var',7938,'Start'}|[{'var',7938,'End'}|[{'var',7938,'Count'}|[{'var',7938,'Type'}|[{'var',7938,'Indices'}]]]]]]}|[{'atom',7938,'ok'}]]}|[[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'Mode'}|[{'type',7938,'enum',[]}]]]]}|[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'Start'}|[{'type',7938,'integer',[]}]]]]}|[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'End'}|[{'type',7938,'integer',[]}]]]]}|[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'Count'}|[{'type',7938,'integer',[]}]]]]}|[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'Type'}|[{'type',7938,'enum',[]}]]]]}|[{'type',7938,'constraint',[{'atom',7938,'is_subtype'}|[[{'var',7938,'Indices'}|[{'type',7938,'union',[{'type',7938,'offset',[]}|[{'type',7938,'mem',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 8046
		'spec' =
		    %% Line 8046
		    [{{'texImage3D',10},[{'type',8046,'bounded_fun',[{'type',8046,'fun',[{'type',8046,'product',[{'var',8046,'Target'}|[{'var',8046,'Level'}|[{'var',8046,'InternalFormat'}|[{'var',8046,'Width'}|[{'var',8046,'Height'}|[{'var',8046,'Depth'}|[{'var',8046,'Border'}|[{'var',8046,'Format'}|[{'var',8046,'Type'}|[{'var',8046,'Pixels'}]]]]]]]]]]}|[{'atom',8046,'ok'}]]}|[[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Target'}|[{'type',8046,'enum',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Level'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'InternalFormat'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Width'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Height'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Depth'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Border'}|[{'type',8046,'integer',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Format'}|[{'type',8046,'enum',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Type'}|[{'type',8046,'enum',[]}]]]]}|[{'type',8046,'constraint',[{'atom',8046,'is_subtype'}|[[{'var',8046,'Pixels'}|[{'type',8046,'union',[{'type',8046,'offset',[]}|[{'type',8046,'mem',[]}]]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 8056
		'spec' =
		    %% Line 8056
		    [{{'texSubImage3D',11},[{'type',8056,'bounded_fun',[{'type',8056,'fun',[{'type',8056,'product',[{'var',8056,'Target'}|[{'var',8056,'Level'}|[{'var',8056,'Xoffset'}|[{'var',8056,'Yoffset'}|[{'var',8056,'Zoffset'}|[{'var',8056,'Width'}|[{'var',8056,'Height'}|[{'var',8056,'Depth'}|[{'var',8056,'Format'}|[{'var',8056,'Type'}|[{'var',8056,'Pixels'}]]]]]]]]]]]}|[{'atom',8056,'ok'}]]}|[[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Target'}|[{'type',8056,'enum',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Level'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Xoffset'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Yoffset'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Zoffset'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Width'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Height'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Depth'}|[{'type',8056,'integer',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Format'}|[{'type',8056,'enum',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Type'}|[{'type',8056,'enum',[]}]]]]}|[{'type',8056,'constraint',[{'atom',8056,'is_subtype'}|[[{'var',8056,'Pixels'}|[{'type',8056,'union',[{'type',8056,'offset',[]}|[{'type',8056,'mem',[]}]]}]]]]}]]]]]]]]]]]]]}]}],
		%% Line 8093
		'spec' =
		    %% Line 8093
		    [{{'copyTexSubImage3D',9},[{'type',8093,'bounded_fun',[{'type',8093,'fun',[{'type',8093,'product',[{'var',8093,'Target'}|[{'var',8093,'Level'}|[{'var',8093,'Xoffset'}|[{'var',8093,'Yoffset'}|[{'var',8093,'Zoffset'}|[{'var',8093,'X'}|[{'var',8093,'Y'}|[{'var',8093,'Width'}|[{'var',8093,'Height'}]]]]]]]]]}|[{'atom',8093,'ok'}]]}|[[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Target'}|[{'type',8093,'enum',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Level'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Xoffset'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Yoffset'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Zoffset'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'X'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Y'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Width'}|[{'type',8093,'integer',[]}]]]]}|[{'type',8093,'constraint',[{'atom',8093,'is_subtype'}|[[{'var',8093,'Height'}|[{'type',8093,'integer',[]}]]]]}]]]]]]]]]]]}]}],
		%% Line 8193
		'spec' =
		    %% Line 8193
		    [{{'colorTable',6},[{'type',8193,'bounded_fun',[{'type',8193,'fun',[{'type',8193,'product',[{'var',8193,'Target'}|[{'var',8193,'Internalformat'}|[{'var',8193,'Width'}|[{'var',8193,'Format'}|[{'var',8193,'Type'}|[{'var',8193,'Table'}]]]]]]}|[{'atom',8193,'ok'}]]}|[[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Target'}|[{'type',8193,'enum',[]}]]]]}|[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Internalformat'}|[{'type',8193,'enum',[]}]]]]}|[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Width'}|[{'type',8193,'integer',[]}]]]]}|[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Format'}|[{'type',8193,'enum',[]}]]]]}|[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Type'}|[{'type',8193,'enum',[]}]]]]}|[{'type',8193,'constraint',[{'atom',8193,'is_subtype'}|[[{'var',8193,'Table'}|[{'type',8193,'union',[{'type',8193,'offset',[]}|[{'type',8193,'mem',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 8218
		'spec' =
		    %% Line 8218
		    [{{'colorTableParameterfv',3},[{'type',8218,'bounded_fun',[{'type',8218,'fun',[{'type',8218,'product',[{'var',8218,'Target'}|[{'var',8218,'Pname'}|[{'var',8218,'Params'}]]]}|[{'atom',8218,'ok'}]]}|[[{'type',8218,'constraint',[{'atom',8218,'is_subtype'}|[[{'var',8218,'Target'}|[{'type',8218,'enum',[]}]]]]}|[{'type',8218,'constraint',[{'atom',8218,'is_subtype'}|[[{'var',8218,'Pname'}|[{'type',8218,'enum',[]}]]]]}|[{'type',8218,'constraint',[{'atom',8218,'is_subtype'}|[[{'var',8218,'Params'}|[{'type',8218,'tuple',[{'type',8218,'float',[]}|[{'type',8218,'float',[]}|[{'type',8218,'float',[]}|[{'type',8218,'float',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 8224
		'spec' =
		    %% Line 8224
		    [{{'colorTableParameteriv',3},[{'type',8224,'bounded_fun',[{'type',8224,'fun',[{'type',8224,'product',[{'var',8224,'Target'}|[{'var',8224,'Pname'}|[{'var',8224,'Params'}]]]}|[{'atom',8224,'ok'}]]}|[[{'type',8224,'constraint',[{'atom',8224,'is_subtype'}|[[{'var',8224,'Target'}|[{'type',8224,'enum',[]}]]]]}|[{'type',8224,'constraint',[{'atom',8224,'is_subtype'}|[[{'var',8224,'Pname'}|[{'type',8224,'enum',[]}]]]]}|[{'type',8224,'constraint',[{'atom',8224,'is_subtype'}|[[{'var',8224,'Params'}|[{'type',8224,'tuple',[{'type',8224,'integer',[]}|[{'type',8224,'integer',[]}|[{'type',8224,'integer',[]}|[{'type',8224,'integer',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 8268
		'spec' =
		    %% Line 8268
		    [{{'copyColorTable',5},[{'type',8268,'bounded_fun',[{'type',8268,'fun',[{'type',8268,'product',[{'var',8268,'Target'}|[{'var',8268,'Internalformat'}|[{'var',8268,'X'}|[{'var',8268,'Y'}|[{'var',8268,'Width'}]]]]]}|[{'atom',8268,'ok'}]]}|[[{'type',8268,'constraint',[{'atom',8268,'is_subtype'}|[[{'var',8268,'Target'}|[{'type',8268,'enum',[]}]]]]}|[{'type',8268,'constraint',[{'atom',8268,'is_subtype'}|[[{'var',8268,'Internalformat'}|[{'type',8268,'enum',[]}]]]]}|[{'type',8268,'constraint',[{'atom',8268,'is_subtype'}|[[{'var',8268,'X'}|[{'type',8268,'integer',[]}]]]]}|[{'type',8268,'constraint',[{'atom',8268,'is_subtype'}|[[{'var',8268,'Y'}|[{'type',8268,'integer',[]}]]]]}|[{'type',8268,'constraint',[{'atom',8268,'is_subtype'}|[[{'var',8268,'Width'}|[{'type',8268,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 8293
		'spec' =
		    %% Line 8293
		    [{{'getColorTable',4},[{'type',8293,'bounded_fun',[{'type',8293,'fun',[{'type',8293,'product',[{'var',8293,'Target'}|[{'var',8293,'Format'}|[{'var',8293,'Type'}|[{'var',8293,'Table'}]]]]}|[{'atom',8293,'ok'}]]}|[[{'type',8293,'constraint',[{'atom',8293,'is_subtype'}|[[{'var',8293,'Target'}|[{'type',8293,'enum',[]}]]]]}|[{'type',8293,'constraint',[{'atom',8293,'is_subtype'}|[[{'var',8293,'Format'}|[{'type',8293,'enum',[]}]]]]}|[{'type',8293,'constraint',[{'atom',8293,'is_subtype'}|[[{'var',8293,'Type'}|[{'type',8293,'enum',[]}]]]]}|[{'type',8293,'constraint',[{'atom',8293,'is_subtype'}|[[{'var',8293,'Table'}|[{'type',8293,'mem',[]}]]]]}]]]]]]}]}],
		%% Line 8332
		'spec' =
		    %% Line 8332
		    [{{'getColorTableParameterfv',2},[{'type',8332,'bounded_fun',[{'type',8332,'fun',[{'type',8332,'product',[{'var',8332,'Target'}|[{'var',8332,'Pname'}]]}|[{'type',8332,'tuple',[{'type',8332,'float',[]}|[{'type',8332,'float',[]}|[{'type',8332,'float',[]}|[{'type',8332,'float',[]}]]]]}]]}|[[{'type',8332,'constraint',[{'atom',8332,'is_subtype'}|[[{'var',8332,'Target'}|[{'type',8332,'enum',[]}]]]]}|[{'type',8332,'constraint',[{'atom',8332,'is_subtype'}|[[{'var',8332,'Pname'}|[{'type',8332,'enum',[]}]]]]}]]]]}]}],
		%% Line 8338
		'spec' =
		    %% Line 8338
		    [{{'getColorTableParameteriv',2},[{'type',8338,'bounded_fun',[{'type',8338,'fun',[{'type',8338,'product',[{'var',8338,'Target'}|[{'var',8338,'Pname'}]]}|[{'type',8338,'tuple',[{'type',8338,'integer',[]}|[{'type',8338,'integer',[]}|[{'type',8338,'integer',[]}|[{'type',8338,'integer',[]}]]]]}]]}|[[{'type',8338,'constraint',[{'atom',8338,'is_subtype'}|[[{'var',8338,'Target'}|[{'type',8338,'enum',[]}]]]]}|[{'type',8338,'constraint',[{'atom',8338,'is_subtype'}|[[{'var',8338,'Pname'}|[{'type',8338,'enum',[]}]]]]}]]]]}]}],
		%% Line 8356
		'spec' =
		    %% Line 8356
		    [{{'colorSubTable',6},[{'type',8356,'bounded_fun',[{'type',8356,'fun',[{'type',8356,'product',[{'var',8356,'Target'}|[{'var',8356,'Start'}|[{'var',8356,'Count'}|[{'var',8356,'Format'}|[{'var',8356,'Type'}|[{'var',8356,'Data'}]]]]]]}|[{'atom',8356,'ok'}]]}|[[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Target'}|[{'type',8356,'enum',[]}]]]]}|[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Start'}|[{'type',8356,'integer',[]}]]]]}|[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Count'}|[{'type',8356,'integer',[]}]]]]}|[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Format'}|[{'type',8356,'enum',[]}]]]]}|[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Type'}|[{'type',8356,'enum',[]}]]]]}|[{'type',8356,'constraint',[{'atom',8356,'is_subtype'}|[[{'var',8356,'Data'}|[{'type',8356,'union',[{'type',8356,'offset',[]}|[{'type',8356,'mem',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 8373
		'spec' =
		    %% Line 8373
		    [{{'copyColorSubTable',5},[{'type',8373,'bounded_fun',[{'type',8373,'fun',[{'type',8373,'product',[{'var',8373,'Target'}|[{'var',8373,'Start'}|[{'var',8373,'X'}|[{'var',8373,'Y'}|[{'var',8373,'Width'}]]]]]}|[{'atom',8373,'ok'}]]}|[[{'type',8373,'constraint',[{'atom',8373,'is_subtype'}|[[{'var',8373,'Target'}|[{'type',8373,'enum',[]}]]]]}|[{'type',8373,'constraint',[{'atom',8373,'is_subtype'}|[[{'var',8373,'Start'}|[{'type',8373,'integer',[]}]]]]}|[{'type',8373,'constraint',[{'atom',8373,'is_subtype'}|[[{'var',8373,'X'}|[{'type',8373,'integer',[]}]]]]}|[{'type',8373,'constraint',[{'atom',8373,'is_subtype'}|[[{'var',8373,'Y'}|[{'type',8373,'integer',[]}]]]]}|[{'type',8373,'constraint',[{'atom',8373,'is_subtype'}|[[{'var',8373,'Width'}|[{'type',8373,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 8426
		'spec' =
		    %% Line 8426
		    [{{'convolutionFilter1D',6},[{'type',8426,'bounded_fun',[{'type',8426,'fun',[{'type',8426,'product',[{'var',8426,'Target'}|[{'var',8426,'Internalformat'}|[{'var',8426,'Width'}|[{'var',8426,'Format'}|[{'var',8426,'Type'}|[{'var',8426,'Image'}]]]]]]}|[{'atom',8426,'ok'}]]}|[[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Target'}|[{'type',8426,'enum',[]}]]]]}|[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Internalformat'}|[{'type',8426,'enum',[]}]]]]}|[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Width'}|[{'type',8426,'integer',[]}]]]]}|[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Format'}|[{'type',8426,'enum',[]}]]]]}|[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Type'}|[{'type',8426,'enum',[]}]]]]}|[{'type',8426,'constraint',[{'atom',8426,'is_subtype'}|[[{'var',8426,'Image'}|[{'type',8426,'union',[{'type',8426,'offset',[]}|[{'type',8426,'mem',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 8483
		'spec' =
		    %% Line 8483
		    [{{'convolutionFilter2D',7},[{'type',8483,'bounded_fun',[{'type',8483,'fun',[{'type',8483,'product',[{'var',8483,'Target'}|[{'var',8483,'Internalformat'}|[{'var',8483,'Width'}|[{'var',8483,'Height'}|[{'var',8483,'Format'}|[{'var',8483,'Type'}|[{'var',8483,'Image'}]]]]]]]}|[{'atom',8483,'ok'}]]}|[[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Target'}|[{'type',8483,'enum',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Internalformat'}|[{'type',8483,'enum',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Width'}|[{'type',8483,'integer',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Height'}|[{'type',8483,'integer',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Format'}|[{'type',8483,'enum',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Type'}|[{'type',8483,'enum',[]}]]]]}|[{'type',8483,'constraint',[{'atom',8483,'is_subtype'}|[[{'var',8483,'Image'}|[{'type',8483,'union',[{'type',8483,'offset',[]}|[{'type',8483,'mem',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 8524
		'spec' =
		    %% Line 8524
		    [{{'convolutionParameterf',3},[{'type',8524,'bounded_fun',[{'type',8524,'fun',[{'type',8524,'product',[{'var',8524,'Target'}|[{'var',8524,'Pname'}|[{'var',8524,'Params'}]]]}|[{'atom',8524,'ok'}]]}|[[{'type',8524,'constraint',[{'atom',8524,'is_subtype'}|[[{'var',8524,'Target'}|[{'type',8524,'enum',[]}]]]]}|[{'type',8524,'constraint',[{'atom',8524,'is_subtype'}|[[{'var',8524,'Pname'}|[{'type',8524,'enum',[]}]]]]}|[{'type',8524,'constraint',[{'atom',8524,'is_subtype'}|[[{'var',8524,'Params'}|[{'type',8524,'tuple',[{'type',8524,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 8530
		'spec' =
		    %% Line 8530
		    [{{'convolutionParameterfv',3},[{'type',8530,'bounded_fun',[{'type',8530,'fun',[{'type',8530,'product',[{'ann_type',8530,[{'var',8530,'Target'}|[{'type',8530,'enum',[]}]]}|[{'ann_type',8530,[{'var',8530,'Pname'}|[{'type',8530,'enum',[]}]]}|[{'var',8530,'Params'}]]]}|[{'atom',8530,'ok'}]]}|[[{'type',8530,'constraint',[{'atom',8530,'is_subtype'}|[[{'var',8530,'Params'}|[{'type',8530,'tuple',[{'ann_type',8530,[{'var',8530,'Params'}|[{'type',8530,'tuple',[{'type',8530,'float',[]}]}]]}]}]]]]}]]]}]}],
		%% Line 8535
		'spec' =
		    %% Line 8535
		    [{{'convolutionParameteri',3},[{'type',8535,'bounded_fun',[{'type',8535,'fun',[{'type',8535,'product',[{'var',8535,'Target'}|[{'var',8535,'Pname'}|[{'var',8535,'Params'}]]]}|[{'atom',8535,'ok'}]]}|[[{'type',8535,'constraint',[{'atom',8535,'is_subtype'}|[[{'var',8535,'Target'}|[{'type',8535,'enum',[]}]]]]}|[{'type',8535,'constraint',[{'atom',8535,'is_subtype'}|[[{'var',8535,'Pname'}|[{'type',8535,'enum',[]}]]]]}|[{'type',8535,'constraint',[{'atom',8535,'is_subtype'}|[[{'var',8535,'Params'}|[{'type',8535,'tuple',[{'type',8535,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 8541
		'spec' =
		    %% Line 8541
		    [{{'convolutionParameteriv',3},[{'type',8541,'bounded_fun',[{'type',8541,'fun',[{'type',8541,'product',[{'ann_type',8541,[{'var',8541,'Target'}|[{'type',8541,'enum',[]}]]}|[{'ann_type',8541,[{'var',8541,'Pname'}|[{'type',8541,'enum',[]}]]}|[{'var',8541,'Params'}]]]}|[{'atom',8541,'ok'}]]}|[[{'type',8541,'constraint',[{'atom',8541,'is_subtype'}|[[{'var',8541,'Params'}|[{'type',8541,'tuple',[{'ann_type',8541,[{'var',8541,'Params'}|[{'type',8541,'tuple',[{'type',8541,'integer',[]}]}]]}]}]]]]}]]]}]}],
		%% Line 8593
		'spec' =
		    %% Line 8593
		    [{{'copyConvolutionFilter1D',5},[{'type',8593,'bounded_fun',[{'type',8593,'fun',[{'type',8593,'product',[{'var',8593,'Target'}|[{'var',8593,'Internalformat'}|[{'var',8593,'X'}|[{'var',8593,'Y'}|[{'var',8593,'Width'}]]]]]}|[{'atom',8593,'ok'}]]}|[[{'type',8593,'constraint',[{'atom',8593,'is_subtype'}|[[{'var',8593,'Target'}|[{'type',8593,'enum',[]}]]]]}|[{'type',8593,'constraint',[{'atom',8593,'is_subtype'}|[[{'var',8593,'Internalformat'}|[{'type',8593,'enum',[]}]]]]}|[{'type',8593,'constraint',[{'atom',8593,'is_subtype'}|[[{'var',8593,'X'}|[{'type',8593,'integer',[]}]]]]}|[{'type',8593,'constraint',[{'atom',8593,'is_subtype'}|[[{'var',8593,'Y'}|[{'type',8593,'integer',[]}]]]]}|[{'type',8593,'constraint',[{'atom',8593,'is_subtype'}|[[{'var',8593,'Width'}|[{'type',8593,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 8647
		'spec' =
		    %% Line 8647
		    [{{'copyConvolutionFilter2D',6},[{'type',8647,'bounded_fun',[{'type',8647,'fun',[{'type',8647,'product',[{'var',8647,'Target'}|[{'var',8647,'Internalformat'}|[{'var',8647,'X'}|[{'var',8647,'Y'}|[{'var',8647,'Width'}|[{'var',8647,'Height'}]]]]]]}|[{'atom',8647,'ok'}]]}|[[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'Target'}|[{'type',8647,'enum',[]}]]]]}|[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'Internalformat'}|[{'type',8647,'enum',[]}]]]]}|[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'X'}|[{'type',8647,'integer',[]}]]]]}|[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'Y'}|[{'type',8647,'integer',[]}]]]]}|[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'Width'}|[{'type',8647,'integer',[]}]]]]}|[{'type',8647,'constraint',[{'atom',8647,'is_subtype'}|[[{'var',8647,'Height'}|[{'type',8647,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 8673
		'spec' =
		    %% Line 8673
		    [{{'getConvolutionFilter',4},[{'type',8673,'bounded_fun',[{'type',8673,'fun',[{'type',8673,'product',[{'var',8673,'Target'}|[{'var',8673,'Format'}|[{'var',8673,'Type'}|[{'var',8673,'Image'}]]]]}|[{'atom',8673,'ok'}]]}|[[{'type',8673,'constraint',[{'atom',8673,'is_subtype'}|[[{'var',8673,'Target'}|[{'type',8673,'enum',[]}]]]]}|[{'type',8673,'constraint',[{'atom',8673,'is_subtype'}|[[{'var',8673,'Format'}|[{'type',8673,'enum',[]}]]]]}|[{'type',8673,'constraint',[{'atom',8673,'is_subtype'}|[[{'var',8673,'Type'}|[{'type',8673,'enum',[]}]]]]}|[{'type',8673,'constraint',[{'atom',8673,'is_subtype'}|[[{'var',8673,'Image'}|[{'type',8673,'mem',[]}]]]]}]]]]]]}]}],
		%% Line 8712
		'spec' =
		    %% Line 8712
		    [{{'getConvolutionParameterfv',2},[{'type',8712,'bounded_fun',[{'type',8712,'fun',[{'type',8712,'product',[{'var',8712,'Target'}|[{'var',8712,'Pname'}]]}|[{'type',8712,'tuple',[{'type',8712,'float',[]}|[{'type',8712,'float',[]}|[{'type',8712,'float',[]}|[{'type',8712,'float',[]}]]]]}]]}|[[{'type',8712,'constraint',[{'atom',8712,'is_subtype'}|[[{'var',8712,'Target'}|[{'type',8712,'enum',[]}]]]]}|[{'type',8712,'constraint',[{'atom',8712,'is_subtype'}|[[{'var',8712,'Pname'}|[{'type',8712,'enum',[]}]]]]}]]]]}]}],
		%% Line 8718
		'spec' =
		    %% Line 8718
		    [{{'getConvolutionParameteriv',2},[{'type',8718,'bounded_fun',[{'type',8718,'fun',[{'type',8718,'product',[{'var',8718,'Target'}|[{'var',8718,'Pname'}]]}|[{'type',8718,'tuple',[{'type',8718,'integer',[]}|[{'type',8718,'integer',[]}|[{'type',8718,'integer',[]}|[{'type',8718,'integer',[]}]]]]}]]}|[[{'type',8718,'constraint',[{'atom',8718,'is_subtype'}|[[{'var',8718,'Target'}|[{'type',8718,'enum',[]}]]]]}|[{'type',8718,'constraint',[{'atom',8718,'is_subtype'}|[[{'var',8718,'Pname'}|[{'type',8718,'enum',[]}]]]]}]]]]}]}],
		%% Line 8773
		'spec' =
		    %% Line 8773
		    [{{'separableFilter2D',8},[{'type',8773,'bounded_fun',[{'type',8773,'fun',[{'type',8773,'product',[{'var',8773,'Target'}|[{'var',8773,'Internalformat'}|[{'var',8773,'Width'}|[{'var',8773,'Height'}|[{'var',8773,'Format'}|[{'var',8773,'Type'}|[{'var',8773,'Row'}|[{'var',8773,'Column'}]]]]]]]]}|[{'atom',8773,'ok'}]]}|[[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Target'}|[{'type',8773,'enum',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Internalformat'}|[{'type',8773,'enum',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Width'}|[{'type',8773,'integer',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Height'}|[{'type',8773,'integer',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Format'}|[{'type',8773,'enum',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Type'}|[{'type',8773,'enum',[]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Row'}|[{'type',8773,'union',[{'type',8773,'offset',[]}|[{'type',8773,'mem',[]}]]}]]]]}|[{'type',8773,'constraint',[{'atom',8773,'is_subtype'}|[[{'var',8773,'Column'}|[{'type',8773,'union',[{'type',8773,'offset',[]}|[{'type',8773,'mem',[]}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 8802
		'spec' =
		    %% Line 8802
		    [{{'getHistogram',5},[{'type',8802,'bounded_fun',[{'type',8802,'fun',[{'type',8802,'product',[{'var',8802,'Target'}|[{'var',8802,'Reset'}|[{'var',8802,'Format'}|[{'var',8802,'Type'}|[{'var',8802,'Values'}]]]]]}|[{'atom',8802,'ok'}]]}|[[{'type',8802,'constraint',[{'atom',8802,'is_subtype'}|[[{'var',8802,'Target'}|[{'type',8802,'enum',[]}]]]]}|[{'type',8802,'constraint',[{'atom',8802,'is_subtype'}|[[{'var',8802,'Reset'}|[{'type',8802,'union',[{'integer',8802,0}|[{'integer',8802,1}]]}]]]]}|[{'type',8802,'constraint',[{'atom',8802,'is_subtype'}|[[{'var',8802,'Format'}|[{'type',8802,'enum',[]}]]]]}|[{'type',8802,'constraint',[{'atom',8802,'is_subtype'}|[[{'var',8802,'Type'}|[{'type',8802,'enum',[]}]]]]}|[{'type',8802,'constraint',[{'atom',8802,'is_subtype'}|[[{'var',8802,'Values'}|[{'type',8802,'mem',[]}]]]]}]]]]]]]}]}],
		%% Line 8828
		'spec' =
		    %% Line 8828
		    [{{'getHistogramParameterfv',2},[{'type',8828,'bounded_fun',[{'type',8828,'fun',[{'type',8828,'product',[{'var',8828,'Target'}|[{'var',8828,'Pname'}]]}|[{'type',8828,'tuple',[{'type',8828,'float',[]}]}]]}|[[{'type',8828,'constraint',[{'atom',8828,'is_subtype'}|[[{'var',8828,'Target'}|[{'type',8828,'enum',[]}]]]]}|[{'type',8828,'constraint',[{'atom',8828,'is_subtype'}|[[{'var',8828,'Pname'}|[{'type',8828,'enum',[]}]]]]}]]]]}]}],
		%% Line 8834
		'spec' =
		    %% Line 8834
		    [{{'getHistogramParameteriv',2},[{'type',8834,'bounded_fun',[{'type',8834,'fun',[{'type',8834,'product',[{'var',8834,'Target'}|[{'var',8834,'Pname'}]]}|[{'type',8834,'tuple',[{'type',8834,'integer',[]}]}]]}|[[{'type',8834,'constraint',[{'atom',8834,'is_subtype'}|[[{'var',8834,'Target'}|[{'type',8834,'enum',[]}]]]]}|[{'type',8834,'constraint',[{'atom',8834,'is_subtype'}|[[{'var',8834,'Pname'}|[{'type',8834,'enum',[]}]]]]}]]]]}]}],
		%% Line 8866
		'spec' =
		    %% Line 8866
		    [{{'getMinmax',5},[{'type',8866,'bounded_fun',[{'type',8866,'fun',[{'type',8866,'product',[{'var',8866,'Target'}|[{'var',8866,'Reset'}|[{'var',8866,'Format'}|[{'var',8866,'Types'}|[{'var',8866,'Values'}]]]]]}|[{'atom',8866,'ok'}]]}|[[{'type',8866,'constraint',[{'atom',8866,'is_subtype'}|[[{'var',8866,'Target'}|[{'type',8866,'enum',[]}]]]]}|[{'type',8866,'constraint',[{'atom',8866,'is_subtype'}|[[{'var',8866,'Reset'}|[{'type',8866,'union',[{'integer',8866,0}|[{'integer',8866,1}]]}]]]]}|[{'type',8866,'constraint',[{'atom',8866,'is_subtype'}|[[{'var',8866,'Format'}|[{'type',8866,'enum',[]}]]]]}|[{'type',8866,'constraint',[{'atom',8866,'is_subtype'}|[[{'var',8866,'Types'}|[{'type',8866,'enum',[]}]]]]}|[{'type',8866,'constraint',[{'atom',8866,'is_subtype'}|[[{'var',8866,'Values'}|[{'type',8866,'mem',[]}]]]]}]]]]]]]}]}],
		%% Line 8884
		'spec' =
		    %% Line 8884
		    [{{'getMinmaxParameterfv',2},[{'type',8884,'bounded_fun',[{'type',8884,'fun',[{'type',8884,'product',[{'var',8884,'Target'}|[{'var',8884,'Pname'}]]}|[{'type',8884,'tuple',[{'type',8884,'float',[]}]}]]}|[[{'type',8884,'constraint',[{'atom',8884,'is_subtype'}|[[{'var',8884,'Target'}|[{'type',8884,'enum',[]}]]]]}|[{'type',8884,'constraint',[{'atom',8884,'is_subtype'}|[[{'var',8884,'Pname'}|[{'type',8884,'enum',[]}]]]]}]]]]}]}],
		%% Line 8890
		'spec' =
		    %% Line 8890
		    [{{'getMinmaxParameteriv',2},[{'type',8890,'bounded_fun',[{'type',8890,'fun',[{'type',8890,'product',[{'var',8890,'Target'}|[{'var',8890,'Pname'}]]}|[{'type',8890,'tuple',[{'type',8890,'integer',[]}]}]]}|[[{'type',8890,'constraint',[{'atom',8890,'is_subtype'}|[[{'var',8890,'Target'}|[{'type',8890,'enum',[]}]]]]}|[{'type',8890,'constraint',[{'atom',8890,'is_subtype'}|[[{'var',8890,'Pname'}|[{'type',8890,'enum',[]}]]]]}]]]]}]}],
		%% Line 8924
		'spec' =
		    %% Line 8924
		    [{{'histogram',4},[{'type',8924,'bounded_fun',[{'type',8924,'fun',[{'type',8924,'product',[{'var',8924,'Target'}|[{'var',8924,'Width'}|[{'var',8924,'Internalformat'}|[{'var',8924,'Sink'}]]]]}|[{'atom',8924,'ok'}]]}|[[{'type',8924,'constraint',[{'atom',8924,'is_subtype'}|[[{'var',8924,'Target'}|[{'type',8924,'enum',[]}]]]]}|[{'type',8924,'constraint',[{'atom',8924,'is_subtype'}|[[{'var',8924,'Width'}|[{'type',8924,'integer',[]}]]]]}|[{'type',8924,'constraint',[{'atom',8924,'is_subtype'}|[[{'var',8924,'Internalformat'}|[{'type',8924,'enum',[]}]]]]}|[{'type',8924,'constraint',[{'atom',8924,'is_subtype'}|[[{'var',8924,'Sink'}|[{'type',8924,'union',[{'integer',8924,0}|[{'integer',8924,1}]]}]]]]}]]]]]]}]}],
		%% Line 8953
		'spec' =
		    %% Line 8953
		    [{{'minmax',3},[{'type',8953,'bounded_fun',[{'type',8953,'fun',[{'type',8953,'product',[{'var',8953,'Target'}|[{'var',8953,'Internalformat'}|[{'var',8953,'Sink'}]]]}|[{'atom',8953,'ok'}]]}|[[{'type',8953,'constraint',[{'atom',8953,'is_subtype'}|[[{'var',8953,'Target'}|[{'type',8953,'enum',[]}]]]]}|[{'type',8953,'constraint',[{'atom',8953,'is_subtype'}|[[{'var',8953,'Internalformat'}|[{'type',8953,'enum',[]}]]]]}|[{'type',8953,'constraint',[{'atom',8953,'is_subtype'}|[[{'var',8953,'Sink'}|[{'type',8953,'union',[{'integer',8953,0}|[{'integer',8953,1}]]}]]]]}]]]]]}]}],
		%% Line 8962
		'spec' =
		    %% Line 8962
		    [{{'resetHistogram',1},[{'type',8962,'bounded_fun',[{'type',8962,'fun',[{'type',8962,'product',[{'var',8962,'Target'}]}|[{'atom',8962,'ok'}]]}|[[{'type',8962,'constraint',[{'atom',8962,'is_subtype'}|[[{'var',8962,'Target'}|[{'type',8962,'enum',[]}]]]]}]]]}]}],
		%% Line 8973
		'spec' =
		    %% Line 8973
		    [{{'resetMinmax',1},[{'type',8973,'bounded_fun',[{'type',8973,'fun',[{'type',8973,'product',[{'var',8973,'Target'}]}|[{'atom',8973,'ok'}]]}|[[{'type',8973,'constraint',[{'atom',8973,'is_subtype'}|[[{'var',8973,'Target'}|[{'type',8973,'enum',[]}]]]]}]]]}]}],
		%% Line 8984
		'spec' =
		    %% Line 8984
		    [{{'activeTexture',1},[{'type',8984,'bounded_fun',[{'type',8984,'fun',[{'type',8984,'product',[{'var',8984,'Texture'}]}|[{'atom',8984,'ok'}]]}|[[{'type',8984,'constraint',[{'atom',8984,'is_subtype'}|[[{'var',8984,'Texture'}|[{'type',8984,'enum',[]}]]]]}]]]}]}],
		%% Line 9010
		'spec' =
		    %% Line 9010
		    [{{'sampleCoverage',2},[{'type',9010,'bounded_fun',[{'type',9010,'fun',[{'type',9010,'product',[{'var',9010,'Value'}|[{'var',9010,'Invert'}]]}|[{'atom',9010,'ok'}]]}|[[{'type',9010,'constraint',[{'atom',9010,'is_subtype'}|[[{'var',9010,'Value'}|[{'type',9010,'clamp',[]}]]]]}|[{'type',9010,'constraint',[{'atom',9010,'is_subtype'}|[[{'var',9010,'Invert'}|[{'type',9010,'union',[{'integer',9010,0}|[{'integer',9010,1}]]}]]]]}]]]]}]}],
		%% Line 9068
		'spec' =
		    %% Line 9068
		    [{{'compressedTexImage3D',9},[{'type',9068,'bounded_fun',[{'type',9068,'fun',[{'type',9068,'product',[{'var',9068,'Target'}|[{'var',9068,'Level'}|[{'var',9068,'Internalformat'}|[{'var',9068,'Width'}|[{'var',9068,'Height'}|[{'var',9068,'Depth'}|[{'var',9068,'Border'}|[{'var',9068,'ImageSize'}|[{'var',9068,'Data'}]]]]]]]]]}|[{'atom',9068,'ok'}]]}|[[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Target'}|[{'type',9068,'enum',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Level'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Internalformat'}|[{'type',9068,'enum',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Width'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Height'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Depth'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Border'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'ImageSize'}|[{'type',9068,'integer',[]}]]]]}|[{'type',9068,'constraint',[{'atom',9068,'is_subtype'}|[[{'var',9068,'Data'}|[{'type',9068,'union',[{'type',9068,'offset',[]}|[{'type',9068,'mem',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 9130
		'spec' =
		    %% Line 9130
		    [{{'compressedTexImage2D',8},[{'type',9130,'bounded_fun',[{'type',9130,'fun',[{'type',9130,'product',[{'var',9130,'Target'}|[{'var',9130,'Level'}|[{'var',9130,'Internalformat'}|[{'var',9130,'Width'}|[{'var',9130,'Height'}|[{'var',9130,'Border'}|[{'var',9130,'ImageSize'}|[{'var',9130,'Data'}]]]]]]]]}|[{'atom',9130,'ok'}]]}|[[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Target'}|[{'type',9130,'enum',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Level'}|[{'type',9130,'integer',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Internalformat'}|[{'type',9130,'enum',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Width'}|[{'type',9130,'integer',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Height'}|[{'type',9130,'integer',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Border'}|[{'type',9130,'integer',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'ImageSize'}|[{'type',9130,'integer',[]}]]]]}|[{'type',9130,'constraint',[{'atom',9130,'is_subtype'}|[[{'var',9130,'Data'}|[{'type',9130,'union',[{'type',9130,'offset',[]}|[{'type',9130,'mem',[]}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 9187
		'spec' =
		    %% Line 9187
		    [{{'compressedTexImage1D',7},[{'type',9187,'bounded_fun',[{'type',9187,'fun',[{'type',9187,'product',[{'var',9187,'Target'}|[{'var',9187,'Level'}|[{'var',9187,'Internalformat'}|[{'var',9187,'Width'}|[{'var',9187,'Border'}|[{'var',9187,'ImageSize'}|[{'var',9187,'Data'}]]]]]]]}|[{'atom',9187,'ok'}]]}|[[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Target'}|[{'type',9187,'enum',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Level'}|[{'type',9187,'integer',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Internalformat'}|[{'type',9187,'enum',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Width'}|[{'type',9187,'integer',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Border'}|[{'type',9187,'integer',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'ImageSize'}|[{'type',9187,'integer',[]}]]]]}|[{'type',9187,'constraint',[{'atom',9187,'is_subtype'}|[[{'var',9187,'Data'}|[{'type',9187,'union',[{'type',9187,'offset',[]}|[{'type',9187,'mem',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 9217
		'spec' =
		    %% Line 9217
		    [{{'compressedTexSubImage3D',11},[{'type',9217,'bounded_fun',[{'type',9217,'fun',[{'type',9217,'product',[{'var',9217,'Target'}|[{'var',9217,'Level'}|[{'var',9217,'Xoffset'}|[{'var',9217,'Yoffset'}|[{'var',9217,'Zoffset'}|[{'var',9217,'Width'}|[{'var',9217,'Height'}|[{'var',9217,'Depth'}|[{'var',9217,'Format'}|[{'var',9217,'ImageSize'}|[{'var',9217,'Data'}]]]]]]]]]]]}|[{'atom',9217,'ok'}]]}|[[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Target'}|[{'type',9217,'enum',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Level'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Xoffset'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Yoffset'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Zoffset'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Width'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Height'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Depth'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Format'}|[{'type',9217,'enum',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'ImageSize'}|[{'type',9217,'integer',[]}]]]]}|[{'type',9217,'constraint',[{'atom',9217,'is_subtype'}|[[{'var',9217,'Data'}|[{'type',9217,'union',[{'type',9217,'offset',[]}|[{'type',9217,'mem',[]}]]}]]]]}]]]]]]]]]]]]]}]}],
		%% Line 9246
		'spec' =
		    %% Line 9246
		    [{{'compressedTexSubImage2D',9},[{'type',9246,'bounded_fun',[{'type',9246,'fun',[{'type',9246,'product',[{'var',9246,'Target'}|[{'var',9246,'Level'}|[{'var',9246,'Xoffset'}|[{'var',9246,'Yoffset'}|[{'var',9246,'Width'}|[{'var',9246,'Height'}|[{'var',9246,'Format'}|[{'var',9246,'ImageSize'}|[{'var',9246,'Data'}]]]]]]]]]}|[{'atom',9246,'ok'}]]}|[[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Target'}|[{'type',9246,'enum',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Level'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Xoffset'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Yoffset'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Width'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Height'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Format'}|[{'type',9246,'enum',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'ImageSize'}|[{'type',9246,'integer',[]}]]]]}|[{'type',9246,'constraint',[{'atom',9246,'is_subtype'}|[[{'var',9246,'Data'}|[{'type',9246,'union',[{'type',9246,'offset',[]}|[{'type',9246,'mem',[]}]]}]]]]}]]]]]]]]]]]}]}],
		%% Line 9275
		'spec' =
		    %% Line 9275
		    [{{'compressedTexSubImage1D',7},[{'type',9275,'bounded_fun',[{'type',9275,'fun',[{'type',9275,'product',[{'var',9275,'Target'}|[{'var',9275,'Level'}|[{'var',9275,'Xoffset'}|[{'var',9275,'Width'}|[{'var',9275,'Format'}|[{'var',9275,'ImageSize'}|[{'var',9275,'Data'}]]]]]]]}|[{'atom',9275,'ok'}]]}|[[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Target'}|[{'type',9275,'enum',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Level'}|[{'type',9275,'integer',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Xoffset'}|[{'type',9275,'integer',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Width'}|[{'type',9275,'integer',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Format'}|[{'type',9275,'enum',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'ImageSize'}|[{'type',9275,'integer',[]}]]]]}|[{'type',9275,'constraint',[{'atom',9275,'is_subtype'}|[[{'var',9275,'Data'}|[{'type',9275,'union',[{'type',9275,'offset',[]}|[{'type',9275,'mem',[]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 9305
		'spec' =
		    %% Line 9305
		    [{{'getCompressedTexImage',3},[{'type',9305,'bounded_fun',[{'type',9305,'fun',[{'type',9305,'product',[{'var',9305,'Target'}|[{'var',9305,'Lod'}|[{'var',9305,'Img'}]]]}|[{'atom',9305,'ok'}]]}|[[{'type',9305,'constraint',[{'atom',9305,'is_subtype'}|[[{'var',9305,'Target'}|[{'type',9305,'enum',[]}]]]]}|[{'type',9305,'constraint',[{'atom',9305,'is_subtype'}|[[{'var',9305,'Lod'}|[{'type',9305,'integer',[]}]]]]}|[{'type',9305,'constraint',[{'atom',9305,'is_subtype'}|[[{'var',9305,'Img'}|[{'type',9305,'mem',[]}]]]]}]]]]]}]}],
		%% Line 9318
		'spec' =
		    %% Line 9318
		    [{{'clientActiveTexture',1},[{'type',9318,'bounded_fun',[{'type',9318,'fun',[{'type',9318,'product',[{'var',9318,'Texture'}]}|[{'atom',9318,'ok'}]]}|[[{'type',9318,'constraint',[{'atom',9318,'is_subtype'}|[[{'var',9318,'Texture'}|[{'type',9318,'enum',[]}]]]]}]]]}]}],
		%% Line 9336
		'spec' =
		    %% Line 9336
		    [{{'multiTexCoord1d',2},[{'type',9336,'bounded_fun',[{'type',9336,'fun',[{'type',9336,'product',[{'var',9336,'Target'}|[{'var',9336,'S'}]]}|[{'atom',9336,'ok'}]]}|[[{'type',9336,'constraint',[{'atom',9336,'is_subtype'}|[[{'var',9336,'Target'}|[{'type',9336,'enum',[]}]]]]}|[{'type',9336,'constraint',[{'atom',9336,'is_subtype'}|[[{'var',9336,'S'}|[{'type',9336,'float',[]}]]]]}]]]]}]}],
		%% Line 9341
		'spec' =
		    %% Line 9341
		    [{{'multiTexCoord1dv',2},[{'type',9341,'bounded_fun',[{'type',9341,'fun',[{'type',9341,'product',[{'ann_type',9341,[{'var',9341,'Target'}|[{'type',9341,'enum',[]}]]}|[{'var',9341,'V'}]]}|[{'atom',9341,'ok'}]]}|[[{'type',9341,'constraint',[{'atom',9341,'is_subtype'}|[[{'var',9341,'V'}|[{'type',9341,'tuple',[{'ann_type',9341,[{'var',9341,'S'}|[{'type',9341,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 9346
		'spec' =
		    %% Line 9346
		    [{{'multiTexCoord1f',2},[{'type',9346,'bounded_fun',[{'type',9346,'fun',[{'type',9346,'product',[{'var',9346,'Target'}|[{'var',9346,'S'}]]}|[{'atom',9346,'ok'}]]}|[[{'type',9346,'constraint',[{'atom',9346,'is_subtype'}|[[{'var',9346,'Target'}|[{'type',9346,'enum',[]}]]]]}|[{'type',9346,'constraint',[{'atom',9346,'is_subtype'}|[[{'var',9346,'S'}|[{'type',9346,'float',[]}]]]]}]]]]}]}],
		%% Line 9351
		'spec' =
		    %% Line 9351
		    [{{'multiTexCoord1fv',2},[{'type',9351,'bounded_fun',[{'type',9351,'fun',[{'type',9351,'product',[{'ann_type',9351,[{'var',9351,'Target'}|[{'type',9351,'enum',[]}]]}|[{'var',9351,'V'}]]}|[{'atom',9351,'ok'}]]}|[[{'type',9351,'constraint',[{'atom',9351,'is_subtype'}|[[{'var',9351,'V'}|[{'type',9351,'tuple',[{'ann_type',9351,[{'var',9351,'S'}|[{'type',9351,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 9356
		'spec' =
		    %% Line 9356
		    [{{'multiTexCoord1i',2},[{'type',9356,'bounded_fun',[{'type',9356,'fun',[{'type',9356,'product',[{'var',9356,'Target'}|[{'var',9356,'S'}]]}|[{'atom',9356,'ok'}]]}|[[{'type',9356,'constraint',[{'atom',9356,'is_subtype'}|[[{'var',9356,'Target'}|[{'type',9356,'enum',[]}]]]]}|[{'type',9356,'constraint',[{'atom',9356,'is_subtype'}|[[{'var',9356,'S'}|[{'type',9356,'integer',[]}]]]]}]]]]}]}],
		%% Line 9361
		'spec' =
		    %% Line 9361
		    [{{'multiTexCoord1iv',2},[{'type',9361,'bounded_fun',[{'type',9361,'fun',[{'type',9361,'product',[{'ann_type',9361,[{'var',9361,'Target'}|[{'type',9361,'enum',[]}]]}|[{'var',9361,'V'}]]}|[{'atom',9361,'ok'}]]}|[[{'type',9361,'constraint',[{'atom',9361,'is_subtype'}|[[{'var',9361,'V'}|[{'type',9361,'tuple',[{'ann_type',9361,[{'var',9361,'S'}|[{'type',9361,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 9366
		'spec' =
		    %% Line 9366
		    [{{'multiTexCoord1s',2},[{'type',9366,'bounded_fun',[{'type',9366,'fun',[{'type',9366,'product',[{'var',9366,'Target'}|[{'var',9366,'S'}]]}|[{'atom',9366,'ok'}]]}|[[{'type',9366,'constraint',[{'atom',9366,'is_subtype'}|[[{'var',9366,'Target'}|[{'type',9366,'enum',[]}]]]]}|[{'type',9366,'constraint',[{'atom',9366,'is_subtype'}|[[{'var',9366,'S'}|[{'type',9366,'integer',[]}]]]]}]]]]}]}],
		%% Line 9371
		'spec' =
		    %% Line 9371
		    [{{'multiTexCoord1sv',2},[{'type',9371,'bounded_fun',[{'type',9371,'fun',[{'type',9371,'product',[{'ann_type',9371,[{'var',9371,'Target'}|[{'type',9371,'enum',[]}]]}|[{'var',9371,'V'}]]}|[{'atom',9371,'ok'}]]}|[[{'type',9371,'constraint',[{'atom',9371,'is_subtype'}|[[{'var',9371,'V'}|[{'type',9371,'tuple',[{'ann_type',9371,[{'var',9371,'S'}|[{'type',9371,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 9376
		'spec' =
		    %% Line 9376
		    [{{'multiTexCoord2d',3},[{'type',9376,'bounded_fun',[{'type',9376,'fun',[{'type',9376,'product',[{'var',9376,'Target'}|[{'var',9376,'S'}|[{'var',9376,'T'}]]]}|[{'atom',9376,'ok'}]]}|[[{'type',9376,'constraint',[{'atom',9376,'is_subtype'}|[[{'var',9376,'Target'}|[{'type',9376,'enum',[]}]]]]}|[{'type',9376,'constraint',[{'atom',9376,'is_subtype'}|[[{'var',9376,'S'}|[{'type',9376,'float',[]}]]]]}|[{'type',9376,'constraint',[{'atom',9376,'is_subtype'}|[[{'var',9376,'T'}|[{'type',9376,'float',[]}]]]]}]]]]]}]}],
		%% Line 9381
		'spec' =
		    %% Line 9381
		    [{{'multiTexCoord2dv',2},[{'type',9381,'bounded_fun',[{'type',9381,'fun',[{'type',9381,'product',[{'ann_type',9381,[{'var',9381,'Target'}|[{'type',9381,'enum',[]}]]}|[{'var',9381,'V'}]]}|[{'atom',9381,'ok'}]]}|[[{'type',9381,'constraint',[{'atom',9381,'is_subtype'}|[[{'var',9381,'V'}|[{'type',9381,'tuple',[{'ann_type',9381,[{'var',9381,'S'}|[{'type',9381,'float',[]}]]}|[{'ann_type',9381,[{'var',9381,'T'}|[{'type',9381,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9386
		'spec' =
		    %% Line 9386
		    [{{'multiTexCoord2f',3},[{'type',9386,'bounded_fun',[{'type',9386,'fun',[{'type',9386,'product',[{'var',9386,'Target'}|[{'var',9386,'S'}|[{'var',9386,'T'}]]]}|[{'atom',9386,'ok'}]]}|[[{'type',9386,'constraint',[{'atom',9386,'is_subtype'}|[[{'var',9386,'Target'}|[{'type',9386,'enum',[]}]]]]}|[{'type',9386,'constraint',[{'atom',9386,'is_subtype'}|[[{'var',9386,'S'}|[{'type',9386,'float',[]}]]]]}|[{'type',9386,'constraint',[{'atom',9386,'is_subtype'}|[[{'var',9386,'T'}|[{'type',9386,'float',[]}]]]]}]]]]]}]}],
		%% Line 9391
		'spec' =
		    %% Line 9391
		    [{{'multiTexCoord2fv',2},[{'type',9391,'bounded_fun',[{'type',9391,'fun',[{'type',9391,'product',[{'ann_type',9391,[{'var',9391,'Target'}|[{'type',9391,'enum',[]}]]}|[{'var',9391,'V'}]]}|[{'atom',9391,'ok'}]]}|[[{'type',9391,'constraint',[{'atom',9391,'is_subtype'}|[[{'var',9391,'V'}|[{'type',9391,'tuple',[{'ann_type',9391,[{'var',9391,'S'}|[{'type',9391,'float',[]}]]}|[{'ann_type',9391,[{'var',9391,'T'}|[{'type',9391,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9396
		'spec' =
		    %% Line 9396
		    [{{'multiTexCoord2i',3},[{'type',9396,'bounded_fun',[{'type',9396,'fun',[{'type',9396,'product',[{'var',9396,'Target'}|[{'var',9396,'S'}|[{'var',9396,'T'}]]]}|[{'atom',9396,'ok'}]]}|[[{'type',9396,'constraint',[{'atom',9396,'is_subtype'}|[[{'var',9396,'Target'}|[{'type',9396,'enum',[]}]]]]}|[{'type',9396,'constraint',[{'atom',9396,'is_subtype'}|[[{'var',9396,'S'}|[{'type',9396,'integer',[]}]]]]}|[{'type',9396,'constraint',[{'atom',9396,'is_subtype'}|[[{'var',9396,'T'}|[{'type',9396,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9401
		'spec' =
		    %% Line 9401
		    [{{'multiTexCoord2iv',2},[{'type',9401,'bounded_fun',[{'type',9401,'fun',[{'type',9401,'product',[{'ann_type',9401,[{'var',9401,'Target'}|[{'type',9401,'enum',[]}]]}|[{'var',9401,'V'}]]}|[{'atom',9401,'ok'}]]}|[[{'type',9401,'constraint',[{'atom',9401,'is_subtype'}|[[{'var',9401,'V'}|[{'type',9401,'tuple',[{'ann_type',9401,[{'var',9401,'S'}|[{'type',9401,'integer',[]}]]}|[{'ann_type',9401,[{'var',9401,'T'}|[{'type',9401,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9406
		'spec' =
		    %% Line 9406
		    [{{'multiTexCoord2s',3},[{'type',9406,'bounded_fun',[{'type',9406,'fun',[{'type',9406,'product',[{'var',9406,'Target'}|[{'var',9406,'S'}|[{'var',9406,'T'}]]]}|[{'atom',9406,'ok'}]]}|[[{'type',9406,'constraint',[{'atom',9406,'is_subtype'}|[[{'var',9406,'Target'}|[{'type',9406,'enum',[]}]]]]}|[{'type',9406,'constraint',[{'atom',9406,'is_subtype'}|[[{'var',9406,'S'}|[{'type',9406,'integer',[]}]]]]}|[{'type',9406,'constraint',[{'atom',9406,'is_subtype'}|[[{'var',9406,'T'}|[{'type',9406,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9411
		'spec' =
		    %% Line 9411
		    [{{'multiTexCoord2sv',2},[{'type',9411,'bounded_fun',[{'type',9411,'fun',[{'type',9411,'product',[{'ann_type',9411,[{'var',9411,'Target'}|[{'type',9411,'enum',[]}]]}|[{'var',9411,'V'}]]}|[{'atom',9411,'ok'}]]}|[[{'type',9411,'constraint',[{'atom',9411,'is_subtype'}|[[{'var',9411,'V'}|[{'type',9411,'tuple',[{'ann_type',9411,[{'var',9411,'S'}|[{'type',9411,'integer',[]}]]}|[{'ann_type',9411,[{'var',9411,'T'}|[{'type',9411,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9416
		'spec' =
		    %% Line 9416
		    [{{'multiTexCoord3d',4},[{'type',9416,'bounded_fun',[{'type',9416,'fun',[{'type',9416,'product',[{'var',9416,'Target'}|[{'var',9416,'S'}|[{'var',9416,'T'}|[{'var',9416,'R'}]]]]}|[{'atom',9416,'ok'}]]}|[[{'type',9416,'constraint',[{'atom',9416,'is_subtype'}|[[{'var',9416,'Target'}|[{'type',9416,'enum',[]}]]]]}|[{'type',9416,'constraint',[{'atom',9416,'is_subtype'}|[[{'var',9416,'S'}|[{'type',9416,'float',[]}]]]]}|[{'type',9416,'constraint',[{'atom',9416,'is_subtype'}|[[{'var',9416,'T'}|[{'type',9416,'float',[]}]]]]}|[{'type',9416,'constraint',[{'atom',9416,'is_subtype'}|[[{'var',9416,'R'}|[{'type',9416,'float',[]}]]]]}]]]]]]}]}],
		%% Line 9421
		'spec' =
		    %% Line 9421
		    [{{'multiTexCoord3dv',2},[{'type',9421,'bounded_fun',[{'type',9421,'fun',[{'type',9421,'product',[{'ann_type',9421,[{'var',9421,'Target'}|[{'type',9421,'enum',[]}]]}|[{'var',9421,'V'}]]}|[{'atom',9421,'ok'}]]}|[[{'type',9421,'constraint',[{'atom',9421,'is_subtype'}|[[{'var',9421,'V'}|[{'type',9421,'tuple',[{'ann_type',9421,[{'var',9421,'S'}|[{'type',9421,'float',[]}]]}|[{'ann_type',9421,[{'var',9421,'T'}|[{'type',9421,'float',[]}]]}|[{'ann_type',9421,[{'var',9421,'R'}|[{'type',9421,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9426
		'spec' =
		    %% Line 9426
		    [{{'multiTexCoord3f',4},[{'type',9426,'bounded_fun',[{'type',9426,'fun',[{'type',9426,'product',[{'var',9426,'Target'}|[{'var',9426,'S'}|[{'var',9426,'T'}|[{'var',9426,'R'}]]]]}|[{'atom',9426,'ok'}]]}|[[{'type',9426,'constraint',[{'atom',9426,'is_subtype'}|[[{'var',9426,'Target'}|[{'type',9426,'enum',[]}]]]]}|[{'type',9426,'constraint',[{'atom',9426,'is_subtype'}|[[{'var',9426,'S'}|[{'type',9426,'float',[]}]]]]}|[{'type',9426,'constraint',[{'atom',9426,'is_subtype'}|[[{'var',9426,'T'}|[{'type',9426,'float',[]}]]]]}|[{'type',9426,'constraint',[{'atom',9426,'is_subtype'}|[[{'var',9426,'R'}|[{'type',9426,'float',[]}]]]]}]]]]]]}]}],
		%% Line 9431
		'spec' =
		    %% Line 9431
		    [{{'multiTexCoord3fv',2},[{'type',9431,'bounded_fun',[{'type',9431,'fun',[{'type',9431,'product',[{'ann_type',9431,[{'var',9431,'Target'}|[{'type',9431,'enum',[]}]]}|[{'var',9431,'V'}]]}|[{'atom',9431,'ok'}]]}|[[{'type',9431,'constraint',[{'atom',9431,'is_subtype'}|[[{'var',9431,'V'}|[{'type',9431,'tuple',[{'ann_type',9431,[{'var',9431,'S'}|[{'type',9431,'float',[]}]]}|[{'ann_type',9431,[{'var',9431,'T'}|[{'type',9431,'float',[]}]]}|[{'ann_type',9431,[{'var',9431,'R'}|[{'type',9431,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9436
		'spec' =
		    %% Line 9436
		    [{{'multiTexCoord3i',4},[{'type',9436,'bounded_fun',[{'type',9436,'fun',[{'type',9436,'product',[{'var',9436,'Target'}|[{'var',9436,'S'}|[{'var',9436,'T'}|[{'var',9436,'R'}]]]]}|[{'atom',9436,'ok'}]]}|[[{'type',9436,'constraint',[{'atom',9436,'is_subtype'}|[[{'var',9436,'Target'}|[{'type',9436,'enum',[]}]]]]}|[{'type',9436,'constraint',[{'atom',9436,'is_subtype'}|[[{'var',9436,'S'}|[{'type',9436,'integer',[]}]]]]}|[{'type',9436,'constraint',[{'atom',9436,'is_subtype'}|[[{'var',9436,'T'}|[{'type',9436,'integer',[]}]]]]}|[{'type',9436,'constraint',[{'atom',9436,'is_subtype'}|[[{'var',9436,'R'}|[{'type',9436,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 9441
		'spec' =
		    %% Line 9441
		    [{{'multiTexCoord3iv',2},[{'type',9441,'bounded_fun',[{'type',9441,'fun',[{'type',9441,'product',[{'ann_type',9441,[{'var',9441,'Target'}|[{'type',9441,'enum',[]}]]}|[{'var',9441,'V'}]]}|[{'atom',9441,'ok'}]]}|[[{'type',9441,'constraint',[{'atom',9441,'is_subtype'}|[[{'var',9441,'V'}|[{'type',9441,'tuple',[{'ann_type',9441,[{'var',9441,'S'}|[{'type',9441,'integer',[]}]]}|[{'ann_type',9441,[{'var',9441,'T'}|[{'type',9441,'integer',[]}]]}|[{'ann_type',9441,[{'var',9441,'R'}|[{'type',9441,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9446
		'spec' =
		    %% Line 9446
		    [{{'multiTexCoord3s',4},[{'type',9446,'bounded_fun',[{'type',9446,'fun',[{'type',9446,'product',[{'var',9446,'Target'}|[{'var',9446,'S'}|[{'var',9446,'T'}|[{'var',9446,'R'}]]]]}|[{'atom',9446,'ok'}]]}|[[{'type',9446,'constraint',[{'atom',9446,'is_subtype'}|[[{'var',9446,'Target'}|[{'type',9446,'enum',[]}]]]]}|[{'type',9446,'constraint',[{'atom',9446,'is_subtype'}|[[{'var',9446,'S'}|[{'type',9446,'integer',[]}]]]]}|[{'type',9446,'constraint',[{'atom',9446,'is_subtype'}|[[{'var',9446,'T'}|[{'type',9446,'integer',[]}]]]]}|[{'type',9446,'constraint',[{'atom',9446,'is_subtype'}|[[{'var',9446,'R'}|[{'type',9446,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 9451
		'spec' =
		    %% Line 9451
		    [{{'multiTexCoord3sv',2},[{'type',9451,'bounded_fun',[{'type',9451,'fun',[{'type',9451,'product',[{'ann_type',9451,[{'var',9451,'Target'}|[{'type',9451,'enum',[]}]]}|[{'var',9451,'V'}]]}|[{'atom',9451,'ok'}]]}|[[{'type',9451,'constraint',[{'atom',9451,'is_subtype'}|[[{'var',9451,'V'}|[{'type',9451,'tuple',[{'ann_type',9451,[{'var',9451,'S'}|[{'type',9451,'integer',[]}]]}|[{'ann_type',9451,[{'var',9451,'T'}|[{'type',9451,'integer',[]}]]}|[{'ann_type',9451,[{'var',9451,'R'}|[{'type',9451,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9456
		'spec' =
		    %% Line 9456
		    [{{'multiTexCoord4d',5},[{'type',9456,'bounded_fun',[{'type',9456,'fun',[{'type',9456,'product',[{'var',9456,'Target'}|[{'var',9456,'S'}|[{'var',9456,'T'}|[{'var',9456,'R'}|[{'var',9456,'Q'}]]]]]}|[{'atom',9456,'ok'}]]}|[[{'type',9456,'constraint',[{'atom',9456,'is_subtype'}|[[{'var',9456,'Target'}|[{'type',9456,'enum',[]}]]]]}|[{'type',9456,'constraint',[{'atom',9456,'is_subtype'}|[[{'var',9456,'S'}|[{'type',9456,'float',[]}]]]]}|[{'type',9456,'constraint',[{'atom',9456,'is_subtype'}|[[{'var',9456,'T'}|[{'type',9456,'float',[]}]]]]}|[{'type',9456,'constraint',[{'atom',9456,'is_subtype'}|[[{'var',9456,'R'}|[{'type',9456,'float',[]}]]]]}|[{'type',9456,'constraint',[{'atom',9456,'is_subtype'}|[[{'var',9456,'Q'}|[{'type',9456,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 9461
		'spec' =
		    %% Line 9461
		    [{{'multiTexCoord4dv',2},[{'type',9461,'bounded_fun',[{'type',9461,'fun',[{'type',9461,'product',[{'ann_type',9461,[{'var',9461,'Target'}|[{'type',9461,'enum',[]}]]}|[{'var',9461,'V'}]]}|[{'atom',9461,'ok'}]]}|[[{'type',9461,'constraint',[{'atom',9461,'is_subtype'}|[[{'var',9461,'V'}|[{'type',9461,'tuple',[{'ann_type',9461,[{'var',9461,'S'}|[{'type',9461,'float',[]}]]}|[{'ann_type',9461,[{'var',9461,'T'}|[{'type',9461,'float',[]}]]}|[{'ann_type',9461,[{'var',9461,'R'}|[{'type',9461,'float',[]}]]}|[{'ann_type',9461,[{'var',9461,'Q'}|[{'type',9461,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 9466
		'spec' =
		    %% Line 9466
		    [{{'multiTexCoord4f',5},[{'type',9466,'bounded_fun',[{'type',9466,'fun',[{'type',9466,'product',[{'var',9466,'Target'}|[{'var',9466,'S'}|[{'var',9466,'T'}|[{'var',9466,'R'}|[{'var',9466,'Q'}]]]]]}|[{'atom',9466,'ok'}]]}|[[{'type',9466,'constraint',[{'atom',9466,'is_subtype'}|[[{'var',9466,'Target'}|[{'type',9466,'enum',[]}]]]]}|[{'type',9466,'constraint',[{'atom',9466,'is_subtype'}|[[{'var',9466,'S'}|[{'type',9466,'float',[]}]]]]}|[{'type',9466,'constraint',[{'atom',9466,'is_subtype'}|[[{'var',9466,'T'}|[{'type',9466,'float',[]}]]]]}|[{'type',9466,'constraint',[{'atom',9466,'is_subtype'}|[[{'var',9466,'R'}|[{'type',9466,'float',[]}]]]]}|[{'type',9466,'constraint',[{'atom',9466,'is_subtype'}|[[{'var',9466,'Q'}|[{'type',9466,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 9471
		'spec' =
		    %% Line 9471
		    [{{'multiTexCoord4fv',2},[{'type',9471,'bounded_fun',[{'type',9471,'fun',[{'type',9471,'product',[{'ann_type',9471,[{'var',9471,'Target'}|[{'type',9471,'enum',[]}]]}|[{'var',9471,'V'}]]}|[{'atom',9471,'ok'}]]}|[[{'type',9471,'constraint',[{'atom',9471,'is_subtype'}|[[{'var',9471,'V'}|[{'type',9471,'tuple',[{'ann_type',9471,[{'var',9471,'S'}|[{'type',9471,'float',[]}]]}|[{'ann_type',9471,[{'var',9471,'T'}|[{'type',9471,'float',[]}]]}|[{'ann_type',9471,[{'var',9471,'R'}|[{'type',9471,'float',[]}]]}|[{'ann_type',9471,[{'var',9471,'Q'}|[{'type',9471,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 9476
		'spec' =
		    %% Line 9476
		    [{{'multiTexCoord4i',5},[{'type',9476,'bounded_fun',[{'type',9476,'fun',[{'type',9476,'product',[{'var',9476,'Target'}|[{'var',9476,'S'}|[{'var',9476,'T'}|[{'var',9476,'R'}|[{'var',9476,'Q'}]]]]]}|[{'atom',9476,'ok'}]]}|[[{'type',9476,'constraint',[{'atom',9476,'is_subtype'}|[[{'var',9476,'Target'}|[{'type',9476,'enum',[]}]]]]}|[{'type',9476,'constraint',[{'atom',9476,'is_subtype'}|[[{'var',9476,'S'}|[{'type',9476,'integer',[]}]]]]}|[{'type',9476,'constraint',[{'atom',9476,'is_subtype'}|[[{'var',9476,'T'}|[{'type',9476,'integer',[]}]]]]}|[{'type',9476,'constraint',[{'atom',9476,'is_subtype'}|[[{'var',9476,'R'}|[{'type',9476,'integer',[]}]]]]}|[{'type',9476,'constraint',[{'atom',9476,'is_subtype'}|[[{'var',9476,'Q'}|[{'type',9476,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 9481
		'spec' =
		    %% Line 9481
		    [{{'multiTexCoord4iv',2},[{'type',9481,'bounded_fun',[{'type',9481,'fun',[{'type',9481,'product',[{'ann_type',9481,[{'var',9481,'Target'}|[{'type',9481,'enum',[]}]]}|[{'var',9481,'V'}]]}|[{'atom',9481,'ok'}]]}|[[{'type',9481,'constraint',[{'atom',9481,'is_subtype'}|[[{'var',9481,'V'}|[{'type',9481,'tuple',[{'ann_type',9481,[{'var',9481,'S'}|[{'type',9481,'integer',[]}]]}|[{'ann_type',9481,[{'var',9481,'T'}|[{'type',9481,'integer',[]}]]}|[{'ann_type',9481,[{'var',9481,'R'}|[{'type',9481,'integer',[]}]]}|[{'ann_type',9481,[{'var',9481,'Q'}|[{'type',9481,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 9486
		'spec' =
		    %% Line 9486
		    [{{'multiTexCoord4s',5},[{'type',9486,'bounded_fun',[{'type',9486,'fun',[{'type',9486,'product',[{'var',9486,'Target'}|[{'var',9486,'S'}|[{'var',9486,'T'}|[{'var',9486,'R'}|[{'var',9486,'Q'}]]]]]}|[{'atom',9486,'ok'}]]}|[[{'type',9486,'constraint',[{'atom',9486,'is_subtype'}|[[{'var',9486,'Target'}|[{'type',9486,'enum',[]}]]]]}|[{'type',9486,'constraint',[{'atom',9486,'is_subtype'}|[[{'var',9486,'S'}|[{'type',9486,'integer',[]}]]]]}|[{'type',9486,'constraint',[{'atom',9486,'is_subtype'}|[[{'var',9486,'T'}|[{'type',9486,'integer',[]}]]]]}|[{'type',9486,'constraint',[{'atom',9486,'is_subtype'}|[[{'var',9486,'R'}|[{'type',9486,'integer',[]}]]]]}|[{'type',9486,'constraint',[{'atom',9486,'is_subtype'}|[[{'var',9486,'Q'}|[{'type',9486,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 9491
		'spec' =
		    %% Line 9491
		    [{{'multiTexCoord4sv',2},[{'type',9491,'bounded_fun',[{'type',9491,'fun',[{'type',9491,'product',[{'ann_type',9491,[{'var',9491,'Target'}|[{'type',9491,'enum',[]}]]}|[{'var',9491,'V'}]]}|[{'atom',9491,'ok'}]]}|[[{'type',9491,'constraint',[{'atom',9491,'is_subtype'}|[[{'var',9491,'V'}|[{'type',9491,'tuple',[{'ann_type',9491,[{'var',9491,'S'}|[{'type',9491,'integer',[]}]]}|[{'ann_type',9491,[{'var',9491,'T'}|[{'type',9491,'integer',[]}]]}|[{'ann_type',9491,[{'var',9491,'R'}|[{'type',9491,'integer',[]}]]}|[{'ann_type',9491,[{'var',9491,'Q'}|[{'type',9491,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 9513
		'spec' =
		    %% Line 9513
		    [{{'loadTransposeMatrixf',1},[{'type',9513,'bounded_fun',[{'type',9513,'fun',[{'type',9513,'product',[{'var',9513,'M'}]}|[{'atom',9513,'ok'}]]}|[[{'type',9513,'constraint',[{'atom',9513,'is_subtype'}|[[{'var',9513,'M'}|[{'type',9513,'matrix',[]}]]]]}]]]}]}],
		%% Line 9521
		'spec' =
		    %% Line 9521
		    [{{'loadTransposeMatrixd',1},[{'type',9521,'bounded_fun',[{'type',9521,'fun',[{'type',9521,'product',[{'var',9521,'M'}]}|[{'atom',9521,'ok'}]]}|[[{'type',9521,'constraint',[{'atom',9521,'is_subtype'}|[[{'var',9521,'M'}|[{'type',9521,'matrix',[]}]]]]}]]]}]}],
		%% Line 9536
		'spec' =
		    %% Line 9536
		    [{{'multTransposeMatrixf',1},[{'type',9536,'bounded_fun',[{'type',9536,'fun',[{'type',9536,'product',[{'var',9536,'M'}]}|[{'atom',9536,'ok'}]]}|[[{'type',9536,'constraint',[{'atom',9536,'is_subtype'}|[[{'var',9536,'M'}|[{'type',9536,'matrix',[]}]]]]}]]]}]}],
		%% Line 9544
		'spec' =
		    %% Line 9544
		    [{{'multTransposeMatrixd',1},[{'type',9544,'bounded_fun',[{'type',9544,'fun',[{'type',9544,'product',[{'var',9544,'M'}]}|[{'atom',9544,'ok'}]]}|[[{'type',9544,'constraint',[{'atom',9544,'is_subtype'}|[[{'var',9544,'M'}|[{'type',9544,'matrix',[]}]]]]}]]]}]}],
		%% Line 9623
		'spec' =
		    %% Line 9623
		    [{{'blendFuncSeparate',4},[{'type',9623,'bounded_fun',[{'type',9623,'fun',[{'type',9623,'product',[{'var',9623,'SfactorRGB'}|[{'var',9623,'DfactorRGB'}|[{'var',9623,'SfactorAlpha'}|[{'var',9623,'DfactorAlpha'}]]]]}|[{'atom',9623,'ok'}]]}|[[{'type',9623,'constraint',[{'atom',9623,'is_subtype'}|[[{'var',9623,'SfactorRGB'}|[{'type',9623,'enum',[]}]]]]}|[{'type',9623,'constraint',[{'atom',9623,'is_subtype'}|[[{'var',9623,'DfactorRGB'}|[{'type',9623,'enum',[]}]]]]}|[{'type',9623,'constraint',[{'atom',9623,'is_subtype'}|[[{'var',9623,'SfactorAlpha'}|[{'type',9623,'enum',[]}]]]]}|[{'type',9623,'constraint',[{'atom',9623,'is_subtype'}|[[{'var',9623,'DfactorAlpha'}|[{'type',9623,'enum',[]}]]]]}]]]]]]}]}],
		%% Line 9648
		'spec' =
		    %% Line 9648
		    [{{'multiDrawArrays',3},[{'type',9648,'bounded_fun',[{'type',9648,'fun',[{'type',9648,'product',[{'var',9648,'Mode'}|[{'var',9648,'First'}|[{'var',9648,'Count'}]]]}|[{'atom',9648,'ok'}]]}|[[{'type',9648,'constraint',[{'atom',9648,'is_subtype'}|[[{'var',9648,'Mode'}|[{'type',9648,'enum',[]}]]]]}|[{'type',9648,'constraint',[{'atom',9648,'is_subtype'}|[[{'var',9648,'First'}|[{'type',9648,'list',[{'type',9648,'integer',[]}]}]]]]}|[{'type',9648,'constraint',[{'atom',9648,'is_subtype'}|[[{'var',9648,'Count'}|[{'type',9648,'list',[{'type',9648,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 9667
		'spec' =
		    %% Line 9667
		    [{{'pointParameterf',2},[{'type',9667,'bounded_fun',[{'type',9667,'fun',[{'type',9667,'product',[{'var',9667,'Pname'}|[{'var',9667,'Param'}]]}|[{'atom',9667,'ok'}]]}|[[{'type',9667,'constraint',[{'atom',9667,'is_subtype'}|[[{'var',9667,'Pname'}|[{'type',9667,'enum',[]}]]]]}|[{'type',9667,'constraint',[{'atom',9667,'is_subtype'}|[[{'var',9667,'Param'}|[{'type',9667,'float',[]}]]]]}]]]]}]}],
		%% Line 9673
		'spec' =
		    %% Line 9673
		    [{{'pointParameterfv',2},[{'type',9673,'bounded_fun',[{'type',9673,'fun',[{'type',9673,'product',[{'var',9673,'Pname'}|[{'var',9673,'Params'}]]}|[{'atom',9673,'ok'}]]}|[[{'type',9673,'constraint',[{'atom',9673,'is_subtype'}|[[{'var',9673,'Pname'}|[{'type',9673,'enum',[]}]]]]}|[{'type',9673,'constraint',[{'atom',9673,'is_subtype'}|[[{'var',9673,'Params'}|[{'type',9673,'tuple',[{'type',9673,'float',[]}]}]]]]}]]]]}]}],
		%% Line 9680
		'spec' =
		    %% Line 9680
		    [{{'pointParameteri',2},[{'type',9680,'bounded_fun',[{'type',9680,'fun',[{'type',9680,'product',[{'var',9680,'Pname'}|[{'var',9680,'Param'}]]}|[{'atom',9680,'ok'}]]}|[[{'type',9680,'constraint',[{'atom',9680,'is_subtype'}|[[{'var',9680,'Pname'}|[{'type',9680,'enum',[]}]]]]}|[{'type',9680,'constraint',[{'atom',9680,'is_subtype'}|[[{'var',9680,'Param'}|[{'type',9680,'integer',[]}]]]]}]]]]}]}],
		%% Line 9686
		'spec' =
		    %% Line 9686
		    [{{'pointParameteriv',2},[{'type',9686,'bounded_fun',[{'type',9686,'fun',[{'type',9686,'product',[{'var',9686,'Pname'}|[{'var',9686,'Params'}]]}|[{'atom',9686,'ok'}]]}|[[{'type',9686,'constraint',[{'atom',9686,'is_subtype'}|[[{'var',9686,'Pname'}|[{'type',9686,'enum',[]}]]]]}|[{'type',9686,'constraint',[{'atom',9686,'is_subtype'}|[[{'var',9686,'Params'}|[{'type',9686,'tuple',[{'type',9686,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 9698
		'spec' =
		    %% Line 9698
		    [{{'fogCoordf',1},[{'type',9698,'bounded_fun',[{'type',9698,'fun',[{'type',9698,'product',[{'var',9698,'Coord'}]}|[{'atom',9698,'ok'}]]}|[[{'type',9698,'constraint',[{'atom',9698,'is_subtype'}|[[{'var',9698,'Coord'}|[{'type',9698,'float',[]}]]]]}]]]}]}],
		%% Line 9703
		'spec' =
		    %% Line 9703
		    [{{'fogCoordfv',1},[{'type',9703,'bounded_fun',[{'type',9703,'fun',[{'type',9703,'product',[{'var',9703,'Coord'}]}|[{'atom',9703,'ok'}]]}|[[{'type',9703,'constraint',[{'atom',9703,'is_subtype'}|[[{'var',9703,'Coord'}|[{'type',9703,'tuple',[{'ann_type',9703,[{'var',9703,'Coord'}|[{'type',9703,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 9708
		'spec' =
		    %% Line 9708
		    [{{'fogCoordd',1},[{'type',9708,'bounded_fun',[{'type',9708,'fun',[{'type',9708,'product',[{'var',9708,'Coord'}]}|[{'atom',9708,'ok'}]]}|[[{'type',9708,'constraint',[{'atom',9708,'is_subtype'}|[[{'var',9708,'Coord'}|[{'type',9708,'float',[]}]]]]}]]]}]}],
		%% Line 9713
		'spec' =
		    %% Line 9713
		    [{{'fogCoorddv',1},[{'type',9713,'bounded_fun',[{'type',9713,'fun',[{'type',9713,'product',[{'var',9713,'Coord'}]}|[{'atom',9713,'ok'}]]}|[[{'type',9713,'constraint',[{'atom',9713,'is_subtype'}|[[{'var',9713,'Coord'}|[{'type',9713,'tuple',[{'ann_type',9713,[{'var',9713,'Coord'}|[{'type',9713,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 9739
		'spec' =
		    %% Line 9739
		    [{{'fogCoordPointer',3},[{'type',9739,'bounded_fun',[{'type',9739,'fun',[{'type',9739,'product',[{'var',9739,'Type'}|[{'var',9739,'Stride'}|[{'var',9739,'Pointer'}]]]}|[{'atom',9739,'ok'}]]}|[[{'type',9739,'constraint',[{'atom',9739,'is_subtype'}|[[{'var',9739,'Type'}|[{'type',9739,'enum',[]}]]]]}|[{'type',9739,'constraint',[{'atom',9739,'is_subtype'}|[[{'var',9739,'Stride'}|[{'type',9739,'integer',[]}]]]]}|[{'type',9739,'constraint',[{'atom',9739,'is_subtype'}|[[{'var',9739,'Pointer'}|[{'type',9739,'union',[{'type',9739,'offset',[]}|[{'type',9739,'mem',[]}]]}]]]]}]]]]]}]}],
		%% Line 9776
		'spec' =
		    %% Line 9776
		    [{{'secondaryColor3b',3},[{'type',9776,'bounded_fun',[{'type',9776,'fun',[{'type',9776,'product',[{'var',9776,'Red'}|[{'var',9776,'Green'}|[{'var',9776,'Blue'}]]]}|[{'atom',9776,'ok'}]]}|[[{'type',9776,'constraint',[{'atom',9776,'is_subtype'}|[[{'var',9776,'Red'}|[{'type',9776,'integer',[]}]]]]}|[{'type',9776,'constraint',[{'atom',9776,'is_subtype'}|[[{'var',9776,'Green'}|[{'type',9776,'integer',[]}]]]]}|[{'type',9776,'constraint',[{'atom',9776,'is_subtype'}|[[{'var',9776,'Blue'}|[{'type',9776,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9781
		'spec' =
		    %% Line 9781
		    [{{'secondaryColor3bv',1},[{'type',9781,'bounded_fun',[{'type',9781,'fun',[{'type',9781,'product',[{'var',9781,'V'}]}|[{'atom',9781,'ok'}]]}|[[{'type',9781,'constraint',[{'atom',9781,'is_subtype'}|[[{'var',9781,'V'}|[{'type',9781,'tuple',[{'ann_type',9781,[{'var',9781,'Red'}|[{'type',9781,'integer',[]}]]}|[{'ann_type',9781,[{'var',9781,'Green'}|[{'type',9781,'integer',[]}]]}|[{'ann_type',9781,[{'var',9781,'Blue'}|[{'type',9781,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9786
		'spec' =
		    %% Line 9786
		    [{{'secondaryColor3d',3},[{'type',9786,'bounded_fun',[{'type',9786,'fun',[{'type',9786,'product',[{'var',9786,'Red'}|[{'var',9786,'Green'}|[{'var',9786,'Blue'}]]]}|[{'atom',9786,'ok'}]]}|[[{'type',9786,'constraint',[{'atom',9786,'is_subtype'}|[[{'var',9786,'Red'}|[{'type',9786,'float',[]}]]]]}|[{'type',9786,'constraint',[{'atom',9786,'is_subtype'}|[[{'var',9786,'Green'}|[{'type',9786,'float',[]}]]]]}|[{'type',9786,'constraint',[{'atom',9786,'is_subtype'}|[[{'var',9786,'Blue'}|[{'type',9786,'float',[]}]]]]}]]]]]}]}],
		%% Line 9791
		'spec' =
		    %% Line 9791
		    [{{'secondaryColor3dv',1},[{'type',9791,'bounded_fun',[{'type',9791,'fun',[{'type',9791,'product',[{'var',9791,'V'}]}|[{'atom',9791,'ok'}]]}|[[{'type',9791,'constraint',[{'atom',9791,'is_subtype'}|[[{'var',9791,'V'}|[{'type',9791,'tuple',[{'ann_type',9791,[{'var',9791,'Red'}|[{'type',9791,'float',[]}]]}|[{'ann_type',9791,[{'var',9791,'Green'}|[{'type',9791,'float',[]}]]}|[{'ann_type',9791,[{'var',9791,'Blue'}|[{'type',9791,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9796
		'spec' =
		    %% Line 9796
		    [{{'secondaryColor3f',3},[{'type',9796,'bounded_fun',[{'type',9796,'fun',[{'type',9796,'product',[{'var',9796,'Red'}|[{'var',9796,'Green'}|[{'var',9796,'Blue'}]]]}|[{'atom',9796,'ok'}]]}|[[{'type',9796,'constraint',[{'atom',9796,'is_subtype'}|[[{'var',9796,'Red'}|[{'type',9796,'float',[]}]]]]}|[{'type',9796,'constraint',[{'atom',9796,'is_subtype'}|[[{'var',9796,'Green'}|[{'type',9796,'float',[]}]]]]}|[{'type',9796,'constraint',[{'atom',9796,'is_subtype'}|[[{'var',9796,'Blue'}|[{'type',9796,'float',[]}]]]]}]]]]]}]}],
		%% Line 9801
		'spec' =
		    %% Line 9801
		    [{{'secondaryColor3fv',1},[{'type',9801,'bounded_fun',[{'type',9801,'fun',[{'type',9801,'product',[{'var',9801,'V'}]}|[{'atom',9801,'ok'}]]}|[[{'type',9801,'constraint',[{'atom',9801,'is_subtype'}|[[{'var',9801,'V'}|[{'type',9801,'tuple',[{'ann_type',9801,[{'var',9801,'Red'}|[{'type',9801,'float',[]}]]}|[{'ann_type',9801,[{'var',9801,'Green'}|[{'type',9801,'float',[]}]]}|[{'ann_type',9801,[{'var',9801,'Blue'}|[{'type',9801,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9806
		'spec' =
		    %% Line 9806
		    [{{'secondaryColor3i',3},[{'type',9806,'bounded_fun',[{'type',9806,'fun',[{'type',9806,'product',[{'var',9806,'Red'}|[{'var',9806,'Green'}|[{'var',9806,'Blue'}]]]}|[{'atom',9806,'ok'}]]}|[[{'type',9806,'constraint',[{'atom',9806,'is_subtype'}|[[{'var',9806,'Red'}|[{'type',9806,'integer',[]}]]]]}|[{'type',9806,'constraint',[{'atom',9806,'is_subtype'}|[[{'var',9806,'Green'}|[{'type',9806,'integer',[]}]]]]}|[{'type',9806,'constraint',[{'atom',9806,'is_subtype'}|[[{'var',9806,'Blue'}|[{'type',9806,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9811
		'spec' =
		    %% Line 9811
		    [{{'secondaryColor3iv',1},[{'type',9811,'bounded_fun',[{'type',9811,'fun',[{'type',9811,'product',[{'var',9811,'V'}]}|[{'atom',9811,'ok'}]]}|[[{'type',9811,'constraint',[{'atom',9811,'is_subtype'}|[[{'var',9811,'V'}|[{'type',9811,'tuple',[{'ann_type',9811,[{'var',9811,'Red'}|[{'type',9811,'integer',[]}]]}|[{'ann_type',9811,[{'var',9811,'Green'}|[{'type',9811,'integer',[]}]]}|[{'ann_type',9811,[{'var',9811,'Blue'}|[{'type',9811,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9816
		'spec' =
		    %% Line 9816
		    [{{'secondaryColor3s',3},[{'type',9816,'bounded_fun',[{'type',9816,'fun',[{'type',9816,'product',[{'var',9816,'Red'}|[{'var',9816,'Green'}|[{'var',9816,'Blue'}]]]}|[{'atom',9816,'ok'}]]}|[[{'type',9816,'constraint',[{'atom',9816,'is_subtype'}|[[{'var',9816,'Red'}|[{'type',9816,'integer',[]}]]]]}|[{'type',9816,'constraint',[{'atom',9816,'is_subtype'}|[[{'var',9816,'Green'}|[{'type',9816,'integer',[]}]]]]}|[{'type',9816,'constraint',[{'atom',9816,'is_subtype'}|[[{'var',9816,'Blue'}|[{'type',9816,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9821
		'spec' =
		    %% Line 9821
		    [{{'secondaryColor3sv',1},[{'type',9821,'bounded_fun',[{'type',9821,'fun',[{'type',9821,'product',[{'var',9821,'V'}]}|[{'atom',9821,'ok'}]]}|[[{'type',9821,'constraint',[{'atom',9821,'is_subtype'}|[[{'var',9821,'V'}|[{'type',9821,'tuple',[{'ann_type',9821,[{'var',9821,'Red'}|[{'type',9821,'integer',[]}]]}|[{'ann_type',9821,[{'var',9821,'Green'}|[{'type',9821,'integer',[]}]]}|[{'ann_type',9821,[{'var',9821,'Blue'}|[{'type',9821,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9826
		'spec' =
		    %% Line 9826
		    [{{'secondaryColor3ub',3},[{'type',9826,'bounded_fun',[{'type',9826,'fun',[{'type',9826,'product',[{'var',9826,'Red'}|[{'var',9826,'Green'}|[{'var',9826,'Blue'}]]]}|[{'atom',9826,'ok'}]]}|[[{'type',9826,'constraint',[{'atom',9826,'is_subtype'}|[[{'var',9826,'Red'}|[{'type',9826,'integer',[]}]]]]}|[{'type',9826,'constraint',[{'atom',9826,'is_subtype'}|[[{'var',9826,'Green'}|[{'type',9826,'integer',[]}]]]]}|[{'type',9826,'constraint',[{'atom',9826,'is_subtype'}|[[{'var',9826,'Blue'}|[{'type',9826,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9831
		'spec' =
		    %% Line 9831
		    [{{'secondaryColor3ubv',1},[{'type',9831,'bounded_fun',[{'type',9831,'fun',[{'type',9831,'product',[{'var',9831,'V'}]}|[{'atom',9831,'ok'}]]}|[[{'type',9831,'constraint',[{'atom',9831,'is_subtype'}|[[{'var',9831,'V'}|[{'type',9831,'tuple',[{'ann_type',9831,[{'var',9831,'Red'}|[{'type',9831,'integer',[]}]]}|[{'ann_type',9831,[{'var',9831,'Green'}|[{'type',9831,'integer',[]}]]}|[{'ann_type',9831,[{'var',9831,'Blue'}|[{'type',9831,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9836
		'spec' =
		    %% Line 9836
		    [{{'secondaryColor3ui',3},[{'type',9836,'bounded_fun',[{'type',9836,'fun',[{'type',9836,'product',[{'var',9836,'Red'}|[{'var',9836,'Green'}|[{'var',9836,'Blue'}]]]}|[{'atom',9836,'ok'}]]}|[[{'type',9836,'constraint',[{'atom',9836,'is_subtype'}|[[{'var',9836,'Red'}|[{'type',9836,'integer',[]}]]]]}|[{'type',9836,'constraint',[{'atom',9836,'is_subtype'}|[[{'var',9836,'Green'}|[{'type',9836,'integer',[]}]]]]}|[{'type',9836,'constraint',[{'atom',9836,'is_subtype'}|[[{'var',9836,'Blue'}|[{'type',9836,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9841
		'spec' =
		    %% Line 9841
		    [{{'secondaryColor3uiv',1},[{'type',9841,'bounded_fun',[{'type',9841,'fun',[{'type',9841,'product',[{'var',9841,'V'}]}|[{'atom',9841,'ok'}]]}|[[{'type',9841,'constraint',[{'atom',9841,'is_subtype'}|[[{'var',9841,'V'}|[{'type',9841,'tuple',[{'ann_type',9841,[{'var',9841,'Red'}|[{'type',9841,'integer',[]}]]}|[{'ann_type',9841,[{'var',9841,'Green'}|[{'type',9841,'integer',[]}]]}|[{'ann_type',9841,[{'var',9841,'Blue'}|[{'type',9841,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9846
		'spec' =
		    %% Line 9846
		    [{{'secondaryColor3us',3},[{'type',9846,'bounded_fun',[{'type',9846,'fun',[{'type',9846,'product',[{'var',9846,'Red'}|[{'var',9846,'Green'}|[{'var',9846,'Blue'}]]]}|[{'atom',9846,'ok'}]]}|[[{'type',9846,'constraint',[{'atom',9846,'is_subtype'}|[[{'var',9846,'Red'}|[{'type',9846,'integer',[]}]]]]}|[{'type',9846,'constraint',[{'atom',9846,'is_subtype'}|[[{'var',9846,'Green'}|[{'type',9846,'integer',[]}]]]]}|[{'type',9846,'constraint',[{'atom',9846,'is_subtype'}|[[{'var',9846,'Blue'}|[{'type',9846,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9851
		'spec' =
		    %% Line 9851
		    [{{'secondaryColor3usv',1},[{'type',9851,'bounded_fun',[{'type',9851,'fun',[{'type',9851,'product',[{'var',9851,'V'}]}|[{'atom',9851,'ok'}]]}|[[{'type',9851,'constraint',[{'atom',9851,'is_subtype'}|[[{'var',9851,'V'}|[{'type',9851,'tuple',[{'ann_type',9851,[{'var',9851,'Red'}|[{'type',9851,'integer',[]}]]}|[{'ann_type',9851,[{'var',9851,'Green'}|[{'type',9851,'integer',[]}]]}|[{'ann_type',9851,[{'var',9851,'Blue'}|[{'type',9851,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9879
		'spec' =
		    %% Line 9879
		    [{{'secondaryColorPointer',4},[{'type',9879,'bounded_fun',[{'type',9879,'fun',[{'type',9879,'product',[{'var',9879,'Size'}|[{'var',9879,'Type'}|[{'var',9879,'Stride'}|[{'var',9879,'Pointer'}]]]]}|[{'atom',9879,'ok'}]]}|[[{'type',9879,'constraint',[{'atom',9879,'is_subtype'}|[[{'var',9879,'Size'}|[{'type',9879,'integer',[]}]]]]}|[{'type',9879,'constraint',[{'atom',9879,'is_subtype'}|[[{'var',9879,'Type'}|[{'type',9879,'enum',[]}]]]]}|[{'type',9879,'constraint',[{'atom',9879,'is_subtype'}|[[{'var',9879,'Stride'}|[{'type',9879,'integer',[]}]]]]}|[{'type',9879,'constraint',[{'atom',9879,'is_subtype'}|[[{'var',9879,'Pointer'}|[{'type',9879,'union',[{'type',9879,'offset',[]}|[{'type',9879,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 9925
		'spec' =
		    %% Line 9925
		    [{{'windowPos2d',2},[{'type',9925,'bounded_fun',[{'type',9925,'fun',[{'type',9925,'product',[{'var',9925,'X'}|[{'var',9925,'Y'}]]}|[{'atom',9925,'ok'}]]}|[[{'type',9925,'constraint',[{'atom',9925,'is_subtype'}|[[{'var',9925,'X'}|[{'type',9925,'float',[]}]]]]}|[{'type',9925,'constraint',[{'atom',9925,'is_subtype'}|[[{'var',9925,'Y'}|[{'type',9925,'float',[]}]]]]}]]]]}]}],
		%% Line 9930
		'spec' =
		    %% Line 9930
		    [{{'windowPos2dv',1},[{'type',9930,'bounded_fun',[{'type',9930,'fun',[{'type',9930,'product',[{'var',9930,'V'}]}|[{'atom',9930,'ok'}]]}|[[{'type',9930,'constraint',[{'atom',9930,'is_subtype'}|[[{'var',9930,'V'}|[{'type',9930,'tuple',[{'ann_type',9930,[{'var',9930,'X'}|[{'type',9930,'float',[]}]]}|[{'ann_type',9930,[{'var',9930,'Y'}|[{'type',9930,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9935
		'spec' =
		    %% Line 9935
		    [{{'windowPos2f',2},[{'type',9935,'bounded_fun',[{'type',9935,'fun',[{'type',9935,'product',[{'var',9935,'X'}|[{'var',9935,'Y'}]]}|[{'atom',9935,'ok'}]]}|[[{'type',9935,'constraint',[{'atom',9935,'is_subtype'}|[[{'var',9935,'X'}|[{'type',9935,'float',[]}]]]]}|[{'type',9935,'constraint',[{'atom',9935,'is_subtype'}|[[{'var',9935,'Y'}|[{'type',9935,'float',[]}]]]]}]]]]}]}],
		%% Line 9940
		'spec' =
		    %% Line 9940
		    [{{'windowPos2fv',1},[{'type',9940,'bounded_fun',[{'type',9940,'fun',[{'type',9940,'product',[{'var',9940,'V'}]}|[{'atom',9940,'ok'}]]}|[[{'type',9940,'constraint',[{'atom',9940,'is_subtype'}|[[{'var',9940,'V'}|[{'type',9940,'tuple',[{'ann_type',9940,[{'var',9940,'X'}|[{'type',9940,'float',[]}]]}|[{'ann_type',9940,[{'var',9940,'Y'}|[{'type',9940,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9945
		'spec' =
		    %% Line 9945
		    [{{'windowPos2i',2},[{'type',9945,'bounded_fun',[{'type',9945,'fun',[{'type',9945,'product',[{'var',9945,'X'}|[{'var',9945,'Y'}]]}|[{'atom',9945,'ok'}]]}|[[{'type',9945,'constraint',[{'atom',9945,'is_subtype'}|[[{'var',9945,'X'}|[{'type',9945,'integer',[]}]]]]}|[{'type',9945,'constraint',[{'atom',9945,'is_subtype'}|[[{'var',9945,'Y'}|[{'type',9945,'integer',[]}]]]]}]]]]}]}],
		%% Line 9950
		'spec' =
		    %% Line 9950
		    [{{'windowPos2iv',1},[{'type',9950,'bounded_fun',[{'type',9950,'fun',[{'type',9950,'product',[{'var',9950,'V'}]}|[{'atom',9950,'ok'}]]}|[[{'type',9950,'constraint',[{'atom',9950,'is_subtype'}|[[{'var',9950,'V'}|[{'type',9950,'tuple',[{'ann_type',9950,[{'var',9950,'X'}|[{'type',9950,'integer',[]}]]}|[{'ann_type',9950,[{'var',9950,'Y'}|[{'type',9950,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9955
		'spec' =
		    %% Line 9955
		    [{{'windowPos2s',2},[{'type',9955,'bounded_fun',[{'type',9955,'fun',[{'type',9955,'product',[{'var',9955,'X'}|[{'var',9955,'Y'}]]}|[{'atom',9955,'ok'}]]}|[[{'type',9955,'constraint',[{'atom',9955,'is_subtype'}|[[{'var',9955,'X'}|[{'type',9955,'integer',[]}]]]]}|[{'type',9955,'constraint',[{'atom',9955,'is_subtype'}|[[{'var',9955,'Y'}|[{'type',9955,'integer',[]}]]]]}]]]]}]}],
		%% Line 9960
		'spec' =
		    %% Line 9960
		    [{{'windowPos2sv',1},[{'type',9960,'bounded_fun',[{'type',9960,'fun',[{'type',9960,'product',[{'var',9960,'V'}]}|[{'atom',9960,'ok'}]]}|[[{'type',9960,'constraint',[{'atom',9960,'is_subtype'}|[[{'var',9960,'V'}|[{'type',9960,'tuple',[{'ann_type',9960,[{'var',9960,'X'}|[{'type',9960,'integer',[]}]]}|[{'ann_type',9960,[{'var',9960,'Y'}|[{'type',9960,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 9965
		'spec' =
		    %% Line 9965
		    [{{'windowPos3d',3},[{'type',9965,'bounded_fun',[{'type',9965,'fun',[{'type',9965,'product',[{'var',9965,'X'}|[{'var',9965,'Y'}|[{'var',9965,'Z'}]]]}|[{'atom',9965,'ok'}]]}|[[{'type',9965,'constraint',[{'atom',9965,'is_subtype'}|[[{'var',9965,'X'}|[{'type',9965,'float',[]}]]]]}|[{'type',9965,'constraint',[{'atom',9965,'is_subtype'}|[[{'var',9965,'Y'}|[{'type',9965,'float',[]}]]]]}|[{'type',9965,'constraint',[{'atom',9965,'is_subtype'}|[[{'var',9965,'Z'}|[{'type',9965,'float',[]}]]]]}]]]]]}]}],
		%% Line 9970
		'spec' =
		    %% Line 9970
		    [{{'windowPos3dv',1},[{'type',9970,'bounded_fun',[{'type',9970,'fun',[{'type',9970,'product',[{'var',9970,'V'}]}|[{'atom',9970,'ok'}]]}|[[{'type',9970,'constraint',[{'atom',9970,'is_subtype'}|[[{'var',9970,'V'}|[{'type',9970,'tuple',[{'ann_type',9970,[{'var',9970,'X'}|[{'type',9970,'float',[]}]]}|[{'ann_type',9970,[{'var',9970,'Y'}|[{'type',9970,'float',[]}]]}|[{'ann_type',9970,[{'var',9970,'Z'}|[{'type',9970,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9975
		'spec' =
		    %% Line 9975
		    [{{'windowPos3f',3},[{'type',9975,'bounded_fun',[{'type',9975,'fun',[{'type',9975,'product',[{'var',9975,'X'}|[{'var',9975,'Y'}|[{'var',9975,'Z'}]]]}|[{'atom',9975,'ok'}]]}|[[{'type',9975,'constraint',[{'atom',9975,'is_subtype'}|[[{'var',9975,'X'}|[{'type',9975,'float',[]}]]]]}|[{'type',9975,'constraint',[{'atom',9975,'is_subtype'}|[[{'var',9975,'Y'}|[{'type',9975,'float',[]}]]]]}|[{'type',9975,'constraint',[{'atom',9975,'is_subtype'}|[[{'var',9975,'Z'}|[{'type',9975,'float',[]}]]]]}]]]]]}]}],
		%% Line 9980
		'spec' =
		    %% Line 9980
		    [{{'windowPos3fv',1},[{'type',9980,'bounded_fun',[{'type',9980,'fun',[{'type',9980,'product',[{'var',9980,'V'}]}|[{'atom',9980,'ok'}]]}|[[{'type',9980,'constraint',[{'atom',9980,'is_subtype'}|[[{'var',9980,'V'}|[{'type',9980,'tuple',[{'ann_type',9980,[{'var',9980,'X'}|[{'type',9980,'float',[]}]]}|[{'ann_type',9980,[{'var',9980,'Y'}|[{'type',9980,'float',[]}]]}|[{'ann_type',9980,[{'var',9980,'Z'}|[{'type',9980,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9985
		'spec' =
		    %% Line 9985
		    [{{'windowPos3i',3},[{'type',9985,'bounded_fun',[{'type',9985,'fun',[{'type',9985,'product',[{'var',9985,'X'}|[{'var',9985,'Y'}|[{'var',9985,'Z'}]]]}|[{'atom',9985,'ok'}]]}|[[{'type',9985,'constraint',[{'atom',9985,'is_subtype'}|[[{'var',9985,'X'}|[{'type',9985,'integer',[]}]]]]}|[{'type',9985,'constraint',[{'atom',9985,'is_subtype'}|[[{'var',9985,'Y'}|[{'type',9985,'integer',[]}]]]]}|[{'type',9985,'constraint',[{'atom',9985,'is_subtype'}|[[{'var',9985,'Z'}|[{'type',9985,'integer',[]}]]]]}]]]]]}]}],
		%% Line 9990
		'spec' =
		    %% Line 9990
		    [{{'windowPos3iv',1},[{'type',9990,'bounded_fun',[{'type',9990,'fun',[{'type',9990,'product',[{'var',9990,'V'}]}|[{'atom',9990,'ok'}]]}|[[{'type',9990,'constraint',[{'atom',9990,'is_subtype'}|[[{'var',9990,'V'}|[{'type',9990,'tuple',[{'ann_type',9990,[{'var',9990,'X'}|[{'type',9990,'integer',[]}]]}|[{'ann_type',9990,[{'var',9990,'Y'}|[{'type',9990,'integer',[]}]]}|[{'ann_type',9990,[{'var',9990,'Z'}|[{'type',9990,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 9995
		'spec' =
		    %% Line 9995
		    [{{'windowPos3s',3},[{'type',9995,'bounded_fun',[{'type',9995,'fun',[{'type',9995,'product',[{'var',9995,'X'}|[{'var',9995,'Y'}|[{'var',9995,'Z'}]]]}|[{'atom',9995,'ok'}]]}|[[{'type',9995,'constraint',[{'atom',9995,'is_subtype'}|[[{'var',9995,'X'}|[{'type',9995,'integer',[]}]]]]}|[{'type',9995,'constraint',[{'atom',9995,'is_subtype'}|[[{'var',9995,'Y'}|[{'type',9995,'integer',[]}]]]]}|[{'type',9995,'constraint',[{'atom',9995,'is_subtype'}|[[{'var',9995,'Z'}|[{'type',9995,'integer',[]}]]]]}]]]]]}]}],
		%% Line 10000
		'spec' =
		    %% Line 10000
		    [{{'windowPos3sv',1},[{'type',10000,'bounded_fun',[{'type',10000,'fun',[{'type',10000,'product',[{'var',10000,'V'}]}|[{'atom',10000,'ok'}]]}|[[{'type',10000,'constraint',[{'atom',10000,'is_subtype'}|[[{'var',10000,'V'}|[{'type',10000,'tuple',[{'ann_type',10000,[{'var',10000,'X'}|[{'type',10000,'integer',[]}]]}|[{'ann_type',10000,[{'var',10000,'Y'}|[{'type',10000,'integer',[]}]]}|[{'ann_type',10000,[{'var',10000,'Z'}|[{'type',10000,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 10016
		'spec' =
		    %% Line 10016
		    [{{'genQueries',1},[{'type',10016,'bounded_fun',[{'type',10016,'fun',[{'type',10016,'product',[{'var',10016,'N'}]}|[{'type',10016,'list',[{'type',10016,'integer',[]}]}]]}|[[{'type',10016,'constraint',[{'atom',10016,'is_subtype'}|[[{'var',10016,'N'}|[{'type',10016,'integer',[]}]]]]}]]]}]}],
		%% Line 10030
		'spec' =
		    %% Line 10030
		    [{{'deleteQueries',1},[{'type',10030,'bounded_fun',[{'type',10030,'fun',[{'type',10030,'product',[{'var',10030,'Ids'}]}|[{'atom',10030,'ok'}]]}|[[{'type',10030,'constraint',[{'atom',10030,'is_subtype'}|[[{'var',10030,'Ids'}|[{'type',10030,'list',[{'type',10030,'integer',[]}]}]]]]}]]]}]}],
		%% Line 10045
		'spec' =
		    %% Line 10045
		    [{{'isQuery',1},[{'type',10045,'bounded_fun',[{'type',10045,'fun',[{'type',10045,'product',[{'var',10045,'Id'}]}|[{'type',10045,'union',[{'integer',10045,0}|[{'integer',10045,1}]]}]]}|[[{'type',10045,'constraint',[{'atom',10045,'is_subtype'}|[[{'var',10045,'Id'}|[{'type',10045,'integer',[]}]]]]}]]]}]}],
		%% Line 10112
		'spec' =
		    %% Line 10112
		    [{{'beginQuery',2},[{'type',10112,'bounded_fun',[{'type',10112,'fun',[{'type',10112,'product',[{'var',10112,'Target'}|[{'var',10112,'Id'}]]}|[{'atom',10112,'ok'}]]}|[[{'type',10112,'constraint',[{'atom',10112,'is_subtype'}|[[{'var',10112,'Target'}|[{'type',10112,'enum',[]}]]]]}|[{'type',10112,'constraint',[{'atom',10112,'is_subtype'}|[[{'var',10112,'Id'}|[{'type',10112,'integer',[]}]]]]}]]]]}]}],
		%% Line 10118
		'spec' =
		    %% Line 10118
		    [{{'endQuery',1},[{'type',10118,'bounded_fun',[{'type',10118,'fun',[{'type',10118,'product',[{'var',10118,'Target'}]}|[{'atom',10118,'ok'}]]}|[[{'type',10118,'constraint',[{'atom',10118,'is_subtype'}|[[{'var',10118,'Target'}|[{'type',10118,'enum',[]}]]]]}]]]}]}],
		%% Line 10125
		'spec' =
		    %% Line 10125
		    [{{'getQueryiv',2},[{'type',10125,'bounded_fun',[{'type',10125,'fun',[{'type',10125,'product',[{'var',10125,'Target'}|[{'var',10125,'Pname'}]]}|[{'type',10125,'integer',[]}]]}|[[{'type',10125,'constraint',[{'atom',10125,'is_subtype'}|[[{'var',10125,'Target'}|[{'type',10125,'enum',[]}]]]]}|[{'type',10125,'constraint',[{'atom',10125,'is_subtype'}|[[{'var',10125,'Pname'}|[{'type',10125,'enum',[]}]]]]}]]]]}]}],
		%% Line 10145
		'spec' =
		    %% Line 10145
		    [{{'getQueryObjectiv',2},[{'type',10145,'bounded_fun',[{'type',10145,'fun',[{'type',10145,'product',[{'var',10145,'Id'}|[{'var',10145,'Pname'}]]}|[{'type',10145,'integer',[]}]]}|[[{'type',10145,'constraint',[{'atom',10145,'is_subtype'}|[[{'var',10145,'Id'}|[{'type',10145,'integer',[]}]]]]}|[{'type',10145,'constraint',[{'atom',10145,'is_subtype'}|[[{'var',10145,'Pname'}|[{'type',10145,'enum',[]}]]]]}]]]]}]}],
		%% Line 10151
		'spec' =
		    %% Line 10151
		    [{{'getQueryObjectuiv',2},[{'type',10151,'bounded_fun',[{'type',10151,'fun',[{'type',10151,'product',[{'var',10151,'Id'}|[{'var',10151,'Pname'}]]}|[{'type',10151,'integer',[]}]]}|[[{'type',10151,'constraint',[{'atom',10151,'is_subtype'}|[[{'var',10151,'Id'}|[{'type',10151,'integer',[]}]]]]}|[{'type',10151,'constraint',[{'atom',10151,'is_subtype'}|[[{'var',10151,'Pname'}|[{'type',10151,'enum',[]}]]]]}]]]]}]}],
		%% Line 10234
		'spec' =
		    %% Line 10234
		    [{{'bindBuffer',2},[{'type',10234,'bounded_fun',[{'type',10234,'fun',[{'type',10234,'product',[{'var',10234,'Target'}|[{'var',10234,'Buffer'}]]}|[{'atom',10234,'ok'}]]}|[[{'type',10234,'constraint',[{'atom',10234,'is_subtype'}|[[{'var',10234,'Target'}|[{'type',10234,'enum',[]}]]]]}|[{'type',10234,'constraint',[{'atom',10234,'is_subtype'}|[[{'var',10234,'Buffer'}|[{'type',10234,'integer',[]}]]]]}]]]]}]}],
		%% Line 10249
		'spec' =
		    %% Line 10249
		    [{{'deleteBuffers',1},[{'type',10249,'bounded_fun',[{'type',10249,'fun',[{'type',10249,'product',[{'var',10249,'Buffers'}]}|[{'atom',10249,'ok'}]]}|[[{'type',10249,'constraint',[{'atom',10249,'is_subtype'}|[[{'var',10249,'Buffers'}|[{'type',10249,'list',[{'type',10249,'integer',[]}]}]]]]}]]]}]}],
		%% Line 10268
		'spec' =
		    %% Line 10268
		    [{{'genBuffers',1},[{'type',10268,'bounded_fun',[{'type',10268,'fun',[{'type',10268,'product',[{'var',10268,'N'}]}|[{'type',10268,'list',[{'type',10268,'integer',[]}]}]]}|[[{'type',10268,'constraint',[{'atom',10268,'is_subtype'}|[[{'var',10268,'N'}|[{'type',10268,'integer',[]}]]]]}]]]}]}],
		%% Line 10283
		'spec' =
		    %% Line 10283
		    [{{'isBuffer',1},[{'type',10283,'bounded_fun',[{'type',10283,'fun',[{'type',10283,'product',[{'var',10283,'Buffer'}]}|[{'type',10283,'union',[{'integer',10283,0}|[{'integer',10283,1}]]}]]}|[[{'type',10283,'constraint',[{'atom',10283,'is_subtype'}|[[{'var',10283,'Buffer'}|[{'type',10283,'integer',[]}]]]]}]]]}]}],
		%% Line 10321
		'spec' =
		    %% Line 10321
		    [{{'bufferData',4},[{'type',10321,'bounded_fun',[{'type',10321,'fun',[{'type',10321,'product',[{'var',10321,'Target'}|[{'var',10321,'Size'}|[{'var',10321,'Data'}|[{'var',10321,'Usage'}]]]]}|[{'atom',10321,'ok'}]]}|[[{'type',10321,'constraint',[{'atom',10321,'is_subtype'}|[[{'var',10321,'Target'}|[{'type',10321,'enum',[]}]]]]}|[{'type',10321,'constraint',[{'atom',10321,'is_subtype'}|[[{'var',10321,'Size'}|[{'type',10321,'integer',[]}]]]]}|[{'type',10321,'constraint',[{'atom',10321,'is_subtype'}|[[{'var',10321,'Data'}|[{'type',10321,'union',[{'type',10321,'offset',[]}|[{'type',10321,'mem',[]}]]}]]]]}|[{'type',10321,'constraint',[{'atom',10321,'is_subtype'}|[[{'var',10321,'Usage'}|[{'type',10321,'enum',[]}]]]]}]]]]]]}]}],
		%% Line 10337
		'spec' =
		    %% Line 10337
		    [{{'bufferSubData',4},[{'type',10337,'bounded_fun',[{'type',10337,'fun',[{'type',10337,'product',[{'var',10337,'Target'}|[{'var',10337,'Offset'}|[{'var',10337,'Size'}|[{'var',10337,'Data'}]]]]}|[{'atom',10337,'ok'}]]}|[[{'type',10337,'constraint',[{'atom',10337,'is_subtype'}|[[{'var',10337,'Target'}|[{'type',10337,'enum',[]}]]]]}|[{'type',10337,'constraint',[{'atom',10337,'is_subtype'}|[[{'var',10337,'Offset'}|[{'type',10337,'integer',[]}]]]]}|[{'type',10337,'constraint',[{'atom',10337,'is_subtype'}|[[{'var',10337,'Size'}|[{'type',10337,'integer',[]}]]]]}|[{'type',10337,'constraint',[{'atom',10337,'is_subtype'}|[[{'var',10337,'Data'}|[{'type',10337,'union',[{'type',10337,'offset',[]}|[{'type',10337,'mem',[]}]]}]]]]}]]]]]]}]}],
		%% Line 10353
		'spec' =
		    %% Line 10353
		    [{{'getBufferSubData',4},[{'type',10353,'bounded_fun',[{'type',10353,'fun',[{'type',10353,'product',[{'var',10353,'Target'}|[{'var',10353,'Offset'}|[{'var',10353,'Size'}|[{'var',10353,'Data'}]]]]}|[{'atom',10353,'ok'}]]}|[[{'type',10353,'constraint',[{'atom',10353,'is_subtype'}|[[{'var',10353,'Target'}|[{'type',10353,'enum',[]}]]]]}|[{'type',10353,'constraint',[{'atom',10353,'is_subtype'}|[[{'var',10353,'Offset'}|[{'type',10353,'integer',[]}]]]]}|[{'type',10353,'constraint',[{'atom',10353,'is_subtype'}|[[{'var',10353,'Size'}|[{'type',10353,'integer',[]}]]]]}|[{'type',10353,'constraint',[{'atom',10353,'is_subtype'}|[[{'var',10353,'Data'}|[{'type',10353,'mem',[]}]]]]}]]]]]]}]}],
		%% Line 10378
		'spec' =
		    %% Line 10378
		    [{{'getBufferParameteriv',2},[{'type',10378,'bounded_fun',[{'type',10378,'fun',[{'type',10378,'product',[{'var',10378,'Target'}|[{'var',10378,'Pname'}]]}|[{'type',10378,'integer',[]}]]}|[[{'type',10378,'constraint',[{'atom',10378,'is_subtype'}|[[{'var',10378,'Target'}|[{'type',10378,'enum',[]}]]]]}|[{'type',10378,'constraint',[{'atom',10378,'is_subtype'}|[[{'var',10378,'Pname'}|[{'type',10378,'enum',[]}]]]]}]]]]}]}],
		%% Line 10420
		'spec' =
		    %% Line 10420
		    [{{'blendEquationSeparate',2},[{'type',10420,'bounded_fun',[{'type',10420,'fun',[{'type',10420,'product',[{'var',10420,'ModeRGB'}|[{'var',10420,'ModeAlpha'}]]}|[{'atom',10420,'ok'}]]}|[[{'type',10420,'constraint',[{'atom',10420,'is_subtype'}|[[{'var',10420,'ModeRGB'}|[{'type',10420,'enum',[]}]]]]}|[{'type',10420,'constraint',[{'atom',10420,'is_subtype'}|[[{'var',10420,'ModeAlpha'}|[{'type',10420,'enum',[]}]]]]}]]]]}]}],
		%% Line 10460
		'spec' =
		    %% Line 10460
		    [{{'drawBuffers',1},[{'type',10460,'bounded_fun',[{'type',10460,'fun',[{'type',10460,'product',[{'var',10460,'Bufs'}]}|[{'atom',10460,'ok'}]]}|[[{'type',10460,'constraint',[{'atom',10460,'is_subtype'}|[[{'var',10460,'Bufs'}|[{'type',10460,'list',[{'type',10460,'enum',[]}]}]]]]}]]]}]}],
		%% Line 10522
		'spec' =
		    %% Line 10522
		    [{{'stencilOpSeparate',4},[{'type',10522,'bounded_fun',[{'type',10522,'fun',[{'type',10522,'product',[{'var',10522,'Face'}|[{'var',10522,'Sfail'}|[{'var',10522,'Dpfail'}|[{'var',10522,'Dppass'}]]]]}|[{'atom',10522,'ok'}]]}|[[{'type',10522,'constraint',[{'atom',10522,'is_subtype'}|[[{'var',10522,'Face'}|[{'type',10522,'enum',[]}]]]]}|[{'type',10522,'constraint',[{'atom',10522,'is_subtype'}|[[{'var',10522,'Sfail'}|[{'type',10522,'enum',[]}]]]]}|[{'type',10522,'constraint',[{'atom',10522,'is_subtype'}|[[{'var',10522,'Dpfail'}|[{'type',10522,'enum',[]}]]]]}|[{'type',10522,'constraint',[{'atom',10522,'is_subtype'}|[[{'var',10522,'Dppass'}|[{'type',10522,'enum',[]}]]]]}]]]]]]}]}],
		%% Line 10585
		'spec' =
		    %% Line 10585
		    [{{'stencilFuncSeparate',4},[{'type',10585,'bounded_fun',[{'type',10585,'fun',[{'type',10585,'product',[{'var',10585,'Face'}|[{'var',10585,'Func'}|[{'var',10585,'Ref'}|[{'var',10585,'Mask'}]]]]}|[{'atom',10585,'ok'}]]}|[[{'type',10585,'constraint',[{'atom',10585,'is_subtype'}|[[{'var',10585,'Face'}|[{'type',10585,'enum',[]}]]]]}|[{'type',10585,'constraint',[{'atom',10585,'is_subtype'}|[[{'var',10585,'Func'}|[{'type',10585,'enum',[]}]]]]}|[{'type',10585,'constraint',[{'atom',10585,'is_subtype'}|[[{'var',10585,'Ref'}|[{'type',10585,'integer',[]}]]]]}|[{'type',10585,'constraint',[{'atom',10585,'is_subtype'}|[[{'var',10585,'Mask'}|[{'type',10585,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 10603
		'spec' =
		    %% Line 10603
		    [{{'stencilMaskSeparate',2},[{'type',10603,'bounded_fun',[{'type',10603,'fun',[{'type',10603,'product',[{'var',10603,'Face'}|[{'var',10603,'Mask'}]]}|[{'atom',10603,'ok'}]]}|[[{'type',10603,'constraint',[{'atom',10603,'is_subtype'}|[[{'var',10603,'Face'}|[{'type',10603,'enum',[]}]]]]}|[{'type',10603,'constraint',[{'atom',10603,'is_subtype'}|[[{'var',10603,'Mask'}|[{'type',10603,'integer',[]}]]]]}]]]]}]}],
		%% Line 10627
		'spec' =
		    %% Line 10627
		    [{{'attachShader',2},[{'type',10627,'bounded_fun',[{'type',10627,'fun',[{'type',10627,'product',[{'var',10627,'Program'}|[{'var',10627,'Shader'}]]}|[{'atom',10627,'ok'}]]}|[[{'type',10627,'constraint',[{'atom',10627,'is_subtype'}|[[{'var',10627,'Program'}|[{'type',10627,'integer',[]}]]]]}|[{'type',10627,'constraint',[{'atom',10627,'is_subtype'}|[[{'var',10627,'Shader'}|[{'type',10627,'integer',[]}]]]]}]]]]}]}],
		%% Line 10664
		'spec' =
		    %% Line 10664
		    [{{'bindAttribLocation',3},[{'type',10664,'bounded_fun',[{'type',10664,'fun',[{'type',10664,'product',[{'var',10664,'Program'}|[{'var',10664,'Index'}|[{'var',10664,'Name'}]]]}|[{'atom',10664,'ok'}]]}|[[{'type',10664,'constraint',[{'atom',10664,'is_subtype'}|[[{'var',10664,'Program'}|[{'type',10664,'integer',[]}]]]]}|[{'type',10664,'constraint',[{'atom',10664,'is_subtype'}|[[{'var',10664,'Index'}|[{'type',10664,'integer',[]}]]]]}|[{'type',10664,'constraint',[{'atom',10664,'is_subtype'}|[[{'var',10664,'Name'}|[{'type',10664,'string',[]}]]]]}]]]]]}]}],
		%% Line 10684
		'spec' =
		    %% Line 10684
		    [{{'compileShader',1},[{'type',10684,'bounded_fun',[{'type',10684,'fun',[{'type',10684,'product',[{'var',10684,'Shader'}]}|[{'atom',10684,'ok'}]]}|[[{'type',10684,'constraint',[{'atom',10684,'is_subtype'}|[[{'var',10684,'Shader'}|[{'type',10684,'integer',[]}]]]]}]]]}]}],
		%% Line 10707
		'spec' =
		    %% Line 10707
		    [{{'createProgram',0},[{'type',10707,'fun',[{'type',10707,'product',[]}|[{'type',10707,'integer',[]}]]}]}],
		%% Line 10730
		'spec' =
		    %% Line 10730
		    [{{'createShader',1},[{'type',10730,'bounded_fun',[{'type',10730,'fun',[{'type',10730,'product',[{'var',10730,'Type'}]}|[{'type',10730,'integer',[]}]]}|[[{'type',10730,'constraint',[{'atom',10730,'is_subtype'}|[[{'var',10730,'Type'}|[{'type',10730,'enum',[]}]]]]}]]]}]}],
		%% Line 10751
		'spec' =
		    %% Line 10751
		    [{{'deleteProgram',1},[{'type',10751,'bounded_fun',[{'type',10751,'fun',[{'type',10751,'product',[{'var',10751,'Program'}]}|[{'atom',10751,'ok'}]]}|[[{'type',10751,'constraint',[{'atom',10751,'is_subtype'}|[[{'var',10751,'Program'}|[{'type',10751,'integer',[]}]]]]}]]]}]}],
		%% Line 10770
		'spec' =
		    %% Line 10770
		    [{{'deleteShader',1},[{'type',10770,'bounded_fun',[{'type',10770,'fun',[{'type',10770,'product',[{'var',10770,'Shader'}]}|[{'atom',10770,'ok'}]]}|[[{'type',10770,'constraint',[{'atom',10770,'is_subtype'}|[[{'var',10770,'Shader'}|[{'type',10770,'integer',[]}]]]]}]]]}]}],
		%% Line 10785
		'spec' =
		    %% Line 10785
		    [{{'detachShader',2},[{'type',10785,'bounded_fun',[{'type',10785,'fun',[{'type',10785,'product',[{'var',10785,'Program'}|[{'var',10785,'Shader'}]]}|[{'atom',10785,'ok'}]]}|[[{'type',10785,'constraint',[{'atom',10785,'is_subtype'}|[[{'var',10785,'Program'}|[{'type',10785,'integer',[]}]]]]}|[{'type',10785,'constraint',[{'atom',10785,'is_subtype'}|[[{'var',10785,'Shader'}|[{'type',10785,'integer',[]}]]]]}]]]]}]}],
		%% Line 10800
		'spec' =
		    %% Line 10800
		    [{{'disableVertexAttribArray',1},[{'type',10800,'bounded_fun',[{'type',10800,'fun',[{'type',10800,'product',[{'var',10800,'Index'}]}|[{'atom',10800,'ok'}]]}|[[{'type',10800,'constraint',[{'atom',10800,'is_subtype'}|[[{'var',10800,'Index'}|[{'type',10800,'integer',[]}]]]]}]]]}]}],
		%% Line 10806
		'spec' =
		    %% Line 10806
		    [{{'enableVertexAttribArray',1},[{'type',10806,'bounded_fun',[{'type',10806,'fun',[{'type',10806,'product',[{'var',10806,'Index'}]}|[{'atom',10806,'ok'}]]}|[[{'type',10806,'constraint',[{'atom',10806,'is_subtype'}|[[{'var',10806,'Index'}|[{'type',10806,'integer',[]}]]]]}]]]}]}],
		%% Line 10864
		'spec' =
		    %% Line 10864
		    [{{'getActiveAttrib',3},[{'type',10864,'bounded_fun',[{'type',10864,'fun',[{'type',10864,'product',[{'var',10864,'Program'}|[{'var',10864,'Index'}|[{'var',10864,'BufSize'}]]]}|[{'type',10864,'tuple',[{'ann_type',10864,[{'var',10864,'Size'}|[{'type',10864,'integer',[]}]]}|[{'ann_type',10864,[{'var',10864,'Type'}|[{'type',10864,'enum',[]}]]}|[{'ann_type',10864,[{'var',10864,'Name'}|[{'type',10864,'string',[]}]]}]]]}]]}|[[{'type',10864,'constraint',[{'atom',10864,'is_subtype'}|[[{'var',10864,'Program'}|[{'type',10864,'integer',[]}]]]]}|[{'type',10864,'constraint',[{'atom',10864,'is_subtype'}|[[{'var',10864,'Index'}|[{'type',10864,'integer',[]}]]]]}|[{'type',10864,'constraint',[{'atom',10864,'is_subtype'}|[[{'var',10864,'BufSize'}|[{'type',10864,'integer',[]}]]]]}]]]]]}]}],
		%% Line 11011
		'spec' =
		    %% Line 11011
		    [{{'getActiveUniform',3},[{'type',11011,'bounded_fun',[{'type',11011,'fun',[{'type',11011,'product',[{'var',11011,'Program'}|[{'var',11011,'Index'}|[{'var',11011,'BufSize'}]]]}|[{'type',11011,'tuple',[{'ann_type',11011,[{'var',11011,'Size'}|[{'type',11011,'integer',[]}]]}|[{'ann_type',11011,[{'var',11011,'Type'}|[{'type',11011,'enum',[]}]]}|[{'ann_type',11011,[{'var',11011,'Name'}|[{'type',11011,'string',[]}]]}]]]}]]}|[[{'type',11011,'constraint',[{'atom',11011,'is_subtype'}|[[{'var',11011,'Program'}|[{'type',11011,'integer',[]}]]]]}|[{'type',11011,'constraint',[{'atom',11011,'is_subtype'}|[[{'var',11011,'Index'}|[{'type',11011,'integer',[]}]]]]}|[{'type',11011,'constraint',[{'atom',11011,'is_subtype'}|[[{'var',11011,'BufSize'}|[{'type',11011,'integer',[]}]]]]}]]]]]}]}],
		%% Line 11031
		'spec' =
		    %% Line 11031
		    [{{'getAttachedShaders',2},[{'type',11031,'bounded_fun',[{'type',11031,'fun',[{'type',11031,'product',[{'var',11031,'Program'}|[{'var',11031,'MaxCount'}]]}|[{'type',11031,'list',[{'type',11031,'integer',[]}]}]]}|[[{'type',11031,'constraint',[{'atom',11031,'is_subtype'}|[[{'var',11031,'Program'}|[{'type',11031,'integer',[]}]]]]}|[{'type',11031,'constraint',[{'atom',11031,'is_subtype'}|[[{'var',11031,'MaxCount'}|[{'type',11031,'integer',[]}]]]]}]]]]}]}],
		%% Line 11055
		'spec' =
		    %% Line 11055
		    [{{'getAttribLocation',2},[{'type',11055,'bounded_fun',[{'type',11055,'fun',[{'type',11055,'product',[{'var',11055,'Program'}|[{'var',11055,'Name'}]]}|[{'type',11055,'integer',[]}]]}|[[{'type',11055,'constraint',[{'atom',11055,'is_subtype'}|[[{'var',11055,'Program'}|[{'type',11055,'integer',[]}]]]]}|[{'type',11055,'constraint',[{'atom',11055,'is_subtype'}|[[{'var',11055,'Name'}|[{'type',11055,'string',[]}]]]]}]]]]}]}],
		%% Line 11126
		'spec' =
		    %% Line 11126
		    [{{'getProgramiv',2},[{'type',11126,'bounded_fun',[{'type',11126,'fun',[{'type',11126,'product',[{'var',11126,'Program'}|[{'var',11126,'Pname'}]]}|[{'type',11126,'integer',[]}]]}|[[{'type',11126,'constraint',[{'atom',11126,'is_subtype'}|[[{'var',11126,'Program'}|[{'type',11126,'integer',[]}]]]]}|[{'type',11126,'constraint',[{'atom',11126,'is_subtype'}|[[{'var',11126,'Pname'}|[{'type',11126,'enum',[]}]]]]}]]]]}]}],
		%% Line 11151
		'spec' =
		    %% Line 11151
		    [{{'getProgramInfoLog',2},[{'type',11151,'bounded_fun',[{'type',11151,'fun',[{'type',11151,'product',[{'var',11151,'Program'}|[{'var',11151,'BufSize'}]]}|[{'type',11151,'string',[]}]]}|[[{'type',11151,'constraint',[{'atom',11151,'is_subtype'}|[[{'var',11151,'Program'}|[{'type',11151,'integer',[]}]]]]}|[{'type',11151,'constraint',[{'atom',11151,'is_subtype'}|[[{'var',11151,'BufSize'}|[{'type',11151,'integer',[]}]]]]}]]]]}]}],
		%% Line 11182
		'spec' =
		    %% Line 11182
		    [{{'getShaderiv',2},[{'type',11182,'bounded_fun',[{'type',11182,'fun',[{'type',11182,'product',[{'var',11182,'Shader'}|[{'var',11182,'Pname'}]]}|[{'type',11182,'integer',[]}]]}|[[{'type',11182,'constraint',[{'atom',11182,'is_subtype'}|[[{'var',11182,'Shader'}|[{'type',11182,'integer',[]}]]]]}|[{'type',11182,'constraint',[{'atom',11182,'is_subtype'}|[[{'var',11182,'Pname'}|[{'type',11182,'enum',[]}]]]]}]]]]}]}],
		%% Line 11205
		'spec' =
		    %% Line 11205
		    [{{'getShaderInfoLog',2},[{'type',11205,'bounded_fun',[{'type',11205,'fun',[{'type',11205,'product',[{'var',11205,'Shader'}|[{'var',11205,'BufSize'}]]}|[{'type',11205,'string',[]}]]}|[[{'type',11205,'constraint',[{'atom',11205,'is_subtype'}|[[{'var',11205,'Shader'}|[{'type',11205,'integer',[]}]]]]}|[{'type',11205,'constraint',[{'atom',11205,'is_subtype'}|[[{'var',11205,'BufSize'}|[{'type',11205,'integer',[]}]]]]}]]]]}]}],
		%% Line 11225
		'spec' =
		    %% Line 11225
		    [{{'getShaderSource',2},[{'type',11225,'bounded_fun',[{'type',11225,'fun',[{'type',11225,'product',[{'var',11225,'Shader'}|[{'var',11225,'BufSize'}]]}|[{'type',11225,'string',[]}]]}|[[{'type',11225,'constraint',[{'atom',11225,'is_subtype'}|[[{'var',11225,'Shader'}|[{'type',11225,'integer',[]}]]]]}|[{'type',11225,'constraint',[{'atom',11225,'is_subtype'}|[[{'var',11225,'BufSize'}|[{'type',11225,'integer',[]}]]]]}]]]]}]}],
		%% Line 11258
		'spec' =
		    %% Line 11258
		    [{{'getUniformLocation',2},[{'type',11258,'bounded_fun',[{'type',11258,'fun',[{'type',11258,'product',[{'var',11258,'Program'}|[{'var',11258,'Name'}]]}|[{'type',11258,'integer',[]}]]}|[[{'type',11258,'constraint',[{'atom',11258,'is_subtype'}|[[{'var',11258,'Program'}|[{'type',11258,'integer',[]}]]]]}|[{'type',11258,'constraint',[{'atom',11258,'is_subtype'}|[[{'var',11258,'Name'}|[{'type',11258,'string',[]}]]]]}]]]]}]}],
		%% Line 11284
		'spec' =
		    %% Line 11284
		    [{{'getUniformfv',2},[{'type',11284,'bounded_fun',[{'type',11284,'fun',[{'type',11284,'product',[{'var',11284,'Program'}|[{'var',11284,'Location'}]]}|[{'type',11284,'matrix',[]}]]}|[[{'type',11284,'constraint',[{'atom',11284,'is_subtype'}|[[{'var',11284,'Program'}|[{'type',11284,'integer',[]}]]]]}|[{'type',11284,'constraint',[{'atom',11284,'is_subtype'}|[[{'var',11284,'Location'}|[{'type',11284,'integer',[]}]]]]}]]]]}]}],
		%% Line 11290
		'spec' =
		    %% Line 11290
		    [{{'getUniformiv',2},[{'type',11290,'bounded_fun',[{'type',11290,'fun',[{'type',11290,'product',[{'var',11290,'Program'}|[{'var',11290,'Location'}]]}|[{'type',11290,'tuple',[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}|[{'type',11290,'integer',[]}]]]]]]]]]]]]]]]]}]]}|[[{'type',11290,'constraint',[{'atom',11290,'is_subtype'}|[[{'var',11290,'Program'}|[{'type',11290,'integer',[]}]]]]}|[{'type',11290,'constraint',[{'atom',11290,'is_subtype'}|[[{'var',11290,'Location'}|[{'type',11290,'integer',[]}]]]]}]]]]}]}],
		%% Line 11357
		'spec' =
		    %% Line 11357
		    [{{'getVertexAttribdv',2},[{'type',11357,'bounded_fun',[{'type',11357,'fun',[{'type',11357,'product',[{'var',11357,'Index'}|[{'var',11357,'Pname'}]]}|[{'type',11357,'tuple',[{'type',11357,'float',[]}|[{'type',11357,'float',[]}|[{'type',11357,'float',[]}|[{'type',11357,'float',[]}]]]]}]]}|[[{'type',11357,'constraint',[{'atom',11357,'is_subtype'}|[[{'var',11357,'Index'}|[{'type',11357,'integer',[]}]]]]}|[{'type',11357,'constraint',[{'atom',11357,'is_subtype'}|[[{'var',11357,'Pname'}|[{'type',11357,'enum',[]}]]]]}]]]]}]}],
		%% Line 11363
		'spec' =
		    %% Line 11363
		    [{{'getVertexAttribfv',2},[{'type',11363,'bounded_fun',[{'type',11363,'fun',[{'type',11363,'product',[{'var',11363,'Index'}|[{'var',11363,'Pname'}]]}|[{'type',11363,'tuple',[{'type',11363,'float',[]}|[{'type',11363,'float',[]}|[{'type',11363,'float',[]}|[{'type',11363,'float',[]}]]]]}]]}|[[{'type',11363,'constraint',[{'atom',11363,'is_subtype'}|[[{'var',11363,'Index'}|[{'type',11363,'integer',[]}]]]]}|[{'type',11363,'constraint',[{'atom',11363,'is_subtype'}|[[{'var',11363,'Pname'}|[{'type',11363,'enum',[]}]]]]}]]]]}]}],
		%% Line 11369
		'spec' =
		    %% Line 11369
		    [{{'getVertexAttribiv',2},[{'type',11369,'bounded_fun',[{'type',11369,'fun',[{'type',11369,'product',[{'var',11369,'Index'}|[{'var',11369,'Pname'}]]}|[{'type',11369,'tuple',[{'type',11369,'integer',[]}|[{'type',11369,'integer',[]}|[{'type',11369,'integer',[]}|[{'type',11369,'integer',[]}]]]]}]]}|[[{'type',11369,'constraint',[{'atom',11369,'is_subtype'}|[[{'var',11369,'Index'}|[{'type',11369,'integer',[]}]]]]}|[{'type',11369,'constraint',[{'atom',11369,'is_subtype'}|[[{'var',11369,'Pname'}|[{'type',11369,'enum',[]}]]]]}]]]]}]}],
		%% Line 11381
		'spec' =
		    %% Line 11381
		    [{{'isProgram',1},[{'type',11381,'bounded_fun',[{'type',11381,'fun',[{'type',11381,'product',[{'var',11381,'Program'}]}|[{'type',11381,'union',[{'integer',11381,0}|[{'integer',11381,1}]]}]]}|[[{'type',11381,'constraint',[{'atom',11381,'is_subtype'}|[[{'var',11381,'Program'}|[{'type',11381,'integer',[]}]]]]}]]]}]}],
		%% Line 11393
		'spec' =
		    %% Line 11393
		    [{{'isShader',1},[{'type',11393,'bounded_fun',[{'type',11393,'fun',[{'type',11393,'product',[{'var',11393,'Shader'}]}|[{'type',11393,'union',[{'integer',11393,0}|[{'integer',11393,1}]]}]]}|[[{'type',11393,'constraint',[{'atom',11393,'is_subtype'}|[[{'var',11393,'Shader'}|[{'type',11393,'integer',[]}]]]]}]]]}]}],
		%% Line 11513
		'spec' =
		    %% Line 11513
		    [{{'linkProgram',1},[{'type',11513,'bounded_fun',[{'type',11513,'fun',[{'type',11513,'product',[{'var',11513,'Program'}]}|[{'atom',11513,'ok'}]]}|[[{'type',11513,'constraint',[{'atom',11513,'is_subtype'}|[[{'var',11513,'Program'}|[{'type',11513,'integer',[]}]]]]}]]]}]}],
		%% Line 11531
		'spec' =
		    %% Line 11531
		    [{{'shaderSource',2},[{'type',11531,'bounded_fun',[{'type',11531,'fun',[{'type',11531,'product',[{'var',11531,'Shader'}|[{'var',11531,'String'}]]}|[{'atom',11531,'ok'}]]}|[[{'type',11531,'constraint',[{'atom',11531,'is_subtype'}|[[{'var',11531,'Shader'}|[{'type',11531,'integer',[]}]]]]}|[{'type',11531,'constraint',[{'atom',11531,'is_subtype'}|[[{'var',11531,'String'}|[{'type',11531,'list',[{'type',11531,'string',[]}]}]]]]}]]]]}]}],
		%% Line 11573
		'spec' =
		    %% Line 11573
		    [{{'useProgram',1},[{'type',11573,'bounded_fun',[{'type',11573,'fun',[{'type',11573,'product',[{'var',11573,'Program'}]}|[{'atom',11573,'ok'}]]}|[[{'type',11573,'constraint',[{'atom',11573,'is_subtype'}|[[{'var',11573,'Program'}|[{'type',11573,'integer',[]}]]]]}]]]}]}],
		%% Line 11641
		'spec' =
		    %% Line 11641
		    [{{'uniform1f',2},[{'type',11641,'bounded_fun',[{'type',11641,'fun',[{'type',11641,'product',[{'var',11641,'Location'}|[{'var',11641,'V0'}]]}|[{'atom',11641,'ok'}]]}|[[{'type',11641,'constraint',[{'atom',11641,'is_subtype'}|[[{'var',11641,'Location'}|[{'type',11641,'integer',[]}]]]]}|[{'type',11641,'constraint',[{'atom',11641,'is_subtype'}|[[{'var',11641,'V0'}|[{'type',11641,'float',[]}]]]]}]]]]}]}],
		%% Line 11647
		'spec' =
		    %% Line 11647
		    [{{'uniform2f',3},[{'type',11647,'bounded_fun',[{'type',11647,'fun',[{'type',11647,'product',[{'var',11647,'Location'}|[{'var',11647,'V0'}|[{'var',11647,'V1'}]]]}|[{'atom',11647,'ok'}]]}|[[{'type',11647,'constraint',[{'atom',11647,'is_subtype'}|[[{'var',11647,'Location'}|[{'type',11647,'integer',[]}]]]]}|[{'type',11647,'constraint',[{'atom',11647,'is_subtype'}|[[{'var',11647,'V0'}|[{'type',11647,'float',[]}]]]]}|[{'type',11647,'constraint',[{'atom',11647,'is_subtype'}|[[{'var',11647,'V1'}|[{'type',11647,'float',[]}]]]]}]]]]]}]}],
		%% Line 11653
		'spec' =
		    %% Line 11653
		    [{{'uniform3f',4},[{'type',11653,'bounded_fun',[{'type',11653,'fun',[{'type',11653,'product',[{'var',11653,'Location'}|[{'var',11653,'V0'}|[{'var',11653,'V1'}|[{'var',11653,'V2'}]]]]}|[{'atom',11653,'ok'}]]}|[[{'type',11653,'constraint',[{'atom',11653,'is_subtype'}|[[{'var',11653,'Location'}|[{'type',11653,'integer',[]}]]]]}|[{'type',11653,'constraint',[{'atom',11653,'is_subtype'}|[[{'var',11653,'V0'}|[{'type',11653,'float',[]}]]]]}|[{'type',11653,'constraint',[{'atom',11653,'is_subtype'}|[[{'var',11653,'V1'}|[{'type',11653,'float',[]}]]]]}|[{'type',11653,'constraint',[{'atom',11653,'is_subtype'}|[[{'var',11653,'V2'}|[{'type',11653,'float',[]}]]]]}]]]]]]}]}],
		%% Line 11659
		'spec' =
		    %% Line 11659
		    [{{'uniform4f',5},[{'type',11659,'bounded_fun',[{'type',11659,'fun',[{'type',11659,'product',[{'var',11659,'Location'}|[{'var',11659,'V0'}|[{'var',11659,'V1'}|[{'var',11659,'V2'}|[{'var',11659,'V3'}]]]]]}|[{'atom',11659,'ok'}]]}|[[{'type',11659,'constraint',[{'atom',11659,'is_subtype'}|[[{'var',11659,'Location'}|[{'type',11659,'integer',[]}]]]]}|[{'type',11659,'constraint',[{'atom',11659,'is_subtype'}|[[{'var',11659,'V0'}|[{'type',11659,'float',[]}]]]]}|[{'type',11659,'constraint',[{'atom',11659,'is_subtype'}|[[{'var',11659,'V1'}|[{'type',11659,'float',[]}]]]]}|[{'type',11659,'constraint',[{'atom',11659,'is_subtype'}|[[{'var',11659,'V2'}|[{'type',11659,'float',[]}]]]]}|[{'type',11659,'constraint',[{'atom',11659,'is_subtype'}|[[{'var',11659,'V3'}|[{'type',11659,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 11665
		'spec' =
		    %% Line 11665
		    [{{'uniform1i',2},[{'type',11665,'bounded_fun',[{'type',11665,'fun',[{'type',11665,'product',[{'var',11665,'Location'}|[{'var',11665,'V0'}]]}|[{'atom',11665,'ok'}]]}|[[{'type',11665,'constraint',[{'atom',11665,'is_subtype'}|[[{'var',11665,'Location'}|[{'type',11665,'integer',[]}]]]]}|[{'type',11665,'constraint',[{'atom',11665,'is_subtype'}|[[{'var',11665,'V0'}|[{'type',11665,'integer',[]}]]]]}]]]]}]}],
		%% Line 11671
		'spec' =
		    %% Line 11671
		    [{{'uniform2i',3},[{'type',11671,'bounded_fun',[{'type',11671,'fun',[{'type',11671,'product',[{'var',11671,'Location'}|[{'var',11671,'V0'}|[{'var',11671,'V1'}]]]}|[{'atom',11671,'ok'}]]}|[[{'type',11671,'constraint',[{'atom',11671,'is_subtype'}|[[{'var',11671,'Location'}|[{'type',11671,'integer',[]}]]]]}|[{'type',11671,'constraint',[{'atom',11671,'is_subtype'}|[[{'var',11671,'V0'}|[{'type',11671,'integer',[]}]]]]}|[{'type',11671,'constraint',[{'atom',11671,'is_subtype'}|[[{'var',11671,'V1'}|[{'type',11671,'integer',[]}]]]]}]]]]]}]}],
		%% Line 11677
		'spec' =
		    %% Line 11677
		    [{{'uniform3i',4},[{'type',11677,'bounded_fun',[{'type',11677,'fun',[{'type',11677,'product',[{'var',11677,'Location'}|[{'var',11677,'V0'}|[{'var',11677,'V1'}|[{'var',11677,'V2'}]]]]}|[{'atom',11677,'ok'}]]}|[[{'type',11677,'constraint',[{'atom',11677,'is_subtype'}|[[{'var',11677,'Location'}|[{'type',11677,'integer',[]}]]]]}|[{'type',11677,'constraint',[{'atom',11677,'is_subtype'}|[[{'var',11677,'V0'}|[{'type',11677,'integer',[]}]]]]}|[{'type',11677,'constraint',[{'atom',11677,'is_subtype'}|[[{'var',11677,'V1'}|[{'type',11677,'integer',[]}]]]]}|[{'type',11677,'constraint',[{'atom',11677,'is_subtype'}|[[{'var',11677,'V2'}|[{'type',11677,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 11683
		'spec' =
		    %% Line 11683
		    [{{'uniform4i',5},[{'type',11683,'bounded_fun',[{'type',11683,'fun',[{'type',11683,'product',[{'var',11683,'Location'}|[{'var',11683,'V0'}|[{'var',11683,'V1'}|[{'var',11683,'V2'}|[{'var',11683,'V3'}]]]]]}|[{'atom',11683,'ok'}]]}|[[{'type',11683,'constraint',[{'atom',11683,'is_subtype'}|[[{'var',11683,'Location'}|[{'type',11683,'integer',[]}]]]]}|[{'type',11683,'constraint',[{'atom',11683,'is_subtype'}|[[{'var',11683,'V0'}|[{'type',11683,'integer',[]}]]]]}|[{'type',11683,'constraint',[{'atom',11683,'is_subtype'}|[[{'var',11683,'V1'}|[{'type',11683,'integer',[]}]]]]}|[{'type',11683,'constraint',[{'atom',11683,'is_subtype'}|[[{'var',11683,'V2'}|[{'type',11683,'integer',[]}]]]]}|[{'type',11683,'constraint',[{'atom',11683,'is_subtype'}|[[{'var',11683,'V3'}|[{'type',11683,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 11689
		'spec' =
		    %% Line 11689
		    [{{'uniform1fv',2},[{'type',11689,'bounded_fun',[{'type',11689,'fun',[{'type',11689,'product',[{'var',11689,'Location'}|[{'var',11689,'Value'}]]}|[{'atom',11689,'ok'}]]}|[[{'type',11689,'constraint',[{'atom',11689,'is_subtype'}|[[{'var',11689,'Location'}|[{'type',11689,'integer',[]}]]]]}|[{'type',11689,'constraint',[{'atom',11689,'is_subtype'}|[[{'var',11689,'Value'}|[{'type',11689,'list',[{'type',11689,'float',[]}]}]]]]}]]]]}]}],
		%% Line 11696
		'spec' =
		    %% Line 11696
		    [{{'uniform2fv',2},[{'type',11696,'bounded_fun',[{'type',11696,'fun',[{'type',11696,'product',[{'var',11696,'Location'}|[{'var',11696,'Value'}]]}|[{'atom',11696,'ok'}]]}|[[{'type',11696,'constraint',[{'atom',11696,'is_subtype'}|[[{'var',11696,'Location'}|[{'type',11696,'integer',[]}]]]]}|[{'type',11696,'constraint',[{'atom',11696,'is_subtype'}|[[{'var',11696,'Value'}|[{'type',11696,'list',[{'type',11696,'tuple',[{'type',11696,'float',[]}|[{'type',11696,'float',[]}]]}]}]]]]}]]]]}]}],
		%% Line 11703
		'spec' =
		    %% Line 11703
		    [{{'uniform3fv',2},[{'type',11703,'bounded_fun',[{'type',11703,'fun',[{'type',11703,'product',[{'var',11703,'Location'}|[{'var',11703,'Value'}]]}|[{'atom',11703,'ok'}]]}|[[{'type',11703,'constraint',[{'atom',11703,'is_subtype'}|[[{'var',11703,'Location'}|[{'type',11703,'integer',[]}]]]]}|[{'type',11703,'constraint',[{'atom',11703,'is_subtype'}|[[{'var',11703,'Value'}|[{'type',11703,'list',[{'type',11703,'tuple',[{'type',11703,'float',[]}|[{'type',11703,'float',[]}|[{'type',11703,'float',[]}]]]}]}]]]]}]]]]}]}],
		%% Line 11710
		'spec' =
		    %% Line 11710
		    [{{'uniform4fv',2},[{'type',11710,'bounded_fun',[{'type',11710,'fun',[{'type',11710,'product',[{'var',11710,'Location'}|[{'var',11710,'Value'}]]}|[{'atom',11710,'ok'}]]}|[[{'type',11710,'constraint',[{'atom',11710,'is_subtype'}|[[{'var',11710,'Location'}|[{'type',11710,'integer',[]}]]]]}|[{'type',11710,'constraint',[{'atom',11710,'is_subtype'}|[[{'var',11710,'Value'}|[{'type',11710,'list',[{'type',11710,'tuple',[{'type',11710,'float',[]}|[{'type',11710,'float',[]}|[{'type',11710,'float',[]}|[{'type',11710,'float',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 11717
		'spec' =
		    %% Line 11717
		    [{{'uniform1iv',2},[{'type',11717,'bounded_fun',[{'type',11717,'fun',[{'type',11717,'product',[{'var',11717,'Location'}|[{'var',11717,'Value'}]]}|[{'atom',11717,'ok'}]]}|[[{'type',11717,'constraint',[{'atom',11717,'is_subtype'}|[[{'var',11717,'Location'}|[{'type',11717,'integer',[]}]]]]}|[{'type',11717,'constraint',[{'atom',11717,'is_subtype'}|[[{'var',11717,'Value'}|[{'type',11717,'list',[{'type',11717,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 11724
		'spec' =
		    %% Line 11724
		    [{{'uniform2iv',2},[{'type',11724,'bounded_fun',[{'type',11724,'fun',[{'type',11724,'product',[{'var',11724,'Location'}|[{'var',11724,'Value'}]]}|[{'atom',11724,'ok'}]]}|[[{'type',11724,'constraint',[{'atom',11724,'is_subtype'}|[[{'var',11724,'Location'}|[{'type',11724,'integer',[]}]]]]}|[{'type',11724,'constraint',[{'atom',11724,'is_subtype'}|[[{'var',11724,'Value'}|[{'type',11724,'list',[{'type',11724,'tuple',[{'type',11724,'integer',[]}|[{'type',11724,'integer',[]}]]}]}]]]]}]]]]}]}],
		%% Line 11731
		'spec' =
		    %% Line 11731
		    [{{'uniform3iv',2},[{'type',11731,'bounded_fun',[{'type',11731,'fun',[{'type',11731,'product',[{'var',11731,'Location'}|[{'var',11731,'Value'}]]}|[{'atom',11731,'ok'}]]}|[[{'type',11731,'constraint',[{'atom',11731,'is_subtype'}|[[{'var',11731,'Location'}|[{'type',11731,'integer',[]}]]]]}|[{'type',11731,'constraint',[{'atom',11731,'is_subtype'}|[[{'var',11731,'Value'}|[{'type',11731,'list',[{'type',11731,'tuple',[{'type',11731,'integer',[]}|[{'type',11731,'integer',[]}|[{'type',11731,'integer',[]}]]]}]}]]]]}]]]]}]}],
		%% Line 11738
		'spec' =
		    %% Line 11738
		    [{{'uniform4iv',2},[{'type',11738,'bounded_fun',[{'type',11738,'fun',[{'type',11738,'product',[{'var',11738,'Location'}|[{'var',11738,'Value'}]]}|[{'atom',11738,'ok'}]]}|[[{'type',11738,'constraint',[{'atom',11738,'is_subtype'}|[[{'var',11738,'Location'}|[{'type',11738,'integer',[]}]]]]}|[{'type',11738,'constraint',[{'atom',11738,'is_subtype'}|[[{'var',11738,'Value'}|[{'type',11738,'list',[{'type',11738,'tuple',[{'type',11738,'integer',[]}|[{'type',11738,'integer',[]}|[{'type',11738,'integer',[]}|[{'type',11738,'integer',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 11745
		'spec' =
		    %% Line 11745
		    [{{'uniformMatrix2fv',3},[{'type',11745,'bounded_fun',[{'type',11745,'fun',[{'type',11745,'product',[{'var',11745,'Location'}|[{'var',11745,'Transpose'}|[{'var',11745,'Value'}]]]}|[{'atom',11745,'ok'}]]}|[[{'type',11745,'constraint',[{'atom',11745,'is_subtype'}|[[{'var',11745,'Location'}|[{'type',11745,'integer',[]}]]]]}|[{'type',11745,'constraint',[{'atom',11745,'is_subtype'}|[[{'var',11745,'Transpose'}|[{'type',11745,'union',[{'integer',11745,0}|[{'integer',11745,1}]]}]]]]}|[{'type',11745,'constraint',[{'atom',11745,'is_subtype'}|[[{'var',11745,'Value'}|[{'type',11745,'list',[{'type',11745,'tuple',[{'type',11745,'float',[]}|[{'type',11745,'float',[]}|[{'type',11745,'float',[]}|[{'type',11745,'float',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 11752
		'spec' =
		    %% Line 11752
		    [{{'uniformMatrix3fv',3},[{'type',11752,'bounded_fun',[{'type',11752,'fun',[{'type',11752,'product',[{'var',11752,'Location'}|[{'var',11752,'Transpose'}|[{'var',11752,'Value'}]]]}|[{'atom',11752,'ok'}]]}|[[{'type',11752,'constraint',[{'atom',11752,'is_subtype'}|[[{'var',11752,'Location'}|[{'type',11752,'integer',[]}]]]]}|[{'type',11752,'constraint',[{'atom',11752,'is_subtype'}|[[{'var',11752,'Transpose'}|[{'type',11752,'union',[{'integer',11752,0}|[{'integer',11752,1}]]}]]]]}|[{'type',11752,'constraint',[{'atom',11752,'is_subtype'}|[[{'var',11752,'Value'}|[{'type',11752,'list',[{'type',11752,'tuple',[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}|[{'type',11752,'float',[]}]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 11759
		'spec' =
		    %% Line 11759
		    [{{'uniformMatrix4fv',3},[{'type',11759,'bounded_fun',[{'type',11759,'fun',[{'type',11759,'product',[{'var',11759,'Location'}|[{'var',11759,'Transpose'}|[{'var',11759,'Value'}]]]}|[{'atom',11759,'ok'}]]}|[[{'type',11759,'constraint',[{'atom',11759,'is_subtype'}|[[{'var',11759,'Location'}|[{'type',11759,'integer',[]}]]]]}|[{'type',11759,'constraint',[{'atom',11759,'is_subtype'}|[[{'var',11759,'Transpose'}|[{'type',11759,'union',[{'integer',11759,0}|[{'integer',11759,1}]]}]]]]}|[{'type',11759,'constraint',[{'atom',11759,'is_subtype'}|[[{'var',11759,'Value'}|[{'type',11759,'list',[{'type',11759,'tuple',[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}|[{'type',11759,'float',[]}]]]]]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 11787
		'spec' =
		    %% Line 11787
		    [{{'validateProgram',1},[{'type',11787,'bounded_fun',[{'type',11787,'fun',[{'type',11787,'product',[{'var',11787,'Program'}]}|[{'atom',11787,'ok'}]]}|[[{'type',11787,'constraint',[{'atom',11787,'is_subtype'}|[[{'var',11787,'Program'}|[{'type',11787,'integer',[]}]]]]}]]]}]}],
		%% Line 11862
		'spec' =
		    %% Line 11862
		    [{{'vertexAttrib1d',2},[{'type',11862,'bounded_fun',[{'type',11862,'fun',[{'type',11862,'product',[{'var',11862,'Index'}|[{'var',11862,'X'}]]}|[{'atom',11862,'ok'}]]}|[[{'type',11862,'constraint',[{'atom',11862,'is_subtype'}|[[{'var',11862,'Index'}|[{'type',11862,'integer',[]}]]]]}|[{'type',11862,'constraint',[{'atom',11862,'is_subtype'}|[[{'var',11862,'X'}|[{'type',11862,'float',[]}]]]]}]]]]}]}],
		%% Line 11867
		'spec' =
		    %% Line 11867
		    [{{'vertexAttrib1dv',2},[{'type',11867,'bounded_fun',[{'type',11867,'fun',[{'type',11867,'product',[{'ann_type',11867,[{'var',11867,'Index'}|[{'type',11867,'integer',[]}]]}|[{'var',11867,'V'}]]}|[{'atom',11867,'ok'}]]}|[[{'type',11867,'constraint',[{'atom',11867,'is_subtype'}|[[{'var',11867,'V'}|[{'type',11867,'tuple',[{'ann_type',11867,[{'var',11867,'X'}|[{'type',11867,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 11872
		'spec' =
		    %% Line 11872
		    [{{'vertexAttrib1f',2},[{'type',11872,'bounded_fun',[{'type',11872,'fun',[{'type',11872,'product',[{'var',11872,'Index'}|[{'var',11872,'X'}]]}|[{'atom',11872,'ok'}]]}|[[{'type',11872,'constraint',[{'atom',11872,'is_subtype'}|[[{'var',11872,'Index'}|[{'type',11872,'integer',[]}]]]]}|[{'type',11872,'constraint',[{'atom',11872,'is_subtype'}|[[{'var',11872,'X'}|[{'type',11872,'float',[]}]]]]}]]]]}]}],
		%% Line 11877
		'spec' =
		    %% Line 11877
		    [{{'vertexAttrib1fv',2},[{'type',11877,'bounded_fun',[{'type',11877,'fun',[{'type',11877,'product',[{'ann_type',11877,[{'var',11877,'Index'}|[{'type',11877,'integer',[]}]]}|[{'var',11877,'V'}]]}|[{'atom',11877,'ok'}]]}|[[{'type',11877,'constraint',[{'atom',11877,'is_subtype'}|[[{'var',11877,'V'}|[{'type',11877,'tuple',[{'ann_type',11877,[{'var',11877,'X'}|[{'type',11877,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 11882
		'spec' =
		    %% Line 11882
		    [{{'vertexAttrib1s',2},[{'type',11882,'bounded_fun',[{'type',11882,'fun',[{'type',11882,'product',[{'var',11882,'Index'}|[{'var',11882,'X'}]]}|[{'atom',11882,'ok'}]]}|[[{'type',11882,'constraint',[{'atom',11882,'is_subtype'}|[[{'var',11882,'Index'}|[{'type',11882,'integer',[]}]]]]}|[{'type',11882,'constraint',[{'atom',11882,'is_subtype'}|[[{'var',11882,'X'}|[{'type',11882,'integer',[]}]]]]}]]]]}]}],
		%% Line 11887
		'spec' =
		    %% Line 11887
		    [{{'vertexAttrib1sv',2},[{'type',11887,'bounded_fun',[{'type',11887,'fun',[{'type',11887,'product',[{'ann_type',11887,[{'var',11887,'Index'}|[{'type',11887,'integer',[]}]]}|[{'var',11887,'V'}]]}|[{'atom',11887,'ok'}]]}|[[{'type',11887,'constraint',[{'atom',11887,'is_subtype'}|[[{'var',11887,'V'}|[{'type',11887,'tuple',[{'ann_type',11887,[{'var',11887,'X'}|[{'type',11887,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 11892
		'spec' =
		    %% Line 11892
		    [{{'vertexAttrib2d',3},[{'type',11892,'bounded_fun',[{'type',11892,'fun',[{'type',11892,'product',[{'var',11892,'Index'}|[{'var',11892,'X'}|[{'var',11892,'Y'}]]]}|[{'atom',11892,'ok'}]]}|[[{'type',11892,'constraint',[{'atom',11892,'is_subtype'}|[[{'var',11892,'Index'}|[{'type',11892,'integer',[]}]]]]}|[{'type',11892,'constraint',[{'atom',11892,'is_subtype'}|[[{'var',11892,'X'}|[{'type',11892,'float',[]}]]]]}|[{'type',11892,'constraint',[{'atom',11892,'is_subtype'}|[[{'var',11892,'Y'}|[{'type',11892,'float',[]}]]]]}]]]]]}]}],
		%% Line 11897
		'spec' =
		    %% Line 11897
		    [{{'vertexAttrib2dv',2},[{'type',11897,'bounded_fun',[{'type',11897,'fun',[{'type',11897,'product',[{'ann_type',11897,[{'var',11897,'Index'}|[{'type',11897,'integer',[]}]]}|[{'var',11897,'V'}]]}|[{'atom',11897,'ok'}]]}|[[{'type',11897,'constraint',[{'atom',11897,'is_subtype'}|[[{'var',11897,'V'}|[{'type',11897,'tuple',[{'ann_type',11897,[{'var',11897,'X'}|[{'type',11897,'float',[]}]]}|[{'ann_type',11897,[{'var',11897,'Y'}|[{'type',11897,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 11902
		'spec' =
		    %% Line 11902
		    [{{'vertexAttrib2f',3},[{'type',11902,'bounded_fun',[{'type',11902,'fun',[{'type',11902,'product',[{'var',11902,'Index'}|[{'var',11902,'X'}|[{'var',11902,'Y'}]]]}|[{'atom',11902,'ok'}]]}|[[{'type',11902,'constraint',[{'atom',11902,'is_subtype'}|[[{'var',11902,'Index'}|[{'type',11902,'integer',[]}]]]]}|[{'type',11902,'constraint',[{'atom',11902,'is_subtype'}|[[{'var',11902,'X'}|[{'type',11902,'float',[]}]]]]}|[{'type',11902,'constraint',[{'atom',11902,'is_subtype'}|[[{'var',11902,'Y'}|[{'type',11902,'float',[]}]]]]}]]]]]}]}],
		%% Line 11907
		'spec' =
		    %% Line 11907
		    [{{'vertexAttrib2fv',2},[{'type',11907,'bounded_fun',[{'type',11907,'fun',[{'type',11907,'product',[{'ann_type',11907,[{'var',11907,'Index'}|[{'type',11907,'integer',[]}]]}|[{'var',11907,'V'}]]}|[{'atom',11907,'ok'}]]}|[[{'type',11907,'constraint',[{'atom',11907,'is_subtype'}|[[{'var',11907,'V'}|[{'type',11907,'tuple',[{'ann_type',11907,[{'var',11907,'X'}|[{'type',11907,'float',[]}]]}|[{'ann_type',11907,[{'var',11907,'Y'}|[{'type',11907,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 11912
		'spec' =
		    %% Line 11912
		    [{{'vertexAttrib2s',3},[{'type',11912,'bounded_fun',[{'type',11912,'fun',[{'type',11912,'product',[{'var',11912,'Index'}|[{'var',11912,'X'}|[{'var',11912,'Y'}]]]}|[{'atom',11912,'ok'}]]}|[[{'type',11912,'constraint',[{'atom',11912,'is_subtype'}|[[{'var',11912,'Index'}|[{'type',11912,'integer',[]}]]]]}|[{'type',11912,'constraint',[{'atom',11912,'is_subtype'}|[[{'var',11912,'X'}|[{'type',11912,'integer',[]}]]]]}|[{'type',11912,'constraint',[{'atom',11912,'is_subtype'}|[[{'var',11912,'Y'}|[{'type',11912,'integer',[]}]]]]}]]]]]}]}],
		%% Line 11917
		'spec' =
		    %% Line 11917
		    [{{'vertexAttrib2sv',2},[{'type',11917,'bounded_fun',[{'type',11917,'fun',[{'type',11917,'product',[{'ann_type',11917,[{'var',11917,'Index'}|[{'type',11917,'integer',[]}]]}|[{'var',11917,'V'}]]}|[{'atom',11917,'ok'}]]}|[[{'type',11917,'constraint',[{'atom',11917,'is_subtype'}|[[{'var',11917,'V'}|[{'type',11917,'tuple',[{'ann_type',11917,[{'var',11917,'X'}|[{'type',11917,'integer',[]}]]}|[{'ann_type',11917,[{'var',11917,'Y'}|[{'type',11917,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 11922
		'spec' =
		    %% Line 11922
		    [{{'vertexAttrib3d',4},[{'type',11922,'bounded_fun',[{'type',11922,'fun',[{'type',11922,'product',[{'var',11922,'Index'}|[{'var',11922,'X'}|[{'var',11922,'Y'}|[{'var',11922,'Z'}]]]]}|[{'atom',11922,'ok'}]]}|[[{'type',11922,'constraint',[{'atom',11922,'is_subtype'}|[[{'var',11922,'Index'}|[{'type',11922,'integer',[]}]]]]}|[{'type',11922,'constraint',[{'atom',11922,'is_subtype'}|[[{'var',11922,'X'}|[{'type',11922,'float',[]}]]]]}|[{'type',11922,'constraint',[{'atom',11922,'is_subtype'}|[[{'var',11922,'Y'}|[{'type',11922,'float',[]}]]]]}|[{'type',11922,'constraint',[{'atom',11922,'is_subtype'}|[[{'var',11922,'Z'}|[{'type',11922,'float',[]}]]]]}]]]]]]}]}],
		%% Line 11927
		'spec' =
		    %% Line 11927
		    [{{'vertexAttrib3dv',2},[{'type',11927,'bounded_fun',[{'type',11927,'fun',[{'type',11927,'product',[{'ann_type',11927,[{'var',11927,'Index'}|[{'type',11927,'integer',[]}]]}|[{'var',11927,'V'}]]}|[{'atom',11927,'ok'}]]}|[[{'type',11927,'constraint',[{'atom',11927,'is_subtype'}|[[{'var',11927,'V'}|[{'type',11927,'tuple',[{'ann_type',11927,[{'var',11927,'X'}|[{'type',11927,'float',[]}]]}|[{'ann_type',11927,[{'var',11927,'Y'}|[{'type',11927,'float',[]}]]}|[{'ann_type',11927,[{'var',11927,'Z'}|[{'type',11927,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 11932
		'spec' =
		    %% Line 11932
		    [{{'vertexAttrib3f',4},[{'type',11932,'bounded_fun',[{'type',11932,'fun',[{'type',11932,'product',[{'var',11932,'Index'}|[{'var',11932,'X'}|[{'var',11932,'Y'}|[{'var',11932,'Z'}]]]]}|[{'atom',11932,'ok'}]]}|[[{'type',11932,'constraint',[{'atom',11932,'is_subtype'}|[[{'var',11932,'Index'}|[{'type',11932,'integer',[]}]]]]}|[{'type',11932,'constraint',[{'atom',11932,'is_subtype'}|[[{'var',11932,'X'}|[{'type',11932,'float',[]}]]]]}|[{'type',11932,'constraint',[{'atom',11932,'is_subtype'}|[[{'var',11932,'Y'}|[{'type',11932,'float',[]}]]]]}|[{'type',11932,'constraint',[{'atom',11932,'is_subtype'}|[[{'var',11932,'Z'}|[{'type',11932,'float',[]}]]]]}]]]]]]}]}],
		%% Line 11937
		'spec' =
		    %% Line 11937
		    [{{'vertexAttrib3fv',2},[{'type',11937,'bounded_fun',[{'type',11937,'fun',[{'type',11937,'product',[{'ann_type',11937,[{'var',11937,'Index'}|[{'type',11937,'integer',[]}]]}|[{'var',11937,'V'}]]}|[{'atom',11937,'ok'}]]}|[[{'type',11937,'constraint',[{'atom',11937,'is_subtype'}|[[{'var',11937,'V'}|[{'type',11937,'tuple',[{'ann_type',11937,[{'var',11937,'X'}|[{'type',11937,'float',[]}]]}|[{'ann_type',11937,[{'var',11937,'Y'}|[{'type',11937,'float',[]}]]}|[{'ann_type',11937,[{'var',11937,'Z'}|[{'type',11937,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 11942
		'spec' =
		    %% Line 11942
		    [{{'vertexAttrib3s',4},[{'type',11942,'bounded_fun',[{'type',11942,'fun',[{'type',11942,'product',[{'var',11942,'Index'}|[{'var',11942,'X'}|[{'var',11942,'Y'}|[{'var',11942,'Z'}]]]]}|[{'atom',11942,'ok'}]]}|[[{'type',11942,'constraint',[{'atom',11942,'is_subtype'}|[[{'var',11942,'Index'}|[{'type',11942,'integer',[]}]]]]}|[{'type',11942,'constraint',[{'atom',11942,'is_subtype'}|[[{'var',11942,'X'}|[{'type',11942,'integer',[]}]]]]}|[{'type',11942,'constraint',[{'atom',11942,'is_subtype'}|[[{'var',11942,'Y'}|[{'type',11942,'integer',[]}]]]]}|[{'type',11942,'constraint',[{'atom',11942,'is_subtype'}|[[{'var',11942,'Z'}|[{'type',11942,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 11947
		'spec' =
		    %% Line 11947
		    [{{'vertexAttrib3sv',2},[{'type',11947,'bounded_fun',[{'type',11947,'fun',[{'type',11947,'product',[{'ann_type',11947,[{'var',11947,'Index'}|[{'type',11947,'integer',[]}]]}|[{'var',11947,'V'}]]}|[{'atom',11947,'ok'}]]}|[[{'type',11947,'constraint',[{'atom',11947,'is_subtype'}|[[{'var',11947,'V'}|[{'type',11947,'tuple',[{'ann_type',11947,[{'var',11947,'X'}|[{'type',11947,'integer',[]}]]}|[{'ann_type',11947,[{'var',11947,'Y'}|[{'type',11947,'integer',[]}]]}|[{'ann_type',11947,[{'var',11947,'Z'}|[{'type',11947,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 11952
		'spec' =
		    %% Line 11952
		    [{{'vertexAttrib4Nbv',2},[{'type',11952,'bounded_fun',[{'type',11952,'fun',[{'type',11952,'product',[{'var',11952,'Index'}|[{'var',11952,'V'}]]}|[{'atom',11952,'ok'}]]}|[[{'type',11952,'constraint',[{'atom',11952,'is_subtype'}|[[{'var',11952,'Index'}|[{'type',11952,'integer',[]}]]]]}|[{'type',11952,'constraint',[{'atom',11952,'is_subtype'}|[[{'var',11952,'V'}|[{'type',11952,'tuple',[{'type',11952,'integer',[]}|[{'type',11952,'integer',[]}|[{'type',11952,'integer',[]}|[{'type',11952,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11958
		'spec' =
		    %% Line 11958
		    [{{'vertexAttrib4Niv',2},[{'type',11958,'bounded_fun',[{'type',11958,'fun',[{'type',11958,'product',[{'var',11958,'Index'}|[{'var',11958,'V'}]]}|[{'atom',11958,'ok'}]]}|[[{'type',11958,'constraint',[{'atom',11958,'is_subtype'}|[[{'var',11958,'Index'}|[{'type',11958,'integer',[]}]]]]}|[{'type',11958,'constraint',[{'atom',11958,'is_subtype'}|[[{'var',11958,'V'}|[{'type',11958,'tuple',[{'type',11958,'integer',[]}|[{'type',11958,'integer',[]}|[{'type',11958,'integer',[]}|[{'type',11958,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11964
		'spec' =
		    %% Line 11964
		    [{{'vertexAttrib4Nsv',2},[{'type',11964,'bounded_fun',[{'type',11964,'fun',[{'type',11964,'product',[{'var',11964,'Index'}|[{'var',11964,'V'}]]}|[{'atom',11964,'ok'}]]}|[[{'type',11964,'constraint',[{'atom',11964,'is_subtype'}|[[{'var',11964,'Index'}|[{'type',11964,'integer',[]}]]]]}|[{'type',11964,'constraint',[{'atom',11964,'is_subtype'}|[[{'var',11964,'V'}|[{'type',11964,'tuple',[{'type',11964,'integer',[]}|[{'type',11964,'integer',[]}|[{'type',11964,'integer',[]}|[{'type',11964,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11970
		'spec' =
		    %% Line 11970
		    [{{'vertexAttrib4Nub',5},[{'type',11970,'bounded_fun',[{'type',11970,'fun',[{'type',11970,'product',[{'var',11970,'Index'}|[{'var',11970,'X'}|[{'var',11970,'Y'}|[{'var',11970,'Z'}|[{'var',11970,'W'}]]]]]}|[{'atom',11970,'ok'}]]}|[[{'type',11970,'constraint',[{'atom',11970,'is_subtype'}|[[{'var',11970,'Index'}|[{'type',11970,'integer',[]}]]]]}|[{'type',11970,'constraint',[{'atom',11970,'is_subtype'}|[[{'var',11970,'X'}|[{'type',11970,'integer',[]}]]]]}|[{'type',11970,'constraint',[{'atom',11970,'is_subtype'}|[[{'var',11970,'Y'}|[{'type',11970,'integer',[]}]]]]}|[{'type',11970,'constraint',[{'atom',11970,'is_subtype'}|[[{'var',11970,'Z'}|[{'type',11970,'integer',[]}]]]]}|[{'type',11970,'constraint',[{'atom',11970,'is_subtype'}|[[{'var',11970,'W'}|[{'type',11970,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 11975
		'spec' =
		    %% Line 11975
		    [{{'vertexAttrib4Nubv',2},[{'type',11975,'bounded_fun',[{'type',11975,'fun',[{'type',11975,'product',[{'ann_type',11975,[{'var',11975,'Index'}|[{'type',11975,'integer',[]}]]}|[{'var',11975,'V'}]]}|[{'atom',11975,'ok'}]]}|[[{'type',11975,'constraint',[{'atom',11975,'is_subtype'}|[[{'var',11975,'V'}|[{'type',11975,'tuple',[{'ann_type',11975,[{'var',11975,'X'}|[{'type',11975,'integer',[]}]]}|[{'ann_type',11975,[{'var',11975,'Y'}|[{'type',11975,'integer',[]}]]}|[{'ann_type',11975,[{'var',11975,'Z'}|[{'type',11975,'integer',[]}]]}|[{'ann_type',11975,[{'var',11975,'W'}|[{'type',11975,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 11980
		'spec' =
		    %% Line 11980
		    [{{'vertexAttrib4Nuiv',2},[{'type',11980,'bounded_fun',[{'type',11980,'fun',[{'type',11980,'product',[{'var',11980,'Index'}|[{'var',11980,'V'}]]}|[{'atom',11980,'ok'}]]}|[[{'type',11980,'constraint',[{'atom',11980,'is_subtype'}|[[{'var',11980,'Index'}|[{'type',11980,'integer',[]}]]]]}|[{'type',11980,'constraint',[{'atom',11980,'is_subtype'}|[[{'var',11980,'V'}|[{'type',11980,'tuple',[{'type',11980,'integer',[]}|[{'type',11980,'integer',[]}|[{'type',11980,'integer',[]}|[{'type',11980,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11986
		'spec' =
		    %% Line 11986
		    [{{'vertexAttrib4Nusv',2},[{'type',11986,'bounded_fun',[{'type',11986,'fun',[{'type',11986,'product',[{'var',11986,'Index'}|[{'var',11986,'V'}]]}|[{'atom',11986,'ok'}]]}|[[{'type',11986,'constraint',[{'atom',11986,'is_subtype'}|[[{'var',11986,'Index'}|[{'type',11986,'integer',[]}]]]]}|[{'type',11986,'constraint',[{'atom',11986,'is_subtype'}|[[{'var',11986,'V'}|[{'type',11986,'tuple',[{'type',11986,'integer',[]}|[{'type',11986,'integer',[]}|[{'type',11986,'integer',[]}|[{'type',11986,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11992
		'spec' =
		    %% Line 11992
		    [{{'vertexAttrib4bv',2},[{'type',11992,'bounded_fun',[{'type',11992,'fun',[{'type',11992,'product',[{'var',11992,'Index'}|[{'var',11992,'V'}]]}|[{'atom',11992,'ok'}]]}|[[{'type',11992,'constraint',[{'atom',11992,'is_subtype'}|[[{'var',11992,'Index'}|[{'type',11992,'integer',[]}]]]]}|[{'type',11992,'constraint',[{'atom',11992,'is_subtype'}|[[{'var',11992,'V'}|[{'type',11992,'tuple',[{'type',11992,'integer',[]}|[{'type',11992,'integer',[]}|[{'type',11992,'integer',[]}|[{'type',11992,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 11998
		'spec' =
		    %% Line 11998
		    [{{'vertexAttrib4d',5},[{'type',11998,'bounded_fun',[{'type',11998,'fun',[{'type',11998,'product',[{'var',11998,'Index'}|[{'var',11998,'X'}|[{'var',11998,'Y'}|[{'var',11998,'Z'}|[{'var',11998,'W'}]]]]]}|[{'atom',11998,'ok'}]]}|[[{'type',11998,'constraint',[{'atom',11998,'is_subtype'}|[[{'var',11998,'Index'}|[{'type',11998,'integer',[]}]]]]}|[{'type',11998,'constraint',[{'atom',11998,'is_subtype'}|[[{'var',11998,'X'}|[{'type',11998,'float',[]}]]]]}|[{'type',11998,'constraint',[{'atom',11998,'is_subtype'}|[[{'var',11998,'Y'}|[{'type',11998,'float',[]}]]]]}|[{'type',11998,'constraint',[{'atom',11998,'is_subtype'}|[[{'var',11998,'Z'}|[{'type',11998,'float',[]}]]]]}|[{'type',11998,'constraint',[{'atom',11998,'is_subtype'}|[[{'var',11998,'W'}|[{'type',11998,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 12003
		'spec' =
		    %% Line 12003
		    [{{'vertexAttrib4dv',2},[{'type',12003,'bounded_fun',[{'type',12003,'fun',[{'type',12003,'product',[{'ann_type',12003,[{'var',12003,'Index'}|[{'type',12003,'integer',[]}]]}|[{'var',12003,'V'}]]}|[{'atom',12003,'ok'}]]}|[[{'type',12003,'constraint',[{'atom',12003,'is_subtype'}|[[{'var',12003,'V'}|[{'type',12003,'tuple',[{'ann_type',12003,[{'var',12003,'X'}|[{'type',12003,'float',[]}]]}|[{'ann_type',12003,[{'var',12003,'Y'}|[{'type',12003,'float',[]}]]}|[{'ann_type',12003,[{'var',12003,'Z'}|[{'type',12003,'float',[]}]]}|[{'ann_type',12003,[{'var',12003,'W'}|[{'type',12003,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 12008
		'spec' =
		    %% Line 12008
		    [{{'vertexAttrib4f',5},[{'type',12008,'bounded_fun',[{'type',12008,'fun',[{'type',12008,'product',[{'var',12008,'Index'}|[{'var',12008,'X'}|[{'var',12008,'Y'}|[{'var',12008,'Z'}|[{'var',12008,'W'}]]]]]}|[{'atom',12008,'ok'}]]}|[[{'type',12008,'constraint',[{'atom',12008,'is_subtype'}|[[{'var',12008,'Index'}|[{'type',12008,'integer',[]}]]]]}|[{'type',12008,'constraint',[{'atom',12008,'is_subtype'}|[[{'var',12008,'X'}|[{'type',12008,'float',[]}]]]]}|[{'type',12008,'constraint',[{'atom',12008,'is_subtype'}|[[{'var',12008,'Y'}|[{'type',12008,'float',[]}]]]]}|[{'type',12008,'constraint',[{'atom',12008,'is_subtype'}|[[{'var',12008,'Z'}|[{'type',12008,'float',[]}]]]]}|[{'type',12008,'constraint',[{'atom',12008,'is_subtype'}|[[{'var',12008,'W'}|[{'type',12008,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 12013
		'spec' =
		    %% Line 12013
		    [{{'vertexAttrib4fv',2},[{'type',12013,'bounded_fun',[{'type',12013,'fun',[{'type',12013,'product',[{'ann_type',12013,[{'var',12013,'Index'}|[{'type',12013,'integer',[]}]]}|[{'var',12013,'V'}]]}|[{'atom',12013,'ok'}]]}|[[{'type',12013,'constraint',[{'atom',12013,'is_subtype'}|[[{'var',12013,'V'}|[{'type',12013,'tuple',[{'ann_type',12013,[{'var',12013,'X'}|[{'type',12013,'float',[]}]]}|[{'ann_type',12013,[{'var',12013,'Y'}|[{'type',12013,'float',[]}]]}|[{'ann_type',12013,[{'var',12013,'Z'}|[{'type',12013,'float',[]}]]}|[{'ann_type',12013,[{'var',12013,'W'}|[{'type',12013,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 12018
		'spec' =
		    %% Line 12018
		    [{{'vertexAttrib4iv',2},[{'type',12018,'bounded_fun',[{'type',12018,'fun',[{'type',12018,'product',[{'var',12018,'Index'}|[{'var',12018,'V'}]]}|[{'atom',12018,'ok'}]]}|[[{'type',12018,'constraint',[{'atom',12018,'is_subtype'}|[[{'var',12018,'Index'}|[{'type',12018,'integer',[]}]]]]}|[{'type',12018,'constraint',[{'atom',12018,'is_subtype'}|[[{'var',12018,'V'}|[{'type',12018,'tuple',[{'type',12018,'integer',[]}|[{'type',12018,'integer',[]}|[{'type',12018,'integer',[]}|[{'type',12018,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12024
		'spec' =
		    %% Line 12024
		    [{{'vertexAttrib4s',5},[{'type',12024,'bounded_fun',[{'type',12024,'fun',[{'type',12024,'product',[{'var',12024,'Index'}|[{'var',12024,'X'}|[{'var',12024,'Y'}|[{'var',12024,'Z'}|[{'var',12024,'W'}]]]]]}|[{'atom',12024,'ok'}]]}|[[{'type',12024,'constraint',[{'atom',12024,'is_subtype'}|[[{'var',12024,'Index'}|[{'type',12024,'integer',[]}]]]]}|[{'type',12024,'constraint',[{'atom',12024,'is_subtype'}|[[{'var',12024,'X'}|[{'type',12024,'integer',[]}]]]]}|[{'type',12024,'constraint',[{'atom',12024,'is_subtype'}|[[{'var',12024,'Y'}|[{'type',12024,'integer',[]}]]]]}|[{'type',12024,'constraint',[{'atom',12024,'is_subtype'}|[[{'var',12024,'Z'}|[{'type',12024,'integer',[]}]]]]}|[{'type',12024,'constraint',[{'atom',12024,'is_subtype'}|[[{'var',12024,'W'}|[{'type',12024,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12029
		'spec' =
		    %% Line 12029
		    [{{'vertexAttrib4sv',2},[{'type',12029,'bounded_fun',[{'type',12029,'fun',[{'type',12029,'product',[{'ann_type',12029,[{'var',12029,'Index'}|[{'type',12029,'integer',[]}]]}|[{'var',12029,'V'}]]}|[{'atom',12029,'ok'}]]}|[[{'type',12029,'constraint',[{'atom',12029,'is_subtype'}|[[{'var',12029,'V'}|[{'type',12029,'tuple',[{'ann_type',12029,[{'var',12029,'X'}|[{'type',12029,'integer',[]}]]}|[{'ann_type',12029,[{'var',12029,'Y'}|[{'type',12029,'integer',[]}]]}|[{'ann_type',12029,[{'var',12029,'Z'}|[{'type',12029,'integer',[]}]]}|[{'ann_type',12029,[{'var',12029,'W'}|[{'type',12029,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 12034
		'spec' =
		    %% Line 12034
		    [{{'vertexAttrib4ubv',2},[{'type',12034,'bounded_fun',[{'type',12034,'fun',[{'type',12034,'product',[{'var',12034,'Index'}|[{'var',12034,'V'}]]}|[{'atom',12034,'ok'}]]}|[[{'type',12034,'constraint',[{'atom',12034,'is_subtype'}|[[{'var',12034,'Index'}|[{'type',12034,'integer',[]}]]]]}|[{'type',12034,'constraint',[{'atom',12034,'is_subtype'}|[[{'var',12034,'V'}|[{'type',12034,'tuple',[{'type',12034,'integer',[]}|[{'type',12034,'integer',[]}|[{'type',12034,'integer',[]}|[{'type',12034,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12040
		'spec' =
		    %% Line 12040
		    [{{'vertexAttrib4uiv',2},[{'type',12040,'bounded_fun',[{'type',12040,'fun',[{'type',12040,'product',[{'var',12040,'Index'}|[{'var',12040,'V'}]]}|[{'atom',12040,'ok'}]]}|[[{'type',12040,'constraint',[{'atom',12040,'is_subtype'}|[[{'var',12040,'Index'}|[{'type',12040,'integer',[]}]]]]}|[{'type',12040,'constraint',[{'atom',12040,'is_subtype'}|[[{'var',12040,'V'}|[{'type',12040,'tuple',[{'type',12040,'integer',[]}|[{'type',12040,'integer',[]}|[{'type',12040,'integer',[]}|[{'type',12040,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12046
		'spec' =
		    %% Line 12046
		    [{{'vertexAttrib4usv',2},[{'type',12046,'bounded_fun',[{'type',12046,'fun',[{'type',12046,'product',[{'var',12046,'Index'}|[{'var',12046,'V'}]]}|[{'atom',12046,'ok'}]]}|[[{'type',12046,'constraint',[{'atom',12046,'is_subtype'}|[[{'var',12046,'Index'}|[{'type',12046,'integer',[]}]]]]}|[{'type',12046,'constraint',[{'atom',12046,'is_subtype'}|[[{'var',12046,'V'}|[{'type',12046,'tuple',[{'type',12046,'integer',[]}|[{'type',12046,'integer',[]}|[{'type',12046,'integer',[]}|[{'type',12046,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12090
		'spec' =
		    %% Line 12090
		    [{{'vertexAttribPointer',6},[{'type',12090,'bounded_fun',[{'type',12090,'fun',[{'type',12090,'product',[{'var',12090,'Index'}|[{'var',12090,'Size'}|[{'var',12090,'Type'}|[{'var',12090,'Normalized'}|[{'var',12090,'Stride'}|[{'var',12090,'Pointer'}]]]]]]}|[{'atom',12090,'ok'}]]}|[[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Index'}|[{'type',12090,'integer',[]}]]]]}|[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Size'}|[{'type',12090,'integer',[]}]]]]}|[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Type'}|[{'type',12090,'enum',[]}]]]]}|[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Normalized'}|[{'type',12090,'union',[{'integer',12090,0}|[{'integer',12090,1}]]}]]]]}|[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Stride'}|[{'type',12090,'integer',[]}]]]]}|[{'type',12090,'constraint',[{'atom',12090,'is_subtype'}|[[{'var',12090,'Pointer'}|[{'type',12090,'union',[{'type',12090,'offset',[]}|[{'type',12090,'mem',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 12099
		'spec' =
		    %% Line 12099
		    [{{'uniformMatrix2x3fv',3},[{'type',12099,'bounded_fun',[{'type',12099,'fun',[{'type',12099,'product',[{'var',12099,'Location'}|[{'var',12099,'Transpose'}|[{'var',12099,'Value'}]]]}|[{'atom',12099,'ok'}]]}|[[{'type',12099,'constraint',[{'atom',12099,'is_subtype'}|[[{'var',12099,'Location'}|[{'type',12099,'integer',[]}]]]]}|[{'type',12099,'constraint',[{'atom',12099,'is_subtype'}|[[{'var',12099,'Transpose'}|[{'type',12099,'union',[{'integer',12099,0}|[{'integer',12099,1}]]}]]]]}|[{'type',12099,'constraint',[{'atom',12099,'is_subtype'}|[[{'var',12099,'Value'}|[{'type',12099,'list',[{'type',12099,'tuple',[{'type',12099,'float',[]}|[{'type',12099,'float',[]}|[{'type',12099,'float',[]}|[{'type',12099,'float',[]}|[{'type',12099,'float',[]}|[{'type',12099,'float',[]}]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12106
		'spec' =
		    %% Line 12106
		    [{{'uniformMatrix3x2fv',3},[{'type',12106,'bounded_fun',[{'type',12106,'fun',[{'type',12106,'product',[{'var',12106,'Location'}|[{'var',12106,'Transpose'}|[{'var',12106,'Value'}]]]}|[{'atom',12106,'ok'}]]}|[[{'type',12106,'constraint',[{'atom',12106,'is_subtype'}|[[{'var',12106,'Location'}|[{'type',12106,'integer',[]}]]]]}|[{'type',12106,'constraint',[{'atom',12106,'is_subtype'}|[[{'var',12106,'Transpose'}|[{'type',12106,'union',[{'integer',12106,0}|[{'integer',12106,1}]]}]]]]}|[{'type',12106,'constraint',[{'atom',12106,'is_subtype'}|[[{'var',12106,'Value'}|[{'type',12106,'list',[{'type',12106,'tuple',[{'type',12106,'float',[]}|[{'type',12106,'float',[]}|[{'type',12106,'float',[]}|[{'type',12106,'float',[]}|[{'type',12106,'float',[]}|[{'type',12106,'float',[]}]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12113
		'spec' =
		    %% Line 12113
		    [{{'uniformMatrix2x4fv',3},[{'type',12113,'bounded_fun',[{'type',12113,'fun',[{'type',12113,'product',[{'var',12113,'Location'}|[{'var',12113,'Transpose'}|[{'var',12113,'Value'}]]]}|[{'atom',12113,'ok'}]]}|[[{'type',12113,'constraint',[{'atom',12113,'is_subtype'}|[[{'var',12113,'Location'}|[{'type',12113,'integer',[]}]]]]}|[{'type',12113,'constraint',[{'atom',12113,'is_subtype'}|[[{'var',12113,'Transpose'}|[{'type',12113,'union',[{'integer',12113,0}|[{'integer',12113,1}]]}]]]]}|[{'type',12113,'constraint',[{'atom',12113,'is_subtype'}|[[{'var',12113,'Value'}|[{'type',12113,'list',[{'type',12113,'tuple',[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}|[{'type',12113,'float',[]}]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12120
		'spec' =
		    %% Line 12120
		    [{{'uniformMatrix4x2fv',3},[{'type',12120,'bounded_fun',[{'type',12120,'fun',[{'type',12120,'product',[{'var',12120,'Location'}|[{'var',12120,'Transpose'}|[{'var',12120,'Value'}]]]}|[{'atom',12120,'ok'}]]}|[[{'type',12120,'constraint',[{'atom',12120,'is_subtype'}|[[{'var',12120,'Location'}|[{'type',12120,'integer',[]}]]]]}|[{'type',12120,'constraint',[{'atom',12120,'is_subtype'}|[[{'var',12120,'Transpose'}|[{'type',12120,'union',[{'integer',12120,0}|[{'integer',12120,1}]]}]]]]}|[{'type',12120,'constraint',[{'atom',12120,'is_subtype'}|[[{'var',12120,'Value'}|[{'type',12120,'list',[{'type',12120,'tuple',[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}|[{'type',12120,'float',[]}]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12127
		'spec' =
		    %% Line 12127
		    [{{'uniformMatrix3x4fv',3},[{'type',12127,'bounded_fun',[{'type',12127,'fun',[{'type',12127,'product',[{'var',12127,'Location'}|[{'var',12127,'Transpose'}|[{'var',12127,'Value'}]]]}|[{'atom',12127,'ok'}]]}|[[{'type',12127,'constraint',[{'atom',12127,'is_subtype'}|[[{'var',12127,'Location'}|[{'type',12127,'integer',[]}]]]]}|[{'type',12127,'constraint',[{'atom',12127,'is_subtype'}|[[{'var',12127,'Transpose'}|[{'type',12127,'union',[{'integer',12127,0}|[{'integer',12127,1}]]}]]]]}|[{'type',12127,'constraint',[{'atom',12127,'is_subtype'}|[[{'var',12127,'Value'}|[{'type',12127,'list',[{'type',12127,'tuple',[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}|[{'type',12127,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12134
		'spec' =
		    %% Line 12134
		    [{{'uniformMatrix4x3fv',3},[{'type',12134,'bounded_fun',[{'type',12134,'fun',[{'type',12134,'product',[{'var',12134,'Location'}|[{'var',12134,'Transpose'}|[{'var',12134,'Value'}]]]}|[{'atom',12134,'ok'}]]}|[[{'type',12134,'constraint',[{'atom',12134,'is_subtype'}|[[{'var',12134,'Location'}|[{'type',12134,'integer',[]}]]]]}|[{'type',12134,'constraint',[{'atom',12134,'is_subtype'}|[[{'var',12134,'Transpose'}|[{'type',12134,'union',[{'integer',12134,0}|[{'integer',12134,1}]]}]]]]}|[{'type',12134,'constraint',[{'atom',12134,'is_subtype'}|[[{'var',12134,'Value'}|[{'type',12134,'list',[{'type',12134,'tuple',[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}|[{'type',12134,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 12142
		'spec' =
		    %% Line 12142
		    [{{'colorMaski',5},[{'type',12142,'bounded_fun',[{'type',12142,'fun',[{'type',12142,'product',[{'var',12142,'Index'}|[{'var',12142,'R'}|[{'var',12142,'G'}|[{'var',12142,'B'}|[{'var',12142,'A'}]]]]]}|[{'atom',12142,'ok'}]]}|[[{'type',12142,'constraint',[{'atom',12142,'is_subtype'}|[[{'var',12142,'Index'}|[{'type',12142,'integer',[]}]]]]}|[{'type',12142,'constraint',[{'atom',12142,'is_subtype'}|[[{'var',12142,'R'}|[{'type',12142,'union',[{'integer',12142,0}|[{'integer',12142,1}]]}]]]]}|[{'type',12142,'constraint',[{'atom',12142,'is_subtype'}|[[{'var',12142,'G'}|[{'type',12142,'union',[{'integer',12142,0}|[{'integer',12142,1}]]}]]]]}|[{'type',12142,'constraint',[{'atom',12142,'is_subtype'}|[[{'var',12142,'B'}|[{'type',12142,'union',[{'integer',12142,0}|[{'integer',12142,1}]]}]]]]}|[{'type',12142,'constraint',[{'atom',12142,'is_subtype'}|[[{'var',12142,'A'}|[{'type',12142,'union',[{'integer',12142,0}|[{'integer',12142,1}]]}]]]]}]]]]]]]}]}],
		%% Line 12148
		'spec' =
		    %% Line 12148
		    [{{'getBooleani_v',2},[{'type',12148,'bounded_fun',[{'type',12148,'fun',[{'type',12148,'product',[{'var',12148,'Target'}|[{'var',12148,'Index'}]]}|[{'type',12148,'list',[{'type',12148,'union',[{'integer',12148,0}|[{'integer',12148,1}]]}]}]]}|[[{'type',12148,'constraint',[{'atom',12148,'is_subtype'}|[[{'var',12148,'Target'}|[{'type',12148,'enum',[]}]]]]}|[{'type',12148,'constraint',[{'atom',12148,'is_subtype'}|[[{'var',12148,'Index'}|[{'type',12148,'integer',[]}]]]]}]]]]}]}],
		%% Line 12154
		'spec' =
		    %% Line 12154
		    [{{'getIntegeri_v',2},[{'type',12154,'bounded_fun',[{'type',12154,'fun',[{'type',12154,'product',[{'var',12154,'Target'}|[{'var',12154,'Index'}]]}|[{'type',12154,'list',[{'type',12154,'integer',[]}]}]]}|[[{'type',12154,'constraint',[{'atom',12154,'is_subtype'}|[[{'var',12154,'Target'}|[{'type',12154,'enum',[]}]]]]}|[{'type',12154,'constraint',[{'atom',12154,'is_subtype'}|[[{'var',12154,'Index'}|[{'type',12154,'integer',[]}]]]]}]]]]}]}],
		%% Line 12160
		'spec' =
		    %% Line 12160
		    [{{'enablei',2},[{'type',12160,'bounded_fun',[{'type',12160,'fun',[{'type',12160,'product',[{'var',12160,'Target'}|[{'var',12160,'Index'}]]}|[{'atom',12160,'ok'}]]}|[[{'type',12160,'constraint',[{'atom',12160,'is_subtype'}|[[{'var',12160,'Target'}|[{'type',12160,'enum',[]}]]]]}|[{'type',12160,'constraint',[{'atom',12160,'is_subtype'}|[[{'var',12160,'Index'}|[{'type',12160,'integer',[]}]]]]}]]]]}]}],
		%% Line 12167
		'spec' =
		    %% Line 12167
		    [{{'disablei',2},[{'type',12167,'bounded_fun',[{'type',12167,'fun',[{'type',12167,'product',[{'var',12167,'Target'}|[{'var',12167,'Index'}]]}|[{'atom',12167,'ok'}]]}|[[{'type',12167,'constraint',[{'atom',12167,'is_subtype'}|[[{'var',12167,'Target'}|[{'type',12167,'enum',[]}]]]]}|[{'type',12167,'constraint',[{'atom',12167,'is_subtype'}|[[{'var',12167,'Index'}|[{'type',12167,'integer',[]}]]]]}]]]]}]}],
		%% Line 12174
		'spec' =
		    %% Line 12174
		    [{{'isEnabledi',2},[{'type',12174,'bounded_fun',[{'type',12174,'fun',[{'type',12174,'product',[{'var',12174,'Target'}|[{'var',12174,'Index'}]]}|[{'type',12174,'union',[{'integer',12174,0}|[{'integer',12174,1}]]}]]}|[[{'type',12174,'constraint',[{'atom',12174,'is_subtype'}|[[{'var',12174,'Target'}|[{'type',12174,'enum',[]}]]]]}|[{'type',12174,'constraint',[{'atom',12174,'is_subtype'}|[[{'var',12174,'Index'}|[{'type',12174,'integer',[]}]]]]}]]]]}]}],
		%% Line 12202
		'spec' =
		    %% Line 12202
		    [{{'beginTransformFeedback',1},[{'type',12202,'bounded_fun',[{'type',12202,'fun',[{'type',12202,'product',[{'var',12202,'PrimitiveMode'}]}|[{'atom',12202,'ok'}]]}|[[{'type',12202,'constraint',[{'atom',12202,'is_subtype'}|[[{'var',12202,'PrimitiveMode'}|[{'type',12202,'enum',[]}]]]]}]]]}]}],
		%% Line 12208
		'spec' =
		    %% Line 12208
		    [{{'endTransformFeedback',0},[{'type',12208,'fun',[{'type',12208,'product',[]}|[{'atom',12208,'ok'}]]}]}],
		%% Line 12227
		'spec' =
		    %% Line 12227
		    [{{'bindBufferRange',5},[{'type',12227,'bounded_fun',[{'type',12227,'fun',[{'type',12227,'product',[{'var',12227,'Target'}|[{'var',12227,'Index'}|[{'var',12227,'Buffer'}|[{'var',12227,'Offset'}|[{'var',12227,'Size'}]]]]]}|[{'atom',12227,'ok'}]]}|[[{'type',12227,'constraint',[{'atom',12227,'is_subtype'}|[[{'var',12227,'Target'}|[{'type',12227,'enum',[]}]]]]}|[{'type',12227,'constraint',[{'atom',12227,'is_subtype'}|[[{'var',12227,'Index'}|[{'type',12227,'integer',[]}]]]]}|[{'type',12227,'constraint',[{'atom',12227,'is_subtype'}|[[{'var',12227,'Buffer'}|[{'type',12227,'integer',[]}]]]]}|[{'type',12227,'constraint',[{'atom',12227,'is_subtype'}|[[{'var',12227,'Offset'}|[{'type',12227,'integer',[]}]]]]}|[{'type',12227,'constraint',[{'atom',12227,'is_subtype'}|[[{'var',12227,'Size'}|[{'type',12227,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12242
		'spec' =
		    %% Line 12242
		    [{{'bindBufferBase',3},[{'type',12242,'bounded_fun',[{'type',12242,'fun',[{'type',12242,'product',[{'var',12242,'Target'}|[{'var',12242,'Index'}|[{'var',12242,'Buffer'}]]]}|[{'atom',12242,'ok'}]]}|[[{'type',12242,'constraint',[{'atom',12242,'is_subtype'}|[[{'var',12242,'Target'}|[{'type',12242,'enum',[]}]]]]}|[{'type',12242,'constraint',[{'atom',12242,'is_subtype'}|[[{'var',12242,'Index'}|[{'type',12242,'integer',[]}]]]]}|[{'type',12242,'constraint',[{'atom',12242,'is_subtype'}|[[{'var',12242,'Buffer'}|[{'type',12242,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12280
		'spec' =
		    %% Line 12280
		    [{{'transformFeedbackVaryings',3},[{'type',12280,'bounded_fun',[{'type',12280,'fun',[{'type',12280,'product',[{'var',12280,'Program'}|[{'var',12280,'Varyings'}|[{'var',12280,'BufferMode'}]]]}|[{'atom',12280,'ok'}]]}|[[{'type',12280,'constraint',[{'atom',12280,'is_subtype'}|[[{'var',12280,'Program'}|[{'type',12280,'integer',[]}]]]]}|[{'type',12280,'constraint',[{'atom',12280,'is_subtype'}|[[{'var',12280,'Varyings'}|[{'type',12280,'list',[{'type',12280,'string',[]}]}]]]]}|[{'type',12280,'constraint',[{'atom',12280,'is_subtype'}|[[{'var',12280,'BufferMode'}|[{'type',12280,'enum',[]}]]]]}]]]]]}]}],
		%% Line 12314
		'spec' =
		    %% Line 12314
		    [{{'getTransformFeedbackVarying',3},[{'type',12314,'bounded_fun',[{'type',12314,'fun',[{'type',12314,'product',[{'var',12314,'Program'}|[{'var',12314,'Index'}|[{'var',12314,'BufSize'}]]]}|[{'type',12314,'tuple',[{'ann_type',12314,[{'var',12314,'Size'}|[{'type',12314,'integer',[]}]]}|[{'ann_type',12314,[{'var',12314,'Type'}|[{'type',12314,'enum',[]}]]}|[{'ann_type',12314,[{'var',12314,'Name'}|[{'type',12314,'string',[]}]]}]]]}]]}|[[{'type',12314,'constraint',[{'atom',12314,'is_subtype'}|[[{'var',12314,'Program'}|[{'type',12314,'integer',[]}]]]]}|[{'type',12314,'constraint',[{'atom',12314,'is_subtype'}|[[{'var',12314,'Index'}|[{'type',12314,'integer',[]}]]]]}|[{'type',12314,'constraint',[{'atom',12314,'is_subtype'}|[[{'var',12314,'BufSize'}|[{'type',12314,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12329
		'spec' =
		    %% Line 12329
		    [{{'clampColor',2},[{'type',12329,'bounded_fun',[{'type',12329,'fun',[{'type',12329,'product',[{'var',12329,'Target'}|[{'var',12329,'Clamp'}]]}|[{'atom',12329,'ok'}]]}|[[{'type',12329,'constraint',[{'atom',12329,'is_subtype'}|[[{'var',12329,'Target'}|[{'type',12329,'enum',[]}]]]]}|[{'type',12329,'constraint',[{'atom',12329,'is_subtype'}|[[{'var',12329,'Clamp'}|[{'type',12329,'enum',[]}]]]]}]]]]}]}],
		%% Line 12361
		'spec' =
		    %% Line 12361
		    [{{'beginConditionalRender',2},[{'type',12361,'bounded_fun',[{'type',12361,'fun',[{'type',12361,'product',[{'var',12361,'Id'}|[{'var',12361,'Mode'}]]}|[{'atom',12361,'ok'}]]}|[[{'type',12361,'constraint',[{'atom',12361,'is_subtype'}|[[{'var',12361,'Id'}|[{'type',12361,'integer',[]}]]]]}|[{'type',12361,'constraint',[{'atom',12361,'is_subtype'}|[[{'var',12361,'Mode'}|[{'type',12361,'enum',[]}]]]]}]]]]}]}],
		%% Line 12367
		'spec' =
		    %% Line 12367
		    [{{'endConditionalRender',0},[{'type',12367,'fun',[{'type',12367,'product',[]}|[{'atom',12367,'ok'}]]}]}],
		%% Line 12374
		'spec' =
		    %% Line 12374
		    [{{'vertexAttribIPointer',5},[{'type',12374,'bounded_fun',[{'type',12374,'fun',[{'type',12374,'product',[{'var',12374,'Index'}|[{'var',12374,'Size'}|[{'var',12374,'Type'}|[{'var',12374,'Stride'}|[{'var',12374,'Pointer'}]]]]]}|[{'atom',12374,'ok'}]]}|[[{'type',12374,'constraint',[{'atom',12374,'is_subtype'}|[[{'var',12374,'Index'}|[{'type',12374,'integer',[]}]]]]}|[{'type',12374,'constraint',[{'atom',12374,'is_subtype'}|[[{'var',12374,'Size'}|[{'type',12374,'integer',[]}]]]]}|[{'type',12374,'constraint',[{'atom',12374,'is_subtype'}|[[{'var',12374,'Type'}|[{'type',12374,'enum',[]}]]]]}|[{'type',12374,'constraint',[{'atom',12374,'is_subtype'}|[[{'var',12374,'Stride'}|[{'type',12374,'integer',[]}]]]]}|[{'type',12374,'constraint',[{'atom',12374,'is_subtype'}|[[{'var',12374,'Pointer'}|[{'type',12374,'union',[{'type',12374,'offset',[]}|[{'type',12374,'mem',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 12383
		'spec' =
		    %% Line 12383
		    [{{'getVertexAttribIiv',2},[{'type',12383,'bounded_fun',[{'type',12383,'fun',[{'type',12383,'product',[{'var',12383,'Index'}|[{'var',12383,'Pname'}]]}|[{'type',12383,'tuple',[{'type',12383,'integer',[]}|[{'type',12383,'integer',[]}|[{'type',12383,'integer',[]}|[{'type',12383,'integer',[]}]]]]}]]}|[[{'type',12383,'constraint',[{'atom',12383,'is_subtype'}|[[{'var',12383,'Index'}|[{'type',12383,'integer',[]}]]]]}|[{'type',12383,'constraint',[{'atom',12383,'is_subtype'}|[[{'var',12383,'Pname'}|[{'type',12383,'enum',[]}]]]]}]]]]}]}],
		%% Line 12390
		'spec' =
		    %% Line 12390
		    [{{'getVertexAttribIuiv',2},[{'type',12390,'bounded_fun',[{'type',12390,'fun',[{'type',12390,'product',[{'var',12390,'Index'}|[{'var',12390,'Pname'}]]}|[{'type',12390,'tuple',[{'type',12390,'integer',[]}|[{'type',12390,'integer',[]}|[{'type',12390,'integer',[]}|[{'type',12390,'integer',[]}]]]]}]]}|[[{'type',12390,'constraint',[{'atom',12390,'is_subtype'}|[[{'var',12390,'Index'}|[{'type',12390,'integer',[]}]]]]}|[{'type',12390,'constraint',[{'atom',12390,'is_subtype'}|[[{'var',12390,'Pname'}|[{'type',12390,'enum',[]}]]]]}]]]]}]}],
		%% Line 12396
		'spec' =
		    %% Line 12396
		    [{{'vertexAttribI1i',2},[{'type',12396,'bounded_fun',[{'type',12396,'fun',[{'type',12396,'product',[{'var',12396,'Index'}|[{'var',12396,'X'}]]}|[{'atom',12396,'ok'}]]}|[[{'type',12396,'constraint',[{'atom',12396,'is_subtype'}|[[{'var',12396,'Index'}|[{'type',12396,'integer',[]}]]]]}|[{'type',12396,'constraint',[{'atom',12396,'is_subtype'}|[[{'var',12396,'X'}|[{'type',12396,'integer',[]}]]]]}]]]]}]}],
		%% Line 12402
		'spec' =
		    %% Line 12402
		    [{{'vertexAttribI2i',3},[{'type',12402,'bounded_fun',[{'type',12402,'fun',[{'type',12402,'product',[{'var',12402,'Index'}|[{'var',12402,'X'}|[{'var',12402,'Y'}]]]}|[{'atom',12402,'ok'}]]}|[[{'type',12402,'constraint',[{'atom',12402,'is_subtype'}|[[{'var',12402,'Index'}|[{'type',12402,'integer',[]}]]]]}|[{'type',12402,'constraint',[{'atom',12402,'is_subtype'}|[[{'var',12402,'X'}|[{'type',12402,'integer',[]}]]]]}|[{'type',12402,'constraint',[{'atom',12402,'is_subtype'}|[[{'var',12402,'Y'}|[{'type',12402,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12408
		'spec' =
		    %% Line 12408
		    [{{'vertexAttribI3i',4},[{'type',12408,'bounded_fun',[{'type',12408,'fun',[{'type',12408,'product',[{'var',12408,'Index'}|[{'var',12408,'X'}|[{'var',12408,'Y'}|[{'var',12408,'Z'}]]]]}|[{'atom',12408,'ok'}]]}|[[{'type',12408,'constraint',[{'atom',12408,'is_subtype'}|[[{'var',12408,'Index'}|[{'type',12408,'integer',[]}]]]]}|[{'type',12408,'constraint',[{'atom',12408,'is_subtype'}|[[{'var',12408,'X'}|[{'type',12408,'integer',[]}]]]]}|[{'type',12408,'constraint',[{'atom',12408,'is_subtype'}|[[{'var',12408,'Y'}|[{'type',12408,'integer',[]}]]]]}|[{'type',12408,'constraint',[{'atom',12408,'is_subtype'}|[[{'var',12408,'Z'}|[{'type',12408,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12414
		'spec' =
		    %% Line 12414
		    [{{'vertexAttribI4i',5},[{'type',12414,'bounded_fun',[{'type',12414,'fun',[{'type',12414,'product',[{'var',12414,'Index'}|[{'var',12414,'X'}|[{'var',12414,'Y'}|[{'var',12414,'Z'}|[{'var',12414,'W'}]]]]]}|[{'atom',12414,'ok'}]]}|[[{'type',12414,'constraint',[{'atom',12414,'is_subtype'}|[[{'var',12414,'Index'}|[{'type',12414,'integer',[]}]]]]}|[{'type',12414,'constraint',[{'atom',12414,'is_subtype'}|[[{'var',12414,'X'}|[{'type',12414,'integer',[]}]]]]}|[{'type',12414,'constraint',[{'atom',12414,'is_subtype'}|[[{'var',12414,'Y'}|[{'type',12414,'integer',[]}]]]]}|[{'type',12414,'constraint',[{'atom',12414,'is_subtype'}|[[{'var',12414,'Z'}|[{'type',12414,'integer',[]}]]]]}|[{'type',12414,'constraint',[{'atom',12414,'is_subtype'}|[[{'var',12414,'W'}|[{'type',12414,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12420
		'spec' =
		    %% Line 12420
		    [{{'vertexAttribI1ui',2},[{'type',12420,'bounded_fun',[{'type',12420,'fun',[{'type',12420,'product',[{'var',12420,'Index'}|[{'var',12420,'X'}]]}|[{'atom',12420,'ok'}]]}|[[{'type',12420,'constraint',[{'atom',12420,'is_subtype'}|[[{'var',12420,'Index'}|[{'type',12420,'integer',[]}]]]]}|[{'type',12420,'constraint',[{'atom',12420,'is_subtype'}|[[{'var',12420,'X'}|[{'type',12420,'integer',[]}]]]]}]]]]}]}],
		%% Line 12426
		'spec' =
		    %% Line 12426
		    [{{'vertexAttribI2ui',3},[{'type',12426,'bounded_fun',[{'type',12426,'fun',[{'type',12426,'product',[{'var',12426,'Index'}|[{'var',12426,'X'}|[{'var',12426,'Y'}]]]}|[{'atom',12426,'ok'}]]}|[[{'type',12426,'constraint',[{'atom',12426,'is_subtype'}|[[{'var',12426,'Index'}|[{'type',12426,'integer',[]}]]]]}|[{'type',12426,'constraint',[{'atom',12426,'is_subtype'}|[[{'var',12426,'X'}|[{'type',12426,'integer',[]}]]]]}|[{'type',12426,'constraint',[{'atom',12426,'is_subtype'}|[[{'var',12426,'Y'}|[{'type',12426,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12432
		'spec' =
		    %% Line 12432
		    [{{'vertexAttribI3ui',4},[{'type',12432,'bounded_fun',[{'type',12432,'fun',[{'type',12432,'product',[{'var',12432,'Index'}|[{'var',12432,'X'}|[{'var',12432,'Y'}|[{'var',12432,'Z'}]]]]}|[{'atom',12432,'ok'}]]}|[[{'type',12432,'constraint',[{'atom',12432,'is_subtype'}|[[{'var',12432,'Index'}|[{'type',12432,'integer',[]}]]]]}|[{'type',12432,'constraint',[{'atom',12432,'is_subtype'}|[[{'var',12432,'X'}|[{'type',12432,'integer',[]}]]]]}|[{'type',12432,'constraint',[{'atom',12432,'is_subtype'}|[[{'var',12432,'Y'}|[{'type',12432,'integer',[]}]]]]}|[{'type',12432,'constraint',[{'atom',12432,'is_subtype'}|[[{'var',12432,'Z'}|[{'type',12432,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12438
		'spec' =
		    %% Line 12438
		    [{{'vertexAttribI4ui',5},[{'type',12438,'bounded_fun',[{'type',12438,'fun',[{'type',12438,'product',[{'var',12438,'Index'}|[{'var',12438,'X'}|[{'var',12438,'Y'}|[{'var',12438,'Z'}|[{'var',12438,'W'}]]]]]}|[{'atom',12438,'ok'}]]}|[[{'type',12438,'constraint',[{'atom',12438,'is_subtype'}|[[{'var',12438,'Index'}|[{'type',12438,'integer',[]}]]]]}|[{'type',12438,'constraint',[{'atom',12438,'is_subtype'}|[[{'var',12438,'X'}|[{'type',12438,'integer',[]}]]]]}|[{'type',12438,'constraint',[{'atom',12438,'is_subtype'}|[[{'var',12438,'Y'}|[{'type',12438,'integer',[]}]]]]}|[{'type',12438,'constraint',[{'atom',12438,'is_subtype'}|[[{'var',12438,'Z'}|[{'type',12438,'integer',[]}]]]]}|[{'type',12438,'constraint',[{'atom',12438,'is_subtype'}|[[{'var',12438,'W'}|[{'type',12438,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12443
		'spec' =
		    %% Line 12443
		    [{{'vertexAttribI1iv',2},[{'type',12443,'bounded_fun',[{'type',12443,'fun',[{'type',12443,'product',[{'ann_type',12443,[{'var',12443,'Index'}|[{'type',12443,'integer',[]}]]}|[{'var',12443,'V'}]]}|[{'atom',12443,'ok'}]]}|[[{'type',12443,'constraint',[{'atom',12443,'is_subtype'}|[[{'var',12443,'V'}|[{'type',12443,'tuple',[{'ann_type',12443,[{'var',12443,'X'}|[{'type',12443,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 12447
		'spec' =
		    %% Line 12447
		    [{{'vertexAttribI2iv',2},[{'type',12447,'bounded_fun',[{'type',12447,'fun',[{'type',12447,'product',[{'ann_type',12447,[{'var',12447,'Index'}|[{'type',12447,'integer',[]}]]}|[{'var',12447,'V'}]]}|[{'atom',12447,'ok'}]]}|[[{'type',12447,'constraint',[{'atom',12447,'is_subtype'}|[[{'var',12447,'V'}|[{'type',12447,'tuple',[{'ann_type',12447,[{'var',12447,'X'}|[{'type',12447,'integer',[]}]]}|[{'ann_type',12447,[{'var',12447,'Y'}|[{'type',12447,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 12451
		'spec' =
		    %% Line 12451
		    [{{'vertexAttribI3iv',2},[{'type',12451,'bounded_fun',[{'type',12451,'fun',[{'type',12451,'product',[{'ann_type',12451,[{'var',12451,'Index'}|[{'type',12451,'integer',[]}]]}|[{'var',12451,'V'}]]}|[{'atom',12451,'ok'}]]}|[[{'type',12451,'constraint',[{'atom',12451,'is_subtype'}|[[{'var',12451,'V'}|[{'type',12451,'tuple',[{'ann_type',12451,[{'var',12451,'X'}|[{'type',12451,'integer',[]}]]}|[{'ann_type',12451,[{'var',12451,'Y'}|[{'type',12451,'integer',[]}]]}|[{'ann_type',12451,[{'var',12451,'Z'}|[{'type',12451,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 12455
		'spec' =
		    %% Line 12455
		    [{{'vertexAttribI4iv',2},[{'type',12455,'bounded_fun',[{'type',12455,'fun',[{'type',12455,'product',[{'ann_type',12455,[{'var',12455,'Index'}|[{'type',12455,'integer',[]}]]}|[{'var',12455,'V'}]]}|[{'atom',12455,'ok'}]]}|[[{'type',12455,'constraint',[{'atom',12455,'is_subtype'}|[[{'var',12455,'V'}|[{'type',12455,'tuple',[{'ann_type',12455,[{'var',12455,'X'}|[{'type',12455,'integer',[]}]]}|[{'ann_type',12455,[{'var',12455,'Y'}|[{'type',12455,'integer',[]}]]}|[{'ann_type',12455,[{'var',12455,'Z'}|[{'type',12455,'integer',[]}]]}|[{'ann_type',12455,[{'var',12455,'W'}|[{'type',12455,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 12459
		'spec' =
		    %% Line 12459
		    [{{'vertexAttribI1uiv',2},[{'type',12459,'bounded_fun',[{'type',12459,'fun',[{'type',12459,'product',[{'ann_type',12459,[{'var',12459,'Index'}|[{'type',12459,'integer',[]}]]}|[{'var',12459,'V'}]]}|[{'atom',12459,'ok'}]]}|[[{'type',12459,'constraint',[{'atom',12459,'is_subtype'}|[[{'var',12459,'V'}|[{'type',12459,'tuple',[{'ann_type',12459,[{'var',12459,'X'}|[{'type',12459,'integer',[]}]]}]}]]]]}]]]}]}],
		%% Line 12463
		'spec' =
		    %% Line 12463
		    [{{'vertexAttribI2uiv',2},[{'type',12463,'bounded_fun',[{'type',12463,'fun',[{'type',12463,'product',[{'ann_type',12463,[{'var',12463,'Index'}|[{'type',12463,'integer',[]}]]}|[{'var',12463,'V'}]]}|[{'atom',12463,'ok'}]]}|[[{'type',12463,'constraint',[{'atom',12463,'is_subtype'}|[[{'var',12463,'V'}|[{'type',12463,'tuple',[{'ann_type',12463,[{'var',12463,'X'}|[{'type',12463,'integer',[]}]]}|[{'ann_type',12463,[{'var',12463,'Y'}|[{'type',12463,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 12467
		'spec' =
		    %% Line 12467
		    [{{'vertexAttribI3uiv',2},[{'type',12467,'bounded_fun',[{'type',12467,'fun',[{'type',12467,'product',[{'ann_type',12467,[{'var',12467,'Index'}|[{'type',12467,'integer',[]}]]}|[{'var',12467,'V'}]]}|[{'atom',12467,'ok'}]]}|[[{'type',12467,'constraint',[{'atom',12467,'is_subtype'}|[[{'var',12467,'V'}|[{'type',12467,'tuple',[{'ann_type',12467,[{'var',12467,'X'}|[{'type',12467,'integer',[]}]]}|[{'ann_type',12467,[{'var',12467,'Y'}|[{'type',12467,'integer',[]}]]}|[{'ann_type',12467,[{'var',12467,'Z'}|[{'type',12467,'integer',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 12471
		'spec' =
		    %% Line 12471
		    [{{'vertexAttribI4uiv',2},[{'type',12471,'bounded_fun',[{'type',12471,'fun',[{'type',12471,'product',[{'ann_type',12471,[{'var',12471,'Index'}|[{'type',12471,'integer',[]}]]}|[{'var',12471,'V'}]]}|[{'atom',12471,'ok'}]]}|[[{'type',12471,'constraint',[{'atom',12471,'is_subtype'}|[[{'var',12471,'V'}|[{'type',12471,'tuple',[{'ann_type',12471,[{'var',12471,'X'}|[{'type',12471,'integer',[]}]]}|[{'ann_type',12471,[{'var',12471,'Y'}|[{'type',12471,'integer',[]}]]}|[{'ann_type',12471,[{'var',12471,'Z'}|[{'type',12471,'integer',[]}]]}|[{'ann_type',12471,[{'var',12471,'W'}|[{'type',12471,'integer',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 12476
		'spec' =
		    %% Line 12476
		    [{{'vertexAttribI4bv',2},[{'type',12476,'bounded_fun',[{'type',12476,'fun',[{'type',12476,'product',[{'var',12476,'Index'}|[{'var',12476,'V'}]]}|[{'atom',12476,'ok'}]]}|[[{'type',12476,'constraint',[{'atom',12476,'is_subtype'}|[[{'var',12476,'Index'}|[{'type',12476,'integer',[]}]]]]}|[{'type',12476,'constraint',[{'atom',12476,'is_subtype'}|[[{'var',12476,'V'}|[{'type',12476,'tuple',[{'type',12476,'integer',[]}|[{'type',12476,'integer',[]}|[{'type',12476,'integer',[]}|[{'type',12476,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12482
		'spec' =
		    %% Line 12482
		    [{{'vertexAttribI4sv',2},[{'type',12482,'bounded_fun',[{'type',12482,'fun',[{'type',12482,'product',[{'var',12482,'Index'}|[{'var',12482,'V'}]]}|[{'atom',12482,'ok'}]]}|[[{'type',12482,'constraint',[{'atom',12482,'is_subtype'}|[[{'var',12482,'Index'}|[{'type',12482,'integer',[]}]]]]}|[{'type',12482,'constraint',[{'atom',12482,'is_subtype'}|[[{'var',12482,'V'}|[{'type',12482,'tuple',[{'type',12482,'integer',[]}|[{'type',12482,'integer',[]}|[{'type',12482,'integer',[]}|[{'type',12482,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12488
		'spec' =
		    %% Line 12488
		    [{{'vertexAttribI4ubv',2},[{'type',12488,'bounded_fun',[{'type',12488,'fun',[{'type',12488,'product',[{'var',12488,'Index'}|[{'var',12488,'V'}]]}|[{'atom',12488,'ok'}]]}|[[{'type',12488,'constraint',[{'atom',12488,'is_subtype'}|[[{'var',12488,'Index'}|[{'type',12488,'integer',[]}]]]]}|[{'type',12488,'constraint',[{'atom',12488,'is_subtype'}|[[{'var',12488,'V'}|[{'type',12488,'tuple',[{'type',12488,'integer',[]}|[{'type',12488,'integer',[]}|[{'type',12488,'integer',[]}|[{'type',12488,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12494
		'spec' =
		    %% Line 12494
		    [{{'vertexAttribI4usv',2},[{'type',12494,'bounded_fun',[{'type',12494,'fun',[{'type',12494,'product',[{'var',12494,'Index'}|[{'var',12494,'V'}]]}|[{'atom',12494,'ok'}]]}|[[{'type',12494,'constraint',[{'atom',12494,'is_subtype'}|[[{'var',12494,'Index'}|[{'type',12494,'integer',[]}]]]]}|[{'type',12494,'constraint',[{'atom',12494,'is_subtype'}|[[{'var',12494,'V'}|[{'type',12494,'tuple',[{'type',12494,'integer',[]}|[{'type',12494,'integer',[]}|[{'type',12494,'integer',[]}|[{'type',12494,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 12500
		'spec' =
		    %% Line 12500
		    [{{'getUniformuiv',2},[{'type',12500,'bounded_fun',[{'type',12500,'fun',[{'type',12500,'product',[{'var',12500,'Program'}|[{'var',12500,'Location'}]]}|[{'type',12500,'tuple',[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}|[{'type',12500,'integer',[]}]]]]]]]]]]]]]]]]}]]}|[[{'type',12500,'constraint',[{'atom',12500,'is_subtype'}|[[{'var',12500,'Program'}|[{'type',12500,'integer',[]}]]]]}|[{'type',12500,'constraint',[{'atom',12500,'is_subtype'}|[[{'var',12500,'Location'}|[{'type',12500,'integer',[]}]]]]}]]]]}]}],
		%% Line 12527
		'spec' =
		    %% Line 12527
		    [{{'bindFragDataLocation',3},[{'type',12527,'bounded_fun',[{'type',12527,'fun',[{'type',12527,'product',[{'var',12527,'Program'}|[{'var',12527,'Color'}|[{'var',12527,'Name'}]]]}|[{'atom',12527,'ok'}]]}|[[{'type',12527,'constraint',[{'atom',12527,'is_subtype'}|[[{'var',12527,'Program'}|[{'type',12527,'integer',[]}]]]]}|[{'type',12527,'constraint',[{'atom',12527,'is_subtype'}|[[{'var',12527,'Color'}|[{'type',12527,'integer',[]}]]]]}|[{'type',12527,'constraint',[{'atom',12527,'is_subtype'}|[[{'var',12527,'Name'}|[{'type',12527,'string',[]}]]]]}]]]]]}]}],
		%% Line 12540
		'spec' =
		    %% Line 12540
		    [{{'getFragDataLocation',2},[{'type',12540,'bounded_fun',[{'type',12540,'fun',[{'type',12540,'product',[{'var',12540,'Program'}|[{'var',12540,'Name'}]]}|[{'type',12540,'integer',[]}]]}|[[{'type',12540,'constraint',[{'atom',12540,'is_subtype'}|[[{'var',12540,'Program'}|[{'type',12540,'integer',[]}]]]]}|[{'type',12540,'constraint',[{'atom',12540,'is_subtype'}|[[{'var',12540,'Name'}|[{'type',12540,'string',[]}]]]]}]]]]}]}],
		%% Line 12546
		'spec' =
		    %% Line 12546
		    [{{'uniform1ui',2},[{'type',12546,'bounded_fun',[{'type',12546,'fun',[{'type',12546,'product',[{'var',12546,'Location'}|[{'var',12546,'V0'}]]}|[{'atom',12546,'ok'}]]}|[[{'type',12546,'constraint',[{'atom',12546,'is_subtype'}|[[{'var',12546,'Location'}|[{'type',12546,'integer',[]}]]]]}|[{'type',12546,'constraint',[{'atom',12546,'is_subtype'}|[[{'var',12546,'V0'}|[{'type',12546,'integer',[]}]]]]}]]]]}]}],
		%% Line 12552
		'spec' =
		    %% Line 12552
		    [{{'uniform2ui',3},[{'type',12552,'bounded_fun',[{'type',12552,'fun',[{'type',12552,'product',[{'var',12552,'Location'}|[{'var',12552,'V0'}|[{'var',12552,'V1'}]]]}|[{'atom',12552,'ok'}]]}|[[{'type',12552,'constraint',[{'atom',12552,'is_subtype'}|[[{'var',12552,'Location'}|[{'type',12552,'integer',[]}]]]]}|[{'type',12552,'constraint',[{'atom',12552,'is_subtype'}|[[{'var',12552,'V0'}|[{'type',12552,'integer',[]}]]]]}|[{'type',12552,'constraint',[{'atom',12552,'is_subtype'}|[[{'var',12552,'V1'}|[{'type',12552,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12558
		'spec' =
		    %% Line 12558
		    [{{'uniform3ui',4},[{'type',12558,'bounded_fun',[{'type',12558,'fun',[{'type',12558,'product',[{'var',12558,'Location'}|[{'var',12558,'V0'}|[{'var',12558,'V1'}|[{'var',12558,'V2'}]]]]}|[{'atom',12558,'ok'}]]}|[[{'type',12558,'constraint',[{'atom',12558,'is_subtype'}|[[{'var',12558,'Location'}|[{'type',12558,'integer',[]}]]]]}|[{'type',12558,'constraint',[{'atom',12558,'is_subtype'}|[[{'var',12558,'V0'}|[{'type',12558,'integer',[]}]]]]}|[{'type',12558,'constraint',[{'atom',12558,'is_subtype'}|[[{'var',12558,'V1'}|[{'type',12558,'integer',[]}]]]]}|[{'type',12558,'constraint',[{'atom',12558,'is_subtype'}|[[{'var',12558,'V2'}|[{'type',12558,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12564
		'spec' =
		    %% Line 12564
		    [{{'uniform4ui',5},[{'type',12564,'bounded_fun',[{'type',12564,'fun',[{'type',12564,'product',[{'var',12564,'Location'}|[{'var',12564,'V0'}|[{'var',12564,'V1'}|[{'var',12564,'V2'}|[{'var',12564,'V3'}]]]]]}|[{'atom',12564,'ok'}]]}|[[{'type',12564,'constraint',[{'atom',12564,'is_subtype'}|[[{'var',12564,'Location'}|[{'type',12564,'integer',[]}]]]]}|[{'type',12564,'constraint',[{'atom',12564,'is_subtype'}|[[{'var',12564,'V0'}|[{'type',12564,'integer',[]}]]]]}|[{'type',12564,'constraint',[{'atom',12564,'is_subtype'}|[[{'var',12564,'V1'}|[{'type',12564,'integer',[]}]]]]}|[{'type',12564,'constraint',[{'atom',12564,'is_subtype'}|[[{'var',12564,'V2'}|[{'type',12564,'integer',[]}]]]]}|[{'type',12564,'constraint',[{'atom',12564,'is_subtype'}|[[{'var',12564,'V3'}|[{'type',12564,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12570
		'spec' =
		    %% Line 12570
		    [{{'uniform1uiv',2},[{'type',12570,'bounded_fun',[{'type',12570,'fun',[{'type',12570,'product',[{'var',12570,'Location'}|[{'var',12570,'Value'}]]}|[{'atom',12570,'ok'}]]}|[[{'type',12570,'constraint',[{'atom',12570,'is_subtype'}|[[{'var',12570,'Location'}|[{'type',12570,'integer',[]}]]]]}|[{'type',12570,'constraint',[{'atom',12570,'is_subtype'}|[[{'var',12570,'Value'}|[{'type',12570,'list',[{'type',12570,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 12577
		'spec' =
		    %% Line 12577
		    [{{'uniform2uiv',2},[{'type',12577,'bounded_fun',[{'type',12577,'fun',[{'type',12577,'product',[{'var',12577,'Location'}|[{'var',12577,'Value'}]]}|[{'atom',12577,'ok'}]]}|[[{'type',12577,'constraint',[{'atom',12577,'is_subtype'}|[[{'var',12577,'Location'}|[{'type',12577,'integer',[]}]]]]}|[{'type',12577,'constraint',[{'atom',12577,'is_subtype'}|[[{'var',12577,'Value'}|[{'type',12577,'list',[{'type',12577,'tuple',[{'type',12577,'integer',[]}|[{'type',12577,'integer',[]}]]}]}]]]]}]]]]}]}],
		%% Line 12584
		'spec' =
		    %% Line 12584
		    [{{'uniform3uiv',2},[{'type',12584,'bounded_fun',[{'type',12584,'fun',[{'type',12584,'product',[{'var',12584,'Location'}|[{'var',12584,'Value'}]]}|[{'atom',12584,'ok'}]]}|[[{'type',12584,'constraint',[{'atom',12584,'is_subtype'}|[[{'var',12584,'Location'}|[{'type',12584,'integer',[]}]]]]}|[{'type',12584,'constraint',[{'atom',12584,'is_subtype'}|[[{'var',12584,'Value'}|[{'type',12584,'list',[{'type',12584,'tuple',[{'type',12584,'integer',[]}|[{'type',12584,'integer',[]}|[{'type',12584,'integer',[]}]]]}]}]]]]}]]]]}]}],
		%% Line 12591
		'spec' =
		    %% Line 12591
		    [{{'uniform4uiv',2},[{'type',12591,'bounded_fun',[{'type',12591,'fun',[{'type',12591,'product',[{'var',12591,'Location'}|[{'var',12591,'Value'}]]}|[{'atom',12591,'ok'}]]}|[[{'type',12591,'constraint',[{'atom',12591,'is_subtype'}|[[{'var',12591,'Location'}|[{'type',12591,'integer',[]}]]]]}|[{'type',12591,'constraint',[{'atom',12591,'is_subtype'}|[[{'var',12591,'Value'}|[{'type',12591,'list',[{'type',12591,'tuple',[{'type',12591,'integer',[]}|[{'type',12591,'integer',[]}|[{'type',12591,'integer',[]}|[{'type',12591,'integer',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 12598
		'spec' =
		    %% Line 12598
		    [{{'texParameterIiv',3},[{'type',12598,'bounded_fun',[{'type',12598,'fun',[{'type',12598,'product',[{'var',12598,'Target'}|[{'var',12598,'Pname'}|[{'var',12598,'Params'}]]]}|[{'atom',12598,'ok'}]]}|[[{'type',12598,'constraint',[{'atom',12598,'is_subtype'}|[[{'var',12598,'Target'}|[{'type',12598,'enum',[]}]]]]}|[{'type',12598,'constraint',[{'atom',12598,'is_subtype'}|[[{'var',12598,'Pname'}|[{'type',12598,'enum',[]}]]]]}|[{'type',12598,'constraint',[{'atom',12598,'is_subtype'}|[[{'var',12598,'Params'}|[{'type',12598,'tuple',[{'type',12598,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 12606
		'spec' =
		    %% Line 12606
		    [{{'texParameterIuiv',3},[{'type',12606,'bounded_fun',[{'type',12606,'fun',[{'type',12606,'product',[{'var',12606,'Target'}|[{'var',12606,'Pname'}|[{'var',12606,'Params'}]]]}|[{'atom',12606,'ok'}]]}|[[{'type',12606,'constraint',[{'atom',12606,'is_subtype'}|[[{'var',12606,'Target'}|[{'type',12606,'enum',[]}]]]]}|[{'type',12606,'constraint',[{'atom',12606,'is_subtype'}|[[{'var',12606,'Pname'}|[{'type',12606,'enum',[]}]]]]}|[{'type',12606,'constraint',[{'atom',12606,'is_subtype'}|[[{'var',12606,'Params'}|[{'type',12606,'tuple',[{'type',12606,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 12613
		'spec' =
		    %% Line 12613
		    [{{'getTexParameterIiv',2},[{'type',12613,'bounded_fun',[{'type',12613,'fun',[{'type',12613,'product',[{'var',12613,'Target'}|[{'var',12613,'Pname'}]]}|[{'type',12613,'tuple',[{'type',12613,'integer',[]}|[{'type',12613,'integer',[]}|[{'type',12613,'integer',[]}|[{'type',12613,'integer',[]}]]]]}]]}|[[{'type',12613,'constraint',[{'atom',12613,'is_subtype'}|[[{'var',12613,'Target'}|[{'type',12613,'enum',[]}]]]]}|[{'type',12613,'constraint',[{'atom',12613,'is_subtype'}|[[{'var',12613,'Pname'}|[{'type',12613,'enum',[]}]]]]}]]]]}]}],
		%% Line 12620
		'spec' =
		    %% Line 12620
		    [{{'getTexParameterIuiv',2},[{'type',12620,'bounded_fun',[{'type',12620,'fun',[{'type',12620,'product',[{'var',12620,'Target'}|[{'var',12620,'Pname'}]]}|[{'type',12620,'tuple',[{'type',12620,'integer',[]}|[{'type',12620,'integer',[]}|[{'type',12620,'integer',[]}|[{'type',12620,'integer',[]}]]]]}]]}|[[{'type',12620,'constraint',[{'atom',12620,'is_subtype'}|[[{'var',12620,'Target'}|[{'type',12620,'enum',[]}]]]]}|[{'type',12620,'constraint',[{'atom',12620,'is_subtype'}|[[{'var',12620,'Pname'}|[{'type',12620,'enum',[]}]]]]}]]]]}]}],
		%% Line 12653
		'spec' =
		    %% Line 12653
		    [{{'clearBufferiv',3},[{'type',12653,'bounded_fun',[{'type',12653,'fun',[{'type',12653,'product',[{'var',12653,'Buffer'}|[{'var',12653,'Drawbuffer'}|[{'var',12653,'Value'}]]]}|[{'atom',12653,'ok'}]]}|[[{'type',12653,'constraint',[{'atom',12653,'is_subtype'}|[[{'var',12653,'Buffer'}|[{'type',12653,'enum',[]}]]]]}|[{'type',12653,'constraint',[{'atom',12653,'is_subtype'}|[[{'var',12653,'Drawbuffer'}|[{'type',12653,'integer',[]}]]]]}|[{'type',12653,'constraint',[{'atom',12653,'is_subtype'}|[[{'var',12653,'Value'}|[{'type',12653,'tuple',[{'type',12653,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 12660
		'spec' =
		    %% Line 12660
		    [{{'clearBufferuiv',3},[{'type',12660,'bounded_fun',[{'type',12660,'fun',[{'type',12660,'product',[{'var',12660,'Buffer'}|[{'var',12660,'Drawbuffer'}|[{'var',12660,'Value'}]]]}|[{'atom',12660,'ok'}]]}|[[{'type',12660,'constraint',[{'atom',12660,'is_subtype'}|[[{'var',12660,'Buffer'}|[{'type',12660,'enum',[]}]]]]}|[{'type',12660,'constraint',[{'atom',12660,'is_subtype'}|[[{'var',12660,'Drawbuffer'}|[{'type',12660,'integer',[]}]]]]}|[{'type',12660,'constraint',[{'atom',12660,'is_subtype'}|[[{'var',12660,'Value'}|[{'type',12660,'tuple',[{'type',12660,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 12667
		'spec' =
		    %% Line 12667
		    [{{'clearBufferfv',3},[{'type',12667,'bounded_fun',[{'type',12667,'fun',[{'type',12667,'product',[{'var',12667,'Buffer'}|[{'var',12667,'Drawbuffer'}|[{'var',12667,'Value'}]]]}|[{'atom',12667,'ok'}]]}|[[{'type',12667,'constraint',[{'atom',12667,'is_subtype'}|[[{'var',12667,'Buffer'}|[{'type',12667,'enum',[]}]]]]}|[{'type',12667,'constraint',[{'atom',12667,'is_subtype'}|[[{'var',12667,'Drawbuffer'}|[{'type',12667,'integer',[]}]]]]}|[{'type',12667,'constraint',[{'atom',12667,'is_subtype'}|[[{'var',12667,'Value'}|[{'type',12667,'tuple',[{'type',12667,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 12675
		'spec' =
		    %% Line 12675
		    [{{'clearBufferfi',4},[{'type',12675,'bounded_fun',[{'type',12675,'fun',[{'type',12675,'product',[{'var',12675,'Buffer'}|[{'var',12675,'Drawbuffer'}|[{'var',12675,'Depth'}|[{'var',12675,'Stencil'}]]]]}|[{'atom',12675,'ok'}]]}|[[{'type',12675,'constraint',[{'atom',12675,'is_subtype'}|[[{'var',12675,'Buffer'}|[{'type',12675,'enum',[]}]]]]}|[{'type',12675,'constraint',[{'atom',12675,'is_subtype'}|[[{'var',12675,'Drawbuffer'}|[{'type',12675,'integer',[]}]]]]}|[{'type',12675,'constraint',[{'atom',12675,'is_subtype'}|[[{'var',12675,'Depth'}|[{'type',12675,'float',[]}]]]]}|[{'type',12675,'constraint',[{'atom',12675,'is_subtype'}|[[{'var',12675,'Stencil'}|[{'type',12675,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12681
		'spec' =
		    %% Line 12681
		    [{{'getStringi',2},[{'type',12681,'bounded_fun',[{'type',12681,'fun',[{'type',12681,'product',[{'var',12681,'Name'}|[{'var',12681,'Index'}]]}|[{'type',12681,'string',[]}]]}|[[{'type',12681,'constraint',[{'atom',12681,'is_subtype'}|[[{'var',12681,'Name'}|[{'type',12681,'enum',[]}]]]]}|[{'type',12681,'constraint',[{'atom',12681,'is_subtype'}|[[{'var',12681,'Index'}|[{'type',12681,'integer',[]}]]]]}]]]]}]}],
		%% Line 12688
		'spec' =
		    %% Line 12688
		    [{{'drawArraysInstanced',4},[{'type',12688,'bounded_fun',[{'type',12688,'fun',[{'type',12688,'product',[{'var',12688,'Mode'}|[{'var',12688,'First'}|[{'var',12688,'Count'}|[{'var',12688,'Primcount'}]]]]}|[{'atom',12688,'ok'}]]}|[[{'type',12688,'constraint',[{'atom',12688,'is_subtype'}|[[{'var',12688,'Mode'}|[{'type',12688,'enum',[]}]]]]}|[{'type',12688,'constraint',[{'atom',12688,'is_subtype'}|[[{'var',12688,'First'}|[{'type',12688,'integer',[]}]]]]}|[{'type',12688,'constraint',[{'atom',12688,'is_subtype'}|[[{'var',12688,'Count'}|[{'type',12688,'integer',[]}]]]]}|[{'type',12688,'constraint',[{'atom',12688,'is_subtype'}|[[{'var',12688,'Primcount'}|[{'type',12688,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12695
		'spec' =
		    %% Line 12695
		    [{{'drawElementsInstanced',5},[{'type',12695,'bounded_fun',[{'type',12695,'fun',[{'type',12695,'product',[{'var',12695,'Mode'}|[{'var',12695,'Count'}|[{'var',12695,'Type'}|[{'var',12695,'Indices'}|[{'var',12695,'Primcount'}]]]]]}|[{'atom',12695,'ok'}]]}|[[{'type',12695,'constraint',[{'atom',12695,'is_subtype'}|[[{'var',12695,'Mode'}|[{'type',12695,'enum',[]}]]]]}|[{'type',12695,'constraint',[{'atom',12695,'is_subtype'}|[[{'var',12695,'Count'}|[{'type',12695,'integer',[]}]]]]}|[{'type',12695,'constraint',[{'atom',12695,'is_subtype'}|[[{'var',12695,'Type'}|[{'type',12695,'enum',[]}]]]]}|[{'type',12695,'constraint',[{'atom',12695,'is_subtype'}|[[{'var',12695,'Indices'}|[{'type',12695,'union',[{'type',12695,'offset',[]}|[{'type',12695,'mem',[]}]]}]]]]}|[{'type',12695,'constraint',[{'atom',12695,'is_subtype'}|[[{'var',12695,'Primcount'}|[{'type',12695,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 12766
		'spec' =
		    %% Line 12766
		    [{{'texBuffer',3},[{'type',12766,'bounded_fun',[{'type',12766,'fun',[{'type',12766,'product',[{'var',12766,'Target'}|[{'var',12766,'Internalformat'}|[{'var',12766,'Buffer'}]]]}|[{'atom',12766,'ok'}]]}|[[{'type',12766,'constraint',[{'atom',12766,'is_subtype'}|[[{'var',12766,'Target'}|[{'type',12766,'enum',[]}]]]]}|[{'type',12766,'constraint',[{'atom',12766,'is_subtype'}|[[{'var',12766,'Internalformat'}|[{'type',12766,'enum',[]}]]]]}|[{'type',12766,'constraint',[{'atom',12766,'is_subtype'}|[[{'var',12766,'Buffer'}|[{'type',12766,'integer',[]}]]]]}]]]]]}]}],
		%% Line 12788
		'spec' =
		    %% Line 12788
		    [{{'primitiveRestartIndex',1},[{'type',12788,'bounded_fun',[{'type',12788,'fun',[{'type',12788,'product',[{'var',12788,'Index'}]}|[{'atom',12788,'ok'}]]}|[[{'type',12788,'constraint',[{'atom',12788,'is_subtype'}|[[{'var',12788,'Index'}|[{'type',12788,'integer',[]}]]]]}]]]}]}],
		%% Line 12794
		'spec' =
		    %% Line 12794
		    [{{'getInteger64i_v',2},[{'type',12794,'bounded_fun',[{'type',12794,'fun',[{'type',12794,'product',[{'var',12794,'Target'}|[{'var',12794,'Index'}]]}|[{'type',12794,'list',[{'type',12794,'integer',[]}]}]]}|[[{'type',12794,'constraint',[{'atom',12794,'is_subtype'}|[[{'var',12794,'Target'}|[{'type',12794,'enum',[]}]]]]}|[{'type',12794,'constraint',[{'atom',12794,'is_subtype'}|[[{'var',12794,'Index'}|[{'type',12794,'integer',[]}]]]]}]]]]}]}],
		%% Line 12801
		'spec' =
		    %% Line 12801
		    [{{'getBufferParameteri64v',2},[{'type',12801,'bounded_fun',[{'type',12801,'fun',[{'type',12801,'product',[{'var',12801,'Target'}|[{'var',12801,'Pname'}]]}|[{'type',12801,'list',[{'type',12801,'integer',[]}]}]]}|[[{'type',12801,'constraint',[{'atom',12801,'is_subtype'}|[[{'var',12801,'Target'}|[{'type',12801,'enum',[]}]]]]}|[{'type',12801,'constraint',[{'atom',12801,'is_subtype'}|[[{'var',12801,'Pname'}|[{'type',12801,'enum',[]}]]]]}]]]]}]}],
		%% Line 12858
		'spec' =
		    %% Line 12858
		    [{{'framebufferTexture',4},[{'type',12858,'bounded_fun',[{'type',12858,'fun',[{'type',12858,'product',[{'var',12858,'Target'}|[{'var',12858,'Attachment'}|[{'var',12858,'Texture'}|[{'var',12858,'Level'}]]]]}|[{'atom',12858,'ok'}]]}|[[{'type',12858,'constraint',[{'atom',12858,'is_subtype'}|[[{'var',12858,'Target'}|[{'type',12858,'enum',[]}]]]]}|[{'type',12858,'constraint',[{'atom',12858,'is_subtype'}|[[{'var',12858,'Attachment'}|[{'type',12858,'enum',[]}]]]]}|[{'type',12858,'constraint',[{'atom',12858,'is_subtype'}|[[{'var',12858,'Texture'}|[{'type',12858,'integer',[]}]]]]}|[{'type',12858,'constraint',[{'atom',12858,'is_subtype'}|[[{'var',12858,'Level'}|[{'type',12858,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 12874
		'spec' =
		    %% Line 12874
		    [{{'vertexAttribDivisor',2},[{'type',12874,'bounded_fun',[{'type',12874,'fun',[{'type',12874,'product',[{'var',12874,'Index'}|[{'var',12874,'Divisor'}]]}|[{'atom',12874,'ok'}]]}|[[{'type',12874,'constraint',[{'atom',12874,'is_subtype'}|[[{'var',12874,'Index'}|[{'type',12874,'integer',[]}]]]]}|[{'type',12874,'constraint',[{'atom',12874,'is_subtype'}|[[{'var',12874,'Divisor'}|[{'type',12874,'integer',[]}]]]]}]]]]}]}],
		%% Line 12895
		'spec' =
		    %% Line 12895
		    [{{'minSampleShading',1},[{'type',12895,'bounded_fun',[{'type',12895,'fun',[{'type',12895,'product',[{'var',12895,'Value'}]}|[{'atom',12895,'ok'}]]}|[[{'type',12895,'constraint',[{'atom',12895,'is_subtype'}|[[{'var',12895,'Value'}|[{'type',12895,'clamp',[]}]]]]}]]]}]}],
		%% Line 12901
		'spec' =
		    %% Line 12901
		    [{{'blendEquationi',2},[{'type',12901,'bounded_fun',[{'type',12901,'fun',[{'type',12901,'product',[{'var',12901,'Buf'}|[{'var',12901,'Mode'}]]}|[{'atom',12901,'ok'}]]}|[[{'type',12901,'constraint',[{'atom',12901,'is_subtype'}|[[{'var',12901,'Buf'}|[{'type',12901,'integer',[]}]]]]}|[{'type',12901,'constraint',[{'atom',12901,'is_subtype'}|[[{'var',12901,'Mode'}|[{'type',12901,'enum',[]}]]]]}]]]]}]}],
		%% Line 12907
		'spec' =
		    %% Line 12907
		    [{{'blendEquationSeparatei',3},[{'type',12907,'bounded_fun',[{'type',12907,'fun',[{'type',12907,'product',[{'var',12907,'Buf'}|[{'var',12907,'ModeRGB'}|[{'var',12907,'ModeAlpha'}]]]}|[{'atom',12907,'ok'}]]}|[[{'type',12907,'constraint',[{'atom',12907,'is_subtype'}|[[{'var',12907,'Buf'}|[{'type',12907,'integer',[]}]]]]}|[{'type',12907,'constraint',[{'atom',12907,'is_subtype'}|[[{'var',12907,'ModeRGB'}|[{'type',12907,'enum',[]}]]]]}|[{'type',12907,'constraint',[{'atom',12907,'is_subtype'}|[[{'var',12907,'ModeAlpha'}|[{'type',12907,'enum',[]}]]]]}]]]]]}]}],
		%% Line 12914
		'spec' =
		    %% Line 12914
		    [{{'blendFunci',3},[{'type',12914,'bounded_fun',[{'type',12914,'fun',[{'type',12914,'product',[{'var',12914,'Buf'}|[{'var',12914,'Src'}|[{'var',12914,'Dst'}]]]}|[{'atom',12914,'ok'}]]}|[[{'type',12914,'constraint',[{'atom',12914,'is_subtype'}|[[{'var',12914,'Buf'}|[{'type',12914,'integer',[]}]]]]}|[{'type',12914,'constraint',[{'atom',12914,'is_subtype'}|[[{'var',12914,'Src'}|[{'type',12914,'enum',[]}]]]]}|[{'type',12914,'constraint',[{'atom',12914,'is_subtype'}|[[{'var',12914,'Dst'}|[{'type',12914,'enum',[]}]]]]}]]]]]}]}],
		%% Line 12920
		'spec' =
		    %% Line 12920
		    [{{'blendFuncSeparatei',5},[{'type',12920,'bounded_fun',[{'type',12920,'fun',[{'type',12920,'product',[{'var',12920,'Buf'}|[{'var',12920,'SrcRGB'}|[{'var',12920,'DstRGB'}|[{'var',12920,'SrcAlpha'}|[{'var',12920,'DstAlpha'}]]]]]}|[{'atom',12920,'ok'}]]}|[[{'type',12920,'constraint',[{'atom',12920,'is_subtype'}|[[{'var',12920,'Buf'}|[{'type',12920,'integer',[]}]]]]}|[{'type',12920,'constraint',[{'atom',12920,'is_subtype'}|[[{'var',12920,'SrcRGB'}|[{'type',12920,'enum',[]}]]]]}|[{'type',12920,'constraint',[{'atom',12920,'is_subtype'}|[[{'var',12920,'DstRGB'}|[{'type',12920,'enum',[]}]]]]}|[{'type',12920,'constraint',[{'atom',12920,'is_subtype'}|[[{'var',12920,'SrcAlpha'}|[{'type',12920,'enum',[]}]]]]}|[{'type',12920,'constraint',[{'atom',12920,'is_subtype'}|[[{'var',12920,'DstAlpha'}|[{'type',12920,'enum',[]}]]]]}]]]]]]]}]}],
		%% Line 12927
		'spec' =
		    %% Line 12927
		    [{{'loadTransposeMatrixfARB',1},[{'type',12927,'bounded_fun',[{'type',12927,'fun',[{'type',12927,'product',[{'var',12927,'M'}]}|[{'atom',12927,'ok'}]]}|[[{'type',12927,'constraint',[{'atom',12927,'is_subtype'}|[[{'var',12927,'M'}|[{'type',12927,'matrix',[]}]]]]}]]]}]}],
		%% Line 12936
		'spec' =
		    %% Line 12936
		    [{{'loadTransposeMatrixdARB',1},[{'type',12936,'bounded_fun',[{'type',12936,'fun',[{'type',12936,'product',[{'var',12936,'M'}]}|[{'atom',12936,'ok'}]]}|[[{'type',12936,'constraint',[{'atom',12936,'is_subtype'}|[[{'var',12936,'M'}|[{'type',12936,'matrix',[]}]]]]}]]]}]}],
		%% Line 12945
		'spec' =
		    %% Line 12945
		    [{{'multTransposeMatrixfARB',1},[{'type',12945,'bounded_fun',[{'type',12945,'fun',[{'type',12945,'product',[{'var',12945,'M'}]}|[{'atom',12945,'ok'}]]}|[[{'type',12945,'constraint',[{'atom',12945,'is_subtype'}|[[{'var',12945,'M'}|[{'type',12945,'matrix',[]}]]]]}]]]}]}],
		%% Line 12954
		'spec' =
		    %% Line 12954
		    [{{'multTransposeMatrixdARB',1},[{'type',12954,'bounded_fun',[{'type',12954,'fun',[{'type',12954,'product',[{'var',12954,'M'}]}|[{'atom',12954,'ok'}]]}|[[{'type',12954,'constraint',[{'atom',12954,'is_subtype'}|[[{'var',12954,'M'}|[{'type',12954,'matrix',[]}]]]]}]]]}]}],
		%% Line 12963
		'spec' =
		    %% Line 12963
		    [{{'weightbvARB',1},[{'type',12963,'bounded_fun',[{'type',12963,'fun',[{'type',12963,'product',[{'var',12963,'Weights'}]}|[{'atom',12963,'ok'}]]}|[[{'type',12963,'constraint',[{'atom',12963,'is_subtype'}|[[{'var',12963,'Weights'}|[{'type',12963,'list',[{'type',12963,'integer',[]}]}]]]]}]]]}]}],
		%% Line 12971
		'spec' =
		    %% Line 12971
		    [{{'weightsvARB',1},[{'type',12971,'bounded_fun',[{'type',12971,'fun',[{'type',12971,'product',[{'var',12971,'Weights'}]}|[{'atom',12971,'ok'}]]}|[[{'type',12971,'constraint',[{'atom',12971,'is_subtype'}|[[{'var',12971,'Weights'}|[{'type',12971,'list',[{'type',12971,'integer',[]}]}]]]]}]]]}]}],
		%% Line 12979
		'spec' =
		    %% Line 12979
		    [{{'weightivARB',1},[{'type',12979,'bounded_fun',[{'type',12979,'fun',[{'type',12979,'product',[{'var',12979,'Weights'}]}|[{'atom',12979,'ok'}]]}|[[{'type',12979,'constraint',[{'atom',12979,'is_subtype'}|[[{'var',12979,'Weights'}|[{'type',12979,'list',[{'type',12979,'integer',[]}]}]]]]}]]]}]}],
		%% Line 12987
		'spec' =
		    %% Line 12987
		    [{{'weightfvARB',1},[{'type',12987,'bounded_fun',[{'type',12987,'fun',[{'type',12987,'product',[{'var',12987,'Weights'}]}|[{'atom',12987,'ok'}]]}|[[{'type',12987,'constraint',[{'atom',12987,'is_subtype'}|[[{'var',12987,'Weights'}|[{'type',12987,'list',[{'type',12987,'float',[]}]}]]]]}]]]}]}],
		%% Line 12995
		'spec' =
		    %% Line 12995
		    [{{'weightdvARB',1},[{'type',12995,'bounded_fun',[{'type',12995,'fun',[{'type',12995,'product',[{'var',12995,'Weights'}]}|[{'atom',12995,'ok'}]]}|[[{'type',12995,'constraint',[{'atom',12995,'is_subtype'}|[[{'var',12995,'Weights'}|[{'type',12995,'list',[{'type',12995,'float',[]}]}]]]]}]]]}]}],
		%% Line 13003
		'spec' =
		    %% Line 13003
		    [{{'weightubvARB',1},[{'type',13003,'bounded_fun',[{'type',13003,'fun',[{'type',13003,'product',[{'var',13003,'Weights'}]}|[{'atom',13003,'ok'}]]}|[[{'type',13003,'constraint',[{'atom',13003,'is_subtype'}|[[{'var',13003,'Weights'}|[{'type',13003,'list',[{'type',13003,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13011
		'spec' =
		    %% Line 13011
		    [{{'weightusvARB',1},[{'type',13011,'bounded_fun',[{'type',13011,'fun',[{'type',13011,'product',[{'var',13011,'Weights'}]}|[{'atom',13011,'ok'}]]}|[[{'type',13011,'constraint',[{'atom',13011,'is_subtype'}|[[{'var',13011,'Weights'}|[{'type',13011,'list',[{'type',13011,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13019
		'spec' =
		    %% Line 13019
		    [{{'weightuivARB',1},[{'type',13019,'bounded_fun',[{'type',13019,'fun',[{'type',13019,'product',[{'var',13019,'Weights'}]}|[{'atom',13019,'ok'}]]}|[[{'type',13019,'constraint',[{'atom',13019,'is_subtype'}|[[{'var',13019,'Weights'}|[{'type',13019,'list',[{'type',13019,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13027
		'spec' =
		    %% Line 13027
		    [{{'vertexBlendARB',1},[{'type',13027,'bounded_fun',[{'type',13027,'fun',[{'type',13027,'product',[{'var',13027,'Count'}]}|[{'atom',13027,'ok'}]]}|[[{'type',13027,'constraint',[{'atom',13027,'is_subtype'}|[[{'var',13027,'Count'}|[{'type',13027,'integer',[]}]]]]}]]]}]}],
		%% Line 13034
		'spec' =
		    %% Line 13034
		    [{{'currentPaletteMatrixARB',1},[{'type',13034,'bounded_fun',[{'type',13034,'fun',[{'type',13034,'product',[{'var',13034,'Index'}]}|[{'atom',13034,'ok'}]]}|[[{'type',13034,'constraint',[{'atom',13034,'is_subtype'}|[[{'var',13034,'Index'}|[{'type',13034,'integer',[]}]]]]}]]]}]}],
		%% Line 13041
		'spec' =
		    %% Line 13041
		    [{{'matrixIndexubvARB',1},[{'type',13041,'bounded_fun',[{'type',13041,'fun',[{'type',13041,'product',[{'var',13041,'Indices'}]}|[{'atom',13041,'ok'}]]}|[[{'type',13041,'constraint',[{'atom',13041,'is_subtype'}|[[{'var',13041,'Indices'}|[{'type',13041,'list',[{'type',13041,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13049
		'spec' =
		    %% Line 13049
		    [{{'matrixIndexusvARB',1},[{'type',13049,'bounded_fun',[{'type',13049,'fun',[{'type',13049,'product',[{'var',13049,'Indices'}]}|[{'atom',13049,'ok'}]]}|[[{'type',13049,'constraint',[{'atom',13049,'is_subtype'}|[[{'var',13049,'Indices'}|[{'type',13049,'list',[{'type',13049,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13057
		'spec' =
		    %% Line 13057
		    [{{'matrixIndexuivARB',1},[{'type',13057,'bounded_fun',[{'type',13057,'fun',[{'type',13057,'product',[{'var',13057,'Indices'}]}|[{'atom',13057,'ok'}]]}|[[{'type',13057,'constraint',[{'atom',13057,'is_subtype'}|[[{'var',13057,'Indices'}|[{'type',13057,'list',[{'type',13057,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13065
		'spec' =
		    %% Line 13065
		    [{{'programStringARB',3},[{'type',13065,'bounded_fun',[{'type',13065,'fun',[{'type',13065,'product',[{'var',13065,'Target'}|[{'var',13065,'Format'}|[{'var',13065,'String'}]]]}|[{'atom',13065,'ok'}]]}|[[{'type',13065,'constraint',[{'atom',13065,'is_subtype'}|[[{'var',13065,'Target'}|[{'type',13065,'enum',[]}]]]]}|[{'type',13065,'constraint',[{'atom',13065,'is_subtype'}|[[{'var',13065,'Format'}|[{'type',13065,'enum',[]}]]]]}|[{'type',13065,'constraint',[{'atom',13065,'is_subtype'}|[[{'var',13065,'String'}|[{'type',13065,'string',[]}]]]]}]]]]]}]}],
		%% Line 13072
		'spec' =
		    %% Line 13072
		    [{{'bindProgramARB',2},[{'type',13072,'bounded_fun',[{'type',13072,'fun',[{'type',13072,'product',[{'var',13072,'Target'}|[{'var',13072,'Program'}]]}|[{'atom',13072,'ok'}]]}|[[{'type',13072,'constraint',[{'atom',13072,'is_subtype'}|[[{'var',13072,'Target'}|[{'type',13072,'enum',[]}]]]]}|[{'type',13072,'constraint',[{'atom',13072,'is_subtype'}|[[{'var',13072,'Program'}|[{'type',13072,'integer',[]}]]]]}]]]]}]}],
		%% Line 13079
		'spec' =
		    %% Line 13079
		    [{{'deleteProgramsARB',1},[{'type',13079,'bounded_fun',[{'type',13079,'fun',[{'type',13079,'product',[{'var',13079,'Programs'}]}|[{'atom',13079,'ok'}]]}|[[{'type',13079,'constraint',[{'atom',13079,'is_subtype'}|[[{'var',13079,'Programs'}|[{'type',13079,'list',[{'type',13079,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13087
		'spec' =
		    %% Line 13087
		    [{{'genProgramsARB',1},[{'type',13087,'bounded_fun',[{'type',13087,'fun',[{'type',13087,'product',[{'var',13087,'N'}]}|[{'type',13087,'list',[{'type',13087,'integer',[]}]}]]}|[[{'type',13087,'constraint',[{'atom',13087,'is_subtype'}|[[{'var',13087,'N'}|[{'type',13087,'integer',[]}]]]]}]]]}]}],
		%% Line 13094
		'spec' =
		    %% Line 13094
		    [{{'programEnvParameter4dARB',6},[{'type',13094,'bounded_fun',[{'type',13094,'fun',[{'type',13094,'product',[{'var',13094,'Target'}|[{'var',13094,'Index'}|[{'var',13094,'X'}|[{'var',13094,'Y'}|[{'var',13094,'Z'}|[{'var',13094,'W'}]]]]]]}|[{'atom',13094,'ok'}]]}|[[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'Target'}|[{'type',13094,'enum',[]}]]]]}|[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'Index'}|[{'type',13094,'integer',[]}]]]]}|[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'X'}|[{'type',13094,'float',[]}]]]]}|[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'Y'}|[{'type',13094,'float',[]}]]]]}|[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'Z'}|[{'type',13094,'float',[]}]]]]}|[{'type',13094,'constraint',[{'atom',13094,'is_subtype'}|[[{'var',13094,'W'}|[{'type',13094,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 13101
		'spec' =
		    %% Line 13101
		    [{{'programEnvParameter4dvARB',3},[{'type',13101,'bounded_fun',[{'type',13101,'fun',[{'type',13101,'product',[{'var',13101,'Target'}|[{'var',13101,'Index'}|[{'var',13101,'Params'}]]]}|[{'atom',13101,'ok'}]]}|[[{'type',13101,'constraint',[{'atom',13101,'is_subtype'}|[[{'var',13101,'Target'}|[{'type',13101,'enum',[]}]]]]}|[{'type',13101,'constraint',[{'atom',13101,'is_subtype'}|[[{'var',13101,'Index'}|[{'type',13101,'integer',[]}]]]]}|[{'type',13101,'constraint',[{'atom',13101,'is_subtype'}|[[{'var',13101,'Params'}|[{'type',13101,'tuple',[{'type',13101,'float',[]}|[{'type',13101,'float',[]}|[{'type',13101,'float',[]}|[{'type',13101,'float',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 13108
		'spec' =
		    %% Line 13108
		    [{{'programEnvParameter4fARB',6},[{'type',13108,'bounded_fun',[{'type',13108,'fun',[{'type',13108,'product',[{'var',13108,'Target'}|[{'var',13108,'Index'}|[{'var',13108,'X'}|[{'var',13108,'Y'}|[{'var',13108,'Z'}|[{'var',13108,'W'}]]]]]]}|[{'atom',13108,'ok'}]]}|[[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'Target'}|[{'type',13108,'enum',[]}]]]]}|[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'Index'}|[{'type',13108,'integer',[]}]]]]}|[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'X'}|[{'type',13108,'float',[]}]]]]}|[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'Y'}|[{'type',13108,'float',[]}]]]]}|[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'Z'}|[{'type',13108,'float',[]}]]]]}|[{'type',13108,'constraint',[{'atom',13108,'is_subtype'}|[[{'var',13108,'W'}|[{'type',13108,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 13115
		'spec' =
		    %% Line 13115
		    [{{'programEnvParameter4fvARB',3},[{'type',13115,'bounded_fun',[{'type',13115,'fun',[{'type',13115,'product',[{'var',13115,'Target'}|[{'var',13115,'Index'}|[{'var',13115,'Params'}]]]}|[{'atom',13115,'ok'}]]}|[[{'type',13115,'constraint',[{'atom',13115,'is_subtype'}|[[{'var',13115,'Target'}|[{'type',13115,'enum',[]}]]]]}|[{'type',13115,'constraint',[{'atom',13115,'is_subtype'}|[[{'var',13115,'Index'}|[{'type',13115,'integer',[]}]]]]}|[{'type',13115,'constraint',[{'atom',13115,'is_subtype'}|[[{'var',13115,'Params'}|[{'type',13115,'tuple',[{'type',13115,'float',[]}|[{'type',13115,'float',[]}|[{'type',13115,'float',[]}|[{'type',13115,'float',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 13122
		'spec' =
		    %% Line 13122
		    [{{'programLocalParameter4dARB',6},[{'type',13122,'bounded_fun',[{'type',13122,'fun',[{'type',13122,'product',[{'var',13122,'Target'}|[{'var',13122,'Index'}|[{'var',13122,'X'}|[{'var',13122,'Y'}|[{'var',13122,'Z'}|[{'var',13122,'W'}]]]]]]}|[{'atom',13122,'ok'}]]}|[[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'Target'}|[{'type',13122,'enum',[]}]]]]}|[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'Index'}|[{'type',13122,'integer',[]}]]]]}|[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'X'}|[{'type',13122,'float',[]}]]]]}|[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'Y'}|[{'type',13122,'float',[]}]]]]}|[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'Z'}|[{'type',13122,'float',[]}]]]]}|[{'type',13122,'constraint',[{'atom',13122,'is_subtype'}|[[{'var',13122,'W'}|[{'type',13122,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 13129
		'spec' =
		    %% Line 13129
		    [{{'programLocalParameter4dvARB',3},[{'type',13129,'bounded_fun',[{'type',13129,'fun',[{'type',13129,'product',[{'var',13129,'Target'}|[{'var',13129,'Index'}|[{'var',13129,'Params'}]]]}|[{'atom',13129,'ok'}]]}|[[{'type',13129,'constraint',[{'atom',13129,'is_subtype'}|[[{'var',13129,'Target'}|[{'type',13129,'enum',[]}]]]]}|[{'type',13129,'constraint',[{'atom',13129,'is_subtype'}|[[{'var',13129,'Index'}|[{'type',13129,'integer',[]}]]]]}|[{'type',13129,'constraint',[{'atom',13129,'is_subtype'}|[[{'var',13129,'Params'}|[{'type',13129,'tuple',[{'type',13129,'float',[]}|[{'type',13129,'float',[]}|[{'type',13129,'float',[]}|[{'type',13129,'float',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 13136
		'spec' =
		    %% Line 13136
		    [{{'programLocalParameter4fARB',6},[{'type',13136,'bounded_fun',[{'type',13136,'fun',[{'type',13136,'product',[{'var',13136,'Target'}|[{'var',13136,'Index'}|[{'var',13136,'X'}|[{'var',13136,'Y'}|[{'var',13136,'Z'}|[{'var',13136,'W'}]]]]]]}|[{'atom',13136,'ok'}]]}|[[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'Target'}|[{'type',13136,'enum',[]}]]]]}|[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'Index'}|[{'type',13136,'integer',[]}]]]]}|[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'X'}|[{'type',13136,'float',[]}]]]]}|[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'Y'}|[{'type',13136,'float',[]}]]]]}|[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'Z'}|[{'type',13136,'float',[]}]]]]}|[{'type',13136,'constraint',[{'atom',13136,'is_subtype'}|[[{'var',13136,'W'}|[{'type',13136,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 13143
		'spec' =
		    %% Line 13143
		    [{{'programLocalParameter4fvARB',3},[{'type',13143,'bounded_fun',[{'type',13143,'fun',[{'type',13143,'product',[{'var',13143,'Target'}|[{'var',13143,'Index'}|[{'var',13143,'Params'}]]]}|[{'atom',13143,'ok'}]]}|[[{'type',13143,'constraint',[{'atom',13143,'is_subtype'}|[[{'var',13143,'Target'}|[{'type',13143,'enum',[]}]]]]}|[{'type',13143,'constraint',[{'atom',13143,'is_subtype'}|[[{'var',13143,'Index'}|[{'type',13143,'integer',[]}]]]]}|[{'type',13143,'constraint',[{'atom',13143,'is_subtype'}|[[{'var',13143,'Params'}|[{'type',13143,'tuple',[{'type',13143,'float',[]}|[{'type',13143,'float',[]}|[{'type',13143,'float',[]}|[{'type',13143,'float',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 13150
		'spec' =
		    %% Line 13150
		    [{{'getProgramEnvParameterdvARB',2},[{'type',13150,'bounded_fun',[{'type',13150,'fun',[{'type',13150,'product',[{'var',13150,'Target'}|[{'var',13150,'Index'}]]}|[{'type',13150,'tuple',[{'type',13150,'float',[]}|[{'type',13150,'float',[]}|[{'type',13150,'float',[]}|[{'type',13150,'float',[]}]]]]}]]}|[[{'type',13150,'constraint',[{'atom',13150,'is_subtype'}|[[{'var',13150,'Target'}|[{'type',13150,'enum',[]}]]]]}|[{'type',13150,'constraint',[{'atom',13150,'is_subtype'}|[[{'var',13150,'Index'}|[{'type',13150,'integer',[]}]]]]}]]]]}]}],
		%% Line 13157
		'spec' =
		    %% Line 13157
		    [{{'getProgramEnvParameterfvARB',2},[{'type',13157,'bounded_fun',[{'type',13157,'fun',[{'type',13157,'product',[{'var',13157,'Target'}|[{'var',13157,'Index'}]]}|[{'type',13157,'tuple',[{'type',13157,'float',[]}|[{'type',13157,'float',[]}|[{'type',13157,'float',[]}|[{'type',13157,'float',[]}]]]]}]]}|[[{'type',13157,'constraint',[{'atom',13157,'is_subtype'}|[[{'var',13157,'Target'}|[{'type',13157,'enum',[]}]]]]}|[{'type',13157,'constraint',[{'atom',13157,'is_subtype'}|[[{'var',13157,'Index'}|[{'type',13157,'integer',[]}]]]]}]]]]}]}],
		%% Line 13164
		'spec' =
		    %% Line 13164
		    [{{'getProgramLocalParameterdvARB',2},[{'type',13164,'bounded_fun',[{'type',13164,'fun',[{'type',13164,'product',[{'var',13164,'Target'}|[{'var',13164,'Index'}]]}|[{'type',13164,'tuple',[{'type',13164,'float',[]}|[{'type',13164,'float',[]}|[{'type',13164,'float',[]}|[{'type',13164,'float',[]}]]]]}]]}|[[{'type',13164,'constraint',[{'atom',13164,'is_subtype'}|[[{'var',13164,'Target'}|[{'type',13164,'enum',[]}]]]]}|[{'type',13164,'constraint',[{'atom',13164,'is_subtype'}|[[{'var',13164,'Index'}|[{'type',13164,'integer',[]}]]]]}]]]]}]}],
		%% Line 13171
		'spec' =
		    %% Line 13171
		    [{{'getProgramLocalParameterfvARB',2},[{'type',13171,'bounded_fun',[{'type',13171,'fun',[{'type',13171,'product',[{'var',13171,'Target'}|[{'var',13171,'Index'}]]}|[{'type',13171,'tuple',[{'type',13171,'float',[]}|[{'type',13171,'float',[]}|[{'type',13171,'float',[]}|[{'type',13171,'float',[]}]]]]}]]}|[[{'type',13171,'constraint',[{'atom',13171,'is_subtype'}|[[{'var',13171,'Target'}|[{'type',13171,'enum',[]}]]]]}|[{'type',13171,'constraint',[{'atom',13171,'is_subtype'}|[[{'var',13171,'Index'}|[{'type',13171,'integer',[]}]]]]}]]]]}]}],
		%% Line 13178
		'spec' =
		    %% Line 13178
		    [{{'getProgramStringARB',3},[{'type',13178,'bounded_fun',[{'type',13178,'fun',[{'type',13178,'product',[{'var',13178,'Target'}|[{'var',13178,'Pname'}|[{'var',13178,'String'}]]]}|[{'atom',13178,'ok'}]]}|[[{'type',13178,'constraint',[{'atom',13178,'is_subtype'}|[[{'var',13178,'Target'}|[{'type',13178,'enum',[]}]]]]}|[{'type',13178,'constraint',[{'atom',13178,'is_subtype'}|[[{'var',13178,'Pname'}|[{'type',13178,'enum',[]}]]]]}|[{'type',13178,'constraint',[{'atom',13178,'is_subtype'}|[[{'var',13178,'String'}|[{'type',13178,'mem',[]}]]]]}]]]]]}]}],
		%% Line 13186
		'spec' =
		    %% Line 13186
		    [{{'getBufferParameterivARB',2},[{'type',13186,'bounded_fun',[{'type',13186,'fun',[{'type',13186,'product',[{'var',13186,'Target'}|[{'var',13186,'Pname'}]]}|[{'type',13186,'list',[{'type',13186,'integer',[]}]}]]}|[[{'type',13186,'constraint',[{'atom',13186,'is_subtype'}|[[{'var',13186,'Target'}|[{'type',13186,'enum',[]}]]]]}|[{'type',13186,'constraint',[{'atom',13186,'is_subtype'}|[[{'var',13186,'Pname'}|[{'type',13186,'enum',[]}]]]]}]]]]}]}],
		%% Line 13193
		'spec' =
		    %% Line 13193
		    [{{'deleteObjectARB',1},[{'type',13193,'bounded_fun',[{'type',13193,'fun',[{'type',13193,'product',[{'var',13193,'Obj'}]}|[{'atom',13193,'ok'}]]}|[[{'type',13193,'constraint',[{'atom',13193,'is_subtype'}|[[{'var',13193,'Obj'}|[{'type',13193,'integer',[]}]]]]}]]]}]}],
		%% Line 13200
		'spec' =
		    %% Line 13200
		    [{{'getHandleARB',1},[{'type',13200,'bounded_fun',[{'type',13200,'fun',[{'type',13200,'product',[{'var',13200,'Pname'}]}|[{'type',13200,'integer',[]}]]}|[[{'type',13200,'constraint',[{'atom',13200,'is_subtype'}|[[{'var',13200,'Pname'}|[{'type',13200,'enum',[]}]]]]}]]]}]}],
		%% Line 13207
		'spec' =
		    %% Line 13207
		    [{{'detachObjectARB',2},[{'type',13207,'bounded_fun',[{'type',13207,'fun',[{'type',13207,'product',[{'var',13207,'ContainerObj'}|[{'var',13207,'AttachedObj'}]]}|[{'atom',13207,'ok'}]]}|[[{'type',13207,'constraint',[{'atom',13207,'is_subtype'}|[[{'var',13207,'ContainerObj'}|[{'type',13207,'integer',[]}]]]]}|[{'type',13207,'constraint',[{'atom',13207,'is_subtype'}|[[{'var',13207,'AttachedObj'}|[{'type',13207,'integer',[]}]]]]}]]]]}]}],
		%% Line 13214
		'spec' =
		    %% Line 13214
		    [{{'createShaderObjectARB',1},[{'type',13214,'bounded_fun',[{'type',13214,'fun',[{'type',13214,'product',[{'var',13214,'ShaderType'}]}|[{'type',13214,'integer',[]}]]}|[[{'type',13214,'constraint',[{'atom',13214,'is_subtype'}|[[{'var',13214,'ShaderType'}|[{'type',13214,'enum',[]}]]]]}]]]}]}],
		%% Line 13221
		'spec' =
		    %% Line 13221
		    [{{'shaderSourceARB',2},[{'type',13221,'bounded_fun',[{'type',13221,'fun',[{'type',13221,'product',[{'var',13221,'ShaderObj'}|[{'var',13221,'String'}]]}|[{'atom',13221,'ok'}]]}|[[{'type',13221,'constraint',[{'atom',13221,'is_subtype'}|[[{'var',13221,'ShaderObj'}|[{'type',13221,'integer',[]}]]]]}|[{'type',13221,'constraint',[{'atom',13221,'is_subtype'}|[[{'var',13221,'String'}|[{'type',13221,'list',[{'type',13221,'string',[]}]}]]]]}]]]]}]}],
		%% Line 13229
		'spec' =
		    %% Line 13229
		    [{{'compileShaderARB',1},[{'type',13229,'bounded_fun',[{'type',13229,'fun',[{'type',13229,'product',[{'var',13229,'ShaderObj'}]}|[{'atom',13229,'ok'}]]}|[[{'type',13229,'constraint',[{'atom',13229,'is_subtype'}|[[{'var',13229,'ShaderObj'}|[{'type',13229,'integer',[]}]]]]}]]]}]}],
		%% Line 13236
		'spec' =
		    %% Line 13236
		    [{{'createProgramObjectARB',0},[{'type',13236,'fun',[{'type',13236,'product',[]}|[{'type',13236,'integer',[]}]]}]}],
		%% Line 13243
		'spec' =
		    %% Line 13243
		    [{{'attachObjectARB',2},[{'type',13243,'bounded_fun',[{'type',13243,'fun',[{'type',13243,'product',[{'var',13243,'ContainerObj'}|[{'var',13243,'Obj'}]]}|[{'atom',13243,'ok'}]]}|[[{'type',13243,'constraint',[{'atom',13243,'is_subtype'}|[[{'var',13243,'ContainerObj'}|[{'type',13243,'integer',[]}]]]]}|[{'type',13243,'constraint',[{'atom',13243,'is_subtype'}|[[{'var',13243,'Obj'}|[{'type',13243,'integer',[]}]]]]}]]]]}]}],
		%% Line 13250
		'spec' =
		    %% Line 13250
		    [{{'linkProgramARB',1},[{'type',13250,'bounded_fun',[{'type',13250,'fun',[{'type',13250,'product',[{'var',13250,'ProgramObj'}]}|[{'atom',13250,'ok'}]]}|[[{'type',13250,'constraint',[{'atom',13250,'is_subtype'}|[[{'var',13250,'ProgramObj'}|[{'type',13250,'integer',[]}]]]]}]]]}]}],
		%% Line 13257
		'spec' =
		    %% Line 13257
		    [{{'useProgramObjectARB',1},[{'type',13257,'bounded_fun',[{'type',13257,'fun',[{'type',13257,'product',[{'var',13257,'ProgramObj'}]}|[{'atom',13257,'ok'}]]}|[[{'type',13257,'constraint',[{'atom',13257,'is_subtype'}|[[{'var',13257,'ProgramObj'}|[{'type',13257,'integer',[]}]]]]}]]]}]}],
		%% Line 13264
		'spec' =
		    %% Line 13264
		    [{{'validateProgramARB',1},[{'type',13264,'bounded_fun',[{'type',13264,'fun',[{'type',13264,'product',[{'var',13264,'ProgramObj'}]}|[{'atom',13264,'ok'}]]}|[[{'type',13264,'constraint',[{'atom',13264,'is_subtype'}|[[{'var',13264,'ProgramObj'}|[{'type',13264,'integer',[]}]]]]}]]]}]}],
		%% Line 13271
		'spec' =
		    %% Line 13271
		    [{{'getObjectParameterfvARB',2},[{'type',13271,'bounded_fun',[{'type',13271,'fun',[{'type',13271,'product',[{'var',13271,'Obj'}|[{'var',13271,'Pname'}]]}|[{'type',13271,'float',[]}]]}|[[{'type',13271,'constraint',[{'atom',13271,'is_subtype'}|[[{'var',13271,'Obj'}|[{'type',13271,'integer',[]}]]]]}|[{'type',13271,'constraint',[{'atom',13271,'is_subtype'}|[[{'var',13271,'Pname'}|[{'type',13271,'enum',[]}]]]]}]]]]}]}],
		%% Line 13278
		'spec' =
		    %% Line 13278
		    [{{'getObjectParameterivARB',2},[{'type',13278,'bounded_fun',[{'type',13278,'fun',[{'type',13278,'product',[{'var',13278,'Obj'}|[{'var',13278,'Pname'}]]}|[{'type',13278,'integer',[]}]]}|[[{'type',13278,'constraint',[{'atom',13278,'is_subtype'}|[[{'var',13278,'Obj'}|[{'type',13278,'integer',[]}]]]]}|[{'type',13278,'constraint',[{'atom',13278,'is_subtype'}|[[{'var',13278,'Pname'}|[{'type',13278,'enum',[]}]]]]}]]]]}]}],
		%% Line 13285
		'spec' =
		    %% Line 13285
		    [{{'getInfoLogARB',2},[{'type',13285,'bounded_fun',[{'type',13285,'fun',[{'type',13285,'product',[{'var',13285,'Obj'}|[{'var',13285,'MaxLength'}]]}|[{'type',13285,'string',[]}]]}|[[{'type',13285,'constraint',[{'atom',13285,'is_subtype'}|[[{'var',13285,'Obj'}|[{'type',13285,'integer',[]}]]]]}|[{'type',13285,'constraint',[{'atom',13285,'is_subtype'}|[[{'var',13285,'MaxLength'}|[{'type',13285,'integer',[]}]]]]}]]]]}]}],
		%% Line 13292
		'spec' =
		    %% Line 13292
		    [{{'getAttachedObjectsARB',2},[{'type',13292,'bounded_fun',[{'type',13292,'fun',[{'type',13292,'product',[{'var',13292,'ContainerObj'}|[{'var',13292,'MaxCount'}]]}|[{'type',13292,'list',[{'type',13292,'integer',[]}]}]]}|[[{'type',13292,'constraint',[{'atom',13292,'is_subtype'}|[[{'var',13292,'ContainerObj'}|[{'type',13292,'integer',[]}]]]]}|[{'type',13292,'constraint',[{'atom',13292,'is_subtype'}|[[{'var',13292,'MaxCount'}|[{'type',13292,'integer',[]}]]]]}]]]]}]}],
		%% Line 13299
		'spec' =
		    %% Line 13299
		    [{{'getUniformLocationARB',2},[{'type',13299,'bounded_fun',[{'type',13299,'fun',[{'type',13299,'product',[{'var',13299,'ProgramObj'}|[{'var',13299,'Name'}]]}|[{'type',13299,'integer',[]}]]}|[[{'type',13299,'constraint',[{'atom',13299,'is_subtype'}|[[{'var',13299,'ProgramObj'}|[{'type',13299,'integer',[]}]]]]}|[{'type',13299,'constraint',[{'atom',13299,'is_subtype'}|[[{'var',13299,'Name'}|[{'type',13299,'string',[]}]]]]}]]]]}]}],
		%% Line 13306
		'spec' =
		    %% Line 13306
		    [{{'getActiveUniformARB',3},[{'type',13306,'bounded_fun',[{'type',13306,'fun',[{'type',13306,'product',[{'var',13306,'ProgramObj'}|[{'var',13306,'Index'}|[{'var',13306,'MaxLength'}]]]}|[{'type',13306,'tuple',[{'ann_type',13306,[{'var',13306,'Size'}|[{'type',13306,'integer',[]}]]}|[{'ann_type',13306,[{'var',13306,'Type'}|[{'type',13306,'enum',[]}]]}|[{'ann_type',13306,[{'var',13306,'Name'}|[{'type',13306,'string',[]}]]}]]]}]]}|[[{'type',13306,'constraint',[{'atom',13306,'is_subtype'}|[[{'var',13306,'ProgramObj'}|[{'type',13306,'integer',[]}]]]]}|[{'type',13306,'constraint',[{'atom',13306,'is_subtype'}|[[{'var',13306,'Index'}|[{'type',13306,'integer',[]}]]]]}|[{'type',13306,'constraint',[{'atom',13306,'is_subtype'}|[[{'var',13306,'MaxLength'}|[{'type',13306,'integer',[]}]]]]}]]]]]}]}],
		%% Line 13313
		'spec' =
		    %% Line 13313
		    [{{'getUniformfvARB',2},[{'type',13313,'bounded_fun',[{'type',13313,'fun',[{'type',13313,'product',[{'var',13313,'ProgramObj'}|[{'var',13313,'Location'}]]}|[{'type',13313,'matrix',[]}]]}|[[{'type',13313,'constraint',[{'atom',13313,'is_subtype'}|[[{'var',13313,'ProgramObj'}|[{'type',13313,'integer',[]}]]]]}|[{'type',13313,'constraint',[{'atom',13313,'is_subtype'}|[[{'var',13313,'Location'}|[{'type',13313,'integer',[]}]]]]}]]]]}]}],
		%% Line 13320
		'spec' =
		    %% Line 13320
		    [{{'getUniformivARB',2},[{'type',13320,'bounded_fun',[{'type',13320,'fun',[{'type',13320,'product',[{'var',13320,'ProgramObj'}|[{'var',13320,'Location'}]]}|[{'type',13320,'tuple',[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}|[{'type',13320,'integer',[]}]]]]]]]]]]]]]]]]}]]}|[[{'type',13320,'constraint',[{'atom',13320,'is_subtype'}|[[{'var',13320,'ProgramObj'}|[{'type',13320,'integer',[]}]]]]}|[{'type',13320,'constraint',[{'atom',13320,'is_subtype'}|[[{'var',13320,'Location'}|[{'type',13320,'integer',[]}]]]]}]]]]}]}],
		%% Line 13327
		'spec' =
		    %% Line 13327
		    [{{'getShaderSourceARB',2},[{'type',13327,'bounded_fun',[{'type',13327,'fun',[{'type',13327,'product',[{'var',13327,'Obj'}|[{'var',13327,'MaxLength'}]]}|[{'type',13327,'string',[]}]]}|[[{'type',13327,'constraint',[{'atom',13327,'is_subtype'}|[[{'var',13327,'Obj'}|[{'type',13327,'integer',[]}]]]]}|[{'type',13327,'constraint',[{'atom',13327,'is_subtype'}|[[{'var',13327,'MaxLength'}|[{'type',13327,'integer',[]}]]]]}]]]]}]}],
		%% Line 13334
		'spec' =
		    %% Line 13334
		    [{{'bindAttribLocationARB',3},[{'type',13334,'bounded_fun',[{'type',13334,'fun',[{'type',13334,'product',[{'var',13334,'ProgramObj'}|[{'var',13334,'Index'}|[{'var',13334,'Name'}]]]}|[{'atom',13334,'ok'}]]}|[[{'type',13334,'constraint',[{'atom',13334,'is_subtype'}|[[{'var',13334,'ProgramObj'}|[{'type',13334,'integer',[]}]]]]}|[{'type',13334,'constraint',[{'atom',13334,'is_subtype'}|[[{'var',13334,'Index'}|[{'type',13334,'integer',[]}]]]]}|[{'type',13334,'constraint',[{'atom',13334,'is_subtype'}|[[{'var',13334,'Name'}|[{'type',13334,'string',[]}]]]]}]]]]]}]}],
		%% Line 13341
		'spec' =
		    %% Line 13341
		    [{{'getActiveAttribARB',3},[{'type',13341,'bounded_fun',[{'type',13341,'fun',[{'type',13341,'product',[{'var',13341,'ProgramObj'}|[{'var',13341,'Index'}|[{'var',13341,'MaxLength'}]]]}|[{'type',13341,'tuple',[{'ann_type',13341,[{'var',13341,'Size'}|[{'type',13341,'integer',[]}]]}|[{'ann_type',13341,[{'var',13341,'Type'}|[{'type',13341,'enum',[]}]]}|[{'ann_type',13341,[{'var',13341,'Name'}|[{'type',13341,'string',[]}]]}]]]}]]}|[[{'type',13341,'constraint',[{'atom',13341,'is_subtype'}|[[{'var',13341,'ProgramObj'}|[{'type',13341,'integer',[]}]]]]}|[{'type',13341,'constraint',[{'atom',13341,'is_subtype'}|[[{'var',13341,'Index'}|[{'type',13341,'integer',[]}]]]]}|[{'type',13341,'constraint',[{'atom',13341,'is_subtype'}|[[{'var',13341,'MaxLength'}|[{'type',13341,'integer',[]}]]]]}]]]]]}]}],
		%% Line 13348
		'spec' =
		    %% Line 13348
		    [{{'getAttribLocationARB',2},[{'type',13348,'bounded_fun',[{'type',13348,'fun',[{'type',13348,'product',[{'var',13348,'ProgramObj'}|[{'var',13348,'Name'}]]}|[{'type',13348,'integer',[]}]]}|[[{'type',13348,'constraint',[{'atom',13348,'is_subtype'}|[[{'var',13348,'ProgramObj'}|[{'type',13348,'integer',[]}]]]]}|[{'type',13348,'constraint',[{'atom',13348,'is_subtype'}|[[{'var',13348,'Name'}|[{'type',13348,'string',[]}]]]]}]]]]}]}],
		%% Line 13363
		'spec' =
		    %% Line 13363
		    [{{'isRenderbuffer',1},[{'type',13363,'bounded_fun',[{'type',13363,'fun',[{'type',13363,'product',[{'var',13363,'Renderbuffer'}]}|[{'type',13363,'union',[{'integer',13363,0}|[{'integer',13363,1}]]}]]}|[[{'type',13363,'constraint',[{'atom',13363,'is_subtype'}|[[{'var',13363,'Renderbuffer'}|[{'type',13363,'integer',[]}]]]]}]]]}]}],
		%% Line 13376
		'spec' =
		    %% Line 13376
		    [{{'bindRenderbuffer',2},[{'type',13376,'bounded_fun',[{'type',13376,'fun',[{'type',13376,'product',[{'var',13376,'Target'}|[{'var',13376,'Renderbuffer'}]]}|[{'atom',13376,'ok'}]]}|[[{'type',13376,'constraint',[{'atom',13376,'is_subtype'}|[[{'var',13376,'Target'}|[{'type',13376,'enum',[]}]]]]}|[{'type',13376,'constraint',[{'atom',13376,'is_subtype'}|[[{'var',13376,'Renderbuffer'}|[{'type',13376,'integer',[]}]]]]}]]]]}]}],
		%% Line 13398
		'spec' =
		    %% Line 13398
		    [{{'deleteRenderbuffers',1},[{'type',13398,'bounded_fun',[{'type',13398,'fun',[{'type',13398,'product',[{'var',13398,'Renderbuffers'}]}|[{'atom',13398,'ok'}]]}|[[{'type',13398,'constraint',[{'atom',13398,'is_subtype'}|[[{'var',13398,'Renderbuffers'}|[{'type',13398,'list',[{'type',13398,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13417
		'spec' =
		    %% Line 13417
		    [{{'genRenderbuffers',1},[{'type',13417,'bounded_fun',[{'type',13417,'fun',[{'type',13417,'product',[{'var',13417,'N'}]}|[{'type',13417,'list',[{'type',13417,'integer',[]}]}]]}|[[{'type',13417,'constraint',[{'atom',13417,'is_subtype'}|[[{'var',13417,'N'}|[{'type',13417,'integer',[]}]]]]}]]]}]}],
		%% Line 13438
		'spec' =
		    %% Line 13438
		    [{{'renderbufferStorage',4},[{'type',13438,'bounded_fun',[{'type',13438,'fun',[{'type',13438,'product',[{'var',13438,'Target'}|[{'var',13438,'Internalformat'}|[{'var',13438,'Width'}|[{'var',13438,'Height'}]]]]}|[{'atom',13438,'ok'}]]}|[[{'type',13438,'constraint',[{'atom',13438,'is_subtype'}|[[{'var',13438,'Target'}|[{'type',13438,'enum',[]}]]]]}|[{'type',13438,'constraint',[{'atom',13438,'is_subtype'}|[[{'var',13438,'Internalformat'}|[{'type',13438,'enum',[]}]]]]}|[{'type',13438,'constraint',[{'atom',13438,'is_subtype'}|[[{'var',13438,'Width'}|[{'type',13438,'integer',[]}]]]]}|[{'type',13438,'constraint',[{'atom',13438,'is_subtype'}|[[{'var',13438,'Height'}|[{'type',13438,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 13466
		'spec' =
		    %% Line 13466
		    [{{'getRenderbufferParameteriv',2},[{'type',13466,'bounded_fun',[{'type',13466,'fun',[{'type',13466,'product',[{'var',13466,'Target'}|[{'var',13466,'Pname'}]]}|[{'type',13466,'integer',[]}]]}|[[{'type',13466,'constraint',[{'atom',13466,'is_subtype'}|[[{'var',13466,'Target'}|[{'type',13466,'enum',[]}]]]]}|[{'type',13466,'constraint',[{'atom',13466,'is_subtype'}|[[{'var',13466,'Pname'}|[{'type',13466,'enum',[]}]]]]}]]]]}]}],
		%% Line 13480
		'spec' =
		    %% Line 13480
		    [{{'isFramebuffer',1},[{'type',13480,'bounded_fun',[{'type',13480,'fun',[{'type',13480,'product',[{'var',13480,'Framebuffer'}]}|[{'type',13480,'union',[{'integer',13480,0}|[{'integer',13480,1}]]}]]}|[[{'type',13480,'constraint',[{'atom',13480,'is_subtype'}|[[{'var',13480,'Framebuffer'}|[{'type',13480,'integer',[]}]]]]}]]]}]}],
		%% Line 13498
		'spec' =
		    %% Line 13498
		    [{{'bindFramebuffer',2},[{'type',13498,'bounded_fun',[{'type',13498,'fun',[{'type',13498,'product',[{'var',13498,'Target'}|[{'var',13498,'Framebuffer'}]]}|[{'atom',13498,'ok'}]]}|[[{'type',13498,'constraint',[{'atom',13498,'is_subtype'}|[[{'var',13498,'Target'}|[{'type',13498,'enum',[]}]]]]}|[{'type',13498,'constraint',[{'atom',13498,'is_subtype'}|[[{'var',13498,'Framebuffer'}|[{'type',13498,'integer',[]}]]]]}]]]]}]}],
		%% Line 13513
		'spec' =
		    %% Line 13513
		    [{{'deleteFramebuffers',1},[{'type',13513,'bounded_fun',[{'type',13513,'fun',[{'type',13513,'product',[{'var',13513,'Framebuffers'}]}|[{'atom',13513,'ok'}]]}|[[{'type',13513,'constraint',[{'atom',13513,'is_subtype'}|[[{'var',13513,'Framebuffers'}|[{'type',13513,'list',[{'type',13513,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13532
		'spec' =
		    %% Line 13532
		    [{{'genFramebuffers',1},[{'type',13532,'bounded_fun',[{'type',13532,'fun',[{'type',13532,'product',[{'var',13532,'N'}]}|[{'type',13532,'list',[{'type',13532,'integer',[]}]}]]}|[[{'type',13532,'constraint',[{'atom',13532,'is_subtype'}|[[{'var',13532,'N'}|[{'type',13532,'integer',[]}]]]]}]]]}]}],
		%% Line 13583
		'spec' =
		    %% Line 13583
		    [{{'checkFramebufferStatus',1},[{'type',13583,'bounded_fun',[{'type',13583,'fun',[{'type',13583,'product',[{'var',13583,'Target'}]}|[{'type',13583,'enum',[]}]]}|[[{'type',13583,'constraint',[{'atom',13583,'is_subtype'}|[[{'var',13583,'Target'}|[{'type',13583,'enum',[]}]]]]}]]]}]}],
		%% Line 13589
		'spec' =
		    %% Line 13589
		    [{{'framebufferTexture1D',5},[{'type',13589,'bounded_fun',[{'type',13589,'fun',[{'type',13589,'product',[{'var',13589,'Target'}|[{'var',13589,'Attachment'}|[{'var',13589,'Textarget'}|[{'var',13589,'Texture'}|[{'var',13589,'Level'}]]]]]}|[{'atom',13589,'ok'}]]}|[[{'type',13589,'constraint',[{'atom',13589,'is_subtype'}|[[{'var',13589,'Target'}|[{'type',13589,'enum',[]}]]]]}|[{'type',13589,'constraint',[{'atom',13589,'is_subtype'}|[[{'var',13589,'Attachment'}|[{'type',13589,'enum',[]}]]]]}|[{'type',13589,'constraint',[{'atom',13589,'is_subtype'}|[[{'var',13589,'Textarget'}|[{'type',13589,'enum',[]}]]]]}|[{'type',13589,'constraint',[{'atom',13589,'is_subtype'}|[[{'var',13589,'Texture'}|[{'type',13589,'integer',[]}]]]]}|[{'type',13589,'constraint',[{'atom',13589,'is_subtype'}|[[{'var',13589,'Level'}|[{'type',13589,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 13595
		'spec' =
		    %% Line 13595
		    [{{'framebufferTexture2D',5},[{'type',13595,'bounded_fun',[{'type',13595,'fun',[{'type',13595,'product',[{'var',13595,'Target'}|[{'var',13595,'Attachment'}|[{'var',13595,'Textarget'}|[{'var',13595,'Texture'}|[{'var',13595,'Level'}]]]]]}|[{'atom',13595,'ok'}]]}|[[{'type',13595,'constraint',[{'atom',13595,'is_subtype'}|[[{'var',13595,'Target'}|[{'type',13595,'enum',[]}]]]]}|[{'type',13595,'constraint',[{'atom',13595,'is_subtype'}|[[{'var',13595,'Attachment'}|[{'type',13595,'enum',[]}]]]]}|[{'type',13595,'constraint',[{'atom',13595,'is_subtype'}|[[{'var',13595,'Textarget'}|[{'type',13595,'enum',[]}]]]]}|[{'type',13595,'constraint',[{'atom',13595,'is_subtype'}|[[{'var',13595,'Texture'}|[{'type',13595,'integer',[]}]]]]}|[{'type',13595,'constraint',[{'atom',13595,'is_subtype'}|[[{'var',13595,'Level'}|[{'type',13595,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 13601
		'spec' =
		    %% Line 13601
		    [{{'framebufferTexture3D',6},[{'type',13601,'bounded_fun',[{'type',13601,'fun',[{'type',13601,'product',[{'var',13601,'Target'}|[{'var',13601,'Attachment'}|[{'var',13601,'Textarget'}|[{'var',13601,'Texture'}|[{'var',13601,'Level'}|[{'var',13601,'Zoffset'}]]]]]]}|[{'atom',13601,'ok'}]]}|[[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Target'}|[{'type',13601,'enum',[]}]]]]}|[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Attachment'}|[{'type',13601,'enum',[]}]]]]}|[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Textarget'}|[{'type',13601,'enum',[]}]]]]}|[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Texture'}|[{'type',13601,'integer',[]}]]]]}|[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Level'}|[{'type',13601,'integer',[]}]]]]}|[{'type',13601,'constraint',[{'atom',13601,'is_subtype'}|[[{'var',13601,'Zoffset'}|[{'type',13601,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 13633
		'spec' =
		    %% Line 13633
		    [{{'framebufferRenderbuffer',4},[{'type',13633,'bounded_fun',[{'type',13633,'fun',[{'type',13633,'product',[{'var',13633,'Target'}|[{'var',13633,'Attachment'}|[{'var',13633,'Renderbuffertarget'}|[{'var',13633,'Renderbuffer'}]]]]}|[{'atom',13633,'ok'}]]}|[[{'type',13633,'constraint',[{'atom',13633,'is_subtype'}|[[{'var',13633,'Target'}|[{'type',13633,'enum',[]}]]]]}|[{'type',13633,'constraint',[{'atom',13633,'is_subtype'}|[[{'var',13633,'Attachment'}|[{'type',13633,'enum',[]}]]]]}|[{'type',13633,'constraint',[{'atom',13633,'is_subtype'}|[[{'var',13633,'Renderbuffertarget'}|[{'type',13633,'enum',[]}]]]]}|[{'type',13633,'constraint',[{'atom',13633,'is_subtype'}|[[{'var',13633,'Renderbuffer'}|[{'type',13633,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 13729
		'spec' =
		    %% Line 13729
		    [{{'getFramebufferAttachmentParameteriv',3},[{'type',13729,'bounded_fun',[{'type',13729,'fun',[{'type',13729,'product',[{'var',13729,'Target'}|[{'var',13729,'Attachment'}|[{'var',13729,'Pname'}]]]}|[{'type',13729,'integer',[]}]]}|[[{'type',13729,'constraint',[{'atom',13729,'is_subtype'}|[[{'var',13729,'Target'}|[{'type',13729,'enum',[]}]]]]}|[{'type',13729,'constraint',[{'atom',13729,'is_subtype'}|[[{'var',13729,'Attachment'}|[{'type',13729,'enum',[]}]]]]}|[{'type',13729,'constraint',[{'atom',13729,'is_subtype'}|[[{'var',13729,'Pname'}|[{'type',13729,'enum',[]}]]]]}]]]]]}]}],
		%% Line 13749
		'spec' =
		    %% Line 13749
		    [{{'generateMipmap',1},[{'type',13749,'bounded_fun',[{'type',13749,'fun',[{'type',13749,'product',[{'var',13749,'Target'}]}|[{'atom',13749,'ok'}]]}|[[{'type',13749,'constraint',[{'atom',13749,'is_subtype'}|[[{'var',13749,'Target'}|[{'type',13749,'enum',[]}]]]]}]]]}]}],
		%% Line 13791
		'spec' =
		    %% Line 13791
		    [{{'blitFramebuffer',10},[{'type',13791,'bounded_fun',[{'type',13791,'fun',[{'type',13791,'product',[{'var',13791,'SrcX0'}|[{'var',13791,'SrcY0'}|[{'var',13791,'SrcX1'}|[{'var',13791,'SrcY1'}|[{'var',13791,'DstX0'}|[{'var',13791,'DstY0'}|[{'var',13791,'DstX1'}|[{'var',13791,'DstY1'}|[{'var',13791,'Mask'}|[{'var',13791,'Filter'}]]]]]]]]]]}|[{'atom',13791,'ok'}]]}|[[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'SrcX0'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'SrcY0'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'SrcX1'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'SrcY1'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'DstX0'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'DstY0'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'DstX1'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'DstY1'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'Mask'}|[{'type',13791,'integer',[]}]]]]}|[{'type',13791,'constraint',[{'atom',13791,'is_subtype'}|[[{'var',13791,'Filter'}|[{'type',13791,'enum',[]}]]]]}]]]]]]]]]]]]}]}],
		%% Line 13815
		'spec' =
		    %% Line 13815
		    [{{'renderbufferStorageMultisample',5},[{'type',13815,'bounded_fun',[{'type',13815,'fun',[{'type',13815,'product',[{'var',13815,'Target'}|[{'var',13815,'Samples'}|[{'var',13815,'Internalformat'}|[{'var',13815,'Width'}|[{'var',13815,'Height'}]]]]]}|[{'atom',13815,'ok'}]]}|[[{'type',13815,'constraint',[{'atom',13815,'is_subtype'}|[[{'var',13815,'Target'}|[{'type',13815,'enum',[]}]]]]}|[{'type',13815,'constraint',[{'atom',13815,'is_subtype'}|[[{'var',13815,'Samples'}|[{'type',13815,'integer',[]}]]]]}|[{'type',13815,'constraint',[{'atom',13815,'is_subtype'}|[[{'var',13815,'Internalformat'}|[{'type',13815,'enum',[]}]]]]}|[{'type',13815,'constraint',[{'atom',13815,'is_subtype'}|[[{'var',13815,'Width'}|[{'type',13815,'integer',[]}]]]]}|[{'type',13815,'constraint',[{'atom',13815,'is_subtype'}|[[{'var',13815,'Height'}|[{'type',13815,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 13821
		'spec' =
		    %% Line 13821
		    [{{'framebufferTextureLayer',5},[{'type',13821,'bounded_fun',[{'type',13821,'fun',[{'type',13821,'product',[{'var',13821,'Target'}|[{'var',13821,'Attachment'}|[{'var',13821,'Texture'}|[{'var',13821,'Level'}|[{'var',13821,'Layer'}]]]]]}|[{'atom',13821,'ok'}]]}|[[{'type',13821,'constraint',[{'atom',13821,'is_subtype'}|[[{'var',13821,'Target'}|[{'type',13821,'enum',[]}]]]]}|[{'type',13821,'constraint',[{'atom',13821,'is_subtype'}|[[{'var',13821,'Attachment'}|[{'type',13821,'enum',[]}]]]]}|[{'type',13821,'constraint',[{'atom',13821,'is_subtype'}|[[{'var',13821,'Texture'}|[{'type',13821,'integer',[]}]]]]}|[{'type',13821,'constraint',[{'atom',13821,'is_subtype'}|[[{'var',13821,'Level'}|[{'type',13821,'integer',[]}]]]]}|[{'type',13821,'constraint',[{'atom',13821,'is_subtype'}|[[{'var',13821,'Layer'}|[{'type',13821,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 13827
		'spec' =
		    %% Line 13827
		    [{{'framebufferTextureFaceARB',5},[{'type',13827,'bounded_fun',[{'type',13827,'fun',[{'type',13827,'product',[{'var',13827,'Target'}|[{'var',13827,'Attachment'}|[{'var',13827,'Texture'}|[{'var',13827,'Level'}|[{'var',13827,'Face'}]]]]]}|[{'atom',13827,'ok'}]]}|[[{'type',13827,'constraint',[{'atom',13827,'is_subtype'}|[[{'var',13827,'Target'}|[{'type',13827,'enum',[]}]]]]}|[{'type',13827,'constraint',[{'atom',13827,'is_subtype'}|[[{'var',13827,'Attachment'}|[{'type',13827,'enum',[]}]]]]}|[{'type',13827,'constraint',[{'atom',13827,'is_subtype'}|[[{'var',13827,'Texture'}|[{'type',13827,'integer',[]}]]]]}|[{'type',13827,'constraint',[{'atom',13827,'is_subtype'}|[[{'var',13827,'Level'}|[{'type',13827,'integer',[]}]]]]}|[{'type',13827,'constraint',[{'atom',13827,'is_subtype'}|[[{'var',13827,'Face'}|[{'type',13827,'enum',[]}]]]]}]]]]]]]}]}],
		%% Line 13841
		'spec' =
		    %% Line 13841
		    [{{'flushMappedBufferRange',3},[{'type',13841,'bounded_fun',[{'type',13841,'fun',[{'type',13841,'product',[{'var',13841,'Target'}|[{'var',13841,'Offset'}|[{'var',13841,'Length'}]]]}|[{'atom',13841,'ok'}]]}|[[{'type',13841,'constraint',[{'atom',13841,'is_subtype'}|[[{'var',13841,'Target'}|[{'type',13841,'enum',[]}]]]]}|[{'type',13841,'constraint',[{'atom',13841,'is_subtype'}|[[{'var',13841,'Offset'}|[{'type',13841,'integer',[]}]]]]}|[{'type',13841,'constraint',[{'atom',13841,'is_subtype'}|[[{'var',13841,'Length'}|[{'type',13841,'integer',[]}]]]]}]]]]]}]}],
		%% Line 13856
		'spec' =
		    %% Line 13856
		    [{{'bindVertexArray',1},[{'type',13856,'bounded_fun',[{'type',13856,'fun',[{'type',13856,'product',[{'var',13856,'Array'}]}|[{'atom',13856,'ok'}]]}|[[{'type',13856,'constraint',[{'atom',13856,'is_subtype'}|[[{'var',13856,'Array'}|[{'type',13856,'integer',[]}]]]]}]]]}]}],
		%% Line 13869
		'spec' =
		    %% Line 13869
		    [{{'deleteVertexArrays',1},[{'type',13869,'bounded_fun',[{'type',13869,'fun',[{'type',13869,'product',[{'var',13869,'Arrays'}]}|[{'atom',13869,'ok'}]]}|[[{'type',13869,'constraint',[{'atom',13869,'is_subtype'}|[[{'var',13869,'Arrays'}|[{'type',13869,'list',[{'type',13869,'integer',[]}]}]]]]}]]]}]}],
		%% Line 13888
		'spec' =
		    %% Line 13888
		    [{{'genVertexArrays',1},[{'type',13888,'bounded_fun',[{'type',13888,'fun',[{'type',13888,'product',[{'var',13888,'N'}]}|[{'type',13888,'list',[{'type',13888,'integer',[]}]}]]}|[[{'type',13888,'constraint',[{'atom',13888,'is_subtype'}|[[{'var',13888,'N'}|[{'type',13888,'integer',[]}]]]]}]]]}]}],
		%% Line 13902
		'spec' =
		    %% Line 13902
		    [{{'isVertexArray',1},[{'type',13902,'bounded_fun',[{'type',13902,'fun',[{'type',13902,'product',[{'var',13902,'Array'}]}|[{'type',13902,'union',[{'integer',13902,0}|[{'integer',13902,1}]]}]]}|[[{'type',13902,'constraint',[{'atom',13902,'is_subtype'}|[[{'var',13902,'Array'}|[{'type',13902,'integer',[]}]]]]}]]]}]}],
		%% Line 13929
		'spec' =
		    %% Line 13929
		    [{{'getUniformIndices',2},[{'type',13929,'bounded_fun',[{'type',13929,'fun',[{'type',13929,'product',[{'var',13929,'Program'}|[{'var',13929,'UniformNames'}]]}|[{'type',13929,'list',[{'type',13929,'integer',[]}]}]]}|[[{'type',13929,'constraint',[{'atom',13929,'is_subtype'}|[[{'var',13929,'Program'}|[{'type',13929,'integer',[]}]]]]}|[{'type',13929,'constraint',[{'atom',13929,'is_subtype'}|[[{'var',13929,'UniformNames'}|[{'type',13929,'list',[{'type',13929,'string',[]}]}]]]]}]]]]}]}],
		%% Line 13937
		'spec' =
		    %% Line 13937
		    [{{'getActiveUniformsiv',3},[{'type',13937,'bounded_fun',[{'type',13937,'fun',[{'type',13937,'product',[{'var',13937,'Program'}|[{'var',13937,'UniformIndices'}|[{'var',13937,'Pname'}]]]}|[{'type',13937,'list',[{'type',13937,'integer',[]}]}]]}|[[{'type',13937,'constraint',[{'atom',13937,'is_subtype'}|[[{'var',13937,'Program'}|[{'type',13937,'integer',[]}]]]]}|[{'type',13937,'constraint',[{'atom',13937,'is_subtype'}|[[{'var',13937,'UniformIndices'}|[{'type',13937,'list',[{'type',13937,'integer',[]}]}]]]]}|[{'type',13937,'constraint',[{'atom',13937,'is_subtype'}|[[{'var',13937,'Pname'}|[{'type',13937,'enum',[]}]]]]}]]]]]}]}],
		%% Line 13967
		'spec' =
		    %% Line 13967
		    [{{'getActiveUniformName',3},[{'type',13967,'bounded_fun',[{'type',13967,'fun',[{'type',13967,'product',[{'var',13967,'Program'}|[{'var',13967,'UniformIndex'}|[{'var',13967,'BufSize'}]]]}|[{'type',13967,'string',[]}]]}|[[{'type',13967,'constraint',[{'atom',13967,'is_subtype'}|[[{'var',13967,'Program'}|[{'type',13967,'integer',[]}]]]]}|[{'type',13967,'constraint',[{'atom',13967,'is_subtype'}|[[{'var',13967,'UniformIndex'}|[{'type',13967,'integer',[]}]]]]}|[{'type',13967,'constraint',[{'atom',13967,'is_subtype'}|[[{'var',13967,'BufSize'}|[{'type',13967,'integer',[]}]]]]}]]]]]}]}],
		%% Line 13991
		'spec' =
		    %% Line 13991
		    [{{'getUniformBlockIndex',2},[{'type',13991,'bounded_fun',[{'type',13991,'fun',[{'type',13991,'product',[{'var',13991,'Program'}|[{'var',13991,'UniformBlockName'}]]}|[{'type',13991,'integer',[]}]]}|[[{'type',13991,'constraint',[{'atom',13991,'is_subtype'}|[[{'var',13991,'Program'}|[{'type',13991,'integer',[]}]]]]}|[{'type',13991,'constraint',[{'atom',13991,'is_subtype'}|[[{'var',13991,'UniformBlockName'}|[{'type',13991,'string',[]}]]]]}]]]]}]}],
		%% Line 14043
		'spec' =
		    %% Line 14043
		    [{{'getActiveUniformBlockiv',4},[{'type',14043,'bounded_fun',[{'type',14043,'fun',[{'type',14043,'product',[{'var',14043,'Program'}|[{'var',14043,'UniformBlockIndex'}|[{'var',14043,'Pname'}|[{'var',14043,'Params'}]]]]}|[{'atom',14043,'ok'}]]}|[[{'type',14043,'constraint',[{'atom',14043,'is_subtype'}|[[{'var',14043,'Program'}|[{'type',14043,'integer',[]}]]]]}|[{'type',14043,'constraint',[{'atom',14043,'is_subtype'}|[[{'var',14043,'UniformBlockIndex'}|[{'type',14043,'integer',[]}]]]]}|[{'type',14043,'constraint',[{'atom',14043,'is_subtype'}|[[{'var',14043,'Pname'}|[{'type',14043,'enum',[]}]]]]}|[{'type',14043,'constraint',[{'atom',14043,'is_subtype'}|[[{'var',14043,'Params'}|[{'type',14043,'mem',[]}]]]]}]]]]]]}]}],
		%% Line 14073
		'spec' =
		    %% Line 14073
		    [{{'getActiveUniformBlockName',3},[{'type',14073,'bounded_fun',[{'type',14073,'fun',[{'type',14073,'product',[{'var',14073,'Program'}|[{'var',14073,'UniformBlockIndex'}|[{'var',14073,'BufSize'}]]]}|[{'type',14073,'string',[]}]]}|[[{'type',14073,'constraint',[{'atom',14073,'is_subtype'}|[[{'var',14073,'Program'}|[{'type',14073,'integer',[]}]]]]}|[{'type',14073,'constraint',[{'atom',14073,'is_subtype'}|[[{'var',14073,'UniformBlockIndex'}|[{'type',14073,'integer',[]}]]]]}|[{'type',14073,'constraint',[{'atom',14073,'is_subtype'}|[[{'var',14073,'BufSize'}|[{'type',14073,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14093
		'spec' =
		    %% Line 14093
		    [{{'uniformBlockBinding',3},[{'type',14093,'bounded_fun',[{'type',14093,'fun',[{'type',14093,'product',[{'var',14093,'Program'}|[{'var',14093,'UniformBlockIndex'}|[{'var',14093,'UniformBlockBinding'}]]]}|[{'atom',14093,'ok'}]]}|[[{'type',14093,'constraint',[{'atom',14093,'is_subtype'}|[[{'var',14093,'Program'}|[{'type',14093,'integer',[]}]]]]}|[{'type',14093,'constraint',[{'atom',14093,'is_subtype'}|[[{'var',14093,'UniformBlockIndex'}|[{'type',14093,'integer',[]}]]]]}|[{'type',14093,'constraint',[{'atom',14093,'is_subtype'}|[[{'var',14093,'UniformBlockBinding'}|[{'type',14093,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14119
		'spec' =
		    %% Line 14119
		    [{{'copyBufferSubData',5},[{'type',14119,'bounded_fun',[{'type',14119,'fun',[{'type',14119,'product',[{'var',14119,'ReadTarget'}|[{'var',14119,'WriteTarget'}|[{'var',14119,'ReadOffset'}|[{'var',14119,'WriteOffset'}|[{'var',14119,'Size'}]]]]]}|[{'atom',14119,'ok'}]]}|[[{'type',14119,'constraint',[{'atom',14119,'is_subtype'}|[[{'var',14119,'ReadTarget'}|[{'type',14119,'enum',[]}]]]]}|[{'type',14119,'constraint',[{'atom',14119,'is_subtype'}|[[{'var',14119,'WriteTarget'}|[{'type',14119,'enum',[]}]]]]}|[{'type',14119,'constraint',[{'atom',14119,'is_subtype'}|[[{'var',14119,'ReadOffset'}|[{'type',14119,'integer',[]}]]]]}|[{'type',14119,'constraint',[{'atom',14119,'is_subtype'}|[[{'var',14119,'WriteOffset'}|[{'type',14119,'integer',[]}]]]]}|[{'type',14119,'constraint',[{'atom',14119,'is_subtype'}|[[{'var',14119,'Size'}|[{'type',14119,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 14133
		'spec' =
		    %% Line 14133
		    [{{'drawElementsBaseVertex',5},[{'type',14133,'bounded_fun',[{'type',14133,'fun',[{'type',14133,'product',[{'var',14133,'Mode'}|[{'var',14133,'Count'}|[{'var',14133,'Type'}|[{'var',14133,'Indices'}|[{'var',14133,'Basevertex'}]]]]]}|[{'atom',14133,'ok'}]]}|[[{'type',14133,'constraint',[{'atom',14133,'is_subtype'}|[[{'var',14133,'Mode'}|[{'type',14133,'enum',[]}]]]]}|[{'type',14133,'constraint',[{'atom',14133,'is_subtype'}|[[{'var',14133,'Count'}|[{'type',14133,'integer',[]}]]]]}|[{'type',14133,'constraint',[{'atom',14133,'is_subtype'}|[[{'var',14133,'Type'}|[{'type',14133,'enum',[]}]]]]}|[{'type',14133,'constraint',[{'atom',14133,'is_subtype'}|[[{'var',14133,'Indices'}|[{'type',14133,'union',[{'type',14133,'offset',[]}|[{'type',14133,'mem',[]}]]}]]]]}|[{'type',14133,'constraint',[{'atom',14133,'is_subtype'}|[[{'var',14133,'Basevertex'}|[{'type',14133,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 14155
		'spec' =
		    %% Line 14155
		    [{{'drawRangeElementsBaseVertex',7},[{'type',14155,'bounded_fun',[{'type',14155,'fun',[{'type',14155,'product',[{'var',14155,'Mode'}|[{'var',14155,'Start'}|[{'var',14155,'End'}|[{'var',14155,'Count'}|[{'var',14155,'Type'}|[{'var',14155,'Indices'}|[{'var',14155,'Basevertex'}]]]]]]]}|[{'atom',14155,'ok'}]]}|[[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Mode'}|[{'type',14155,'enum',[]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Start'}|[{'type',14155,'integer',[]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'End'}|[{'type',14155,'integer',[]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Count'}|[{'type',14155,'integer',[]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Type'}|[{'type',14155,'enum',[]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Indices'}|[{'type',14155,'union',[{'type',14155,'offset',[]}|[{'type',14155,'mem',[]}]]}]]]]}|[{'type',14155,'constraint',[{'atom',14155,'is_subtype'}|[[{'var',14155,'Basevertex'}|[{'type',14155,'integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 14172
		'spec' =
		    %% Line 14172
		    [{{'drawElementsInstancedBaseVertex',6},[{'type',14172,'bounded_fun',[{'type',14172,'fun',[{'type',14172,'product',[{'var',14172,'Mode'}|[{'var',14172,'Count'}|[{'var',14172,'Type'}|[{'var',14172,'Indices'}|[{'var',14172,'Primcount'}|[{'var',14172,'Basevertex'}]]]]]]}|[{'atom',14172,'ok'}]]}|[[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Mode'}|[{'type',14172,'enum',[]}]]]]}|[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Count'}|[{'type',14172,'integer',[]}]]]]}|[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Type'}|[{'type',14172,'enum',[]}]]]]}|[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Indices'}|[{'type',14172,'union',[{'type',14172,'offset',[]}|[{'type',14172,'mem',[]}]]}]]]]}|[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Primcount'}|[{'type',14172,'integer',[]}]]]]}|[{'type',14172,'constraint',[{'atom',14172,'is_subtype'}|[[{'var',14172,'Basevertex'}|[{'type',14172,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 14209
		'spec' =
		    %% Line 14209
		    [{{'provokingVertex',1},[{'type',14209,'bounded_fun',[{'type',14209,'fun',[{'type',14209,'product',[{'var',14209,'Mode'}]}|[{'atom',14209,'ok'}]]}|[[{'type',14209,'constraint',[{'atom',14209,'is_subtype'}|[[{'var',14209,'Mode'}|[{'type',14209,'enum',[]}]]]]}]]]}]}],
		%% Line 14233
		'spec' =
		    %% Line 14233
		    [{{'fenceSync',2},[{'type',14233,'bounded_fun',[{'type',14233,'fun',[{'type',14233,'product',[{'var',14233,'Condition'}|[{'var',14233,'Flags'}]]}|[{'type',14233,'integer',[]}]]}|[[{'type',14233,'constraint',[{'atom',14233,'is_subtype'}|[[{'var',14233,'Condition'}|[{'type',14233,'enum',[]}]]]]}|[{'type',14233,'constraint',[{'atom',14233,'is_subtype'}|[[{'var',14233,'Flags'}|[{'type',14233,'integer',[]}]]]]}]]]]}]}],
		%% Line 14244
		'spec' =
		    %% Line 14244
		    [{{'isSync',1},[{'type',14244,'bounded_fun',[{'type',14244,'fun',[{'type',14244,'product',[{'var',14244,'Sync'}]}|[{'type',14244,'union',[{'integer',14244,0}|[{'integer',14244,1}]]}]]}|[[{'type',14244,'constraint',[{'atom',14244,'is_subtype'}|[[{'var',14244,'Sync'}|[{'type',14244,'integer',[]}]]]]}]]]}]}],
		%% Line 14261
		'spec' =
		    %% Line 14261
		    [{{'deleteSync',1},[{'type',14261,'bounded_fun',[{'type',14261,'fun',[{'type',14261,'product',[{'var',14261,'Sync'}]}|[{'atom',14261,'ok'}]]}|[[{'type',14261,'constraint',[{'atom',14261,'is_subtype'}|[[{'var',14261,'Sync'}|[{'type',14261,'integer',[]}]]]]}]]]}]}],
		%% Line 14287
		'spec' =
		    %% Line 14287
		    [{{'clientWaitSync',3},[{'type',14287,'bounded_fun',[{'type',14287,'fun',[{'type',14287,'product',[{'var',14287,'Sync'}|[{'var',14287,'Flags'}|[{'var',14287,'Timeout'}]]]}|[{'type',14287,'enum',[]}]]}|[[{'type',14287,'constraint',[{'atom',14287,'is_subtype'}|[[{'var',14287,'Sync'}|[{'type',14287,'integer',[]}]]]]}|[{'type',14287,'constraint',[{'atom',14287,'is_subtype'}|[[{'var',14287,'Flags'}|[{'type',14287,'integer',[]}]]]]}|[{'type',14287,'constraint',[{'atom',14287,'is_subtype'}|[[{'var',14287,'Timeout'}|[{'type',14287,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14309
		'spec' =
		    %% Line 14309
		    [{{'waitSync',3},[{'type',14309,'bounded_fun',[{'type',14309,'fun',[{'type',14309,'product',[{'var',14309,'Sync'}|[{'var',14309,'Flags'}|[{'var',14309,'Timeout'}]]]}|[{'atom',14309,'ok'}]]}|[[{'type',14309,'constraint',[{'atom',14309,'is_subtype'}|[[{'var',14309,'Sync'}|[{'type',14309,'integer',[]}]]]]}|[{'type',14309,'constraint',[{'atom',14309,'is_subtype'}|[[{'var',14309,'Flags'}|[{'type',14309,'integer',[]}]]]]}|[{'type',14309,'constraint',[{'atom',14309,'is_subtype'}|[[{'var',14309,'Timeout'}|[{'type',14309,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14315
		'spec' =
		    %% Line 14315
		    [{{'getInteger64v',1},[{'type',14315,'bounded_fun',[{'type',14315,'fun',[{'type',14315,'product',[{'var',14315,'Pname'}]}|[{'type',14315,'list',[{'type',14315,'integer',[]}]}]]}|[[{'type',14315,'constraint',[{'atom',14315,'is_subtype'}|[[{'var',14315,'Pname'}|[{'type',14315,'enum',[]}]]]]}]]]}]}],
		%% Line 14350
		'spec' =
		    %% Line 14350
		    [{{'getSynciv',3},[{'type',14350,'bounded_fun',[{'type',14350,'fun',[{'type',14350,'product',[{'var',14350,'Sync'}|[{'var',14350,'Pname'}|[{'var',14350,'BufSize'}]]]}|[{'type',14350,'list',[{'type',14350,'integer',[]}]}]]}|[[{'type',14350,'constraint',[{'atom',14350,'is_subtype'}|[[{'var',14350,'Sync'}|[{'type',14350,'integer',[]}]]]]}|[{'type',14350,'constraint',[{'atom',14350,'is_subtype'}|[[{'var',14350,'Pname'}|[{'type',14350,'enum',[]}]]]]}|[{'type',14350,'constraint',[{'atom',14350,'is_subtype'}|[[{'var',14350,'BufSize'}|[{'type',14350,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14378
		'spec' =
		    %% Line 14378
		    [{{'texImage2DMultisample',6},[{'type',14378,'bounded_fun',[{'type',14378,'fun',[{'type',14378,'product',[{'var',14378,'Target'}|[{'var',14378,'Samples'}|[{'var',14378,'Internalformat'}|[{'var',14378,'Width'}|[{'var',14378,'Height'}|[{'var',14378,'Fixedsamplelocations'}]]]]]]}|[{'atom',14378,'ok'}]]}|[[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Target'}|[{'type',14378,'enum',[]}]]]]}|[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Samples'}|[{'type',14378,'integer',[]}]]]]}|[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Internalformat'}|[{'type',14378,'integer',[]}]]]]}|[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Width'}|[{'type',14378,'integer',[]}]]]]}|[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Height'}|[{'type',14378,'integer',[]}]]]]}|[{'type',14378,'constraint',[{'atom',14378,'is_subtype'}|[[{'var',14378,'Fixedsamplelocations'}|[{'type',14378,'union',[{'integer',14378,0}|[{'integer',14378,1}]]}]]]]}]]]]]]]]}]}],
		%% Line 14406
		'spec' =
		    %% Line 14406
		    [{{'texImage3DMultisample',7},[{'type',14406,'bounded_fun',[{'type',14406,'fun',[{'type',14406,'product',[{'var',14406,'Target'}|[{'var',14406,'Samples'}|[{'var',14406,'Internalformat'}|[{'var',14406,'Width'}|[{'var',14406,'Height'}|[{'var',14406,'Depth'}|[{'var',14406,'Fixedsamplelocations'}]]]]]]]}|[{'atom',14406,'ok'}]]}|[[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Target'}|[{'type',14406,'enum',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Samples'}|[{'type',14406,'integer',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Internalformat'}|[{'type',14406,'integer',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Width'}|[{'type',14406,'integer',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Height'}|[{'type',14406,'integer',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Depth'}|[{'type',14406,'integer',[]}]]]]}|[{'type',14406,'constraint',[{'atom',14406,'is_subtype'}|[[{'var',14406,'Fixedsamplelocations'}|[{'type',14406,'union',[{'integer',14406,0}|[{'integer',14406,1}]]}]]]]}]]]]]]]]]}]}],
		%% Line 14424
		'spec' =
		    %% Line 14424
		    [{{'getMultisamplefv',2},[{'type',14424,'bounded_fun',[{'type',14424,'fun',[{'type',14424,'product',[{'var',14424,'Pname'}|[{'var',14424,'Index'}]]}|[{'type',14424,'tuple',[{'type',14424,'float',[]}|[{'type',14424,'float',[]}]]}]]}|[[{'type',14424,'constraint',[{'atom',14424,'is_subtype'}|[[{'var',14424,'Pname'}|[{'type',14424,'enum',[]}]]]]}|[{'type',14424,'constraint',[{'atom',14424,'is_subtype'}|[[{'var',14424,'Index'}|[{'type',14424,'integer',[]}]]]]}]]]]}]}],
		%% Line 14439
		'spec' =
		    %% Line 14439
		    [{{'sampleMaski',2},[{'type',14439,'bounded_fun',[{'type',14439,'fun',[{'type',14439,'product',[{'var',14439,'Index'}|[{'var',14439,'Mask'}]]}|[{'atom',14439,'ok'}]]}|[[{'type',14439,'constraint',[{'atom',14439,'is_subtype'}|[[{'var',14439,'Index'}|[{'type',14439,'integer',[]}]]]]}|[{'type',14439,'constraint',[{'atom',14439,'is_subtype'}|[[{'var',14439,'Mask'}|[{'type',14439,'integer',[]}]]]]}]]]]}]}],
		%% Line 14446
		'spec' =
		    %% Line 14446
		    [{{'namedStringARB',3},[{'type',14446,'bounded_fun',[{'type',14446,'fun',[{'type',14446,'product',[{'var',14446,'Type'}|[{'var',14446,'Name'}|[{'var',14446,'String'}]]]}|[{'atom',14446,'ok'}]]}|[[{'type',14446,'constraint',[{'atom',14446,'is_subtype'}|[[{'var',14446,'Type'}|[{'type',14446,'enum',[]}]]]]}|[{'type',14446,'constraint',[{'atom',14446,'is_subtype'}|[[{'var',14446,'Name'}|[{'type',14446,'string',[]}]]]]}|[{'type',14446,'constraint',[{'atom',14446,'is_subtype'}|[[{'var',14446,'String'}|[{'type',14446,'string',[]}]]]]}]]]]]}]}],
		%% Line 14453
		'spec' =
		    %% Line 14453
		    [{{'deleteNamedStringARB',1},[{'type',14453,'bounded_fun',[{'type',14453,'fun',[{'type',14453,'product',[{'var',14453,'Name'}]}|[{'atom',14453,'ok'}]]}|[[{'type',14453,'constraint',[{'atom',14453,'is_subtype'}|[[{'var',14453,'Name'}|[{'type',14453,'string',[]}]]]]}]]]}]}],
		%% Line 14460
		'spec' =
		    %% Line 14460
		    [{{'compileShaderIncludeARB',2},[{'type',14460,'bounded_fun',[{'type',14460,'fun',[{'type',14460,'product',[{'var',14460,'Shader'}|[{'var',14460,'Path'}]]}|[{'atom',14460,'ok'}]]}|[[{'type',14460,'constraint',[{'atom',14460,'is_subtype'}|[[{'var',14460,'Shader'}|[{'type',14460,'integer',[]}]]]]}|[{'type',14460,'constraint',[{'atom',14460,'is_subtype'}|[[{'var',14460,'Path'}|[{'type',14460,'list',[{'type',14460,'string',[]}]}]]]]}]]]]}]}],
		%% Line 14468
		'spec' =
		    %% Line 14468
		    [{{'isNamedStringARB',1},[{'type',14468,'bounded_fun',[{'type',14468,'fun',[{'type',14468,'product',[{'var',14468,'Name'}]}|[{'type',14468,'union',[{'integer',14468,0}|[{'integer',14468,1}]]}]]}|[[{'type',14468,'constraint',[{'atom',14468,'is_subtype'}|[[{'var',14468,'Name'}|[{'type',14468,'string',[]}]]]]}]]]}]}],
		%% Line 14475
		'spec' =
		    %% Line 14475
		    [{{'getNamedStringARB',2},[{'type',14475,'bounded_fun',[{'type',14475,'fun',[{'type',14475,'product',[{'var',14475,'Name'}|[{'var',14475,'BufSize'}]]}|[{'type',14475,'string',[]}]]}|[[{'type',14475,'constraint',[{'atom',14475,'is_subtype'}|[[{'var',14475,'Name'}|[{'type',14475,'string',[]}]]]]}|[{'type',14475,'constraint',[{'atom',14475,'is_subtype'}|[[{'var',14475,'BufSize'}|[{'type',14475,'integer',[]}]]]]}]]]]}]}],
		%% Line 14482
		'spec' =
		    %% Line 14482
		    [{{'getNamedStringivARB',2},[{'type',14482,'bounded_fun',[{'type',14482,'fun',[{'type',14482,'product',[{'var',14482,'Name'}|[{'var',14482,'Pname'}]]}|[{'type',14482,'integer',[]}]]}|[[{'type',14482,'constraint',[{'atom',14482,'is_subtype'}|[[{'var',14482,'Name'}|[{'type',14482,'string',[]}]]]]}|[{'type',14482,'constraint',[{'atom',14482,'is_subtype'}|[[{'var',14482,'Pname'}|[{'type',14482,'enum',[]}]]]]}]]]]}]}],
		%% Line 14489
		'spec' =
		    %% Line 14489
		    [{{'bindFragDataLocationIndexed',4},[{'type',14489,'bounded_fun',[{'type',14489,'fun',[{'type',14489,'product',[{'var',14489,'Program'}|[{'var',14489,'ColorNumber'}|[{'var',14489,'Index'}|[{'var',14489,'Name'}]]]]}|[{'atom',14489,'ok'}]]}|[[{'type',14489,'constraint',[{'atom',14489,'is_subtype'}|[[{'var',14489,'Program'}|[{'type',14489,'integer',[]}]]]]}|[{'type',14489,'constraint',[{'atom',14489,'is_subtype'}|[[{'var',14489,'ColorNumber'}|[{'type',14489,'integer',[]}]]]]}|[{'type',14489,'constraint',[{'atom',14489,'is_subtype'}|[[{'var',14489,'Index'}|[{'type',14489,'integer',[]}]]]]}|[{'type',14489,'constraint',[{'atom',14489,'is_subtype'}|[[{'var',14489,'Name'}|[{'type',14489,'string',[]}]]]]}]]]]]]}]}],
		%% Line 14500
		'spec' =
		    %% Line 14500
		    [{{'getFragDataIndex',2},[{'type',14500,'bounded_fun',[{'type',14500,'fun',[{'type',14500,'product',[{'var',14500,'Program'}|[{'var',14500,'Name'}]]}|[{'type',14500,'integer',[]}]]}|[[{'type',14500,'constraint',[{'atom',14500,'is_subtype'}|[[{'var',14500,'Program'}|[{'type',14500,'integer',[]}]]]]}|[{'type',14500,'constraint',[{'atom',14500,'is_subtype'}|[[{'var',14500,'Name'}|[{'type',14500,'string',[]}]]]]}]]]]}]}],
		%% Line 14518
		'spec' =
		    %% Line 14518
		    [{{'genSamplers',1},[{'type',14518,'bounded_fun',[{'type',14518,'fun',[{'type',14518,'product',[{'var',14518,'Count'}]}|[{'type',14518,'list',[{'type',14518,'integer',[]}]}]]}|[[{'type',14518,'constraint',[{'atom',14518,'is_subtype'}|[[{'var',14518,'Count'}|[{'type',14518,'integer',[]}]]]]}]]]}]}],
		%% Line 14531
		'spec' =
		    %% Line 14531
		    [{{'deleteSamplers',1},[{'type',14531,'bounded_fun',[{'type',14531,'fun',[{'type',14531,'product',[{'var',14531,'Samplers'}]}|[{'atom',14531,'ok'}]]}|[[{'type',14531,'constraint',[{'atom',14531,'is_subtype'}|[[{'var',14531,'Samplers'}|[{'type',14531,'list',[{'type',14531,'integer',[]}]}]]]]}]]]}]}],
		%% Line 14545
		'spec' =
		    %% Line 14545
		    [{{'isSampler',1},[{'type',14545,'bounded_fun',[{'type',14545,'fun',[{'type',14545,'product',[{'var',14545,'Sampler'}]}|[{'type',14545,'union',[{'integer',14545,0}|[{'integer',14545,1}]]}]]}|[[{'type',14545,'constraint',[{'atom',14545,'is_subtype'}|[[{'var',14545,'Sampler'}|[{'type',14545,'integer',[]}]]]]}]]]}]}],
		%% Line 14562
		'spec' =
		    %% Line 14562
		    [{{'bindSampler',2},[{'type',14562,'bounded_fun',[{'type',14562,'fun',[{'type',14562,'product',[{'var',14562,'Unit'}|[{'var',14562,'Sampler'}]]}|[{'atom',14562,'ok'}]]}|[[{'type',14562,'constraint',[{'atom',14562,'is_subtype'}|[[{'var',14562,'Unit'}|[{'type',14562,'integer',[]}]]]]}|[{'type',14562,'constraint',[{'atom',14562,'is_subtype'}|[[{'var',14562,'Sampler'}|[{'type',14562,'integer',[]}]]]]}]]]]}]}],
		%% Line 14708
		'spec' =
		    %% Line 14708
		    [{{'samplerParameteri',3},[{'type',14708,'bounded_fun',[{'type',14708,'fun',[{'type',14708,'product',[{'var',14708,'Sampler'}|[{'var',14708,'Pname'}|[{'var',14708,'Param'}]]]}|[{'atom',14708,'ok'}]]}|[[{'type',14708,'constraint',[{'atom',14708,'is_subtype'}|[[{'var',14708,'Sampler'}|[{'type',14708,'integer',[]}]]]]}|[{'type',14708,'constraint',[{'atom',14708,'is_subtype'}|[[{'var',14708,'Pname'}|[{'type',14708,'enum',[]}]]]]}|[{'type',14708,'constraint',[{'atom',14708,'is_subtype'}|[[{'var',14708,'Param'}|[{'type',14708,'integer',[]}]]]]}]]]]]}]}],
		%% Line 14714
		'spec' =
		    %% Line 14714
		    [{{'samplerParameteriv',3},[{'type',14714,'bounded_fun',[{'type',14714,'fun',[{'type',14714,'product',[{'var',14714,'Sampler'}|[{'var',14714,'Pname'}|[{'var',14714,'Param'}]]]}|[{'atom',14714,'ok'}]]}|[[{'type',14714,'constraint',[{'atom',14714,'is_subtype'}|[[{'var',14714,'Sampler'}|[{'type',14714,'integer',[]}]]]]}|[{'type',14714,'constraint',[{'atom',14714,'is_subtype'}|[[{'var',14714,'Pname'}|[{'type',14714,'enum',[]}]]]]}|[{'type',14714,'constraint',[{'atom',14714,'is_subtype'}|[[{'var',14714,'Param'}|[{'type',14714,'list',[{'type',14714,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 14721
		'spec' =
		    %% Line 14721
		    [{{'samplerParameterf',3},[{'type',14721,'bounded_fun',[{'type',14721,'fun',[{'type',14721,'product',[{'var',14721,'Sampler'}|[{'var',14721,'Pname'}|[{'var',14721,'Param'}]]]}|[{'atom',14721,'ok'}]]}|[[{'type',14721,'constraint',[{'atom',14721,'is_subtype'}|[[{'var',14721,'Sampler'}|[{'type',14721,'integer',[]}]]]]}|[{'type',14721,'constraint',[{'atom',14721,'is_subtype'}|[[{'var',14721,'Pname'}|[{'type',14721,'enum',[]}]]]]}|[{'type',14721,'constraint',[{'atom',14721,'is_subtype'}|[[{'var',14721,'Param'}|[{'type',14721,'float',[]}]]]]}]]]]]}]}],
		%% Line 14727
		'spec' =
		    %% Line 14727
		    [{{'samplerParameterfv',3},[{'type',14727,'bounded_fun',[{'type',14727,'fun',[{'type',14727,'product',[{'var',14727,'Sampler'}|[{'var',14727,'Pname'}|[{'var',14727,'Param'}]]]}|[{'atom',14727,'ok'}]]}|[[{'type',14727,'constraint',[{'atom',14727,'is_subtype'}|[[{'var',14727,'Sampler'}|[{'type',14727,'integer',[]}]]]]}|[{'type',14727,'constraint',[{'atom',14727,'is_subtype'}|[[{'var',14727,'Pname'}|[{'type',14727,'enum',[]}]]]]}|[{'type',14727,'constraint',[{'atom',14727,'is_subtype'}|[[{'var',14727,'Param'}|[{'type',14727,'list',[{'type',14727,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 14734
		'spec' =
		    %% Line 14734
		    [{{'samplerParameterIiv',3},[{'type',14734,'bounded_fun',[{'type',14734,'fun',[{'type',14734,'product',[{'var',14734,'Sampler'}|[{'var',14734,'Pname'}|[{'var',14734,'Param'}]]]}|[{'atom',14734,'ok'}]]}|[[{'type',14734,'constraint',[{'atom',14734,'is_subtype'}|[[{'var',14734,'Sampler'}|[{'type',14734,'integer',[]}]]]]}|[{'type',14734,'constraint',[{'atom',14734,'is_subtype'}|[[{'var',14734,'Pname'}|[{'type',14734,'enum',[]}]]]]}|[{'type',14734,'constraint',[{'atom',14734,'is_subtype'}|[[{'var',14734,'Param'}|[{'type',14734,'list',[{'type',14734,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 14742
		'spec' =
		    %% Line 14742
		    [{{'samplerParameterIuiv',3},[{'type',14742,'bounded_fun',[{'type',14742,'fun',[{'type',14742,'product',[{'var',14742,'Sampler'}|[{'var',14742,'Pname'}|[{'var',14742,'Param'}]]]}|[{'atom',14742,'ok'}]]}|[[{'type',14742,'constraint',[{'atom',14742,'is_subtype'}|[[{'var',14742,'Sampler'}|[{'type',14742,'integer',[]}]]]]}|[{'type',14742,'constraint',[{'atom',14742,'is_subtype'}|[[{'var',14742,'Pname'}|[{'type',14742,'enum',[]}]]]]}|[{'type',14742,'constraint',[{'atom',14742,'is_subtype'}|[[{'var',14742,'Param'}|[{'type',14742,'list',[{'type',14742,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 14790
		'spec' =
		    %% Line 14790
		    [{{'getSamplerParameteriv',2},[{'type',14790,'bounded_fun',[{'type',14790,'fun',[{'type',14790,'product',[{'var',14790,'Sampler'}|[{'var',14790,'Pname'}]]}|[{'type',14790,'list',[{'type',14790,'integer',[]}]}]]}|[[{'type',14790,'constraint',[{'atom',14790,'is_subtype'}|[[{'var',14790,'Sampler'}|[{'type',14790,'integer',[]}]]]]}|[{'type',14790,'constraint',[{'atom',14790,'is_subtype'}|[[{'var',14790,'Pname'}|[{'type',14790,'enum',[]}]]]]}]]]]}]}],
		%% Line 14796
		'spec' =
		    %% Line 14796
		    [{{'getSamplerParameterIiv',2},[{'type',14796,'bounded_fun',[{'type',14796,'fun',[{'type',14796,'product',[{'var',14796,'Sampler'}|[{'var',14796,'Pname'}]]}|[{'type',14796,'list',[{'type',14796,'integer',[]}]}]]}|[[{'type',14796,'constraint',[{'atom',14796,'is_subtype'}|[[{'var',14796,'Sampler'}|[{'type',14796,'integer',[]}]]]]}|[{'type',14796,'constraint',[{'atom',14796,'is_subtype'}|[[{'var',14796,'Pname'}|[{'type',14796,'enum',[]}]]]]}]]]]}]}],
		%% Line 14802
		'spec' =
		    %% Line 14802
		    [{{'getSamplerParameterfv',2},[{'type',14802,'bounded_fun',[{'type',14802,'fun',[{'type',14802,'product',[{'var',14802,'Sampler'}|[{'var',14802,'Pname'}]]}|[{'type',14802,'list',[{'type',14802,'float',[]}]}]]}|[[{'type',14802,'constraint',[{'atom',14802,'is_subtype'}|[[{'var',14802,'Sampler'}|[{'type',14802,'integer',[]}]]]]}|[{'type',14802,'constraint',[{'atom',14802,'is_subtype'}|[[{'var',14802,'Pname'}|[{'type',14802,'enum',[]}]]]]}]]]]}]}],
		%% Line 14809
		'spec' =
		    %% Line 14809
		    [{{'getSamplerParameterIuiv',2},[{'type',14809,'bounded_fun',[{'type',14809,'fun',[{'type',14809,'product',[{'var',14809,'Sampler'}|[{'var',14809,'Pname'}]]}|[{'type',14809,'list',[{'type',14809,'integer',[]}]}]]}|[[{'type',14809,'constraint',[{'atom',14809,'is_subtype'}|[[{'var',14809,'Sampler'}|[{'type',14809,'integer',[]}]]]]}|[{'type',14809,'constraint',[{'atom',14809,'is_subtype'}|[[{'var',14809,'Pname'}|[{'type',14809,'enum',[]}]]]]}]]]]}]}],
		%% Line 14824
		'spec' =
		    %% Line 14824
		    [{{'queryCounter',2},[{'type',14824,'bounded_fun',[{'type',14824,'fun',[{'type',14824,'product',[{'var',14824,'Id'}|[{'var',14824,'Target'}]]}|[{'atom',14824,'ok'}]]}|[[{'type',14824,'constraint',[{'atom',14824,'is_subtype'}|[[{'var',14824,'Id'}|[{'type',14824,'integer',[]}]]]]}|[{'type',14824,'constraint',[{'atom',14824,'is_subtype'}|[[{'var',14824,'Target'}|[{'type',14824,'enum',[]}]]]]}]]]]}]}],
		%% Line 14831
		'spec' =
		    %% Line 14831
		    [{{'getQueryObjecti64v',2},[{'type',14831,'bounded_fun',[{'type',14831,'fun',[{'type',14831,'product',[{'var',14831,'Id'}|[{'var',14831,'Pname'}]]}|[{'type',14831,'integer',[]}]]}|[[{'type',14831,'constraint',[{'atom',14831,'is_subtype'}|[[{'var',14831,'Id'}|[{'type',14831,'integer',[]}]]]]}|[{'type',14831,'constraint',[{'atom',14831,'is_subtype'}|[[{'var',14831,'Pname'}|[{'type',14831,'enum',[]}]]]]}]]]]}]}],
		%% Line 14838
		'spec' =
		    %% Line 14838
		    [{{'getQueryObjectui64v',2},[{'type',14838,'bounded_fun',[{'type',14838,'fun',[{'type',14838,'product',[{'var',14838,'Id'}|[{'var',14838,'Pname'}]]}|[{'type',14838,'integer',[]}]]}|[[{'type',14838,'constraint',[{'atom',14838,'is_subtype'}|[[{'var',14838,'Id'}|[{'type',14838,'integer',[]}]]]]}|[{'type',14838,'constraint',[{'atom',14838,'is_subtype'}|[[{'var',14838,'Pname'}|[{'type',14838,'enum',[]}]]]]}]]]]}]}],
		%% Line 14868
		'spec' =
		    %% Line 14868
		    [{{'drawArraysIndirect',2},[{'type',14868,'bounded_fun',[{'type',14868,'fun',[{'type',14868,'product',[{'var',14868,'Mode'}|[{'var',14868,'Indirect'}]]}|[{'atom',14868,'ok'}]]}|[[{'type',14868,'constraint',[{'atom',14868,'is_subtype'}|[[{'var',14868,'Mode'}|[{'type',14868,'enum',[]}]]]]}|[{'type',14868,'constraint',[{'atom',14868,'is_subtype'}|[[{'var',14868,'Indirect'}|[{'type',14868,'union',[{'type',14868,'offset',[]}|[{'type',14868,'mem',[]}]]}]]]]}]]]]}]}],
		%% Line 14908
		'spec' =
		    %% Line 14908
		    [{{'drawElementsIndirect',3},[{'type',14908,'bounded_fun',[{'type',14908,'fun',[{'type',14908,'product',[{'var',14908,'Mode'}|[{'var',14908,'Type'}|[{'var',14908,'Indirect'}]]]}|[{'atom',14908,'ok'}]]}|[[{'type',14908,'constraint',[{'atom',14908,'is_subtype'}|[[{'var',14908,'Mode'}|[{'type',14908,'enum',[]}]]]]}|[{'type',14908,'constraint',[{'atom',14908,'is_subtype'}|[[{'var',14908,'Type'}|[{'type',14908,'enum',[]}]]]]}|[{'type',14908,'constraint',[{'atom',14908,'is_subtype'}|[[{'var',14908,'Indirect'}|[{'type',14908,'union',[{'type',14908,'offset',[]}|[{'type',14908,'mem',[]}]]}]]]]}]]]]]}]}],
		%% Line 14917
		'spec' =
		    %% Line 14917
		    [{{'uniform1d',2},[{'type',14917,'bounded_fun',[{'type',14917,'fun',[{'type',14917,'product',[{'var',14917,'Location'}|[{'var',14917,'X'}]]}|[{'atom',14917,'ok'}]]}|[[{'type',14917,'constraint',[{'atom',14917,'is_subtype'}|[[{'var',14917,'Location'}|[{'type',14917,'integer',[]}]]]]}|[{'type',14917,'constraint',[{'atom',14917,'is_subtype'}|[[{'var',14917,'X'}|[{'type',14917,'float',[]}]]]]}]]]]}]}],
		%% Line 14923
		'spec' =
		    %% Line 14923
		    [{{'uniform2d',3},[{'type',14923,'bounded_fun',[{'type',14923,'fun',[{'type',14923,'product',[{'var',14923,'Location'}|[{'var',14923,'X'}|[{'var',14923,'Y'}]]]}|[{'atom',14923,'ok'}]]}|[[{'type',14923,'constraint',[{'atom',14923,'is_subtype'}|[[{'var',14923,'Location'}|[{'type',14923,'integer',[]}]]]]}|[{'type',14923,'constraint',[{'atom',14923,'is_subtype'}|[[{'var',14923,'X'}|[{'type',14923,'float',[]}]]]]}|[{'type',14923,'constraint',[{'atom',14923,'is_subtype'}|[[{'var',14923,'Y'}|[{'type',14923,'float',[]}]]]]}]]]]]}]}],
		%% Line 14929
		'spec' =
		    %% Line 14929
		    [{{'uniform3d',4},[{'type',14929,'bounded_fun',[{'type',14929,'fun',[{'type',14929,'product',[{'var',14929,'Location'}|[{'var',14929,'X'}|[{'var',14929,'Y'}|[{'var',14929,'Z'}]]]]}|[{'atom',14929,'ok'}]]}|[[{'type',14929,'constraint',[{'atom',14929,'is_subtype'}|[[{'var',14929,'Location'}|[{'type',14929,'integer',[]}]]]]}|[{'type',14929,'constraint',[{'atom',14929,'is_subtype'}|[[{'var',14929,'X'}|[{'type',14929,'float',[]}]]]]}|[{'type',14929,'constraint',[{'atom',14929,'is_subtype'}|[[{'var',14929,'Y'}|[{'type',14929,'float',[]}]]]]}|[{'type',14929,'constraint',[{'atom',14929,'is_subtype'}|[[{'var',14929,'Z'}|[{'type',14929,'float',[]}]]]]}]]]]]]}]}],
		%% Line 14935
		'spec' =
		    %% Line 14935
		    [{{'uniform4d',5},[{'type',14935,'bounded_fun',[{'type',14935,'fun',[{'type',14935,'product',[{'var',14935,'Location'}|[{'var',14935,'X'}|[{'var',14935,'Y'}|[{'var',14935,'Z'}|[{'var',14935,'W'}]]]]]}|[{'atom',14935,'ok'}]]}|[[{'type',14935,'constraint',[{'atom',14935,'is_subtype'}|[[{'var',14935,'Location'}|[{'type',14935,'integer',[]}]]]]}|[{'type',14935,'constraint',[{'atom',14935,'is_subtype'}|[[{'var',14935,'X'}|[{'type',14935,'float',[]}]]]]}|[{'type',14935,'constraint',[{'atom',14935,'is_subtype'}|[[{'var',14935,'Y'}|[{'type',14935,'float',[]}]]]]}|[{'type',14935,'constraint',[{'atom',14935,'is_subtype'}|[[{'var',14935,'Z'}|[{'type',14935,'float',[]}]]]]}|[{'type',14935,'constraint',[{'atom',14935,'is_subtype'}|[[{'var',14935,'W'}|[{'type',14935,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 14941
		'spec' =
		    %% Line 14941
		    [{{'uniform1dv',2},[{'type',14941,'bounded_fun',[{'type',14941,'fun',[{'type',14941,'product',[{'var',14941,'Location'}|[{'var',14941,'Value'}]]}|[{'atom',14941,'ok'}]]}|[[{'type',14941,'constraint',[{'atom',14941,'is_subtype'}|[[{'var',14941,'Location'}|[{'type',14941,'integer',[]}]]]]}|[{'type',14941,'constraint',[{'atom',14941,'is_subtype'}|[[{'var',14941,'Value'}|[{'type',14941,'list',[{'type',14941,'float',[]}]}]]]]}]]]]}]}],
		%% Line 14948
		'spec' =
		    %% Line 14948
		    [{{'uniform2dv',2},[{'type',14948,'bounded_fun',[{'type',14948,'fun',[{'type',14948,'product',[{'var',14948,'Location'}|[{'var',14948,'Value'}]]}|[{'atom',14948,'ok'}]]}|[[{'type',14948,'constraint',[{'atom',14948,'is_subtype'}|[[{'var',14948,'Location'}|[{'type',14948,'integer',[]}]]]]}|[{'type',14948,'constraint',[{'atom',14948,'is_subtype'}|[[{'var',14948,'Value'}|[{'type',14948,'list',[{'type',14948,'tuple',[{'type',14948,'float',[]}|[{'type',14948,'float',[]}]]}]}]]]]}]]]]}]}],
		%% Line 14955
		'spec' =
		    %% Line 14955
		    [{{'uniform3dv',2},[{'type',14955,'bounded_fun',[{'type',14955,'fun',[{'type',14955,'product',[{'var',14955,'Location'}|[{'var',14955,'Value'}]]}|[{'atom',14955,'ok'}]]}|[[{'type',14955,'constraint',[{'atom',14955,'is_subtype'}|[[{'var',14955,'Location'}|[{'type',14955,'integer',[]}]]]]}|[{'type',14955,'constraint',[{'atom',14955,'is_subtype'}|[[{'var',14955,'Value'}|[{'type',14955,'list',[{'type',14955,'tuple',[{'type',14955,'float',[]}|[{'type',14955,'float',[]}|[{'type',14955,'float',[]}]]]}]}]]]]}]]]]}]}],
		%% Line 14962
		'spec' =
		    %% Line 14962
		    [{{'uniform4dv',2},[{'type',14962,'bounded_fun',[{'type',14962,'fun',[{'type',14962,'product',[{'var',14962,'Location'}|[{'var',14962,'Value'}]]}|[{'atom',14962,'ok'}]]}|[[{'type',14962,'constraint',[{'atom',14962,'is_subtype'}|[[{'var',14962,'Location'}|[{'type',14962,'integer',[]}]]]]}|[{'type',14962,'constraint',[{'atom',14962,'is_subtype'}|[[{'var',14962,'Value'}|[{'type',14962,'list',[{'type',14962,'tuple',[{'type',14962,'float',[]}|[{'type',14962,'float',[]}|[{'type',14962,'float',[]}|[{'type',14962,'float',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 14969
		'spec' =
		    %% Line 14969
		    [{{'uniformMatrix2dv',3},[{'type',14969,'bounded_fun',[{'type',14969,'fun',[{'type',14969,'product',[{'var',14969,'Location'}|[{'var',14969,'Transpose'}|[{'var',14969,'Value'}]]]}|[{'atom',14969,'ok'}]]}|[[{'type',14969,'constraint',[{'atom',14969,'is_subtype'}|[[{'var',14969,'Location'}|[{'type',14969,'integer',[]}]]]]}|[{'type',14969,'constraint',[{'atom',14969,'is_subtype'}|[[{'var',14969,'Transpose'}|[{'type',14969,'union',[{'integer',14969,0}|[{'integer',14969,1}]]}]]]]}|[{'type',14969,'constraint',[{'atom',14969,'is_subtype'}|[[{'var',14969,'Value'}|[{'type',14969,'list',[{'type',14969,'tuple',[{'type',14969,'float',[]}|[{'type',14969,'float',[]}|[{'type',14969,'float',[]}|[{'type',14969,'float',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 14976
		'spec' =
		    %% Line 14976
		    [{{'uniformMatrix3dv',3},[{'type',14976,'bounded_fun',[{'type',14976,'fun',[{'type',14976,'product',[{'var',14976,'Location'}|[{'var',14976,'Transpose'}|[{'var',14976,'Value'}]]]}|[{'atom',14976,'ok'}]]}|[[{'type',14976,'constraint',[{'atom',14976,'is_subtype'}|[[{'var',14976,'Location'}|[{'type',14976,'integer',[]}]]]]}|[{'type',14976,'constraint',[{'atom',14976,'is_subtype'}|[[{'var',14976,'Transpose'}|[{'type',14976,'union',[{'integer',14976,0}|[{'integer',14976,1}]]}]]]]}|[{'type',14976,'constraint',[{'atom',14976,'is_subtype'}|[[{'var',14976,'Value'}|[{'type',14976,'list',[{'type',14976,'tuple',[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}|[{'type',14976,'float',[]}]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 14983
		'spec' =
		    %% Line 14983
		    [{{'uniformMatrix4dv',3},[{'type',14983,'bounded_fun',[{'type',14983,'fun',[{'type',14983,'product',[{'var',14983,'Location'}|[{'var',14983,'Transpose'}|[{'var',14983,'Value'}]]]}|[{'atom',14983,'ok'}]]}|[[{'type',14983,'constraint',[{'atom',14983,'is_subtype'}|[[{'var',14983,'Location'}|[{'type',14983,'integer',[]}]]]]}|[{'type',14983,'constraint',[{'atom',14983,'is_subtype'}|[[{'var',14983,'Transpose'}|[{'type',14983,'union',[{'integer',14983,0}|[{'integer',14983,1}]]}]]]]}|[{'type',14983,'constraint',[{'atom',14983,'is_subtype'}|[[{'var',14983,'Value'}|[{'type',14983,'list',[{'type',14983,'tuple',[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}|[{'type',14983,'float',[]}]]]]]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 14990
		'spec' =
		    %% Line 14990
		    [{{'uniformMatrix2x3dv',3},[{'type',14990,'bounded_fun',[{'type',14990,'fun',[{'type',14990,'product',[{'var',14990,'Location'}|[{'var',14990,'Transpose'}|[{'var',14990,'Value'}]]]}|[{'atom',14990,'ok'}]]}|[[{'type',14990,'constraint',[{'atom',14990,'is_subtype'}|[[{'var',14990,'Location'}|[{'type',14990,'integer',[]}]]]]}|[{'type',14990,'constraint',[{'atom',14990,'is_subtype'}|[[{'var',14990,'Transpose'}|[{'type',14990,'union',[{'integer',14990,0}|[{'integer',14990,1}]]}]]]]}|[{'type',14990,'constraint',[{'atom',14990,'is_subtype'}|[[{'var',14990,'Value'}|[{'type',14990,'list',[{'type',14990,'tuple',[{'type',14990,'float',[]}|[{'type',14990,'float',[]}|[{'type',14990,'float',[]}|[{'type',14990,'float',[]}|[{'type',14990,'float',[]}|[{'type',14990,'float',[]}]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 14997
		'spec' =
		    %% Line 14997
		    [{{'uniformMatrix2x4dv',3},[{'type',14997,'bounded_fun',[{'type',14997,'fun',[{'type',14997,'product',[{'var',14997,'Location'}|[{'var',14997,'Transpose'}|[{'var',14997,'Value'}]]]}|[{'atom',14997,'ok'}]]}|[[{'type',14997,'constraint',[{'atom',14997,'is_subtype'}|[[{'var',14997,'Location'}|[{'type',14997,'integer',[]}]]]]}|[{'type',14997,'constraint',[{'atom',14997,'is_subtype'}|[[{'var',14997,'Transpose'}|[{'type',14997,'union',[{'integer',14997,0}|[{'integer',14997,1}]]}]]]]}|[{'type',14997,'constraint',[{'atom',14997,'is_subtype'}|[[{'var',14997,'Value'}|[{'type',14997,'list',[{'type',14997,'tuple',[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}|[{'type',14997,'float',[]}]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 15004
		'spec' =
		    %% Line 15004
		    [{{'uniformMatrix3x2dv',3},[{'type',15004,'bounded_fun',[{'type',15004,'fun',[{'type',15004,'product',[{'var',15004,'Location'}|[{'var',15004,'Transpose'}|[{'var',15004,'Value'}]]]}|[{'atom',15004,'ok'}]]}|[[{'type',15004,'constraint',[{'atom',15004,'is_subtype'}|[[{'var',15004,'Location'}|[{'type',15004,'integer',[]}]]]]}|[{'type',15004,'constraint',[{'atom',15004,'is_subtype'}|[[{'var',15004,'Transpose'}|[{'type',15004,'union',[{'integer',15004,0}|[{'integer',15004,1}]]}]]]]}|[{'type',15004,'constraint',[{'atom',15004,'is_subtype'}|[[{'var',15004,'Value'}|[{'type',15004,'list',[{'type',15004,'tuple',[{'type',15004,'float',[]}|[{'type',15004,'float',[]}|[{'type',15004,'float',[]}|[{'type',15004,'float',[]}|[{'type',15004,'float',[]}|[{'type',15004,'float',[]}]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 15011
		'spec' =
		    %% Line 15011
		    [{{'uniformMatrix3x4dv',3},[{'type',15011,'bounded_fun',[{'type',15011,'fun',[{'type',15011,'product',[{'var',15011,'Location'}|[{'var',15011,'Transpose'}|[{'var',15011,'Value'}]]]}|[{'atom',15011,'ok'}]]}|[[{'type',15011,'constraint',[{'atom',15011,'is_subtype'}|[[{'var',15011,'Location'}|[{'type',15011,'integer',[]}]]]]}|[{'type',15011,'constraint',[{'atom',15011,'is_subtype'}|[[{'var',15011,'Transpose'}|[{'type',15011,'union',[{'integer',15011,0}|[{'integer',15011,1}]]}]]]]}|[{'type',15011,'constraint',[{'atom',15011,'is_subtype'}|[[{'var',15011,'Value'}|[{'type',15011,'list',[{'type',15011,'tuple',[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}|[{'type',15011,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 15018
		'spec' =
		    %% Line 15018
		    [{{'uniformMatrix4x2dv',3},[{'type',15018,'bounded_fun',[{'type',15018,'fun',[{'type',15018,'product',[{'var',15018,'Location'}|[{'var',15018,'Transpose'}|[{'var',15018,'Value'}]]]}|[{'atom',15018,'ok'}]]}|[[{'type',15018,'constraint',[{'atom',15018,'is_subtype'}|[[{'var',15018,'Location'}|[{'type',15018,'integer',[]}]]]]}|[{'type',15018,'constraint',[{'atom',15018,'is_subtype'}|[[{'var',15018,'Transpose'}|[{'type',15018,'union',[{'integer',15018,0}|[{'integer',15018,1}]]}]]]]}|[{'type',15018,'constraint',[{'atom',15018,'is_subtype'}|[[{'var',15018,'Value'}|[{'type',15018,'list',[{'type',15018,'tuple',[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}|[{'type',15018,'float',[]}]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 15025
		'spec' =
		    %% Line 15025
		    [{{'uniformMatrix4x3dv',3},[{'type',15025,'bounded_fun',[{'type',15025,'fun',[{'type',15025,'product',[{'var',15025,'Location'}|[{'var',15025,'Transpose'}|[{'var',15025,'Value'}]]]}|[{'atom',15025,'ok'}]]}|[[{'type',15025,'constraint',[{'atom',15025,'is_subtype'}|[[{'var',15025,'Location'}|[{'type',15025,'integer',[]}]]]]}|[{'type',15025,'constraint',[{'atom',15025,'is_subtype'}|[[{'var',15025,'Transpose'}|[{'type',15025,'union',[{'integer',15025,0}|[{'integer',15025,1}]]}]]]]}|[{'type',15025,'constraint',[{'atom',15025,'is_subtype'}|[[{'var',15025,'Value'}|[{'type',15025,'list',[{'type',15025,'tuple',[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}|[{'type',15025,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]}]}],
		%% Line 15032
		'spec' =
		    %% Line 15032
		    [{{'getUniformdv',2},[{'type',15032,'bounded_fun',[{'type',15032,'fun',[{'type',15032,'product',[{'var',15032,'Program'}|[{'var',15032,'Location'}]]}|[{'type',15032,'matrix',[]}]]}|[[{'type',15032,'constraint',[{'atom',15032,'is_subtype'}|[[{'var',15032,'Program'}|[{'type',15032,'integer',[]}]]]]}|[{'type',15032,'constraint',[{'atom',15032,'is_subtype'}|[[{'var',15032,'Location'}|[{'type',15032,'integer',[]}]]]]}]]]]}]}],
		%% Line 15051
		'spec' =
		    %% Line 15051
		    [{{'getSubroutineUniformLocation',3},[{'type',15051,'bounded_fun',[{'type',15051,'fun',[{'type',15051,'product',[{'var',15051,'Program'}|[{'var',15051,'Shadertype'}|[{'var',15051,'Name'}]]]}|[{'type',15051,'integer',[]}]]}|[[{'type',15051,'constraint',[{'atom',15051,'is_subtype'}|[[{'var',15051,'Program'}|[{'type',15051,'integer',[]}]]]]}|[{'type',15051,'constraint',[{'atom',15051,'is_subtype'}|[[{'var',15051,'Shadertype'}|[{'type',15051,'enum',[]}]]]]}|[{'type',15051,'constraint',[{'atom',15051,'is_subtype'}|[[{'var',15051,'Name'}|[{'type',15051,'string',[]}]]]]}]]]]]}]}],
		%% Line 15071
		'spec' =
		    %% Line 15071
		    [{{'getSubroutineIndex',3},[{'type',15071,'bounded_fun',[{'type',15071,'fun',[{'type',15071,'product',[{'var',15071,'Program'}|[{'var',15071,'Shadertype'}|[{'var',15071,'Name'}]]]}|[{'type',15071,'integer',[]}]]}|[[{'type',15071,'constraint',[{'atom',15071,'is_subtype'}|[[{'var',15071,'Program'}|[{'type',15071,'integer',[]}]]]]}|[{'type',15071,'constraint',[{'atom',15071,'is_subtype'}|[[{'var',15071,'Shadertype'}|[{'type',15071,'enum',[]}]]]]}|[{'type',15071,'constraint',[{'atom',15071,'is_subtype'}|[[{'var',15071,'Name'}|[{'type',15071,'string',[]}]]]]}]]]]]}]}],
		%% Line 15092
		'spec' =
		    %% Line 15092
		    [{{'getActiveSubroutineUniformName',4},[{'type',15092,'bounded_fun',[{'type',15092,'fun',[{'type',15092,'product',[{'var',15092,'Program'}|[{'var',15092,'Shadertype'}|[{'var',15092,'Index'}|[{'var',15092,'Bufsize'}]]]]}|[{'type',15092,'string',[]}]]}|[[{'type',15092,'constraint',[{'atom',15092,'is_subtype'}|[[{'var',15092,'Program'}|[{'type',15092,'integer',[]}]]]]}|[{'type',15092,'constraint',[{'atom',15092,'is_subtype'}|[[{'var',15092,'Shadertype'}|[{'type',15092,'enum',[]}]]]]}|[{'type',15092,'constraint',[{'atom',15092,'is_subtype'}|[[{'var',15092,'Index'}|[{'type',15092,'integer',[]}]]]]}|[{'type',15092,'constraint',[{'atom',15092,'is_subtype'}|[[{'var',15092,'Bufsize'}|[{'type',15092,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 15110
		'spec' =
		    %% Line 15110
		    [{{'getActiveSubroutineName',4},[{'type',15110,'bounded_fun',[{'type',15110,'fun',[{'type',15110,'product',[{'var',15110,'Program'}|[{'var',15110,'Shadertype'}|[{'var',15110,'Index'}|[{'var',15110,'Bufsize'}]]]]}|[{'type',15110,'string',[]}]]}|[[{'type',15110,'constraint',[{'atom',15110,'is_subtype'}|[[{'var',15110,'Program'}|[{'type',15110,'integer',[]}]]]]}|[{'type',15110,'constraint',[{'atom',15110,'is_subtype'}|[[{'var',15110,'Shadertype'}|[{'type',15110,'enum',[]}]]]]}|[{'type',15110,'constraint',[{'atom',15110,'is_subtype'}|[[{'var',15110,'Index'}|[{'type',15110,'integer',[]}]]]]}|[{'type',15110,'constraint',[{'atom',15110,'is_subtype'}|[[{'var',15110,'Bufsize'}|[{'type',15110,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 15124
		'spec' =
		    %% Line 15124
		    [{{'uniformSubroutinesuiv',2},[{'type',15124,'bounded_fun',[{'type',15124,'fun',[{'type',15124,'product',[{'var',15124,'Shadertype'}|[{'var',15124,'Indices'}]]}|[{'atom',15124,'ok'}]]}|[[{'type',15124,'constraint',[{'atom',15124,'is_subtype'}|[[{'var',15124,'Shadertype'}|[{'type',15124,'enum',[]}]]]]}|[{'type',15124,'constraint',[{'atom',15124,'is_subtype'}|[[{'var',15124,'Indices'}|[{'type',15124,'list',[{'type',15124,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 15138
		'spec' =
		    %% Line 15138
		    [{{'getUniformSubroutineuiv',2},[{'type',15138,'bounded_fun',[{'type',15138,'fun',[{'type',15138,'product',[{'var',15138,'Shadertype'}|[{'var',15138,'Location'}]]}|[{'type',15138,'tuple',[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}|[{'type',15138,'integer',[]}]]]]]]]]]]]]]]]]}]]}|[[{'type',15138,'constraint',[{'atom',15138,'is_subtype'}|[[{'var',15138,'Shadertype'}|[{'type',15138,'enum',[]}]]]]}|[{'type',15138,'constraint',[{'atom',15138,'is_subtype'}|[[{'var',15138,'Location'}|[{'type',15138,'integer',[]}]]]]}]]]]}]}],
		%% Line 15170
		'spec' =
		    %% Line 15170
		    [{{'getProgramStageiv',3},[{'type',15170,'bounded_fun',[{'type',15170,'fun',[{'type',15170,'product',[{'var',15170,'Program'}|[{'var',15170,'Shadertype'}|[{'var',15170,'Pname'}]]]}|[{'type',15170,'integer',[]}]]}|[[{'type',15170,'constraint',[{'atom',15170,'is_subtype'}|[[{'var',15170,'Program'}|[{'type',15170,'integer',[]}]]]]}|[{'type',15170,'constraint',[{'atom',15170,'is_subtype'}|[[{'var',15170,'Shadertype'}|[{'type',15170,'enum',[]}]]]]}|[{'type',15170,'constraint',[{'atom',15170,'is_subtype'}|[[{'var',15170,'Pname'}|[{'type',15170,'enum',[]}]]]]}]]]]]}]}],
		%% Line 15197
		'spec' =
		    %% Line 15197
		    [{{'patchParameteri',2},[{'type',15197,'bounded_fun',[{'type',15197,'fun',[{'type',15197,'product',[{'var',15197,'Pname'}|[{'var',15197,'Value'}]]}|[{'atom',15197,'ok'}]]}|[[{'type',15197,'constraint',[{'atom',15197,'is_subtype'}|[[{'var',15197,'Pname'}|[{'type',15197,'enum',[]}]]]]}|[{'type',15197,'constraint',[{'atom',15197,'is_subtype'}|[[{'var',15197,'Value'}|[{'type',15197,'integer',[]}]]]]}]]]]}]}],
		%% Line 15203
		'spec' =
		    %% Line 15203
		    [{{'patchParameterfv',2},[{'type',15203,'bounded_fun',[{'type',15203,'fun',[{'type',15203,'product',[{'var',15203,'Pname'}|[{'var',15203,'Values'}]]}|[{'atom',15203,'ok'}]]}|[[{'type',15203,'constraint',[{'atom',15203,'is_subtype'}|[[{'var',15203,'Pname'}|[{'type',15203,'enum',[]}]]]]}|[{'type',15203,'constraint',[{'atom',15203,'is_subtype'}|[[{'var',15203,'Values'}|[{'type',15203,'list',[{'type',15203,'float',[]}]}]]]]}]]]]}]}],
		%% Line 15227
		'spec' =
		    %% Line 15227
		    [{{'bindTransformFeedback',2},[{'type',15227,'bounded_fun',[{'type',15227,'fun',[{'type',15227,'product',[{'var',15227,'Target'}|[{'var',15227,'Id'}]]}|[{'atom',15227,'ok'}]]}|[[{'type',15227,'constraint',[{'atom',15227,'is_subtype'}|[[{'var',15227,'Target'}|[{'type',15227,'enum',[]}]]]]}|[{'type',15227,'constraint',[{'atom',15227,'is_subtype'}|[[{'var',15227,'Id'}|[{'type',15227,'integer',[]}]]]]}]]]]}]}],
		%% Line 15240
		'spec' =
		    %% Line 15240
		    [{{'deleteTransformFeedbacks',1},[{'type',15240,'bounded_fun',[{'type',15240,'fun',[{'type',15240,'product',[{'var',15240,'Ids'}]}|[{'atom',15240,'ok'}]]}|[[{'type',15240,'constraint',[{'atom',15240,'is_subtype'}|[[{'var',15240,'Ids'}|[{'type',15240,'list',[{'type',15240,'integer',[]}]}]]]]}]]]}]}],
		%% Line 15252
		'spec' =
		    %% Line 15252
		    [{{'genTransformFeedbacks',1},[{'type',15252,'bounded_fun',[{'type',15252,'fun',[{'type',15252,'product',[{'var',15252,'N'}]}|[{'type',15252,'list',[{'type',15252,'integer',[]}]}]]}|[[{'type',15252,'constraint',[{'atom',15252,'is_subtype'}|[[{'var',15252,'N'}|[{'type',15252,'integer',[]}]]]]}]]]}]}],
		%% Line 15267
		'spec' =
		    %% Line 15267
		    [{{'isTransformFeedback',1},[{'type',15267,'bounded_fun',[{'type',15267,'fun',[{'type',15267,'product',[{'var',15267,'Id'}]}|[{'type',15267,'union',[{'integer',15267,0}|[{'integer',15267,1}]]}]]}|[[{'type',15267,'constraint',[{'atom',15267,'is_subtype'}|[[{'var',15267,'Id'}|[{'type',15267,'integer',[]}]]]]}]]]}]}],
		%% Line 15280
		'spec' =
		    %% Line 15280
		    [{{'pauseTransformFeedback',0},[{'type',15280,'fun',[{'type',15280,'product',[]}|[{'atom',15280,'ok'}]]}]}],
		%% Line 15293
		'spec' =
		    %% Line 15293
		    [{{'resumeTransformFeedback',0},[{'type',15293,'fun',[{'type',15293,'product',[]}|[{'atom',15293,'ok'}]]}]}],
		%% Line 15307
		'spec' =
		    %% Line 15307
		    [{{'drawTransformFeedback',2},[{'type',15307,'bounded_fun',[{'type',15307,'fun',[{'type',15307,'product',[{'var',15307,'Mode'}|[{'var',15307,'Id'}]]}|[{'atom',15307,'ok'}]]}|[[{'type',15307,'constraint',[{'atom',15307,'is_subtype'}|[[{'var',15307,'Mode'}|[{'type',15307,'enum',[]}]]]]}|[{'type',15307,'constraint',[{'atom',15307,'is_subtype'}|[[{'var',15307,'Id'}|[{'type',15307,'integer',[]}]]]]}]]]]}]}],
		%% Line 15325
		'spec' =
		    %% Line 15325
		    [{{'drawTransformFeedbackStream',3},[{'type',15325,'bounded_fun',[{'type',15325,'fun',[{'type',15325,'product',[{'var',15325,'Mode'}|[{'var',15325,'Id'}|[{'var',15325,'Stream'}]]]}|[{'atom',15325,'ok'}]]}|[[{'type',15325,'constraint',[{'atom',15325,'is_subtype'}|[[{'var',15325,'Mode'}|[{'type',15325,'enum',[]}]]]]}|[{'type',15325,'constraint',[{'atom',15325,'is_subtype'}|[[{'var',15325,'Id'}|[{'type',15325,'integer',[]}]]]]}|[{'type',15325,'constraint',[{'atom',15325,'is_subtype'}|[[{'var',15325,'Stream'}|[{'type',15325,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15332
		'spec' =
		    %% Line 15332
		    [{{'beginQueryIndexed',3},[{'type',15332,'bounded_fun',[{'type',15332,'fun',[{'type',15332,'product',[{'var',15332,'Target'}|[{'var',15332,'Index'}|[{'var',15332,'Id'}]]]}|[{'atom',15332,'ok'}]]}|[[{'type',15332,'constraint',[{'atom',15332,'is_subtype'}|[[{'var',15332,'Target'}|[{'type',15332,'enum',[]}]]]]}|[{'type',15332,'constraint',[{'atom',15332,'is_subtype'}|[[{'var',15332,'Index'}|[{'type',15332,'integer',[]}]]]]}|[{'type',15332,'constraint',[{'atom',15332,'is_subtype'}|[[{'var',15332,'Id'}|[{'type',15332,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15409
		'spec' =
		    %% Line 15409
		    [{{'endQueryIndexed',2},[{'type',15409,'bounded_fun',[{'type',15409,'fun',[{'type',15409,'product',[{'var',15409,'Target'}|[{'var',15409,'Index'}]]}|[{'atom',15409,'ok'}]]}|[[{'type',15409,'constraint',[{'atom',15409,'is_subtype'}|[[{'var',15409,'Target'}|[{'type',15409,'enum',[]}]]]]}|[{'type',15409,'constraint',[{'atom',15409,'is_subtype'}|[[{'var',15409,'Index'}|[{'type',15409,'integer',[]}]]]]}]]]]}]}],
		%% Line 15427
		'spec' =
		    %% Line 15427
		    [{{'getQueryIndexediv',3},[{'type',15427,'bounded_fun',[{'type',15427,'fun',[{'type',15427,'product',[{'var',15427,'Target'}|[{'var',15427,'Index'}|[{'var',15427,'Pname'}]]]}|[{'type',15427,'integer',[]}]]}|[[{'type',15427,'constraint',[{'atom',15427,'is_subtype'}|[[{'var',15427,'Target'}|[{'type',15427,'enum',[]}]]]]}|[{'type',15427,'constraint',[{'atom',15427,'is_subtype'}|[[{'var',15427,'Index'}|[{'type',15427,'integer',[]}]]]]}|[{'type',15427,'constraint',[{'atom',15427,'is_subtype'}|[[{'var',15427,'Pname'}|[{'type',15427,'enum',[]}]]]]}]]]]]}]}],
		%% Line 15439
		'spec' =
		    %% Line 15439
		    [{{'releaseShaderCompiler',0},[{'type',15439,'fun',[{'type',15439,'product',[]}|[{'atom',15439,'ok'}]]}]}],
		%% Line 15461
		'spec' =
		    %% Line 15461
		    [{{'shaderBinary',3},[{'type',15461,'bounded_fun',[{'type',15461,'fun',[{'type',15461,'product',[{'var',15461,'Shaders'}|[{'var',15461,'Binaryformat'}|[{'var',15461,'Binary'}]]]}|[{'atom',15461,'ok'}]]}|[[{'type',15461,'constraint',[{'atom',15461,'is_subtype'}|[[{'var',15461,'Shaders'}|[{'type',15461,'list',[{'type',15461,'integer',[]}]}]]]]}|[{'type',15461,'constraint',[{'atom',15461,'is_subtype'}|[[{'var',15461,'Binaryformat'}|[{'type',15461,'enum',[]}]]]]}|[{'type',15461,'constraint',[{'atom',15461,'is_subtype'}|[[{'var',15461,'Binary'}|[{'type',15461,'binary',[]}]]]]}]]]]]}]}],
		%% Line 15488
		'spec' =
		    %% Line 15488
		    [{{'getShaderPrecisionFormat',2},[{'type',15488,'bounded_fun',[{'type',15488,'fun',[{'type',15488,'product',[{'var',15488,'Shadertype'}|[{'var',15488,'Precisiontype'}]]}|[{'type',15488,'tuple',[{'ann_type',15488,[{'var',15488,'Range'}|[{'type',15488,'tuple',[{'type',15488,'integer',[]}|[{'type',15488,'integer',[]}]]}]]}|[{'ann_type',15488,[{'var',15488,'Precision'}|[{'type',15488,'integer',[]}]]}]]}]]}|[[{'type',15488,'constraint',[{'atom',15488,'is_subtype'}|[[{'var',15488,'Shadertype'}|[{'type',15488,'enum',[]}]]]]}|[{'type',15488,'constraint',[{'atom',15488,'is_subtype'}|[[{'var',15488,'Precisiontype'}|[{'type',15488,'enum',[]}]]]]}]]]]}]}],
		%% Line 15494
		'spec' =
		    %% Line 15494
		    [{{'depthRangef',2},[{'type',15494,'bounded_fun',[{'type',15494,'fun',[{'type',15494,'product',[{'var',15494,'N'}|[{'var',15494,'F'}]]}|[{'atom',15494,'ok'}]]}|[[{'type',15494,'constraint',[{'atom',15494,'is_subtype'}|[[{'var',15494,'N'}|[{'type',15494,'clamp',[]}]]]]}|[{'type',15494,'constraint',[{'atom',15494,'is_subtype'}|[[{'var',15494,'F'}|[{'type',15494,'clamp',[]}]]]]}]]]]}]}],
		%% Line 15501
		'spec' =
		    %% Line 15501
		    [{{'clearDepthf',1},[{'type',15501,'bounded_fun',[{'type',15501,'fun',[{'type',15501,'product',[{'var',15501,'D'}]}|[{'atom',15501,'ok'}]]}|[[{'type',15501,'constraint',[{'atom',15501,'is_subtype'}|[[{'var',15501,'D'}|[{'type',15501,'clamp',[]}]]]]}]]]}]}],
		%% Line 15522
		'spec' =
		    %% Line 15522
		    [{{'getProgramBinary',2},[{'type',15522,'bounded_fun',[{'type',15522,'fun',[{'type',15522,'product',[{'var',15522,'Program'}|[{'var',15522,'BufSize'}]]}|[{'type',15522,'tuple',[{'ann_type',15522,[{'var',15522,'BinaryFormat'}|[{'type',15522,'enum',[]}]]}|[{'ann_type',15522,[{'var',15522,'Binary'}|[{'type',15522,'binary',[]}]]}]]}]]}|[[{'type',15522,'constraint',[{'atom',15522,'is_subtype'}|[[{'var',15522,'Program'}|[{'type',15522,'integer',[]}]]]]}|[{'type',15522,'constraint',[{'atom',15522,'is_subtype'}|[[{'var',15522,'BufSize'}|[{'type',15522,'integer',[]}]]]]}]]]]}]}],
		%% Line 15549
		'spec' =
		    %% Line 15549
		    [{{'programBinary',3},[{'type',15549,'bounded_fun',[{'type',15549,'fun',[{'type',15549,'product',[{'var',15549,'Program'}|[{'var',15549,'BinaryFormat'}|[{'var',15549,'Binary'}]]]}|[{'atom',15549,'ok'}]]}|[[{'type',15549,'constraint',[{'atom',15549,'is_subtype'}|[[{'var',15549,'Program'}|[{'type',15549,'integer',[]}]]]]}|[{'type',15549,'constraint',[{'atom',15549,'is_subtype'}|[[{'var',15549,'BinaryFormat'}|[{'type',15549,'enum',[]}]]]]}|[{'type',15549,'constraint',[{'atom',15549,'is_subtype'}|[[{'var',15549,'Binary'}|[{'type',15549,'binary',[]}]]]]}]]]]]}]}],
		%% Line 15575
		'spec' =
		    %% Line 15575
		    [{{'programParameteri',3},[{'type',15575,'bounded_fun',[{'type',15575,'fun',[{'type',15575,'product',[{'var',15575,'Program'}|[{'var',15575,'Pname'}|[{'var',15575,'Value'}]]]}|[{'atom',15575,'ok'}]]}|[[{'type',15575,'constraint',[{'atom',15575,'is_subtype'}|[[{'var',15575,'Program'}|[{'type',15575,'integer',[]}]]]]}|[{'type',15575,'constraint',[{'atom',15575,'is_subtype'}|[[{'var',15575,'Pname'}|[{'type',15575,'enum',[]}]]]]}|[{'type',15575,'constraint',[{'atom',15575,'is_subtype'}|[[{'var',15575,'Value'}|[{'type',15575,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15600
		'spec' =
		    %% Line 15600
		    [{{'useProgramStages',3},[{'type',15600,'bounded_fun',[{'type',15600,'fun',[{'type',15600,'product',[{'var',15600,'Pipeline'}|[{'var',15600,'Stages'}|[{'var',15600,'Program'}]]]}|[{'atom',15600,'ok'}]]}|[[{'type',15600,'constraint',[{'atom',15600,'is_subtype'}|[[{'var',15600,'Pipeline'}|[{'type',15600,'integer',[]}]]]]}|[{'type',15600,'constraint',[{'atom',15600,'is_subtype'}|[[{'var',15600,'Stages'}|[{'type',15600,'integer',[]}]]]]}|[{'type',15600,'constraint',[{'atom',15600,'is_subtype'}|[[{'var',15600,'Program'}|[{'type',15600,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15612
		'spec' =
		    %% Line 15612
		    [{{'activeShaderProgram',2},[{'type',15612,'bounded_fun',[{'type',15612,'fun',[{'type',15612,'product',[{'var',15612,'Pipeline'}|[{'var',15612,'Program'}]]}|[{'atom',15612,'ok'}]]}|[[{'type',15612,'constraint',[{'atom',15612,'is_subtype'}|[[{'var',15612,'Pipeline'}|[{'type',15612,'integer',[]}]]]]}|[{'type',15612,'constraint',[{'atom',15612,'is_subtype'}|[[{'var',15612,'Program'}|[{'type',15612,'integer',[]}]]]]}]]]]}]}],
		%% Line 15619
		'spec' =
		    %% Line 15619
		    [{{'createShaderProgramv',2},[{'type',15619,'bounded_fun',[{'type',15619,'fun',[{'type',15619,'product',[{'var',15619,'Type'}|[{'var',15619,'Strings'}]]}|[{'type',15619,'integer',[]}]]}|[[{'type',15619,'constraint',[{'atom',15619,'is_subtype'}|[[{'var',15619,'Type'}|[{'type',15619,'enum',[]}]]]]}|[{'type',15619,'constraint',[{'atom',15619,'is_subtype'}|[[{'var',15619,'Strings'}|[{'type',15619,'list',[{'type',15619,'string',[]}]}]]]]}]]]]}]}],
		%% Line 15642
		'spec' =
		    %% Line 15642
		    [{{'bindProgramPipeline',1},[{'type',15642,'bounded_fun',[{'type',15642,'fun',[{'type',15642,'product',[{'var',15642,'Pipeline'}]}|[{'atom',15642,'ok'}]]}|[[{'type',15642,'constraint',[{'atom',15642,'is_subtype'}|[[{'var',15642,'Pipeline'}|[{'type',15642,'integer',[]}]]]]}]]]}]}],
		%% Line 15656
		'spec' =
		    %% Line 15656
		    [{{'deleteProgramPipelines',1},[{'type',15656,'bounded_fun',[{'type',15656,'fun',[{'type',15656,'product',[{'var',15656,'Pipelines'}]}|[{'atom',15656,'ok'}]]}|[[{'type',15656,'constraint',[{'atom',15656,'is_subtype'}|[[{'var',15656,'Pipelines'}|[{'type',15656,'list',[{'type',15656,'integer',[]}]}]]]]}]]]}]}],
		%% Line 15668
		'spec' =
		    %% Line 15668
		    [{{'genProgramPipelines',1},[{'type',15668,'bounded_fun',[{'type',15668,'fun',[{'type',15668,'product',[{'var',15668,'N'}]}|[{'type',15668,'list',[{'type',15668,'integer',[]}]}]]}|[[{'type',15668,'constraint',[{'atom',15668,'is_subtype'}|[[{'var',15668,'N'}|[{'type',15668,'integer',[]}]]]]}]]]}]}],
		%% Line 15683
		'spec' =
		    %% Line 15683
		    [{{'isProgramPipeline',1},[{'type',15683,'bounded_fun',[{'type',15683,'fun',[{'type',15683,'product',[{'var',15683,'Pipeline'}]}|[{'type',15683,'union',[{'integer',15683,0}|[{'integer',15683,1}]]}]]}|[[{'type',15683,'constraint',[{'atom',15683,'is_subtype'}|[[{'var',15683,'Pipeline'}|[{'type',15683,'integer',[]}]]]]}]]]}]}],
		%% Line 15721
		'spec' =
		    %% Line 15721
		    [{{'getProgramPipelineiv',2},[{'type',15721,'bounded_fun',[{'type',15721,'fun',[{'type',15721,'product',[{'var',15721,'Pipeline'}|[{'var',15721,'Pname'}]]}|[{'type',15721,'integer',[]}]]}|[[{'type',15721,'constraint',[{'atom',15721,'is_subtype'}|[[{'var',15721,'Pipeline'}|[{'type',15721,'integer',[]}]]]]}|[{'type',15721,'constraint',[{'atom',15721,'is_subtype'}|[[{'var',15721,'Pname'}|[{'type',15721,'enum',[]}]]]]}]]]]}]}],
		%% Line 15788
		'spec' =
		    %% Line 15788
		    [{{'programUniform1i',3},[{'type',15788,'bounded_fun',[{'type',15788,'fun',[{'type',15788,'product',[{'var',15788,'Program'}|[{'var',15788,'Location'}|[{'var',15788,'V0'}]]]}|[{'atom',15788,'ok'}]]}|[[{'type',15788,'constraint',[{'atom',15788,'is_subtype'}|[[{'var',15788,'Program'}|[{'type',15788,'integer',[]}]]]]}|[{'type',15788,'constraint',[{'atom',15788,'is_subtype'}|[[{'var',15788,'Location'}|[{'type',15788,'integer',[]}]]]]}|[{'type',15788,'constraint',[{'atom',15788,'is_subtype'}|[[{'var',15788,'V0'}|[{'type',15788,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15794
		'spec' =
		    %% Line 15794
		    [{{'programUniform1iv',3},[{'type',15794,'bounded_fun',[{'type',15794,'fun',[{'type',15794,'product',[{'var',15794,'Program'}|[{'var',15794,'Location'}|[{'var',15794,'Value'}]]]}|[{'atom',15794,'ok'}]]}|[[{'type',15794,'constraint',[{'atom',15794,'is_subtype'}|[[{'var',15794,'Program'}|[{'type',15794,'integer',[]}]]]]}|[{'type',15794,'constraint',[{'atom',15794,'is_subtype'}|[[{'var',15794,'Location'}|[{'type',15794,'integer',[]}]]]]}|[{'type',15794,'constraint',[{'atom',15794,'is_subtype'}|[[{'var',15794,'Value'}|[{'type',15794,'list',[{'type',15794,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 15801
		'spec' =
		    %% Line 15801
		    [{{'programUniform1f',3},[{'type',15801,'bounded_fun',[{'type',15801,'fun',[{'type',15801,'product',[{'var',15801,'Program'}|[{'var',15801,'Location'}|[{'var',15801,'V0'}]]]}|[{'atom',15801,'ok'}]]}|[[{'type',15801,'constraint',[{'atom',15801,'is_subtype'}|[[{'var',15801,'Program'}|[{'type',15801,'integer',[]}]]]]}|[{'type',15801,'constraint',[{'atom',15801,'is_subtype'}|[[{'var',15801,'Location'}|[{'type',15801,'integer',[]}]]]]}|[{'type',15801,'constraint',[{'atom',15801,'is_subtype'}|[[{'var',15801,'V0'}|[{'type',15801,'float',[]}]]]]}]]]]]}]}],
		%% Line 15807
		'spec' =
		    %% Line 15807
		    [{{'programUniform1fv',3},[{'type',15807,'bounded_fun',[{'type',15807,'fun',[{'type',15807,'product',[{'var',15807,'Program'}|[{'var',15807,'Location'}|[{'var',15807,'Value'}]]]}|[{'atom',15807,'ok'}]]}|[[{'type',15807,'constraint',[{'atom',15807,'is_subtype'}|[[{'var',15807,'Program'}|[{'type',15807,'integer',[]}]]]]}|[{'type',15807,'constraint',[{'atom',15807,'is_subtype'}|[[{'var',15807,'Location'}|[{'type',15807,'integer',[]}]]]]}|[{'type',15807,'constraint',[{'atom',15807,'is_subtype'}|[[{'var',15807,'Value'}|[{'type',15807,'list',[{'type',15807,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 15814
		'spec' =
		    %% Line 15814
		    [{{'programUniform1d',3},[{'type',15814,'bounded_fun',[{'type',15814,'fun',[{'type',15814,'product',[{'var',15814,'Program'}|[{'var',15814,'Location'}|[{'var',15814,'V0'}]]]}|[{'atom',15814,'ok'}]]}|[[{'type',15814,'constraint',[{'atom',15814,'is_subtype'}|[[{'var',15814,'Program'}|[{'type',15814,'integer',[]}]]]]}|[{'type',15814,'constraint',[{'atom',15814,'is_subtype'}|[[{'var',15814,'Location'}|[{'type',15814,'integer',[]}]]]]}|[{'type',15814,'constraint',[{'atom',15814,'is_subtype'}|[[{'var',15814,'V0'}|[{'type',15814,'float',[]}]]]]}]]]]]}]}],
		%% Line 15820
		'spec' =
		    %% Line 15820
		    [{{'programUniform1dv',3},[{'type',15820,'bounded_fun',[{'type',15820,'fun',[{'type',15820,'product',[{'var',15820,'Program'}|[{'var',15820,'Location'}|[{'var',15820,'Value'}]]]}|[{'atom',15820,'ok'}]]}|[[{'type',15820,'constraint',[{'atom',15820,'is_subtype'}|[[{'var',15820,'Program'}|[{'type',15820,'integer',[]}]]]]}|[{'type',15820,'constraint',[{'atom',15820,'is_subtype'}|[[{'var',15820,'Location'}|[{'type',15820,'integer',[]}]]]]}|[{'type',15820,'constraint',[{'atom',15820,'is_subtype'}|[[{'var',15820,'Value'}|[{'type',15820,'list',[{'type',15820,'float',[]}]}]]]]}]]]]]}]}],
		%% Line 15827
		'spec' =
		    %% Line 15827
		    [{{'programUniform1ui',3},[{'type',15827,'bounded_fun',[{'type',15827,'fun',[{'type',15827,'product',[{'var',15827,'Program'}|[{'var',15827,'Location'}|[{'var',15827,'V0'}]]]}|[{'atom',15827,'ok'}]]}|[[{'type',15827,'constraint',[{'atom',15827,'is_subtype'}|[[{'var',15827,'Program'}|[{'type',15827,'integer',[]}]]]]}|[{'type',15827,'constraint',[{'atom',15827,'is_subtype'}|[[{'var',15827,'Location'}|[{'type',15827,'integer',[]}]]]]}|[{'type',15827,'constraint',[{'atom',15827,'is_subtype'}|[[{'var',15827,'V0'}|[{'type',15827,'integer',[]}]]]]}]]]]]}]}],
		%% Line 15833
		'spec' =
		    %% Line 15833
		    [{{'programUniform1uiv',3},[{'type',15833,'bounded_fun',[{'type',15833,'fun',[{'type',15833,'product',[{'var',15833,'Program'}|[{'var',15833,'Location'}|[{'var',15833,'Value'}]]]}|[{'atom',15833,'ok'}]]}|[[{'type',15833,'constraint',[{'atom',15833,'is_subtype'}|[[{'var',15833,'Program'}|[{'type',15833,'integer',[]}]]]]}|[{'type',15833,'constraint',[{'atom',15833,'is_subtype'}|[[{'var',15833,'Location'}|[{'type',15833,'integer',[]}]]]]}|[{'type',15833,'constraint',[{'atom',15833,'is_subtype'}|[[{'var',15833,'Value'}|[{'type',15833,'list',[{'type',15833,'integer',[]}]}]]]]}]]]]]}]}],
		%% Line 15840
		'spec' =
		    %% Line 15840
		    [{{'programUniform2i',4},[{'type',15840,'bounded_fun',[{'type',15840,'fun',[{'type',15840,'product',[{'var',15840,'Program'}|[{'var',15840,'Location'}|[{'var',15840,'V0'}|[{'var',15840,'V1'}]]]]}|[{'atom',15840,'ok'}]]}|[[{'type',15840,'constraint',[{'atom',15840,'is_subtype'}|[[{'var',15840,'Program'}|[{'type',15840,'integer',[]}]]]]}|[{'type',15840,'constraint',[{'atom',15840,'is_subtype'}|[[{'var',15840,'Location'}|[{'type',15840,'integer',[]}]]]]}|[{'type',15840,'constraint',[{'atom',15840,'is_subtype'}|[[{'var',15840,'V0'}|[{'type',15840,'integer',[]}]]]]}|[{'type',15840,'constraint',[{'atom',15840,'is_subtype'}|[[{'var',15840,'V1'}|[{'type',15840,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 15846
		'spec' =
		    %% Line 15846
		    [{{'programUniform2iv',3},[{'type',15846,'bounded_fun',[{'type',15846,'fun',[{'type',15846,'product',[{'var',15846,'Program'}|[{'var',15846,'Location'}|[{'var',15846,'Value'}]]]}|[{'atom',15846,'ok'}]]}|[[{'type',15846,'constraint',[{'atom',15846,'is_subtype'}|[[{'var',15846,'Program'}|[{'type',15846,'integer',[]}]]]]}|[{'type',15846,'constraint',[{'atom',15846,'is_subtype'}|[[{'var',15846,'Location'}|[{'type',15846,'integer',[]}]]]]}|[{'type',15846,'constraint',[{'atom',15846,'is_subtype'}|[[{'var',15846,'Value'}|[{'type',15846,'list',[{'type',15846,'tuple',[{'type',15846,'integer',[]}|[{'type',15846,'integer',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 15853
		'spec' =
		    %% Line 15853
		    [{{'programUniform2f',4},[{'type',15853,'bounded_fun',[{'type',15853,'fun',[{'type',15853,'product',[{'var',15853,'Program'}|[{'var',15853,'Location'}|[{'var',15853,'V0'}|[{'var',15853,'V1'}]]]]}|[{'atom',15853,'ok'}]]}|[[{'type',15853,'constraint',[{'atom',15853,'is_subtype'}|[[{'var',15853,'Program'}|[{'type',15853,'integer',[]}]]]]}|[{'type',15853,'constraint',[{'atom',15853,'is_subtype'}|[[{'var',15853,'Location'}|[{'type',15853,'integer',[]}]]]]}|[{'type',15853,'constraint',[{'atom',15853,'is_subtype'}|[[{'var',15853,'V0'}|[{'type',15853,'float',[]}]]]]}|[{'type',15853,'constraint',[{'atom',15853,'is_subtype'}|[[{'var',15853,'V1'}|[{'type',15853,'float',[]}]]]]}]]]]]]}]}],
		%% Line 15859
		'spec' =
		    %% Line 15859
		    [{{'programUniform2fv',3},[{'type',15859,'bounded_fun',[{'type',15859,'fun',[{'type',15859,'product',[{'var',15859,'Program'}|[{'var',15859,'Location'}|[{'var',15859,'Value'}]]]}|[{'atom',15859,'ok'}]]}|[[{'type',15859,'constraint',[{'atom',15859,'is_subtype'}|[[{'var',15859,'Program'}|[{'type',15859,'integer',[]}]]]]}|[{'type',15859,'constraint',[{'atom',15859,'is_subtype'}|[[{'var',15859,'Location'}|[{'type',15859,'integer',[]}]]]]}|[{'type',15859,'constraint',[{'atom',15859,'is_subtype'}|[[{'var',15859,'Value'}|[{'type',15859,'list',[{'type',15859,'tuple',[{'type',15859,'float',[]}|[{'type',15859,'float',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 15866
		'spec' =
		    %% Line 15866
		    [{{'programUniform2d',4},[{'type',15866,'bounded_fun',[{'type',15866,'fun',[{'type',15866,'product',[{'var',15866,'Program'}|[{'var',15866,'Location'}|[{'var',15866,'V0'}|[{'var',15866,'V1'}]]]]}|[{'atom',15866,'ok'}]]}|[[{'type',15866,'constraint',[{'atom',15866,'is_subtype'}|[[{'var',15866,'Program'}|[{'type',15866,'integer',[]}]]]]}|[{'type',15866,'constraint',[{'atom',15866,'is_subtype'}|[[{'var',15866,'Location'}|[{'type',15866,'integer',[]}]]]]}|[{'type',15866,'constraint',[{'atom',15866,'is_subtype'}|[[{'var',15866,'V0'}|[{'type',15866,'float',[]}]]]]}|[{'type',15866,'constraint',[{'atom',15866,'is_subtype'}|[[{'var',15866,'V1'}|[{'type',15866,'float',[]}]]]]}]]]]]]}]}],
		%% Line 15872
		'spec' =
		    %% Line 15872
		    [{{'programUniform2dv',3},[{'type',15872,'bounded_fun',[{'type',15872,'fun',[{'type',15872,'product',[{'var',15872,'Program'}|[{'var',15872,'Location'}|[{'var',15872,'Value'}]]]}|[{'atom',15872,'ok'}]]}|[[{'type',15872,'constraint',[{'atom',15872,'is_subtype'}|[[{'var',15872,'Program'}|[{'type',15872,'integer',[]}]]]]}|[{'type',15872,'constraint',[{'atom',15872,'is_subtype'}|[[{'var',15872,'Location'}|[{'type',15872,'integer',[]}]]]]}|[{'type',15872,'constraint',[{'atom',15872,'is_subtype'}|[[{'var',15872,'Value'}|[{'type',15872,'list',[{'type',15872,'tuple',[{'type',15872,'float',[]}|[{'type',15872,'float',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 15879
		'spec' =
		    %% Line 15879
		    [{{'programUniform2ui',4},[{'type',15879,'bounded_fun',[{'type',15879,'fun',[{'type',15879,'product',[{'var',15879,'Program'}|[{'var',15879,'Location'}|[{'var',15879,'V0'}|[{'var',15879,'V1'}]]]]}|[{'atom',15879,'ok'}]]}|[[{'type',15879,'constraint',[{'atom',15879,'is_subtype'}|[[{'var',15879,'Program'}|[{'type',15879,'integer',[]}]]]]}|[{'type',15879,'constraint',[{'atom',15879,'is_subtype'}|[[{'var',15879,'Location'}|[{'type',15879,'integer',[]}]]]]}|[{'type',15879,'constraint',[{'atom',15879,'is_subtype'}|[[{'var',15879,'V0'}|[{'type',15879,'integer',[]}]]]]}|[{'type',15879,'constraint',[{'atom',15879,'is_subtype'}|[[{'var',15879,'V1'}|[{'type',15879,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 15885
		'spec' =
		    %% Line 15885
		    [{{'programUniform2uiv',3},[{'type',15885,'bounded_fun',[{'type',15885,'fun',[{'type',15885,'product',[{'var',15885,'Program'}|[{'var',15885,'Location'}|[{'var',15885,'Value'}]]]}|[{'atom',15885,'ok'}]]}|[[{'type',15885,'constraint',[{'atom',15885,'is_subtype'}|[[{'var',15885,'Program'}|[{'type',15885,'integer',[]}]]]]}|[{'type',15885,'constraint',[{'atom',15885,'is_subtype'}|[[{'var',15885,'Location'}|[{'type',15885,'integer',[]}]]]]}|[{'type',15885,'constraint',[{'atom',15885,'is_subtype'}|[[{'var',15885,'Value'}|[{'type',15885,'list',[{'type',15885,'tuple',[{'type',15885,'integer',[]}|[{'type',15885,'integer',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 15892
		'spec' =
		    %% Line 15892
		    [{{'programUniform3i',5},[{'type',15892,'bounded_fun',[{'type',15892,'fun',[{'type',15892,'product',[{'var',15892,'Program'}|[{'var',15892,'Location'}|[{'var',15892,'V0'}|[{'var',15892,'V1'}|[{'var',15892,'V2'}]]]]]}|[{'atom',15892,'ok'}]]}|[[{'type',15892,'constraint',[{'atom',15892,'is_subtype'}|[[{'var',15892,'Program'}|[{'type',15892,'integer',[]}]]]]}|[{'type',15892,'constraint',[{'atom',15892,'is_subtype'}|[[{'var',15892,'Location'}|[{'type',15892,'integer',[]}]]]]}|[{'type',15892,'constraint',[{'atom',15892,'is_subtype'}|[[{'var',15892,'V0'}|[{'type',15892,'integer',[]}]]]]}|[{'type',15892,'constraint',[{'atom',15892,'is_subtype'}|[[{'var',15892,'V1'}|[{'type',15892,'integer',[]}]]]]}|[{'type',15892,'constraint',[{'atom',15892,'is_subtype'}|[[{'var',15892,'V2'}|[{'type',15892,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 15898
		'spec' =
		    %% Line 15898
		    [{{'programUniform3iv',3},[{'type',15898,'bounded_fun',[{'type',15898,'fun',[{'type',15898,'product',[{'var',15898,'Program'}|[{'var',15898,'Location'}|[{'var',15898,'Value'}]]]}|[{'atom',15898,'ok'}]]}|[[{'type',15898,'constraint',[{'atom',15898,'is_subtype'}|[[{'var',15898,'Program'}|[{'type',15898,'integer',[]}]]]]}|[{'type',15898,'constraint',[{'atom',15898,'is_subtype'}|[[{'var',15898,'Location'}|[{'type',15898,'integer',[]}]]]]}|[{'type',15898,'constraint',[{'atom',15898,'is_subtype'}|[[{'var',15898,'Value'}|[{'type',15898,'list',[{'type',15898,'tuple',[{'type',15898,'integer',[]}|[{'type',15898,'integer',[]}|[{'type',15898,'integer',[]}]]]}]}]]]]}]]]]]}]}],
		%% Line 15905
		'spec' =
		    %% Line 15905
		    [{{'programUniform3f',5},[{'type',15905,'bounded_fun',[{'type',15905,'fun',[{'type',15905,'product',[{'var',15905,'Program'}|[{'var',15905,'Location'}|[{'var',15905,'V0'}|[{'var',15905,'V1'}|[{'var',15905,'V2'}]]]]]}|[{'atom',15905,'ok'}]]}|[[{'type',15905,'constraint',[{'atom',15905,'is_subtype'}|[[{'var',15905,'Program'}|[{'type',15905,'integer',[]}]]]]}|[{'type',15905,'constraint',[{'atom',15905,'is_subtype'}|[[{'var',15905,'Location'}|[{'type',15905,'integer',[]}]]]]}|[{'type',15905,'constraint',[{'atom',15905,'is_subtype'}|[[{'var',15905,'V0'}|[{'type',15905,'float',[]}]]]]}|[{'type',15905,'constraint',[{'atom',15905,'is_subtype'}|[[{'var',15905,'V1'}|[{'type',15905,'float',[]}]]]]}|[{'type',15905,'constraint',[{'atom',15905,'is_subtype'}|[[{'var',15905,'V2'}|[{'type',15905,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 15911
		'spec' =
		    %% Line 15911
		    [{{'programUniform3fv',3},[{'type',15911,'bounded_fun',[{'type',15911,'fun',[{'type',15911,'product',[{'var',15911,'Program'}|[{'var',15911,'Location'}|[{'var',15911,'Value'}]]]}|[{'atom',15911,'ok'}]]}|[[{'type',15911,'constraint',[{'atom',15911,'is_subtype'}|[[{'var',15911,'Program'}|[{'type',15911,'integer',[]}]]]]}|[{'type',15911,'constraint',[{'atom',15911,'is_subtype'}|[[{'var',15911,'Location'}|[{'type',15911,'integer',[]}]]]]}|[{'type',15911,'constraint',[{'atom',15911,'is_subtype'}|[[{'var',15911,'Value'}|[{'type',15911,'list',[{'type',15911,'tuple',[{'type',15911,'float',[]}|[{'type',15911,'float',[]}|[{'type',15911,'float',[]}]]]}]}]]]]}]]]]]}]}],
		%% Line 15918
		'spec' =
		    %% Line 15918
		    [{{'programUniform3d',5},[{'type',15918,'bounded_fun',[{'type',15918,'fun',[{'type',15918,'product',[{'var',15918,'Program'}|[{'var',15918,'Location'}|[{'var',15918,'V0'}|[{'var',15918,'V1'}|[{'var',15918,'V2'}]]]]]}|[{'atom',15918,'ok'}]]}|[[{'type',15918,'constraint',[{'atom',15918,'is_subtype'}|[[{'var',15918,'Program'}|[{'type',15918,'integer',[]}]]]]}|[{'type',15918,'constraint',[{'atom',15918,'is_subtype'}|[[{'var',15918,'Location'}|[{'type',15918,'integer',[]}]]]]}|[{'type',15918,'constraint',[{'atom',15918,'is_subtype'}|[[{'var',15918,'V0'}|[{'type',15918,'float',[]}]]]]}|[{'type',15918,'constraint',[{'atom',15918,'is_subtype'}|[[{'var',15918,'V1'}|[{'type',15918,'float',[]}]]]]}|[{'type',15918,'constraint',[{'atom',15918,'is_subtype'}|[[{'var',15918,'V2'}|[{'type',15918,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 15924
		'spec' =
		    %% Line 15924
		    [{{'programUniform3dv',3},[{'type',15924,'bounded_fun',[{'type',15924,'fun',[{'type',15924,'product',[{'var',15924,'Program'}|[{'var',15924,'Location'}|[{'var',15924,'Value'}]]]}|[{'atom',15924,'ok'}]]}|[[{'type',15924,'constraint',[{'atom',15924,'is_subtype'}|[[{'var',15924,'Program'}|[{'type',15924,'integer',[]}]]]]}|[{'type',15924,'constraint',[{'atom',15924,'is_subtype'}|[[{'var',15924,'Location'}|[{'type',15924,'integer',[]}]]]]}|[{'type',15924,'constraint',[{'atom',15924,'is_subtype'}|[[{'var',15924,'Value'}|[{'type',15924,'list',[{'type',15924,'tuple',[{'type',15924,'float',[]}|[{'type',15924,'float',[]}|[{'type',15924,'float',[]}]]]}]}]]]]}]]]]]}]}],
		%% Line 15931
		'spec' =
		    %% Line 15931
		    [{{'programUniform3ui',5},[{'type',15931,'bounded_fun',[{'type',15931,'fun',[{'type',15931,'product',[{'var',15931,'Program'}|[{'var',15931,'Location'}|[{'var',15931,'V0'}|[{'var',15931,'V1'}|[{'var',15931,'V2'}]]]]]}|[{'atom',15931,'ok'}]]}|[[{'type',15931,'constraint',[{'atom',15931,'is_subtype'}|[[{'var',15931,'Program'}|[{'type',15931,'integer',[]}]]]]}|[{'type',15931,'constraint',[{'atom',15931,'is_subtype'}|[[{'var',15931,'Location'}|[{'type',15931,'integer',[]}]]]]}|[{'type',15931,'constraint',[{'atom',15931,'is_subtype'}|[[{'var',15931,'V0'}|[{'type',15931,'integer',[]}]]]]}|[{'type',15931,'constraint',[{'atom',15931,'is_subtype'}|[[{'var',15931,'V1'}|[{'type',15931,'integer',[]}]]]]}|[{'type',15931,'constraint',[{'atom',15931,'is_subtype'}|[[{'var',15931,'V2'}|[{'type',15931,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 15937
		'spec' =
		    %% Line 15937
		    [{{'programUniform3uiv',3},[{'type',15937,'bounded_fun',[{'type',15937,'fun',[{'type',15937,'product',[{'var',15937,'Program'}|[{'var',15937,'Location'}|[{'var',15937,'Value'}]]]}|[{'atom',15937,'ok'}]]}|[[{'type',15937,'constraint',[{'atom',15937,'is_subtype'}|[[{'var',15937,'Program'}|[{'type',15937,'integer',[]}]]]]}|[{'type',15937,'constraint',[{'atom',15937,'is_subtype'}|[[{'var',15937,'Location'}|[{'type',15937,'integer',[]}]]]]}|[{'type',15937,'constraint',[{'atom',15937,'is_subtype'}|[[{'var',15937,'Value'}|[{'type',15937,'list',[{'type',15937,'tuple',[{'type',15937,'integer',[]}|[{'type',15937,'integer',[]}|[{'type',15937,'integer',[]}]]]}]}]]]]}]]]]]}]}],
		%% Line 15944
		'spec' =
		    %% Line 15944
		    [{{'programUniform4i',6},[{'type',15944,'bounded_fun',[{'type',15944,'fun',[{'type',15944,'product',[{'var',15944,'Program'}|[{'var',15944,'Location'}|[{'var',15944,'V0'}|[{'var',15944,'V1'}|[{'var',15944,'V2'}|[{'var',15944,'V3'}]]]]]]}|[{'atom',15944,'ok'}]]}|[[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'Program'}|[{'type',15944,'integer',[]}]]]]}|[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'Location'}|[{'type',15944,'integer',[]}]]]]}|[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'V0'}|[{'type',15944,'integer',[]}]]]]}|[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'V1'}|[{'type',15944,'integer',[]}]]]]}|[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'V2'}|[{'type',15944,'integer',[]}]]]]}|[{'type',15944,'constraint',[{'atom',15944,'is_subtype'}|[[{'var',15944,'V3'}|[{'type',15944,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 15950
		'spec' =
		    %% Line 15950
		    [{{'programUniform4iv',3},[{'type',15950,'bounded_fun',[{'type',15950,'fun',[{'type',15950,'product',[{'var',15950,'Program'}|[{'var',15950,'Location'}|[{'var',15950,'Value'}]]]}|[{'atom',15950,'ok'}]]}|[[{'type',15950,'constraint',[{'atom',15950,'is_subtype'}|[[{'var',15950,'Program'}|[{'type',15950,'integer',[]}]]]]}|[{'type',15950,'constraint',[{'atom',15950,'is_subtype'}|[[{'var',15950,'Location'}|[{'type',15950,'integer',[]}]]]]}|[{'type',15950,'constraint',[{'atom',15950,'is_subtype'}|[[{'var',15950,'Value'}|[{'type',15950,'list',[{'type',15950,'tuple',[{'type',15950,'integer',[]}|[{'type',15950,'integer',[]}|[{'type',15950,'integer',[]}|[{'type',15950,'integer',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 15957
		'spec' =
		    %% Line 15957
		    [{{'programUniform4f',6},[{'type',15957,'bounded_fun',[{'type',15957,'fun',[{'type',15957,'product',[{'var',15957,'Program'}|[{'var',15957,'Location'}|[{'var',15957,'V0'}|[{'var',15957,'V1'}|[{'var',15957,'V2'}|[{'var',15957,'V3'}]]]]]]}|[{'atom',15957,'ok'}]]}|[[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'Program'}|[{'type',15957,'integer',[]}]]]]}|[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'Location'}|[{'type',15957,'integer',[]}]]]]}|[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'V0'}|[{'type',15957,'float',[]}]]]]}|[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'V1'}|[{'type',15957,'float',[]}]]]]}|[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'V2'}|[{'type',15957,'float',[]}]]]]}|[{'type',15957,'constraint',[{'atom',15957,'is_subtype'}|[[{'var',15957,'V3'}|[{'type',15957,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 15963
		'spec' =
		    %% Line 15963
		    [{{'programUniform4fv',3},[{'type',15963,'bounded_fun',[{'type',15963,'fun',[{'type',15963,'product',[{'var',15963,'Program'}|[{'var',15963,'Location'}|[{'var',15963,'Value'}]]]}|[{'atom',15963,'ok'}]]}|[[{'type',15963,'constraint',[{'atom',15963,'is_subtype'}|[[{'var',15963,'Program'}|[{'type',15963,'integer',[]}]]]]}|[{'type',15963,'constraint',[{'atom',15963,'is_subtype'}|[[{'var',15963,'Location'}|[{'type',15963,'integer',[]}]]]]}|[{'type',15963,'constraint',[{'atom',15963,'is_subtype'}|[[{'var',15963,'Value'}|[{'type',15963,'list',[{'type',15963,'tuple',[{'type',15963,'float',[]}|[{'type',15963,'float',[]}|[{'type',15963,'float',[]}|[{'type',15963,'float',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 15970
		'spec' =
		    %% Line 15970
		    [{{'programUniform4d',6},[{'type',15970,'bounded_fun',[{'type',15970,'fun',[{'type',15970,'product',[{'var',15970,'Program'}|[{'var',15970,'Location'}|[{'var',15970,'V0'}|[{'var',15970,'V1'}|[{'var',15970,'V2'}|[{'var',15970,'V3'}]]]]]]}|[{'atom',15970,'ok'}]]}|[[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'Program'}|[{'type',15970,'integer',[]}]]]]}|[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'Location'}|[{'type',15970,'integer',[]}]]]]}|[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'V0'}|[{'type',15970,'float',[]}]]]]}|[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'V1'}|[{'type',15970,'float',[]}]]]]}|[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'V2'}|[{'type',15970,'float',[]}]]]]}|[{'type',15970,'constraint',[{'atom',15970,'is_subtype'}|[[{'var',15970,'V3'}|[{'type',15970,'float',[]}]]]]}]]]]]]]]}]}],
		%% Line 15976
		'spec' =
		    %% Line 15976
		    [{{'programUniform4dv',3},[{'type',15976,'bounded_fun',[{'type',15976,'fun',[{'type',15976,'product',[{'var',15976,'Program'}|[{'var',15976,'Location'}|[{'var',15976,'Value'}]]]}|[{'atom',15976,'ok'}]]}|[[{'type',15976,'constraint',[{'atom',15976,'is_subtype'}|[[{'var',15976,'Program'}|[{'type',15976,'integer',[]}]]]]}|[{'type',15976,'constraint',[{'atom',15976,'is_subtype'}|[[{'var',15976,'Location'}|[{'type',15976,'integer',[]}]]]]}|[{'type',15976,'constraint',[{'atom',15976,'is_subtype'}|[[{'var',15976,'Value'}|[{'type',15976,'list',[{'type',15976,'tuple',[{'type',15976,'float',[]}|[{'type',15976,'float',[]}|[{'type',15976,'float',[]}|[{'type',15976,'float',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 15983
		'spec' =
		    %% Line 15983
		    [{{'programUniform4ui',6},[{'type',15983,'bounded_fun',[{'type',15983,'fun',[{'type',15983,'product',[{'var',15983,'Program'}|[{'var',15983,'Location'}|[{'var',15983,'V0'}|[{'var',15983,'V1'}|[{'var',15983,'V2'}|[{'var',15983,'V3'}]]]]]]}|[{'atom',15983,'ok'}]]}|[[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'Program'}|[{'type',15983,'integer',[]}]]]]}|[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'Location'}|[{'type',15983,'integer',[]}]]]]}|[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'V0'}|[{'type',15983,'integer',[]}]]]]}|[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'V1'}|[{'type',15983,'integer',[]}]]]]}|[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'V2'}|[{'type',15983,'integer',[]}]]]]}|[{'type',15983,'constraint',[{'atom',15983,'is_subtype'}|[[{'var',15983,'V3'}|[{'type',15983,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 15989
		'spec' =
		    %% Line 15989
		    [{{'programUniform4uiv',3},[{'type',15989,'bounded_fun',[{'type',15989,'fun',[{'type',15989,'product',[{'var',15989,'Program'}|[{'var',15989,'Location'}|[{'var',15989,'Value'}]]]}|[{'atom',15989,'ok'}]]}|[[{'type',15989,'constraint',[{'atom',15989,'is_subtype'}|[[{'var',15989,'Program'}|[{'type',15989,'integer',[]}]]]]}|[{'type',15989,'constraint',[{'atom',15989,'is_subtype'}|[[{'var',15989,'Location'}|[{'type',15989,'integer',[]}]]]]}|[{'type',15989,'constraint',[{'atom',15989,'is_subtype'}|[[{'var',15989,'Value'}|[{'type',15989,'list',[{'type',15989,'tuple',[{'type',15989,'integer',[]}|[{'type',15989,'integer',[]}|[{'type',15989,'integer',[]}|[{'type',15989,'integer',[]}]]]]}]}]]]]}]]]]]}]}],
		%% Line 15996
		'spec' =
		    %% Line 15996
		    [{{'programUniformMatrix2fv',4},[{'type',15996,'bounded_fun',[{'type',15996,'fun',[{'type',15996,'product',[{'var',15996,'Program'}|[{'var',15996,'Location'}|[{'var',15996,'Transpose'}|[{'var',15996,'Value'}]]]]}|[{'atom',15996,'ok'}]]}|[[{'type',15996,'constraint',[{'atom',15996,'is_subtype'}|[[{'var',15996,'Program'}|[{'type',15996,'integer',[]}]]]]}|[{'type',15996,'constraint',[{'atom',15996,'is_subtype'}|[[{'var',15996,'Location'}|[{'type',15996,'integer',[]}]]]]}|[{'type',15996,'constraint',[{'atom',15996,'is_subtype'}|[[{'var',15996,'Transpose'}|[{'type',15996,'union',[{'integer',15996,0}|[{'integer',15996,1}]]}]]]]}|[{'type',15996,'constraint',[{'atom',15996,'is_subtype'}|[[{'var',15996,'Value'}|[{'type',15996,'list',[{'type',15996,'tuple',[{'type',15996,'float',[]}|[{'type',15996,'float',[]}|[{'type',15996,'float',[]}|[{'type',15996,'float',[]}]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16003
		'spec' =
		    %% Line 16003
		    [{{'programUniformMatrix3fv',4},[{'type',16003,'bounded_fun',[{'type',16003,'fun',[{'type',16003,'product',[{'var',16003,'Program'}|[{'var',16003,'Location'}|[{'var',16003,'Transpose'}|[{'var',16003,'Value'}]]]]}|[{'atom',16003,'ok'}]]}|[[{'type',16003,'constraint',[{'atom',16003,'is_subtype'}|[[{'var',16003,'Program'}|[{'type',16003,'integer',[]}]]]]}|[{'type',16003,'constraint',[{'atom',16003,'is_subtype'}|[[{'var',16003,'Location'}|[{'type',16003,'integer',[]}]]]]}|[{'type',16003,'constraint',[{'atom',16003,'is_subtype'}|[[{'var',16003,'Transpose'}|[{'type',16003,'union',[{'integer',16003,0}|[{'integer',16003,1}]]}]]]]}|[{'type',16003,'constraint',[{'atom',16003,'is_subtype'}|[[{'var',16003,'Value'}|[{'type',16003,'list',[{'type',16003,'tuple',[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}|[{'type',16003,'float',[]}]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16010
		'spec' =
		    %% Line 16010
		    [{{'programUniformMatrix4fv',4},[{'type',16010,'bounded_fun',[{'type',16010,'fun',[{'type',16010,'product',[{'var',16010,'Program'}|[{'var',16010,'Location'}|[{'var',16010,'Transpose'}|[{'var',16010,'Value'}]]]]}|[{'atom',16010,'ok'}]]}|[[{'type',16010,'constraint',[{'atom',16010,'is_subtype'}|[[{'var',16010,'Program'}|[{'type',16010,'integer',[]}]]]]}|[{'type',16010,'constraint',[{'atom',16010,'is_subtype'}|[[{'var',16010,'Location'}|[{'type',16010,'integer',[]}]]]]}|[{'type',16010,'constraint',[{'atom',16010,'is_subtype'}|[[{'var',16010,'Transpose'}|[{'type',16010,'union',[{'integer',16010,0}|[{'integer',16010,1}]]}]]]]}|[{'type',16010,'constraint',[{'atom',16010,'is_subtype'}|[[{'var',16010,'Value'}|[{'type',16010,'list',[{'type',16010,'tuple',[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}|[{'type',16010,'float',[]}]]]]]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16017
		'spec' =
		    %% Line 16017
		    [{{'programUniformMatrix2dv',4},[{'type',16017,'bounded_fun',[{'type',16017,'fun',[{'type',16017,'product',[{'var',16017,'Program'}|[{'var',16017,'Location'}|[{'var',16017,'Transpose'}|[{'var',16017,'Value'}]]]]}|[{'atom',16017,'ok'}]]}|[[{'type',16017,'constraint',[{'atom',16017,'is_subtype'}|[[{'var',16017,'Program'}|[{'type',16017,'integer',[]}]]]]}|[{'type',16017,'constraint',[{'atom',16017,'is_subtype'}|[[{'var',16017,'Location'}|[{'type',16017,'integer',[]}]]]]}|[{'type',16017,'constraint',[{'atom',16017,'is_subtype'}|[[{'var',16017,'Transpose'}|[{'type',16017,'union',[{'integer',16017,0}|[{'integer',16017,1}]]}]]]]}|[{'type',16017,'constraint',[{'atom',16017,'is_subtype'}|[[{'var',16017,'Value'}|[{'type',16017,'list',[{'type',16017,'tuple',[{'type',16017,'float',[]}|[{'type',16017,'float',[]}|[{'type',16017,'float',[]}|[{'type',16017,'float',[]}]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16024
		'spec' =
		    %% Line 16024
		    [{{'programUniformMatrix3dv',4},[{'type',16024,'bounded_fun',[{'type',16024,'fun',[{'type',16024,'product',[{'var',16024,'Program'}|[{'var',16024,'Location'}|[{'var',16024,'Transpose'}|[{'var',16024,'Value'}]]]]}|[{'atom',16024,'ok'}]]}|[[{'type',16024,'constraint',[{'atom',16024,'is_subtype'}|[[{'var',16024,'Program'}|[{'type',16024,'integer',[]}]]]]}|[{'type',16024,'constraint',[{'atom',16024,'is_subtype'}|[[{'var',16024,'Location'}|[{'type',16024,'integer',[]}]]]]}|[{'type',16024,'constraint',[{'atom',16024,'is_subtype'}|[[{'var',16024,'Transpose'}|[{'type',16024,'union',[{'integer',16024,0}|[{'integer',16024,1}]]}]]]]}|[{'type',16024,'constraint',[{'atom',16024,'is_subtype'}|[[{'var',16024,'Value'}|[{'type',16024,'list',[{'type',16024,'tuple',[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}|[{'type',16024,'float',[]}]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16031
		'spec' =
		    %% Line 16031
		    [{{'programUniformMatrix4dv',4},[{'type',16031,'bounded_fun',[{'type',16031,'fun',[{'type',16031,'product',[{'var',16031,'Program'}|[{'var',16031,'Location'}|[{'var',16031,'Transpose'}|[{'var',16031,'Value'}]]]]}|[{'atom',16031,'ok'}]]}|[[{'type',16031,'constraint',[{'atom',16031,'is_subtype'}|[[{'var',16031,'Program'}|[{'type',16031,'integer',[]}]]]]}|[{'type',16031,'constraint',[{'atom',16031,'is_subtype'}|[[{'var',16031,'Location'}|[{'type',16031,'integer',[]}]]]]}|[{'type',16031,'constraint',[{'atom',16031,'is_subtype'}|[[{'var',16031,'Transpose'}|[{'type',16031,'union',[{'integer',16031,0}|[{'integer',16031,1}]]}]]]]}|[{'type',16031,'constraint',[{'atom',16031,'is_subtype'}|[[{'var',16031,'Value'}|[{'type',16031,'list',[{'type',16031,'tuple',[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}|[{'type',16031,'float',[]}]]]]]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16038
		'spec' =
		    %% Line 16038
		    [{{'programUniformMatrix2x3fv',4},[{'type',16038,'bounded_fun',[{'type',16038,'fun',[{'type',16038,'product',[{'var',16038,'Program'}|[{'var',16038,'Location'}|[{'var',16038,'Transpose'}|[{'var',16038,'Value'}]]]]}|[{'atom',16038,'ok'}]]}|[[{'type',16038,'constraint',[{'atom',16038,'is_subtype'}|[[{'var',16038,'Program'}|[{'type',16038,'integer',[]}]]]]}|[{'type',16038,'constraint',[{'atom',16038,'is_subtype'}|[[{'var',16038,'Location'}|[{'type',16038,'integer',[]}]]]]}|[{'type',16038,'constraint',[{'atom',16038,'is_subtype'}|[[{'var',16038,'Transpose'}|[{'type',16038,'union',[{'integer',16038,0}|[{'integer',16038,1}]]}]]]]}|[{'type',16038,'constraint',[{'atom',16038,'is_subtype'}|[[{'var',16038,'Value'}|[{'type',16038,'list',[{'type',16038,'tuple',[{'type',16038,'float',[]}|[{'type',16038,'float',[]}|[{'type',16038,'float',[]}|[{'type',16038,'float',[]}|[{'type',16038,'float',[]}|[{'type',16038,'float',[]}]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16045
		'spec' =
		    %% Line 16045
		    [{{'programUniformMatrix3x2fv',4},[{'type',16045,'bounded_fun',[{'type',16045,'fun',[{'type',16045,'product',[{'var',16045,'Program'}|[{'var',16045,'Location'}|[{'var',16045,'Transpose'}|[{'var',16045,'Value'}]]]]}|[{'atom',16045,'ok'}]]}|[[{'type',16045,'constraint',[{'atom',16045,'is_subtype'}|[[{'var',16045,'Program'}|[{'type',16045,'integer',[]}]]]]}|[{'type',16045,'constraint',[{'atom',16045,'is_subtype'}|[[{'var',16045,'Location'}|[{'type',16045,'integer',[]}]]]]}|[{'type',16045,'constraint',[{'atom',16045,'is_subtype'}|[[{'var',16045,'Transpose'}|[{'type',16045,'union',[{'integer',16045,0}|[{'integer',16045,1}]]}]]]]}|[{'type',16045,'constraint',[{'atom',16045,'is_subtype'}|[[{'var',16045,'Value'}|[{'type',16045,'list',[{'type',16045,'tuple',[{'type',16045,'float',[]}|[{'type',16045,'float',[]}|[{'type',16045,'float',[]}|[{'type',16045,'float',[]}|[{'type',16045,'float',[]}|[{'type',16045,'float',[]}]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16052
		'spec' =
		    %% Line 16052
		    [{{'programUniformMatrix2x4fv',4},[{'type',16052,'bounded_fun',[{'type',16052,'fun',[{'type',16052,'product',[{'var',16052,'Program'}|[{'var',16052,'Location'}|[{'var',16052,'Transpose'}|[{'var',16052,'Value'}]]]]}|[{'atom',16052,'ok'}]]}|[[{'type',16052,'constraint',[{'atom',16052,'is_subtype'}|[[{'var',16052,'Program'}|[{'type',16052,'integer',[]}]]]]}|[{'type',16052,'constraint',[{'atom',16052,'is_subtype'}|[[{'var',16052,'Location'}|[{'type',16052,'integer',[]}]]]]}|[{'type',16052,'constraint',[{'atom',16052,'is_subtype'}|[[{'var',16052,'Transpose'}|[{'type',16052,'union',[{'integer',16052,0}|[{'integer',16052,1}]]}]]]]}|[{'type',16052,'constraint',[{'atom',16052,'is_subtype'}|[[{'var',16052,'Value'}|[{'type',16052,'list',[{'type',16052,'tuple',[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}|[{'type',16052,'float',[]}]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16059
		'spec' =
		    %% Line 16059
		    [{{'programUniformMatrix4x2fv',4},[{'type',16059,'bounded_fun',[{'type',16059,'fun',[{'type',16059,'product',[{'var',16059,'Program'}|[{'var',16059,'Location'}|[{'var',16059,'Transpose'}|[{'var',16059,'Value'}]]]]}|[{'atom',16059,'ok'}]]}|[[{'type',16059,'constraint',[{'atom',16059,'is_subtype'}|[[{'var',16059,'Program'}|[{'type',16059,'integer',[]}]]]]}|[{'type',16059,'constraint',[{'atom',16059,'is_subtype'}|[[{'var',16059,'Location'}|[{'type',16059,'integer',[]}]]]]}|[{'type',16059,'constraint',[{'atom',16059,'is_subtype'}|[[{'var',16059,'Transpose'}|[{'type',16059,'union',[{'integer',16059,0}|[{'integer',16059,1}]]}]]]]}|[{'type',16059,'constraint',[{'atom',16059,'is_subtype'}|[[{'var',16059,'Value'}|[{'type',16059,'list',[{'type',16059,'tuple',[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}|[{'type',16059,'float',[]}]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16066
		'spec' =
		    %% Line 16066
		    [{{'programUniformMatrix3x4fv',4},[{'type',16066,'bounded_fun',[{'type',16066,'fun',[{'type',16066,'product',[{'var',16066,'Program'}|[{'var',16066,'Location'}|[{'var',16066,'Transpose'}|[{'var',16066,'Value'}]]]]}|[{'atom',16066,'ok'}]]}|[[{'type',16066,'constraint',[{'atom',16066,'is_subtype'}|[[{'var',16066,'Program'}|[{'type',16066,'integer',[]}]]]]}|[{'type',16066,'constraint',[{'atom',16066,'is_subtype'}|[[{'var',16066,'Location'}|[{'type',16066,'integer',[]}]]]]}|[{'type',16066,'constraint',[{'atom',16066,'is_subtype'}|[[{'var',16066,'Transpose'}|[{'type',16066,'union',[{'integer',16066,0}|[{'integer',16066,1}]]}]]]]}|[{'type',16066,'constraint',[{'atom',16066,'is_subtype'}|[[{'var',16066,'Value'}|[{'type',16066,'list',[{'type',16066,'tuple',[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}|[{'type',16066,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16073
		'spec' =
		    %% Line 16073
		    [{{'programUniformMatrix4x3fv',4},[{'type',16073,'bounded_fun',[{'type',16073,'fun',[{'type',16073,'product',[{'var',16073,'Program'}|[{'var',16073,'Location'}|[{'var',16073,'Transpose'}|[{'var',16073,'Value'}]]]]}|[{'atom',16073,'ok'}]]}|[[{'type',16073,'constraint',[{'atom',16073,'is_subtype'}|[[{'var',16073,'Program'}|[{'type',16073,'integer',[]}]]]]}|[{'type',16073,'constraint',[{'atom',16073,'is_subtype'}|[[{'var',16073,'Location'}|[{'type',16073,'integer',[]}]]]]}|[{'type',16073,'constraint',[{'atom',16073,'is_subtype'}|[[{'var',16073,'Transpose'}|[{'type',16073,'union',[{'integer',16073,0}|[{'integer',16073,1}]]}]]]]}|[{'type',16073,'constraint',[{'atom',16073,'is_subtype'}|[[{'var',16073,'Value'}|[{'type',16073,'list',[{'type',16073,'tuple',[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}|[{'type',16073,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16080
		'spec' =
		    %% Line 16080
		    [{{'programUniformMatrix2x3dv',4},[{'type',16080,'bounded_fun',[{'type',16080,'fun',[{'type',16080,'product',[{'var',16080,'Program'}|[{'var',16080,'Location'}|[{'var',16080,'Transpose'}|[{'var',16080,'Value'}]]]]}|[{'atom',16080,'ok'}]]}|[[{'type',16080,'constraint',[{'atom',16080,'is_subtype'}|[[{'var',16080,'Program'}|[{'type',16080,'integer',[]}]]]]}|[{'type',16080,'constraint',[{'atom',16080,'is_subtype'}|[[{'var',16080,'Location'}|[{'type',16080,'integer',[]}]]]]}|[{'type',16080,'constraint',[{'atom',16080,'is_subtype'}|[[{'var',16080,'Transpose'}|[{'type',16080,'union',[{'integer',16080,0}|[{'integer',16080,1}]]}]]]]}|[{'type',16080,'constraint',[{'atom',16080,'is_subtype'}|[[{'var',16080,'Value'}|[{'type',16080,'list',[{'type',16080,'tuple',[{'type',16080,'float',[]}|[{'type',16080,'float',[]}|[{'type',16080,'float',[]}|[{'type',16080,'float',[]}|[{'type',16080,'float',[]}|[{'type',16080,'float',[]}]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16087
		'spec' =
		    %% Line 16087
		    [{{'programUniformMatrix3x2dv',4},[{'type',16087,'bounded_fun',[{'type',16087,'fun',[{'type',16087,'product',[{'var',16087,'Program'}|[{'var',16087,'Location'}|[{'var',16087,'Transpose'}|[{'var',16087,'Value'}]]]]}|[{'atom',16087,'ok'}]]}|[[{'type',16087,'constraint',[{'atom',16087,'is_subtype'}|[[{'var',16087,'Program'}|[{'type',16087,'integer',[]}]]]]}|[{'type',16087,'constraint',[{'atom',16087,'is_subtype'}|[[{'var',16087,'Location'}|[{'type',16087,'integer',[]}]]]]}|[{'type',16087,'constraint',[{'atom',16087,'is_subtype'}|[[{'var',16087,'Transpose'}|[{'type',16087,'union',[{'integer',16087,0}|[{'integer',16087,1}]]}]]]]}|[{'type',16087,'constraint',[{'atom',16087,'is_subtype'}|[[{'var',16087,'Value'}|[{'type',16087,'list',[{'type',16087,'tuple',[{'type',16087,'float',[]}|[{'type',16087,'float',[]}|[{'type',16087,'float',[]}|[{'type',16087,'float',[]}|[{'type',16087,'float',[]}|[{'type',16087,'float',[]}]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16094
		'spec' =
		    %% Line 16094
		    [{{'programUniformMatrix2x4dv',4},[{'type',16094,'bounded_fun',[{'type',16094,'fun',[{'type',16094,'product',[{'var',16094,'Program'}|[{'var',16094,'Location'}|[{'var',16094,'Transpose'}|[{'var',16094,'Value'}]]]]}|[{'atom',16094,'ok'}]]}|[[{'type',16094,'constraint',[{'atom',16094,'is_subtype'}|[[{'var',16094,'Program'}|[{'type',16094,'integer',[]}]]]]}|[{'type',16094,'constraint',[{'atom',16094,'is_subtype'}|[[{'var',16094,'Location'}|[{'type',16094,'integer',[]}]]]]}|[{'type',16094,'constraint',[{'atom',16094,'is_subtype'}|[[{'var',16094,'Transpose'}|[{'type',16094,'union',[{'integer',16094,0}|[{'integer',16094,1}]]}]]]]}|[{'type',16094,'constraint',[{'atom',16094,'is_subtype'}|[[{'var',16094,'Value'}|[{'type',16094,'list',[{'type',16094,'tuple',[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}|[{'type',16094,'float',[]}]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16101
		'spec' =
		    %% Line 16101
		    [{{'programUniformMatrix4x2dv',4},[{'type',16101,'bounded_fun',[{'type',16101,'fun',[{'type',16101,'product',[{'var',16101,'Program'}|[{'var',16101,'Location'}|[{'var',16101,'Transpose'}|[{'var',16101,'Value'}]]]]}|[{'atom',16101,'ok'}]]}|[[{'type',16101,'constraint',[{'atom',16101,'is_subtype'}|[[{'var',16101,'Program'}|[{'type',16101,'integer',[]}]]]]}|[{'type',16101,'constraint',[{'atom',16101,'is_subtype'}|[[{'var',16101,'Location'}|[{'type',16101,'integer',[]}]]]]}|[{'type',16101,'constraint',[{'atom',16101,'is_subtype'}|[[{'var',16101,'Transpose'}|[{'type',16101,'union',[{'integer',16101,0}|[{'integer',16101,1}]]}]]]]}|[{'type',16101,'constraint',[{'atom',16101,'is_subtype'}|[[{'var',16101,'Value'}|[{'type',16101,'list',[{'type',16101,'tuple',[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}|[{'type',16101,'float',[]}]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16108
		'spec' =
		    %% Line 16108
		    [{{'programUniformMatrix3x4dv',4},[{'type',16108,'bounded_fun',[{'type',16108,'fun',[{'type',16108,'product',[{'var',16108,'Program'}|[{'var',16108,'Location'}|[{'var',16108,'Transpose'}|[{'var',16108,'Value'}]]]]}|[{'atom',16108,'ok'}]]}|[[{'type',16108,'constraint',[{'atom',16108,'is_subtype'}|[[{'var',16108,'Program'}|[{'type',16108,'integer',[]}]]]]}|[{'type',16108,'constraint',[{'atom',16108,'is_subtype'}|[[{'var',16108,'Location'}|[{'type',16108,'integer',[]}]]]]}|[{'type',16108,'constraint',[{'atom',16108,'is_subtype'}|[[{'var',16108,'Transpose'}|[{'type',16108,'union',[{'integer',16108,0}|[{'integer',16108,1}]]}]]]]}|[{'type',16108,'constraint',[{'atom',16108,'is_subtype'}|[[{'var',16108,'Value'}|[{'type',16108,'list',[{'type',16108,'tuple',[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}|[{'type',16108,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16115
		'spec' =
		    %% Line 16115
		    [{{'programUniformMatrix4x3dv',4},[{'type',16115,'bounded_fun',[{'type',16115,'fun',[{'type',16115,'product',[{'var',16115,'Program'}|[{'var',16115,'Location'}|[{'var',16115,'Transpose'}|[{'var',16115,'Value'}]]]]}|[{'atom',16115,'ok'}]]}|[[{'type',16115,'constraint',[{'atom',16115,'is_subtype'}|[[{'var',16115,'Program'}|[{'type',16115,'integer',[]}]]]]}|[{'type',16115,'constraint',[{'atom',16115,'is_subtype'}|[[{'var',16115,'Location'}|[{'type',16115,'integer',[]}]]]]}|[{'type',16115,'constraint',[{'atom',16115,'is_subtype'}|[[{'var',16115,'Transpose'}|[{'type',16115,'union',[{'integer',16115,0}|[{'integer',16115,1}]]}]]]]}|[{'type',16115,'constraint',[{'atom',16115,'is_subtype'}|[[{'var',16115,'Value'}|[{'type',16115,'list',[{'type',16115,'tuple',[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}|[{'type',16115,'float',[]}]]]]]]]]]]]]}]}]]]]}]]]]]]}]}],
		%% Line 16136
		'spec' =
		    %% Line 16136
		    [{{'validateProgramPipeline',1},[{'type',16136,'bounded_fun',[{'type',16136,'fun',[{'type',16136,'product',[{'var',16136,'Pipeline'}]}|[{'atom',16136,'ok'}]]}|[[{'type',16136,'constraint',[{'atom',16136,'is_subtype'}|[[{'var',16136,'Pipeline'}|[{'type',16136,'integer',[]}]]]]}]]]}]}],
		%% Line 16153
		'spec' =
		    %% Line 16153
		    [{{'getProgramPipelineInfoLog',2},[{'type',16153,'bounded_fun',[{'type',16153,'fun',[{'type',16153,'product',[{'var',16153,'Pipeline'}|[{'var',16153,'BufSize'}]]}|[{'type',16153,'string',[]}]]}|[[{'type',16153,'constraint',[{'atom',16153,'is_subtype'}|[[{'var',16153,'Pipeline'}|[{'type',16153,'integer',[]}]]]]}|[{'type',16153,'constraint',[{'atom',16153,'is_subtype'}|[[{'var',16153,'BufSize'}|[{'type',16153,'integer',[]}]]]]}]]]]}]}],
		%% Line 16160
		'spec' =
		    %% Line 16160
		    [{{'vertexAttribL1d',2},[{'type',16160,'bounded_fun',[{'type',16160,'fun',[{'type',16160,'product',[{'var',16160,'Index'}|[{'var',16160,'X'}]]}|[{'atom',16160,'ok'}]]}|[[{'type',16160,'constraint',[{'atom',16160,'is_subtype'}|[[{'var',16160,'Index'}|[{'type',16160,'integer',[]}]]]]}|[{'type',16160,'constraint',[{'atom',16160,'is_subtype'}|[[{'var',16160,'X'}|[{'type',16160,'float',[]}]]]]}]]]]}]}],
		%% Line 16167
		'spec' =
		    %% Line 16167
		    [{{'vertexAttribL2d',3},[{'type',16167,'bounded_fun',[{'type',16167,'fun',[{'type',16167,'product',[{'var',16167,'Index'}|[{'var',16167,'X'}|[{'var',16167,'Y'}]]]}|[{'atom',16167,'ok'}]]}|[[{'type',16167,'constraint',[{'atom',16167,'is_subtype'}|[[{'var',16167,'Index'}|[{'type',16167,'integer',[]}]]]]}|[{'type',16167,'constraint',[{'atom',16167,'is_subtype'}|[[{'var',16167,'X'}|[{'type',16167,'float',[]}]]]]}|[{'type',16167,'constraint',[{'atom',16167,'is_subtype'}|[[{'var',16167,'Y'}|[{'type',16167,'float',[]}]]]]}]]]]]}]}],
		%% Line 16174
		'spec' =
		    %% Line 16174
		    [{{'vertexAttribL3d',4},[{'type',16174,'bounded_fun',[{'type',16174,'fun',[{'type',16174,'product',[{'var',16174,'Index'}|[{'var',16174,'X'}|[{'var',16174,'Y'}|[{'var',16174,'Z'}]]]]}|[{'atom',16174,'ok'}]]}|[[{'type',16174,'constraint',[{'atom',16174,'is_subtype'}|[[{'var',16174,'Index'}|[{'type',16174,'integer',[]}]]]]}|[{'type',16174,'constraint',[{'atom',16174,'is_subtype'}|[[{'var',16174,'X'}|[{'type',16174,'float',[]}]]]]}|[{'type',16174,'constraint',[{'atom',16174,'is_subtype'}|[[{'var',16174,'Y'}|[{'type',16174,'float',[]}]]]]}|[{'type',16174,'constraint',[{'atom',16174,'is_subtype'}|[[{'var',16174,'Z'}|[{'type',16174,'float',[]}]]]]}]]]]]]}]}],
		%% Line 16181
		'spec' =
		    %% Line 16181
		    [{{'vertexAttribL4d',5},[{'type',16181,'bounded_fun',[{'type',16181,'fun',[{'type',16181,'product',[{'var',16181,'Index'}|[{'var',16181,'X'}|[{'var',16181,'Y'}|[{'var',16181,'Z'}|[{'var',16181,'W'}]]]]]}|[{'atom',16181,'ok'}]]}|[[{'type',16181,'constraint',[{'atom',16181,'is_subtype'}|[[{'var',16181,'Index'}|[{'type',16181,'integer',[]}]]]]}|[{'type',16181,'constraint',[{'atom',16181,'is_subtype'}|[[{'var',16181,'X'}|[{'type',16181,'float',[]}]]]]}|[{'type',16181,'constraint',[{'atom',16181,'is_subtype'}|[[{'var',16181,'Y'}|[{'type',16181,'float',[]}]]]]}|[{'type',16181,'constraint',[{'atom',16181,'is_subtype'}|[[{'var',16181,'Z'}|[{'type',16181,'float',[]}]]]]}|[{'type',16181,'constraint',[{'atom',16181,'is_subtype'}|[[{'var',16181,'W'}|[{'type',16181,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 16186
		'spec' =
		    %% Line 16186
		    [{{'vertexAttribL1dv',2},[{'type',16186,'bounded_fun',[{'type',16186,'fun',[{'type',16186,'product',[{'ann_type',16186,[{'var',16186,'Index'}|[{'type',16186,'integer',[]}]]}|[{'var',16186,'V'}]]}|[{'atom',16186,'ok'}]]}|[[{'type',16186,'constraint',[{'atom',16186,'is_subtype'}|[[{'var',16186,'V'}|[{'type',16186,'tuple',[{'ann_type',16186,[{'var',16186,'X'}|[{'type',16186,'float',[]}]]}]}]]]]}]]]}]}],
		%% Line 16190
		'spec' =
		    %% Line 16190
		    [{{'vertexAttribL2dv',2},[{'type',16190,'bounded_fun',[{'type',16190,'fun',[{'type',16190,'product',[{'ann_type',16190,[{'var',16190,'Index'}|[{'type',16190,'integer',[]}]]}|[{'var',16190,'V'}]]}|[{'atom',16190,'ok'}]]}|[[{'type',16190,'constraint',[{'atom',16190,'is_subtype'}|[[{'var',16190,'V'}|[{'type',16190,'tuple',[{'ann_type',16190,[{'var',16190,'X'}|[{'type',16190,'float',[]}]]}|[{'ann_type',16190,[{'var',16190,'Y'}|[{'type',16190,'float',[]}]]}]]}]]]]}]]]}]}],
		%% Line 16194
		'spec' =
		    %% Line 16194
		    [{{'vertexAttribL3dv',2},[{'type',16194,'bounded_fun',[{'type',16194,'fun',[{'type',16194,'product',[{'ann_type',16194,[{'var',16194,'Index'}|[{'type',16194,'integer',[]}]]}|[{'var',16194,'V'}]]}|[{'atom',16194,'ok'}]]}|[[{'type',16194,'constraint',[{'atom',16194,'is_subtype'}|[[{'var',16194,'V'}|[{'type',16194,'tuple',[{'ann_type',16194,[{'var',16194,'X'}|[{'type',16194,'float',[]}]]}|[{'ann_type',16194,[{'var',16194,'Y'}|[{'type',16194,'float',[]}]]}|[{'ann_type',16194,[{'var',16194,'Z'}|[{'type',16194,'float',[]}]]}]]]}]]]]}]]]}]}],
		%% Line 16198
		'spec' =
		    %% Line 16198
		    [{{'vertexAttribL4dv',2},[{'type',16198,'bounded_fun',[{'type',16198,'fun',[{'type',16198,'product',[{'ann_type',16198,[{'var',16198,'Index'}|[{'type',16198,'integer',[]}]]}|[{'var',16198,'V'}]]}|[{'atom',16198,'ok'}]]}|[[{'type',16198,'constraint',[{'atom',16198,'is_subtype'}|[[{'var',16198,'V'}|[{'type',16198,'tuple',[{'ann_type',16198,[{'var',16198,'X'}|[{'type',16198,'float',[]}]]}|[{'ann_type',16198,[{'var',16198,'Y'}|[{'type',16198,'float',[]}]]}|[{'ann_type',16198,[{'var',16198,'Z'}|[{'type',16198,'float',[]}]]}|[{'ann_type',16198,[{'var',16198,'W'}|[{'type',16198,'float',[]}]]}]]]]}]]]]}]]]}]}],
		%% Line 16204
		'spec' =
		    %% Line 16204
		    [{{'vertexAttribLPointer',5},[{'type',16204,'bounded_fun',[{'type',16204,'fun',[{'type',16204,'product',[{'var',16204,'Index'}|[{'var',16204,'Size'}|[{'var',16204,'Type'}|[{'var',16204,'Stride'}|[{'var',16204,'Pointer'}]]]]]}|[{'atom',16204,'ok'}]]}|[[{'type',16204,'constraint',[{'atom',16204,'is_subtype'}|[[{'var',16204,'Index'}|[{'type',16204,'integer',[]}]]]]}|[{'type',16204,'constraint',[{'atom',16204,'is_subtype'}|[[{'var',16204,'Size'}|[{'type',16204,'integer',[]}]]]]}|[{'type',16204,'constraint',[{'atom',16204,'is_subtype'}|[[{'var',16204,'Type'}|[{'type',16204,'enum',[]}]]]]}|[{'type',16204,'constraint',[{'atom',16204,'is_subtype'}|[[{'var',16204,'Stride'}|[{'type',16204,'integer',[]}]]]]}|[{'type',16204,'constraint',[{'atom',16204,'is_subtype'}|[[{'var',16204,'Pointer'}|[{'type',16204,'union',[{'type',16204,'offset',[]}|[{'type',16204,'mem',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 16214
		'spec' =
		    %% Line 16214
		    [{{'getVertexAttribLdv',2},[{'type',16214,'bounded_fun',[{'type',16214,'fun',[{'type',16214,'product',[{'var',16214,'Index'}|[{'var',16214,'Pname'}]]}|[{'type',16214,'tuple',[{'type',16214,'float',[]}|[{'type',16214,'float',[]}|[{'type',16214,'float',[]}|[{'type',16214,'float',[]}]]]]}]]}|[[{'type',16214,'constraint',[{'atom',16214,'is_subtype'}|[[{'var',16214,'Index'}|[{'type',16214,'integer',[]}]]]]}|[{'type',16214,'constraint',[{'atom',16214,'is_subtype'}|[[{'var',16214,'Pname'}|[{'type',16214,'enum',[]}]]]]}]]]]}]}],
		%% Line 16221
		'spec' =
		    %% Line 16221
		    [{{'viewportArrayv',2},[{'type',16221,'bounded_fun',[{'type',16221,'fun',[{'type',16221,'product',[{'var',16221,'First'}|[{'var',16221,'V'}]]}|[{'atom',16221,'ok'}]]}|[[{'type',16221,'constraint',[{'atom',16221,'is_subtype'}|[[{'var',16221,'First'}|[{'type',16221,'integer',[]}]]]]}|[{'type',16221,'constraint',[{'atom',16221,'is_subtype'}|[[{'var',16221,'V'}|[{'type',16221,'list',[{'type',16221,'tuple',[{'type',16221,'float',[]}|[{'type',16221,'float',[]}|[{'type',16221,'float',[]}|[{'type',16221,'float',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 16261
		'spec' =
		    %% Line 16261
		    [{{'viewportIndexedf',5},[{'type',16261,'bounded_fun',[{'type',16261,'fun',[{'type',16261,'product',[{'var',16261,'Index'}|[{'var',16261,'X'}|[{'var',16261,'Y'}|[{'var',16261,'W'}|[{'var',16261,'H'}]]]]]}|[{'atom',16261,'ok'}]]}|[[{'type',16261,'constraint',[{'atom',16261,'is_subtype'}|[[{'var',16261,'Index'}|[{'type',16261,'integer',[]}]]]]}|[{'type',16261,'constraint',[{'atom',16261,'is_subtype'}|[[{'var',16261,'X'}|[{'type',16261,'float',[]}]]]]}|[{'type',16261,'constraint',[{'atom',16261,'is_subtype'}|[[{'var',16261,'Y'}|[{'type',16261,'float',[]}]]]]}|[{'type',16261,'constraint',[{'atom',16261,'is_subtype'}|[[{'var',16261,'W'}|[{'type',16261,'float',[]}]]]]}|[{'type',16261,'constraint',[{'atom',16261,'is_subtype'}|[[{'var',16261,'H'}|[{'type',16261,'float',[]}]]]]}]]]]]]]}]}],
		%% Line 16267
		'spec' =
		    %% Line 16267
		    [{{'viewportIndexedfv',2},[{'type',16267,'bounded_fun',[{'type',16267,'fun',[{'type',16267,'product',[{'var',16267,'Index'}|[{'var',16267,'V'}]]}|[{'atom',16267,'ok'}]]}|[[{'type',16267,'constraint',[{'atom',16267,'is_subtype'}|[[{'var',16267,'Index'}|[{'type',16267,'integer',[]}]]]]}|[{'type',16267,'constraint',[{'atom',16267,'is_subtype'}|[[{'var',16267,'V'}|[{'type',16267,'tuple',[{'type',16267,'float',[]}|[{'type',16267,'float',[]}|[{'type',16267,'float',[]}|[{'type',16267,'float',[]}]]]]}]]]]}]]]]}]}],
		%% Line 16274
		'spec' =
		    %% Line 16274
		    [{{'scissorArrayv',2},[{'type',16274,'bounded_fun',[{'type',16274,'fun',[{'type',16274,'product',[{'var',16274,'First'}|[{'var',16274,'V'}]]}|[{'atom',16274,'ok'}]]}|[[{'type',16274,'constraint',[{'atom',16274,'is_subtype'}|[[{'var',16274,'First'}|[{'type',16274,'integer',[]}]]]]}|[{'type',16274,'constraint',[{'atom',16274,'is_subtype'}|[[{'var',16274,'V'}|[{'type',16274,'list',[{'type',16274,'tuple',[{'type',16274,'integer',[]}|[{'type',16274,'integer',[]}|[{'type',16274,'integer',[]}|[{'type',16274,'integer',[]}]]]]}]}]]]]}]]]]}]}],
		%% Line 16282
		'spec' =
		    %% Line 16282
		    [{{'scissorIndexed',5},[{'type',16282,'bounded_fun',[{'type',16282,'fun',[{'type',16282,'product',[{'var',16282,'Index'}|[{'var',16282,'Left'}|[{'var',16282,'Bottom'}|[{'var',16282,'Width'}|[{'var',16282,'Height'}]]]]]}|[{'atom',16282,'ok'}]]}|[[{'type',16282,'constraint',[{'atom',16282,'is_subtype'}|[[{'var',16282,'Index'}|[{'type',16282,'integer',[]}]]]]}|[{'type',16282,'constraint',[{'atom',16282,'is_subtype'}|[[{'var',16282,'Left'}|[{'type',16282,'integer',[]}]]]]}|[{'type',16282,'constraint',[{'atom',16282,'is_subtype'}|[[{'var',16282,'Bottom'}|[{'type',16282,'integer',[]}]]]]}|[{'type',16282,'constraint',[{'atom',16282,'is_subtype'}|[[{'var',16282,'Width'}|[{'type',16282,'integer',[]}]]]]}|[{'type',16282,'constraint',[{'atom',16282,'is_subtype'}|[[{'var',16282,'Height'}|[{'type',16282,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 16289
		'spec' =
		    %% Line 16289
		    [{{'scissorIndexedv',2},[{'type',16289,'bounded_fun',[{'type',16289,'fun',[{'type',16289,'product',[{'var',16289,'Index'}|[{'var',16289,'V'}]]}|[{'atom',16289,'ok'}]]}|[[{'type',16289,'constraint',[{'atom',16289,'is_subtype'}|[[{'var',16289,'Index'}|[{'type',16289,'integer',[]}]]]]}|[{'type',16289,'constraint',[{'atom',16289,'is_subtype'}|[[{'var',16289,'V'}|[{'type',16289,'tuple',[{'type',16289,'integer',[]}|[{'type',16289,'integer',[]}|[{'type',16289,'integer',[]}|[{'type',16289,'integer',[]}]]]]}]]]]}]]]]}]}],
		%% Line 16296
		'spec' =
		    %% Line 16296
		    [{{'depthRangeArrayv',2},[{'type',16296,'bounded_fun',[{'type',16296,'fun',[{'type',16296,'product',[{'var',16296,'First'}|[{'var',16296,'V'}]]}|[{'atom',16296,'ok'}]]}|[[{'type',16296,'constraint',[{'atom',16296,'is_subtype'}|[[{'var',16296,'First'}|[{'type',16296,'integer',[]}]]]]}|[{'type',16296,'constraint',[{'atom',16296,'is_subtype'}|[[{'var',16296,'V'}|[{'type',16296,'list',[{'type',16296,'tuple',[{'type',16296,'clamp',[]}|[{'type',16296,'clamp',[]}]]}]}]]]]}]]]]}]}],
		%% Line 16304
		'spec' =
		    %% Line 16304
		    [{{'depthRangeIndexed',3},[{'type',16304,'bounded_fun',[{'type',16304,'fun',[{'type',16304,'product',[{'var',16304,'Index'}|[{'var',16304,'N'}|[{'var',16304,'F'}]]]}|[{'atom',16304,'ok'}]]}|[[{'type',16304,'constraint',[{'atom',16304,'is_subtype'}|[[{'var',16304,'Index'}|[{'type',16304,'integer',[]}]]]]}|[{'type',16304,'constraint',[{'atom',16304,'is_subtype'}|[[{'var',16304,'N'}|[{'type',16304,'clamp',[]}]]]]}|[{'type',16304,'constraint',[{'atom',16304,'is_subtype'}|[[{'var',16304,'F'}|[{'type',16304,'clamp',[]}]]]]}]]]]]}]}],
		%% Line 16310
		'spec' =
		    %% Line 16310
		    [{{'getFloati_v',2},[{'type',16310,'bounded_fun',[{'type',16310,'fun',[{'type',16310,'product',[{'var',16310,'Target'}|[{'var',16310,'Index'}]]}|[{'type',16310,'list',[{'type',16310,'float',[]}]}]]}|[[{'type',16310,'constraint',[{'atom',16310,'is_subtype'}|[[{'var',16310,'Target'}|[{'type',16310,'enum',[]}]]]]}|[{'type',16310,'constraint',[{'atom',16310,'is_subtype'}|[[{'var',16310,'Index'}|[{'type',16310,'integer',[]}]]]]}]]]]}]}],
		%% Line 16316
		'spec' =
		    %% Line 16316
		    [{{'getDoublei_v',2},[{'type',16316,'bounded_fun',[{'type',16316,'fun',[{'type',16316,'product',[{'var',16316,'Target'}|[{'var',16316,'Index'}]]}|[{'type',16316,'list',[{'type',16316,'float',[]}]}]]}|[[{'type',16316,'constraint',[{'atom',16316,'is_subtype'}|[[{'var',16316,'Target'}|[{'type',16316,'enum',[]}]]]]}|[{'type',16316,'constraint',[{'atom',16316,'is_subtype'}|[[{'var',16316,'Index'}|[{'type',16316,'integer',[]}]]]]}]]]]}]}],
		%% Line 16323
		'spec' =
		    %% Line 16323
		    [{{'debugMessageControlARB',5},[{'type',16323,'bounded_fun',[{'type',16323,'fun',[{'type',16323,'product',[{'var',16323,'Source'}|[{'var',16323,'Type'}|[{'var',16323,'Severity'}|[{'var',16323,'Ids'}|[{'var',16323,'Enabled'}]]]]]}|[{'atom',16323,'ok'}]]}|[[{'type',16323,'constraint',[{'atom',16323,'is_subtype'}|[[{'var',16323,'Source'}|[{'type',16323,'enum',[]}]]]]}|[{'type',16323,'constraint',[{'atom',16323,'is_subtype'}|[[{'var',16323,'Type'}|[{'type',16323,'enum',[]}]]]]}|[{'type',16323,'constraint',[{'atom',16323,'is_subtype'}|[[{'var',16323,'Severity'}|[{'type',16323,'enum',[]}]]]]}|[{'type',16323,'constraint',[{'atom',16323,'is_subtype'}|[[{'var',16323,'Ids'}|[{'type',16323,'list',[{'type',16323,'integer',[]}]}]]]]}|[{'type',16323,'constraint',[{'atom',16323,'is_subtype'}|[[{'var',16323,'Enabled'}|[{'type',16323,'union',[{'integer',16323,0}|[{'integer',16323,1}]]}]]]]}]]]]]]]}]}],
		%% Line 16331
		'spec' =
		    %% Line 16331
		    [{{'debugMessageInsertARB',5},[{'type',16331,'bounded_fun',[{'type',16331,'fun',[{'type',16331,'product',[{'var',16331,'Source'}|[{'var',16331,'Type'}|[{'var',16331,'Id'}|[{'var',16331,'Severity'}|[{'var',16331,'Buf'}]]]]]}|[{'atom',16331,'ok'}]]}|[[{'type',16331,'constraint',[{'atom',16331,'is_subtype'}|[[{'var',16331,'Source'}|[{'type',16331,'enum',[]}]]]]}|[{'type',16331,'constraint',[{'atom',16331,'is_subtype'}|[[{'var',16331,'Type'}|[{'type',16331,'enum',[]}]]]]}|[{'type',16331,'constraint',[{'atom',16331,'is_subtype'}|[[{'var',16331,'Id'}|[{'type',16331,'integer',[]}]]]]}|[{'type',16331,'constraint',[{'atom',16331,'is_subtype'}|[[{'var',16331,'Severity'}|[{'type',16331,'enum',[]}]]]]}|[{'type',16331,'constraint',[{'atom',16331,'is_subtype'}|[[{'var',16331,'Buf'}|[{'type',16331,'string',[]}]]]]}]]]]]]]}]}],
		%% Line 16338
		'spec' =
		    %% Line 16338
		    [{{'getDebugMessageLogARB',2},[{'type',16338,'bounded_fun',[{'type',16338,'fun',[{'type',16338,'product',[{'var',16338,'Count'}|[{'var',16338,'Bufsize'}]]}|[{'type',16338,'tuple',[{'type',16338,'integer',[]}|[{'ann_type',16338,[{'var',16338,'Sources'}|[{'type',16338,'list',[{'type',16338,'enum',[]}]}]]}|[{'ann_type',16338,[{'var',16338,'Types'}|[{'type',16338,'list',[{'type',16338,'enum',[]}]}]]}|[{'ann_type',16338,[{'var',16338,'Ids'}|[{'type',16338,'list',[{'type',16338,'integer',[]}]}]]}|[{'ann_type',16338,[{'var',16338,'Severities'}|[{'type',16338,'list',[{'type',16338,'enum',[]}]}]]}|[{'ann_type',16338,[{'var',16338,'MessageLog'}|[{'type',16338,'list',[{'type',16338,'string',[]}]}]]}]]]]]]}]]}|[[{'type',16338,'constraint',[{'atom',16338,'is_subtype'}|[[{'var',16338,'Count'}|[{'type',16338,'integer',[]}]]]]}|[{'type',16338,'constraint',[{'atom',16338,'is_subtype'}|[[{'var',16338,'Bufsize'}|[{'type',16338,'integer',[]}]]]]}]]]]}]}],
		%% Line 16345
		'spec' =
		    %% Line 16345
		    [{{'getGraphicsResetStatusARB',0},[{'type',16345,'fun',[{'type',16345,'product',[]}|[{'type',16345,'enum',[]}]]}]}],
		%% Line 16368
		'spec' =
		    %% Line 16368
		    [{{'drawArraysInstancedBaseInstance',5},[{'type',16368,'bounded_fun',[{'type',16368,'fun',[{'type',16368,'product',[{'var',16368,'Mode'}|[{'var',16368,'First'}|[{'var',16368,'Count'}|[{'var',16368,'Primcount'}|[{'var',16368,'Baseinstance'}]]]]]}|[{'atom',16368,'ok'}]]}|[[{'type',16368,'constraint',[{'atom',16368,'is_subtype'}|[[{'var',16368,'Mode'}|[{'type',16368,'enum',[]}]]]]}|[{'type',16368,'constraint',[{'atom',16368,'is_subtype'}|[[{'var',16368,'First'}|[{'type',16368,'integer',[]}]]]]}|[{'type',16368,'constraint',[{'atom',16368,'is_subtype'}|[[{'var',16368,'Count'}|[{'type',16368,'integer',[]}]]]]}|[{'type',16368,'constraint',[{'atom',16368,'is_subtype'}|[[{'var',16368,'Primcount'}|[{'type',16368,'integer',[]}]]]]}|[{'type',16368,'constraint',[{'atom',16368,'is_subtype'}|[[{'var',16368,'Baseinstance'}|[{'type',16368,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 16391
		'spec' =
		    %% Line 16391
		    [{{'drawElementsInstancedBaseInstance',6},[{'type',16391,'bounded_fun',[{'type',16391,'fun',[{'type',16391,'product',[{'var',16391,'Mode'}|[{'var',16391,'Count'}|[{'var',16391,'Type'}|[{'var',16391,'Indices'}|[{'var',16391,'Primcount'}|[{'var',16391,'Baseinstance'}]]]]]]}|[{'atom',16391,'ok'}]]}|[[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Mode'}|[{'type',16391,'enum',[]}]]]]}|[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Count'}|[{'type',16391,'integer',[]}]]]]}|[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Type'}|[{'type',16391,'enum',[]}]]]]}|[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Indices'}|[{'type',16391,'union',[{'type',16391,'offset',[]}|[{'type',16391,'mem',[]}]]}]]]]}|[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Primcount'}|[{'type',16391,'integer',[]}]]]]}|[{'type',16391,'constraint',[{'atom',16391,'is_subtype'}|[[{'var',16391,'Baseinstance'}|[{'type',16391,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 16415
		'spec' =
		    %% Line 16415
		    [{{'drawElementsInstancedBaseVertexBaseInstance',7},[{'type',16415,'bounded_fun',[{'type',16415,'fun',[{'type',16415,'product',[{'var',16415,'Mode'}|[{'var',16415,'Count'}|[{'var',16415,'Type'}|[{'var',16415,'Indices'}|[{'var',16415,'Primcount'}|[{'var',16415,'Basevertex'}|[{'var',16415,'Baseinstance'}]]]]]]]}|[{'atom',16415,'ok'}]]}|[[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Mode'}|[{'type',16415,'enum',[]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Count'}|[{'type',16415,'integer',[]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Type'}|[{'type',16415,'enum',[]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Indices'}|[{'type',16415,'union',[{'type',16415,'offset',[]}|[{'type',16415,'mem',[]}]]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Primcount'}|[{'type',16415,'integer',[]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Basevertex'}|[{'type',16415,'integer',[]}]]]]}|[{'type',16415,'constraint',[{'atom',16415,'is_subtype'}|[[{'var',16415,'Baseinstance'}|[{'type',16415,'integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 16425
		'spec' =
		    %% Line 16425
		    [{{'drawTransformFeedbackInstanced',3},[{'type',16425,'bounded_fun',[{'type',16425,'fun',[{'type',16425,'product',[{'var',16425,'Mode'}|[{'var',16425,'Id'}|[{'var',16425,'Primcount'}]]]}|[{'atom',16425,'ok'}]]}|[[{'type',16425,'constraint',[{'atom',16425,'is_subtype'}|[[{'var',16425,'Mode'}|[{'type',16425,'enum',[]}]]]]}|[{'type',16425,'constraint',[{'atom',16425,'is_subtype'}|[[{'var',16425,'Id'}|[{'type',16425,'integer',[]}]]]]}|[{'type',16425,'constraint',[{'atom',16425,'is_subtype'}|[[{'var',16425,'Primcount'}|[{'type',16425,'integer',[]}]]]]}]]]]]}]}],
		%% Line 16432
		'spec' =
		    %% Line 16432
		    [{{'drawTransformFeedbackStreamInstanced',4},[{'type',16432,'bounded_fun',[{'type',16432,'fun',[{'type',16432,'product',[{'var',16432,'Mode'}|[{'var',16432,'Id'}|[{'var',16432,'Stream'}|[{'var',16432,'Primcount'}]]]]}|[{'atom',16432,'ok'}]]}|[[{'type',16432,'constraint',[{'atom',16432,'is_subtype'}|[[{'var',16432,'Mode'}|[{'type',16432,'enum',[]}]]]]}|[{'type',16432,'constraint',[{'atom',16432,'is_subtype'}|[[{'var',16432,'Id'}|[{'type',16432,'integer',[]}]]]]}|[{'type',16432,'constraint',[{'atom',16432,'is_subtype'}|[[{'var',16432,'Stream'}|[{'type',16432,'integer',[]}]]]]}|[{'type',16432,'constraint',[{'atom',16432,'is_subtype'}|[[{'var',16432,'Primcount'}|[{'type',16432,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 16439
		'spec' =
		    %% Line 16439
		    [{{'getInternalformativ',4},[{'type',16439,'bounded_fun',[{'type',16439,'fun',[{'type',16439,'product',[{'var',16439,'Target'}|[{'var',16439,'Internalformat'}|[{'var',16439,'Pname'}|[{'var',16439,'BufSize'}]]]]}|[{'type',16439,'list',[{'type',16439,'integer',[]}]}]]}|[[{'type',16439,'constraint',[{'atom',16439,'is_subtype'}|[[{'var',16439,'Target'}|[{'type',16439,'enum',[]}]]]]}|[{'type',16439,'constraint',[{'atom',16439,'is_subtype'}|[[{'var',16439,'Internalformat'}|[{'type',16439,'enum',[]}]]]]}|[{'type',16439,'constraint',[{'atom',16439,'is_subtype'}|[[{'var',16439,'Pname'}|[{'type',16439,'enum',[]}]]]]}|[{'type',16439,'constraint',[{'atom',16439,'is_subtype'}|[[{'var',16439,'BufSize'}|[{'type',16439,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 16501
		'spec' =
		    %% Line 16501
		    [{{'bindImageTexture',7},[{'type',16501,'bounded_fun',[{'type',16501,'fun',[{'type',16501,'product',[{'var',16501,'Unit'}|[{'var',16501,'Texture'}|[{'var',16501,'Level'}|[{'var',16501,'Layered'}|[{'var',16501,'Layer'}|[{'var',16501,'Access'}|[{'var',16501,'Format'}]]]]]]]}|[{'atom',16501,'ok'}]]}|[[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Unit'}|[{'type',16501,'integer',[]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Texture'}|[{'type',16501,'integer',[]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Level'}|[{'type',16501,'integer',[]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Layered'}|[{'type',16501,'union',[{'integer',16501,0}|[{'integer',16501,1}]]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Layer'}|[{'type',16501,'integer',[]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Access'}|[{'type',16501,'enum',[]}]]]]}|[{'type',16501,'constraint',[{'atom',16501,'is_subtype'}|[[{'var',16501,'Format'}|[{'type',16501,'enum',[]}]]]]}]]]]]]]]]}]}],
		%% Line 16628
		'spec' =
		    %% Line 16628
		    [{{'memoryBarrier',1},[{'type',16628,'bounded_fun',[{'type',16628,'fun',[{'type',16628,'product',[{'var',16628,'Barriers'}]}|[{'atom',16628,'ok'}]]}|[[{'type',16628,'constraint',[{'atom',16628,'is_subtype'}|[[{'var',16628,'Barriers'}|[{'type',16628,'integer',[]}]]]]}]]]}]}],
		%% Line 16661
		'spec' =
		    %% Line 16661
		    [{{'texStorage1D',4},[{'type',16661,'bounded_fun',[{'type',16661,'fun',[{'type',16661,'product',[{'var',16661,'Target'}|[{'var',16661,'Levels'}|[{'var',16661,'Internalformat'}|[{'var',16661,'Width'}]]]]}|[{'atom',16661,'ok'}]]}|[[{'type',16661,'constraint',[{'atom',16661,'is_subtype'}|[[{'var',16661,'Target'}|[{'type',16661,'enum',[]}]]]]}|[{'type',16661,'constraint',[{'atom',16661,'is_subtype'}|[[{'var',16661,'Levels'}|[{'type',16661,'integer',[]}]]]]}|[{'type',16661,'constraint',[{'atom',16661,'is_subtype'}|[[{'var',16661,'Internalformat'}|[{'type',16661,'enum',[]}]]]]}|[{'type',16661,'constraint',[{'atom',16661,'is_subtype'}|[[{'var',16661,'Width'}|[{'type',16661,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 16706
		'spec' =
		    %% Line 16706
		    [{{'texStorage2D',5},[{'type',16706,'bounded_fun',[{'type',16706,'fun',[{'type',16706,'product',[{'var',16706,'Target'}|[{'var',16706,'Levels'}|[{'var',16706,'Internalformat'}|[{'var',16706,'Width'}|[{'var',16706,'Height'}]]]]]}|[{'atom',16706,'ok'}]]}|[[{'type',16706,'constraint',[{'atom',16706,'is_subtype'}|[[{'var',16706,'Target'}|[{'type',16706,'enum',[]}]]]]}|[{'type',16706,'constraint',[{'atom',16706,'is_subtype'}|[[{'var',16706,'Levels'}|[{'type',16706,'integer',[]}]]]]}|[{'type',16706,'constraint',[{'atom',16706,'is_subtype'}|[[{'var',16706,'Internalformat'}|[{'type',16706,'enum',[]}]]]]}|[{'type',16706,'constraint',[{'atom',16706,'is_subtype'}|[[{'var',16706,'Width'}|[{'type',16706,'integer',[]}]]]]}|[{'type',16706,'constraint',[{'atom',16706,'is_subtype'}|[[{'var',16706,'Height'}|[{'type',16706,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 16749
		'spec' =
		    %% Line 16749
		    [{{'texStorage3D',6},[{'type',16749,'bounded_fun',[{'type',16749,'fun',[{'type',16749,'product',[{'var',16749,'Target'}|[{'var',16749,'Levels'}|[{'var',16749,'Internalformat'}|[{'var',16749,'Width'}|[{'var',16749,'Height'}|[{'var',16749,'Depth'}]]]]]]}|[{'atom',16749,'ok'}]]}|[[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Target'}|[{'type',16749,'enum',[]}]]]]}|[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Levels'}|[{'type',16749,'integer',[]}]]]]}|[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Internalformat'}|[{'type',16749,'enum',[]}]]]]}|[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Width'}|[{'type',16749,'integer',[]}]]]]}|[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Height'}|[{'type',16749,'integer',[]}]]]]}|[{'type',16749,'constraint',[{'atom',16749,'is_subtype'}|[[{'var',16749,'Depth'}|[{'type',16749,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 16756
		'spec' =
		    %% Line 16756
		    [{{'depthBoundsEXT',2},[{'type',16756,'bounded_fun',[{'type',16756,'fun',[{'type',16756,'product',[{'var',16756,'Zmin'}|[{'var',16756,'Zmax'}]]}|[{'atom',16756,'ok'}]]}|[[{'type',16756,'constraint',[{'atom',16756,'is_subtype'}|[[{'var',16756,'Zmin'}|[{'type',16756,'clamp',[]}]]]]}|[{'type',16756,'constraint',[{'atom',16756,'is_subtype'}|[[{'var',16756,'Zmax'}|[{'type',16756,'clamp',[]}]]]]}]]]]}]}],
		%% Line 16763
		'spec' =
		    %% Line 16763
		    [{{'stencilClearTagEXT',2},[{'type',16763,'bounded_fun',[{'type',16763,'fun',[{'type',16763,'product',[{'var',16763,'StencilTagBits'}|[{'var',16763,'StencilClearTag'}]]}|[{'atom',16763,'ok'}]]}|[[{'type',16763,'constraint',[{'atom',16763,'is_subtype'}|[[{'var',16763,'StencilTagBits'}|[{'type',16763,'integer',[]}]]]]}|[{'type',16763,'constraint',[{'atom',16763,'is_subtype'}|[[{'var',16763,'StencilClearTag'}|[{'type',16763,'integer',[]}]]]]}]]]]}]}]]
'call'/2 =
    %% Line 278
    fun (_cor1,_cor0) ->
	let <Port> =
	    %% Line 279
	    call 'erlang':'get'
		('opengl_port')
	in  do  %% Line 280
		( call 'erlang':'port_control'
		      (Port, _cor1, _cor0)
		  -| ['result_not_wanted'] )
		%% Line 281
		apply 'rec'/0
		    ()
'cast'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	let <Port> =
	    %% Line 285
	    call 'erlang':'get'
		('opengl_port')
	in  do  %% Line 286
		( call 'erlang':'port_control'
		      (Port, _cor1, _cor0)
		  -| ['result_not_wanted'] )
		%% Line 287
		'ok'
'rec'/0 =
    %% Line 290
    fun () ->
	%% Line 291
	receive
	  %% Line 292
	  <{'_egl_result_',Res}> when 'true' ->
	      Res
	  %% Line 293
	  <{'_egl_error_',Op,Res}> when 'true' ->
	      call 'erlang':'error'
		  ({'error',Res,Op})
	after 'infinity' ->
	  'true'
'send_bin'/1 =
    %% Line 297
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <Port> =
		  %% Line 298
		  call 'erlang':'get'
		      ('opengl_port')
	      in  %% Line 299
		  call 'erlang':'port_command'
		      (Port, _cor0)
	  %% Line 300
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <Port> =
		  %% Line 301
		  call 'erlang':'get'
		      ('opengl_port')
	      in  let <_88149> =
		      %% Line 302
		      call 'erlang':'element'
			  (2, _cor0)
		  in  %% Line 302
		      case _88149 of
			%% Line 303
			<Bin>
			    when call 'erlang':'is_binary'
				  (_88149) ->
			    %% Line 304
			    call 'erlang':'port_command'
				(Port, _88149)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_88149})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'send_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'clearIndex'/1 =
    %% Line 320
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 321
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 321
				 5037, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'clearColor'/4 =
    %% Line 331
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 332
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 332
				 5038, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'clear'/1 =
    %% Line 361
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 362
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 362
				 5039, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexMask'/1 =
    %% Line 378
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 379
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 379
				 5040, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'colorMask'/4 =
    %% Line 394
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 395
	    #{#<_cor3>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 395
				 5041, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'alphaFunc'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 438
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 438
				 5042, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'blendFunc'/2 =
    %% Line 512
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 513
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 513
				 5043, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'logicOp'/1 =
    %% Line 542
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 543
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 543
				 5044, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'cullFace'/1 =
    %% Line 558
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 559
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 559
				 5045, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'frontFace'/1 =
    %% Line 581
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 582
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 582
				 5046, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'pointSize'/1 =
    %% Line 593
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 594
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 594
				 5047, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'lineWidth'/1 =
    %% Line 625
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 626
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 626
				 5048, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'lineStipple'/2 =
    %% Line 657
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 658
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 658
				 5049, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'polygonMode'/2 =
    %% Line 685
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 686
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 686
				 5050, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'polygonOffset'/2 =
    %% Line 703
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 704
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 704
				 5051, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'polygonStipple'/1 =
    %% Line 734
    fun (_cor0) ->
	do  %% Line 735
	    apply 'send_bin'/1
		(_cor0)
	    let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 736
				 5052, %% Line 736
				       #{}#)
		      -| ['result_not_wanted'] )
		    'ok'
'getPolygonStipple'/0 =
    %% Line 753
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 754
			     5053, %% Line 754
				   #{}#)
		  -| ['result_not_wanted'] )
		apply 'rec'/0
		    ()
'edgeFlag'/1 =
    %% Line 773
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 774
	    #{#<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 774
				 5054, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'edgeFlagv'/1 =
    %% Line 778
    fun (_cor0) ->
	case _cor0 of
	  <{Flag}> when 'true' ->
	      let <_cor1> =
		  #{#<Flag>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5054, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'edgeFlagv',1}}] )
	    -| ['compiler_generated'] )
	end
'scissor'/4 =
    %% Line 798
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 799
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 799
				 5055, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'clipPlane'/2 =
    %% Line 826
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Plane,{E1,E2,E3,E4}> when 'true' ->
	      let <_cor2> =
		  %% Line 827
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<0>(32,1,'integer',['unsigned'|['big']]),
		    #<E1>(64,1,'float',['unsigned'|['native']]),
		    #<E2>(64,1,'float',['unsigned'|['native']]),
		    #<E3>(64,1,'float',['unsigned'|['native']]),
		    #<E4>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 827
				       5056, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'clipPlane',2}}] )
	    -| ['compiler_generated'] )
	end
'getClipPlane'/1 =
    %% Line 836
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 837
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 837
				 5057, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'drawBuffer'/1 =
    %% Line 883
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 884
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 884
				 5058, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'readBuffer'/1 =
    %% Line 908
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 909
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 909
				 5059, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'enable'/1 =
    %% Line 1018
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1019
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1019
				 5060, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'disable'/1 =
    %% Line 1024
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1025
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1025
				 5061, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'isEnabled'/1 =
    %% Line 1062
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1063
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1063
				 5062, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'enableClientState'/1 =
    %% Line 1114
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1115
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1115
				 5063, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'disableClientState'/1 =
    %% Line 1120
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1121
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1121
				 5064, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getBooleanv'/1 =
    %% Line 1933
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1934
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1934
				 5065, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getDoublev'/1 =
    %% Line 1939
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1940
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1940
				 5066, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getFloatv'/1 =
    %% Line 1945
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1946
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1946
				 5067, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getIntegerv'/1 =
    %% Line 1951
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1952
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 1952
				 5068, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'pushAttrib'/1 =
    %% Line 2088
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2089
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2089
				 5069, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'popAttrib'/0 =
    %% Line 2094
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2095
			     5070, %% Line 2095
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'pushClientAttrib'/1 =
    %% Line 2122
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2123
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2123
				 5071, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'popClientAttrib'/0 =
    %% Line 2128
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2129
			     5072, %% Line 2129
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'renderMode'/1 =
    %% Line 2168
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2169
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2169
				 5073, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getError'/0 =
    %% Line 2219
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2220
			     5074, %% Line 2220
				   #{}#)
		  -| ['result_not_wanted'] )
		apply 'rec'/0
		    ()
'getString'/1 =
    %% Line 2262
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2263
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2263
				 5075, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'finish'/0 =
    %% Line 2273
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2274
			     5076, %% Line 2274
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'flush'/0 =
    %% Line 2291
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2292
			     5077, %% Line 2292
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'hint'/2 =
    %% Line 2333
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2334
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2334
				 5078, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'clearDepth'/1 =
    %% Line 2343
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2344
	    #{#<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2344
				 5079, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'depthFunc'/1 =
    %% Line 2384
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2385
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2385
				 5080, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'depthMask'/1 =
    %% Line 2395
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2396
	    #{#<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2396
				 5081, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'depthRange'/2 =
    %% Line 2412
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2413
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2413
				 5082, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'clearAccum'/4 =
    %% Line 2424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2425
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2425
				 5083, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'accum'/2 =
    %% Line 2483
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2484
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2484
				 5084, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'matrixMode'/1 =
    %% Line 2506
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2507
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2507
				 5085, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'ortho'/6 =
    %% Line 2531
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2532
	    #{#<_cor5>(64,1,'float',['unsigned'|['native']]),
	      #<_cor4>(64,1,'float',['unsigned'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2532
				 5086, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'frustum'/6 =
    %% Line 2561
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2562
	    #{#<_cor5>(64,1,'float',['unsigned'|['native']]),
	      #<_cor4>(64,1,'float',['unsigned'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2562
				 5087, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'viewport'/4 =
    %% Line 2579
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2580
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2580
				 5088, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'pushMatrix'/0 =
    %% Line 2604
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2605
			     5089, %% Line 2605
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'popMatrix'/0 =
    %% Line 2610
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2611
			     5090, %% Line 2611
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'loadIdentity'/0 =
    %% Line 2624
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2625
			     5091, %% Line 2625
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'loadMatrixd'/1 =
    %% Line 2644
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 2645
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2645
				       5092, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 2646
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 2647
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2647
				       5092, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadMatrixd',1}}] )
	    -| ['compiler_generated'] )
	end
'loadMatrixf'/1 =
    %% Line 2652
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 2653
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2653
				       5093, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 2654
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 2655
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2655
				       5093, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadMatrixf',1}}] )
	    -| ['compiler_generated'] )
	end
'multMatrixd'/1 =
    %% Line 2667
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 2668
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2668
				       5094, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 2669
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 2670
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2670
				       5094, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multMatrixd',1}}] )
	    -| ['compiler_generated'] )
	end
'multMatrixf'/1 =
    %% Line 2675
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 2676
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2676
				       5095, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 2677
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 2678
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 2678
				       5095, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multMatrixf',1}}] )
	    -| ['compiler_generated'] )
	end
'rotated'/4 =
    %% Line 2698
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2699
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2699
				 5096, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rotatef'/4 =
    %% Line 2704
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2705
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2705
				 5097, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'scaled'/3 =
    %% Line 2727
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2728
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2728
				 5098, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'scalef'/3 =
    %% Line 2733
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2734
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2734
				 5099, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'translated'/3 =
    %% Line 2752
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2753
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2753
				 5100, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'translatef'/3 =
    %% Line 2758
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2759
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2759
				 5101, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'isList'/1 =
    %% Line 2771
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2772
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2772
				 5102, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteLists'/2 =
    %% Line 2787
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2788
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2788
				 5103, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'genLists'/1 =
    %% Line 2800
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2801
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2801
				 5104, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'newList'/2 =
    %% Line 2850
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2851
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2851
				 5105, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'endList'/0 =
    %% Line 2857
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 2858
			     5106, %% Line 2858
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'callList'/1 =
    %% Line 2879
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2880
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2880
				 5107, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'callLists'/1 =
    %% Line 2946
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 2947
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 2948
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 2948
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_89395> when 'true' ->
						let <_42995> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _42995)
					    <[],_14786> when 'true' ->
						_cor10
					    ( <_58643,_41195> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 2948
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 2948
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 2948
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 2948
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 2947
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 2948
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 2948
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 2947
								     5108, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'listBase'/1 =
    %% Line 2960
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2961
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 2961
				 5109, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'begin'/1 =
    %% Line 3031
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3032
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3032
				 5110, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'end'/0 =
    %% Line 3037
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 3038
			     5111, %% Line 3038
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'vertex2d'/2 =
    %% Line 3051
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3052
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3052
				 5112, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex2f'/2 =
    %% Line 3057
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3058
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3058
				 5113, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex2i'/2 =
    %% Line 3063
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3064
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3064
				 5114, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex2s'/2 =
    %% Line 3069
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3070
	    #{#<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3070
				 5115, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex3d'/3 =
    %% Line 3075
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3076
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3076
				 5116, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex3f'/3 =
    %% Line 3081
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3082
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3082
				 5117, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex3i'/3 =
    %% Line 3087
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3088
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3088
				 5118, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex3s'/3 =
    %% Line 3093
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3094
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3094
				 5119, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex4d'/4 =
    %% Line 3099
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3100
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3100
				 5120, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex4f'/4 =
    %% Line 3105
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3106
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3106
				 5121, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex4i'/4 =
    %% Line 3111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3112
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3112
				 5122, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex4s'/4 =
    %% Line 3117
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3118
	    #{#<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3118
				 5123, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertex2dv'/1 =
    %% Line 3122
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5112, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex2dv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex2fv'/1 =
    %% Line 3126
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5113, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex2fv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex2iv'/1 =
    %% Line 3130
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5114, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex2iv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex2sv'/1 =
    %% Line 3134
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5115, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex2sv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex3dv'/1 =
    %% Line 3138
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']]),
		    #<Z>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5116, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex3fv'/1 =
    %% Line 3142
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']]),
		    #<Z>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5117, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex3iv'/1 =
    %% Line 3146
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']]),
		    #<Z>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5118, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex3sv'/1 =
    %% Line 3150
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']]),
		    #<Z>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5119, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex4dv'/1 =
    %% Line 3154
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'vertex4d'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex4dv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex4fv'/1 =
    %% Line 3158
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'vertex4f'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex4fv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex4iv'/1 =
    %% Line 3162
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'vertex4i'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex4iv',1}}] )
	    -| ['compiler_generated'] )
	end
'vertex4sv'/1 =
    %% Line 3166
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'vertex4s'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'vertex4sv',1}}] )
	    -| ['compiler_generated'] )
	end
'normal3b'/3 =
    %% Line 3186
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3187
	    #{#<_cor2>(8,1,'integer',['signed'|['native']]),
	      #<_cor1>(8,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3187
				 5124, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'normal3d'/3 =
    %% Line 3192
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3193
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3193
				 5125, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'normal3f'/3 =
    %% Line 3198
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3199
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3199
				 5126, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'normal3i'/3 =
    %% Line 3204
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3205
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3205
				 5127, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'normal3s'/3 =
    %% Line 3210
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3211
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3211
				 5128, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'normal3bv'/1 =
    %% Line 3215
    fun (_cor0) ->
	case _cor0 of
	  <{Nx,Ny,Nz}> when 'true' ->
	      let <_cor3> =
		  #{#<Nx>(8,1,'integer',['signed'|['native']]),
		    #<Ny>(8,1,'integer',['signed'|['native']]),
		    #<Nz>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5124, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'normal3bv',1}}] )
	    -| ['compiler_generated'] )
	end
'normal3dv'/1 =
    %% Line 3219
    fun (_cor0) ->
	case _cor0 of
	  <{Nx,Ny,Nz}> when 'true' ->
	      let <_cor3> =
		  #{#<Nx>(64,1,'float',['unsigned'|['native']]),
		    #<Ny>(64,1,'float',['unsigned'|['native']]),
		    #<Nz>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5125, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'normal3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'normal3fv'/1 =
    %% Line 3223
    fun (_cor0) ->
	case _cor0 of
	  <{Nx,Ny,Nz}> when 'true' ->
	      let <_cor3> =
		  #{#<Nx>(32,1,'float',['unsigned'|['native']]),
		    #<Ny>(32,1,'float',['unsigned'|['native']]),
		    #<Nz>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5126, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'normal3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'normal3iv'/1 =
    %% Line 3227
    fun (_cor0) ->
	case _cor0 of
	  <{Nx,Ny,Nz}> when 'true' ->
	      let <_cor3> =
		  #{#<Nx>(32,1,'integer',['signed'|['native']]),
		    #<Ny>(32,1,'integer',['signed'|['native']]),
		    #<Nz>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5127, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'normal3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'normal3sv'/1 =
    %% Line 3231
    fun (_cor0) ->
	case _cor0 of
	  <{Nx,Ny,Nz}> when 'true' ->
	      let <_cor3> =
		  #{#<Nx>(16,1,'integer',['signed'|['native']]),
		    #<Ny>(16,1,'integer',['signed'|['native']]),
		    #<Nz>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5128, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'normal3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'indexd'/1 =
    %% Line 3248
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3249
	    #{#<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3249
				 5129, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexf'/1 =
    %% Line 3254
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3255
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3255
				 5130, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexi'/1 =
    %% Line 3260
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3261
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3261
				 5131, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexs'/1 =
    %% Line 3266
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3267
	    #{#<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3267
				 5132, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexub'/1 =
    %% Line 3272
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3273
	    #{#<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3273
				 5133, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'indexdv'/1 =
    %% Line 3277
    fun (_cor0) ->
	case _cor0 of
	  <{C}> when 'true' ->
	      let <_cor1> =
		  #{#<C>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5129, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'indexdv',1}}] )
	    -| ['compiler_generated'] )
	end
'indexfv'/1 =
    %% Line 3281
    fun (_cor0) ->
	case _cor0 of
	  <{C}> when 'true' ->
	      let <_cor1> =
		  #{#<C>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5130, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'indexfv',1}}] )
	    -| ['compiler_generated'] )
	end
'indexiv'/1 =
    %% Line 3285
    fun (_cor0) ->
	case _cor0 of
	  <{C}> when 'true' ->
	      let <_cor1> =
		  #{#<C>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5131, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'indexiv',1}}] )
	    -| ['compiler_generated'] )
	end
'indexsv'/1 =
    %% Line 3289
    fun (_cor0) ->
	case _cor0 of
	  <{C}> when 'true' ->
	      let <_cor1> =
		  #{#<C>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5132, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'indexsv',1}}] )
	    -| ['compiler_generated'] )
	end
'indexubv'/1 =
    %% Line 3293
    fun (_cor0) ->
	case _cor0 of
	  <{C}> when 'true' ->
	      let <_cor1> =
		  #{#<C>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5133, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'indexubv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3b'/3 =
    %% Line 3322
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3323
	    #{#<_cor2>(8,1,'integer',['signed'|['native']]),
	      #<_cor1>(8,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3323
				 5134, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3d'/3 =
    %% Line 3328
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3329
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3329
				 5135, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3f'/3 =
    %% Line 3334
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3335
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3335
				 5136, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3i'/3 =
    %% Line 3340
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3341
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3341
				 5137, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3s'/3 =
    %% Line 3346
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3347
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3347
				 5138, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3ub'/3 =
    %% Line 3352
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3353
	    #{#<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3353
				 5139, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3ui'/3 =
    %% Line 3358
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3359
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3359
				 5140, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color3us'/3 =
    %% Line 3364
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3365
	    #{#<_cor2>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(16,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3365
				 5141, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'color4b'/4 =
    %% Line 3370
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3371
	    #{#<_cor3>(8,1,'integer',['signed'|['native']]),
	      #<_cor2>(8,1,'integer',['signed'|['native']]),
	      #<_cor1>(8,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3371
				 5142, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4d'/4 =
    %% Line 3376
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3377
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3377
				 5143, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4f'/4 =
    %% Line 3382
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3383
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3383
				 5144, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4i'/4 =
    %% Line 3388
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3389
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3389
				 5145, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4s'/4 =
    %% Line 3394
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3395
	    #{#<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3395
				 5146, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4ub'/4 =
    %% Line 3400
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3401
	    #{#<_cor3>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3401
				 5147, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4ui'/4 =
    %% Line 3406
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3407
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3407
				 5148, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color4us'/4 =
    %% Line 3412
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3413
	    #{#<_cor3>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(16,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3413
				 5149, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'color3bv'/1 =
    %% Line 3417
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(8,1,'integer',['signed'|['native']]),
		    #<Green>(8,1,'integer',['signed'|['native']]),
		    #<Blue>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5134, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3bv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3dv'/1 =
    %% Line 3421
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(64,1,'float',['unsigned'|['native']]),
		    #<Green>(64,1,'float',['unsigned'|['native']]),
		    #<Blue>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5135, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3fv'/1 =
    %% Line 3425
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'float',['unsigned'|['native']]),
		    #<Green>(32,1,'float',['unsigned'|['native']]),
		    #<Blue>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5136, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3iv'/1 =
    %% Line 3429
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'integer',['signed'|['native']]),
		    #<Green>(32,1,'integer',['signed'|['native']]),
		    #<Blue>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5137, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3sv'/1 =
    %% Line 3433
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(16,1,'integer',['signed'|['native']]),
		    #<Green>(16,1,'integer',['signed'|['native']]),
		    #<Blue>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5138, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3ubv'/1 =
    %% Line 3437
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(8,1,'integer',['unsigned'|['native']]),
		    #<Green>(8,1,'integer',['unsigned'|['native']]),
		    #<Blue>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5139, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3ubv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3uiv'/1 =
    %% Line 3441
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'integer',['unsigned'|['native']]),
		    #<Green>(32,1,'integer',['unsigned'|['native']]),
		    #<Blue>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5140, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3uiv',1}}] )
	    -| ['compiler_generated'] )
	end
'color3usv'/1 =
    %% Line 3445
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(16,1,'integer',['unsigned'|['native']]),
		    #<Green>(16,1,'integer',['unsigned'|['native']]),
		    #<Blue>(16,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5141, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color3usv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4bv'/1 =
    %% Line 3449
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4b'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4bv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4dv'/1 =
    %% Line 3453
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4d'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4dv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4fv'/1 =
    %% Line 3457
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4f'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4fv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4iv'/1 =
    %% Line 3461
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4i'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4iv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4sv'/1 =
    %% Line 3465
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4s'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4sv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4ubv'/1 =
    %% Line 3469
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4ub'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4ubv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4uiv'/1 =
    %% Line 3473
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4ui'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4uiv',1}}] )
	    -| ['compiler_generated'] )
	end
'color4usv'/1 =
    %% Line 3477
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue,Alpha}> when 'true' ->
	      apply 'color4us'/4
		  (Red, Green, Blue, Alpha)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'color4usv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord1d'/1 =
    %% Line 3495
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3496
	    #{#<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3496
				 5150, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord1f'/1 =
    %% Line 3501
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3502
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3502
				 5151, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord1i'/1 =
    %% Line 3507
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3508
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3508
				 5152, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord1s'/1 =
    %% Line 3513
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3514
	    #{#<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3514
				 5153, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord2d'/2 =
    %% Line 3519
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3520
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3520
				 5154, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord2f'/2 =
    %% Line 3525
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3526
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3526
				 5155, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord2i'/2 =
    %% Line 3531
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3532
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3532
				 5156, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord2s'/2 =
    %% Line 3537
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3538
	    #{#<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3538
				 5157, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord3d'/3 =
    %% Line 3543
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3544
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3544
				 5158, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord3f'/3 =
    %% Line 3549
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3550
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3550
				 5159, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord3i'/3 =
    %% Line 3555
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3556
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3556
				 5160, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord3s'/3 =
    %% Line 3561
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3562
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3562
				 5161, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord4d'/4 =
    %% Line 3567
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3568
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3568
				 5162, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord4f'/4 =
    %% Line 3573
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3574
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3574
				 5163, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord4i'/4 =
    %% Line 3579
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3580
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3580
				 5164, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord4s'/4 =
    %% Line 3585
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3586
	    #{#<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3586
				 5165, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'texCoord1dv'/1 =
    %% Line 3590
    fun (_cor0) ->
	case _cor0 of
	  <{S}> when 'true' ->
	      let <_cor1> =
		  #{#<S>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5150, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord1dv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord1fv'/1 =
    %% Line 3594
    fun (_cor0) ->
	case _cor0 of
	  <{S}> when 'true' ->
	      let <_cor1> =
		  #{#<S>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5151, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord1fv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord1iv'/1 =
    %% Line 3598
    fun (_cor0) ->
	case _cor0 of
	  <{S}> when 'true' ->
	      let <_cor1> =
		  #{#<S>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5152, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord1iv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord1sv'/1 =
    %% Line 3602
    fun (_cor0) ->
	case _cor0 of
	  <{S}> when 'true' ->
	      let <_cor1> =
		  #{#<S>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5153, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord1sv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord2dv'/1 =
    %% Line 3606
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor2> =
		  #{#<S>(64,1,'float',['unsigned'|['native']]),
		    #<T>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5154, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord2dv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord2fv'/1 =
    %% Line 3610
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor2> =
		  #{#<S>(32,1,'float',['unsigned'|['native']]),
		    #<T>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5155, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord2fv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord2iv'/1 =
    %% Line 3614
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor2> =
		  #{#<S>(32,1,'integer',['signed'|['native']]),
		    #<T>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5156, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord2iv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord2sv'/1 =
    %% Line 3618
    fun (_cor0) ->
	case _cor0 of
	  <{S,T}> when 'true' ->
	      let <_cor2> =
		  #{#<S>(16,1,'integer',['signed'|['native']]),
		    #<T>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5157, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord2sv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord3dv'/1 =
    %% Line 3622
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R}> when 'true' ->
	      let <_cor3> =
		  #{#<S>(64,1,'float',['unsigned'|['native']]),
		    #<T>(64,1,'float',['unsigned'|['native']]),
		    #<R>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5158, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord3fv'/1 =
    %% Line 3626
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R}> when 'true' ->
	      let <_cor3> =
		  #{#<S>(32,1,'float',['unsigned'|['native']]),
		    #<T>(32,1,'float',['unsigned'|['native']]),
		    #<R>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5159, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord3iv'/1 =
    %% Line 3630
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R}> when 'true' ->
	      let <_cor3> =
		  #{#<S>(32,1,'integer',['signed'|['native']]),
		    #<T>(32,1,'integer',['signed'|['native']]),
		    #<R>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5160, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord3sv'/1 =
    %% Line 3634
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R}> when 'true' ->
	      let <_cor3> =
		  #{#<S>(16,1,'integer',['signed'|['native']]),
		    #<T>(16,1,'integer',['signed'|['native']]),
		    #<R>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5161, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord4dv'/1 =
    %% Line 3638
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R,Q}> when 'true' ->
	      apply 'texCoord4d'/4
		  (S, T, R, Q)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord4dv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord4fv'/1 =
    %% Line 3642
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R,Q}> when 'true' ->
	      apply 'texCoord4f'/4
		  (S, T, R, Q)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord4fv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord4iv'/1 =
    %% Line 3646
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R,Q}> when 'true' ->
	      apply 'texCoord4i'/4
		  (S, T, R, Q)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord4iv',1}}] )
	    -| ['compiler_generated'] )
	end
'texCoord4sv'/1 =
    %% Line 3650
    fun (_cor0) ->
	case _cor0 of
	  <{S,T,R,Q}> when 'true' ->
	      apply 'texCoord4s'/4
		  (S, T, R, Q)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'texCoord4sv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos2d'/2 =
    %% Line 3695
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3696
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3696
				 5166, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos2f'/2 =
    %% Line 3701
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3702
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3702
				 5167, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos2i'/2 =
    %% Line 3707
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3708
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3708
				 5168, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos2s'/2 =
    %% Line 3713
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3714
	    #{#<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3714
				 5169, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos3d'/3 =
    %% Line 3719
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3720
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3720
				 5170, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos3f'/3 =
    %% Line 3725
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3726
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3726
				 5171, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos3i'/3 =
    %% Line 3731
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3732
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3732
				 5172, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos3s'/3 =
    %% Line 3737
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3738
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3738
				 5173, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos4d'/4 =
    %% Line 3743
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3744
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3744
				 5174, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos4f'/4 =
    %% Line 3749
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3750
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3750
				 5175, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos4i'/4 =
    %% Line 3755
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3756
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3756
				 5176, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos4s'/4 =
    %% Line 3761
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3762
	    #{#<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3762
				 5177, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rasterPos2dv'/1 =
    %% Line 3766
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5166, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos2dv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos2fv'/1 =
    %% Line 3770
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5167, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos2fv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos2iv'/1 =
    %% Line 3774
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5168, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos2iv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos2sv'/1 =
    %% Line 3778
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5169, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos2sv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos3dv'/1 =
    %% Line 3782
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']]),
		    #<Z>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5170, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos3fv'/1 =
    %% Line 3786
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']]),
		    #<Z>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5171, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos3iv'/1 =
    %% Line 3790
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']]),
		    #<Z>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5172, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos3sv'/1 =
    %% Line 3794
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']]),
		    #<Z>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5173, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos4dv'/1 =
    %% Line 3798
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'rasterPos4d'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos4dv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos4fv'/1 =
    %% Line 3802
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'rasterPos4f'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos4fv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos4iv'/1 =
    %% Line 3806
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'rasterPos4i'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos4iv',1}}] )
	    -| ['compiler_generated'] )
	end
'rasterPos4sv'/1 =
    %% Line 3810
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z,W}> when 'true' ->
	      apply 'rasterPos4s'/4
		  (X, Y, Z, W)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rasterPos4sv',1}}] )
	    -| ['compiler_generated'] )
	end
'rectd'/4 =
    %% Line 3827
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3828
	    #{#<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3828
				 5178, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rectf'/4 =
    %% Line 3833
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3834
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3834
				 5179, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'recti'/4 =
    %% Line 3839
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3840
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3840
				 5180, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rects'/4 =
    %% Line 3845
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3846
	    #{#<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 3846
				 5181, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'rectdv'/2 =
    %% Line 3851
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{V1,V2},{_cor5,_cor6}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor5, V1)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (_cor6, V2)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor2> =
		  %% Line 3852
		  #{#<V1>(64,1,'float',['unsigned'|['native']]),
		    #<V2>(64,1,'float',['unsigned'|['native']]),
		    #<V1>(64,1,'float',['unsigned'|['native']]),
		    #<V2>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3852
				       5182, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'rectdv',2}}] )
	    -| ['compiler_generated'] )
	end
'rectfv'/2 =
    %% Line 3857
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{V1,V2},{_cor5,_cor6}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor5, V1)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (_cor6, V2)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor2> =
		  %% Line 3858
		  #{#<V1>(32,1,'float',['unsigned'|['native']]),
		    #<V2>(32,1,'float',['unsigned'|['native']]),
		    #<V1>(32,1,'float',['unsigned'|['native']]),
		    #<V2>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3858
				       5183, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'rectfv',2}}] )
	    -| ['compiler_generated'] )
	end
'rectiv'/2 =
    %% Line 3863
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{V1,V2},{_cor5,_cor6}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor5, V1)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (_cor6, V2)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor2> =
		  %% Line 3864
		  #{#<V1>(32,1,'integer',['signed'|['native']]),
		    #<V2>(32,1,'integer',['signed'|['native']]),
		    #<V1>(32,1,'integer',['signed'|['native']]),
		    #<V2>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3864
				       5184, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'rectiv',2}}] )
	    -| ['compiler_generated'] )
	end
'rectsv'/2 =
    %% Line 3869
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{V1,V2},{_cor5,_cor6}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor5, V1)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (_cor6, V2)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor2> =
		  %% Line 3870
		  #{#<V1>(16,1,'integer',['signed'|['native']]),
		    #<V2>(16,1,'integer',['signed'|['native']]),
		    #<V1>(16,1,'integer',['signed'|['native']]),
		    #<V2>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3870
				       5185, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'rectsv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexPointer'/4 =
    %% Line 3897
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Size,Type,Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 3898
		  #{#<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3898
				       5186, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 3899
	  <Size,Type,Stride,Ptr> when 'true' ->
	      do  %% Line 3900
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 3901
		      #{#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 3901
					   5187, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'normalPointer'/3 =
    %% Line 3928
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 3929
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3929
				       5188, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 3930
	  <Type,Stride,Ptr> when 'true' ->
	      do  %% Line 3931
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor4> =
		      %% Line 3932
		      #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 3932
					   5189, _cor4)
				-| ['result_not_wanted'] )
			      'ok'
	end
'colorPointer'/4 =
    %% Line 3960
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Size,Type,Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 3961
		  #{#<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3961
				       5190, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 3962
	  <Size,Type,Stride,Ptr> when 'true' ->
	      do  %% Line 3963
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 3964
		      #{#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 3964
					   5191, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'indexPointer'/3 =
    %% Line 3990
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 3991
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 3991
				       5192, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 3992
	  <Type,Stride,Ptr> when 'true' ->
	      do  %% Line 3993
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor4> =
		      %% Line 3994
		      #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 3994
					   5193, _cor4)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texCoordPointer'/4 =
    %% Line 4024
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Size,Type,Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 4025
		  #{#<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 4025
				       5194, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 4026
	  <Size,Type,Stride,Ptr> when 'true' ->
	      do  %% Line 4027
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 4028
		      #{#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 4028
					   5195, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'edgeFlagPointer'/2 =
    %% Line 4053
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Stride,Ptr>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 4054
		  #{#<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 4054
				       5196, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 4055
	  <Stride,Ptr> when 'true' ->
	      do  %% Line 4056
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor3> =
		      %% Line 4057
		      #{#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 4057
					   5197, _cor3)
				-| ['result_not_wanted'] )
			      'ok'
	end
'arrayElement'/1 =
    %% Line 4081
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4082
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4082
				 5198, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'drawArrays'/3 =
    %% Line 4102
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4103
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4103
				 5199, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'drawElements'/4 =
    %% Line 4124
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 4125
		  #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 4125
				       5200, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 4126
	  <Mode,Count,Type,Indices> when 'true' ->
	      do  %% Line 4127
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 4128
		      #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 4128
					   5201, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'interleavedArrays'/3 =
    %% Line 4152
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Format,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 4153
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 4153
				       5202, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 4154
	  <Format,Stride,Pointer> when 'true' ->
	      do  %% Line 4155
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor4> =
		      %% Line 4156
		      #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 4156
					   5203, _cor4)
				-| ['result_not_wanted'] )
			      'ok'
	end
'shadeModel'/1 =
    %% Line 4186
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4187
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4187
				 5204, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'lightf'/3 =
    %% Line 4280
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4281
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4281
				 5205, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'lighti'/3 =
    %% Line 4286
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4287
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4287
				 5206, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'lightfv'/3 =
    %% Line 4292
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 4293
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 4294
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_73786> when 'true' ->
					let <_73928> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _73928)
				    <[],_61512> when 'true' ->
					_cor11
				    ( <_75155,_93207> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 4294
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 4294
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 4294
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 4294
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 4293
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 4294
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4294
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4293
							     5207, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'lightiv'/3 =
    %% Line 4299
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 4300
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 4301
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_88039> when 'true' ->
					let <_9694> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _9694)
				    <[],_75507> when 'true' ->
					_cor11
				    ( <_85332,_74576> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 4301
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 4301
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 4301
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 4301
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 4300
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 4301
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4301
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4300
							     5208, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getLightfv'/2 =
    %% Line 4379
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4380
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4380
				 5209, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getLightiv'/2 =
    %% Line 4385
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4386
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4386
				 5210, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'lightModelf'/2 =
    %% Line 4451
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4452
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4452
				 5211, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'lightModeli'/2 =
    %% Line 4457
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4458
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4458
				 5212, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'lightModelfv'/2 =
    %% Line 4463
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 4464
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 4465
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_17764> when 'true' ->
					let <_25175> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _25175)
				    <[],_66357> when 'true' ->
					_cor10
				    ( <_25981,_76199> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 4465
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 4465
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 4465
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 4465
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 4464
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 4465
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4465
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4464
							     5213, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'lightModeliv'/2 =
    %% Line 4470
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 4471
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 4472
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_17437> when 'true' ->
					let <_30821> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _30821)
				    <[],_65785> when 'true' ->
					_cor10
				    ( <_60620,_79056> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 4472
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 4472
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 4472
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 4472
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 4471
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 4472
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4472
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4471
							     5214, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'materialf'/3 =
    %% Line 4538
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4539
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4539
				 5215, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'materiali'/3 =
    %% Line 4544
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4545
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4545
				 5216, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'materialfv'/3 =
    %% Line 4550
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 4551
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 4552
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_41632> when 'true' ->
					let <_3274> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _3274)
				    <[],_69602> when 'true' ->
					_cor11
				    ( <_59427,_61083> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 4552
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 4552
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 4552
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 4552
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 4551
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 4552
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4552
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4551
							     5217, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'materialiv'/3 =
    %% Line 4557
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 4558
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 4559
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_68792> when 'true' ->
					let <_22512> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _22512)
				    <[],_47956> when 'true' ->
					_cor11
				    ( <_4151,_70803> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 4559
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 4559
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 4559
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 4559
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 4558
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 4559
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 4559
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 4558
							     5218, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getMaterialfv'/2 =
    %% Line 4607
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4608
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4608
				 5219, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getMaterialiv'/2 =
    %% Line 4613
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4614
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4614
				 5220, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'colorMaterial'/2 =
    %% Line 4628
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4629
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4629
				 5221, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelZoom'/2 =
    %% Line 4650
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4651
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4651
				 5222, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelStoref'/2 =
    %% Line 4838
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4839
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4839
				 5223, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelStorei'/2 =
    %% Line 4844
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4845
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4845
				 5224, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelTransferf'/2 =
    %% Line 4996
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4997
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 4997
				 5225, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelTransferi'/2 =
    %% Line 5002
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 5003
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5003
				 5226, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pixelMapfv'/3 =
    %% Line 5085
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 5086
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 5087
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5087
				     5227, _cor3)
			  -| ['result_not_wanted'] )
			'ok'
'pixelMapuiv'/3 =
    %% Line 5092
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 5093
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 5094
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5094
				     5228, _cor3)
			  -| ['result_not_wanted'] )
			'ok'
'pixelMapusv'/3 =
    %% Line 5099
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 5100
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 5101
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5101
				     5229, _cor3)
			  -| ['result_not_wanted'] )
			'ok'
'getPixelMapfv'/2 =
    %% Line 5128
    fun (_cor1,_cor0) ->
	do  %% Line 5129
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor2> =
		%% Line 5130
		#{#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5130
				     5230, _cor2)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getPixelMapuiv'/2 =
    %% Line 5135
    fun (_cor1,_cor0) ->
	do  %% Line 5136
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor2> =
		%% Line 5137
		#{#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5137
				     5231, _cor2)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getPixelMapusv'/2 =
    %% Line 5142
    fun (_cor1,_cor0) ->
	do  %% Line 5143
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor2> =
		%% Line 5144
		#{#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5144
				     5232, _cor2)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'bitmap'/7 =
    %% Line 5190
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,Xorig,Yorig,Xmove,Ymove,Bitmap>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 5191
		  #{#<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'float',['unsigned'|['native']]),
		    #<_cor3>(32,1,'float',['unsigned'|['native']]),
		    #<_cor2>(32,1,'float',['unsigned'|['native']]),
		    #<_cor1>(32,1,'float',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 5191
				       5233, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 5192
	  <Width,Height,Xorig,Yorig,Xmove,Ymove,Bitmap> when 'true' ->
	      do  %% Line 5193
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor8> =
		      %% Line 5194
		      #{#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'float',['unsigned'|['native']]),
			#<_cor3>(32,1,'float',['unsigned'|['native']]),
			#<_cor2>(32,1,'float',['unsigned'|['native']]),
			#<_cor1>(32,1,'float',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 5194
					   5234, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'readPixels'/7 =
    %% Line 5291
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 5292
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor7> =
		%% Line 5293
		#{#<_cor6>(32,1,'integer',['signed'|['native']]),
		  #<_cor5>(32,1,'integer',['signed'|['native']]),
		  #<_cor4>(32,1,'integer',['signed'|['native']]),
		  #<_cor3>(32,1,'integer',['signed'|['native']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 5293
				     5235, _cor7)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'drawPixels'/5 =
    %% Line 5536
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 5537
		  #{#<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 5537
				       5236, _cor5)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 5538
	  <Width,Height,Format,Type,Pixels> when 'true' ->
	      do  %% Line 5539
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor6> =
		      %% Line 5540
		      #{#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 5540
					   5237, _cor6)
				-| ['result_not_wanted'] )
			      'ok'
	end
'copyPixels'/5 =
    %% Line 5643
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 5644
	    #{#<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5644
				 5238, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilFunc'/3 =
    %% Line 5706
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5707
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5707
				 5239, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilMask'/1 =
    %% Line 5724
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5725
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5725
				 5240, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilOp'/3 =
    %% Line 5785
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5786
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5786
				 5241, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'clearStencil'/1 =
    %% Line 5796
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5797
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5797
				 5242, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texGend'/3 =
    %% Line 5875
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5876
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5876
				 5243, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texGenf'/3 =
    %% Line 5881
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5882
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5882
				 5244, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texGeni'/3 =
    %% Line 5887
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5888
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5888
				 5245, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texGendv'/3 =
    %% Line 5893
    fun (_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 5894
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 5895
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[C|_cor5],_56711> when 'true' ->
					let <_47248> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<C>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _47248)
				    <[],_24020> when 'true' ->
					_cor7
				    ( <_7384,_46062> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor6> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor6, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 5894
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 5895
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 5894
					     5246, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'texGenfv'/3 =
    %% Line 5900
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 5901
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 5902
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_43612> when 'true' ->
					let <_9598> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _9598)
				    <[],_16736> when 'true' ->
					_cor11
				    ( <_61882,_1203> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 5902
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 5902
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 5902
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 5902
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 5901
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 5902
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 5902
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 5901
							     5247, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'texGeniv'/3 =
    %% Line 5907
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 5908
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 5909
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_34105> when 'true' ->
					let <_63129> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _63129)
				    <[],_9131> when 'true' ->
					_cor11
				    ( <_90015,_28298> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 5909
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 5909
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 5909
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 5909
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 5908
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 5909
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 5909
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 5908
							     5248, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getTexGendv'/2 =
    %% Line 5935
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 5936
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5936
				 5249, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexGenfv'/2 =
    %% Line 5941
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 5942
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5942
				 5250, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexGeniv'/2 =
    %% Line 5947
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 5948
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5948
				 5251, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'texEnvf'/3 =
    %% Line 5954
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5955
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5955
				 5252, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texEnvi'/3 =
    %% Line 5961
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5962
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 5962
				 5253, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texEnvfv'/3 =
    %% Line 6126
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 6127
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 6128
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_25745> when 'true' ->
					let <_74308> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _74308)
				    <[],_19445> when 'true' ->
					_cor11
				    ( <_85688,_45492> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 6128
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 6128
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 6128
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 6128
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 6127
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 6128
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 6128
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 6127
							     5254, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'texEnviv'/3 =
    %% Line 6133
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 6134
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 6135
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_75436> when 'true' ->
					let <_5544> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _5544)
				    <[],_74280> when 'true' ->
					_cor11
				    ( <_26969,_62943> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 6135
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 6135
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 6135
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 6135
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 6134
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 6135
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 6135
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 6134
							     5255, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getTexEnvfv'/2 =
    %% Line 6217
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6218
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6218
				 5256, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexEnviv'/2 =
    %% Line 6223
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6224
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6224
				 5257, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'texParameterf'/3 =
    %% Line 6446
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 6447
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6447
				 5258, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texParameteri'/3 =
    %% Line 6452
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 6453
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6453
				 5259, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'texParameterfv'/3 =
    %% Line 6458
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 6459
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 6460
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_42178> when 'true' ->
					let <_13052> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _13052)
				    <[],_78694> when 'true' ->
					_cor11
				    ( <_24909,_84791> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 6460
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 6460
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 6460
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 6460
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 6459
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 6460
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 6460
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 6459
							     5260, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'texParameteriv'/3 =
    %% Line 6465
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 6466
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 6467
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_13725> when 'true' ->
					let <_6545> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _6545)
				    <[],_90848> when 'true' ->
					_cor11
				    ( <_4918,_38371> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 6467
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 6467
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 6467
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 6467
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 6466
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 6467
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 6467
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 6466
							     5261, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getTexParameterfv'/2 =
    %% Line 6544
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6545
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6545
				 5262, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexParameteriv'/2 =
    %% Line 6550
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6551
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6551
				 5263, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexLevelParameterfv'/3 =
    %% Line 6625
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 6626
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6626
				 5264, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexLevelParameteriv'/3 =
    %% Line 6631
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 6632
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6632
				 5265, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'texImage1D'/8 =
    %% Line 6742
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,InternalFormat,Width,Border,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor8> =
		  %% Line 6743
		  #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 6743
				       5266, _cor8)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 6744
	  <Target,Level,InternalFormat,Width,Border,Format,Type,Pixels> when 'true' ->
	      do  %% Line 6745
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor9> =
		      %% Line 6746
		      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 6746
					   5267, _cor9)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texImage2D'/9 =
    %% Line 6864
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,InternalFormat,Width,Height,Border,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor9> =
		  %% Line 6865
		  #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 6865
				       5268, _cor9)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 6866
	  <Target,Level,InternalFormat,Width,Height,Border,Format,Type,Pixels> when 'true' ->
	      do  %% Line 6867
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor10> =
		      %% Line 6868
		      #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 6868
					   5269, _cor10)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getTexImage'/5 =
    %% Line 6909
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 6910
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor5> =
		%% Line 6911
		#{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor3>(32,1,'integer',['signed'|['native']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 6911
				     5270, _cor5)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'genTextures'/1 =
    %% Line 6927
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 6928
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6928
				 5271, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteTextures'/1 =
    %% Line 6942
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 6943
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 6944
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 6944
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_26937> when 'true' ->
						let <_43517> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _43517)
					    <[],_11278> when 'true' ->
						_cor10
					    ( <_25716,_89060> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 6944
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 6944
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 6944
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 6944
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 6943
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 6944
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 6944
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 6943
								     5272, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'bindTexture'/2 =
    %% Line 6994
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6995
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 6995
				 5273, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'prioritizeTextures'/2 =
    %% Line 7023
    fun (_cor1,_cor0) ->
	let <_cor27> =
	    %% Line 7024
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor21> =
		%% Line 7025
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor20> =
		    call 'erlang':'*'
			(_cor21, 4)
		in  let <_cor19> =
			primop 'bs_init_writable'
			    (_cor20)
		    in  let <_cor26> =
			    %% Line 7025
			    ( letrec
				  'lbc$^1'/2 =
				      fun (_cor25,_cor24) ->
					  case <_cor25,_cor24> of
					    <[C|_cor23],_92426> when 'true' ->
						let <_22518> =
						    ( #{#<_cor24>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^1'/2
							(_cor23, _22518)
					    <[],_4461> when 'true' ->
						_cor24
					    ( <_6220,_90890> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor25,_cor24})
						    -| [{'function_name',{'lbc$^1',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^1'/2
				      (_cor1, _cor19)
			      -| ['list_comprehension'] )
			in  let <_cor15> =
				%% Line 7025
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor16> =
				    %% Line 7025
				    call 'erlang':'+'
					(1, _cor15)
				in  let <_cor17> =
					%% Line 7025
					call 'erlang':'rem'
					    (_cor16, 2)
				    in  let <_cor18> =
					    %% Line 7025
					    call 'erlang':'*'
						(_cor17, 32)
					in  let <_cor14> =
						%% Line 7025
						call 'erlang':'length'
						    (_cor0)
					    in  let <_cor8> =
						    %% Line 7026
						    call 'erlang':'length'
							(_cor0)
						in  let <_cor7> =
							call 'erlang':'*'
							    (_cor8, 4)
						    in  let <_cor6> =
							    primop 'bs_init_writable'
								(_cor7)
							in  let <_cor13> =
								%% Line 7026
								( letrec
								      'lbc$^0'/2 =
									  fun (_cor12,_cor11) ->
									      case <_cor12,_cor11> of
										<[C|_cor10],_40245> when 'true' ->
										    let <_42332> =
											( #{#<_cor11>('all',1,'binary',[]),
											    #<C>(32,1,'float',['unsigned'|['native']])}#
											  -| ['compiler_generated','single_use'] )
										    in  apply 'lbc$^0'/2
											    (_cor10, _42332)
										<[],_22312> when 'true' ->
										    _cor11
										( <_92062,_47494> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor12,_cor11})
											-| [{'function_name',{'lbc$^0',2}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lbc$^0'/2
									  (_cor0, _cor6)
								  -| ['list_comprehension'] )
							    in  let <_cor2> =
								    %% Line 7026
								    call 'erlang':'length'
									(_cor0)
								in  let <_cor3> =
									%% Line 7026
									call 'erlang':'+'
									    (1, _cor2)
								    in  let <_cor4> =
									    %% Line 7026
									    call 'erlang':'rem'
										(_cor3, 2)
									in  let <_cor5> =
										%% Line 7026
										call 'erlang':'*'
										    (_cor4, 32)
									    in  let <_cor28> =
										    %% Line 7024
										    #{#<_cor27>(32,1,'integer',['unsigned'|['native']]),
										      #<_cor26>(%% Line 7025
												'all',8,'binary',['unsigned'|['big']]),
										      #<%% Line 7025
											0>(_cor18,1,'integer',['unsigned'|['big']]),
										      #<_cor14>(%% Line 7025
												32,1,'integer',['unsigned'|['native']]),
										      #<_cor13>(%% Line 7026
												'all',8,'binary',['unsigned'|['big']]),
										      #<%% Line 7026
											0>(_cor5,1,'integer',['unsigned'|['big']])}#
										in  let <Port> =
											call 'erlang':'get'
											    ('opengl_port')
										    in  do  ( call 'erlang':'port_control'
												  (Port, %% Line 7024
													 5274, _cor28)
											      -| ['result_not_wanted'] )
											    'ok'
'areTexturesResident'/1 =
    %% Line 7049
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 7050
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 7051
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 7051
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_65218> when 'true' ->
						let <_39507> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _39507)
					    <[],_14951> when 'true' ->
						_cor10
					    ( <_20122,_52225> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 7051
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 7051
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 7051
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 7051
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 7050
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 7051
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 7051
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 7050
								     5275, _cor14)
							  -| ['result_not_wanted'] )
							apply 'rec'/0
							    ()
'isTexture'/1 =
    %% Line 7064
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7065
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7065
				 5276, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'texSubImage1D'/7 =
    %% Line 7071
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Width,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 7072
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 7072
				       5277, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 7073
	  <Target,Level,Xoffset,Width,Format,Type,Pixels> when 'true' ->
	      do  %% Line 7074
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor8> =
		      %% Line 7075
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 7075
					   5278, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texSubImage2D'/9 =
    %% Line 7081
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Yoffset,Width,Height,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor9> =
		  %% Line 7082
		  #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 7082
				       5279, _cor9)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 7083
	  <Target,Level,Xoffset,Yoffset,Width,Height,Format,Type,Pixels> when 'true' ->
	      do  %% Line 7084
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor10> =
		      %% Line 7085
		      #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 7085
					   5280, _cor10)
				-| ['result_not_wanted'] )
			      'ok'
	end
'copyTexImage1D'/7 =
    %% Line 7117
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 7118
	    #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7118
				 5281, _cor7)
		      -| ['result_not_wanted'] )
		    'ok'
'copyTexImage2D'/8 =
    %% Line 7148
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 7149
	    #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor6>(32,1,'integer',['signed'|['native']]),
	      #<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7149
				 5282, _cor8)
		      -| ['result_not_wanted'] )
		    'ok'
'copyTexSubImage1D'/6 =
    %% Line 7177
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 7178
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7178
				 5283, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'copyTexSubImage2D'/8 =
    %% Line 7210
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 7211
	    #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor6>(32,1,'integer',['signed'|['native']]),
	      #<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7211
				 5284, _cor8)
		      -| ['result_not_wanted'] )
		    'ok'
'map1d'/6 =
    %% Line 7217
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 7218
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor6> =
		%% Line 7219
		#{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		  #<0>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor4>(64,1,'float',['unsigned'|['native']]),
		  #<_cor3>(64,1,'float',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['signed'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7219
				     5285, _cor6)
			  -| ['result_not_wanted'] )
			'ok'
'map1f'/6 =
    %% Line 7225
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 7226
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor6> =
		%% Line 7227
		#{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor4>(32,1,'float',['unsigned'|['native']]),
		  #<_cor3>(32,1,'float',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['signed'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7227
				     5286, _cor6)
			  -| ['result_not_wanted'] )
			'ok'
'map2d'/10 =
    %% Line 7233
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 7234
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor10> =
		%% Line 7235
		#{#<_cor9>(32,1,'integer',['unsigned'|['native']]),
		  #<0>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor8>(64,1,'float',['unsigned'|['native']]),
		  #<_cor7>(64,1,'float',['unsigned'|['native']]),
		  #<_cor6>(32,1,'integer',['signed'|['native']]),
		  #<_cor5>(32,1,'integer',['signed'|['native']]),
		  #<_cor4>(64,1,'float',['unsigned'|['native']]),
		  #<_cor3>(64,1,'float',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['signed'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7235
				     5287, _cor10)
			  -| ['result_not_wanted'] )
			'ok'
'map2f'/10 =
    %% Line 7241
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 7242
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor10> =
		%% Line 7243
		#{#<_cor9>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor8>(32,1,'float',['unsigned'|['native']]),
		  #<_cor7>(32,1,'float',['unsigned'|['native']]),
		  #<_cor6>(32,1,'integer',['signed'|['native']]),
		  #<_cor5>(32,1,'integer',['signed'|['native']]),
		  #<_cor4>(32,1,'float',['unsigned'|['native']]),
		  #<_cor3>(32,1,'float',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['signed'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7243
				     5288, _cor10)
			  -| ['result_not_wanted'] )
			'ok'
'getMapdv'/3 =
    %% Line 7277
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 7278
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 7279
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7279
				     5289, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getMapfv'/3 =
    %% Line 7284
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 7285
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 7286
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7286
				     5290, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getMapiv'/3 =
    %% Line 7291
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 7292
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 7293
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7293
				     5291, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'evalCoord1d'/1 =
    %% Line 7342
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7343
	    #{#<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7343
				 5292, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'evalCoord1f'/1 =
    %% Line 7348
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7349
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7349
				 5293, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'evalCoord1dv'/1 =
    %% Line 7353
    fun (_cor0) ->
	case _cor0 of
	  <{U}> when 'true' ->
	      let <_cor1> =
		  #{#<U>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5292, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'evalCoord1dv',1}}] )
	    -| ['compiler_generated'] )
	end
'evalCoord1fv'/1 =
    %% Line 7357
    fun (_cor0) ->
	case _cor0 of
	  <{U}> when 'true' ->
	      let <_cor1> =
		  #{#<U>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5293, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'evalCoord1fv',1}}] )
	    -| ['compiler_generated'] )
	end
'evalCoord2d'/2 =
    %% Line 7362
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7363
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7363
				 5294, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'evalCoord2f'/2 =
    %% Line 7368
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7369
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7369
				 5295, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'evalCoord2dv'/1 =
    %% Line 7373
    fun (_cor0) ->
	case _cor0 of
	  <{U,V}> when 'true' ->
	      let <_cor2> =
		  #{#<U>(64,1,'float',['unsigned'|['native']]),
		    #<V>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5294, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'evalCoord2dv',1}}] )
	    -| ['compiler_generated'] )
	end
'evalCoord2fv'/1 =
    %% Line 7377
    fun (_cor0) ->
	case _cor0 of
	  <{U,V}> when 'true' ->
	      let <_cor2> =
		  #{#<U>(32,1,'float',['unsigned'|['native']]),
		    #<V>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5295, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'evalCoord2fv',1}}] )
	    -| ['compiler_generated'] )
	end
'mapGrid1d'/3 =
    %% Line 7412
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 7413
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7413
				 5296, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'mapGrid1f'/3 =
    %% Line 7418
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 7419
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7419
				 5297, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'mapGrid2d'/6 =
    %% Line 7424
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 7425
	    #{#<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor4>(64,1,'float',['unsigned'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7425
				 5298, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'mapGrid2f'/6 =
    %% Line 7430
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 7431
	    #{#<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'float',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7431
				 5299, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'evalPoint1'/1 =
    %% Line 7459
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7460
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7460
				 5300, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'evalPoint2'/2 =
    %% Line 7465
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7466
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7466
				 5301, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'evalMesh1'/3 =
    %% Line 7524
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 7525
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7525
				 5302, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'evalMesh2'/5 =
    %% Line 7530
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 7531
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7531
				 5303, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'fogf'/2 =
    %% Line 7600
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7601
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7601
				 5304, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'fogi'/2 =
    %% Line 7606
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7607
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7607
				 5305, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'fogfv'/2 =
    %% Line 7612
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 7613
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 7614
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_49552> when 'true' ->
					let <_50508> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _50508)
				    <[],_13997> when 'true' ->
					_cor10
				    ( <_66055,_69633> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 7614
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 7614
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 7614
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 7614
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 7613
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 7614
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 7614
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 7613
							     5306, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'fogiv'/2 =
    %% Line 7619
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 7620
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 7621
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_2038> when 'true' ->
					let <_24203> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _24203)
				    <[],_54117> when 'true' ->
					_cor10
				    ( <_49522,_88538> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 7621
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 7621
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 7621
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 7621
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 7620
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 7621
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 7621
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 7620
							     5307, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'feedbackBuffer'/3 =
    %% Line 7732
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 7733
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 7734
		#{#<_cor2>(32,1,'integer',['signed'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7734
				     5308, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'passThrough'/1 =
    %% Line 7751
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7752
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7752
				 5309, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'selectBuffer'/2 =
    %% Line 7796
    fun (_cor1,_cor0) ->
	do  %% Line 7797
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor2> =
		%% Line 7798
		#{#<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 7798
				     5310, _cor2)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'initNames'/0 =
    %% Line 7811
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 7812
			     5311, %% Line 7812
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'loadName'/1 =
    %% Line 7827
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7828
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7828
				 5312, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'pushName'/1 =
    %% Line 7851
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7852
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7852
				 5313, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'popName'/0 =
    %% Line 7857
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 7858
			     5314, %% Line 7858
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'blendColor'/4 =
    %% Line 7869
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 7870
	    #{#<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7870
				 5315, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'blendEquation'/1 =
    %% Line 7910
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 7911
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 7911
				 5316, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'drawRangeElements'/6 =
    %% Line 7939
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Start,End,Count,Type,Indices>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 7940
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 7940
				       5317, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 7941
	  <Mode,Start,End,Count,Type,Indices> when 'true' ->
	      do  %% Line 7942
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor7> =
		      %% Line 7943
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 7943
					   5318, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texImage3D'/10 =
    %% Line 8047
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,InternalFormat,Width,Height,Depth,Border,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor10> =
		  %% Line 8048
		  #{#<_cor9>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor8>(32,1,'integer',['signed'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8048
				       5319, _cor10)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8049
	  <Target,Level,InternalFormat,Width,Height,Depth,Border,Format,Type,Pixels> when 'true' ->
	      do  %% Line 8050
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor11> =
		      %% Line 8051
		      #{#<_cor9>(32,1,'integer',['unsigned'|['native']]),
			#<_cor8>(32,1,'integer',['signed'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8051
					   5320, _cor11)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texSubImage3D'/11 =
    %% Line 8057
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Yoffset,Zoffset,Width,Height,Depth,Format,Type,Pixels>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor11> =
		  %% Line 8058
		  #{#<_cor10>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor9>(32,1,'integer',['signed'|['native']]),
		    #<_cor8>(32,1,'integer',['signed'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8058
				       5321, _cor11)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8059
	  <Target,Level,Xoffset,Yoffset,Zoffset,Width,Height,Depth,Format,Type,Pixels> when 'true' ->
	      do  %% Line 8060
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor12> =
		      %% Line 8061
		      #{#<_cor10>(32,1,'integer',['unsigned'|['native']]),
			#<_cor9>(32,1,'integer',['signed'|['native']]),
			#<_cor8>(32,1,'integer',['signed'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8061
					   5322, _cor12)
				-| ['result_not_wanted'] )
			      'ok'
	end
'copyTexSubImage3D'/9 =
    %% Line 8094
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 8095
	    #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor7>(32,1,'integer',['signed'|['native']]),
	      #<_cor6>(32,1,'integer',['signed'|['native']]),
	      #<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8095
				 5323, _cor9)
		      -| ['result_not_wanted'] )
		    'ok'
'colorTable'/6 =
    %% Line 8194
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Internalformat,Width,Format,Type,Table>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 8195
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8195
				       5324, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8196
	  <Target,Internalformat,Width,Format,Type,Table> when 'true' ->
	      do  %% Line 8197
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor7> =
		      %% Line 8198
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8198
					   5325, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'colorTableParameterfv'/3 =
    %% Line 8219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Pname,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 8220
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(32,1,'float',['unsigned'|['native']]),
		    #<P2>(32,1,'float',['unsigned'|['native']]),
		    #<P3>(32,1,'float',['unsigned'|['native']]),
		    #<P4>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8220
				       5326, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'colorTableParameterfv',3}}] )
	    -| ['compiler_generated'] )
	end
'colorTableParameteriv'/3 =
    %% Line 8225
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Pname,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 8226
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(32,1,'integer',['signed'|['native']]),
		    #<P2>(32,1,'integer',['signed'|['native']]),
		    #<P3>(32,1,'integer',['signed'|['native']]),
		    #<P4>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8226
				       5327, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'colorTableParameteriv',3}}] )
	    -| ['compiler_generated'] )
	end
'copyColorTable'/5 =
    %% Line 8269
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8270
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8270
				 5328, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'getColorTable'/4 =
    %% Line 8294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 8295
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor4> =
		%% Line 8296
		#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 8296
				     5329, _cor4)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getColorTableParameterfv'/2 =
    %% Line 8333
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8334
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8334
				 5330, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getColorTableParameteriv'/2 =
    %% Line 8339
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8340
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8340
				 5331, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'colorSubTable'/6 =
    %% Line 8357
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Start,Count,Format,Type,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 8358
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8358
				       5332, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8359
	  <Target,Start,Count,Format,Type,Data> when 'true' ->
	      do  %% Line 8360
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor7> =
		      %% Line 8361
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8361
					   5333, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'copyColorSubTable'/5 =
    %% Line 8374
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8375
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8375
				 5334, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'convolutionFilter1D'/6 =
    %% Line 8427
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Internalformat,Width,Format,Type,Image>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 8428
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8428
				       5335, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8429
	  <Target,Internalformat,Width,Format,Type,Image> when 'true' ->
	      do  %% Line 8430
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor7> =
		      %% Line 8431
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8431
					   5336, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'convolutionFilter2D'/7 =
    %% Line 8484
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Internalformat,Width,Height,Format,Type,Image>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 8485
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8485
				       5337, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8486
	  <Target,Internalformat,Width,Height,Format,Type,Image> when 'true' ->
	      do  %% Line 8487
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor8> =
		      %% Line 8488
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8488
					   5338, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'convolutionParameterf'/3 =
    %% Line 8525
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 8526
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 8527
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_43777> when 'true' ->
					let <_88404> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _88404)
				    <[],_2861> when 'true' ->
					_cor11
				    ( <_1151,_93122> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 8527
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 8527
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 8527
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 8527
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 8526
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 8527
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 8527
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 8526
							     5339, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'convolutionParameterfv'/3 =
    %% Line 8531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Pname,{Params}> when 'true' ->
	      apply 'convolutionParameterf'/3
		  (_cor2, _cor1, Params)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'convolutionParameterfv',3}}] )
	    -| ['compiler_generated'] )
	end
'convolutionParameteri'/3 =
    %% Line 8536
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 8537
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 8538
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_17483> when 'true' ->
					let <_20064> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _20064)
				    <[],_21456> when 'true' ->
					_cor11
				    ( <_3474,_70735> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 8538
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 8538
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 8538
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 8538
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 8537
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 8538
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 8538
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 8537
							     5340, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'convolutionParameteriv'/3 =
    %% Line 8542
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Pname,{Params}> when 'true' ->
	      apply 'convolutionParameteri'/3
		  (_cor2, _cor1, Params)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'convolutionParameteriv',3}}] )
	    -| ['compiler_generated'] )
	end
'copyConvolutionFilter1D'/5 =
    %% Line 8594
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8595
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8595
				 5341, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'copyConvolutionFilter2D'/6 =
    %% Line 8648
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 8649
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8649
				 5342, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'getConvolutionFilter'/4 =
    %% Line 8674
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 8675
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor4> =
		%% Line 8676
		#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 8676
				     5343, _cor4)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getConvolutionParameterfv'/2 =
    %% Line 8713
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8714
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8714
				 5344, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getConvolutionParameteriv'/2 =
    %% Line 8719
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8720
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8720
				 5345, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'separableFilter2D'/8 =
    %% Line 8774
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Internalformat,Width,Height,Format,Type,Row,Column>
	      when let <_cor8> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor9> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      let <_cor10> =
		  %% Line 8775
		  #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 8775
				       5346, _cor10)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 8776
	  <Target,Internalformat,Width,Height,Format,Type,Row,Column> when 'true' ->
	      do  do  %% Line 8777
		      apply 'send_bin'/1
			  (_cor1)
		      %% Line 8778
		      apply 'send_bin'/1
			  (_cor0)
		  let <_cor11> =
		      %% Line 8779
		      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
			#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 8779
					   5347, _cor11)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getHistogram'/5 =
    %% Line 8803
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 8804
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor5> =
		%% Line 8805
		#{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor3>(8,1,'integer',['unsigned'|['native']]),
		  #<0>(24,1,'integer',['unsigned'|['big']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 8805
				     5348, _cor5)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getHistogramParameterfv'/2 =
    %% Line 8829
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8830
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8830
				 5349, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getHistogramParameteriv'/2 =
    %% Line 8835
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8836
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8836
				 5350, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getMinmax'/5 =
    %% Line 8867
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 8868
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor5> =
		%% Line 8869
		#{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor3>(8,1,'integer',['unsigned'|['native']]),
		  #<0>(24,1,'integer',['unsigned'|['big']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 8869
				     5351, _cor5)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getMinmaxParameterfv'/2 =
    %% Line 8885
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8886
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8886
				 5352, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getMinmaxParameteriv'/2 =
    %% Line 8891
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8892
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8892
				 5353, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'histogram'/4 =
    %% Line 8925
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 8926
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8926
				 5354, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'minmax'/3 =
    %% Line 8954
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 8955
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8955
				 5355, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'resetHistogram'/1 =
    %% Line 8963
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 8964
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8964
				 5356, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'resetMinmax'/1 =
    %% Line 8974
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 8975
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8975
				 5357, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'activeTexture'/1 =
    %% Line 8985
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 8986
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 8986
				 5358, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'sampleCoverage'/2 =
    %% Line 9011
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9012
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9012
				 5359, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'compressedTexImage3D'/9 =
    %% Line 9069
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Internalformat,Width,Height,Depth,Border,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor9> =
		  %% Line 9070
		  #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9070
				       5360, _cor9)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9071
	  <Target,Level,Internalformat,Width,Height,Depth,Border,ImageSize,Data> when 'true' ->
	      do  %% Line 9072
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor10> =
		      %% Line 9073
		      #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9073
					   5361, _cor10)
				-| ['result_not_wanted'] )
			      'ok'
	end
'compressedTexImage2D'/8 =
    %% Line 9131
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Internalformat,Width,Height,Border,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor8> =
		  %% Line 9132
		  #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9132
				       5362, _cor8)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9133
	  <Target,Level,Internalformat,Width,Height,Border,ImageSize,Data> when 'true' ->
	      do  %% Line 9134
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor9> =
		      %% Line 9135
		      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9135
					   5363, _cor9)
				-| ['result_not_wanted'] )
			      'ok'
	end
'compressedTexImage1D'/7 =
    %% Line 9188
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Internalformat,Width,Border,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 9189
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9189
				       5364, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9190
	  <Target,Level,Internalformat,Width,Border,ImageSize,Data> when 'true' ->
	      do  %% Line 9191
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor8> =
		      %% Line 9192
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9192
					   5365, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'compressedTexSubImage3D'/11 =
    %% Line 9218
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Yoffset,Zoffset,Width,Height,Depth,Format,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor11> =
		  %% Line 9219
		  #{#<_cor10>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor9>(32,1,'integer',['signed'|['native']]),
		    #<_cor8>(32,1,'integer',['signed'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9219
				       5366, _cor11)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9220
	  <Target,Level,Xoffset,Yoffset,Zoffset,Width,Height,Depth,Format,ImageSize,Data> when 'true' ->
	      do  %% Line 9221
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor12> =
		      %% Line 9222
		      #{#<_cor10>(32,1,'integer',['unsigned'|['native']]),
			#<_cor9>(32,1,'integer',['signed'|['native']]),
			#<_cor8>(32,1,'integer',['signed'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9222
					   5367, _cor12)
				-| ['result_not_wanted'] )
			      'ok'
	end
'compressedTexSubImage2D'/9 =
    %% Line 9247
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Yoffset,Width,Height,Format,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor9> =
		  %% Line 9248
		  #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor7>(32,1,'integer',['signed'|['native']]),
		    #<_cor6>(32,1,'integer',['signed'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9248
				       5368, _cor9)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9249
	  <Target,Level,Xoffset,Yoffset,Width,Height,Format,ImageSize,Data> when 'true' ->
	      do  %% Line 9250
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor10> =
		      %% Line 9251
		      #{#<_cor8>(32,1,'integer',['unsigned'|['native']]),
			#<_cor7>(32,1,'integer',['signed'|['native']]),
			#<_cor6>(32,1,'integer',['signed'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9251
					   5369, _cor10)
				-| ['result_not_wanted'] )
			      'ok'
	end
'compressedTexSubImage1D'/7 =
    %% Line 9276
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Target,Level,Xoffset,Width,Format,ImageSize,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 9277
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9277
				       5370, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9278
	  <Target,Level,Xoffset,Width,Format,ImageSize,Data> when 'true' ->
	      do  %% Line 9279
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor8> =
		      %% Line 9280
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9280
					   5371, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getCompressedTexImage'/3 =
    %% Line 9306
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 9307
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 9308
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['signed'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 9308
				     5372, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'clientActiveTexture'/1 =
    %% Line 9319
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 9320
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9320
				 5373, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord1d'/2 =
    %% Line 9337
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9338
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9338
				 5374, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord1dv'/2 =
    %% Line 9342
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S}> when 'true' ->
	      apply 'multiTexCoord1d'/2
		  (_cor1, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord1dv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord1f'/2 =
    %% Line 9347
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9348
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9348
				 5375, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord1fv'/2 =
    %% Line 9352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5375, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord1fv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord1i'/2 =
    %% Line 9357
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9358
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9358
				 5376, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord1iv'/2 =
    %% Line 9362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5376, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord1iv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord1s'/2 =
    %% Line 9367
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9368
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9368
				 5377, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord1sv'/2 =
    %% Line 9372
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5377, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord1sv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord2d'/3 =
    %% Line 9377
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9378
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9378
				 5378, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord2dv'/2 =
    %% Line 9382
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T}> when 'true' ->
	      apply 'multiTexCoord2d'/3
		  (_cor1, S, T)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord2dv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord2f'/3 =
    %% Line 9387
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9388
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9388
				 5379, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord2fv'/2 =
    %% Line 9392
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(32,1,'float',['unsigned'|['native']]),
		    #<T>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5379, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord2fv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord2i'/3 =
    %% Line 9397
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9398
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9398
				 5380, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord2iv'/2 =
    %% Line 9402
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(32,1,'integer',['signed'|['native']]),
		    #<T>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5380, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord2iv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord2s'/3 =
    %% Line 9407
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9408
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9408
				 5381, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord2sv'/2 =
    %% Line 9412
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<S>(16,1,'integer',['signed'|['native']]),
		    #<T>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5381, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord2sv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord3d'/4 =
    %% Line 9417
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 9418
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9418
				 5382, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord3dv'/2 =
    %% Line 9422
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R}> when 'true' ->
	      apply 'multiTexCoord3d'/4
		  (_cor1, S, T, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord3dv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord3f'/4 =
    %% Line 9427
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 9428
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9428
				 5383, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord3fv'/2 =
    %% Line 9432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R}> when 'true' ->
	      apply 'multiTexCoord3f'/4
		  (_cor1, S, T, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord3fv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord3i'/4 =
    %% Line 9437
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 9438
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9438
				 5384, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord3iv'/2 =
    %% Line 9442
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R}> when 'true' ->
	      apply 'multiTexCoord3i'/4
		  (_cor1, S, T, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord3iv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord3s'/4 =
    %% Line 9447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 9448
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9448
				 5385, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord3sv'/2 =
    %% Line 9452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R}> when 'true' ->
	      apply 'multiTexCoord3s'/4
		  (_cor1, S, T, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord3sv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord4d'/5 =
    %% Line 9457
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9458
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9458
				 5386, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord4dv'/2 =
    %% Line 9462
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R,Q}> when 'true' ->
	      apply 'multiTexCoord4d'/5
		  (_cor1, S, T, R, Q)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord4dv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord4f'/5 =
    %% Line 9467
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9468
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9468
				 5387, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord4fv'/2 =
    %% Line 9472
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R,Q}> when 'true' ->
	      apply 'multiTexCoord4f'/5
		  (_cor1, S, T, R, Q)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord4fv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord4i'/5 =
    %% Line 9477
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9478
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9478
				 5388, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord4iv'/2 =
    %% Line 9482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R,Q}> when 'true' ->
	      apply 'multiTexCoord4i'/5
		  (_cor1, S, T, R, Q)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord4iv',2}}] )
	    -| ['compiler_generated'] )
	end
'multiTexCoord4s'/5 =
    %% Line 9487
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9488
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9488
				 5389, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'multiTexCoord4sv'/2 =
    %% Line 9492
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Target,{S,T,R,Q}> when 'true' ->
	      apply 'multiTexCoord4s'/5
		  (_cor1, S, T, R, Q)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'multiTexCoord4sv',2}}] )
	    -| ['compiler_generated'] )
	end
'loadTransposeMatrixf'/1 =
    %% Line 9514
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 9515
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9515
				       5390, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9516
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 9517
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9517
				       5390, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadTransposeMatrixf',1}}] )
	    -| ['compiler_generated'] )
	end
'loadTransposeMatrixd'/1 =
    %% Line 9522
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 9523
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9523
				       5391, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9524
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 9525
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9525
				       5391, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadTransposeMatrixd',1}}] )
	    -| ['compiler_generated'] )
	end
'multTransposeMatrixf'/1 =
    %% Line 9537
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 9538
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9538
				       5392, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9539
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 9540
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9540
				       5392, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multTransposeMatrixf',1}}] )
	    -| ['compiler_generated'] )
	end
'multTransposeMatrixd'/1 =
    %% Line 9545
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 9546
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9546
				       5393, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9547
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 9548
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9548
				       5393, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multTransposeMatrixd',1}}] )
	    -| ['compiler_generated'] )
	end
'blendFuncSeparate'/4 =
    %% Line 9624
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 9625
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9625
				 5394, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'multiDrawArrays'/3 =
    %% Line 9649
    fun (_cor2,_cor1,_cor0) ->
	let <_cor27> =
	    %% Line 9650
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor21> =
		%% Line 9651
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor20> =
		    call 'erlang':'*'
			(_cor21, 4)
		in  let <_cor19> =
			primop 'bs_init_writable'
			    (_cor20)
		    in  let <_cor26> =
			    %% Line 9651
			    ( letrec
				  'lbc$^1'/2 =
				      fun (_cor25,_cor24) ->
					  case <_cor25,_cor24> of
					    <[C|_cor23],_44476> when 'true' ->
						let <_38875> =
						    ( #{#<_cor24>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^1'/2
							(_cor23, _38875)
					    <[],_48840> when 'true' ->
						_cor24
					    ( <_1780,_13676> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor25,_cor24})
						    -| [{'function_name',{'lbc$^1',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^1'/2
				      (_cor1, _cor19)
			      -| ['list_comprehension'] )
			in  let <_cor16> =
				%% Line 9651
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor17> =
				    %% Line 9651
				    call 'erlang':'rem'
					(_cor16, 2)
				in  let <_cor18> =
					%% Line 9651
					call 'erlang':'*'
					    (_cor17, 32)
				    in  let <_cor15> =
					    %% Line 9651
					    call 'erlang':'length'
						(_cor0)
					in  let <_cor9> =
						%% Line 9652
						call 'erlang':'length'
						    (_cor0)
					    in  let <_cor8> =
						    call 'erlang':'*'
							(_cor9, 4)
						in  let <_cor7> =
							primop 'bs_init_writable'
							    (_cor8)
						    in  let <_cor14> =
							    %% Line 9652
							    ( letrec
								  'lbc$^0'/2 =
								      fun (_cor13,_cor12) ->
									  case <_cor13,_cor12> of
									    <[C|_cor11],_30693> when 'true' ->
										let <_44880> =
										    ( #{#<_cor12>('all',1,'binary',[]),
											#<C>(32,1,'integer',['signed'|['native']])}#
										      -| ['compiler_generated','single_use'] )
										in  apply 'lbc$^0'/2
											(_cor11, _44880)
									    <[],_32946> when 'true' ->
										_cor12
									    ( <_1121,_19348> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor13,_cor12})
										    -| [{'function_name',{'lbc$^0',2}}] )
									      -| ['compiler_generated'] )
									  end
							      in  apply 'lbc$^0'/2
								      (_cor0, _cor7)
							      -| ['list_comprehension'] )
							in  let <_cor3> =
								%% Line 9652
								call 'erlang':'length'
								    (_cor0)
							    in  let <_cor4> =
								    %% Line 9652
								    call 'erlang':'+'
									(1, _cor3)
								in  let <_cor5> =
									%% Line 9652
									call 'erlang':'rem'
									    (_cor4, 2)
								    in  let <_cor6> =
									    %% Line 9652
									    call 'erlang':'*'
										(_cor5, 32)
									in  let <_cor28> =
										%% Line 9650
										#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
										  #<_cor27>(32,1,'integer',['unsigned'|['native']]),
										  #<_cor26>(%% Line 9651
											    'all',8,'binary',['unsigned'|['big']]),
										  #<%% Line 9651
										    0>(_cor18,1,'integer',['unsigned'|['big']]),
										  #<_cor15>(%% Line 9651
											    32,1,'integer',['unsigned'|['native']]),
										  #<_cor14>(%% Line 9652
											    'all',8,'binary',['unsigned'|['big']]),
										  #<%% Line 9652
										    0>(_cor6,1,'integer',['unsigned'|['big']])}#
									    in  let <Port> =
										    call 'erlang':'get'
											('opengl_port')
										in  do  ( call 'erlang':'port_control'
											      (Port, %% Line 9650
												     5395, _cor28)
											  -| ['result_not_wanted'] )
											'ok'
'pointParameterf'/2 =
    %% Line 9668
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9669
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9669
				 5396, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pointParameterfv'/2 =
    %% Line 9674
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 9675
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 9676
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_77857> when 'true' ->
					let <_12298> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _12298)
				    <[],_43924> when 'true' ->
					_cor10
				    ( <_63419,_58746> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 9676
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 9676
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 9676
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 9676
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 9675
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 9676
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 9676
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 9675
							     5397, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'pointParameteri'/2 =
    %% Line 9681
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9682
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9682
				 5398, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'pointParameteriv'/2 =
    %% Line 9687
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 9688
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor6> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor12> =
		    %% Line 9689
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor11,_cor10) ->
				  case <_cor11,_cor10> of
				    <[C|_cor8],_63500> when 'true' ->
					let <_1098> =
					    ( #{#<_cor10>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor8, _1098)
				    <[],_25326> when 'true' ->
					_cor10
				    ( <_10691,_40367> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor9> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor9, _cor6)
		      -| ['list_comprehension'] )
		in  let <_cor2> =
			%% Line 9689
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 9689
			    call 'erlang':'+'
				(0, _cor2)
			in  let <_cor4> =
				%% Line 9689
				call 'erlang':'rem'
				    (_cor3, 2)
			    in  let <_cor5> =
				    %% Line 9689
				    call 'erlang':'*'
					(_cor4, 32)
				in  let <_cor14> =
					%% Line 9688
					#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor12>(%% Line 9689
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 9689
					    0>(_cor5,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 9688
							     5399, _cor14)
						  -| ['result_not_wanted'] )
						'ok'
'fogCoordf'/1 =
    %% Line 9699
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 9700
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9700
				 5400, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'fogCoordfv'/1 =
    %% Line 9704
    fun (_cor0) ->
	case _cor0 of
	  <{Coord}> when 'true' ->
	      let <_cor1> =
		  #{#<Coord>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5400, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fogCoordfv',1}}] )
	    -| ['compiler_generated'] )
	end
'fogCoordd'/1 =
    %% Line 9709
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 9710
	    #{#<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9710
				 5401, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'fogCoorddv'/1 =
    %% Line 9714
    fun (_cor0) ->
	case _cor0 of
	  <{Coord}> when 'true' ->
	      let <_cor1> =
		  #{#<Coord>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5401, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fogCoorddv',1}}] )
	    -| ['compiler_generated'] )
	end
'fogCoordPointer'/3 =
    %% Line 9740
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 9741
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9741
				       5402, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9742
	  <Type,Stride,Pointer> when 'true' ->
	      do  %% Line 9743
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor4> =
		      %% Line 9744
		      #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9744
					   5403, _cor4)
				-| ['result_not_wanted'] )
			      'ok'
	end
'secondaryColor3b'/3 =
    %% Line 9777
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9778
	    #{#<_cor2>(8,1,'integer',['signed'|['native']]),
	      #<_cor1>(8,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9778
				 5404, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3bv'/1 =
    %% Line 9782
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(8,1,'integer',['signed'|['native']]),
		    #<Green>(8,1,'integer',['signed'|['native']]),
		    #<Blue>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5404, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3bv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3d'/3 =
    %% Line 9787
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9788
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9788
				 5405, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3dv'/1 =
    %% Line 9792
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(64,1,'float',['unsigned'|['native']]),
		    #<Green>(64,1,'float',['unsigned'|['native']]),
		    #<Blue>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5405, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3f'/3 =
    %% Line 9797
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9798
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9798
				 5406, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3fv'/1 =
    %% Line 9802
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'float',['unsigned'|['native']]),
		    #<Green>(32,1,'float',['unsigned'|['native']]),
		    #<Blue>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5406, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3i'/3 =
    %% Line 9807
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9808
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9808
				 5407, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3iv'/1 =
    %% Line 9812
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'integer',['signed'|['native']]),
		    #<Green>(32,1,'integer',['signed'|['native']]),
		    #<Blue>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5407, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3s'/3 =
    %% Line 9817
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9818
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9818
				 5408, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3sv'/1 =
    %% Line 9822
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(16,1,'integer',['signed'|['native']]),
		    #<Green>(16,1,'integer',['signed'|['native']]),
		    #<Blue>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5408, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3ub'/3 =
    %% Line 9827
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9828
	    #{#<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9828
				 5409, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3ubv'/1 =
    %% Line 9832
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(8,1,'integer',['unsigned'|['native']]),
		    #<Green>(8,1,'integer',['unsigned'|['native']]),
		    #<Blue>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5409, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3ubv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3ui'/3 =
    %% Line 9837
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9838
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9838
				 5410, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3uiv'/1 =
    %% Line 9842
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(32,1,'integer',['unsigned'|['native']]),
		    #<Green>(32,1,'integer',['unsigned'|['native']]),
		    #<Blue>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5410, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3uiv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColor3us'/3 =
    %% Line 9847
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9848
	    #{#<_cor2>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(16,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(16,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9848
				 5411, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'secondaryColor3usv'/1 =
    %% Line 9852
    fun (_cor0) ->
	case _cor0 of
	  <{Red,Green,Blue}> when 'true' ->
	      let <_cor3> =
		  #{#<Red>(16,1,'integer',['unsigned'|['native']]),
		    #<Green>(16,1,'integer',['unsigned'|['native']]),
		    #<Blue>(16,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5411, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'secondaryColor3usv',1}}] )
	    -| ['compiler_generated'] )
	end
'secondaryColorPointer'/4 =
    %% Line 9880
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Size,Type,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 9881
		  #{#<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 9881
				       5412, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 9882
	  <Size,Type,Stride,Pointer> when 'true' ->
	      do  %% Line 9883
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 9884
		      #{#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 9884
					   5413, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'windowPos2d'/2 =
    %% Line 9926
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9927
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9927
				 5414, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos2dv'/1 =
    %% Line 9931
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5414, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos2dv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos2f'/2 =
    %% Line 9936
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9937
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9937
				 5415, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos2fv'/1 =
    %% Line 9941
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5415, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos2fv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos2i'/2 =
    %% Line 9946
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9947
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9947
				 5416, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos2iv'/1 =
    %% Line 9951
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5416, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos2iv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos2s'/2 =
    %% Line 9956
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9957
	    #{#<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9957
				 5417, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos2sv'/1 =
    %% Line 9961
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y}> when 'true' ->
	      let <_cor2> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5417, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos2sv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos3d'/3 =
    %% Line 9966
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9967
	    #{#<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9967
				 5418, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos3dv'/1 =
    %% Line 9971
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(64,1,'float',['unsigned'|['native']]),
		    #<Y>(64,1,'float',['unsigned'|['native']]),
		    #<Z>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5418, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos3dv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos3f'/3 =
    %% Line 9976
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9977
	    #{#<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9977
				 5419, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos3fv'/1 =
    %% Line 9981
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']]),
		    #<Z>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5419, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos3fv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos3i'/3 =
    %% Line 9986
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9987
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9987
				 5420, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos3iv'/1 =
    %% Line 9991
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']]),
		    #<Z>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5420, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos3iv',1}}] )
	    -| ['compiler_generated'] )
	end
'windowPos3s'/3 =
    %% Line 9996
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 9997
	    #{#<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 9997
				 5421, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'windowPos3sv'/1 =
    %% Line 10001
    fun (_cor0) ->
	case _cor0 of
	  <{X,Y,Z}> when 'true' ->
	      let <_cor3> =
		  #{#<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']]),
		    #<Z>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5421, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'windowPos3sv',1}}] )
	    -| ['compiler_generated'] )
	end
'genQueries'/1 =
    %% Line 10017
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10018
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10018
				 5422, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteQueries'/1 =
    %% Line 10031
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 10032
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 10033
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 10033
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_87427> when 'true' ->
						let <_18533> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _18533)
					    <[],_81741> when 'true' ->
						_cor10
					    ( <_37883,_37634> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 10033
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 10033
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 10033
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 10033
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 10032
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 10033
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 10033
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 10032
								     5423, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'isQuery'/1 =
    %% Line 10046
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10047
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10047
				 5424, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'beginQuery'/2 =
    %% Line 10113
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10114
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10114
				 5425, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'endQuery'/1 =
    %% Line 10119
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10120
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10120
				 5426, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getQueryiv'/2 =
    %% Line 10126
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10127
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10127
				 5427, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getQueryObjectiv'/2 =
    %% Line 10146
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10147
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10147
				 5428, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getQueryObjectuiv'/2 =
    %% Line 10152
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10153
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10153
				 5429, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindBuffer'/2 =
    %% Line 10235
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10236
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10236
				 5430, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteBuffers'/1 =
    %% Line 10250
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 10251
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 10252
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 10252
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_4507> when 'true' ->
						let <_82506> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _82506)
					    <[],_15474> when 'true' ->
						_cor10
					    ( <_56162,_89815> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 10252
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 10252
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 10252
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 10252
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 10251
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 10252
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 10252
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 10251
								     5431, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genBuffers'/1 =
    %% Line 10269
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10270
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10270
				 5432, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isBuffer'/1 =
    %% Line 10284
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10285
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10285
				 5433, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bufferData'/4 =
    %% Line 10322
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Target,Size,Data,Usage>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <_cor4> =
		  %% Line 10323
		  #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<0>(32,1,'integer',['unsigned'|['big']]),
		    #<_cor2>(64,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 10323
				       5434, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 10324
	  <Target,Size,Data,Usage> when 'true' ->
	      do  %% Line 10325
		  apply 'send_bin'/1
		      (_cor1)
		  let <_cor5> =
		      %% Line 10326
		      #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<_cor2>(64,1,'integer',['unsigned'|['native']]),
			#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 10326
					   5435, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'bufferSubData'/4 =
    %% Line 10338
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Target,Offset,Size,Data>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 10339
		  #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<0>(32,1,'integer',['unsigned'|['big']]),
		    #<_cor2>(64,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(64,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 10339
				       5436, _cor4)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 10340
	  <Target,Offset,Size,Data> when 'true' ->
	      do  %% Line 10341
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor5> =
		      %% Line 10342
		      #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<_cor2>(64,1,'integer',['unsigned'|['native']]),
			#<_cor1>(64,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 10342
					   5437, _cor5)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getBufferSubData'/4 =
    %% Line 10354
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 10355
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor4> =
		%% Line 10356
		#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		  #<0>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor2>(64,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(64,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 10356
				     5438, _cor4)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getBufferParameteriv'/2 =
    %% Line 10379
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10380
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10380
				 5439, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'blendEquationSeparate'/2 =
    %% Line 10421
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10422
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10422
				 5440, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'drawBuffers'/1 =
    %% Line 10461
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 10462
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 10463
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 10463
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_3947> when 'true' ->
						let <_13119> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _13119)
					    <[],_74487> when 'true' ->
						_cor10
					    ( <_21894,_10246> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 10463
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 10463
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 10463
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 10463
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 10462
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 10463
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 10463
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 10462
								     5441, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'stencilOpSeparate'/4 =
    %% Line 10523
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 10524
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10524
				 5442, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilFuncSeparate'/4 =
    %% Line 10586
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 10587
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10587
				 5443, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilMaskSeparate'/2 =
    %% Line 10604
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10605
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10605
				 5444, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'attachShader'/2 =
    %% Line 10628
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10629
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10629
				 5445, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'bindAttribLocation'/3 =
    %% Line 10665
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 10666
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 10666
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 10666
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 10666
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 10666
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 10666
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 10666
				    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 10666
							 5446, _cor9)
					      -| ['result_not_wanted'] )
					    'ok'
'compileShader'/1 =
    %% Line 10685
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10686
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10686
				 5447, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'createProgram'/0 =
    %% Line 10708
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 10709
			     5448, %% Line 10709
				   #{}#)
		  -| ['result_not_wanted'] )
		apply 'rec'/0
		    ()
'createShader'/1 =
    %% Line 10731
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10732
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10732
				 5449, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteProgram'/1 =
    %% Line 10752
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10753
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10753
				 5450, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteShader'/1 =
    %% Line 10771
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10772
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10772
				 5451, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'detachShader'/2 =
    %% Line 10786
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 10787
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10787
				 5452, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'disableVertexAttribArray'/1 =
    %% Line 10801
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10802
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10802
				 5453, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'enableVertexAttribArray'/1 =
    %% Line 10807
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 10808
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10808
				 5454, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getActiveAttrib'/3 =
    %% Line 10865
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 10866
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 10866
				 5455, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getActiveUniform'/3 =
    %% Line 11012
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11013
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11013
				 5456, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getAttachedShaders'/2 =
    %% Line 11032
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11033
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11033
				 5457, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getAttribLocation'/2 =
    %% Line 11056
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 11057
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 11057
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 11057
		    call 'erlang':'+'
			(_cor2, 5)
		in  let <_cor4> =
			%% Line 11057
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 11057
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 11057
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 11057
				    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 11057
							 5458, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getProgramiv'/2 =
    %% Line 11127
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11128
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11128
				 5459, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramInfoLog'/2 =
    %% Line 11152
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11153
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11153
				 5460, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getShaderiv'/2 =
    %% Line 11183
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11184
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11184
				 5461, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getShaderInfoLog'/2 =
    %% Line 11206
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11207
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11207
				 5462, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getShaderSource'/2 =
    %% Line 11226
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11227
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11227
				 5463, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformLocation'/2 =
    %% Line 11259
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 11260
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 11260
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 11260
		    call 'erlang':'+'
			(_cor2, 5)
		in  let <_cor4> =
			%% Line 11260
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 11260
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 11260
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 11260
				    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 11260
							 5464, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getUniformfv'/2 =
    %% Line 11285
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11286
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11286
				 5465, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformiv'/2 =
    %% Line 11291
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11292
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11292
				 5466, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getVertexAttribdv'/2 =
    %% Line 11358
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11359
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11359
				 5467, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getVertexAttribfv'/2 =
    %% Line 11364
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11365
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11365
				 5468, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getVertexAttribiv'/2 =
    %% Line 11370
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11371
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11371
				 5469, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isProgram'/1 =
    %% Line 11382
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 11383
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11383
				 5470, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isShader'/1 =
    %% Line 11394
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 11395
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11395
				 5471, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'linkProgram'/1 =
    %% Line 11514
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 11515
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11515
				 5472, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'shaderSource'/2 =
    %% Line 11532
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 11533
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Str|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[Str|[0]]|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_83805> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[Str|_cor3]> when 'true' ->
			let <_cor5> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [[Str|[0]]|_cor5]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_83805> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <StringTemp> =
		%% Line 11533
		call 'erlang':'list_to_binary'
		    (_cor6)
	    in  let <_cor14> =
		    %% Line 11534
		    call 'erlang':'length'
			(_cor0)
		in  let <_cor13> =
			%% Line 11534
			call 'erlang':'size'
			    (StringTemp)
		    in  let <_cor8> =
			    %% Line 11534
			    call 'erlang':'size'
				(StringTemp)
			in  let <_cor9> =
				%% Line 11534
				call 'erlang':'+'
				    (_cor8, 0)
			    in  let <_cor10> =
				    %% Line 11534
				    call 'erlang':'rem'
					(_cor9, 8)
				in  let <_cor11> =
					%% Line 11534
					call 'erlang':'-'
					    (8, _cor10)
				    in  let <_cor12> =
					    %% Line 11534
					    call 'erlang':'rem'
						(_cor11, 8)
					in  let <_cor15> =
						%% Line 11534
						#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<StringTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor12,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 11534
								     5473, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'useProgram'/1 =
    %% Line 11574
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 11575
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11575
				 5474, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform1f'/2 =
    %% Line 11642
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11643
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11643
				 5475, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform2f'/3 =
    %% Line 11648
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11649
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11649
				 5476, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform3f'/4 =
    %% Line 11654
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 11655
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11655
				 5477, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform4f'/5 =
    %% Line 11660
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 11661
	    #{#<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11661
				 5478, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform1i'/2 =
    %% Line 11666
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11667
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11667
				 5479, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform2i'/3 =
    %% Line 11672
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11673
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11673
				 5480, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform3i'/4 =
    %% Line 11678
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 11679
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11679
				 5481, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform4i'/5 =
    %% Line 11684
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 11685
	    #{#<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11685
				 5482, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform1fv'/2 =
    %% Line 11690
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 11691
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 11692
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 11692
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_75466> when 'true' ->
						let <_82365> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _82365)
					    <[],_64030> when 'true' ->
						_cor10
					    ( <_56633,_52234> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor2> =
				%% Line 11692
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor3> =
				    %% Line 11692
				    call 'erlang':'rem'
					(_cor2, 2)
				in  let <_cor4> =
					%% Line 11692
					call 'erlang':'*'
					    (_cor3, 32)
				    in  let <_cor14> =
					    %% Line 11691
					    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
					      #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor12>(%% Line 11692
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 11692
						0>(_cor4,1,'integer',['unsigned'|['big']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 11691
								 5483, _cor14)
						      -| ['result_not_wanted'] )
						    'ok'
'uniform2fv'/2 =
    %% Line 11697
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11698
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11699
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2}|_cor4],_83835> when 'true' ->
					let <_69346> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _69346)
				    ( <[_cor3|_cor4],_19922> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_41402> when 'true' ->
					_cor5
				    ( <_6232,_8394> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11698
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11699
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11698
					     5484, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform3fv'/2 =
    %% Line 11704
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11705
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11706
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3}|_cor4],_57907> when 'true' ->
					let <_91175> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _91175)
				    ( <[_cor3|_cor4],_34791> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_33477> when 'true' ->
					_cor5
				    ( <_81826,_87167> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11705
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11706
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11705
					     5485, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform4fv'/2 =
    %% Line 11711
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11712
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11713
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_45950> when 'true' ->
					let <_44850> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _44850)
				    ( <[_cor3|_cor4],_30422> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_6821> when 'true' ->
					_cor5
				    ( <_14526,_30262> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11712
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11713
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11712
					     5486, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform1iv'/2 =
    %% Line 11718
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 11719
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 11720
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 11720
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_63712> when 'true' ->
						let <_70927> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _70927)
					    <[],_74748> when 'true' ->
						_cor10
					    ( <_24100,_38152> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor2> =
				%% Line 11720
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor3> =
				    %% Line 11720
				    call 'erlang':'rem'
					(_cor2, 2)
				in  let <_cor4> =
					%% Line 11720
					call 'erlang':'*'
					    (_cor3, 32)
				    in  let <_cor14> =
					    %% Line 11719
					    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
					      #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor12>(%% Line 11720
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 11720
						0>(_cor4,1,'integer',['unsigned'|['big']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 11719
								 5487, _cor14)
						      -| ['result_not_wanted'] )
						    'ok'
'uniform2iv'/2 =
    %% Line 11725
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11726
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11727
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2}|_cor4],_12996> when 'true' ->
					let <_87753> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _87753)
				    ( <[_cor3|_cor4],_85013> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_60531> when 'true' ->
					_cor5
				    ( <_14205,_81724> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11726
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11727
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11726
					     5488, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform3iv'/2 =
    %% Line 11732
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11733
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11734
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3}|_cor4],_40379> when 'true' ->
					let <_70591> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']]),
						#<V3>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _70591)
				    ( <[_cor3|_cor4],_43850> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_69128> when 'true' ->
					_cor5
				    ( <_38469,_12417> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11733
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11734
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11733
					     5489, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform4iv'/2 =
    %% Line 11739
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 11740
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 11741
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_43060> when 'true' ->
					let <_52477> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']]),
						#<V3>(32,1,'integer',['signed'|['native']]),
						#<V4>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _52477)
				    ( <[_cor3|_cor4],_85369> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_62641> when 'true' ->
					_cor5
				    ( <_29865,_74988> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 11740
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 11741
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11740
					     5490, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix2fv'/3 =
    %% Line 11746
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 11747
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 11748
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_23615> when 'true' ->
					let <_47399> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _47399)
				    ( <[_cor4|_cor5],_48124> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_14819> when 'true' ->
					_cor6
				    ( <_84829,_28099> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 11747
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 11748
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11747
					     5491, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3fv'/3 =
    %% Line 11753
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 11754
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 11755
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9}|_cor5],_31362> when 'true' ->
					let <_55623> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _55623)
				    ( <[_cor4|_cor5],_54272> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_6982> when 'true' ->
					_cor6
				    ( <_80808,_21967> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 11754
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 11755
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11754
					     5492, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4fv'/3 =
    %% Line 11760
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 11761
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 11762
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}|_cor5],_19660> when 'true' ->
					let <_74788> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']]),
						#<V13>(32,1,'float',['unsigned'|['native']]),
						#<V14>(32,1,'float',['unsigned'|['native']]),
						#<V15>(32,1,'float',['unsigned'|['native']]),
						#<V16>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _74788)
				    ( <[_cor4|_cor5],_4938> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_37493> when 'true' ->
					_cor6
				    ( <_9759,_58208> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 11761
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 11762
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 11761
					     5493, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'validateProgram'/1 =
    %% Line 11788
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 11789
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11789
				 5494, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib1d'/2 =
    %% Line 11863
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11864
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11864
				 5495, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib1dv'/2 =
    %% Line 11868
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      apply 'vertexAttrib1d'/2
		  (_cor1, X)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib1dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib1f'/2 =
    %% Line 11873
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11874
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11874
				 5496, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib1fv'/2 =
    %% Line 11878
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5496, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib1fv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib1s'/2 =
    %% Line 11883
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 11884
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11884
				 5497, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib1sv'/2 =
    %% Line 11888
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5497, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib1sv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib2d'/3 =
    %% Line 11893
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11894
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11894
				 5498, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib2dv'/2 =
    %% Line 11898
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      apply 'vertexAttrib2d'/3
		  (_cor1, X, Y)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib2dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib2f'/3 =
    %% Line 11903
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11904
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11904
				 5499, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib2fv'/2 =
    %% Line 11908
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'float',['unsigned'|['native']]),
		    #<Y>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5499, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib2fv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib2s'/3 =
    %% Line 11913
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 11914
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11914
				 5500, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib2sv'/2 =
    %% Line 11918
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(16,1,'integer',['signed'|['native']]),
		    #<Y>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5500, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib2sv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib3d'/4 =
    %% Line 11923
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 11924
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11924
				 5501, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib3dv'/2 =
    %% Line 11928
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttrib3d'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib3dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib3f'/4 =
    %% Line 11933
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 11934
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11934
				 5502, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib3fv'/2 =
    %% Line 11938
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttrib3f'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib3fv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib3s'/4 =
    %% Line 11943
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 11944
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11944
				 5503, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib3sv'/2 =
    %% Line 11948
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttrib3s'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib3sv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Nbv'/2 =
    %% Line 11953
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11954
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(8,1,'integer',['signed'|['native']]),
		    #<V2>(8,1,'integer',['signed'|['native']]),
		    #<V3>(8,1,'integer',['signed'|['native']]),
		    #<V4>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11954
				       5504, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Nbv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Niv'/2 =
    %% Line 11959
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11960
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'integer',['signed'|['native']]),
		    #<V2>(32,1,'integer',['signed'|['native']]),
		    #<V3>(32,1,'integer',['signed'|['native']]),
		    #<V4>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11960
				       5505, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Niv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Nsv'/2 =
    %% Line 11965
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11966
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(16,1,'integer',['signed'|['native']]),
		    #<V2>(16,1,'integer',['signed'|['native']]),
		    #<V3>(16,1,'integer',['signed'|['native']]),
		    #<V4>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11966
				       5506, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Nsv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Nub'/5 =
    %% Line 11971
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 11972
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 11972
				 5507, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib4Nubv'/2 =
    %% Line 11976
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttrib4Nub'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Nubv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Nuiv'/2 =
    %% Line 11981
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11982
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'integer',['unsigned'|['native']]),
		    #<V2>(32,1,'integer',['unsigned'|['native']]),
		    #<V3>(32,1,'integer',['unsigned'|['native']]),
		    #<V4>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11982
				       5508, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Nuiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4Nusv'/2 =
    %% Line 11987
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11988
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(16,1,'integer',['unsigned'|['native']]),
		    #<V2>(16,1,'integer',['unsigned'|['native']]),
		    #<V3>(16,1,'integer',['unsigned'|['native']]),
		    #<V4>(16,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11988
				       5509, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4Nusv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4bv'/2 =
    %% Line 11993
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 11994
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(8,1,'integer',['signed'|['native']]),
		    #<V2>(8,1,'integer',['signed'|['native']]),
		    #<V3>(8,1,'integer',['signed'|['native']]),
		    #<V4>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 11994
				       5510, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4bv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4d'/5 =
    %% Line 11999
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12000
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12000
				 5511, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib4dv'/2 =
    %% Line 12004
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttrib4d'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4f'/5 =
    %% Line 12009
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12010
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12010
				 5512, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib4fv'/2 =
    %% Line 12014
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttrib4f'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4fv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4iv'/2 =
    %% Line 12019
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12020
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'integer',['signed'|['native']]),
		    #<V2>(32,1,'integer',['signed'|['native']]),
		    #<V3>(32,1,'integer',['signed'|['native']]),
		    #<V4>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12020
				       5513, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4iv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4s'/5 =
    %% Line 12025
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12026
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(16,1,'integer',['signed'|['native']]),
	      #<_cor2>(16,1,'integer',['signed'|['native']]),
	      #<_cor1>(16,1,'integer',['signed'|['native']]),
	      #<_cor0>(16,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12026
				 5514, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttrib4sv'/2 =
    %% Line 12030
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttrib4s'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4sv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4ubv'/2 =
    %% Line 12035
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12036
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(8,1,'integer',['unsigned'|['native']]),
		    #<V2>(8,1,'integer',['unsigned'|['native']]),
		    #<V3>(8,1,'integer',['unsigned'|['native']]),
		    #<V4>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12036
				       5515, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4ubv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4uiv'/2 =
    %% Line 12041
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12042
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'integer',['unsigned'|['native']]),
		    #<V2>(32,1,'integer',['unsigned'|['native']]),
		    #<V3>(32,1,'integer',['unsigned'|['native']]),
		    #<V4>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12042
				       5516, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4uiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttrib4usv'/2 =
    %% Line 12047
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12048
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(16,1,'integer',['unsigned'|['native']]),
		    #<V2>(16,1,'integer',['unsigned'|['native']]),
		    #<V3>(16,1,'integer',['unsigned'|['native']]),
		    #<V4>(16,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12048
				       5517, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttrib4usv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribPointer'/6 =
    %% Line 12091
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Index,Size,Type,Normalized,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 12092
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(8,1,'integer',['unsigned'|['native']]),
		    #<0>(24,1,'integer',['unsigned'|['big']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12092
				       5518, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12093
	  <Index,Size,Type,Normalized,Stride,Pointer> when 'true' ->
	      do  %% Line 12094
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor7> =
		      %% Line 12095
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor2>(8,1,'integer',['unsigned'|['native']]),
			#<0>(24,1,'integer',['unsigned'|['big']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 12095
					   5519, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'uniformMatrix2x3fv'/3 =
    %% Line 12100
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12101
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12102
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor5],_85253> when 'true' ->
					let <_86423> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _86423)
				    ( <[_cor4|_cor5],_39518> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_90920> when 'true' ->
					_cor6
				    ( <_35254,_9068> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12101
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12102
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12101
					     5520, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3x2fv'/3 =
    %% Line 12107
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12108
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12109
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor5],_1444> when 'true' ->
					let <_30608> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _30608)
				    ( <[_cor4|_cor5],_62829> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_27751> when 'true' ->
					_cor6
				    ( <_80874,_86382> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12108
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12109
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12108
					     5521, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix2x4fv'/3 =
    %% Line 12114
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12115
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12116
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor5],_91795> when 'true' ->
					let <_48603> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _48603)
				    ( <[_cor4|_cor5],_19884> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_14656> when 'true' ->
					_cor6
				    ( <_61768,_55772> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12115
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12116
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12115
					     5522, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4x2fv'/3 =
    %% Line 12121
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12122
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12123
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor5],_70927> when 'true' ->
					let <_69754> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _69754)
				    ( <[_cor4|_cor5],_30038> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_41108> when 'true' ->
					_cor6
				    ( <_28242,_68083> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12122
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12123
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12122
					     5523, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3x4fv'/3 =
    %% Line 12128
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12129
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12130
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor5],_16469> when 'true' ->
					let <_45745> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _45745)
				    ( <[_cor4|_cor5],_28947> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_32629> when 'true' ->
					_cor6
				    ( <_12022,_43758> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12129
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12130
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12129
					     5524, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4x3fv'/3 =
    %% Line 12135
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 12136
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 12137
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor5],_84672> when 'true' ->
					let <_58691> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _58691)
				    ( <[_cor4|_cor5],_82016> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_48535> when 'true' ->
					_cor6
				    ( <_91206,_20612> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 12136
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 12137
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12136
					     5525, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'colorMaski'/5 =
    %% Line 12143
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12144
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(8,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12144
				 5526, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'getBooleani_v'/2 =
    %% Line 12149
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12150
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12150
				 5527, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getIntegeri_v'/2 =
    %% Line 12155
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12156
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12156
				 5528, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'enablei'/2 =
    %% Line 12161
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12162
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12162
				 5529, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'disablei'/2 =
    %% Line 12168
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12169
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12169
				 5530, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'isEnabledi'/2 =
    %% Line 12175
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12176
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12176
				 5531, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'beginTransformFeedback'/1 =
    %% Line 12203
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 12204
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12204
				 5532, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'endTransformFeedback'/0 =
    %% Line 12209
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 12210
			     5533, %% Line 12210
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'bindBufferRange'/5 =
    %% Line 12228
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12229
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12229
				 5534, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'bindBufferBase'/3 =
    %% Line 12243
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12244
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12244
				 5535, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'transformFeedbackVaryings'/3 =
    %% Line 12281
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 12282
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[Str|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [[Str|[0]]|_cor6]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_51792> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor1 of
		    <[Str|_cor4]> when 'true' ->
			let <_cor6> =
			    apply 'lc$^0'/1
				(_cor4)
			in  ( [[Str|[0]]|_cor6]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_51792> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <VaryingsTemp> =
		%% Line 12282
		call 'erlang':'list_to_binary'
		    (_cor7)
	    in  let <_cor15> =
		    %% Line 12283
		    call 'erlang':'length'
			(_cor1)
		in  let <_cor14> =
			%% Line 12283
			call 'erlang':'size'
			    (VaryingsTemp)
		    in  let <_cor9> =
			    %% Line 12283
			    call 'erlang':'size'
				(VaryingsTemp)
			in  let <_cor10> =
				%% Line 12283
				call 'erlang':'+'
				    (_cor9, 0)
			    in  let <_cor11> =
				    %% Line 12283
				    call 'erlang':'rem'
					(_cor10, 8)
				in  let <_cor12> =
					%% Line 12283
					call 'erlang':'-'
					    (8, _cor11)
				    in  let <_cor13> =
					    %% Line 12283
					    call 'erlang':'rem'
						(_cor12, 8)
					in  let <_cor16> =
						%% Line 12283
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<VaryingsTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor13,1,'integer',['unsigned'|['big']]),
						  #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 12283
								     5536, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'getTransformFeedbackVarying'/3 =
    %% Line 12315
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12316
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12316
				 5537, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'clampColor'/2 =
    %% Line 12330
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12331
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12331
				 5538, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'beginConditionalRender'/2 =
    %% Line 12362
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12363
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12363
				 5539, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'endConditionalRender'/0 =
    %% Line 12368
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 12369
			     5540, %% Line 12369
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'vertexAttribIPointer'/5 =
    %% Line 12375
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Index,Size,Type,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 12376
		  #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12376
				       5541, _cor5)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12377
	  <Index,Size,Type,Stride,Pointer> when 'true' ->
	      do  %% Line 12378
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor6> =
		      %% Line 12379
		      #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 12379
					   5542, _cor6)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getVertexAttribIiv'/2 =
    %% Line 12384
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12385
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12385
				 5543, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getVertexAttribIuiv'/2 =
    %% Line 12391
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12392
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12392
				 5544, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'vertexAttribI1i'/2 =
    %% Line 12397
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12398
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12398
				 5545, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI2i'/3 =
    %% Line 12403
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12404
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12404
				 5546, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI3i'/4 =
    %% Line 12409
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12410
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12410
				 5547, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI4i'/5 =
    %% Line 12415
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12416
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12416
				 5548, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI1ui'/2 =
    %% Line 12421
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12422
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12422
				 5549, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI2ui'/3 =
    %% Line 12427
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12428
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12428
				 5550, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI3ui'/4 =
    %% Line 12433
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12434
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12434
				 5551, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI4ui'/5 =
    %% Line 12439
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12440
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12440
				 5552, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribI1iv'/2 =
    %% Line 12444
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5545, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI1iv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI2iv'/2 =
    %% Line 12448
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'integer',['signed'|['native']]),
		    #<Y>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5546, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI2iv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI3iv'/2 =
    %% Line 12452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttribI3i'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI3iv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4iv'/2 =
    %% Line 12456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttribI4i'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4iv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI1uiv'/2 =
    %% Line 12460
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      let <_cor2> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5549, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI1uiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI2uiv'/2 =
    %% Line 12464
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      let <_cor3> =
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<X>(32,1,'integer',['unsigned'|['native']]),
		    #<Y>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, 5550, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI2uiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI3uiv'/2 =
    %% Line 12468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttribI3ui'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI3uiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4uiv'/2 =
    %% Line 12472
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttribI4ui'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4uiv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4bv'/2 =
    %% Line 12477
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12478
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(8,1,'integer',['signed'|['native']]),
		    #<V2>(8,1,'integer',['signed'|['native']]),
		    #<V3>(8,1,'integer',['signed'|['native']]),
		    #<V4>(8,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12478
				       5553, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4bv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4sv'/2 =
    %% Line 12483
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12484
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(16,1,'integer',['signed'|['native']]),
		    #<V2>(16,1,'integer',['signed'|['native']]),
		    #<V3>(16,1,'integer',['signed'|['native']]),
		    #<V4>(16,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12484
				       5554, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4sv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4ubv'/2 =
    %% Line 12489
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12490
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(8,1,'integer',['unsigned'|['native']]),
		    #<V2>(8,1,'integer',['unsigned'|['native']]),
		    #<V3>(8,1,'integer',['unsigned'|['native']]),
		    #<V4>(8,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12490
				       5555, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4ubv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribI4usv'/2 =
    %% Line 12495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 12496
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(16,1,'integer',['unsigned'|['native']]),
		    #<V2>(16,1,'integer',['unsigned'|['native']]),
		    #<V3>(16,1,'integer',['unsigned'|['native']]),
		    #<V4>(16,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12496
				       5556, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribI4usv',2}}] )
	    -| ['compiler_generated'] )
	end
'getUniformuiv'/2 =
    %% Line 12501
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12502
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12502
				 5557, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindFragDataLocation'/3 =
    %% Line 12528
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 12529
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 12529
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 12529
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 12529
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 12529
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 12529
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 12529
				    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 12529
							 5558, _cor9)
					      -| ['result_not_wanted'] )
					    'ok'
'getFragDataLocation'/2 =
    %% Line 12541
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 12542
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 12542
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 12542
		    call 'erlang':'+'
			(_cor2, 5)
		in  let <_cor4> =
			%% Line 12542
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 12542
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 12542
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 12542
				    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 12542
							 5559, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'uniform1ui'/2 =
    %% Line 12547
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12548
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12548
				 5560, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform2ui'/3 =
    %% Line 12553
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12554
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12554
				 5561, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform3ui'/4 =
    %% Line 12559
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12560
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12560
				 5562, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform4ui'/5 =
    %% Line 12565
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12566
	    #{#<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12566
				 5563, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform1uiv'/2 =
    %% Line 12571
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 12572
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 12573
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 12573
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_79303> when 'true' ->
						let <_74775> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _74775)
					    <[],_46093> when 'true' ->
						_cor10
					    ( <_53767,_55620> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor2> =
				%% Line 12573
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor3> =
				    %% Line 12573
				    call 'erlang':'rem'
					(_cor2, 2)
				in  let <_cor4> =
					%% Line 12573
					call 'erlang':'*'
					    (_cor3, 32)
				    in  let <_cor14> =
					    %% Line 12572
					    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
					      #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor12>(%% Line 12573
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 12573
						0>(_cor4,1,'integer',['unsigned'|['big']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 12572
								 5564, _cor14)
						      -| ['result_not_wanted'] )
						    'ok'
'uniform2uiv'/2 =
    %% Line 12578
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 12579
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 12580
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2}|_cor4],_10267> when 'true' ->
					let <_67344> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _67344)
				    ( <[_cor3|_cor4],_54330> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_88224> when 'true' ->
					_cor5
				    ( <_57214,_77713> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 12579
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 12580
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12579
					     5565, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform3uiv'/2 =
    %% Line 12585
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 12586
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 12587
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3}|_cor4],_19724> when 'true' ->
					let <_92685> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']]),
						#<V3>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _92685)
				    ( <[_cor3|_cor4],_4381> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_33613> when 'true' ->
					_cor5
				    ( <_87662,_33690> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 12586
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 12587
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12586
					     5566, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform4uiv'/2 =
    %% Line 12592
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 12593
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 12594
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_407> when 'true' ->
					let <_62292> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']]),
						#<V3>(32,1,'integer',['unsigned'|['native']]),
						#<V4>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _62292)
				    ( <[_cor3|_cor4],_10044> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_8032> when 'true' ->
					_cor5
				    ( <_4612,_69165> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 12593
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 12594
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 12593
					     5567, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'texParameterIiv'/3 =
    %% Line 12599
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 12600
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 12601
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_49036> when 'true' ->
					let <_78163> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _78163)
				    <[],_10216> when 'true' ->
					_cor11
				    ( <_52124,_89643> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 12601
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 12601
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 12601
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 12601
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 12600
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 12601
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 12601
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 12600
							     5568, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'texParameterIuiv'/3 =
    %% Line 12607
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 12608
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 12609
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_71117> when 'true' ->
					let <_1487> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _1487)
				    <[],_58444> when 'true' ->
					_cor11
				    ( <_19442,_2916> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 12609
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 12609
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 12609
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 12609
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 12608
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 12609
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 12609
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 12608
							     5569, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'getTexParameterIiv'/2 =
    %% Line 12614
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12615
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12615
				 5570, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getTexParameterIuiv'/2 =
    %% Line 12621
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12622
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12622
				 5571, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'clearBufferiv'/3 =
    %% Line 12654
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 12655
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 12656
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_45319> when 'true' ->
					let <_76228> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _76228)
				    <[],_54200> when 'true' ->
					_cor11
				    ( <_19805,_12702> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 12656
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 12656
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 12656
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 12656
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 12655
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['signed'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 12656
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 12656
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 12655
							     5572, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'clearBufferuiv'/3 =
    %% Line 12661
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 12662
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 12663
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_3888> when 'true' ->
					let <_63707> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _63707)
				    <[],_76923> when 'true' ->
					_cor11
				    ( <_51570,_66934> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 12663
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 12663
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 12663
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 12663
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 12662
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['signed'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 12663
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 12663
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 12662
							     5573, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'clearBufferfv'/3 =
    %% Line 12668
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 12669
	    call 'erlang':'size'
		(_cor0)
	in  let <_cor7> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor13> =
		    %% Line 12670
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor12,_cor11) ->
				  case <_cor12,_cor11> of
				    <[C|_cor9],_27921> when 'true' ->
					let <_52522> =
					    ( #{#<_cor11>('all',1,'binary',[]),
						#<C>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor9, _52522)
				    <[],_47082> when 'true' ->
					_cor11
				    ( <_85790,_12774> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12,_cor11})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'erlang':'tuple_to_list'
				  (_cor0)
			  in  apply 'lbc$^0'/2
				  (_cor10, _cor7)
		      -| ['list_comprehension'] )
		in  let <_cor3> =
			%% Line 12670
			call 'erlang':'size'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 12670
			    call 'erlang':'+'
				(1, _cor3)
			in  let <_cor5> =
				%% Line 12670
				call 'erlang':'rem'
				    (_cor4, 2)
			    in  let <_cor6> =
				    %% Line 12670
				    call 'erlang':'*'
					(_cor5, 32)
				in  let <_cor15> =
					%% Line 12669
					#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor1>(32,1,'integer',['signed'|['native']]),
					  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					  #<_cor13>(%% Line 12670
						    'all',8,'binary',['unsigned'|['big']]),
					  #<%% Line 12670
					    0>(_cor6,1,'integer',['unsigned'|['big']])}#
				    in  let <Port> =
					    call 'erlang':'get'
						('opengl_port')
					in  do  ( call 'erlang':'port_control'
						      (Port, %% Line 12669
							     5574, _cor15)
						  -| ['result_not_wanted'] )
						'ok'
'clearBufferfi'/4 =
    %% Line 12676
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12677
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12677
				 5575, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'getStringi'/2 =
    %% Line 12682
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12683
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12683
				 5576, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'drawArraysInstanced'/4 =
    %% Line 12689
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12690
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12690
				 5577, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'drawElementsInstanced'/5 =
    %% Line 12696
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices,Primcount>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <_cor5> =
		  %% Line 12697
		  #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12697
				       5578, _cor5)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12698
	  <Mode,Count,Type,Indices,Primcount> when 'true' ->
	      do  %% Line 12699
		  apply 'send_bin'/1
		      (_cor1)
		  let <_cor6> =
		      %% Line 12700
		      #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor0>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 12700
					   5579, _cor6)
				-| ['result_not_wanted'] )
			      'ok'
	end
'texBuffer'/3 =
    %% Line 12767
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12768
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12768
				 5580, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'primitiveRestartIndex'/1 =
    %% Line 12789
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 12790
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12790
				 5581, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getInteger64i_v'/2 =
    %% Line 12795
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12796
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12796
				 5582, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getBufferParameteri64v'/2 =
    %% Line 12802
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12803
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12803
				 5583, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'framebufferTexture'/4 =
    %% Line 12859
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 12860
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12860
				 5584, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribDivisor'/2 =
    %% Line 12875
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12876
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12876
				 5585, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'minSampleShading'/1 =
    %% Line 12896
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 12897
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12897
				 5586, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'blendEquationi'/2 =
    %% Line 12902
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 12903
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12903
				 5587, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'blendEquationSeparatei'/3 =
    %% Line 12908
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12909
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12909
				 5588, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'blendFunci'/3 =
    %% Line 12915
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 12916
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12916
				 5589, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'blendFuncSeparatei'/5 =
    %% Line 12921
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12922
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 12922
				 5590, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'loadTransposeMatrixfARB'/1 =
    %% Line 12928
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 12929
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12929
				       5591, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12930
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 12931
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12931
				       5591, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadTransposeMatrixfARB',1}}] )
	    -| ['compiler_generated'] )
	end
'loadTransposeMatrixdARB'/1 =
    %% Line 12937
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 12938
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12938
				       5592, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12939
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 12940
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12940
				       5592, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'loadTransposeMatrixdARB',1}}] )
	    -| ['compiler_generated'] )
	end
'multTransposeMatrixfARB'/1 =
    %% Line 12946
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 12947
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<M13>(32,1,'float',['unsigned'|['native']]),
		    #<M14>(32,1,'float',['unsigned'|['native']]),
		    #<M15>(32,1,'float',['unsigned'|['native']]),
		    #<M16>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12947
				       5593, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12948
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 12949
		  #{#<M1>(32,1,'float',['unsigned'|['native']]),
		    #<M2>(32,1,'float',['unsigned'|['native']]),
		    #<M3>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M4>(32,1,'float',['unsigned'|['native']]),
		    #<M5>(32,1,'float',['unsigned'|['native']]),
		    #<M6>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M7>(32,1,'float',['unsigned'|['native']]),
		    #<M8>(32,1,'float',['unsigned'|['native']]),
		    #<M9>(32,1,'float',['unsigned'|['native']]),
		    #<0>(32,1,'float',['unsigned'|['native']]),
		    #<M10>(32,1,'float',['unsigned'|['native']]),
		    #<M11>(32,1,'float',['unsigned'|['native']]),
		    #<M12>(32,1,'float',['unsigned'|['native']]),
		    #<1>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12949
				       5593, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multTransposeMatrixfARB',1}}] )
	    -| ['compiler_generated'] )
	end
'multTransposeMatrixdARB'/1 =
    %% Line 12955
    fun (_cor0) ->
	case _cor0 of
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}> when 'true' ->
	      let <_cor1> =
		  %% Line 12956
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<M13>(64,1,'float',['unsigned'|['native']]),
		    #<M14>(64,1,'float',['unsigned'|['native']]),
		    #<M15>(64,1,'float',['unsigned'|['native']]),
		    #<M16>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12956
				       5594, _cor1)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 12957
	  <{M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}> when 'true' ->
	      let <_cor2> =
		  %% Line 12958
		  #{#<M1>(64,1,'float',['unsigned'|['native']]),
		    #<M2>(64,1,'float',['unsigned'|['native']]),
		    #<M3>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M4>(64,1,'float',['unsigned'|['native']]),
		    #<M5>(64,1,'float',['unsigned'|['native']]),
		    #<M6>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M7>(64,1,'float',['unsigned'|['native']]),
		    #<M8>(64,1,'float',['unsigned'|['native']]),
		    #<M9>(64,1,'float',['unsigned'|['native']]),
		    #<0>(64,1,'float',['unsigned'|['native']]),
		    #<M10>(64,1,'float',['unsigned'|['native']]),
		    #<M11>(64,1,'float',['unsigned'|['native']]),
		    #<M12>(64,1,'float',['unsigned'|['native']]),
		    #<1>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 12958
				       5594, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'multTransposeMatrixdARB',1}}] )
	    -| ['compiler_generated'] )
	end
'weightbvARB'/1 =
    %% Line 12964
    fun (_cor0) ->
	let <_cor14> =
	    %% Line 12965
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor8> =
		%% Line 12966
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    primop 'bs_init_writable'
			(_cor8)
		in  let <_cor13> =
			%% Line 12966
			( letrec
			      'lbc$^0'/2 =
				  fun (_cor12,_cor11) ->
				      case <_cor12,_cor11> of
					<[C|_cor10],_45048> when 'true' ->
					    let <_20700> =
						( #{#<_cor11>('all',1,'binary',[]),
						    #<C>(8,1,'integer',['signed'|['native']])}#
						  -| ['compiler_generated','single_use'] )
					    in  apply 'lbc$^0'/2
						    (_cor10, _20700)
					<[],_81746> when 'true' ->
					    _cor11
					( <_60133,_68700> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor12,_cor11})
						-| [{'function_name',{'lbc$^0',2}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lbc$^0'/2
				  (_cor0, _cor6)
			  -| ['list_comprehension'] )
		    in  let <_cor1> =
			    %% Line 12966
			    call 'erlang':'length'
				(_cor0)
			in  let <_cor2> =
				%% Line 12966
				call 'erlang':'+'
				    (_cor1, 4)
			    in  let <_cor3> =
				    %% Line 12966
				    call 'erlang':'rem'
					(_cor2, 8)
				in  let <_cor4> =
					%% Line 12966
					call 'erlang':'-'
					    (8, _cor3)
				    in  let <_cor5> =
					    %% Line 12966
					    call 'erlang':'rem'
						(_cor4, 8)
					in  let <_cor15> =
						%% Line 12965
						#{#<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(%% Line 12966
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 12966
						    0>(_cor5,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 12965
								     5595, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'weightsvARB'/1 =
    %% Line 12972
    fun (_cor0) ->
	let <_cor15> =
	    %% Line 12973
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 12974
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 2)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 12974
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_8088> when 'true' ->
						let <_47169> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(16,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _47169)
					    <[],_61008> when 'true' ->
						_cor12
					    ( <_66038,_46172> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 12974
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 12974
				    call 'erlang':'*'
					(_cor1, 2)
				in  let <_cor3> =
					%% Line 12974
					call 'erlang':'+'
					    (_cor2, 4)
				    in  let <_cor4> =
					    %% Line 12974
					    call 'erlang':'rem'
						(_cor3, 8)
					in  let <_cor5> =
						%% Line 12974
						call 'erlang':'-'
						    (8, _cor4)
					    in  let <_cor6> =
						    %% Line 12974
						    call 'erlang':'rem'
							(_cor5, 8)
						in  let <_cor16> =
							%% Line 12973
							#{#<_cor15>(32,1,'integer',['unsigned'|['native']]),
							  #<_cor14>(%% Line 12974
								    'all',8,'binary',['unsigned'|['big']]),
							  #<%% Line 12974
							    0>(_cor6,1,'integer',['unsigned'|['big']])}#
						    in  let <Port> =
							    call 'erlang':'get'
								('opengl_port')
							in  do  ( call 'erlang':'port_control'
								      (Port, %% Line 12973
									     5596, _cor16)
								  -| ['result_not_wanted'] )
								'ok'
'weightivARB'/1 =
    %% Line 12980
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 12981
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 12982
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 12982
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_3311> when 'true' ->
						let <_50295> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _50295)
					    <[],_10934> when 'true' ->
						_cor10
					    ( <_90332,_8411> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 12982
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 12982
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 12982
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 12982
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 12981
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 12982
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 12982
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 12981
								     5597, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'weightfvARB'/1 =
    %% Line 12988
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 12989
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 12990
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 12990
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_65451> when 'true' ->
						let <_7422> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _7422)
					    <[],_50986> when 'true' ->
						_cor10
					    ( <_40756,_60925> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 12990
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 12990
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 12990
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 12990
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 12989
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 12990
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 12990
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 12989
								     5598, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'weightdvARB'/1 =
    %% Line 12996
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 12997
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		%% Line 12998
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor2> =
		    call 'erlang':'*'
			(_cor3, 8)
		in  let <_cor1> =
			primop 'bs_init_writable'
			    (_cor2)
		    in  let <_cor8> =
			    %% Line 12998
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor7,_cor6) ->
					  case <_cor7,_cor6> of
					    <[C|_cor5],_81830> when 'true' ->
						let <_73622> =
						    ( #{#<_cor6>('all',1,'binary',[]),
							#<C>(64,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor5, _73622)
					    <[],_37212> when 'true' ->
						_cor6
					    ( <_86443,_41649> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7,_cor6})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor1)
			      -| ['list_comprehension'] )
			in  let <_cor10> =
				%% Line 12997
				#{#<_cor9>(32,1,'integer',['unsigned'|['native']]),
				  #<0>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor8>(%% Line 12998
					   'all',8,'binary',['unsigned'|['big']])}#
			    in  let <Port> =
				    call 'erlang':'get'
					('opengl_port')
				in  do  ( call 'erlang':'port_control'
					      (Port, %% Line 12997
						     5599, _cor10)
					  -| ['result_not_wanted'] )
					'ok'
'weightubvARB'/1 =
    %% Line 13004
    fun (_cor0) ->
	let <_cor14> =
	    %% Line 13005
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor8> =
		%% Line 13006
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    primop 'bs_init_writable'
			(_cor8)
		in  let <_cor13> =
			%% Line 13006
			( letrec
			      'lbc$^0'/2 =
				  fun (_cor12,_cor11) ->
				      case <_cor12,_cor11> of
					<[C|_cor10],_82557> when 'true' ->
					    let <_57228> =
						( #{#<_cor11>('all',1,'binary',[]),
						    #<C>(8,1,'integer',['unsigned'|['native']])}#
						  -| ['compiler_generated','single_use'] )
					    in  apply 'lbc$^0'/2
						    (_cor10, _57228)
					<[],_25920> when 'true' ->
					    _cor11
					( <_67389,_9858> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor12,_cor11})
						-| [{'function_name',{'lbc$^0',2}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lbc$^0'/2
				  (_cor0, _cor6)
			  -| ['list_comprehension'] )
		    in  let <_cor1> =
			    %% Line 13006
			    call 'erlang':'length'
				(_cor0)
			in  let <_cor2> =
				%% Line 13006
				call 'erlang':'+'
				    (_cor1, 4)
			    in  let <_cor3> =
				    %% Line 13006
				    call 'erlang':'rem'
					(_cor2, 8)
				in  let <_cor4> =
					%% Line 13006
					call 'erlang':'-'
					    (8, _cor3)
				    in  let <_cor5> =
					    %% Line 13006
					    call 'erlang':'rem'
						(_cor4, 8)
					in  let <_cor15> =
						%% Line 13005
						#{#<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(%% Line 13006
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13006
						    0>(_cor5,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13005
								     5600, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'weightusvARB'/1 =
    %% Line 13012
    fun (_cor0) ->
	let <_cor15> =
	    %% Line 13013
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 13014
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 2)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 13014
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_30015> when 'true' ->
						let <_63306> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(16,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _63306)
					    <[],_17745> when 'true' ->
						_cor12
					    ( <_66772,_32937> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13014
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13014
				    call 'erlang':'*'
					(_cor1, 2)
				in  let <_cor3> =
					%% Line 13014
					call 'erlang':'+'
					    (_cor2, 4)
				    in  let <_cor4> =
					    %% Line 13014
					    call 'erlang':'rem'
						(_cor3, 8)
					in  let <_cor5> =
						%% Line 13014
						call 'erlang':'-'
						    (8, _cor4)
					    in  let <_cor6> =
						    %% Line 13014
						    call 'erlang':'rem'
							(_cor5, 8)
						in  let <_cor16> =
							%% Line 13013
							#{#<_cor15>(32,1,'integer',['unsigned'|['native']]),
							  #<_cor14>(%% Line 13014
								    'all',8,'binary',['unsigned'|['big']]),
							  #<%% Line 13014
							    0>(_cor6,1,'integer',['unsigned'|['big']])}#
						    in  let <Port> =
							    call 'erlang':'get'
								('opengl_port')
							in  do  ( call 'erlang':'port_control'
								      (Port, %% Line 13013
									     5601, _cor16)
								  -| ['result_not_wanted'] )
								'ok'
'weightuivARB'/1 =
    %% Line 13020
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13021
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13022
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13022
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_41714> when 'true' ->
						let <_43927> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _43927)
					    <[],_15198> when 'true' ->
						_cor10
					    ( <_40844,_40340> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13022
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13022
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13022
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13022
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13021
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13022
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13022
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13021
								     5602, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'vertexBlendARB'/1 =
    %% Line 13028
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13029
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13029
				 5603, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'currentPaletteMatrixARB'/1 =
    %% Line 13035
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13036
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13036
				 5604, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'matrixIndexubvARB'/1 =
    %% Line 13042
    fun (_cor0) ->
	let <_cor14> =
	    %% Line 13043
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor8> =
		%% Line 13044
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    primop 'bs_init_writable'
			(_cor8)
		in  let <_cor13> =
			%% Line 13044
			( letrec
			      'lbc$^0'/2 =
				  fun (_cor12,_cor11) ->
				      case <_cor12,_cor11> of
					<[C|_cor10],_4919> when 'true' ->
					    let <_50686> =
						( #{#<_cor11>('all',1,'binary',[]),
						    #<C>(8,1,'integer',['unsigned'|['native']])}#
						  -| ['compiler_generated','single_use'] )
					    in  apply 'lbc$^0'/2
						    (_cor10, _50686)
					<[],_29093> when 'true' ->
					    _cor11
					( <_4136,_7955> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor12,_cor11})
						-| [{'function_name',{'lbc$^0',2}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lbc$^0'/2
				  (_cor0, _cor6)
			  -| ['list_comprehension'] )
		    in  let <_cor1> =
			    %% Line 13044
			    call 'erlang':'length'
				(_cor0)
			in  let <_cor2> =
				%% Line 13044
				call 'erlang':'+'
				    (_cor1, 4)
			    in  let <_cor3> =
				    %% Line 13044
				    call 'erlang':'rem'
					(_cor2, 8)
				in  let <_cor4> =
					%% Line 13044
					call 'erlang':'-'
					    (8, _cor3)
				    in  let <_cor5> =
					    %% Line 13044
					    call 'erlang':'rem'
						(_cor4, 8)
					in  let <_cor15> =
						%% Line 13043
						#{#<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(%% Line 13044
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13044
						    0>(_cor5,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13043
								     5605, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'matrixIndexusvARB'/1 =
    %% Line 13050
    fun (_cor0) ->
	let <_cor15> =
	    %% Line 13051
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 13052
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 2)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 13052
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_71754> when 'true' ->
						let <_15221> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(16,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _15221)
					    <[],_35740> when 'true' ->
						_cor12
					    ( <_58192,_87082> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13052
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13052
				    call 'erlang':'*'
					(_cor1, 2)
				in  let <_cor3> =
					%% Line 13052
					call 'erlang':'+'
					    (_cor2, 4)
				    in  let <_cor4> =
					    %% Line 13052
					    call 'erlang':'rem'
						(_cor3, 8)
					in  let <_cor5> =
						%% Line 13052
						call 'erlang':'-'
						    (8, _cor4)
					    in  let <_cor6> =
						    %% Line 13052
						    call 'erlang':'rem'
							(_cor5, 8)
						in  let <_cor16> =
							%% Line 13051
							#{#<_cor15>(32,1,'integer',['unsigned'|['native']]),
							  #<_cor14>(%% Line 13052
								    'all',8,'binary',['unsigned'|['big']]),
							  #<%% Line 13052
							    0>(_cor6,1,'integer',['unsigned'|['big']])}#
						    in  let <Port> =
							    call 'erlang':'get'
								('opengl_port')
							in  do  ( call 'erlang':'port_control'
								      (Port, %% Line 13051
									     5606, _cor16)
								  -| ['result_not_wanted'] )
								'ok'
'matrixIndexuivARB'/1 =
    %% Line 13058
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13059
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13060
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13060
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_26047> when 'true' ->
						let <_4077> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _4077)
					    <[],_1162> when 'true' ->
						_cor10
					    ( <_45384,_78338> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13060
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13060
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13060
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13060
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13059
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13060
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13060
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13059
								     5607, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'programStringARB'/3 =
    %% Line 13066
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13067
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 13067
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 13067
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 13067
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 13067
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 13067
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 13067
				    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 13067
							 5608, _cor9)
					      -| ['result_not_wanted'] )
					    'ok'
'bindProgramARB'/2 =
    %% Line 13073
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13074
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13074
				 5609, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteProgramsARB'/1 =
    %% Line 13080
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13081
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13082
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13082
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_79591> when 'true' ->
						let <_55541> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _55541)
					    <[],_16770> when 'true' ->
						_cor10
					    ( <_20407,_56853> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13082
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13082
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13082
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13082
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13081
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13082
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13082
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13081
								     5610, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genProgramsARB'/1 =
    %% Line 13088
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13089
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13089
				 5611, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'programEnvParameter4dARB'/6 =
    %% Line 13095
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13096
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13096
				 5612, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programEnvParameter4dvARB'/3 =
    %% Line 13102
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Index,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 13103
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(64,1,'float',['unsigned'|['native']]),
		    #<P2>(64,1,'float',['unsigned'|['native']]),
		    #<P3>(64,1,'float',['unsigned'|['native']]),
		    #<P4>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 13103
				       5613, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'programEnvParameter4dvARB',3}}] )
	    -| ['compiler_generated'] )
	end
'programEnvParameter4fARB'/6 =
    %% Line 13109
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13110
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13110
				 5614, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programEnvParameter4fvARB'/3 =
    %% Line 13116
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Index,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 13117
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(32,1,'float',['unsigned'|['native']]),
		    #<P2>(32,1,'float',['unsigned'|['native']]),
		    #<P3>(32,1,'float',['unsigned'|['native']]),
		    #<P4>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 13117
				       5615, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'programEnvParameter4fvARB',3}}] )
	    -| ['compiler_generated'] )
	end
'programLocalParameter4dARB'/6 =
    %% Line 13123
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13124
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13124
				 5616, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programLocalParameter4dvARB'/3 =
    %% Line 13130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Index,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 13131
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(64,1,'float',['unsigned'|['native']]),
		    #<P2>(64,1,'float',['unsigned'|['native']]),
		    #<P3>(64,1,'float',['unsigned'|['native']]),
		    #<P4>(64,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 13131
				       5617, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'programLocalParameter4dvARB',3}}] )
	    -| ['compiler_generated'] )
	end
'programLocalParameter4fARB'/6 =
    %% Line 13137
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13138
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13138
				 5618, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programLocalParameter4fvARB'/3 =
    %% Line 13144
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Target,Index,{P1,P2,P3,P4}> when 'true' ->
	      let <_cor3> =
		  %% Line 13145
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<P1>(32,1,'float',['unsigned'|['native']]),
		    #<P2>(32,1,'float',['unsigned'|['native']]),
		    #<P3>(32,1,'float',['unsigned'|['native']]),
		    #<P4>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 13145
				       5619, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'programLocalParameter4fvARB',3}}] )
	    -| ['compiler_generated'] )
	end
'getProgramEnvParameterdvARB'/2 =
    %% Line 13151
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13152
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13152
				 5620, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramEnvParameterfvARB'/2 =
    %% Line 13158
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13159
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13159
				 5621, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramLocalParameterdvARB'/2 =
    %% Line 13165
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13166
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13166
				 5622, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramLocalParameterfvARB'/2 =
    %% Line 13172
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13173
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13173
				 5623, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramStringARB'/3 =
    %% Line 13179
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 13180
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 13181
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 13181
				     5624, _cor3)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getBufferParameterivARB'/2 =
    %% Line 13187
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13188
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13188
				 5625, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteObjectARB'/1 =
    %% Line 13194
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13195
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13195
				 5626, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getHandleARB'/1 =
    %% Line 13201
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13202
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13202
				 5627, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'detachObjectARB'/2 =
    %% Line 13208
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13209
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13209
				 5628, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'createShaderObjectARB'/1 =
    %% Line 13215
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13216
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13216
				 5629, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'shaderSourceARB'/2 =
    %% Line 13222
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13223
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Str|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[Str|[0]]|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_9637> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[Str|_cor3]> when 'true' ->
			let <_cor5> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [[Str|[0]]|_cor5]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_9637> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <StringTemp> =
		%% Line 13223
		call 'erlang':'list_to_binary'
		    (_cor6)
	    in  let <_cor14> =
		    %% Line 13224
		    call 'erlang':'length'
			(_cor0)
		in  let <_cor13> =
			%% Line 13224
			call 'erlang':'size'
			    (StringTemp)
		    in  let <_cor8> =
			    %% Line 13224
			    call 'erlang':'size'
				(StringTemp)
			in  let <_cor9> =
				%% Line 13224
				call 'erlang':'+'
				    (_cor8, 4)
			    in  let <_cor10> =
				    %% Line 13224
				    call 'erlang':'rem'
					(_cor9, 8)
				in  let <_cor11> =
					%% Line 13224
					call 'erlang':'-'
					    (8, _cor10)
				    in  let <_cor12> =
					    %% Line 13224
					    call 'erlang':'rem'
						(_cor11, 8)
					in  let <_cor15> =
						%% Line 13224
						#{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<StringTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor12,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13224
								     5630, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'compileShaderARB'/1 =
    %% Line 13230
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13231
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13231
				 5631, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'createProgramObjectARB'/0 =
    %% Line 13237
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 13238
			     5632, %% Line 13238
				   #{}#)
		  -| ['result_not_wanted'] )
		apply 'rec'/0
		    ()
'attachObjectARB'/2 =
    %% Line 13244
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13245
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13245
				 5633, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'linkProgramARB'/1 =
    %% Line 13251
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13252
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13252
				 5634, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'useProgramObjectARB'/1 =
    %% Line 13258
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13259
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13259
				 5635, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'validateProgramARB'/1 =
    %% Line 13265
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13266
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13266
				 5636, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getObjectParameterfvARB'/2 =
    %% Line 13272
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13273
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13273
				 5637, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getObjectParameterivARB'/2 =
    %% Line 13279
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13280
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13280
				 5638, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getInfoLogARB'/2 =
    %% Line 13286
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13287
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13287
				 5639, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getAttachedObjectsARB'/2 =
    %% Line 13293
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13294
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13294
				 5640, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformLocationARB'/2 =
    %% Line 13300
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 13301
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 13301
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 13301
		    call 'erlang':'+'
			(_cor2, 1)
		in  let <_cor4> =
			%% Line 13301
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 13301
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 13301
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 13301
				    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 13301
							 5641, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getActiveUniformARB'/3 =
    %% Line 13307
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 13308
	    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13308
				 5642, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformfvARB'/2 =
    %% Line 13314
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13315
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13315
				 5643, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformivARB'/2 =
    %% Line 13321
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13322
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13322
				 5644, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getShaderSourceARB'/2 =
    %% Line 13328
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13329
	    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13329
				 5645, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindAttribLocationARB'/3 =
    %% Line 13335
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13336
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 13336
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 13336
		    call 'erlang':'+'
			(_cor3, 5)
		in  let <_cor5> =
			%% Line 13336
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 13336
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 13336
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 13336
				    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 13336
							 5646, _cor9)
					      -| ['result_not_wanted'] )
					    'ok'
'getActiveAttribARB'/3 =
    %% Line 13342
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 13343
	    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13343
				 5647, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getAttribLocationARB'/2 =
    %% Line 13349
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 13350
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 13350
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 13350
		    call 'erlang':'+'
			(_cor2, 1)
		in  let <_cor4> =
			%% Line 13350
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 13350
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 13350
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 13350
				    #{#<_cor1>(64,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 13350
							 5648, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'isRenderbuffer'/1 =
    %% Line 13364
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13365
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13365
				 5649, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindRenderbuffer'/2 =
    %% Line 13377
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13378
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13378
				 5650, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteRenderbuffers'/1 =
    %% Line 13399
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13400
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13401
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13401
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_80968> when 'true' ->
						let <_4525> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _4525)
					    <[],_89666> when 'true' ->
						_cor10
					    ( <_28733,_25704> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13401
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13401
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13401
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13401
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13400
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13401
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13401
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13400
								     5651, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genRenderbuffers'/1 =
    %% Line 13418
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13419
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13419
				 5652, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'renderbufferStorage'/4 =
    %% Line 13439
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 13440
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13440
				 5653, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'getRenderbufferParameteriv'/2 =
    %% Line 13467
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13468
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13468
				 5654, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isFramebuffer'/1 =
    %% Line 13481
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13482
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13482
				 5655, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindFramebuffer'/2 =
    %% Line 13499
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13500
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13500
				 5656, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteFramebuffers'/1 =
    %% Line 13514
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13515
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13516
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13516
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_89430> when 'true' ->
						let <_5682> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _5682)
					    <[],_26979> when 'true' ->
						_cor10
					    ( <_60087,_20218> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13516
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13516
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13516
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13516
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13515
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13516
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13516
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13515
								     5657, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genFramebuffers'/1 =
    %% Line 13533
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13534
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13534
				 5658, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'checkFramebufferStatus'/1 =
    %% Line 13584
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13585
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13585
				 5659, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'framebufferTexture1D'/5 =
    %% Line 13590
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 13591
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13591
				 5660, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'framebufferTexture2D'/5 =
    %% Line 13596
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 13597
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13597
				 5661, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'framebufferTexture3D'/6 =
    %% Line 13602
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13603
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13603
				 5662, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'framebufferRenderbuffer'/4 =
    %% Line 13634
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 13635
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13635
				 5663, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'getFramebufferAttachmentParameteriv'/3 =
    %% Line 13730
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 13731
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13731
				 5664, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'generateMipmap'/1 =
    %% Line 13750
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13751
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13751
				 5665, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'blitFramebuffer'/10 =
    %% Line 13792
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 13793
	    #{#<_cor9>(32,1,'integer',['signed'|['native']]),
	      #<_cor8>(32,1,'integer',['signed'|['native']]),
	      #<_cor7>(32,1,'integer',['signed'|['native']]),
	      #<_cor6>(32,1,'integer',['signed'|['native']]),
	      #<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13793
				 5666, _cor10)
		      -| ['result_not_wanted'] )
		    'ok'
'renderbufferStorageMultisample'/5 =
    %% Line 13816
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 13817
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13817
				 5667, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'framebufferTextureLayer'/5 =
    %% Line 13822
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 13823
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13823
				 5668, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'framebufferTextureFaceARB'/5 =
    %% Line 13828
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 13829
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13829
				 5669, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'flushMappedBufferRange'/3 =
    %% Line 13842
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 13843
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13843
				 5670, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'bindVertexArray'/1 =
    %% Line 13857
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13858
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13858
				 5671, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteVertexArrays'/1 =
    %% Line 13870
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 13871
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 13872
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 13872
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_47977> when 'true' ->
						let <_86657> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _86657)
					    <[],_64354> when 'true' ->
						_cor10
					    ( <_59865,_31482> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 13872
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 13872
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 13872
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 13872
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 13871
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 13872
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 13872
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13871
								     5672, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genVertexArrays'/1 =
    %% Line 13889
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13890
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13890
				 5673, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isVertexArray'/1 =
    %% Line 13903
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 13904
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13904
				 5674, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformIndices'/2 =
    %% Line 13930
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 13931
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Str|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[Str|[0]]|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_21074> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[Str|_cor3]> when 'true' ->
			let <_cor5> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [[Str|[0]]|_cor5]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_52373> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <UniformNamesTemp> =
		%% Line 13931
		call 'erlang':'list_to_binary'
		    (_cor6)
	    in  let <_cor14> =
		    %% Line 13932
		    call 'erlang':'length'
			(_cor0)
		in  let <_cor13> =
			%% Line 13932
			call 'erlang':'size'
			    (UniformNamesTemp)
		    in  let <_cor8> =
			    %% Line 13932
			    call 'erlang':'size'
				(UniformNamesTemp)
			in  let <_cor9> =
				%% Line 13932
				call 'erlang':'+'
				    (_cor8, 0)
			    in  let <_cor10> =
				    %% Line 13932
				    call 'erlang':'rem'
					(_cor9, 8)
				in  let <_cor11> =
					%% Line 13932
					call 'erlang':'-'
					    (8, _cor10)
				    in  let <_cor12> =
					    %% Line 13932
					    call 'erlang':'rem'
						(_cor11, 8)
					in  let <_cor15> =
						%% Line 13932
						#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<UniformNamesTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor12,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 13932
								     5675, _cor15)
							  -| ['result_not_wanted'] )
							apply 'rec'/0
							    ()
'getActiveUniformsiv'/3 =
    %% Line 13938
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 13939
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor8> =
		%% Line 13940
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor7> =
		    call 'erlang':'*'
			(_cor8, 4)
		in  let <_cor6> =
			primop 'bs_init_writable'
			    (_cor7)
		    in  let <_cor13> =
			    %% Line 13940
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor12,_cor11) ->
					  case <_cor12,_cor11> of
					    <[C|_cor10],_76532> when 'true' ->
						let <_70129> =
						    ( #{#<_cor11>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor10, _70129)
					    <[],_36023> when 'true' ->
						_cor11
					    ( <_18491,_44571> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor12,_cor11})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor1, _cor6)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 13940
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor4> =
				    %% Line 13940
				    call 'erlang':'rem'
					(_cor3, 2)
				in  let <_cor5> =
					%% Line 13940
					call 'erlang':'*'
					    (_cor4, 32)
				    in  let <_cor15> =
					    %% Line 13939
					    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor14>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor13>(%% Line 13940
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 13940
						0>(_cor5,1,'integer',['unsigned'|['big']]),
					      #<_cor0>(%% Line 13940
						       32,1,'integer',['unsigned'|['native']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 13939
								 5676, _cor15)
						      -| ['result_not_wanted'] )
						    apply 'rec'/0
							()
'getActiveUniformName'/3 =
    %% Line 13968
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 13969
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 13969
				 5677, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getUniformBlockIndex'/2 =
    %% Line 13992
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 13993
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 13993
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 13993
		    call 'erlang':'+'
			(_cor2, 5)
		in  let <_cor4> =
			%% Line 13993
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 13993
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 13993
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 13993
				    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 13993
							 5678, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getActiveUniformBlockiv'/4 =
    %% Line 14044
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 14045
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor4> =
		%% Line 14046
		#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 14046
				     5679, _cor4)
			  -| ['result_not_wanted'] )
			apply 'rec'/0
			    ()
'getActiveUniformBlockName'/3 =
    %% Line 14074
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14075
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14075
				 5680, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'uniformBlockBinding'/3 =
    %% Line 14094
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14095
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14095
				 5681, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'copyBufferSubData'/5 =
    %% Line 14120
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 14121
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14121
				 5682, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'drawElementsBaseVertex'/5 =
    %% Line 14134
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices,Basevertex>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <_cor5> =
		  %% Line 14135
		  #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 14135
				       5683, _cor5)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 14136
	  <Mode,Count,Type,Indices,Basevertex> when 'true' ->
	      do  %% Line 14137
		  apply 'send_bin'/1
		      (_cor1)
		  let <_cor6> =
		      %% Line 14138
		      #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor0>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 14138
					   5684, _cor6)
				-| ['result_not_wanted'] )
			      'ok'
	end
'drawRangeElementsBaseVertex'/7 =
    %% Line 14156
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Start,End,Count,Type,Indices,Basevertex>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <_cor7> =
		  %% Line 14157
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 14157
				       5685, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 14158
	  <Mode,Start,End,Count,Type,Indices,Basevertex> when 'true' ->
	      do  %% Line 14159
		  apply 'send_bin'/1
		      (_cor1)
		  let <_cor8> =
		      %% Line 14160
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor0>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 14160
					   5686, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'drawElementsInstancedBaseVertex'/6 =
    %% Line 14173
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices,Primcount,Basevertex>
	      when call 'erlang':'is_integer'
		    (_cor2) ->
	      let <_cor6> =
		  %% Line 14174
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 14174
				       5687, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 14175
	  <Mode,Count,Type,Indices,Primcount,Basevertex> when 'true' ->
	      do  %% Line 14176
		  apply 'send_bin'/1
		      (_cor2)
		  let <_cor7> =
		      %% Line 14177
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']]),
			#<_cor0>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 14177
					   5688, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'provokingVertex'/1 =
    %% Line 14210
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14211
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14211
				 5689, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'fenceSync'/2 =
    %% Line 14234
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14235
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14235
				 5690, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isSync'/1 =
    %% Line 14245
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14246
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14246
				 5691, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteSync'/1 =
    %% Line 14262
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14263
	    #{#<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14263
				 5692, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'clientWaitSync'/3 =
    %% Line 14288
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14289
	    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14289
				 5693, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'waitSync'/3 =
    %% Line 14310
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14311
	    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14311
				 5694, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'getInteger64v'/1 =
    %% Line 14316
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14317
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14317
				 5695, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getSynciv'/3 =
    %% Line 14351
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14352
	    #{#<_cor2>(64,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14352
				 5696, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'texImage2DMultisample'/6 =
    %% Line 14379
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 14380
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14380
				 5697, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'texImage3DMultisample'/7 =
    %% Line 14407
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 14408
	    #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor5>(32,1,'integer',['signed'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14408
				 5698, _cor7)
		      -| ['result_not_wanted'] )
		    'ok'
'getMultisamplefv'/2 =
    %% Line 14425
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14426
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14426
				 5699, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'sampleMaski'/2 =
    %% Line 14440
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14441
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14441
				 5700, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'namedStringARB'/3 =
    %% Line 14447
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 14448
	    call 'erlang':'list_to_binary'
		([_cor1|[0]])
	in  let <_cor9> =
		%% Line 14448
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor10> =
		    %% Line 14448
		    call 'erlang':'+'
			(_cor9, 5)
		in  let <_cor11> =
			%% Line 14448
			call 'erlang':'rem'
			    (_cor10, 8)
		    in  let <_cor12> =
			    %% Line 14448
			    call 'erlang':'-'
				(8, _cor11)
			in  let <_cor13> =
				%% Line 14448
				call 'erlang':'rem'
				    (_cor12, 8)
			    in  let <_cor8> =
				    %% Line 14448
				    call 'erlang':'list_to_binary'
					([_cor0|[0]])
				in  let <_cor3> =
					%% Line 14448
					call 'erlang':'length'
					    (_cor0)
				    in  let <_cor4> =
					    %% Line 14448
					    call 'erlang':'+'
						(_cor3, 1)
					in  let <_cor5> =
						%% Line 14448
						call 'erlang':'rem'
						    (_cor4, 8)
					    in  let <_cor6> =
						    %% Line 14448
						    call 'erlang':'-'
							(8, _cor5)
						in  let <_cor7> =
							%% Line 14448
							call 'erlang':'rem'
							    (_cor6, 8)
						    in  let <_cor15> =
							    %% Line 14448
							    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
							      #<_cor14>('all',8,'binary',['unsigned'|['big']]),
							      #<0>(_cor13,1,'integer',['unsigned'|['big']]),
							      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
							      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
							in  let <Port> =
								call 'erlang':'get'
								    ('opengl_port')
							    in  do  ( call 'erlang':'port_control'
									  (Port, %% Line 14448
										 5701, _cor15)
								      -| ['result_not_wanted'] )
								    'ok'
'deleteNamedStringARB'/1 =
    %% Line 14454
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 14455
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor1> =
		%% Line 14455
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 14455
		    call 'erlang':'+'
			(_cor1, 1)
		in  let <_cor3> =
			%% Line 14455
			call 'erlang':'rem'
			    (_cor2, 8)
		    in  let <_cor4> =
			    %% Line 14455
			    call 'erlang':'-'
				(8, _cor3)
			in  let <_cor5> =
				%% Line 14455
				call 'erlang':'rem'
				    (_cor4, 8)
			    in  let <_cor7> =
				    %% Line 14455
				    #{#<_cor6>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor5,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14455
							 5702, _cor7)
					      -| ['result_not_wanted'] )
					    'ok'
'compileShaderIncludeARB'/2 =
    %% Line 14461
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 14462
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Str|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[Str|[0]]|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_33869> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[Str|_cor3]> when 'true' ->
			let <_cor5> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [[Str|[0]]|_cor5]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_33869> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <PathTemp> =
		%% Line 14462
		call 'erlang':'list_to_binary'
		    (_cor6)
	    in  let <_cor14> =
		    %% Line 14463
		    call 'erlang':'length'
			(_cor0)
		in  let <_cor13> =
			%% Line 14463
			call 'erlang':'size'
			    (PathTemp)
		    in  let <_cor8> =
			    %% Line 14463
			    call 'erlang':'size'
				(PathTemp)
			in  let <_cor9> =
				%% Line 14463
				call 'erlang':'+'
				    (_cor8, 0)
			    in  let <_cor10> =
				    %% Line 14463
				    call 'erlang':'rem'
					(_cor9, 8)
				in  let <_cor11> =
					%% Line 14463
					call 'erlang':'-'
					    (8, _cor10)
				    in  let <_cor12> =
					    %% Line 14463
					    call 'erlang':'rem'
						(_cor11, 8)
					in  let <_cor15> =
						%% Line 14463
						#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<PathTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor12,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14463
								     5703, _cor15)
							  -| ['result_not_wanted'] )
							'ok'
'isNamedStringARB'/1 =
    %% Line 14469
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 14470
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor1> =
		%% Line 14470
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 14470
		    call 'erlang':'+'
			(_cor1, 1)
		in  let <_cor3> =
			%% Line 14470
			call 'erlang':'rem'
			    (_cor2, 8)
		    in  let <_cor4> =
			    %% Line 14470
			    call 'erlang':'-'
				(8, _cor3)
			in  let <_cor5> =
				%% Line 14470
				call 'erlang':'rem'
				    (_cor4, 8)
			    in  let <_cor7> =
				    %% Line 14470
				    #{#<_cor6>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor5,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14470
							 5704, _cor7)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getNamedStringARB'/2 =
    %% Line 14476
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 14477
	    call 'erlang':'list_to_binary'
		([_cor1|[0]])
	in  let <_cor2> =
		%% Line 14477
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 14477
		    call 'erlang':'+'
			(_cor2, 1)
		in  let <_cor4> =
			%% Line 14477
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 14477
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 14477
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 14477
				    #{#<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']]),
				      #<_cor0>(32,1,'integer',['signed'|['native']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14477
							 5705, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getNamedStringivARB'/2 =
    %% Line 14483
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 14484
	    call 'erlang':'list_to_binary'
		([_cor1|[0]])
	in  let <_cor2> =
		%% Line 14484
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 14484
		    call 'erlang':'+'
			(_cor2, 1)
		in  let <_cor4> =
			%% Line 14484
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 14484
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 14484
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 14484
				    #{#<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']]),
				      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14484
							 5706, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'bindFragDataLocationIndexed'/4 =
    %% Line 14490
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14491
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor4> =
		%% Line 14491
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 14491
		    call 'erlang':'+'
			(_cor4, 5)
		in  let <_cor6> =
			%% Line 14491
			call 'erlang':'rem'
			    (_cor5, 8)
		    in  let <_cor7> =
			    %% Line 14491
			    call 'erlang':'-'
				(8, _cor6)
			in  let <_cor8> =
				%% Line 14491
				call 'erlang':'rem'
				    (_cor7, 8)
			    in  let <_cor10> =
				    %% Line 14491
				    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor9>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor8,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14491
							 5707, _cor10)
					      -| ['result_not_wanted'] )
					    'ok'
'getFragDataIndex'/2 =
    %% Line 14501
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 14502
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor2> =
		%% Line 14502
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 14502
		    call 'erlang':'+'
			(_cor2, 5)
		in  let <_cor4> =
			%% Line 14502
			call 'erlang':'rem'
			    (_cor3, 8)
		    in  let <_cor5> =
			    %% Line 14502
			    call 'erlang':'-'
				(8, _cor4)
			in  let <_cor6> =
				%% Line 14502
				call 'erlang':'rem'
				    (_cor5, 8)
			    in  let <_cor8> =
				    %% Line 14502
				    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor7>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor6,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 14502
							 5708, _cor8)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'genSamplers'/1 =
    %% Line 14519
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14520
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14520
				 5709, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'deleteSamplers'/1 =
    %% Line 14532
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 14533
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 14534
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 14534
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_28812> when 'true' ->
						let <_7939> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _7939)
					    <[],_54816> when 'true' ->
						_cor10
					    ( <_48295,_50397> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 14534
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 14534
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 14534
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 14534
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 14533
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 14534
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 14534
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14533
								     5710, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'isSampler'/1 =
    %% Line 14546
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 14547
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14547
				 5711, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindSampler'/2 =
    %% Line 14563
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14564
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14564
				 5712, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'samplerParameteri'/3 =
    %% Line 14709
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14710
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14710
				 5713, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'samplerParameteriv'/3 =
    %% Line 14715
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 14716
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 14717
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 14717
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_87394> when 'true' ->
						let <_6549> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _6549)
					    <[],_50862> when 'true' ->
						_cor12
					    ( <_11682,_30592> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 14717
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 14717
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 14717
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 14717
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 14716
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 14717
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 14717
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14716
								     5714, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'samplerParameterf'/3 =
    %% Line 14722
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14723
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14723
				 5715, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'samplerParameterfv'/3 =
    %% Line 14728
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 14729
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 14730
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 14730
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_29805> when 'true' ->
						let <_56756> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _56756)
					    <[],_61986> when 'true' ->
						_cor12
					    ( <_89533,_53808> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 14730
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 14730
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 14730
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 14730
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 14729
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 14730
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 14730
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14729
								     5716, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'samplerParameterIiv'/3 =
    %% Line 14735
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 14736
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 14737
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 14737
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_9560> when 'true' ->
						let <_69124> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _69124)
					    <[],_47683> when 'true' ->
						_cor12
					    ( <_48710,_41723> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 14737
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 14737
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 14737
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 14737
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 14736
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 14737
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 14737
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14736
								     5717, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'samplerParameterIuiv'/3 =
    %% Line 14743
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 14744
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 14745
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 14745
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_32510> when 'true' ->
						let <_60891> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _60891)
					    <[],_53671> when 'true' ->
						_cor12
					    ( <_25070,_71919> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 14745
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 14745
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 14745
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 14745
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 14744
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 14745
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 14745
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 14744
								     5718, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'getSamplerParameteriv'/2 =
    %% Line 14791
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14792
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14792
				 5719, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getSamplerParameterIiv'/2 =
    %% Line 14797
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14798
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14798
				 5720, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getSamplerParameterfv'/2 =
    %% Line 14803
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14804
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14804
				 5721, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getSamplerParameterIuiv'/2 =
    %% Line 14810
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14811
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14811
				 5722, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'queryCounter'/2 =
    %% Line 14825
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14826
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14826
				 5723, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'getQueryObjecti64v'/2 =
    %% Line 14832
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14833
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14833
				 5724, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getQueryObjectui64v'/2 =
    %% Line 14839
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14840
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14840
				 5725, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'drawArraysIndirect'/2 =
    %% Line 14869
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mode,Indirect>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 14870
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 14870
				       5726, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 14871
	  <Mode,Indirect> when 'true' ->
	      do  %% Line 14872
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor3> =
		      %% Line 14873
		      #{#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 14873
					   5727, _cor3)
				-| ['result_not_wanted'] )
			      'ok'
	end
'drawElementsIndirect'/3 =
    %% Line 14909
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mode,Type,Indirect>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 14910
		  #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 14910
				       5728, _cor3)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 14911
	  <Mode,Type,Indirect> when 'true' ->
	      do  %% Line 14912
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor4> =
		      %% Line 14913
		      #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 14913
					   5729, _cor4)
				-| ['result_not_wanted'] )
			      'ok'
	end
'uniform1d'/2 =
    %% Line 14918
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 14919
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14919
				 5730, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform2d'/3 =
    %% Line 14924
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 14925
	    #{#<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14925
				 5731, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform3d'/4 =
    %% Line 14930
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 14931
	    #{#<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14931
				 5732, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform4d'/5 =
    %% Line 14936
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 14937
	    #{#<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 14937
				 5733, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'uniform1dv'/2 =
    %% Line 14942
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 14943
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		%% Line 14944
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor3> =
		    call 'erlang':'*'
			(_cor4, 8)
		in  let <_cor2> =
			primop 'bs_init_writable'
			    (_cor3)
		    in  let <_cor9> =
			    %% Line 14944
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor8,_cor7) ->
					  case <_cor8,_cor7> of
					    <[C|_cor6],_43345> when 'true' ->
						let <_8761> =
						    ( #{#<_cor7>('all',1,'binary',[]),
							#<C>(64,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor6, _8761)
					    <[],_56754> when 'true' ->
						_cor7
					    ( <_47576,_11651> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor8,_cor7})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor2)
			      -| ['list_comprehension'] )
			in  let <_cor11> =
				%% Line 14943
				#{#<_cor1>(32,1,'integer',['signed'|['native']]),
				  #<0>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
				  #<0>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor9>(%% Line 14944
					   'all',8,'binary',['unsigned'|['big']])}#
			    in  let <Port> =
				    call 'erlang':'get'
					('opengl_port')
				in  do  ( call 'erlang':'port_control'
					      (Port, %% Line 14943
						     5734, _cor11)
					  -| ['result_not_wanted'] )
					'ok'
'uniform2dv'/2 =
    %% Line 14949
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14950
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 14951
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2}|_cor4],_24788> when 'true' ->
					let <_92498> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _92498)
				    ( <[_cor3|_cor4],_44751> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_3645> when 'true' ->
					_cor5
				    ( <_18658,_42017> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 14950
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor7>(%% Line 14951
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14950
					     5735, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform3dv'/2 =
    %% Line 14956
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14957
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 14958
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3}|_cor4],_25015> when 'true' ->
					let <_8746> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _8746)
				    ( <[_cor3|_cor4],_5177> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_46983> when 'true' ->
					_cor5
				    ( <_35565,_56761> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 14957
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor7>(%% Line 14958
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14957
					     5736, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniform4dv'/2 =
    %% Line 14963
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14964
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 14965
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_37043> when 'true' ->
					let <_63058> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _63058)
				    ( <[_cor3|_cor4],_75630> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_78321> when 'true' ->
					_cor5
				    ( <_5276,_80737> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 14964
			#{#<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor7>(%% Line 14965
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14964
					     5737, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix2dv'/3 =
    %% Line 14970
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14971
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 14972
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_25518> when 'true' ->
					let <_78483> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _78483)
				    ( <[_cor4|_cor5],_22909> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_28369> when 'true' ->
					_cor6
				    ( <_78146,_17421> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 14971
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 14972
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14971
					     5738, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3dv'/3 =
    %% Line 14977
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14978
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 14979
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9}|_cor5],_22697> when 'true' ->
					let <_42057> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _42057)
				    ( <[_cor4|_cor5],_84266> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_92119> when 'true' ->
					_cor6
				    ( <_90352,_76610> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 14978
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 14979
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14978
					     5739, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4dv'/3 =
    %% Line 14984
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14985
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 14986
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}|_cor5],_4650> when 'true' ->
					let <_30093> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']]),
						#<V13>(64,1,'float',['unsigned'|['native']]),
						#<V14>(64,1,'float',['unsigned'|['native']]),
						#<V15>(64,1,'float',['unsigned'|['native']]),
						#<V16>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _30093)
				    ( <[_cor4|_cor5],_18606> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_78640> when 'true' ->
					_cor6
				    ( <_93150,_75472> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 14985
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 14986
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14985
					     5740, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix2x3dv'/3 =
    %% Line 14991
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14992
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 14993
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor5],_35448> when 'true' ->
					let <_91414> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _91414)
				    ( <[_cor4|_cor5],_62983> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_16371> when 'true' ->
					_cor6
				    ( <_61515,_62253> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 14992
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 14993
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14992
					     5741, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix2x4dv'/3 =
    %% Line 14998
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 14999
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15000
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor5],_30360> when 'true' ->
					let <_90814> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _90814)
				    ( <[_cor4|_cor5],_65325> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_31153> when 'true' ->
					_cor6
				    ( <_24930,_66610> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 14999
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15000
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 14999
					     5742, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3x2dv'/3 =
    %% Line 15005
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15006
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15007
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor5],_29426> when 'true' ->
					let <_47981> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _47981)
				    ( <[_cor4|_cor5],_67219> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_90808> when 'true' ->
					_cor6
				    ( <_72735,_89876> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15006
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15007
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15006
					     5743, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix3x4dv'/3 =
    %% Line 15012
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15013
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15014
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor5],_45787> when 'true' ->
					let <_25309> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _25309)
				    ( <[_cor4|_cor5],_86852> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_5120> when 'true' ->
					_cor6
				    ( <_24818,_13128> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15013
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15014
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15013
					     5744, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4x2dv'/3 =
    %% Line 15019
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15020
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15021
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor5],_48304> when 'true' ->
					let <_26706> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _26706)
				    ( <[_cor4|_cor5],_89761> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_36162> when 'true' ->
					_cor6
				    ( <_39655,_9763> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15020
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15021
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15020
					     5745, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'uniformMatrix4x3dv'/3 =
    %% Line 15026
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15027
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15028
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor5],_10371> when 'true' ->
					let <_84316> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _84316)
				    ( <[_cor4|_cor5],_32000> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_85231> when 'true' ->
					_cor6
				    ( <_4575,_70830> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15027
			#{#<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15028
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15027
					     5746, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'getUniformdv'/2 =
    %% Line 15033
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15034
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15034
				 5747, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getSubroutineUniformLocation'/3 =
    %% Line 15052
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 15053
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 15053
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 15053
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 15053
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 15053
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 15053
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 15053
				    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 15053
							 5748, _cor9)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getSubroutineIndex'/3 =
    %% Line 15072
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 15073
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor3> =
		%% Line 15073
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 15073
		    call 'erlang':'+'
			(_cor3, 1)
		in  let <_cor5> =
			%% Line 15073
			call 'erlang':'rem'
			    (_cor4, 8)
		    in  let <_cor6> =
			    %% Line 15073
			    call 'erlang':'-'
				(8, _cor5)
			in  let <_cor7> =
				%% Line 15073
				call 'erlang':'rem'
				    (_cor6, 8)
			    in  let <_cor9> =
				    %% Line 15073
				    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor8>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor7,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 15073
							 5749, _cor9)
					      -| ['result_not_wanted'] )
					    apply 'rec'/0
						()
'getActiveSubroutineUniformName'/4 =
    %% Line 15093
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15094
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15094
				 5750, _cor4)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getActiveSubroutineName'/4 =
    %% Line 15111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15112
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15112
				 5751, _cor4)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'uniformSubroutinesuiv'/2 =
    %% Line 15125
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 15126
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 15127
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 15127
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_28154> when 'true' ->
						let <_50851> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _50851)
					    <[],_54015> when 'true' ->
						_cor10
					    ( <_85212,_53978> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor2> =
				%% Line 15127
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor3> =
				    %% Line 15127
				    call 'erlang':'rem'
					(_cor2, 2)
				in  let <_cor4> =
					%% Line 15127
					call 'erlang':'*'
					    (_cor3, 32)
				    in  let <_cor14> =
					    %% Line 15126
					    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor12>(%% Line 15127
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 15127
						0>(_cor4,1,'integer',['unsigned'|['big']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 15126
								 5752, _cor14)
						      -| ['result_not_wanted'] )
						    'ok'
'getUniformSubroutineuiv'/2 =
    %% Line 15139
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15140
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15140
				 5753, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramStageiv'/3 =
    %% Line 15171
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15172
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15172
				 5754, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'patchParameteri'/2 =
    %% Line 15198
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15199
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15199
				 5755, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'patchParameterfv'/2 =
    %% Line 15204
    fun (_cor1,_cor0) ->
	let <_cor13> =
	    %% Line 15205
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 15206
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 15206
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_93175> when 'true' ->
						let <_67505> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _67505)
					    <[],_81583> when 'true' ->
						_cor10
					    ( <_45841,_48168> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor2> =
				%% Line 15206
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor3> =
				    %% Line 15206
				    call 'erlang':'rem'
					(_cor2, 2)
				in  let <_cor4> =
					%% Line 15206
					call 'erlang':'*'
					    (_cor3, 32)
				    in  let <_cor14> =
					    %% Line 15205
					    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor13>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor12>(%% Line 15206
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 15206
						0>(_cor4,1,'integer',['unsigned'|['big']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 15205
								 5756, _cor14)
						      -| ['result_not_wanted'] )
						    'ok'
'bindTransformFeedback'/2 =
    %% Line 15228
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15229
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15229
				 5757, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteTransformFeedbacks'/1 =
    %% Line 15241
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 15242
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 15243
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 15243
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_49332> when 'true' ->
						let <_17142> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _17142)
					    <[],_70831> when 'true' ->
						_cor10
					    ( <_23631,_82157> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 15243
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 15243
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 15243
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 15243
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 15242
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 15243
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 15243
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15242
								     5758, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genTransformFeedbacks'/1 =
    %% Line 15253
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15254
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15254
				 5759, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isTransformFeedback'/1 =
    %% Line 15268
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15269
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15269
				 5760, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'pauseTransformFeedback'/0 =
    %% Line 15281
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 15282
			     5761, %% Line 15282
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'resumeTransformFeedback'/0 =
    %% Line 15294
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 15295
			     5762, %% Line 15295
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'drawTransformFeedback'/2 =
    %% Line 15308
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15309
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15309
				 5763, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'drawTransformFeedbackStream'/3 =
    %% Line 15326
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15327
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15327
				 5764, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'beginQueryIndexed'/3 =
    %% Line 15333
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15334
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15334
				 5765, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'endQueryIndexed'/2 =
    %% Line 15410
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15411
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15411
				 5766, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'getQueryIndexediv'/3 =
    %% Line 15428
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15429
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15429
				 5767, _cor3)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'releaseShaderCompiler'/0 =
    %% Line 15440
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 15441
			     5768, %% Line 15441
				   #{}#)
		  -| ['result_not_wanted'] )
		'ok'
'shaderBinary'/3 =
    %% Line 15462
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 15463
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor15> =
		%% Line 15464
		call 'erlang':'length'
		    (_cor2)
	    in  let <_cor9> =
		    %% Line 15465
		    call 'erlang':'length'
			(_cor2)
		in  let <_cor8> =
			call 'erlang':'*'
			    (_cor9, 4)
		    in  let <_cor7> =
			    primop 'bs_init_writable'
				(_cor8)
			in  let <_cor14> =
				%% Line 15465
				( letrec
				      'lbc$^0'/2 =
					  fun (_cor13,_cor12) ->
					      case <_cor13,_cor12> of
						<[C|_cor11],_63418> when 'true' ->
						    let <_77603> =
							( #{#<_cor12>('all',1,'binary',[]),
							    #<C>(32,1,'integer',['unsigned'|['native']])}#
							  -| ['compiler_generated','single_use'] )
						    in  apply 'lbc$^0'/2
							    (_cor11, _77603)
						<[],_40846> when 'true' ->
						    _cor12
						( <_21243,_81832> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor13,_cor12})
							-| [{'function_name',{'lbc$^0',2}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lbc$^0'/2
					  (_cor2, _cor7)
				  -| ['list_comprehension'] )
			    in  let <_cor3> =
				    %% Line 15465
				    call 'erlang':'length'
					(_cor2)
				in  let <_cor4> =
					%% Line 15465
					call 'erlang':'+'
					    (1, _cor3)
				    in  let <_cor5> =
					    %% Line 15465
					    call 'erlang':'rem'
						(_cor4, 2)
					in  let <_cor6> =
						%% Line 15465
						call 'erlang':'*'
						    (_cor5, 32)
					    in  let <_cor16> =
						    %% Line 15464
						    #{#<_cor15>(32,1,'integer',['unsigned'|['native']]),
						      #<_cor14>(%% Line 15465
								'all',8,'binary',['unsigned'|['big']]),
						      #<%% Line 15465
							0>(_cor6,1,'integer',['unsigned'|['big']]),
						      #<_cor1>(%% Line 15465
							       32,1,'integer',['unsigned'|['native']])}#
						in  let <Port> =
							call 'erlang':'get'
							    ('opengl_port')
						    in  do  ( call 'erlang':'port_control'
								  (Port, %% Line 15464
									 5769, _cor16)
							      -| ['result_not_wanted'] )
							    'ok'
'getShaderPrecisionFormat'/2 =
    %% Line 15489
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15490
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15490
				 5770, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'depthRangef'/2 =
    %% Line 15495
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15496
	    #{#<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15496
				 5771, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'clearDepthf'/1 =
    %% Line 15502
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15503
	    #{#<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15503
				 5772, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getProgramBinary'/2 =
    %% Line 15523
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15524
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15524
				 5773, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'programBinary'/3 =
    %% Line 15550
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 15551
	    apply 'send_bin'/1
		(_cor0)
	    let <_cor3> =
		%% Line 15552
		#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
		  #<_cor1>(32,1,'integer',['unsigned'|['native']])}#
	    in  let <Port> =
		    call 'erlang':'get'
			('opengl_port')
		in  do  ( call 'erlang':'port_control'
			      (Port, %% Line 15552
				     5774, _cor3)
			  -| ['result_not_wanted'] )
			'ok'
'programParameteri'/3 =
    %% Line 15576
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15577
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15577
				 5775, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'useProgramStages'/3 =
    %% Line 15601
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15602
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15602
				 5776, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'activeShaderProgram'/2 =
    %% Line 15613
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15614
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15614
				 5777, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'createShaderProgramv'/2 =
    %% Line 15620
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 15621
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Str|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [[Str|[0]]|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_20050> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  case _cor0 of
		    <[Str|_cor3]> when 'true' ->
			let <_cor5> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [[Str|[0]]|_cor5]
			      -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_20050> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  let <StringsTemp> =
		%% Line 15621
		call 'erlang':'list_to_binary'
		    (_cor6)
	    in  let <_cor14> =
		    %% Line 15622
		    call 'erlang':'length'
			(_cor0)
		in  let <_cor13> =
			%% Line 15622
			call 'erlang':'size'
			    (StringsTemp)
		    in  let <_cor8> =
			    %% Line 15622
			    call 'erlang':'size'
				(StringsTemp)
			in  let <_cor9> =
				%% Line 15622
				call 'erlang':'+'
				    (_cor8, 0)
			    in  let <_cor10> =
				    %% Line 15622
				    call 'erlang':'rem'
					(_cor9, 8)
				in  let <_cor11> =
					%% Line 15622
					call 'erlang':'-'
					    (8, _cor10)
				    in  let <_cor12> =
					    %% Line 15622
					    call 'erlang':'rem'
						(_cor11, 8)
					in  let <_cor15> =
						%% Line 15622
						#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<StringsTemp>('all',8,'binary',['unsigned'|['big']]),
						  #<0>(_cor12,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15622
								     5778, _cor15)
							  -| ['result_not_wanted'] )
							apply 'rec'/0
							    ()
'bindProgramPipeline'/1 =
    %% Line 15643
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15644
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15644
				 5779, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'deleteProgramPipelines'/1 =
    %% Line 15657
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 15658
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor7> =
		%% Line 15659
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    call 'erlang':'*'
			(_cor7, 4)
		in  let <_cor5> =
			primop 'bs_init_writable'
			    (_cor6)
		    in  let <_cor12> =
			    %% Line 15659
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor11,_cor10) ->
					  case <_cor11,_cor10> of
					    <[C|_cor9],_62760> when 'true' ->
						let <_66831> =
						    ( #{#<_cor10>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor9, _66831)
					    <[],_15691> when 'true' ->
						_cor10
					    ( <_81061,_64592> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11,_cor10})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor5)
			      -| ['list_comprehension'] )
			in  let <_cor1> =
				%% Line 15659
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor2> =
				    %% Line 15659
				    call 'erlang':'+'
					(1, _cor1)
				in  let <_cor3> =
					%% Line 15659
					call 'erlang':'rem'
					    (_cor2, 2)
				    in  let <_cor4> =
					    %% Line 15659
					    call 'erlang':'*'
						(_cor3, 32)
					in  let <_cor14> =
						%% Line 15658
						#{#<_cor13>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor12>(%% Line 15659
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 15659
						    0>(_cor4,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15658
								     5780, _cor14)
							  -| ['result_not_wanted'] )
							'ok'
'genProgramPipelines'/1 =
    %% Line 15669
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15670
	    #{#<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15670
				 5781, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'isProgramPipeline'/1 =
    %% Line 15684
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15685
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15685
				 5782, _cor1)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getProgramPipelineiv'/2 =
    %% Line 15722
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 15723
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15723
				 5783, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'programUniform1i'/3 =
    %% Line 15789
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15790
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15790
				 5784, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform1iv'/3 =
    %% Line 15795
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 15796
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 15797
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 15797
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_61000> when 'true' ->
						let <_44421> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'integer',['signed'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _44421)
					    <[],_66947> when 'true' ->
						_cor12
					    ( <_3906,_72707> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 15797
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 15797
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 15797
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 15797
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 15796
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['signed'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 15797
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 15797
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15796
								     5785, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'programUniform1f'/3 =
    %% Line 15802
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15803
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15803
				 5786, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform1fv'/3 =
    %% Line 15808
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 15809
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 15810
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 15810
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_83866> when 'true' ->
						let <_21206> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _21206)
					    <[],_85925> when 'true' ->
						_cor12
					    ( <_89896,_37321> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 15810
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 15810
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 15810
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 15810
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 15809
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['signed'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 15810
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 15810
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15809
								     5787, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'programUniform1d'/3 =
    %% Line 15815
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15816
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15816
				 5788, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform1dv'/3 =
    %% Line 15821
    fun (_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 15822
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor5> =
		%% Line 15823
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    call 'erlang':'*'
			(_cor5, 8)
		in  let <_cor3> =
			primop 'bs_init_writable'
			    (_cor4)
		    in  let <_cor10> =
			    %% Line 15823
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor9,_cor8) ->
					  case <_cor9,_cor8> of
					    <[C|_cor7],_8223> when 'true' ->
						let <_32973> =
						    ( #{#<_cor8>('all',1,'binary',[]),
							#<C>(64,1,'float',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor7, _32973)
					    <[],_55388> when 'true' ->
						_cor8
					    ( <_85372,_92556> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor9,_cor8})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor3)
			      -| ['list_comprehension'] )
			in  let <_cor12> =
				%% Line 15822
				#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
				  #<_cor1>(32,1,'integer',['signed'|['native']]),
				  #<_cor11>(32,1,'integer',['unsigned'|['native']]),
				  #<0>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor10>(%% Line 15823
					    'all',8,'binary',['unsigned'|['big']])}#
			    in  let <Port> =
				    call 'erlang':'get'
					('opengl_port')
				in  do  ( call 'erlang':'port_control'
					      (Port, %% Line 15822
						     5789, _cor12)
					  -| ['result_not_wanted'] )
					'ok'
'programUniform1ui'/3 =
    %% Line 15828
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 15829
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15829
				 5790, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform1uiv'/3 =
    %% Line 15834
    fun (_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 15835
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor9> =
		%% Line 15836
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor8> =
		    call 'erlang':'*'
			(_cor9, 4)
		in  let <_cor7> =
			primop 'bs_init_writable'
			    (_cor8)
		    in  let <_cor14> =
			    %% Line 15836
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor13,_cor12) ->
					  case <_cor13,_cor12> of
					    <[C|_cor11],_79199> when 'true' ->
						let <_39537> =
						    ( #{#<_cor12>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor11, _39537)
					    <[],_48026> when 'true' ->
						_cor12
					    ( <_82692,_53533> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13,_cor12})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor0, _cor7)
			      -| ['list_comprehension'] )
			in  let <_cor3> =
				%% Line 15836
				call 'erlang':'length'
				    (_cor0)
			    in  let <_cor4> =
				    %% Line 15836
				    call 'erlang':'+'
					(1, _cor3)
				in  let <_cor5> =
					%% Line 15836
					call 'erlang':'rem'
					    (_cor4, 2)
				    in  let <_cor6> =
					    %% Line 15836
					    call 'erlang':'*'
						(_cor5, 32)
					in  let <_cor16> =
						%% Line 15835
						#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor1>(32,1,'integer',['signed'|['native']]),
						  #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						  #<_cor14>(%% Line 15836
							    'all',8,'binary',['unsigned'|['big']]),
						  #<%% Line 15836
						    0>(_cor6,1,'integer',['unsigned'|['big']])}#
					    in  let <Port> =
						    call 'erlang':'get'
							('opengl_port')
						in  do  ( call 'erlang':'port_control'
							      (Port, %% Line 15835
								     5791, _cor16)
							  -| ['result_not_wanted'] )
							'ok'
'programUniform2i'/4 =
    %% Line 15841
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15842
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15842
				 5792, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform2iv'/3 =
    %% Line 15847
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15848
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15849
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2}|_cor5],_48667> when 'true' ->
					let <_42267> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _42267)
				    ( <[_cor4|_cor5],_81692> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_7909> when 'true' ->
					_cor6
				    ( <_53066,_1078> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15848
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15849
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15848
					     5793, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform2f'/4 =
    %% Line 15854
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15855
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15855
				 5794, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform2fv'/3 =
    %% Line 15860
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15861
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15862
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2}|_cor5],_55753> when 'true' ->
					let <_19025> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _19025)
				    ( <[_cor4|_cor5],_72494> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_82362> when 'true' ->
					_cor6
				    ( <_32696,_79212> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15861
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15862
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15861
					     5795, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform2d'/4 =
    %% Line 15867
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15868
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15868
				 5796, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform2dv'/3 =
    %% Line 15873
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15874
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15875
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2}|_cor5],_49286> when 'true' ->
					let <_34062> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _34062)
				    ( <[_cor4|_cor5],_38003> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_52716> when 'true' ->
					_cor6
				    ( <_58376,_24220> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15874
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15875
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15874
					     5797, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform2ui'/4 =
    %% Line 15880
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 15881
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15881
				 5798, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform2uiv'/3 =
    %% Line 15886
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15887
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15888
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2}|_cor5],_81475> when 'true' ->
					let <_11810> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _11810)
				    ( <[_cor4|_cor5],_71202> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_3672> when 'true' ->
					_cor6
				    ( <_89700,_55162> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15887
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15888
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15887
					     5799, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform3i'/5 =
    %% Line 15893
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15894
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15894
				 5800, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform3iv'/3 =
    %% Line 15899
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15900
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15901
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3}|_cor5],_7625> when 'true' ->
					let <_59056> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']]),
						#<V3>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _59056)
				    ( <[_cor4|_cor5],_90267> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_73693> when 'true' ->
					_cor6
				    ( <_356,_65102> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15900
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15901
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15900
					     5801, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform3f'/5 =
    %% Line 15906
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15907
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15907
				 5802, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform3fv'/3 =
    %% Line 15912
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15913
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15914
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3}|_cor5],_69645> when 'true' ->
					let <_15590> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _15590)
				    ( <[_cor4|_cor5],_34599> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_91733> when 'true' ->
					_cor6
				    ( <_8898,_18501> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15913
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15914
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15913
					     5803, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform3d'/5 =
    %% Line 15919
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15920
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15920
				 5804, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform3dv'/3 =
    %% Line 15925
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15926
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15927
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3}|_cor5],_7430> when 'true' ->
					let <_87592> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _87592)
				    ( <[_cor4|_cor5],_69704> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_87709> when 'true' ->
					_cor6
				    ( <_21031,_45500> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15926
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15927
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15926
					     5805, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform3ui'/5 =
    %% Line 15932
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15933
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15933
				 5806, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform3uiv'/3 =
    %% Line 15938
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15939
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15940
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3}|_cor5],_49840> when 'true' ->
					let <_12969> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']]),
						#<V3>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _12969)
				    ( <[_cor4|_cor5],_77050> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_55706> when 'true' ->
					_cor6
				    ( <_56353,_64721> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15939
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15940
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15939
					     5807, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform4i'/6 =
    %% Line 15945
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 15946
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15946
				 5808, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform4iv'/3 =
    %% Line 15951
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15952
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15953
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_14821> when 'true' ->
					let <_3544> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']]),
						#<V3>(32,1,'integer',['signed'|['native']]),
						#<V4>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _3544)
				    ( <[_cor4|_cor5],_8869> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_52758> when 'true' ->
					_cor6
				    ( <_31564,_19604> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15952
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15953
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15952
					     5809, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform4f'/6 =
    %% Line 15958
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 15959
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15959
				 5810, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform4fv'/3 =
    %% Line 15964
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15965
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15966
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_10725> when 'true' ->
					let <_16908> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _16908)
				    ( <[_cor4|_cor5],_81423> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_60336> when 'true' ->
					_cor6
				    ( <_84298,_43550> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15965
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15966
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15965
					     5811, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform4d'/6 =
    %% Line 15971
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 15972
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15972
				 5812, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform4dv'/3 =
    %% Line 15977
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15978
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15979
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_22642> when 'true' ->
					let <_33450> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _33450)
				    ( <[_cor4|_cor5],_9223> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_93280> when 'true' ->
					_cor6
				    ( <_18648,_43555> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15978
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(%% Line 15979
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15978
					     5813, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniform4ui'/6 =
    %% Line 15984
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 15985
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 15985
				 5814, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'programUniform4uiv'/3 =
    %% Line 15990
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 15991
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor8> =
		    %% Line 15992
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor7,_cor6) ->
				  case <_cor7,_cor6> of
				    <[{V1,V2,V3,V4}|_cor5],_44030> when 'true' ->
					let <_46339> =
					    ( #{#<_cor6>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['unsigned'|['native']]),
						#<V2>(32,1,'integer',['unsigned'|['native']]),
						#<V3>(32,1,'integer',['unsigned'|['native']]),
						#<V4>(32,1,'integer',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor5, _46339)
				    ( <[_cor4|_cor5],_7147> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor5, _cor6)
				      -| ['compiler_generated'] )
				    <[],_47844> when 'true' ->
					_cor6
				    ( <_31069,_26450> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7,_cor6})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor3)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 15991
			#{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor1>(32,1,'integer',['signed'|['native']]),
			  #<_cor9>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(%% Line 15992
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15991
					     5815, _cor10)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2fv'/4 =
    %% Line 15997
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 15998
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 15999
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4}|_cor6],_13363> when 'true' ->
					let <_41747> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _41747)
				    ( <[_cor5|_cor6],_75556> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_44416> when 'true' ->
					_cor7
				    ( <_91562,_19355> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 15998
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 15999
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 15998
					     5816, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3fv'/4 =
    %% Line 16004
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16005
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16006
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9}|_cor6],_38710> when 'true' ->
					let <_40304> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _40304)
				    ( <[_cor5|_cor6],_90586> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_33276> when 'true' ->
					_cor7
				    ( <_28539,_2834> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16005
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16006
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16005
					     5817, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4fv'/4 =
    %% Line 16011
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16012
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16013
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}|_cor6],_87572> when 'true' ->
					let <_32564> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']]),
						#<V13>(32,1,'float',['unsigned'|['native']]),
						#<V14>(32,1,'float',['unsigned'|['native']]),
						#<V15>(32,1,'float',['unsigned'|['native']]),
						#<V16>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _32564)
				    ( <[_cor5|_cor6],_22748> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_36799> when 'true' ->
					_cor7
				    ( <_90668,_62342> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16012
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16013
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16012
					     5818, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2dv'/4 =
    %% Line 16018
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16019
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16020
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4}|_cor6],_4632> when 'true' ->
					let <_42630> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _42630)
				    ( <[_cor5|_cor6],_13493> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_87973> when 'true' ->
					_cor7
				    ( <_24696,_68631> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16019
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16020
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16019
					     5819, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3dv'/4 =
    %% Line 16025
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16026
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16027
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9}|_cor6],_37816> when 'true' ->
					let <_35261> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _35261)
				    ( <[_cor5|_cor6],_68787> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_83012> when 'true' ->
					_cor7
				    ( <_55504,_84286> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16026
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16027
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16026
					     5820, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4dv'/4 =
    %% Line 16032
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16033
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16034
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16}|_cor6],_30170> when 'true' ->
					let <_82687> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']]),
						#<V13>(64,1,'float',['unsigned'|['native']]),
						#<V14>(64,1,'float',['unsigned'|['native']]),
						#<V15>(64,1,'float',['unsigned'|['native']]),
						#<V16>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _82687)
				    ( <[_cor5|_cor6],_68116> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_12533> when 'true' ->
					_cor7
				    ( <_81269,_743> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16033
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16034
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16033
					     5821, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2x3fv'/4 =
    %% Line 16039
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16040
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16041
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor6],_85392> when 'true' ->
					let <_44851> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _44851)
				    ( <[_cor5|_cor6],_87378> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_70897> when 'true' ->
					_cor7
				    ( <_71172,_27469> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16040
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16041
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16040
					     5822, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3x2fv'/4 =
    %% Line 16046
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16047
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16048
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor6],_79750> when 'true' ->
					let <_3322> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _3322)
				    ( <[_cor5|_cor6],_55649> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_19248> when 'true' ->
					_cor7
				    ( <_63101,_56142> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16047
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16048
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16047
					     5823, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2x4fv'/4 =
    %% Line 16053
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16054
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16055
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor6],_30503> when 'true' ->
					let <_87544> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _87544)
				    ( <[_cor5|_cor6],_15852> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_40212> when 'true' ->
					_cor7
				    ( <_29930,_26502> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16054
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16055
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16054
					     5824, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4x2fv'/4 =
    %% Line 16060
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16061
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16062
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor6],_40596> when 'true' ->
					let <_13305> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _13305)
				    ( <[_cor5|_cor6],_3656> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_47745> when 'true' ->
					_cor7
				    ( <_50703,_38119> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16061
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16062
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16061
					     5825, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3x4fv'/4 =
    %% Line 16067
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16068
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16069
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor6],_8803> when 'true' ->
					let <_15902> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _15902)
				    ( <[_cor5|_cor6],_29695> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_84629> when 'true' ->
					_cor7
				    ( <_68457,_25131> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16068
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16069
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16068
					     5826, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4x3fv'/4 =
    %% Line 16074
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16075
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16076
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor6],_8296> when 'true' ->
					let <_47533> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']]),
						#<V5>(32,1,'float',['unsigned'|['native']]),
						#<V6>(32,1,'float',['unsigned'|['native']]),
						#<V7>(32,1,'float',['unsigned'|['native']]),
						#<V8>(32,1,'float',['unsigned'|['native']]),
						#<V9>(32,1,'float',['unsigned'|['native']]),
						#<V10>(32,1,'float',['unsigned'|['native']]),
						#<V11>(32,1,'float',['unsigned'|['native']]),
						#<V12>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _47533)
				    ( <[_cor5|_cor6],_27552> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_52710> when 'true' ->
					_cor7
				    ( <_22973,_64166> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16075
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(24,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor9>(%% Line 16076
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16075
					     5827, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2x3dv'/4 =
    %% Line 16081
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16082
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16083
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor6],_31310> when 'true' ->
					let <_73116> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _73116)
				    ( <[_cor5|_cor6],_72674> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_47492> when 'true' ->
					_cor7
				    ( <_46186,_49461> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16082
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16083
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16082
					     5828, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3x2dv'/4 =
    %% Line 16088
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16089
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16090
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6}|_cor6],_32046> when 'true' ->
					let <_92919> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _92919)
				    ( <[_cor5|_cor6],_36125> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_13464> when 'true' ->
					_cor7
				    ( <_12405,_88461> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16089
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16090
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16089
					     5829, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix2x4dv'/4 =
    %% Line 16095
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16096
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16097
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor6],_6596> when 'true' ->
					let <_33672> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _33672)
				    ( <[_cor5|_cor6],_20365> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_39371> when 'true' ->
					_cor7
				    ( <_91930,_5605> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16096
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16097
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16096
					     5830, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4x2dv'/4 =
    %% Line 16102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16103
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16104
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8}|_cor6],_29369> when 'true' ->
					let <_17234> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _17234)
				    ( <[_cor5|_cor6],_12076> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_21575> when 'true' ->
					_cor7
				    ( <_57569,_21067> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16103
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16104
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16103
					     5831, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix3x4dv'/4 =
    %% Line 16109
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16110
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16111
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor6],_40168> when 'true' ->
					let <_39668> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _39668)
				    ( <[_cor5|_cor6],_12016> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_34923> when 'true' ->
					_cor7
				    ( <_71419,_45413> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16110
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16111
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16110
					     5832, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'programUniformMatrix4x3dv'/4 =
    %% Line 16116
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16117
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor4> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor9> =
		    %% Line 16118
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor8,_cor7) ->
				  case <_cor8,_cor7> of
				    <[{V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12}|_cor6],_37757> when 'true' ->
					let <_11261> =
					    ( #{#<_cor7>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']]),
						#<V3>(64,1,'float',['unsigned'|['native']]),
						#<V4>(64,1,'float',['unsigned'|['native']]),
						#<V5>(64,1,'float',['unsigned'|['native']]),
						#<V6>(64,1,'float',['unsigned'|['native']]),
						#<V7>(64,1,'float',['unsigned'|['native']]),
						#<V8>(64,1,'float',['unsigned'|['native']]),
						#<V9>(64,1,'float',['unsigned'|['native']]),
						#<V10>(64,1,'float',['unsigned'|['native']]),
						#<V11>(64,1,'float',['unsigned'|['native']]),
						#<V12>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor6, _11261)
				    ( <[_cor5|_cor6],_19241> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor6, _cor7)
				      -| ['compiler_generated'] )
				    <[],_44401> when 'true' ->
					_cor7
				    ( <_69155,_21923> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8,_cor7})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor4)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 16117
			#{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor2>(32,1,'integer',['signed'|['native']]),
			  #<_cor1>(8,1,'integer',['unsigned'|['native']]),
			  #<0>(56,1,'integer',['unsigned'|['big']]),
			  #<_cor10>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>(%% Line 16118
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16117
					     5833, _cor11)
				  -| ['result_not_wanted'] )
				'ok'
'validateProgramPipeline'/1 =
    %% Line 16137
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 16138
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16138
				 5834, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'getProgramPipelineInfoLog'/2 =
    %% Line 16154
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16155
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16155
				 5835, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'vertexAttribL1d'/2 =
    %% Line 16161
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16162
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16162
				 5836, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribL2d'/3 =
    %% Line 16168
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 16169
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16169
				 5837, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribL3d'/4 =
    %% Line 16175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 16176
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16176
				 5838, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribL4d'/5 =
    %% Line 16182
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 16183
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor3>(64,1,'float',['unsigned'|['native']]),
	      #<_cor2>(64,1,'float',['unsigned'|['native']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16183
				 5839, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'vertexAttribL1dv'/2 =
    %% Line 16187
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X}> when 'true' ->
	      apply 'vertexAttribL1d'/2
		  (_cor1, X)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribL1dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribL2dv'/2 =
    %% Line 16191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y}> when 'true' ->
	      apply 'vertexAttribL2d'/3
		  (_cor1, X, Y)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribL2dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribL3dv'/2 =
    %% Line 16195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z}> when 'true' ->
	      apply 'vertexAttribL3d'/4
		  (_cor1, X, Y, Z)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribL3dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribL4dv'/2 =
    %% Line 16199
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{X,Y,Z,W}> when 'true' ->
	      apply 'vertexAttribL4d'/5
		  (_cor1, X, Y, Z, W)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'vertexAttribL4dv',2}}] )
	    -| ['compiler_generated'] )
	end
'vertexAttribLPointer'/5 =
    %% Line 16205
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Index,Size,Type,Stride,Pointer>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 16206
		  #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['signed'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 16206
				       5840, _cor5)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 16207
	  <Index,Size,Type,Stride,Pointer> when 'true' ->
	      do  %% Line 16208
		  apply 'send_bin'/1
		      (_cor0)
		  let <_cor6> =
		      %% Line 16209
		      #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor3>(32,1,'integer',['signed'|['native']]),
			#<_cor2>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 16209
					   5841, _cor6)
				-| ['result_not_wanted'] )
			      'ok'
	end
'getVertexAttribLdv'/2 =
    %% Line 16215
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16216
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16216
				 5842, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'viewportArrayv'/2 =
    %% Line 16222
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 16223
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 16224
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_26631> when 'true' ->
					let <_16066> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'float',['unsigned'|['native']]),
						#<V2>(32,1,'float',['unsigned'|['native']]),
						#<V3>(32,1,'float',['unsigned'|['native']]),
						#<V4>(32,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _16066)
				    ( <[_cor3|_cor4],_28449> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_54893> when 'true' ->
					_cor5
				    ( <_40210,_31109> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 16223
			#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 16224
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16223
					     5843, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'viewportIndexedf'/5 =
    %% Line 16262
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 16263
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'float',['unsigned'|['native']]),
	      #<_cor2>(32,1,'float',['unsigned'|['native']]),
	      #<_cor1>(32,1,'float',['unsigned'|['native']]),
	      #<_cor0>(32,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16263
				 5844, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'viewportIndexedfv'/2 =
    %% Line 16268
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 16269
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'float',['unsigned'|['native']]),
		    #<V2>(32,1,'float',['unsigned'|['native']]),
		    #<V3>(32,1,'float',['unsigned'|['native']]),
		    #<V4>(32,1,'float',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 16269
				       5845, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'viewportIndexedfv',2}}] )
	    -| ['compiler_generated'] )
	end
'scissorArrayv'/2 =
    %% Line 16275
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 16276
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 16277
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2,V3,V4}|_cor4],_74961> when 'true' ->
					let <_31201> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(32,1,'integer',['signed'|['native']]),
						#<V2>(32,1,'integer',['signed'|['native']]),
						#<V3>(32,1,'integer',['signed'|['native']]),
						#<V4>(32,1,'integer',['signed'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _31201)
				    ( <[_cor3|_cor4],_35365> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_977> when 'true' ->
					_cor5
				    ( <_54802,_4890> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 16276
			#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<_cor7>(%% Line 16277
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16276
					     5846, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'scissorIndexed'/5 =
    %% Line 16283
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 16284
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16284
				 5847, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'scissorIndexedv'/2 =
    %% Line 16290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,{V1,V2,V3,V4}> when 'true' ->
	      let <_cor2> =
		  %% Line 16291
		  #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
		    #<V1>(32,1,'integer',['signed'|['native']]),
		    #<V2>(32,1,'integer',['signed'|['native']]),
		    #<V3>(32,1,'integer',['signed'|['native']]),
		    #<V4>(32,1,'integer',['signed'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 16291
				       5848, _cor2)
			    -| ['result_not_wanted'] )
			  'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'scissorIndexedv',2}}] )
	    -| ['compiler_generated'] )
	end
'depthRangeArrayv'/2 =
    %% Line 16297
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 16298
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		primop 'bs_init_writable'
		    (256)
	    in  let <_cor7> =
		    %% Line 16299
		    ( letrec
			  'lbc$^0'/2 =
			      fun (_cor6,_cor5) ->
				  case <_cor6,_cor5> of
				    <[{V1,V2}|_cor4],_81765> when 'true' ->
					let <_10422> =
					    ( #{#<_cor5>('all',1,'binary',[]),
						#<V1>(64,1,'float',['unsigned'|['native']]),
						#<V2>(64,1,'float',['unsigned'|['native']])}#
					      -| ['compiler_generated','single_use'] )
					in  apply 'lbc$^0'/2
						(_cor4, _10422)
				    ( <[_cor3|_cor4],_13244> when 'true' ->
					  apply 'lbc$^0'/2
					      (_cor4, _cor5)
				      -| ['compiler_generated'] )
				    <[],_65535> when 'true' ->
					_cor5
				    ( <_17645,_47367> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6,_cor5})
					    -| [{'function_name',{'lbc$^0',2}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lbc$^0'/2
			      (_cor0, _cor2)
		      -| ['list_comprehension'] )
		in  let <_cor9> =
			%% Line 16298
			#{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor8>(32,1,'integer',['unsigned'|['native']]),
			  #<0>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor7>(%% Line 16299
				   'all',8,'binary',['unsigned'|['big']])}#
		    in  let <Port> =
			    call 'erlang':'get'
				('opengl_port')
			in  do  ( call 'erlang':'port_control'
				      (Port, %% Line 16298
					     5849, _cor9)
				  -| ['result_not_wanted'] )
				'ok'
'depthRangeIndexed'/3 =
    %% Line 16305
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 16306
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<0>(32,1,'integer',['unsigned'|['big']]),
	      #<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16306
				 5850, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'getFloati_v'/2 =
    %% Line 16311
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16312
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16312
				 5851, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getDoublei_v'/2 =
    %% Line 16317
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16318
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16318
				 5852, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'debugMessageControlARB'/5 =
    %% Line 16324
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 16325
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor10> =
		%% Line 16326
		call 'erlang':'length'
		    (_cor1)
	    in  let <_cor9> =
		    call 'erlang':'*'
			(_cor10, 4)
		in  let <_cor8> =
			primop 'bs_init_writable'
			    (_cor9)
		    in  let <_cor15> =
			    %% Line 16326
			    ( letrec
				  'lbc$^0'/2 =
				      fun (_cor14,_cor13) ->
					  case <_cor14,_cor13> of
					    <[C|_cor12],_89439> when 'true' ->
						let <_72265> =
						    ( #{#<_cor13>('all',1,'binary',[]),
							#<C>(32,1,'integer',['unsigned'|['native']])}#
						      -| ['compiler_generated','single_use'] )
						in  apply 'lbc$^0'/2
							(_cor12, _72265)
					    <[],_56948> when 'true' ->
						_cor13
					    ( <_15514,_21712> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor14,_cor13})
						    -| [{'function_name',{'lbc$^0',2}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lbc$^0'/2
				      (_cor1, _cor8)
			      -| ['list_comprehension'] )
			in  let <_cor5> =
				%% Line 16326
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor6> =
				    %% Line 16326
				    call 'erlang':'rem'
					(_cor5, 2)
				in  let <_cor7> =
					%% Line 16326
					call 'erlang':'*'
					    (_cor6, 32)
				    in  let <_cor17> =
					    %% Line 16325
					    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor16>(32,1,'integer',['unsigned'|['native']]),
					      #<_cor15>(%% Line 16326
							'all',8,'binary',['unsigned'|['big']]),
					      #<%% Line 16326
						0>(_cor7,1,'integer',['unsigned'|['big']]),
					      #<_cor0>(%% Line 16326
						       8,1,'integer',['unsigned'|['native']])}#
					in  let <Port> =
						call 'erlang':'get'
						    ('opengl_port')
					    in  do  ( call 'erlang':'port_control'
							  (Port, %% Line 16325
								 5853, _cor17)
						      -| ['result_not_wanted'] )
						    'ok'
'debugMessageInsertARB'/5 =
    %% Line 16332
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 16333
	    call 'erlang':'list_to_binary'
		([_cor0|[0]])
	in  let <_cor5> =
		%% Line 16333
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 16333
		    call 'erlang':'+'
			(_cor5, 1)
		in  let <_cor7> =
			%% Line 16333
			call 'erlang':'rem'
			    (_cor6, 8)
		    in  let <_cor8> =
			    %% Line 16333
			    call 'erlang':'-'
				(8, _cor7)
			in  let <_cor9> =
				%% Line 16333
				call 'erlang':'rem'
				    (_cor8, 8)
			    in  let <_cor11> =
				    %% Line 16333
				    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
				      #<_cor10>('all',8,'binary',['unsigned'|['big']]),
				      #<0>(_cor9,1,'integer',['unsigned'|['big']])}#
				in  let <Port> =
					call 'erlang':'get'
					    ('opengl_port')
				    in  do  ( call 'erlang':'port_control'
						  (Port, %% Line 16333
							 5854, _cor11)
					      -| ['result_not_wanted'] )
					    'ok'
'getDebugMessageLogARB'/2 =
    %% Line 16339
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16340
	    #{#<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16340
				 5855, _cor2)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'getGraphicsResetStatusARB'/0 =
    %% Line 16346
    fun () ->
	let <Port> =
	    call 'erlang':'get'
		('opengl_port')
	in  do  ( call 'erlang':'port_control'
		      (Port, %% Line 16347
			     5856, %% Line 16347
				   #{}#)
		  -| ['result_not_wanted'] )
		apply 'rec'/0
		    ()
'drawArraysInstancedBaseInstance'/5 =
    %% Line 16369
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 16370
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16370
				 5857, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'drawElementsInstancedBaseInstance'/6 =
    %% Line 16392
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices,Primcount,Baseinstance>
	      when call 'erlang':'is_integer'
		    (_cor2) ->
	      let <_cor6> =
		  %% Line 16393
		  #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor4>(32,1,'integer',['signed'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 16393
				       5858, _cor6)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 16394
	  <Mode,Count,Type,Indices,Primcount,Baseinstance> when 'true' ->
	      do  %% Line 16395
		  apply 'send_bin'/1
		      (_cor2)
		  let <_cor7> =
		      %% Line 16396
		      #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
			#<_cor4>(32,1,'integer',['signed'|['native']]),
			#<_cor3>(32,1,'integer',['unsigned'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']]),
			#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 16396
					   5859, _cor7)
				-| ['result_not_wanted'] )
			      'ok'
	end
'drawElementsInstancedBaseVertexBaseInstance'/7 =
    %% Line 16416
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mode,Count,Type,Indices,Primcount,Basevertex,Baseinstance>
	      when call 'erlang':'is_integer'
		    (_cor3) ->
	      let <_cor7> =
		  %% Line 16417
		  #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor5>(32,1,'integer',['signed'|['native']]),
		    #<_cor4>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor3>(32,1,'integer',['unsigned'|['native']]),
		    #<_cor2>(32,1,'integer',['signed'|['native']]),
		    #<_cor1>(32,1,'integer',['signed'|['native']]),
		    #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	      in  let <Port> =
		      call 'erlang':'get'
			  ('opengl_port')
		  in  do  ( call 'erlang':'port_control'
				(Port, %% Line 16417
				       5860, _cor7)
			    -| ['result_not_wanted'] )
			  'ok'
	  %% Line 16418
	  <Mode,Count,Type,Indices,Primcount,Basevertex,Baseinstance> when 'true' ->
	      do  %% Line 16419
		  apply 'send_bin'/1
		      (_cor3)
		  let <_cor8> =
		      %% Line 16420
		      #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
			#<_cor5>(32,1,'integer',['signed'|['native']]),
			#<_cor4>(32,1,'integer',['unsigned'|['native']]),
			#<_cor2>(32,1,'integer',['signed'|['native']]),
			#<_cor1>(32,1,'integer',['signed'|['native']]),
			#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
		  in  let <Port> =
			  call 'erlang':'get'
			      ('opengl_port')
		      in  do  ( call 'erlang':'port_control'
				    (Port, %% Line 16420
					   5861, _cor8)
				-| ['result_not_wanted'] )
			      'ok'
	end
'drawTransformFeedbackInstanced'/3 =
    %% Line 16426
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 16427
	    #{#<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16427
				 5862, _cor3)
		      -| ['result_not_wanted'] )
		    'ok'
'drawTransformFeedbackStreamInstanced'/4 =
    %% Line 16433
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 16434
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16434
				 5863, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'getInternalformativ'/4 =
    %% Line 16440
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 16441
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16441
				 5864, _cor4)
		      -| ['result_not_wanted'] )
		    apply 'rec'/0
			()
'bindImageTexture'/7 =
    %% Line 16502
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 16503
	    #{#<_cor6>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(8,1,'integer',['unsigned'|['native']]),
	      #<0>(24,1,'integer',['unsigned'|['big']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16503
				 5865, _cor7)
		      -| ['result_not_wanted'] )
		    'ok'
'memoryBarrier'/1 =
    %% Line 16629
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 16630
	    #{#<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16630
				 5866, _cor1)
		      -| ['result_not_wanted'] )
		    'ok'
'texStorage1D'/4 =
    %% Line 16662
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 16663
	    #{#<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16663
				 5867, _cor4)
		      -| ['result_not_wanted'] )
		    'ok'
'texStorage2D'/5 =
    %% Line 16707
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 16708
	    #{#<_cor4>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor3>(32,1,'integer',['signed'|['native']]),
	      #<_cor2>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16708
				 5868, _cor5)
		      -| ['result_not_wanted'] )
		    'ok'
'texStorage3D'/6 =
    %% Line 16750
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 16751
	    #{#<_cor5>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor4>(32,1,'integer',['signed'|['native']]),
	      #<_cor3>(32,1,'integer',['unsigned'|['native']]),
	      #<_cor2>(32,1,'integer',['signed'|['native']]),
	      #<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['signed'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16751
				 5869, _cor6)
		      -| ['result_not_wanted'] )
		    'ok'
'depthBoundsEXT'/2 =
    %% Line 16757
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16758
	    #{#<_cor1>(64,1,'float',['unsigned'|['native']]),
	      #<_cor0>(64,1,'float',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16758
				 5870, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'stencilClearTagEXT'/2 =
    %% Line 16764
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 16765
	    #{#<_cor1>(32,1,'integer',['signed'|['native']]),
	      #<_cor0>(32,1,'integer',['unsigned'|['native']])}#
	in  let <Port> =
		call 'erlang':'get'
		    ('opengl_port')
	    in  do  ( call 'erlang':'port_control'
			  (Port, %% Line 16765
				 5871, _cor2)
		      -| ['result_not_wanted'] )
		    'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gl', _cor0)
end