module 'wxRegion' ['Xor'/2,
		   'Xor'/5,
		   'clear'/1,
		   'contains'/2,
		   'contains'/3,
		   'contains'/5,
		   'convertToBitmap'/1,
		   'destroy'/1,
		   'getBox'/1,
		   'intersect'/2,
		   'intersect'/5,
		   'isEmpty'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'new'/0,
		   'new'/1,
		   'new'/2,
		   'new'/4,
		   'offset'/2,
		   'offset'/3,
		   'parent_class'/1,
		   'subtract'/2,
		   'subtract'/5,
		   'union'/2,
		   'union'/3,
		   'union'/4,
		   'union'/5]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxRegion',0}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxRegion',{'remote_type',39,[{'atom',39,'wx'}|[{'atom',39,'wx_object'}|[[]]]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'new',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'type',41,'wxRegion',[]}]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'new',1},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'Bmp'}]}|[{'type',51,'wxRegion',[]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Bmp'}|[{'remote_type',52,[{'atom',52,'wxBitmap'}|[{'atom',52,'wxBitmap'}|[[]]]]}]]]]}]]]}|[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Rect'}]}|[{'type',53,'wxRegion',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Rect'}|[{'type',54,'tuple',[{'ann_type',54,[{'var',54,'X'}|[{'type',54,'integer',[]}]]}|[{'ann_type',54,[{'var',54,'Y'}|[{'type',54,'integer',[]}]]}|[{'ann_type',54,[{'var',54,'W'}|[{'type',54,'integer',[]}]]}|[{'ann_type',54,[{'var',54,'H'}|[{'type',54,'integer',[]}]]}]]]]}]]]]}]]]}]]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'new',2},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'TopLeft'}|[{'var',65,'BottomRight'}]]}|[{'type',65,'wxRegion',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'TopLeft'}|[{'type',66,'tuple',[{'ann_type',66,[{'var',66,'X'}|[{'type',66,'integer',[]}]]}|[{'ann_type',66,[{'var',66,'Y'}|[{'type',66,'integer',[]}]]}]]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'BottomRight'}|[{'type',66,'tuple',[{'ann_type',66,[{'var',66,'X'}|[{'type',66,'integer',[]}]]}|[{'ann_type',66,[{'var',66,'Y'}|[{'type',66,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'new',4},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'X'}|[{'var',73,'Y'}|[{'var',73,'W'}|[{'var',73,'H'}]]]]}|[{'type',73,'wxRegion',[]}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'X'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Y'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'W'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'H'}|[{'type',74,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'clear',1},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'This'}]}|[{'atom',81,'ok'}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'This'}|[{'type',82,'wxRegion',[]}]]]]}]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'contains',2},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'This'}|[{'var',94,'Pt'}]]}|[{'remote_type',94,[{'atom',94,'wx'}|[{'atom',94,'wx_enum'}|[[]]]]}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'This'}|[{'type',95,'wxRegion',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Pt'}|[{'type',95,'tuple',[{'ann_type',95,[{'var',95,'X'}|[{'type',95,'integer',[]}]]}|[{'ann_type',95,[{'var',95,'Y'}|[{'type',95,'integer',[]}]]}]]}]]]]}]]]]}|[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'This'}|[{'var',96,'Rect'}]]}|[{'remote_type',96,[{'atom',96,'wx'}|[{'atom',96,'wx_enum'}|[[]]]]}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'This'}|[{'type',97,'wxRegion',[]}]]]]}|[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Rect'}|[{'type',97,'tuple',[{'ann_type',97,[{'var',97,'X'}|[{'type',97,'integer',[]}]]}|[{'ann_type',97,[{'var',97,'Y'}|[{'type',97,'integer',[]}]]}|[{'ann_type',97,[{'var',97,'W'}|[{'type',97,'integer',[]}]]}|[{'ann_type',97,[{'var',97,'H'}|[{'type',97,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'contains',3},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'This'}|[{'var',111,'X'}|[{'var',111,'Y'}]]]}|[{'remote_type',111,[{'atom',111,'wx'}|[{'atom',111,'wx_enum'}|[[]]]]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'This'}|[{'type',112,'wxRegion',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'X'}|[{'type',112,'integer',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Y'}|[{'type',112,'integer',[]}]]]]}]]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'contains',5},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'This'}|[{'var',121,'X'}|[{'var',121,'Y'}|[{'var',121,'W'}|[{'var',121,'H'}]]]]]}|[{'remote_type',121,[{'atom',121,'wx'}|[{'atom',121,'wx_enum'}|[[]]]]}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'This'}|[{'type',122,'wxRegion',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'X'}|[{'type',122,'integer',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Y'}|[{'type',122,'integer',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'W'}|[{'type',122,'integer',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'H'}|[{'type',122,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'convertToBitmap',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'This'}]}|[{'remote_type',130,[{'atom',130,'wxBitmap'}|[{'atom',130,'wxBitmap'}|[[]]]]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'This'}|[{'type',131,'wxRegion',[]}]]]]}]]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'getBox',1},[{'type',138,'bounded_fun',[{'type',138,'fun',[{'type',138,'product',[{'var',138,'This'}]}|[{'type',138,'tuple',[{'ann_type',138,[{'var',138,'X'}|[{'type',138,'integer',[]}]]}|[{'ann_type',138,[{'var',138,'Y'}|[{'type',138,'integer',[]}]]}|[{'ann_type',138,[{'var',138,'W'}|[{'type',138,'integer',[]}]]}|[{'ann_type',138,[{'var',138,'H'}|[{'type',138,'integer',[]}]]}]]]]}]]}|[[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'This'}|[{'type',139,'wxRegion',[]}]]]]}]]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'intersect',2},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'This'}|[{'var',150,'Region'}]]}|[{'type',150,'boolean',[]}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'This'}|[{'type',151,'wxRegion',[]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Region'}|[{'type',151,'wxRegion',[]}]]]]}]]]]}|[{'type',152,'bounded_fun',[{'type',152,'fun',[{'type',152,'product',[{'var',152,'This'}|[{'var',152,'Rect'}]]}|[{'type',152,'boolean',[]}]]}|[[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'This'}|[{'type',153,'wxRegion',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Rect'}|[{'type',153,'tuple',[{'ann_type',153,[{'var',153,'X'}|[{'type',153,'integer',[]}]]}|[{'ann_type',153,[{'var',153,'Y'}|[{'type',153,'integer',[]}]]}|[{'ann_type',153,[{'var',153,'W'}|[{'type',153,'integer',[]}]]}|[{'ann_type',153,[{'var',153,'H'}|[{'type',153,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'intersect',5},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'This'}|[{'var',166,'X'}|[{'var',166,'Y'}|[{'var',166,'W'}|[{'var',166,'H'}]]]]]}|[{'type',166,'boolean',[]}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'This'}|[{'type',167,'wxRegion',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'X'}|[{'type',167,'integer',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Y'}|[{'type',167,'integer',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'W'}|[{'type',167,'integer',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'H'}|[{'type',167,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'isEmpty',1},[{'type',175,'bounded_fun',[{'type',175,'fun',[{'type',175,'product',[{'var',175,'This'}]}|[{'type',175,'boolean',[]}]]}|[[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'This'}|[{'type',176,'wxRegion',[]}]]]]}]]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'subtract',2},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'This'}|[{'var',187,'Region'}]]}|[{'type',187,'boolean',[]}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'This'}|[{'type',188,'wxRegion',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Region'}|[{'type',188,'wxRegion',[]}]]]]}]]]]}|[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'This'}|[{'var',189,'Rect'}]]}|[{'type',189,'boolean',[]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'This'}|[{'type',190,'wxRegion',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Rect'}|[{'type',190,'tuple',[{'ann_type',190,[{'var',190,'X'}|[{'type',190,'integer',[]}]]}|[{'ann_type',190,[{'var',190,'Y'}|[{'type',190,'integer',[]}]]}|[{'ann_type',190,[{'var',190,'W'}|[{'type',190,'integer',[]}]]}|[{'ann_type',190,[{'var',190,'H'}|[{'type',190,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'subtract',5},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}|[{'var',203,'X'}|[{'var',203,'Y'}|[{'var',203,'W'}|[{'var',203,'H'}]]]]]}|[{'type',203,'boolean',[]}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxRegion',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'X'}|[{'type',204,'integer',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Y'}|[{'type',204,'integer',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'W'}|[{'type',204,'integer',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'H'}|[{'type',204,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'offset',2},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'This'}|[{'var',212,'Pt'}]]}|[{'type',212,'boolean',[]}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'This'}|[{'type',213,'wxRegion',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Pt'}|[{'type',213,'tuple',[{'ann_type',213,[{'var',213,'X'}|[{'type',213,'integer',[]}]]}|[{'ann_type',213,[{'var',213,'Y'}|[{'type',213,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'offset',3},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}|[{'var',221,'X'}|[{'var',221,'Y'}]]]}|[{'type',221,'boolean',[]}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxRegion',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'X'}|[{'type',222,'integer',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Y'}|[{'type',222,'integer',[]}]]]]}]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'union',2},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'This'}|[{'var',234,'Region'}]]}|[{'type',234,'boolean',[]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'This'}|[{'type',235,'wxRegion',[]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Region'}|[{'type',235,'union',[{'type',235,'wxRegion',[]}|[{'remote_type',235,[{'atom',235,'wxBitmap'}|[{'atom',235,'wxBitmap'}|[[]]]]}]]}]]]]}]]]]}|[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'This'}|[{'var',236,'Rect'}]]}|[{'type',236,'boolean',[]}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'This'}|[{'type',237,'wxRegion',[]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Rect'}|[{'type',237,'tuple',[{'ann_type',237,[{'var',237,'X'}|[{'type',237,'integer',[]}]]}|[{'ann_type',237,[{'var',237,'Y'}|[{'type',237,'integer',[]}]]}|[{'ann_type',237,[{'var',237,'W'}|[{'type',237,'integer',[]}]]}|[{'ann_type',237,[{'var',237,'H'}|[{'type',237,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'union',3},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'This'}|[{'var',255,'Bmp'}|[{'var',255,'Transp'}]]]}|[{'type',255,'boolean',[]}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'This'}|[{'type',256,'wxRegion',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Bmp'}|[{'remote_type',256,[{'atom',256,'wxBitmap'}|[{'atom',256,'wxBitmap'}|[[]]]]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Transp'}|[{'remote_type',256,[{'atom',256,'wx'}|[{'atom',256,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'union',4},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'This'}|[{'var',263,'Bmp'}|[{'var',263,'Transp'}|[{'type',263,'list',[{'var',263,'Option'}]}]]]]}|[{'type',263,'boolean',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'This'}|[{'type',264,'wxRegion',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Bmp'}|[{'remote_type',264,[{'atom',264,'wxBitmap'}|[{'atom',264,'wxBitmap'}|[[]]]]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Transp'}|[{'remote_type',264,[{'atom',264,'wx'}|[{'atom',264,'wx_colour'}|[[]]]]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Option'}|[{'type',265,'tuple',[{'atom',265,'tolerance'}|[{'type',265,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'union',5},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'This'}|[{'var',277,'X'}|[{'var',277,'Y'}|[{'var',277,'W'}|[{'var',277,'H'}]]]]]}|[{'type',277,'boolean',[]}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'This'}|[{'type',278,'wxRegion',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'X'}|[{'type',278,'integer',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Y'}|[{'type',278,'integer',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'W'}|[{'type',278,'integer',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'H'}|[{'type',278,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'Xor',2},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'This'}|[{'var',290,'Region'}]]}|[{'type',290,'boolean',[]}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'This'}|[{'type',291,'wxRegion',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Region'}|[{'type',291,'wxRegion',[]}]]]]}]]]]}|[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'This'}|[{'var',292,'Rect'}]]}|[{'type',292,'boolean',[]}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'This'}|[{'type',293,'wxRegion',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Rect'}|[{'type',293,'tuple',[{'ann_type',293,[{'var',293,'X'}|[{'type',293,'integer',[]}]]}|[{'ann_type',293,[{'var',293,'Y'}|[{'type',293,'integer',[]}]]}|[{'ann_type',293,[{'var',293,'W'}|[{'type',293,'integer',[]}]]}|[{'ann_type',293,[{'var',293,'H'}|[{'type',293,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 306
		'spec' =
		    %% Line 306
		    [{{'Xor',5},[{'type',306,'bounded_fun',[{'type',306,'fun',[{'type',306,'product',[{'var',306,'This'}|[{'var',306,'X'}|[{'var',306,'Y'}|[{'var',306,'W'}|[{'var',306,'H'}]]]]]}|[{'type',306,'boolean',[]}]]}|[[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'This'}|[{'type',307,'wxRegion',[]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'X'}|[{'type',307,'integer',[]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'Y'}|[{'type',307,'integer',[]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'W'}|[{'type',307,'integer',[]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'H'}|[{'type',307,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'destroy',1},[{'type',315,'fun',[{'type',315,'product',[{'ann_type',315,[{'var',315,'This'}|[{'type',315,'wxRegion',[]}]]}]}|[{'atom',315,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxRegion'})
'new'/0 =
    %% Line 42
    fun () ->
	%% Line 43
	call 'wxe_util':'construct'
	    (1181, %% Line 44
		   #{}#)
'new'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',BmpRef,BmpT,_cor12}> when 'true' ->
	      do  %% Line 56
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (BmpT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call BmpT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 58
		      #{#<BmpRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 57
		      call 'wxe_util':'construct'
			  (1186, _cor3)
	  %% Line 59
	  <{RectX,RectY,RectW,RectH}>
	      when %% Line 60
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 62
		  #{#<RectX>(32,1,'integer',['unsigned'|['native']]),
		    #<RectY>(32,1,'integer',['unsigned'|['native']]),
		    #<RectW>(32,1,'integer',['unsigned'|['native']]),
		    #<RectH>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 61
		  call 'wxe_util':'construct'
		      (1184, _cor10)
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{TopLeftX,TopLeftY},{BottomRightX,BottomRightY}>
	      when %% Line 68
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (TopLeftX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(TopLeftY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (BottomRightX)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(BottomRightY)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 70
		  #{#<TopLeftX>(32,1,'integer',['unsigned'|['native']]),
		    #<TopLeftY>(32,1,'integer',['unsigned'|['native']]),
		    #<BottomRightX>(32,1,'integer',['unsigned'|['native']]),
		    #<BottomRightY>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 69
		  call 'wxe_util':'construct'
		      (1183, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 75
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <X,Y,W,H>
	      when %% Line 76
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 78
		  #{#<X>(32,1,'integer',['unsigned'|['native']]),
		    #<Y>(32,1,'integer',['unsigned'|['native']]),
		    #<W>(32,1,'integer',['unsigned'|['native']]),
		    #<H>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 77
		  call 'wxe_util':'construct'
		      (1182, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'clear'/1 =
    %% Line 83
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 84
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 86
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 85
		      call 'wxe_util':'cast'
			  (1189, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clear',1}}] )
	    -| ['compiler_generated'] )
	end
'contains'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 99
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 99
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 99
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 100
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 102
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 101
		      call 'wxe_util':'call'
			  (1191, _cor6)
	  %% Line 103
	  <{'wx_ref',ThisRef,ThisT,_cor19},{RectX,RectY,RectW,RectH}>
	      when %% Line 104
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 105
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 107
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 106
		      call 'wxe_util':'call'
			  (1193, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'contains',2}}] )
	    -| ['compiler_generated'] )
	end
'contains'/3 =
    %% Line 113
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 114
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 114
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 114
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 115
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 117
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 116
		      call 'wxe_util':'call'
			  (1190, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'contains',3}}] )
	    -| ['compiler_generated'] )
	end
'contains'/5 =
    %% Line 123
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 124
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 125
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 127
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 126
		      call 'wxe_util':'call'
			  (1192, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'contains',5}}] )
	    -| ['compiler_generated'] )
	end
'convertToBitmap'/1 =
    %% Line 132
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 133
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 135
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 134
		      call 'wxe_util':'call'
			  (1194, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'convertToBitmap',1}}] )
	    -| ['compiler_generated'] )
	end
'getBox'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 141
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 143
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 142
		      call 'wxe_util':'call'
			  (1195, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBox',1}}] )
	    -| ['compiler_generated'] )
	end
'intersect'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',RegionRef,RegionT,_cor19}> when 'true' ->
	      do  %% Line 155
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 156
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RegionT,
				       'wxRegion') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RegionT:'parent_class'
				    ('wxRegion')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 158
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 157
			  call 'wxe_util':'call'
			      (1198, _cor6)
	  %% Line 159
	  <{'wx_ref',ThisRef,ThisT,_cor20},{RectX,RectY,RectW,RectH}>
	      when %% Line 160
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 163
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 162
		      call 'wxe_util':'call'
			  (1197, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'intersect',2}}] )
	    -| ['compiler_generated'] )
	end
'intersect'/5 =
    %% Line 168
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 169
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 170
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 172
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 171
		      call 'wxe_util':'call'
			  (1196, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'intersect',5}}] )
	    -| ['compiler_generated'] )
	end
'isEmpty'/1 =
    %% Line 177
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 178
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 180
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 179
		      call 'wxe_util':'call'
			  (1199, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isEmpty',1}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',RegionRef,RegionT,_cor19}> when 'true' ->
	      do  %% Line 192
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 193
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RegionT,
				       'wxRegion') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RegionT:'parent_class'
				    ('wxRegion')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 195
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 194
			  call 'wxe_util':'call'
			      (1202, _cor6)
	  %% Line 196
	  <{'wx_ref',ThisRef,ThisT,_cor20},{RectX,RectY,RectW,RectH}>
	      when %% Line 197
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 198
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 200
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 199
		      call 'wxe_util':'call'
			  (1201, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'subtract',2}}] )
	    -| ['compiler_generated'] )
	end
'subtract'/5 =
    %% Line 205
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 206
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 207
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 209
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 208
		      call 'wxe_util':'call'
			  (1200, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'subtract',5}}] )
	    -| ['compiler_generated'] )
	end
'offset'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 215
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 215
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 215
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 216
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 218
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 217
		      call 'wxe_util':'call'
			  (1204, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'offset',2}}] )
	    -| ['compiler_generated'] )
	end
'offset'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 224
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 224
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 224
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 225
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 227
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 226
		      call 'wxe_util':'call'
			  (1203, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'offset',3}}] )
	    -| ['compiler_generated'] )
	end
'union'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},{'wx_ref',RegionRef,RegionT,_cor29}> when 'true' ->
	      do  %% Line 239
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 240
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (RegionT,
					   'wxRegion') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call RegionT:'parent_class'
					('wxRegion')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 240
			  case _cor10 of
			    %% Line 241
			    <'true'> when 'true' ->
				%% Line 242
				1207
			    %% Line 243
			    <_cor33> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (RegionT,
						     'wxBitmap') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call RegionT:'parent_class'
						  ('wxBitmap')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 244
				    1208
			  end
		      in  let <_cor16> =
			      %% Line 247
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 246
			      call 'wxe_util':'call'
				  (_cor14, _cor16)
	  %% Line 248
	  <{'wx_ref',ThisRef,ThisT,_cor34},{RectX,RectY,RectW,RectH}>
	      when %% Line 249
		try
		    let <_cor17> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor18> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor19> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor20> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor21> =
					call 'erlang':'and'
					    (_cor19, _cor20)
				    in  let <_cor22> =
					    call 'erlang':'and'
						(_cor18, _cor21)
					in  call 'erlang':'and'
						(_cor17, _cor22)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 250
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor25> =
		      %% Line 252
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 251
		      call 'wxe_util':'call'
			  (1206, _cor25)
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'union',2}}] )
	    -| ['compiler_generated'] )
	end
'union'/3 =
    %% Line 258
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This,Bmp,Transp>
	      when let <_cor8> =
		    %% Line 259
		    ( try
			  let <_cor3> =
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (This, 'wx_ref', 4)
				-| ['compiler_generated'] )
			  in  let <_cor4> =
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(Bmp, 'wx_ref', 4)
				    -| ['compiler_generated'] )
			      in  let <_cor5> =
				      call 'erlang':'tuple_size'
					  (Transp)
				  in  let <_cor6> =
					  call 'erlang':'=:='
					      (_cor5, 3)
				      in  let <_cor7> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor6)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor7)
						-| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false'
		      -| ['compiler_generated'] )
		in  let <_cor10> =
			%% Line 259
			try
			    let <_cor9> =
				call 'erlang':'tuple_size'
				    (Transp)
			    in  call 'erlang':'=:='
				    (_cor9, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 259
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'or'
							       -| ['compiler_generated'] )
			      (_cor8, _cor10)
			  -| ['compiler_generated'] ) ->
	      %% Line 260
	      apply 'union'/4
		  (This, Bmp, Transp, [])
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'union',3}}] )
	    -| ['compiler_generated'] )
	end
'union'/4 =
    %% Line 266
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},{'wx_ref',BmpRef,BmpT,_cor29},Transp,Options>
	      when let <_cor5> =
		    %% Line 267
		    try
			let <_cor4> =
			    call 'erlang':'tuple_size'
				(Transp)
			in  call 'erlang':'=:='
				(_cor4, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor9> =
			%% Line 267
			try
			    let <_cor6> =
				call 'erlang':'tuple_size'
				    (Transp)
			    in  let <_cor7> =
				    call 'erlang':'=:='
					(_cor6, 4)
				in  let <_cor8> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor7, _cor8)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 267
			call 'erlang':'or'
			    (_cor5, _cor9) ->
	      do  %% Line 268
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 269
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 270
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'tolerance',Tolerance},Acc> when 'true' ->
				      let <_cor14> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Tolerance>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor14|Acc]
				  %% Line 271
				  <BadOpt,_cor30> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-union/4-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 272
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 272
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor22> =
				      %% Line 274
				      call 'wxe_util':'colour_bin'
					  (Transp)
				  in  let <_cor23> =
					  %% Line 274
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BmpRef>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor22>(16,8,'binary',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 273
					  call 'wxe_util':'call'
					      (1209, _cor23)
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'union',4}}] )
	    -| ['compiler_generated'] )
	end
'union'/5 =
    %% Line 279
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 280
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 281
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 283
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 282
		      call 'wxe_util':'call'
			  (1205, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'union',5}}] )
	    -| ['compiler_generated'] )
	end
'Xor'/2 =
    %% Line 294
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',RegionRef,RegionT,_cor19}> when 'true' ->
	      do  %% Line 295
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 296
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RegionT,
				       'wxRegion') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RegionT:'parent_class'
				    ('wxRegion')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 298
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 297
			  call 'wxe_util':'call'
			      (1212, _cor6)
	  %% Line 299
	  <{'wx_ref',ThisRef,ThisT,_cor20},{RectX,RectY,RectW,RectH}>
	      when %% Line 300
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 301
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 303
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 302
		      call 'wxe_util':'call'
			  (1211, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'Xor',2}}] )
	    -| ['compiler_generated'] )
	end
'Xor'/5 =
    %% Line 308
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 309
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 310
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 312
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 311
		      call 'wxe_util':'call'
			  (1210, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'Xor',5}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 316
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 317
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxRegion') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxRegion')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 318
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 319
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxRegion')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxRegion', _cor0)
end