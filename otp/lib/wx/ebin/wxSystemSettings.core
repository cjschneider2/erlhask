module 'wxSystemSettings' ['getColour'/1,
			   'getFont'/1,
			   'getMetric'/1,
			   'getMetric'/2,
			   'getScreenType'/0,
			   'module_info'/0,
			   'module_info'/1,
			   'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxSystemSettings',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxSystemSettings',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'getColour',1},[{'type',39,'bounded_fun',[{'type',39,'fun',[{'type',39,'product',[{'var',39,'Index'}]}|[{'remote_type',39,[{'atom',39,'wx'}|[{'atom',39,'wx_colour4'}|[[]]]]}]]}|[[{'type',40,'constraint',[{'atom',40,'is_subtype'}|[[{'var',40,'Index'}|[{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_enum'}|[[]]]]}]]]]}]]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'getFont',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'Index'}]}|[{'remote_type',48,[{'atom',48,'wxFont'}|[{'atom',48,'wxFont'}|[[]]]]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Index'}|[{'remote_type',49,[{'atom',49,'wx'}|[{'atom',49,'wx_enum'}|[[]]]]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'getMetric',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Index'}]}|[{'type',56,'integer',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Index'}|[{'remote_type',57,[{'atom',57,'wx'}|[{'atom',57,'wx_enum'}|[[]]]]}]]]]}]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'getMetric',2},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'Index'}|[{'type',65,'list',[{'var',65,'Option'}]}]]}|[{'type',65,'integer',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Index'}|[{'remote_type',66,[{'atom',66,'wx'}|[{'atom',66,'wx_enum'}|[[]]]]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Option'}|[{'type',67,'tuple',[{'atom',67,'win'}|[{'remote_type',67,[{'atom',67,'wxWindow'}|[{'atom',67,'wxWindow'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'getScreenType',0},[{'type',78,'fun',[{'type',78,'product',[]}|[{'remote_type',78,[{'atom',78,'wx'}|[{'atom',78,'wx_enum'}|[[]]]]}]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxSystemSettings'})
'getColour'/1 =
    %% Line 41
    fun (_cor0) ->
	case _cor0 of
	  <Index>
	      when %% Line 42
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 44
		  #{#<Index>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 43
		  call 'wxe_util':'call'
		      (3493, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'getColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <Index>
	      when %% Line 51
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 53
		  #{#<Index>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 52
		  call 'wxe_util':'call'
		      (3494, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getMetric'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <Index>
	      when %% Line 60
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 61
	      apply 'getMetric'/2
		  (Index, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getMetric',1}}] )
	    -| ['compiler_generated'] )
	end
'getMetric'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,Options>
	      when let <_cor2> =
		    %% Line 69
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor3> =
			%% Line 69
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 69
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 70
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <{'win',{'wx_ref',WinRef,WinT,_cor17}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (WinT,
						   'wxWindow') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call WinT:'parent_class'
						('wxWindow')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor6> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<WinRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			  %% Line 71
			  <BadOpt,_cor18> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-getMetric/2-fun-0-'}}] )
	      in  let <_cor12> =
		      %% Line 72
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 72
			  call 'erlang':'list_to_binary'
			      (_cor12)
		      in  let <_cor14> =
			      %% Line 74
			      #{#<Index>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 73
			      call 'wxe_util':'call'
				  (3495, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'getMetric',2}}] )
	    -| ['compiler_generated'] )
	end
'getScreenType'/0 =
    %% Line 79
    fun () ->
	%% Line 80
	call 'wxe_util':'call'
	    (3496, %% Line 81
		   #{}#)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSystemSettings')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSystemSettings', _cor0)
end