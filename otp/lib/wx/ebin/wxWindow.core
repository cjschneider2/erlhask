module 'wxWindow' ['Destroy'/1,
		   'cacheBestSize'/2,
		   'captureMouse'/1,
		   'center'/1,
		   'center'/2,
		   'centerOnParent'/1,
		   'centerOnParent'/2,
		   'centre'/1,
		   'centre'/2,
		   'centreOnParent'/1,
		   'centreOnParent'/2,
		   'clearBackground'/1,
		   'clientToScreen'/2,
		   'clientToScreen'/3,
		   'close'/1,
		   'close'/2,
		   'connect'/2,
		   'connect'/3,
		   'convertDialogToPixels'/2,
		   'convertPixelsToDialog'/2,
		   'destroy'/1,
		   'destroyChildren'/1,
		   'disable'/1,
		   'disconnect'/1,
		   'disconnect'/2,
		   'disconnect'/3,
		   'enable'/1,
		   'enable'/2,
		   'findFocus'/0,
		   'findWindow'/2,
		   'findWindowById'/1,
		   'findWindowById'/2,
		   'findWindowByLabel'/1,
		   'findWindowByLabel'/2,
		   'findWindowByName'/1,
		   'findWindowByName'/2,
		   'fit'/1,
		   'fitInside'/1,
		   'freeze'/1,
		   'getAcceleratorTable'/1,
		   'getBackgroundColour'/1,
		   'getBackgroundStyle'/1,
		   'getBestSize'/1,
		   'getCapture'/0,
		   'getCaret'/1,
		   'getCharHeight'/1,
		   'getCharWidth'/1,
		   'getChildren'/1,
		   'getClientSize'/1,
		   'getContainingSizer'/1,
		   'getCursor'/1,
		   'getDropTarget'/1,
		   'getEventHandler'/1,
		   'getExtraStyle'/1,
		   'getFont'/1,
		   'getForegroundColour'/1,
		   'getGrandParent'/1,
		   'getHandle'/1,
		   'getHelpText'/1,
		   'getId'/1,
		   'getLabel'/1,
		   'getMaxSize'/1,
		   'getMinSize'/1,
		   'getName'/1,
		   'getParent'/1,
		   'getPosition'/1,
		   'getRect'/1,
		   'getScreenPosition'/1,
		   'getScreenRect'/1,
		   'getScrollPos'/2,
		   'getScrollRange'/2,
		   'getScrollThumb'/2,
		   'getSize'/1,
		   'getSizer'/1,
		   'getTextExtent'/2,
		   'getTextExtent'/3,
		   'getToolTip'/1,
		   'getUpdateRegion'/1,
		   'getVirtualSize'/1,
		   'getWindowStyleFlag'/1,
		   'getWindowVariant'/1,
		   'hasCapture'/1,
		   'hasScrollbar'/2,
		   'hasTransparentBackground'/1,
		   'hide'/1,
		   'inheritAttributes'/1,
		   'initDialog'/1,
		   'invalidateBestSize'/1,
		   'isEnabled'/1,
		   'isExposed'/2,
		   'isExposed'/3,
		   'isExposed'/5,
		   'isRetained'/1,
		   'isShown'/1,
		   'isTopLevel'/1,
		   'layout'/1,
		   'lineDown'/1,
		   'lineUp'/1,
		   'lower'/1,
		   'makeModal'/1,
		   'makeModal'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'move'/2,
		   'move'/3,
		   'move'/4,
		   'moveAfterInTabOrder'/2,
		   'moveBeforeInTabOrder'/2,
		   'navigate'/1,
		   'navigate'/2,
		   'new'/0,
		   'new'/2,
		   'new'/3,
		   'pageDown'/1,
		   'pageUp'/1,
		   'parent_class'/1,
		   'popEventHandler'/1,
		   'popEventHandler'/2,
		   'popupMenu'/2,
		   'popupMenu'/3,
		   'popupMenu'/4,
		   'raise'/1,
		   'refresh'/1,
		   'refresh'/2,
		   'refreshRect'/2,
		   'refreshRect'/3,
		   'releaseMouse'/1,
		   'removeChild'/2,
		   'reparent'/2,
		   'screenToClient'/1,
		   'screenToClient'/2,
		   'scrollLines'/2,
		   'scrollPages'/2,
		   'scrollWindow'/3,
		   'scrollWindow'/4,
		   'setAcceleratorTable'/2,
		   'setAutoLayout'/2,
		   'setBackgroundColour'/2,
		   'setBackgroundStyle'/2,
		   'setCaret'/2,
		   'setClientSize'/2,
		   'setClientSize'/3,
		   'setContainingSizer'/2,
		   'setCursor'/2,
		   'setDropTarget'/2,
		   'setExtraStyle'/2,
		   'setFocus'/1,
		   'setFocusFromKbd'/1,
		   'setFont'/2,
		   'setForegroundColour'/2,
		   'setHelpText'/2,
		   'setId'/2,
		   'setLabel'/2,
		   'setMaxSize'/2,
		   'setMinSize'/2,
		   'setName'/2,
		   'setOwnBackgroundColour'/2,
		   'setOwnFont'/2,
		   'setOwnForegroundColour'/2,
		   'setPalette'/2,
		   'setScrollPos'/3,
		   'setScrollPos'/4,
		   'setScrollbar'/5,
		   'setScrollbar'/6,
		   'setSize'/2,
		   'setSize'/3,
		   'setSize'/5,
		   'setSize'/6,
		   'setSizeHints'/2,
		   'setSizeHints'/3,
		   'setSizeHints'/4,
		   'setSizer'/2,
		   'setSizer'/3,
		   'setSizerAndFit'/2,
		   'setSizerAndFit'/3,
		   'setThemeEnabled'/2,
		   'setToolTip'/2,
		   'setVirtualSize'/2,
		   'setVirtualSize'/3,
		   'setVirtualSizeHints'/2,
		   'setVirtualSizeHints'/3,
		   'setVirtualSizeHints'/4,
		   'setWindowStyle'/2,
		   'setWindowStyleFlag'/2,
		   'setWindowVariant'/2,
		   'shouldInheritColours'/1,
		   'show'/1,
		   'show'/2,
		   'thaw'/1,
		   'transferDataFromWindow'/1,
		   'transferDataToWindow'/1,
		   'update'/1,
		   'updateWindowUI'/1,
		   'updateWindowUI'/2,
		   'validate'/1,
		   'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 72
		'export_type' =
		    %% Line 72
		    [{'wxWindow',0}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'wxWindow',{'remote_type',77,[{'atom',77,'wx'}|[{'atom',77,'wx_object'}|[[]]]]},[]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'new',0},[{'type',79,'fun',[{'type',79,'product',[]}|[{'type',79,'wxWindow',[]}]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'new',2},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'Parent'}|[{'var',85,'Id'}]]}|[{'type',85,'wxWindow',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Parent'}|[{'type',86,'wxWindow',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Id'}|[{'type',86,'integer',[]}]]]]}]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'new',3},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'Parent'}|[{'var',93,'Id'}|[{'type',93,'list',[{'var',93,'Option'}]}]]]}|[{'type',93,'wxWindow',[]}]]}|[[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Parent'}|[{'type',94,'wxWindow',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Id'}|[{'type',94,'integer',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Option'}|[{'type',95,'union',[{'type',95,'tuple',[{'atom',95,'pos'}|[{'type',95,'tuple',[{'ann_type',95,[{'var',95,'X'}|[{'type',95,'integer',[]}]]}|[{'ann_type',95,[{'var',95,'Y'}|[{'type',95,'integer',[]}]]}]]}]]}|[{'type',96,'tuple',[{'atom',96,'size'}|[{'type',96,'tuple',[{'ann_type',96,[{'var',96,'W'}|[{'type',96,'integer',[]}]]}|[{'ann_type',96,[{'var',96,'H'}|[{'type',96,'integer',[]}]]}]]}]]}|[{'type',97,'tuple',[{'atom',97,'style'}|[{'type',97,'integer',[]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'cacheBestSize',2},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'This'}|[{'var',110,'Size'}]]}|[{'atom',110,'ok'}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'This'}|[{'type',111,'wxWindow',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Size'}|[{'type',111,'tuple',[{'ann_type',111,[{'var',111,'W'}|[{'type',111,'integer',[]}]]}|[{'ann_type',111,[{'var',111,'H'}|[{'type',111,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'captureMouse',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'This'}]}|[{'atom',119,'ok'}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'This'}|[{'type',120,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'center',1},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'This'}]}|[{'atom',127,'ok'}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'This'}|[{'type',128,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'center',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'This'}|[{'type',135,'list',[{'var',135,'Option'}]}]]}|[{'atom',135,'ok'}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'This'}|[{'type',136,'wxWindow',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Option'}|[{'type',137,'tuple',[{'atom',137,'dir'}|[{'type',137,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'centerOnParent',1},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'This'}]}|[{'atom',148,'ok'}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'This'}|[{'type',149,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'centerOnParent',2},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'type',156,'list',[{'var',156,'Option'}]}]]}|[{'atom',156,'ok'}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxWindow',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Option'}|[{'type',158,'tuple',[{'atom',158,'dir'}|[{'type',158,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'centre',1},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'This'}]}|[{'atom',169,'ok'}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'This'}|[{'type',170,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'centre',2},[{'type',177,'bounded_fun',[{'type',177,'fun',[{'type',177,'product',[{'var',177,'This'}|[{'type',177,'list',[{'var',177,'Option'}]}]]}|[{'atom',177,'ok'}]]}|[[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'This'}|[{'type',178,'wxWindow',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Option'}|[{'type',179,'tuple',[{'atom',179,'dir'}|[{'type',179,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'centreOnParent',1},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'This'}]}|[{'atom',190,'ok'}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'This'}|[{'type',191,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'centreOnParent',2},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'This'}|[{'type',198,'list',[{'var',198,'Option'}]}]]}|[{'atom',198,'ok'}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'This'}|[{'type',199,'wxWindow',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Option'}|[{'type',200,'tuple',[{'atom',200,'dir'}|[{'type',200,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'clearBackground',1},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'This'}]}|[{'atom',211,'ok'}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'This'}|[{'type',212,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 219
		'spec' =
		    %% Line 219
		    [{{'clientToScreen',2},[{'type',219,'bounded_fun',[{'type',219,'fun',[{'type',219,'product',[{'var',219,'This'}|[{'var',219,'Pt'}]]}|[{'type',219,'tuple',[{'ann_type',219,[{'var',219,'X'}|[{'type',219,'integer',[]}]]}|[{'ann_type',219,[{'var',219,'Y'}|[{'type',219,'integer',[]}]]}]]}]]}|[[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'This'}|[{'type',220,'wxWindow',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Pt'}|[{'type',220,'tuple',[{'ann_type',220,[{'var',220,'X'}|[{'type',220,'integer',[]}]]}|[{'ann_type',220,[{'var',220,'Y'}|[{'type',220,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'clientToScreen',3},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'This'}|[{'var',228,'X'}|[{'var',228,'Y'}]]]}|[{'type',228,'tuple',[{'ann_type',228,[{'var',228,'X'}|[{'type',228,'integer',[]}]]}|[{'ann_type',228,[{'var',228,'Y'}|[{'type',228,'integer',[]}]]}]]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'This'}|[{'type',229,'wxWindow',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'X'}|[{'type',229,'integer',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Y'}|[{'type',229,'integer',[]}]]]]}]]]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'close',1},[{'type',237,'bounded_fun',[{'type',237,'fun',[{'type',237,'product',[{'var',237,'This'}]}|[{'type',237,'boolean',[]}]]}|[[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'This'}|[{'type',238,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'close',2},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'This'}|[{'type',245,'list',[{'var',245,'Option'}]}]]}|[{'type',245,'boolean',[]}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'This'}|[{'type',246,'wxWindow',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Option'}|[{'type',247,'tuple',[{'atom',247,'force'}|[{'type',247,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'convertDialogToPixels',2},[{'type',258,'bounded_fun',[{'type',258,'fun',[{'type',258,'product',[{'var',258,'This'}|[{'var',258,'Sz'}]]}|[{'type',258,'tuple',[{'ann_type',258,[{'var',258,'W'}|[{'type',258,'integer',[]}]]}|[{'ann_type',258,[{'var',258,'H'}|[{'type',258,'integer',[]}]]}]]}]]}|[[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'This'}|[{'type',259,'wxWindow',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Sz'}|[{'type',259,'tuple',[{'ann_type',259,[{'var',259,'W'}|[{'type',259,'integer',[]}]]}|[{'ann_type',259,[{'var',259,'H'}|[{'type',259,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 267
		'spec' =
		    %% Line 267
		    [{{'convertPixelsToDialog',2},[{'type',267,'bounded_fun',[{'type',267,'fun',[{'type',267,'product',[{'var',267,'This'}|[{'var',267,'Sz'}]]}|[{'type',267,'tuple',[{'ann_type',267,[{'var',267,'W'}|[{'type',267,'integer',[]}]]}|[{'ann_type',267,[{'var',267,'H'}|[{'type',267,'integer',[]}]]}]]}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'This'}|[{'type',268,'wxWindow',[]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Sz'}|[{'type',268,'tuple',[{'ann_type',268,[{'var',268,'W'}|[{'type',268,'integer',[]}]]}|[{'ann_type',268,[{'var',268,'H'}|[{'type',268,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'Destroy',1},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'This'}]}|[{'type',276,'boolean',[]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'This'}|[{'type',277,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 284
		'spec' =
		    %% Line 284
		    [{{'destroyChildren',1},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'This'}]}|[{'type',284,'boolean',[]}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'This'}|[{'type',285,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 292
		'spec' =
		    %% Line 292
		    [{{'disable',1},[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'This'}]}|[{'type',292,'boolean',[]}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'This'}|[{'type',293,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'enable',1},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'This'}]}|[{'type',300,'boolean',[]}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'This'}|[{'type',301,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'enable',2},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'This'}|[{'type',308,'list',[{'var',308,'Option'}]}]]}|[{'type',308,'boolean',[]}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'This'}|[{'type',309,'wxWindow',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Option'}|[{'type',310,'tuple',[{'atom',310,'enable'}|[{'type',310,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'findFocus',0},[{'type',321,'fun',[{'type',321,'product',[]}|[{'type',321,'wxWindow',[]}]]}]}],
		%% Line 331
		'spec' =
		    %% Line 331
		    [{{'findWindow',2},[{'type',331,'bounded_fun',[{'type',331,'fun',[{'type',331,'product',[{'var',331,'This'}|[{'var',331,'Winid'}]]}|[{'type',331,'wxWindow',[]}]]}|[[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'This'}|[{'type',332,'wxWindow',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Winid'}|[{'type',332,'integer',[]}]]]]}]]]]}|[{'type',333,'bounded_fun',[{'type',333,'fun',[{'type',333,'product',[{'var',333,'This'}|[{'var',333,'Name'}]]}|[{'type',333,'wxWindow',[]}]]}|[[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'This'}|[{'type',334,'wxWindow',[]}]]]]}|[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Name'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'findWindowById',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Winid'}]}|[{'type',348,'wxWindow',[]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Winid'}|[{'type',349,'integer',[]}]]]]}]]]}]}],
		%% Line 356
		'spec' =
		    %% Line 356
		    [{{'findWindowById',2},[{'type',356,'bounded_fun',[{'type',356,'fun',[{'type',356,'product',[{'var',356,'Winid'}|[{'type',356,'list',[{'var',356,'Option'}]}]]}|[{'type',356,'wxWindow',[]}]]}|[[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Winid'}|[{'type',357,'integer',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Option'}|[{'type',358,'tuple',[{'atom',358,'parent'}|[{'type',358,'wxWindow',[]}]]}]]]]}]]]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'findWindowByName',1},[{'type',368,'bounded_fun',[{'type',368,'fun',[{'type',368,'product',[{'var',368,'Name'}]}|[{'type',368,'wxWindow',[]}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Name'}|[{'remote_type',369,[{'atom',369,'unicode'}|[{'atom',369,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'findWindowByName',2},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'Name'}|[{'type',376,'list',[{'var',376,'Option'}]}]]}|[{'type',376,'wxWindow',[]}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Name'}|[{'remote_type',377,[{'atom',377,'unicode'}|[{'atom',377,'chardata'}|[[]]]]}]]]]}|[{'type',378,'constraint',[{'atom',378,'is_subtype'}|[[{'var',378,'Option'}|[{'type',378,'tuple',[{'atom',378,'parent'}|[{'type',378,'wxWindow',[]}]]}]]]]}]]]]}]}],
		%% Line 389
		'spec' =
		    %% Line 389
		    [{{'findWindowByLabel',1},[{'type',389,'bounded_fun',[{'type',389,'fun',[{'type',389,'product',[{'var',389,'Label'}]}|[{'type',389,'wxWindow',[]}]]}|[[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Label'}|[{'remote_type',390,[{'atom',390,'unicode'}|[{'atom',390,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 397
		'spec' =
		    %% Line 397
		    [{{'findWindowByLabel',2},[{'type',397,'bounded_fun',[{'type',397,'fun',[{'type',397,'product',[{'var',397,'Label'}|[{'type',397,'list',[{'var',397,'Option'}]}]]}|[{'type',397,'wxWindow',[]}]]}|[[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Label'}|[{'remote_type',398,[{'atom',398,'unicode'}|[{'atom',398,'chardata'}|[[]]]]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Option'}|[{'type',399,'tuple',[{'atom',399,'parent'}|[{'type',399,'wxWindow',[]}]]}]]]]}]]]]}]}],
		%% Line 410
		'spec' =
		    %% Line 410
		    [{{'fit',1},[{'type',410,'bounded_fun',[{'type',410,'fun',[{'type',410,'product',[{'var',410,'This'}]}|[{'atom',410,'ok'}]]}|[[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'This'}|[{'type',411,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'fitInside',1},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'This'}]}|[{'atom',418,'ok'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'This'}|[{'type',419,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'freeze',1},[{'type',426,'bounded_fun',[{'type',426,'fun',[{'type',426,'product',[{'var',426,'This'}]}|[{'atom',426,'ok'}]]}|[[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'This'}|[{'type',427,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 434
		'spec' =
		    %% Line 434
		    [{{'getAcceleratorTable',1},[{'type',434,'bounded_fun',[{'type',434,'fun',[{'type',434,'product',[{'var',434,'This'}]}|[{'remote_type',434,[{'atom',434,'wxAcceleratorTable'}|[{'atom',434,'wxAcceleratorTable'}|[[]]]]}]]}|[[{'type',435,'constraint',[{'atom',435,'is_subtype'}|[[{'var',435,'This'}|[{'type',435,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'getBackgroundColour',1},[{'type',442,'bounded_fun',[{'type',442,'fun',[{'type',442,'product',[{'var',442,'This'}]}|[{'remote_type',442,[{'atom',442,'wx'}|[{'atom',442,'wx_colour4'}|[[]]]]}]]}|[[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'This'}|[{'type',443,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 451
		'spec' =
		    %% Line 451
		    [{{'getBackgroundStyle',1},[{'type',451,'bounded_fun',[{'type',451,'fun',[{'type',451,'product',[{'var',451,'This'}]}|[{'remote_type',451,[{'atom',451,'wx'}|[{'atom',451,'wx_enum'}|[[]]]]}]]}|[[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'This'}|[{'type',452,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 459
		'spec' =
		    %% Line 459
		    [{{'getBestSize',1},[{'type',459,'bounded_fun',[{'type',459,'fun',[{'type',459,'product',[{'var',459,'This'}]}|[{'type',459,'tuple',[{'ann_type',459,[{'var',459,'W'}|[{'type',459,'integer',[]}]]}|[{'ann_type',459,[{'var',459,'H'}|[{'type',459,'integer',[]}]]}]]}]]}|[[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'This'}|[{'type',460,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'getCaret',1},[{'type',467,'bounded_fun',[{'type',467,'fun',[{'type',467,'product',[{'var',467,'This'}]}|[{'remote_type',467,[{'atom',467,'wxCaret'}|[{'atom',467,'wxCaret'}|[[]]]]}]]}|[[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'This'}|[{'type',468,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 475
		'spec' =
		    %% Line 475
		    [{{'getCapture',0},[{'type',475,'fun',[{'type',475,'product',[]}|[{'type',475,'wxWindow',[]}]]}]}],
		%% Line 481
		'spec' =
		    %% Line 481
		    [{{'getCharHeight',1},[{'type',481,'bounded_fun',[{'type',481,'fun',[{'type',481,'product',[{'var',481,'This'}]}|[{'type',481,'integer',[]}]]}|[[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'This'}|[{'type',482,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 489
		'spec' =
		    %% Line 489
		    [{{'getCharWidth',1},[{'type',489,'bounded_fun',[{'type',489,'fun',[{'type',489,'product',[{'var',489,'This'}]}|[{'type',489,'integer',[]}]]}|[[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'This'}|[{'type',490,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'getChildren',1},[{'type',497,'bounded_fun',[{'type',497,'fun',[{'type',497,'product',[{'var',497,'This'}]}|[{'type',497,'list',[{'type',497,'wxWindow',[]}]}]]}|[[{'type',498,'constraint',[{'atom',498,'is_subtype'}|[[{'var',498,'This'}|[{'type',498,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'getClientSize',1},[{'type',505,'bounded_fun',[{'type',505,'fun',[{'type',505,'product',[{'var',505,'This'}]}|[{'type',505,'tuple',[{'ann_type',505,[{'var',505,'W'}|[{'type',505,'integer',[]}]]}|[{'ann_type',505,[{'var',505,'H'}|[{'type',505,'integer',[]}]]}]]}]]}|[[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'This'}|[{'type',506,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 513
		'spec' =
		    %% Line 513
		    [{{'getContainingSizer',1},[{'type',513,'bounded_fun',[{'type',513,'fun',[{'type',513,'product',[{'var',513,'This'}]}|[{'remote_type',513,[{'atom',513,'wxSizer'}|[{'atom',513,'wxSizer'}|[[]]]]}]]}|[[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'This'}|[{'type',514,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 521
		'spec' =
		    %% Line 521
		    [{{'getCursor',1},[{'type',521,'bounded_fun',[{'type',521,'fun',[{'type',521,'product',[{'var',521,'This'}]}|[{'remote_type',521,[{'atom',521,'wxCursor'}|[{'atom',521,'wxCursor'}|[[]]]]}]]}|[[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'This'}|[{'type',522,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 529
		'spec' =
		    %% Line 529
		    [{{'getDropTarget',1},[{'type',529,'bounded_fun',[{'type',529,'fun',[{'type',529,'product',[{'var',529,'This'}]}|[{'remote_type',529,[{'atom',529,'wx'}|[{'atom',529,'wx_object'}|[[]]]]}]]}|[[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'This'}|[{'type',530,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 537
		'spec' =
		    %% Line 537
		    [{{'getEventHandler',1},[{'type',537,'bounded_fun',[{'type',537,'fun',[{'type',537,'product',[{'var',537,'This'}]}|[{'remote_type',537,[{'atom',537,'wxEvtHandler'}|[{'atom',537,'wxEvtHandler'}|[[]]]]}]]}|[[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'This'}|[{'type',538,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 545
		'spec' =
		    %% Line 545
		    [{{'getExtraStyle',1},[{'type',545,'bounded_fun',[{'type',545,'fun',[{'type',545,'product',[{'var',545,'This'}]}|[{'type',545,'integer',[]}]]}|[[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'This'}|[{'type',546,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 553
		'spec' =
		    %% Line 553
		    [{{'getFont',1},[{'type',553,'bounded_fun',[{'type',553,'fun',[{'type',553,'product',[{'var',553,'This'}]}|[{'remote_type',553,[{'atom',553,'wxFont'}|[{'atom',553,'wxFont'}|[[]]]]}]]}|[[{'type',554,'constraint',[{'atom',554,'is_subtype'}|[[{'var',554,'This'}|[{'type',554,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 561
		'spec' =
		    %% Line 561
		    [{{'getForegroundColour',1},[{'type',561,'bounded_fun',[{'type',561,'fun',[{'type',561,'product',[{'var',561,'This'}]}|[{'remote_type',561,[{'atom',561,'wx'}|[{'atom',561,'wx_colour4'}|[[]]]]}]]}|[[{'type',562,'constraint',[{'atom',562,'is_subtype'}|[[{'var',562,'This'}|[{'type',562,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 569
		'spec' =
		    %% Line 569
		    [{{'getGrandParent',1},[{'type',569,'bounded_fun',[{'type',569,'fun',[{'type',569,'product',[{'var',569,'This'}]}|[{'type',569,'wxWindow',[]}]]}|[[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'This'}|[{'type',570,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'getHandle',1},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'This'}]}|[{'type',577,'integer',[]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'This'}|[{'type',578,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'getHelpText',1},[{'type',585,'bounded_fun',[{'type',585,'fun',[{'type',585,'product',[{'var',585,'This'}]}|[{'remote_type',585,[{'atom',585,'unicode'}|[{'atom',585,'charlist'}|[[]]]]}]]}|[[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'This'}|[{'type',586,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 593
		'spec' =
		    %% Line 593
		    [{{'getId',1},[{'type',593,'bounded_fun',[{'type',593,'fun',[{'type',593,'product',[{'var',593,'This'}]}|[{'type',593,'integer',[]}]]}|[[{'type',594,'constraint',[{'atom',594,'is_subtype'}|[[{'var',594,'This'}|[{'type',594,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 601
		'spec' =
		    %% Line 601
		    [{{'getLabel',1},[{'type',601,'bounded_fun',[{'type',601,'fun',[{'type',601,'product',[{'var',601,'This'}]}|[{'remote_type',601,[{'atom',601,'unicode'}|[{'atom',601,'charlist'}|[[]]]]}]]}|[[{'type',602,'constraint',[{'atom',602,'is_subtype'}|[[{'var',602,'This'}|[{'type',602,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 609
		'spec' =
		    %% Line 609
		    [{{'getMaxSize',1},[{'type',609,'bounded_fun',[{'type',609,'fun',[{'type',609,'product',[{'var',609,'This'}]}|[{'type',609,'tuple',[{'ann_type',609,[{'var',609,'W'}|[{'type',609,'integer',[]}]]}|[{'ann_type',609,[{'var',609,'H'}|[{'type',609,'integer',[]}]]}]]}]]}|[[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'This'}|[{'type',610,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 617
		'spec' =
		    %% Line 617
		    [{{'getMinSize',1},[{'type',617,'bounded_fun',[{'type',617,'fun',[{'type',617,'product',[{'var',617,'This'}]}|[{'type',617,'tuple',[{'ann_type',617,[{'var',617,'W'}|[{'type',617,'integer',[]}]]}|[{'ann_type',617,[{'var',617,'H'}|[{'type',617,'integer',[]}]]}]]}]]}|[[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'This'}|[{'type',618,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 625
		'spec' =
		    %% Line 625
		    [{{'getName',1},[{'type',625,'bounded_fun',[{'type',625,'fun',[{'type',625,'product',[{'var',625,'This'}]}|[{'remote_type',625,[{'atom',625,'unicode'}|[{'atom',625,'charlist'}|[[]]]]}]]}|[[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'This'}|[{'type',626,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 633
		'spec' =
		    %% Line 633
		    [{{'getParent',1},[{'type',633,'bounded_fun',[{'type',633,'fun',[{'type',633,'product',[{'var',633,'This'}]}|[{'type',633,'wxWindow',[]}]]}|[[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'This'}|[{'type',634,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 641
		'spec' =
		    %% Line 641
		    [{{'getPosition',1},[{'type',641,'bounded_fun',[{'type',641,'fun',[{'type',641,'product',[{'var',641,'This'}]}|[{'type',641,'tuple',[{'ann_type',641,[{'var',641,'X'}|[{'type',641,'integer',[]}]]}|[{'ann_type',641,[{'var',641,'Y'}|[{'type',641,'integer',[]}]]}]]}]]}|[[{'type',642,'constraint',[{'atom',642,'is_subtype'}|[[{'var',642,'This'}|[{'type',642,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'getRect',1},[{'type',649,'bounded_fun',[{'type',649,'fun',[{'type',649,'product',[{'var',649,'This'}]}|[{'type',649,'tuple',[{'ann_type',649,[{'var',649,'X'}|[{'type',649,'integer',[]}]]}|[{'ann_type',649,[{'var',649,'Y'}|[{'type',649,'integer',[]}]]}|[{'ann_type',649,[{'var',649,'W'}|[{'type',649,'integer',[]}]]}|[{'ann_type',649,[{'var',649,'H'}|[{'type',649,'integer',[]}]]}]]]]}]]}|[[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'This'}|[{'type',650,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 657
		'spec' =
		    %% Line 657
		    [{{'getScreenPosition',1},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'This'}]}|[{'type',657,'tuple',[{'ann_type',657,[{'var',657,'X'}|[{'type',657,'integer',[]}]]}|[{'ann_type',657,[{'var',657,'Y'}|[{'type',657,'integer',[]}]]}]]}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'This'}|[{'type',658,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 665
		'spec' =
		    %% Line 665
		    [{{'getScreenRect',1},[{'type',665,'bounded_fun',[{'type',665,'fun',[{'type',665,'product',[{'var',665,'This'}]}|[{'type',665,'tuple',[{'ann_type',665,[{'var',665,'X'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'Y'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'W'}|[{'type',665,'integer',[]}]]}|[{'ann_type',665,[{'var',665,'H'}|[{'type',665,'integer',[]}]]}]]]]}]]}|[[{'type',666,'constraint',[{'atom',666,'is_subtype'}|[[{'var',666,'This'}|[{'type',666,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 673
		'spec' =
		    %% Line 673
		    [{{'getScrollPos',2},[{'type',673,'bounded_fun',[{'type',673,'fun',[{'type',673,'product',[{'var',673,'This'}|[{'var',673,'Orient'}]]}|[{'type',673,'integer',[]}]]}|[[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'This'}|[{'type',674,'wxWindow',[]}]]]]}|[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'Orient'}|[{'type',674,'integer',[]}]]]]}]]]]}]}],
		%% Line 682
		'spec' =
		    %% Line 682
		    [{{'getScrollRange',2},[{'type',682,'bounded_fun',[{'type',682,'fun',[{'type',682,'product',[{'var',682,'This'}|[{'var',682,'Orient'}]]}|[{'type',682,'integer',[]}]]}|[[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'This'}|[{'type',683,'wxWindow',[]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'Orient'}|[{'type',683,'integer',[]}]]]]}]]]]}]}],
		%% Line 691
		'spec' =
		    %% Line 691
		    [{{'getScrollThumb',2},[{'type',691,'bounded_fun',[{'type',691,'fun',[{'type',691,'product',[{'var',691,'This'}|[{'var',691,'Orient'}]]}|[{'type',691,'integer',[]}]]}|[[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'This'}|[{'type',692,'wxWindow',[]}]]]]}|[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'Orient'}|[{'type',692,'integer',[]}]]]]}]]]]}]}],
		%% Line 700
		'spec' =
		    %% Line 700
		    [{{'getSize',1},[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'This'}]}|[{'type',700,'tuple',[{'ann_type',700,[{'var',700,'W'}|[{'type',700,'integer',[]}]]}|[{'ann_type',700,[{'var',700,'H'}|[{'type',700,'integer',[]}]]}]]}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'This'}|[{'type',701,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 708
		'spec' =
		    %% Line 708
		    [{{'getSizer',1},[{'type',708,'bounded_fun',[{'type',708,'fun',[{'type',708,'product',[{'var',708,'This'}]}|[{'remote_type',708,[{'atom',708,'wxSizer'}|[{'atom',708,'wxSizer'}|[[]]]]}]]}|[[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'This'}|[{'type',709,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 716
		'spec' =
		    %% Line 716
		    [{{'getTextExtent',2},[{'type',716,'bounded_fun',[{'type',716,'fun',[{'type',716,'product',[{'var',716,'This'}|[{'var',716,'String'}]]}|[{'var',716,'Result'}]]}|[[{'type',717,'constraint',[{'atom',717,'is_subtype'}|[[{'var',717,'Result'}|[{'type',717,'tuple',[{'ann_type',717,[{'var',717,'X'}|[{'type',717,'integer',[]}]]}|[{'ann_type',717,[{'var',717,'Y'}|[{'type',717,'integer',[]}]]}|[{'ann_type',717,[{'var',717,'Descent'}|[{'type',717,'integer',[]}]]}|[{'ann_type',717,[{'var',717,'ExternalLeading'}|[{'type',717,'integer',[]}]]}]]]]}]]]]}|[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'This'}|[{'type',718,'wxWindow',[]}]]]]}|[{'type',718,'constraint',[{'atom',718,'is_subtype'}|[[{'var',718,'String'}|[{'remote_type',718,[{'atom',718,'unicode'}|[{'atom',718,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 725
		'spec' =
		    %% Line 725
		    [{{'getTextExtent',3},[{'type',725,'bounded_fun',[{'type',725,'fun',[{'type',725,'product',[{'var',725,'This'}|[{'var',725,'String'}|[{'type',725,'list',[{'var',725,'Option'}]}]]]}|[{'var',725,'Result'}]]}|[[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'Result'}|[{'type',726,'tuple',[{'ann_type',726,[{'var',726,'X'}|[{'type',726,'integer',[]}]]}|[{'ann_type',726,[{'var',726,'Y'}|[{'type',726,'integer',[]}]]}|[{'ann_type',726,[{'var',726,'Descent'}|[{'type',726,'integer',[]}]]}|[{'ann_type',726,[{'var',726,'ExternalLeading'}|[{'type',726,'integer',[]}]]}]]]]}]]]]}|[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'This'}|[{'type',727,'wxWindow',[]}]]]]}|[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'String'}|[{'remote_type',727,[{'atom',727,'unicode'}|[{'atom',727,'chardata'}|[[]]]]}]]]]}|[{'type',728,'constraint',[{'atom',728,'is_subtype'}|[[{'var',728,'Option'}|[{'type',728,'tuple',[{'atom',728,'theFont'}|[{'remote_type',728,[{'atom',728,'wxFont'}|[{'atom',728,'wxFont'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 740
		'spec' =
		    %% Line 740
		    [{{'getToolTip',1},[{'type',740,'bounded_fun',[{'type',740,'fun',[{'type',740,'product',[{'var',740,'This'}]}|[{'remote_type',740,[{'atom',740,'wxToolTip'}|[{'atom',740,'wxToolTip'}|[[]]]]}]]}|[[{'type',741,'constraint',[{'atom',741,'is_subtype'}|[[{'var',741,'This'}|[{'type',741,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 748
		'spec' =
		    %% Line 748
		    [{{'getUpdateRegion',1},[{'type',748,'bounded_fun',[{'type',748,'fun',[{'type',748,'product',[{'var',748,'This'}]}|[{'remote_type',748,[{'atom',748,'wxRegion'}|[{'atom',748,'wxRegion'}|[[]]]]}]]}|[[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'This'}|[{'type',749,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 756
		'spec' =
		    %% Line 756
		    [{{'getVirtualSize',1},[{'type',756,'bounded_fun',[{'type',756,'fun',[{'type',756,'product',[{'var',756,'This'}]}|[{'type',756,'tuple',[{'ann_type',756,[{'var',756,'W'}|[{'type',756,'integer',[]}]]}|[{'ann_type',756,[{'var',756,'H'}|[{'type',756,'integer',[]}]]}]]}]]}|[[{'type',757,'constraint',[{'atom',757,'is_subtype'}|[[{'var',757,'This'}|[{'type',757,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 764
		'spec' =
		    %% Line 764
		    [{{'getWindowStyleFlag',1},[{'type',764,'bounded_fun',[{'type',764,'fun',[{'type',764,'product',[{'var',764,'This'}]}|[{'type',764,'integer',[]}]]}|[[{'type',765,'constraint',[{'atom',765,'is_subtype'}|[[{'var',765,'This'}|[{'type',765,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 773
		'spec' =
		    %% Line 773
		    [{{'getWindowVariant',1},[{'type',773,'bounded_fun',[{'type',773,'fun',[{'type',773,'product',[{'var',773,'This'}]}|[{'remote_type',773,[{'atom',773,'wx'}|[{'atom',773,'wx_enum'}|[[]]]]}]]}|[[{'type',774,'constraint',[{'atom',774,'is_subtype'}|[[{'var',774,'This'}|[{'type',774,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 781
		'spec' =
		    %% Line 781
		    [{{'hasCapture',1},[{'type',781,'bounded_fun',[{'type',781,'fun',[{'type',781,'product',[{'var',781,'This'}]}|[{'type',781,'boolean',[]}]]}|[[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'This'}|[{'type',782,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 789
		'spec' =
		    %% Line 789
		    [{{'hasScrollbar',2},[{'type',789,'bounded_fun',[{'type',789,'fun',[{'type',789,'product',[{'var',789,'This'}|[{'var',789,'Orient'}]]}|[{'type',789,'boolean',[]}]]}|[[{'type',790,'constraint',[{'atom',790,'is_subtype'}|[[{'var',790,'This'}|[{'type',790,'wxWindow',[]}]]]]}|[{'type',790,'constraint',[{'atom',790,'is_subtype'}|[[{'var',790,'Orient'}|[{'type',790,'integer',[]}]]]]}]]]]}]}],
		%% Line 798
		'spec' =
		    %% Line 798
		    [{{'hasTransparentBackground',1},[{'type',798,'bounded_fun',[{'type',798,'fun',[{'type',798,'product',[{'var',798,'This'}]}|[{'type',798,'boolean',[]}]]}|[[{'type',799,'constraint',[{'atom',799,'is_subtype'}|[[{'var',799,'This'}|[{'type',799,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 806
		'spec' =
		    %% Line 806
		    [{{'hide',1},[{'type',806,'bounded_fun',[{'type',806,'fun',[{'type',806,'product',[{'var',806,'This'}]}|[{'type',806,'boolean',[]}]]}|[[{'type',807,'constraint',[{'atom',807,'is_subtype'}|[[{'var',807,'This'}|[{'type',807,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 814
		'spec' =
		    %% Line 814
		    [{{'inheritAttributes',1},[{'type',814,'bounded_fun',[{'type',814,'fun',[{'type',814,'product',[{'var',814,'This'}]}|[{'atom',814,'ok'}]]}|[[{'type',815,'constraint',[{'atom',815,'is_subtype'}|[[{'var',815,'This'}|[{'type',815,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 822
		'spec' =
		    %% Line 822
		    [{{'initDialog',1},[{'type',822,'bounded_fun',[{'type',822,'fun',[{'type',822,'product',[{'var',822,'This'}]}|[{'atom',822,'ok'}]]}|[[{'type',823,'constraint',[{'atom',823,'is_subtype'}|[[{'var',823,'This'}|[{'type',823,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 830
		'spec' =
		    %% Line 830
		    [{{'invalidateBestSize',1},[{'type',830,'bounded_fun',[{'type',830,'fun',[{'type',830,'product',[{'var',830,'This'}]}|[{'atom',830,'ok'}]]}|[[{'type',831,'constraint',[{'atom',831,'is_subtype'}|[[{'var',831,'This'}|[{'type',831,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 838
		'spec' =
		    %% Line 838
		    [{{'isEnabled',1},[{'type',838,'bounded_fun',[{'type',838,'fun',[{'type',838,'product',[{'var',838,'This'}]}|[{'type',838,'boolean',[]}]]}|[[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'This'}|[{'type',839,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 850
		'spec' =
		    %% Line 850
		    [{{'isExposed',2},[{'type',850,'bounded_fun',[{'type',850,'fun',[{'type',850,'product',[{'var',850,'This'}|[{'var',850,'Pt'}]]}|[{'type',850,'boolean',[]}]]}|[[{'type',851,'constraint',[{'atom',851,'is_subtype'}|[[{'var',851,'This'}|[{'type',851,'wxWindow',[]}]]]]}|[{'type',851,'constraint',[{'atom',851,'is_subtype'}|[[{'var',851,'Pt'}|[{'type',851,'tuple',[{'ann_type',851,[{'var',851,'X'}|[{'type',851,'integer',[]}]]}|[{'ann_type',851,[{'var',851,'Y'}|[{'type',851,'integer',[]}]]}]]}]]]]}]]]]}|[{'type',852,'bounded_fun',[{'type',852,'fun',[{'type',852,'product',[{'var',852,'This'}|[{'var',852,'Rect'}]]}|[{'type',852,'boolean',[]}]]}|[[{'type',853,'constraint',[{'atom',853,'is_subtype'}|[[{'var',853,'This'}|[{'type',853,'wxWindow',[]}]]]]}|[{'type',853,'constraint',[{'atom',853,'is_subtype'}|[[{'var',853,'Rect'}|[{'type',853,'tuple',[{'ann_type',853,[{'var',853,'X'}|[{'type',853,'integer',[]}]]}|[{'ann_type',853,[{'var',853,'Y'}|[{'type',853,'integer',[]}]]}|[{'ann_type',853,[{'var',853,'W'}|[{'type',853,'integer',[]}]]}|[{'ann_type',853,[{'var',853,'H'}|[{'type',853,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 866
		'spec' =
		    %% Line 866
		    [{{'isExposed',3},[{'type',866,'bounded_fun',[{'type',866,'fun',[{'type',866,'product',[{'var',866,'This'}|[{'var',866,'X'}|[{'var',866,'Y'}]]]}|[{'type',866,'boolean',[]}]]}|[[{'type',867,'constraint',[{'atom',867,'is_subtype'}|[[{'var',867,'This'}|[{'type',867,'wxWindow',[]}]]]]}|[{'type',867,'constraint',[{'atom',867,'is_subtype'}|[[{'var',867,'X'}|[{'type',867,'integer',[]}]]]]}|[{'type',867,'constraint',[{'atom',867,'is_subtype'}|[[{'var',867,'Y'}|[{'type',867,'integer',[]}]]]]}]]]]]}]}],
		%% Line 875
		'spec' =
		    %% Line 875
		    [{{'isExposed',5},[{'type',875,'bounded_fun',[{'type',875,'fun',[{'type',875,'product',[{'var',875,'This'}|[{'var',875,'X'}|[{'var',875,'Y'}|[{'var',875,'W'}|[{'var',875,'H'}]]]]]}|[{'type',875,'boolean',[]}]]}|[[{'type',876,'constraint',[{'atom',876,'is_subtype'}|[[{'var',876,'This'}|[{'type',876,'wxWindow',[]}]]]]}|[{'type',876,'constraint',[{'atom',876,'is_subtype'}|[[{'var',876,'X'}|[{'type',876,'integer',[]}]]]]}|[{'type',876,'constraint',[{'atom',876,'is_subtype'}|[[{'var',876,'Y'}|[{'type',876,'integer',[]}]]]]}|[{'type',876,'constraint',[{'atom',876,'is_subtype'}|[[{'var',876,'W'}|[{'type',876,'integer',[]}]]]]}|[{'type',876,'constraint',[{'atom',876,'is_subtype'}|[[{'var',876,'H'}|[{'type',876,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 884
		'spec' =
		    %% Line 884
		    [{{'isRetained',1},[{'type',884,'bounded_fun',[{'type',884,'fun',[{'type',884,'product',[{'var',884,'This'}]}|[{'type',884,'boolean',[]}]]}|[[{'type',885,'constraint',[{'atom',885,'is_subtype'}|[[{'var',885,'This'}|[{'type',885,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'isShown',1},[{'type',892,'bounded_fun',[{'type',892,'fun',[{'type',892,'product',[{'var',892,'This'}]}|[{'type',892,'boolean',[]}]]}|[[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'This'}|[{'type',893,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 900
		'spec' =
		    %% Line 900
		    [{{'isTopLevel',1},[{'type',900,'bounded_fun',[{'type',900,'fun',[{'type',900,'product',[{'var',900,'This'}]}|[{'type',900,'boolean',[]}]]}|[[{'type',901,'constraint',[{'atom',901,'is_subtype'}|[[{'var',901,'This'}|[{'type',901,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 908
		'spec' =
		    %% Line 908
		    [{{'layout',1},[{'type',908,'bounded_fun',[{'type',908,'fun',[{'type',908,'product',[{'var',908,'This'}]}|[{'type',908,'boolean',[]}]]}|[[{'type',909,'constraint',[{'atom',909,'is_subtype'}|[[{'var',909,'This'}|[{'type',909,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 916
		'spec' =
		    %% Line 916
		    [{{'lineDown',1},[{'type',916,'bounded_fun',[{'type',916,'fun',[{'type',916,'product',[{'var',916,'This'}]}|[{'type',916,'boolean',[]}]]}|[[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'This'}|[{'type',917,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 924
		'spec' =
		    %% Line 924
		    [{{'lineUp',1},[{'type',924,'bounded_fun',[{'type',924,'fun',[{'type',924,'product',[{'var',924,'This'}]}|[{'type',924,'boolean',[]}]]}|[[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'This'}|[{'type',925,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 932
		'spec' =
		    %% Line 932
		    [{{'lower',1},[{'type',932,'bounded_fun',[{'type',932,'fun',[{'type',932,'product',[{'var',932,'This'}]}|[{'atom',932,'ok'}]]}|[[{'type',933,'constraint',[{'atom',933,'is_subtype'}|[[{'var',933,'This'}|[{'type',933,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 940
		'spec' =
		    %% Line 940
		    [{{'makeModal',1},[{'type',940,'bounded_fun',[{'type',940,'fun',[{'type',940,'product',[{'var',940,'This'}]}|[{'atom',940,'ok'}]]}|[[{'type',941,'constraint',[{'atom',941,'is_subtype'}|[[{'var',941,'This'}|[{'type',941,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 948
		'spec' =
		    %% Line 948
		    [{{'makeModal',2},[{'type',948,'bounded_fun',[{'type',948,'fun',[{'type',948,'product',[{'var',948,'This'}|[{'type',948,'list',[{'var',948,'Option'}]}]]}|[{'atom',948,'ok'}]]}|[[{'type',949,'constraint',[{'atom',949,'is_subtype'}|[[{'var',949,'This'}|[{'type',949,'wxWindow',[]}]]]]}|[{'type',950,'constraint',[{'atom',950,'is_subtype'}|[[{'var',950,'Option'}|[{'type',950,'tuple',[{'atom',950,'modal'}|[{'type',950,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 961
		'spec' =
		    %% Line 961
		    [{{'move',2},[{'type',961,'bounded_fun',[{'type',961,'fun',[{'type',961,'product',[{'var',961,'This'}|[{'var',961,'Pt'}]]}|[{'atom',961,'ok'}]]}|[[{'type',962,'constraint',[{'atom',962,'is_subtype'}|[[{'var',962,'This'}|[{'type',962,'wxWindow',[]}]]]]}|[{'type',962,'constraint',[{'atom',962,'is_subtype'}|[[{'var',962,'Pt'}|[{'type',962,'tuple',[{'ann_type',962,[{'var',962,'X'}|[{'type',962,'integer',[]}]]}|[{'ann_type',962,[{'var',962,'Y'}|[{'type',962,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 974
		'spec' =
		    %% Line 974
		    [{{'move',3},[{'type',974,'bounded_fun',[{'type',974,'fun',[{'type',974,'product',[{'var',974,'This'}|[{'var',974,'X'}|[{'var',974,'Y'}]]]}|[{'atom',974,'ok'}]]}|[[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'This'}|[{'type',975,'wxWindow',[]}]]]]}|[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'X'}|[{'type',975,'integer',[]}]]]]}|[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'Y'}|[{'type',975,'integer',[]}]]]]}]]]]]}|[{'type',976,'bounded_fun',[{'type',976,'fun',[{'type',976,'product',[{'var',976,'This'}|[{'var',976,'Pt'}|[{'type',976,'list',[{'var',976,'Option'}]}]]]}|[{'atom',976,'ok'}]]}|[[{'type',977,'constraint',[{'atom',977,'is_subtype'}|[[{'var',977,'This'}|[{'type',977,'wxWindow',[]}]]]]}|[{'type',977,'constraint',[{'atom',977,'is_subtype'}|[[{'var',977,'Pt'}|[{'type',977,'tuple',[{'ann_type',977,[{'var',977,'X'}|[{'type',977,'integer',[]}]]}|[{'ann_type',977,[{'var',977,'Y'}|[{'type',977,'integer',[]}]]}]]}]]]]}|[{'type',978,'constraint',[{'atom',978,'is_subtype'}|[[{'var',978,'Option'}|[{'type',978,'tuple',[{'atom',978,'flags'}|[{'type',978,'integer',[]}]]}]]]]}]]]]]}]]}],
		%% Line 993
		'spec' =
		    %% Line 993
		    [{{'move',4},[{'type',993,'bounded_fun',[{'type',993,'fun',[{'type',993,'product',[{'var',993,'This'}|[{'var',993,'X'}|[{'var',993,'Y'}|[{'type',993,'list',[{'var',993,'Option'}]}]]]]}|[{'atom',993,'ok'}]]}|[[{'type',994,'constraint',[{'atom',994,'is_subtype'}|[[{'var',994,'This'}|[{'type',994,'wxWindow',[]}]]]]}|[{'type',994,'constraint',[{'atom',994,'is_subtype'}|[[{'var',994,'X'}|[{'type',994,'integer',[]}]]]]}|[{'type',994,'constraint',[{'atom',994,'is_subtype'}|[[{'var',994,'Y'}|[{'type',994,'integer',[]}]]]]}|[{'type',995,'constraint',[{'atom',995,'is_subtype'}|[[{'var',995,'Option'}|[{'type',995,'tuple',[{'atom',995,'flags'}|[{'type',995,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 1006
		'spec' =
		    %% Line 1006
		    [{{'moveAfterInTabOrder',2},[{'type',1006,'bounded_fun',[{'type',1006,'fun',[{'type',1006,'product',[{'var',1006,'This'}|[{'var',1006,'Win'}]]}|[{'atom',1006,'ok'}]]}|[[{'type',1007,'constraint',[{'atom',1007,'is_subtype'}|[[{'var',1007,'This'}|[{'type',1007,'wxWindow',[]}]]]]}|[{'type',1007,'constraint',[{'atom',1007,'is_subtype'}|[[{'var',1007,'Win'}|[{'type',1007,'wxWindow',[]}]]]]}]]]]}]}],
		%% Line 1015
		'spec' =
		    %% Line 1015
		    [{{'moveBeforeInTabOrder',2},[{'type',1015,'bounded_fun',[{'type',1015,'fun',[{'type',1015,'product',[{'var',1015,'This'}|[{'var',1015,'Win'}]]}|[{'atom',1015,'ok'}]]}|[[{'type',1016,'constraint',[{'atom',1016,'is_subtype'}|[[{'var',1016,'This'}|[{'type',1016,'wxWindow',[]}]]]]}|[{'type',1016,'constraint',[{'atom',1016,'is_subtype'}|[[{'var',1016,'Win'}|[{'type',1016,'wxWindow',[]}]]]]}]]]]}]}],
		%% Line 1024
		'spec' =
		    %% Line 1024
		    [{{'navigate',1},[{'type',1024,'bounded_fun',[{'type',1024,'fun',[{'type',1024,'product',[{'var',1024,'This'}]}|[{'type',1024,'boolean',[]}]]}|[[{'type',1025,'constraint',[{'atom',1025,'is_subtype'}|[[{'var',1025,'This'}|[{'type',1025,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1032
		'spec' =
		    %% Line 1032
		    [{{'navigate',2},[{'type',1032,'bounded_fun',[{'type',1032,'fun',[{'type',1032,'product',[{'var',1032,'This'}|[{'type',1032,'list',[{'var',1032,'Option'}]}]]}|[{'type',1032,'boolean',[]}]]}|[[{'type',1033,'constraint',[{'atom',1033,'is_subtype'}|[[{'var',1033,'This'}|[{'type',1033,'wxWindow',[]}]]]]}|[{'type',1034,'constraint',[{'atom',1034,'is_subtype'}|[[{'var',1034,'Option'}|[{'type',1034,'tuple',[{'atom',1034,'flags'}|[{'type',1034,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 1045
		'spec' =
		    %% Line 1045
		    [{{'pageDown',1},[{'type',1045,'bounded_fun',[{'type',1045,'fun',[{'type',1045,'product',[{'var',1045,'This'}]}|[{'type',1045,'boolean',[]}]]}|[[{'type',1046,'constraint',[{'atom',1046,'is_subtype'}|[[{'var',1046,'This'}|[{'type',1046,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1053
		'spec' =
		    %% Line 1053
		    [{{'pageUp',1},[{'type',1053,'bounded_fun',[{'type',1053,'fun',[{'type',1053,'product',[{'var',1053,'This'}]}|[{'type',1053,'boolean',[]}]]}|[[{'type',1054,'constraint',[{'atom',1054,'is_subtype'}|[[{'var',1054,'This'}|[{'type',1054,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1061
		'spec' =
		    %% Line 1061
		    [{{'popEventHandler',1},[{'type',1061,'bounded_fun',[{'type',1061,'fun',[{'type',1061,'product',[{'var',1061,'This'}]}|[{'remote_type',1061,[{'atom',1061,'wxEvtHandler'}|[{'atom',1061,'wxEvtHandler'}|[[]]]]}]]}|[[{'type',1062,'constraint',[{'atom',1062,'is_subtype'}|[[{'var',1062,'This'}|[{'type',1062,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1069
		'spec' =
		    %% Line 1069
		    [{{'popEventHandler',2},[{'type',1069,'bounded_fun',[{'type',1069,'fun',[{'type',1069,'product',[{'var',1069,'This'}|[{'type',1069,'list',[{'var',1069,'Option'}]}]]}|[{'remote_type',1069,[{'atom',1069,'wxEvtHandler'}|[{'atom',1069,'wxEvtHandler'}|[[]]]]}]]}|[[{'type',1070,'constraint',[{'atom',1070,'is_subtype'}|[[{'var',1070,'This'}|[{'type',1070,'wxWindow',[]}]]]]}|[{'type',1071,'constraint',[{'atom',1071,'is_subtype'}|[[{'var',1071,'Option'}|[{'type',1071,'tuple',[{'atom',1071,'deleteHandler'}|[{'type',1071,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 1082
		'spec' =
		    %% Line 1082
		    [{{'popupMenu',2},[{'type',1082,'bounded_fun',[{'type',1082,'fun',[{'type',1082,'product',[{'var',1082,'This'}|[{'var',1082,'Menu'}]]}|[{'type',1082,'boolean',[]}]]}|[[{'type',1083,'constraint',[{'atom',1083,'is_subtype'}|[[{'var',1083,'This'}|[{'type',1083,'wxWindow',[]}]]]]}|[{'type',1083,'constraint',[{'atom',1083,'is_subtype'}|[[{'var',1083,'Menu'}|[{'remote_type',1083,[{'atom',1083,'wxMenu'}|[{'atom',1083,'wxMenu'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1090
		'spec' =
		    %% Line 1090
		    [{{'popupMenu',3},[{'type',1090,'bounded_fun',[{'type',1090,'fun',[{'type',1090,'product',[{'var',1090,'This'}|[{'var',1090,'Menu'}|[{'type',1090,'list',[{'var',1090,'Option'}]}]]]}|[{'type',1090,'boolean',[]}]]}|[[{'type',1091,'constraint',[{'atom',1091,'is_subtype'}|[[{'var',1091,'This'}|[{'type',1091,'wxWindow',[]}]]]]}|[{'type',1091,'constraint',[{'atom',1091,'is_subtype'}|[[{'var',1091,'Menu'}|[{'remote_type',1091,[{'atom',1091,'wxMenu'}|[{'atom',1091,'wxMenu'}|[[]]]]}]]]]}|[{'type',1092,'constraint',[{'atom',1092,'is_subtype'}|[[{'var',1092,'Option'}|[{'type',1092,'tuple',[{'atom',1092,'pos'}|[{'type',1092,'tuple',[{'ann_type',1092,[{'var',1092,'X'}|[{'type',1092,'integer',[]}]]}|[{'ann_type',1092,[{'var',1092,'Y'}|[{'type',1092,'integer',[]}]]}]]}]]}]]]]}]]]]]}]}],
		%% Line 1104
		'spec' =
		    %% Line 1104
		    [{{'popupMenu',4},[{'type',1104,'bounded_fun',[{'type',1104,'fun',[{'type',1104,'product',[{'var',1104,'This'}|[{'var',1104,'Menu'}|[{'var',1104,'X'}|[{'var',1104,'Y'}]]]]}|[{'type',1104,'boolean',[]}]]}|[[{'type',1105,'constraint',[{'atom',1105,'is_subtype'}|[[{'var',1105,'This'}|[{'type',1105,'wxWindow',[]}]]]]}|[{'type',1105,'constraint',[{'atom',1105,'is_subtype'}|[[{'var',1105,'Menu'}|[{'remote_type',1105,[{'atom',1105,'wxMenu'}|[{'atom',1105,'wxMenu'}|[[]]]]}]]]]}|[{'type',1105,'constraint',[{'atom',1105,'is_subtype'}|[[{'var',1105,'X'}|[{'type',1105,'integer',[]}]]]]}|[{'type',1105,'constraint',[{'atom',1105,'is_subtype'}|[[{'var',1105,'Y'}|[{'type',1105,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 1114
		'spec' =
		    %% Line 1114
		    [{{'raise',1},[{'type',1114,'bounded_fun',[{'type',1114,'fun',[{'type',1114,'product',[{'var',1114,'This'}]}|[{'atom',1114,'ok'}]]}|[[{'type',1115,'constraint',[{'atom',1115,'is_subtype'}|[[{'var',1115,'This'}|[{'type',1115,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1122
		'spec' =
		    %% Line 1122
		    [{{'refresh',1},[{'type',1122,'bounded_fun',[{'type',1122,'fun',[{'type',1122,'product',[{'var',1122,'This'}]}|[{'atom',1122,'ok'}]]}|[[{'type',1123,'constraint',[{'atom',1123,'is_subtype'}|[[{'var',1123,'This'}|[{'type',1123,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1130
		'spec' =
		    %% Line 1130
		    [{{'refresh',2},[{'type',1130,'bounded_fun',[{'type',1130,'fun',[{'type',1130,'product',[{'var',1130,'This'}|[{'type',1130,'list',[{'var',1130,'Option'}]}]]}|[{'atom',1130,'ok'}]]}|[[{'type',1131,'constraint',[{'atom',1131,'is_subtype'}|[[{'var',1131,'This'}|[{'type',1131,'wxWindow',[]}]]]]}|[{'type',1132,'constraint',[{'atom',1132,'is_subtype'}|[[{'var',1132,'Option'}|[{'type',1132,'union',[{'type',1132,'tuple',[{'atom',1132,'eraseBackground'}|[{'type',1132,'boolean',[]}]]}|[{'type',1133,'tuple',[{'atom',1133,'rect'}|[{'type',1133,'tuple',[{'ann_type',1133,[{'var',1133,'X'}|[{'type',1133,'integer',[]}]]}|[{'ann_type',1133,[{'var',1133,'Y'}|[{'type',1133,'integer',[]}]]}|[{'ann_type',1133,[{'var',1133,'W'}|[{'type',1133,'integer',[]}]]}|[{'ann_type',1133,[{'var',1133,'H'}|[{'type',1133,'integer',[]}]]}]]]]}]]}]]}]]]]}]]]]}]}],
		%% Line 1145
		'spec' =
		    %% Line 1145
		    [{{'refreshRect',2},[{'type',1145,'bounded_fun',[{'type',1145,'fun',[{'type',1145,'product',[{'var',1145,'This'}|[{'var',1145,'Rect'}]]}|[{'atom',1145,'ok'}]]}|[[{'type',1146,'constraint',[{'atom',1146,'is_subtype'}|[[{'var',1146,'This'}|[{'type',1146,'wxWindow',[]}]]]]}|[{'type',1146,'constraint',[{'atom',1146,'is_subtype'}|[[{'var',1146,'Rect'}|[{'type',1146,'tuple',[{'ann_type',1146,[{'var',1146,'X'}|[{'type',1146,'integer',[]}]]}|[{'ann_type',1146,[{'var',1146,'Y'}|[{'type',1146,'integer',[]}]]}|[{'ann_type',1146,[{'var',1146,'W'}|[{'type',1146,'integer',[]}]]}|[{'ann_type',1146,[{'var',1146,'H'}|[{'type',1146,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 1153
		'spec' =
		    %% Line 1153
		    [{{'refreshRect',3},[{'type',1153,'bounded_fun',[{'type',1153,'fun',[{'type',1153,'product',[{'var',1153,'This'}|[{'var',1153,'Rect'}|[{'type',1153,'list',[{'var',1153,'Option'}]}]]]}|[{'atom',1153,'ok'}]]}|[[{'type',1154,'constraint',[{'atom',1154,'is_subtype'}|[[{'var',1154,'This'}|[{'type',1154,'wxWindow',[]}]]]]}|[{'type',1154,'constraint',[{'atom',1154,'is_subtype'}|[[{'var',1154,'Rect'}|[{'type',1154,'tuple',[{'ann_type',1154,[{'var',1154,'X'}|[{'type',1154,'integer',[]}]]}|[{'ann_type',1154,[{'var',1154,'Y'}|[{'type',1154,'integer',[]}]]}|[{'ann_type',1154,[{'var',1154,'W'}|[{'type',1154,'integer',[]}]]}|[{'ann_type',1154,[{'var',1154,'H'}|[{'type',1154,'integer',[]}]]}]]]]}]]]]}|[{'type',1155,'constraint',[{'atom',1155,'is_subtype'}|[[{'var',1155,'Option'}|[{'type',1155,'tuple',[{'atom',1155,'eraseBackground'}|[{'type',1155,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1166
		'spec' =
		    %% Line 1166
		    [{{'releaseMouse',1},[{'type',1166,'bounded_fun',[{'type',1166,'fun',[{'type',1166,'product',[{'var',1166,'This'}]}|[{'atom',1166,'ok'}]]}|[[{'type',1167,'constraint',[{'atom',1167,'is_subtype'}|[[{'var',1167,'This'}|[{'type',1167,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1174
		'spec' =
		    %% Line 1174
		    [{{'removeChild',2},[{'type',1174,'bounded_fun',[{'type',1174,'fun',[{'type',1174,'product',[{'var',1174,'This'}|[{'var',1174,'Child'}]]}|[{'atom',1174,'ok'}]]}|[[{'type',1175,'constraint',[{'atom',1175,'is_subtype'}|[[{'var',1175,'This'}|[{'type',1175,'wxWindow',[]}]]]]}|[{'type',1175,'constraint',[{'atom',1175,'is_subtype'}|[[{'var',1175,'Child'}|[{'type',1175,'wxWindow',[]}]]]]}]]]]}]}],
		%% Line 1183
		'spec' =
		    %% Line 1183
		    [{{'reparent',2},[{'type',1183,'bounded_fun',[{'type',1183,'fun',[{'type',1183,'product',[{'var',1183,'This'}|[{'var',1183,'NewParent'}]]}|[{'type',1183,'boolean',[]}]]}|[[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'This'}|[{'type',1184,'wxWindow',[]}]]]]}|[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'NewParent'}|[{'type',1184,'wxWindow',[]}]]]]}]]]]}]}],
		%% Line 1192
		'spec' =
		    %% Line 1192
		    [{{'screenToClient',1},[{'type',1192,'bounded_fun',[{'type',1192,'fun',[{'type',1192,'product',[{'var',1192,'This'}]}|[{'type',1192,'tuple',[{'ann_type',1192,[{'var',1192,'X'}|[{'type',1192,'integer',[]}]]}|[{'ann_type',1192,[{'var',1192,'Y'}|[{'type',1192,'integer',[]}]]}]]}]]}|[[{'type',1193,'constraint',[{'atom',1193,'is_subtype'}|[[{'var',1193,'This'}|[{'type',1193,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1200
		'spec' =
		    %% Line 1200
		    [{{'screenToClient',2},[{'type',1200,'bounded_fun',[{'type',1200,'fun',[{'type',1200,'product',[{'var',1200,'This'}|[{'var',1200,'Pt'}]]}|[{'type',1200,'tuple',[{'ann_type',1200,[{'var',1200,'X'}|[{'type',1200,'integer',[]}]]}|[{'ann_type',1200,[{'var',1200,'Y'}|[{'type',1200,'integer',[]}]]}]]}]]}|[[{'type',1201,'constraint',[{'atom',1201,'is_subtype'}|[[{'var',1201,'This'}|[{'type',1201,'wxWindow',[]}]]]]}|[{'type',1201,'constraint',[{'atom',1201,'is_subtype'}|[[{'var',1201,'Pt'}|[{'type',1201,'tuple',[{'ann_type',1201,[{'var',1201,'X'}|[{'type',1201,'integer',[]}]]}|[{'ann_type',1201,[{'var',1201,'Y'}|[{'type',1201,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1209
		'spec' =
		    %% Line 1209
		    [{{'scrollLines',2},[{'type',1209,'bounded_fun',[{'type',1209,'fun',[{'type',1209,'product',[{'var',1209,'This'}|[{'var',1209,'Lines'}]]}|[{'type',1209,'boolean',[]}]]}|[[{'type',1210,'constraint',[{'atom',1210,'is_subtype'}|[[{'var',1210,'This'}|[{'type',1210,'wxWindow',[]}]]]]}|[{'type',1210,'constraint',[{'atom',1210,'is_subtype'}|[[{'var',1210,'Lines'}|[{'type',1210,'integer',[]}]]]]}]]]]}]}],
		%% Line 1218
		'spec' =
		    %% Line 1218
		    [{{'scrollPages',2},[{'type',1218,'bounded_fun',[{'type',1218,'fun',[{'type',1218,'product',[{'var',1218,'This'}|[{'var',1218,'Pages'}]]}|[{'type',1218,'boolean',[]}]]}|[[{'type',1219,'constraint',[{'atom',1219,'is_subtype'}|[[{'var',1219,'This'}|[{'type',1219,'wxWindow',[]}]]]]}|[{'type',1219,'constraint',[{'atom',1219,'is_subtype'}|[[{'var',1219,'Pages'}|[{'type',1219,'integer',[]}]]]]}]]]]}]}],
		%% Line 1227
		'spec' =
		    %% Line 1227
		    [{{'scrollWindow',3},[{'type',1227,'bounded_fun',[{'type',1227,'fun',[{'type',1227,'product',[{'var',1227,'This'}|[{'var',1227,'Dx'}|[{'var',1227,'Dy'}]]]}|[{'atom',1227,'ok'}]]}|[[{'type',1228,'constraint',[{'atom',1228,'is_subtype'}|[[{'var',1228,'This'}|[{'type',1228,'wxWindow',[]}]]]]}|[{'type',1228,'constraint',[{'atom',1228,'is_subtype'}|[[{'var',1228,'Dx'}|[{'type',1228,'integer',[]}]]]]}|[{'type',1228,'constraint',[{'atom',1228,'is_subtype'}|[[{'var',1228,'Dy'}|[{'type',1228,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1235
		'spec' =
		    %% Line 1235
		    [{{'scrollWindow',4},[{'type',1235,'bounded_fun',[{'type',1235,'fun',[{'type',1235,'product',[{'var',1235,'This'}|[{'var',1235,'Dx'}|[{'var',1235,'Dy'}|[{'type',1235,'list',[{'var',1235,'Option'}]}]]]]}|[{'atom',1235,'ok'}]]}|[[{'type',1236,'constraint',[{'atom',1236,'is_subtype'}|[[{'var',1236,'This'}|[{'type',1236,'wxWindow',[]}]]]]}|[{'type',1236,'constraint',[{'atom',1236,'is_subtype'}|[[{'var',1236,'Dx'}|[{'type',1236,'integer',[]}]]]]}|[{'type',1236,'constraint',[{'atom',1236,'is_subtype'}|[[{'var',1236,'Dy'}|[{'type',1236,'integer',[]}]]]]}|[{'type',1237,'constraint',[{'atom',1237,'is_subtype'}|[[{'var',1237,'Option'}|[{'type',1237,'tuple',[{'atom',1237,'rect'}|[{'type',1237,'tuple',[{'ann_type',1237,[{'var',1237,'X'}|[{'type',1237,'integer',[]}]]}|[{'ann_type',1237,[{'var',1237,'Y'}|[{'type',1237,'integer',[]}]]}|[{'ann_type',1237,[{'var',1237,'W'}|[{'type',1237,'integer',[]}]]}|[{'ann_type',1237,[{'var',1237,'H'}|[{'type',1237,'integer',[]}]]}]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 1248
		'spec' =
		    %% Line 1248
		    [{{'setAcceleratorTable',2},[{'type',1248,'bounded_fun',[{'type',1248,'fun',[{'type',1248,'product',[{'var',1248,'This'}|[{'var',1248,'Accel'}]]}|[{'atom',1248,'ok'}]]}|[[{'type',1249,'constraint',[{'atom',1249,'is_subtype'}|[[{'var',1249,'This'}|[{'type',1249,'wxWindow',[]}]]]]}|[{'type',1249,'constraint',[{'atom',1249,'is_subtype'}|[[{'var',1249,'Accel'}|[{'remote_type',1249,[{'atom',1249,'wxAcceleratorTable'}|[{'atom',1249,'wxAcceleratorTable'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1257
		'spec' =
		    %% Line 1257
		    [{{'setAutoLayout',2},[{'type',1257,'bounded_fun',[{'type',1257,'fun',[{'type',1257,'product',[{'var',1257,'This'}|[{'var',1257,'AutoLayout'}]]}|[{'atom',1257,'ok'}]]}|[[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'This'}|[{'type',1258,'wxWindow',[]}]]]]}|[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'AutoLayout'}|[{'type',1258,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1266
		'spec' =
		    %% Line 1266
		    [{{'setBackgroundColour',2},[{'type',1266,'bounded_fun',[{'type',1266,'fun',[{'type',1266,'product',[{'var',1266,'This'}|[{'var',1266,'Colour'}]]}|[{'type',1266,'boolean',[]}]]}|[[{'type',1267,'constraint',[{'atom',1267,'is_subtype'}|[[{'var',1267,'This'}|[{'type',1267,'wxWindow',[]}]]]]}|[{'type',1267,'constraint',[{'atom',1267,'is_subtype'}|[[{'var',1267,'Colour'}|[{'remote_type',1267,[{'atom',1267,'wx'}|[{'atom',1267,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1276
		'spec' =
		    %% Line 1276
		    [{{'setBackgroundStyle',2},[{'type',1276,'bounded_fun',[{'type',1276,'fun',[{'type',1276,'product',[{'var',1276,'This'}|[{'var',1276,'Style'}]]}|[{'type',1276,'boolean',[]}]]}|[[{'type',1277,'constraint',[{'atom',1277,'is_subtype'}|[[{'var',1277,'This'}|[{'type',1277,'wxWindow',[]}]]]]}|[{'type',1277,'constraint',[{'atom',1277,'is_subtype'}|[[{'var',1277,'Style'}|[{'remote_type',1277,[{'atom',1277,'wx'}|[{'atom',1277,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1285
		'spec' =
		    %% Line 1285
		    [{{'setCaret',2},[{'type',1285,'bounded_fun',[{'type',1285,'fun',[{'type',1285,'product',[{'var',1285,'This'}|[{'var',1285,'Caret'}]]}|[{'atom',1285,'ok'}]]}|[[{'type',1286,'constraint',[{'atom',1286,'is_subtype'}|[[{'var',1286,'This'}|[{'type',1286,'wxWindow',[]}]]]]}|[{'type',1286,'constraint',[{'atom',1286,'is_subtype'}|[[{'var',1286,'Caret'}|[{'remote_type',1286,[{'atom',1286,'wxCaret'}|[{'atom',1286,'wxCaret'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1298
		'spec' =
		    %% Line 1298
		    [{{'setClientSize',2},[{'type',1298,'bounded_fun',[{'type',1298,'fun',[{'type',1298,'product',[{'var',1298,'This'}|[{'var',1298,'Size'}]]}|[{'atom',1298,'ok'}]]}|[[{'type',1299,'constraint',[{'atom',1299,'is_subtype'}|[[{'var',1299,'This'}|[{'type',1299,'wxWindow',[]}]]]]}|[{'type',1299,'constraint',[{'atom',1299,'is_subtype'}|[[{'var',1299,'Size'}|[{'type',1299,'tuple',[{'ann_type',1299,[{'var',1299,'W'}|[{'type',1299,'integer',[]}]]}|[{'ann_type',1299,[{'var',1299,'H'}|[{'type',1299,'integer',[]}]]}]]}]]]]}]]]]}|[{'type',1300,'bounded_fun',[{'type',1300,'fun',[{'type',1300,'product',[{'var',1300,'This'}|[{'var',1300,'Rect'}]]}|[{'atom',1300,'ok'}]]}|[[{'type',1301,'constraint',[{'atom',1301,'is_subtype'}|[[{'var',1301,'This'}|[{'type',1301,'wxWindow',[]}]]]]}|[{'type',1301,'constraint',[{'atom',1301,'is_subtype'}|[[{'var',1301,'Rect'}|[{'type',1301,'tuple',[{'ann_type',1301,[{'var',1301,'X'}|[{'type',1301,'integer',[]}]]}|[{'ann_type',1301,[{'var',1301,'Y'}|[{'type',1301,'integer',[]}]]}|[{'ann_type',1301,[{'var',1301,'W'}|[{'type',1301,'integer',[]}]]}|[{'ann_type',1301,[{'var',1301,'H'}|[{'type',1301,'integer',[]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 1314
		'spec' =
		    %% Line 1314
		    [{{'setClientSize',3},[{'type',1314,'bounded_fun',[{'type',1314,'fun',[{'type',1314,'product',[{'var',1314,'This'}|[{'var',1314,'Width'}|[{'var',1314,'Height'}]]]}|[{'atom',1314,'ok'}]]}|[[{'type',1315,'constraint',[{'atom',1315,'is_subtype'}|[[{'var',1315,'This'}|[{'type',1315,'wxWindow',[]}]]]]}|[{'type',1315,'constraint',[{'atom',1315,'is_subtype'}|[[{'var',1315,'Width'}|[{'type',1315,'integer',[]}]]]]}|[{'type',1315,'constraint',[{'atom',1315,'is_subtype'}|[[{'var',1315,'Height'}|[{'type',1315,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1323
		'spec' =
		    %% Line 1323
		    [{{'setContainingSizer',2},[{'type',1323,'bounded_fun',[{'type',1323,'fun',[{'type',1323,'product',[{'var',1323,'This'}|[{'var',1323,'Sizer'}]]}|[{'atom',1323,'ok'}]]}|[[{'type',1324,'constraint',[{'atom',1324,'is_subtype'}|[[{'var',1324,'This'}|[{'type',1324,'wxWindow',[]}]]]]}|[{'type',1324,'constraint',[{'atom',1324,'is_subtype'}|[[{'var',1324,'Sizer'}|[{'remote_type',1324,[{'atom',1324,'wxSizer'}|[{'atom',1324,'wxSizer'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1332
		'spec' =
		    %% Line 1332
		    [{{'setCursor',2},[{'type',1332,'bounded_fun',[{'type',1332,'fun',[{'type',1332,'product',[{'var',1332,'This'}|[{'var',1332,'Cursor'}]]}|[{'type',1332,'boolean',[]}]]}|[[{'type',1333,'constraint',[{'atom',1333,'is_subtype'}|[[{'var',1333,'This'}|[{'type',1333,'wxWindow',[]}]]]]}|[{'type',1333,'constraint',[{'atom',1333,'is_subtype'}|[[{'var',1333,'Cursor'}|[{'remote_type',1333,[{'atom',1333,'wxCursor'}|[{'atom',1333,'wxCursor'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1341
		'spec' =
		    %% Line 1341
		    [{{'setMaxSize',2},[{'type',1341,'bounded_fun',[{'type',1341,'fun',[{'type',1341,'product',[{'var',1341,'This'}|[{'var',1341,'MaxSize'}]]}|[{'atom',1341,'ok'}]]}|[[{'type',1342,'constraint',[{'atom',1342,'is_subtype'}|[[{'var',1342,'This'}|[{'type',1342,'wxWindow',[]}]]]]}|[{'type',1342,'constraint',[{'atom',1342,'is_subtype'}|[[{'var',1342,'MaxSize'}|[{'type',1342,'tuple',[{'ann_type',1342,[{'var',1342,'W'}|[{'type',1342,'integer',[]}]]}|[{'ann_type',1342,[{'var',1342,'H'}|[{'type',1342,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1350
		'spec' =
		    %% Line 1350
		    [{{'setMinSize',2},[{'type',1350,'bounded_fun',[{'type',1350,'fun',[{'type',1350,'product',[{'var',1350,'This'}|[{'var',1350,'MinSize'}]]}|[{'atom',1350,'ok'}]]}|[[{'type',1351,'constraint',[{'atom',1351,'is_subtype'}|[[{'var',1351,'This'}|[{'type',1351,'wxWindow',[]}]]]]}|[{'type',1351,'constraint',[{'atom',1351,'is_subtype'}|[[{'var',1351,'MinSize'}|[{'type',1351,'tuple',[{'ann_type',1351,[{'var',1351,'W'}|[{'type',1351,'integer',[]}]]}|[{'ann_type',1351,[{'var',1351,'H'}|[{'type',1351,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1359
		'spec' =
		    %% Line 1359
		    [{{'setOwnBackgroundColour',2},[{'type',1359,'bounded_fun',[{'type',1359,'fun',[{'type',1359,'product',[{'var',1359,'This'}|[{'var',1359,'Colour'}]]}|[{'atom',1359,'ok'}]]}|[[{'type',1360,'constraint',[{'atom',1360,'is_subtype'}|[[{'var',1360,'This'}|[{'type',1360,'wxWindow',[]}]]]]}|[{'type',1360,'constraint',[{'atom',1360,'is_subtype'}|[[{'var',1360,'Colour'}|[{'remote_type',1360,[{'atom',1360,'wx'}|[{'atom',1360,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1368
		'spec' =
		    %% Line 1368
		    [{{'setOwnFont',2},[{'type',1368,'bounded_fun',[{'type',1368,'fun',[{'type',1368,'product',[{'var',1368,'This'}|[{'var',1368,'Font'}]]}|[{'atom',1368,'ok'}]]}|[[{'type',1369,'constraint',[{'atom',1369,'is_subtype'}|[[{'var',1369,'This'}|[{'type',1369,'wxWindow',[]}]]]]}|[{'type',1369,'constraint',[{'atom',1369,'is_subtype'}|[[{'var',1369,'Font'}|[{'remote_type',1369,[{'atom',1369,'wxFont'}|[{'atom',1369,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1377
		'spec' =
		    %% Line 1377
		    [{{'setOwnForegroundColour',2},[{'type',1377,'bounded_fun',[{'type',1377,'fun',[{'type',1377,'product',[{'var',1377,'This'}|[{'var',1377,'Colour'}]]}|[{'atom',1377,'ok'}]]}|[[{'type',1378,'constraint',[{'atom',1378,'is_subtype'}|[[{'var',1378,'This'}|[{'type',1378,'wxWindow',[]}]]]]}|[{'type',1378,'constraint',[{'atom',1378,'is_subtype'}|[[{'var',1378,'Colour'}|[{'remote_type',1378,[{'atom',1378,'wx'}|[{'atom',1378,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1386
		'spec' =
		    %% Line 1386
		    [{{'setDropTarget',2},[{'type',1386,'bounded_fun',[{'type',1386,'fun',[{'type',1386,'product',[{'var',1386,'This'}|[{'var',1386,'DropTarget'}]]}|[{'atom',1386,'ok'}]]}|[[{'type',1387,'constraint',[{'atom',1387,'is_subtype'}|[[{'var',1387,'This'}|[{'type',1387,'wxWindow',[]}]]]]}|[{'type',1387,'constraint',[{'atom',1387,'is_subtype'}|[[{'var',1387,'DropTarget'}|[{'remote_type',1387,[{'atom',1387,'wx'}|[{'atom',1387,'wx_object'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1395
		'spec' =
		    %% Line 1395
		    [{{'setExtraStyle',2},[{'type',1395,'bounded_fun',[{'type',1395,'fun',[{'type',1395,'product',[{'var',1395,'This'}|[{'var',1395,'ExStyle'}]]}|[{'atom',1395,'ok'}]]}|[[{'type',1396,'constraint',[{'atom',1396,'is_subtype'}|[[{'var',1396,'This'}|[{'type',1396,'wxWindow',[]}]]]]}|[{'type',1396,'constraint',[{'atom',1396,'is_subtype'}|[[{'var',1396,'ExStyle'}|[{'type',1396,'integer',[]}]]]]}]]]]}]}],
		%% Line 1404
		'spec' =
		    %% Line 1404
		    [{{'setFocus',1},[{'type',1404,'bounded_fun',[{'type',1404,'fun',[{'type',1404,'product',[{'var',1404,'This'}]}|[{'atom',1404,'ok'}]]}|[[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'This'}|[{'type',1405,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1412
		'spec' =
		    %% Line 1412
		    [{{'setFocusFromKbd',1},[{'type',1412,'bounded_fun',[{'type',1412,'fun',[{'type',1412,'product',[{'var',1412,'This'}]}|[{'atom',1412,'ok'}]]}|[[{'type',1413,'constraint',[{'atom',1413,'is_subtype'}|[[{'var',1413,'This'}|[{'type',1413,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1420
		'spec' =
		    %% Line 1420
		    [{{'setFont',2},[{'type',1420,'bounded_fun',[{'type',1420,'fun',[{'type',1420,'product',[{'var',1420,'This'}|[{'var',1420,'Font'}]]}|[{'type',1420,'boolean',[]}]]}|[[{'type',1421,'constraint',[{'atom',1421,'is_subtype'}|[[{'var',1421,'This'}|[{'type',1421,'wxWindow',[]}]]]]}|[{'type',1421,'constraint',[{'atom',1421,'is_subtype'}|[[{'var',1421,'Font'}|[{'remote_type',1421,[{'atom',1421,'wxFont'}|[{'atom',1421,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1429
		'spec' =
		    %% Line 1429
		    [{{'setForegroundColour',2},[{'type',1429,'bounded_fun',[{'type',1429,'fun',[{'type',1429,'product',[{'var',1429,'This'}|[{'var',1429,'Colour'}]]}|[{'type',1429,'boolean',[]}]]}|[[{'type',1430,'constraint',[{'atom',1430,'is_subtype'}|[[{'var',1430,'This'}|[{'type',1430,'wxWindow',[]}]]]]}|[{'type',1430,'constraint',[{'atom',1430,'is_subtype'}|[[{'var',1430,'Colour'}|[{'remote_type',1430,[{'atom',1430,'wx'}|[{'atom',1430,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1438
		'spec' =
		    %% Line 1438
		    [{{'setHelpText',2},[{'type',1438,'bounded_fun',[{'type',1438,'fun',[{'type',1438,'product',[{'var',1438,'This'}|[{'var',1438,'Text'}]]}|[{'atom',1438,'ok'}]]}|[[{'type',1439,'constraint',[{'atom',1439,'is_subtype'}|[[{'var',1439,'This'}|[{'type',1439,'wxWindow',[]}]]]]}|[{'type',1439,'constraint',[{'atom',1439,'is_subtype'}|[[{'var',1439,'Text'}|[{'remote_type',1439,[{'atom',1439,'unicode'}|[{'atom',1439,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1448
		'spec' =
		    %% Line 1448
		    [{{'setId',2},[{'type',1448,'bounded_fun',[{'type',1448,'fun',[{'type',1448,'product',[{'var',1448,'This'}|[{'var',1448,'Winid'}]]}|[{'atom',1448,'ok'}]]}|[[{'type',1449,'constraint',[{'atom',1449,'is_subtype'}|[[{'var',1449,'This'}|[{'type',1449,'wxWindow',[]}]]]]}|[{'type',1449,'constraint',[{'atom',1449,'is_subtype'}|[[{'var',1449,'Winid'}|[{'type',1449,'integer',[]}]]]]}]]]]}]}],
		%% Line 1457
		'spec' =
		    %% Line 1457
		    [{{'setLabel',2},[{'type',1457,'bounded_fun',[{'type',1457,'fun',[{'type',1457,'product',[{'var',1457,'This'}|[{'var',1457,'Label'}]]}|[{'atom',1457,'ok'}]]}|[[{'type',1458,'constraint',[{'atom',1458,'is_subtype'}|[[{'var',1458,'This'}|[{'type',1458,'wxWindow',[]}]]]]}|[{'type',1458,'constraint',[{'atom',1458,'is_subtype'}|[[{'var',1458,'Label'}|[{'remote_type',1458,[{'atom',1458,'unicode'}|[{'atom',1458,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1467
		'spec' =
		    %% Line 1467
		    [{{'setName',2},[{'type',1467,'bounded_fun',[{'type',1467,'fun',[{'type',1467,'product',[{'var',1467,'This'}|[{'var',1467,'Name'}]]}|[{'atom',1467,'ok'}]]}|[[{'type',1468,'constraint',[{'atom',1468,'is_subtype'}|[[{'var',1468,'This'}|[{'type',1468,'wxWindow',[]}]]]]}|[{'type',1468,'constraint',[{'atom',1468,'is_subtype'}|[[{'var',1468,'Name'}|[{'remote_type',1468,[{'atom',1468,'unicode'}|[{'atom',1468,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1477
		'spec' =
		    %% Line 1477
		    [{{'setPalette',2},[{'type',1477,'bounded_fun',[{'type',1477,'fun',[{'type',1477,'product',[{'var',1477,'This'}|[{'var',1477,'Pal'}]]}|[{'atom',1477,'ok'}]]}|[[{'type',1478,'constraint',[{'atom',1478,'is_subtype'}|[[{'var',1478,'This'}|[{'type',1478,'wxWindow',[]}]]]]}|[{'type',1478,'constraint',[{'atom',1478,'is_subtype'}|[[{'var',1478,'Pal'}|[{'remote_type',1478,[{'atom',1478,'wxPalette'}|[{'atom',1478,'wxPalette'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1486
		'spec' =
		    %% Line 1486
		    [{{'setScrollbar',5},[{'type',1486,'bounded_fun',[{'type',1486,'fun',[{'type',1486,'product',[{'var',1486,'This'}|[{'var',1486,'Orient'}|[{'var',1486,'Pos'}|[{'var',1486,'ThumbVisible'}|[{'var',1486,'Range'}]]]]]}|[{'atom',1486,'ok'}]]}|[[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'This'}|[{'type',1487,'wxWindow',[]}]]]]}|[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'Orient'}|[{'type',1487,'integer',[]}]]]]}|[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'Pos'}|[{'type',1487,'integer',[]}]]]]}|[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'ThumbVisible'}|[{'type',1487,'integer',[]}]]]]}|[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'Range'}|[{'type',1487,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1494
		'spec' =
		    %% Line 1494
		    [{{'setScrollbar',6},[{'type',1494,'bounded_fun',[{'type',1494,'fun',[{'type',1494,'product',[{'var',1494,'This'}|[{'var',1494,'Orient'}|[{'var',1494,'Pos'}|[{'var',1494,'ThumbVisible'}|[{'var',1494,'Range'}|[{'type',1494,'list',[{'var',1494,'Option'}]}]]]]]]}|[{'atom',1494,'ok'}]]}|[[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'This'}|[{'type',1495,'wxWindow',[]}]]]]}|[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'Orient'}|[{'type',1495,'integer',[]}]]]]}|[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'Pos'}|[{'type',1495,'integer',[]}]]]]}|[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'ThumbVisible'}|[{'type',1495,'integer',[]}]]]]}|[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'Range'}|[{'type',1495,'integer',[]}]]]]}|[{'type',1496,'constraint',[{'atom',1496,'is_subtype'}|[[{'var',1496,'Option'}|[{'type',1496,'tuple',[{'atom',1496,'refresh'}|[{'type',1496,'boolean',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 1507
		'spec' =
		    %% Line 1507
		    [{{'setScrollPos',3},[{'type',1507,'bounded_fun',[{'type',1507,'fun',[{'type',1507,'product',[{'var',1507,'This'}|[{'var',1507,'Orient'}|[{'var',1507,'Pos'}]]]}|[{'atom',1507,'ok'}]]}|[[{'type',1508,'constraint',[{'atom',1508,'is_subtype'}|[[{'var',1508,'This'}|[{'type',1508,'wxWindow',[]}]]]]}|[{'type',1508,'constraint',[{'atom',1508,'is_subtype'}|[[{'var',1508,'Orient'}|[{'type',1508,'integer',[]}]]]]}|[{'type',1508,'constraint',[{'atom',1508,'is_subtype'}|[[{'var',1508,'Pos'}|[{'type',1508,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1515
		'spec' =
		    %% Line 1515
		    [{{'setScrollPos',4},[{'type',1515,'bounded_fun',[{'type',1515,'fun',[{'type',1515,'product',[{'var',1515,'This'}|[{'var',1515,'Orient'}|[{'var',1515,'Pos'}|[{'type',1515,'list',[{'var',1515,'Option'}]}]]]]}|[{'atom',1515,'ok'}]]}|[[{'type',1516,'constraint',[{'atom',1516,'is_subtype'}|[[{'var',1516,'This'}|[{'type',1516,'wxWindow',[]}]]]]}|[{'type',1516,'constraint',[{'atom',1516,'is_subtype'}|[[{'var',1516,'Orient'}|[{'type',1516,'integer',[]}]]]]}|[{'type',1516,'constraint',[{'atom',1516,'is_subtype'}|[[{'var',1516,'Pos'}|[{'type',1516,'integer',[]}]]]]}|[{'type',1517,'constraint',[{'atom',1517,'is_subtype'}|[[{'var',1517,'Option'}|[{'type',1517,'tuple',[{'atom',1517,'refresh'}|[{'type',1517,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 1532
		'spec' =
		    %% Line 1532
		    [{{'setSize',2},[{'type',1532,'bounded_fun',[{'type',1532,'fun',[{'type',1532,'product',[{'var',1532,'This'}|[{'var',1532,'Rect'}]]}|[{'atom',1532,'ok'}]]}|[[{'type',1533,'constraint',[{'atom',1533,'is_subtype'}|[[{'var',1533,'This'}|[{'type',1533,'wxWindow',[]}]]]]}|[{'type',1533,'constraint',[{'atom',1533,'is_subtype'}|[[{'var',1533,'Rect'}|[{'type',1533,'tuple',[{'ann_type',1533,[{'var',1533,'X'}|[{'type',1533,'integer',[]}]]}|[{'ann_type',1533,[{'var',1533,'Y'}|[{'type',1533,'integer',[]}]]}|[{'ann_type',1533,[{'var',1533,'W'}|[{'type',1533,'integer',[]}]]}|[{'ann_type',1533,[{'var',1533,'H'}|[{'type',1533,'integer',[]}]]}]]]]}]]]]}]]]]}|[{'type',1534,'bounded_fun',[{'type',1534,'fun',[{'type',1534,'product',[{'var',1534,'This'}|[{'var',1534,'Size'}]]}|[{'atom',1534,'ok'}]]}|[[{'type',1535,'constraint',[{'atom',1535,'is_subtype'}|[[{'var',1535,'This'}|[{'type',1535,'wxWindow',[]}]]]]}|[{'type',1535,'constraint',[{'atom',1535,'is_subtype'}|[[{'var',1535,'Size'}|[{'type',1535,'tuple',[{'ann_type',1535,[{'var',1535,'W'}|[{'type',1535,'integer',[]}]]}|[{'ann_type',1535,[{'var',1535,'H'}|[{'type',1535,'integer',[]}]]}]]}]]]]}]]]]}]]}],
		%% Line 1552
		'spec' =
		    %% Line 1552
		    [{{'setSize',3},[{'type',1552,'bounded_fun',[{'type',1552,'fun',[{'type',1552,'product',[{'var',1552,'This'}|[{'var',1552,'Width'}|[{'var',1552,'Height'}]]]}|[{'atom',1552,'ok'}]]}|[[{'type',1553,'constraint',[{'atom',1553,'is_subtype'}|[[{'var',1553,'This'}|[{'type',1553,'wxWindow',[]}]]]]}|[{'type',1553,'constraint',[{'atom',1553,'is_subtype'}|[[{'var',1553,'Width'}|[{'type',1553,'integer',[]}]]]]}|[{'type',1553,'constraint',[{'atom',1553,'is_subtype'}|[[{'var',1553,'Height'}|[{'type',1553,'integer',[]}]]]]}]]]]]}|[{'type',1554,'bounded_fun',[{'type',1554,'fun',[{'type',1554,'product',[{'var',1554,'This'}|[{'var',1554,'Rect'}|[{'type',1554,'list',[{'var',1554,'Option'}]}]]]}|[{'atom',1554,'ok'}]]}|[[{'type',1555,'constraint',[{'atom',1555,'is_subtype'}|[[{'var',1555,'This'}|[{'type',1555,'wxWindow',[]}]]]]}|[{'type',1555,'constraint',[{'atom',1555,'is_subtype'}|[[{'var',1555,'Rect'}|[{'type',1555,'tuple',[{'ann_type',1555,[{'var',1555,'X'}|[{'type',1555,'integer',[]}]]}|[{'ann_type',1555,[{'var',1555,'Y'}|[{'type',1555,'integer',[]}]]}|[{'ann_type',1555,[{'var',1555,'W'}|[{'type',1555,'integer',[]}]]}|[{'ann_type',1555,[{'var',1555,'H'}|[{'type',1555,'integer',[]}]]}]]]]}]]]]}|[{'type',1556,'constraint',[{'atom',1556,'is_subtype'}|[[{'var',1556,'Option'}|[{'type',1556,'tuple',[{'atom',1556,'sizeFlags'}|[{'type',1556,'integer',[]}]]}]]]]}]]]]]}]]}],
		%% Line 1572
		'spec' =
		    %% Line 1572
		    [{{'setSize',5},[{'type',1572,'bounded_fun',[{'type',1572,'fun',[{'type',1572,'product',[{'var',1572,'This'}|[{'var',1572,'X'}|[{'var',1572,'Y'}|[{'var',1572,'Width'}|[{'var',1572,'Height'}]]]]]}|[{'atom',1572,'ok'}]]}|[[{'type',1573,'constraint',[{'atom',1573,'is_subtype'}|[[{'var',1573,'This'}|[{'type',1573,'wxWindow',[]}]]]]}|[{'type',1573,'constraint',[{'atom',1573,'is_subtype'}|[[{'var',1573,'X'}|[{'type',1573,'integer',[]}]]]]}|[{'type',1573,'constraint',[{'atom',1573,'is_subtype'}|[[{'var',1573,'Y'}|[{'type',1573,'integer',[]}]]]]}|[{'type',1573,'constraint',[{'atom',1573,'is_subtype'}|[[{'var',1573,'Width'}|[{'type',1573,'integer',[]}]]]]}|[{'type',1573,'constraint',[{'atom',1573,'is_subtype'}|[[{'var',1573,'Height'}|[{'type',1573,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1580
		'spec' =
		    %% Line 1580
		    [{{'setSize',6},[{'type',1580,'bounded_fun',[{'type',1580,'fun',[{'type',1580,'product',[{'var',1580,'This'}|[{'var',1580,'X'}|[{'var',1580,'Y'}|[{'var',1580,'Width'}|[{'var',1580,'Height'}|[{'type',1580,'list',[{'var',1580,'Option'}]}]]]]]]}|[{'atom',1580,'ok'}]]}|[[{'type',1581,'constraint',[{'atom',1581,'is_subtype'}|[[{'var',1581,'This'}|[{'type',1581,'wxWindow',[]}]]]]}|[{'type',1581,'constraint',[{'atom',1581,'is_subtype'}|[[{'var',1581,'X'}|[{'type',1581,'integer',[]}]]]]}|[{'type',1581,'constraint',[{'atom',1581,'is_subtype'}|[[{'var',1581,'Y'}|[{'type',1581,'integer',[]}]]]]}|[{'type',1581,'constraint',[{'atom',1581,'is_subtype'}|[[{'var',1581,'Width'}|[{'type',1581,'integer',[]}]]]]}|[{'type',1581,'constraint',[{'atom',1581,'is_subtype'}|[[{'var',1581,'Height'}|[{'type',1581,'integer',[]}]]]]}|[{'type',1582,'constraint',[{'atom',1582,'is_subtype'}|[[{'var',1582,'Option'}|[{'type',1582,'tuple',[{'atom',1582,'sizeFlags'}|[{'type',1582,'integer',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 1593
		'spec' =
		    %% Line 1593
		    [{{'setSizeHints',2},[{'type',1593,'bounded_fun',[{'type',1593,'fun',[{'type',1593,'product',[{'var',1593,'This'}|[{'var',1593,'MinSize'}]]}|[{'atom',1593,'ok'}]]}|[[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'This'}|[{'type',1594,'wxWindow',[]}]]]]}|[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'MinSize'}|[{'type',1594,'tuple',[{'ann_type',1594,[{'var',1594,'W'}|[{'type',1594,'integer',[]}]]}|[{'ann_type',1594,[{'var',1594,'H'}|[{'type',1594,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1607
		'spec' =
		    %% Line 1607
		    [{{'setSizeHints',3},[{'type',1607,'bounded_fun',[{'type',1607,'fun',[{'type',1607,'product',[{'var',1607,'This'}|[{'var',1607,'MinW'}|[{'var',1607,'MinH'}]]]}|[{'atom',1607,'ok'}]]}|[[{'type',1608,'constraint',[{'atom',1608,'is_subtype'}|[[{'var',1608,'This'}|[{'type',1608,'wxWindow',[]}]]]]}|[{'type',1608,'constraint',[{'atom',1608,'is_subtype'}|[[{'var',1608,'MinW'}|[{'type',1608,'integer',[]}]]]]}|[{'type',1608,'constraint',[{'atom',1608,'is_subtype'}|[[{'var',1608,'MinH'}|[{'type',1608,'integer',[]}]]]]}]]]]]}|[{'type',1609,'bounded_fun',[{'type',1609,'fun',[{'type',1609,'product',[{'var',1609,'This'}|[{'var',1609,'MinSize'}|[{'type',1609,'list',[{'var',1609,'Option'}]}]]]}|[{'atom',1609,'ok'}]]}|[[{'type',1610,'constraint',[{'atom',1610,'is_subtype'}|[[{'var',1610,'This'}|[{'type',1610,'wxWindow',[]}]]]]}|[{'type',1610,'constraint',[{'atom',1610,'is_subtype'}|[[{'var',1610,'MinSize'}|[{'type',1610,'tuple',[{'ann_type',1610,[{'var',1610,'W'}|[{'type',1610,'integer',[]}]]}|[{'ann_type',1610,[{'var',1610,'H'}|[{'type',1610,'integer',[]}]]}]]}]]]]}|[{'type',1611,'constraint',[{'atom',1611,'is_subtype'}|[[{'var',1611,'Option'}|[{'type',1611,'union',[{'type',1611,'tuple',[{'atom',1611,'maxSize'}|[{'type',1611,'tuple',[{'ann_type',1611,[{'var',1611,'W'}|[{'type',1611,'integer',[]}]]}|[{'ann_type',1611,[{'var',1611,'H'}|[{'type',1611,'integer',[]}]]}]]}]]}|[{'type',1612,'tuple',[{'atom',1612,'incSize'}|[{'type',1612,'tuple',[{'ann_type',1612,[{'var',1612,'W'}|[{'type',1612,'integer',[]}]]}|[{'ann_type',1612,[{'var',1612,'H'}|[{'type',1612,'integer',[]}]]}]]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 1628
		'spec' =
		    %% Line 1628
		    [{{'setSizeHints',4},[{'type',1628,'bounded_fun',[{'type',1628,'fun',[{'type',1628,'product',[{'var',1628,'This'}|[{'var',1628,'MinW'}|[{'var',1628,'MinH'}|[{'type',1628,'list',[{'var',1628,'Option'}]}]]]]}|[{'atom',1628,'ok'}]]}|[[{'type',1629,'constraint',[{'atom',1629,'is_subtype'}|[[{'var',1629,'This'}|[{'type',1629,'wxWindow',[]}]]]]}|[{'type',1629,'constraint',[{'atom',1629,'is_subtype'}|[[{'var',1629,'MinW'}|[{'type',1629,'integer',[]}]]]]}|[{'type',1629,'constraint',[{'atom',1629,'is_subtype'}|[[{'var',1629,'MinH'}|[{'type',1629,'integer',[]}]]]]}|[{'type',1630,'constraint',[{'atom',1630,'is_subtype'}|[[{'var',1630,'Option'}|[{'type',1630,'union',[{'type',1630,'tuple',[{'atom',1630,'maxW'}|[{'type',1630,'integer',[]}]]}|[{'type',1631,'tuple',[{'atom',1631,'maxH'}|[{'type',1631,'integer',[]}]]}|[{'type',1632,'tuple',[{'atom',1632,'incW'}|[{'type',1632,'integer',[]}]]}|[{'type',1633,'tuple',[{'atom',1633,'incH'}|[{'type',1633,'integer',[]}]]}]]]]}]]]]}]]]]]]}]}],
		%% Line 1647
		'spec' =
		    %% Line 1647
		    [{{'setSizer',2},[{'type',1647,'bounded_fun',[{'type',1647,'fun',[{'type',1647,'product',[{'var',1647,'This'}|[{'var',1647,'Sizer'}]]}|[{'atom',1647,'ok'}]]}|[[{'type',1648,'constraint',[{'atom',1648,'is_subtype'}|[[{'var',1648,'This'}|[{'type',1648,'wxWindow',[]}]]]]}|[{'type',1648,'constraint',[{'atom',1648,'is_subtype'}|[[{'var',1648,'Sizer'}|[{'remote_type',1648,[{'atom',1648,'wxSizer'}|[{'atom',1648,'wxSizer'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1655
		'spec' =
		    %% Line 1655
		    [{{'setSizer',3},[{'type',1655,'bounded_fun',[{'type',1655,'fun',[{'type',1655,'product',[{'var',1655,'This'}|[{'var',1655,'Sizer'}|[{'type',1655,'list',[{'var',1655,'Option'}]}]]]}|[{'atom',1655,'ok'}]]}|[[{'type',1656,'constraint',[{'atom',1656,'is_subtype'}|[[{'var',1656,'This'}|[{'type',1656,'wxWindow',[]}]]]]}|[{'type',1656,'constraint',[{'atom',1656,'is_subtype'}|[[{'var',1656,'Sizer'}|[{'remote_type',1656,[{'atom',1656,'wxSizer'}|[{'atom',1656,'wxSizer'}|[[]]]]}]]]]}|[{'type',1657,'constraint',[{'atom',1657,'is_subtype'}|[[{'var',1657,'Option'}|[{'type',1657,'tuple',[{'atom',1657,'deleteOld'}|[{'type',1657,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1669
		'spec' =
		    %% Line 1669
		    [{{'setSizerAndFit',2},[{'type',1669,'bounded_fun',[{'type',1669,'fun',[{'type',1669,'product',[{'var',1669,'This'}|[{'var',1669,'Sizer'}]]}|[{'atom',1669,'ok'}]]}|[[{'type',1670,'constraint',[{'atom',1670,'is_subtype'}|[[{'var',1670,'This'}|[{'type',1670,'wxWindow',[]}]]]]}|[{'type',1670,'constraint',[{'atom',1670,'is_subtype'}|[[{'var',1670,'Sizer'}|[{'remote_type',1670,[{'atom',1670,'wxSizer'}|[{'atom',1670,'wxSizer'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1677
		'spec' =
		    %% Line 1677
		    [{{'setSizerAndFit',3},[{'type',1677,'bounded_fun',[{'type',1677,'fun',[{'type',1677,'product',[{'var',1677,'This'}|[{'var',1677,'Sizer'}|[{'type',1677,'list',[{'var',1677,'Option'}]}]]]}|[{'atom',1677,'ok'}]]}|[[{'type',1678,'constraint',[{'atom',1678,'is_subtype'}|[[{'var',1678,'This'}|[{'type',1678,'wxWindow',[]}]]]]}|[{'type',1678,'constraint',[{'atom',1678,'is_subtype'}|[[{'var',1678,'Sizer'}|[{'remote_type',1678,[{'atom',1678,'wxSizer'}|[{'atom',1678,'wxSizer'}|[[]]]]}]]]]}|[{'type',1679,'constraint',[{'atom',1679,'is_subtype'}|[[{'var',1679,'Option'}|[{'type',1679,'tuple',[{'atom',1679,'deleteOld'}|[{'type',1679,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1691
		'spec' =
		    %% Line 1691
		    [{{'setThemeEnabled',2},[{'type',1691,'bounded_fun',[{'type',1691,'fun',[{'type',1691,'product',[{'var',1691,'This'}|[{'var',1691,'EnableTheme'}]]}|[{'atom',1691,'ok'}]]}|[[{'type',1692,'constraint',[{'atom',1692,'is_subtype'}|[[{'var',1692,'This'}|[{'type',1692,'wxWindow',[]}]]]]}|[{'type',1692,'constraint',[{'atom',1692,'is_subtype'}|[[{'var',1692,'EnableTheme'}|[{'type',1692,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1704
		'spec' =
		    %% Line 1704
		    [{{'setToolTip',2},[{'type',1704,'bounded_fun',[{'type',1704,'fun',[{'type',1704,'product',[{'var',1704,'This'}|[{'var',1704,'Tip'}]]}|[{'atom',1704,'ok'}]]}|[[{'type',1705,'constraint',[{'atom',1705,'is_subtype'}|[[{'var',1705,'This'}|[{'type',1705,'wxWindow',[]}]]]]}|[{'type',1705,'constraint',[{'atom',1705,'is_subtype'}|[[{'var',1705,'Tip'}|[{'remote_type',1705,[{'atom',1705,'unicode'}|[{'atom',1705,'chardata'}|[[]]]]}]]]]}]]]]}|[{'type',1706,'bounded_fun',[{'type',1706,'fun',[{'type',1706,'product',[{'var',1706,'This'}|[{'var',1706,'Tip'}]]}|[{'atom',1706,'ok'}]]}|[[{'type',1707,'constraint',[{'atom',1707,'is_subtype'}|[[{'var',1707,'This'}|[{'type',1707,'wxWindow',[]}]]]]}|[{'type',1707,'constraint',[{'atom',1707,'is_subtype'}|[[{'var',1707,'Tip'}|[{'remote_type',1707,[{'atom',1707,'wxToolTip'}|[{'atom',1707,'wxToolTip'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 1721
		'spec' =
		    %% Line 1721
		    [{{'setVirtualSize',2},[{'type',1721,'bounded_fun',[{'type',1721,'fun',[{'type',1721,'product',[{'var',1721,'This'}|[{'var',1721,'Size'}]]}|[{'atom',1721,'ok'}]]}|[[{'type',1722,'constraint',[{'atom',1722,'is_subtype'}|[[{'var',1722,'This'}|[{'type',1722,'wxWindow',[]}]]]]}|[{'type',1722,'constraint',[{'atom',1722,'is_subtype'}|[[{'var',1722,'Size'}|[{'type',1722,'tuple',[{'ann_type',1722,[{'var',1722,'W'}|[{'type',1722,'integer',[]}]]}|[{'ann_type',1722,[{'var',1722,'H'}|[{'type',1722,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1730
		'spec' =
		    %% Line 1730
		    [{{'setVirtualSize',3},[{'type',1730,'bounded_fun',[{'type',1730,'fun',[{'type',1730,'product',[{'var',1730,'This'}|[{'var',1730,'X'}|[{'var',1730,'Y'}]]]}|[{'atom',1730,'ok'}]]}|[[{'type',1731,'constraint',[{'atom',1731,'is_subtype'}|[[{'var',1731,'This'}|[{'type',1731,'wxWindow',[]}]]]]}|[{'type',1731,'constraint',[{'atom',1731,'is_subtype'}|[[{'var',1731,'X'}|[{'type',1731,'integer',[]}]]]]}|[{'type',1731,'constraint',[{'atom',1731,'is_subtype'}|[[{'var',1731,'Y'}|[{'type',1731,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1739
		'spec' =
		    %% Line 1739
		    [{{'setVirtualSizeHints',2},[{'type',1739,'bounded_fun',[{'type',1739,'fun',[{'type',1739,'product',[{'var',1739,'This'}|[{'var',1739,'MinSize'}]]}|[{'atom',1739,'ok'}]]}|[[{'type',1740,'constraint',[{'atom',1740,'is_subtype'}|[[{'var',1740,'This'}|[{'type',1740,'wxWindow',[]}]]]]}|[{'type',1740,'constraint',[{'atom',1740,'is_subtype'}|[[{'var',1740,'MinSize'}|[{'type',1740,'tuple',[{'ann_type',1740,[{'var',1740,'W'}|[{'type',1740,'integer',[]}]]}|[{'ann_type',1740,[{'var',1740,'H'}|[{'type',1740,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1752
		'spec' =
		    %% Line 1752
		    [{{'setVirtualSizeHints',3},[{'type',1752,'bounded_fun',[{'type',1752,'fun',[{'type',1752,'product',[{'var',1752,'This'}|[{'var',1752,'MinW'}|[{'var',1752,'MinH'}]]]}|[{'atom',1752,'ok'}]]}|[[{'type',1753,'constraint',[{'atom',1753,'is_subtype'}|[[{'var',1753,'This'}|[{'type',1753,'wxWindow',[]}]]]]}|[{'type',1753,'constraint',[{'atom',1753,'is_subtype'}|[[{'var',1753,'MinW'}|[{'type',1753,'integer',[]}]]]]}|[{'type',1753,'constraint',[{'atom',1753,'is_subtype'}|[[{'var',1753,'MinH'}|[{'type',1753,'integer',[]}]]]]}]]]]]}|[{'type',1754,'bounded_fun',[{'type',1754,'fun',[{'type',1754,'product',[{'var',1754,'This'}|[{'var',1754,'MinSize'}|[{'type',1754,'list',[{'var',1754,'Option'}]}]]]}|[{'atom',1754,'ok'}]]}|[[{'type',1755,'constraint',[{'atom',1755,'is_subtype'}|[[{'var',1755,'This'}|[{'type',1755,'wxWindow',[]}]]]]}|[{'type',1755,'constraint',[{'atom',1755,'is_subtype'}|[[{'var',1755,'MinSize'}|[{'type',1755,'tuple',[{'ann_type',1755,[{'var',1755,'W'}|[{'type',1755,'integer',[]}]]}|[{'ann_type',1755,[{'var',1755,'H'}|[{'type',1755,'integer',[]}]]}]]}]]]]}|[{'type',1756,'constraint',[{'atom',1756,'is_subtype'}|[[{'var',1756,'Option'}|[{'type',1756,'tuple',[{'atom',1756,'maxSize'}|[{'type',1756,'tuple',[{'ann_type',1756,[{'var',1756,'W'}|[{'type',1756,'integer',[]}]]}|[{'ann_type',1756,[{'var',1756,'H'}|[{'type',1756,'integer',[]}]]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 1771
		'spec' =
		    %% Line 1771
		    [{{'setVirtualSizeHints',4},[{'type',1771,'bounded_fun',[{'type',1771,'fun',[{'type',1771,'product',[{'var',1771,'This'}|[{'var',1771,'MinW'}|[{'var',1771,'MinH'}|[{'type',1771,'list',[{'var',1771,'Option'}]}]]]]}|[{'atom',1771,'ok'}]]}|[[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'This'}|[{'type',1772,'wxWindow',[]}]]]]}|[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'MinW'}|[{'type',1772,'integer',[]}]]]]}|[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'MinH'}|[{'type',1772,'integer',[]}]]]]}|[{'type',1773,'constraint',[{'atom',1773,'is_subtype'}|[[{'var',1773,'Option'}|[{'type',1773,'union',[{'type',1773,'tuple',[{'atom',1773,'maxW'}|[{'type',1773,'integer',[]}]]}|[{'type',1774,'tuple',[{'atom',1774,'maxH'}|[{'type',1774,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 1786
		'spec' =
		    %% Line 1786
		    [{{'setWindowStyle',2},[{'type',1786,'bounded_fun',[{'type',1786,'fun',[{'type',1786,'product',[{'var',1786,'This'}|[{'var',1786,'Style'}]]}|[{'atom',1786,'ok'}]]}|[[{'type',1787,'constraint',[{'atom',1787,'is_subtype'}|[[{'var',1787,'This'}|[{'type',1787,'wxWindow',[]}]]]]}|[{'type',1787,'constraint',[{'atom',1787,'is_subtype'}|[[{'var',1787,'Style'}|[{'type',1787,'integer',[]}]]]]}]]]]}]}],
		%% Line 1795
		'spec' =
		    %% Line 1795
		    [{{'setWindowStyleFlag',2},[{'type',1795,'bounded_fun',[{'type',1795,'fun',[{'type',1795,'product',[{'var',1795,'This'}|[{'var',1795,'Style'}]]}|[{'atom',1795,'ok'}]]}|[[{'type',1796,'constraint',[{'atom',1796,'is_subtype'}|[[{'var',1796,'This'}|[{'type',1796,'wxWindow',[]}]]]]}|[{'type',1796,'constraint',[{'atom',1796,'is_subtype'}|[[{'var',1796,'Style'}|[{'type',1796,'integer',[]}]]]]}]]]]}]}],
		%% Line 1805
		'spec' =
		    %% Line 1805
		    [{{'setWindowVariant',2},[{'type',1805,'bounded_fun',[{'type',1805,'fun',[{'type',1805,'product',[{'var',1805,'This'}|[{'var',1805,'Variant'}]]}|[{'atom',1805,'ok'}]]}|[[{'type',1806,'constraint',[{'atom',1806,'is_subtype'}|[[{'var',1806,'This'}|[{'type',1806,'wxWindow',[]}]]]]}|[{'type',1806,'constraint',[{'atom',1806,'is_subtype'}|[[{'var',1806,'Variant'}|[{'remote_type',1806,[{'atom',1806,'wx'}|[{'atom',1806,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1814
		'spec' =
		    %% Line 1814
		    [{{'shouldInheritColours',1},[{'type',1814,'bounded_fun',[{'type',1814,'fun',[{'type',1814,'product',[{'var',1814,'This'}]}|[{'type',1814,'boolean',[]}]]}|[[{'type',1815,'constraint',[{'atom',1815,'is_subtype'}|[[{'var',1815,'This'}|[{'type',1815,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1822
		'spec' =
		    %% Line 1822
		    [{{'show',1},[{'type',1822,'bounded_fun',[{'type',1822,'fun',[{'type',1822,'product',[{'var',1822,'This'}]}|[{'type',1822,'boolean',[]}]]}|[[{'type',1823,'constraint',[{'atom',1823,'is_subtype'}|[[{'var',1823,'This'}|[{'type',1823,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1830
		'spec' =
		    %% Line 1830
		    [{{'show',2},[{'type',1830,'bounded_fun',[{'type',1830,'fun',[{'type',1830,'product',[{'var',1830,'This'}|[{'type',1830,'list',[{'var',1830,'Option'}]}]]}|[{'type',1830,'boolean',[]}]]}|[[{'type',1831,'constraint',[{'atom',1831,'is_subtype'}|[[{'var',1831,'This'}|[{'type',1831,'wxWindow',[]}]]]]}|[{'type',1832,'constraint',[{'atom',1832,'is_subtype'}|[[{'var',1832,'Option'}|[{'type',1832,'tuple',[{'atom',1832,'show'}|[{'type',1832,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 1843
		'spec' =
		    %% Line 1843
		    [{{'thaw',1},[{'type',1843,'bounded_fun',[{'type',1843,'fun',[{'type',1843,'product',[{'var',1843,'This'}]}|[{'atom',1843,'ok'}]]}|[[{'type',1844,'constraint',[{'atom',1844,'is_subtype'}|[[{'var',1844,'This'}|[{'type',1844,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1851
		'spec' =
		    %% Line 1851
		    [{{'transferDataFromWindow',1},[{'type',1851,'bounded_fun',[{'type',1851,'fun',[{'type',1851,'product',[{'var',1851,'This'}]}|[{'type',1851,'boolean',[]}]]}|[[{'type',1852,'constraint',[{'atom',1852,'is_subtype'}|[[{'var',1852,'This'}|[{'type',1852,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1859
		'spec' =
		    %% Line 1859
		    [{{'transferDataToWindow',1},[{'type',1859,'bounded_fun',[{'type',1859,'fun',[{'type',1859,'product',[{'var',1859,'This'}]}|[{'type',1859,'boolean',[]}]]}|[[{'type',1860,'constraint',[{'atom',1860,'is_subtype'}|[[{'var',1860,'This'}|[{'type',1860,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1867
		'spec' =
		    %% Line 1867
		    [{{'update',1},[{'type',1867,'bounded_fun',[{'type',1867,'fun',[{'type',1867,'product',[{'var',1867,'This'}]}|[{'atom',1867,'ok'}]]}|[[{'type',1868,'constraint',[{'atom',1868,'is_subtype'}|[[{'var',1868,'This'}|[{'type',1868,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1875
		'spec' =
		    %% Line 1875
		    [{{'updateWindowUI',1},[{'type',1875,'bounded_fun',[{'type',1875,'fun',[{'type',1875,'product',[{'var',1875,'This'}]}|[{'atom',1875,'ok'}]]}|[[{'type',1876,'constraint',[{'atom',1876,'is_subtype'}|[[{'var',1876,'This'}|[{'type',1876,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1883
		'spec' =
		    %% Line 1883
		    [{{'updateWindowUI',2},[{'type',1883,'bounded_fun',[{'type',1883,'fun',[{'type',1883,'product',[{'var',1883,'This'}|[{'type',1883,'list',[{'var',1883,'Option'}]}]]}|[{'atom',1883,'ok'}]]}|[[{'type',1884,'constraint',[{'atom',1884,'is_subtype'}|[[{'var',1884,'This'}|[{'type',1884,'wxWindow',[]}]]]]}|[{'type',1885,'constraint',[{'atom',1885,'is_subtype'}|[[{'var',1885,'Option'}|[{'type',1885,'tuple',[{'atom',1885,'flags'}|[{'type',1885,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 1896
		'spec' =
		    %% Line 1896
		    [{{'validate',1},[{'type',1896,'bounded_fun',[{'type',1896,'fun',[{'type',1896,'product',[{'var',1896,'This'}]}|[{'type',1896,'boolean',[]}]]}|[[{'type',1897,'constraint',[{'atom',1897,'is_subtype'}|[[{'var',1897,'This'}|[{'type',1897,'wxWindow',[]}]]]]}]]]}]}],
		%% Line 1904
		'spec' =
		    %% Line 1904
		    [{{'warpPointer',3},[{'type',1904,'bounded_fun',[{'type',1904,'fun',[{'type',1904,'product',[{'var',1904,'This'}|[{'var',1904,'X'}|[{'var',1904,'Y'}]]]}|[{'atom',1904,'ok'}]]}|[[{'type',1905,'constraint',[{'atom',1905,'is_subtype'}|[[{'var',1905,'This'}|[{'type',1905,'wxWindow',[]}]]]]}|[{'type',1905,'constraint',[{'atom',1905,'is_subtype'}|[[{'var',1905,'X'}|[{'type',1905,'integer',[]}]]]]}|[{'type',1905,'constraint',[{'atom',1905,'is_subtype'}|[[{'var',1905,'Y'}|[{'type',1905,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1913
		'spec' =
		    %% Line 1913
		    [{{'destroy',1},[{'type',1913,'fun',[{'type',1913,'product',[{'ann_type',1913,[{'var',1913,'This'}|[{'type',1913,'wxWindow',[]}]]}]}|[{'atom',1913,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 74
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 75
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxWindow'})
	end
'new'/0 =
    %% Line 80
    fun () ->
	%% Line 81
	call 'wxe_util':'construct'
	    (105, %% Line 82
		  #{}#)
'new'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor5,_cor6,_cor7},Id>
	      when %% Line 89
		call 'erlang':'is_integer'
		    (Id) ->
	      %% Line 90
	      apply 'new'/3
		  (Parent, Id, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor21},Id,Options>
	      when let <_cor3> =
		    %% Line 99
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor4> =
			%% Line 99
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 99
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 100
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 101
		      ( fun (_cor11,_cor10) ->
			    case <_cor11,_cor10> of
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor7|Acc]
			      %% Line 102
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor8|Acc]
			      %% Line 103
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor9> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor9|Acc]
			      %% Line 104
			      <BadOpt,_cor22> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/3-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 105
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 105
			      call 'erlang':'list_to_binary'
				  (_cor15)
			  in  let <_cor17> =
				  %% Line 107
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Id>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 106
				  call 'wxe_util':'construct'
				      (106, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'cacheBestSize'/2 =
    %% Line 112
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SizeW,SizeH}>
	      when let <_cor2> =
		    %% Line 113
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor3> =
			%% Line 113
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 113
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 114
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 116
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 115
		      call 'wxe_util':'cast'
			  (109, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'cacheBestSize',2}}] )
	    -| ['compiler_generated'] )
	end
'captureMouse'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 122
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 124
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 123
		      call 'wxe_util':'cast'
			  (110, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'captureMouse',1}}] )
	    -| ['compiler_generated'] )
	end
'center'/1 =
    %% Line 130
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 131
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 132
	      apply 'center'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'center',1}}] )
	    -| ['compiler_generated'] )
	end
'center'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 139
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 141
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'dir',Dir},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Dir>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 142
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-center/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 143
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 143
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 145
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 144
				  call 'wxe_util':'cast'
				      (111, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'center',2}}] )
	    -| ['compiler_generated'] )
	end
'centerOnParent'/1 =
    %% Line 151
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 152
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 153
	      apply 'centerOnParent'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'centerOnParent',1}}] )
	    -| ['compiler_generated'] )
	end
'centerOnParent'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 160
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 162
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'dir',Dir},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Dir>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 163
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-centerOnParent/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 164
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 164
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 166
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 165
				  call 'wxe_util':'cast'
				      (112, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'centerOnParent',2}}] )
	    -| ['compiler_generated'] )
	end
'centre'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 173
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 174
	      apply 'centre'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'centre',1}}] )
	    -| ['compiler_generated'] )
	end
'centre'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 181
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 182
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 183
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'dir',Dir},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Dir>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 184
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-centre/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 185
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 185
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 187
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 186
				  call 'wxe_util':'cast'
				      (113, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'centre',2}}] )
	    -| ['compiler_generated'] )
	end
'centreOnParent'/1 =
    %% Line 193
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 194
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 195
	      apply 'centreOnParent'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'centreOnParent',1}}] )
	    -| ['compiler_generated'] )
	end
'centreOnParent'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 202
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 203
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 204
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'dir',Dir},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Dir>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 205
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-centreOnParent/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 206
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 206
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 208
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 207
				  call 'wxe_util':'cast'
				      (114, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'centreOnParent',2}}] )
	    -| ['compiler_generated'] )
	end
'clearBackground'/1 =
    %% Line 213
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 216
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 215
		      call 'wxe_util':'cast'
			  (115, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clearBackground',1}}] )
	    -| ['compiler_generated'] )
	end
'clientToScreen'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 222
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 222
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 222
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 223
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 225
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 224
		      call 'wxe_util':'call'
			  (117, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'clientToScreen',2}}] )
	    -| ['compiler_generated'] )
	end
'clientToScreen'/3 =
    %% Line 230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 231
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 231
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 231
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 232
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 234
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 233
		      call 'wxe_util':'call'
			  (116, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'clientToScreen',3}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 240
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 241
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 242
	      apply 'close'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'close'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 249
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 250
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 251
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'force',Force},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Force)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 252
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-close/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 253
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 253
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 255
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 254
				  call 'wxe_util':'call'
				      (118, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'close',2}}] )
	    -| ['compiler_generated'] )
	end
'convertDialogToPixels'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SzW,SzH}>
	      when let <_cor2> =
		    %% Line 261
		    call 'erlang':'is_integer'
			(SzW)
		in  let <_cor3> =
			%% Line 261
			call 'erlang':'is_integer'
			    (SzH)
		    in  %% Line 261
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 262
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 264
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 263
		      call 'wxe_util':'call'
			  (120, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'convertDialogToPixels',2}}] )
	    -| ['compiler_generated'] )
	end
'convertPixelsToDialog'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SzW,SzH}>
	      when let <_cor2> =
		    %% Line 270
		    call 'erlang':'is_integer'
			(SzW)
		in  let <_cor3> =
			%% Line 270
			call 'erlang':'is_integer'
			    (SzH)
		    in  %% Line 270
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 271
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 273
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 272
		      call 'wxe_util':'call'
			  (122, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'convertPixelsToDialog',2}}] )
	    -| ['compiler_generated'] )
	end
'Destroy'/1 =
    %% Line 278
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 279
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 281
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 280
		      call 'wxe_util':'call'
			  (123, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'Destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'destroyChildren'/1 =
    %% Line 286
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 287
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 289
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 288
		      call 'wxe_util':'call'
			  (124, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'destroyChildren',1}}] )
	    -| ['compiler_generated'] )
	end
'disable'/1 =
    %% Line 294
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 295
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 297
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 296
		      call 'wxe_util':'call'
			  (125, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'disable',1}}] )
	    -| ['compiler_generated'] )
	end
'enable'/1 =
    %% Line 303
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 304
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 305
	      apply 'enable'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enable',1}}] )
	    -| ['compiler_generated'] )
	end
'enable'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 312
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 313
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 314
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 315
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enable/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 316
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 316
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 318
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 317
				  call 'wxe_util':'call'
				      (126, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enable',2}}] )
	    -| ['compiler_generated'] )
	end
'findFocus'/0 =
    %% Line 322
    fun () ->
	%% Line 323
	call 'wxe_util':'call'
	    (127, %% Line 324
		  #{}#)
'findWindow'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Winid>
	      when %% Line 336
		call 'erlang':'is_integer'
		    (Winid) ->
	      do  %% Line 337
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 339
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Winid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 338
		      call 'wxe_util':'call'
			  (128, _cor4)
	  %% Line 340
	  <{'wx_ref',ThisRef,ThisT,_cor18},Name>
	      when %% Line 341
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 342
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 343
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor13> =
			  %% Line 345
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor8> =
			      %% Line 345
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor9> =
				  %% Line 345
				  call 'erlang':'+'
				      (0, _cor8)
			      in  let <_cor10> =
				      %% Line 345
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 345
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 345
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 345
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 344
						  call 'wxe_util':'call'
						      (129, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'findWindow',2}}] )
	    -| ['compiler_generated'] )
	end
'findWindowById'/1 =
    %% Line 351
    fun (_cor0) ->
	case _cor0 of
	  <Winid>
	      when %% Line 352
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 353
	      apply 'findWindowById'/2
		  (Winid, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'findWindowById',1}}] )
	    -| ['compiler_generated'] )
	end
'findWindowById'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Winid,Options>
	      when let <_cor2> =
		    %% Line 360
		    call 'erlang':'is_integer'
			(Winid)
		in  let <_cor3> =
			%% Line 360
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 360
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 361
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <{'parent',{'wx_ref',ParentRef,ParentT,_cor17}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (ParentT,
						   'wxWindow') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call ParentT:'parent_class'
						('wxWindow')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor6> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			  %% Line 362
			  <BadOpt,_cor18> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-findWindowById/2-fun-0-'}}] )
	      in  let <_cor12> =
		      %% Line 363
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 363
			  call 'erlang':'list_to_binary'
			      (_cor12)
		      in  let <_cor14> =
			      %% Line 365
			      #{#<Winid>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 364
			      call 'wxe_util':'call'
				  (130, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'findWindowById',2}}] )
	    -| ['compiler_generated'] )
	end
'findWindowByName'/1 =
    %% Line 371
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 372
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 373
	      apply 'findWindowByName'/2
		  (Name, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'findWindowByName',1}}] )
	    -| ['compiler_generated'] )
	end
'findWindowByName'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Options>
	      when let <_cor2> =
		    %% Line 380
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor3> =
			%% Line 380
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 380
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Name_UC> =
		  %% Line 381
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <MOpts> =
		      %% Line 382
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'parent',{'wx_ref',ParentRef,ParentT,_cor24}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ParentT,
						       'wxWindow') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ParentT:'parent_class'
						    ('wxWindow')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ParentRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 383
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-findWindowByName/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 384
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 384
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor20> =
				  %% Line 386
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor15> =
				      %% Line 386
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor16> =
					  %% Line 386
					  call 'erlang':'+'
					      (4, _cor15)
				      in  let <_cor17> =
					      %% Line 386
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor18> =
						  %% Line 386
						  call 'erlang':'-'
						      (8, _cor17)
					      in  let <_cor19> =
						      %% Line 386
						      call 'erlang':'band'
							  (_cor18, 7)
						  in  let <_cor21> =
							  %% Line 386
							  #{#<_cor20>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor19,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 385
							  call 'wxe_util':'call'
							      (131, _cor21)
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'findWindowByName',2}}] )
	    -| ['compiler_generated'] )
	end
'findWindowByLabel'/1 =
    %% Line 392
    fun (_cor0) ->
	case _cor0 of
	  <Label>
	      when %% Line 393
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 394
	      apply 'findWindowByLabel'/2
		  (Label, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'findWindowByLabel',1}}] )
	    -| ['compiler_generated'] )
	end
'findWindowByLabel'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,Options>
	      when let <_cor2> =
		    %% Line 401
		    call 'erlang':'is_list'
			(Label)
		in  let <_cor3> =
			%% Line 401
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 401
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Label_UC> =
		  %% Line 402
		  call 'unicode':'characters_to_binary'
		      ([Label|[0]])
	      in  let <MOpts> =
		      %% Line 403
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'parent',{'wx_ref',ParentRef,ParentT,_cor24}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ParentT,
						       'wxWindow') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ParentT:'parent_class'
						    ('wxWindow')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ParentRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 404
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-findWindowByLabel/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 405
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 405
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor20> =
				  %% Line 407
				  call 'erlang':'byte_size'
				      (Label_UC)
			      in  let <_cor15> =
				      %% Line 407
				      call 'erlang':'byte_size'
					  (Label_UC)
				  in  let <_cor16> =
					  %% Line 407
					  call 'erlang':'+'
					      (4, _cor15)
				      in  let <_cor17> =
					      %% Line 407
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor18> =
						  %% Line 407
						  call 'erlang':'-'
						      (8, _cor17)
					      in  let <_cor19> =
						      %% Line 407
						      call 'erlang':'band'
							  (_cor18, 7)
						  in  let <_cor21> =
							  %% Line 407
							  #{#<_cor20>(32,1,'integer',['unsigned'|['native']]),
							    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor19,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 406
							  call 'wxe_util':'call'
							      (132, _cor21)
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'findWindowByLabel',2}}] )
	    -| ['compiler_generated'] )
	end
'fit'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 413
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 415
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 414
		      call 'wxe_util':'cast'
			  (133, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fit',1}}] )
	    -| ['compiler_generated'] )
	end
'fitInside'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 421
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 423
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 422
		      call 'wxe_util':'cast'
			  (134, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fitInside',1}}] )
	    -| ['compiler_generated'] )
	end
'freeze'/1 =
    %% Line 428
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 429
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 431
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 430
		      call 'wxe_util':'cast'
			  (135, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'freeze',1}}] )
	    -| ['compiler_generated'] )
	end
'getAcceleratorTable'/1 =
    %% Line 436
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 437
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 439
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 438
		      call 'wxe_util':'call'
			  (136, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getAcceleratorTable',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundColour'/1 =
    %% Line 444
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 445
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 447
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 446
		      call 'wxe_util':'call'
			  (137, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundStyle'/1 =
    %% Line 453
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 454
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 456
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 455
		      call 'wxe_util':'call'
			  (138, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'getBestSize'/1 =
    %% Line 461
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 462
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 464
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 463
		      call 'wxe_util':'call'
			  (139, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBestSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getCaret'/1 =
    %% Line 469
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 470
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 472
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 471
		      call 'wxe_util':'call'
			  (141, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCaret',1}}] )
	    -| ['compiler_generated'] )
	end
'getCapture'/0 =
    %% Line 476
    fun () ->
	%% Line 477
	call 'wxe_util':'call'
	    (142, %% Line 478
		  #{}#)
'getCharHeight'/1 =
    %% Line 483
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 484
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 486
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 485
		      call 'wxe_util':'call'
			  (143, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCharHeight',1}}] )
	    -| ['compiler_generated'] )
	end
'getCharWidth'/1 =
    %% Line 491
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 492
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 494
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 493
		      call 'wxe_util':'call'
			  (144, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCharWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getChildren'/1 =
    %% Line 499
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 500
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 502
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 501
		      call 'wxe_util':'call'
			  (145, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getChildren',1}}] )
	    -| ['compiler_generated'] )
	end
'getClientSize'/1 =
    %% Line 507
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 508
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 510
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 509
		      call 'wxe_util':'call'
			  (148, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getClientSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getContainingSizer'/1 =
    %% Line 515
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 516
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 518
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 517
		      call 'wxe_util':'call'
			  (149, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getContainingSizer',1}}] )
	    -| ['compiler_generated'] )
	end
'getCursor'/1 =
    %% Line 523
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 524
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 526
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 525
		      call 'wxe_util':'call'
			  (150, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCursor',1}}] )
	    -| ['compiler_generated'] )
	end
'getDropTarget'/1 =
    %% Line 531
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 532
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 534
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 533
		      call 'wxe_util':'call'
			  (151, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDropTarget',1}}] )
	    -| ['compiler_generated'] )
	end
'getEventHandler'/1 =
    %% Line 539
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 540
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 542
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 541
		      call 'wxe_util':'call'
			  (152, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getEventHandler',1}}] )
	    -| ['compiler_generated'] )
	end
'getExtraStyle'/1 =
    %% Line 547
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 548
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 550
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 549
		      call 'wxe_util':'call'
			  (153, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getExtraStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 555
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 556
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 558
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 557
		      call 'wxe_util':'call'
			  (154, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getForegroundColour'/1 =
    %% Line 563
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 564
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 566
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 565
		      call 'wxe_util':'call'
			  (155, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getForegroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getGrandParent'/1 =
    %% Line 571
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 572
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 574
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 573
		      call 'wxe_util':'call'
			  (156, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGrandParent',1}}] )
	    -| ['compiler_generated'] )
	end
'getHandle'/1 =
    %% Line 579
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 580
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 582
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 581
		      call 'wxe_util':'call'
			  (157, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getHandle',1}}] )
	    -| ['compiler_generated'] )
	end
'getHelpText'/1 =
    %% Line 587
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 588
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 590
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 589
		      call 'wxe_util':'call'
			  (158, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getHelpText',1}}] )
	    -| ['compiler_generated'] )
	end
'getId'/1 =
    %% Line 595
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 596
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 598
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 597
		      call 'wxe_util':'call'
			  (159, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getId',1}}] )
	    -| ['compiler_generated'] )
	end
'getLabel'/1 =
    %% Line 603
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 604
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 606
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 605
		      call 'wxe_util':'call'
			  (160, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLabel',1}}] )
	    -| ['compiler_generated'] )
	end
'getMaxSize'/1 =
    %% Line 611
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 612
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 614
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 613
		      call 'wxe_util':'call'
			  (161, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMaxSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getMinSize'/1 =
    %% Line 619
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 620
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 622
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 621
		      call 'wxe_util':'call'
			  (162, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMinSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getName'/1 =
    %% Line 627
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 628
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 630
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 629
		      call 'wxe_util':'call'
			  (163, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getName',1}}] )
	    -| ['compiler_generated'] )
	end
'getParent'/1 =
    %% Line 635
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 636
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 638
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 637
		      call 'wxe_util':'call'
			  (164, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getParent',1}}] )
	    -| ['compiler_generated'] )
	end
'getPosition'/1 =
    %% Line 643
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 644
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 646
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 645
		      call 'wxe_util':'call'
			  (166, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getRect'/1 =
    %% Line 651
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 652
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 654
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 653
		      call 'wxe_util':'call'
			  (167, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRect',1}}] )
	    -| ['compiler_generated'] )
	end
'getScreenPosition'/1 =
    %% Line 659
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 660
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 662
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 661
		      call 'wxe_util':'call'
			  (169, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getScreenPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getScreenRect'/1 =
    %% Line 667
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 668
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 670
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 669
		      call 'wxe_util':'call'
			  (170, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getScreenRect',1}}] )
	    -| ['compiler_generated'] )
	end
'getScrollPos'/2 =
    %% Line 675
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Orient>
	      when %% Line 676
		call 'erlang':'is_integer'
		    (Orient) ->
	      do  %% Line 677
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 679
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Orient>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 678
		      call 'wxe_util':'call'
			  (171, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getScrollPos',2}}] )
	    -| ['compiler_generated'] )
	end
'getScrollRange'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Orient>
	      when %% Line 685
		call 'erlang':'is_integer'
		    (Orient) ->
	      do  %% Line 686
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 688
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Orient>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 687
		      call 'wxe_util':'call'
			  (172, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getScrollRange',2}}] )
	    -| ['compiler_generated'] )
	end
'getScrollThumb'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Orient>
	      when %% Line 694
		call 'erlang':'is_integer'
		    (Orient) ->
	      do  %% Line 695
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 697
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Orient>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 696
		      call 'wxe_util':'call'
			  (173, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getScrollThumb',2}}] )
	    -| ['compiler_generated'] )
	end
'getSize'/1 =
    %% Line 702
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 703
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 705
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 704
		      call 'wxe_util':'call'
			  (175, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getSizer'/1 =
    %% Line 710
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 711
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 713
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 712
		      call 'wxe_util':'call'
			  (176, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSizer',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/2 =
    %% Line 720
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},String>
	      when %% Line 721
		call 'erlang':'is_list'
		    (String) ->
	      %% Line 722
	      apply 'getTextExtent'/3
		  (This, String, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getTextExtent',2}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/3 =
    %% Line 729
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},String,Options>
	      when let <_cor3> =
		    %% Line 730
		    call 'erlang':'is_list'
			(String)
		in  let <_cor4> =
			%% Line 730
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 730
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 731
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <String_UC> =
		      %% Line 732
		      call 'unicode':'characters_to_binary'
			  ([String|[0]])
		  in  let <MOpts> =
			  %% Line 733
			  ( fun (_cor12,_cor11) ->
				case <_cor12,_cor11> of
				  <{'theFont',{'wx_ref',TheFontRef,TheFontT,_cor29}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (TheFontT,
							   'wxFont') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call TheFontT:'parent_class'
							('wxFont')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor10> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<TheFontRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor10|Acc]
				  %% Line 734
				  <BadOpt,_cor30> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-getTextExtent/3-fun-0-'}}] )
		      in  let <_cor16> =
			      %% Line 735
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 735
				  call 'erlang':'list_to_binary'
				      (_cor16)
			      in  let <_cor23> =
				      %% Line 737
				      call 'erlang':'byte_size'
					  (String_UC)
				  in  let <_cor18> =
					  %% Line 737
					  call 'erlang':'byte_size'
					      (String_UC)
				      in  let <_cor19> =
					      %% Line 737
					      call 'erlang':'+'
						  (0, _cor18)
					  in  let <_cor20> =
						  %% Line 737
						  call 'erlang':'band'
						      (_cor19, 7)
					      in  let <_cor21> =
						      %% Line 737
						      call 'erlang':'-'
							  (8, _cor20)
						  in  let <_cor22> =
							  %% Line 737
							  call 'erlang':'band'
							      (_cor21, 7)
						      in  let <_cor24> =
							      %% Line 737
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor23>(32,1,'integer',['unsigned'|['native']]),
								#<String_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor22,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 736
							      call 'wxe_util':'call'
								  (177, _cor24)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'getTextExtent',3}}] )
	    -| ['compiler_generated'] )
	end
'getToolTip'/1 =
    %% Line 742
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 743
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 745
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 744
		      call 'wxe_util':'call'
			  (178, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getToolTip',1}}] )
	    -| ['compiler_generated'] )
	end
'getUpdateRegion'/1 =
    %% Line 750
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 751
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 753
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 752
		      call 'wxe_util':'call'
			  (179, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getUpdateRegion',1}}] )
	    -| ['compiler_generated'] )
	end
'getVirtualSize'/1 =
    %% Line 758
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 759
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 761
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 760
		      call 'wxe_util':'call'
			  (181, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getVirtualSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getWindowStyleFlag'/1 =
    %% Line 766
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 767
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 769
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 768
		      call 'wxe_util':'call'
			  (183, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWindowStyleFlag',1}}] )
	    -| ['compiler_generated'] )
	end
'getWindowVariant'/1 =
    %% Line 775
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 776
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 778
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 777
		      call 'wxe_util':'call'
			  (184, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWindowVariant',1}}] )
	    -| ['compiler_generated'] )
	end
'hasCapture'/1 =
    %% Line 783
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 784
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 786
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 785
		      call 'wxe_util':'call'
			  (185, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasCapture',1}}] )
	    -| ['compiler_generated'] )
	end
'hasScrollbar'/2 =
    %% Line 791
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Orient>
	      when %% Line 792
		call 'erlang':'is_integer'
		    (Orient) ->
	      do  %% Line 793
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 795
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Orient>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 794
		      call 'wxe_util':'call'
			  (186, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'hasScrollbar',2}}] )
	    -| ['compiler_generated'] )
	end
'hasTransparentBackground'/1 =
    %% Line 800
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 801
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 803
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 802
		      call 'wxe_util':'call'
			  (187, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasTransparentBackground',1}}] )
	    -| ['compiler_generated'] )
	end
'hide'/1 =
    %% Line 808
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 809
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 811
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 810
		      call 'wxe_util':'call'
			  (188, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hide',1}}] )
	    -| ['compiler_generated'] )
	end
'inheritAttributes'/1 =
    %% Line 816
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 817
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 819
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 818
		      call 'wxe_util':'cast'
			  (189, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'inheritAttributes',1}}] )
	    -| ['compiler_generated'] )
	end
'initDialog'/1 =
    %% Line 824
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 825
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 827
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 826
		      call 'wxe_util':'cast'
			  (190, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'initDialog',1}}] )
	    -| ['compiler_generated'] )
	end
'invalidateBestSize'/1 =
    %% Line 832
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 833
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 835
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 834
		      call 'wxe_util':'cast'
			  (191, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'invalidateBestSize',1}}] )
	    -| ['compiler_generated'] )
	end
'isEnabled'/1 =
    %% Line 840
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 841
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 843
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 842
		      call 'wxe_util':'call'
			  (192, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isEnabled',1}}] )
	    -| ['compiler_generated'] )
	end
'isExposed'/2 =
    %% Line 854
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 855
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 855
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 855
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 856
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 858
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 857
		      call 'wxe_util':'call'
			  (195, _cor6)
	  %% Line 859
	  <{'wx_ref',ThisRef,ThisT,_cor19},{RectX,RectY,RectW,RectH}>
	      when %% Line 860
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 861
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 863
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 862
		      call 'wxe_util':'call'
			  (196, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'isExposed',2}}] )
	    -| ['compiler_generated'] )
	end
'isExposed'/3 =
    %% Line 868
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 869
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 869
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 869
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 870
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 872
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 871
		      call 'wxe_util':'call'
			  (193, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'isExposed',3}}] )
	    -| ['compiler_generated'] )
	end
'isExposed'/5 =
    %% Line 877
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 878
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 879
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 881
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<W>(32,1,'integer',['unsigned'|['native']]),
			#<H>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 880
		      call 'wxe_util':'call'
			  (194, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'isExposed',5}}] )
	    -| ['compiler_generated'] )
	end
'isRetained'/1 =
    %% Line 886
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 887
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 889
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 888
		      call 'wxe_util':'call'
			  (197, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isRetained',1}}] )
	    -| ['compiler_generated'] )
	end
'isShown'/1 =
    %% Line 894
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 895
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 897
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 896
		      call 'wxe_util':'call'
			  (198, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isShown',1}}] )
	    -| ['compiler_generated'] )
	end
'isTopLevel'/1 =
    %% Line 902
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 903
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 905
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 904
		      call 'wxe_util':'call'
			  (199, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isTopLevel',1}}] )
	    -| ['compiler_generated'] )
	end
'layout'/1 =
    %% Line 910
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 911
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 913
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 912
		      call 'wxe_util':'call'
			  (200, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'layout',1}}] )
	    -| ['compiler_generated'] )
	end
'lineDown'/1 =
    %% Line 918
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 919
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 921
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 920
		      call 'wxe_util':'call'
			  (201, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'lineDown',1}}] )
	    -| ['compiler_generated'] )
	end
'lineUp'/1 =
    %% Line 926
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 927
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 929
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 928
		      call 'wxe_util':'call'
			  (202, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'lineUp',1}}] )
	    -| ['compiler_generated'] )
	end
'lower'/1 =
    %% Line 934
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 935
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 937
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 936
		      call 'wxe_util':'cast'
			  (203, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'lower',1}}] )
	    -| ['compiler_generated'] )
	end
'makeModal'/1 =
    %% Line 943
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 944
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 945
	      apply 'makeModal'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'makeModal',1}}] )
	    -| ['compiler_generated'] )
	end
'makeModal'/2 =
    %% Line 951
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 952
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 953
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 954
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'modal',Modal},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Modal)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 955
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-makeModal/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 956
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 956
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 958
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 957
				  call 'wxe_util':'cast'
				      (204, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'makeModal',2}}] )
	    -| ['compiler_generated'] )
	end
'move'/2 =
    %% Line 964
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Pt = {PtX,PtY}>
	      when let <_cor2> =
		    %% Line 965
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 965
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 965
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 966
	      apply 'move'/3
		  (This, Pt, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'move',2}}] )
	    -| ['compiler_generated'] )
	end
'move'/3 =
    %% Line 980
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor24,_cor25,_cor26},X,Y>
	      when let <_cor3> =
		    %% Line 981
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 981
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 981
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 982
	      apply 'move'/4
		  (This, X, Y, [])
	  %% Line 983
	  <{'wx_ref',ThisRef,ThisT,_cor27},{PtX,PtY},Options>
	      when %% Line 984
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (PtX)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(PtY)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 985
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 986
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 987
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-move/3-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 988
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 988
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 990
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<PtX>(32,1,'integer',['unsigned'|['native']]),
				    #<PtY>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 989
				  call 'wxe_util':'cast'
				      (206, _cor20)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'move',3}}] )
	    -| ['compiler_generated'] )
	end
'move'/4 =
    %% Line 996
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,Options>
	      when %% Line 997
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 998
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 999
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 1000
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-move/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 1001
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1001
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 1003
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<X>(32,1,'integer',['unsigned'|['native']]),
				    #<Y>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1002
				  call 'wxe_util':'cast'
				      (205, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'move',4}}] )
	    -| ['compiler_generated'] )
	end
'moveAfterInTabOrder'/2 =
    %% Line 1008
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WinRef,WinT,_cor10}> when 'true' ->
	      do  %% Line 1009
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1010
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WinT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WinT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1012
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WinRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1011
			  call 'wxe_util':'cast'
			      (207, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'moveAfterInTabOrder',2}}] )
	    -| ['compiler_generated'] )
	end
'moveBeforeInTabOrder'/2 =
    %% Line 1017
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WinRef,WinT,_cor10}> when 'true' ->
	      do  %% Line 1018
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1019
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WinT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WinT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1021
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WinRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1020
			  call 'wxe_util':'cast'
			      (208, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'moveBeforeInTabOrder',2}}] )
	    -| ['compiler_generated'] )
	end
'navigate'/1 =
    %% Line 1027
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1028
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1029
	      apply 'navigate'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'navigate',1}}] )
	    -| ['compiler_generated'] )
	end
'navigate'/2 =
    %% Line 1035
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 1036
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1037
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1038
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 1039
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-navigate/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 1040
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1040
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 1042
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1041
				  call 'wxe_util':'call'
				      (209, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'navigate',2}}] )
	    -| ['compiler_generated'] )
	end
'pageDown'/1 =
    %% Line 1047
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1048
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1050
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1049
		      call 'wxe_util':'call'
			  (210, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'pageDown',1}}] )
	    -| ['compiler_generated'] )
	end
'pageUp'/1 =
    %% Line 1055
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1056
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1058
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1057
		      call 'wxe_util':'call'
			  (211, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'pageUp',1}}] )
	    -| ['compiler_generated'] )
	end
'popEventHandler'/1 =
    %% Line 1064
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1065
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1066
	      apply 'popEventHandler'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'popEventHandler',1}}] )
	    -| ['compiler_generated'] )
	end
'popEventHandler'/2 =
    %% Line 1072
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 1073
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1074
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1075
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'deleteHandler',DeleteHandler},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (DeleteHandler)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 1076
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-popEventHandler/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 1077
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1077
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 1079
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1078
				  call 'wxe_util':'call'
				      (212, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'popEventHandler',2}}] )
	    -| ['compiler_generated'] )
	end
'popupMenu'/2 =
    %% Line 1085
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Menu = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 1087
	      apply 'popupMenu'/3
		  (This, Menu, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'popupMenu',2}}] )
	    -| ['compiler_generated'] )
	end
'popupMenu'/3 =
    %% Line 1093
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',MenuRef,MenuT,_cor20},Options>
	      when %% Line 1094
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1095
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1096
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MenuT,
				       'wxMenu') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MenuT:'parent_class'
				    ('wxMenu')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 1097
			  ( fun (_cor9,_cor8) ->
				case <_cor9,_cor8> of
				  <{'pos',{PosX,PosY}},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<PosX>(32,1,'integer',['unsigned'|['native']]),
					    #<PosY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor7|Acc]
				  %% Line 1098
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-popupMenu/3-fun-0-'}}] )
		      in  let <_cor13> =
			      %% Line 1099
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 1099
				  call 'erlang':'list_to_binary'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 1101
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<MenuRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 1100
				      call 'wxe_util':'call'
					  (213, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'popupMenu',3}}] )
	    -| ['compiler_generated'] )
	end
'popupMenu'/4 =
    %% Line 1106
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{'wx_ref',MenuRef,MenuT,_cor16},X,Y>
	      when let <_cor4> =
		    %% Line 1107
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor5> =
			%% Line 1107
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 1107
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 1108
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1109
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MenuT,
				       'wxMenu') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MenuT:'parent_class'
				    ('wxMenu')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 1111
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MenuRef>(32,1,'integer',['unsigned'|['native']]),
			    #<X>(32,1,'integer',['unsigned'|['native']]),
			    #<Y>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1110
			  call 'wxe_util':'call'
			      (214, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'popupMenu',4}}] )
	    -| ['compiler_generated'] )
	end
'raise'/1 =
    %% Line 1116
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1117
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1119
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1118
		      call 'wxe_util':'cast'
			  (215, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'raise',1}}] )
	    -| ['compiler_generated'] )
	end
'refresh'/1 =
    %% Line 1125
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1126
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1127
	      apply 'refresh'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'refresh',1}}] )
	    -| ['compiler_generated'] )
	end
'refresh'/2 =
    %% Line 1134
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 1135
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1136
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1137
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'eraseBackground',EraseBackground},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (EraseBackground)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 1138
			      <{'rect',{RectX,RectY,RectW,RectH}},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<RectX>(32,1,'integer',['unsigned'|['native']]),
					#<RectY>(32,1,'integer',['unsigned'|['native']]),
					#<RectW>(32,1,'integer',['unsigned'|['native']]),
					#<RectH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor6|Acc]
			      %% Line 1139
			      <BadOpt,_cor18> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-refresh/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 1140
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1140
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 1142
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1141
				  call 'wxe_util':'cast'
				      (216, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'refresh',2}}] )
	    -| ['compiler_generated'] )
	end
'refreshRect'/2 =
    %% Line 1148
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor11,_cor12,_cor13},Rect = {RectX,RectY,RectW,RectH}>
	      when %% Line 1149
		( try
		      let <_cor2> =
			  call 'erlang':'is_integer'
			      (RectX)
		      in  let <_cor3> =
			      call 'erlang':'is_integer'
				  (RectY)
			  in  let <_cor4> =
				  call 'erlang':'is_integer'
				      (RectW)
			      in  let <_cor5> =
				      call 'erlang':'is_integer'
					  (RectH)
				  in  let <_cor6> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor4, _cor5)
					    -| ['compiler_generated'] )
				      in  let <_cor7> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor6)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor2, _cor7)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1150
	      apply 'refreshRect'/3
		  (This, Rect, [])
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'refreshRect',2}}] )
	    -| ['compiler_generated'] )
	end
'refreshRect'/3 =
    %% Line 1156
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},{RectX,RectY,RectW,RectH},Options>
	      when %% Line 1157
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor7> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor6, _cor7)
					in  let <_cor9> =
						call 'erlang':'and'
						    (_cor5, _cor8)
					    in  let <_cor10> =
						    call 'erlang':'and'
							(_cor4, _cor9)
						in  call 'erlang':'and'
							(_cor3, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1158
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1159
		      ( fun (_cor16,_cor15) ->
			    case <_cor16,_cor15> of
			      <{'eraseBackground',EraseBackground},Acc> when 'true' ->
				  let <_cor13> =
				      call 'wxe_util':'from_bool'
					  (EraseBackground)
				  in  let <_cor14> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor13>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor14|Acc]
			      %% Line 1160
			      <BadOpt,_cor27> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-refreshRect/3-fun-0-'}}] )
		  in  let <_cor20> =
			  %% Line 1161
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1161
			      call 'erlang':'list_to_binary'
				  (_cor20)
			  in  let <_cor22> =
				  %% Line 1163
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<RectX>(32,1,'integer',['unsigned'|['native']]),
				    #<RectY>(32,1,'integer',['unsigned'|['native']]),
				    #<RectW>(32,1,'integer',['unsigned'|['native']]),
				    #<RectH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1162
				  call 'wxe_util':'cast'
				      (217, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'refreshRect',3}}] )
	    -| ['compiler_generated'] )
	end
'releaseMouse'/1 =
    %% Line 1168
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1169
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1171
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1170
		      call 'wxe_util':'cast'
			  (218, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'releaseMouse',1}}] )
	    -| ['compiler_generated'] )
	end
'removeChild'/2 =
    %% Line 1176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ChildRef,ChildT,_cor10}> when 'true' ->
	      do  %% Line 1177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1178
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ChildT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ChildT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1180
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ChildRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1179
			  call 'wxe_util':'cast'
			      (219, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'removeChild',2}}] )
	    -| ['compiler_generated'] )
	end
'reparent'/2 =
    %% Line 1185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',NewParentRef,NewParentT,_cor10}> when 'true' ->
	      do  %% Line 1186
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1187
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (NewParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call NewParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1189
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<NewParentRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1188
			  call 'wxe_util':'call'
			      (220, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'reparent',2}}] )
	    -| ['compiler_generated'] )
	end
'screenToClient'/1 =
    %% Line 1194
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1195
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1197
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1196
		      call 'wxe_util':'call'
			  (221, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'screenToClient',1}}] )
	    -| ['compiler_generated'] )
	end
'screenToClient'/2 =
    %% Line 1202
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 1203
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 1203
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 1203
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1204
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1206
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1205
		      call 'wxe_util':'call'
			  (222, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'screenToClient',2}}] )
	    -| ['compiler_generated'] )
	end
'scrollLines'/2 =
    %% Line 1211
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Lines>
	      when %% Line 1212
		call 'erlang':'is_integer'
		    (Lines) ->
	      do  %% Line 1213
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1215
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Lines>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1214
		      call 'wxe_util':'call'
			  (224, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'scrollLines',2}}] )
	    -| ['compiler_generated'] )
	end
'scrollPages'/2 =
    %% Line 1220
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pages>
	      when %% Line 1221
		call 'erlang':'is_integer'
		    (Pages) ->
	      do  %% Line 1222
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1224
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pages>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1223
		      call 'wxe_util':'call'
			  (226, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'scrollPages',2}}] )
	    -| ['compiler_generated'] )
	end
'scrollWindow'/3 =
    %% Line 1230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Dx,Dy>
	      when let <_cor3> =
		    %% Line 1231
		    call 'erlang':'is_integer'
			(Dx)
		in  let <_cor4> =
			%% Line 1231
			call 'erlang':'is_integer'
			    (Dy)
		    in  %% Line 1231
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1232
	      apply 'scrollWindow'/4
		  (This, Dx, Dy, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'scrollWindow',3}}] )
	    -| ['compiler_generated'] )
	end
'scrollWindow'/4 =
    %% Line 1238
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Dx,Dy,Options>
	      when %% Line 1239
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Dx)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Dy)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1240
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1241
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'rect',{RectX,RectY,RectW,RectH}},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<RectX>(32,1,'integer',['unsigned'|['native']]),
					#<RectY>(32,1,'integer',['unsigned'|['native']]),
					#<RectW>(32,1,'integer',['unsigned'|['native']]),
					#<RectH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor10|Acc]
			      %% Line 1242
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-scrollWindow/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 1243
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1243
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 1245
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Dx>(32,1,'integer',['unsigned'|['native']]),
				    #<Dy>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1244
				  call 'wxe_util':'cast'
				      (227, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'scrollWindow',4}}] )
	    -| ['compiler_generated'] )
	end
'setAcceleratorTable'/2 =
    %% Line 1250
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',AccelRef,AccelT,_cor10}> when 'true' ->
	      do  %% Line 1251
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1252
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (AccelT,
				       'wxAcceleratorTable') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call AccelT:'parent_class'
				    ('wxAcceleratorTable')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1254
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<AccelRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1253
			  call 'wxe_util':'cast'
			      (228, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setAcceleratorTable',2}}] )
	    -| ['compiler_generated'] )
	end
'setAutoLayout'/2 =
    %% Line 1259
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},AutoLayout>
	      when %% Line 1260
		call 'erlang':'is_boolean'
		    (AutoLayout) ->
	      do  %% Line 1261
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1263
		      call 'wxe_util':'from_bool'
			  (AutoLayout)
		  in  let <_cor5> =
			  %% Line 1263
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1262
			  call 'wxe_util':'cast'
			      (229, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setAutoLayout',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundColour'/2 =
    %% Line 1268
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 1269
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1269
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1269
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1270
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1272
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 1272
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1271
			  call 'wxe_util':'call'
			      (230, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundStyle'/2 =
    %% Line 1278
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 1279
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 1280
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1282
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1281
		      call 'wxe_util':'call'
			  (231, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setBackgroundStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setCaret'/2 =
    %% Line 1287
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',CaretRef,CaretT,_cor10}> when 'true' ->
	      do  %% Line 1288
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1289
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (CaretT,
				       'wxCaret') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call CaretT:'parent_class'
				    ('wxCaret')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1291
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<CaretRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1290
			  call 'wxe_util':'cast'
			      (232, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setCaret',2}}] )
	    -| ['compiler_generated'] )
	end
'setClientSize'/2 =
    %% Line 1302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{SizeW,SizeH}>
	      when let <_cor2> =
		    %% Line 1303
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor3> =
			%% Line 1303
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 1303
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1304
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1306
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1305
		      call 'wxe_util':'cast'
			  (234, _cor6)
	  %% Line 1307
	  <{'wx_ref',ThisRef,ThisT,_cor19},{RectX,RectY,RectW,RectH}>
	      when %% Line 1308
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1309
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor15> =
		      %% Line 1311
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1310
		      call 'wxe_util':'cast'
			  (235, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'setClientSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setClientSize'/3 =
    %% Line 1316
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 1317
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 1317
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 1317
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1318
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1320
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1319
		      call 'wxe_util':'cast'
			  (233, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setClientSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setContainingSizer'/2 =
    %% Line 1325
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',SizerRef,SizerT,_cor10}> when 'true' ->
	      do  %% Line 1326
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1327
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (SizerT,
				       'wxSizer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call SizerT:'parent_class'
				    ('wxSizer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1329
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<SizerRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1328
			  call 'wxe_util':'cast'
			      (236, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setContainingSizer',2}}] )
	    -| ['compiler_generated'] )
	end
'setCursor'/2 =
    %% Line 1334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',CursorRef,CursorT,_cor10}> when 'true' ->
	      do  %% Line 1335
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1336
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (CursorT,
				       'wxCursor') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call CursorT:'parent_class'
				    ('wxCursor')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1338
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<CursorRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1337
			  call 'wxe_util':'call'
			      (237, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setCursor',2}}] )
	    -| ['compiler_generated'] )
	end
'setMaxSize'/2 =
    %% Line 1343
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{MaxSizeW,MaxSizeH}>
	      when let <_cor2> =
		    %% Line 1344
		    call 'erlang':'is_integer'
			(MaxSizeW)
		in  let <_cor3> =
			%% Line 1344
			call 'erlang':'is_integer'
			    (MaxSizeH)
		    in  %% Line 1344
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1345
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1347
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<MaxSizeW>(32,1,'integer',['unsigned'|['native']]),
			#<MaxSizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1346
		      call 'wxe_util':'cast'
			  (238, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setMaxSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setMinSize'/2 =
    %% Line 1352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{MinSizeW,MinSizeH}>
	      when let <_cor2> =
		    %% Line 1353
		    call 'erlang':'is_integer'
			(MinSizeW)
		in  let <_cor3> =
			%% Line 1353
			call 'erlang':'is_integer'
			    (MinSizeH)
		    in  %% Line 1353
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1354
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1356
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<MinSizeW>(32,1,'integer',['unsigned'|['native']]),
			#<MinSizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1355
		      call 'wxe_util':'cast'
			  (239, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setMinSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setOwnBackgroundColour'/2 =
    %% Line 1361
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 1362
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1362
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1362
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1363
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1365
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 1365
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1364
			  call 'wxe_util':'cast'
			      (240, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setOwnBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setOwnFont'/2 =
    %% Line 1370
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 1371
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1372
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1374
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1373
			  call 'wxe_util':'cast'
			      (241, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setOwnFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setOwnForegroundColour'/2 =
    %% Line 1379
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 1380
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1380
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1380
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1381
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1383
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 1383
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1382
			  call 'wxe_util':'cast'
			      (242, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setOwnForegroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setDropTarget'/2 =
    %% Line 1388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',DropTargetRef,DropTargetT,_cor10}> when 'true' ->
	      do  %% Line 1389
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1390
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DropTargetT,
				       'wxDropTarget') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DropTargetT:'parent_class'
				    ('wxDropTarget')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1392
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<DropTargetRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1391
			  call 'wxe_util':'cast'
			      (243, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDropTarget',2}}] )
	    -| ['compiler_generated'] )
	end
'setExtraStyle'/2 =
    %% Line 1397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},ExStyle>
	      when %% Line 1398
		call 'erlang':'is_integer'
		    (ExStyle) ->
	      do  %% Line 1399
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1401
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<ExStyle>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1400
		      call 'wxe_util':'cast'
			  (244, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setExtraStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setFocus'/1 =
    %% Line 1406
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1407
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1409
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1408
		      call 'wxe_util':'cast'
			  (245, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'setFocus',1}}] )
	    -| ['compiler_generated'] )
	end
'setFocusFromKbd'/1 =
    %% Line 1414
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1415
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1417
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1416
		      call 'wxe_util':'cast'
			  (246, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'setFocusFromKbd',1}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 1422
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 1423
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1424
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1426
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1425
			  call 'wxe_util':'call'
			      (247, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setForegroundColour'/2 =
    %% Line 1431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 1432
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1432
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1432
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1433
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1435
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 1435
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1434
			  call 'wxe_util':'call'
			      (248, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setForegroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setHelpText'/2 =
    %% Line 1440
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 1441
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 1442
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 1443
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 1445
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 1445
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 1445
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 1445
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 1445
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 1445
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 1445
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1444
						  call 'wxe_util':'cast'
						      (249, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setHelpText',2}}] )
	    -| ['compiler_generated'] )
	end
'setId'/2 =
    %% Line 1450
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Winid>
	      when %% Line 1451
		call 'erlang':'is_integer'
		    (Winid) ->
	      do  %% Line 1452
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1454
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Winid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1453
		      call 'wxe_util':'cast'
			  (250, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setId',2}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 1459
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Label>
	      when %% Line 1460
		call 'erlang':'is_list'
		    (Label) ->
	      do  %% Line 1461
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 1462
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  let <_cor10> =
			  %% Line 1464
			  call 'erlang':'byte_size'
			      (Label_UC)
		      in  let <_cor5> =
			      %% Line 1464
			      call 'erlang':'byte_size'
				  (Label_UC)
			  in  let <_cor6> =
				  %% Line 1464
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 1464
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 1464
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 1464
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 1464
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1463
						  call 'wxe_util':'cast'
						      (252, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setLabel',2}}] )
	    -| ['compiler_generated'] )
	end
'setName'/2 =
    %% Line 1469
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 1470
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 1471
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 1472
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 1474
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 1474
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 1474
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 1474
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 1474
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 1474
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 1474
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1473
						  call 'wxe_util':'cast'
						      (253, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setName',2}}] )
	    -| ['compiler_generated'] )
	end
'setPalette'/2 =
    %% Line 1479
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PalRef,PalT,_cor10}> when 'true' ->
	      do  %% Line 1480
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1481
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PalT,
				       'wxPalette') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PalT:'parent_class'
				    ('wxPalette')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1483
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PalRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1482
			  call 'wxe_util':'cast'
			      (254, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPalette',2}}] )
	    -| ['compiler_generated'] )
	end
'setScrollbar'/5 =
    %% Line 1489
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor17,_cor18,_cor19},Orient,Pos,ThumbVisible,Range>
	      when %% Line 1490
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (Orient)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (Pos)
			  in  let <_cor7> =
				  call 'erlang':'is_integer'
				      (ThumbVisible)
			      in  let <_cor8> =
				      call 'erlang':'is_integer'
					  (Range)
				  in  let <_cor9> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor7, _cor8)
					    -| ['compiler_generated'] )
				      in  let <_cor10> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor6, _cor9)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor5, _cor10)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1491
	      apply 'setScrollbar'/6
		  (This, Orient, Pos, ThumbVisible, Range, [])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'setScrollbar',5}}] )
	    -| ['compiler_generated'] )
	end
'setScrollbar'/6 =
    %% Line 1497
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Orient,Pos,ThumbVisible,Range,Options>
	      when %% Line 1498
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (Orient)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Pos)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (ThumbVisible)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(Range)
				in  let <_cor10> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1499
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1500
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{'refresh',Refresh},Acc> when 'true' ->
				  let <_cor16> =
				      call 'wxe_util':'from_bool'
					  (Refresh)
				  in  let <_cor17> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor16>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor17|Acc]
			      %% Line 1501
			      <BadOpt,_cor33> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setScrollbar/6-fun-0-'}}] )
		  in  let <_cor23> =
			  %% Line 1502
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1502
			      call 'erlang':'list_to_binary'
				  (_cor23)
			  in  let <_cor25> =
				  %% Line 1504
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Orient>(32,1,'integer',['unsigned'|['native']]),
				    #<Pos>(32,1,'integer',['unsigned'|['native']]),
				    #<ThumbVisible>(32,1,'integer',['unsigned'|['native']]),
				    #<Range>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1503
				  call 'wxe_util':'cast'
				      (255, _cor25)
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'setScrollbar',6}}] )
	    -| ['compiler_generated'] )
	end
'setScrollPos'/3 =
    %% Line 1510
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Orient,Pos>
	      when let <_cor3> =
		    %% Line 1511
		    call 'erlang':'is_integer'
			(Orient)
		in  let <_cor4> =
			%% Line 1511
			call 'erlang':'is_integer'
			    (Pos)
		    in  %% Line 1511
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1512
	      apply 'setScrollPos'/4
		  (This, Orient, Pos, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'setScrollPos',3}}] )
	    -| ['compiler_generated'] )
	end
'setScrollPos'/4 =
    %% Line 1518
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor24},Orient,Pos,Options>
	      when %% Line 1519
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Orient)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Pos)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1520
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1521
		      ( fun (_cor13,_cor12) ->
			    case <_cor13,_cor12> of
			      <{'refresh',Refresh},Acc> when 'true' ->
				  let <_cor10> =
				      call 'wxe_util':'from_bool'
					  (Refresh)
				  in  let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor10>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
			      %% Line 1522
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setScrollPos/4-fun-0-'}}] )
		  in  let <_cor17> =
			  %% Line 1523
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1523
			      call 'erlang':'list_to_binary'
				  (_cor17)
			  in  let <_cor19> =
				  %% Line 1525
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Orient>(32,1,'integer',['unsigned'|['native']]),
				    #<Pos>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1524
				  call 'wxe_util':'cast'
				      (256, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'setScrollPos',4}}] )
	    -| ['compiler_generated'] )
	end
'setSize'/2 =
    %% Line 1537
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor16,_cor17,_cor18},Rect = {RectX,RectY,RectW,RectH}>
	      when %% Line 1538
		( try
		      let <_cor2> =
			  call 'erlang':'is_integer'
			      (RectX)
		      in  let <_cor3> =
			      call 'erlang':'is_integer'
				  (RectY)
			  in  let <_cor4> =
				  call 'erlang':'is_integer'
				      (RectW)
			      in  let <_cor5> =
				      call 'erlang':'is_integer'
					  (RectH)
				  in  let <_cor6> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor4, _cor5)
					    -| ['compiler_generated'] )
				      in  let <_cor7> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor6)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor2, _cor7)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1539
	      apply 'setSize'/3
		  (This, Rect, [])
	  %% Line 1540
	  <{'wx_ref',ThisRef,ThisT,_cor19},{SizeW,SizeH}>
	      when let <_cor9> =
		    %% Line 1541
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor10> =
			%% Line 1541
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 1541
			call 'erlang':'and'
			    (_cor9, _cor10) ->
	      do  %% Line 1542
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 1544
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1543
		      call 'wxe_util':'cast'
			  (259, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'setSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setSize'/3 =
    %% Line 1557
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},Width,Height>
	      when let <_cor3> =
		    %% Line 1558
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 1558
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 1558
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1559
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1561
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1560
		      call 'wxe_util':'cast'
			  (258, _cor7)
	  %% Line 1562
	  <{'wx_ref',ThisRef,ThisT,_cor31},{RectX,RectY,RectW,RectH},Options>
	      when %% Line 1563
		try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor9> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor12> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor13> =
					    call 'erlang':'and'
						(_cor11, _cor12)
					in  let <_cor14> =
						call 'erlang':'and'
						    (_cor10, _cor13)
					    in  let <_cor15> =
						    call 'erlang':'and'
							(_cor9, _cor14)
						in  call 'erlang':'and'
							(_cor8, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1564
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1565
		      ( fun (_cor20,_cor19) ->
			    case <_cor20,_cor19> of
			      <{'sizeFlags',SizeFlags},Acc> when 'true' ->
				  let <_cor18> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<SizeFlags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor18|Acc]
			      %% Line 1566
			      <BadOpt,_cor32> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSize/3-fun-0-'}}] )
		  in  let <_cor24> =
			  %% Line 1567
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1567
			      call 'erlang':'list_to_binary'
				  (_cor24)
			  in  let <_cor26> =
				  %% Line 1569
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<RectX>(32,1,'integer',['unsigned'|['native']]),
				    #<RectY>(32,1,'integer',['unsigned'|['native']]),
				    #<RectW>(32,1,'integer',['unsigned'|['native']]),
				    #<RectH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1568
				  call 'wxe_util':'cast'
				      (260, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'setSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setSize'/5 =
    %% Line 1575
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor17,_cor18,_cor19},X,Y,Width,Height>
	      when %% Line 1576
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (X)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (Y)
			  in  let <_cor7> =
				  call 'erlang':'is_integer'
				      (Width)
			      in  let <_cor8> =
				      call 'erlang':'is_integer'
					  (Height)
				  in  let <_cor9> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor7, _cor8)
					    -| ['compiler_generated'] )
				      in  let <_cor10> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor6, _cor9)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor5, _cor10)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1577
	      apply 'setSize'/6
		  (This, X, Y, Width, Height, [])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'setSize',5}}] )
	    -| ['compiler_generated'] )
	end
'setSize'/6 =
    %% Line 1583
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor31},X,Y,Width,Height,Options>
	      when %% Line 1584
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (Width)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(Height)
				in  let <_cor10> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1585
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1586
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'sizeFlags',SizeFlags},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<SizeFlags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor16|Acc]
			      %% Line 1587
			      <BadOpt,_cor32> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSize/6-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 1588
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1588
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 1590
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<X>(32,1,'integer',['unsigned'|['native']]),
				    #<Y>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1589
				  call 'wxe_util':'cast'
				      (257, _cor24)
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'setSize',6}}] )
	    -| ['compiler_generated'] )
	end
'setSizeHints'/2 =
    %% Line 1596
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},MinSize = {MinSizeW,MinSizeH}>
	      when let <_cor2> =
		    %% Line 1597
		    call 'erlang':'is_integer'
			(MinSizeW)
		in  let <_cor3> =
			%% Line 1597
			call 'erlang':'is_integer'
			    (MinSizeH)
		    in  %% Line 1597
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 1598
	      apply 'setSizeHints'/3
		  (This, MinSize, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSizeHints',2}}] )
	    -| ['compiler_generated'] )
	end
'setSizeHints'/3 =
    %% Line 1614
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor25,_cor26,_cor27},MinW,MinH>
	      when let <_cor3> =
		    %% Line 1615
		    call 'erlang':'is_integer'
			(MinW)
		in  let <_cor4> =
			%% Line 1615
			call 'erlang':'is_integer'
			    (MinH)
		    in  %% Line 1615
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1616
	      apply 'setSizeHints'/4
		  (This, MinW, MinH, [])
	  %% Line 1617
	  <{'wx_ref',ThisRef,ThisT,_cor28},{MinSizeW,MinSizeH},Options>
	      when %% Line 1618
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (MinSizeW)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(MinSizeH)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1619
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1620
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'maxSize',{MaxSizeW,MaxSizeH}},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<MaxSizeW>(32,1,'integer',['unsigned'|['native']]),
					#<MaxSizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor12|Acc]
			      %% Line 1621
			      <{'incSize',{IncSizeW,IncSizeH}},Acc> when 'true' ->
				  let <_cor13> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<IncSizeW>(32,1,'integer',['unsigned'|['native']]),
					#<IncSizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor13|Acc]
			      %% Line 1622
			      <BadOpt,_cor29> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSizeHints/3-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 1623
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1623
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor21> =
				  %% Line 1625
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<MinSizeW>(32,1,'integer',['unsigned'|['native']]),
				    #<MinSizeH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1624
				  call 'wxe_util':'cast'
				      (262, _cor21)
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'setSizeHints',3}}] )
	    -| ['compiler_generated'] )
	end
'setSizeHints'/4 =
    %% Line 1634
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},MinW,MinH,Options>
	      when %% Line 1635
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (MinW)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(MinH)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1636
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1637
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'maxW',MaxW},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<MaxW>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 1638
			      <{'maxH',MaxH},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<MaxH>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 1639
			      <{'incW',IncW},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<IncW>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 1640
			      <{'incH',IncH},Acc> when 'true' ->
				  let <_cor13> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<IncH>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor13|Acc]
			      %% Line 1641
			      <BadOpt,_cor27> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setSizeHints/4-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 1642
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1642
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor21> =
				  %% Line 1644
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<MinW>(32,1,'integer',['unsigned'|['native']]),
				    #<MinH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1643
				  call 'wxe_util':'cast'
				      (261, _cor21)
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'setSizeHints',4}}] )
	    -| ['compiler_generated'] )
	end
'setSizer'/2 =
    %% Line 1650
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Sizer = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 1652
	      apply 'setSizer'/3
		  (This, Sizer, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setSizer',2}}] )
	    -| ['compiler_generated'] )
	end
'setSizer'/3 =
    %% Line 1658
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',SizerRef,SizerT,_cor21},Options>
	      when %% Line 1659
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1660
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1661
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (SizerT,
				       'wxSizer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call SizerT:'parent_class'
				    ('wxSizer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 1662
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'deleteOld',DeleteOld},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'from_bool'
					      (DeleteOld)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor8|Acc]
				  %% Line 1663
				  <BadOpt,_cor22> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setSizer/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 1664
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 1664
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 1666
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<SizerRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 1665
				      call 'wxe_util':'cast'
					  (263, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setSizer',3}}] )
	    -| ['compiler_generated'] )
	end
'setSizerAndFit'/2 =
    %% Line 1672
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Sizer = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 1674
	      apply 'setSizerAndFit'/3
		  (This, Sizer, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setSizerAndFit',2}}] )
	    -| ['compiler_generated'] )
	end
'setSizerAndFit'/3 =
    %% Line 1680
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',SizerRef,SizerT,_cor21},Options>
	      when %% Line 1681
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1682
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1683
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (SizerT,
				       'wxSizer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call SizerT:'parent_class'
				    ('wxSizer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 1684
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'deleteOld',DeleteOld},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'from_bool'
					      (DeleteOld)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor8|Acc]
				  %% Line 1685
				  <BadOpt,_cor22> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setSizerAndFit/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 1686
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 1686
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 1688
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<SizerRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 1687
				      call 'wxe_util':'cast'
					  (264, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setSizerAndFit',3}}] )
	    -| ['compiler_generated'] )
	end
'setThemeEnabled'/2 =
    %% Line 1693
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},EnableTheme>
	      when %% Line 1694
		call 'erlang':'is_boolean'
		    (EnableTheme) ->
	      do  %% Line 1695
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1697
		      call 'wxe_util':'from_bool'
			  (EnableTheme)
		  in  let <_cor5> =
			  %% Line 1697
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1696
			  call 'wxe_util':'cast'
			      (265, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setThemeEnabled',2}}] )
	    -| ['compiler_generated'] )
	end
'setToolTip'/2 =
    %% Line 1708
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Tip>
	      when %% Line 1709
		call 'erlang':'is_list'
		    (Tip) ->
	      do  %% Line 1710
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Tip_UC> =
		      %% Line 1711
		      call 'unicode':'characters_to_binary'
			  ([Tip|[0]])
		  in  let <_cor10> =
			  %% Line 1713
			  call 'erlang':'byte_size'
			      (Tip_UC)
		      in  let <_cor5> =
			      %% Line 1713
			      call 'erlang':'byte_size'
				  (Tip_UC)
			  in  let <_cor6> =
				  %% Line 1713
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 1713
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 1713
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 1713
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 1713
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Tip_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1712
						  call 'wxe_util':'cast'
						      (266, _cor11)
	  %% Line 1714
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',TipRef,TipT,_cor21}> when 'true' ->
	      do  %% Line 1715
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1716
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (TipT,
				       'wxToolTip') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call TipT:'parent_class'
				    ('wxToolTip')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor16> =
			  %% Line 1718
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<TipRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1717
			  call 'wxe_util':'cast'
			      (267, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'setToolTip',2}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSize'/2 =
    %% Line 1723
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SizeW,SizeH}>
	      when let <_cor2> =
		    %% Line 1724
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor3> =
			%% Line 1724
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 1724
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1725
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1727
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1726
		      call 'wxe_util':'cast'
			  (268, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setVirtualSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSize'/3 =
    %% Line 1732
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 1733
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 1733
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 1733
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1734
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1736
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1735
		      call 'wxe_util':'cast'
			  (269, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setVirtualSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSizeHints'/2 =
    %% Line 1742
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},MinSize = {MinSizeW,MinSizeH}>
	      when let <_cor2> =
		    %% Line 1743
		    call 'erlang':'is_integer'
			(MinSizeW)
		in  let <_cor3> =
			%% Line 1743
			call 'erlang':'is_integer'
			    (MinSizeH)
		    in  %% Line 1743
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 1744
	      apply 'setVirtualSizeHints'/3
		  (This, MinSize, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setVirtualSizeHints',2}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSizeHints'/3 =
    %% Line 1758
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor24,_cor25,_cor26},MinW,MinH>
	      when let <_cor3> =
		    %% Line 1759
		    call 'erlang':'is_integer'
			(MinW)
		in  let <_cor4> =
			%% Line 1759
			call 'erlang':'is_integer'
			    (MinH)
		    in  %% Line 1759
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1760
	      apply 'setVirtualSizeHints'/4
		  (This, MinW, MinH, [])
	  %% Line 1761
	  <{'wx_ref',ThisRef,ThisT,_cor27},{MinSizeW,MinSizeH},Options>
	      when %% Line 1762
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (MinSizeW)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(MinSizeH)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1763
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1764
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'maxSize',{MaxSizeW,MaxSizeH}},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<MaxSizeW>(32,1,'integer',['unsigned'|['native']]),
					#<MaxSizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor12|Acc]
			      %% Line 1765
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setVirtualSizeHints/3-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 1766
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1766
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 1768
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<MinSizeW>(32,1,'integer',['unsigned'|['native']]),
				    #<MinSizeH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1767
				  call 'wxe_util':'cast'
				      (271, _cor20)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'setVirtualSizeHints',3}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSizeHints'/4 =
    %% Line 1775
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor24},MinW,MinH,Options>
	      when %% Line 1776
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (MinW)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(MinH)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1777
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1778
		      ( fun (_cor13,_cor12) ->
			    case <_cor13,_cor12> of
			      <{'maxW',MaxW},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<MaxW>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 1779
			      <{'maxH',MaxH},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<MaxH>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 1780
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setVirtualSizeHints/4-fun-0-'}}] )
		  in  let <_cor17> =
			  %% Line 1781
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1781
			      call 'erlang':'list_to_binary'
				  (_cor17)
			  in  let <_cor19> =
				  %% Line 1783
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<MinW>(32,1,'integer',['unsigned'|['native']]),
				    #<MinH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1782
				  call 'wxe_util':'cast'
				      (270, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'setVirtualSizeHints',4}}] )
	    -| ['compiler_generated'] )
	end
'setWindowStyle'/2 =
    %% Line 1788
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 1789
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 1790
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1792
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1791
		      call 'wxe_util':'cast'
			  (272, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWindowStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setWindowStyleFlag'/2 =
    %% Line 1797
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 1798
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 1799
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1801
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1800
		      call 'wxe_util':'cast'
			  (273, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWindowStyleFlag',2}}] )
	    -| ['compiler_generated'] )
	end
'setWindowVariant'/2 =
    %% Line 1807
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Variant>
	      when %% Line 1808
		call 'erlang':'is_integer'
		    (Variant) ->
	      do  %% Line 1809
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1811
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Variant>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1810
		      call 'wxe_util':'cast'
			  (274, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWindowVariant',2}}] )
	    -| ['compiler_generated'] )
	end
'shouldInheritColours'/1 =
    %% Line 1816
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1817
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1819
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1818
		      call 'wxe_util':'call'
			  (275, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'shouldInheritColours',1}}] )
	    -| ['compiler_generated'] )
	end
'show'/1 =
    %% Line 1825
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1826
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1827
	      apply 'show'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'show',1}}] )
	    -| ['compiler_generated'] )
	end
'show'/2 =
    %% Line 1833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 1834
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1835
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1836
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'show',Show},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Show)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 1837
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-show/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 1838
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1838
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 1840
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1839
				  call 'wxe_util':'call'
				      (276, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'show',2}}] )
	    -| ['compiler_generated'] )
	end
'thaw'/1 =
    %% Line 1845
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1846
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1848
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1847
		      call 'wxe_util':'cast'
			  (277, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'thaw',1}}] )
	    -| ['compiler_generated'] )
	end
'transferDataFromWindow'/1 =
    %% Line 1853
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1854
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1856
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1855
		      call 'wxe_util':'call'
			  (278, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'transferDataFromWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'transferDataToWindow'/1 =
    %% Line 1861
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1862
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1864
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1863
		      call 'wxe_util':'call'
			  (279, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'transferDataToWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'update'/1 =
    %% Line 1869
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1870
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1872
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1871
		      call 'wxe_util':'cast'
			  (280, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'update',1}}] )
	    -| ['compiler_generated'] )
	end
'updateWindowUI'/1 =
    %% Line 1878
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1879
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1880
	      apply 'updateWindowUI'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'updateWindowUI',1}}] )
	    -| ['compiler_generated'] )
	end
'updateWindowUI'/2 =
    %% Line 1886
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 1887
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1888
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1889
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 1890
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-updateWindowUI/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 1891
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1891
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 1893
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1892
				  call 'wxe_util':'cast'
				      (281, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'updateWindowUI',2}}] )
	    -| ['compiler_generated'] )
	end
'validate'/1 =
    %% Line 1898
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1899
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1901
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1900
		      call 'wxe_util':'call'
			  (282, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'validate',1}}] )
	    -| ['compiler_generated'] )
	end
'warpPointer'/3 =
    %% Line 1906
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 1907
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 1907
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 1907
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1908
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1910
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1909
		      call 'wxe_util':'cast'
			  (283, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'warpPointer',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 1914
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 1915
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1916
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 1917
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'disconnect'/3 =
    %% Line 1920
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 1922
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 1924
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 1926
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 1928
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxWindow')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxWindow', _cor0)
end