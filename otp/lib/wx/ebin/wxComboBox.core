module 'wxComboBox' ['append'/2,
		     'append'/3,
		     'appendStrings'/2,
		     'cacheBestSize'/2,
		     'canCopy'/1,
		     'canCut'/1,
		     'canPaste'/1,
		     'canRedo'/1,
		     'canUndo'/1,
		     'captureMouse'/1,
		     'center'/1,
		     'center'/2,
		     'centerOnParent'/1,
		     'centerOnParent'/2,
		     'centre'/1,
		     'centre'/2,
		     'centreOnParent'/1,
		     'centreOnParent'/2,
		     'clear'/1,
		     'clearBackground'/1,
		     'clientToScreen'/2,
		     'clientToScreen'/3,
		     'close'/1,
		     'close'/2,
		     'connect'/2,
		     'connect'/3,
		     'convertDialogToPixels'/2,
		     'convertPixelsToDialog'/2,
		     'copy'/1,
		     'create'/7,
		     'create'/8,
		     'cut'/1,
		     'delete'/2,
		     'destroy'/1,
		     'destroyChildren'/1,
		     'disable'/1,
		     'disconnect'/1,
		     'disconnect'/2,
		     'disconnect'/3,
		     'enable'/1,
		     'enable'/2,
		     'findString'/2,
		     'findString'/3,
		     'findWindow'/2,
		     'fit'/1,
		     'fitInside'/1,
		     'freeze'/1,
		     'getAcceleratorTable'/1,
		     'getBackgroundColour'/1,
		     'getBackgroundStyle'/1,
		     'getBestSize'/1,
		     'getCaret'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getChildren'/1,
		     'getClientData'/2,
		     'getClientSize'/1,
		     'getContainingSizer'/1,
		     'getCount'/1,
		     'getCursor'/1,
		     'getDropTarget'/1,
		     'getEventHandler'/1,
		     'getExtraStyle'/1,
		     'getFont'/1,
		     'getForegroundColour'/1,
		     'getGrandParent'/1,
		     'getHandle'/1,
		     'getHelpText'/1,
		     'getId'/1,
		     'getInsertionPoint'/1,
		     'getLabel'/1,
		     'getLastPosition'/1,
		     'getMaxSize'/1,
		     'getMinSize'/1,
		     'getName'/1,
		     'getParent'/1,
		     'getPosition'/1,
		     'getRect'/1,
		     'getScreenPosition'/1,
		     'getScreenRect'/1,
		     'getScrollPos'/2,
		     'getScrollRange'/2,
		     'getScrollThumb'/2,
		     'getSelection'/1,
		     'getSize'/1,
		     'getSizer'/1,
		     'getString'/2,
		     'getStringSelection'/1,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getToolTip'/1,
		     'getUpdateRegion'/1,
		     'getValue'/1,
		     'getVirtualSize'/1,
		     'getWindowStyleFlag'/1,
		     'getWindowVariant'/1,
		     'hasCapture'/1,
		     'hasScrollbar'/2,
		     'hasTransparentBackground'/1,
		     'hide'/1,
		     'inheritAttributes'/1,
		     'initDialog'/1,
		     'insert'/3,
		     'insert'/4,
		     'invalidateBestSize'/1,
		     'isEmpty'/1,
		     'isEnabled'/1,
		     'isExposed'/2,
		     'isExposed'/3,
		     'isExposed'/5,
		     'isRetained'/1,
		     'isShown'/1,
		     'isTopLevel'/1,
		     'layout'/1,
		     'lineDown'/1,
		     'lineUp'/1,
		     'lower'/1,
		     'makeModal'/1,
		     'makeModal'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'move'/2,
		     'move'/3,
		     'move'/4,
		     'moveAfterInTabOrder'/2,
		     'moveBeforeInTabOrder'/2,
		     'navigate'/1,
		     'navigate'/2,
		     'new'/0,
		     'new'/2,
		     'new'/3,
		     'pageDown'/1,
		     'pageUp'/1,
		     'parent_class'/1,
		     'paste'/1,
		     'popEventHandler'/1,
		     'popEventHandler'/2,
		     'popupMenu'/2,
		     'popupMenu'/3,
		     'popupMenu'/4,
		     'raise'/1,
		     'redo'/1,
		     'refresh'/1,
		     'refresh'/2,
		     'refreshRect'/2,
		     'refreshRect'/3,
		     'releaseMouse'/1,
		     'remove'/3,
		     'removeChild'/2,
		     'reparent'/2,
		     'replace'/4,
		     'screenToClient'/1,
		     'screenToClient'/2,
		     'scrollLines'/2,
		     'scrollPages'/2,
		     'scrollWindow'/3,
		     'scrollWindow'/4,
		     'select'/2,
		     'setAcceleratorTable'/2,
		     'setAutoLayout'/2,
		     'setBackgroundColour'/2,
		     'setBackgroundStyle'/2,
		     'setCaret'/2,
		     'setClientData'/3,
		     'setClientSize'/2,
		     'setClientSize'/3,
		     'setContainingSizer'/2,
		     'setCursor'/2,
		     'setDropTarget'/2,
		     'setExtraStyle'/2,
		     'setFocus'/1,
		     'setFocusFromKbd'/1,
		     'setFont'/2,
		     'setForegroundColour'/2,
		     'setHelpText'/2,
		     'setId'/2,
		     'setInsertionPoint'/2,
		     'setInsertionPointEnd'/1,
		     'setLabel'/2,
		     'setMaxSize'/2,
		     'setMinSize'/2,
		     'setName'/2,
		     'setOwnBackgroundColour'/2,
		     'setOwnFont'/2,
		     'setOwnForegroundColour'/2,
		     'setPalette'/2,
		     'setScrollPos'/3,
		     'setScrollPos'/4,
		     'setScrollbar'/5,
		     'setScrollbar'/6,
		     'setSelection'/2,
		     'setSelection'/3,
		     'setSize'/2,
		     'setSize'/3,
		     'setSize'/5,
		     'setSize'/6,
		     'setSizeHints'/2,
		     'setSizeHints'/3,
		     'setSizeHints'/4,
		     'setSizer'/2,
		     'setSizer'/3,
		     'setSizerAndFit'/2,
		     'setSizerAndFit'/3,
		     'setString'/3,
		     'setStringSelection'/2,
		     'setThemeEnabled'/2,
		     'setToolTip'/2,
		     'setValue'/2,
		     'setVirtualSize'/2,
		     'setVirtualSize'/3,
		     'setVirtualSizeHints'/2,
		     'setVirtualSizeHints'/3,
		     'setVirtualSizeHints'/4,
		     'setWindowStyle'/2,
		     'setWindowStyleFlag'/2,
		     'setWindowVariant'/2,
		     'shouldInheritColours'/1,
		     'show'/1,
		     'show'/2,
		     'thaw'/1,
		     'transferDataFromWindow'/1,
		     'transferDataToWindow'/1,
		     'undo'/1,
		     'update'/1,
		     'updateWindowUI'/1,
		     'updateWindowUI'/2,
		     'validate'/1,
		     'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 79
		'export_type' =
		    %% Line 79
		    [{'wxComboBox',0}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxComboBox',{'remote_type',87,[{'atom',87,'wx'}|[{'atom',87,'wx_object'}|[[]]]]},[]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'new',0},[{'type',89,'fun',[{'type',89,'product',[]}|[{'type',89,'wxComboBox',[]}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'new',2},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'Parent'}|[{'var',95,'Id'}]]}|[{'type',95,'wxComboBox',[]}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Parent'}|[{'remote_type',96,[{'atom',96,'wxWindow'}|[{'atom',96,'wxWindow'}|[[]]]]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Id'}|[{'type',96,'integer',[]}]]]]}]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'new',3},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'Parent'}|[{'var',103,'Id'}|[{'type',103,'list',[{'var',103,'Option'}]}]]]}|[{'type',103,'wxComboBox',[]}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Parent'}|[{'remote_type',104,[{'atom',104,'wxWindow'}|[{'atom',104,'wxWindow'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Id'}|[{'type',104,'integer',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Option'}|[{'type',105,'union',[{'type',105,'tuple',[{'atom',105,'value'}|[{'remote_type',105,[{'atom',105,'unicode'}|[{'atom',105,'chardata'}|[[]]]]}]]}|[{'type',106,'tuple',[{'atom',106,'pos'}|[{'type',106,'tuple',[{'ann_type',106,[{'var',106,'X'}|[{'type',106,'integer',[]}]]}|[{'ann_type',106,[{'var',106,'Y'}|[{'type',106,'integer',[]}]]}]]}]]}|[{'type',107,'tuple',[{'atom',107,'size'}|[{'type',107,'tuple',[{'ann_type',107,[{'var',107,'W'}|[{'type',107,'integer',[]}]]}|[{'ann_type',107,[{'var',107,'H'}|[{'type',107,'integer',[]}]]}]]}]]}|[{'type',108,'tuple',[{'atom',108,'choices'}|[{'type',108,'list',[{'remote_type',108,[{'atom',108,'unicode'}|[{'atom',108,'chardata'}|[[]]]]}]}]]}|[{'type',109,'tuple',[{'atom',109,'style'}|[{'type',109,'integer',[]}]]}|[{'type',110,'tuple',[{'atom',110,'validator'}|[{'remote_type',110,[{'atom',110,'wx'}|[{'atom',110,'wx_object'}|[[]]]]}]]}]]]]]]}]]]]}]]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'create',7},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'This'}|[{'var',126,'Parent'}|[{'var',126,'Id'}|[{'var',126,'Value'}|[{'var',126,'Pos'}|[{'var',126,'Size'}|[{'var',126,'Choices'}]]]]]]]}|[{'type',126,'boolean',[]}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'This'}|[{'type',127,'wxComboBox',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Parent'}|[{'remote_type',127,[{'atom',127,'wxWindow'}|[{'atom',127,'wxWindow'}|[[]]]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Id'}|[{'type',127,'integer',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Value'}|[{'remote_type',127,[{'atom',127,'unicode'}|[{'atom',127,'chardata'}|[[]]]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Pos'}|[{'type',127,'tuple',[{'ann_type',127,[{'var',127,'X'}|[{'type',127,'integer',[]}]]}|[{'ann_type',127,[{'var',127,'Y'}|[{'type',127,'integer',[]}]]}]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Size'}|[{'type',127,'tuple',[{'ann_type',127,[{'var',127,'W'}|[{'type',127,'integer',[]}]]}|[{'ann_type',127,[{'var',127,'H'}|[{'type',127,'integer',[]}]]}]]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Choices'}|[{'type',127,'list',[{'remote_type',127,[{'atom',127,'unicode'}|[{'atom',127,'chardata'}|[[]]]]}]}]]]]}]]]]]]]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'create',8},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'This'}|[{'var',134,'Parent'}|[{'var',134,'Id'}|[{'var',134,'Value'}|[{'var',134,'Pos'}|[{'var',134,'Size'}|[{'var',134,'Choices'}|[{'type',134,'list',[{'var',134,'Option'}]}]]]]]]]]}|[{'type',134,'boolean',[]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'This'}|[{'type',135,'wxComboBox',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Parent'}|[{'remote_type',135,[{'atom',135,'wxWindow'}|[{'atom',135,'wxWindow'}|[[]]]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Id'}|[{'type',135,'integer',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Value'}|[{'remote_type',135,[{'atom',135,'unicode'}|[{'atom',135,'chardata'}|[[]]]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Pos'}|[{'type',135,'tuple',[{'ann_type',135,[{'var',135,'X'}|[{'type',135,'integer',[]}]]}|[{'ann_type',135,[{'var',135,'Y'}|[{'type',135,'integer',[]}]]}]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Size'}|[{'type',135,'tuple',[{'ann_type',135,[{'var',135,'W'}|[{'type',135,'integer',[]}]]}|[{'ann_type',135,[{'var',135,'H'}|[{'type',135,'integer',[]}]]}]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Choices'}|[{'type',135,'list',[{'remote_type',135,[{'atom',135,'unicode'}|[{'atom',135,'chardata'}|[[]]]]}]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Option'}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'style'}|[{'type',136,'integer',[]}]]}|[{'type',137,'tuple',[{'atom',137,'validator'}|[{'remote_type',137,[{'atom',137,'wx'}|[{'atom',137,'wx_object'}|[[]]]]}]]}]]}]]]]}]]]]]]]]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'canCopy',1},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'This'}]}|[{'type',153,'boolean',[]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'This'}|[{'type',154,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'canCut',1},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'This'}]}|[{'type',161,'boolean',[]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'This'}|[{'type',162,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'canPaste',1},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'This'}]}|[{'type',169,'boolean',[]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'This'}|[{'type',170,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'canRedo',1},[{'type',177,'bounded_fun',[{'type',177,'fun',[{'type',177,'product',[{'var',177,'This'}]}|[{'type',177,'boolean',[]}]]}|[[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'This'}|[{'type',178,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'canUndo',1},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'This'}]}|[{'type',185,'boolean',[]}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'This'}|[{'type',186,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'copy',1},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'This'}]}|[{'atom',193,'ok'}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'This'}|[{'type',194,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 201
		'spec' =
		    %% Line 201
		    [{{'cut',1},[{'type',201,'bounded_fun',[{'type',201,'fun',[{'type',201,'product',[{'var',201,'This'}]}|[{'atom',201,'ok'}]]}|[[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'This'}|[{'type',202,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'getInsertionPoint',1},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'This'}]}|[{'type',209,'integer',[]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'This'}|[{'type',210,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'getLastPosition',1},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'This'}]}|[{'type',217,'integer',[]}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'This'}|[{'type',218,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'getValue',1},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'This'}]}|[{'remote_type',225,[{'atom',225,'unicode'}|[{'atom',225,'charlist'}|[[]]]]}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'This'}|[{'type',226,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'paste',1},[{'type',233,'bounded_fun',[{'type',233,'fun',[{'type',233,'product',[{'var',233,'This'}]}|[{'atom',233,'ok'}]]}|[[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'This'}|[{'type',234,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'redo',1},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'This'}]}|[{'atom',241,'ok'}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'This'}|[{'type',242,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'replace',4},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'This'}|[{'var',249,'From'}|[{'var',249,'To'}|[{'var',249,'Value'}]]]]}|[{'atom',249,'ok'}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'This'}|[{'type',250,'wxComboBox',[]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'From'}|[{'type',250,'integer',[]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'To'}|[{'type',250,'integer',[]}]]]]}|[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Value'}|[{'remote_type',250,[{'atom',250,'unicode'}|[{'atom',250,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'remove',3},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'This'}|[{'var',259,'From'}|[{'var',259,'To'}]]]}|[{'atom',259,'ok'}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'This'}|[{'type',260,'wxComboBox',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'From'}|[{'type',260,'integer',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'To'}|[{'type',260,'integer',[]}]]]]}]]]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'setInsertionPoint',2},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'This'}|[{'var',268,'Pos'}]]}|[{'atom',268,'ok'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'This'}|[{'type',269,'wxComboBox',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Pos'}|[{'type',269,'integer',[]}]]]]}]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'setInsertionPointEnd',1},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'This'}]}|[{'atom',277,'ok'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'This'}|[{'type',278,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'setSelection',2},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'This'}|[{'var',285,'N'}]]}|[{'atom',285,'ok'}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'This'}|[{'type',286,'wxComboBox',[]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'N'}|[{'type',286,'integer',[]}]]]]}]]]]}]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'setSelection',3},[{'type',294,'bounded_fun',[{'type',294,'fun',[{'type',294,'product',[{'var',294,'This'}|[{'var',294,'From'}|[{'var',294,'To'}]]]}|[{'atom',294,'ok'}]]}|[[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'This'}|[{'type',295,'wxComboBox',[]}]]]]}|[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'From'}|[{'type',295,'integer',[]}]]]]}|[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'To'}|[{'type',295,'integer',[]}]]]]}]]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'setValue',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'This'}|[{'var',303,'Value'}]]}|[{'atom',303,'ok'}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'This'}|[{'type',304,'wxComboBox',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Value'}|[{'remote_type',304,[{'atom',304,'unicode'}|[{'atom',304,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 313
		'spec' =
		    %% Line 313
		    [{{'undo',1},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'This'}]}|[{'atom',313,'ok'}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'This'}|[{'type',314,'wxComboBox',[]}]]]]}]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'destroy',1},[{'type',321,'fun',[{'type',321,'product',[{'ann_type',321,[{'var',321,'This'}|[{'type',321,'wxComboBox',[]}]]}]}|[{'atom',321,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <'wxControlWithItems'> when 'true' ->
	      'true'
	  %% Line 82
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 83
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 84
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 85
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxComboBox'})
	end
'new'/0 =
    %% Line 90
    fun () ->
	%% Line 91
	call 'wxe_util':'construct'
	    (1570, %% Line 92
		   #{}#)
'new'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor5,_cor6,_cor7},Id>
	      when %% Line 99
		call 'erlang':'is_integer'
		    (Id) ->
	      %% Line 100
	      apply 'new'/3
		  (Parent, Id, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor60},Id,Options>
	      when let <_cor3> =
		    %% Line 112
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor4> =
			%% Line 112
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 112
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 113
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 114
		      ( fun (_cor50,_cor49) ->
			    case <_cor50,_cor49> of
			      <{'value',Value},Acc> when 'true' ->
				  let <Value_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Value|[0]])
				  in  let <_cor13> =
					  call 'erlang':'byte_size'
					      (Value_UC)
				      in  let <_cor8> =
					      call 'erlang':'byte_size'
						  (Value_UC)
					  in  let <_cor9> =
						  call 'erlang':'+'
						      (0, _cor8)
					      in  let <_cor10> =
						      call 'erlang':'band'
							  (_cor9, 7)
						  in  let <_cor11> =
							  call 'erlang':'-'
							      (8, _cor10)
						      in  let <_cor12> =
							      call 'erlang':'band'
								  (_cor11, 7)
							  in  let <_cor14> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
								    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
							      in  [_cor14|Acc]
			      %% Line 115
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor15|Acc]
			      %% Line 116
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor16|Acc]
			      %% Line 117
			      <{'choices',Choices},Acc> when 'true' ->
				  let <_cor22> =
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor19) ->
						    case _cor19 of
						      <[ChoicesTemp|_cor18]> when 'true' ->
							  let <_cor20> =
							      call 'unicode':'characters_to_binary'
								  ([ChoicesTemp|[0]])
							  in  let <_cor21> =
								  apply 'lc$^0'/1
								      (_cor18)
							      in  ( [_cor20|_cor21]
								    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor19> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor19})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(Choices)
					-| ['list_comprehension'] )
				  in  let <_cor43> =
					  call 'erlang':'length'
					      (_cor22)
				      in  let <_cor36> =
					      primop 'bs_init_writable'
						  (256)
					  in  let <_cor42> =
						  ( letrec
							'lbc$^2'/2 =
							    fun (_cor40,_cor39) ->
								case <_cor40,_cor39> of
								  <[UC_Str|_cor38],_cor39> when 'true' ->
								      let <_cor41> =
									  call 'erlang':'byte_size'
									      (UC_Str)
								      in  let <_cor39> =
									      ( #{#<_cor39>('all',1,'binary',[]),
										  #<_cor41>(32,1,'integer',['unsigned'|['native']]),
										  #<UC_Str>('all',8,'binary',['unsigned'|['big']])}#
										-| ['compiler_generated','single_use'] )
									  in  apply 'lbc$^2'/2
										  (_cor38, _cor39)
								  <[],_cor39> when 'true' ->
								      _cor39
								  ( <_cor40,_cor39> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor40,_cor39})
									  -| [{'function_name',{'lbc$^2',2}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lbc$^2'/2
							    (_cor22, _cor36)
						    -| ['list_comprehension'] )
					      in  let <_cor30> =
						      ( letrec
							    'lc$^1'/1 =
								fun (_cor26) ->
								    case _cor26 of
								      <[S|_cor25]> when 'true' ->
									  let <_cor27> =
									      call 'erlang':'byte_size'
										  (S)
									  in  let <_cor28> =
										  call 'erlang':'+'
										      (_cor27, 4)
									      in  let <_cor29> =
										      apply 'lc$^1'/1
											  (_cor25)
										  in  ( [_cor28|_cor29]
											-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor26> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor26})
									      -| [{'function_name',{'lc$^1',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^1'/1
								(_cor22)
							-| ['list_comprehension'] )
						  in  let <_cor31> =
							  call 'lists':'sum'
							      (_cor30)
						      in  let <_cor32> =
							      call 'erlang':'+'
								  (0, _cor31)
							  in  let <_cor33> =
								  call 'erlang':'band'
								      (_cor32, 7)
							      in  let <_cor34> =
								      call 'erlang':'-'
									  (8, _cor33)
								  in  let <_cor35> =
									  call 'erlang':'band'
									      (_cor34, 7)
								      in  let <_cor44> =
									      #{#<4>(32,1,'integer',['unsigned'|['native']]),
										#<_cor43>(32,1,'integer',['unsigned'|['native']]),
										#<_cor42>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor35,8,'integer',['unsigned'|['big']])}#
									  in  [_cor44|Acc]
			      %% Line 118
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor45> =
				      #{#<5>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor45|Acc]
			      %% Line 119
			      <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor61}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ValidatorT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ValidatorT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor48> =
					  #{#<6>(32,1,'integer',['unsigned'|['native']]),
					    #<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor48|Acc]
			      %% Line 120
			      <BadOpt,_cor62> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/3-fun-0-'}}] )
		  in  let <_cor54> =
			  %% Line 121
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 121
			      call 'erlang':'list_to_binary'
				  (_cor54)
			  in  let <_cor56> =
				  %% Line 123
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Id>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 122
				  call 'wxe_util':'construct'
				      (1572, _cor56)
	  ( <_cor59,_cor58,_cor57> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor59,_cor58,_cor57})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/7 =
    %% Line 129
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor28,_cor29,_cor30},Parent = {'wx_ref',_cor31,_cor32,_cor33},Id,Value,Pos = {PosX,PosY},Size = {SizeW,SizeH},Choices>
	      when %% Line 130
		( try
		      let <_cor7> =
			  call 'erlang':'is_integer'
			      (Id)
		      in  let <_cor8> =
			      call 'erlang':'is_list'
				  (Value)
			  in  let <_cor9> =
				  call 'erlang':'is_integer'
				      (PosX)
			      in  let <_cor10> =
				      call 'erlang':'is_integer'
					  (PosY)
				  in  let <_cor11> =
					  call 'erlang':'is_integer'
					      (SizeW)
				      in  let <_cor12> =
					      call 'erlang':'is_integer'
						  (SizeH)
					  in  let <_cor13> =
						  call 'erlang':'is_list'
						      (Choices)
					      in  let <_cor14> =
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'and'
											     -| ['compiler_generated'] )
							    (_cor12, _cor13)
							-| ['compiler_generated'] )
						  in  let <_cor15> =
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'and'
												 -| ['compiler_generated'] )
								(_cor11, _cor14)
							    -| ['compiler_generated'] )
						      in  let <_cor16> =
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'and'
												     -| ['compiler_generated'] )
								    (_cor10, _cor15)
								-| ['compiler_generated'] )
							  in  let <_cor17> =
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'and'
													 -| ['compiler_generated'] )
									(_cor9, _cor16)
								    -| ['compiler_generated'] )
							      in  let <_cor18> =
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor8, _cor17)
									-| ['compiler_generated'] )
								  in  ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'and'
													     -| ['compiler_generated'] )
									    (_cor7, _cor18)
									-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 131
	      apply 'create'/8
		  (This, Parent, Id, Value, Pos, Size, Choices, [])
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'create',7}}] )
	    -| ['compiler_generated'] )
	end
'create'/8 =
    %% Line 138
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor80},{'wx_ref',ParentRef,ParentT,_cor81},Id,Value,{PosX,PosY},{SizeW,SizeH},Choices,Options>
	      when %% Line 139
		try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (Id)
		    in  let <_cor9> =
			    call 'erlang':'is_list'
				(Value)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (PosX)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(PosY)
				in  let <_cor12> =
					call 'erlang':'is_integer'
					    (SizeW)
				    in  let <_cor13> =
					    call 'erlang':'is_integer'
						(SizeH)
					in  let <_cor14> =
						call 'erlang':'is_list'
						    (Choices)
					    in  let <_cor15> =
						    call 'erlang':'is_list'
							(Options)
						in  let <_cor16> =
							call 'erlang':'and'
							    (_cor14, _cor15)
						    in  let <_cor17> =
							    call 'erlang':'and'
								(_cor13, _cor16)
							in  let <_cor18> =
								call 'erlang':'and'
								    (_cor12, _cor17)
							    in  let <_cor19> =
								    call 'erlang':'and'
									(_cor11, _cor18)
								in  let <_cor20> =
									call 'erlang':'and'
									    (_cor10, _cor19)
								    in  let <_cor21> =
									    call 'erlang':'and'
										(_cor9, _cor20)
									in  call 'erlang':'and'
										(_cor8, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 141
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Value_UC> =
			  %% Line 142
			  call 'unicode':'characters_to_binary'
			      ([Value|[0]])
		      in  let <_cor32> =
			      %% Line 143
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor29) ->
					    case _cor29 of
					      <[%% Line 144
						ChoicesTemp|_cor28]> when 'true' ->
						  let <_cor30> =
						      call 'unicode':'characters_to_binary'
							  ([ChoicesTemp|[0]])
						  in  let <_cor31> =
							  %% Line 144
							  apply 'lc$^0'/1
							      (_cor28)
						      in  ( [_cor30|_cor31]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor29> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor29})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(%% Line 144
					 Choices)
				-| ['list_comprehension'] )
			  in  let <MOpts> =
				  %% Line 145
				  ( fun (_cor39,_cor38) ->
					case <_cor39,_cor38> of
					  <{'style',Style},Acc> when 'true' ->
					      let <_cor34> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<Style>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor34|Acc]
					  %% Line 146
					  <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor82}},Acc> when 'true' ->
					      do  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (ValidatorT,
								   'wx') ->
							    'ok'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    call ValidatorT:'parent_class'
								('wx')
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
						  let <_cor37> =
						      #{#<2>(32,1,'integer',['unsigned'|['native']]),
							#<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
						  in  [_cor37|Acc]
					  %% Line 147
					  <BadOpt,_cor83> when 'true' ->
					      call 'erlang':'error'
						  ({'badoption',BadOpt})
					end
				    -| [{'id',{0,0,'-create/8-fun-0-'}}] )
			      in  let <_cor43> =
				      %% Line 148
				      call 'lists':'foldl'
					  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
				  in  let <BinOpt> =
					  %% Line 148
					  call 'erlang':'list_to_binary'
					      (_cor43)
				      in  let <_cor70> =
					      %% Line 150
					      call 'erlang':'byte_size'
						  (Value_UC)
					  in  let <_cor65> =
						  %% Line 150
						  call 'erlang':'byte_size'
						      (Value_UC)
					      in  let <_cor66> =
						      %% Line 150
						      call 'erlang':'+'
							  (0, _cor65)
						  in  let <_cor67> =
							  %% Line 150
							  call 'erlang':'band'
							      (_cor66, 7)
						      in  let <_cor68> =
							      %% Line 150
							      call 'erlang':'-'
								  (8, _cor67)
							  in  let <_cor69> =
								  %% Line 150
								  call 'erlang':'band'
								      (_cor68, 7)
							      in  let <_cor64> =
								      %% Line 150
								      call 'erlang':'length'
									  (_cor32)
								  in  let <_cor57> =
									  primop 'bs_init_writable'
									      (256)
								      in  let <_cor63> =
									      %% Line 150
									      ( letrec
										    'lbc$^2'/2 =
											fun (_cor61,_cor60) ->
											    case <_cor61,_cor60> of
											      <[UC_Str|_cor59],_cor60> when 'true' ->
												  let <_cor62> =
												      call 'erlang':'byte_size'
													  (UC_Str)
												  in  let <_cor60> =
													  ( #{#<_cor60>('all',1,'binary',[]),
													      #<_cor62>(32,1,'integer',['unsigned'|['native']]),
													      #<UC_Str>('all',8,'binary',['unsigned'|['big']])}#
													    -| ['compiler_generated','single_use'] )
												      in  apply 'lbc$^2'/2
													      (_cor59, _cor60)
											      <[],_cor60> when 'true' ->
												  _cor60
											      ( <_cor61,_cor60> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor61,_cor60})
												      -| [{'function_name',{'lbc$^2',2}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lbc$^2'/2
											(_cor32, _cor57)
										-| ['list_comprehension'] )
									  in  let <_cor51> =
										  %% Line 150
										  ( letrec
											'lc$^1'/1 =
											    fun (_cor47) ->
												case _cor47 of
												  <[S|_cor46]> when 'true' ->
												      let <_cor48> =
													  call 'erlang':'byte_size'
													      (S)
												      in  let <_cor49> =
													      call 'erlang':'+'
														  (_cor48, 4)
													  in  let <_cor50> =
														  apply 'lc$^1'/1
														      (_cor46)
													      in  ( [_cor49|_cor50]
														    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      []
												  ( <_cor47> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_cor47})
													  -| [{'function_name',{'lc$^1',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  apply 'lc$^1'/1
											    (_cor32)
										    -| ['list_comprehension'] )
									      in  let <_cor52> =
										      %% Line 150
										      call 'lists':'sum'
											  (_cor51)
										  in  let <_cor53> =
											  %% Line 150
											  call 'erlang':'+'
											      (4, _cor52)
										      in  let <_cor54> =
											      %% Line 150
											      call 'erlang':'band'
												  (_cor53, 7)
											  in  let <_cor55> =
												  %% Line 150
												  call 'erlang':'-'
												      (8, _cor54)
											      in  let <_cor56> =
												      %% Line 150
												      call 'erlang':'band'
													  (_cor55, 7)
												  in  let <_cor71> =
													  %% Line 150
													  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
													    #<ParentRef>(32,1,'integer',['unsigned'|['native']]),
													    #<Id>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor70>(32,1,'integer',['unsigned'|['native']]),
													    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
													    #<0>(_cor69,8,'integer',['unsigned'|['big']]),
													    #<PosX>(32,1,'integer',['unsigned'|['native']]),
													    #<PosY>(32,1,'integer',['unsigned'|['native']]),
													    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
													    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor64>(32,1,'integer',['unsigned'|['native']]),
													    #<_cor63>('all',8,'binary',['unsigned'|['big']]),
													    #<0>(_cor56,8,'integer',['unsigned'|['big']]),
													    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
												      in  %% Line 149
													  call 'wxe_util':'call'
													      (1575, _cor71)
	  ( <_cor79,_cor78,_cor77,_cor76,_cor75,_cor74,_cor73,_cor72> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor79,_cor78,_cor77,_cor76,_cor75,_cor74,_cor73,_cor72})
		  -| [{'function_name',{'create',8}}] )
	    -| ['compiler_generated'] )
	end
'canCopy'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 156
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 158
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 157
		      call 'wxe_util':'call'
			  (1576, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canCopy',1}}] )
	    -| ['compiler_generated'] )
	end
'canCut'/1 =
    %% Line 163
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 164
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 166
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 165
		      call 'wxe_util':'call'
			  (1577, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canCut',1}}] )
	    -| ['compiler_generated'] )
	end
'canPaste'/1 =
    %% Line 171
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 172
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 174
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 173
		      call 'wxe_util':'call'
			  (1578, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canPaste',1}}] )
	    -| ['compiler_generated'] )
	end
'canRedo'/1 =
    %% Line 179
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 180
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 182
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 181
		      call 'wxe_util':'call'
			  (1579, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canRedo',1}}] )
	    -| ['compiler_generated'] )
	end
'canUndo'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 188
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 190
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 189
		      call 'wxe_util':'call'
			  (1580, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canUndo',1}}] )
	    -| ['compiler_generated'] )
	end
'copy'/1 =
    %% Line 195
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 196
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 198
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 197
		      call 'wxe_util':'cast'
			  (1581, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'copy',1}}] )
	    -| ['compiler_generated'] )
	end
'cut'/1 =
    %% Line 203
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 204
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 206
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 205
		      call 'wxe_util':'cast'
			  (1582, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'cut',1}}] )
	    -| ['compiler_generated'] )
	end
'getInsertionPoint'/1 =
    %% Line 211
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 212
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 214
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 213
		      call 'wxe_util':'call'
			  (1583, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getInsertionPoint',1}}] )
	    -| ['compiler_generated'] )
	end
'getLastPosition'/1 =
    %% Line 219
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 220
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 222
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 221
		      call 'wxe_util':'call'
			  (1584, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLastPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getValue'/1 =
    %% Line 227
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 228
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 230
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 229
		      call 'wxe_util':'call'
			  (1585, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getValue',1}}] )
	    -| ['compiler_generated'] )
	end
'paste'/1 =
    %% Line 235
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 238
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 237
		      call 'wxe_util':'cast'
			  (1586, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'paste',1}}] )
	    -| ['compiler_generated'] )
	end
'redo'/1 =
    %% Line 243
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 244
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 246
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 245
		      call 'wxe_util':'cast'
			  (1587, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'redo',1}}] )
	    -| ['compiler_generated'] )
	end
'replace'/4 =
    %% Line 251
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},From,To,Value>
	      when %% Line 252
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (From)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(To)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Value)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 253
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Value_UC> =
		      %% Line 254
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor16> =
			  %% Line 256
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor11> =
			      %% Line 256
			      call 'erlang':'byte_size'
				  (Value_UC)
			  in  let <_cor12> =
				  %% Line 256
				  call 'erlang':'+'
				      (0, _cor11)
			      in  let <_cor13> =
				      %% Line 256
				      call 'erlang':'band'
					  (_cor12, 7)
				  in  let <_cor14> =
					  %% Line 256
					  call 'erlang':'-'
					      (8, _cor13)
				      in  let <_cor15> =
					      %% Line 256
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor17> =
						  %% Line 256
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<From>(32,1,'integer',['unsigned'|['native']]),
						    #<To>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
						    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 255
						  call 'wxe_util':'cast'
						      (1588, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'replace',4}}] )
	    -| ['compiler_generated'] )
	end
'remove'/3 =
    %% Line 261
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},From,To>
	      when let <_cor3> =
		    %% Line 262
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor4> =
			%% Line 262
			call 'erlang':'is_integer'
			    (To)
		    in  %% Line 262
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 263
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 265
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<From>(32,1,'integer',['unsigned'|['native']]),
			#<To>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 264
		      call 'wxe_util':'cast'
			  (1589, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'remove',3}}] )
	    -| ['compiler_generated'] )
	end
'setInsertionPoint'/2 =
    %% Line 270
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 271
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 272
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 274
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 273
		      call 'wxe_util':'cast'
			  (1590, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setInsertionPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'setInsertionPointEnd'/1 =
    %% Line 279
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 280
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 282
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 281
		      call 'wxe_util':'cast'
			  (1591, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'setInsertionPointEnd',1}}] )
	    -| ['compiler_generated'] )
	end
'setSelection'/2 =
    %% Line 287
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},N>
	      when %% Line 288
		call 'erlang':'is_integer'
		    (N) ->
	      do  %% Line 289
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 291
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<N>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 290
		      call 'wxe_util':'cast'
			  (1592, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSelection',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelection'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},From,To>
	      when let <_cor3> =
		    %% Line 297
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor4> =
			%% Line 297
			call 'erlang':'is_integer'
			    (To)
		    in  %% Line 297
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 298
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 300
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<From>(32,1,'integer',['unsigned'|['native']]),
			#<To>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 299
		      call 'wxe_util':'cast'
			  (1593, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setSelection',3}}] )
	    -| ['compiler_generated'] )
	end
'setValue'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Value>
	      when %% Line 306
		call 'erlang':'is_list'
		    (Value) ->
	      do  %% Line 307
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Value_UC> =
		      %% Line 308
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor10> =
			  %% Line 310
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor5> =
			      %% Line 310
			      call 'erlang':'byte_size'
				  (Value_UC)
			  in  let <_cor6> =
				  %% Line 310
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 310
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 310
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 310
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 310
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 309
						  call 'wxe_util':'cast'
						      (1594, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setValue',2}}] )
	    -| ['compiler_generated'] )
	end
'undo'/1 =
    %% Line 315
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 316
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 318
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 317
		      call 'wxe_util':'cast'
			  (1595, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'undo',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 322
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 323
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxComboBox') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxComboBox')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 324
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 325
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setStringSelection'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'setStringSelection'
	    (_cor1, _cor0)
'setString'/3 =
    %% Line 330
    fun (_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'setString'
	    (_cor2, _cor1, _cor0)
'select'/2 =
    %% Line 332
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'select'
	    (_cor1, _cor0)
'isEmpty'/1 =
    %% Line 334
    fun (_cor0) ->
	call 'wxControlWithItems':'isEmpty'
	    (_cor0)
'insert'/4 =
    %% Line 336
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'insert'
	    (_cor3, _cor2, _cor1, _cor0)
'insert'/3 =
    %% Line 338
    fun (_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'insert'
	    (_cor2, _cor1, _cor0)
'getStringSelection'/1 =
    %% Line 340
    fun (_cor0) ->
	call 'wxControlWithItems':'getStringSelection'
	    (_cor0)
'getString'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'getString'
	    (_cor1, _cor0)
'getSelection'/1 =
    %% Line 344
    fun (_cor0) ->
	call 'wxControlWithItems':'getSelection'
	    (_cor0)
'getCount'/1 =
    %% Line 346
    fun (_cor0) ->
	call 'wxControlWithItems':'getCount'
	    (_cor0)
'setClientData'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'setClientData'
	    (_cor2, _cor1, _cor0)
'getClientData'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'getClientData'
	    (_cor1, _cor0)
'findString'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'findString'
	    (_cor2, _cor1, _cor0)
'findString'/2 =
    %% Line 354
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'findString'
	    (_cor1, _cor0)
'delete'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'delete'
	    (_cor1, _cor0)
'clear'/1 =
    %% Line 358
    fun (_cor0) ->
	call 'wxControlWithItems':'clear'
	    (_cor0)
'appendStrings'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'appendStrings'
	    (_cor1, _cor0)
'append'/3 =
    %% Line 362
    fun (_cor2,_cor1,_cor0) ->
	call 'wxControlWithItems':'append'
	    (_cor2, _cor1, _cor0)
'append'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	call 'wxControlWithItems':'append'
	    (_cor1, _cor0)
'setLabel'/2 =
    %% Line 367
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 369
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 374
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 378
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 380
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 382
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 384
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 386
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 390
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 392
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 396
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 400
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 402
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 404
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 416
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 418
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 422
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 426
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 428
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 430
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 432
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 436
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 440
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 442
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 446
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 448
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 450
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 456
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 458
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 466
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 468
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 478
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 488
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 492
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 494
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 496
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 502
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 506
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 508
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 510
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 512
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 514
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 516
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 518
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 520
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 522
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 524
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 528
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 530
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 532
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 536
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 538
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 540
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 542
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 544
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 546
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 550
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 552
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 554
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 556
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 558
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 560
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 562
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 564
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 566
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 568
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 570
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 572
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 574
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 576
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 578
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 580
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 582
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 584
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 586
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 588
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 590
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 592
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 594
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 596
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 598
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 600
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 602
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 604
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 606
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 610
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 612
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 614
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 616
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 618
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 620
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 622
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 624
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 626
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 628
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 630
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 632
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 634
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 636
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 638
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 640
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 642
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 644
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 646
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 648
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 650
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 652
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 654
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 656
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 658
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 660
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 662
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 664
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 666
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 668
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 670
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 672
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 678
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 680
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 682
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 688
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 690
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 692
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 696
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 700
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 702
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 704
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 706
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 708
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 710
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 712
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 714
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 716
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 719
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 721
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 723
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 725
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 727
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxComboBox')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxComboBox', _cor0)
end