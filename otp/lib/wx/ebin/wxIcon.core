module 'wxIcon' ['convertToImage'/1,
		 'copyFromBitmap'/2,
		 'copyFromIcon'/2,
		 'destroy'/1,
		 'getDepth'/1,
		 'getHeight'/1,
		 'getMask'/1,
		 'getPalette'/1,
		 'getSubBitmap'/2,
		 'getWidth'/1,
		 'loadFile'/2,
		 'loadFile'/3,
		 'module_info'/0,
		 'module_info'/1,
		 'new'/0,
		 'new'/1,
		 'new'/2,
		 'ok'/1,
		 'parent_class'/1,
		 'saveFile'/3,
		 'saveFile'/4,
		 'setDepth'/2,
		 'setHeight'/2,
		 'setMask'/2,
		 'setPalette'/2,
		 'setWidth'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 38
		'export_type' =
		    %% Line 38
		    [{'wxIcon',0}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'wxIcon',{'remote_type',43,[{'atom',43,'wx'}|[{'atom',43,'wx_object'}|[[]]]]},[]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',0},[{'type',45,'fun',[{'type',45,'product',[]}|[{'type',45,'wxIcon',[]}]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Filename'}]}|[{'type',56,'wxIcon',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Filename'}|[{'remote_type',57,[{'atom',57,'unicode'}|[{'atom',57,'chardata'}|[[]]]]}]]]]}]]]}|[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Loc'}]}|[{'type',58,'wxIcon',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Loc'}|[{'remote_type',59,[{'atom',59,'wx'}|[{'atom',59,'wx_object'}|[[]]]]}]]]]}]]]}]]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'new',2},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'Filename'}|[{'type',71,'list',[{'var',71,'Option'}]}]]}|[{'type',71,'wxIcon',[]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Filename'}|[{'remote_type',72,[{'atom',72,'unicode'}|[{'atom',72,'chardata'}|[[]]]]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Option'}|[{'type',73,'union',[{'type',73,'tuple',[{'atom',73,'type'}|[{'remote_type',73,[{'atom',73,'wx'}|[{'atom',73,'wx_enum'}|[[]]]]}]]}|[{'type',74,'tuple',[{'atom',74,'desiredWidth'}|[{'type',74,'integer',[]}]]}|[{'type',75,'tuple',[{'atom',75,'desiredHeight'}|[{'type',75,'integer',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'copyFromBitmap',2},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'This'}|[{'var',88,'Bmp'}]]}|[{'atom',88,'ok'}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'This'}|[{'type',89,'wxIcon',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Bmp'}|[{'remote_type',89,[{'atom',89,'wxBitmap'}|[{'atom',89,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'destroy',1},[{'type',97,'fun',[{'type',97,'product',[{'ann_type',97,[{'var',97,'This'}|[{'type',97,'wxIcon',[]}]]}]}|[{'atom',97,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 40
    fun (_cor0) ->
	case _cor0 of
	  <'wxBitmap'> when 'true' ->
	      'true'
	  %% Line 41
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxIcon'})
	end
'new'/0 =
    %% Line 46
    fun () ->
	%% Line 47
	call 'wxe_util':'construct'
	    (1053, %% Line 48
		   #{}#)
'new'/1 =
    %% Line 61
    fun (_cor0) ->
	case _cor0 of
	  <Filename>
	      when %% Line 62
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 63
	      apply 'new'/2
		  (Filename, [])
	  %% Line 64
	  <{'wx_ref',LocRef,LocT,_cor5}> when 'true' ->
	      do  %% Line 65
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (LocT,
				   'wx') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call LocT:'parent_class'
				('wx')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 67
		      #{#<LocRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 66
		      call 'wxe_util':'construct'
			  (1055, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Filename,Options>
	      when let <_cor2> =
		    %% Line 77
		    call 'erlang':'is_list'
			(Filename)
		in  let <_cor3> =
			%% Line 77
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 77
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Filename_UC> =
		  %% Line 78
		  call 'unicode':'characters_to_binary'
		      ([Filename|[0]])
	      in  let <MOpts> =
		      %% Line 79
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'type',Type},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Type>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 80
			      <{'desiredWidth',DesiredWidth},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<DesiredWidth>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			      %% Line 81
			      <{'desiredHeight',DesiredHeight},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<DesiredHeight>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 82
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 83
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 83
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor20> =
				  %% Line 85
				  call 'erlang':'byte_size'
				      (Filename_UC)
			      in  let <_cor15> =
				      %% Line 85
				      call 'erlang':'byte_size'
					  (Filename_UC)
				  in  let <_cor16> =
					  %% Line 85
					  call 'erlang':'+'
					      (4, _cor15)
				      in  let <_cor17> =
					      %% Line 85
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor18> =
						  %% Line 85
						  call 'erlang':'-'
						      (8, _cor17)
					      in  let <_cor19> =
						      %% Line 85
						      call 'erlang':'band'
							  (_cor18, 7)
						  in  let <_cor21> =
							  %% Line 85
							  #{#<_cor20>(32,1,'integer',['unsigned'|['native']]),
							    #<Filename_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor19,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 84
							  call 'wxe_util':'construct'
							      (1054, _cor21)
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'copyFromBitmap'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BmpRef,BmpT,_cor10}> when 'true' ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 92
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 94
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BmpRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 93
			  call 'wxe_util':'cast'
			      (1056, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'copyFromBitmap',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 98
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 100
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 101
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setWidth'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setWidth'
	    (_cor1, _cor0)
'setPalette'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setPalette'
	    (_cor1, _cor0)
'setMask'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setMask'
	    (_cor1, _cor0)
'setHeight'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setHeight'
	    (_cor1, _cor0)
'setDepth'/2 =
    %% Line 112
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setDepth'
	    (_cor1, _cor0)
'saveFile'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'saveFile'
	    (_cor3, _cor2, _cor1, _cor0)
'saveFile'/3 =
    %% Line 116
    fun (_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'saveFile'
	    (_cor2, _cor1, _cor0)
'ok'/1 =
    %% Line 118
    fun (_cor0) ->
	call 'wxBitmap':'ok'
	    (_cor0)
'loadFile'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'loadFile'
	    (_cor2, _cor1, _cor0)
'loadFile'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'loadFile'
	    (_cor1, _cor0)
'getSubBitmap'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'getSubBitmap'
	    (_cor1, _cor0)
'getWidth'/1 =
    %% Line 126
    fun (_cor0) ->
	call 'wxBitmap':'getWidth'
	    (_cor0)
'getMask'/1 =
    %% Line 128
    fun (_cor0) ->
	call 'wxBitmap':'getMask'
	    (_cor0)
'getPalette'/1 =
    %% Line 130
    fun (_cor0) ->
	call 'wxBitmap':'getPalette'
	    (_cor0)
'getHeight'/1 =
    %% Line 132
    fun (_cor0) ->
	call 'wxBitmap':'getHeight'
	    (_cor0)
'getDepth'/1 =
    %% Line 134
    fun (_cor0) ->
	call 'wxBitmap':'getDepth'
	    (_cor0)
'copyFromIcon'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'copyFromIcon'
	    (_cor1, _cor0)
'convertToImage'/1 =
    %% Line 138
    fun (_cor0) ->
	call 'wxBitmap':'convertToImage'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxIcon')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxIcon', _cor0)
end