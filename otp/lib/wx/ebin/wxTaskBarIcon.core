module 'wxTaskBarIcon' ['connect'/2,
			'connect'/3,
			'destroy'/1,
			'disconnect'/1,
			'disconnect'/2,
			'disconnect'/3,
			'module_info'/0,
			'module_info'/1,
			'new'/0,
			'parent_class'/1,
			'popupMenu'/2,
			'removeIcon'/1,
			'setIcon'/2,
			'setIcon'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxTaskBarIcon',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxTaskBarIcon',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'new',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxTaskBarIcon',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'popupMenu',2},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'This'}|[{'var',48,'Menu'}]]}|[{'type',48,'boolean',[]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'This'}|[{'type',49,'wxTaskBarIcon',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Menu'}|[{'remote_type',49,[{'atom',49,'wxMenu'}|[{'atom',49,'wxMenu'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'removeIcon',1},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'This'}]}|[{'type',57,'boolean',[]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'This'}|[{'type',58,'wxTaskBarIcon',[]}]]]]}]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'setIcon',2},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'This'}|[{'var',65,'Icon'}]]}|[{'type',65,'boolean',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'This'}|[{'type',66,'wxTaskBarIcon',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Icon'}|[{'remote_type',66,[{'atom',66,'wxIcon'}|[{'atom',66,'wxIcon'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'setIcon',3},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'This'}|[{'var',73,'Icon'}|[{'type',73,'list',[{'var',73,'Option'}]}]]]}|[{'type',73,'boolean',[]}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'This'}|[{'type',74,'wxTaskBarIcon',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Icon'}|[{'remote_type',74,[{'atom',74,'wxIcon'}|[{'atom',74,'wxIcon'}|[[]]]]}]]]]}|[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Option'}|[{'type',75,'tuple',[{'atom',75,'tooltip'}|[{'remote_type',75,[{'atom',75,'unicode'}|[{'atom',75,'chardata'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'destroy',1},[{'type',87,'fun',[{'type',87,'product',[{'ann_type',87,[{'var',87,'This'}|[{'type',87,'wxTaskBarIcon',[]}]]}]}|[{'atom',87,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 38
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxTaskBarIcon'})
	end
'new'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'wxe_util':'construct'
	    (3523, %% Line 45
		   #{}#)
'popupMenu'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',MenuRef,MenuT,_cor10}> when 'true' ->
	      do  %% Line 51
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTaskBarIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTaskBarIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 52
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MenuT,
				       'wxMenu') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MenuT:'parent_class'
				    ('wxMenu')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 54
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MenuRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 53
			  call 'wxe_util':'call'
			      (3525, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'popupMenu',2}}] )
	    -| ['compiler_generated'] )
	end
'removeIcon'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 60
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTaskBarIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTaskBarIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 62
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 61
		      call 'wxe_util':'call'
			  (3526, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'removeIcon',1}}] )
	    -| ['compiler_generated'] )
	end
'setIcon'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Icon = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 70
	      apply 'setIcon'/3
		  (This, Icon, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'setIcon',2}}] )
	    -| ['compiler_generated'] )
	end
'setIcon'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},{'wx_ref',IconRef,IconT,_cor27},Options>
	      when %% Line 77
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 78
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTaskBarIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTaskBarIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 79
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (IconT,
				       'wxIcon') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call IconT:'parent_class'
				    ('wxIcon')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 80
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'tooltip',Tooltip},Acc> when 'true' ->
				      let <Tooltip_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Tooltip|[0]])
				      in  let <_cor13> =
					      call 'erlang':'byte_size'
						  (Tooltip_UC)
					  in  let <_cor8> =
						  call 'erlang':'byte_size'
						      (Tooltip_UC)
					      in  let <_cor9> =
						      call 'erlang':'+'
							  (0, _cor8)
						  in  let <_cor10> =
							  call 'erlang':'band'
							      (_cor9, 7)
						      in  let <_cor11> =
							      call 'erlang':'-'
								  (8, _cor10)
							  in  let <_cor12> =
								  call 'erlang':'band'
								      (_cor11, 7)
							      in  let <_cor14> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor13>(32,1,'integer',['unsigned'|['native']]),
									#<Tooltip_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
								  in  [_cor14|Acc]
				  %% Line 81
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setIcon/3-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 82
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 82
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor22> =
				      %% Line 84
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<IconRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 83
				      call 'wxe_util':'call'
					  (3527, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'setIcon',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 89
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxTaskBarIcon') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxTaskBarIcon')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 90
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 91
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'disconnect'/3 =
    %% Line 94
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 98
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxTaskBarIcon')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxTaskBarIcon', _cor0)
end