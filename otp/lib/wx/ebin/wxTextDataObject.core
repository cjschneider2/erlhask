module 'wxTextDataObject' ['destroy'/1,
			   'getText'/1,
			   'getTextLength'/1,
			   'module_info'/0,
			   'module_info'/1,
			   'new'/0,
			   'new'/1,
			   'parent_class'/1,
			   'setText'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxTextDataObject',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxTextDataObject',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'new',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxTextDataObject',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'new',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'type',48,'list',[{'var',48,'Option'}]}]}|[{'type',48,'wxTextDataObject',[]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Option'}|[{'type',49,'tuple',[{'atom',49,'text'}|[{'remote_type',49,[{'atom',49,'unicode'}|[{'atom',49,'chardata'}|[[]]]]}]]}]]]]}]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'getTextLength',1},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'This'}]}|[{'type',59,'integer',[]}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'This'}|[{'type',60,'wxTextDataObject',[]}]]]]}]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'getText',1},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'This'}]}|[{'remote_type',67,[{'atom',67,'unicode'}|[{'atom',67,'charlist'}|[[]]]]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'This'}|[{'type',68,'wxTextDataObject',[]}]]]]}]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'setText',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'This'}|[{'var',75,'Text'}]]}|[{'atom',75,'ok'}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'This'}|[{'type',76,'wxTextDataObject',[]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Text'}|[{'remote_type',76,[{'atom',76,'unicode'}|[{'atom',76,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'destroy',1},[{'type',85,'fun',[{'type',85,'product',[{'ann_type',85,[{'var',85,'This'}|[{'type',85,'wxTextDataObject',[]}]]}]}|[{'atom',85,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	case _cor0 of
	  <'wxDataObject'> when 'true' ->
	      'true'
	  %% Line 38
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxTextDataObject'})
	end
'new'/0 =
    %% Line 44
    fun () ->
	%% Line 45
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 51
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 52
		  ( fun (_cor10,_cor9) ->
			case <_cor10,_cor9> of
			  <{'text',Text},Acc> when 'true' ->
			      let <Text_UC> =
				  call 'unicode':'characters_to_binary'
				      ([Text|[0]])
			      in  let <_cor7> =
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor2> =
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor3> =
					      call 'erlang':'+'
						  (0, _cor2)
					  in  let <_cor4> =
						  call 'erlang':'band'
						      (_cor3, 7)
					      in  let <_cor5> =
						      call 'erlang':'-'
							  (8, _cor4)
						  in  let <_cor6> =
							  call 'erlang':'band'
							      (_cor5, 7)
						      in  let <_cor8> =
							      #{#<1>(32,1,'integer',['unsigned'|['native']]),
								#<_cor7>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
							  in  [_cor8|Acc]
			  %% Line 53
			  <BadOpt,_cor18> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor14> =
		      %% Line 54
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 54
			  call 'erlang':'list_to_binary'
			      (_cor14)
		      in  let <_cor16> =
			      %% Line 56
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 55
			      call 'wxe_util':'construct'
				  (3413, _cor16)
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextLength'/1 =
    %% Line 61
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 62
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 64
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 63
		      call 'wxe_util':'call'
			  (3414, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextLength',1}}] )
	    -| ['compiler_generated'] )
	end
'getText'/1 =
    %% Line 69
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 70
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 72
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 71
		      call 'wxe_util':'call'
			  (3415, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getText',1}}] )
	    -| ['compiler_generated'] )
	end
'setText'/2 =
    %% Line 77
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 78
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 79
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 80
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 82
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 82
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 82
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 82
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 82
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 82
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 82
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 81
						  call 'wxe_util':'cast'
						      (3416, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setText',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 87
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxTextDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxTextDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 88
		      call 'wxe_util':'destroy'
			  (3417, Obj)
		      %% Line 89
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxTextDataObject')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxTextDataObject', _cor0)
end