module 'wxImageList' ['add'/2,
		      'add'/3,
		      'create'/3,
		      'create'/4,
		      'destroy'/1,
		      'draw'/5,
		      'draw'/6,
		      'getBitmap'/2,
		      'getIcon'/2,
		      'getImageCount'/1,
		      'getSize'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'new'/0,
		      'new'/2,
		      'new'/3,
		      'parent_class'/1,
		      'remove'/2,
		      'removeAll'/1,
		      'replace'/3,
		      'replace'/4]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 34
		'export_type' =
		    %% Line 34
		    [{'wxImageList',0}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxImageList',{'remote_type',38,[{'atom',38,'wx'}|[{'atom',38,'wx_object'}|[[]]]]},[]}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'new',0},[{'type',40,'fun',[{'type',40,'product',[]}|[{'type',40,'wxImageList',[]}]]}]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'new',2},[{'type',46,'bounded_fun',[{'type',46,'fun',[{'type',46,'product',[{'var',46,'Width'}|[{'var',46,'Height'}]]}|[{'type',46,'wxImageList',[]}]]}|[[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Width'}|[{'type',47,'integer',[]}]]]]}|[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Height'}|[{'type',47,'integer',[]}]]]]}]]]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'new',3},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Width'}|[{'var',54,'Height'}|[{'type',54,'list',[{'var',54,'Option'}]}]]]}|[{'type',54,'wxImageList',[]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Width'}|[{'type',55,'integer',[]}]]]]}|[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Height'}|[{'type',55,'integer',[]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Option'}|[{'type',56,'union',[{'type',56,'tuple',[{'atom',56,'mask'}|[{'type',56,'boolean',[]}]]}|[{'type',57,'tuple',[{'atom',57,'initialCount'}|[{'type',57,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'add',2},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'This'}|[{'var',68,'Bitmap'}]]}|[{'type',68,'integer',[]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'This'}|[{'type',69,'wxImageList',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Bitmap'}|[{'remote_type',69,[{'atom',69,'wxBitmap'}|[{'atom',69,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'add',3},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'This'}|[{'var',81,'Bitmap'}|[{'var',81,'Mask'}]]]}|[{'type',81,'integer',[]}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'This'}|[{'type',82,'wxImageList',[]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Bitmap'}|[{'remote_type',82,[{'atom',82,'wxBitmap'}|[{'atom',82,'wxBitmap'}|[[]]]]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Mask'}|[{'remote_type',82,[{'atom',82,'wxBitmap'}|[{'atom',82,'wxBitmap'}|[[]]]]}]]]]}]]]]]}|[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'This'}|[{'var',83,'Bitmap'}|[{'var',83,'MaskColour'}]]]}|[{'type',83,'integer',[]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'This'}|[{'type',84,'wxImageList',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Bitmap'}|[{'remote_type',84,[{'atom',84,'wxBitmap'}|[{'atom',84,'wxBitmap'}|[[]]]]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'MaskColour'}|[{'remote_type',84,[{'atom',84,'wx'}|[{'atom',84,'wx_colour'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'create',3},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'This'}|[{'var',99,'Width'}|[{'var',99,'Height'}]]]}|[{'type',99,'boolean',[]}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'This'}|[{'type',100,'wxImageList',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Width'}|[{'type',100,'integer',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Height'}|[{'type',100,'integer',[]}]]]]}]]]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'create',4},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'This'}|[{'var',107,'Width'}|[{'var',107,'Height'}|[{'type',107,'list',[{'var',107,'Option'}]}]]]]}|[{'type',107,'boolean',[]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'This'}|[{'type',108,'wxImageList',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Width'}|[{'type',108,'integer',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Height'}|[{'type',108,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Option'}|[{'type',109,'union',[{'type',109,'tuple',[{'atom',109,'mask'}|[{'type',109,'boolean',[]}]]}|[{'type',110,'tuple',[{'atom',110,'initialCount'}|[{'type',110,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'draw',5},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'This'}|[{'var',122,'Index'}|[{'var',122,'Dc'}|[{'var',122,'X'}|[{'var',122,'Y'}]]]]]}|[{'type',122,'boolean',[]}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'This'}|[{'type',123,'wxImageList',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Index'}|[{'type',123,'integer',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Dc'}|[{'remote_type',123,[{'atom',123,'wxDC'}|[{'atom',123,'wxDC'}|[[]]]]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'X'}|[{'type',123,'integer',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Y'}|[{'type',123,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'draw',6},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'This'}|[{'var',130,'Index'}|[{'var',130,'Dc'}|[{'var',130,'X'}|[{'var',130,'Y'}|[{'type',130,'list',[{'var',130,'Option'}]}]]]]]]}|[{'type',130,'boolean',[]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'This'}|[{'type',131,'wxImageList',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Index'}|[{'type',131,'integer',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Dc'}|[{'remote_type',131,[{'atom',131,'wxDC'}|[{'atom',131,'wxDC'}|[[]]]]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'X'}|[{'type',131,'integer',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Y'}|[{'type',131,'integer',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Option'}|[{'type',132,'union',[{'type',132,'tuple',[{'atom',132,'flags'}|[{'type',132,'integer',[]}]]}|[{'type',133,'tuple',[{'atom',133,'solidBackground'}|[{'type',133,'boolean',[]}]]}]]}]]]]}]]]]]]]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'getBitmap',2},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'This'}|[{'var',146,'Index'}]]}|[{'remote_type',146,[{'atom',146,'wxBitmap'}|[{'atom',146,'wxBitmap'}|[[]]]]}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'This'}|[{'type',147,'wxImageList',[]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Index'}|[{'type',147,'integer',[]}]]]]}]]]]}]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'getIcon',2},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'This'}|[{'var',155,'Index'}]]}|[{'remote_type',155,[{'atom',155,'wxIcon'}|[{'atom',155,'wxIcon'}|[[]]]]}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'This'}|[{'type',156,'wxImageList',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Index'}|[{'type',156,'integer',[]}]]]]}]]]]}]}],
		%% Line 164
		'spec' =
		    %% Line 164
		    [{{'getImageCount',1},[{'type',164,'bounded_fun',[{'type',164,'fun',[{'type',164,'product',[{'var',164,'This'}]}|[{'type',164,'integer',[]}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'This'}|[{'type',165,'wxImageList',[]}]]]]}]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'getSize',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'This'}|[{'var',172,'Index'}]]}|[{'var',172,'Result'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Result'}|[{'type',173,'tuple',[{'ann_type',173,[{'var',173,'Res'}|[{'type',173,'boolean',[]}]]}|[{'ann_type',173,[{'var',173,'Width'}|[{'type',173,'integer',[]}]]}|[{'ann_type',173,[{'var',173,'Height'}|[{'type',173,'integer',[]}]]}]]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxImageList',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Index'}|[{'type',174,'integer',[]}]]]]}]]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'remove',2},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}|[{'var',182,'Index'}]]}|[{'type',182,'boolean',[]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxImageList',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Index'}|[{'type',183,'integer',[]}]]]]}]]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'removeAll',1},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'This'}]}|[{'type',191,'boolean',[]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'This'}|[{'type',192,'wxImageList',[]}]]]]}]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'replace',3},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'This'}|[{'var',199,'Index'}|[{'var',199,'Bitmap'}]]]}|[{'type',199,'boolean',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'This'}|[{'type',200,'wxImageList',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Index'}|[{'type',200,'integer',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Bitmap'}|[{'remote_type',200,[{'atom',200,'wxBitmap'}|[{'atom',200,'wxBitmap'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'replace',4},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'This'}|[{'var',209,'Index'}|[{'var',209,'Bitmap'}|[{'var',209,'Mask'}]]]]}|[{'type',209,'boolean',[]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'This'}|[{'type',210,'wxImageList',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Index'}|[{'type',210,'integer',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Bitmap'}|[{'remote_type',210,[{'atom',210,'wxBitmap'}|[{'atom',210,'wxBitmap'}|[[]]]]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Mask'}|[{'remote_type',210,[{'atom',210,'wxBitmap'}|[{'atom',210,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'destroy',1},[{'type',220,'fun',[{'type',220,'product',[{'ann_type',220,[{'var',220,'This'}|[{'type',220,'wxImageList',[]}]]}]}|[{'atom',220,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 36
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxImageList'})
'new'/0 =
    %% Line 41
    fun () ->
	%% Line 42
	call 'wxe_util':'construct'
	    (1770, %% Line 43
		   #{}#)
'new'/2 =
    %% Line 49
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Width,Height>
	      when let <_cor2> =
		    %% Line 50
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor3> =
			%% Line 50
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 50
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 51
	      apply 'new'/3
		  (Width, Height, [])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 58
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Width,Height,Options>
	      when %% Line 59
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <MOpts> =
		  %% Line 60
		  ( fun (_cor11,_cor10) ->
			case <_cor11,_cor10> of
			  <{'mask',Mask},Acc> when 'true' ->
			      let <_cor7> =
				  call 'wxe_util':'from_bool'
				      (Mask)
			      in  let <_cor8> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			  %% Line 61
			  <{'initialCount',InitialCount},Acc> when 'true' ->
			      let <_cor9> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<InitialCount>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor9|Acc]
			  %% Line 62
			  <BadOpt,_cor21> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/3-fun-0-'}}] )
	      in  let <_cor15> =
		      %% Line 63
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 63
			  call 'erlang':'list_to_binary'
			      (_cor15)
		      in  let <_cor17> =
			      %% Line 65
			      #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				#<Height>(32,1,'integer',['unsigned'|['native']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 64
			      call 'wxe_util':'construct'
				  (1771, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BitmapRef,BitmapT,_cor10}> when 'true' ->
	      do  %% Line 71
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 72
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 74
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BitmapRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 73
			  call 'wxe_util':'call'
			      (1772, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'add',2}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 85
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',BitmapRef,BitmapT,_cor24},{'wx_ref',MaskRef,MaskT,_cor25}> when 'true' ->
	      do  %% Line 86
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 87
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 88
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (MaskT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call MaskT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_cor9> =
			      %% Line 90
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
				#<MaskRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 89
			      call 'wxe_util':'call'
				  (1773, _cor9)
	  %% Line 91
	  <{'wx_ref',ThisRef,ThisT,_cor26},{'wx_ref',BitmapRef,BitmapT,_cor27},MaskColour>
	      when let <_cor11> =
		    %% Line 92
		    try
			let <_cor10> =
			    call 'erlang':'tuple_size'
				(MaskColour)
			in  call 'erlang':'=:='
				(_cor10, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor13> =
			%% Line 92
			try
			    let <_cor12> =
				call 'erlang':'tuple_size'
				    (MaskColour)
			    in  call 'erlang':'=:='
				    (_cor12, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 92
			call 'erlang':'or'
			    (_cor11, _cor13) ->
	      do  %% Line 93
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 94
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor18> =
			  %% Line 96
			  call 'wxe_util':'colour_bin'
			      (MaskColour)
		      in  let <_cor19> =
			      %% Line 96
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
				#<_cor18>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 95
			      call 'wxe_util':'call'
				  (1774, _cor19)
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 102
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 103
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 103
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 103
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 104
	      apply 'create'/4
		  (This, Width, Height, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/4 =
    %% Line 111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor25},Width,Height,Options>
	      when %% Line 112
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 113
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 114
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'mask',Mask},Acc> when 'true' ->
				  let <_cor10> =
				      call 'wxe_util':'from_bool'
					  (Mask)
				  in  let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor10>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
			      %% Line 115
			      <{'initialCount',InitialCount},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<InitialCount>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 116
			      <BadOpt,_cor26> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-create/4-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 117
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 117
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 119
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 118
				  call 'wxe_util':'call'
				      (1775, _cor20)
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'draw'/5 =
    %% Line 125
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor16,_cor17,_cor18},Index,Dc = {'wx_ref',_cor19,_cor20,_cor21},X,Y>
	      when %% Line 126
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (Index)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (X)
			  in  let <_cor7> =
				  call 'erlang':'is_integer'
				      (Y)
			      in  let <_cor8> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor6, _cor7)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor8)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 127
	      apply 'draw'/6
		  (This, Index, Dc, X, Y, [])
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'draw',5}}] )
	    -| ['compiler_generated'] )
	end
'draw'/6 =
    %% Line 134
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},Index,{'wx_ref',DcRef,DcT,_cor34},X,Y,Options>
	      when %% Line 135
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(X)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (Y)
			    in  let <_cor9> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 136
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 137
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DcT,
				       'wxDC') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DcT:'parent_class'
				    ('wxDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 138
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'flags',Flags},Acc> when 'true' ->
				      let <_cor16> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Flags>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor16|Acc]
				  %% Line 139
				  <{'solidBackground',SolidBackground},Acc> when 'true' ->
				      let <_cor17> =
					  call 'wxe_util':'from_bool'
					      (SolidBackground)
				      in  let <_cor18> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<_cor17>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor18|Acc]
				  %% Line 140
				  <BadOpt,_cor35> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-draw/6-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 141
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 141
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor26> =
				      %% Line 143
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<Index>(32,1,'integer',['unsigned'|['native']]),
					#<DcRef>(32,1,'integer',['unsigned'|['native']]),
					#<X>(32,1,'integer',['unsigned'|['native']]),
					#<Y>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 142
				      call 'wxe_util':'call'
					  (1777, _cor26)
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'draw',6}}] )
	    -| ['compiler_generated'] )
	end
'getBitmap'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Index>
	      when %% Line 149
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 150
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 152
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 151
		      call 'wxe_util':'call'
			  (1778, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getBitmap',2}}] )
	    -| ['compiler_generated'] )
	end
'getIcon'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Index>
	      when %% Line 158
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 159
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 161
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 160
		      call 'wxe_util':'call'
			  (1779, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getIcon',2}}] )
	    -| ['compiler_generated'] )
	end
'getImageCount'/1 =
    %% Line 166
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 167
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 169
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 168
		      call 'wxe_util':'call'
			  (1780, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getImageCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getSize'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Index>
	      when %% Line 176
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 179
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 178
		      call 'wxe_util':'call'
			  (1781, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getSize',2}}] )
	    -| ['compiler_generated'] )
	end
'remove'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Index>
	      when %% Line 185
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 186
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 188
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 187
		      call 'wxe_util':'call'
			  (1782, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'remove',2}}] )
	    -| ['compiler_generated'] )
	end
'removeAll'/1 =
    %% Line 193
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 194
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 196
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 195
		      call 'wxe_util':'call'
			  (1783, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'removeAll',1}}] )
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 201
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Index,{'wx_ref',BitmapRef,BitmapT,_cor12}>
	      when %% Line 202
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 203
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 204
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 206
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Index>(32,1,'integer',['unsigned'|['native']]),
			    #<BitmapRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 205
			  call 'wxe_util':'call'
			      (1784, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'replace',3}}] )
	    -| ['compiler_generated'] )
	end
'replace'/4 =
    %% Line 211
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Index,{'wx_ref',BitmapRef,BitmapT,_cor16},{'wx_ref',MaskRef,MaskT,_cor17}>
	      when %% Line 212
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 213
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 214
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 215
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (MaskT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call MaskT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_cor10> =
			      %% Line 217
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<Index>(32,1,'integer',['unsigned'|['native']]),
				#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
				#<MaskRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 216
			      call 'wxe_util':'call'
				  (1785, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'replace',4}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 221
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 222
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxImageList') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxImageList')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 223
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 224
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxImageList')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxImageList', _cor0)
end