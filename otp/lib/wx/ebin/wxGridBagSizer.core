module 'wxGridBagSizer' ['add'/2,
			 'add'/3,
			 'add'/4,
			 'add'/5,
			 'addGrowableCol'/2,
			 'addGrowableCol'/3,
			 'addGrowableRow'/2,
			 'addGrowableRow'/3,
			 'addSpacer'/2,
			 'addStretchSpacer'/1,
			 'addStretchSpacer'/2,
			 'calcMin'/1,
			 'checkForIntersection'/2,
			 'checkForIntersection'/3,
			 'checkForIntersection'/4,
			 'clear'/1,
			 'clear'/2,
			 'destroy'/1,
			 'detach'/2,
			 'findItem'/2,
			 'findItemAtPoint'/2,
			 'findItemAtPosition'/2,
			 'findItemWithData'/2,
			 'fit'/2,
			 'fitInside'/2,
			 'getCellSize'/3,
			 'getChildren'/1,
			 'getCols'/1,
			 'getEmptyCellSize'/1,
			 'getFlexibleDirection'/1,
			 'getHGap'/1,
			 'getItem'/2,
			 'getItem'/3,
			 'getItemPosition'/2,
			 'getItemSpan'/2,
			 'getMinSize'/1,
			 'getNonFlexibleGrowMode'/1,
			 'getPosition'/1,
			 'getRows'/1,
			 'getSize'/1,
			 'getVGap'/1,
			 'hide'/2,
			 'hide'/3,
			 'insert'/3,
			 'insert'/4,
			 'insert'/5,
			 'insertSpacer'/3,
			 'insertStretchSpacer'/2,
			 'insertStretchSpacer'/3,
			 'isShown'/2,
			 'layout'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'new'/0,
			 'new'/1,
			 'parent_class'/1,
			 'prepend'/2,
			 'prepend'/3,
			 'prepend'/4,
			 'prependSpacer'/2,
			 'prependStretchSpacer'/1,
			 'prependStretchSpacer'/2,
			 'recalcSizes'/1,
			 'remove'/2,
			 'removeGrowableCol'/2,
			 'removeGrowableRow'/2,
			 'replace'/3,
			 'replace'/4,
			 'setCols'/2,
			 'setDimension'/5,
			 'setEmptyCellSize'/2,
			 'setFlexibleDirection'/2,
			 'setHGap'/2,
			 'setItemMinSize'/3,
			 'setItemMinSize'/4,
			 'setItemPosition'/3,
			 'setItemSpan'/3,
			 'setMinSize'/2,
			 'setMinSize'/3,
			 'setNonFlexibleGrowMode'/2,
			 'setRows'/2,
			 'setSizeHints'/2,
			 'setVGap'/2,
			 'setVirtualSizeHints'/2,
			 'show'/2,
			 'show'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 51
		'export_type' =
		    %% Line 51
		    [{'wxGridBagSizer',0}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxGridBagSizer',{'remote_type',58,[{'atom',58,'wx'}|[{'atom',58,'wx_object'}|[[]]]]},[]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'new',0},[{'type',60,'fun',[{'type',60,'product',[]}|[{'type',60,'wxGridBagSizer',[]}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'new',1},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'type',66,'list',[{'var',66,'Option'}]}]}|[{'type',66,'wxGridBagSizer',[]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Option'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'vgap'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'hgap'}|[{'type',68,'integer',[]}]]}]]}]]]]}]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'add',2},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'This'}|[{'var',79,'Item'}]]}|[{'remote_type',79,[{'atom',79,'wxSizerItem'}|[{'atom',79,'wxSizerItem'}|[[]]]]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'This'}|[{'type',80,'wxGridBagSizer',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Item'}|[{'type',80,'union',[{'remote_type',80,[{'atom',80,'wxSizerItem'}|[{'atom',80,'wxSizerItem'}|[[]]]]}|[{'remote_type',80,[{'atom',80,'wxGBSizerItem'}|[{'atom',80,'wxGBSizerItem'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'add',3},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'This'}|[{'var',103,'Width'}|[{'var',103,'Height'}]]]}|[{'remote_type',103,[{'atom',103,'wxSizerItem'}|[{'atom',103,'wxSizerItem'}|[[]]]]}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'This'}|[{'type',104,'wxGridBagSizer',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Width'}|[{'type',104,'integer',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Height'}|[{'type',104,'integer',[]}]]]]}]]]]]}|[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'This'}|[{'var',105,'Window'}|[{'var',105,'Pos'}]]]}|[{'remote_type',105,[{'atom',105,'wxSizerItem'}|[{'atom',105,'wxSizerItem'}|[[]]]]}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'This'}|[{'type',106,'wxGridBagSizer',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Window'}|[{'type',106,'union',[{'remote_type',106,[{'atom',106,'wxWindow'}|[{'atom',106,'wxWindow'}|[[]]]]}|[{'remote_type',106,[{'atom',106,'wxSizer'}|[{'atom',106,'wxSizer'}|[[]]]]}]]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Pos'}|[{'type',106,'tuple',[{'ann_type',106,[{'var',106,'R'}|[{'type',106,'integer',[]}]]}|[{'ann_type',106,[{'var',106,'C'}|[{'type',106,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'This'}|[{'var',107,'Window'}|[{'type',107,'list',[{'var',107,'Option'}]}]]]}|[{'remote_type',107,[{'atom',107,'wxSizerItem'}|[{'atom',107,'wxSizerItem'}|[[]]]]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'This'}|[{'type',108,'wxGridBagSizer',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Window'}|[{'type',108,'union',[{'remote_type',108,[{'atom',108,'wxWindow'}|[{'atom',108,'wxWindow'}|[[]]]]}|[{'remote_type',108,[{'atom',108,'wxSizer'}|[{'atom',108,'wxSizer'}|[[]]]]}]]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Option'}|[{'type',109,'union',[{'type',109,'tuple',[{'atom',109,'proportion'}|[{'type',109,'integer',[]}]]}|[{'type',110,'tuple',[{'atom',110,'flag'}|[{'type',110,'integer',[]}]]}|[{'type',111,'tuple',[{'atom',111,'border'}|[{'type',111,'integer',[]}]]}|[{'type',112,'tuple',[{'atom',112,'userData'}|[{'remote_type',112,[{'atom',112,'wx'}|[{'atom',112,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]}]]]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'add',4},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}|[{'var',154,'Width'}|[{'var',154,'Height'}|[{'var',154,'Pos'}]]]]}|[{'remote_type',154,[{'atom',154,'wxSizerItem'}|[{'atom',154,'wxSizerItem'}|[[]]]]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxGridBagSizer',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Width'}|[{'type',155,'integer',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Height'}|[{'type',155,'integer',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Pos'}|[{'type',155,'tuple',[{'ann_type',155,[{'var',155,'R'}|[{'type',155,'integer',[]}]]}|[{'ann_type',155,[{'var',155,'C'}|[{'type',155,'integer',[]}]]}]]}]]]]}]]]]]]}|[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'var',156,'Width'}|[{'var',156,'Height'}|[{'type',156,'list',[{'var',156,'Option'}]}]]]]}|[{'remote_type',156,[{'atom',156,'wxSizerItem'}|[{'atom',156,'wxSizerItem'}|[[]]]]}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxGridBagSizer',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Width'}|[{'type',157,'integer',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Height'}|[{'type',157,'integer',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Option'}|[{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'proportion'}|[{'type',158,'integer',[]}]]}|[{'type',159,'tuple',[{'atom',159,'flag'}|[{'type',159,'integer',[]}]]}|[{'type',160,'tuple',[{'atom',160,'border'}|[{'type',160,'integer',[]}]]}|[{'type',161,'tuple',[{'atom',161,'userData'}|[{'remote_type',161,[{'atom',161,'wx'}|[{'atom',161,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]}|[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'This'}|[{'var',162,'Window'}|[{'var',162,'Pos'}|[{'type',162,'list',[{'var',162,'Option'}]}]]]]}|[{'remote_type',162,[{'atom',162,'wxSizerItem'}|[{'atom',162,'wxSizerItem'}|[[]]]]}]]}|[[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'This'}|[{'type',163,'wxGridBagSizer',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Window'}|[{'type',163,'union',[{'remote_type',163,[{'atom',163,'wxWindow'}|[{'atom',163,'wxWindow'}|[[]]]]}|[{'remote_type',163,[{'atom',163,'wxSizer'}|[{'atom',163,'wxSizer'}|[[]]]]}]]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Pos'}|[{'type',163,'tuple',[{'ann_type',163,[{'var',163,'R'}|[{'type',163,'integer',[]}]]}|[{'ann_type',163,[{'var',163,'C'}|[{'type',163,'integer',[]}]]}]]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Option'}|[{'type',164,'union',[{'type',164,'tuple',[{'atom',164,'span'}|[{'type',164,'tuple',[{'ann_type',164,[{'var',164,'RS'}|[{'type',164,'integer',[]}]]}|[{'ann_type',164,[{'var',164,'CS'}|[{'type',164,'integer',[]}]]}]]}]]}|[{'type',165,'tuple',[{'atom',165,'flag'}|[{'type',165,'integer',[]}]]}|[{'type',166,'tuple',[{'atom',166,'border'}|[{'type',166,'integer',[]}]]}|[{'type',167,'tuple',[{'atom',167,'userData'}|[{'remote_type',167,[{'atom',167,'wx'}|[{'atom',167,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]}]]]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'add',5},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'This'}|[{'var',202,'Width'}|[{'var',202,'Height'}|[{'var',202,'Pos'}|[{'type',202,'list',[{'var',202,'Option'}]}]]]]]}|[{'remote_type',202,[{'atom',202,'wxSizerItem'}|[{'atom',202,'wxSizerItem'}|[[]]]]}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'This'}|[{'type',203,'wxGridBagSizer',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Width'}|[{'type',203,'integer',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Height'}|[{'type',203,'integer',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Pos'}|[{'type',203,'tuple',[{'ann_type',203,[{'var',203,'R'}|[{'type',203,'integer',[]}]]}|[{'ann_type',203,[{'var',203,'C'}|[{'type',203,'integer',[]}]]}]]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Option'}|[{'type',204,'union',[{'type',204,'tuple',[{'atom',204,'span'}|[{'type',204,'tuple',[{'ann_type',204,[{'var',204,'RS'}|[{'type',204,'integer',[]}]]}|[{'ann_type',204,[{'var',204,'CS'}|[{'type',204,'integer',[]}]]}]]}]]}|[{'type',205,'tuple',[{'atom',205,'flag'}|[{'type',205,'integer',[]}]]}|[{'type',206,'tuple',[{'atom',206,'border'}|[{'type',206,'integer',[]}]]}|[{'type',207,'tuple',[{'atom',207,'userData'}|[{'remote_type',207,[{'atom',207,'wx'}|[{'atom',207,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'calcMin',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}]}|[{'type',221,'tuple',[{'ann_type',221,[{'var',221,'W'}|[{'type',221,'integer',[]}]]}|[{'ann_type',221,[{'var',221,'H'}|[{'type',221,'integer',[]}]]}]]}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxGridBagSizer',[]}]]]]}]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'checkForIntersection',2},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}|[{'var',229,'Item'}]]}|[{'type',229,'boolean',[]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxGridBagSizer',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Item'}|[{'remote_type',230,[{'atom',230,'wxGBSizerItem'}|[{'atom',230,'wxGBSizerItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'checkForIntersection',3},[{'type',242,'bounded_fun',[{'type',242,'fun',[{'type',242,'product',[{'var',242,'This'}|[{'var',242,'Pos'}|[{'var',242,'Span'}]]]}|[{'type',242,'boolean',[]}]]}|[[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'This'}|[{'type',243,'wxGridBagSizer',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Pos'}|[{'type',243,'tuple',[{'ann_type',243,[{'var',243,'R'}|[{'type',243,'integer',[]}]]}|[{'ann_type',243,[{'var',243,'C'}|[{'type',243,'integer',[]}]]}]]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Span'}|[{'type',243,'tuple',[{'ann_type',243,[{'var',243,'RS'}|[{'type',243,'integer',[]}]]}|[{'ann_type',243,[{'var',243,'CS'}|[{'type',243,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'This'}|[{'var',244,'Item'}|[{'type',244,'list',[{'var',244,'Option'}]}]]]}|[{'type',244,'boolean',[]}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'This'}|[{'type',245,'wxGridBagSizer',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Item'}|[{'remote_type',245,[{'atom',245,'wxGBSizerItem'}|[{'atom',245,'wxGBSizerItem'}|[[]]]]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Option'}|[{'type',246,'tuple',[{'atom',246,'excludeItem'}|[{'remote_type',246,[{'atom',246,'wxGBSizerItem'}|[{'atom',246,'wxGBSizerItem'}|[[]]]]}]]}]]]]}]]]]]}]]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'checkForIntersection',4},[{'type',262,'bounded_fun',[{'type',262,'fun',[{'type',262,'product',[{'var',262,'This'}|[{'var',262,'Pos'}|[{'var',262,'Span'}|[{'type',262,'list',[{'var',262,'Option'}]}]]]]}|[{'type',262,'boolean',[]}]]}|[[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'This'}|[{'type',263,'wxGridBagSizer',[]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Pos'}|[{'type',263,'tuple',[{'ann_type',263,[{'var',263,'R'}|[{'type',263,'integer',[]}]]}|[{'ann_type',263,[{'var',263,'C'}|[{'type',263,'integer',[]}]]}]]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Span'}|[{'type',263,'tuple',[{'ann_type',263,[{'var',263,'RS'}|[{'type',263,'integer',[]}]]}|[{'ann_type',263,[{'var',263,'CS'}|[{'type',263,'integer',[]}]]}]]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Option'}|[{'type',264,'tuple',[{'atom',264,'excludeItem'}|[{'remote_type',264,[{'atom',264,'wxGBSizerItem'}|[{'atom',264,'wxGBSizerItem'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'findItem',2},[{'type',275,'bounded_fun',[{'type',275,'fun',[{'type',275,'product',[{'var',275,'This'}|[{'var',275,'Window'}]]}|[{'remote_type',275,[{'atom',275,'wxGBSizerItem'}|[{'atom',275,'wxGBSizerItem'}|[[]]]]}]]}|[[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'This'}|[{'type',276,'wxGridBagSizer',[]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Window'}|[{'type',276,'union',[{'remote_type',276,[{'atom',276,'wxWindow'}|[{'atom',276,'wxWindow'}|[[]]]]}|[{'remote_type',276,[{'atom',276,'wxSizer'}|[{'atom',276,'wxSizer'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'findItemAtPoint',2},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'This'}|[{'var',289,'Pt'}]]}|[{'remote_type',289,[{'atom',289,'wxGBSizerItem'}|[{'atom',289,'wxGBSizerItem'}|[[]]]]}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'This'}|[{'type',290,'wxGridBagSizer',[]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Pt'}|[{'type',290,'tuple',[{'ann_type',290,[{'var',290,'X'}|[{'type',290,'integer',[]}]]}|[{'ann_type',290,[{'var',290,'Y'}|[{'type',290,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'findItemAtPosition',2},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'var',298,'This'}|[{'var',298,'Pos'}]]}|[{'remote_type',298,[{'atom',298,'wxGBSizerItem'}|[{'atom',298,'wxGBSizerItem'}|[[]]]]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'This'}|[{'type',299,'wxGridBagSizer',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Pos'}|[{'type',299,'tuple',[{'ann_type',299,[{'var',299,'R'}|[{'type',299,'integer',[]}]]}|[{'ann_type',299,[{'var',299,'C'}|[{'type',299,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'findItemWithData',2},[{'type',307,'bounded_fun',[{'type',307,'fun',[{'type',307,'product',[{'var',307,'This'}|[{'var',307,'UserData'}]]}|[{'remote_type',307,[{'atom',307,'wxGBSizerItem'}|[{'atom',307,'wxGBSizerItem'}|[[]]]]}]]}|[[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'This'}|[{'type',308,'wxGridBagSizer',[]}]]]]}|[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'UserData'}|[{'remote_type',308,[{'atom',308,'wx'}|[{'atom',308,'wx_object'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'getCellSize',3},[{'type',316,'bounded_fun',[{'type',316,'fun',[{'type',316,'product',[{'var',316,'This'}|[{'var',316,'Row'}|[{'var',316,'Col'}]]]}|[{'type',316,'tuple',[{'ann_type',316,[{'var',316,'W'}|[{'type',316,'integer',[]}]]}|[{'ann_type',316,[{'var',316,'H'}|[{'type',316,'integer',[]}]]}]]}]]}|[[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'This'}|[{'type',317,'wxGridBagSizer',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Row'}|[{'type',317,'integer',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Col'}|[{'type',317,'integer',[]}]]]]}]]]]]}]}],
		%% Line 325
		'spec' =
		    %% Line 325
		    [{{'getEmptyCellSize',1},[{'type',325,'bounded_fun',[{'type',325,'fun',[{'type',325,'product',[{'var',325,'This'}]}|[{'type',325,'tuple',[{'ann_type',325,[{'var',325,'W'}|[{'type',325,'integer',[]}]]}|[{'ann_type',325,[{'var',325,'H'}|[{'type',325,'integer',[]}]]}]]}]]}|[[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'This'}|[{'type',326,'wxGridBagSizer',[]}]]]]}]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'getItemPosition',2},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'This'}|[{'var',337,'Index'}]]}|[{'type',337,'tuple',[{'ann_type',337,[{'var',337,'R'}|[{'type',337,'integer',[]}]]}|[{'ann_type',337,[{'var',337,'C'}|[{'type',337,'integer',[]}]]}]]}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'This'}|[{'type',338,'wxGridBagSizer',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Index'}|[{'type',338,'integer',[]}]]]]}]]]]}|[{'type',339,'bounded_fun',[{'type',339,'fun',[{'type',339,'product',[{'var',339,'This'}|[{'var',339,'Window'}]]}|[{'type',339,'tuple',[{'ann_type',339,[{'var',339,'R'}|[{'type',339,'integer',[]}]]}|[{'ann_type',339,[{'var',339,'C'}|[{'type',339,'integer',[]}]]}]]}]]}|[[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'This'}|[{'type',340,'wxGridBagSizer',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Window'}|[{'type',340,'union',[{'remote_type',340,[{'atom',340,'wxWindow'}|[{'atom',340,'wxWindow'}|[[]]]]}|[{'remote_type',340,[{'atom',340,'wxSizer'}|[{'atom',340,'wxSizer'}|[[]]]]}]]}]]]]}]]]]}]]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'getItemSpan',2},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'This'}|[{'var',362,'Index'}]]}|[{'type',362,'tuple',[{'ann_type',362,[{'var',362,'RS'}|[{'type',362,'integer',[]}]]}|[{'ann_type',362,[{'var',362,'CS'}|[{'type',362,'integer',[]}]]}]]}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'This'}|[{'type',363,'wxGridBagSizer',[]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Index'}|[{'type',363,'integer',[]}]]]]}]]]]}|[{'type',364,'bounded_fun',[{'type',364,'fun',[{'type',364,'product',[{'var',364,'This'}|[{'var',364,'Window'}]]}|[{'type',364,'tuple',[{'ann_type',364,[{'var',364,'RS'}|[{'type',364,'integer',[]}]]}|[{'ann_type',364,[{'var',364,'CS'}|[{'type',364,'integer',[]}]]}]]}]]}|[[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'This'}|[{'type',365,'wxGridBagSizer',[]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'Window'}|[{'type',365,'union',[{'remote_type',365,[{'atom',365,'wxWindow'}|[{'atom',365,'wxWindow'}|[[]]]]}|[{'remote_type',365,[{'atom',365,'wxSizer'}|[{'atom',365,'wxSizer'}|[[]]]]}]]}]]]]}]]]]}]]}],
		%% Line 383
		'spec' =
		    %% Line 383
		    [{{'setEmptyCellSize',2},[{'type',383,'bounded_fun',[{'type',383,'fun',[{'type',383,'product',[{'var',383,'This'}|[{'var',383,'Sz'}]]}|[{'atom',383,'ok'}]]}|[[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'This'}|[{'type',384,'wxGridBagSizer',[]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'Sz'}|[{'type',384,'tuple',[{'ann_type',384,[{'var',384,'W'}|[{'type',384,'integer',[]}]]}|[{'ann_type',384,[{'var',384,'H'}|[{'type',384,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'setItemPosition',3},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'This'}|[{'var',396,'Index'}|[{'var',396,'Pos'}]]]}|[{'type',396,'boolean',[]}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'This'}|[{'type',397,'wxGridBagSizer',[]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Index'}|[{'type',397,'integer',[]}]]]]}|[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Pos'}|[{'type',397,'tuple',[{'ann_type',397,[{'var',397,'R'}|[{'type',397,'integer',[]}]]}|[{'ann_type',397,[{'var',397,'C'}|[{'type',397,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',398,'bounded_fun',[{'type',398,'fun',[{'type',398,'product',[{'var',398,'This'}|[{'var',398,'Window'}|[{'var',398,'Pos'}]]]}|[{'type',398,'boolean',[]}]]}|[[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'This'}|[{'type',399,'wxGridBagSizer',[]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Window'}|[{'type',399,'union',[{'remote_type',399,[{'atom',399,'wxWindow'}|[{'atom',399,'wxWindow'}|[[]]]]}|[{'remote_type',399,[{'atom',399,'wxSizer'}|[{'atom',399,'wxSizer'}|[[]]]]}]]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Pos'}|[{'type',399,'tuple',[{'ann_type',399,[{'var',399,'R'}|[{'type',399,'integer',[]}]]}|[{'ann_type',399,[{'var',399,'C'}|[{'type',399,'integer',[]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'setItemSpan',3},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'This'}|[{'var',422,'Index'}|[{'var',422,'Span'}]]]}|[{'type',422,'boolean',[]}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'This'}|[{'type',423,'wxGridBagSizer',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Index'}|[{'type',423,'integer',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Span'}|[{'type',423,'tuple',[{'ann_type',423,[{'var',423,'RS'}|[{'type',423,'integer',[]}]]}|[{'ann_type',423,[{'var',423,'CS'}|[{'type',423,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',424,'bounded_fun',[{'type',424,'fun',[{'type',424,'product',[{'var',424,'This'}|[{'var',424,'Window'}|[{'var',424,'Span'}]]]}|[{'type',424,'boolean',[]}]]}|[[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'This'}|[{'type',425,'wxGridBagSizer',[]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'Window'}|[{'type',425,'union',[{'remote_type',425,[{'atom',425,'wxWindow'}|[{'atom',425,'wxWindow'}|[[]]]]}|[{'remote_type',425,[{'atom',425,'wxSizer'}|[{'atom',425,'wxSizer'}|[[]]]]}]]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'Span'}|[{'type',425,'tuple',[{'ann_type',425,[{'var',425,'RS'}|[{'type',425,'integer',[]}]]}|[{'ann_type',425,[{'var',425,'CS'}|[{'type',425,'integer',[]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 444
		'spec' =
		    %% Line 444
		    [{{'destroy',1},[{'type',444,'fun',[{'type',444,'product',[{'ann_type',444,[{'var',444,'This'}|[{'type',444,'wxGridBagSizer',[]}]]}]}|[{'atom',444,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <'wxFlexGridSizer'> when 'true' ->
	      'true'
	  %% Line 54
	  <'wxGridSizer'> when 'true' ->
	      'true'
	  %% Line 55
	  <'wxSizer'> when 'true' ->
	      'true'
	  %% Line 56
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGridBagSizer'})
	end
'new'/0 =
    %% Line 62
    fun () ->
	%% Line 63
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 69
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 70
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 71
		  ( fun (_cor4,_cor3) ->
			case <_cor4,_cor3> of
			  <{'vgap',Vgap},Acc> when 'true' ->
			      let <_cor1> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Vgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor1|Acc]
			  %% Line 72
			  <{'hgap',Hgap},Acc> when 'true' ->
			      let <_cor2> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<Hgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor2|Acc]
			  %% Line 73
			  <BadOpt,_cor12> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 74
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 74
			  call 'erlang':'list_to_binary'
			      (_cor8)
		      in  let <_cor10> =
			      %% Line 76
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 75
			      call 'wxe_util':'construct'
				  (1396, _cor10)
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'add'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',ItemRef,ItemT,_cor20}> when 'true' ->
	      do  %% Line 82
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 83
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (ItemT,
					   'wxSizerItem') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call ItemT:'parent_class'
					('wxSizerItem')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 83
			  case _cor10 of
			    %% Line 84
			    <'true'> when 'true' ->
				%% Line 85
				1404
			    %% Line 86
			    <_cor24> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (ItemT,
						     'wxGBSizerItem') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call ItemT:'parent_class'
						  ('wxGBSizerItem')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 87
				    1400
			  end
		      in  let <_cor16> =
			      %% Line 90
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 89
			      call 'wxe_util':'call'
				  (_cor14, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'add',2}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor41,_cor42,_cor43},Width,Height>
	      when let <_cor3> =
		    %% Line 115
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 115
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 115
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 116
	      apply 'add'/4
		  (This, Width, Height, [])
	  %% Line 118
	  <This = {'wx_ref',_cor44,_cor45,_cor46},Window = {'wx_ref',_cor47,_cor48,_cor49},Pos = {PosR,PosC}>
	      when let <_cor6> =
		    %% Line 119
		    call 'erlang':'is_integer'
			(PosR)
		in  let <_cor7> =
			%% Line 119
			call 'erlang':'is_integer'
			    (PosC)
		    in  %% Line 119
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor6, _cor7)
			  -| ['compiler_generated'] ) ->
	      %% Line 120
	      apply 'add'/4
		  (This, Window, Pos, [])
	  %% Line 121
	  <{'wx_ref',ThisRef,ThisT,_cor50},{'wx_ref',WindowRef,WindowT,_cor51},Options>
	      when %% Line 122
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 123
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor18> =
		      %% Line 124
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor14> ->
			  _cor14
		      catch <_cor17,_cor16,_cor15> ->
			  'false'
		  in  let <_cor22> =
			  %% Line 124
			  case _cor18 of
			    %% Line 125
			    <'true'> when 'true' ->
				%% Line 126
				1401
			    %% Line 127
			    <_cor55> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 128
				    1402
			  end
		      in  let <MOpts> =
			      %% Line 130
			      ( fun (_cor31,_cor30) ->
				    case <_cor31,_cor30> of
				      <{'proportion',Proportion},Acc> when 'true' ->
					  let <_cor24> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor24|Acc]
				      %% Line 131
				      <{'flag',Flag},Acc> when 'true' ->
					  let <_cor25> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Flag>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor25|Acc]
				      %% Line 132
				      <{'border',Border},Acc> when 'true' ->
					  let <_cor26> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<Border>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor26|Acc]
				      %% Line 133
				      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor56}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (UserDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call UserDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor29> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor29|Acc]
				      %% Line 134
				      <BadOpt,_cor57> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-add/3-fun-0-'}}] )
			  in  let <_cor35> =
				  %% Line 135
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 135
				      call 'erlang':'list_to_binary'
					  (_cor35)
				  in  let <_cor37> =
					  %% Line 137
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 136
					  call 'wxe_util':'call'
					      (_cor22, _cor37)
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/4 =
    %% Line 169
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor67,_cor68,_cor69},Width,Height,Pos = {PosR,PosC}>
	      when %% Line 170
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Width)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Height)
			  in  let <_cor6> =
				  call 'erlang':'is_integer'
				      (PosR)
			      in  let <_cor7> =
				      call 'erlang':'is_integer'
					  (PosC)
				  in  let <_cor8> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor6, _cor7)
					    -| ['compiler_generated'] )
				      in  let <_cor9> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor5, _cor8)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor9)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 171
	      apply 'add'/5
		  (This, Width, Height, Pos, [])
	  %% Line 172
	  <{'wx_ref',ThisRef,ThisT,_cor70},Width,Height,Options>
	      when %% Line 173
		try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor12> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor13> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 174
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 175
		      ( fun (_cor24,_cor23) ->
			    case <_cor24,_cor23> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor17> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor17|Acc]
			      %% Line 176
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor18> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor18|Acc]
			      %% Line 177
			      <{'border',Border},Acc> when 'true' ->
				  let <_cor19> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Border>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor19|Acc]
			      %% Line 178
			      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor71}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (UserDataT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call UserDataT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor22> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor22|Acc]
			      %% Line 179
			      <BadOpt,_cor72> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-add/4-fun-0-'}}] )
		  in  let <_cor28> =
			  %% Line 180
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 180
			      call 'erlang':'list_to_binary'
				  (_cor28)
			  in  let <_cor30> =
				  %% Line 182
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 181
				  call 'wxe_util':'call'
				      (1403, _cor30)
	  %% Line 183
	  <{'wx_ref',ThisRef,ThisT,_cor73},{'wx_ref',WindowRef,WindowT,_cor74},{PosR,PosC},Options>
	      when %% Line 184
		try
		    let <_cor31> =
			call 'erlang':'is_integer'
			    (PosR)
		    in  let <_cor32> =
			    call 'erlang':'is_integer'
				(PosC)
			in  let <_cor33> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor34> =
				    call 'erlang':'and'
					(_cor32, _cor33)
				in  call 'erlang':'and'
					(_cor31, _cor34)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 185
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor43> =
		      %% Line 186
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor39> ->
			  _cor39
		      catch <_cor42,_cor41,_cor40> ->
			  'false'
		  in  let <_cor47> =
			  %% Line 186
			  case _cor43 of
			    %% Line 187
			    <'true'> when 'true' ->
				%% Line 188
				1397
			    %% Line 189
			    <_cor78> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 190
				    1398
			  end
		      in  let <MOpts> =
			      %% Line 192
			      ( fun (_cor56,_cor55) ->
				    case <_cor56,_cor55> of
				      <{'span',{SpanRS,SpanCS}},Acc> when 'true' ->
					  let <_cor49> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<SpanRS>(32,1,'integer',['unsigned'|['native']]),
						#<SpanCS>(32,1,'integer',['unsigned'|['native']]),
						#<0>(32,1,'integer',['unsigned'|['big']])}#
					  in  [_cor49|Acc]
				      %% Line 193
				      <{'flag',Flag},Acc> when 'true' ->
					  let <_cor50> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Flag>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor50|Acc]
				      %% Line 194
				      <{'border',Border},Acc> when 'true' ->
					  let <_cor51> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<Border>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor51|Acc]
				      %% Line 195
				      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor79}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (UserDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call UserDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor54> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor54|Acc]
				      %% Line 196
				      <BadOpt,_cor80> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-add/4-fun-1-'}}] )
			  in  let <_cor60> =
				  %% Line 197
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 197
				      call 'erlang':'list_to_binary'
					  (_cor60)
				  in  let <_cor62> =
					  %% Line 199
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<PosR>(32,1,'integer',['unsigned'|['native']]),
					    #<PosC>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 198
					  call 'wxe_util':'call'
					      (_cor47, _cor62)
	  ( <_cor66,_cor65,_cor64,_cor63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor66,_cor65,_cor64,_cor63})
		  -| [{'function_name',{'add',4}}] )
	    -| ['compiler_generated'] )
	end
'add'/5 =
    %% Line 208
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor34},Width,Height,{PosR,PosC},Options>
	      when %% Line 209
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (PosR)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(PosC)
				in  let <_cor9> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor7, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor6, _cor11)
						in  call 'erlang':'and'
							(_cor5, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 210
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 211
		      ( fun (_cor22,_cor21) ->
			    case <_cor22,_cor21> of
			      <{'span',{SpanRS,SpanCS}},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<SpanRS>(32,1,'integer',['unsigned'|['native']]),
					#<SpanCS>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor15|Acc]
			      %% Line 212
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor16|Acc]
			      %% Line 213
			      <{'border',Border},Acc> when 'true' ->
				  let <_cor17> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Border>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor17|Acc]
			      %% Line 214
			      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor35}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (UserDataT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call UserDataT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor20> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor20|Acc]
			      %% Line 215
			      <BadOpt,_cor36> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-add/5-fun-0-'}}] )
		  in  let <_cor26> =
			  %% Line 216
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 216
			      call 'erlang':'list_to_binary'
				  (_cor26)
			  in  let <_cor28> =
				  %% Line 218
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<PosR>(32,1,'integer',['unsigned'|['native']]),
				    #<PosC>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 217
				  call 'wxe_util':'call'
				      (1399, _cor28)
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'add',5}}] )
	    -| ['compiler_generated'] )
	end
'calcMin'/1 =
    %% Line 223
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 224
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 226
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 225
		      call 'wxe_util':'call'
			  (1405, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'calcMin',1}}] )
	    -| ['compiler_generated'] )
	end
'checkForIntersection'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Item = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 234
	      apply 'checkForIntersection'/3
		  (This, Item, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'checkForIntersection',2}}] )
	    -| ['compiler_generated'] )
	end
'checkForIntersection'/3 =
    %% Line 248
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor28,_cor29,_cor30},Pos = {PosR,PosC},Span = {SpanRS,SpanCS}>
	      when %% Line 249
		( try
		      let <_cor3> =
			  call 'erlang':'is_integer'
			      (PosR)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (PosC)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (SpanRS)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (SpanCS)
				  in  let <_cor7> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor5, _cor6)
					    -| ['compiler_generated'] )
				      in  let <_cor8> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor7)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor8)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 250
	      apply 'checkForIntersection'/4
		  (This, Pos, Span, [])
	  %% Line 251
	  <{'wx_ref',ThisRef,ThisT,_cor31},{'wx_ref',ItemRef,ItemT,_cor32},Options>
	      when %% Line 252
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 253
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 254
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxGBSizerItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxGBSizerItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 255
			  ( fun (_cor18,_cor17) ->
				case <_cor18,_cor17> of
				  <{'excludeItem',{'wx_ref',ExcludeItemRef,ExcludeItemT,_cor33}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (ExcludeItemT,
							   'wxGBSizerItem') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call ExcludeItemT:'parent_class'
							('wxGBSizerItem')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor16> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<ExcludeItemRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor16|Acc]
				  %% Line 256
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-checkForIntersection/3-fun-0-'}}] )
		      in  let <_cor22> =
			      %% Line 257
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 257
				  call 'erlang':'list_to_binary'
				      (_cor22)
			      in  let <_cor24> =
				      %% Line 259
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ItemRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 258
				      call 'wxe_util':'call'
					  (1406, _cor24)
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'checkForIntersection',3}}] )
	    -| ['compiler_generated'] )
	end
'checkForIntersection'/4 =
    %% Line 265
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},{PosR,PosC},{SpanRS,SpanCS},Options>
	      when %% Line 266
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (PosR)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(PosC)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (SpanRS)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(SpanCS)
				in  let <_cor8> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 267
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 268
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'excludeItem',{'wx_ref',ExcludeItemRef,ExcludeItemT,_cor30}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ExcludeItemT,
						       'wxGBSizerItem') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ExcludeItemT:'parent_class'
						    ('wxGBSizerItem')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor16> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ExcludeItemRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor16|Acc]
			      %% Line 269
			      <BadOpt,_cor31> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-checkForIntersection/4-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 270
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 270
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 272
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<PosR>(32,1,'integer',['unsigned'|['native']]),
				    #<PosC>(32,1,'integer',['unsigned'|['native']]),
				    #<SpanRS>(32,1,'integer',['unsigned'|['native']]),
				    #<SpanCS>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 271
				  call 'wxe_util':'call'
				      (1407, _cor24)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'checkForIntersection',4}}] )
	    -| ['compiler_generated'] )
	end
'findItem'/2 =
    %% Line 277
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',WindowRef,WindowT,_cor20}> when 'true' ->
	      do  %% Line 278
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 279
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 279
			  case _cor10 of
			    %% Line 280
			    <'true'> when 'true' ->
				%% Line 281
				1408
			    %% Line 282
			    <_cor24> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 283
				    1409
			  end
		      in  let <_cor16> =
			      %% Line 286
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 285
			      call 'wxe_util':'call'
				  (_cor14, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'findItem',2}}] )
	    -| ['compiler_generated'] )
	end
'findItemAtPoint'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PtX,PtY}>
	      when let <_cor2> =
		    %% Line 292
		    call 'erlang':'is_integer'
			(PtX)
		in  let <_cor3> =
			%% Line 292
			call 'erlang':'is_integer'
			    (PtY)
		    in  %% Line 292
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 293
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 295
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PtX>(32,1,'integer',['unsigned'|['native']]),
			#<PtY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 294
		      call 'wxe_util':'call'
			  (1410, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'findItemAtPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'findItemAtPosition'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PosR,PosC}>
	      when let <_cor2> =
		    %% Line 301
		    call 'erlang':'is_integer'
			(PosR)
		in  let <_cor3> =
			%% Line 301
			call 'erlang':'is_integer'
			    (PosC)
		    in  %% Line 301
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 302
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 304
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PosR>(32,1,'integer',['unsigned'|['native']]),
			#<PosC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 303
		      call 'wxe_util':'call'
			  (1411, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'findItemAtPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'findItemWithData'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',UserDataRef,UserDataT,_cor10}> when 'true' ->
	      do  %% Line 310
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 311
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (UserDataT,
				       'wx') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call UserDataT:'parent_class'
				    ('wx')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 313
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 312
			  call 'wxe_util':'call'
			      (1412, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'findItemWithData',2}}] )
	    -| ['compiler_generated'] )
	end
'getCellSize'/3 =
    %% Line 318
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 319
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 319
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 319
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 320
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 322
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 321
		      call 'wxe_util':'call'
			  (1413, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellSize',3}}] )
	    -| ['compiler_generated'] )
	end
'getEmptyCellSize'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 328
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 330
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 329
		      call 'wxe_util':'call'
			  (1414, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getEmptyCellSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getItemPosition'/2 =
    %% Line 341
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Index>
	      when %% Line 342
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 343
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 345
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 344
		      call 'wxe_util':'call'
			  (1417, _cor4)
	  %% Line 346
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',WindowRef,WindowT,_cor24}> when 'true' ->
	      do  %% Line 347
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 348
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor9> ->
			  _cor9
		      catch <_cor12,_cor11,_cor10> ->
			  'false'
		  in  let <_cor17> =
			  %% Line 348
			  case _cor13 of
			    %% Line 349
			    <'true'> when 'true' ->
				%% Line 350
				1415
			    %% Line 351
			    <_cor28> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 352
				    1416
			  end
		      in  let <_cor19> =
			      %% Line 355
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 354
			      call 'wxe_util':'call'
				  (_cor17, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'getItemPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemSpan'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Index>
	      when %% Line 367
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 368
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 370
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 369
		      call 'wxe_util':'call'
			  (1420, _cor4)
	  %% Line 371
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',WindowRef,WindowT,_cor24}> when 'true' ->
	      do  %% Line 372
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 373
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor9> ->
			  _cor9
		      catch <_cor12,_cor11,_cor10> ->
			  'false'
		  in  let <_cor17> =
			  %% Line 373
			  case _cor13 of
			    %% Line 374
			    <'true'> when 'true' ->
				%% Line 375
				1418
			    %% Line 376
			    <_cor28> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 377
				    1419
			  end
		      in  let <_cor19> =
			      %% Line 380
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 379
			      call 'wxe_util':'call'
				  (_cor17, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'getItemSpan',2}}] )
	    -| ['compiler_generated'] )
	end
'setEmptyCellSize'/2 =
    %% Line 385
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SzW,SzH}>
	      when let <_cor2> =
		    %% Line 386
		    call 'erlang':'is_integer'
			(SzW)
		in  let <_cor3> =
			%% Line 386
			call 'erlang':'is_integer'
			    (SzH)
		    in  %% Line 386
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 387
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 389
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SzW>(32,1,'integer',['unsigned'|['native']]),
			#<SzH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 388
		      call 'wxe_util':'cast'
			  (1421, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setEmptyCellSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemPosition'/3 =
    %% Line 400
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},Index,{PosR,PosC}>
	      when %% Line 401
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(PosR)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (PosC)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 402
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 404
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<PosR>(32,1,'integer',['unsigned'|['native']]),
			#<PosC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 403
		      call 'wxe_util':'call'
			  (1424, _cor9)
	  %% Line 405
	  <{'wx_ref',ThisRef,ThisT,_cor31},{'wx_ref',WindowRef,WindowT,_cor32},{PosR,PosC}>
	      when let <_cor10> =
		    %% Line 406
		    call 'erlang':'is_integer'
			(PosR)
		in  let <_cor11> =
			%% Line 406
			call 'erlang':'is_integer'
			    (PosC)
		    in  %% Line 406
			call 'erlang':'and'
			    (_cor10, _cor11) ->
	      do  %% Line 407
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor20> =
		      %% Line 408
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor16> ->
			  _cor16
		      catch <_cor19,_cor18,_cor17> ->
			  'false'
		  in  let <_cor24> =
			  %% Line 408
			  case _cor20 of
			    %% Line 409
			    <'true'> when 'true' ->
				%% Line 410
				1422
			    %% Line 411
			    <_cor36> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 412
				    1423
			  end
		      in  let <_cor26> =
			      %% Line 415
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<PosR>(32,1,'integer',['unsigned'|['native']]),
				#<PosC>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 414
			      call 'wxe_util':'call'
				  (_cor24, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'setItemPosition',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemSpan'/3 =
    %% Line 426
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},Index,{SpanRS,SpanCS}>
	      when %% Line 427
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(SpanRS)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (SpanCS)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 428
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 430
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<SpanRS>(32,1,'integer',['unsigned'|['native']]),
			#<SpanCS>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 429
		      call 'wxe_util':'call'
			  (1427, _cor9)
	  %% Line 431
	  <{'wx_ref',ThisRef,ThisT,_cor31},{'wx_ref',WindowRef,WindowT,_cor32},{SpanRS,SpanCS}>
	      when let <_cor10> =
		    %% Line 432
		    call 'erlang':'is_integer'
			(SpanRS)
		in  let <_cor11> =
			%% Line 432
			call 'erlang':'is_integer'
			    (SpanCS)
		    in  %% Line 432
			call 'erlang':'and'
			    (_cor10, _cor11) ->
	      do  %% Line 433
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor20> =
		      %% Line 434
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor16> ->
			  _cor16
		      catch <_cor19,_cor18,_cor17> ->
			  'false'
		  in  let <_cor24> =
			  %% Line 434
			  case _cor20 of
			    %% Line 435
			    <'true'> when 'true' ->
				%% Line 436
				1425
			    %% Line 437
			    <_cor36> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 438
				    1426
			  end
		      in  let <_cor26> =
			      %% Line 441
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<SpanRS>(32,1,'integer',['unsigned'|['native']]),
				#<SpanCS>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 440
			      call 'wxe_util':'call'
				  (_cor24, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'setItemSpan',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 445
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 446
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGridBagSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGridBagSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 447
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 448
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setNonFlexibleGrowMode'/2 =
    %% Line 451
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'setNonFlexibleGrowMode'
	    (_cor1, _cor0)
'setFlexibleDirection'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'setFlexibleDirection'
	    (_cor1, _cor0)
'removeGrowableRow'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'removeGrowableRow'
	    (_cor1, _cor0)
'removeGrowableCol'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'removeGrowableCol'
	    (_cor1, _cor0)
'getNonFlexibleGrowMode'/1 =
    %% Line 459
    fun (_cor0) ->
	call 'wxFlexGridSizer':'getNonFlexibleGrowMode'
	    (_cor0)
'getFlexibleDirection'/1 =
    %% Line 461
    fun (_cor0) ->
	call 'wxFlexGridSizer':'getFlexibleDirection'
	    (_cor0)
'addGrowableRow'/3 =
    %% Line 463
    fun (_cor2,_cor1,_cor0) ->
	call 'wxFlexGridSizer':'addGrowableRow'
	    (_cor2, _cor1, _cor0)
'addGrowableRow'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'addGrowableRow'
	    (_cor1, _cor0)
'addGrowableCol'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	call 'wxFlexGridSizer':'addGrowableCol'
	    (_cor2, _cor1, _cor0)
'addGrowableCol'/2 =
    %% Line 469
    fun (_cor1,_cor0) ->
	call 'wxFlexGridSizer':'addGrowableCol'
	    (_cor1, _cor0)
'setVGap'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setVGap'
	    (_cor1, _cor0)
'setRows'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setRows'
	    (_cor1, _cor0)
'setHGap'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setHGap'
	    (_cor1, _cor0)
'setCols'/2 =
    %% Line 478
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setCols'
	    (_cor1, _cor0)
'getVGap'/1 =
    %% Line 480
    fun (_cor0) ->
	call 'wxGridSizer':'getVGap'
	    (_cor0)
'getRows'/1 =
    %% Line 482
    fun (_cor0) ->
	call 'wxGridSizer':'getRows'
	    (_cor0)
'getHGap'/1 =
    %% Line 484
    fun (_cor0) ->
	call 'wxGridSizer':'getHGap'
	    (_cor0)
'getCols'/1 =
    %% Line 486
    fun (_cor0) ->
	call 'wxGridSizer':'getCols'
	    (_cor0)
'show'/3 =
    %% Line 489
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor2, _cor1, _cor0)
'show'/2 =
    %% Line 491
    fun (_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 493
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setSizeHints'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setSizeHints'
	    (_cor1, _cor0)
'setItemMinSize'/4 =
    %% Line 497
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor3, _cor2, _cor1, _cor0)
'setItemMinSize'/3 =
    %% Line 499
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/3 =
    %% Line 501
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/2 =
    %% Line 503
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor1, _cor0)
'setDimension'/5 =
    %% Line 505
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setDimension'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'replace'/4 =
    %% Line 507
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor3, _cor2, _cor1, _cor0)
'replace'/3 =
    %% Line 509
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor2, _cor1, _cor0)
'remove'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	call 'wxSizer':'remove'
	    (_cor1, _cor0)
'recalcSizes'/1 =
    %% Line 513
    fun (_cor0) ->
	call 'wxSizer':'recalcSizes'
	    (_cor0)
'prependStretchSpacer'/2 =
    %% Line 515
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor1, _cor0)
'prependStretchSpacer'/1 =
    %% Line 517
    fun (_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor0)
'prependSpacer'/2 =
    %% Line 519
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependSpacer'
	    (_cor1, _cor0)
'prepend'/4 =
    %% Line 521
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor3, _cor2, _cor1, _cor0)
'prepend'/3 =
    %% Line 523
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor2, _cor1, _cor0)
'prepend'/2 =
    %% Line 525
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor1, _cor0)
'layout'/1 =
    %% Line 527
    fun (_cor0) ->
	call 'wxSizer':'layout'
	    (_cor0)
'isShown'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	call 'wxSizer':'isShown'
	    (_cor1, _cor0)
'insertStretchSpacer'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor2, _cor1, _cor0)
'insertStretchSpacer'/2 =
    %% Line 533
    fun (_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor1, _cor0)
'insertSpacer'/3 =
    %% Line 535
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertSpacer'
	    (_cor2, _cor1, _cor0)
'insert'/5 =
    %% Line 537
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'insert'/4 =
    %% Line 539
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor3, _cor2, _cor1, _cor0)
'insert'/3 =
    %% Line 541
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor2, _cor1, _cor0)
'hide'/3 =
    %% Line 543
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor2, _cor1, _cor0)
'hide'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor1, _cor0)
'getMinSize'/1 =
    %% Line 547
    fun (_cor0) ->
	call 'wxSizer':'getMinSize'
	    (_cor0)
'getPosition'/1 =
    %% Line 549
    fun (_cor0) ->
	call 'wxSizer':'getPosition'
	    (_cor0)
'getSize'/1 =
    %% Line 551
    fun (_cor0) ->
	call 'wxSizer':'getSize'
	    (_cor0)
'getItem'/3 =
    %% Line 553
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor2, _cor1, _cor0)
'getItem'/2 =
    %% Line 555
    fun (_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor1, _cor0)
'getChildren'/1 =
    %% Line 557
    fun (_cor0) ->
	call 'wxSizer':'getChildren'
	    (_cor0)
'fitInside'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fitInside'
	    (_cor1, _cor0)
'fit'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fit'
	    (_cor1, _cor0)
'detach'/2 =
    %% Line 563
    fun (_cor1,_cor0) ->
	call 'wxSizer':'detach'
	    (_cor1, _cor0)
'clear'/2 =
    %% Line 565
    fun (_cor1,_cor0) ->
	call 'wxSizer':'clear'
	    (_cor1, _cor0)
'clear'/1 =
    %% Line 567
    fun (_cor0) ->
	call 'wxSizer':'clear'
	    (_cor0)
'addStretchSpacer'/2 =
    %% Line 569
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor1, _cor0)
'addStretchSpacer'/1 =
    %% Line 571
    fun (_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor0)
'addSpacer'/2 =
    %% Line 573
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addSpacer'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridBagSizer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridBagSizer', _cor0)
end