module 'wxStatusBar' ['cacheBestSize'/2,
		      'captureMouse'/1,
		      'center'/1,
		      'center'/2,
		      'centerOnParent'/1,
		      'centerOnParent'/2,
		      'centre'/1,
		      'centre'/2,
		      'centreOnParent'/1,
		      'centreOnParent'/2,
		      'clearBackground'/1,
		      'clientToScreen'/2,
		      'clientToScreen'/3,
		      'close'/1,
		      'close'/2,
		      'connect'/2,
		      'connect'/3,
		      'convertDialogToPixels'/2,
		      'convertPixelsToDialog'/2,
		      'create'/2,
		      'create'/3,
		      'destroy'/1,
		      'destroyChildren'/1,
		      'disable'/1,
		      'disconnect'/1,
		      'disconnect'/2,
		      'disconnect'/3,
		      'enable'/1,
		      'enable'/2,
		      'findWindow'/2,
		      'fit'/1,
		      'fitInside'/1,
		      'freeze'/1,
		      'getAcceleratorTable'/1,
		      'getBackgroundColour'/1,
		      'getBackgroundStyle'/1,
		      'getBestSize'/1,
		      'getCaret'/1,
		      'getCharHeight'/1,
		      'getCharWidth'/1,
		      'getChildren'/1,
		      'getClientSize'/1,
		      'getContainingSizer'/1,
		      'getCursor'/1,
		      'getDropTarget'/1,
		      'getEventHandler'/1,
		      'getExtraStyle'/1,
		      'getFieldRect'/2,
		      'getFieldsCount'/1,
		      'getFont'/1,
		      'getForegroundColour'/1,
		      'getGrandParent'/1,
		      'getHandle'/1,
		      'getHelpText'/1,
		      'getId'/1,
		      'getLabel'/1,
		      'getMaxSize'/1,
		      'getMinSize'/1,
		      'getName'/1,
		      'getParent'/1,
		      'getPosition'/1,
		      'getRect'/1,
		      'getScreenPosition'/1,
		      'getScreenRect'/1,
		      'getScrollPos'/2,
		      'getScrollRange'/2,
		      'getScrollThumb'/2,
		      'getSize'/1,
		      'getSizer'/1,
		      'getStatusText'/1,
		      'getStatusText'/2,
		      'getTextExtent'/2,
		      'getTextExtent'/3,
		      'getToolTip'/1,
		      'getUpdateRegion'/1,
		      'getVirtualSize'/1,
		      'getWindowStyleFlag'/1,
		      'getWindowVariant'/1,
		      'hasCapture'/1,
		      'hasScrollbar'/2,
		      'hasTransparentBackground'/1,
		      'hide'/1,
		      'inheritAttributes'/1,
		      'initDialog'/1,
		      'invalidateBestSize'/1,
		      'isEnabled'/1,
		      'isExposed'/2,
		      'isExposed'/3,
		      'isExposed'/5,
		      'isRetained'/1,
		      'isShown'/1,
		      'isTopLevel'/1,
		      'layout'/1,
		      'lineDown'/1,
		      'lineUp'/1,
		      'lower'/1,
		      'makeModal'/1,
		      'makeModal'/2,
		      'module_info'/0,
		      'module_info'/1,
		      'move'/2,
		      'move'/3,
		      'move'/4,
		      'moveAfterInTabOrder'/2,
		      'moveBeforeInTabOrder'/2,
		      'navigate'/1,
		      'navigate'/2,
		      'new'/0,
		      'new'/1,
		      'new'/2,
		      'pageDown'/1,
		      'pageUp'/1,
		      'parent_class'/1,
		      'popEventHandler'/1,
		      'popEventHandler'/2,
		      'popStatusText'/1,
		      'popStatusText'/2,
		      'popupMenu'/2,
		      'popupMenu'/3,
		      'popupMenu'/4,
		      'pushStatusText'/2,
		      'pushStatusText'/3,
		      'raise'/1,
		      'refresh'/1,
		      'refresh'/2,
		      'refreshRect'/2,
		      'refreshRect'/3,
		      'releaseMouse'/1,
		      'removeChild'/2,
		      'reparent'/2,
		      'screenToClient'/1,
		      'screenToClient'/2,
		      'scrollLines'/2,
		      'scrollPages'/2,
		      'scrollWindow'/3,
		      'scrollWindow'/4,
		      'setAcceleratorTable'/2,
		      'setAutoLayout'/2,
		      'setBackgroundColour'/2,
		      'setBackgroundStyle'/2,
		      'setCaret'/2,
		      'setClientSize'/2,
		      'setClientSize'/3,
		      'setContainingSizer'/2,
		      'setCursor'/2,
		      'setDropTarget'/2,
		      'setExtraStyle'/2,
		      'setFieldsCount'/2,
		      'setFieldsCount'/3,
		      'setFocus'/1,
		      'setFocusFromKbd'/1,
		      'setFont'/2,
		      'setForegroundColour'/2,
		      'setHelpText'/2,
		      'setId'/2,
		      'setLabel'/2,
		      'setMaxSize'/2,
		      'setMinHeight'/2,
		      'setMinSize'/2,
		      'setName'/2,
		      'setOwnBackgroundColour'/2,
		      'setOwnFont'/2,
		      'setOwnForegroundColour'/2,
		      'setPalette'/2,
		      'setScrollPos'/3,
		      'setScrollPos'/4,
		      'setScrollbar'/5,
		      'setScrollbar'/6,
		      'setSize'/2,
		      'setSize'/3,
		      'setSize'/5,
		      'setSize'/6,
		      'setSizeHints'/2,
		      'setSizeHints'/3,
		      'setSizeHints'/4,
		      'setSizer'/2,
		      'setSizer'/3,
		      'setSizerAndFit'/2,
		      'setSizerAndFit'/3,
		      'setStatusStyles'/2,
		      'setStatusText'/2,
		      'setStatusText'/3,
		      'setStatusWidths'/2,
		      'setThemeEnabled'/2,
		      'setToolTip'/2,
		      'setVirtualSize'/2,
		      'setVirtualSize'/3,
		      'setVirtualSizeHints'/2,
		      'setVirtualSizeHints'/3,
		      'setVirtualSizeHints'/4,
		      'setWindowStyle'/2,
		      'setWindowStyleFlag'/2,
		      'setWindowVariant'/2,
		      'shouldInheritColours'/1,
		      'show'/1,
		      'show'/2,
		      'thaw'/1,
		      'transferDataFromWindow'/1,
		      'transferDataToWindow'/1,
		      'update'/1,
		      'updateWindowUI'/1,
		      'updateWindowUI'/2,
		      'validate'/1,
		      'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 74
		'export_type' =
		    %% Line 74
		    [{'wxStatusBar',0}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'wxStatusBar',{'remote_type',80,[{'atom',80,'wx'}|[{'atom',80,'wx_object'}|[[]]]]},[]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'new',0},[{'type',82,'fun',[{'type',82,'product',[]}|[{'type',82,'wxStatusBar',[]}]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'new',1},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'Parent'}]}|[{'type',88,'wxStatusBar',[]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Parent'}|[{'remote_type',89,[{'atom',89,'wxWindow'}|[{'atom',89,'wxWindow'}|[[]]]]}]]]]}]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'new',2},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'Parent'}|[{'type',96,'list',[{'var',96,'Option'}]}]]}|[{'type',96,'wxStatusBar',[]}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Parent'}|[{'remote_type',97,[{'atom',97,'wxWindow'}|[{'atom',97,'wxWindow'}|[[]]]]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Option'}|[{'type',98,'union',[{'type',98,'tuple',[{'atom',98,'winid'}|[{'type',98,'integer',[]}]]}|[{'type',99,'tuple',[{'atom',99,'style'}|[{'type',99,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'create',2},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'This'}|[{'var',111,'Parent'}]]}|[{'type',111,'boolean',[]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'This'}|[{'type',112,'wxStatusBar',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Parent'}|[{'remote_type',112,[{'atom',112,'wxWindow'}|[{'atom',112,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'create',3},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'This'}|[{'var',119,'Parent'}|[{'type',119,'list',[{'var',119,'Option'}]}]]]}|[{'type',119,'boolean',[]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'This'}|[{'type',120,'wxStatusBar',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Parent'}|[{'remote_type',120,[{'atom',120,'wxWindow'}|[{'atom',120,'wxWindow'}|[[]]]]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Option'}|[{'type',121,'union',[{'type',121,'tuple',[{'atom',121,'winid'}|[{'type',121,'integer',[]}]]}|[{'type',122,'tuple',[{'atom',122,'style'}|[{'type',122,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'getFieldRect',2},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'This'}|[{'var',135,'I'}]]}|[{'var',135,'Result'}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Result'}|[{'type',136,'tuple',[{'ann_type',136,[{'var',136,'Res'}|[{'type',136,'boolean',[]}]]}|[{'ann_type',136,[{'var',136,'Rect'}|[{'type',136,'tuple',[{'ann_type',136,[{'var',136,'X'}|[{'type',136,'integer',[]}]]}|[{'ann_type',136,[{'var',136,'Y'}|[{'type',136,'integer',[]}]]}|[{'ann_type',136,[{'var',136,'W'}|[{'type',136,'integer',[]}]]}|[{'ann_type',136,[{'var',136,'H'}|[{'type',136,'integer',[]}]]}]]]]}]]}]]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxStatusBar',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'I'}|[{'type',137,'integer',[]}]]]]}]]]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'getFieldsCount',1},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}]}|[{'type',145,'integer',[]}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxStatusBar',[]}]]]]}]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'getStatusText',1},[{'type',153,'bounded_fun',[{'type',153,'fun',[{'type',153,'product',[{'var',153,'This'}]}|[{'remote_type',153,[{'atom',153,'unicode'}|[{'atom',153,'charlist'}|[[]]]]}]]}|[[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'This'}|[{'type',154,'wxStatusBar',[]}]]]]}]]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'getStatusText',2},[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'This'}|[{'type',161,'list',[{'var',161,'Option'}]}]]}|[{'remote_type',161,[{'atom',161,'unicode'}|[{'atom',161,'charlist'}|[[]]]]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'This'}|[{'type',162,'wxStatusBar',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Option'}|[{'type',163,'tuple',[{'atom',163,'number'}|[{'type',163,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'popStatusText',1},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'This'}]}|[{'atom',174,'ok'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'This'}|[{'type',175,'wxStatusBar',[]}]]]]}]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'popStatusText',2},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}|[{'type',182,'list',[{'var',182,'Option'}]}]]}|[{'atom',182,'ok'}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxStatusBar',[]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Option'}|[{'type',184,'tuple',[{'atom',184,'number'}|[{'type',184,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'pushStatusText',2},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'This'}|[{'var',195,'Text'}]]}|[{'atom',195,'ok'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'This'}|[{'type',196,'wxStatusBar',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Text'}|[{'remote_type',196,[{'atom',196,'unicode'}|[{'atom',196,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'pushStatusText',3},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}|[{'var',203,'Text'}|[{'type',203,'list',[{'var',203,'Option'}]}]]]}|[{'atom',203,'ok'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxStatusBar',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Text'}|[{'remote_type',204,[{'atom',204,'unicode'}|[{'atom',204,'chardata'}|[[]]]]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Option'}|[{'type',205,'tuple',[{'atom',205,'number'}|[{'type',205,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'setFieldsCount',2},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'This'}|[{'var',217,'Number'}]]}|[{'atom',217,'ok'}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'This'}|[{'type',218,'wxStatusBar',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Number'}|[{'type',218,'integer',[]}]]]]}]]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'setFieldsCount',3},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'This'}|[{'var',225,'Number'}|[{'type',225,'list',[{'var',225,'Option'}]}]]]}|[{'atom',225,'ok'}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'This'}|[{'type',226,'wxStatusBar',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Number'}|[{'type',226,'integer',[]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Option'}|[{'type',227,'tuple',[{'atom',227,'widths'}|[{'type',227,'list',[{'type',227,'integer',[]}]}]]}]]]]}]]]]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'setMinHeight',2},[{'type',239,'bounded_fun',[{'type',239,'fun',[{'type',239,'product',[{'var',239,'This'}|[{'var',239,'Height'}]]}|[{'atom',239,'ok'}]]}|[[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'This'}|[{'type',240,'wxStatusBar',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Height'}|[{'type',240,'integer',[]}]]]]}]]]]}]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'setStatusText',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'This'}|[{'var',248,'Text'}]]}|[{'atom',248,'ok'}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'This'}|[{'type',249,'wxStatusBar',[]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Text'}|[{'remote_type',249,[{'atom',249,'unicode'}|[{'atom',249,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'setStatusText',3},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'This'}|[{'var',256,'Text'}|[{'type',256,'list',[{'var',256,'Option'}]}]]]}|[{'atom',256,'ok'}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'This'}|[{'type',257,'wxStatusBar',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Text'}|[{'remote_type',257,[{'atom',257,'unicode'}|[{'atom',257,'chardata'}|[[]]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Option'}|[{'type',258,'tuple',[{'atom',258,'number'}|[{'type',258,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'setStatusWidths',2},[{'type',270,'bounded_fun',[{'type',270,'fun',[{'type',270,'product',[{'var',270,'This'}|[{'var',270,'Widths_field'}]]}|[{'atom',270,'ok'}]]}|[[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'This'}|[{'type',271,'wxStatusBar',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Widths_field'}|[{'type',271,'list',[{'type',271,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 280
		'spec' =
		    %% Line 280
		    [{{'setStatusStyles',2},[{'type',280,'bounded_fun',[{'type',280,'fun',[{'type',280,'product',[{'var',280,'This'}|[{'var',280,'Styles'}]]}|[{'atom',280,'ok'}]]}|[[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'This'}|[{'type',281,'wxStatusBar',[]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Styles'}|[{'type',281,'list',[{'type',281,'integer',[]}]}]]]]}]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'destroy',1},[{'type',290,'fun',[{'type',290,'product',[{'ann_type',290,[{'var',290,'This'}|[{'type',290,'wxStatusBar',[]}]]}]}|[{'atom',290,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 76
    fun (_cor0) ->
	case _cor0 of
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 77
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 78
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxStatusBar'})
	end
'new'/0 =
    %% Line 83
    fun () ->
	%% Line 84
	call 'wxe_util':'construct'
	    (1015, %% Line 85
		   #{}#)
'new'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <Parent = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 92
						       ( 'true'
							 -| ['compiler_generated'] ) ->
	      %% Line 93
	      apply 'new'/2
		  (Parent, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor16},Options>
	      when %% Line 101
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 103
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'winid',Winid},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Winid>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 104
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 105
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 106
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 106
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 108
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 107
				  call 'wxe_util':'construct'
				      (1016, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Parent = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 116
	      apply 'create'/3
		  (This, Parent, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 123
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',ParentRef,ParentT,_cor21},Options>
	      when %% Line 124
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 125
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 126
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 127
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'winid',Winid},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Winid>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 128
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 129
				  <BadOpt,_cor22> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 130
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 130
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 132
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 131
				      call 'wxe_util':'call'
					  (1019, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'getFieldRect'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},I>
	      when %% Line 139
		call 'erlang':'is_integer'
		    (I) ->
	      do  %% Line 140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 142
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<I>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 141
		      call 'wxe_util':'call'
			  (1020, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getFieldRect',2}}] )
	    -| ['compiler_generated'] )
	end
'getFieldsCount'/1 =
    %% Line 147
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 148
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 150
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 149
		      call 'wxe_util':'call'
			  (1021, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFieldsCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getStatusText'/1 =
    %% Line 156
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 157
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 158
	      apply 'getStatusText'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getStatusText',1}}] )
	    -| ['compiler_generated'] )
	end
'getStatusText'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 165
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 166
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 167
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'number',Number},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Number>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 168
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getStatusText/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 169
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 169
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 171
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 170
				  call 'wxe_util':'call'
				      (1022, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'getStatusText',2}}] )
	    -| ['compiler_generated'] )
	end
'popStatusText'/1 =
    %% Line 177
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 178
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 179
	      apply 'popStatusText'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'popStatusText',1}}] )
	    -| ['compiler_generated'] )
	end
'popStatusText'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 186
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 187
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 188
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'number',Number},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Number>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 189
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-popStatusText/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 190
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 190
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 192
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 191
				  call 'wxe_util':'cast'
				      (1023, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'popStatusText',2}}] )
	    -| ['compiler_generated'] )
	end
'pushStatusText'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Text>
	      when %% Line 199
		call 'erlang':'is_list'
		    (Text) ->
	      %% Line 200
	      apply 'pushStatusText'/3
		  (This, Text, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'pushStatusText',2}}] )
	    -| ['compiler_generated'] )
	end
'pushStatusText'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Text,Options>
	      when let <_cor3> =
		    %% Line 207
		    call 'erlang':'is_list'
			(Text)
		in  let <_cor4> =
			%% Line 207
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 207
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 208
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 209
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 210
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'number',Number},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Number>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 211
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-pushStatusText/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 212
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 212
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 214
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor16> =
					  %% Line 214
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor17> =
					      %% Line 214
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 214
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 214
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 214
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 214
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 213
							      call 'wxe_util':'cast'
								  (1024, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'pushStatusText',3}}] )
	    -| ['compiler_generated'] )
	end
'setFieldsCount'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Number>
	      when %% Line 221
		call 'erlang':'is_integer'
		    (Number) ->
	      %% Line 222
	      apply 'setFieldsCount'/3
		  (This, Number, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setFieldsCount',2}}] )
	    -| ['compiler_generated'] )
	end
'setFieldsCount'/3 =
    %% Line 228
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Number,Options>
	      when let <_cor3> =
		    %% Line 229
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor4> =
			%% Line 229
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 229
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 230
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 231
		      ( fun (_cor22,_cor21) ->
			    case <_cor22,_cor21> of
			      <{'widths',Widths},Acc> when 'true' ->
				  let <_cor19> =
				      call 'erlang':'length'
					  (Widths)
				  in  let <_cor13> =
					  %% Line 232
					  call 'erlang':'length'
					      (Widths)
				      in  let <_cor12> =
					      call 'erlang':'*'
						  (_cor13, 4)
					  in  let <_cor11> =
						  primop 'bs_init_writable'
						      (_cor12)
					      in  let <_cor18> =
						      %% Line 232
						      ( letrec
							    'lbc$^0'/2 =
								fun (_cor17,_cor16) ->
								    case <_cor17,_cor16> of
								      <[C|_cor15],_cor16> when 'true' ->
									  let <_cor16> =
									      ( #{#<_cor16>('all',1,'binary',[]),
										  #<C>(32,1,'integer',['signed'|['native']])}#
										-| ['compiler_generated','single_use'] )
									  in  apply 'lbc$^0'/2
										  (_cor15, _cor16)
								      <[],_cor16> when 'true' ->
									  _cor16
								      ( <_cor17,_cor16> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor17,_cor16})
									      -| [{'function_name',{'lbc$^0',2}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lbc$^0'/2
								(Widths, _cor11)
							-| ['list_comprehension'] )
						  in  let <_cor7> =
							  %% Line 232
							  call 'erlang':'length'
							      (Widths)
						      in  let <_cor8> =
							      %% Line 232
							      call 'erlang':'+'
								  (0, _cor7)
							  in  let <_cor9> =
								  %% Line 232
								  call 'erlang':'rem'
								      (_cor8, 2)
							      in  let <_cor10> =
								      %% Line 232
								      call 'erlang':'*'
									  (_cor9, 32)
								  in  let <_cor20> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor19>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor18>(%% Line 232
										      'all',8,'binary',['unsigned'|['big']]),
									    #<%% Line 232
									      0>(_cor10,1,'integer',['unsigned'|['big']])}#
								      in  [_cor20|%% Line 232
										  Acc]
			      %% Line 233
			      <BadOpt,_cor33> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setFieldsCount/3-fun-0-'}}] )
		  in  let <_cor26> =
			  %% Line 234
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 234
			      call 'erlang':'list_to_binary'
				  (_cor26)
			  in  let <_cor28> =
				  %% Line 236
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Number>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 235
				  call 'wxe_util':'cast'
				      (1025, _cor28)
	  ( <_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29})
		  -| [{'function_name',{'setFieldsCount',3}}] )
	    -| ['compiler_generated'] )
	end
'setMinHeight'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Height>
	      when %% Line 242
		call 'erlang':'is_integer'
		    (Height) ->
	      do  %% Line 243
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 245
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 244
		      call 'wxe_util':'cast'
			  (1026, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setMinHeight',2}}] )
	    -| ['compiler_generated'] )
	end
'setStatusText'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Text>
	      when %% Line 252
		call 'erlang':'is_list'
		    (Text) ->
	      %% Line 253
	      apply 'setStatusText'/3
		  (This, Text, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setStatusText',2}}] )
	    -| ['compiler_generated'] )
	end
'setStatusText'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Text,Options>
	      when let <_cor3> =
		    %% Line 260
		    call 'erlang':'is_list'
			(Text)
		in  let <_cor4> =
			%% Line 260
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 260
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 261
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 262
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 263
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'number',Number},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Number>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 264
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setStatusText/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 265
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 265
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 267
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor16> =
					  %% Line 267
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor17> =
					      %% Line 267
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 267
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 267
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 267
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 267
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 266
							      call 'wxe_util':'cast'
								  (1027, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'setStatusText',3}}] )
	    -| ['compiler_generated'] )
	end
'setStatusWidths'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Widths_field>
	      when %% Line 273
		call 'erlang':'is_list'
		    (Widths_field) ->
	      do  %% Line 274
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 276
		      call 'erlang':'length'
			  (Widths_field)
		  in  let <_cor10> =
			  %% Line 277
			  call 'erlang':'length'
			      (Widths_field)
		      in  let <_cor9> =
			      call 'erlang':'*'
				  (_cor10, 4)
			  in  let <_cor8> =
				  primop 'bs_init_writable'
				      (_cor9)
			      in  let <_cor15> =
				      %% Line 277
				      ( letrec
					    'lbc$^0'/2 =
						fun (_cor14,_cor13) ->
						    case <_cor14,_cor13> of
						      <[C|_cor12],_cor13> when 'true' ->
							  let <_cor13> =
							      ( #{#<_cor13>('all',1,'binary',[]),
								  #<C>(32,1,'integer',['signed'|['native']])}#
								-| ['compiler_generated','single_use'] )
							  in  apply 'lbc$^0'/2
								  (_cor12, _cor13)
						      <[],_cor13> when 'true' ->
							  _cor13
						      ( <_cor14,_cor13> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14,_cor13})
							      -| [{'function_name',{'lbc$^0',2}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lbc$^0'/2
						(Widths_field, _cor8)
					-| ['list_comprehension'] )
				  in  let <_cor4> =
					  %% Line 277
					  call 'erlang':'length'
					      (Widths_field)
				      in  let <_cor5> =
					      %% Line 277
					      call 'erlang':'+'
						  (0, _cor4)
					  in  let <_cor6> =
						  %% Line 277
						  call 'erlang':'rem'
						      (_cor5, 2)
					      in  let <_cor7> =
						      %% Line 277
						      call 'erlang':'*'
							  (_cor6, 32)
						  in  let <_cor17> =
							  %% Line 276
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor15>(%% Line 277
								      'all',8,'binary',['unsigned'|['big']]),
							    #<%% Line 277
							      0>(_cor7,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 275
							  call 'wxe_util':'cast'
							      (1028, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'setStatusWidths',2}}] )
	    -| ['compiler_generated'] )
	end
'setStatusStyles'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Styles>
	      when %% Line 283
		call 'erlang':'is_list'
		    (Styles) ->
	      do  %% Line 284
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 286
		      call 'erlang':'length'
			  (Styles)
		  in  let <_cor10> =
			  %% Line 287
			  call 'erlang':'length'
			      (Styles)
		      in  let <_cor9> =
			      call 'erlang':'*'
				  (_cor10, 4)
			  in  let <_cor8> =
				  primop 'bs_init_writable'
				      (_cor9)
			      in  let <_cor15> =
				      %% Line 287
				      ( letrec
					    'lbc$^0'/2 =
						fun (_cor14,_cor13) ->
						    case <_cor14,_cor13> of
						      <[C|_cor12],_cor13> when 'true' ->
							  let <_cor13> =
							      ( #{#<_cor13>('all',1,'binary',[]),
								  #<C>(32,1,'integer',['signed'|['native']])}#
								-| ['compiler_generated','single_use'] )
							  in  apply 'lbc$^0'/2
								  (_cor12, _cor13)
						      <[],_cor13> when 'true' ->
							  _cor13
						      ( <_cor14,_cor13> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14,_cor13})
							      -| [{'function_name',{'lbc$^0',2}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lbc$^0'/2
						(Styles, _cor8)
					-| ['list_comprehension'] )
				  in  let <_cor4> =
					  %% Line 287
					  call 'erlang':'length'
					      (Styles)
				      in  let <_cor5> =
					      %% Line 287
					      call 'erlang':'+'
						  (0, _cor4)
					  in  let <_cor6> =
						  %% Line 287
						  call 'erlang':'rem'
						      (_cor5, 2)
					      in  let <_cor7> =
						      %% Line 287
						      call 'erlang':'*'
							  (_cor6, 32)
						  in  let <_cor17> =
							  %% Line 286
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor15>(%% Line 287
								      'all',8,'binary',['unsigned'|['big']]),
							    #<%% Line 287
							      0>(_cor7,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 285
							  call 'wxe_util':'cast'
							      (1029, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'setStatusStyles',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 291
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 292
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxStatusBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxStatusBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 293
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 294
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'warpPointer'/3 =
    %% Line 297
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 299
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 301
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 303
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 305
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 307
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 309
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 311
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 313
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 315
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 317
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 321
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 325
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 327
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 341
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 343
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 345
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 347
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 349
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 351
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 353
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 355
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 357
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 361
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 365
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 367
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 369
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setLabel'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setLabel'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 375
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 381
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 383
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 385
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 395
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 405
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 407
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 417
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 419
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 421
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 427
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 429
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 433
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 435
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 437
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 439
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 441
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 443
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 445
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 449
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 451
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 455
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 457
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 459
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 461
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 463
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 467
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 469
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 471
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 473
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 475
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 477
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 479
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 481
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 483
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 485
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 487
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 489
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 491
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 493
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 495
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 497
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 499
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 501
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 503
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 505
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 507
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 509
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 513
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 515
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 517
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 519
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 521
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 523
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 525
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 527
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 529
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 531
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 533
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 539
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 541
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 543
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 545
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 547
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 549
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 551
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 553
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getLabel'/1 =
    %% Line 555
    fun (_cor0) ->
	call 'wxWindow':'getLabel'
	    (_cor0)
'getId'/1 =
    %% Line 557
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 559
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 561
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 563
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 565
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 567
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 569
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 571
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 573
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 575
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 577
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 579
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 581
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 583
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 585
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 587
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 589
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 591
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 593
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 595
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 597
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 599
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 601
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 603
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 607
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 609
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 611
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 613
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 615
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 617
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 619
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 621
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 623
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 625
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 629
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 633
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 635
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 637
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 639
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 641
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 643
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 645
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 648
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 652
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 654
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 656
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxStatusBar')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxStatusBar', _cor0)
end