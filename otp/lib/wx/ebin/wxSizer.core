module 'wxSizer' ['add'/2,
		  'add'/3,
		  'add'/4,
		  'addSpacer'/2,
		  'addStretchSpacer'/1,
		  'addStretchSpacer'/2,
		  'calcMin'/1,
		  'clear'/1,
		  'clear'/2,
		  'detach'/2,
		  'fit'/2,
		  'fitInside'/2,
		  'getChildren'/1,
		  'getItem'/2,
		  'getItem'/3,
		  'getMinSize'/1,
		  'getPosition'/1,
		  'getSize'/1,
		  'hide'/2,
		  'hide'/3,
		  'insert'/3,
		  'insert'/4,
		  'insert'/5,
		  'insertSpacer'/3,
		  'insertStretchSpacer'/2,
		  'insertStretchSpacer'/3,
		  'isShown'/2,
		  'layout'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'parent_class'/1,
		  'prepend'/2,
		  'prepend'/3,
		  'prepend'/4,
		  'prependSpacer'/2,
		  'prependStretchSpacer'/1,
		  'prependStretchSpacer'/2,
		  'recalcSizes'/1,
		  'remove'/2,
		  'replace'/3,
		  'replace'/4,
		  'setDimension'/5,
		  'setItemMinSize'/3,
		  'setItemMinSize'/4,
		  'setMinSize'/2,
		  'setMinSize'/3,
		  'setSizeHints'/2,
		  'setVirtualSizeHints'/2,
		  'show'/2,
		  'show'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 39
		'export_type' =
		    %% Line 39
		    [{'wxSizer',0}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'wxSizer',{'remote_type',43,[{'atom',43,'wx'}|[{'atom',43,'wx_object'}|[[]]]]},[]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'add',2},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'This'}|[{'var',45,'Window'}]]}|[{'remote_type',45,[{'atom',45,'wxSizerItem'}|[{'atom',45,'wxSizerItem'}|[[]]]]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'This'}|[{'type',46,'wxSizer',[]}]]]]}|[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Window'}|[{'type',46,'union',[{'remote_type',46,[{'atom',46,'wxWindow'}|[{'atom',46,'wxWindow'}|[[]]]]}|[{'type',46,'wxSizer',[]}]]}]]]]}]]]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'add',3},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'This'}|[{'var',63,'Width'}|[{'var',63,'Height'}]]]}|[{'remote_type',63,[{'atom',63,'wxSizerItem'}|[{'atom',63,'wxSizerItem'}|[[]]]]}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'This'}|[{'type',64,'wxSizer',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Width'}|[{'type',64,'integer',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Height'}|[{'type',64,'integer',[]}]]]]}]]]]]}|[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'This'}|[{'var',65,'Window'}|[{'type',65,'list',[{'var',65,'Option'}]}]]]}|[{'remote_type',65,[{'atom',65,'wxSizerItem'}|[{'atom',65,'wxSizerItem'}|[[]]]]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'This'}|[{'type',66,'wxSizer',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Window'}|[{'type',66,'union',[{'remote_type',66,[{'atom',66,'wxWindow'}|[{'atom',66,'wxWindow'}|[[]]]]}|[{'type',66,'wxSizer',[]}]]}]]]]}|[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Option'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'proportion'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'flag'}|[{'type',68,'integer',[]}]]}|[{'type',69,'tuple',[{'atom',69,'border'}|[{'type',69,'integer',[]}]]}|[{'type',70,'tuple',[{'atom',70,'userData'}|[{'remote_type',70,[{'atom',70,'wx'}|[{'atom',70,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]}|[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'This'}|[{'var',71,'Window'}|[{'var',71,'Flags'}]]]}|[{'remote_type',71,[{'atom',71,'wxSizerItem'}|[{'atom',71,'wxSizerItem'}|[[]]]]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'This'}|[{'type',72,'wxSizer',[]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Window'}|[{'type',72,'union',[{'remote_type',72,[{'atom',72,'wxWindow'}|[{'atom',72,'wxWindow'}|[[]]]]}|[{'type',72,'wxSizer',[]}]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Flags'}|[{'remote_type',72,[{'atom',72,'wxSizerFlags'}|[{'atom',72,'wxSizerFlags'}|[[]]]]}]]]]}]]]]]}]]]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'add',4},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}|[{'var',108,'Width'}|[{'var',108,'Height'}|[{'type',108,'list',[{'var',108,'Option'}]}]]]]}|[{'remote_type',108,[{'atom',108,'wxSizerItem'}|[{'atom',108,'wxSizerItem'}|[[]]]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxSizer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Width'}|[{'type',109,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Height'}|[{'type',109,'integer',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Option'}|[{'type',110,'union',[{'type',110,'tuple',[{'atom',110,'proportion'}|[{'type',110,'integer',[]}]]}|[{'type',111,'tuple',[{'atom',111,'flag'}|[{'type',111,'integer',[]}]]}|[{'type',112,'tuple',[{'atom',112,'border'}|[{'type',112,'integer',[]}]]}|[{'type',113,'tuple',[{'atom',113,'userData'}|[{'remote_type',113,[{'atom',113,'wx'}|[{'atom',113,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'addSpacer',2},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'This'}|[{'var',127,'Size'}]]}|[{'remote_type',127,[{'atom',127,'wxSizerItem'}|[{'atom',127,'wxSizerItem'}|[[]]]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'This'}|[{'type',128,'wxSizer',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Size'}|[{'type',128,'integer',[]}]]]]}]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'addStretchSpacer',1},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}]}|[{'remote_type',136,[{'atom',136,'wxSizerItem'}|[{'atom',136,'wxSizerItem'}|[[]]]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'addStretchSpacer',2},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'This'}|[{'type',144,'list',[{'var',144,'Option'}]}]]}|[{'remote_type',144,[{'atom',144,'wxSizerItem'}|[{'atom',144,'wxSizerItem'}|[[]]]]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'This'}|[{'type',145,'wxSizer',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Option'}|[{'type',146,'tuple',[{'atom',146,'prop'}|[{'type',146,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'calcMin',1},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'This'}]}|[{'type',157,'tuple',[{'ann_type',157,[{'var',157,'W'}|[{'type',157,'integer',[]}]]}|[{'ann_type',157,[{'var',157,'H'}|[{'type',157,'integer',[]}]]}]]}]]}|[[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'This'}|[{'type',158,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'clear',1},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'This'}]}|[{'atom',165,'ok'}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'This'}|[{'type',166,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'clear',2},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}|[{'type',173,'list',[{'var',173,'Option'}]}]]}|[{'atom',173,'ok'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxSizer',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Option'}|[{'type',175,'tuple',[{'atom',175,'delete_windows'}|[{'type',175,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'detach',2},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'This'}|[{'var',190,'Index'}]]}|[{'type',190,'boolean',[]}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'This'}|[{'type',191,'wxSizer',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Index'}|[{'type',191,'integer',[]}]]]]}]]]]}|[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'This'}|[{'var',192,'Window'}]]}|[{'type',192,'boolean',[]}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'This'}|[{'type',193,'wxSizer',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Window'}|[{'type',193,'union',[{'remote_type',193,[{'atom',193,'wxWindow'}|[{'atom',193,'wxWindow'}|[[]]]]}|[{'type',193,'wxSizer',[]}]]}]]]]}]]]]}]]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'fit',2},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'This'}|[{'var',211,'Window'}]]}|[{'type',211,'tuple',[{'ann_type',211,[{'var',211,'W'}|[{'type',211,'integer',[]}]]}|[{'ann_type',211,[{'var',211,'H'}|[{'type',211,'integer',[]}]]}]]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'This'}|[{'type',212,'wxSizer',[]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Window'}|[{'remote_type',212,[{'atom',212,'wxWindow'}|[{'atom',212,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'fitInside',2},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'This'}|[{'var',220,'Window'}]]}|[{'atom',220,'ok'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'This'}|[{'type',221,'wxSizer',[]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Window'}|[{'remote_type',221,[{'atom',221,'wxWindow'}|[{'atom',221,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'getChildren',1},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}]}|[{'type',229,'list',[{'remote_type',229,[{'atom',229,'wxSizerItem'}|[{'atom',229,'wxSizerItem'}|[[]]]]}]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 241
		'spec' =
		    %% Line 241
		    [{{'getItem',2},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'This'}|[{'var',241,'Window'}]]}|[{'remote_type',241,[{'atom',241,'wxSizerItem'}|[{'atom',241,'wxSizerItem'}|[[]]]]}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'This'}|[{'type',242,'wxSizer',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Window'}|[{'type',242,'union',[{'remote_type',242,[{'atom',242,'wxWindow'}|[{'atom',242,'wxWindow'}|[[]]]]}|[{'type',242,'wxSizer',[]}]]}]]]]}]]]]}|[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'This'}|[{'var',243,'Index'}]]}|[{'remote_type',243,[{'atom',243,'wxSizerItem'}|[{'atom',243,'wxSizerItem'}|[[]]]]}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'This'}|[{'type',244,'wxSizer',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Index'}|[{'type',244,'integer',[]}]]]]}]]]]}]]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'getItem',3},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'This'}|[{'var',256,'Window'}|[{'type',256,'list',[{'var',256,'Option'}]}]]]}|[{'remote_type',256,[{'atom',256,'wxSizerItem'}|[{'atom',256,'wxSizerItem'}|[[]]]]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'This'}|[{'type',257,'wxSizer',[]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Window'}|[{'type',257,'union',[{'remote_type',257,[{'atom',257,'wxWindow'}|[{'atom',257,'wxWindow'}|[[]]]]}|[{'type',257,'wxSizer',[]}]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Option'}|[{'type',258,'tuple',[{'atom',258,'recursive'}|[{'type',258,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'getSize',1},[{'type',275,'bounded_fun',[{'type',275,'fun',[{'type',275,'product',[{'var',275,'This'}]}|[{'type',275,'tuple',[{'ann_type',275,[{'var',275,'W'}|[{'type',275,'integer',[]}]]}|[{'ann_type',275,[{'var',275,'H'}|[{'type',275,'integer',[]}]]}]]}]]}|[[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'This'}|[{'type',276,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'getPosition',1},[{'type',283,'bounded_fun',[{'type',283,'fun',[{'type',283,'product',[{'var',283,'This'}]}|[{'type',283,'tuple',[{'ann_type',283,[{'var',283,'X'}|[{'type',283,'integer',[]}]]}|[{'ann_type',283,[{'var',283,'Y'}|[{'type',283,'integer',[]}]]}]]}]]}|[[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'This'}|[{'type',284,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'getMinSize',1},[{'type',291,'bounded_fun',[{'type',291,'fun',[{'type',291,'product',[{'var',291,'This'}]}|[{'type',291,'tuple',[{'ann_type',291,[{'var',291,'W'}|[{'type',291,'integer',[]}]]}|[{'ann_type',291,[{'var',291,'H'}|[{'type',291,'integer',[]}]]}]]}]]}|[[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'This'}|[{'type',292,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'hide',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'This'}|[{'var',303,'Window'}]]}|[{'type',303,'boolean',[]}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'This'}|[{'type',304,'wxSizer',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Window'}|[{'type',304,'union',[{'remote_type',304,[{'atom',304,'wxWindow'}|[{'atom',304,'wxWindow'}|[[]]]]}|[{'type',304,'wxSizer',[]}]]}]]]]}]]]]}|[{'type',305,'bounded_fun',[{'type',305,'fun',[{'type',305,'product',[{'var',305,'This'}|[{'var',305,'Index'}]]}|[{'type',305,'boolean',[]}]]}|[[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'This'}|[{'type',306,'wxSizer',[]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Index'}|[{'type',306,'integer',[]}]]]]}]]]]}]]}],
		%% Line 318
		'spec' =
		    %% Line 318
		    [{{'hide',3},[{'type',318,'bounded_fun',[{'type',318,'fun',[{'type',318,'product',[{'var',318,'This'}|[{'var',318,'Window'}|[{'type',318,'list',[{'var',318,'Option'}]}]]]}|[{'type',318,'boolean',[]}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'This'}|[{'type',319,'wxSizer',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Window'}|[{'type',319,'union',[{'remote_type',319,[{'atom',319,'wxWindow'}|[{'atom',319,'wxWindow'}|[[]]]]}|[{'type',319,'wxSizer',[]}]]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Option'}|[{'type',320,'tuple',[{'atom',320,'recursive'}|[{'type',320,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'insert',3},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'This'}|[{'var',337,'Index'}|[{'var',337,'Item'}]]]}|[{'remote_type',337,[{'atom',337,'wxSizerItem'}|[{'atom',337,'wxSizerItem'}|[[]]]]}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'This'}|[{'type',338,'wxSizer',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Index'}|[{'type',338,'integer',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Item'}|[{'remote_type',338,[{'atom',338,'wxSizerItem'}|[{'atom',338,'wxSizerItem'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 357
		'spec' =
		    %% Line 357
		    [{{'insert',4},[{'type',357,'bounded_fun',[{'type',357,'fun',[{'type',357,'product',[{'var',357,'This'}|[{'var',357,'Index'}|[{'var',357,'Width'}|[{'var',357,'Height'}]]]]}|[{'remote_type',357,[{'atom',357,'wxSizerItem'}|[{'atom',357,'wxSizerItem'}|[[]]]]}]]}|[[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'This'}|[{'type',358,'wxSizer',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Index'}|[{'type',358,'integer',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Width'}|[{'type',358,'integer',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'Height'}|[{'type',358,'integer',[]}]]]]}]]]]]]}|[{'type',359,'bounded_fun',[{'type',359,'fun',[{'type',359,'product',[{'var',359,'This'}|[{'var',359,'Index'}|[{'var',359,'Window'}|[{'type',359,'list',[{'var',359,'Option'}]}]]]]}|[{'remote_type',359,[{'atom',359,'wxSizerItem'}|[{'atom',359,'wxSizerItem'}|[[]]]]}]]}|[[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'This'}|[{'type',360,'wxSizer',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Index'}|[{'type',360,'integer',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Window'}|[{'type',360,'union',[{'remote_type',360,[{'atom',360,'wxWindow'}|[{'atom',360,'wxWindow'}|[[]]]]}|[{'type',360,'wxSizer',[]}]]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Option'}|[{'type',361,'union',[{'type',361,'tuple',[{'atom',361,'proportion'}|[{'type',361,'integer',[]}]]}|[{'type',362,'tuple',[{'atom',362,'flag'}|[{'type',362,'integer',[]}]]}|[{'type',363,'tuple',[{'atom',363,'border'}|[{'type',363,'integer',[]}]]}|[{'type',364,'tuple',[{'atom',364,'userData'}|[{'remote_type',364,[{'atom',364,'wx'}|[{'atom',364,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]}|[{'type',365,'bounded_fun',[{'type',365,'fun',[{'type',365,'product',[{'var',365,'This'}|[{'var',365,'Index'}|[{'var',365,'Window'}|[{'var',365,'Flags'}]]]]}|[{'remote_type',365,[{'atom',365,'wxSizerItem'}|[{'atom',365,'wxSizerItem'}|[[]]]]}]]}|[[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'This'}|[{'type',366,'wxSizer',[]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Index'}|[{'type',366,'integer',[]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Window'}|[{'type',366,'union',[{'remote_type',366,[{'atom',366,'wxWindow'}|[{'atom',366,'wxWindow'}|[[]]]]}|[{'type',366,'wxSizer',[]}]]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Flags'}|[{'remote_type',366,[{'atom',366,'wxSizerFlags'}|[{'atom',366,'wxSizerFlags'}|[[]]]]}]]]]}]]]]]]}]]]}],
		%% Line 403
		'spec' =
		    %% Line 403
		    [{{'insert',5},[{'type',403,'bounded_fun',[{'type',403,'fun',[{'type',403,'product',[{'var',403,'This'}|[{'var',403,'Index'}|[{'var',403,'Width'}|[{'var',403,'Height'}|[{'type',403,'list',[{'var',403,'Option'}]}]]]]]}|[{'remote_type',403,[{'atom',403,'wxSizerItem'}|[{'atom',403,'wxSizerItem'}|[[]]]]}]]}|[[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'This'}|[{'type',404,'wxSizer',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Index'}|[{'type',404,'integer',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Width'}|[{'type',404,'integer',[]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Height'}|[{'type',404,'integer',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Option'}|[{'type',405,'union',[{'type',405,'tuple',[{'atom',405,'proportion'}|[{'type',405,'integer',[]}]]}|[{'type',406,'tuple',[{'atom',406,'flag'}|[{'type',406,'integer',[]}]]}|[{'type',407,'tuple',[{'atom',407,'border'}|[{'type',407,'integer',[]}]]}|[{'type',408,'tuple',[{'atom',408,'userData'}|[{'remote_type',408,[{'atom',408,'wx'}|[{'atom',408,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'insertSpacer',3},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'This'}|[{'var',422,'Index'}|[{'var',422,'Size'}]]]}|[{'remote_type',422,[{'atom',422,'wxSizerItem'}|[{'atom',422,'wxSizerItem'}|[[]]]]}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'This'}|[{'type',423,'wxSizer',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Index'}|[{'type',423,'integer',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Size'}|[{'type',423,'integer',[]}]]]]}]]]]]}]}],
		%% Line 431
		'spec' =
		    %% Line 431
		    [{{'insertStretchSpacer',2},[{'type',431,'bounded_fun',[{'type',431,'fun',[{'type',431,'product',[{'var',431,'This'}|[{'var',431,'Index'}]]}|[{'remote_type',431,[{'atom',431,'wxSizerItem'}|[{'atom',431,'wxSizerItem'}|[[]]]]}]]}|[[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'This'}|[{'type',432,'wxSizer',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Index'}|[{'type',432,'integer',[]}]]]]}]]]]}]}],
		%% Line 439
		'spec' =
		    %% Line 439
		    [{{'insertStretchSpacer',3},[{'type',439,'bounded_fun',[{'type',439,'fun',[{'type',439,'product',[{'var',439,'This'}|[{'var',439,'Index'}|[{'type',439,'list',[{'var',439,'Option'}]}]]]}|[{'remote_type',439,[{'atom',439,'wxSizerItem'}|[{'atom',439,'wxSizerItem'}|[[]]]]}]]}|[[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'This'}|[{'type',440,'wxSizer',[]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Index'}|[{'type',440,'integer',[]}]]]]}|[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Option'}|[{'type',441,'tuple',[{'atom',441,'prop'}|[{'type',441,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 456
		'spec' =
		    %% Line 456
		    [{{'isShown',2},[{'type',456,'bounded_fun',[{'type',456,'fun',[{'type',456,'product',[{'var',456,'This'}|[{'var',456,'Index'}]]}|[{'type',456,'boolean',[]}]]}|[[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'This'}|[{'type',457,'wxSizer',[]}]]]]}|[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'Index'}|[{'type',457,'integer',[]}]]]]}]]]]}|[{'type',458,'bounded_fun',[{'type',458,'fun',[{'type',458,'product',[{'var',458,'This'}|[{'var',458,'Window'}]]}|[{'type',458,'boolean',[]}]]}|[[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'This'}|[{'type',459,'wxSizer',[]}]]]]}|[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'Window'}|[{'type',459,'union',[{'remote_type',459,[{'atom',459,'wxWindow'}|[{'atom',459,'wxWindow'}|[[]]]]}|[{'type',459,'wxSizer',[]}]]}]]]]}]]]]}]]}],
		%% Line 477
		'spec' =
		    %% Line 477
		    [{{'layout',1},[{'type',477,'bounded_fun',[{'type',477,'fun',[{'type',477,'product',[{'var',477,'This'}]}|[{'atom',477,'ok'}]]}|[[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'This'}|[{'type',478,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 485
		'spec' =
		    %% Line 485
		    [{{'prepend',2},[{'type',485,'bounded_fun',[{'type',485,'fun',[{'type',485,'product',[{'var',485,'This'}|[{'var',485,'Item'}]]}|[{'remote_type',485,[{'atom',485,'wxSizerItem'}|[{'atom',485,'wxSizerItem'}|[[]]]]}]]}|[[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'This'}|[{'type',486,'wxSizer',[]}]]]]}|[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'Item'}|[{'remote_type',486,[{'atom',486,'wxSizerItem'}|[{'atom',486,'wxSizerItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'prepend',3},[{'type',504,'bounded_fun',[{'type',504,'fun',[{'type',504,'product',[{'var',504,'This'}|[{'var',504,'Width'}|[{'var',504,'Height'}]]]}|[{'remote_type',504,[{'atom',504,'wxSizerItem'}|[{'atom',504,'wxSizerItem'}|[[]]]]}]]}|[[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'This'}|[{'type',505,'wxSizer',[]}]]]]}|[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Width'}|[{'type',505,'integer',[]}]]]]}|[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Height'}|[{'type',505,'integer',[]}]]]]}]]]]]}|[{'type',506,'bounded_fun',[{'type',506,'fun',[{'type',506,'product',[{'var',506,'This'}|[{'var',506,'Window'}|[{'type',506,'list',[{'var',506,'Option'}]}]]]}|[{'remote_type',506,[{'atom',506,'wxSizerItem'}|[{'atom',506,'wxSizerItem'}|[[]]]]}]]}|[[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'This'}|[{'type',507,'wxSizer',[]}]]]]}|[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'Window'}|[{'type',507,'union',[{'remote_type',507,[{'atom',507,'wxWindow'}|[{'atom',507,'wxWindow'}|[[]]]]}|[{'type',507,'wxSizer',[]}]]}]]]]}|[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'Option'}|[{'type',508,'union',[{'type',508,'tuple',[{'atom',508,'proportion'}|[{'type',508,'integer',[]}]]}|[{'type',509,'tuple',[{'atom',509,'flag'}|[{'type',509,'integer',[]}]]}|[{'type',510,'tuple',[{'atom',510,'border'}|[{'type',510,'integer',[]}]]}|[{'type',511,'tuple',[{'atom',511,'userData'}|[{'remote_type',511,[{'atom',511,'wx'}|[{'atom',511,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]}|[{'type',512,'bounded_fun',[{'type',512,'fun',[{'type',512,'product',[{'var',512,'This'}|[{'var',512,'Window'}|[{'var',512,'Flags'}]]]}|[{'remote_type',512,[{'atom',512,'wxSizerItem'}|[{'atom',512,'wxSizerItem'}|[[]]]]}]]}|[[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'This'}|[{'type',513,'wxSizer',[]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Window'}|[{'type',513,'union',[{'remote_type',513,[{'atom',513,'wxWindow'}|[{'atom',513,'wxWindow'}|[[]]]]}|[{'type',513,'wxSizer',[]}]]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Flags'}|[{'remote_type',513,[{'atom',513,'wxSizerFlags'}|[{'atom',513,'wxSizerFlags'}|[[]]]]}]]]]}]]]]]}]]]}],
		%% Line 549
		'spec' =
		    %% Line 549
		    [{{'prepend',4},[{'type',549,'bounded_fun',[{'type',549,'fun',[{'type',549,'product',[{'var',549,'This'}|[{'var',549,'Width'}|[{'var',549,'Height'}|[{'type',549,'list',[{'var',549,'Option'}]}]]]]}|[{'remote_type',549,[{'atom',549,'wxSizerItem'}|[{'atom',549,'wxSizerItem'}|[[]]]]}]]}|[[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'This'}|[{'type',550,'wxSizer',[]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'Width'}|[{'type',550,'integer',[]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'Height'}|[{'type',550,'integer',[]}]]]]}|[{'type',551,'constraint',[{'atom',551,'is_subtype'}|[[{'var',551,'Option'}|[{'type',551,'union',[{'type',551,'tuple',[{'atom',551,'proportion'}|[{'type',551,'integer',[]}]]}|[{'type',552,'tuple',[{'atom',552,'flag'}|[{'type',552,'integer',[]}]]}|[{'type',553,'tuple',[{'atom',553,'border'}|[{'type',553,'integer',[]}]]}|[{'type',554,'tuple',[{'atom',554,'userData'}|[{'remote_type',554,[{'atom',554,'wx'}|[{'atom',554,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]}]}],
		%% Line 568
		'spec' =
		    %% Line 568
		    [{{'prependSpacer',2},[{'type',568,'bounded_fun',[{'type',568,'fun',[{'type',568,'product',[{'var',568,'This'}|[{'var',568,'Size'}]]}|[{'remote_type',568,[{'atom',568,'wxSizerItem'}|[{'atom',568,'wxSizerItem'}|[[]]]]}]]}|[[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'This'}|[{'type',569,'wxSizer',[]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'Size'}|[{'type',569,'integer',[]}]]]]}]]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'prependStretchSpacer',1},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'This'}]}|[{'remote_type',577,[{'atom',577,'wxSizerItem'}|[{'atom',577,'wxSizerItem'}|[[]]]]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'This'}|[{'type',578,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'prependStretchSpacer',2},[{'type',585,'bounded_fun',[{'type',585,'fun',[{'type',585,'product',[{'var',585,'This'}|[{'type',585,'list',[{'var',585,'Option'}]}]]}|[{'remote_type',585,[{'atom',585,'wxSizerItem'}|[{'atom',585,'wxSizerItem'}|[[]]]]}]]}|[[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'This'}|[{'type',586,'wxSizer',[]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'Option'}|[{'type',587,'tuple',[{'atom',587,'prop'}|[{'type',587,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 598
		'spec' =
		    %% Line 598
		    [{{'recalcSizes',1},[{'type',598,'bounded_fun',[{'type',598,'fun',[{'type',598,'product',[{'var',598,'This'}]}|[{'atom',598,'ok'}]]}|[[{'type',599,'constraint',[{'atom',599,'is_subtype'}|[[{'var',599,'This'}|[{'type',599,'wxSizer',[]}]]]]}]]]}]}],
		%% Line 610
		'spec' =
		    %% Line 610
		    [{{'remove',2},[{'type',610,'bounded_fun',[{'type',610,'fun',[{'type',610,'product',[{'var',610,'This'}|[{'var',610,'Index'}]]}|[{'type',610,'boolean',[]}]]}|[[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'This'}|[{'type',611,'wxSizer',[]}]]]]}|[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Index'}|[{'type',611,'integer',[]}]]]]}]]]]}|[{'type',612,'bounded_fun',[{'type',612,'fun',[{'type',612,'product',[{'var',612,'This'}|[{'var',612,'Sizer'}]]}|[{'type',612,'boolean',[]}]]}|[[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'This'}|[{'type',613,'wxSizer',[]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Sizer'}|[{'type',613,'wxSizer',[]}]]]]}]]]]}]]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'replace',3},[{'type',630,'bounded_fun',[{'type',630,'fun',[{'type',630,'product',[{'var',630,'This'}|[{'var',630,'Oldwin'}|[{'var',630,'Newwin'}]]]}|[{'type',630,'boolean',[]}]]}|[[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'This'}|[{'type',631,'wxSizer',[]}]]]]}|[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'Oldwin'}|[{'type',631,'union',[{'remote_type',631,[{'atom',631,'wxWindow'}|[{'atom',631,'wxWindow'}|[[]]]]}|[{'type',631,'wxSizer',[]}]]}]]]]}|[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'Newwin'}|[{'type',631,'union',[{'remote_type',631,[{'atom',631,'wxWindow'}|[{'atom',631,'wxWindow'}|[[]]]]}|[{'type',631,'wxSizer',[]}]]}]]]]}]]]]]}|[{'type',632,'bounded_fun',[{'type',632,'fun',[{'type',632,'product',[{'var',632,'This'}|[{'var',632,'Index'}|[{'var',632,'Newitem'}]]]}|[{'type',632,'boolean',[]}]]}|[[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'This'}|[{'type',633,'wxSizer',[]}]]]]}|[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'Index'}|[{'type',633,'integer',[]}]]]]}|[{'type',633,'constraint',[{'atom',633,'is_subtype'}|[[{'var',633,'Newitem'}|[{'remote_type',633,[{'atom',633,'wxSizerItem'}|[{'atom',633,'wxSizerItem'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 646
		'spec' =
		    %% Line 646
		    [{{'replace',4},[{'type',646,'bounded_fun',[{'type',646,'fun',[{'type',646,'product',[{'var',646,'This'}|[{'var',646,'Oldwin'}|[{'var',646,'Newwin'}|[{'type',646,'list',[{'var',646,'Option'}]}]]]]}|[{'type',646,'boolean',[]}]]}|[[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'This'}|[{'type',647,'wxSizer',[]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'Oldwin'}|[{'type',647,'union',[{'remote_type',647,[{'atom',647,'wxWindow'}|[{'atom',647,'wxWindow'}|[[]]]]}|[{'type',647,'wxSizer',[]}]]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'Newwin'}|[{'type',647,'union',[{'remote_type',647,[{'atom',647,'wxWindow'}|[{'atom',647,'wxWindow'}|[[]]]]}|[{'type',647,'wxSizer',[]}]]}]]]]}|[{'type',648,'constraint',[{'atom',648,'is_subtype'}|[[{'var',648,'Option'}|[{'type',648,'tuple',[{'atom',648,'recursive'}|[{'type',648,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 667
		'spec' =
		    %% Line 667
		    [{{'setDimension',5},[{'type',667,'bounded_fun',[{'type',667,'fun',[{'type',667,'product',[{'var',667,'This'}|[{'var',667,'X'}|[{'var',667,'Y'}|[{'var',667,'Width'}|[{'var',667,'Height'}]]]]]}|[{'atom',667,'ok'}]]}|[[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'This'}|[{'type',668,'wxSizer',[]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'X'}|[{'type',668,'integer',[]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'Y'}|[{'type',668,'integer',[]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'Width'}|[{'type',668,'integer',[]}]]]]}|[{'type',668,'constraint',[{'atom',668,'is_subtype'}|[[{'var',668,'Height'}|[{'type',668,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 676
		'spec' =
		    %% Line 676
		    [{{'setMinSize',2},[{'type',676,'bounded_fun',[{'type',676,'fun',[{'type',676,'product',[{'var',676,'This'}|[{'var',676,'Size'}]]}|[{'atom',676,'ok'}]]}|[[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'This'}|[{'type',677,'wxSizer',[]}]]]]}|[{'type',677,'constraint',[{'atom',677,'is_subtype'}|[[{'var',677,'Size'}|[{'type',677,'tuple',[{'ann_type',677,[{'var',677,'W'}|[{'type',677,'integer',[]}]]}|[{'ann_type',677,[{'var',677,'H'}|[{'type',677,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 685
		'spec' =
		    %% Line 685
		    [{{'setMinSize',3},[{'type',685,'bounded_fun',[{'type',685,'fun',[{'type',685,'product',[{'var',685,'This'}|[{'var',685,'Width'}|[{'var',685,'Height'}]]]}|[{'atom',685,'ok'}]]}|[[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'This'}|[{'type',686,'wxSizer',[]}]]]]}|[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'Width'}|[{'type',686,'integer',[]}]]]]}|[{'type',686,'constraint',[{'atom',686,'is_subtype'}|[[{'var',686,'Height'}|[{'type',686,'integer',[]}]]]]}]]]]]}]}],
		%% Line 698
		'spec' =
		    %% Line 698
		    [{{'setItemMinSize',3},[{'type',698,'bounded_fun',[{'type',698,'fun',[{'type',698,'product',[{'var',698,'This'}|[{'var',698,'Index'}|[{'var',698,'Size'}]]]}|[{'type',698,'boolean',[]}]]}|[[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'This'}|[{'type',699,'wxSizer',[]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Index'}|[{'type',699,'integer',[]}]]]]}|[{'type',699,'constraint',[{'atom',699,'is_subtype'}|[[{'var',699,'Size'}|[{'type',699,'tuple',[{'ann_type',699,[{'var',699,'W'}|[{'type',699,'integer',[]}]]}|[{'ann_type',699,[{'var',699,'H'}|[{'type',699,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'This'}|[{'var',700,'Window'}|[{'var',700,'Size'}]]]}|[{'type',700,'boolean',[]}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'This'}|[{'type',701,'wxSizer',[]}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Window'}|[{'type',701,'union',[{'remote_type',701,[{'atom',701,'wxWindow'}|[{'atom',701,'wxWindow'}|[[]]]]}|[{'type',701,'wxSizer',[]}]]}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Size'}|[{'type',701,'tuple',[{'ann_type',701,[{'var',701,'W'}|[{'type',701,'integer',[]}]]}|[{'ann_type',701,[{'var',701,'H'}|[{'type',701,'integer',[]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 724
		'spec' =
		    %% Line 724
		    [{{'setItemMinSize',4},[{'type',724,'bounded_fun',[{'type',724,'fun',[{'type',724,'product',[{'var',724,'This'}|[{'var',724,'Index'}|[{'var',724,'Width'}|[{'var',724,'Height'}]]]]}|[{'type',724,'boolean',[]}]]}|[[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'This'}|[{'type',725,'wxSizer',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Index'}|[{'type',725,'integer',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Width'}|[{'type',725,'integer',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Height'}|[{'type',725,'integer',[]}]]]]}]]]]]]}|[{'type',726,'bounded_fun',[{'type',726,'fun',[{'type',726,'product',[{'var',726,'This'}|[{'var',726,'Window'}|[{'var',726,'Width'}|[{'var',726,'Height'}]]]]}|[{'type',726,'boolean',[]}]]}|[[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'This'}|[{'type',727,'wxSizer',[]}]]]]}|[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'Window'}|[{'type',727,'union',[{'remote_type',727,[{'atom',727,'wxWindow'}|[{'atom',727,'wxWindow'}|[[]]]]}|[{'type',727,'wxSizer',[]}]]}]]]]}|[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'Width'}|[{'type',727,'integer',[]}]]]]}|[{'type',727,'constraint',[{'atom',727,'is_subtype'}|[[{'var',727,'Height'}|[{'type',727,'integer',[]}]]]]}]]]]]]}]]}],
		%% Line 746
		'spec' =
		    %% Line 746
		    [{{'setSizeHints',2},[{'type',746,'bounded_fun',[{'type',746,'fun',[{'type',746,'product',[{'var',746,'This'}|[{'var',746,'Window'}]]}|[{'atom',746,'ok'}]]}|[[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'This'}|[{'type',747,'wxSizer',[]}]]]]}|[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'Window'}|[{'remote_type',747,[{'atom',747,'wxWindow'}|[{'atom',747,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 755
		'spec' =
		    %% Line 755
		    [{{'setVirtualSizeHints',2},[{'type',755,'bounded_fun',[{'type',755,'fun',[{'type',755,'product',[{'var',755,'This'}|[{'var',755,'Window'}]]}|[{'atom',755,'ok'}]]}|[[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'This'}|[{'type',756,'wxSizer',[]}]]]]}|[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'Window'}|[{'remote_type',756,[{'atom',756,'wxWindow'}|[{'atom',756,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 770
		'spec' =
		    %% Line 770
		    [{{'show',2},[{'type',770,'bounded_fun',[{'type',770,'fun',[{'type',770,'product',[{'var',770,'This'}|[{'var',770,'Index'}]]}|[{'type',770,'boolean',[]}]]}|[[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'This'}|[{'type',771,'wxSizer',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'Index'}|[{'type',771,'integer',[]}]]]]}]]]]}|[{'type',772,'bounded_fun',[{'type',772,'fun',[{'type',772,'product',[{'var',772,'This'}|[{'var',772,'Window'}]]}|[{'type',772,'boolean',[]}]]}|[[{'type',773,'constraint',[{'atom',773,'is_subtype'}|[[{'var',773,'This'}|[{'type',773,'wxSizer',[]}]]]]}|[{'type',773,'constraint',[{'atom',773,'is_subtype'}|[[{'var',773,'Window'}|[{'type',773,'union',[{'remote_type',773,[{'atom',773,'wxWindow'}|[{'atom',773,'wxWindow'}|[[]]]]}|[{'type',773,'wxSizer',[]}]]}]]]]}]]]]}|[{'type',774,'bounded_fun',[{'type',774,'fun',[{'type',774,'product',[{'var',774,'This'}|[{'var',774,'Show'}]]}|[{'atom',774,'ok'}]]}|[[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'This'}|[{'type',775,'wxSizer',[]}]]]]}|[{'type',775,'constraint',[{'atom',775,'is_subtype'}|[[{'var',775,'Show'}|[{'type',775,'boolean',[]}]]]]}]]]]}]]]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'show',3},[{'type',797,'bounded_fun',[{'type',797,'fun',[{'type',797,'product',[{'var',797,'This'}|[{'var',797,'Index'}|[{'type',797,'list',[{'var',797,'Option'}]}]]]}|[{'type',797,'boolean',[]}]]}|[[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'This'}|[{'type',798,'wxSizer',[]}]]]]}|[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'Index'}|[{'type',798,'integer',[]}]]]]}|[{'type',799,'constraint',[{'atom',799,'is_subtype'}|[[{'var',799,'Option'}|[{'type',799,'tuple',[{'atom',799,'show'}|[{'type',799,'boolean',[]}]]}]]]]}]]]]]}|[{'type',800,'bounded_fun',[{'type',800,'fun',[{'type',800,'product',[{'var',800,'This'}|[{'var',800,'Window'}|[{'type',800,'list',[{'var',800,'Option'}]}]]]}|[{'type',800,'boolean',[]}]]}|[[{'type',801,'constraint',[{'atom',801,'is_subtype'}|[[{'var',801,'This'}|[{'type',801,'wxSizer',[]}]]]]}|[{'type',801,'constraint',[{'atom',801,'is_subtype'}|[[{'var',801,'Window'}|[{'type',801,'union',[{'remote_type',801,[{'atom',801,'wxWindow'}|[{'atom',801,'wxWindow'}|[[]]]]}|[{'type',801,'wxSizer',[]}]]}]]]]}|[{'type',802,'constraint',[{'atom',802,'is_subtype'}|[[{'var',802,'Option'}|[{'type',802,'union',[{'type',802,'tuple',[{'atom',802,'show'}|[{'type',802,'boolean',[]}]]}|[{'type',803,'tuple',[{'atom',803,'recursive'}|[{'type',803,'boolean',[]}]]}]]}]]]]}]]]]]}]]}]]
'parent_class'/1 =
    %% Line 41
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxSizer'})
'add'/2 =
    %% Line 48
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Window = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 50
	      apply 'add'/3
		  (This, Window, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'add',2}}] )
	    -| ['compiler_generated'] )
	end
'add'/3 =
    %% Line 74
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor56,_cor57,_cor58},Width,Height>
	      when let <_cor3> =
		    %% Line 75
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 75
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 75
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 76
	      apply 'add'/4
		  (This, Width, Height, [])
	  %% Line 77
	  <{'wx_ref',ThisRef,ThisT,_cor59},{'wx_ref',WindowRef,WindowT,_cor60},Options>
	      when %% Line 78
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 79
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor14> =
		      %% Line 80
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor10> ->
			  _cor10
		      catch <_cor13,_cor12,_cor11> ->
			  'false'
		  in  let <_cor18> =
			  %% Line 80
			  case _cor14 of
			    %% Line 81
			    <'true'> when 'true' ->
				%% Line 82
				1249
			    %% Line 83
			    <_cor64> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 84
				    1250
			  end
		      in  let <MOpts> =
			      %% Line 86
			      ( fun (_cor27,_cor26) ->
				    case <_cor27,_cor26> of
				      <{'proportion',Proportion},Acc> when 'true' ->
					  let <_cor20> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor20|Acc]
				      %% Line 87
				      <{'flag',Flag},Acc> when 'true' ->
					  let <_cor21> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Flag>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor21|Acc]
				      %% Line 88
				      <{'border',Border},Acc> when 'true' ->
					  let <_cor22> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<Border>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor22|Acc]
				      %% Line 89
				      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor65}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (UserDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call UserDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor25> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor25|Acc]
				      %% Line 90
				      <BadOpt,_cor66> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-add/3-fun-0-'}}] )
			  in  let <_cor31> =
				  %% Line 91
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 91
				      call 'erlang':'list_to_binary'
					  (_cor31)
				  in  let <_cor33> =
					  %% Line 93
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 92
					  call 'wxe_util':'call'
					      (_cor18, _cor33)
	  %% Line 94
	  <{'wx_ref',ThisRef,ThisT,_cor67},{'wx_ref',WindowRef,WindowT,_cor68},{'wx_ref',FlagsRef,FlagsT,_cor69}> when 'true' ->
	      do  %% Line 95
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor42> =
		      %% Line 96
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor38> ->
			  _cor38
		      catch <_cor41,_cor40,_cor39> ->
			  'false'
		  in  let <_cor50> =
			  %% Line 96
			  case _cor42 of
			    %% Line 97
			    <'true'> when 'true' ->
				do  %% Line 98
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (FlagsT,
						     'wxSizerFlags') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call FlagsT:'parent_class'
						  ('wxSizerFlags')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 99
				    1252
			    %% Line 100
			    <_cor73> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    do  %% Line 101
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(FlagsT,
							 'wxSizerFlags') ->
						  'ok'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call FlagsT:'parent_class'
						      ('wxSizerFlags')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					%% Line 102
					1253
			  end
		      in  let <_cor52> =
			      %% Line 105
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<FlagsRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 104
			      call 'wxe_util':'call'
				  (_cor50, _cor52)
	  ( <_cor55,_cor54,_cor53> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54,_cor53})
		  -| [{'function_name',{'add',3}}] )
	    -| ['compiler_generated'] )
	end
'add'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},Width,Height,Options>
	      when %% Line 115
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 116
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 117
		      ( fun (_cor17,_cor16) ->
			    case <_cor17,_cor16> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 118
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 119
			      <{'border',Border},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Border>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 120
			      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor29}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (UserDataT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call UserDataT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor15> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor15|Acc]
			      %% Line 121
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-add/4-fun-0-'}}] )
		  in  let <_cor21> =
			  %% Line 122
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 122
			      call 'erlang':'list_to_binary'
				  (_cor21)
			  in  let <_cor23> =
				  %% Line 124
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 123
				  call 'wxe_util':'call'
				      (1251, _cor23)
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'add',4}}] )
	    -| ['compiler_generated'] )
	end
'addSpacer'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Size>
	      when %% Line 130
		call 'erlang':'is_integer'
		    (Size) ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 133
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Size>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 132
		      call 'wxe_util':'call'
			  (1254, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'addSpacer',2}}] )
	    -| ['compiler_generated'] )
	end
'addStretchSpacer'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 140
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 141
	      apply 'addStretchSpacer'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'addStretchSpacer',1}}] )
	    -| ['compiler_generated'] )
	end
'addStretchSpacer'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 148
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 149
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 150
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'prop',Prop},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Prop>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 151
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-addStretchSpacer/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 152
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 152
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 154
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 153
				  call 'wxe_util':'call'
				      (1255, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'addStretchSpacer',2}}] )
	    -| ['compiler_generated'] )
	end
'calcMin'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 162
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 161
		      call 'wxe_util':'call'
			  (1256, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'calcMin',1}}] )
	    -| ['compiler_generated'] )
	end
'clear'/1 =
    %% Line 168
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 169
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 170
	      apply 'clear'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'clear',1}}] )
	    -| ['compiler_generated'] )
	end
'clear'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 177
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 178
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 179
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'delete_windows',Delete_windows},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Delete_windows)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 180
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-clear/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 181
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 181
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 183
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 182
				  call 'wxe_util':'cast'
				      (1257, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'clear',2}}] )
	    -| ['compiler_generated'] )
	end
'detach'/2 =
    %% Line 194
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Index>
	      when %% Line 195
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 196
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 198
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 197
		      call 'wxe_util':'call'
			  (1260, _cor4)
	  %% Line 199
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',WindowRef,WindowT,_cor24}> when 'true' ->
	      do  %% Line 200
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 201
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor9> ->
			  _cor9
		      catch <_cor12,_cor11,_cor10> ->
			  'false'
		  in  let <_cor17> =
			  %% Line 201
			  case _cor13 of
			    %% Line 202
			    <'true'> when 'true' ->
				%% Line 203
				1258
			    %% Line 204
			    <_cor28> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 205
				    1259
			  end
		      in  let <_cor19> =
			      %% Line 208
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 207
			      call 'wxe_util':'call'
				  (_cor17, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'detach',2}}] )
	    -| ['compiler_generated'] )
	end
'fit'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WindowRef,WindowT,_cor10}> when 'true' ->
	      do  %% Line 214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 215
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WindowT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WindowT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 217
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 216
			  call 'wxe_util':'call'
			      (1261, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'fit',2}}] )
	    -| ['compiler_generated'] )
	end
'fitInside'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WindowRef,WindowT,_cor10}> when 'true' ->
	      do  %% Line 223
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 224
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WindowT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WindowT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 226
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 225
			  call 'wxe_util':'cast'
			      (1262, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'fitInside',2}}] )
	    -| ['compiler_generated'] )
	end
'getChildren'/1 =
    %% Line 231
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 232
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 234
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 233
		      call 'wxe_util':'call'
			  (1263, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getChildren',1}}] )
	    -| ['compiler_generated'] )
	end
'getItem'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Window = {'wx_ref',_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 248
	      apply 'getItem'/3
		  (This, Window, [])
	  %% Line 249
	  <{'wx_ref',ThisRef,ThisT,_cor13},Index>
	      when %% Line 250
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 251
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 253
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 252
		      call 'wxe_util':'call'
			  (1266, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItem',2}}] )
	    -| ['compiler_generated'] )
	end
'getItem'/3 =
    %% Line 259
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},{'wx_ref',WindowRef,WindowT,_cor31},Options>
	      when %% Line 260
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 261
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 262
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor7> ->
			  _cor7
		      catch <_cor10,_cor9,_cor8> ->
			  'false'
		  in  let <_cor15> =
			  %% Line 262
			  case _cor11 of
			    %% Line 263
			    <'true'> when 'true' ->
				%% Line 264
				1264
			    %% Line 265
			    <_cor35> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 266
				    1265
			  end
		      in  let <MOpts> =
			      %% Line 268
			      ( fun (_cor20,_cor19) ->
				    case <_cor20,_cor19> of
				      <{'recursive',Recursive},Acc> when 'true' ->
					  let <_cor17> =
					      call 'wxe_util':'from_bool'
						  (Recursive)
					  in  let <_cor18> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor17>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor18|Acc]
				      %% Line 269
				      <BadOpt,_cor36> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-getItem/3-fun-0-'}}] )
			  in  let <_cor24> =
				  %% Line 270
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 270
				      call 'erlang':'list_to_binary'
					  (_cor24)
				  in  let <_cor26> =
					  %% Line 272
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 271
					  call 'wxe_util':'call'
					      (_cor15, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'getItem',3}}] )
	    -| ['compiler_generated'] )
	end
'getSize'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 278
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 280
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 279
		      call 'wxe_util':'call'
			  (1267, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getPosition'/1 =
    %% Line 285
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 286
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 288
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 287
		      call 'wxe_util':'call'
			  (1268, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getMinSize'/1 =
    %% Line 293
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 294
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 296
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 295
		      call 'wxe_util':'call'
			  (1269, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMinSize',1}}] )
	    -| ['compiler_generated'] )
	end
'hide'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Window = {'wx_ref',_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 310
	      apply 'hide'/3
		  (This, Window, [])
	  %% Line 311
	  <{'wx_ref',ThisRef,ThisT,_cor13},Index>
	      when %% Line 312
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 313
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 315
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 314
		      call 'wxe_util':'call'
			  (1272, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'hide',2}}] )
	    -| ['compiler_generated'] )
	end
'hide'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},{'wx_ref',WindowRef,WindowT,_cor31},Options>
	      when %% Line 322
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 323
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 324
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor7> ->
			  _cor7
		      catch <_cor10,_cor9,_cor8> ->
			  'false'
		  in  let <_cor15> =
			  %% Line 324
			  case _cor11 of
			    %% Line 325
			    <'true'> when 'true' ->
				%% Line 326
				1271
			    %% Line 327
			    <_cor35> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 328
				    1270
			  end
		      in  let <MOpts> =
			      %% Line 330
			      ( fun (_cor20,_cor19) ->
				    case <_cor20,_cor19> of
				      <{'recursive',Recursive},Acc> when 'true' ->
					  let <_cor17> =
					      call 'wxe_util':'from_bool'
						  (Recursive)
					  in  let <_cor18> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor17>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor18|Acc]
				      %% Line 331
				      <BadOpt,_cor36> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-hide/3-fun-0-'}}] )
			  in  let <_cor24> =
				  %% Line 332
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 332
				      call 'erlang':'list_to_binary'
					  (_cor24)
				  in  let <_cor26> =
					  %% Line 334
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 333
					  call 'wxe_util':'call'
					      (_cor15, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'hide',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Index,{'wx_ref',ItemRef,ItemT,_cor12}>
	      when %% Line 340
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 341
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 342
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxSizerItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxSizerItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 344
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Index>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 343
			  call 'wxe_util':'call'
			      (1278, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insert',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/4 =
    %% Line 368
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor62,_cor63,_cor64},Index,Width,Height>
	      when %% Line 369
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Index)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Width)
			  in  let <_cor6> =
				  call 'erlang':'is_integer'
				      (Height)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 370
	      apply 'insert'/5
		  (This, Index, Width, Height, [])
	  %% Line 371
	  <{'wx_ref',ThisRef,ThisT,_cor65},Index,{'wx_ref',WindowRef,WindowT,_cor66},Options>
	      when let <_cor9> =
		    %% Line 372
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor10> =
			%% Line 372
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 372
			call 'erlang':'and'
			    (_cor9, _cor10) ->
	      do  %% Line 373
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor19> =
		      %% Line 374
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor15> ->
			  _cor15
		      catch <_cor18,_cor17,_cor16> ->
			  'false'
		  in  let <_cor23> =
			  %% Line 374
			  case _cor19 of
			    %% Line 375
			    <'true'> when 'true' ->
				%% Line 376
				1273
			    %% Line 377
			    <_cor70> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 378
				    1274
			  end
		      in  let <MOpts> =
			      %% Line 380
			      ( fun (_cor32,_cor31) ->
				    case <_cor32,_cor31> of
				      <{'proportion',Proportion},Acc> when 'true' ->
					  let <_cor25> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor25|Acc]
				      %% Line 381
				      <{'flag',Flag},Acc> when 'true' ->
					  let <_cor26> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Flag>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor26|Acc]
				      %% Line 382
				      <{'border',Border},Acc> when 'true' ->
					  let <_cor27> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<Border>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor27|Acc]
				      %% Line 383
				      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor71}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (UserDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call UserDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor30> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor30|Acc]
				      %% Line 384
				      <BadOpt,_cor72> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-insert/4-fun-0-'}}] )
			  in  let <_cor36> =
				  %% Line 385
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 385
				      call 'erlang':'list_to_binary'
					  (_cor36)
				  in  let <_cor38> =
					  %% Line 387
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<Index>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 386
					  call 'wxe_util':'call'
					      (_cor23, _cor38)
	  %% Line 388
	  <{'wx_ref',ThisRef,ThisT,_cor73},Index,{'wx_ref',WindowRef,WindowT,_cor74},{'wx_ref',FlagsRef,FlagsT,_cor75}>
	      when %% Line 389
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 390
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor47> =
		      %% Line 391
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor43> ->
			  _cor43
		      catch <_cor46,_cor45,_cor44> ->
			  'false'
		  in  let <_cor55> =
			  %% Line 391
			  case _cor47 of
			    %% Line 392
			    <'true'> when 'true' ->
				do  %% Line 393
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (FlagsT,
						     'wxSizerFlags') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call FlagsT:'parent_class'
						  ('wxSizerFlags')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 394
				    1276
			    %% Line 395
			    <_cor79> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    do  %% Line 396
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(FlagsT,
							 'wxSizerFlags') ->
						  'ok'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call FlagsT:'parent_class'
						      ('wxSizerFlags')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					%% Line 397
					1277
			  end
		      in  let <_cor57> =
			      %% Line 400
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<Index>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<FlagsRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 399
			      call 'wxe_util':'call'
				  (_cor55, _cor57)
	  ( <_cor61,_cor60,_cor59,_cor58> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor61,_cor60,_cor59,_cor58})
		  -| [{'function_name',{'insert',4}}] )
	    -| ['compiler_generated'] )
	end
'insert'/5 =
    %% Line 409
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Index,Width,Height,Options>
	      when %% Line 410
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 411
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 412
		      ( fun (_cor20,_cor19) ->
			    case <_cor20,_cor19> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor13> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor13|Acc]
			      %% Line 413
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor14> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor14|Acc]
			      %% Line 414
			      <{'border',Border},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Border>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor15|Acc]
			      %% Line 415
			      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor33}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (UserDataT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call UserDataT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor18> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor18|Acc]
			      %% Line 416
			      <BadOpt,_cor34> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-insert/5-fun-0-'}}] )
		  in  let <_cor24> =
			  %% Line 417
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 417
			      call 'erlang':'list_to_binary'
				  (_cor24)
			  in  let <_cor26> =
				  %% Line 419
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Index>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 418
				  call 'wxe_util':'call'
				      (1275, _cor26)
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'insert',5}}] )
	    -| ['compiler_generated'] )
	end
'insertSpacer'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Index,Size>
	      when let <_cor3> =
		    %% Line 425
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			%% Line 425
			call 'erlang':'is_integer'
			    (Size)
		    in  %% Line 425
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 426
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 428
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<Size>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 427
		      call 'wxe_util':'call'
			  (1279, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insertSpacer',3}}] )
	    -| ['compiler_generated'] )
	end
'insertStretchSpacer'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Index>
	      when %% Line 435
		call 'erlang':'is_integer'
		    (Index) ->
	      %% Line 436
	      apply 'insertStretchSpacer'/3
		  (This, Index, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'insertStretchSpacer',2}}] )
	    -| ['compiler_generated'] )
	end
'insertStretchSpacer'/3 =
    %% Line 442
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Index,Options>
	      when let <_cor3> =
		    %% Line 443
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			%% Line 443
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 443
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 444
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 445
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'prop',Prop},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Prop>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 446
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-insertStretchSpacer/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 447
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 447
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 449
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Index>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 448
				  call 'wxe_util':'call'
				      (1280, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'insertStretchSpacer',3}}] )
	    -| ['compiler_generated'] )
	end
'isShown'/2 =
    %% Line 460
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Index>
	      when %% Line 461
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 462
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 464
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 463
		      call 'wxe_util':'call'
			  (1283, _cor4)
	  %% Line 465
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',WindowRef,WindowT,_cor24}> when 'true' ->
	      do  %% Line 466
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 467
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor9> ->
			  _cor9
		      catch <_cor12,_cor11,_cor10> ->
			  'false'
		  in  let <_cor17> =
			  %% Line 467
			  case _cor13 of
			    %% Line 468
			    <'true'> when 'true' ->
				%% Line 469
				1281
			    %% Line 470
			    <_cor28> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 471
				    1282
			  end
		      in  let <_cor19> =
			      %% Line 474
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 473
			      call 'wxe_util':'call'
				  (_cor17, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'isShown',2}}] )
	    -| ['compiler_generated'] )
	end
'layout'/1 =
    %% Line 479
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 480
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 482
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 481
		      call 'wxe_util':'cast'
			  (1284, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'layout',1}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/2 =
    %% Line 487
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ItemRef,ItemT,_cor10}> when 'true' ->
	      do  %% Line 488
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 489
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxSizerItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxSizerItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 491
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 490
			  call 'wxe_util':'call'
			      (1290, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'prepend',2}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/3 =
    %% Line 515
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor56,_cor57,_cor58},Width,Height>
	      when let <_cor3> =
		    %% Line 516
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 516
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 516
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 517
	      apply 'prepend'/4
		  (This, Width, Height, [])
	  %% Line 518
	  <{'wx_ref',ThisRef,ThisT,_cor59},{'wx_ref',WindowRef,WindowT,_cor60},Options>
	      when %% Line 519
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 520
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor14> =
		      %% Line 521
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor10> ->
			  _cor10
		      catch <_cor13,_cor12,_cor11> ->
			  'false'
		  in  let <_cor18> =
			  %% Line 521
			  case _cor14 of
			    %% Line 522
			    <'true'> when 'true' ->
				%% Line 523
				1285
			    %% Line 524
			    <_cor64> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 525
				    1286
			  end
		      in  let <MOpts> =
			      %% Line 527
			      ( fun (_cor27,_cor26) ->
				    case <_cor27,_cor26> of
				      <{'proportion',Proportion},Acc> when 'true' ->
					  let <_cor20> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor20|Acc]
				      %% Line 528
				      <{'flag',Flag},Acc> when 'true' ->
					  let <_cor21> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Flag>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor21|Acc]
				      %% Line 529
				      <{'border',Border},Acc> when 'true' ->
					  let <_cor22> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<Border>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor22|Acc]
				      %% Line 530
				      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor65}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (UserDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call UserDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor25> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor25|Acc]
				      %% Line 531
				      <BadOpt,_cor66> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-prepend/3-fun-0-'}}] )
			  in  let <_cor31> =
				  %% Line 532
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 532
				      call 'erlang':'list_to_binary'
					  (_cor31)
				  in  let <_cor33> =
					  %% Line 534
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 533
					  call 'wxe_util':'call'
					      (_cor18, _cor33)
	  %% Line 535
	  <{'wx_ref',ThisRef,ThisT,_cor67},{'wx_ref',WindowRef,WindowT,_cor68},{'wx_ref',FlagsRef,FlagsT,_cor69}> when 'true' ->
	      do  %% Line 536
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor42> =
		      %% Line 537
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor38> ->
			  _cor38
		      catch <_cor41,_cor40,_cor39> ->
			  'false'
		  in  let <_cor50> =
			  %% Line 537
			  case _cor42 of
			    %% Line 538
			    <'true'> when 'true' ->
				do  %% Line 539
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (FlagsT,
						     'wxSizerFlags') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call FlagsT:'parent_class'
						  ('wxSizerFlags')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 540
				    1288
			    %% Line 541
			    <_cor73> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    do  %% Line 542
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(FlagsT,
							 'wxSizerFlags') ->
						  'ok'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call FlagsT:'parent_class'
						      ('wxSizerFlags')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					%% Line 543
					1289
			  end
		      in  let <_cor52> =
			      %% Line 546
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<FlagsRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 545
			      call 'wxe_util':'call'
				  (_cor50, _cor52)
	  ( <_cor55,_cor54,_cor53> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54,_cor53})
		  -| [{'function_name',{'prepend',3}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/4 =
    %% Line 555
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},Width,Height,Options>
	      when %% Line 556
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 557
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 558
		      ( fun (_cor17,_cor16) ->
			    case <_cor17,_cor16> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 559
			      <{'flag',Flag},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Flag>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 560
			      <{'border',Border},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Border>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 561
			      <{'userData',{'wx_ref',UserDataRef,UserDataT,_cor29}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (UserDataT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call UserDataT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor15> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<UserDataRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor15|Acc]
			      %% Line 562
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-prepend/4-fun-0-'}}] )
		  in  let <_cor21> =
			  %% Line 563
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 563
			      call 'erlang':'list_to_binary'
				  (_cor21)
			  in  let <_cor23> =
				  %% Line 565
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 564
				  call 'wxe_util':'call'
				      (1287, _cor23)
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'prepend',4}}] )
	    -| ['compiler_generated'] )
	end
'prependSpacer'/2 =
    %% Line 570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Size>
	      when %% Line 571
		call 'erlang':'is_integer'
		    (Size) ->
	      do  %% Line 572
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 574
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Size>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 573
		      call 'wxe_util':'call'
			  (1291, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'prependSpacer',2}}] )
	    -| ['compiler_generated'] )
	end
'prependStretchSpacer'/1 =
    %% Line 580
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 581
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 582
	      apply 'prependStretchSpacer'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'prependStretchSpacer',1}}] )
	    -| ['compiler_generated'] )
	end
'prependStretchSpacer'/2 =
    %% Line 588
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 589
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 590
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 591
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'prop',Prop},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Prop>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 592
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-prependStretchSpacer/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 593
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 593
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 595
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 594
				  call 'wxe_util':'call'
				      (1292, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'prependStretchSpacer',2}}] )
	    -| ['compiler_generated'] )
	end
'recalcSizes'/1 =
    %% Line 600
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 601
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 603
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 602
		      call 'wxe_util':'cast'
			  (1293, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'recalcSizes',1}}] )
	    -| ['compiler_generated'] )
	end
'remove'/2 =
    %% Line 614
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Index>
	      when %% Line 615
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 616
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 618
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 617
		      call 'wxe_util':'call'
			  (1295, _cor4)
	  %% Line 619
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',SizerRef,SizerT,_cor14}> when 'true' ->
	      do  %% Line 620
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 621
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (SizerT,
				       'wxSizer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call SizerT:'parent_class'
				    ('wxSizer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor9> =
			  %% Line 623
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<SizerRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 622
			  call 'wxe_util':'call'
			      (1294, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'remove',2}}] )
	    -| ['compiler_generated'] )
	end
'replace'/3 =
    %% Line 635
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Oldwin = {'wx_ref',_cor15,_cor16,_cor17},Newwin = {'wx_ref',_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 637
	      apply 'replace'/4
		  (This, Oldwin, Newwin, [])
	  %% Line 638
	  <{'wx_ref',ThisRef,ThisT,_cor21},Index,{'wx_ref',NewitemRef,NewitemT,_cor22}>
	      when %% Line 639
		call 'erlang':'is_integer'
		    (Index) ->
	      do  %% Line 640
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 641
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (NewitemT,
				       'wxSizerItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call NewitemT:'parent_class'
				    ('wxSizerItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor8> =
			  %% Line 643
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Index>(32,1,'integer',['unsigned'|['native']]),
			    #<NewitemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 642
			  call 'wxe_util':'call'
			      (1298, _cor8)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'replace',3}}] )
	    -| ['compiler_generated'] )
	end
'replace'/4 =
    %% Line 649
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor36},{'wx_ref',OldwinRef,OldwinT,_cor37},{'wx_ref',NewwinRef,NewwinT,_cor38},Options>
	      when %% Line 650
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 651
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor12> =
		      %% Line 652
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (OldwinT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call OldwinT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor8> ->
			  _cor8
		      catch <_cor11,_cor10,_cor9> ->
			  'false'
		  in  let <_cor20> =
			  %% Line 652
			  case _cor12 of
			    %% Line 653
			    <'true'> when 'true' ->
				do  %% Line 654
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (NewwinT,
						     'wxWindow') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call NewwinT:'parent_class'
						  ('wxWindow')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 655
				    1296
			    %% Line 656
			    <_cor42> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (OldwinT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call OldwinT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    do  %% Line 657
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(NewwinT,
							 'wxSizer') ->
						  'ok'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  call NewwinT:'parent_class'
						      ('wxSizer')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
					%% Line 658
					1297
			  end
		      in  let <MOpts> =
			      %% Line 660
			      ( fun (_cor25,_cor24) ->
				    case <_cor25,_cor24> of
				      <{'recursive',Recursive},Acc> when 'true' ->
					  let <_cor22> =
					      call 'wxe_util':'from_bool'
						  (Recursive)
					  in  let <_cor23> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor22>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor23|Acc]
				      %% Line 661
				      <BadOpt,_cor43> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-replace/4-fun-0-'}}] )
			  in  let <_cor29> =
				  %% Line 662
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 662
				      call 'erlang':'list_to_binary'
					  (_cor29)
				  in  let <_cor31> =
					  %% Line 664
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<OldwinRef>(32,1,'integer',['unsigned'|['native']]),
					    #<NewwinRef>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 663
					  call 'wxe_util':'call'
					      (_cor20, _cor31)
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'replace',4}}] )
	    -| ['compiler_generated'] )
	end
'setDimension'/5 =
    %% Line 669
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,Width,Height>
	      when %% Line 670
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Width)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(Height)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 671
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 673
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 672
		      call 'wxe_util':'cast'
			  (1299, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'setDimension',5}}] )
	    -| ['compiler_generated'] )
	end
'setMinSize'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SizeW,SizeH}>
	      when let <_cor2> =
		    %% Line 679
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor3> =
			%% Line 679
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 679
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 680
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 682
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 681
		      call 'wxe_util':'cast'
			  (1301, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setMinSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setMinSize'/3 =
    %% Line 687
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 688
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 688
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 688
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 689
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 691
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 690
		      call 'wxe_util':'cast'
			  (1300, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setMinSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemMinSize'/3 =
    %% Line 702
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},Index,{SizeW,SizeH}>
	      when %% Line 703
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(SizeW)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (SizeH)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 704
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor9> =
		      %% Line 706
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 705
		      call 'wxe_util':'call'
			  (1307, _cor9)
	  %% Line 707
	  <{'wx_ref',ThisRef,ThisT,_cor31},{'wx_ref',WindowRef,WindowT,_cor32},{SizeW,SizeH}>
	      when let <_cor10> =
		    %% Line 708
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor11> =
			%% Line 708
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 708
			call 'erlang':'and'
			    (_cor10, _cor11) ->
	      do  %% Line 709
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor20> =
		      %% Line 710
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor16> ->
			  _cor16
		      catch <_cor19,_cor18,_cor17> ->
			  'false'
		  in  let <_cor24> =
			  %% Line 710
			  case _cor20 of
			    %% Line 711
			    <'true'> when 'true' ->
				%% Line 712
				1303
			    %% Line 713
			    <_cor36> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 714
				    1305
			  end
		      in  let <_cor26> =
			      %% Line 717
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<SizeW>(32,1,'integer',['unsigned'|['native']]),
				#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 716
			      call 'wxe_util':'call'
				  (_cor24, _cor26)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'setItemMinSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemMinSize'/4 =
    %% Line 728
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Index,Width,Height>
	      when %% Line 729
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Index)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 730
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 732
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Index>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 731
		      call 'wxe_util':'call'
			  (1306, _cor10)
	  %% Line 733
	  <{'wx_ref',ThisRef,ThisT,_cor33},{'wx_ref',WindowRef,WindowT,_cor34},Width,Height>
	      when let <_cor11> =
		    %% Line 734
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor12> =
			%% Line 734
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 734
			call 'erlang':'and'
			    (_cor11, _cor12) ->
	      do  %% Line 735
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor21> =
		      %% Line 736
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor17> ->
			  _cor17
		      catch <_cor20,_cor19,_cor18> ->
			  'false'
		  in  let <_cor25> =
			  %% Line 736
			  case _cor21 of
			    %% Line 737
			    <'true'> when 'true' ->
				%% Line 738
				1302
			    %% Line 739
			    <_cor38> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 740
				    1304
			  end
		      in  let <_cor27> =
			      %% Line 743
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<WindowRef>(32,1,'integer',['unsigned'|['native']]),
				#<Width>(32,1,'integer',['unsigned'|['native']]),
				#<Height>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 742
			      call 'wxe_util':'call'
				  (_cor25, _cor27)
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'setItemMinSize',4}}] )
	    -| ['compiler_generated'] )
	end
'setSizeHints'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WindowRef,WindowT,_cor10}> when 'true' ->
	      do  %% Line 749
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 750
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WindowT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WindowT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 752
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 751
			  call 'wxe_util':'cast'
			      (1308, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setSizeHints',2}}] )
	    -| ['compiler_generated'] )
	end
'setVirtualSizeHints'/2 =
    %% Line 757
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',WindowRef,WindowT,_cor10}> when 'true' ->
	      do  %% Line 758
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 759
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (WindowT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call WindowT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 761
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<WindowRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 760
			  call 'wxe_util':'cast'
			      (1309, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setVirtualSizeHints',2}}] )
	    -| ['compiler_generated'] )
	end
'show'/2 =
    %% Line 777
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Index>
	      when %% Line 778
		call 'erlang':'is_integer'
		    (Index) ->
	      %% Line 779
	      apply 'show'/3
		  (This, Index, [])
	  %% Line 781
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Window = {'wx_ref',_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 783
	      apply 'show'/3
		  (This, Window, [])
	  %% Line 784
	  <{'wx_ref',ThisRef,ThisT,_cor18},Show>
	      when %% Line 785
		call 'erlang':'is_boolean'
		    (Show) ->
	      do  %% Line 786
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor5> =
		      %% Line 788
		      call 'wxe_util':'from_bool'
			  (Show)
		  in  let <_cor6> =
			  %% Line 788
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor5>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 787
			  call 'wxe_util':'cast'
			      (1313, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'show',2}}] )
	    -| ['compiler_generated'] )
	end
'show'/3 =
    %% Line 804
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor46},Index,Options>
	      when let <_cor3> =
		    %% Line 805
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor4> =
			%% Line 805
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 805
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 806
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 807
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'show',Show},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Show)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 808
			      <BadOpt,_cor47> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-show/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 809
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 809
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 811
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Index>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 810
				  call 'wxe_util':'call'
				      (1312, _cor16)
	  %% Line 812
	  <{'wx_ref',ThisRef,ThisT,_cor48},{'wx_ref',WindowRef,WindowT,_cor49},Options>
	      when %% Line 813
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 814
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor25> =
		      %% Line 815
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (WindowT,
					   'wxWindow') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call WindowT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor21> ->
			  _cor21
		      catch <_cor24,_cor23,_cor22> ->
			  'false'
		  in  let <_cor29> =
			  %% Line 815
			  case _cor25 of
			    %% Line 816
			    <'true'> when 'true' ->
				%% Line 817
				1310
			    %% Line 818
			    <_cor53> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (WindowT,
						     'wxSizer') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call WindowT:'parent_class'
						  ('wxSizer')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 819
				    1311
			  end
		      in  let <MOpts> =
			      %% Line 821
			      ( fun (_cor36,_cor35) ->
				    case <_cor36,_cor35> of
				      <{'show',Show},Acc> when 'true' ->
					  let <_cor31> =
					      call 'wxe_util':'from_bool'
						  (Show)
					  in  let <_cor32> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor31>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor32|Acc]
				      %% Line 822
				      <{'recursive',Recursive},Acc> when 'true' ->
					  let <_cor33> =
					      call 'wxe_util':'from_bool'
						  (Recursive)
					  in  let <_cor34> =
						  #{#<2>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor33>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor34|Acc]
				      %% Line 823
				      <BadOpt,_cor54> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-show/3-fun-1-'}}] )
			  in  let <_cor40> =
				  %% Line 824
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 824
				      call 'erlang':'list_to_binary'
					  (_cor40)
				  in  let <_cor42> =
					  %% Line 826
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<WindowRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 825
					  call 'wxe_util':'call'
					      (_cor29, _cor42)
	  ( <_cor45,_cor44,_cor43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor45,_cor44,_cor43})
		  -| [{'function_name',{'show',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSizer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSizer', _cor0)
end