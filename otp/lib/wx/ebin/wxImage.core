module 'wxImage' ['Destroy'/1,
		  'blur'/2,
		  'blurHorizontal'/2,
		  'blurVertical'/2,
		  'convertAlphaToMask'/1,
		  'convertAlphaToMask'/2,
		  'convertToGreyscale'/1,
		  'convertToGreyscale'/2,
		  'convertToMono'/4,
		  'copy'/1,
		  'create'/3,
		  'create'/4,
		  'create'/5,
		  'create'/6,
		  'destroy'/1,
		  'findFirstUnusedColour'/1,
		  'findFirstUnusedColour'/2,
		  'getAlpha'/1,
		  'getAlpha'/3,
		  'getBlue'/3,
		  'getData'/1,
		  'getGreen'/3,
		  'getHeight'/1,
		  'getImageCount'/1,
		  'getImageCount'/2,
		  'getImageExtWildcard'/0,
		  'getMaskBlue'/1,
		  'getMaskGreen'/1,
		  'getMaskRed'/1,
		  'getOption'/2,
		  'getOptionInt'/2,
		  'getOrFindMaskColour'/1,
		  'getPalette'/1,
		  'getRed'/3,
		  'getSubImage'/2,
		  'getWidth'/1,
		  'hasAlpha'/1,
		  'hasMask'/1,
		  'hasOption'/2,
		  'initAlpha'/1,
		  'initStandardHandlers'/0,
		  'isTransparent'/3,
		  'isTransparent'/4,
		  'loadFile'/2,
		  'loadFile'/3,
		  'loadFile'/4,
		  'mirror'/1,
		  'mirror'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'new'/1,
		  'new'/2,
		  'new'/3,
		  'new'/4,
		  'new'/5,
		  'ok'/1,
		  'parent_class'/1,
		  'removeHandler'/1,
		  'replace'/7,
		  'rescale'/3,
		  'rescale'/4,
		  'resize'/3,
		  'resize'/4,
		  'rotate'/3,
		  'rotate'/4,
		  'rotate90'/1,
		  'rotate90'/2,
		  'rotateHue'/2,
		  'saveFile'/2,
		  'saveFile'/3,
		  'scale'/3,
		  'scale'/4,
		  'setAlpha'/2,
		  'setAlpha'/3,
		  'setAlpha'/4,
		  'setData'/2,
		  'setData'/3,
		  'setData'/4,
		  'setData'/5,
		  'setMask'/1,
		  'setMask'/2,
		  'setMaskColour'/4,
		  'setMaskFromImage'/5,
		  'setOption'/3,
		  'setPalette'/2,
		  'setRGB'/5,
		  'setRGB'/6,
		  'size'/3,
		  'size'/4]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 50
		'export_type' =
		    %% Line 50
		    [{'wxImage',0}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxImage',{'remote_type',54,[{'atom',54,'wx'}|[{'atom',54,'wx_object'}|[[]]]]},[]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',0},[{'type',56,'fun',[{'type',56,'product',[]}|[{'type',56,'wxImage',[]}]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'new',1},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'Name'}]}|[{'type',62,'wxImage',[]}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Name'}|[{'remote_type',63,[{'atom',63,'unicode'}|[{'atom',63,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'new',2},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Width'}|[{'var',76,'Height'}]]}|[{'type',76,'wxImage',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Width'}|[{'type',77,'integer',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Height'}|[{'type',77,'integer',[]}]]]]}]]]]}|[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'Name'}|[{'type',78,'list',[{'var',78,'Option'}]}]]}|[{'type',78,'wxImage',[]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Name'}|[{'remote_type',79,[{'atom',79,'unicode'}|[{'atom',79,'chardata'}|[[]]]]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Option'}|[{'type',80,'union',[{'type',80,'tuple',[{'atom',80,'type'}|[{'type',80,'integer',[]}]]}|[{'type',81,'tuple',[{'atom',81,'index'}|[{'type',81,'integer',[]}]]}]]}]]]]}]]]]}]]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'new',3},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Width'}|[{'var',105,'Height'}|[{'var',105,'Data'}]]]}|[{'type',105,'wxImage',[]}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Width'}|[{'type',106,'integer',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Height'}|[{'type',106,'integer',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Data'}|[{'type',106,'binary',[]}]]]]}]]]]]}|[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'Width'}|[{'var',107,'Height'}|[{'type',107,'list',[{'var',107,'Option'}]}]]]}|[{'type',107,'wxImage',[]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Width'}|[{'type',108,'integer',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Height'}|[{'type',108,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Option'}|[{'type',109,'tuple',[{'atom',109,'clear'}|[{'type',109,'boolean',[]}]]}]]]]}]]]]]}|[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Name'}|[{'var',110,'Mimetype'}|[{'type',110,'list',[{'var',110,'Option'}]}]]]}|[{'type',110,'wxImage',[]}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Name'}|[{'remote_type',111,[{'atom',111,'unicode'}|[{'atom',111,'chardata'}|[[]]]]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Mimetype'}|[{'remote_type',111,[{'atom',111,'unicode'}|[{'atom',111,'chardata'}|[[]]]]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Option'}|[{'type',112,'tuple',[{'atom',112,'index'}|[{'type',112,'integer',[]}]]}]]]]}]]]]]}]]]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'new',4},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Width'}|[{'var',140,'Height'}|[{'var',140,'Data'}|[{'var',140,'Alpha'}]]]]}|[{'type',140,'wxImage',[]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Width'}|[{'type',141,'integer',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Height'}|[{'type',141,'integer',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Data'}|[{'type',141,'binary',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Alpha'}|[{'type',141,'binary',[]}]]]]}]]]]]]}|[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'Width'}|[{'var',142,'Height'}|[{'var',142,'Data'}|[{'type',142,'list',[{'var',142,'Option'}]}]]]]}|[{'type',142,'wxImage',[]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Width'}|[{'type',143,'integer',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Height'}|[{'type',143,'integer',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Data'}|[{'type',143,'binary',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Option'}|[{'type',144,'tuple',[{'atom',144,'static_data'}|[{'type',144,'boolean',[]}]]}]]]]}]]]]]]}]]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'new',5},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Width'}|[{'var',159,'Height'}|[{'var',159,'Data'}|[{'var',159,'Alpha'}|[{'type',159,'list',[{'var',159,'Option'}]}]]]]]}|[{'type',159,'wxImage',[]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Width'}|[{'type',160,'integer',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Height'}|[{'type',160,'integer',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Data'}|[{'type',160,'binary',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Alpha'}|[{'type',160,'binary',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Option'}|[{'type',161,'tuple',[{'atom',161,'static_data'}|[{'type',161,'boolean',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'blur',2},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}|[{'var',173,'Radius'}]]}|[{'type',173,'wxImage',[]}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxImage',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Radius'}|[{'type',174,'integer',[]}]]]]}]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'blurHorizontal',2},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}|[{'var',182,'Radius'}]]}|[{'type',182,'wxImage',[]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxImage',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Radius'}|[{'type',183,'integer',[]}]]]]}]]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'blurVertical',2},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'This'}|[{'var',191,'Radius'}]]}|[{'type',191,'wxImage',[]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'This'}|[{'type',192,'wxImage',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Radius'}|[{'type',192,'integer',[]}]]]]}]]]]}]}],
		%% Line 200
		'spec' =
		    %% Line 200
		    [{{'convertAlphaToMask',1},[{'type',200,'bounded_fun',[{'type',200,'fun',[{'type',200,'product',[{'var',200,'This'}]}|[{'type',200,'boolean',[]}]]}|[[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'This'}|[{'type',201,'wxImage',[]}]]]]}]]]}]}],
		%% Line 208
		'spec' =
		    %% Line 208
		    [{{'convertAlphaToMask',2},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'This'}|[{'type',208,'list',[{'var',208,'Option'}]}]]}|[{'type',208,'boolean',[]}]]}|[[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'This'}|[{'type',209,'wxImage',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Option'}|[{'type',210,'tuple',[{'atom',210,'threshold'}|[{'type',210,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'convertToGreyscale',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}]}|[{'type',221,'wxImage',[]}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxImage',[]}]]]]}]]]}]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'convertToGreyscale',2},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'This'}|[{'type',229,'list',[{'var',229,'Option'}]}]]}|[{'type',229,'wxImage',[]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'This'}|[{'type',230,'wxImage',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Option'}|[{'type',231,'union',[{'type',231,'tuple',[{'atom',231,'lr'}|[{'type',231,'number',[]}]]}|[{'type',232,'tuple',[{'atom',232,'lg'}|[{'type',232,'number',[]}]]}|[{'type',233,'tuple',[{'atom',233,'lb'}|[{'type',233,'number',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'convertToMono',4},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'This'}|[{'var',246,'R'}|[{'var',246,'G'}|[{'var',246,'B'}]]]]}|[{'type',246,'wxImage',[]}]]}|[[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'This'}|[{'type',247,'wxImage',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'R'}|[{'type',247,'integer',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'G'}|[{'type',247,'integer',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'B'}|[{'type',247,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'copy',1},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'This'}]}|[{'type',255,'wxImage',[]}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'This'}|[{'type',256,'wxImage',[]}]]]]}]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'create',3},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'This'}|[{'var',263,'Width'}|[{'var',263,'Height'}]]]}|[{'type',263,'boolean',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'This'}|[{'type',264,'wxImage',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Width'}|[{'type',264,'integer',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Height'}|[{'type',264,'integer',[]}]]]]}]]]]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'create',4},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'This'}|[{'var',276,'Width'}|[{'var',276,'Height'}|[{'var',276,'Data'}]]]]}|[{'type',276,'boolean',[]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'This'}|[{'type',277,'wxImage',[]}]]]]}|[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Width'}|[{'type',277,'integer',[]}]]]]}|[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Height'}|[{'type',277,'integer',[]}]]]]}|[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Data'}|[{'type',277,'binary',[]}]]]]}]]]]]]}|[{'type',278,'bounded_fun',[{'type',278,'fun',[{'type',278,'product',[{'var',278,'This'}|[{'var',278,'Width'}|[{'var',278,'Height'}|[{'type',278,'list',[{'var',278,'Option'}]}]]]]}|[{'type',278,'boolean',[]}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'This'}|[{'type',279,'wxImage',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Width'}|[{'type',279,'integer',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Height'}|[{'type',279,'integer',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Option'}|[{'type',280,'tuple',[{'atom',280,'clear'}|[{'type',280,'boolean',[]}]]}]]]]}]]]]]]}]]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'create',5},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'This'}|[{'var',300,'Width'}|[{'var',300,'Height'}|[{'var',300,'Data'}|[{'var',300,'Alpha'}]]]]]}|[{'type',300,'boolean',[]}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'This'}|[{'type',301,'wxImage',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Width'}|[{'type',301,'integer',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Height'}|[{'type',301,'integer',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Data'}|[{'type',301,'binary',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Alpha'}|[{'type',301,'binary',[]}]]]]}]]]]]]]}|[{'type',302,'bounded_fun',[{'type',302,'fun',[{'type',302,'product',[{'var',302,'This'}|[{'var',302,'Width'}|[{'var',302,'Height'}|[{'var',302,'Data'}|[{'type',302,'list',[{'var',302,'Option'}]}]]]]]}|[{'type',302,'boolean',[]}]]}|[[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'This'}|[{'type',303,'wxImage',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Width'}|[{'type',303,'integer',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Height'}|[{'type',303,'integer',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Data'}|[{'type',303,'binary',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Option'}|[{'type',304,'tuple',[{'atom',304,'static_data'}|[{'type',304,'boolean',[]}]]}]]]]}]]]]]]]}]]}],
		%% Line 320
		'spec' =
		    %% Line 320
		    [{{'create',6},[{'type',320,'bounded_fun',[{'type',320,'fun',[{'type',320,'product',[{'var',320,'This'}|[{'var',320,'Width'}|[{'var',320,'Height'}|[{'var',320,'Data'}|[{'var',320,'Alpha'}|[{'type',320,'list',[{'var',320,'Option'}]}]]]]]]}|[{'type',320,'boolean',[]}]]}|[[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'This'}|[{'type',321,'wxImage',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Width'}|[{'type',321,'integer',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Height'}|[{'type',321,'integer',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Data'}|[{'type',321,'binary',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Alpha'}|[{'type',321,'binary',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Option'}|[{'type',322,'tuple',[{'atom',322,'static_data'}|[{'type',322,'boolean',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'Destroy',1},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'This'}]}|[{'atom',335,'ok'}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'This'}|[{'type',336,'wxImage',[]}]]]]}]]]}]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'findFirstUnusedColour',1},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'This'}]}|[{'var',343,'Result'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Result'}|[{'type',344,'tuple',[{'ann_type',344,[{'var',344,'Res'}|[{'type',344,'boolean',[]}]]}|[{'ann_type',344,[{'var',344,'R'}|[{'type',344,'integer',[]}]]}|[{'ann_type',344,[{'var',344,'G'}|[{'type',344,'integer',[]}]]}|[{'ann_type',344,[{'var',344,'B'}|[{'type',344,'integer',[]}]]}]]]]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'This'}|[{'type',345,'wxImage',[]}]]]]}]]]]}]}],
		%% Line 352
		'spec' =
		    %% Line 352
		    [{{'findFirstUnusedColour',2},[{'type',352,'bounded_fun',[{'type',352,'fun',[{'type',352,'product',[{'var',352,'This'}|[{'type',352,'list',[{'var',352,'Option'}]}]]}|[{'var',352,'Result'}]]}|[[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'Result'}|[{'type',353,'tuple',[{'ann_type',353,[{'var',353,'Res'}|[{'type',353,'boolean',[]}]]}|[{'ann_type',353,[{'var',353,'R'}|[{'type',353,'integer',[]}]]}|[{'ann_type',353,[{'var',353,'G'}|[{'type',353,'integer',[]}]]}|[{'ann_type',353,[{'var',353,'B'}|[{'type',353,'integer',[]}]]}]]]]}]]]]}|[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'This'}|[{'type',354,'wxImage',[]}]]]]}|[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Option'}|[{'type',355,'union',[{'type',355,'tuple',[{'atom',355,'startR'}|[{'type',355,'integer',[]}]]}|[{'type',356,'tuple',[{'atom',356,'startG'}|[{'type',356,'integer',[]}]]}|[{'type',357,'tuple',[{'atom',357,'startB'}|[{'type',357,'integer',[]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 370
		'spec' =
		    %% Line 370
		    [{{'getImageExtWildcard',0},[{'type',370,'fun',[{'type',370,'product',[]}|[{'remote_type',370,[{'atom',370,'unicode'}|[{'atom',370,'charlist'}|[[]]]]}]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'getAlpha',1},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'This'}]}|[{'type',376,'binary',[]}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'This'}|[{'type',377,'wxImage',[]}]]]]}]]]}]}],
		%% Line 384
		'spec' =
		    %% Line 384
		    [{{'getAlpha',3},[{'type',384,'bounded_fun',[{'type',384,'fun',[{'type',384,'product',[{'var',384,'This'}|[{'var',384,'X'}|[{'var',384,'Y'}]]]}|[{'type',384,'integer',[]}]]}|[[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'This'}|[{'type',385,'wxImage',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'X'}|[{'type',385,'integer',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Y'}|[{'type',385,'integer',[]}]]]]}]]]]]}]}],
		%% Line 393
		'spec' =
		    %% Line 393
		    [{{'getBlue',3},[{'type',393,'bounded_fun',[{'type',393,'fun',[{'type',393,'product',[{'var',393,'This'}|[{'var',393,'X'}|[{'var',393,'Y'}]]]}|[{'type',393,'integer',[]}]]}|[[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'This'}|[{'type',394,'wxImage',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'X'}|[{'type',394,'integer',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Y'}|[{'type',394,'integer',[]}]]]]}]]]]]}]}],
		%% Line 402
		'spec' =
		    %% Line 402
		    [{{'getData',1},[{'type',402,'bounded_fun',[{'type',402,'fun',[{'type',402,'product',[{'var',402,'This'}]}|[{'type',402,'binary',[]}]]}|[[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'This'}|[{'type',403,'wxImage',[]}]]]]}]]]}]}],
		%% Line 410
		'spec' =
		    %% Line 410
		    [{{'getGreen',3},[{'type',410,'bounded_fun',[{'type',410,'fun',[{'type',410,'product',[{'var',410,'This'}|[{'var',410,'X'}|[{'var',410,'Y'}]]]}|[{'type',410,'integer',[]}]]}|[[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'This'}|[{'type',411,'wxImage',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'X'}|[{'type',411,'integer',[]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Y'}|[{'type',411,'integer',[]}]]]]}]]]]]}]}],
		%% Line 419
		'spec' =
		    %% Line 419
		    [{{'getImageCount',1},[{'type',419,'bounded_fun',[{'type',419,'fun',[{'type',419,'product',[{'var',419,'Name'}]}|[{'type',419,'integer',[]}]]}|[[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Name'}|[{'remote_type',420,[{'atom',420,'unicode'}|[{'atom',420,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 428
		'spec' =
		    %% Line 428
		    [{{'getImageCount',2},[{'type',428,'bounded_fun',[{'type',428,'fun',[{'type',428,'product',[{'var',428,'Name'}|[{'type',428,'list',[{'var',428,'Option'}]}]]}|[{'type',428,'integer',[]}]]}|[[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'Name'}|[{'remote_type',429,[{'atom',429,'unicode'}|[{'atom',429,'chardata'}|[[]]]]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Option'}|[{'type',430,'tuple',[{'atom',430,'type'}|[{'remote_type',430,[{'atom',430,'wx'}|[{'atom',430,'wx_enum'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 441
		'spec' =
		    %% Line 441
		    [{{'getHeight',1},[{'type',441,'bounded_fun',[{'type',441,'fun',[{'type',441,'product',[{'var',441,'This'}]}|[{'type',441,'integer',[]}]]}|[[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'This'}|[{'type',442,'wxImage',[]}]]]]}]]]}]}],
		%% Line 449
		'spec' =
		    %% Line 449
		    [{{'getMaskBlue',1},[{'type',449,'bounded_fun',[{'type',449,'fun',[{'type',449,'product',[{'var',449,'This'}]}|[{'type',449,'integer',[]}]]}|[[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'This'}|[{'type',450,'wxImage',[]}]]]]}]]]}]}],
		%% Line 457
		'spec' =
		    %% Line 457
		    [{{'getMaskGreen',1},[{'type',457,'bounded_fun',[{'type',457,'fun',[{'type',457,'product',[{'var',457,'This'}]}|[{'type',457,'integer',[]}]]}|[[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'This'}|[{'type',458,'wxImage',[]}]]]]}]]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'getMaskRed',1},[{'type',465,'bounded_fun',[{'type',465,'fun',[{'type',465,'product',[{'var',465,'This'}]}|[{'type',465,'integer',[]}]]}|[[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'This'}|[{'type',466,'wxImage',[]}]]]]}]]]}]}],
		%% Line 473
		'spec' =
		    %% Line 473
		    [{{'getOrFindMaskColour',1},[{'type',473,'bounded_fun',[{'type',473,'fun',[{'type',473,'product',[{'var',473,'This'}]}|[{'var',473,'Result'}]]}|[[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'Result'}|[{'type',474,'tuple',[{'ann_type',474,[{'var',474,'Res'}|[{'type',474,'boolean',[]}]]}|[{'ann_type',474,[{'var',474,'R'}|[{'type',474,'integer',[]}]]}|[{'ann_type',474,[{'var',474,'G'}|[{'type',474,'integer',[]}]]}|[{'ann_type',474,[{'var',474,'B'}|[{'type',474,'integer',[]}]]}]]]]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'This'}|[{'type',475,'wxImage',[]}]]]]}]]]]}]}],
		%% Line 482
		'spec' =
		    %% Line 482
		    [{{'getPalette',1},[{'type',482,'bounded_fun',[{'type',482,'fun',[{'type',482,'product',[{'var',482,'This'}]}|[{'remote_type',482,[{'atom',482,'wxPalette'}|[{'atom',482,'wxPalette'}|[[]]]]}]]}|[[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'This'}|[{'type',483,'wxImage',[]}]]]]}]]]}]}],
		%% Line 490
		'spec' =
		    %% Line 490
		    [{{'getRed',3},[{'type',490,'bounded_fun',[{'type',490,'fun',[{'type',490,'product',[{'var',490,'This'}|[{'var',490,'X'}|[{'var',490,'Y'}]]]}|[{'type',490,'integer',[]}]]}|[[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'This'}|[{'type',491,'wxImage',[]}]]]]}|[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'X'}|[{'type',491,'integer',[]}]]]]}|[{'type',491,'constraint',[{'atom',491,'is_subtype'}|[[{'var',491,'Y'}|[{'type',491,'integer',[]}]]]]}]]]]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'getSubImage',2},[{'type',499,'bounded_fun',[{'type',499,'fun',[{'type',499,'product',[{'var',499,'This'}|[{'var',499,'Rect'}]]}|[{'type',499,'wxImage',[]}]]}|[[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'This'}|[{'type',500,'wxImage',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Rect'}|[{'type',500,'tuple',[{'ann_type',500,[{'var',500,'X'}|[{'type',500,'integer',[]}]]}|[{'ann_type',500,[{'var',500,'Y'}|[{'type',500,'integer',[]}]]}|[{'ann_type',500,[{'var',500,'W'}|[{'type',500,'integer',[]}]]}|[{'ann_type',500,[{'var',500,'H'}|[{'type',500,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 508
		'spec' =
		    %% Line 508
		    [{{'getWidth',1},[{'type',508,'bounded_fun',[{'type',508,'fun',[{'type',508,'product',[{'var',508,'This'}]}|[{'type',508,'integer',[]}]]}|[[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'This'}|[{'type',509,'wxImage',[]}]]]]}]]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'hasAlpha',1},[{'type',516,'bounded_fun',[{'type',516,'fun',[{'type',516,'product',[{'var',516,'This'}]}|[{'type',516,'boolean',[]}]]}|[[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'This'}|[{'type',517,'wxImage',[]}]]]]}]]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'hasMask',1},[{'type',524,'bounded_fun',[{'type',524,'fun',[{'type',524,'product',[{'var',524,'This'}]}|[{'type',524,'boolean',[]}]]}|[[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'This'}|[{'type',525,'wxImage',[]}]]]]}]]]}]}],
		%% Line 532
		'spec' =
		    %% Line 532
		    [{{'getOption',2},[{'type',532,'bounded_fun',[{'type',532,'fun',[{'type',532,'product',[{'var',532,'This'}|[{'var',532,'Name'}]]}|[{'remote_type',532,[{'atom',532,'unicode'}|[{'atom',532,'charlist'}|[[]]]]}]]}|[[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'This'}|[{'type',533,'wxImage',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Name'}|[{'remote_type',533,[{'atom',533,'unicode'}|[{'atom',533,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 542
		'spec' =
		    %% Line 542
		    [{{'getOptionInt',2},[{'type',542,'bounded_fun',[{'type',542,'fun',[{'type',542,'product',[{'var',542,'This'}|[{'var',542,'Name'}]]}|[{'type',542,'integer',[]}]]}|[[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'This'}|[{'type',543,'wxImage',[]}]]]]}|[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'Name'}|[{'remote_type',543,[{'atom',543,'unicode'}|[{'atom',543,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 552
		'spec' =
		    %% Line 552
		    [{{'hasOption',2},[{'type',552,'bounded_fun',[{'type',552,'fun',[{'type',552,'product',[{'var',552,'This'}|[{'var',552,'Name'}]]}|[{'type',552,'boolean',[]}]]}|[[{'type',553,'constraint',[{'atom',553,'is_subtype'}|[[{'var',553,'This'}|[{'type',553,'wxImage',[]}]]]]}|[{'type',553,'constraint',[{'atom',553,'is_subtype'}|[[{'var',553,'Name'}|[{'remote_type',553,[{'atom',553,'unicode'}|[{'atom',553,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'initAlpha',1},[{'type',562,'bounded_fun',[{'type',562,'fun',[{'type',562,'product',[{'var',562,'This'}]}|[{'atom',562,'ok'}]]}|[[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'This'}|[{'type',563,'wxImage',[]}]]]]}]]]}]}],
		%% Line 570
		'spec' =
		    %% Line 570
		    [{{'initStandardHandlers',0},[{'type',570,'fun',[{'type',570,'product',[]}|[{'atom',570,'ok'}]]}]}],
		%% Line 576
		'spec' =
		    %% Line 576
		    [{{'isTransparent',3},[{'type',576,'bounded_fun',[{'type',576,'fun',[{'type',576,'product',[{'var',576,'This'}|[{'var',576,'X'}|[{'var',576,'Y'}]]]}|[{'type',576,'boolean',[]}]]}|[[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'This'}|[{'type',577,'wxImage',[]}]]]]}|[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'X'}|[{'type',577,'integer',[]}]]]]}|[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'Y'}|[{'type',577,'integer',[]}]]]]}]]]]]}]}],
		%% Line 584
		'spec' =
		    %% Line 584
		    [{{'isTransparent',4},[{'type',584,'bounded_fun',[{'type',584,'fun',[{'type',584,'product',[{'var',584,'This'}|[{'var',584,'X'}|[{'var',584,'Y'}|[{'type',584,'list',[{'var',584,'Option'}]}]]]]}|[{'type',584,'boolean',[]}]]}|[[{'type',585,'constraint',[{'atom',585,'is_subtype'}|[[{'var',585,'This'}|[{'type',585,'wxImage',[]}]]]]}|[{'type',585,'constraint',[{'atom',585,'is_subtype'}|[[{'var',585,'X'}|[{'type',585,'integer',[]}]]]]}|[{'type',585,'constraint',[{'atom',585,'is_subtype'}|[[{'var',585,'Y'}|[{'type',585,'integer',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Option'}|[{'type',586,'tuple',[{'atom',586,'threshold'}|[{'type',586,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 597
		'spec' =
		    %% Line 597
		    [{{'loadFile',2},[{'type',597,'bounded_fun',[{'type',597,'fun',[{'type',597,'product',[{'var',597,'This'}|[{'var',597,'Name'}]]}|[{'type',597,'boolean',[]}]]}|[[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'This'}|[{'type',598,'wxImage',[]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Name'}|[{'remote_type',598,[{'atom',598,'unicode'}|[{'atom',598,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 605
		'spec' =
		    %% Line 605
		    [{{'loadFile',3},[{'type',605,'bounded_fun',[{'type',605,'fun',[{'type',605,'product',[{'var',605,'This'}|[{'var',605,'Name'}|[{'type',605,'list',[{'var',605,'Option'}]}]]]}|[{'type',605,'boolean',[]}]]}|[[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'This'}|[{'type',606,'wxImage',[]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'Name'}|[{'remote_type',606,[{'atom',606,'unicode'}|[{'atom',606,'chardata'}|[[]]]]}]]]]}|[{'type',607,'constraint',[{'atom',607,'is_subtype'}|[[{'var',607,'Option'}|[{'type',607,'union',[{'type',607,'tuple',[{'atom',607,'type'}|[{'type',607,'integer',[]}]]}|[{'type',608,'tuple',[{'atom',608,'index'}|[{'type',608,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 621
		'spec' =
		    %% Line 621
		    [{{'loadFile',4},[{'type',621,'bounded_fun',[{'type',621,'fun',[{'type',621,'product',[{'var',621,'This'}|[{'var',621,'Name'}|[{'var',621,'Mimetype'}|[{'type',621,'list',[{'var',621,'Option'}]}]]]]}|[{'type',621,'boolean',[]}]]}|[[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'This'}|[{'type',622,'wxImage',[]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Name'}|[{'remote_type',622,[{'atom',622,'unicode'}|[{'atom',622,'chardata'}|[[]]]]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Mimetype'}|[{'remote_type',622,[{'atom',622,'unicode'}|[{'atom',622,'chardata'}|[[]]]]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'Option'}|[{'type',623,'tuple',[{'atom',623,'index'}|[{'type',623,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 636
		'spec' =
		    %% Line 636
		    [{{'ok',1},[{'type',636,'bounded_fun',[{'type',636,'fun',[{'type',636,'product',[{'var',636,'This'}]}|[{'type',636,'boolean',[]}]]}|[[{'type',637,'constraint',[{'atom',637,'is_subtype'}|[[{'var',637,'This'}|[{'type',637,'wxImage',[]}]]]]}]]]}]}],
		%% Line 644
		'spec' =
		    %% Line 644
		    [{{'removeHandler',1},[{'type',644,'bounded_fun',[{'type',644,'fun',[{'type',644,'product',[{'var',644,'Name'}]}|[{'type',644,'boolean',[]}]]}|[[{'type',645,'constraint',[{'atom',645,'is_subtype'}|[[{'var',645,'Name'}|[{'remote_type',645,[{'atom',645,'unicode'}|[{'atom',645,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 653
		'spec' =
		    %% Line 653
		    [{{'mirror',1},[{'type',653,'bounded_fun',[{'type',653,'fun',[{'type',653,'product',[{'var',653,'This'}]}|[{'type',653,'wxImage',[]}]]}|[[{'type',654,'constraint',[{'atom',654,'is_subtype'}|[[{'var',654,'This'}|[{'type',654,'wxImage',[]}]]]]}]]]}]}],
		%% Line 661
		'spec' =
		    %% Line 661
		    [{{'mirror',2},[{'type',661,'bounded_fun',[{'type',661,'fun',[{'type',661,'product',[{'var',661,'This'}|[{'type',661,'list',[{'var',661,'Option'}]}]]}|[{'type',661,'wxImage',[]}]]}|[[{'type',662,'constraint',[{'atom',662,'is_subtype'}|[[{'var',662,'This'}|[{'type',662,'wxImage',[]}]]]]}|[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'Option'}|[{'type',663,'tuple',[{'atom',663,'horizontally'}|[{'type',663,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 674
		'spec' =
		    %% Line 674
		    [{{'replace',7},[{'type',674,'bounded_fun',[{'type',674,'fun',[{'type',674,'product',[{'var',674,'This'}|[{'var',674,'R1'}|[{'var',674,'G1'}|[{'var',674,'B1'}|[{'var',674,'R2'}|[{'var',674,'G2'}|[{'var',674,'B2'}]]]]]]]}|[{'atom',674,'ok'}]]}|[[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'This'}|[{'type',675,'wxImage',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'R1'}|[{'type',675,'integer',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'G1'}|[{'type',675,'integer',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'B1'}|[{'type',675,'integer',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'R2'}|[{'type',675,'integer',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'G2'}|[{'type',675,'integer',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'B2'}|[{'type',675,'integer',[]}]]]]}]]]]]]]]]}]}],
		%% Line 683
		'spec' =
		    %% Line 683
		    [{{'rescale',3},[{'type',683,'bounded_fun',[{'type',683,'fun',[{'type',683,'product',[{'var',683,'This'}|[{'var',683,'Width'}|[{'var',683,'Height'}]]]}|[{'type',683,'wxImage',[]}]]}|[[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'This'}|[{'type',684,'wxImage',[]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Width'}|[{'type',684,'integer',[]}]]]]}|[{'type',684,'constraint',[{'atom',684,'is_subtype'}|[[{'var',684,'Height'}|[{'type',684,'integer',[]}]]]]}]]]]]}]}],
		%% Line 692
		'spec' =
		    %% Line 692
		    [{{'rescale',4},[{'type',692,'bounded_fun',[{'type',692,'fun',[{'type',692,'product',[{'var',692,'This'}|[{'var',692,'Width'}|[{'var',692,'Height'}|[{'type',692,'list',[{'var',692,'Option'}]}]]]]}|[{'type',692,'wxImage',[]}]]}|[[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'This'}|[{'type',693,'wxImage',[]}]]]]}|[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'Width'}|[{'type',693,'integer',[]}]]]]}|[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'Height'}|[{'type',693,'integer',[]}]]]]}|[{'type',694,'constraint',[{'atom',694,'is_subtype'}|[[{'var',694,'Option'}|[{'type',694,'tuple',[{'atom',694,'quality'}|[{'remote_type',694,[{'atom',694,'wx'}|[{'atom',694,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 705
		'spec' =
		    %% Line 705
		    [{{'resize',3},[{'type',705,'bounded_fun',[{'type',705,'fun',[{'type',705,'product',[{'var',705,'This'}|[{'var',705,'Size'}|[{'var',705,'Pos'}]]]}|[{'type',705,'wxImage',[]}]]}|[[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'This'}|[{'type',706,'wxImage',[]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'Size'}|[{'type',706,'tuple',[{'ann_type',706,[{'var',706,'W'}|[{'type',706,'integer',[]}]]}|[{'ann_type',706,[{'var',706,'H'}|[{'type',706,'integer',[]}]]}]]}]]]]}|[{'type',706,'constraint',[{'atom',706,'is_subtype'}|[[{'var',706,'Pos'}|[{'type',706,'tuple',[{'ann_type',706,[{'var',706,'X'}|[{'type',706,'integer',[]}]]}|[{'ann_type',706,[{'var',706,'Y'}|[{'type',706,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 713
		'spec' =
		    %% Line 713
		    [{{'resize',4},[{'type',713,'bounded_fun',[{'type',713,'fun',[{'type',713,'product',[{'var',713,'This'}|[{'var',713,'Size'}|[{'var',713,'Pos'}|[{'type',713,'list',[{'var',713,'Option'}]}]]]]}|[{'type',713,'wxImage',[]}]]}|[[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'This'}|[{'type',714,'wxImage',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Size'}|[{'type',714,'tuple',[{'ann_type',714,[{'var',714,'W'}|[{'type',714,'integer',[]}]]}|[{'ann_type',714,[{'var',714,'H'}|[{'type',714,'integer',[]}]]}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Pos'}|[{'type',714,'tuple',[{'ann_type',714,[{'var',714,'X'}|[{'type',714,'integer',[]}]]}|[{'ann_type',714,[{'var',714,'Y'}|[{'type',714,'integer',[]}]]}]]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Option'}|[{'type',715,'union',[{'type',715,'tuple',[{'atom',715,'r'}|[{'type',715,'integer',[]}]]}|[{'type',716,'tuple',[{'atom',716,'g'}|[{'type',716,'integer',[]}]]}|[{'type',717,'tuple',[{'atom',717,'b'}|[{'type',717,'integer',[]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 730
		'spec' =
		    %% Line 730
		    [{{'rotate',3},[{'type',730,'bounded_fun',[{'type',730,'fun',[{'type',730,'product',[{'var',730,'This'}|[{'var',730,'Angle'}|[{'var',730,'Centre_of_rotation'}]]]}|[{'type',730,'wxImage',[]}]]}|[[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'This'}|[{'type',731,'wxImage',[]}]]]]}|[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'Angle'}|[{'type',731,'number',[]}]]]]}|[{'type',731,'constraint',[{'atom',731,'is_subtype'}|[[{'var',731,'Centre_of_rotation'}|[{'type',731,'tuple',[{'ann_type',731,[{'var',731,'X'}|[{'type',731,'integer',[]}]]}|[{'ann_type',731,[{'var',731,'Y'}|[{'type',731,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 738
		'spec' =
		    %% Line 738
		    [{{'rotate',4},[{'type',738,'bounded_fun',[{'type',738,'fun',[{'type',738,'product',[{'var',738,'This'}|[{'var',738,'Angle'}|[{'var',738,'Centre_of_rotation'}|[{'type',738,'list',[{'var',738,'Option'}]}]]]]}|[{'type',738,'wxImage',[]}]]}|[[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'This'}|[{'type',739,'wxImage',[]}]]]]}|[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Angle'}|[{'type',739,'number',[]}]]]]}|[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Centre_of_rotation'}|[{'type',739,'tuple',[{'ann_type',739,[{'var',739,'X'}|[{'type',739,'integer',[]}]]}|[{'ann_type',739,[{'var',739,'Y'}|[{'type',739,'integer',[]}]]}]]}]]]]}|[{'type',740,'constraint',[{'atom',740,'is_subtype'}|[[{'var',740,'Option'}|[{'type',740,'union',[{'type',740,'tuple',[{'atom',740,'interpolating'}|[{'type',740,'boolean',[]}]]}|[{'type',741,'tuple',[{'atom',741,'offset_after_rotation'}|[{'type',741,'tuple',[{'ann_type',741,[{'var',741,'X'}|[{'type',741,'integer',[]}]]}|[{'ann_type',741,[{'var',741,'Y'}|[{'type',741,'integer',[]}]]}]]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 753
		'spec' =
		    %% Line 753
		    [{{'rotateHue',2},[{'type',753,'bounded_fun',[{'type',753,'fun',[{'type',753,'product',[{'var',753,'This'}|[{'var',753,'Angle'}]]}|[{'atom',753,'ok'}]]}|[[{'type',754,'constraint',[{'atom',754,'is_subtype'}|[[{'var',754,'This'}|[{'type',754,'wxImage',[]}]]]]}|[{'type',754,'constraint',[{'atom',754,'is_subtype'}|[[{'var',754,'Angle'}|[{'type',754,'number',[]}]]]]}]]]]}]}],
		%% Line 762
		'spec' =
		    %% Line 762
		    [{{'rotate90',1},[{'type',762,'bounded_fun',[{'type',762,'fun',[{'type',762,'product',[{'var',762,'This'}]}|[{'type',762,'wxImage',[]}]]}|[[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'This'}|[{'type',763,'wxImage',[]}]]]]}]]]}]}],
		%% Line 770
		'spec' =
		    %% Line 770
		    [{{'rotate90',2},[{'type',770,'bounded_fun',[{'type',770,'fun',[{'type',770,'product',[{'var',770,'This'}|[{'type',770,'list',[{'var',770,'Option'}]}]]}|[{'type',770,'wxImage',[]}]]}|[[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'This'}|[{'type',771,'wxImage',[]}]]]]}|[{'type',772,'constraint',[{'atom',772,'is_subtype'}|[[{'var',772,'Option'}|[{'type',772,'tuple',[{'atom',772,'clockwise'}|[{'type',772,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 783
		'spec' =
		    %% Line 783
		    [{{'saveFile',2},[{'type',783,'bounded_fun',[{'type',783,'fun',[{'type',783,'product',[{'var',783,'This'}|[{'var',783,'Name'}]]}|[{'type',783,'boolean',[]}]]}|[[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'This'}|[{'type',784,'wxImage',[]}]]]]}|[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'Name'}|[{'remote_type',784,[{'atom',784,'unicode'}|[{'atom',784,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'saveFile',3},[{'type',797,'bounded_fun',[{'type',797,'fun',[{'type',797,'product',[{'var',797,'This'}|[{'var',797,'Name'}|[{'var',797,'Type'}]]]}|[{'type',797,'boolean',[]}]]}|[[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'This'}|[{'type',798,'wxImage',[]}]]]]}|[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'Name'}|[{'remote_type',798,[{'atom',798,'unicode'}|[{'atom',798,'chardata'}|[[]]]]}]]]]}|[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'Type'}|[{'type',798,'integer',[]}]]]]}]]]]]}|[{'type',799,'bounded_fun',[{'type',799,'fun',[{'type',799,'product',[{'var',799,'This'}|[{'var',799,'Name'}|[{'var',799,'Mimetype'}]]]}|[{'type',799,'boolean',[]}]]}|[[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'This'}|[{'type',800,'wxImage',[]}]]]]}|[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'Name'}|[{'remote_type',800,[{'atom',800,'unicode'}|[{'atom',800,'chardata'}|[[]]]]}]]]]}|[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'Mimetype'}|[{'remote_type',800,[{'atom',800,'unicode'}|[{'atom',800,'chardata'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 816
		'spec' =
		    %% Line 816
		    [{{'scale',3},[{'type',816,'bounded_fun',[{'type',816,'fun',[{'type',816,'product',[{'var',816,'This'}|[{'var',816,'Width'}|[{'var',816,'Height'}]]]}|[{'type',816,'wxImage',[]}]]}|[[{'type',817,'constraint',[{'atom',817,'is_subtype'}|[[{'var',817,'This'}|[{'type',817,'wxImage',[]}]]]]}|[{'type',817,'constraint',[{'atom',817,'is_subtype'}|[[{'var',817,'Width'}|[{'type',817,'integer',[]}]]]]}|[{'type',817,'constraint',[{'atom',817,'is_subtype'}|[[{'var',817,'Height'}|[{'type',817,'integer',[]}]]]]}]]]]]}]}],
		%% Line 825
		'spec' =
		    %% Line 825
		    [{{'scale',4},[{'type',825,'bounded_fun',[{'type',825,'fun',[{'type',825,'product',[{'var',825,'This'}|[{'var',825,'Width'}|[{'var',825,'Height'}|[{'type',825,'list',[{'var',825,'Option'}]}]]]]}|[{'type',825,'wxImage',[]}]]}|[[{'type',826,'constraint',[{'atom',826,'is_subtype'}|[[{'var',826,'This'}|[{'type',826,'wxImage',[]}]]]]}|[{'type',826,'constraint',[{'atom',826,'is_subtype'}|[[{'var',826,'Width'}|[{'type',826,'integer',[]}]]]]}|[{'type',826,'constraint',[{'atom',826,'is_subtype'}|[[{'var',826,'Height'}|[{'type',826,'integer',[]}]]]]}|[{'type',827,'constraint',[{'atom',827,'is_subtype'}|[[{'var',827,'Option'}|[{'type',827,'tuple',[{'atom',827,'quality'}|[{'remote_type',827,[{'atom',827,'wx'}|[{'atom',827,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 838
		'spec' =
		    %% Line 838
		    [{{'size',3},[{'type',838,'bounded_fun',[{'type',838,'fun',[{'type',838,'product',[{'var',838,'This'}|[{'var',838,'Size'}|[{'var',838,'Pos'}]]]}|[{'type',838,'wxImage',[]}]]}|[[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'This'}|[{'type',839,'wxImage',[]}]]]]}|[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'Size'}|[{'type',839,'tuple',[{'ann_type',839,[{'var',839,'W'}|[{'type',839,'integer',[]}]]}|[{'ann_type',839,[{'var',839,'H'}|[{'type',839,'integer',[]}]]}]]}]]]]}|[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'Pos'}|[{'type',839,'tuple',[{'ann_type',839,[{'var',839,'X'}|[{'type',839,'integer',[]}]]}|[{'ann_type',839,[{'var',839,'Y'}|[{'type',839,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 846
		'spec' =
		    %% Line 846
		    [{{'size',4},[{'type',846,'bounded_fun',[{'type',846,'fun',[{'type',846,'product',[{'var',846,'This'}|[{'var',846,'Size'}|[{'var',846,'Pos'}|[{'type',846,'list',[{'var',846,'Option'}]}]]]]}|[{'type',846,'wxImage',[]}]]}|[[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'This'}|[{'type',847,'wxImage',[]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Size'}|[{'type',847,'tuple',[{'ann_type',847,[{'var',847,'W'}|[{'type',847,'integer',[]}]]}|[{'ann_type',847,[{'var',847,'H'}|[{'type',847,'integer',[]}]]}]]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Pos'}|[{'type',847,'tuple',[{'ann_type',847,[{'var',847,'X'}|[{'type',847,'integer',[]}]]}|[{'ann_type',847,[{'var',847,'Y'}|[{'type',847,'integer',[]}]]}]]}]]]]}|[{'type',848,'constraint',[{'atom',848,'is_subtype'}|[[{'var',848,'Option'}|[{'type',848,'union',[{'type',848,'tuple',[{'atom',848,'r'}|[{'type',848,'integer',[]}]]}|[{'type',849,'tuple',[{'atom',849,'g'}|[{'type',849,'integer',[]}]]}|[{'type',850,'tuple',[{'atom',850,'b'}|[{'type',850,'integer',[]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 863
		'spec' =
		    %% Line 863
		    [{{'setAlpha',2},[{'type',863,'bounded_fun',[{'type',863,'fun',[{'type',863,'product',[{'var',863,'This'}|[{'var',863,'Alpha'}]]}|[{'atom',863,'ok'}]]}|[[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'This'}|[{'type',864,'wxImage',[]}]]]]}|[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'Alpha'}|[{'type',864,'binary',[]}]]]]}]]]]}]}],
		%% Line 871
		'spec' =
		    %% Line 871
		    [{{'setAlpha',3},[{'type',871,'bounded_fun',[{'type',871,'fun',[{'type',871,'product',[{'var',871,'This'}|[{'var',871,'Alpha'}|[{'type',871,'list',[{'var',871,'Option'}]}]]]}|[{'atom',871,'ok'}]]}|[[{'type',872,'constraint',[{'atom',872,'is_subtype'}|[[{'var',872,'This'}|[{'type',872,'wxImage',[]}]]]]}|[{'type',872,'constraint',[{'atom',872,'is_subtype'}|[[{'var',872,'Alpha'}|[{'type',872,'binary',[]}]]]]}|[{'type',873,'constraint',[{'atom',873,'is_subtype'}|[[{'var',873,'Option'}|[{'type',873,'tuple',[{'atom',873,'static_data'}|[{'type',873,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 885
		'spec' =
		    %% Line 885
		    [{{'setAlpha',4},[{'type',885,'bounded_fun',[{'type',885,'fun',[{'type',885,'product',[{'var',885,'This'}|[{'var',885,'X'}|[{'var',885,'Y'}|[{'var',885,'Alpha'}]]]]}|[{'atom',885,'ok'}]]}|[[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'This'}|[{'type',886,'wxImage',[]}]]]]}|[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'X'}|[{'type',886,'integer',[]}]]]]}|[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'Y'}|[{'type',886,'integer',[]}]]]]}|[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'Alpha'}|[{'type',886,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 894
		'spec' =
		    %% Line 894
		    [{{'setData',2},[{'type',894,'bounded_fun',[{'type',894,'fun',[{'type',894,'product',[{'var',894,'This'}|[{'var',894,'Data'}]]}|[{'atom',894,'ok'}]]}|[[{'type',895,'constraint',[{'atom',895,'is_subtype'}|[[{'var',895,'This'}|[{'type',895,'wxImage',[]}]]]]}|[{'type',895,'constraint',[{'atom',895,'is_subtype'}|[[{'var',895,'Data'}|[{'type',895,'binary',[]}]]]]}]]]]}]}],
		%% Line 902
		'spec' =
		    %% Line 902
		    [{{'setData',3},[{'type',902,'bounded_fun',[{'type',902,'fun',[{'type',902,'product',[{'var',902,'This'}|[{'var',902,'Data'}|[{'type',902,'list',[{'var',902,'Option'}]}]]]}|[{'atom',902,'ok'}]]}|[[{'type',903,'constraint',[{'atom',903,'is_subtype'}|[[{'var',903,'This'}|[{'type',903,'wxImage',[]}]]]]}|[{'type',903,'constraint',[{'atom',903,'is_subtype'}|[[{'var',903,'Data'}|[{'type',903,'binary',[]}]]]]}|[{'type',904,'constraint',[{'atom',904,'is_subtype'}|[[{'var',904,'Option'}|[{'type',904,'tuple',[{'atom',904,'static_data'}|[{'type',904,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 916
		'spec' =
		    %% Line 916
		    [{{'setData',4},[{'type',916,'bounded_fun',[{'type',916,'fun',[{'type',916,'product',[{'var',916,'This'}|[{'var',916,'Data'}|[{'var',916,'New_width'}|[{'var',916,'New_height'}]]]]}|[{'atom',916,'ok'}]]}|[[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'This'}|[{'type',917,'wxImage',[]}]]]]}|[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'Data'}|[{'type',917,'binary',[]}]]]]}|[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'New_width'}|[{'type',917,'integer',[]}]]]]}|[{'type',917,'constraint',[{'atom',917,'is_subtype'}|[[{'var',917,'New_height'}|[{'type',917,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 924
		'spec' =
		    %% Line 924
		    [{{'setData',5},[{'type',924,'bounded_fun',[{'type',924,'fun',[{'type',924,'product',[{'var',924,'This'}|[{'var',924,'Data'}|[{'var',924,'New_width'}|[{'var',924,'New_height'}|[{'type',924,'list',[{'var',924,'Option'}]}]]]]]}|[{'atom',924,'ok'}]]}|[[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'This'}|[{'type',925,'wxImage',[]}]]]]}|[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'Data'}|[{'type',925,'binary',[]}]]]]}|[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'New_width'}|[{'type',925,'integer',[]}]]]]}|[{'type',925,'constraint',[{'atom',925,'is_subtype'}|[[{'var',925,'New_height'}|[{'type',925,'integer',[]}]]]]}|[{'type',926,'constraint',[{'atom',926,'is_subtype'}|[[{'var',926,'Option'}|[{'type',926,'tuple',[{'atom',926,'static_data'}|[{'type',926,'boolean',[]}]]}]]]]}]]]]]]]}]}],
		%% Line 938
		'spec' =
		    %% Line 938
		    [{{'setMask',1},[{'type',938,'bounded_fun',[{'type',938,'fun',[{'type',938,'product',[{'var',938,'This'}]}|[{'atom',938,'ok'}]]}|[[{'type',939,'constraint',[{'atom',939,'is_subtype'}|[[{'var',939,'This'}|[{'type',939,'wxImage',[]}]]]]}]]]}]}],
		%% Line 946
		'spec' =
		    %% Line 946
		    [{{'setMask',2},[{'type',946,'bounded_fun',[{'type',946,'fun',[{'type',946,'product',[{'var',946,'This'}|[{'type',946,'list',[{'var',946,'Option'}]}]]}|[{'atom',946,'ok'}]]}|[[{'type',947,'constraint',[{'atom',947,'is_subtype'}|[[{'var',947,'This'}|[{'type',947,'wxImage',[]}]]]]}|[{'type',948,'constraint',[{'atom',948,'is_subtype'}|[[{'var',948,'Option'}|[{'type',948,'tuple',[{'atom',948,'mask'}|[{'type',948,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 959
		'spec' =
		    %% Line 959
		    [{{'setMaskColour',4},[{'type',959,'bounded_fun',[{'type',959,'fun',[{'type',959,'product',[{'var',959,'This'}|[{'var',959,'R'}|[{'var',959,'G'}|[{'var',959,'B'}]]]]}|[{'atom',959,'ok'}]]}|[[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'This'}|[{'type',960,'wxImage',[]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'R'}|[{'type',960,'integer',[]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'G'}|[{'type',960,'integer',[]}]]]]}|[{'type',960,'constraint',[{'atom',960,'is_subtype'}|[[{'var',960,'B'}|[{'type',960,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 968
		'spec' =
		    %% Line 968
		    [{{'setMaskFromImage',5},[{'type',968,'bounded_fun',[{'type',968,'fun',[{'type',968,'product',[{'var',968,'This'}|[{'var',968,'Mask'}|[{'var',968,'Mr'}|[{'var',968,'Mg'}|[{'var',968,'Mb'}]]]]]}|[{'type',968,'boolean',[]}]]}|[[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'This'}|[{'type',969,'wxImage',[]}]]]]}|[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'Mask'}|[{'type',969,'wxImage',[]}]]]]}|[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'Mr'}|[{'type',969,'integer',[]}]]]]}|[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'Mg'}|[{'type',969,'integer',[]}]]]]}|[{'type',969,'constraint',[{'atom',969,'is_subtype'}|[[{'var',969,'Mb'}|[{'type',969,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 982
		'spec' =
		    %% Line 982
		    [{{'setOption',3},[{'type',982,'bounded_fun',[{'type',982,'fun',[{'type',982,'product',[{'var',982,'This'}|[{'var',982,'Name'}|[{'var',982,'Value'}]]]}|[{'atom',982,'ok'}]]}|[[{'type',983,'constraint',[{'atom',983,'is_subtype'}|[[{'var',983,'This'}|[{'type',983,'wxImage',[]}]]]]}|[{'type',983,'constraint',[{'atom',983,'is_subtype'}|[[{'var',983,'Name'}|[{'remote_type',983,[{'atom',983,'unicode'}|[{'atom',983,'chardata'}|[[]]]]}]]]]}|[{'type',983,'constraint',[{'atom',983,'is_subtype'}|[[{'var',983,'Value'}|[{'type',983,'integer',[]}]]]]}]]]]]}|[{'type',984,'bounded_fun',[{'type',984,'fun',[{'type',984,'product',[{'var',984,'This'}|[{'var',984,'Name'}|[{'var',984,'Value'}]]]}|[{'atom',984,'ok'}]]}|[[{'type',985,'constraint',[{'atom',985,'is_subtype'}|[[{'var',985,'This'}|[{'type',985,'wxImage',[]}]]]]}|[{'type',985,'constraint',[{'atom',985,'is_subtype'}|[[{'var',985,'Name'}|[{'remote_type',985,[{'atom',985,'unicode'}|[{'atom',985,'chardata'}|[[]]]]}]]]]}|[{'type',985,'constraint',[{'atom',985,'is_subtype'}|[[{'var',985,'Value'}|[{'remote_type',985,[{'atom',985,'unicode'}|[{'atom',985,'chardata'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 1001
		'spec' =
		    %% Line 1001
		    [{{'setPalette',2},[{'type',1001,'bounded_fun',[{'type',1001,'fun',[{'type',1001,'product',[{'var',1001,'This'}|[{'var',1001,'Palette'}]]}|[{'atom',1001,'ok'}]]}|[[{'type',1002,'constraint',[{'atom',1002,'is_subtype'}|[[{'var',1002,'This'}|[{'type',1002,'wxImage',[]}]]]]}|[{'type',1002,'constraint',[{'atom',1002,'is_subtype'}|[[{'var',1002,'Palette'}|[{'remote_type',1002,[{'atom',1002,'wxPalette'}|[{'atom',1002,'wxPalette'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1010
		'spec' =
		    %% Line 1010
		    [{{'setRGB',5},[{'type',1010,'bounded_fun',[{'type',1010,'fun',[{'type',1010,'product',[{'var',1010,'This'}|[{'var',1010,'Rect'}|[{'var',1010,'R'}|[{'var',1010,'G'}|[{'var',1010,'B'}]]]]]}|[{'atom',1010,'ok'}]]}|[[{'type',1011,'constraint',[{'atom',1011,'is_subtype'}|[[{'var',1011,'This'}|[{'type',1011,'wxImage',[]}]]]]}|[{'type',1011,'constraint',[{'atom',1011,'is_subtype'}|[[{'var',1011,'Rect'}|[{'type',1011,'tuple',[{'ann_type',1011,[{'var',1011,'X'}|[{'type',1011,'integer',[]}]]}|[{'ann_type',1011,[{'var',1011,'Y'}|[{'type',1011,'integer',[]}]]}|[{'ann_type',1011,[{'var',1011,'W'}|[{'type',1011,'integer',[]}]]}|[{'ann_type',1011,[{'var',1011,'H'}|[{'type',1011,'integer',[]}]]}]]]]}]]]]}|[{'type',1011,'constraint',[{'atom',1011,'is_subtype'}|[[{'var',1011,'R'}|[{'type',1011,'integer',[]}]]]]}|[{'type',1011,'constraint',[{'atom',1011,'is_subtype'}|[[{'var',1011,'G'}|[{'type',1011,'integer',[]}]]]]}|[{'type',1011,'constraint',[{'atom',1011,'is_subtype'}|[[{'var',1011,'B'}|[{'type',1011,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1019
		'spec' =
		    %% Line 1019
		    [{{'setRGB',6},[{'type',1019,'bounded_fun',[{'type',1019,'fun',[{'type',1019,'product',[{'var',1019,'This'}|[{'var',1019,'X'}|[{'var',1019,'Y'}|[{'var',1019,'R'}|[{'var',1019,'G'}|[{'var',1019,'B'}]]]]]]}|[{'atom',1019,'ok'}]]}|[[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'This'}|[{'type',1020,'wxImage',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'X'}|[{'type',1020,'integer',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'Y'}|[{'type',1020,'integer',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'R'}|[{'type',1020,'integer',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'G'}|[{'type',1020,'integer',[]}]]]]}|[{'type',1020,'constraint',[{'atom',1020,'is_subtype'}|[[{'var',1020,'B'}|[{'type',1020,'integer',[]}]]]]}]]]]]]]]}]}],
		%% Line 1028
		'spec' =
		    %% Line 1028
		    [{{'destroy',1},[{'type',1028,'fun',[{'type',1028,'product',[{'ann_type',1028,[{'var',1028,'This'}|[{'type',1028,'wxImage',[]}]]}]}|[{'atom',1028,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 52
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxImage'})
'new'/0 =
    %% Line 57
    fun () ->
	%% Line 58
	call 'wxe_util':'construct'
	    (1081, %% Line 59
		   #{}#)
'new'/1 =
    %% Line 65
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 66
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 67
	      apply 'new'/2
		  (Name, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 83
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Width,Height>
	      when let <_cor2> =
		    %% Line 84
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor3> =
			%% Line 84
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 84
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 85
	      apply 'new'/3
		  (Width, Height, [])
	  %% Line 86
	  <Name,Options>
	      when let <_cor4> =
		    %% Line 87
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor5> =
			%% Line 87
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 87
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <Name_UC> =
		  %% Line 88
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <MOpts> =
		      %% Line 89
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'type',Type},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Type>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 90
			      <{'index',Index},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Index>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 91
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 92
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 92
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor21> =
				  %% Line 94
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor16> =
				      %% Line 94
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor17> =
					  %% Line 94
					  call 'erlang':'+'
					      (4, _cor16)
				      in  let <_cor18> =
					      %% Line 94
					      call 'erlang':'band'
						  (_cor17, 7)
					  in  let <_cor19> =
						  %% Line 94
						  call 'erlang':'-'
						      (8, _cor18)
					      in  let <_cor20> =
						      %% Line 94
						      call 'erlang':'band'
							  (_cor19, 7)
						  in  let <_cor22> =
							  %% Line 94
							  #{#<_cor21>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor20,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 93
							  call 'wxe_util':'construct'
							      (1085, _cor22)
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Width,Height,Data>
	      when %% Line 115
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor5> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 116
	      apply 'new'/4
		  (Width, Height, Data, [])
	  %% Line 117
	  <Width,Height,Options>
	      when %% Line 118
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor9> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <MOpts> =
		  %% Line 119
		  ( fun (_cor14,_cor13) ->
			case <_cor14,_cor13> of
			  <{'clear',Clear},Acc> when 'true' ->
			      let <_cor11> =
				  call 'wxe_util':'from_bool'
				      (Clear)
			      in  let <_cor12> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor11>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			  %% Line 120
			  <BadOpt,_cor51> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/3-fun-0-'}}] )
	      in  let <_cor18> =
		      %% Line 121
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 121
			  call 'erlang':'list_to_binary'
			      (_cor18)
		      in  let <_cor20> =
			      %% Line 123
			      #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				#<Height>(32,1,'integer',['unsigned'|['native']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 122
			      call 'wxe_util':'construct'
				  (1082, _cor20)
	  %% Line 124
	  <Name,Mimetype,Options>
	      when %% Line 125
		try
		    let <_cor21> =
			call 'erlang':'is_list'
			    (Name)
		    in  let <_cor22> =
			    call 'erlang':'is_list'
				(Mimetype)
			in  let <_cor23> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor24> =
				    call 'erlang':'and'
					(_cor22, _cor23)
				in  call 'erlang':'and'
					(_cor21, _cor24)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Name_UC> =
		  %% Line 126
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <Mimetype_UC> =
		      %% Line 127
		      call 'unicode':'characters_to_binary'
			  ([Mimetype|[0]])
		  in  let <MOpts> =
			  %% Line 128
			  ( fun (_cor29,_cor28) ->
				case <_cor29,_cor28> of
				  <{'index',Index},Acc> when 'true' ->
				      let <_cor27> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Index>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor27|Acc]
				  %% Line 129
				  <BadOpt,_cor52> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-new/3-fun-1-'}}] )
		      in  let <_cor33> =
			      %% Line 130
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 130
				  call 'erlang':'list_to_binary'
				      (_cor33)
			      in  let <_cor46> =
				      %% Line 132
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor41> =
					  %% Line 132
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor42> =
					      %% Line 132
					      call 'erlang':'+'
						  (4, _cor41)
					  in  let <_cor43> =
						  %% Line 132
						  call 'erlang':'band'
						      (_cor42, 7)
					      in  let <_cor44> =
						      %% Line 132
						      call 'erlang':'-'
							  (8, _cor43)
						  in  let <_cor45> =
							  %% Line 132
							  call 'erlang':'band'
							      (_cor44, 7)
						      in  let <_cor40> =
							      %% Line 132
							      call 'erlang':'byte_size'
								  (Mimetype_UC)
							  in  let <_cor35> =
								  %% Line 132
								  call 'erlang':'byte_size'
								      (Mimetype_UC)
							      in  let <_cor36> =
								      %% Line 132
								      call 'erlang':'+'
									  (4, _cor35)
								  in  let <_cor37> =
									  %% Line 132
									  call 'erlang':'band'
									      (_cor36, 7)
								      in  let <_cor38> =
									      %% Line 132
									      call 'erlang':'-'
										  (8, _cor37)
									  in  let <_cor39> =
										  %% Line 132
										  call 'erlang':'band'
										      (_cor38, 7)
									      in  let <_cor47> =
										      %% Line 132
										      #{#<_cor46>(32,1,'integer',['unsigned'|['native']]),
											#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
											#<0>(_cor45,8,'integer',['unsigned'|['big']]),
											#<_cor40>(32,1,'integer',['unsigned'|['native']]),
											#<Mimetype_UC>('all',8,'binary',['unsigned'|['big']]),
											#<0>(_cor39,8,'integer',['unsigned'|['big']]),
											#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
										  in  %% Line 131
										      call 'wxe_util':'construct'
											  (1086, _cor47)
	  ( <_cor50,_cor49,_cor48> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor50,_cor49,_cor48})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 146
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,Data,Alpha>
	      when %% Line 147
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor7> =
				    call 'erlang':'is_binary'
					(Alpha)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 148
	      apply 'new'/5
		  (Width, Height, Data, Alpha, [])
	  %% Line 149
	  <Width,Height,Data,Options>
	      when %% Line 150
		try
		    let <_cor10> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor11> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor12> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor13> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor14> =
					call 'erlang':'and'
					    (_cor12, _cor13)
				    in  let <_cor15> =
					    call 'erlang':'and'
						(_cor11, _cor14)
					in  call 'erlang':'and'
						(_cor10, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 151
		  call 'wxe_util':'send_bin'
		      (Data)
		  let <MOpts> =
		      %% Line 152
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{'static_data',Static_data},Acc> when 'true' ->
				  let <_cor16> =
				      call 'wxe_util':'from_bool'
					  (Static_data)
				  in  let <_cor17> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor16>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor17|Acc]
			      %% Line 153
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/4-fun-0-'}}] )
		  in  let <_cor23> =
			  %% Line 154
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 154
			      call 'erlang':'list_to_binary'
				  (_cor23)
			  in  let <_cor25> =
				  %% Line 156
				  #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 155
				  call 'wxe_util':'construct'
				      (1083, _cor25)
	  ( <_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'new'/5 =
    %% Line 162
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,Data,Alpha,Options>
	      when %% Line 163
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor7> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor8> =
				    call 'erlang':'is_binary'
					(Alpha)
				in  let <_cor9> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor7, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor6, _cor11)
						in  call 'erlang':'and'
							(_cor5, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 164
		  call 'wxe_util':'send_bin'
		      (Data)
		  do  %% Line 165
		      call 'wxe_util':'send_bin'
			  (Alpha)
		      let <MOpts> =
			  %% Line 166
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'static_data',Static_data},Acc> when 'true' ->
				      let <_cor13> =
					  call 'wxe_util':'from_bool'
					      (Static_data)
				      in  let <_cor14> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor13>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor14|Acc]
				  %% Line 167
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-new/5-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 168
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 168
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor22> =
				      %% Line 170
				      #{#<Width>(32,1,'integer',['unsigned'|['native']]),
					#<Height>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 169
				      call 'wxe_util':'construct'
					  (1084, _cor22)
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'new',5}}] )
	    -| ['compiler_generated'] )
	end
'blur'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Radius>
	      when %% Line 176
		call 'erlang':'is_integer'
		    (Radius) ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 179
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Radius>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 178
		      call 'wxe_util':'call'
			  (1087, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'blur',2}}] )
	    -| ['compiler_generated'] )
	end
'blurHorizontal'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Radius>
	      when %% Line 185
		call 'erlang':'is_integer'
		    (Radius) ->
	      do  %% Line 186
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 188
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Radius>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 187
		      call 'wxe_util':'call'
			  (1088, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'blurHorizontal',2}}] )
	    -| ['compiler_generated'] )
	end
'blurVertical'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Radius>
	      when %% Line 194
		call 'erlang':'is_integer'
		    (Radius) ->
	      do  %% Line 195
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 197
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Radius>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 196
		      call 'wxe_util':'call'
			  (1089, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'blurVertical',2}}] )
	    -| ['compiler_generated'] )
	end
'convertAlphaToMask'/1 =
    %% Line 203
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 204
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 205
	      apply 'convertAlphaToMask'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'convertAlphaToMask',1}}] )
	    -| ['compiler_generated'] )
	end
'convertAlphaToMask'/2 =
    %% Line 211
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 212
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 213
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 214
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'threshold',Threshold},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Threshold>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 215
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-convertAlphaToMask/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 216
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 216
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 218
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 217
				  call 'wxe_util':'call'
				      (1090, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'convertAlphaToMask',2}}] )
	    -| ['compiler_generated'] )
	end
'convertToGreyscale'/1 =
    %% Line 224
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 225
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 226
	      apply 'convertToGreyscale'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'convertToGreyscale',1}}] )
	    -| ['compiler_generated'] )
	end
'convertToGreyscale'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 235
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 237
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'lr',Lr},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Lr>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 238
			      <{'lg',Lg},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Lg>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 239
			      <{'lb',Lb},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Lb>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			      %% Line 240
			      <BadOpt,_cor18> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-convertToGreyscale/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 241
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 241
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 243
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 242
				  call 'wxe_util':'call'
				      (1091, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'convertToGreyscale',2}}] )
	    -| ['compiler_generated'] )
	end
'convertToMono'/4 =
    %% Line 248
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},R,G,B>
	      when %% Line 249
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (R)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(G)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (B)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 250
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 252
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<R>(32,1,'integer',['unsigned'|['native']]),
			#<G>(32,1,'integer',['unsigned'|['native']]),
			#<B>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 251
		      call 'wxe_util':'call'
			  (1092, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'convertToMono',4}}] )
	    -| ['compiler_generated'] )
	end
'copy'/1 =
    %% Line 257
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 258
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 260
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 259
		      call 'wxe_util':'call'
			  (1093, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'copy',1}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 267
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 267
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 267
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 268
	      apply 'create'/4
		  (This, Width, Height, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/4 =
    %% Line 282
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor29,_cor30,_cor31},Width,Height,Data>
	      when %% Line 283
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Width)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Height)
			  in  let <_cor6> =
				  call 'erlang':'is_binary'
				      (Data)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 284
	      apply 'create'/5
		  (This, Width, Height, Data, [])
	  %% Line 285
	  <{'wx_ref',ThisRef,ThisT,_cor32},Width,Height,Options>
	      when %% Line 286
		try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor11> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 287
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 288
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'clear',Clear},Acc> when 'true' ->
				  let <_cor15> =
				      call 'wxe_util':'from_bool'
					  (Clear)
				  in  let <_cor16> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor15>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor16|Acc]
			      %% Line 289
			      <BadOpt,_cor33> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-create/4-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 290
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 290
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 292
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 291
				  call 'wxe_util':'call'
				      (1094, _cor24)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'create'/5 =
    %% Line 306
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor35,_cor36,_cor37},Width,Height,Data,Alpha>
	      when %% Line 307
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (Width)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (Height)
			  in  let <_cor7> =
				  call 'erlang':'is_binary'
				      (Data)
			      in  let <_cor8> =
				      call 'erlang':'is_binary'
					  (Alpha)
				  in  let <_cor9> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor7, _cor8)
					    -| ['compiler_generated'] )
				      in  let <_cor10> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor6, _cor9)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor5, _cor10)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 308
	      apply 'create'/6
		  (This, Width, Height, Data, Alpha, [])
	  %% Line 309
	  <{'wx_ref',ThisRef,ThisT,_cor38},Width,Height,Data,Options>
	      when %% Line 310
		try
		    let <_cor12> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor13> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor14> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor15> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor16> =
					call 'erlang':'and'
					    (_cor14, _cor15)
				    in  let <_cor17> =
					    call 'erlang':'and'
						(_cor13, _cor16)
					in  call 'erlang':'and'
						(_cor12, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 311
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 312
		      call 'wxe_util':'send_bin'
			  (Data)
		      let <MOpts> =
			  %% Line 313
			  ( fun (_cor23,_cor22) ->
				case <_cor23,_cor22> of
				  <{'static_data',Static_data},Acc> when 'true' ->
				      let <_cor20> =
					  call 'wxe_util':'from_bool'
					      (Static_data)
				      in  let <_cor21> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor20>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor21|Acc]
				  %% Line 314
				  <BadOpt,_cor39> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/5-fun-0-'}}] )
		      in  let <_cor27> =
			      %% Line 315
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 315
				  call 'erlang':'list_to_binary'
				      (_cor27)
			      in  let <_cor29> =
				      %% Line 317
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<Width>(32,1,'integer',['unsigned'|['native']]),
					#<Height>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 316
				      call 'wxe_util':'call'
					  (1095, _cor29)
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'create',5}}] )
	    -| ['compiler_generated'] )
	end
'create'/6 =
    %% Line 323
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Width,Height,Data,Alpha,Options>
	      when %% Line 324
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor8> =
				call 'erlang':'is_binary'
				    (Data)
			    in  let <_cor9> =
				    call 'erlang':'is_binary'
					(Alpha)
				in  let <_cor10> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 325
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 326
		      call 'wxe_util':'send_bin'
			  (Data)
		      do  %% Line 327
			  call 'wxe_util':'send_bin'
			      (Alpha)
			  let <MOpts> =
			      %% Line 328
			      ( fun (_cor19,_cor18) ->
				    case <_cor19,_cor18> of
				      <{'static_data',Static_data},Acc> when 'true' ->
					  let <_cor16> =
					      call 'wxe_util':'from_bool'
						  (Static_data)
					  in  let <_cor17> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor17|Acc]
				      %% Line 329
				      <BadOpt,_cor33> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-create/6-fun-0-'}}] )
			  in  let <_cor23> =
				  %% Line 330
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 330
				      call 'erlang':'list_to_binary'
					  (_cor23)
				  in  let <_cor25> =
					  %% Line 332
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<Width>(32,1,'integer',['unsigned'|['native']]),
					    #<Height>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 331
					  call 'wxe_util':'call'
					      (1096, _cor25)
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'create',6}}] )
	    -| ['compiler_generated'] )
	end
'Destroy'/1 =
    %% Line 337
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 338
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 340
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 339
		      call 'wxe_util':'cast'
			  (1097, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'Destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'findFirstUnusedColour'/1 =
    %% Line 347
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 348
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 349
	      apply 'findFirstUnusedColour'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'findFirstUnusedColour',1}}] )
	    -| ['compiler_generated'] )
	end
'findFirstUnusedColour'/2 =
    %% Line 358
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 359
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 360
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 361
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'startR',StartR},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<StartR>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 362
			      <{'startG',StartG},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<StartG>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 363
			      <{'startB',StartB},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<StartB>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			      %% Line 364
			      <BadOpt,_cor18> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-findFirstUnusedColour/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 365
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 365
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 367
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 366
				  call 'wxe_util':'call'
				      (1098, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'findFirstUnusedColour',2}}] )
	    -| ['compiler_generated'] )
	end
'getImageExtWildcard'/0 =
    %% Line 371
    fun () ->
	%% Line 372
	call 'wxe_util':'call'
	    (1099, %% Line 373
		   #{}#)
'getAlpha'/1 =
    %% Line 378
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 379
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 381
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 380
		      call 'wxe_util':'call'
			  (1101, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getAlpha',1}}] )
	    -| ['compiler_generated'] )
	end
'getAlpha'/3 =
    %% Line 386
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 387
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 387
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 387
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 388
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 390
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 389
		      call 'wxe_util':'call'
			  (1100, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getAlpha',3}}] )
	    -| ['compiler_generated'] )
	end
'getBlue'/3 =
    %% Line 395
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 396
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 396
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 396
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 397
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 399
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 398
		      call 'wxe_util':'call'
			  (1102, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getBlue',3}}] )
	    -| ['compiler_generated'] )
	end
'getData'/1 =
    %% Line 404
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 405
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 407
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 406
		      call 'wxe_util':'call'
			  (1103, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getData',1}}] )
	    -| ['compiler_generated'] )
	end
'getGreen'/3 =
    %% Line 412
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 413
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 413
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 413
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 414
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 416
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 415
		      call 'wxe_util':'call'
			  (1104, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getGreen',3}}] )
	    -| ['compiler_generated'] )
	end
'getImageCount'/1 =
    %% Line 422
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 423
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 424
	      apply 'getImageCount'/2
		  (Name, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getImageCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getImageCount'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Options>
	      when let <_cor2> =
		    %% Line 432
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor3> =
			%% Line 432
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 432
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Name_UC> =
		  %% Line 433
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <MOpts> =
		      %% Line 434
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'type',Type},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Type>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 435
			      <BadOpt,_cor22> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getImageCount/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 436
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 436
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor18> =
				  %% Line 438
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor13> =
				      %% Line 438
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor14> =
					  %% Line 438
					  call 'erlang':'+'
					      (4, _cor13)
				      in  let <_cor15> =
					      %% Line 438
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor16> =
						  %% Line 438
						  call 'erlang':'-'
						      (8, _cor15)
					      in  let <_cor17> =
						      %% Line 438
						      call 'erlang':'band'
							  (_cor16, 7)
						  in  let <_cor19> =
							  %% Line 438
							  #{#<_cor18>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor17,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 437
							  call 'wxe_util':'call'
							      (1105, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'getImageCount',2}}] )
	    -| ['compiler_generated'] )
	end
'getHeight'/1 =
    %% Line 443
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 444
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 446
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 445
		      call 'wxe_util':'call'
			  (1106, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getHeight',1}}] )
	    -| ['compiler_generated'] )
	end
'getMaskBlue'/1 =
    %% Line 451
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 452
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 454
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 453
		      call 'wxe_util':'call'
			  (1107, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMaskBlue',1}}] )
	    -| ['compiler_generated'] )
	end
'getMaskGreen'/1 =
    %% Line 459
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 460
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 462
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 461
		      call 'wxe_util':'call'
			  (1108, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMaskGreen',1}}] )
	    -| ['compiler_generated'] )
	end
'getMaskRed'/1 =
    %% Line 467
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 468
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 470
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 469
		      call 'wxe_util':'call'
			  (1109, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMaskRed',1}}] )
	    -| ['compiler_generated'] )
	end
'getOrFindMaskColour'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 477
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 479
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 478
		      call 'wxe_util':'call'
			  (1110, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getOrFindMaskColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getPalette'/1 =
    %% Line 484
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 485
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 487
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 486
		      call 'wxe_util':'call'
			  (1111, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPalette',1}}] )
	    -| ['compiler_generated'] )
	end
'getRed'/3 =
    %% Line 492
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 493
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 493
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 493
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 494
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 496
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 495
		      call 'wxe_util':'call'
			  (1112, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getRed',3}}] )
	    -| ['compiler_generated'] )
	end
'getSubImage'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{RectX,RectY,RectW,RectH}>
	      when %% Line 502
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 503
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 505
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 504
		      call 'wxe_util':'call'
			  (1113, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'getSubImage',2}}] )
	    -| ['compiler_generated'] )
	end
'getWidth'/1 =
    %% Line 510
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 511
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 513
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 512
		      call 'wxe_util':'call'
			  (1114, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'hasAlpha'/1 =
    %% Line 518
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 519
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 521
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 520
		      call 'wxe_util':'call'
			  (1115, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasAlpha',1}}] )
	    -| ['compiler_generated'] )
	end
'hasMask'/1 =
    %% Line 526
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 527
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 529
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 528
		      call 'wxe_util':'call'
			  (1116, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasMask',1}}] )
	    -| ['compiler_generated'] )
	end
'getOption'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 535
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 536
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 537
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 539
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 539
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 539
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 539
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 539
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 539
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 539
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 538
						  call 'wxe_util':'call'
						      (1117, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getOption',2}}] )
	    -| ['compiler_generated'] )
	end
'getOptionInt'/2 =
    %% Line 544
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 545
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 546
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 547
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 549
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 549
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 549
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 549
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 549
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 549
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 549
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 548
						  call 'wxe_util':'call'
						      (1118, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getOptionInt',2}}] )
	    -| ['compiler_generated'] )
	end
'hasOption'/2 =
    %% Line 554
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 555
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 556
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 557
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 559
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 559
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 559
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 559
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 559
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 559
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 559
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 558
						  call 'wxe_util':'call'
						      (1119, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'hasOption',2}}] )
	    -| ['compiler_generated'] )
	end
'initAlpha'/1 =
    %% Line 564
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 565
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 567
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 566
		      call 'wxe_util':'cast'
			  (1120, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'initAlpha',1}}] )
	    -| ['compiler_generated'] )
	end
'initStandardHandlers'/0 =
    %% Line 571
    fun () ->
	%% Line 572
	call 'wxe_util':'cast'
	    (1121, %% Line 573
		   #{}#)
'isTransparent'/3 =
    %% Line 579
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 580
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 580
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 580
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 581
	      apply 'isTransparent'/4
		  (This, X, Y, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'isTransparent',3}}] )
	    -| ['compiler_generated'] )
	end
'isTransparent'/4 =
    %% Line 587
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,Options>
	      when %% Line 588
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 589
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 590
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'threshold',Threshold},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Threshold>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 591
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-isTransparent/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 592
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 592
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 594
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<X>(32,1,'integer',['unsigned'|['native']]),
				    #<Y>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 593
				  call 'wxe_util':'call'
				      (1122, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'isTransparent',4}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/2 =
    %% Line 600
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Name>
	      when %% Line 601
		call 'erlang':'is_list'
		    (Name) ->
	      %% Line 602
	      apply 'loadFile'/3
		  (This, Name, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'loadFile',2}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/3 =
    %% Line 609
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor27},Name,Options>
	      when let <_cor3> =
		    %% Line 610
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			%% Line 610
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 610
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 611
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 612
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <MOpts> =
			  %% Line 613
			  ( fun (_cor11,_cor10) ->
				case <_cor11,_cor10> of
				  <{'type',Type},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Type>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 614
				  <{'index',Index},Acc> when 'true' ->
				      let <_cor9> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<Index>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor9|Acc]
				  %% Line 615
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-loadFile/3-fun-0-'}}] )
		      in  let <_cor15> =
			      %% Line 616
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 616
				  call 'erlang':'list_to_binary'
				      (_cor15)
			      in  let <_cor22> =
				      %% Line 618
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor17> =
					  %% Line 618
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor18> =
					      %% Line 618
					      call 'erlang':'+'
						  (0, _cor17)
					  in  let <_cor19> =
						  %% Line 618
						  call 'erlang':'band'
						      (_cor18, 7)
					      in  let <_cor20> =
						      %% Line 618
						      call 'erlang':'-'
							  (8, _cor19)
						  in  let <_cor21> =
							  %% Line 618
							  call 'erlang':'band'
							      (_cor20, 7)
						      in  let <_cor23> =
							      %% Line 618
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor22>(32,1,'integer',['unsigned'|['native']]),
								#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor21,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 617
							      call 'wxe_util':'call'
								  (1123, _cor23)
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'loadFile',3}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/4 =
    %% Line 624
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Name,Mimetype,Options>
	      when %% Line 625
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Name)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Mimetype)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 626
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 627
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <Mimetype_UC> =
			  %% Line 628
			  call 'unicode':'characters_to_binary'
			      ([Mimetype|[0]])
		      in  let <MOpts> =
			      %% Line 629
			      ( fun (_cor14,_cor13) ->
				    case <_cor14,_cor13> of
				      <{'index',Index},Acc> when 'true' ->
					  let <_cor12> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<Index>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor12|Acc]
				      %% Line 630
				      <BadOpt,_cor38> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-loadFile/4-fun-0-'}}] )
			  in  let <_cor18> =
				  %% Line 631
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 631
				      call 'erlang':'list_to_binary'
					  (_cor18)
				  in  let <_cor31> =
					  %% Line 633
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor26> =
					      %% Line 633
					      call 'erlang':'byte_size'
						  (Name_UC)
					  in  let <_cor27> =
						  %% Line 633
						  call 'erlang':'+'
						      (0, _cor26)
					      in  let <_cor28> =
						      %% Line 633
						      call 'erlang':'band'
							  (_cor27, 7)
						  in  let <_cor29> =
							  %% Line 633
							  call 'erlang':'-'
							      (8, _cor28)
						      in  let <_cor30> =
							      %% Line 633
							      call 'erlang':'band'
								  (_cor29, 7)
							  in  let <_cor25> =
								  %% Line 633
								  call 'erlang':'byte_size'
								      (Mimetype_UC)
							      in  let <_cor20> =
								      %% Line 633
								      call 'erlang':'byte_size'
									  (Mimetype_UC)
								  in  let <_cor21> =
									  %% Line 633
									  call 'erlang':'+'
									      (4, _cor20)
								      in  let <_cor22> =
									      %% Line 633
									      call 'erlang':'band'
										  (_cor21, 7)
									  in  let <_cor23> =
										  %% Line 633
										  call 'erlang':'-'
										      (8, _cor22)
									      in  let <_cor24> =
										      %% Line 633
										      call 'erlang':'band'
											  (_cor23, 7)
										  in  let <_cor32> =
											  %% Line 633
											  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
											    #<_cor31>(32,1,'integer',['unsigned'|['native']]),
											    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor30,8,'integer',['unsigned'|['big']]),
											    #<_cor25>(32,1,'integer',['unsigned'|['native']]),
											    #<Mimetype_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor24,8,'integer',['unsigned'|['big']]),
											    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
										      in  %% Line 632
											  call 'wxe_util':'call'
											      (1124, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'loadFile',4}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 638
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 639
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 641
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 640
		      call 'wxe_util':'call'
			  (1125, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ok',1}}] )
	    -| ['compiler_generated'] )
	end
'removeHandler'/1 =
    %% Line 646
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 647
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Name_UC> =
		  %% Line 648
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor7> =
		      %% Line 650
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor2> =
			  %% Line 650
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor3> =
			      %% Line 650
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 650
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 650
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 650
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 650
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 649
					      call 'wxe_util':'call'
						  (1126, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'removeHandler',1}}] )
	    -| ['compiler_generated'] )
	end
'mirror'/1 =
    %% Line 656
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 657
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 658
	      apply 'mirror'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mirror',1}}] )
	    -| ['compiler_generated'] )
	end
'mirror'/2 =
    %% Line 664
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 665
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 666
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 667
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'horizontally',Horizontally},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Horizontally)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 668
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-mirror/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 669
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 669
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 671
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 670
				  call 'wxe_util':'call'
				      (1127, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'mirror',2}}] )
	    -| ['compiler_generated'] )
	end
'replace'/7 =
    %% Line 676
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor27},R1,G1,B1,R2,G2,B2>
	      when %% Line 677
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (R1)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(G1)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (B1)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(R2)
				in  let <_cor11> =
					call 'erlang':'is_integer'
					    (G2)
				    in  let <_cor12> =
					    call 'erlang':'is_integer'
						(B2)
					in  let <_cor13> =
						call 'erlang':'and'
						    (_cor11, _cor12)
					    in  let <_cor14> =
						    call 'erlang':'and'
							(_cor10, _cor13)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor9, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor8, _cor15)
							in  call 'erlang':'and'
								(_cor7, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 678
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor19> =
		      %% Line 680
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<R1>(32,1,'integer',['unsigned'|['native']]),
			#<G1>(32,1,'integer',['unsigned'|['native']]),
			#<B1>(32,1,'integer',['unsigned'|['native']]),
			#<R2>(32,1,'integer',['unsigned'|['native']]),
			#<G2>(32,1,'integer',['unsigned'|['native']]),
			#<B2>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 679
		      call 'wxe_util':'cast'
			  (1128, _cor19)
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'replace',7}}] )
	    -| ['compiler_generated'] )
	end
'rescale'/3 =
    %% Line 686
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 687
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 687
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 687
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 688
	      apply 'rescale'/4
		  (This, Width, Height, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'rescale',3}}] )
	    -| ['compiler_generated'] )
	end
'rescale'/4 =
    %% Line 695
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Width,Height,Options>
	      when %% Line 696
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 697
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 698
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'quality',Quality},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Quality>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 699
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-rescale/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 700
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 700
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 702
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 701
				  call 'wxe_util':'call'
				      (1129, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'rescale',4}}] )
	    -| ['compiler_generated'] )
	end
'resize'/3 =
    %% Line 708
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Size = {SizeW,SizeH},Pos = {PosX,PosY}>
	      when %% Line 709
		( try
		      let <_cor3> =
			  call 'erlang':'is_integer'
			      (SizeW)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (SizeH)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (PosX)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (PosY)
				  in  let <_cor7> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor5, _cor6)
					    -| ['compiler_generated'] )
				      in  let <_cor8> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor7)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor8)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 710
	      apply 'resize'/4
		  (This, Size, Pos, [])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'resize',3}}] )
	    -| ['compiler_generated'] )
	end
'resize'/4 =
    %% Line 718
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},{SizeW,SizeH},{PosX,PosY},Options>
	      when %% Line 719
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (SizeW)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(SizeH)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (PosX)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(PosY)
				in  let <_cor8> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 720
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 721
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'r',R},Acc> when 'true' ->
				  let <_cor14> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<R>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor14|Acc]
			      %% Line 722
			      <{'g',G},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<G>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor15|Acc]
			      %% Line 723
			      <{'b',B},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<B>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor16|Acc]
			      %% Line 724
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-resize/4-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 725
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 725
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 727
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
				    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
				    #<PosX>(32,1,'integer',['unsigned'|['native']]),
				    #<PosY>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 726
				  call 'wxe_util':'call'
				      (1130, _cor24)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'resize',4}}] )
	    -| ['compiler_generated'] )
	end
'rotate'/3 =
    %% Line 733
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor11,_cor12,_cor13},Angle,Centre_of_rotation = {Centre_of_rotationX,Centre_of_rotationY}>
	      when %% Line 734
		( try
		      let <_cor3> =
			  call 'erlang':'is_number'
			      (Angle)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (Centre_of_rotationX)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (Centre_of_rotationY)
			      in  let <_cor6> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor5)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor3, _cor6)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 735
	      apply 'rotate'/4
		  (This, Angle, Centre_of_rotation, [])
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rotate',3}}] )
	    -| ['compiler_generated'] )
	end
'rotate'/4 =
    %% Line 742
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor27},Angle,{Centre_of_rotationX,Centre_of_rotationY},Options>
	      when %% Line 743
		try
		    let <_cor4> =
			call 'erlang':'is_number'
			    (Angle)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Centre_of_rotationX)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Centre_of_rotationY)
			    in  let <_cor7> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 744
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 745
		      ( fun (_cor16,_cor15) ->
			    case <_cor16,_cor15> of
			      <{'interpolating',Interpolating},Acc> when 'true' ->
				  let <_cor12> =
				      call 'wxe_util':'from_bool'
					  (Interpolating)
				  in  let <_cor13> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor12>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor13|Acc]
			      %% Line 746
			      <{'offset_after_rotation',{Offset_after_rotationX,Offset_after_rotationY}},Acc> when 'true' ->
				  let <_cor14> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Offset_after_rotationX>(32,1,'integer',['unsigned'|['native']]),
					#<Offset_after_rotationY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor14|Acc]
			      %% Line 747
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-rotate/4-fun-0-'}}] )
		  in  let <_cor20> =
			  %% Line 748
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 748
			      call 'erlang':'list_to_binary'
				  (_cor20)
			  in  let <_cor22> =
				  %% Line 750
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Angle>(64,1,'float',['unsigned'|['native']]),
				    #<Centre_of_rotationX>(32,1,'integer',['unsigned'|['native']]),
				    #<Centre_of_rotationY>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 749
				  call 'wxe_util':'call'
				      (1131, _cor22)
	  ( <_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'rotate',4}}] )
	    -| ['compiler_generated'] )
	end
'rotateHue'/2 =
    %% Line 755
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Angle>
	      when %% Line 756
		call 'erlang':'is_number'
		    (Angle) ->
	      do  %% Line 757
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 759
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Angle>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 758
		      call 'wxe_util':'cast'
			  (1132, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'rotateHue',2}}] )
	    -| ['compiler_generated'] )
	end
'rotate90'/1 =
    %% Line 765
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 766
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 767
	      apply 'rotate90'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'rotate90',1}}] )
	    -| ['compiler_generated'] )
	end
'rotate90'/2 =
    %% Line 773
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 774
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 775
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 776
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'clockwise',Clockwise},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Clockwise)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 777
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-rotate90/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 778
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 778
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 780
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 779
				  call 'wxe_util':'call'
				      (1133, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'rotate90',2}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/2 =
    %% Line 785
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 786
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 787
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 788
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 790
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 790
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 790
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 790
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 790
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 790
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 790
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 789
						  call 'wxe_util':'call'
						      (1134, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'saveFile',2}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/3 =
    %% Line 801
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Name,Type>
	      when let <_cor3> =
		    %% Line 802
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			%% Line 802
			call 'erlang':'is_integer'
			    (Type)
		    in  %% Line 802
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 803
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 804
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor13> =
			  %% Line 806
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor8> =
			      %% Line 806
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor9> =
				  %% Line 806
				  call 'erlang':'+'
				      (0, _cor8)
			      in  let <_cor10> =
				      %% Line 806
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 806
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 806
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 806
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']]),
						    #<Type>(32,1,'integer',['unsigned'|['native']])}#
					      in  %% Line 805
						  call 'wxe_util':'call'
						      (1135, _cor14)
	  %% Line 807
	  <{'wx_ref',ThisRef,ThisT,_cor38},Name,Mimetype>
	      when let <_cor15> =
		    %% Line 808
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor16> =
			%% Line 808
			call 'erlang':'is_list'
			    (Mimetype)
		    in  %% Line 808
			call 'erlang':'and'
			    (_cor15, _cor16) ->
	      do  %% Line 809
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 810
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <Mimetype_UC> =
			  %% Line 811
			  call 'unicode':'characters_to_binary'
			      ([Mimetype|[0]])
		      in  let <_cor32> =
			      %% Line 813
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor27> =
				  %% Line 813
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor28> =
				      %% Line 813
				      call 'erlang':'+'
					  (0, _cor27)
				  in  let <_cor29> =
					  %% Line 813
					  call 'erlang':'band'
					      (_cor28, 7)
				      in  let <_cor30> =
					      %% Line 813
					      call 'erlang':'-'
						  (8, _cor29)
					  in  let <_cor31> =
						  %% Line 813
						  call 'erlang':'band'
						      (_cor30, 7)
					      in  let <_cor26> =
						      %% Line 813
						      call 'erlang':'byte_size'
							  (Mimetype_UC)
						  in  let <_cor21> =
							  %% Line 813
							  call 'erlang':'byte_size'
							      (Mimetype_UC)
						      in  let <_cor22> =
							      %% Line 813
							      call 'erlang':'+'
								  (4, _cor21)
							  in  let <_cor23> =
								  %% Line 813
								  call 'erlang':'band'
								      (_cor22, 7)
							      in  let <_cor24> =
								      %% Line 813
								      call 'erlang':'-'
									  (8, _cor23)
								  in  let <_cor25> =
									  %% Line 813
									  call 'erlang':'band'
									      (_cor24, 7)
								      in  let <_cor33> =
									      %% Line 813
									      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										#<_cor32>(32,1,'integer',['unsigned'|['native']]),
										#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor31,8,'integer',['unsigned'|['big']]),
										#<_cor26>(32,1,'integer',['unsigned'|['native']]),
										#<Mimetype_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor25,8,'integer',['unsigned'|['big']])}#
									  in  %% Line 812
									      call 'wxe_util':'call'
										  (1136, _cor33)
	  ( <_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34})
		  -| [{'function_name',{'saveFile',3}}] )
	    -| ['compiler_generated'] )
	end
'scale'/3 =
    %% Line 819
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 820
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 820
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 820
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 821
	      apply 'scale'/4
		  (This, Width, Height, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'scale',3}}] )
	    -| ['compiler_generated'] )
	end
'scale'/4 =
    %% Line 828
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Width,Height,Options>
	      when %% Line 829
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 830
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 831
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'quality',Quality},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Quality>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 832
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-scale/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 833
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 833
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 835
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 834
				  call 'wxe_util':'call'
				      (1137, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'scale',4}}] )
	    -| ['compiler_generated'] )
	end
'size'/3 =
    %% Line 841
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Size = {SizeW,SizeH},Pos = {PosX,PosY}>
	      when %% Line 842
		( try
		      let <_cor3> =
			  call 'erlang':'is_integer'
			      (SizeW)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (SizeH)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (PosX)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (PosY)
				  in  let <_cor7> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor5, _cor6)
					    -| ['compiler_generated'] )
				      in  let <_cor8> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor7)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor8)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 843
	      apply 'size'/4
		  (This, Size, Pos, [])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'size',3}}] )
	    -| ['compiler_generated'] )
	end
'size'/4 =
    %% Line 851
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},{SizeW,SizeH},{PosX,PosY},Options>
	      when %% Line 852
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (SizeW)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(SizeH)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (PosX)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(PosY)
				in  let <_cor8> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 853
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 854
		      ( fun (_cor18,_cor17) ->
			    case <_cor18,_cor17> of
			      <{'r',R},Acc> when 'true' ->
				  let <_cor14> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<R>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor14|Acc]
			      %% Line 855
			      <{'g',G},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<G>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor15|Acc]
			      %% Line 856
			      <{'b',B},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<B>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor16|Acc]
			      %% Line 857
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-size/4-fun-0-'}}] )
		  in  let <_cor22> =
			  %% Line 858
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 858
			      call 'erlang':'list_to_binary'
				  (_cor22)
			  in  let <_cor24> =
				  %% Line 860
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
				    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
				    #<PosX>(32,1,'integer',['unsigned'|['native']]),
				    #<PosY>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 859
				  call 'wxe_util':'call'
				      (1138, _cor24)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'size',4}}] )
	    -| ['compiler_generated'] )
	end
'setAlpha'/2 =
    %% Line 866
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Alpha>
	      when %% Line 867
		call 'erlang':'is_binary'
		    (Alpha) ->
	      %% Line 868
	      apply 'setAlpha'/3
		  (This, Alpha, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setAlpha',2}}] )
	    -| ['compiler_generated'] )
	end
'setAlpha'/3 =
    %% Line 874
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Alpha,Options>
	      when let <_cor3> =
		    %% Line 875
		    call 'erlang':'is_binary'
			(Alpha)
		in  let <_cor4> =
			%% Line 875
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 875
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 876
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 877
		      call 'wxe_util':'send_bin'
			  (Alpha)
		      let <MOpts> =
			  %% Line 878
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'static_data',Static_data},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'from_bool'
					      (Static_data)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor8|Acc]
				  %% Line 879
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setAlpha/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 880
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 880
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 882
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 881
				      call 'wxe_util':'cast'
					  (1140, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setAlpha',3}}] )
	    -| ['compiler_generated'] )
	end
'setAlpha'/4 =
    %% Line 887
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},X,Y,Alpha>
	      when %% Line 888
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Alpha)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 889
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 891
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<Alpha>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 890
		      call 'wxe_util':'cast'
			  (1139, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setAlpha',4}}] )
	    -| ['compiler_generated'] )
	end
'setData'/2 =
    %% Line 897
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Data>
	      when %% Line 898
		call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 899
	      apply 'setData'/3
		  (This, Data, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setData',2}}] )
	    -| ['compiler_generated'] )
	end
'setData'/3 =
    %% Line 905
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Data,Options>
	      when let <_cor3> =
		    %% Line 906
		    call 'erlang':'is_binary'
			(Data)
		in  let <_cor4> =
			%% Line 906
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 906
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 907
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 908
		      call 'wxe_util':'send_bin'
			  (Data)
		      let <MOpts> =
			  %% Line 909
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'static_data',Static_data},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'from_bool'
					      (Static_data)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor8|Acc]
				  %% Line 910
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setData/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 911
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 911
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 913
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 912
				      call 'wxe_util':'cast'
					  (1141, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setData',3}}] )
	    -| ['compiler_generated'] )
	end
'setData'/4 =
    %% Line 919
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Data,New_width,New_height>
	      when %% Line 920
		( try
		      let <_cor4> =
			  call 'erlang':'is_binary'
			      (Data)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (New_width)
			  in  let <_cor6> =
				  call 'erlang':'is_integer'
				      (New_height)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 921
	      apply 'setData'/5
		  (This, Data, New_width, New_height, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'setData',4}}] )
	    -| ['compiler_generated'] )
	end
'setData'/5 =
    %% Line 927
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},Data,New_width,New_height,Options>
	      when %% Line 928
		try
		    let <_cor5> =
			call 'erlang':'is_binary'
			    (Data)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(New_width)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (New_height)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 929
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 930
		      call 'wxe_util':'send_bin'
			  (Data)
		      let <MOpts> =
			  %% Line 931
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'static_data',Static_data},Acc> when 'true' ->
				      let <_cor13> =
					  call 'wxe_util':'from_bool'
					      (Static_data)
				      in  let <_cor14> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor13>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor14|Acc]
				  %% Line 932
				  <BadOpt,_cor29> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setData/5-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 933
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 933
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor22> =
				      %% Line 935
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<New_width>(32,1,'integer',['unsigned'|['native']]),
					#<New_height>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 934
				      call 'wxe_util':'cast'
					  (1142, _cor22)
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'setData',5}}] )
	    -| ['compiler_generated'] )
	end
'setMask'/1 =
    %% Line 941
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 942
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 943
	      apply 'setMask'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'setMask',1}}] )
	    -| ['compiler_generated'] )
	end
'setMask'/2 =
    %% Line 949
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 950
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 951
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 952
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'mask',Mask},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Mask)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 953
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setMask/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 954
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 954
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 956
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 955
				  call 'wxe_util':'cast'
				      (1143, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'setMask',2}}] )
	    -| ['compiler_generated'] )
	end
'setMaskColour'/4 =
    %% Line 961
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},R,G,B>
	      when %% Line 962
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (R)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(G)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (B)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 963
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 965
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<R>(32,1,'integer',['unsigned'|['native']]),
			#<G>(32,1,'integer',['unsigned'|['native']]),
			#<B>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 964
		      call 'wxe_util':'cast'
			  (1144, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setMaskColour',4}}] )
	    -| ['compiler_generated'] )
	end
'setMaskFromImage'/5 =
    %% Line 970
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',MaskRef,MaskT,_cor20},Mr,Mg,Mb>
	      when %% Line 971
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Mr)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Mg)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Mb)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 972
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 973
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MaskT,
				       'wxImage') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MaskT:'parent_class'
				    ('wxImage')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor13> =
			  %% Line 975
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MaskRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Mr>(32,1,'integer',['unsigned'|['native']]),
			    #<Mg>(32,1,'integer',['unsigned'|['native']]),
			    #<Mb>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 974
			  call 'wxe_util':'call'
			      (1145, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'setMaskFromImage',5}}] )
	    -| ['compiler_generated'] )
	end
'setOption'/3 =
    %% Line 986
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Name,Value>
	      when let <_cor3> =
		    %% Line 987
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			%% Line 987
			call 'erlang':'is_integer'
			    (Value)
		    in  %% Line 987
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 988
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 989
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor13> =
			  %% Line 991
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor8> =
			      %% Line 991
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor9> =
				  %% Line 991
				  call 'erlang':'+'
				      (0, _cor8)
			      in  let <_cor10> =
				      %% Line 991
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 991
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 991
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 991
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']]),
						    #<Value>(32,1,'integer',['unsigned'|['native']])}#
					      in  %% Line 990
						  call 'wxe_util':'cast'
						      (1147, _cor14)
	  %% Line 992
	  <{'wx_ref',ThisRef,ThisT,_cor38},Name,Value>
	      when let <_cor15> =
		    %% Line 993
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor16> =
			%% Line 993
			call 'erlang':'is_list'
			    (Value)
		    in  %% Line 993
			call 'erlang':'and'
			    (_cor15, _cor16) ->
	      do  %% Line 994
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 995
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <Value_UC> =
			  %% Line 996
			  call 'unicode':'characters_to_binary'
			      ([Value|[0]])
		      in  let <_cor32> =
			      %% Line 998
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor27> =
				  %% Line 998
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor28> =
				      %% Line 998
				      call 'erlang':'+'
					  (0, _cor27)
				  in  let <_cor29> =
					  %% Line 998
					  call 'erlang':'band'
					      (_cor28, 7)
				      in  let <_cor30> =
					      %% Line 998
					      call 'erlang':'-'
						  (8, _cor29)
					  in  let <_cor31> =
						  %% Line 998
						  call 'erlang':'band'
						      (_cor30, 7)
					      in  let <_cor26> =
						      %% Line 998
						      call 'erlang':'byte_size'
							  (Value_UC)
						  in  let <_cor21> =
							  %% Line 998
							  call 'erlang':'byte_size'
							      (Value_UC)
						      in  let <_cor22> =
							      %% Line 998
							      call 'erlang':'+'
								  (4, _cor21)
							  in  let <_cor23> =
								  %% Line 998
								  call 'erlang':'band'
								      (_cor22, 7)
							      in  let <_cor24> =
								      %% Line 998
								      call 'erlang':'-'
									  (8, _cor23)
								  in  let <_cor25> =
									  %% Line 998
									  call 'erlang':'band'
									      (_cor24, 7)
								      in  let <_cor33> =
									      %% Line 998
									      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										#<_cor32>(32,1,'integer',['unsigned'|['native']]),
										#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor31,8,'integer',['unsigned'|['big']]),
										#<_cor26>(32,1,'integer',['unsigned'|['native']]),
										#<Value_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor25,8,'integer',['unsigned'|['big']])}#
									  in  %% Line 997
									      call 'wxe_util':'cast'
										  (1146, _cor33)
	  ( <_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34})
		  -| [{'function_name',{'setOption',3}}] )
	    -| ['compiler_generated'] )
	end
'setPalette'/2 =
    %% Line 1003
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PaletteRef,PaletteT,_cor10}> when 'true' ->
	      do  %% Line 1004
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1005
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PaletteT,
				       'wxPalette') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PaletteT:'parent_class'
				    ('wxPalette')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1007
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PaletteRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1006
			  call 'wxe_util':'cast'
			      (1148, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPalette',2}}] )
	    -| ['compiler_generated'] )
	end
'setRGB'/5 =
    %% Line 1012
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor25},{RectX,RectY,RectW,RectH},R,G,B>
	      when %% Line 1013
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor9> =
					call 'erlang':'is_integer'
					    (R)
				    in  let <_cor10> =
					    call 'erlang':'is_integer'
						(G)
					in  let <_cor11> =
						call 'erlang':'is_integer'
						    (B)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor10, _cor11)
						in  let <_cor13> =
							call 'erlang':'and'
							    (_cor9, _cor12)
						    in  let <_cor14> =
							    call 'erlang':'and'
								(_cor8, _cor13)
							in  let <_cor15> =
								call 'erlang':'and'
								    (_cor7, _cor14)
							    in  let <_cor16> =
								    call 'erlang':'and'
									(_cor6, _cor15)
								in  call 'erlang':'and'
									(_cor5, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1014
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor19> =
		      %% Line 1016
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']]),
			#<R>(32,1,'integer',['unsigned'|['native']]),
			#<G>(32,1,'integer',['unsigned'|['native']]),
			#<B>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1015
		      call 'wxe_util':'cast'
			  (1150, _cor19)
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'setRGB',5}}] )
	    -| ['compiler_generated'] )
	end
'setRGB'/6 =
    %% Line 1021
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,R,G,B>
	      when %% Line 1022
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (R)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(G)
				in  let <_cor10> =
					call 'erlang':'is_integer'
					    (B)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1023
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 1025
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']]),
			#<R>(32,1,'integer',['unsigned'|['native']]),
			#<G>(32,1,'integer',['unsigned'|['native']]),
			#<B>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1024
		      call 'wxe_util':'cast'
			  (1149, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setRGB',6}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 1029
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 1030
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1031
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 1032
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxImage')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxImage', _cor0)
end