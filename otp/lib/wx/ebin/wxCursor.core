module 'wxCursor' ['convertToImage'/1,
		   'copyFromIcon'/2,
		   'destroy'/1,
		   'getDepth'/1,
		   'getHeight'/1,
		   'getMask'/1,
		   'getPalette'/1,
		   'getSubBitmap'/2,
		   'getWidth'/1,
		   'loadFile'/2,
		   'loadFile'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'new'/0,
		   'new'/1,
		   'new'/3,
		   'new'/4,
		   'ok'/1,
		   'parent_class'/1,
		   'saveFile'/3,
		   'saveFile'/4,
		   'setDepth'/2,
		   'setHeight'/2,
		   'setMask'/2,
		   'setPalette'/2,
		   'setWidth'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 37
		'export_type' =
		    %% Line 37
		    [{'wxCursor',0}],
		%% Line 38
		'deprecated' =
		    %% Line 38
		    [{'new',3}|[{'new',4}]],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'wxCursor',{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_object'}|[[]]]]},[]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'new',0},[{'type',46,'fun',[{'type',46,'product',[]}|[{'type',46,'wxCursor',[]}]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'CursorId'}]}|[{'type',56,'wxCursor',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'CursorId'}|[{'type',57,'integer',[]}]]]]}]]]}|[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Image'}]}|[{'type',58,'wxCursor',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Image'}|[{'remote_type',59,[{'atom',59,'wxImage'}|[{'atom',59,'wxImage'}|[[]]]]}]]]]}]]]}]]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'new',3},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Bits'}|[{'var',70,'Width'}|[{'var',70,'Height'}]]]}|[{'type',70,'wxCursor',[]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Bits'}|[{'type',71,'binary',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Width'}|[{'type',71,'integer',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Height'}|[{'type',71,'integer',[]}]]]]}]]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'new',4},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'Bits'}|[{'var',78,'Width'}|[{'var',78,'Height'}|[{'type',78,'list',[{'var',78,'Option'}]}]]]]}|[{'type',78,'wxCursor',[]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Bits'}|[{'type',79,'binary',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Width'}|[{'type',79,'integer',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Height'}|[{'type',79,'integer',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Option'}|[{'type',80,'union',[{'type',80,'tuple',[{'atom',80,'hotSpotX'}|[{'type',80,'integer',[]}]]}|[{'type',81,'tuple',[{'atom',81,'hotSpotY'}|[{'type',81,'integer',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'ok',1},[{'type',93,'bounded_fun',[{'type',93,'fun',[{'type',93,'product',[{'var',93,'This'}]}|[{'type',93,'boolean',[]}]]}|[[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'This'}|[{'type',94,'wxCursor',[]}]]]]}]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'destroy',1},[{'type',101,'fun',[{'type',101,'product',[{'ann_type',101,[{'var',101,'This'}|[{'type',101,'wxCursor',[]}]]}]}|[{'atom',101,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 41
    fun (_cor0) ->
	case _cor0 of
	  <'wxBitmap'> when 'true' ->
	      'true'
	  %% Line 42
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxCursor'})
	end
'new'/0 =
    %% Line 47
    fun () ->
	%% Line 48
	call 'wxe_util':'construct'
	    (1067, %% Line 49
		   #{}#)
'new'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <CursorId>
	      when %% Line 61
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 63
		  #{#<CursorId>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 62
		  call 'wxe_util':'construct'
		      (1068, _cor1)
	  %% Line 64
	  <{'wx_ref',ImageRef,ImageT,_cor6}> when 'true' ->
	      do  %% Line 65
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ImageT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ImageT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 67
		      #{#<ImageRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 66
		      call 'wxe_util':'construct'
			  (1069, _cor4)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 73
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bits,Width,Height>
	      when %% Line 74
		try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (Bits)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 75
	      apply 'new'/4
		  (Bits, Width, Height, [])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 82
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bits,Width,Height,Options>
	      when %% Line 83
		try
		    let <_cor4> =
			call 'erlang':'is_binary'
			    (Bits)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor7> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 84
		  call 'wxe_util':'send_bin'
		      (Bits)
		  let <MOpts> =
		      %% Line 85
		      ( fun (_cor13,_cor12) ->
			    case <_cor13,_cor12> of
			      <{'hotSpotX',HotSpotX},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<HotSpotX>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 86
			      <{'hotSpotY',HotSpotY},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<HotSpotY>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 87
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/4-fun-0-'}}] )
		  in  let <_cor17> =
			  %% Line 88
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 88
			      call 'erlang':'list_to_binary'
				  (_cor17)
			  in  let <_cor19> =
				  %% Line 90
				  #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 89
				  call 'wxe_util':'construct'
				      (1070, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 96
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCursor') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCursor')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 98
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 97
		      call 'wxe_util':'call'
			  (1072, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ok',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 103
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxCursor') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxCursor')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 104
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 105
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setWidth'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setWidth'
	    (_cor1, _cor0)
'setPalette'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setPalette'
	    (_cor1, _cor0)
'setMask'/2 =
    %% Line 112
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setMask'
	    (_cor1, _cor0)
'setHeight'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setHeight'
	    (_cor1, _cor0)
'setDepth'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'setDepth'
	    (_cor1, _cor0)
'saveFile'/4 =
    %% Line 118
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'saveFile'
	    (_cor3, _cor2, _cor1, _cor0)
'saveFile'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'saveFile'
	    (_cor2, _cor1, _cor0)
'loadFile'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	call 'wxBitmap':'loadFile'
	    (_cor2, _cor1, _cor0)
'loadFile'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'loadFile'
	    (_cor1, _cor0)
'getSubBitmap'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'getSubBitmap'
	    (_cor1, _cor0)
'getWidth'/1 =
    %% Line 128
    fun (_cor0) ->
	call 'wxBitmap':'getWidth'
	    (_cor0)
'getMask'/1 =
    %% Line 130
    fun (_cor0) ->
	call 'wxBitmap':'getMask'
	    (_cor0)
'getPalette'/1 =
    %% Line 132
    fun (_cor0) ->
	call 'wxBitmap':'getPalette'
	    (_cor0)
'getHeight'/1 =
    %% Line 134
    fun (_cor0) ->
	call 'wxBitmap':'getHeight'
	    (_cor0)
'getDepth'/1 =
    %% Line 136
    fun (_cor0) ->
	call 'wxBitmap':'getDepth'
	    (_cor0)
'copyFromIcon'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	call 'wxBitmap':'copyFromIcon'
	    (_cor1, _cor0)
'convertToImage'/1 =
    %% Line 140
    fun (_cor0) ->
	call 'wxBitmap':'convertToImage'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxCursor')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxCursor', _cor0)
end