module 'wxToolBar' ['addCheckTool'/4,
		    'addCheckTool'/5,
		    'addControl'/2,
		    'addRadioTool'/4,
		    'addRadioTool'/5,
		    'addSeparator'/1,
		    'addTool'/2,
		    'addTool'/3,
		    'addTool'/4,
		    'addTool'/5,
		    'addTool'/6,
		    'addTool'/7,
		    'cacheBestSize'/2,
		    'captureMouse'/1,
		    'center'/1,
		    'center'/2,
		    'centerOnParent'/1,
		    'centerOnParent'/2,
		    'centre'/1,
		    'centre'/2,
		    'centreOnParent'/1,
		    'centreOnParent'/2,
		    'clearBackground'/1,
		    'clientToScreen'/2,
		    'clientToScreen'/3,
		    'close'/1,
		    'close'/2,
		    'connect'/2,
		    'connect'/3,
		    'convertDialogToPixels'/2,
		    'convertPixelsToDialog'/2,
		    'deleteTool'/2,
		    'deleteToolByPos'/2,
		    'destroyChildren'/1,
		    'disable'/1,
		    'disconnect'/1,
		    'disconnect'/2,
		    'disconnect'/3,
		    'enable'/1,
		    'enable'/2,
		    'enableTool'/3,
		    'findById'/2,
		    'findControl'/2,
		    'findToolForPosition'/3,
		    'findWindow'/2,
		    'fit'/1,
		    'fitInside'/1,
		    'freeze'/1,
		    'getAcceleratorTable'/1,
		    'getBackgroundColour'/1,
		    'getBackgroundStyle'/1,
		    'getBestSize'/1,
		    'getCaret'/1,
		    'getCharHeight'/1,
		    'getCharWidth'/1,
		    'getChildren'/1,
		    'getClientSize'/1,
		    'getContainingSizer'/1,
		    'getCursor'/1,
		    'getDropTarget'/1,
		    'getEventHandler'/1,
		    'getExtraStyle'/1,
		    'getFont'/1,
		    'getForegroundColour'/1,
		    'getGrandParent'/1,
		    'getHandle'/1,
		    'getHelpText'/1,
		    'getId'/1,
		    'getLabel'/1,
		    'getMargins'/1,
		    'getMaxSize'/1,
		    'getMinSize'/1,
		    'getName'/1,
		    'getParent'/1,
		    'getPosition'/1,
		    'getRect'/1,
		    'getScreenPosition'/1,
		    'getScreenRect'/1,
		    'getScrollPos'/2,
		    'getScrollRange'/2,
		    'getScrollThumb'/2,
		    'getSize'/1,
		    'getSizer'/1,
		    'getTextExtent'/2,
		    'getTextExtent'/3,
		    'getToolBitmapSize'/1,
		    'getToolEnabled'/2,
		    'getToolLongHelp'/2,
		    'getToolPacking'/1,
		    'getToolPos'/2,
		    'getToolSeparation'/1,
		    'getToolShortHelp'/2,
		    'getToolSize'/1,
		    'getToolState'/2,
		    'getToolTip'/1,
		    'getUpdateRegion'/1,
		    'getVirtualSize'/1,
		    'getWindowStyleFlag'/1,
		    'getWindowVariant'/1,
		    'hasCapture'/1,
		    'hasScrollbar'/2,
		    'hasTransparentBackground'/1,
		    'hide'/1,
		    'inheritAttributes'/1,
		    'initDialog'/1,
		    'insertControl'/3,
		    'insertSeparator'/2,
		    'insertTool'/3,
		    'insertTool'/4,
		    'insertTool'/5,
		    'insertTool'/6,
		    'invalidateBestSize'/1,
		    'isEnabled'/1,
		    'isExposed'/2,
		    'isExposed'/3,
		    'isExposed'/5,
		    'isRetained'/1,
		    'isShown'/1,
		    'isTopLevel'/1,
		    'layout'/1,
		    'lineDown'/1,
		    'lineUp'/1,
		    'lower'/1,
		    'makeModal'/1,
		    'makeModal'/2,
		    'module_info'/0,
		    'module_info'/1,
		    'move'/2,
		    'move'/3,
		    'move'/4,
		    'moveAfterInTabOrder'/2,
		    'moveBeforeInTabOrder'/2,
		    'navigate'/1,
		    'navigate'/2,
		    'pageDown'/1,
		    'pageUp'/1,
		    'parent_class'/1,
		    'popEventHandler'/1,
		    'popEventHandler'/2,
		    'popupMenu'/2,
		    'popupMenu'/3,
		    'popupMenu'/4,
		    'raise'/1,
		    'realize'/1,
		    'refresh'/1,
		    'refresh'/2,
		    'refreshRect'/2,
		    'refreshRect'/3,
		    'releaseMouse'/1,
		    'removeChild'/2,
		    'removeTool'/2,
		    'reparent'/2,
		    'screenToClient'/1,
		    'screenToClient'/2,
		    'scrollLines'/2,
		    'scrollPages'/2,
		    'scrollWindow'/3,
		    'scrollWindow'/4,
		    'setAcceleratorTable'/2,
		    'setAutoLayout'/2,
		    'setBackgroundColour'/2,
		    'setBackgroundStyle'/2,
		    'setCaret'/2,
		    'setClientSize'/2,
		    'setClientSize'/3,
		    'setContainingSizer'/2,
		    'setCursor'/2,
		    'setDropTarget'/2,
		    'setExtraStyle'/2,
		    'setFocus'/1,
		    'setFocusFromKbd'/1,
		    'setFont'/2,
		    'setForegroundColour'/2,
		    'setHelpText'/2,
		    'setId'/2,
		    'setLabel'/2,
		    'setMargins'/3,
		    'setMaxSize'/2,
		    'setMinSize'/2,
		    'setName'/2,
		    'setOwnBackgroundColour'/2,
		    'setOwnFont'/2,
		    'setOwnForegroundColour'/2,
		    'setPalette'/2,
		    'setScrollPos'/3,
		    'setScrollPos'/4,
		    'setScrollbar'/5,
		    'setScrollbar'/6,
		    'setSize'/2,
		    'setSize'/3,
		    'setSize'/5,
		    'setSize'/6,
		    'setSizeHints'/2,
		    'setSizeHints'/3,
		    'setSizeHints'/4,
		    'setSizer'/2,
		    'setSizer'/3,
		    'setSizerAndFit'/2,
		    'setSizerAndFit'/3,
		    'setThemeEnabled'/2,
		    'setToolBitmapSize'/2,
		    'setToolLongHelp'/3,
		    'setToolPacking'/2,
		    'setToolSeparation'/2,
		    'setToolShortHelp'/3,
		    'setToolTip'/2,
		    'setVirtualSize'/2,
		    'setVirtualSize'/3,
		    'setVirtualSizeHints'/2,
		    'setVirtualSizeHints'/3,
		    'setVirtualSizeHints'/4,
		    'setWindowStyle'/2,
		    'setWindowStyleFlag'/2,
		    'setWindowVariant'/2,
		    'shouldInheritColours'/1,
		    'show'/1,
		    'show'/2,
		    'thaw'/1,
		    'toggleTool'/3,
		    'transferDataFromWindow'/1,
		    'transferDataToWindow'/1,
		    'update'/1,
		    'updateWindowUI'/1,
		    'updateWindowUI'/2,
		    'validate'/1,
		    'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 80
		'export_type' =
		    %% Line 80
		    [{'wxToolBar',0}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxToolBar',{'remote_type',87,[{'atom',87,'wx'}|[{'atom',87,'wx_object'}|[[]]]]},[]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'addControl',2},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}|[{'var',89,'Control'}]]}|[{'remote_type',89,[{'atom',89,'wx'}|[{'atom',89,'wx_object'}|[[]]]]}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxToolBar',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Control'}|[{'remote_type',90,[{'atom',90,'wxControl'}|[{'atom',90,'wxControl'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'addSeparator',1},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'This'}]}|[{'remote_type',98,[{'atom',98,'wx'}|[{'atom',98,'wx_object'}|[[]]]]}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'This'}|[{'type',99,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'addTool',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'This'}|[{'var',106,'Tool'}]]}|[{'remote_type',106,[{'atom',106,'wx'}|[{'atom',106,'wx_object'}|[[]]]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'This'}|[{'type',107,'wxToolBar',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Tool'}|[{'remote_type',107,[{'atom',107,'wx'}|[{'atom',107,'wx_object'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'addTool',3},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'This'}|[{'var',115,'Toolid'}|[{'var',115,'Bitmap'}]]]}|[{'remote_type',115,[{'atom',115,'wx'}|[{'atom',115,'wx_object'}|[[]]]]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'This'}|[{'type',116,'wxToolBar',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Toolid'}|[{'type',116,'integer',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Bitmap'}|[{'remote_type',116,[{'atom',116,'wxBitmap'}|[{'atom',116,'wxBitmap'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'addTool',4},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'This'}|[{'var',132,'Toolid'}|[{'var',132,'Label'}|[{'var',132,'Bitmap'}]]]]}|[{'remote_type',132,[{'atom',132,'wx'}|[{'atom',132,'wx_object'}|[[]]]]}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'This'}|[{'type',133,'wxToolBar',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Toolid'}|[{'type',133,'integer',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Label'}|[{'remote_type',133,[{'atom',133,'unicode'}|[{'atom',133,'chardata'}|[[]]]]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Bitmap'}|[{'remote_type',133,[{'atom',133,'wxBitmap'}|[{'atom',133,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}|[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'This'}|[{'var',134,'Toolid'}|[{'var',134,'Bitmap'}|[{'var',134,'BmpDisabled'}]]]]}|[{'remote_type',134,[{'atom',134,'wx'}|[{'atom',134,'wx_object'}|[[]]]]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'This'}|[{'type',135,'wxToolBar',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Toolid'}|[{'type',135,'integer',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Bitmap'}|[{'remote_type',135,[{'atom',135,'wxBitmap'}|[{'atom',135,'wxBitmap'}|[[]]]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'BmpDisabled'}|[{'remote_type',135,[{'atom',135,'wxBitmap'}|[{'atom',135,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}|[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}|[{'var',136,'Toolid'}|[{'var',136,'Bitmap'}|[{'type',136,'list',[{'var',136,'Option'}]}]]]]}|[{'remote_type',136,[{'atom',136,'wx'}|[{'atom',136,'wx_object'}|[[]]]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxToolBar',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Toolid'}|[{'type',137,'integer',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Bitmap'}|[{'remote_type',137,[{'atom',137,'wxBitmap'}|[{'atom',137,'wxBitmap'}|[[]]]]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Option'}|[{'type',138,'union',[{'type',138,'tuple',[{'atom',138,'shortHelpString'}|[{'remote_type',138,[{'atom',138,'unicode'}|[{'atom',138,'chardata'}|[[]]]]}]]}|[{'type',139,'tuple',[{'atom',139,'longHelpString'}|[{'remote_type',139,[{'atom',139,'unicode'}|[{'atom',139,'chardata'}|[[]]]]}]]}]]}]]]]}]]]]]]}]]]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'addTool',5},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}|[{'var',173,'Toolid'}|[{'var',173,'Label'}|[{'var',173,'Bitmap'}|[{'var',173,'BmpDisabled'}]]]]]}|[{'remote_type',173,[{'atom',173,'wx'}|[{'atom',173,'wx_object'}|[[]]]]}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxToolBar',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Toolid'}|[{'type',174,'integer',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Label'}|[{'remote_type',174,[{'atom',174,'unicode'}|[{'atom',174,'chardata'}|[[]]]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Bitmap'}|[{'remote_type',174,[{'atom',174,'wxBitmap'}|[{'atom',174,'wxBitmap'}|[[]]]]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'BmpDisabled'}|[{'remote_type',174,[{'atom',174,'wxBitmap'}|[{'atom',174,'wxBitmap'}|[[]]]]}]]]]}]]]]]]]}|[{'type',175,'bounded_fun',[{'type',175,'fun',[{'type',175,'product',[{'var',175,'This'}|[{'var',175,'Toolid'}|[{'var',175,'Label'}|[{'var',175,'Bitmap'}|[{'type',175,'list',[{'var',175,'Option'}]}]]]]]}|[{'remote_type',175,[{'atom',175,'wx'}|[{'atom',175,'wx_object'}|[[]]]]}]]}|[[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'This'}|[{'type',176,'wxToolBar',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Toolid'}|[{'type',176,'integer',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Label'}|[{'remote_type',176,[{'atom',176,'unicode'}|[{'atom',176,'chardata'}|[[]]]]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Bitmap'}|[{'remote_type',176,[{'atom',176,'wxBitmap'}|[{'atom',176,'wxBitmap'}|[[]]]]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Option'}|[{'type',177,'union',[{'type',177,'tuple',[{'atom',177,'shortHelp'}|[{'remote_type',177,[{'atom',177,'unicode'}|[{'atom',177,'chardata'}|[[]]]]}]]}|[{'type',178,'tuple',[{'atom',178,'kind'}|[{'remote_type',178,[{'atom',178,'wx'}|[{'atom',178,'wx_enum'}|[[]]]]}]]}]]}]]]]}]]]]]]]}|[{'type',179,'bounded_fun',[{'type',179,'fun',[{'type',179,'product',[{'var',179,'This'}|[{'var',179,'Toolid'}|[{'var',179,'Bitmap'}|[{'var',179,'BmpDisabled'}|[{'type',179,'list',[{'var',179,'Option'}]}]]]]]}|[{'remote_type',179,[{'atom',179,'wx'}|[{'atom',179,'wx_object'}|[[]]]]}]]}|[[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'This'}|[{'type',180,'wxToolBar',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Toolid'}|[{'type',180,'integer',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Bitmap'}|[{'remote_type',180,[{'atom',180,'wxBitmap'}|[{'atom',180,'wxBitmap'}|[[]]]]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'BmpDisabled'}|[{'remote_type',180,[{'atom',180,'wxBitmap'}|[{'atom',180,'wxBitmap'}|[[]]]]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Option'}|[{'type',181,'union',[{'type',181,'tuple',[{'atom',181,'toggle'}|[{'type',181,'boolean',[]}]]}|[{'type',182,'tuple',[{'atom',182,'clientData'}|[{'remote_type',182,[{'atom',182,'wx'}|[{'atom',182,'wx_object'}|[[]]]]}]]}|[{'type',183,'tuple',[{'atom',183,'shortHelpString'}|[{'remote_type',183,[{'atom',183,'unicode'}|[{'atom',183,'chardata'}|[[]]]]}]]}|[{'type',184,'tuple',[{'atom',184,'longHelpString'}|[{'remote_type',184,[{'atom',184,'unicode'}|[{'atom',184,'chardata'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]}]]]}],
		%% Line 224
		'spec' =
		    %% Line 224
		    [{{'addTool',6},[{'type',224,'bounded_fun',[{'type',224,'fun',[{'type',224,'product',[{'var',224,'This'}|[{'var',224,'Toolid'}|[{'var',224,'Bitmap'}|[{'var',224,'BmpDisabled'}|[{'var',224,'Toggle'}|[{'var',224,'XPos'}]]]]]]}|[{'remote_type',224,[{'atom',224,'wx'}|[{'atom',224,'wx_object'}|[[]]]]}]]}|[[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'This'}|[{'type',225,'wxToolBar',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Toolid'}|[{'type',225,'integer',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Bitmap'}|[{'remote_type',225,[{'atom',225,'wxBitmap'}|[{'atom',225,'wxBitmap'}|[[]]]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'BmpDisabled'}|[{'remote_type',225,[{'atom',225,'wxBitmap'}|[{'atom',225,'wxBitmap'}|[[]]]]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Toggle'}|[{'type',225,'boolean',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'XPos'}|[{'type',225,'integer',[]}]]]]}]]]]]]]]}|[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'This'}|[{'var',226,'Toolid'}|[{'var',226,'Label'}|[{'var',226,'Bitmap'}|[{'var',226,'BmpDisabled'}|[{'type',226,'list',[{'var',226,'Option'}]}]]]]]]}|[{'remote_type',226,[{'atom',226,'wx'}|[{'atom',226,'wx_object'}|[[]]]]}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'This'}|[{'type',227,'wxToolBar',[]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Toolid'}|[{'type',227,'integer',[]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Label'}|[{'remote_type',227,[{'atom',227,'unicode'}|[{'atom',227,'chardata'}|[[]]]]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Bitmap'}|[{'remote_type',227,[{'atom',227,'wxBitmap'}|[{'atom',227,'wxBitmap'}|[[]]]]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'BmpDisabled'}|[{'remote_type',227,[{'atom',227,'wxBitmap'}|[{'atom',227,'wxBitmap'}|[[]]]]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Option'}|[{'type',228,'union',[{'type',228,'tuple',[{'atom',228,'kind'}|[{'remote_type',228,[{'atom',228,'wx'}|[{'atom',228,'wx_enum'}|[[]]]]}]]}|[{'type',229,'tuple',[{'atom',229,'shortHelp'}|[{'remote_type',229,[{'atom',229,'unicode'}|[{'atom',229,'chardata'}|[[]]]]}]]}|[{'type',230,'tuple',[{'atom',230,'longHelp'}|[{'remote_type',230,[{'atom',230,'unicode'}|[{'atom',230,'chardata'}|[[]]]]}]]}|[{'type',231,'tuple',[{'atom',231,'data'}|[{'remote_type',231,[{'atom',231,'wx'}|[{'atom',231,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]]}]]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'addTool',7},[{'type',252,'bounded_fun',[{'type',252,'fun',[{'type',252,'product',[{'var',252,'This'}|[{'var',252,'Toolid'}|[{'var',252,'Bitmap'}|[{'var',252,'BmpDisabled'}|[{'var',252,'Toggle'}|[{'var',252,'XPos'}|[{'type',252,'list',[{'var',252,'Option'}]}]]]]]]]}|[{'remote_type',252,[{'atom',252,'wx'}|[{'atom',252,'wx_object'}|[[]]]]}]]}|[[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'This'}|[{'type',253,'wxToolBar',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Toolid'}|[{'type',253,'integer',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Bitmap'}|[{'remote_type',253,[{'atom',253,'wxBitmap'}|[{'atom',253,'wxBitmap'}|[[]]]]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'BmpDisabled'}|[{'remote_type',253,[{'atom',253,'wxBitmap'}|[{'atom',253,'wxBitmap'}|[[]]]]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Toggle'}|[{'type',253,'boolean',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'XPos'}|[{'type',253,'integer',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Option'}|[{'type',254,'union',[{'type',254,'tuple',[{'atom',254,'yPos'}|[{'type',254,'integer',[]}]]}|[{'type',255,'tuple',[{'atom',255,'clientData'}|[{'remote_type',255,[{'atom',255,'wx'}|[{'atom',255,'wx_object'}|[[]]]]}]]}|[{'type',256,'tuple',[{'atom',256,'shortHelp'}|[{'remote_type',256,[{'atom',256,'unicode'}|[{'atom',256,'chardata'}|[[]]]]}]]}|[{'type',257,'tuple',[{'atom',257,'longHelp'}|[{'remote_type',257,[{'atom',257,'unicode'}|[{'atom',257,'chardata'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]]]}]}],
		%% Line 273
		'spec' =
		    %% Line 273
		    [{{'addCheckTool',4},[{'type',273,'bounded_fun',[{'type',273,'fun',[{'type',273,'product',[{'var',273,'This'}|[{'var',273,'Toolid'}|[{'var',273,'Label'}|[{'var',273,'Bitmap'}]]]]}|[{'remote_type',273,[{'atom',273,'wx'}|[{'atom',273,'wx_object'}|[[]]]]}]]}|[[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'This'}|[{'type',274,'wxToolBar',[]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Toolid'}|[{'type',274,'integer',[]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Label'}|[{'remote_type',274,[{'atom',274,'unicode'}|[{'atom',274,'chardata'}|[[]]]]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'Bitmap'}|[{'remote_type',274,[{'atom',274,'wxBitmap'}|[{'atom',274,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 281
		'spec' =
		    %% Line 281
		    [{{'addCheckTool',5},[{'type',281,'bounded_fun',[{'type',281,'fun',[{'type',281,'product',[{'var',281,'This'}|[{'var',281,'Toolid'}|[{'var',281,'Label'}|[{'var',281,'Bitmap'}|[{'type',281,'list',[{'var',281,'Option'}]}]]]]]}|[{'remote_type',281,[{'atom',281,'wx'}|[{'atom',281,'wx_object'}|[[]]]]}]]}|[[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'This'}|[{'type',282,'wxToolBar',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Toolid'}|[{'type',282,'integer',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Label'}|[{'remote_type',282,[{'atom',282,'unicode'}|[{'atom',282,'chardata'}|[[]]]]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Bitmap'}|[{'remote_type',282,[{'atom',282,'wxBitmap'}|[{'atom',282,'wxBitmap'}|[[]]]]}]]]]}|[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'Option'}|[{'type',283,'union',[{'type',283,'tuple',[{'atom',283,'bmpDisabled'}|[{'remote_type',283,[{'atom',283,'wxBitmap'}|[{'atom',283,'wxBitmap'}|[[]]]]}]]}|[{'type',284,'tuple',[{'atom',284,'shortHelp'}|[{'remote_type',284,[{'atom',284,'unicode'}|[{'atom',284,'chardata'}|[[]]]]}]]}|[{'type',285,'tuple',[{'atom',285,'longHelp'}|[{'remote_type',285,[{'atom',285,'unicode'}|[{'atom',285,'chardata'}|[[]]]]}]]}|[{'type',286,'tuple',[{'atom',286,'data'}|[{'remote_type',286,[{'atom',286,'wx'}|[{'atom',286,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 302
		'spec' =
		    %% Line 302
		    [{{'addRadioTool',4},[{'type',302,'bounded_fun',[{'type',302,'fun',[{'type',302,'product',[{'var',302,'This'}|[{'var',302,'Toolid'}|[{'var',302,'Label'}|[{'var',302,'Bitmap'}]]]]}|[{'remote_type',302,[{'atom',302,'wx'}|[{'atom',302,'wx_object'}|[[]]]]}]]}|[[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'This'}|[{'type',303,'wxToolBar',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Toolid'}|[{'type',303,'integer',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Label'}|[{'remote_type',303,[{'atom',303,'unicode'}|[{'atom',303,'chardata'}|[[]]]]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Bitmap'}|[{'remote_type',303,[{'atom',303,'wxBitmap'}|[{'atom',303,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'addRadioTool',5},[{'type',310,'bounded_fun',[{'type',310,'fun',[{'type',310,'product',[{'var',310,'This'}|[{'var',310,'Toolid'}|[{'var',310,'Label'}|[{'var',310,'Bitmap'}|[{'type',310,'list',[{'var',310,'Option'}]}]]]]]}|[{'remote_type',310,[{'atom',310,'wx'}|[{'atom',310,'wx_object'}|[[]]]]}]]}|[[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'This'}|[{'type',311,'wxToolBar',[]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Toolid'}|[{'type',311,'integer',[]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Label'}|[{'remote_type',311,[{'atom',311,'unicode'}|[{'atom',311,'chardata'}|[[]]]]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Bitmap'}|[{'remote_type',311,[{'atom',311,'wxBitmap'}|[{'atom',311,'wxBitmap'}|[[]]]]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Option'}|[{'type',312,'union',[{'type',312,'tuple',[{'atom',312,'bmpDisabled'}|[{'remote_type',312,[{'atom',312,'wxBitmap'}|[{'atom',312,'wxBitmap'}|[[]]]]}]]}|[{'type',313,'tuple',[{'atom',313,'shortHelp'}|[{'remote_type',313,[{'atom',313,'unicode'}|[{'atom',313,'chardata'}|[[]]]]}]]}|[{'type',314,'tuple',[{'atom',314,'longHelp'}|[{'remote_type',314,[{'atom',314,'unicode'}|[{'atom',314,'chardata'}|[[]]]]}]]}|[{'type',315,'tuple',[{'atom',315,'data'}|[{'remote_type',315,[{'atom',315,'wx'}|[{'atom',315,'wx_object'}|[[]]]]}]]}]]]]}]]]]}]]]]]]]}]}],
		%% Line 331
		'spec' =
		    %% Line 331
		    [{{'deleteTool',2},[{'type',331,'bounded_fun',[{'type',331,'fun',[{'type',331,'product',[{'var',331,'This'}|[{'var',331,'Toolid'}]]}|[{'type',331,'boolean',[]}]]}|[[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'This'}|[{'type',332,'wxToolBar',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Toolid'}|[{'type',332,'integer',[]}]]]]}]]]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'deleteToolByPos',2},[{'type',340,'bounded_fun',[{'type',340,'fun',[{'type',340,'product',[{'var',340,'This'}|[{'var',340,'Pos'}]]}|[{'type',340,'boolean',[]}]]}|[[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'This'}|[{'type',341,'wxToolBar',[]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Pos'}|[{'type',341,'integer',[]}]]]]}]]]]}]}],
		%% Line 349
		'spec' =
		    %% Line 349
		    [{{'enableTool',3},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'This'}|[{'var',349,'Toolid'}|[{'var',349,'Enable'}]]]}|[{'atom',349,'ok'}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'This'}|[{'type',350,'wxToolBar',[]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Toolid'}|[{'type',350,'integer',[]}]]]]}|[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Enable'}|[{'type',350,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 358
		'spec' =
		    %% Line 358
		    [{{'findById',2},[{'type',358,'bounded_fun',[{'type',358,'fun',[{'type',358,'product',[{'var',358,'This'}|[{'var',358,'Toolid'}]]}|[{'remote_type',358,[{'atom',358,'wx'}|[{'atom',358,'wx_object'}|[[]]]]}]]}|[[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'This'}|[{'type',359,'wxToolBar',[]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Toolid'}|[{'type',359,'integer',[]}]]]]}]]]]}]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'findControl',2},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'This'}|[{'var',367,'Toolid'}]]}|[{'remote_type',367,[{'atom',367,'wxControl'}|[{'atom',367,'wxControl'}|[[]]]]}]]}|[[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'This'}|[{'type',368,'wxToolBar',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Toolid'}|[{'type',368,'integer',[]}]]]]}]]]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'findToolForPosition',3},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'This'}|[{'var',376,'X'}|[{'var',376,'Y'}]]]}|[{'remote_type',376,[{'atom',376,'wx'}|[{'atom',376,'wx_object'}|[[]]]]}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'This'}|[{'type',377,'wxToolBar',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'X'}|[{'type',377,'integer',[]}]]]]}|[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Y'}|[{'type',377,'integer',[]}]]]]}]]]]]}]}],
		%% Line 385
		'spec' =
		    %% Line 385
		    [{{'getToolSize',1},[{'type',385,'bounded_fun',[{'type',385,'fun',[{'type',385,'product',[{'var',385,'This'}]}|[{'type',385,'tuple',[{'ann_type',385,[{'var',385,'W'}|[{'type',385,'integer',[]}]]}|[{'ann_type',385,[{'var',385,'H'}|[{'type',385,'integer',[]}]]}]]}]]}|[[{'type',386,'constraint',[{'atom',386,'is_subtype'}|[[{'var',386,'This'}|[{'type',386,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 393
		'spec' =
		    %% Line 393
		    [{{'getToolBitmapSize',1},[{'type',393,'bounded_fun',[{'type',393,'fun',[{'type',393,'product',[{'var',393,'This'}]}|[{'type',393,'tuple',[{'ann_type',393,[{'var',393,'W'}|[{'type',393,'integer',[]}]]}|[{'ann_type',393,[{'var',393,'H'}|[{'type',393,'integer',[]}]]}]]}]]}|[[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'This'}|[{'type',394,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'getMargins',1},[{'type',401,'bounded_fun',[{'type',401,'fun',[{'type',401,'product',[{'var',401,'This'}]}|[{'type',401,'tuple',[{'ann_type',401,[{'var',401,'W'}|[{'type',401,'integer',[]}]]}|[{'ann_type',401,[{'var',401,'H'}|[{'type',401,'integer',[]}]]}]]}]]}|[[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'This'}|[{'type',402,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 409
		'spec' =
		    %% Line 409
		    [{{'getToolEnabled',2},[{'type',409,'bounded_fun',[{'type',409,'fun',[{'type',409,'product',[{'var',409,'This'}|[{'var',409,'Toolid'}]]}|[{'type',409,'boolean',[]}]]}|[[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'This'}|[{'type',410,'wxToolBar',[]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Toolid'}|[{'type',410,'integer',[]}]]]]}]]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'getToolLongHelp',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'This'}|[{'var',418,'Toolid'}]]}|[{'remote_type',418,[{'atom',418,'unicode'}|[{'atom',418,'charlist'}|[[]]]]}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'This'}|[{'type',419,'wxToolBar',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Toolid'}|[{'type',419,'integer',[]}]]]]}]]]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'getToolPacking',1},[{'type',427,'bounded_fun',[{'type',427,'fun',[{'type',427,'product',[{'var',427,'This'}]}|[{'type',427,'integer',[]}]]}|[[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'This'}|[{'type',428,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 435
		'spec' =
		    %% Line 435
		    [{{'getToolPos',2},[{'type',435,'bounded_fun',[{'type',435,'fun',[{'type',435,'product',[{'var',435,'This'}|[{'var',435,'Id'}]]}|[{'type',435,'integer',[]}]]}|[[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'This'}|[{'type',436,'wxToolBar',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Id'}|[{'type',436,'integer',[]}]]]]}]]]]}]}],
		%% Line 444
		'spec' =
		    %% Line 444
		    [{{'getToolSeparation',1},[{'type',444,'bounded_fun',[{'type',444,'fun',[{'type',444,'product',[{'var',444,'This'}]}|[{'type',444,'integer',[]}]]}|[[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'This'}|[{'type',445,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'getToolShortHelp',2},[{'type',452,'bounded_fun',[{'type',452,'fun',[{'type',452,'product',[{'var',452,'This'}|[{'var',452,'Toolid'}]]}|[{'remote_type',452,[{'atom',452,'unicode'}|[{'atom',452,'charlist'}|[[]]]]}]]}|[[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'This'}|[{'type',453,'wxToolBar',[]}]]]]}|[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'Toolid'}|[{'type',453,'integer',[]}]]]]}]]]]}]}],
		%% Line 461
		'spec' =
		    %% Line 461
		    [{{'getToolState',2},[{'type',461,'bounded_fun',[{'type',461,'fun',[{'type',461,'product',[{'var',461,'This'}|[{'var',461,'Toolid'}]]}|[{'type',461,'boolean',[]}]]}|[[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'This'}|[{'type',462,'wxToolBar',[]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Toolid'}|[{'type',462,'integer',[]}]]]]}]]]]}]}],
		%% Line 470
		'spec' =
		    %% Line 470
		    [{{'insertControl',3},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'This'}|[{'var',470,'Pos'}|[{'var',470,'Control'}]]]}|[{'remote_type',470,[{'atom',470,'wx'}|[{'atom',470,'wx_object'}|[[]]]]}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'This'}|[{'type',471,'wxToolBar',[]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Pos'}|[{'type',471,'integer',[]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Control'}|[{'remote_type',471,[{'atom',471,'wxControl'}|[{'atom',471,'wxControl'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'insertSeparator',2},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'This'}|[{'var',480,'Pos'}]]}|[{'remote_type',480,[{'atom',480,'wx'}|[{'atom',480,'wx_object'}|[[]]]]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'This'}|[{'type',481,'wxToolBar',[]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Pos'}|[{'type',481,'integer',[]}]]]]}]]]]}]}],
		%% Line 489
		'spec' =
		    %% Line 489
		    [{{'insertTool',3},[{'type',489,'bounded_fun',[{'type',489,'fun',[{'type',489,'product',[{'var',489,'This'}|[{'var',489,'Pos'}|[{'var',489,'Tool'}]]]}|[{'remote_type',489,[{'atom',489,'wx'}|[{'atom',489,'wx_object'}|[[]]]]}]]}|[[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'This'}|[{'type',490,'wxToolBar',[]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'Pos'}|[{'type',490,'integer',[]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'Tool'}|[{'remote_type',490,[{'atom',490,'wx'}|[{'atom',490,'wx_object'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'insertTool',4},[{'type',499,'bounded_fun',[{'type',499,'fun',[{'type',499,'product',[{'var',499,'This'}|[{'var',499,'Pos'}|[{'var',499,'Toolid'}|[{'var',499,'Bitmap'}]]]]}|[{'remote_type',499,[{'atom',499,'wx'}|[{'atom',499,'wx_object'}|[[]]]]}]]}|[[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'This'}|[{'type',500,'wxToolBar',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Pos'}|[{'type',500,'integer',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Toolid'}|[{'type',500,'integer',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Bitmap'}|[{'remote_type',500,[{'atom',500,'wxBitmap'}|[{'atom',500,'wxBitmap'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 517
		'spec' =
		    %% Line 517
		    [{{'insertTool',5},[{'type',517,'bounded_fun',[{'type',517,'fun',[{'type',517,'product',[{'var',517,'This'}|[{'var',517,'Pos'}|[{'var',517,'Toolid'}|[{'var',517,'Label'}|[{'var',517,'Bitmap'}]]]]]}|[{'remote_type',517,[{'atom',517,'wx'}|[{'atom',517,'wx_object'}|[[]]]]}]]}|[[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'This'}|[{'type',518,'wxToolBar',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Pos'}|[{'type',518,'integer',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Toolid'}|[{'type',518,'integer',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Label'}|[{'remote_type',518,[{'atom',518,'unicode'}|[{'atom',518,'chardata'}|[[]]]]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Bitmap'}|[{'remote_type',518,[{'atom',518,'wxBitmap'}|[{'atom',518,'wxBitmap'}|[[]]]]}]]]]}]]]]]]]}|[{'type',519,'bounded_fun',[{'type',519,'fun',[{'type',519,'product',[{'var',519,'This'}|[{'var',519,'Pos'}|[{'var',519,'Toolid'}|[{'var',519,'Bitmap'}|[{'type',519,'list',[{'var',519,'Option'}]}]]]]]}|[{'remote_type',519,[{'atom',519,'wx'}|[{'atom',519,'wx_object'}|[[]]]]}]]}|[[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'This'}|[{'type',520,'wxToolBar',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Pos'}|[{'type',520,'integer',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Toolid'}|[{'type',520,'integer',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Bitmap'}|[{'remote_type',520,[{'atom',520,'wxBitmap'}|[{'atom',520,'wxBitmap'}|[[]]]]}]]]]}|[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Option'}|[{'type',521,'union',[{'type',521,'tuple',[{'atom',521,'bmpDisabled'}|[{'remote_type',521,[{'atom',521,'wxBitmap'}|[{'atom',521,'wxBitmap'}|[[]]]]}]]}|[{'type',522,'tuple',[{'atom',522,'toggle'}|[{'type',522,'boolean',[]}]]}|[{'type',523,'tuple',[{'atom',523,'clientData'}|[{'remote_type',523,[{'atom',523,'wx'}|[{'atom',523,'wx_object'}|[[]]]]}]]}|[{'type',524,'tuple',[{'atom',524,'shortHelp'}|[{'remote_type',524,[{'atom',524,'unicode'}|[{'atom',524,'chardata'}|[[]]]]}]]}|[{'type',525,'tuple',[{'atom',525,'longHelp'}|[{'remote_type',525,[{'atom',525,'unicode'}|[{'atom',525,'chardata'}|[[]]]]}]]}]]]]]}]]]]}]]]]]]]}]]}],
		%% Line 546
		'spec' =
		    %% Line 546
		    [{{'insertTool',6},[{'type',546,'bounded_fun',[{'type',546,'fun',[{'type',546,'product',[{'var',546,'This'}|[{'var',546,'Pos'}|[{'var',546,'Toolid'}|[{'var',546,'Label'}|[{'var',546,'Bitmap'}|[{'type',546,'list',[{'var',546,'Option'}]}]]]]]]}|[{'remote_type',546,[{'atom',546,'wx'}|[{'atom',546,'wx_object'}|[[]]]]}]]}|[[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'This'}|[{'type',547,'wxToolBar',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Pos'}|[{'type',547,'integer',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Toolid'}|[{'type',547,'integer',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Label'}|[{'remote_type',547,[{'atom',547,'unicode'}|[{'atom',547,'chardata'}|[[]]]]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Bitmap'}|[{'remote_type',547,[{'atom',547,'wxBitmap'}|[{'atom',547,'wxBitmap'}|[[]]]]}]]]]}|[{'type',548,'constraint',[{'atom',548,'is_subtype'}|[[{'var',548,'Option'}|[{'type',548,'union',[{'type',548,'tuple',[{'atom',548,'bmpDisabled'}|[{'remote_type',548,[{'atom',548,'wxBitmap'}|[{'atom',548,'wxBitmap'}|[[]]]]}]]}|[{'type',549,'tuple',[{'atom',549,'kind'}|[{'remote_type',549,[{'atom',549,'wx'}|[{'atom',549,'wx_enum'}|[[]]]]}]]}|[{'type',550,'tuple',[{'atom',550,'shortHelp'}|[{'remote_type',550,[{'atom',550,'unicode'}|[{'atom',550,'chardata'}|[[]]]]}]]}|[{'type',551,'tuple',[{'atom',551,'longHelp'}|[{'remote_type',551,[{'atom',551,'unicode'}|[{'atom',551,'chardata'}|[[]]]]}]]}|[{'type',552,'tuple',[{'atom',552,'clientData'}|[{'remote_type',552,[{'atom',552,'wx'}|[{'atom',552,'wx_object'}|[[]]]]}]]}]]]]]}]]]]}]]]]]]]]}]}],
		%% Line 569
		'spec' =
		    %% Line 569
		    [{{'realize',1},[{'type',569,'bounded_fun',[{'type',569,'fun',[{'type',569,'product',[{'var',569,'This'}]}|[{'type',569,'boolean',[]}]]}|[[{'type',570,'constraint',[{'atom',570,'is_subtype'}|[[{'var',570,'This'}|[{'type',570,'wxToolBar',[]}]]]]}]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'removeTool',2},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'This'}|[{'var',577,'Toolid'}]]}|[{'remote_type',577,[{'atom',577,'wx'}|[{'atom',577,'wx_object'}|[[]]]]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'This'}|[{'type',578,'wxToolBar',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Toolid'}|[{'type',578,'integer',[]}]]]]}]]]]}]}],
		%% Line 586
		'spec' =
		    %% Line 586
		    [{{'setMargins',3},[{'type',586,'bounded_fun',[{'type',586,'fun',[{'type',586,'product',[{'var',586,'This'}|[{'var',586,'X'}|[{'var',586,'Y'}]]]}|[{'atom',586,'ok'}]]}|[[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'This'}|[{'type',587,'wxToolBar',[]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'X'}|[{'type',587,'integer',[]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'Y'}|[{'type',587,'integer',[]}]]]]}]]]]]}]}],
		%% Line 595
		'spec' =
		    %% Line 595
		    [{{'setToolBitmapSize',2},[{'type',595,'bounded_fun',[{'type',595,'fun',[{'type',595,'product',[{'var',595,'This'}|[{'var',595,'Size'}]]}|[{'atom',595,'ok'}]]}|[[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'This'}|[{'type',596,'wxToolBar',[]}]]]]}|[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'Size'}|[{'type',596,'tuple',[{'ann_type',596,[{'var',596,'W'}|[{'type',596,'integer',[]}]]}|[{'ann_type',596,[{'var',596,'H'}|[{'type',596,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 604
		'spec' =
		    %% Line 604
		    [{{'setToolLongHelp',3},[{'type',604,'bounded_fun',[{'type',604,'fun',[{'type',604,'product',[{'var',604,'This'}|[{'var',604,'Toolid'}|[{'var',604,'HelpString'}]]]}|[{'atom',604,'ok'}]]}|[[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'This'}|[{'type',605,'wxToolBar',[]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'Toolid'}|[{'type',605,'integer',[]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'HelpString'}|[{'remote_type',605,[{'atom',605,'unicode'}|[{'atom',605,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 614
		'spec' =
		    %% Line 614
		    [{{'setToolPacking',2},[{'type',614,'bounded_fun',[{'type',614,'fun',[{'type',614,'product',[{'var',614,'This'}|[{'var',614,'Packing'}]]}|[{'atom',614,'ok'}]]}|[[{'type',615,'constraint',[{'atom',615,'is_subtype'}|[[{'var',615,'This'}|[{'type',615,'wxToolBar',[]}]]]]}|[{'type',615,'constraint',[{'atom',615,'is_subtype'}|[[{'var',615,'Packing'}|[{'type',615,'integer',[]}]]]]}]]]]}]}],
		%% Line 623
		'spec' =
		    %% Line 623
		    [{{'setToolShortHelp',3},[{'type',623,'bounded_fun',[{'type',623,'fun',[{'type',623,'product',[{'var',623,'This'}|[{'var',623,'Id'}|[{'var',623,'HelpString'}]]]}|[{'atom',623,'ok'}]]}|[[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'This'}|[{'type',624,'wxToolBar',[]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Id'}|[{'type',624,'integer',[]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'HelpString'}|[{'remote_type',624,[{'atom',624,'unicode'}|[{'atom',624,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 633
		'spec' =
		    %% Line 633
		    [{{'setToolSeparation',2},[{'type',633,'bounded_fun',[{'type',633,'fun',[{'type',633,'product',[{'var',633,'This'}|[{'var',633,'Separation'}]]}|[{'atom',633,'ok'}]]}|[[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'This'}|[{'type',634,'wxToolBar',[]}]]]]}|[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'Separation'}|[{'type',634,'integer',[]}]]]]}]]]]}]}],
		%% Line 642
		'spec' =
		    %% Line 642
		    [{{'toggleTool',3},[{'type',642,'bounded_fun',[{'type',642,'fun',[{'type',642,'product',[{'var',642,'This'}|[{'var',642,'Toolid'}|[{'var',642,'Toggle'}]]]}|[{'atom',642,'ok'}]]}|[[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'This'}|[{'type',643,'wxToolBar',[]}]]]]}|[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'Toolid'}|[{'type',643,'integer',[]}]]]]}|[{'type',643,'constraint',[{'atom',643,'is_subtype'}|[[{'var',643,'Toggle'}|[{'type',643,'boolean',[]}]]]]}]]]]]}]}]]
'parent_class'/1 =
    %% Line 82
    fun (_cor0) ->
	case _cor0 of
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 83
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 84
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 85
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxToolBar'})
	end
'addControl'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ControlRef,ControlT,_cor10}> when 'true' ->
	      do  %% Line 92
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 93
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ControlT,
				       'wxControl') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ControlT:'parent_class'
				    ('wxControl')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 95
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ControlRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 94
			  call 'wxe_util':'call'
			      (974, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'addControl',2}}] )
	    -| ['compiler_generated'] )
	end
'addSeparator'/1 =
    %% Line 100
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 101
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 103
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 102
		      call 'wxe_util':'call'
			  (975, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'addSeparator',1}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ToolRef,ToolT,_cor10}> when 'true' ->
	      do  %% Line 109
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 110
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ToolT,
				       'wx') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ToolT:'parent_class'
				    ('wx')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 112
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ToolRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 111
			  call 'wxe_util':'call'
			      (978, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'addTool',2}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor8,_cor9,_cor10},Toolid,Bitmap = {'wx_ref',_cor11,_cor12,_cor13}>
	      when %% Line 119
		call 'erlang':'is_integer'
		    (Toolid) ->
	      %% Line 120
	      apply 'addTool'/4
		  (This, Toolid, Bitmap, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'addTool',3}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/4 =
    %% Line 141
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor45,_cor46,_cor47},Toolid,Label,Bitmap = {'wx_ref',_cor48,_cor49,_cor50}>
	      when let <_cor4> =
		    %% Line 142
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor5> =
			%% Line 142
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 142
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 143
	      apply 'addTool'/5
		  (This, Toolid, Label, Bitmap, [])
	  %% Line 145
	  <This = {'wx_ref',_cor51,_cor52,_cor53},Toolid,Bitmap = {'wx_ref',_cor54,_cor55,_cor56},BmpDisabled = {'wx_ref',_cor57,_cor58,_cor59}>
	      when %% Line 146
		call 'erlang':'is_integer'
		    (Toolid) ->
	      %% Line 147
	      apply 'addTool'/5
		  (This, Toolid, Bitmap, BmpDisabled, [])
	  %% Line 148
	  <{'wx_ref',ThisRef,ThisT,_cor60},Toolid,{'wx_ref',BitmapRef,BitmapT,_cor61},Options>
	      when let <_cor11> =
		    %% Line 149
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor12> =
			%% Line 149
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 149
			call 'erlang':'and'
			    (_cor11, _cor12) ->
	      do  %% Line 150
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 151
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 152
			  ( fun (_cor34,_cor33) ->
				case <_cor34,_cor33> of
				  <{'shortHelpString',ShortHelpString},Acc> when 'true' ->
				      let <ShortHelpString_UC> =
					  call 'unicode':'characters_to_binary'
					      ([ShortHelpString|[0]])
				      in  let <_cor23> =
					      call 'erlang':'byte_size'
						  (ShortHelpString_UC)
					  in  let <_cor18> =
						  call 'erlang':'byte_size'
						      (ShortHelpString_UC)
					      in  let <_cor19> =
						      call 'erlang':'+'
							  (0, _cor18)
						  in  let <_cor20> =
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor21> =
							      call 'erlang':'-'
								  (8, _cor20)
							  in  let <_cor22> =
								  call 'erlang':'band'
								      (_cor21, 7)
							      in  let <_cor24> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor23>(32,1,'integer',['unsigned'|['native']]),
									#<ShortHelpString_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor22,8,'integer',['unsigned'|['big']])}#
								  in  [_cor24|Acc]
				  %% Line 153
				  <{'longHelpString',LongHelpString},Acc> when 'true' ->
				      let <LongHelpString_UC> =
					  call 'unicode':'characters_to_binary'
					      ([LongHelpString|[0]])
				      in  let <_cor31> =
					      call 'erlang':'byte_size'
						  (LongHelpString_UC)
					  in  let <_cor26> =
						  call 'erlang':'byte_size'
						      (LongHelpString_UC)
					      in  let <_cor27> =
						      call 'erlang':'+'
							  (0, _cor26)
						  in  let <_cor28> =
							  call 'erlang':'band'
							      (_cor27, 7)
						      in  let <_cor29> =
							      call 'erlang':'-'
								  (8, _cor28)
							  in  let <_cor30> =
								  call 'erlang':'band'
								      (_cor29, 7)
							      in  let <_cor32> =
								      #{#<2>(32,1,'integer',['unsigned'|['native']]),
									#<_cor31>(32,1,'integer',['unsigned'|['native']]),
									#<LongHelpString_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor30,8,'integer',['unsigned'|['big']])}#
								  in  [_cor32|Acc]
				  %% Line 154
				  <BadOpt,_cor62> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-addTool/4-fun-0-'}}] )
		      in  let <_cor38> =
			      %% Line 155
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 155
				  call 'erlang':'list_to_binary'
				      (_cor38)
			      in  let <_cor40> =
				      %% Line 157
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<Toolid>(32,1,'integer',['unsigned'|['native']]),
					#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 156
				      call 'wxe_util':'call'
					  (980, _cor40)
	  ( <_cor44,_cor43,_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor44,_cor43,_cor42,_cor41})
		  -| [{'function_name',{'addTool',4}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/5 =
    %% Line 186
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor84,_cor85,_cor86},Toolid,Label,Bitmap = {'wx_ref',_cor87,_cor88,_cor89},BmpDisabled = {'wx_ref',_cor90,_cor91,_cor92}>
	      when let <_cor5> =
		    %% Line 187
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor6> =
			%% Line 187
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 187
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor5, _cor6)
			  -| ['compiler_generated'] ) ->
	      %% Line 188
	      apply 'addTool'/6
		  (This, Toolid, Label, Bitmap, BmpDisabled, [])
	  %% Line 189
	  <{'wx_ref',ThisRef,ThisT,_cor93},Toolid,Label,{'wx_ref',BitmapRef,BitmapT,_cor94},Options>
	      when %% Line 190
		try
		    let <_cor10> =
			call 'erlang':'is_integer'
			    (Toolid)
		    in  let <_cor11> =
			    call 'erlang':'is_list'
				(Label)
			in  let <_cor12> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor13> =
				    call 'erlang':'and'
					(_cor11, _cor12)
				in  call 'erlang':'and'
					(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 191
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 192
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  do  %% Line 193
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BitmapT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BitmapT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 194
			      ( fun (_cor29,_cor28) ->
				    case <_cor29,_cor28> of
				      <{'shortHelp',ShortHelp},Acc> when 'true' ->
					  let <ShortHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelp|[0]])
					  in  let <_cor25> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor20> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor21> =
							  call 'erlang':'+'
							      (0, _cor20)
						      in  let <_cor22> =
							      call 'erlang':'band'
								  (_cor21, 7)
							  in  let <_cor23> =
								  call 'erlang':'-'
								      (8, _cor22)
							      in  let <_cor24> =
								      call 'erlang':'band'
									  (_cor23, 7)
								  in  let <_cor26> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor25>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor24,8,'integer',['unsigned'|['big']])}#
								      in  [_cor26|Acc]
				      %% Line 195
				      <{'kind',Kind},Acc> when 'true' ->
					  let <_cor27> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Kind>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor27|Acc]
				      %% Line 196
				      <BadOpt,_cor95> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-addTool/5-fun-0-'}}] )
			  in  let <_cor33> =
				  %% Line 197
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 197
				      call 'erlang':'list_to_binary'
					  (_cor33)
				  in  let <_cor40> =
					  %% Line 199
					  call 'erlang':'byte_size'
					      (Label_UC)
				      in  let <_cor35> =
					      %% Line 199
					      call 'erlang':'byte_size'
						  (Label_UC)
					  in  let <_cor36> =
						  %% Line 199
						  call 'erlang':'+'
						      (4, _cor35)
					      in  let <_cor37> =
						      %% Line 199
						      call 'erlang':'band'
							  (_cor36, 7)
						  in  let <_cor38> =
							  %% Line 199
							  call 'erlang':'-'
							      (8, _cor37)
						      in  let <_cor39> =
							      %% Line 199
							      call 'erlang':'band'
								  (_cor38, 7)
							  in  let <_cor41> =
								  %% Line 199
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor40>(32,1,'integer',['unsigned'|['native']]),
								    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor39,8,'integer',['unsigned'|['big']]),
								    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 198
								  call 'wxe_util':'call'
								      (977, _cor41)
	  %% Line 200
	  <{'wx_ref',ThisRef,ThisT,_cor96},Toolid,{'wx_ref',BitmapRef,BitmapT,_cor97},{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor98},Options>
	      when let <_cor42> =
		    %% Line 201
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor43> =
			%% Line 201
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 201
			call 'erlang':'and'
			    (_cor42, _cor43) ->
	      do  %% Line 202
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 203
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 204
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BmpDisabledT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BmpDisabledT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 205
			      ( fun (_cor72,_cor71) ->
				    case <_cor72,_cor71> of
				      <{'toggle',Toggle},Acc> when 'true' ->
					  let <_cor50> =
					      call 'wxe_util':'from_bool'
						  (Toggle)
					  in  let <_cor51> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor50>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor51|Acc]
				      %% Line 206
				      <{'clientData',{'wx_ref',ClientDataRef,ClientDataT,_cor99}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (ClientDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call ClientDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor54> =
						  #{#<2>(32,1,'integer',['unsigned'|['native']]),
						    #<ClientDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor54|Acc]
				      %% Line 207
				      <{'shortHelpString',ShortHelpString},Acc> when 'true' ->
					  let <ShortHelpString_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelpString|[0]])
					  in  let <_cor61> =
						  call 'erlang':'byte_size'
						      (ShortHelpString_UC)
					      in  let <_cor56> =
						      call 'erlang':'byte_size'
							  (ShortHelpString_UC)
						  in  let <_cor57> =
							  call 'erlang':'+'
							      (0, _cor56)
						      in  let <_cor58> =
							      call 'erlang':'band'
								  (_cor57, 7)
							  in  let <_cor59> =
								  call 'erlang':'-'
								      (8, _cor58)
							      in  let <_cor60> =
								      call 'erlang':'band'
									  (_cor59, 7)
								  in  let <_cor62> =
									  #{#<3>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor61>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelpString_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor60,8,'integer',['unsigned'|['big']])}#
								      in  [_cor62|Acc]
				      %% Line 208
				      <{'longHelpString',LongHelpString},Acc> when 'true' ->
					  let <LongHelpString_UC> =
					      call 'unicode':'characters_to_binary'
						  ([LongHelpString|[0]])
					  in  let <_cor69> =
						  call 'erlang':'byte_size'
						      (LongHelpString_UC)
					      in  let <_cor64> =
						      call 'erlang':'byte_size'
							  (LongHelpString_UC)
						  in  let <_cor65> =
							  call 'erlang':'+'
							      (0, _cor64)
						      in  let <_cor66> =
							      call 'erlang':'band'
								  (_cor65, 7)
							  in  let <_cor67> =
								  call 'erlang':'-'
								      (8, _cor66)
							      in  let <_cor68> =
								      call 'erlang':'band'
									  (_cor67, 7)
								  in  let <_cor70> =
									  #{#<4>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor69>(32,1,'integer',['unsigned'|['native']]),
									    #<LongHelpString_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor68,8,'integer',['unsigned'|['big']])}#
								      in  [_cor70|Acc]
				      %% Line 209
				      <BadOpt,_cor100> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-addTool/5-fun-1-'}}] )
			  in  let <_cor76> =
				  %% Line 210
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 210
				      call 'erlang':'list_to_binary'
					  (_cor76)
				  in  let <_cor78> =
					  %% Line 212
					  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
					    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']]),
					    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 211
					  call 'wxe_util':'call'
					      (979, _cor78)
	  ( <_cor83,_cor82,_cor81,_cor80,_cor79> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor83,_cor82,_cor81,_cor80,_cor79})
		  -| [{'function_name',{'addTool',5}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/6 =
    %% Line 233
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor64,_cor65,_cor66},Toolid,Bitmap = {'wx_ref',_cor67,_cor68,_cor69},BmpDisabled = {'wx_ref',_cor70,_cor71,_cor72},Toggle,XPos>
	      when %% Line 234
		( try
		      let <_cor6> =
			  call 'erlang':'is_integer'
			      (Toolid)
		      in  let <_cor7> =
			      call 'erlang':'is_boolean'
				  (Toggle)
			  in  let <_cor8> =
				  call 'erlang':'is_integer'
				      (XPos)
			      in  let <_cor9> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor7, _cor8)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor6, _cor9)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 235
	      apply 'addTool'/7
		  (This, Toolid, Bitmap, BmpDisabled, Toggle, XPos, [])
	  %% Line 236
	  <{'wx_ref',ThisRef,ThisT,_cor73},Toolid,Label,{'wx_ref',BitmapRef,BitmapT,_cor74},{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor75},Options>
	      when %% Line 237
		try
		    let <_cor13> =
			call 'erlang':'is_integer'
			    (Toolid)
		    in  let <_cor14> =
			    call 'erlang':'is_list'
				(Label)
			in  let <_cor15> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor16> =
				    call 'erlang':'and'
					(_cor14, _cor15)
				in  call 'erlang':'and'
					(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 238
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 239
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  do  %% Line 240
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BitmapT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BitmapT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  do  %% Line 241
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (BmpDisabledT,
					       'wxBitmap') ->
					'ok'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					call BmpDisabledT:'parent_class'
					    ('wxBitmap')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <MOpts> =
				  %% Line 242
				  ( fun (_cor45,_cor44) ->
					case <_cor45,_cor44> of
					  <{'kind',Kind},Acc> when 'true' ->
					      let <_cor24> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<Kind>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor24|Acc]
					  %% Line 243
					  <{'shortHelp',ShortHelp},Acc> when 'true' ->
					      let <ShortHelp_UC> =
						  call 'unicode':'characters_to_binary'
						      ([ShortHelp|[0]])
					      in  let <_cor31> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor26> =
							  call 'erlang':'byte_size'
							      (ShortHelp_UC)
						      in  let <_cor27> =
							      call 'erlang':'+'
								  (0, _cor26)
							  in  let <_cor28> =
								  call 'erlang':'band'
								      (_cor27, 7)
							      in  let <_cor29> =
								      call 'erlang':'-'
									  (8, _cor28)
								  in  let <_cor30> =
									  call 'erlang':'band'
									      (_cor29, 7)
								      in  let <_cor32> =
									      #{#<2>(32,1,'integer',['unsigned'|['native']]),
										#<_cor31>(32,1,'integer',['unsigned'|['native']]),
										#<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor30,8,'integer',['unsigned'|['big']])}#
									  in  [_cor32|Acc]
					  %% Line 244
					  <{'longHelp',LongHelp},Acc> when 'true' ->
					      let <LongHelp_UC> =
						  call 'unicode':'characters_to_binary'
						      ([LongHelp|[0]])
					      in  let <_cor39> =
						      call 'erlang':'byte_size'
							  (LongHelp_UC)
						  in  let <_cor34> =
							  call 'erlang':'byte_size'
							      (LongHelp_UC)
						      in  let <_cor35> =
							      call 'erlang':'+'
								  (0, _cor34)
							  in  let <_cor36> =
								  call 'erlang':'band'
								      (_cor35, 7)
							      in  let <_cor37> =
								      call 'erlang':'-'
									  (8, _cor36)
								  in  let <_cor38> =
									  call 'erlang':'band'
									      (_cor37, 7)
								      in  let <_cor40> =
									      #{#<3>(32,1,'integer',['unsigned'|['native']]),
										#<_cor39>(32,1,'integer',['unsigned'|['native']]),
										#<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
										#<0>(_cor38,8,'integer',['unsigned'|['big']])}#
									  in  [_cor40|Acc]
					  %% Line 245
					  <{'data',{'wx_ref',DataRef,DataT,_cor76}},Acc> when 'true' ->
					      do  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (DataT,
								   'wx') ->
							    'ok'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    call DataT:'parent_class'
								('wx')
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
						  let <_cor43> =
						      #{#<4>(32,1,'integer',['unsigned'|['native']]),
							#<DataRef>(32,1,'integer',['unsigned'|['native']])}#
						  in  [_cor43|Acc]
					  %% Line 246
					  <BadOpt,_cor77> when 'true' ->
					      call 'erlang':'error'
						  ({'badoption',BadOpt})
					end
				    -| [{'id',{0,0,'-addTool/6-fun-0-'}}] )
			      in  let <_cor49> =
				      %% Line 247
				      call 'lists':'foldl'
					  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']]),
						     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
				  in  let <BinOpt> =
					  %% Line 247
					  call 'erlang':'list_to_binary'
					      (_cor49)
				      in  let <_cor56> =
					      %% Line 249
					      call 'erlang':'byte_size'
						  (Label_UC)
					  in  let <_cor51> =
						  %% Line 249
						  call 'erlang':'byte_size'
						      (Label_UC)
					      in  let <_cor52> =
						      %% Line 249
						      call 'erlang':'+'
							  (4, _cor51)
						  in  let <_cor53> =
							  %% Line 249
							  call 'erlang':'band'
							      (_cor52, 7)
						      in  let <_cor54> =
							      %% Line 249
							      call 'erlang':'-'
								  (8, _cor53)
							  in  let <_cor55> =
								  %% Line 249
								  call 'erlang':'band'
								      (_cor54, 7)
							      in  let <_cor57> =
								      %% Line 249
								      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
									#<Toolid>(32,1,'integer',['unsigned'|['native']]),
									#<_cor56>(32,1,'integer',['unsigned'|['native']]),
									#<Label_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor55,8,'integer',['unsigned'|['big']]),
									#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
									#<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']]),
									#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
								  in  %% Line 248
								      call 'wxe_util':'call'
									  (976, _cor57)
	  ( <_cor63,_cor62,_cor61,_cor60,_cor59,_cor58> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor63,_cor62,_cor61,_cor60,_cor59,_cor58})
		  -| [{'function_name',{'addTool',6}}] )
	    -| ['compiler_generated'] )
	end
'addTool'/7 =
    %% Line 258
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor55},Toolid,{'wx_ref',BitmapRef,BitmapT,_cor56},{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor57},Toggle,XPos,Options>
	      when %% Line 259
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Toolid)
		    in  let <_cor8> =
			    call 'erlang':'is_boolean'
				(Toggle)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (XPos)
			    in  let <_cor10> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 260
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 261
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 262
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BmpDisabledT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BmpDisabledT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 263
			      ( fun (_cor40,_cor39) ->
				    case <_cor40,_cor39> of
				      <{'yPos',YPos},Acc> when 'true' ->
					  let <_cor19> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<YPos>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor19|Acc]
				      %% Line 264
				      <{'clientData',{'wx_ref',ClientDataRef,ClientDataT,_cor58}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (ClientDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call ClientDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor22> =
						  #{#<2>(32,1,'integer',['unsigned'|['native']]),
						    #<ClientDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor22|Acc]
				      %% Line 265
				      <{'shortHelp',ShortHelp},Acc> when 'true' ->
					  let <ShortHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelp|[0]])
					  in  let <_cor29> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor24> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor25> =
							  call 'erlang':'+'
							      (0, _cor24)
						      in  let <_cor26> =
							      call 'erlang':'band'
								  (_cor25, 7)
							  in  let <_cor27> =
								  call 'erlang':'-'
								      (8, _cor26)
							      in  let <_cor28> =
								      call 'erlang':'band'
									  (_cor27, 7)
								  in  let <_cor30> =
									  #{#<3>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor29>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor28,8,'integer',['unsigned'|['big']])}#
								      in  [_cor30|Acc]
				      %% Line 266
				      <{'longHelp',LongHelp},Acc> when 'true' ->
					  let <LongHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([LongHelp|[0]])
					  in  let <_cor37> =
						  call 'erlang':'byte_size'
						      (LongHelp_UC)
					      in  let <_cor32> =
						      call 'erlang':'byte_size'
							  (LongHelp_UC)
						  in  let <_cor33> =
							  call 'erlang':'+'
							      (0, _cor32)
						      in  let <_cor34> =
							      call 'erlang':'band'
								  (_cor33, 7)
							  in  let <_cor35> =
								  call 'erlang':'-'
								      (8, _cor34)
							      in  let <_cor36> =
								      call 'erlang':'band'
									  (_cor35, 7)
								  in  let <_cor38> =
									  #{#<4>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor37>(32,1,'integer',['unsigned'|['native']]),
									    #<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor36,8,'integer',['unsigned'|['big']])}#
								      in  [_cor38|Acc]
				      %% Line 267
				      <BadOpt,_cor59> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-addTool/7-fun-0-'}}] )
			  in  let <_cor44> =
				  %% Line 268
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 268
				      call 'erlang':'list_to_binary'
					  (_cor44)
				  in  let <_cor46> =
					  %% Line 270
					  call 'wxe_util':'from_bool'
					      (Toggle)
				      in  let <_cor47> =
					      %% Line 270
					      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						#<Toolid>(32,1,'integer',['unsigned'|['native']]),
						#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
						#<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']]),
						#<_cor46>(32,1,'integer',['unsigned'|['native']]),
						#<XPos>(32,1,'integer',['unsigned'|['native']]),
						#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
					  in  %% Line 269
					      call 'wxe_util':'call'
						  (981, _cor47)
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48})
		  -| [{'function_name',{'addTool',7}}] )
	    -| ['compiler_generated'] )
	end
'addCheckTool'/4 =
    %% Line 276
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Toolid,Label,Bitmap = {'wx_ref',_cor15,_cor16,_cor17}>
	      when let <_cor4> =
		    %% Line 277
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor5> =
			%% Line 277
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 277
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 278
	      apply 'addCheckTool'/5
		  (This, Toolid, Label, Bitmap, [])
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'addCheckTool',4}}] )
	    -| ['compiler_generated'] )
	end
'addCheckTool'/5 =
    %% Line 287
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor55},Toolid,Label,{'wx_ref',BitmapRef,BitmapT,_cor56},Options>
	      when %% Line 288
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Toolid)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(Label)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 289
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 290
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  do  %% Line 291
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BitmapT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BitmapT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 292
			      ( fun (_cor37,_cor36) ->
				    case <_cor37,_cor36> of
				      <{'bmpDisabled',{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor57}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (BmpDisabledT,
							       'wxBitmap') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call BmpDisabledT:'parent_class'
							    ('wxBitmap')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor16> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor16|Acc]
				      %% Line 293
				      <{'shortHelp',ShortHelp},Acc> when 'true' ->
					  let <ShortHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelp|[0]])
					  in  let <_cor23> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor18> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor19> =
							  call 'erlang':'+'
							      (0, _cor18)
						      in  let <_cor20> =
							      call 'erlang':'band'
								  (_cor19, 7)
							  in  let <_cor21> =
								  call 'erlang':'-'
								      (8, _cor20)
							      in  let <_cor22> =
								      call 'erlang':'band'
									  (_cor21, 7)
								  in  let <_cor24> =
									  #{#<2>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor23>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor22,8,'integer',['unsigned'|['big']])}#
								      in  [_cor24|Acc]
				      %% Line 294
				      <{'longHelp',LongHelp},Acc> when 'true' ->
					  let <LongHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([LongHelp|[0]])
					  in  let <_cor31> =
						  call 'erlang':'byte_size'
						      (LongHelp_UC)
					      in  let <_cor26> =
						      call 'erlang':'byte_size'
							  (LongHelp_UC)
						  in  let <_cor27> =
							  call 'erlang':'+'
							      (0, _cor26)
						      in  let <_cor28> =
							      call 'erlang':'band'
								  (_cor27, 7)
							  in  let <_cor29> =
								  call 'erlang':'-'
								      (8, _cor28)
							      in  let <_cor30> =
								      call 'erlang':'band'
									  (_cor29, 7)
								  in  let <_cor32> =
									  #{#<3>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor31>(32,1,'integer',['unsigned'|['native']]),
									    #<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor30,8,'integer',['unsigned'|['big']])}#
								      in  [_cor32|Acc]
				      %% Line 295
				      <{'data',{'wx_ref',DataRef,DataT,_cor58}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (DataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call DataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor35> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<DataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor35|Acc]
				      %% Line 296
				      <BadOpt,_cor59> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-addCheckTool/5-fun-0-'}}] )
			  in  let <_cor41> =
				  %% Line 297
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 297
				      call 'erlang':'list_to_binary'
					  (_cor41)
				  in  let <_cor48> =
					  %% Line 299
					  call 'erlang':'byte_size'
					      (Label_UC)
				      in  let <_cor43> =
					      %% Line 299
					      call 'erlang':'byte_size'
						  (Label_UC)
					  in  let <_cor44> =
						  %% Line 299
						  call 'erlang':'+'
						      (4, _cor43)
					      in  let <_cor45> =
						      %% Line 299
						      call 'erlang':'band'
							  (_cor44, 7)
						  in  let <_cor46> =
							  %% Line 299
							  call 'erlang':'-'
							      (8, _cor45)
						      in  let <_cor47> =
							      %% Line 299
							      call 'erlang':'band'
								  (_cor46, 7)
							  in  let <_cor49> =
								  %% Line 299
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor48>(32,1,'integer',['unsigned'|['native']]),
								    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor47,8,'integer',['unsigned'|['big']]),
								    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 298
								  call 'wxe_util':'call'
								      (982, _cor49)
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50})
		  -| [{'function_name',{'addCheckTool',5}}] )
	    -| ['compiler_generated'] )
	end
'addRadioTool'/4 =
    %% Line 305
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Toolid,Label,Bitmap = {'wx_ref',_cor15,_cor16,_cor17}>
	      when let <_cor4> =
		    %% Line 306
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor5> =
			%% Line 306
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 306
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 307
	      apply 'addRadioTool'/5
		  (This, Toolid, Label, Bitmap, [])
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'addRadioTool',4}}] )
	    -| ['compiler_generated'] )
	end
'addRadioTool'/5 =
    %% Line 316
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor55},Toolid,Label,{'wx_ref',BitmapRef,BitmapT,_cor56},Options>
	      when %% Line 317
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Toolid)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(Label)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 318
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 319
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  do  %% Line 320
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BitmapT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BitmapT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 321
			      ( fun (_cor37,_cor36) ->
				    case <_cor37,_cor36> of
				      <{'bmpDisabled',{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor57}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (BmpDisabledT,
							       'wxBitmap') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call BmpDisabledT:'parent_class'
							    ('wxBitmap')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor16> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor16|Acc]
				      %% Line 322
				      <{'shortHelp',ShortHelp},Acc> when 'true' ->
					  let <ShortHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelp|[0]])
					  in  let <_cor23> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor18> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor19> =
							  call 'erlang':'+'
							      (0, _cor18)
						      in  let <_cor20> =
							      call 'erlang':'band'
								  (_cor19, 7)
							  in  let <_cor21> =
								  call 'erlang':'-'
								      (8, _cor20)
							      in  let <_cor22> =
								      call 'erlang':'band'
									  (_cor21, 7)
								  in  let <_cor24> =
									  #{#<2>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor23>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor22,8,'integer',['unsigned'|['big']])}#
								      in  [_cor24|Acc]
				      %% Line 323
				      <{'longHelp',LongHelp},Acc> when 'true' ->
					  let <LongHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([LongHelp|[0]])
					  in  let <_cor31> =
						  call 'erlang':'byte_size'
						      (LongHelp_UC)
					      in  let <_cor26> =
						      call 'erlang':'byte_size'
							  (LongHelp_UC)
						  in  let <_cor27> =
							  call 'erlang':'+'
							      (0, _cor26)
						      in  let <_cor28> =
							      call 'erlang':'band'
								  (_cor27, 7)
							  in  let <_cor29> =
								  call 'erlang':'-'
								      (8, _cor28)
							      in  let <_cor30> =
								      call 'erlang':'band'
									  (_cor29, 7)
								  in  let <_cor32> =
									  #{#<3>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor31>(32,1,'integer',['unsigned'|['native']]),
									    #<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor30,8,'integer',['unsigned'|['big']])}#
								      in  [_cor32|Acc]
				      %% Line 324
				      <{'data',{'wx_ref',DataRef,DataT,_cor58}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (DataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call DataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor35> =
						  #{#<4>(32,1,'integer',['unsigned'|['native']]),
						    #<DataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor35|Acc]
				      %% Line 325
				      <BadOpt,_cor59> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-addRadioTool/5-fun-0-'}}] )
			  in  let <_cor41> =
				  %% Line 326
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 326
				      call 'erlang':'list_to_binary'
					  (_cor41)
				  in  let <_cor48> =
					  %% Line 328
					  call 'erlang':'byte_size'
					      (Label_UC)
				      in  let <_cor43> =
					      %% Line 328
					      call 'erlang':'byte_size'
						  (Label_UC)
					  in  let <_cor44> =
						  %% Line 328
						  call 'erlang':'+'
						      (4, _cor43)
					      in  let <_cor45> =
						      %% Line 328
						      call 'erlang':'band'
							  (_cor44, 7)
						  in  let <_cor46> =
							  %% Line 328
							  call 'erlang':'-'
							      (8, _cor45)
						      in  let <_cor47> =
							      %% Line 328
							      call 'erlang':'band'
								  (_cor46, 7)
							  in  let <_cor49> =
								  %% Line 328
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor48>(32,1,'integer',['unsigned'|['native']]),
								    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor47,8,'integer',['unsigned'|['big']]),
								    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 327
								  call 'wxe_util':'call'
								      (983, _cor49)
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50})
		  -| [{'function_name',{'addRadioTool',5}}] )
	    -| ['compiler_generated'] )
	end
'deleteTool'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 334
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 335
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 337
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 336
		      call 'wxe_util':'call'
			  (984, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deleteTool',2}}] )
	    -| ['compiler_generated'] )
	end
'deleteToolByPos'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 343
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 344
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 346
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 345
		      call 'wxe_util':'call'
			  (985, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deleteToolByPos',2}}] )
	    -| ['compiler_generated'] )
	end
'enableTool'/3 =
    %% Line 351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Toolid,Enable>
	      when let <_cor3> =
		    %% Line 352
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor4> =
			%% Line 352
			call 'erlang':'is_boolean'
			    (Enable)
		    in  %% Line 352
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 353
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 355
		      call 'wxe_util':'from_bool'
			  (Enable)
		  in  let <_cor8> =
			  %% Line 355
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 354
			  call 'wxe_util':'cast'
			      (986, _cor8)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'enableTool',3}}] )
	    -| ['compiler_generated'] )
	end
'findById'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 361
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 362
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 364
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 363
		      call 'wxe_util':'call'
			  (987, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'findById',2}}] )
	    -| ['compiler_generated'] )
	end
'findControl'/2 =
    %% Line 369
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 370
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 371
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 373
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 372
		      call 'wxe_util':'call'
			  (988, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'findControl',2}}] )
	    -| ['compiler_generated'] )
	end
'findToolForPosition'/3 =
    %% Line 378
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 379
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 379
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 379
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 380
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 382
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 381
		      call 'wxe_util':'call'
			  (989, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'findToolForPosition',3}}] )
	    -| ['compiler_generated'] )
	end
'getToolSize'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 388
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 390
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 389
		      call 'wxe_util':'call'
			  (990, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getToolSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getToolBitmapSize'/1 =
    %% Line 395
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 396
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 398
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 397
		      call 'wxe_util':'call'
			  (991, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getToolBitmapSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getMargins'/1 =
    %% Line 403
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 404
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 406
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 405
		      call 'wxe_util':'call'
			  (992, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMargins',1}}] )
	    -| ['compiler_generated'] )
	end
'getToolEnabled'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 412
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 413
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 415
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 414
		      call 'wxe_util':'call'
			  (993, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getToolEnabled',2}}] )
	    -| ['compiler_generated'] )
	end
'getToolLongHelp'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 421
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 422
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 424
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 423
		      call 'wxe_util':'call'
			  (994, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getToolLongHelp',2}}] )
	    -| ['compiler_generated'] )
	end
'getToolPacking'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 430
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 432
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 431
		      call 'wxe_util':'call'
			  (995, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getToolPacking',1}}] )
	    -| ['compiler_generated'] )
	end
'getToolPos'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Id>
	      when %% Line 438
		call 'erlang':'is_integer'
		    (Id) ->
	      do  %% Line 439
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 441
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Id>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 440
		      call 'wxe_util':'call'
			  (996, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getToolPos',2}}] )
	    -| ['compiler_generated'] )
	end
'getToolSeparation'/1 =
    %% Line 446
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 447
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 449
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 448
		      call 'wxe_util':'call'
			  (997, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getToolSeparation',1}}] )
	    -| ['compiler_generated'] )
	end
'getToolShortHelp'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 455
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 456
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 458
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 457
		      call 'wxe_util':'call'
			  (998, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getToolShortHelp',2}}] )
	    -| ['compiler_generated'] )
	end
'getToolState'/2 =
    %% Line 463
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 464
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 465
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 467
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 466
		      call 'wxe_util':'call'
			  (999, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getToolState',2}}] )
	    -| ['compiler_generated'] )
	end
'insertControl'/3 =
    %% Line 472
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Pos,{'wx_ref',ControlRef,ControlT,_cor12}>
	      when %% Line 473
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 474
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 475
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ControlT,
				       'wxControl') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ControlT:'parent_class'
				    ('wxControl')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 477
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Pos>(32,1,'integer',['unsigned'|['native']]),
			    #<ControlRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 476
			  call 'wxe_util':'call'
			      (1000, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insertControl',3}}] )
	    -| ['compiler_generated'] )
	end
'insertSeparator'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 483
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 484
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 486
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 485
		      call 'wxe_util':'call'
			  (1001, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'insertSeparator',2}}] )
	    -| ['compiler_generated'] )
	end
'insertTool'/3 =
    %% Line 491
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Pos,{'wx_ref',ToolRef,ToolT,_cor12}>
	      when %% Line 492
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 493
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 494
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ToolT,
				       'wx') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ToolT:'parent_class'
				    ('wx')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 496
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Pos>(32,1,'integer',['unsigned'|['native']]),
			    #<ToolRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 495
			  call 'wxe_util':'call'
			      (1003, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insertTool',3}}] )
	    -| ['compiler_generated'] )
	end
'insertTool'/4 =
    %% Line 502
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Pos,Toolid,Bitmap = {'wx_ref',_cor15,_cor16,_cor17}>
	      when let <_cor4> =
		    %% Line 503
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor5> =
			%% Line 503
			call 'erlang':'is_integer'
			    (Toolid)
		    in  %% Line 503
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 504
	      apply 'insertTool'/5
		  (This, Pos, Toolid, Bitmap, [])
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'insertTool',4}}] )
	    -| ['compiler_generated'] )
	end
'insertTool'/5 =
    %% Line 527
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor56,_cor57,_cor58},Pos,Toolid,Label,Bitmap = {'wx_ref',_cor59,_cor60,_cor61}>
	      when %% Line 528
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (Pos)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (Toolid)
			  in  let <_cor7> =
				  call 'erlang':'is_list'
				      (Label)
			      in  let <_cor9> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor6, _cor7)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor9)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 529
	      apply 'insertTool'/6
		  (This, Pos, Toolid, Label, Bitmap, [])
	  %% Line 530
	  <{'wx_ref',ThisRef,ThisT,_cor62},Pos,Toolid,{'wx_ref',BitmapRef,BitmapT,_cor63},Options>
	      when %% Line 531
		try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor12> =
			    call 'erlang':'is_integer'
				(Toolid)
			in  let <_cor13> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 532
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 533
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 534
			  ( fun (_cor44,_cor43) ->
				case <_cor44,_cor43> of
				  <{'bmpDisabled',{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor64}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (BmpDisabledT,
							   'wxBitmap') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call BmpDisabledT:'parent_class'
							('wxBitmap')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor21> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor21|Acc]
				  %% Line 535
				  <{'toggle',Toggle},Acc> when 'true' ->
				      let <_cor22> =
					  call 'wxe_util':'from_bool'
					      (Toggle)
				      in  let <_cor23> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<_cor22>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor23|Acc]
				  %% Line 536
				  <{'clientData',{'wx_ref',ClientDataRef,ClientDataT,_cor65}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (ClientDataT,
							   'wx') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call ClientDataT:'parent_class'
							('wx')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor26> =
					      #{#<3>(32,1,'integer',['unsigned'|['native']]),
						#<ClientDataRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor26|Acc]
				  %% Line 537
				  <{'shortHelp',ShortHelp},Acc> when 'true' ->
				      let <ShortHelp_UC> =
					  call 'unicode':'characters_to_binary'
					      ([ShortHelp|[0]])
				      in  let <_cor33> =
					      call 'erlang':'byte_size'
						  (ShortHelp_UC)
					  in  let <_cor28> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor29> =
						      call 'erlang':'+'
							  (0, _cor28)
						  in  let <_cor30> =
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor31> =
							      call 'erlang':'-'
								  (8, _cor30)
							  in  let <_cor32> =
								  call 'erlang':'band'
								      (_cor31, 7)
							      in  let <_cor34> =
								      #{#<4>(32,1,'integer',['unsigned'|['native']]),
									#<_cor33>(32,1,'integer',['unsigned'|['native']]),
									#<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor32,8,'integer',['unsigned'|['big']])}#
								  in  [_cor34|Acc]
				  %% Line 538
				  <{'longHelp',LongHelp},Acc> when 'true' ->
				      let <LongHelp_UC> =
					  call 'unicode':'characters_to_binary'
					      ([LongHelp|[0]])
				      in  let <_cor41> =
					      call 'erlang':'byte_size'
						  (LongHelp_UC)
					  in  let <_cor36> =
						  call 'erlang':'byte_size'
						      (LongHelp_UC)
					      in  let <_cor37> =
						      call 'erlang':'+'
							  (0, _cor36)
						  in  let <_cor38> =
							  call 'erlang':'band'
							      (_cor37, 7)
						      in  let <_cor39> =
							      call 'erlang':'-'
								  (8, _cor38)
							  in  let <_cor40> =
								  call 'erlang':'band'
								      (_cor39, 7)
							      in  let <_cor42> =
								      #{#<5>(32,1,'integer',['unsigned'|['native']]),
									#<_cor41>(32,1,'integer',['unsigned'|['native']]),
									#<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor40,8,'integer',['unsigned'|['big']])}#
								  in  [_cor42|Acc]
				  %% Line 539
				  <BadOpt,_cor66> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-insertTool/5-fun-0-'}}] )
		      in  let <_cor48> =
			      %% Line 540
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 540
				  call 'erlang':'list_to_binary'
				      (_cor48)
			      in  let <_cor50> =
				      %% Line 542
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<Pos>(32,1,'integer',['unsigned'|['native']]),
					#<Toolid>(32,1,'integer',['unsigned'|['native']]),
					#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 541
				      call 'wxe_util':'call'
					  (1004, _cor50)
	  ( <_cor55,_cor54,_cor53,_cor52,_cor51> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54,_cor53,_cor52,_cor51})
		  -| [{'function_name',{'insertTool',5}}] )
	    -| ['compiler_generated'] )
	end
'insertTool'/6 =
    %% Line 553
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor60},Pos,Toolid,Label,{'wx_ref',BitmapRef,BitmapT,_cor61},Options>
	      when %% Line 554
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Toolid)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Label)
			    in  let <_cor9> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 555
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 556
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  do  %% Line 557
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BitmapT,
					   'wxBitmap') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BitmapT:'parent_class'
					('wxBitmap')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 558
			      ( fun (_cor41,_cor40) ->
				    case <_cor41,_cor40> of
				      <{'bmpDisabled',{'wx_ref',BmpDisabledRef,BmpDisabledT,_cor62}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (BmpDisabledT,
							       'wxBitmap') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call BmpDisabledT:'parent_class'
							    ('wxBitmap')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor19> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<BmpDisabledRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor19|Acc]
				      %% Line 559
				      <{'kind',Kind},Acc> when 'true' ->
					  let <_cor20> =
					      #{#<2>(32,1,'integer',['unsigned'|['native']]),
						#<Kind>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor20|Acc]
				      %% Line 560
				      <{'shortHelp',ShortHelp},Acc> when 'true' ->
					  let <ShortHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([ShortHelp|[0]])
					  in  let <_cor27> =
						  call 'erlang':'byte_size'
						      (ShortHelp_UC)
					      in  let <_cor22> =
						      call 'erlang':'byte_size'
							  (ShortHelp_UC)
						  in  let <_cor23> =
							  call 'erlang':'+'
							      (0, _cor22)
						      in  let <_cor24> =
							      call 'erlang':'band'
								  (_cor23, 7)
							  in  let <_cor25> =
								  call 'erlang':'-'
								      (8, _cor24)
							      in  let <_cor26> =
								      call 'erlang':'band'
									  (_cor25, 7)
								  in  let <_cor28> =
									  #{#<3>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor27>(32,1,'integer',['unsigned'|['native']]),
									    #<ShortHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor26,8,'integer',['unsigned'|['big']])}#
								      in  [_cor28|Acc]
				      %% Line 561
				      <{'longHelp',LongHelp},Acc> when 'true' ->
					  let <LongHelp_UC> =
					      call 'unicode':'characters_to_binary'
						  ([LongHelp|[0]])
					  in  let <_cor35> =
						  call 'erlang':'byte_size'
						      (LongHelp_UC)
					      in  let <_cor30> =
						      call 'erlang':'byte_size'
							  (LongHelp_UC)
						  in  let <_cor31> =
							  call 'erlang':'+'
							      (0, _cor30)
						      in  let <_cor32> =
							      call 'erlang':'band'
								  (_cor31, 7)
							  in  let <_cor33> =
								  call 'erlang':'-'
								      (8, _cor32)
							      in  let <_cor34> =
								      call 'erlang':'band'
									  (_cor33, 7)
								  in  let <_cor36> =
									  #{#<4>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor35>(32,1,'integer',['unsigned'|['native']]),
									    #<LongHelp_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor34,8,'integer',['unsigned'|['big']])}#
								      in  [_cor36|Acc]
				      %% Line 562
				      <{'clientData',{'wx_ref',ClientDataRef,ClientDataT,_cor63}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (ClientDataT,
							       'wx') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call ClientDataT:'parent_class'
							    ('wx')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor39> =
						  #{#<5>(32,1,'integer',['unsigned'|['native']]),
						    #<ClientDataRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor39|Acc]
				      %% Line 563
				      <BadOpt,_cor64> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-insertTool/6-fun-0-'}}] )
			  in  let <_cor45> =
				  %% Line 564
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 564
				      call 'erlang':'list_to_binary'
					  (_cor45)
				  in  let <_cor52> =
					  %% Line 566
					  call 'erlang':'byte_size'
					      (Label_UC)
				      in  let <_cor47> =
					      %% Line 566
					      call 'erlang':'byte_size'
						  (Label_UC)
					  in  let <_cor48> =
						  %% Line 566
						  call 'erlang':'+'
						      (0, _cor47)
					      in  let <_cor49> =
						      %% Line 566
						      call 'erlang':'band'
							  (_cor48, 7)
						  in  let <_cor50> =
							  %% Line 566
							  call 'erlang':'-'
							      (8, _cor49)
						      in  let <_cor51> =
							      %% Line 566
							      call 'erlang':'band'
								  (_cor50, 7)
							  in  let <_cor53> =
								  %% Line 566
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Pos>(32,1,'integer',['unsigned'|['native']]),
								    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor52>(32,1,'integer',['unsigned'|['native']]),
								    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor51,8,'integer',['unsigned'|['big']]),
								    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 565
								  call 'wxe_util':'call'
								      (1002, _cor53)
	  ( <_cor59,_cor58,_cor57,_cor56,_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor59,_cor58,_cor57,_cor56,_cor55,_cor54})
		  -| [{'function_name',{'insertTool',6}}] )
	    -| ['compiler_generated'] )
	end
'realize'/1 =
    %% Line 571
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 572
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 574
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 573
		      call 'wxe_util':'call'
			  (1005, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'realize',1}}] )
	    -| ['compiler_generated'] )
	end
'removeTool'/2 =
    %% Line 579
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Toolid>
	      when %% Line 580
		call 'erlang':'is_integer'
		    (Toolid) ->
	      do  %% Line 581
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 583
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Toolid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 582
		      call 'wxe_util':'call'
			  (1006, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'removeTool',2}}] )
	    -| ['compiler_generated'] )
	end
'setMargins'/3 =
    %% Line 588
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 589
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 589
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 589
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 590
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 592
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 591
		      call 'wxe_util':'cast'
			  (1007, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setMargins',3}}] )
	    -| ['compiler_generated'] )
	end
'setToolBitmapSize'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{SizeW,SizeH}>
	      when let <_cor2> =
		    %% Line 598
		    call 'erlang':'is_integer'
			(SizeW)
		in  let <_cor3> =
			%% Line 598
			call 'erlang':'is_integer'
			    (SizeH)
		    in  %% Line 598
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 599
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 601
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<SizeW>(32,1,'integer',['unsigned'|['native']]),
			#<SizeH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 600
		      call 'wxe_util':'cast'
			  (1008, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setToolBitmapSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setToolLongHelp'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Toolid,HelpString>
	      when let <_cor3> =
		    %% Line 607
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor4> =
			%% Line 607
			call 'erlang':'is_list'
			    (HelpString)
		    in  %% Line 607
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 608
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <HelpString_UC> =
		      %% Line 609
		      call 'unicode':'characters_to_binary'
			  ([HelpString|[0]])
		  in  let <_cor13> =
			  %% Line 611
			  call 'erlang':'byte_size'
			      (HelpString_UC)
		      in  let <_cor8> =
			      %% Line 611
			      call 'erlang':'byte_size'
				  (HelpString_UC)
			  in  let <_cor9> =
				  %% Line 611
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 611
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 611
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 611
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 611
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<HelpString_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 610
						  call 'wxe_util':'cast'
						      (1009, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setToolLongHelp',3}}] )
	    -| ['compiler_generated'] )
	end
'setToolPacking'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Packing>
	      when %% Line 617
		call 'erlang':'is_integer'
		    (Packing) ->
	      do  %% Line 618
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 620
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Packing>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 619
		      call 'wxe_util':'cast'
			  (1010, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setToolPacking',2}}] )
	    -| ['compiler_generated'] )
	end
'setToolShortHelp'/3 =
    %% Line 625
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Id,HelpString>
	      when let <_cor3> =
		    %% Line 626
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor4> =
			%% Line 626
			call 'erlang':'is_list'
			    (HelpString)
		    in  %% Line 626
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 627
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <HelpString_UC> =
		      %% Line 628
		      call 'unicode':'characters_to_binary'
			  ([HelpString|[0]])
		  in  let <_cor13> =
			  %% Line 630
			  call 'erlang':'byte_size'
			      (HelpString_UC)
		      in  let <_cor8> =
			      %% Line 630
			      call 'erlang':'byte_size'
				  (HelpString_UC)
			  in  let <_cor9> =
				  %% Line 630
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 630
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 630
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 630
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 630
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Id>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<HelpString_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 629
						  call 'wxe_util':'cast'
						      (1011, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setToolShortHelp',3}}] )
	    -| ['compiler_generated'] )
	end
'setToolSeparation'/2 =
    %% Line 635
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Separation>
	      when %% Line 636
		call 'erlang':'is_integer'
		    (Separation) ->
	      do  %% Line 637
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 639
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Separation>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 638
		      call 'wxe_util':'cast'
			  (1012, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setToolSeparation',2}}] )
	    -| ['compiler_generated'] )
	end
'toggleTool'/3 =
    %% Line 644
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Toolid,Toggle>
	      when let <_cor3> =
		    %% Line 645
		    call 'erlang':'is_integer'
			(Toolid)
		in  let <_cor4> =
			%% Line 645
			call 'erlang':'is_boolean'
			    (Toggle)
		    in  %% Line 645
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 646
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxToolBar') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxToolBar')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 648
		      call 'wxe_util':'from_bool'
			  (Toggle)
		  in  let <_cor8> =
			  %% Line 648
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Toolid>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 647
			  call 'wxe_util':'cast'
			      (1013, _cor8)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'toggleTool',3}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 652
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 654
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 657
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 659
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 663
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 665
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 667
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 669
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 671
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 673
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 675
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 677
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 681
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 683
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 685
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 687
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 689
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 691
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 695
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 697
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 699
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 701
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 703
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 705
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 707
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 709
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 711
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 713
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 715
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 717
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 719
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 721
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 723
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 725
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 727
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 729
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 731
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 735
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 737
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 739
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 741
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 743
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 747
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 749
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 753
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 755
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 757
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 759
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 761
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 767
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 769
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 771
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 773
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 777
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 779
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 781
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 783
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 785
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 787
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 789
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 791
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 793
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 795
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 797
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 799
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 801
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 803
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 805
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 807
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 809
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 811
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 813
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 815
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 817
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 819
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 821
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 823
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 825
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 827
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 829
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 831
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 835
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 837
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 839
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 841
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 843
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 845
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 847
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 849
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 851
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 853
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 855
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 857
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 859
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 861
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 863
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 865
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 867
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 869
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 871
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 873
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 875
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 877
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 879
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 881
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 883
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 885
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 887
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 889
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 891
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 893
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 895
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 897
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 899
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 901
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 903
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 905
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 907
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 909
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 911
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 913
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 915
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 917
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 919
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 921
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 923
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 925
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 927
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 929
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 931
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 933
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 935
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 937
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 939
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 941
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 943
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 945
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 947
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 949
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 951
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 953
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 955
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 957
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 961
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 963
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 965
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 967
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 969
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 971
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 973
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 975
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 977
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 979
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 981
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 983
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 985
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 987
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 989
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 991
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 993
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 995
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 997
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 999
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 1001
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 1004
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 1006
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 1008
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 1010
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 1012
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxToolBar')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxToolBar', _cor0)
end