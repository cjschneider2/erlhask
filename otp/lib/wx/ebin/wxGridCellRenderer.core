module 'wxGridCellRenderer' ['draw'/8,
			     'getBestSize'/6,
			     'module_info'/0,
			     'module_info'/1,
			     'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxGridCellRenderer',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxGridCellRenderer',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'draw',8},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'This'}|[{'var',38,'Grid'}|[{'var',38,'Attr'}|[{'var',38,'Dc'}|[{'var',38,'Rect'}|[{'var',38,'Row'}|[{'var',38,'Col'}|[{'var',38,'IsSelected'}]]]]]]]]}|[{'atom',38,'ok'}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'This'}|[{'type',39,'wxGridCellRenderer',[]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Grid'}|[{'remote_type',39,[{'atom',39,'wxGrid'}|[{'atom',39,'wxGrid'}|[[]]]]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Attr'}|[{'remote_type',39,[{'atom',39,'wxGridCellAttr'}|[{'atom',39,'wxGridCellAttr'}|[[]]]]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Dc'}|[{'remote_type',39,[{'atom',39,'wxDC'}|[{'atom',39,'wxDC'}|[[]]]]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Rect'}|[{'type',39,'tuple',[{'ann_type',39,[{'var',39,'X'}|[{'type',39,'integer',[]}]]}|[{'ann_type',39,[{'var',39,'Y'}|[{'type',39,'integer',[]}]]}|[{'ann_type',39,[{'var',39,'W'}|[{'type',39,'integer',[]}]]}|[{'ann_type',39,[{'var',39,'H'}|[{'type',39,'integer',[]}]]}]]]]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Row'}|[{'type',39,'integer',[]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Col'}|[{'type',39,'integer',[]}]]]]}|[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'IsSelected'}|[{'type',39,'boolean',[]}]]]]}]]]]]]]]]]}]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'getBestSize',6},[{'type',50,'bounded_fun',[{'type',50,'fun',[{'type',50,'product',[{'var',50,'This'}|[{'var',50,'Grid'}|[{'var',50,'Attr'}|[{'var',50,'Dc'}|[{'var',50,'Row'}|[{'var',50,'Col'}]]]]]]}|[{'type',50,'tuple',[{'ann_type',50,[{'var',50,'W'}|[{'type',50,'integer',[]}]]}|[{'ann_type',50,[{'var',50,'H'}|[{'type',50,'integer',[]}]]}]]}]]}|[[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'This'}|[{'type',51,'wxGridCellRenderer',[]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Grid'}|[{'remote_type',51,[{'atom',51,'wxGrid'}|[{'atom',51,'wxGrid'}|[[]]]]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Attr'}|[{'remote_type',51,[{'atom',51,'wxGridCellAttr'}|[{'atom',51,'wxGridCellAttr'}|[[]]]]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Dc'}|[{'remote_type',51,[{'atom',51,'wxDC'}|[{'atom',51,'wxDC'}|[[]]]]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Row'}|[{'type',51,'integer',[]}]]]]}|[{'type',51,'constraint',[{'atom',51,'is_subtype'}|[[{'var',51,'Col'}|[{'type',51,'integer',[]}]]]]}]]]]]]]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxGridCellRenderer'})
'draw'/8 =
    %% Line 40
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor38},{'wx_ref',GridRef,GridT,_cor39},{'wx_ref',AttrRef,AttrT,_cor40},{'wx_ref',DcRef,DcT,_cor41},{RectX,RectY,RectW,RectH},Row,Col,IsSelected>
	      when %% Line 41
		try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor9> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor12> =
					call 'erlang':'is_integer'
					    (Row)
				    in  let <_cor13> =
					    call 'erlang':'is_integer'
						(Col)
					in  let <_cor14> =
						call 'erlang':'is_boolean'
						    (IsSelected)
					    in  let <_cor15> =
						    call 'erlang':'and'
							(_cor13, _cor14)
						in  let <_cor16> =
							call 'erlang':'and'
							    (_cor12, _cor15)
						    in  let <_cor17> =
							    call 'erlang':'and'
								(_cor11, _cor16)
							in  let <_cor18> =
								call 'erlang':'and'
								    (_cor10, _cor17)
							    in  let <_cor19> =
								    call 'erlang':'and'
									(_cor9, _cor18)
								in  call 'erlang':'and'
									(_cor8, _cor19)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 42
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 43
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (GridT,
				       'wxGrid') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call GridT:'parent_class'
				    ('wxGrid')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 44
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (AttrT,
					   'wxGridCellAttr') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call AttrT:'parent_class'
					('wxGridCellAttr')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  do  %% Line 45
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (DcT,
					       'wxDC') ->
					'ok'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					call DcT:'parent_class'
					    ('wxDC')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <_cor28> =
				  %% Line 47
				  call 'wxe_util':'from_bool'
				      (IsSelected)
			      in  let <_cor29> =
				      %% Line 47
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<GridRef>(32,1,'integer',['unsigned'|['native']]),
					#<AttrRef>(32,1,'integer',['unsigned'|['native']]),
					#<DcRef>(32,1,'integer',['unsigned'|['native']]),
					#<RectX>(32,1,'integer',['unsigned'|['native']]),
					#<RectY>(32,1,'integer',['unsigned'|['native']]),
					#<RectW>(32,1,'integer',['unsigned'|['native']]),
					#<RectH>(32,1,'integer',['unsigned'|['native']]),
					#<Row>(32,1,'integer',['unsigned'|['native']]),
					#<Col>(32,1,'integer',['unsigned'|['native']]),
					#<_cor28>(32,1,'integer',['unsigned'|['native']])}#
				  in  %% Line 46
				      call 'wxe_util':'cast'
					  (559, _cor29)
	  ( <_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'draw',8}}] )
	    -| ['compiler_generated'] )
	end
'getBestSize'/6 =
    %% Line 52
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',GridRef,GridT,_cor24},{'wx_ref',AttrRef,AttrT,_cor25},{'wx_ref',DcRef,DcT,_cor26},Row,Col>
	      when let <_cor6> =
		    %% Line 53
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor7> =
			%% Line 53
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 53
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      do  %% Line 54
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 55
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (GridT,
				       'wxGrid') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call GridT:'parent_class'
				    ('wxGrid')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 56
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (AttrT,
					   'wxGridCellAttr') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call AttrT:'parent_class'
					('wxGridCellAttr')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  do  %% Line 57
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (DcT,
					       'wxDC') ->
					'ok'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					call DcT:'parent_class'
					    ('wxDC')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <_cor16> =
				  %% Line 59
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<GridRef>(32,1,'integer',['unsigned'|['native']]),
				    #<AttrRef>(32,1,'integer',['unsigned'|['native']]),
				    #<DcRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Row>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']])}#
			      in  %% Line 58
				  call 'wxe_util':'call'
				      (560, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'getBestSize',6}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridCellRenderer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridCellRenderer', _cor0)
end