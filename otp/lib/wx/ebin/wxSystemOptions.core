module 'wxSystemOptions' ['getOption'/1,
			  'getOptionInt'/1,
			  'hasOption'/1,
			  'isFalse'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'parent_class'/1,
			  'setOption'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxSystemOptions',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxSystemOptions',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'getOption',1},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'Name'}]}|[{'remote_type',38,[{'atom',38,'unicode'}|[{'atom',38,'charlist'}|[[]]]]}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Name'}|[{'remote_type',39,[{'atom',39,'unicode'}|[{'atom',39,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'getOptionInt',1},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'Name'}]}|[{'type',47,'integer',[]}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Name'}|[{'remote_type',48,[{'atom',48,'unicode'}|[{'atom',48,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'hasOption',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Name'}]}|[{'type',56,'boolean',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Name'}|[{'remote_type',57,[{'atom',57,'unicode'}|[{'atom',57,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'isFalse',1},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'Name'}]}|[{'type',65,'boolean',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Name'}|[{'remote_type',66,[{'atom',66,'unicode'}|[{'atom',66,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'setOption',2},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'Name'}|[{'var',78,'Value'}]]}|[{'atom',78,'ok'}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Name'}|[{'remote_type',79,[{'atom',79,'unicode'}|[{'atom',79,'chardata'}|[[]]]]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Value'}|[{'type',79,'integer',[]}]]]]}]]]]}|[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'Name'}|[{'var',80,'Value'}]]}|[{'atom',80,'ok'}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Name'}|[{'remote_type',81,[{'atom',81,'unicode'}|[{'atom',81,'chardata'}|[[]]]]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Value'}|[{'remote_type',81,[{'atom',81,'unicode'}|[{'atom',81,'chardata'}|[[]]]]}]]]]}]]]]}]]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxSystemOptions'})
'getOption'/1 =
    %% Line 40
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 41
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Name_UC> =
		  %% Line 42
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor7> =
		      %% Line 44
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor2> =
			  %% Line 44
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor3> =
			      %% Line 44
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 44
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 44
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 44
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 44
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 43
					      call 'wxe_util':'call'
						  (3497, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'getOption',1}}] )
	    -| ['compiler_generated'] )
	end
'getOptionInt'/1 =
    %% Line 49
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 50
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Name_UC> =
		  %% Line 51
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor7> =
		      %% Line 53
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor2> =
			  %% Line 53
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor3> =
			      %% Line 53
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 53
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 53
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 53
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 53
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 52
					      call 'wxe_util':'call'
						  (3498, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'getOptionInt',1}}] )
	    -| ['compiler_generated'] )
	end
'hasOption'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 59
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Name_UC> =
		  %% Line 60
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor7> =
		      %% Line 62
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor2> =
			  %% Line 62
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor3> =
			      %% Line 62
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 62
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 62
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 62
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 62
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 61
					      call 'wxe_util':'call'
						  (3499, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'hasOption',1}}] )
	    -| ['compiler_generated'] )
	end
'isFalse'/1 =
    %% Line 67
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when %% Line 68
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Name_UC> =
		  %% Line 69
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor7> =
		      %% Line 71
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor2> =
			  %% Line 71
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor3> =
			      %% Line 71
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 71
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 71
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 71
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 71
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 70
					      call 'wxe_util':'call'
						  (3500, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'isFalse',1}}] )
	    -| ['compiler_generated'] )
	end
'setOption'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Value>
	      when let <_cor2> =
		    %% Line 83
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor3> =
			%% Line 83
			call 'erlang':'is_integer'
			    (Value)
		    in  %% Line 83
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Name_UC> =
		  %% Line 84
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <_cor10> =
		      %% Line 86
		      call 'erlang':'byte_size'
			  (Name_UC)
		  in  let <_cor5> =
			  %% Line 86
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor6> =
			      %% Line 86
			      call 'erlang':'+'
				  (4, _cor5)
			  in  let <_cor7> =
				  %% Line 86
				  call 'erlang':'band'
				      (_cor6, 7)
			      in  let <_cor8> =
				      %% Line 86
				      call 'erlang':'-'
					  (8, _cor7)
				  in  let <_cor9> =
					  %% Line 86
					  call 'erlang':'band'
					      (_cor8, 7)
				      in  let <_cor11> =
					      %% Line 86
					      #{#<_cor10>(32,1,'integer',['unsigned'|['native']]),
						#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor9,8,'integer',['unsigned'|['big']]),
						#<Value>(32,1,'integer',['unsigned'|['native']])}#
					  in  %% Line 85
					      call 'wxe_util':'cast'
						  (3502, _cor11)
	  %% Line 87
	  <Name,Value>
	      when let <_cor12> =
		    %% Line 88
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor13> =
			%% Line 88
			call 'erlang':'is_list'
			    (Value)
		    in  %% Line 88
			call 'erlang':'and'
			    (_cor12, _cor13) ->
	      let <Name_UC> =
		  %% Line 89
		  call 'unicode':'characters_to_binary'
		      ([Name|[0]])
	      in  let <Value_UC> =
		      %% Line 90
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor27> =
			  %% Line 92
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor22> =
			      %% Line 92
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor23> =
				  %% Line 92
				  call 'erlang':'+'
				      (4, _cor22)
			      in  let <_cor24> =
				      %% Line 92
				      call 'erlang':'band'
					  (_cor23, 7)
				  in  let <_cor25> =
					  %% Line 92
					  call 'erlang':'-'
					      (8, _cor24)
				      in  let <_cor26> =
					      %% Line 92
					      call 'erlang':'band'
						  (_cor25, 7)
					  in  let <_cor21> =
						  %% Line 92
						  call 'erlang':'byte_size'
						      (Value_UC)
					      in  let <_cor16> =
						      %% Line 92
						      call 'erlang':'byte_size'
							  (Value_UC)
						  in  let <_cor17> =
							  %% Line 92
							  call 'erlang':'+'
							      (4, _cor16)
						      in  let <_cor18> =
							      %% Line 92
							      call 'erlang':'band'
								  (_cor17, 7)
							  in  let <_cor19> =
								  %% Line 92
								  call 'erlang':'-'
								      (8, _cor18)
							      in  let <_cor20> =
								      %% Line 92
								      call 'erlang':'band'
									  (_cor19, 7)
								  in  let <_cor28> =
									  %% Line 92
									  #{#<_cor27>(32,1,'integer',['unsigned'|['native']]),
									    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor26,8,'integer',['unsigned'|['big']]),
									    #<_cor21>(32,1,'integer',['unsigned'|['native']]),
									    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor20,8,'integer',['unsigned'|['big']])}#
								      in  %% Line 91
									  call 'wxe_util':'cast'
									      (3501, _cor28)
	  ( <_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29})
		  -| [{'function_name',{'setOption',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSystemOptions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSystemOptions', _cor0)
end