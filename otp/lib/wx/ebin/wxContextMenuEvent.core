module 'wxContextMenuEvent' ['getClientData'/1,
			     'getExtraLong'/1,
			     'getId'/1,
			     'getInt'/1,
			     'getPosition'/1,
			     'getSelection'/1,
			     'getSkipped'/1,
			     'getString'/1,
			     'getTimestamp'/1,
			     'isChecked'/1,
			     'isCommandEvent'/1,
			     'isSelection'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'parent_class'/1,
			     'resumePropagation'/2,
			     'setInt'/2,
			     'setPosition'/2,
			     'setString'/2,
			     'shouldPropagate'/1,
			     'skip'/1,
			     'skip'/2,
			     'stopPropagation'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 43
		'export_type' =
		    %% Line 43
		    [{'wxContextMenuEvent',0}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'wxContextMenuEvent',{'remote_type',49,[{'atom',49,'wx'}|[{'atom',49,'wx_object'}|[[]]]]},[]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'getPosition',1},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'This'}]}|[{'type',51,'tuple',[{'ann_type',51,[{'var',51,'X'}|[{'type',51,'integer',[]}]]}|[{'ann_type',51,[{'var',51,'Y'}|[{'type',51,'integer',[]}]]}]]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'This'}|[{'type',52,'wxContextMenuEvent',[]}]]]]}]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'setPosition',2},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'This'}|[{'var',59,'Pos'}]]}|[{'atom',59,'ok'}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'This'}|[{'type',60,'wxContextMenuEvent',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Pos'}|[{'type',60,'tuple',[{'ann_type',60,[{'var',60,'X'}|[{'type',60,'integer',[]}]]}|[{'ann_type',60,[{'var',60,'Y'}|[{'type',60,'integer',[]}]]}]]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 45
    fun (_cor0) ->
	case _cor0 of
	  <'wxCommandEvent'> when 'true' ->
	      'true'
	  %% Line 46
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 47
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxContextMenuEvent'})
	end
'getPosition'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 54
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxContextMenuEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxContextMenuEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 56
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 55
		      call 'wxe_util':'call'
			  (2843, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'setPosition'/2 =
    %% Line 61
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PosX,PosY}>
	      when let <_cor2> =
		    %% Line 62
		    call 'erlang':'is_integer'
			(PosX)
		in  let <_cor3> =
			%% Line 62
			call 'erlang':'is_integer'
			    (PosY)
		    in  %% Line 62
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 63
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxContextMenuEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxContextMenuEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 65
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PosX>(32,1,'integer',['unsigned'|['native']]),
			#<PosY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 64
		      call 'wxe_util':'cast'
			  (2844, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'setString'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setString'
	    (_cor1, _cor0)
'setInt'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setInt'
	    (_cor1, _cor0)
'isSelection'/1 =
    %% Line 73
    fun (_cor0) ->
	call 'wxCommandEvent':'isSelection'
	    (_cor0)
'isChecked'/1 =
    %% Line 75
    fun (_cor0) ->
	call 'wxCommandEvent':'isChecked'
	    (_cor0)
'getString'/1 =
    %% Line 77
    fun (_cor0) ->
	call 'wxCommandEvent':'getString'
	    (_cor0)
'getSelection'/1 =
    %% Line 79
    fun (_cor0) ->
	call 'wxCommandEvent':'getSelection'
	    (_cor0)
'getInt'/1 =
    %% Line 81
    fun (_cor0) ->
	call 'wxCommandEvent':'getInt'
	    (_cor0)
'getExtraLong'/1 =
    %% Line 83
    fun (_cor0) ->
	call 'wxCommandEvent':'getExtraLong'
	    (_cor0)
'getClientData'/1 =
    %% Line 85
    fun (_cor0) ->
	call 'wxCommandEvent':'getClientData'
	    (_cor0)
'stopPropagation'/1 =
    %% Line 88
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 92
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 94
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 98
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 100
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 102
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 104
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxContextMenuEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxContextMenuEvent', _cor0)
end