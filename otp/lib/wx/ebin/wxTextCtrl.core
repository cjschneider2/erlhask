module 'wxTextCtrl' ['appendText'/2,
		     'cacheBestSize'/2,
		     'canCopy'/1,
		     'canCut'/1,
		     'canPaste'/1,
		     'canRedo'/1,
		     'canUndo'/1,
		     'captureMouse'/1,
		     'center'/1,
		     'center'/2,
		     'centerOnParent'/1,
		     'centerOnParent'/2,
		     'centre'/1,
		     'centre'/2,
		     'centreOnParent'/1,
		     'centreOnParent'/2,
		     'changeValue'/2,
		     'clear'/1,
		     'clearBackground'/1,
		     'clientToScreen'/2,
		     'clientToScreen'/3,
		     'close'/1,
		     'close'/2,
		     'connect'/2,
		     'connect'/3,
		     'convertDialogToPixels'/2,
		     'convertPixelsToDialog'/2,
		     'copy'/1,
		     'create'/3,
		     'create'/4,
		     'cut'/1,
		     'destroy'/1,
		     'destroyChildren'/1,
		     'disable'/1,
		     'discardEdits'/1,
		     'disconnect'/1,
		     'disconnect'/2,
		     'disconnect'/3,
		     'emulateKeyPress'/2,
		     'enable'/1,
		     'enable'/2,
		     'findWindow'/2,
		     'fit'/1,
		     'fitInside'/1,
		     'freeze'/1,
		     'getAcceleratorTable'/1,
		     'getBackgroundColour'/1,
		     'getBackgroundStyle'/1,
		     'getBestSize'/1,
		     'getCaret'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getChildren'/1,
		     'getClientSize'/1,
		     'getContainingSizer'/1,
		     'getCursor'/1,
		     'getDefaultStyle'/1,
		     'getDropTarget'/1,
		     'getEventHandler'/1,
		     'getExtraStyle'/1,
		     'getFont'/1,
		     'getForegroundColour'/1,
		     'getGrandParent'/1,
		     'getHandle'/1,
		     'getHelpText'/1,
		     'getId'/1,
		     'getInsertionPoint'/1,
		     'getLabel'/1,
		     'getLastPosition'/1,
		     'getLineLength'/2,
		     'getLineText'/2,
		     'getMaxSize'/1,
		     'getMinSize'/1,
		     'getName'/1,
		     'getNumberOfLines'/1,
		     'getParent'/1,
		     'getPosition'/1,
		     'getRange'/3,
		     'getRect'/1,
		     'getScreenPosition'/1,
		     'getScreenRect'/1,
		     'getScrollPos'/2,
		     'getScrollRange'/2,
		     'getScrollThumb'/2,
		     'getSelection'/1,
		     'getSize'/1,
		     'getSizer'/1,
		     'getStringSelection'/1,
		     'getStyle'/3,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getToolTip'/1,
		     'getUpdateRegion'/1,
		     'getValue'/1,
		     'getVirtualSize'/1,
		     'getWindowStyleFlag'/1,
		     'getWindowVariant'/1,
		     'hasCapture'/1,
		     'hasScrollbar'/2,
		     'hasTransparentBackground'/1,
		     'hide'/1,
		     'inheritAttributes'/1,
		     'initDialog'/1,
		     'invalidateBestSize'/1,
		     'isEditable'/1,
		     'isEnabled'/1,
		     'isExposed'/2,
		     'isExposed'/3,
		     'isExposed'/5,
		     'isModified'/1,
		     'isMultiLine'/1,
		     'isRetained'/1,
		     'isShown'/1,
		     'isSingleLine'/1,
		     'isTopLevel'/1,
		     'layout'/1,
		     'lineDown'/1,
		     'lineUp'/1,
		     'loadFile'/2,
		     'loadFile'/3,
		     'lower'/1,
		     'makeModal'/1,
		     'makeModal'/2,
		     'markDirty'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'move'/2,
		     'move'/3,
		     'move'/4,
		     'moveAfterInTabOrder'/2,
		     'moveBeforeInTabOrder'/2,
		     'navigate'/1,
		     'navigate'/2,
		     'new'/0,
		     'new'/2,
		     'new'/3,
		     'pageDown'/1,
		     'pageUp'/1,
		     'parent_class'/1,
		     'paste'/1,
		     'popEventHandler'/1,
		     'popEventHandler'/2,
		     'popupMenu'/2,
		     'popupMenu'/3,
		     'popupMenu'/4,
		     'positionToXY'/2,
		     'raise'/1,
		     'redo'/1,
		     'refresh'/1,
		     'refresh'/2,
		     'refreshRect'/2,
		     'refreshRect'/3,
		     'releaseMouse'/1,
		     'remove'/3,
		     'removeChild'/2,
		     'reparent'/2,
		     'replace'/4,
		     'saveFile'/1,
		     'saveFile'/2,
		     'screenToClient'/1,
		     'screenToClient'/2,
		     'scrollLines'/2,
		     'scrollPages'/2,
		     'scrollWindow'/3,
		     'scrollWindow'/4,
		     'setAcceleratorTable'/2,
		     'setAutoLayout'/2,
		     'setBackgroundColour'/2,
		     'setBackgroundStyle'/2,
		     'setCaret'/2,
		     'setClientSize'/2,
		     'setClientSize'/3,
		     'setContainingSizer'/2,
		     'setCursor'/2,
		     'setDefaultStyle'/2,
		     'setDropTarget'/2,
		     'setEditable'/2,
		     'setExtraStyle'/2,
		     'setFocus'/1,
		     'setFocusFromKbd'/1,
		     'setFont'/2,
		     'setForegroundColour'/2,
		     'setHelpText'/2,
		     'setId'/2,
		     'setInsertionPoint'/2,
		     'setInsertionPointEnd'/1,
		     'setLabel'/2,
		     'setMaxLength'/2,
		     'setMaxSize'/2,
		     'setMinSize'/2,
		     'setName'/2,
		     'setOwnBackgroundColour'/2,
		     'setOwnFont'/2,
		     'setOwnForegroundColour'/2,
		     'setPalette'/2,
		     'setScrollPos'/3,
		     'setScrollPos'/4,
		     'setScrollbar'/5,
		     'setScrollbar'/6,
		     'setSelection'/3,
		     'setSize'/2,
		     'setSize'/3,
		     'setSize'/5,
		     'setSize'/6,
		     'setSizeHints'/2,
		     'setSizeHints'/3,
		     'setSizeHints'/4,
		     'setSizer'/2,
		     'setSizer'/3,
		     'setSizerAndFit'/2,
		     'setSizerAndFit'/3,
		     'setStyle'/4,
		     'setThemeEnabled'/2,
		     'setToolTip'/2,
		     'setValue'/2,
		     'setVirtualSize'/2,
		     'setVirtualSize'/3,
		     'setVirtualSizeHints'/2,
		     'setVirtualSizeHints'/3,
		     'setVirtualSizeHints'/4,
		     'setWindowStyle'/2,
		     'setWindowStyleFlag'/2,
		     'setWindowVariant'/2,
		     'shouldInheritColours'/1,
		     'show'/1,
		     'show'/2,
		     'showPosition'/2,
		     'thaw'/1,
		     'transferDataFromWindow'/1,
		     'transferDataToWindow'/1,
		     'undo'/1,
		     'update'/1,
		     'updateWindowUI'/1,
		     'updateWindowUI'/2,
		     'validate'/1,
		     'warpPointer'/3,
		     'writeText'/2,
		     'xYToPosition'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 80
		'export_type' =
		    %% Line 80
		    [{'wxTextCtrl',0}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxTextCtrl',{'remote_type',87,[{'atom',87,'wx'}|[{'atom',87,'wx_object'}|[[]]]]},[]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'new',0},[{'type',89,'fun',[{'type',89,'product',[]}|[{'type',89,'wxTextCtrl',[]}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'new',2},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'Parent'}|[{'var',95,'Id'}]]}|[{'type',95,'wxTextCtrl',[]}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Parent'}|[{'remote_type',96,[{'atom',96,'wxWindow'}|[{'atom',96,'wxWindow'}|[[]]]]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Id'}|[{'type',96,'integer',[]}]]]]}]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'new',3},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'Parent'}|[{'var',103,'Id'}|[{'type',103,'list',[{'var',103,'Option'}]}]]]}|[{'type',103,'wxTextCtrl',[]}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Parent'}|[{'remote_type',104,[{'atom',104,'wxWindow'}|[{'atom',104,'wxWindow'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Id'}|[{'type',104,'integer',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Option'}|[{'type',105,'union',[{'type',105,'tuple',[{'atom',105,'value'}|[{'remote_type',105,[{'atom',105,'unicode'}|[{'atom',105,'chardata'}|[[]]]]}]]}|[{'type',106,'tuple',[{'atom',106,'pos'}|[{'type',106,'tuple',[{'ann_type',106,[{'var',106,'X'}|[{'type',106,'integer',[]}]]}|[{'ann_type',106,[{'var',106,'Y'}|[{'type',106,'integer',[]}]]}]]}]]}|[{'type',107,'tuple',[{'atom',107,'size'}|[{'type',107,'tuple',[{'ann_type',107,[{'var',107,'W'}|[{'type',107,'integer',[]}]]}|[{'ann_type',107,[{'var',107,'H'}|[{'type',107,'integer',[]}]]}]]}]]}|[{'type',108,'tuple',[{'atom',108,'style'}|[{'type',108,'integer',[]}]]}|[{'type',109,'tuple',[{'atom',109,'validator'}|[{'remote_type',109,[{'atom',109,'wx'}|[{'atom',109,'wx_object'}|[[]]]]}]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'appendText',2},[{'type',124,'bounded_fun',[{'type',124,'fun',[{'type',124,'product',[{'var',124,'This'}|[{'var',124,'Text'}]]}|[{'atom',124,'ok'}]]}|[[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'This'}|[{'type',125,'wxTextCtrl',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Text'}|[{'remote_type',125,[{'atom',125,'unicode'}|[{'atom',125,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'canCopy',1},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'This'}]}|[{'type',134,'boolean',[]}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'This'}|[{'type',135,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'canCut',1},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'This'}]}|[{'type',142,'boolean',[]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'This'}|[{'type',143,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'canPaste',1},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'This'}]}|[{'type',150,'boolean',[]}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'This'}|[{'type',151,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'canRedo',1},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'This'}]}|[{'type',158,'boolean',[]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'This'}|[{'type',159,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'canUndo',1},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'This'}]}|[{'type',166,'boolean',[]}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'This'}|[{'type',167,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'clear',1},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'This'}]}|[{'atom',174,'ok'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'This'}|[{'type',175,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'copy',1},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}]}|[{'atom',182,'ok'}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'create',3},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'This'}|[{'var',190,'Parent'}|[{'var',190,'Id'}]]]}|[{'type',190,'boolean',[]}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'This'}|[{'type',191,'wxTextCtrl',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Parent'}|[{'remote_type',191,[{'atom',191,'wxWindow'}|[{'atom',191,'wxWindow'}|[[]]]]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Id'}|[{'type',191,'integer',[]}]]]]}]]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'create',4},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'This'}|[{'var',198,'Parent'}|[{'var',198,'Id'}|[{'type',198,'list',[{'var',198,'Option'}]}]]]]}|[{'type',198,'boolean',[]}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'This'}|[{'type',199,'wxTextCtrl',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Parent'}|[{'remote_type',199,[{'atom',199,'wxWindow'}|[{'atom',199,'wxWindow'}|[[]]]]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Id'}|[{'type',199,'integer',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Option'}|[{'type',200,'union',[{'type',200,'tuple',[{'atom',200,'value'}|[{'remote_type',200,[{'atom',200,'unicode'}|[{'atom',200,'chardata'}|[[]]]]}]]}|[{'type',201,'tuple',[{'atom',201,'pos'}|[{'type',201,'tuple',[{'ann_type',201,[{'var',201,'X'}|[{'type',201,'integer',[]}]]}|[{'ann_type',201,[{'var',201,'Y'}|[{'type',201,'integer',[]}]]}]]}]]}|[{'type',202,'tuple',[{'atom',202,'size'}|[{'type',202,'tuple',[{'ann_type',202,[{'var',202,'W'}|[{'type',202,'integer',[]}]]}|[{'ann_type',202,[{'var',202,'H'}|[{'type',202,'integer',[]}]]}]]}]]}|[{'type',203,'tuple',[{'atom',203,'style'}|[{'type',203,'integer',[]}]]}|[{'type',204,'tuple',[{'atom',204,'validator'}|[{'remote_type',204,[{'atom',204,'wx'}|[{'atom',204,'wx_object'}|[[]]]]}]]}]]]]]}]]]]}]]]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'cut',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'This'}]}|[{'atom',220,'ok'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'This'}|[{'type',221,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'discardEdits',1},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'This'}]}|[{'atom',228,'ok'}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'This'}|[{'type',229,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'changeValue',2},[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'This'}|[{'var',236,'Value'}]]}|[{'atom',236,'ok'}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'This'}|[{'type',237,'wxTextCtrl',[]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Value'}|[{'remote_type',237,[{'atom',237,'unicode'}|[{'atom',237,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'emulateKeyPress',2},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'This'}|[{'var',246,'Event'}]]}|[{'type',246,'boolean',[]}]]}|[[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'This'}|[{'type',247,'wxTextCtrl',[]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Event'}|[{'remote_type',247,[{'atom',247,'wxKeyEvent'}|[{'atom',247,'wxKeyEvent'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'getDefaultStyle',1},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'This'}]}|[{'remote_type',255,[{'atom',255,'wxTextAttr'}|[{'atom',255,'wxTextAttr'}|[[]]]]}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'This'}|[{'type',256,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'getInsertionPoint',1},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'This'}]}|[{'type',263,'integer',[]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'This'}|[{'type',264,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'getLastPosition',1},[{'type',271,'bounded_fun',[{'type',271,'fun',[{'type',271,'product',[{'var',271,'This'}]}|[{'type',271,'integer',[]}]]}|[[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'This'}|[{'type',272,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 279
		'spec' =
		    %% Line 279
		    [{{'getLineLength',2},[{'type',279,'bounded_fun',[{'type',279,'fun',[{'type',279,'product',[{'var',279,'This'}|[{'var',279,'LineNo'}]]}|[{'type',279,'integer',[]}]]}|[[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'This'}|[{'type',280,'wxTextCtrl',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'LineNo'}|[{'type',280,'integer',[]}]]]]}]]]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'getLineText',2},[{'type',288,'bounded_fun',[{'type',288,'fun',[{'type',288,'product',[{'var',288,'This'}|[{'var',288,'LineNo'}]]}|[{'remote_type',288,[{'atom',288,'unicode'}|[{'atom',288,'charlist'}|[[]]]]}]]}|[[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'This'}|[{'type',289,'wxTextCtrl',[]}]]]]}|[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'LineNo'}|[{'type',289,'integer',[]}]]]]}]]]]}]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'getNumberOfLines',1},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'This'}]}|[{'type',297,'integer',[]}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'This'}|[{'type',298,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 305
		'spec' =
		    %% Line 305
		    [{{'getRange',3},[{'type',305,'bounded_fun',[{'type',305,'fun',[{'type',305,'product',[{'var',305,'This'}|[{'var',305,'From'}|[{'var',305,'To'}]]]}|[{'remote_type',305,[{'atom',305,'unicode'}|[{'atom',305,'charlist'}|[[]]]]}]]}|[[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'This'}|[{'type',306,'wxTextCtrl',[]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'From'}|[{'type',306,'integer',[]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'To'}|[{'type',306,'integer',[]}]]]]}]]]]]}]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'getSelection',1},[{'type',314,'bounded_fun',[{'type',314,'fun',[{'type',314,'product',[{'var',314,'This'}]}|[{'type',314,'tuple',[{'ann_type',314,[{'var',314,'From'}|[{'type',314,'integer',[]}]]}|[{'ann_type',314,[{'var',314,'To'}|[{'type',314,'integer',[]}]]}]]}]]}|[[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'This'}|[{'type',315,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'getStringSelection',1},[{'type',322,'bounded_fun',[{'type',322,'fun',[{'type',322,'product',[{'var',322,'This'}]}|[{'remote_type',322,[{'atom',322,'unicode'}|[{'atom',322,'charlist'}|[[]]]]}]]}|[[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'This'}|[{'type',323,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'getStyle',3},[{'type',330,'bounded_fun',[{'type',330,'fun',[{'type',330,'product',[{'var',330,'This'}|[{'var',330,'Position'}|[{'var',330,'Style'}]]]}|[{'type',330,'boolean',[]}]]}|[[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'This'}|[{'type',331,'wxTextCtrl',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Position'}|[{'type',331,'integer',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Style'}|[{'remote_type',331,[{'atom',331,'wxTextAttr'}|[{'atom',331,'wxTextAttr'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 340
		'spec' =
		    %% Line 340
		    [{{'getValue',1},[{'type',340,'bounded_fun',[{'type',340,'fun',[{'type',340,'product',[{'var',340,'This'}]}|[{'remote_type',340,[{'atom',340,'unicode'}|[{'atom',340,'charlist'}|[[]]]]}]]}|[[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'This'}|[{'type',341,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'isEditable',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'This'}]}|[{'type',348,'boolean',[]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'This'}|[{'type',349,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 356
		'spec' =
		    %% Line 356
		    [{{'isModified',1},[{'type',356,'bounded_fun',[{'type',356,'fun',[{'type',356,'product',[{'var',356,'This'}]}|[{'type',356,'boolean',[]}]]}|[[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'This'}|[{'type',357,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 364
		'spec' =
		    %% Line 364
		    [{{'isMultiLine',1},[{'type',364,'bounded_fun',[{'type',364,'fun',[{'type',364,'product',[{'var',364,'This'}]}|[{'type',364,'boolean',[]}]]}|[[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'This'}|[{'type',365,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'isSingleLine',1},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'This'}]}|[{'type',372,'boolean',[]}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'This'}|[{'type',373,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 380
		'spec' =
		    %% Line 380
		    [{{'loadFile',2},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'This'}|[{'var',380,'File'}]]}|[{'type',380,'boolean',[]}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'This'}|[{'type',381,'wxTextCtrl',[]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'File'}|[{'remote_type',381,[{'atom',381,'unicode'}|[{'atom',381,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'loadFile',3},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'This'}|[{'var',388,'File'}|[{'type',388,'list',[{'var',388,'Option'}]}]]]}|[{'type',388,'boolean',[]}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'This'}|[{'type',389,'wxTextCtrl',[]}]]]]}|[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'File'}|[{'remote_type',389,[{'atom',389,'unicode'}|[{'atom',389,'chardata'}|[[]]]]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'Option'}|[{'type',390,'tuple',[{'atom',390,'fileType'}|[{'type',390,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 402
		'spec' =
		    %% Line 402
		    [{{'markDirty',1},[{'type',402,'bounded_fun',[{'type',402,'fun',[{'type',402,'product',[{'var',402,'This'}]}|[{'atom',402,'ok'}]]}|[[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'This'}|[{'type',403,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 410
		'spec' =
		    %% Line 410
		    [{{'paste',1},[{'type',410,'bounded_fun',[{'type',410,'fun',[{'type',410,'product',[{'var',410,'This'}]}|[{'atom',410,'ok'}]]}|[[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'This'}|[{'type',411,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'positionToXY',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'This'}|[{'var',418,'Pos'}]]}|[{'var',418,'Result'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Result'}|[{'type',419,'tuple',[{'ann_type',419,[{'var',419,'Res'}|[{'type',419,'boolean',[]}]]}|[{'ann_type',419,[{'var',419,'X'}|[{'type',419,'integer',[]}]]}|[{'ann_type',419,[{'var',419,'Y'}|[{'type',419,'integer',[]}]]}]]]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'This'}|[{'type',420,'wxTextCtrl',[]}]]]]}|[{'type',420,'constraint',[{'atom',420,'is_subtype'}|[[{'var',420,'Pos'}|[{'type',420,'integer',[]}]]]]}]]]]]}]}],
		%% Line 428
		'spec' =
		    %% Line 428
		    [{{'redo',1},[{'type',428,'bounded_fun',[{'type',428,'fun',[{'type',428,'product',[{'var',428,'This'}]}|[{'atom',428,'ok'}]]}|[[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'This'}|[{'type',429,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'remove',3},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'This'}|[{'var',436,'From'}|[{'var',436,'To'}]]]}|[{'atom',436,'ok'}]]}|[[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'This'}|[{'type',437,'wxTextCtrl',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'From'}|[{'type',437,'integer',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'To'}|[{'type',437,'integer',[]}]]]]}]]]]]}]}],
		%% Line 445
		'spec' =
		    %% Line 445
		    [{{'replace',4},[{'type',445,'bounded_fun',[{'type',445,'fun',[{'type',445,'product',[{'var',445,'This'}|[{'var',445,'From'}|[{'var',445,'To'}|[{'var',445,'Value'}]]]]}|[{'atom',445,'ok'}]]}|[[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'This'}|[{'type',446,'wxTextCtrl',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'From'}|[{'type',446,'integer',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'To'}|[{'type',446,'integer',[]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'Value'}|[{'remote_type',446,[{'atom',446,'unicode'}|[{'atom',446,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 455
		'spec' =
		    %% Line 455
		    [{{'saveFile',1},[{'type',455,'bounded_fun',[{'type',455,'fun',[{'type',455,'product',[{'var',455,'This'}]}|[{'type',455,'boolean',[]}]]}|[[{'type',456,'constraint',[{'atom',456,'is_subtype'}|[[{'var',456,'This'}|[{'type',456,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 463
		'spec' =
		    %% Line 463
		    [{{'saveFile',2},[{'type',463,'bounded_fun',[{'type',463,'fun',[{'type',463,'product',[{'var',463,'This'}|[{'type',463,'list',[{'var',463,'Option'}]}]]}|[{'type',463,'boolean',[]}]]}|[[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'This'}|[{'type',464,'wxTextCtrl',[]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Option'}|[{'type',465,'union',[{'type',465,'tuple',[{'atom',465,'file'}|[{'remote_type',465,[{'atom',465,'unicode'}|[{'atom',465,'chardata'}|[[]]]]}]]}|[{'type',466,'tuple',[{'atom',466,'fileType'}|[{'type',466,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 478
		'spec' =
		    %% Line 478
		    [{{'setDefaultStyle',2},[{'type',478,'bounded_fun',[{'type',478,'fun',[{'type',478,'product',[{'var',478,'This'}|[{'var',478,'Style'}]]}|[{'type',478,'boolean',[]}]]}|[[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'This'}|[{'type',479,'wxTextCtrl',[]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Style'}|[{'remote_type',479,[{'atom',479,'wxTextAttr'}|[{'atom',479,'wxTextAttr'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 487
		'spec' =
		    %% Line 487
		    [{{'setEditable',2},[{'type',487,'bounded_fun',[{'type',487,'fun',[{'type',487,'product',[{'var',487,'This'}|[{'var',487,'Editable'}]]}|[{'atom',487,'ok'}]]}|[[{'type',488,'constraint',[{'atom',488,'is_subtype'}|[[{'var',488,'This'}|[{'type',488,'wxTextCtrl',[]}]]]]}|[{'type',488,'constraint',[{'atom',488,'is_subtype'}|[[{'var',488,'Editable'}|[{'type',488,'boolean',[]}]]]]}]]]]}]}],
		%% Line 496
		'spec' =
		    %% Line 496
		    [{{'setInsertionPoint',2},[{'type',496,'bounded_fun',[{'type',496,'fun',[{'type',496,'product',[{'var',496,'This'}|[{'var',496,'Pos'}]]}|[{'atom',496,'ok'}]]}|[[{'type',497,'constraint',[{'atom',497,'is_subtype'}|[[{'var',497,'This'}|[{'type',497,'wxTextCtrl',[]}]]]]}|[{'type',497,'constraint',[{'atom',497,'is_subtype'}|[[{'var',497,'Pos'}|[{'type',497,'integer',[]}]]]]}]]]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'setInsertionPointEnd',1},[{'type',505,'bounded_fun',[{'type',505,'fun',[{'type',505,'product',[{'var',505,'This'}]}|[{'atom',505,'ok'}]]}|[[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'This'}|[{'type',506,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 513
		'spec' =
		    %% Line 513
		    [{{'setMaxLength',2},[{'type',513,'bounded_fun',[{'type',513,'fun',[{'type',513,'product',[{'var',513,'This'}|[{'var',513,'Len'}]]}|[{'atom',513,'ok'}]]}|[[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'This'}|[{'type',514,'wxTextCtrl',[]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Len'}|[{'type',514,'integer',[]}]]]]}]]]]}]}],
		%% Line 522
		'spec' =
		    %% Line 522
		    [{{'setSelection',3},[{'type',522,'bounded_fun',[{'type',522,'fun',[{'type',522,'product',[{'var',522,'This'}|[{'var',522,'From'}|[{'var',522,'To'}]]]}|[{'atom',522,'ok'}]]}|[[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'This'}|[{'type',523,'wxTextCtrl',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'From'}|[{'type',523,'integer',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'To'}|[{'type',523,'integer',[]}]]]]}]]]]]}]}],
		%% Line 531
		'spec' =
		    %% Line 531
		    [{{'setStyle',4},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'This'}|[{'var',531,'Start'}|[{'var',531,'End'}|[{'var',531,'Style'}]]]]}|[{'type',531,'boolean',[]}]]}|[[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'This'}|[{'type',532,'wxTextCtrl',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Start'}|[{'type',532,'integer',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'End'}|[{'type',532,'integer',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Style'}|[{'remote_type',532,[{'atom',532,'wxTextAttr'}|[{'atom',532,'wxTextAttr'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 541
		'spec' =
		    %% Line 541
		    [{{'setValue',2},[{'type',541,'bounded_fun',[{'type',541,'fun',[{'type',541,'product',[{'var',541,'This'}|[{'var',541,'Value'}]]}|[{'atom',541,'ok'}]]}|[[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'This'}|[{'type',542,'wxTextCtrl',[]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'Value'}|[{'remote_type',542,[{'atom',542,'unicode'}|[{'atom',542,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 551
		'spec' =
		    %% Line 551
		    [{{'showPosition',2},[{'type',551,'bounded_fun',[{'type',551,'fun',[{'type',551,'product',[{'var',551,'This'}|[{'var',551,'Pos'}]]}|[{'atom',551,'ok'}]]}|[[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'This'}|[{'type',552,'wxTextCtrl',[]}]]]]}|[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'Pos'}|[{'type',552,'integer',[]}]]]]}]]]]}]}],
		%% Line 560
		'spec' =
		    %% Line 560
		    [{{'undo',1},[{'type',560,'bounded_fun',[{'type',560,'fun',[{'type',560,'product',[{'var',560,'This'}]}|[{'atom',560,'ok'}]]}|[[{'type',561,'constraint',[{'atom',561,'is_subtype'}|[[{'var',561,'This'}|[{'type',561,'wxTextCtrl',[]}]]]]}]]]}]}],
		%% Line 568
		'spec' =
		    %% Line 568
		    [{{'writeText',2},[{'type',568,'bounded_fun',[{'type',568,'fun',[{'type',568,'product',[{'var',568,'This'}|[{'var',568,'Text'}]]}|[{'atom',568,'ok'}]]}|[[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'This'}|[{'type',569,'wxTextCtrl',[]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'Text'}|[{'remote_type',569,[{'atom',569,'unicode'}|[{'atom',569,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 578
		'spec' =
		    %% Line 578
		    [{{'xYToPosition',3},[{'type',578,'bounded_fun',[{'type',578,'fun',[{'type',578,'product',[{'var',578,'This'}|[{'var',578,'X'}|[{'var',578,'Y'}]]]}|[{'type',578,'integer',[]}]]}|[[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'This'}|[{'type',579,'wxTextCtrl',[]}]]]]}|[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'X'}|[{'type',579,'integer',[]}]]]]}|[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'Y'}|[{'type',579,'integer',[]}]]]]}]]]]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'destroy',1},[{'type',587,'fun',[{'type',587,'product',[{'ann_type',587,[{'var',587,'This'}|[{'type',587,'wxTextCtrl',[]}]]}]}|[{'atom',587,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 82
    fun (_cor0) ->
	case _cor0 of
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 83
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 84
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 85
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxTextCtrl'})
	end
'new'/0 =
    %% Line 90
    fun () ->
	%% Line 91
	call 'wxe_util':'construct'
	    (1813, %% Line 92
		   #{}#)
'new'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor5,_cor6,_cor7},Id>
	      when %% Line 99
		call 'erlang':'is_integer'
		    (Id) ->
	      %% Line 100
	      apply 'new'/3
		  (Parent, Id, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor32},Id,Options>
	      when let <_cor3> =
		    %% Line 111
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor4> =
			%% Line 111
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 111
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 112
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 113
		      ( fun (_cor22,_cor21) ->
			    case <_cor22,_cor21> of
			      <{'value',Value},Acc> when 'true' ->
				  let <Value_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Value|[0]])
				  in  let <_cor13> =
					  call 'erlang':'byte_size'
					      (Value_UC)
				      in  let <_cor8> =
					      call 'erlang':'byte_size'
						  (Value_UC)
					  in  let <_cor9> =
						  call 'erlang':'+'
						      (0, _cor8)
					      in  let <_cor10> =
						      call 'erlang':'band'
							  (_cor9, 7)
						  in  let <_cor11> =
							  call 'erlang':'-'
							      (8, _cor10)
						      in  let <_cor12> =
							      call 'erlang':'band'
								  (_cor11, 7)
							  in  let <_cor14> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
								    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
							      in  [_cor14|Acc]
			      %% Line 114
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor15> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor15|Acc]
			      %% Line 115
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor16> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor16|Acc]
			      %% Line 116
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor17> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor17|Acc]
			      %% Line 117
			      <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor33}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ValidatorT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ValidatorT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor20> =
					  #{#<5>(32,1,'integer',['unsigned'|['native']]),
					    #<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor20|Acc]
			      %% Line 118
			      <BadOpt,_cor34> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/3-fun-0-'}}] )
		  in  let <_cor26> =
			  %% Line 119
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 119
			      call 'erlang':'list_to_binary'
				  (_cor26)
			  in  let <_cor28> =
				  %% Line 121
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Id>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 120
				  call 'wxe_util':'construct'
				      (1812, _cor28)
	  ( <_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'appendText'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 127
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 128
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 129
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 131
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 131
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 131
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 131
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 131
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 131
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 131
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 130
						  call 'wxe_util':'cast'
						      (1816, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'appendText',2}}] )
	    -| ['compiler_generated'] )
	end
'canCopy'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 137
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 139
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 138
		      call 'wxe_util':'call'
			  (1817, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canCopy',1}}] )
	    -| ['compiler_generated'] )
	end
'canCut'/1 =
    %% Line 144
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 145
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 147
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 146
		      call 'wxe_util':'call'
			  (1818, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canCut',1}}] )
	    -| ['compiler_generated'] )
	end
'canPaste'/1 =
    %% Line 152
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 153
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 155
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 154
		      call 'wxe_util':'call'
			  (1819, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canPaste',1}}] )
	    -| ['compiler_generated'] )
	end
'canRedo'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 163
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 162
		      call 'wxe_util':'call'
			  (1820, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canRedo',1}}] )
	    -| ['compiler_generated'] )
	end
'canUndo'/1 =
    %% Line 168
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 169
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 171
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 170
		      call 'wxe_util':'call'
			  (1821, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canUndo',1}}] )
	    -| ['compiler_generated'] )
	end
'clear'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 179
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 178
		      call 'wxe_util':'cast'
			  (1822, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clear',1}}] )
	    -| ['compiler_generated'] )
	end
'copy'/1 =
    %% Line 184
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 185
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 187
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 186
		      call 'wxe_util':'cast'
			  (1823, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'copy',1}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 193
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor8,_cor9,_cor10},Parent = {'wx_ref',_cor11,_cor12,_cor13},Id>
	      when %% Line 194
		call 'erlang':'is_integer'
		    (Id) ->
	      %% Line 195
	      apply 'create'/4
		  (This, Parent, Id, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/4 =
    %% Line 205
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor36},{'wx_ref',ParentRef,ParentT,_cor37},Id,Options>
	      when let <_cor4> =
		    %% Line 206
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor5> =
			%% Line 206
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 206
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 207
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 208
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 209
			  ( fun (_cor25,_cor24) ->
				case <_cor25,_cor24> of
				  <{'value',Value},Acc> when 'true' ->
				      let <Value_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Value|[0]])
				      in  let <_cor16> =
					      call 'erlang':'byte_size'
						  (Value_UC)
					  in  let <_cor11> =
						  call 'erlang':'byte_size'
						      (Value_UC)
					      in  let <_cor12> =
						      call 'erlang':'+'
							  (0, _cor11)
						  in  let <_cor13> =
							  call 'erlang':'band'
							      (_cor12, 7)
						      in  let <_cor14> =
							      call 'erlang':'-'
								  (8, _cor13)
							  in  let <_cor15> =
								  call 'erlang':'band'
								      (_cor14, 7)
							      in  let <_cor17> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor16>(32,1,'integer',['unsigned'|['native']]),
									#<Value_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor15,8,'integer',['unsigned'|['big']])}#
								  in  [_cor17|Acc]
				  %% Line 210
				  <{'pos',{PosX,PosY}},Acc> when 'true' ->
				      let <_cor18> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<PosX>(32,1,'integer',['unsigned'|['native']]),
					    #<PosY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor18|Acc]
				  %% Line 211
				  <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				      let <_cor19> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor19|Acc]
				  %% Line 212
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor20> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor20|Acc]
				  %% Line 213
				  <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor38}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (ValidatorT,
							   'wx') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call ValidatorT:'parent_class'
							('wx')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor23> =
					      #{#<5>(32,1,'integer',['unsigned'|['native']]),
						#<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor23|Acc]
				  %% Line 214
				  <BadOpt,_cor39> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/4-fun-0-'}}] )
		      in  let <_cor29> =
			      %% Line 215
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 215
				  call 'erlang':'list_to_binary'
				      (_cor29)
			      in  let <_cor31> =
				      %% Line 217
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
					#<Id>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 216
				      call 'wxe_util':'call'
					  (1824, _cor31)
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'cut'/1 =
    %% Line 222
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 223
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 225
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 224
		      call 'wxe_util':'cast'
			  (1825, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'cut',1}}] )
	    -| ['compiler_generated'] )
	end
'discardEdits'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 231
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 233
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 232
		      call 'wxe_util':'cast'
			  (1826, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'discardEdits',1}}] )
	    -| ['compiler_generated'] )
	end
'changeValue'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Value>
	      when %% Line 239
		call 'erlang':'is_list'
		    (Value) ->
	      do  %% Line 240
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Value_UC> =
		      %% Line 241
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor10> =
			  %% Line 243
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor5> =
			      %% Line 243
			      call 'erlang':'byte_size'
				  (Value_UC)
			  in  let <_cor6> =
				  %% Line 243
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 243
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 243
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 243
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 243
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 242
						  call 'wxe_util':'cast'
						      (1827, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'changeValue',2}}] )
	    -| ['compiler_generated'] )
	end
'emulateKeyPress'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',EventRef,EventT,_cor10}> when 'true' ->
	      do  %% Line 249
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 250
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (EventT,
				       'wxKeyEvent') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call EventT:'parent_class'
				    ('wxKeyEvent')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 252
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<EventRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 251
			  call 'wxe_util':'call'
			      (1828, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'emulateKeyPress',2}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultStyle'/1 =
    %% Line 257
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 258
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 260
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 259
		      call 'wxe_util':'call'
			  (1829, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'getInsertionPoint'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 266
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 268
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 267
		      call 'wxe_util':'call'
			  (1830, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getInsertionPoint',1}}] )
	    -| ['compiler_generated'] )
	end
'getLastPosition'/1 =
    %% Line 273
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 274
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 276
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 275
		      call 'wxe_util':'call'
			  (1831, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLastPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getLineLength'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},LineNo>
	      when %% Line 282
		call 'erlang':'is_integer'
		    (LineNo) ->
	      do  %% Line 283
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 285
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<LineNo>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 284
		      call 'wxe_util':'call'
			  (1832, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getLineLength',2}}] )
	    -| ['compiler_generated'] )
	end
'getLineText'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},LineNo>
	      when %% Line 291
		call 'erlang':'is_integer'
		    (LineNo) ->
	      do  %% Line 292
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 294
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<LineNo>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 293
		      call 'wxe_util':'call'
			  (1833, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getLineText',2}}] )
	    -| ['compiler_generated'] )
	end
'getNumberOfLines'/1 =
    %% Line 299
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 300
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 302
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 301
		      call 'wxe_util':'call'
			  (1834, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNumberOfLines',1}}] )
	    -| ['compiler_generated'] )
	end
'getRange'/3 =
    %% Line 307
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},From,To>
	      when let <_cor3> =
		    %% Line 308
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor4> =
			%% Line 308
			call 'erlang':'is_integer'
			    (To)
		    in  %% Line 308
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 309
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 311
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<From>(32,1,'integer',['unsigned'|['native']]),
			#<To>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 310
		      call 'wxe_util':'call'
			  (1835, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getRange',3}}] )
	    -| ['compiler_generated'] )
	end
'getSelection'/1 =
    %% Line 316
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 317
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 319
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 318
		      call 'wxe_util':'call'
			  (1836, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'getStringSelection'/1 =
    %% Line 324
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 325
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 327
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 326
		      call 'wxe_util':'call'
			  (1837, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStringSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'getStyle'/3 =
    %% Line 332
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Position,{'wx_ref',StyleRef,StyleT,_cor12}>
	      when %% Line 333
		call 'erlang':'is_integer'
		    (Position) ->
	      do  %% Line 334
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 335
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (StyleT,
				       'wxTextAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call StyleT:'parent_class'
				    ('wxTextAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 337
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Position>(32,1,'integer',['unsigned'|['native']]),
			    #<StyleRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 336
			  call 'wxe_util':'call'
			      (1838, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getStyle',3}}] )
	    -| ['compiler_generated'] )
	end
'getValue'/1 =
    %% Line 342
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 343
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 345
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 344
		      call 'wxe_util':'call'
			  (1839, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getValue',1}}] )
	    -| ['compiler_generated'] )
	end
'isEditable'/1 =
    %% Line 350
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 351
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 353
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 352
		      call 'wxe_util':'call'
			  (1840, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isEditable',1}}] )
	    -| ['compiler_generated'] )
	end
'isModified'/1 =
    %% Line 358
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 359
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 361
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 360
		      call 'wxe_util':'call'
			  (1841, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isModified',1}}] )
	    -| ['compiler_generated'] )
	end
'isMultiLine'/1 =
    %% Line 366
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 367
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 369
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 368
		      call 'wxe_util':'call'
			  (1842, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isMultiLine',1}}] )
	    -| ['compiler_generated'] )
	end
'isSingleLine'/1 =
    %% Line 374
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 375
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 377
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 376
		      call 'wxe_util':'call'
			  (1843, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isSingleLine',1}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/2 =
    %% Line 383
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},File>
	      when %% Line 384
		call 'erlang':'is_list'
		    (File) ->
	      %% Line 385
	      apply 'loadFile'/3
		  (This, File, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'loadFile',2}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/3 =
    %% Line 391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},File,Options>
	      when let <_cor3> =
		    %% Line 392
		    call 'erlang':'is_list'
			(File)
		in  let <_cor4> =
			%% Line 392
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 392
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 393
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <File_UC> =
		      %% Line 394
		      call 'unicode':'characters_to_binary'
			  ([File|[0]])
		  in  let <MOpts> =
			  %% Line 395
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'fileType',FileType},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<FileType>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 396
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-loadFile/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 397
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 397
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 399
				      call 'erlang':'byte_size'
					  (File_UC)
				  in  let <_cor16> =
					  %% Line 399
					  call 'erlang':'byte_size'
					      (File_UC)
				      in  let <_cor17> =
					      %% Line 399
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 399
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 399
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 399
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 399
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<File_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 398
							      call 'wxe_util':'call'
								  (1844, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'loadFile',3}}] )
	    -| ['compiler_generated'] )
	end
'markDirty'/1 =
    %% Line 404
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 405
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 407
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 406
		      call 'wxe_util':'cast'
			  (1845, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'markDirty',1}}] )
	    -| ['compiler_generated'] )
	end
'paste'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 413
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 415
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 414
		      call 'wxe_util':'cast'
			  (1846, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'paste',1}}] )
	    -| ['compiler_generated'] )
	end
'positionToXY'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 422
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 423
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 425
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 424
		      call 'wxe_util':'call'
			  (1847, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'positionToXY',2}}] )
	    -| ['compiler_generated'] )
	end
'redo'/1 =
    %% Line 430
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 431
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 433
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 432
		      call 'wxe_util':'cast'
			  (1848, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'redo',1}}] )
	    -| ['compiler_generated'] )
	end
'remove'/3 =
    %% Line 438
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},From,To>
	      when let <_cor3> =
		    %% Line 439
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor4> =
			%% Line 439
			call 'erlang':'is_integer'
			    (To)
		    in  %% Line 439
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 440
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 442
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<From>(32,1,'integer',['unsigned'|['native']]),
			#<To>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 441
		      call 'wxe_util':'cast'
			  (1849, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'remove',3}}] )
	    -| ['compiler_generated'] )
	end
'replace'/4 =
    %% Line 447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},From,To,Value>
	      when %% Line 448
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (From)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(To)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Value)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 449
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Value_UC> =
		      %% Line 450
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor16> =
			  %% Line 452
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor11> =
			      %% Line 452
			      call 'erlang':'byte_size'
				  (Value_UC)
			  in  let <_cor12> =
				  %% Line 452
				  call 'erlang':'+'
				      (0, _cor11)
			      in  let <_cor13> =
				      %% Line 452
				      call 'erlang':'band'
					  (_cor12, 7)
				  in  let <_cor14> =
					  %% Line 452
					  call 'erlang':'-'
					      (8, _cor13)
				      in  let <_cor15> =
					      %% Line 452
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor17> =
						  %% Line 452
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<From>(32,1,'integer',['unsigned'|['native']]),
						    #<To>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
						    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 451
						  call 'wxe_util':'cast'
						      (1850, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'replace',4}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/1 =
    %% Line 458
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 459
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 460
	      apply 'saveFile'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'saveFile',1}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/2 =
    %% Line 467
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Options>
	      when %% Line 468
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 469
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 470
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'file',File},Acc> when 'true' ->
				  let <File_UC> =
				      call 'unicode':'characters_to_binary'
					  ([File|[0]])
				  in  let <_cor10> =
					  call 'erlang':'byte_size'
					      (File_UC)
				      in  let <_cor5> =
					      call 'erlang':'byte_size'
						  (File_UC)
					  in  let <_cor6> =
						  call 'erlang':'+'
						      (0, _cor5)
					      in  let <_cor7> =
						      call 'erlang':'band'
							  (_cor6, 7)
						  in  let <_cor8> =
							  call 'erlang':'-'
							      (8, _cor7)
						      in  let <_cor9> =
							      call 'erlang':'band'
								  (_cor8, 7)
							  in  let <_cor11> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
								    #<File_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
							      in  [_cor11|Acc]
			      %% Line 471
			      <{'fileType',FileType},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<FileType>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 472
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-saveFile/2-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 473
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 473
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 475
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 474
				  call 'wxe_util':'call'
				      (1851, _cor20)
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'saveFile',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultStyle'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',StyleRef,StyleT,_cor10}> when 'true' ->
	      do  %% Line 481
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 482
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (StyleT,
				       'wxTextAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call StyleT:'parent_class'
				    ('wxTextAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 484
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<StyleRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 483
			  call 'wxe_util':'call'
			      (1852, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDefaultStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setEditable'/2 =
    %% Line 489
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Editable>
	      when %% Line 490
		call 'erlang':'is_boolean'
		    (Editable) ->
	      do  %% Line 491
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 493
		      call 'wxe_util':'from_bool'
			  (Editable)
		  in  let <_cor5> =
			  %% Line 493
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 492
			  call 'wxe_util':'cast'
			      (1853, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setEditable',2}}] )
	    -| ['compiler_generated'] )
	end
'setInsertionPoint'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 499
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 500
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 502
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 501
		      call 'wxe_util':'cast'
			  (1854, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setInsertionPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'setInsertionPointEnd'/1 =
    %% Line 507
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 508
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 510
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 509
		      call 'wxe_util':'cast'
			  (1855, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'setInsertionPointEnd',1}}] )
	    -| ['compiler_generated'] )
	end
'setMaxLength'/2 =
    %% Line 515
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Len>
	      when %% Line 516
		call 'erlang':'is_integer'
		    (Len) ->
	      do  %% Line 517
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 519
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Len>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 518
		      call 'wxe_util':'cast'
			  (1857, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setMaxLength',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelection'/3 =
    %% Line 524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},From,To>
	      when let <_cor3> =
		    %% Line 525
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor4> =
			%% Line 525
			call 'erlang':'is_integer'
			    (To)
		    in  %% Line 525
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 526
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 528
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<From>(32,1,'integer',['unsigned'|['native']]),
			#<To>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 527
		      call 'wxe_util':'cast'
			  (1858, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setSelection',3}}] )
	    -| ['compiler_generated'] )
	end
'setStyle'/4 =
    %% Line 533
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Start,End,{'wx_ref',StyleRef,StyleT,_cor16}>
	      when let <_cor4> =
		    %% Line 534
		    call 'erlang':'is_integer'
			(Start)
		in  let <_cor5> =
			%% Line 534
			call 'erlang':'is_integer'
			    (End)
		    in  %% Line 534
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 535
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 536
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (StyleT,
				       'wxTextAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call StyleT:'parent_class'
				    ('wxTextAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 538
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Start>(32,1,'integer',['unsigned'|['native']]),
			    #<End>(32,1,'integer',['unsigned'|['native']]),
			    #<StyleRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 537
			  call 'wxe_util':'call'
			      (1859, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setStyle',4}}] )
	    -| ['compiler_generated'] )
	end
'setValue'/2 =
    %% Line 543
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Value>
	      when %% Line 544
		call 'erlang':'is_list'
		    (Value) ->
	      do  %% Line 545
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Value_UC> =
		      %% Line 546
		      call 'unicode':'characters_to_binary'
			  ([Value|[0]])
		  in  let <_cor10> =
			  %% Line 548
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor5> =
			      %% Line 548
			      call 'erlang':'byte_size'
				  (Value_UC)
			  in  let <_cor6> =
				  %% Line 548
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 548
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 548
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 548
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 548
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 547
						  call 'wxe_util':'cast'
						      (1860, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setValue',2}}] )
	    -| ['compiler_generated'] )
	end
'showPosition'/2 =
    %% Line 553
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 554
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 555
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 557
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 556
		      call 'wxe_util':'cast'
			  (1861, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'showPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'undo'/1 =
    %% Line 562
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 563
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 565
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 564
		      call 'wxe_util':'cast'
			  (1862, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'undo',1}}] )
	    -| ['compiler_generated'] )
	end
'writeText'/2 =
    %% Line 570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 571
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 572
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 573
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 575
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 575
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 575
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 575
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 575
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 575
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 575
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 574
						  call 'wxe_util':'cast'
						      (1863, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'writeText',2}}] )
	    -| ['compiler_generated'] )
	end
'xYToPosition'/3 =
    %% Line 580
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 581
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 581
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 581
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 582
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 584
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 583
		      call 'wxe_util':'call'
			  (1864, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'xYToPosition',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 588
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 589
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxTextCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxTextCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 590
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 591
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 594
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 596
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 599
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 601
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 603
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 605
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 607
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 609
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 611
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 613
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 615
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 617
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 619
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 623
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 627
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 629
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 633
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 635
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 639
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 641
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 643
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 645
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 647
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 649
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 653
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 655
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 657
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 659
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 663
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 665
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 667
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 669
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 671
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 673
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 675
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 677
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 681
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 683
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 685
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 687
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 689
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 691
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 695
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 697
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 699
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 701
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 703
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 705
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 707
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 709
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 711
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 713
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 717
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 719
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 721
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 725
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 727
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 729
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 731
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 735
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 737
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 739
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 741
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 743
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 745
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 747
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 749
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 753
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 755
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 757
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 759
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 761
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 763
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 767
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 769
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 771
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 773
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 777
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 779
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 781
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 783
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 785
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 787
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 789
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 791
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 793
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 795
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 797
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 799
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 801
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 803
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 805
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 807
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 809
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 811
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 813
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 815
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 817
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 819
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 821
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 823
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 825
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 827
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 829
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 831
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 835
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 837
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 839
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 841
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 843
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 845
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 847
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 849
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 851
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 853
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 855
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 857
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 859
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 861
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 863
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 865
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 867
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 869
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 871
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 873
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 875
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 877
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 879
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 881
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 883
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 885
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 887
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 889
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 891
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 893
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 895
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 897
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 899
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 905
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 907
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 909
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 911
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 915
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 917
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 919
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 921
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 923
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 925
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 927
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 929
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 931
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 933
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 935
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 937
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 939
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 941
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 943
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 946
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 948
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 950
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 952
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 954
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxTextCtrl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxTextCtrl', _cor0)
end