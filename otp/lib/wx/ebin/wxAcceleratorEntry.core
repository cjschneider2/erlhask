module 'wxAcceleratorEntry' ['destroy'/1,
			     'getCommand'/1,
			     'getFlags'/1,
			     'getKeyCode'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'new'/0,
			     'new'/1,
			     'parent_class'/1,
			     'set'/4,
			     'set'/5]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxAcceleratorEntry',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxAcceleratorEntry',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'new',0},[{'type',38,'fun',[{'type',38,'product',[]}|[{'type',38,'wxAcceleratorEntry',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'new',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'type',48,'list',[{'var',48,'Option'}]}]}|[{'type',48,'wxAcceleratorEntry',[]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Option'}|[{'type',49,'union',[{'type',49,'tuple',[{'atom',49,'flags'}|[{'type',49,'integer',[]}]]}|[{'type',50,'tuple',[{'atom',50,'keyCode'}|[{'type',50,'integer',[]}]]}|[{'type',51,'tuple',[{'atom',51,'cmd'}|[{'type',51,'integer',[]}]]}|[{'type',52,'tuple',[{'atom',52,'item'}|[{'remote_type',52,[{'atom',52,'wxMenuItem'}|[{'atom',52,'wxMenuItem'}|[[]]]]}]]}]]]]}]]]]}]]]}|[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Entry'}]}|[{'type',53,'wxAcceleratorEntry',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Entry'}|[{'type',54,'wxAcceleratorEntry',[]}]]]]}]]]}]]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'getCommand',1},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'This'}]}|[{'type',71,'integer',[]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'This'}|[{'type',72,'wxAcceleratorEntry',[]}]]]]}]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'getFlags',1},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'This'}]}|[{'type',79,'integer',[]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'This'}|[{'type',80,'wxAcceleratorEntry',[]}]]]]}]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'getKeyCode',1},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'This'}]}|[{'type',87,'integer',[]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'This'}|[{'type',88,'wxAcceleratorEntry',[]}]]]]}]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'set',4},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'This'}|[{'var',95,'Flags'}|[{'var',95,'KeyCode'}|[{'var',95,'Cmd'}]]]]}|[{'atom',95,'ok'}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'This'}|[{'type',96,'wxAcceleratorEntry',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Flags'}|[{'type',96,'integer',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'KeyCode'}|[{'type',96,'integer',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Cmd'}|[{'type',96,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'set',5},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'This'}|[{'var',103,'Flags'}|[{'var',103,'KeyCode'}|[{'var',103,'Cmd'}|[{'type',103,'list',[{'var',103,'Option'}]}]]]]]}|[{'atom',103,'ok'}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'This'}|[{'type',104,'wxAcceleratorEntry',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Flags'}|[{'type',104,'integer',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'KeyCode'}|[{'type',104,'integer',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Cmd'}|[{'type',104,'integer',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Option'}|[{'type',105,'tuple',[{'atom',105,'item'}|[{'remote_type',105,[{'atom',105,'wxMenuItem'}|[{'atom',105,'wxMenuItem'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'destroy',1},[{'type',116,'fun',[{'type',116,'product',[{'ann_type',116,[{'var',116,'This'}|[{'type',116,'wxAcceleratorEntry',[]}]]}]}|[{'atom',116,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxAcceleratorEntry'})
'new'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 56
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 57
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <{'flags',Flags},Acc> when 'true' ->
			      let <_cor1> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Flags>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor1|Acc]
			  %% Line 58
			  <{'keyCode',KeyCode},Acc> when 'true' ->
			      let <_cor2> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<KeyCode>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor2|Acc]
			  %% Line 59
			  <{'cmd',Cmd},Acc> when 'true' ->
			      let <_cor3> =
				  #{#<3>(32,1,'integer',['unsigned'|['native']]),
				    #<Cmd>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor3|Acc]
			  %% Line 60
			  <{'item',{'wx_ref',ItemRef,ItemT,_cor19}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (ItemT,
						   'wxMenuItem') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call ItemT:'parent_class'
						('wxMenuItem')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor6> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			  %% Line 61
			  <BadOpt,_cor20> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor12> =
		      %% Line 62
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 62
			  call 'erlang':'list_to_binary'
			      (_cor12)
		      in  let <_cor14> =
			      %% Line 64
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 63
			      call 'wxe_util':'construct'
				  (1217, _cor14)
	  %% Line 65
	  <{'wx_ref',EntryRef,EntryT,_cor21}> when 'true' ->
	      do  %% Line 66
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (EntryT,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call EntryT:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor17> =
		      %% Line 68
		      #{#<EntryRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 67
		      call 'wxe_util':'construct'
			  (1218, _cor17)
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'getCommand'/1 =
    %% Line 73
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 74
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 76
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 75
		      call 'wxe_util':'call'
			  (1219, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCommand',1}}] )
	    -| ['compiler_generated'] )
	end
'getFlags'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 82
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 84
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 83
		      call 'wxe_util':'call'
			  (1220, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFlags',1}}] )
	    -| ['compiler_generated'] )
	end
'getKeyCode'/1 =
    %% Line 89
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 90
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 92
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 91
		      call 'wxe_util':'call'
			  (1221, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getKeyCode',1}}] )
	    -| ['compiler_generated'] )
	end
'set'/4 =
    %% Line 98
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Flags,KeyCode,Cmd>
	      when %% Line 99
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Flags)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (KeyCode)
			  in  let <_cor6> =
				  call 'erlang':'is_integer'
				      (Cmd)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 100
	      apply 'set'/5
		  (This, Flags, KeyCode, Cmd, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'set',4}}] )
	    -| ['compiler_generated'] )
	end
'set'/5 =
    %% Line 106
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},Flags,KeyCode,Cmd,Options>
	      when %% Line 107
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Flags)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(KeyCode)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Cmd)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 108
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 109
		      ( fun (_cor17,_cor16) ->
			    case <_cor17,_cor16> of
			      <{'item',{'wx_ref',ItemRef,ItemT,_cor30}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ItemT,
						       'wxMenuItem') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ItemT:'parent_class'
						    ('wxMenuItem')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor15> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor15|Acc]
			      %% Line 110
			      <BadOpt,_cor31> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-set/5-fun-0-'}}] )
		  in  let <_cor21> =
			  %% Line 111
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 111
			      call 'erlang':'list_to_binary'
				  (_cor21)
			  in  let <_cor23> =
				  %% Line 113
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Flags>(32,1,'integer',['unsigned'|['native']]),
				    #<KeyCode>(32,1,'integer',['unsigned'|['native']]),
				    #<Cmd>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 112
				  call 'wxe_util':'cast'
				      (1222, _cor23)
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'set',5}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 117
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 118
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxAcceleratorEntry') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxAcceleratorEntry')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 119
		      call 'wxe_util':'destroy'
			  (1223, Obj)
		      %% Line 120
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxAcceleratorEntry')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxAcceleratorEntry', _cor0)
end