module 'wxGraphicsContext' ['clip'/2,
			    'clip'/5,
			    'concatTransform'/2,
			    'create'/0,
			    'create'/1,
			    'createBrush'/2,
			    'createFont'/2,
			    'createFont'/3,
			    'createLinearGradientBrush'/7,
			    'createMatrix'/1,
			    'createMatrix'/2,
			    'createPath'/1,
			    'createPen'/2,
			    'createRadialGradientBrush'/8,
			    'destroy'/1,
			    'drawBitmap'/6,
			    'drawEllipse'/5,
			    'drawIcon'/6,
			    'drawLines'/2,
			    'drawLines'/3,
			    'drawPath'/2,
			    'drawPath'/3,
			    'drawRectangle'/5,
			    'drawRoundedRectangle'/6,
			    'drawText'/4,
			    'drawText'/5,
			    'drawText'/6,
			    'fillPath'/2,
			    'fillPath'/3,
			    'getPartialTextExtents'/2,
			    'getRenderer'/1,
			    'getTextExtent'/2,
			    'getTransform'/1,
			    'isNull'/1,
			    'module_info'/0,
			    'module_info'/1,
			    'parent_class'/1,
			    'resetClip'/1,
			    'rotate'/2,
			    'scale'/3,
			    'setBrush'/2,
			    'setFont'/2,
			    'setFont'/3,
			    'setPen'/2,
			    'setTransform'/2,
			    'strokeLine'/5,
			    'strokeLines'/2,
			    'strokePath'/2,
			    'translate'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 42
		'export_type' =
		    %% Line 42
		    [{'wxGraphicsContext',0}],
		%% Line 43
		'deprecated' =
		    %% Line 43
		    [{'createLinearGradientBrush',7}|[{'createRadialGradientBrush',8}]],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'wxGraphicsContext',{'remote_type',49,[{'atom',49,'wx'}|[{'atom',49,'wx_object'}|[[]]]]},[]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'create',0},[{'type',51,'fun',[{'type',51,'product',[]}|[{'type',51,'wxGraphicsContext',[]}]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'create',1},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Dc'}]}|[{'type',57,'wxGraphicsContext',[]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Dc'}|[{'type',58,'union',[{'remote_type',58,[{'atom',58,'wxWindowDC'}|[{'atom',58,'wxWindowDC'}|[[]]]]}|[{'remote_type',58,[{'atom',58,'wxWindow'}|[{'atom',58,'wxWindow'}|[[]]]]}]]}]]]]}]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'createPen',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'This'}|[{'var',70,'Pen'}]]}|[{'remote_type',70,[{'atom',70,'wxGraphicsPen'}|[{'atom',70,'wxGraphicsPen'}|[[]]]]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'This'}|[{'type',71,'wxGraphicsContext',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Pen'}|[{'remote_type',71,[{'atom',71,'wxPen'}|[{'atom',71,'wxPen'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'createBrush',2},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'This'}|[{'var',79,'Brush'}]]}|[{'remote_type',79,[{'atom',79,'wxGraphicsBrush'}|[{'atom',79,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'This'}|[{'type',80,'wxGraphicsContext',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Brush'}|[{'remote_type',80,[{'atom',80,'wxBrush'}|[{'atom',80,'wxBrush'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'createRadialGradientBrush',8},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'This'}|[{'var',88,'Xo'}|[{'var',88,'Yo'}|[{'var',88,'Xc'}|[{'var',88,'Yc'}|[{'var',88,'Radius'}|[{'var',88,'OColor'}|[{'var',88,'CColor'}]]]]]]]]}|[{'remote_type',88,[{'atom',88,'wxGraphicsBrush'}|[{'atom',88,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'This'}|[{'type',89,'wxGraphicsContext',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Xo'}|[{'type',89,'number',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Yo'}|[{'type',89,'number',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Xc'}|[{'type',89,'number',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Yc'}|[{'type',89,'number',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Radius'}|[{'type',89,'number',[]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'OColor'}|[{'remote_type',89,[{'atom',89,'wx'}|[{'atom',89,'wx_colour'}|[[]]]]}]]]]}|[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'CColor'}|[{'remote_type',89,[{'atom',89,'wx'}|[{'atom',89,'wx_colour'}|[[]]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'createLinearGradientBrush',7},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'This'}|[{'var',97,'X1'}|[{'var',97,'Y1'}|[{'var',97,'X2'}|[{'var',97,'Y2'}|[{'var',97,'C1'}|[{'var',97,'C2'}]]]]]]]}|[{'remote_type',97,[{'atom',97,'wxGraphicsBrush'}|[{'atom',97,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'This'}|[{'type',98,'wxGraphicsContext',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'X1'}|[{'type',98,'number',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Y1'}|[{'type',98,'number',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'X2'}|[{'type',98,'number',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Y2'}|[{'type',98,'number',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'C1'}|[{'remote_type',98,[{'atom',98,'wx'}|[{'atom',98,'wx_colour'}|[[]]]]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'C2'}|[{'remote_type',98,[{'atom',98,'wx'}|[{'atom',98,'wx_colour'}|[[]]]]}]]]]}]]]]]]]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'createFont',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'This'}|[{'var',106,'Font'}]]}|[{'remote_type',106,[{'atom',106,'wxGraphicsFont'}|[{'atom',106,'wxGraphicsFont'}|[[]]]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'This'}|[{'type',107,'wxGraphicsContext',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Font'}|[{'remote_type',107,[{'atom',107,'wxFont'}|[{'atom',107,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'createFont',3},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'This'}|[{'var',114,'Font'}|[{'type',114,'list',[{'var',114,'Option'}]}]]]}|[{'remote_type',114,[{'atom',114,'wxGraphicsFont'}|[{'atom',114,'wxGraphicsFont'}|[[]]]]}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'This'}|[{'type',115,'wxGraphicsContext',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Font'}|[{'remote_type',115,[{'atom',115,'wxFont'}|[{'atom',115,'wxFont'}|[[]]]]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Option'}|[{'type',116,'tuple',[{'atom',116,'col'}|[{'remote_type',116,[{'atom',116,'wx'}|[{'atom',116,'wx_colour'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'createMatrix',1},[{'type',128,'bounded_fun',[{'type',128,'fun',[{'type',128,'product',[{'var',128,'This'}]}|[{'remote_type',128,[{'atom',128,'wxGraphicsMatrix'}|[{'atom',128,'wxGraphicsMatrix'}|[[]]]]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'This'}|[{'type',129,'wxGraphicsContext',[]}]]]]}]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'createMatrix',2},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}|[{'type',136,'list',[{'var',136,'Option'}]}]]}|[{'remote_type',136,[{'atom',136,'wxGraphicsMatrix'}|[{'atom',136,'wxGraphicsMatrix'}|[[]]]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxGraphicsContext',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Option'}|[{'type',138,'union',[{'type',138,'tuple',[{'atom',138,'a'}|[{'type',138,'number',[]}]]}|[{'type',139,'tuple',[{'atom',139,'b'}|[{'type',139,'number',[]}]]}|[{'type',140,'tuple',[{'atom',140,'c'}|[{'type',140,'number',[]}]]}|[{'type',141,'tuple',[{'atom',141,'d'}|[{'type',141,'number',[]}]]}|[{'type',142,'tuple',[{'atom',142,'tx'}|[{'type',142,'number',[]}]]}|[{'type',143,'tuple',[{'atom',143,'ty'}|[{'type',143,'number',[]}]]}]]]]]]}]]]]}]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'createPath',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'This'}]}|[{'remote_type',159,[{'atom',159,'wxGraphicsPath'}|[{'atom',159,'wxGraphicsPath'}|[[]]]]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'This'}|[{'type',160,'wxGraphicsContext',[]}]]]]}]]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'clip',2},[{'type',167,'bounded_fun',[{'type',167,'fun',[{'type',167,'product',[{'var',167,'This'}|[{'var',167,'Region'}]]}|[{'atom',167,'ok'}]]}|[[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'This'}|[{'type',168,'wxGraphicsContext',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Region'}|[{'remote_type',168,[{'atom',168,'wxRegion'}|[{'atom',168,'wxRegion'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'clip',5},[{'type',176,'bounded_fun',[{'type',176,'fun',[{'type',176,'product',[{'var',176,'This'}|[{'var',176,'X'}|[{'var',176,'Y'}|[{'var',176,'W'}|[{'var',176,'H'}]]]]]}|[{'atom',176,'ok'}]]}|[[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'This'}|[{'type',177,'wxGraphicsContext',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'X'}|[{'type',177,'number',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Y'}|[{'type',177,'number',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'W'}|[{'type',177,'number',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'H'}|[{'type',177,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'resetClip',1},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'This'}]}|[{'atom',185,'ok'}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'This'}|[{'type',186,'wxGraphicsContext',[]}]]]]}]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'drawBitmap',6},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'This'}|[{'var',193,'Bmp'}|[{'var',193,'X'}|[{'var',193,'Y'}|[{'var',193,'W'}|[{'var',193,'H'}]]]]]]}|[{'atom',193,'ok'}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'This'}|[{'type',194,'wxGraphicsContext',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Bmp'}|[{'remote_type',194,[{'atom',194,'wxBitmap'}|[{'atom',194,'wxBitmap'}|[[]]]]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'X'}|[{'type',194,'number',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Y'}|[{'type',194,'number',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'W'}|[{'type',194,'number',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'H'}|[{'type',194,'number',[]}]]]]}]]]]]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'drawEllipse',5},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}|[{'var',203,'X'}|[{'var',203,'Y'}|[{'var',203,'W'}|[{'var',203,'H'}]]]]]}|[{'atom',203,'ok'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxGraphicsContext',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'X'}|[{'type',204,'number',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Y'}|[{'type',204,'number',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'W'}|[{'type',204,'number',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'H'}|[{'type',204,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'drawIcon',6},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'This'}|[{'var',212,'Icon'}|[{'var',212,'X'}|[{'var',212,'Y'}|[{'var',212,'W'}|[{'var',212,'H'}]]]]]]}|[{'atom',212,'ok'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'This'}|[{'type',213,'wxGraphicsContext',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Icon'}|[{'remote_type',213,[{'atom',213,'wxIcon'}|[{'atom',213,'wxIcon'}|[[]]]]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'X'}|[{'type',213,'number',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Y'}|[{'type',213,'number',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'W'}|[{'type',213,'number',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'H'}|[{'type',213,'number',[]}]]]]}]]]]]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'drawLines',2},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'This'}|[{'var',222,'Points'}]]}|[{'atom',222,'ok'}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'This'}|[{'type',223,'wxGraphicsContext',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Points'}|[{'type',223,'list',[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'X'}|[{'type',223,'float',[]}]]}|[{'ann_type',223,[{'var',223,'Y'}|[{'type',223,'float',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'drawLines',3},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'This'}|[{'var',231,'Points'}|[{'type',231,'list',[{'var',231,'Option'}]}]]]}|[{'atom',231,'ok'}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'This'}|[{'type',232,'wxGraphicsContext',[]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Points'}|[{'type',232,'list',[{'type',232,'tuple',[{'ann_type',232,[{'var',232,'X'}|[{'type',232,'float',[]}]]}|[{'ann_type',232,[{'var',232,'Y'}|[{'type',232,'float',[]}]]}]]}]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Option'}|[{'type',233,'tuple',[{'atom',233,'fillStyle'}|[{'remote_type',233,[{'atom',233,'wx'}|[{'atom',233,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'drawPath',2},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'This'}|[{'var',245,'Path'}]]}|[{'atom',245,'ok'}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'This'}|[{'type',246,'wxGraphicsContext',[]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Path'}|[{'remote_type',246,[{'atom',246,'wxGraphicsPath'}|[{'atom',246,'wxGraphicsPath'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'drawPath',3},[{'type',254,'bounded_fun',[{'type',254,'fun',[{'type',254,'product',[{'var',254,'This'}|[{'var',254,'Path'}|[{'type',254,'list',[{'var',254,'Option'}]}]]]}|[{'atom',254,'ok'}]]}|[[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'This'}|[{'type',255,'wxGraphicsContext',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Path'}|[{'remote_type',255,[{'atom',255,'wxGraphicsPath'}|[{'atom',255,'wxGraphicsPath'}|[[]]]]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Option'}|[{'type',256,'tuple',[{'atom',256,'fillStyle'}|[{'remote_type',256,[{'atom',256,'wx'}|[{'atom',256,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'drawRectangle',5},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'This'}|[{'var',268,'X'}|[{'var',268,'Y'}|[{'var',268,'W'}|[{'var',268,'H'}]]]]]}|[{'atom',268,'ok'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'This'}|[{'type',269,'wxGraphicsContext',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'X'}|[{'type',269,'number',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Y'}|[{'type',269,'number',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'W'}|[{'type',269,'number',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'H'}|[{'type',269,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'drawRoundedRectangle',6},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'This'}|[{'var',277,'X'}|[{'var',277,'Y'}|[{'var',277,'W'}|[{'var',277,'H'}|[{'var',277,'Radius'}]]]]]]}|[{'atom',277,'ok'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'This'}|[{'type',278,'wxGraphicsContext',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'X'}|[{'type',278,'number',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Y'}|[{'type',278,'number',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'W'}|[{'type',278,'number',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'H'}|[{'type',278,'number',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Radius'}|[{'type',278,'number',[]}]]]]}]]]]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'drawText',4},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'This'}|[{'var',286,'Str'}|[{'var',286,'X'}|[{'var',286,'Y'}]]]]}|[{'atom',286,'ok'}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'This'}|[{'type',287,'wxGraphicsContext',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Str'}|[{'remote_type',287,[{'atom',287,'unicode'}|[{'atom',287,'chardata'}|[[]]]]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'X'}|[{'type',287,'number',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Y'}|[{'type',287,'number',[]}]]]]}]]]]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'drawText',5},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'This'}|[{'var',300,'Str'}|[{'var',300,'X'}|[{'var',300,'Y'}|[{'var',300,'Angle'}]]]]]}|[{'atom',300,'ok'}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'This'}|[{'type',301,'wxGraphicsContext',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Str'}|[{'remote_type',301,[{'atom',301,'unicode'}|[{'atom',301,'chardata'}|[[]]]]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'X'}|[{'type',301,'number',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Y'}|[{'type',301,'number',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Angle'}|[{'type',301,'number',[]}]]]]}]]]]]]]}|[{'type',302,'bounded_fun',[{'type',302,'fun',[{'type',302,'product',[{'var',302,'This'}|[{'var',302,'Str'}|[{'var',302,'X'}|[{'var',302,'Y'}|[{'var',302,'BackgroundBrush'}]]]]]}|[{'atom',302,'ok'}]]}|[[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'This'}|[{'type',303,'wxGraphicsContext',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Str'}|[{'remote_type',303,[{'atom',303,'unicode'}|[{'atom',303,'chardata'}|[[]]]]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'X'}|[{'type',303,'number',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'Y'}|[{'type',303,'number',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'BackgroundBrush'}|[{'remote_type',303,[{'atom',303,'wxGraphicsBrush'}|[{'atom',303,'wxGraphicsBrush'}|[[]]]]}]]]]}]]]]]]]}]]}],
		%% Line 319
		'spec' =
		    %% Line 319
		    [{{'drawText',6},[{'type',319,'bounded_fun',[{'type',319,'fun',[{'type',319,'product',[{'var',319,'This'}|[{'var',319,'Str'}|[{'var',319,'X'}|[{'var',319,'Y'}|[{'var',319,'Angle'}|[{'var',319,'BackgroundBrush'}]]]]]]}|[{'atom',319,'ok'}]]}|[[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'This'}|[{'type',320,'wxGraphicsContext',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Str'}|[{'remote_type',320,[{'atom',320,'unicode'}|[{'atom',320,'chardata'}|[[]]]]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'X'}|[{'type',320,'number',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Y'}|[{'type',320,'number',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Angle'}|[{'type',320,'number',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'BackgroundBrush'}|[{'remote_type',320,[{'atom',320,'wxGraphicsBrush'}|[{'atom',320,'wxGraphicsBrush'}|[[]]]]}]]]]}]]]]]]]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'fillPath',2},[{'type',330,'bounded_fun',[{'type',330,'fun',[{'type',330,'product',[{'var',330,'This'}|[{'var',330,'Path'}]]}|[{'atom',330,'ok'}]]}|[[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'This'}|[{'type',331,'wxGraphicsContext',[]}]]]]}|[{'type',331,'constraint',[{'atom',331,'is_subtype'}|[[{'var',331,'Path'}|[{'remote_type',331,[{'atom',331,'wxGraphicsPath'}|[{'atom',331,'wxGraphicsPath'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 339
		'spec' =
		    %% Line 339
		    [{{'fillPath',3},[{'type',339,'bounded_fun',[{'type',339,'fun',[{'type',339,'product',[{'var',339,'This'}|[{'var',339,'Path'}|[{'type',339,'list',[{'var',339,'Option'}]}]]]}|[{'atom',339,'ok'}]]}|[[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'This'}|[{'type',340,'wxGraphicsContext',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Path'}|[{'remote_type',340,[{'atom',340,'wxGraphicsPath'}|[{'atom',340,'wxGraphicsPath'}|[[]]]]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Option'}|[{'type',341,'tuple',[{'atom',341,'fillStyle'}|[{'remote_type',341,[{'atom',341,'wx'}|[{'atom',341,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 353
		'spec' =
		    %% Line 353
		    [{{'strokePath',2},[{'type',353,'bounded_fun',[{'type',353,'fun',[{'type',353,'product',[{'var',353,'This'}|[{'var',353,'Path'}]]}|[{'atom',353,'ok'}]]}|[[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'This'}|[{'type',354,'wxGraphicsContext',[]}]]]]}|[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'Path'}|[{'remote_type',354,[{'atom',354,'wxGraphicsPath'}|[{'atom',354,'wxGraphicsPath'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'getPartialTextExtents',2},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'This'}|[{'var',362,'Text'}]]}|[{'type',362,'list',[{'type',362,'number',[]}]}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'This'}|[{'type',363,'wxGraphicsContext',[]}]]]]}|[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Text'}|[{'remote_type',363,[{'atom',363,'unicode'}|[{'atom',363,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'getTextExtent',2},[{'type',372,'bounded_fun',[{'type',372,'fun',[{'type',372,'product',[{'var',372,'This'}|[{'var',372,'Text'}]]}|[{'var',372,'Result'}]]}|[[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Result'}|[{'type',373,'tuple',[{'ann_type',373,[{'var',373,'Width'}|[{'type',373,'number',[]}]]}|[{'ann_type',373,[{'var',373,'Height'}|[{'type',373,'number',[]}]]}|[{'ann_type',373,[{'var',373,'Descent'}|[{'type',373,'number',[]}]]}|[{'ann_type',373,[{'var',373,'ExternalLeading'}|[{'type',373,'number',[]}]]}]]]]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'This'}|[{'type',374,'wxGraphicsContext',[]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Text'}|[{'remote_type',374,[{'atom',374,'unicode'}|[{'atom',374,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 383
		'spec' =
		    %% Line 383
		    [{{'rotate',2},[{'type',383,'bounded_fun',[{'type',383,'fun',[{'type',383,'product',[{'var',383,'This'}|[{'var',383,'Angle'}]]}|[{'atom',383,'ok'}]]}|[[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'This'}|[{'type',384,'wxGraphicsContext',[]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'Angle'}|[{'type',384,'number',[]}]]]]}]]]]}]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'scale',3},[{'type',392,'bounded_fun',[{'type',392,'fun',[{'type',392,'product',[{'var',392,'This'}|[{'var',392,'XScale'}|[{'var',392,'YScale'}]]]}|[{'atom',392,'ok'}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'This'}|[{'type',393,'wxGraphicsContext',[]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'XScale'}|[{'type',393,'number',[]}]]]]}|[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'YScale'}|[{'type',393,'number',[]}]]]]}]]]]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'translate',3},[{'type',401,'bounded_fun',[{'type',401,'fun',[{'type',401,'product',[{'var',401,'This'}|[{'var',401,'Dx'}|[{'var',401,'Dy'}]]]}|[{'atom',401,'ok'}]]}|[[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'This'}|[{'type',402,'wxGraphicsContext',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Dx'}|[{'type',402,'number',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Dy'}|[{'type',402,'number',[]}]]]]}]]]]]}]}],
		%% Line 410
		'spec' =
		    %% Line 410
		    [{{'getTransform',1},[{'type',410,'bounded_fun',[{'type',410,'fun',[{'type',410,'product',[{'var',410,'This'}]}|[{'remote_type',410,[{'atom',410,'wxGraphicsMatrix'}|[{'atom',410,'wxGraphicsMatrix'}|[[]]]]}]]}|[[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'This'}|[{'type',411,'wxGraphicsContext',[]}]]]]}]]]}]}],
		%% Line 418
		'spec' =
		    %% Line 418
		    [{{'setTransform',2},[{'type',418,'bounded_fun',[{'type',418,'fun',[{'type',418,'product',[{'var',418,'This'}|[{'var',418,'Matrix'}]]}|[{'atom',418,'ok'}]]}|[[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'This'}|[{'type',419,'wxGraphicsContext',[]}]]]]}|[{'type',419,'constraint',[{'atom',419,'is_subtype'}|[[{'var',419,'Matrix'}|[{'remote_type',419,[{'atom',419,'wxGraphicsMatrix'}|[{'atom',419,'wxGraphicsMatrix'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'concatTransform',2},[{'type',427,'bounded_fun',[{'type',427,'fun',[{'type',427,'product',[{'var',427,'This'}|[{'var',427,'Matrix'}]]}|[{'atom',427,'ok'}]]}|[[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'This'}|[{'type',428,'wxGraphicsContext',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Matrix'}|[{'remote_type',428,[{'atom',428,'wxGraphicsMatrix'}|[{'atom',428,'wxGraphicsMatrix'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 436
		'spec' =
		    %% Line 436
		    [{{'setBrush',2},[{'type',436,'bounded_fun',[{'type',436,'fun',[{'type',436,'product',[{'var',436,'This'}|[{'var',436,'Brush'}]]}|[{'atom',436,'ok'}]]}|[[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'This'}|[{'type',437,'wxGraphicsContext',[]}]]]]}|[{'type',437,'constraint',[{'atom',437,'is_subtype'}|[[{'var',437,'Brush'}|[{'type',437,'union',[{'remote_type',437,[{'atom',437,'wxGraphicsBrush'}|[{'atom',437,'wxGraphicsBrush'}|[[]]]]}|[{'remote_type',437,[{'atom',437,'wxBrush'}|[{'atom',437,'wxBrush'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 450
		'spec' =
		    %% Line 450
		    [{{'setFont',2},[{'type',450,'bounded_fun',[{'type',450,'fun',[{'type',450,'product',[{'var',450,'This'}|[{'var',450,'Font'}]]}|[{'atom',450,'ok'}]]}|[[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'This'}|[{'type',451,'wxGraphicsContext',[]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Font'}|[{'remote_type',451,[{'atom',451,'wxGraphicsFont'}|[{'atom',451,'wxGraphicsFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 459
		'spec' =
		    %% Line 459
		    [{{'setFont',3},[{'type',459,'bounded_fun',[{'type',459,'fun',[{'type',459,'product',[{'var',459,'This'}|[{'var',459,'Font'}|[{'var',459,'Colour'}]]]}|[{'atom',459,'ok'}]]}|[[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'This'}|[{'type',460,'wxGraphicsContext',[]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Font'}|[{'remote_type',460,[{'atom',460,'wxFont'}|[{'atom',460,'wxFont'}|[[]]]]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Colour'}|[{'remote_type',460,[{'atom',460,'wx'}|[{'atom',460,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 469
		'spec' =
		    %% Line 469
		    [{{'setPen',2},[{'type',469,'bounded_fun',[{'type',469,'fun',[{'type',469,'product',[{'var',469,'This'}|[{'var',469,'Pen'}]]}|[{'atom',469,'ok'}]]}|[[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'This'}|[{'type',470,'wxGraphicsContext',[]}]]]]}|[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'Pen'}|[{'type',470,'union',[{'remote_type',470,[{'atom',470,'wxPen'}|[{'atom',470,'wxPen'}|[[]]]]}|[{'remote_type',470,[{'atom',470,'wxGraphicsPen'}|[{'atom',470,'wxGraphicsPen'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 483
		'spec' =
		    %% Line 483
		    [{{'strokeLine',5},[{'type',483,'bounded_fun',[{'type',483,'fun',[{'type',483,'product',[{'var',483,'This'}|[{'var',483,'X1'}|[{'var',483,'Y1'}|[{'var',483,'X2'}|[{'var',483,'Y2'}]]]]]}|[{'atom',483,'ok'}]]}|[[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'This'}|[{'type',484,'wxGraphicsContext',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'X1'}|[{'type',484,'number',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Y1'}|[{'type',484,'number',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'X2'}|[{'type',484,'number',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Y2'}|[{'type',484,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 492
		'spec' =
		    %% Line 492
		    [{{'strokeLines',2},[{'type',492,'bounded_fun',[{'type',492,'fun',[{'type',492,'product',[{'var',492,'This'}|[{'var',492,'Points'}]]}|[{'atom',492,'ok'}]]}|[[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'This'}|[{'type',493,'wxGraphicsContext',[]}]]]]}|[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'Points'}|[{'type',493,'list',[{'type',493,'tuple',[{'ann_type',493,[{'var',493,'X'}|[{'type',493,'float',[]}]]}|[{'ann_type',493,[{'var',493,'Y'}|[{'type',493,'float',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 502
		'spec' =
		    %% Line 502
		    [{{'destroy',1},[{'type',502,'fun',[{'type',502,'product',[{'ann_type',502,[{'var',502,'This'}|[{'type',502,'wxGraphicsContext',[]}]]}]}|[{'atom',502,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <'wxGraphicsObject'> when 'true' ->
	      'true'
	  %% Line 47
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGraphicsContext'})
	end
'create'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	call 'wxe_util':'call'
	    (762, %% Line 54
		  #{}#)
'create'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',DcRef,DcT,_cor15}> when 'true' ->
	      let <_cor7> =
		  %% Line 60
		  try
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DcT,
				       'wxWindowDC') ->
				'true'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DcT:'parent_class'
				    ('wxWindowDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      'false'
	      in  let <_cor11> =
		      %% Line 60
		      case _cor7 of
			%% Line 61
			<'true'> when 'true' ->
			    %% Line 62
			    760
			%% Line 63
			<_cor19> when 'true' ->
			    do  ( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(DcT,
						 'wxWindow') ->
					  'ok'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  call DcT:'parent_class'
					      ('wxWindow')
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
				%% Line 64
				761
		      end
		  in  let <_cor13> =
			  %% Line 67
			  #{#<DcRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 66
			  call 'wxe_util':'call'
			      (_cor11, _cor13)
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'create',1}}] )
	    -| ['compiler_generated'] )
	end
'createPen'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PenRef,PenT,_cor10}> when 'true' ->
	      do  %% Line 73
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 74
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PenT,
				       'wxPen') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PenT:'parent_class'
				    ('wxPen')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 76
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PenRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 75
			  call 'wxe_util':'call'
			      (763, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'createPen',2}}] )
	    -| ['compiler_generated'] )
	end
'createBrush'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BrushRef,BrushT,_cor10}> when 'true' ->
	      do  %% Line 82
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 83
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BrushT,
				       'wxBrush') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BrushT:'parent_class'
				    ('wxBrush')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 85
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BrushRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 84
			  call 'wxe_util':'call'
			      (764, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'createBrush',2}}] )
	    -| ['compiler_generated'] )
	end
'createRadialGradientBrush'/8 =
    %% Line 90
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor41},Xo,Yo,Xc,Yc,Radius,OColor,CColor>
	      when let <_cor19> =
		    %% Line 91
		    try
			let <_cor8> =
			    call 'erlang':'is_number'
				(Xo)
			in  let <_cor9> =
				call 'erlang':'is_number'
				    (Yo)
			    in  let <_cor10> =
				    call 'erlang':'is_number'
					(Xc)
				in  let <_cor11> =
					call 'erlang':'is_number'
					    (Yc)
				    in  let <_cor12> =
					    call 'erlang':'is_number'
						(Radius)
					in  let <_cor13> =
						call 'erlang':'tuple_size'
						    (OColor)
					    in  let <_cor14> =
						    call 'erlang':'=:='
							(_cor13, 3)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor12, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor11, _cor15)
							in  let <_cor17> =
								call 'erlang':'and'
								    (_cor10, _cor16)
							    in  let <_cor18> =
								    call 'erlang':'and'
									(_cor9, _cor17)
								in  call 'erlang':'and'
									(_cor8, _cor18)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor24> =
			%% Line 91
			try
			    let <_cor20> =
				call 'erlang':'tuple_size'
				    (OColor)
			    in  let <_cor21> =
				    call 'erlang':'=:='
					(_cor20, 4)
				in  let <_cor22> =
					call 'erlang':'tuple_size'
					    (CColor)
				    in  let <_cor23> =
					    call 'erlang':'=:='
						(_cor22, 3)
					in  call 'erlang':'and'
						(_cor21, _cor23)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor26> =
			    %% Line 91
			    try
				let <_cor25> =
				    call 'erlang':'tuple_size'
					(CColor)
				in  call 'erlang':'=:='
					(_cor25, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor27> =
				%% Line 91
				call 'erlang':'or'
				    (_cor24, _cor26)
			    in  %% Line 91
				call 'erlang':'or'
				    (_cor19, _cor27) ->
	      do  %% Line 92
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor31> =
		      %% Line 94
		      call 'wxe_util':'colour_bin'
			  (OColor)
		  in  let <_cor30> =
			  %% Line 94
			  call 'wxe_util':'colour_bin'
			      (CColor)
		      in  let <_cor32> =
			      %% Line 94
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<Xo>(64,1,'float',['unsigned'|['native']]),
				#<Yo>(64,1,'float',['unsigned'|['native']]),
				#<Xc>(64,1,'float',['unsigned'|['native']]),
				#<Yc>(64,1,'float',['unsigned'|['native']]),
				#<Radius>(64,1,'float',['unsigned'|['native']]),
				#<_cor31>(16,8,'binary',['unsigned'|['big']]),
				#<_cor30>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 93
			      call 'wxe_util':'call'
				  (765, _cor32)
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'createRadialGradientBrush',8}}] )
	    -| ['compiler_generated'] )
	end
'createLinearGradientBrush'/7 =
    %% Line 99
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},X1,Y1,X2,Y2,C1,C2>
	      when let <_cor16> =
		    %% Line 100
		    try
			let <_cor7> =
			    call 'erlang':'is_number'
				(X1)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (Y1)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(X2)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (Y2)
				    in  let <_cor11> =
					    call 'erlang':'tuple_size'
						(C1)
					in  let <_cor12> =
						call 'erlang':'=:='
						    (_cor11, 3)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor10, _cor12)
						in  let <_cor14> =
							call 'erlang':'and'
							    (_cor9, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'and'
								(_cor8, _cor14)
							in  call 'erlang':'and'
								(_cor7, _cor15)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor21> =
			%% Line 100
			try
			    let <_cor17> =
				call 'erlang':'tuple_size'
				    (C1)
			    in  let <_cor18> =
				    call 'erlang':'=:='
					(_cor17, 4)
				in  let <_cor19> =
					call 'erlang':'tuple_size'
					    (C2)
				    in  let <_cor20> =
					    call 'erlang':'=:='
						(_cor19, 3)
					in  call 'erlang':'and'
						(_cor18, _cor20)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor23> =
			    %% Line 100
			    try
				let <_cor22> =
				    call 'erlang':'tuple_size'
					(C2)
				in  call 'erlang':'=:='
					(_cor22, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor24> =
				%% Line 100
				call 'erlang':'or'
				    (_cor21, _cor23)
			    in  %% Line 100
				call 'erlang':'or'
				    (_cor16, _cor24) ->
	      do  %% Line 101
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor28> =
		      %% Line 103
		      call 'wxe_util':'colour_bin'
			  (C1)
		  in  let <_cor27> =
			  %% Line 103
			  call 'wxe_util':'colour_bin'
			      (C2)
		      in  let <_cor29> =
			      %% Line 103
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<X1>(64,1,'float',['unsigned'|['native']]),
				#<Y1>(64,1,'float',['unsigned'|['native']]),
				#<X2>(64,1,'float',['unsigned'|['native']]),
				#<Y2>(64,1,'float',['unsigned'|['native']]),
				#<_cor28>(16,8,'binary',['unsigned'|['big']]),
				#<_cor27>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 102
			      call 'wxe_util':'call'
				  (766, _cor29)
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'createLinearGradientBrush',7}}] )
	    -| ['compiler_generated'] )
	end
'createFont'/2 =
    %% Line 109
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Font = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 111
	      apply 'createFont'/3
		  (This, Font, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'createFont',2}}] )
	    -| ['compiler_generated'] )
	end
'createFont'/3 =
    %% Line 117
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',FontRef,FontT,_cor21},Options>
	      when %% Line 118
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 119
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 120
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 121
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'col',Col},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'colour_bin'
					      (Col)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(16,8,'binary',['unsigned'|['big']]),
						#<0>(32,1,'integer',['unsigned'|['big']])}#
					  in  [_cor8|Acc]
				  %% Line 122
				  <BadOpt,_cor22> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-createFont/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 123
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 123
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 125
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FontRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 124
				      call 'wxe_util':'call'
					  (767, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'createFont',3}}] )
	    -| ['compiler_generated'] )
	end
'createMatrix'/1 =
    %% Line 131
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 132
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 133
	      apply 'createMatrix'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'createMatrix',1}}] )
	    -| ['compiler_generated'] )
	end
'createMatrix'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Options>
	      when %% Line 145
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 146
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 147
		      ( fun (_cor11,_cor10) ->
			    case <_cor11,_cor10> of
			      <{'a',A},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<A>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 148
			      <{'b',B},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<B>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 149
			      <{'c',C},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<C>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			      %% Line 150
			      <{'d',D},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<D>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 151
			      <{'tx',Tx},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<5>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Tx>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 152
			      <{'ty',Ty},Acc> when 'true' ->
				  let <_cor9> =
				      #{#<6>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Ty>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor9|Acc]
			      %% Line 153
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-createMatrix/2-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 154
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 154
			      call 'erlang':'list_to_binary'
				  (_cor15)
			  in  let <_cor17> =
				  %% Line 156
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 155
				  call 'wxe_util':'call'
				      (768, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'createMatrix',2}}] )
	    -| ['compiler_generated'] )
	end
'createPath'/1 =
    %% Line 161
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 162
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 164
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 163
		      call 'wxe_util':'call'
			  (769, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'createPath',1}}] )
	    -| ['compiler_generated'] )
	end
'clip'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',RegionRef,RegionT,_cor10}> when 'true' ->
	      do  %% Line 170
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 171
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RegionT,
				       'wxRegion') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RegionT:'parent_class'
				    ('wxRegion')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 173
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RegionRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 172
			  call 'wxe_util':'cast'
			      (770, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'clip',2}}] )
	    -| ['compiler_generated'] )
	end
'clip'/5 =
    %% Line 178
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 179
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 180
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 182
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 181
		      call 'wxe_util':'cast'
			  (771, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'clip',5}}] )
	    -| ['compiler_generated'] )
	end
'resetClip'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 188
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 190
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 189
		      call 'wxe_util':'cast'
			  (772, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'resetClip',1}}] )
	    -| ['compiler_generated'] )
	end
'drawBitmap'/6 =
    %% Line 195
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',BmpRef,BmpT,_cor24},X,Y,W,H>
	      when %% Line 196
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 197
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 198
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor16> =
			  %% Line 200
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BmpRef>(32,1,'integer',['unsigned'|['native']]),
			    #<X>(64,1,'float',['unsigned'|['native']]),
			    #<Y>(64,1,'float',['unsigned'|['native']]),
			    #<W>(64,1,'float',['unsigned'|['native']]),
			    #<H>(64,1,'float',['unsigned'|['native']])}#
		      in  %% Line 199
			  call 'wxe_util':'cast'
			      (773, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'drawBitmap',6}}] )
	    -| ['compiler_generated'] )
	end
'drawEllipse'/5 =
    %% Line 205
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 206
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 207
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 209
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 208
		      call 'wxe_util':'cast'
			  (774, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'drawEllipse',5}}] )
	    -| ['compiler_generated'] )
	end
'drawIcon'/6 =
    %% Line 214
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',IconRef,IconT,_cor24},X,Y,W,H>
	      when %% Line 215
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 216
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 217
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (IconT,
				       'wxIcon') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call IconT:'parent_class'
				    ('wxIcon')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor16> =
			  %% Line 219
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<IconRef>(32,1,'integer',['unsigned'|['native']]),
			    #<X>(64,1,'float',['unsigned'|['native']]),
			    #<Y>(64,1,'float',['unsigned'|['native']]),
			    #<W>(64,1,'float',['unsigned'|['native']]),
			    #<H>(64,1,'float',['unsigned'|['native']])}#
		      in  %% Line 218
			  call 'wxe_util':'cast'
			      (775, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'drawIcon',6}}] )
	    -| ['compiler_generated'] )
	end
'drawLines'/2 =
    %% Line 225
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Points>
	      when %% Line 226
		call 'erlang':'is_list'
		    (Points) ->
	      %% Line 227
	      apply 'drawLines'/3
		  (This, Points, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'drawLines',2}}] )
	    -| ['compiler_generated'] )
	end
'drawLines'/3 =
    %% Line 234
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Points,Options>
	      when let <_cor3> =
		    %% Line 235
		    call 'erlang':'is_list'
			(Points)
		in  let <_cor4> =
			%% Line 235
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 235
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 237
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'fillStyle',FillStyle},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 238
			      <BadOpt,_cor27> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-drawLines/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 239
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 239
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor21> =
				  %% Line 241
				  call 'erlang':'length'
				      (Points)
			      in  let <_cor15> =
				      primop 'bs_init_writable'
					  (256)
				  in  let <_cor20> =
					  %% Line 242
					  ( letrec
						'lbc$^0'/2 =
						    fun (_cor19,_cor18) ->
							case <_cor19,_cor18> of
							  <[{X,Y}|_cor17],_cor18> when 'true' ->
							      let <_cor18> =
								  ( #{#<_cor18>('all',1,'binary',[]),
								      #<X>(64,1,'float',['unsigned'|['native']]),
								      #<Y>(64,1,'float',['unsigned'|['native']])}#
								    -| ['compiler_generated','single_use'] )
							      in  apply 'lbc$^0'/2
								      (_cor17, _cor18)
							  ( <[_cor16|_cor17],_cor18> when 'true' ->
								apply 'lbc$^0'/2
								    (_cor17, _cor18)
							    -| ['compiler_generated'] )
							  <[],_cor18> when 'true' ->
							      _cor18
							  ( <_cor19,_cor18> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor19,_cor18})
								  -| [{'function_name',{'lbc$^0',2}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lbc$^0'/2
						    (Points, _cor15)
					    -| ['list_comprehension'] )
				      in  let <_cor22> =
					      %% Line 241
					      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						#<_cor21>(32,1,'integer',['unsigned'|['native']]),
						#<_cor20>(%% Line 242
							  'all',8,'binary',['unsigned'|['big']]),
						#<%% Line 242
						  BinOpt>(%% Line 242
							  'all',8,'binary',['unsigned'|['big']])}#
					  in  %% Line 240
					      call 'wxe_util':'cast'
						  (776, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'drawLines',3}}] )
	    -| ['compiler_generated'] )
	end
'drawPath'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Path = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 250
	      apply 'drawPath'/3
		  (This, Path, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'drawPath',2}}] )
	    -| ['compiler_generated'] )
	end
'drawPath'/3 =
    %% Line 257
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',PathRef,PathT,_cor20},Options>
	      when %% Line 258
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 259
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 260
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PathT,
				       'wxGraphicsPath') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PathT:'parent_class'
				    ('wxGraphicsPath')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 261
			  ( fun (_cor9,_cor8) ->
				case <_cor9,_cor8> of
				  <{'fillStyle',FillStyle},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 262
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-drawPath/3-fun-0-'}}] )
		      in  let <_cor13> =
			      %% Line 263
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 263
				  call 'erlang':'list_to_binary'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 265
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<PathRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 264
				      call 'wxe_util':'cast'
					  (777, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'drawPath',3}}] )
	    -| ['compiler_generated'] )
	end
'drawRectangle'/5 =
    %% Line 270
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 271
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 272
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 274
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 273
		      call 'wxe_util':'cast'
			  (778, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'drawRectangle',5}}] )
	    -| ['compiler_generated'] )
	end
'drawRoundedRectangle'/6 =
    %% Line 279
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,W,H,Radius>
	      when %% Line 280
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (Radius)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 281
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 283
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']]),
			#<Radius>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 282
		      call 'wxe_util':'cast'
			  (779, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'drawRoundedRectangle',6}}] )
	    -| ['compiler_generated'] )
	end
'drawText'/4 =
    %% Line 288
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},Str,X,Y>
	      when %% Line 289
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor5> =
			    call 'erlang':'is_number'
				(X)
			in  let <_cor6> =
				call 'erlang':'is_number'
				    (Y)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 290
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 291
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  let <_cor16> =
			  %% Line 293
			  call 'erlang':'byte_size'
			      (Str_UC)
		      in  let <_cor11> =
			      %% Line 293
			      call 'erlang':'byte_size'
				  (Str_UC)
			  in  let <_cor12> =
				  %% Line 293
				  call 'erlang':'+'
				      (0, _cor11)
			      in  let <_cor13> =
				      %% Line 293
				      call 'erlang':'band'
					  (_cor12, 7)
				  in  let <_cor14> =
					  %% Line 293
					  call 'erlang':'-'
					      (8, _cor13)
				      in  let <_cor15> =
					      %% Line 293
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor17> =
						  %% Line 293
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
						    #<Str_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor15,8,'integer',['unsigned'|['big']]),
						    #<X>(64,1,'float',['unsigned'|['native']]),
						    #<Y>(64,1,'float',['unsigned'|['native']])}#
					      in  %% Line 292
						  call 'wxe_util':'cast'
						      (780, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'drawText',4}}] )
	    -| ['compiler_generated'] )
	end
'drawText'/5 =
    %% Line 304
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor42},Str,X,Y,Angle>
	      when %% Line 305
		try
		    let <_cor5> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(X)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (Y)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(Angle)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 306
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 307
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  let <_cor19> =
			  %% Line 309
			  call 'erlang':'byte_size'
			      (Str_UC)
		      in  let <_cor14> =
			      %% Line 309
			      call 'erlang':'byte_size'
				  (Str_UC)
			  in  let <_cor15> =
				  %% Line 309
				  call 'erlang':'+'
				      (0, _cor14)
			      in  let <_cor16> =
				      %% Line 309
				      call 'erlang':'band'
					  (_cor15, 7)
				  in  let <_cor17> =
					  %% Line 309
					  call 'erlang':'-'
					      (8, _cor16)
				      in  let <_cor18> =
					      %% Line 309
					      call 'erlang':'band'
						  (_cor17, 7)
					  in  let <_cor20> =
						  %% Line 309
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor19>(32,1,'integer',['unsigned'|['native']]),
						    #<Str_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor18,8,'integer',['unsigned'|['big']]),
						    #<X>(64,1,'float',['unsigned'|['native']]),
						    #<Y>(64,1,'float',['unsigned'|['native']]),
						    #<Angle>(64,1,'float',['unsigned'|['native']])}#
					      in  %% Line 308
						  call 'wxe_util':'cast'
						      (781, _cor20)
	  %% Line 310
	  <{'wx_ref',ThisRef,ThisT,_cor43},Str,X,Y,{'wx_ref',BackgroundBrushRef,BackgroundBrushT,_cor44}>
	      when %% Line 311
		try
		    let <_cor21> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor22> =
			    call 'erlang':'is_number'
				(X)
			in  let <_cor23> =
				call 'erlang':'is_number'
				    (Y)
			    in  let <_cor24> =
				    call 'erlang':'and'
					(_cor22, _cor23)
				in  call 'erlang':'and'
					(_cor21, _cor24)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 312
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 313
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  do  %% Line 314
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BackgroundBrushT,
					   'wxGraphicsBrush') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BackgroundBrushT:'parent_class'
					('wxGraphicsBrush')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_cor35> =
			      %% Line 316
			      call 'erlang':'byte_size'
				  (Str_UC)
			  in  let <_cor30> =
				  %% Line 316
				  call 'erlang':'byte_size'
				      (Str_UC)
			      in  let <_cor31> =
				      %% Line 316
				      call 'erlang':'+'
					  (0, _cor30)
				  in  let <_cor32> =
					  %% Line 316
					  call 'erlang':'band'
					      (_cor31, 7)
				      in  let <_cor33> =
					      %% Line 316
					      call 'erlang':'-'
						  (8, _cor32)
					  in  let <_cor34> =
						  %% Line 316
						  call 'erlang':'band'
						      (_cor33, 7)
					      in  let <_cor36> =
						      %% Line 316
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor35>(32,1,'integer',['unsigned'|['native']]),
							#<Str_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor34,8,'integer',['unsigned'|['big']]),
							#<X>(64,1,'float',['unsigned'|['native']]),
							#<Y>(64,1,'float',['unsigned'|['native']]),
							#<BackgroundBrushRef>(32,1,'integer',['unsigned'|['native']])}#
						  in  %% Line 315
						      call 'wxe_util':'cast'
							  (782, _cor36)
	  ( <_cor41,_cor40,_cor39,_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39,_cor38,_cor37})
		  -| [{'function_name',{'drawText',5}}] )
	    -| ['compiler_generated'] )
	end
'drawText'/6 =
    %% Line 321
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor30},Str,X,Y,Angle,{'wx_ref',BackgroundBrushRef,BackgroundBrushT,_cor31}>
	      when %% Line 322
		try
		    let <_cor6> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(X)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (Y)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(Angle)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 323
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Str_UC> =
		      %% Line 324
		      call 'unicode':'characters_to_binary'
			  ([Str|[0]])
		  in  do  %% Line 325
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BackgroundBrushT,
					   'wxGraphicsBrush') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BackgroundBrushT:'parent_class'
					('wxGraphicsBrush')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <_cor22> =
			      %% Line 327
			      call 'erlang':'byte_size'
				  (Str_UC)
			  in  let <_cor17> =
				  %% Line 327
				  call 'erlang':'byte_size'
				      (Str_UC)
			      in  let <_cor18> =
				      %% Line 327
				      call 'erlang':'+'
					  (0, _cor17)
				  in  let <_cor19> =
					  %% Line 327
					  call 'erlang':'band'
					      (_cor18, 7)
				      in  let <_cor20> =
					      %% Line 327
					      call 'erlang':'-'
						  (8, _cor19)
					  in  let <_cor21> =
						  %% Line 327
						  call 'erlang':'band'
						      (_cor20, 7)
					      in  let <_cor23> =
						      %% Line 327
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor22>(32,1,'integer',['unsigned'|['native']]),
							#<Str_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor21,8,'integer',['unsigned'|['big']]),
							#<X>(64,1,'float',['unsigned'|['native']]),
							#<Y>(64,1,'float',['unsigned'|['native']]),
							#<Angle>(64,1,'float',['unsigned'|['native']]),
							#<BackgroundBrushRef>(32,1,'integer',['unsigned'|['native']])}#
						  in  %% Line 326
						      call 'wxe_util':'cast'
							  (783, _cor23)
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'drawText',6}}] )
	    -| ['compiler_generated'] )
	end
'fillPath'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Path = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 335
	      apply 'fillPath'/3
		  (This, Path, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fillPath',2}}] )
	    -| ['compiler_generated'] )
	end
'fillPath'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',PathRef,PathT,_cor20},Options>
	      when %% Line 343
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 344
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 345
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PathT,
				       'wxGraphicsPath') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PathT:'parent_class'
				    ('wxGraphicsPath')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 346
			  ( fun (_cor9,_cor8) ->
				case <_cor9,_cor8> of
				  <{'fillStyle',FillStyle},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 347
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-fillPath/3-fun-0-'}}] )
		      in  let <_cor13> =
			      %% Line 348
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 348
				  call 'erlang':'list_to_binary'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 350
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<PathRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 349
				      call 'wxe_util':'cast'
					  (784, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'fillPath',3}}] )
	    -| ['compiler_generated'] )
	end
'strokePath'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PathRef,PathT,_cor10}> when 'true' ->
	      do  %% Line 356
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 357
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PathT,
				       'wxGraphicsPath') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PathT:'parent_class'
				    ('wxGraphicsPath')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 359
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PathRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 358
			  call 'wxe_util':'cast'
			      (785, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'strokePath',2}}] )
	    -| ['compiler_generated'] )
	end
'getPartialTextExtents'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 365
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 366
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 367
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 369
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 369
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 369
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 369
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 369
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 369
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 369
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 368
						  call 'wxe_util':'call'
						      (786, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getPartialTextExtents',2}}] )
	    -| ['compiler_generated'] )
	end
'getTextExtent'/2 =
    %% Line 375
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 376
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 377
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 378
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 380
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 380
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 380
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 380
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 380
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 380
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 380
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 379
						  call 'wxe_util':'call'
						      (787, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getTextExtent',2}}] )
	    -| ['compiler_generated'] )
	end
'rotate'/2 =
    %% Line 385
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Angle>
	      when %% Line 386
		call 'erlang':'is_number'
		    (Angle) ->
	      do  %% Line 387
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 389
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Angle>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 388
		      call 'wxe_util':'cast'
			  (788, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'rotate',2}}] )
	    -| ['compiler_generated'] )
	end
'scale'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},XScale,YScale>
	      when let <_cor3> =
		    %% Line 395
		    call 'erlang':'is_number'
			(XScale)
		in  let <_cor4> =
			%% Line 395
			call 'erlang':'is_number'
			    (YScale)
		    in  %% Line 395
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 396
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 398
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<XScale>(64,1,'float',['unsigned'|['native']]),
			#<YScale>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 397
		      call 'wxe_util':'cast'
			  (789, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'scale',3}}] )
	    -| ['compiler_generated'] )
	end
'translate'/3 =
    %% Line 403
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Dx,Dy>
	      when let <_cor3> =
		    %% Line 404
		    call 'erlang':'is_number'
			(Dx)
		in  let <_cor4> =
			%% Line 404
			call 'erlang':'is_number'
			    (Dy)
		    in  %% Line 404
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 405
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 407
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Dx>(64,1,'float',['unsigned'|['native']]),
			#<Dy>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 406
		      call 'wxe_util':'cast'
			  (790, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'translate',3}}] )
	    -| ['compiler_generated'] )
	end
'getTransform'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 413
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 415
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 414
		      call 'wxe_util':'call'
			  (791, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTransform',1}}] )
	    -| ['compiler_generated'] )
	end
'setTransform'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',MatrixRef,MatrixT,_cor10}> when 'true' ->
	      do  %% Line 421
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 422
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MatrixT,
				       'wxGraphicsMatrix') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MatrixT:'parent_class'
				    ('wxGraphicsMatrix')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 424
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MatrixRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 423
			  call 'wxe_util':'cast'
			      (792, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setTransform',2}}] )
	    -| ['compiler_generated'] )
	end
'concatTransform'/2 =
    %% Line 429
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',MatrixRef,MatrixT,_cor10}> when 'true' ->
	      do  %% Line 430
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 431
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MatrixT,
				       'wxGraphicsMatrix') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MatrixT:'parent_class'
				    ('wxGraphicsMatrix')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 433
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MatrixRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 432
			  call 'wxe_util':'cast'
			      (793, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'concatTransform',2}}] )
	    -| ['compiler_generated'] )
	end
'setBrush'/2 =
    %% Line 438
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',BrushRef,BrushT,_cor20}> when 'true' ->
	      do  %% Line 439
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 440
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (BrushT,
					   'wxGraphicsBrush') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call BrushT:'parent_class'
					('wxGraphicsBrush')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 440
			  case _cor10 of
			    %% Line 441
			    <'true'> when 'true' ->
				%% Line 442
				794
			    %% Line 443
			    <_cor24> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (BrushT,
						     'wxBrush') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call BrushT:'parent_class'
						  ('wxBrush')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 444
				    795
			  end
		      in  let <_cor16> =
			      %% Line 447
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<BrushRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 446
			      call 'wxe_util':'cast'
				  (_cor14, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'setBrush',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 452
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 453
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 454
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxGraphicsFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxGraphicsFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 456
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 455
			  call 'wxe_util':'cast'
			      (796, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/3 =
    %% Line 461
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},{'wx_ref',FontRef,FontT,_cor17},Colour>
	      when let <_cor4> =
		    %% Line 462
		    try
			let <_cor3> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor3, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor6> =
			%% Line 462
			try
			    let <_cor5> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor5, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 462
			call 'erlang':'or'
			    (_cor4, _cor6) ->
	      do  %% Line 463
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 464
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor11> =
			  %% Line 466
			  call 'wxe_util':'colour_bin'
			      (Colour)
		      in  let <_cor12> =
			      %% Line 466
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<FontRef>(32,1,'integer',['unsigned'|['native']]),
				#<_cor11>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 465
			      call 'wxe_util':'cast'
				  (797, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setFont',3}}] )
	    -| ['compiler_generated'] )
	end
'setPen'/2 =
    %% Line 471
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',PenRef,PenT,_cor20}> when 'true' ->
	      do  %% Line 472
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 473
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (PenT,
					   'wxPen') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call PenT:'parent_class'
					('wxPen')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 473
			  case _cor10 of
			    %% Line 474
			    <'true'> when 'true' ->
				%% Line 475
				799
			    %% Line 476
			    <_cor24> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (PenT,
						     'wxGraphicsPen') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call PenT:'parent_class'
						  ('wxGraphicsPen')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 477
				    798
			  end
		      in  let <_cor16> =
			      %% Line 480
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<PenRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 479
			      call 'wxe_util':'cast'
				  (_cor14, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'setPen',2}}] )
	    -| ['compiler_generated'] )
	end
'strokeLine'/5 =
    %% Line 485
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X1,Y1,X2,Y2>
	      when %% Line 486
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X1)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y1)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (X2)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(Y2)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 487
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 489
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X1>(64,1,'float',['unsigned'|['native']]),
			#<Y1>(64,1,'float',['unsigned'|['native']]),
			#<X2>(64,1,'float',['unsigned'|['native']]),
			#<Y2>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 488
		      call 'wxe_util':'cast'
			  (800, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'strokeLine',5}}] )
	    -| ['compiler_generated'] )
	end
'strokeLines'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Points>
	      when %% Line 495
		call 'erlang':'is_list'
		    (Points) ->
	      do  %% Line 496
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 498
		      call 'erlang':'length'
			  (Points)
		  in  let <_cor4> =
			  primop 'bs_init_writable'
			      (256)
		      in  let <_cor9> =
			      %% Line 499
			      ( letrec
				    'lbc$^0'/2 =
					fun (_cor8,_cor7) ->
					    case <_cor8,_cor7> of
					      <[{X,Y}|_cor6],_cor7> when 'true' ->
						  let <_cor7> =
						      ( #{#<_cor7>('all',1,'binary',[]),
							  #<X>(64,1,'float',['unsigned'|['native']]),
							  #<Y>(64,1,'float',['unsigned'|['native']])}#
							-| ['compiler_generated','single_use'] )
						  in  apply 'lbc$^0'/2
							  (_cor6, _cor7)
					      ( <[_cor5|_cor6],_cor7> when 'true' ->
						    apply 'lbc$^0'/2
							(_cor6, _cor7)
						-| ['compiler_generated'] )
					      <[],_cor7> when 'true' ->
						  _cor7
					      ( <_cor8,_cor7> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor8,_cor7})
						      -| [{'function_name',{'lbc$^0',2}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lbc$^0'/2
					(Points, _cor4)
				-| ['list_comprehension'] )
			  in  let <_cor11> =
				  %% Line 498
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
				    #<_cor9>(%% Line 499
					     'all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 497
				  call 'wxe_util':'cast'
				      (801, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'strokeLines',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 503
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 504
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGraphicsContext') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGraphicsContext')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 505
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 506
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'isNull'/1 =
    %% Line 509
    fun (_cor0) ->
	call 'wxGraphicsObject':'isNull'
	    (_cor0)
'getRenderer'/1 =
    %% Line 511
    fun (_cor0) ->
	call 'wxGraphicsObject':'getRenderer'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsContext')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsContext', _cor0)
end