module 'wxPen' ['destroy'/1,
		'getCap'/1,
		'getColour'/1,
		'getJoin'/1,
		'getStyle'/1,
		'getWidth'/1,
		'isOk'/1,
		'module_info'/0,
		'module_info'/1,
		'new'/0,
		'new'/1,
		'new'/2,
		'parent_class'/1,
		'setCap'/2,
		'setColour'/2,
		'setColour'/4,
		'setJoin'/2,
		'setStyle'/2,
		'setWidth'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 34
		'export_type' =
		    %% Line 34
		    [{'wxPen',0}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxPen',{'remote_type',38,[{'atom',38,'wx'}|[{'atom',38,'wx_object'}|[[]]]]},[]}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'new',0},[{'type',40,'fun',[{'type',40,'product',[]}|[{'type',40,'wxPen',[]}]]}]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'new',1},[{'type',46,'bounded_fun',[{'type',46,'fun',[{'type',46,'product',[{'var',46,'Colour'}]}|[{'type',46,'wxPen',[]}]]}|[[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Colour'}|[{'remote_type',47,[{'atom',47,'wx'}|[{'atom',47,'wx_colour'}|[[]]]]}]]]]}]]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'new',2},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Colour'}|[{'type',54,'list',[{'var',54,'Option'}]}]]}|[{'type',54,'wxPen',[]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Colour'}|[{'remote_type',55,[{'atom',55,'wx'}|[{'atom',55,'wx_colour'}|[[]]]]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Option'}|[{'type',56,'union',[{'type',56,'tuple',[{'atom',56,'width'}|[{'type',56,'integer',[]}]]}|[{'type',57,'tuple',[{'atom',57,'style'}|[{'type',57,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'getCap',1},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'This'}]}|[{'type',68,'integer',[]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'This'}|[{'type',69,'wxPen',[]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'getColour',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'This'}]}|[{'remote_type',76,[{'atom',76,'wx'}|[{'atom',76,'wx_colour4'}|[[]]]]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'This'}|[{'type',77,'wxPen',[]}]]]]}]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'getJoin',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'This'}]}|[{'type',84,'integer',[]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'This'}|[{'type',85,'wxPen',[]}]]]]}]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'getStyle',1},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'This'}]}|[{'type',92,'integer',[]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'This'}|[{'type',93,'wxPen',[]}]]]]}]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'getWidth',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'This'}]}|[{'type',100,'integer',[]}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'This'}|[{'type',101,'wxPen',[]}]]]]}]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'isOk',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}]}|[{'type',108,'boolean',[]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxPen',[]}]]]]}]]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'setCap',2},[{'type',117,'bounded_fun',[{'type',117,'fun',[{'type',117,'product',[{'var',117,'This'}|[{'var',117,'CapStyle'}]]}|[{'atom',117,'ok'}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'This'}|[{'type',118,'wxPen',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'CapStyle'}|[{'remote_type',118,[{'atom',118,'wx'}|[{'atom',118,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'setColour',2},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'This'}|[{'var',126,'Colour'}]]}|[{'atom',126,'ok'}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'This'}|[{'type',127,'wxPen',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Colour'}|[{'remote_type',127,[{'atom',127,'wx'}|[{'atom',127,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'setColour',4},[{'type',135,'bounded_fun',[{'type',135,'fun',[{'type',135,'product',[{'var',135,'This'}|[{'var',135,'Red'}|[{'var',135,'Green'}|[{'var',135,'Blue'}]]]]}|[{'atom',135,'ok'}]]}|[[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'This'}|[{'type',136,'wxPen',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Red'}|[{'type',136,'integer',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Green'}|[{'type',136,'integer',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Blue'}|[{'type',136,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'setJoin',2},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}|[{'var',145,'JoinStyle'}]]}|[{'atom',145,'ok'}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxPen',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'JoinStyle'}|[{'remote_type',146,[{'atom',146,'wx'}|[{'atom',146,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'setStyle',2},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}|[{'var',154,'Style'}]]}|[{'atom',154,'ok'}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxPen',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Style'}|[{'type',155,'integer',[]}]]]]}]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'setWidth',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}|[{'var',163,'Width'}]]}|[{'atom',163,'ok'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxPen',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Width'}|[{'type',164,'integer',[]}]]]]}]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'destroy',1},[{'type',172,'fun',[{'type',172,'product',[{'ann_type',172,[{'var',172,'This'}|[{'type',172,'wxPen',[]}]]}]}|[{'atom',172,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 36
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxPen'})
'new'/0 =
    %% Line 41
    fun () ->
	%% Line 42
	call 'wxe_util':'construct'
	    (1166, %% Line 43
		   #{}#)
'new'/1 =
    %% Line 49
    fun (_cor0) ->
	case _cor0 of
	  <Colour>
	      when let <_cor2> =
		    %% Line 50
		    try
			let <_cor1> =
			    call 'erlang':'tuple_size'
				(_cor0)
			in  call 'erlang':'=:='
				(_cor1, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor4> =
			%% Line 50
			try
			    let <_cor3> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  call 'erlang':'=:='
				    (_cor3, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 50
			call 'erlang':'or'
			    (_cor2, _cor4) ->
	      %% Line 51
	      apply 'new'/2
		  (Colour, [])
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Colour,Options>
	      when let <_cor3> =
		    %% Line 59
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor7> =
			%% Line 59
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 4)
				in  let <_cor6> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor5, _cor6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 59
			call 'erlang':'or'
			    (_cor3, _cor7) ->
	      let <MOpts> =
		  %% Line 60
		  ( fun (_cor11,_cor10) ->
			case <_cor11,_cor10> of
			  <{'width',Width},Acc> when 'true' ->
			      let <_cor8> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor8|Acc]
			  %% Line 61
			  <{'style',Style},Acc> when 'true' ->
			      let <_cor9> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<Style>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor9|Acc]
			  %% Line 62
			  <BadOpt,_cor21> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor15> =
		      %% Line 63
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 63
			  call 'erlang':'list_to_binary'
			      (_cor15)
		      in  let <_cor17> =
			      %% Line 65
			      call 'wxe_util':'colour_bin'
				  (Colour)
			  in  let <_cor18> =
				  %% Line 65
				  #{#<_cor17>(16,8,'binary',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 64
				  call 'wxe_util':'construct'
				      (1167, _cor18)
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'getCap'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 71
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 73
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 72
		      call 'wxe_util':'call'
			  (1169, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCap',1}}] )
	    -| ['compiler_generated'] )
	end
'getColour'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 79
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 81
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 80
		      call 'wxe_util':'call'
			  (1170, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getJoin'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 87
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 89
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 88
		      call 'wxe_util':'call'
			  (1171, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getJoin',1}}] )
	    -| ['compiler_generated'] )
	end
'getStyle'/1 =
    %% Line 94
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 95
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 97
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 96
		      call 'wxe_util':'call'
			  (1172, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'getWidth'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 103
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 105
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 104
		      call 'wxe_util':'call'
			  (1173, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'isOk'/1 =
    %% Line 110
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 111
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 113
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 112
		      call 'wxe_util':'call'
			  (1174, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isOk',1}}] )
	    -| ['compiler_generated'] )
	end
'setCap'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},CapStyle>
	      when %% Line 120
		call 'erlang':'is_integer'
		    (CapStyle) ->
	      do  %% Line 121
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 123
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CapStyle>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 122
		      call 'wxe_util':'cast'
			  (1175, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setCap',2}}] )
	    -| ['compiler_generated'] )
	end
'setColour'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 129
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 129
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 129
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 130
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 132
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 132
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 131
			  call 'wxe_util':'cast'
			      (1176, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setColour'/4 =
    %% Line 137
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Red,Green,Blue>
	      when %% Line 138
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Red)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Green)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Blue)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 139
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 141
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Red>(32,1,'integer',['unsigned'|['native']]),
			#<Green>(32,1,'integer',['unsigned'|['native']]),
			#<Blue>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 140
		      call 'wxe_util':'cast'
			  (1177, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setColour',4}}] )
	    -| ['compiler_generated'] )
	end
'setJoin'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},JoinStyle>
	      when %% Line 148
		call 'erlang':'is_integer'
		    (JoinStyle) ->
	      do  %% Line 149
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 151
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<JoinStyle>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 150
		      call 'wxe_util':'cast'
			  (1178, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setJoin',2}}] )
	    -| ['compiler_generated'] )
	end
'setStyle'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 157
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 158
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 160
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 159
		      call 'wxe_util':'cast'
			  (1179, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setWidth'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 166
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 167
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 169
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 168
		      call 'wxe_util':'cast'
			  (1180, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWidth',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 174
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxPen') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxPen')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 175
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 176
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxPen')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxPen', _cor0)
end