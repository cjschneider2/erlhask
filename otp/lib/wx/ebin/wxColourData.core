module 'wxColourData' ['destroy'/1,
		       'getChooseFull'/1,
		       'getColour'/1,
		       'getCustomColour'/2,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/0,
		       'new'/1,
		       'parent_class'/1,
		       'setChooseFull'/2,
		       'setColour'/2,
		       'setCustomColour'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 33
		'export_type' =
		    %% Line 33
		    [{'wxColourData',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'wxColourData',{'remote_type',37,[{'atom',37,'wx'}|[{'atom',37,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'type',39,'wxColourData',[]}]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'Data'}]}|[{'type',45,'wxColourData',[]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Data'}|[{'type',46,'wxColourData',[]}]]]]}]]]}]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'getChooseFull',1},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'This'}]}|[{'type',53,'boolean',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'This'}|[{'type',54,'wxColourData',[]}]]]]}]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'getColour',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'This'}]}|[{'remote_type',61,[{'atom',61,'wx'}|[{'atom',61,'wx_colour4'}|[[]]]]}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'This'}|[{'type',62,'wxColourData',[]}]]]]}]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'getCustomColour',2},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'This'}|[{'var',69,'I'}]]}|[{'remote_type',69,[{'atom',69,'wx'}|[{'atom',69,'wx_colour4'}|[[]]]]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'This'}|[{'type',70,'wxColourData',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'I'}|[{'type',70,'integer',[]}]]]]}]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'setChooseFull',2},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'This'}|[{'var',78,'Flag'}]]}|[{'atom',78,'ok'}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'This'}|[{'type',79,'wxColourData',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Flag'}|[{'type',79,'boolean',[]}]]]]}]]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'setColour',2},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'This'}|[{'var',87,'Colour'}]]}|[{'atom',87,'ok'}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'This'}|[{'type',88,'wxColourData',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Colour'}|[{'remote_type',88,[{'atom',88,'wx'}|[{'atom',88,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'setCustomColour',3},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'This'}|[{'var',96,'I'}|[{'var',96,'Colour'}]]]}|[{'atom',96,'ok'}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'This'}|[{'type',97,'wxColourData',[]}]]]]}|[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'I'}|[{'type',97,'integer',[]}]]]]}|[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Colour'}|[{'remote_type',97,[{'atom',97,'wx'}|[{'atom',97,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'destroy',1},[{'type',105,'fun',[{'type',105,'product',[{'ann_type',105,[{'var',105,'This'}|[{'type',105,'wxColourData',[]}]]}]}|[{'atom',105,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 35
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxColourData'})
'new'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	call 'wxe_util':'construct'
	    (2202, %% Line 42
		   #{}#)
'new'/1 =
    %% Line 47
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',DataRef,DataT,_cor5}> when 'true' ->
	      do  %% Line 48
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (DataT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call DataT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 50
		      #{#<DataRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 49
		      call 'wxe_util':'construct'
			  (2203, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'getChooseFull'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 56
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 58
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 57
		      call 'wxe_util':'call'
			  (2205, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getChooseFull',1}}] )
	    -| ['compiler_generated'] )
	end
'getColour'/1 =
    %% Line 63
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 64
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 66
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 65
		      call 'wxe_util':'call'
			  (2206, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getCustomColour'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},I>
	      when %% Line 72
		call 'erlang':'is_integer'
		    (I) ->
	      do  %% Line 73
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 75
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<I>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 74
		      call 'wxe_util':'call'
			  (2208, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getCustomColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setChooseFull'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Flag>
	      when %% Line 81
		call 'erlang':'is_boolean'
		    (Flag) ->
	      do  %% Line 82
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 84
		      call 'wxe_util':'from_bool'
			  (Flag)
		  in  let <_cor5> =
			  %% Line 84
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 83
			  call 'wxe_util':'cast'
			      (2209, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setChooseFull',2}}] )
	    -| ['compiler_generated'] )
	end
'setColour'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Colour>
	      when let <_cor3> =
		    %% Line 90
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 90
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 90
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 93
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor9> =
			  %% Line 93
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 92
			  call 'wxe_util':'cast'
			      (2210, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setCustomColour'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},I,Colour>
	      when let <_cor6> =
		    %% Line 99
		    try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(I)
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 99
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 99
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 100
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 102
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor12> =
			  %% Line 102
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<I>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 101
			  call 'wxe_util':'cast'
			      (2211, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setCustomColour',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 106
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 107
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxColourData') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxColourData')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 108
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 109
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxColourData')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxColourData', _cor0)
end