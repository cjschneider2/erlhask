module 'wxIdleEvent' ['canSend'/1,
		      'getId'/1,
		      'getMode'/0,
		      'getSkipped'/1,
		      'getTimestamp'/1,
		      'isCommandEvent'/1,
		      'module_info'/0,
		      'module_info'/1,
		      'moreRequested'/1,
		      'parent_class'/1,
		      'requestMore'/1,
		      'requestMore'/2,
		      'resumePropagation'/2,
		      'setMode'/1,
		      'shouldPropagate'/1,
		      'skip'/1,
		      'skip'/2,
		      'stopPropagation'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 40
		'export_type' =
		    %% Line 40
		    [{'wxIdleEvent',0}],
		%% Line 41
		'deprecated' =
		    %% Line 41
		    [{'canSend',1}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'wxIdleEvent',{'remote_type',47,[{'atom',47,'wx'}|[{'atom',47,'wx_object'}|[[]]]]},[]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'canSend',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Win'}]}|[{'type',49,'boolean',[]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Win'}|[{'remote_type',50,[{'atom',50,'wxWindow'}|[{'atom',50,'wxWindow'}|[[]]]]}]]]]}]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'getMode',0},[{'type',58,'fun',[{'type',58,'product',[]}|[{'remote_type',58,[{'atom',58,'wx'}|[{'atom',58,'wx_enum'}|[[]]]]}]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'requestMore',1},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'This'}]}|[{'atom',64,'ok'}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'This'}|[{'type',65,'wxIdleEvent',[]}]]]]}]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'requestMore',2},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'This'}|[{'type',72,'list',[{'var',72,'Option'}]}]]}|[{'atom',72,'ok'}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'This'}|[{'type',73,'wxIdleEvent',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Option'}|[{'type',74,'tuple',[{'atom',74,'needMore'}|[{'type',74,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'moreRequested',1},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'This'}]}|[{'type',85,'boolean',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'This'}|[{'type',86,'wxIdleEvent',[]}]]]]}]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'setMode',1},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'Mode'}]}|[{'atom',94,'ok'}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Mode'}|[{'remote_type',95,[{'atom',95,'wx'}|[{'atom',95,'wx_enum'}|[[]]]]}]]]]}]]]}]}]]
'parent_class'/1 =
    %% Line 44
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 45
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxIdleEvent'})
	end
'canSend'/1 =
    %% Line 51
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',WinRef,WinT,_cor5}> when 'true' ->
	      do  %% Line 52
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (WinT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call WinT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 54
		      #{#<WinRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 53
		      call 'wxe_util':'call'
			  (2845, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canSend',1}}] )
	    -| ['compiler_generated'] )
	end
'getMode'/0 =
    %% Line 59
    fun () ->
	%% Line 60
	call 'wxe_util':'call'
	    (2846, %% Line 61
		   #{}#)
'requestMore'/1 =
    %% Line 67
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 68
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 69
	      apply 'requestMore'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'requestMore',1}}] )
	    -| ['compiler_generated'] )
	end
'requestMore'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 76
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 77
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxIdleEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxIdleEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 78
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'needMore',NeedMore},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (NeedMore)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 79
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-requestMore/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 80
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 80
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 82
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 81
				  call 'wxe_util':'cast'
				      (2847, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'requestMore',2}}] )
	    -| ['compiler_generated'] )
	end
'moreRequested'/1 =
    %% Line 87
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 88
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxIdleEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxIdleEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 90
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 89
		      call 'wxe_util':'call'
			  (2848, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'moreRequested',1}}] )
	    -| ['compiler_generated'] )
	end
'setMode'/1 =
    %% Line 96
    fun (_cor0) ->
	case _cor0 of
	  <Mode>
	      when %% Line 97
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 99
		  #{#<Mode>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 98
		  call 'wxe_util':'cast'
		      (2849, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'setMode',1}}] )
	    -| ['compiler_generated'] )
	end
'stopPropagation'/1 =
    %% Line 103
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 107
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 109
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 113
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 115
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 117
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 119
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxIdleEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxIdleEvent', _cor0)
end