module 'wxBrush' ['destroy'/1,
		  'getColour'/1,
		  'getStipple'/1,
		  'getStyle'/1,
		  'isHatch'/1,
		  'isOk'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'new'/0,
		  'new'/1,
		  'new'/2,
		  'parent_class'/1,
		  'setColour'/2,
		  'setColour'/4,
		  'setStipple'/2,
		  'setStyle'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 33
		'export_type' =
		    %% Line 33
		    [{'wxBrush',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'wxBrush',{'remote_type',37,[{'atom',37,'wx'}|[{'atom',37,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'type',39,'wxBrush',[]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'new',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'var',49,'Colour'}]}|[{'type',49,'wxBrush',[]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Colour'}|[{'remote_type',50,[{'atom',50,'wx'}|[{'atom',50,'wx_colour'}|[[]]]]}]]]]}]]]}|[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'StippleBitmap'}]}|[{'type',51,'wxBrush',[]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'StippleBitmap'}|[{'remote_type',52,[{'atom',52,'wxBitmap'}|[{'atom',52,'wxBitmap'}|[[]]]]}]]]]}]]]}]]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'new',2},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'Colour'}|[{'type',63,'list',[{'var',63,'Option'}]}]]}|[{'type',63,'wxBrush',[]}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Colour'}|[{'remote_type',64,[{'atom',64,'wx'}|[{'atom',64,'wx_colour'}|[[]]]]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Option'}|[{'type',65,'tuple',[{'atom',65,'style'}|[{'type',65,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'getColour',1},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'This'}]}|[{'remote_type',75,[{'atom',75,'wx'}|[{'atom',75,'wx_colour4'}|[[]]]]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'This'}|[{'type',76,'wxBrush',[]}]]]]}]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'getStipple',1},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'This'}]}|[{'remote_type',83,[{'atom',83,'wxBitmap'}|[{'atom',83,'wxBitmap'}|[[]]]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'This'}|[{'type',84,'wxBrush',[]}]]]]}]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'getStyle',1},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'This'}]}|[{'type',91,'integer',[]}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'This'}|[{'type',92,'wxBrush',[]}]]]]}]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'isHatch',1},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'This'}]}|[{'type',99,'boolean',[]}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'This'}|[{'type',100,'wxBrush',[]}]]]]}]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'isOk',1},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'This'}]}|[{'type',107,'boolean',[]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'This'}|[{'type',108,'wxBrush',[]}]]]]}]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'setColour',2},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'This'}|[{'var',115,'Col'}]]}|[{'atom',115,'ok'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'This'}|[{'type',116,'wxBrush',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Col'}|[{'remote_type',116,[{'atom',116,'wx'}|[{'atom',116,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'setColour',4},[{'type',124,'bounded_fun',[{'type',124,'fun',[{'type',124,'product',[{'var',124,'This'}|[{'var',124,'R'}|[{'var',124,'G'}|[{'var',124,'B'}]]]]}|[{'atom',124,'ok'}]]}|[[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'This'}|[{'type',125,'wxBrush',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'R'}|[{'type',125,'integer',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'G'}|[{'type',125,'integer',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'B'}|[{'type',125,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'setStipple',2},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'This'}|[{'var',133,'Stipple'}]]}|[{'atom',133,'ok'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'This'}|[{'type',134,'wxBrush',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Stipple'}|[{'remote_type',134,[{'atom',134,'wxBitmap'}|[{'atom',134,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'setStyle',2},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'This'}|[{'var',142,'Style'}]]}|[{'atom',142,'ok'}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'This'}|[{'type',143,'wxBrush',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Style'}|[{'type',143,'integer',[]}]]]]}]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'destroy',1},[{'type',151,'fun',[{'type',151,'product',[{'ann_type',151,[{'var',151,'This'}|[{'type',151,'wxBrush',[]}]]}]}|[{'atom',151,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 35
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxBrush'})
'new'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	call 'wxe_util':'construct'
	    (1152, %% Line 42
		   #{}#)
'new'/1 =
    %% Line 54
    fun (_cor0) ->
	case _cor0 of
	  <Colour>
	      when let <_cor2> =
		    %% Line 55
		    try
			let <_cor1> =
			    call 'erlang':'tuple_size'
				(_cor0)
			in  call 'erlang':'=:='
				(_cor1, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor4> =
			%% Line 55
			try
			    let <_cor3> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  call 'erlang':'=:='
				    (_cor3, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 55
			call 'erlang':'or'
			    (_cor2, _cor4) ->
	      %% Line 56
	      apply 'new'/2
		  (Colour, [])
	  %% Line 57
	  <{'wx_ref',StippleBitmapRef,StippleBitmapT,_cor9}> when 'true' ->
	      do  %% Line 58
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (StippleBitmapT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call StippleBitmapT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 60
		      #{#<StippleBitmapRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 59
		      call 'wxe_util':'construct'
			  (1154, _cor7)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Colour,Options>
	      when let <_cor3> =
		    %% Line 67
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor7> =
			%% Line 67
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 4)
				in  let <_cor6> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor5, _cor6)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 67
			call 'erlang':'or'
			    (_cor3, _cor7) ->
	      let <MOpts> =
		  %% Line 68
		  ( fun (_cor10,_cor9) ->
			case <_cor10,_cor9> of
			  <{'style',Style},Acc> when 'true' ->
			      let <_cor8> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Style>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor8|Acc]
			  %% Line 69
			  <BadOpt,_cor20> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor14> =
		      %% Line 70
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 70
			  call 'erlang':'list_to_binary'
			      (_cor14)
		      in  let <_cor16> =
			      %% Line 72
			      call 'wxe_util':'colour_bin'
				  (Colour)
			  in  let <_cor17> =
				  %% Line 72
				  #{#<_cor16>(16,8,'binary',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 71
				  call 'wxe_util':'construct'
				      (1153, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'getColour'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 78
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 80
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 79
		      call 'wxe_util':'call'
			  (1157, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getStipple'/1 =
    %% Line 85
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 86
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 88
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 87
		      call 'wxe_util':'call'
			  (1158, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStipple',1}}] )
	    -| ['compiler_generated'] )
	end
'getStyle'/1 =
    %% Line 93
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 94
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 96
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 95
		      call 'wxe_util':'call'
			  (1159, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'isHatch'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 104
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 103
		      call 'wxe_util':'call'
			  (1160, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isHatch',1}}] )
	    -| ['compiler_generated'] )
	end
'isOk'/1 =
    %% Line 109
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 110
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 112
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 111
		      call 'wxe_util':'call'
			  (1161, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isOk',1}}] )
	    -| ['compiler_generated'] )
	end
'setColour'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Col>
	      when let <_cor3> =
		    %% Line 118
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Col)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 118
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 118
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 119
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 121
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor9> =
			  %% Line 121
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 120
			  call 'wxe_util':'cast'
			      (1162, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setColour'/4 =
    %% Line 126
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},R,G,B>
	      when %% Line 127
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (R)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(G)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (B)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 128
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 130
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<R>(32,1,'integer',['unsigned'|['native']]),
			#<G>(32,1,'integer',['unsigned'|['native']]),
			#<B>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 129
		      call 'wxe_util':'cast'
			  (1163, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setColour',4}}] )
	    -| ['compiler_generated'] )
	end
'setStipple'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',StippleRef,StippleT,_cor10}> when 'true' ->
	      do  %% Line 136
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 137
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (StippleT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call StippleT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 139
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<StippleRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 138
			  call 'wxe_util':'cast'
			      (1164, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setStipple',2}}] )
	    -| ['compiler_generated'] )
	end
'setStyle'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 145
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 146
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 148
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 147
		      call 'wxe_util':'cast'
			  (1165, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 152
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 153
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxBrush') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxBrush')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 154
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 155
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxBrush')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxBrush', _cor0)
end