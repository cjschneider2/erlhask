module 'wxBufferedDC' ['blit'/5,
		       'blit'/6,
		       'calcBoundingBox'/3,
		       'clear'/1,
		       'computeScaleAndOrigin'/1,
		       'crossHair'/2,
		       'destroy'/1,
		       'destroyClippingRegion'/1,
		       'deviceToLogicalX'/2,
		       'deviceToLogicalXRel'/2,
		       'deviceToLogicalY'/2,
		       'deviceToLogicalYRel'/2,
		       'drawArc'/4,
		       'drawBitmap'/3,
		       'drawBitmap'/4,
		       'drawCheckMark'/2,
		       'drawCircle'/3,
		       'drawEllipse'/2,
		       'drawEllipse'/3,
		       'drawEllipticArc'/5,
		       'drawIcon'/3,
		       'drawLabel'/3,
		       'drawLabel'/4,
		       'drawLine'/3,
		       'drawLines'/2,
		       'drawLines'/3,
		       'drawPoint'/2,
		       'drawPolygon'/2,
		       'drawPolygon'/3,
		       'drawRectangle'/2,
		       'drawRectangle'/3,
		       'drawRotatedText'/4,
		       'drawRoundedRectangle'/3,
		       'drawRoundedRectangle'/4,
		       'drawText'/3,
		       'endDoc'/1,
		       'endPage'/1,
		       'floodFill'/3,
		       'floodFill'/4,
		       'getBackground'/1,
		       'getBackgroundMode'/1,
		       'getBrush'/1,
		       'getCharHeight'/1,
		       'getCharWidth'/1,
		       'getClippingBox'/1,
		       'getFont'/1,
		       'getLayoutDirection'/1,
		       'getLogicalFunction'/1,
		       'getMapMode'/1,
		       'getMultiLineTextExtent'/2,
		       'getMultiLineTextExtent'/3,
		       'getPPI'/1,
		       'getPartialTextExtents'/2,
		       'getPen'/1,
		       'getPixel'/2,
		       'getSize'/1,
		       'getSizeMM'/1,
		       'getTextBackground'/1,
		       'getTextExtent'/2,
		       'getTextExtent'/3,
		       'getTextForeground'/1,
		       'getUserScale'/1,
		       'gradientFillConcentric'/4,
		       'gradientFillConcentric'/5,
		       'gradientFillLinear'/4,
		       'gradientFillLinear'/5,
		       'init'/2,
		       'init'/3,
		       'init'/4,
		       'isOk'/1,
		       'logicalToDeviceX'/2,
		       'logicalToDeviceXRel'/2,
		       'logicalToDeviceY'/2,
		       'logicalToDeviceYRel'/2,
		       'maxX'/1,
		       'maxY'/1,
		       'minX'/1,
		       'minY'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/0,
		       'new'/1,
		       'new'/2,
		       'new'/3,
		       'parent_class'/1,
		       'resetBoundingBox'/1,
		       'selectObject'/2,
		       'selectObjectAsSource'/2,
		       'setAxisOrientation'/3,
		       'setBackground'/2,
		       'setBackgroundMode'/2,
		       'setBrush'/2,
		       'setClippingRegion'/2,
		       'setClippingRegion'/3,
		       'setDeviceOrigin'/3,
		       'setFont'/2,
		       'setLayoutDirection'/2,
		       'setLogicalFunction'/2,
		       'setMapMode'/2,
		       'setPalette'/2,
		       'setPen'/2,
		       'setTextBackground'/2,
		       'setTextForeground'/2,
		       'setUserScale'/3,
		       'startDoc'/2,
		       'startPage'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 56
		'export_type' =
		    %% Line 56
		    [{'wxBufferedDC',0}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'wxBufferedDC',{'remote_type',64,[{'atom',64,'wx'}|[{'atom',64,'wx_object'}|[[]]]]},[]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'new',0},[{'type',66,'fun',[{'type',66,'product',[]}|[{'type',66,'wxBufferedDC',[]}]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'new',1},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'Dc'}]}|[{'type',72,'wxBufferedDC',[]}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Dc'}|[{'remote_type',73,[{'atom',73,'wxDC'}|[{'atom',73,'wxDC'}|[[]]]]}]]]]}]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'new',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'Dc'}|[{'var',86,'Area'}]]}|[{'type',86,'wxBufferedDC',[]}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Dc'}|[{'remote_type',87,[{'atom',87,'wxDC'}|[{'atom',87,'wxDC'}|[[]]]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Area'}|[{'type',87,'tuple',[{'ann_type',87,[{'var',87,'W'}|[{'type',87,'integer',[]}]]}|[{'ann_type',87,[{'var',87,'H'}|[{'type',87,'integer',[]}]]}]]}]]]]}]]]]}|[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'Dc'}|[{'type',88,'list',[{'var',88,'Option'}]}]]}|[{'type',88,'wxBufferedDC',[]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'Dc'}|[{'remote_type',89,[{'atom',89,'wxDC'}|[{'atom',89,'wxDC'}|[[]]]]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Option'}|[{'type',90,'union',[{'type',90,'tuple',[{'atom',90,'buffer'}|[{'remote_type',90,[{'atom',90,'wxBitmap'}|[{'atom',90,'wxBitmap'}|[[]]]]}]]}|[{'type',91,'tuple',[{'atom',91,'style'}|[{'type',91,'integer',[]}]]}]]}]]]]}]]]]}]]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'new',3},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'Dc'}|[{'var',107,'Area'}|[{'type',107,'list',[{'var',107,'Option'}]}]]]}|[{'type',107,'wxBufferedDC',[]}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Dc'}|[{'remote_type',108,[{'atom',108,'wxDC'}|[{'atom',108,'wxDC'}|[[]]]]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Area'}|[{'type',108,'tuple',[{'ann_type',108,[{'var',108,'W'}|[{'type',108,'integer',[]}]]}|[{'ann_type',108,[{'var',108,'H'}|[{'type',108,'integer',[]}]]}]]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Option'}|[{'type',109,'tuple',[{'atom',109,'style'}|[{'type',109,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'init',2},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'This'}|[{'var',120,'Dc'}]]}|[{'atom',120,'ok'}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'This'}|[{'type',121,'wxBufferedDC',[]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Dc'}|[{'remote_type',121,[{'atom',121,'wxDC'}|[{'atom',121,'wxDC'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'init',3},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'This'}|[{'var',134,'Dc'}|[{'var',134,'Area'}]]]}|[{'atom',134,'ok'}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'This'}|[{'type',135,'wxBufferedDC',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Dc'}|[{'remote_type',135,[{'atom',135,'wxDC'}|[{'atom',135,'wxDC'}|[[]]]]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Area'}|[{'type',135,'tuple',[{'ann_type',135,[{'var',135,'W'}|[{'type',135,'integer',[]}]]}|[{'ann_type',135,[{'var',135,'H'}|[{'type',135,'integer',[]}]]}]]}]]]]}]]]]]}|[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}|[{'var',136,'Dc'}|[{'type',136,'list',[{'var',136,'Option'}]}]]]}|[{'atom',136,'ok'}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxBufferedDC',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Dc'}|[{'remote_type',137,[{'atom',137,'wxDC'}|[{'atom',137,'wxDC'}|[[]]]]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Option'}|[{'type',138,'union',[{'type',138,'tuple',[{'atom',138,'buffer'}|[{'remote_type',138,[{'atom',138,'wxBitmap'}|[{'atom',138,'wxBitmap'}|[[]]]]}]]}|[{'type',139,'tuple',[{'atom',139,'style'}|[{'type',139,'integer',[]}]]}]]}]]]]}]]]]]}]]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'init',4},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'var',156,'Dc'}|[{'var',156,'Area'}|[{'type',156,'list',[{'var',156,'Option'}]}]]]]}|[{'atom',156,'ok'}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxBufferedDC',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Dc'}|[{'remote_type',157,[{'atom',157,'wxDC'}|[{'atom',157,'wxDC'}|[[]]]]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Area'}|[{'type',157,'tuple',[{'ann_type',157,[{'var',157,'W'}|[{'type',157,'integer',[]}]]}|[{'ann_type',157,[{'var',157,'H'}|[{'type',157,'integer',[]}]]}]]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Option'}|[{'type',158,'tuple',[{'atom',158,'style'}|[{'type',158,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'destroy',1},[{'type',170,'fun',[{'type',170,'product',[{'ann_type',170,[{'var',170,'This'}|[{'type',170,'wxBufferedDC',[]}]]}]}|[{'atom',170,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <'wxMemoryDC'> when 'true' ->
	      'true'
	  %% Line 61
	  <'wxDC'> when 'true' ->
	      'true'
	  %% Line 62
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxBufferedDC'})
	end
'new'/0 =
    %% Line 67
    fun () ->
	%% Line 68
	call 'wxe_util':'construct'
	    (747, %% Line 69
		  #{}#)
'new'/1 =
    %% Line 75
    fun (_cor0) ->
	case _cor0 of
	  <Dc = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 76
						   ( 'true'
						     -| ['compiler_generated'] ) ->
	      %% Line 77
	      apply 'new'/2
		  (Dc, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 93
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dc = {'wx_ref',_cor21,_cor22,_cor23},Area = {AreaW,AreaH}>
	      when let <_cor2> =
		    %% Line 94
		    call 'erlang':'is_integer'
			(AreaW)
		in  let <_cor3> =
			%% Line 94
			call 'erlang':'is_integer'
			    (AreaH)
		    in  %% Line 94
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 95
	      apply 'new'/3
		  (Dc, Area, [])
	  %% Line 96
	  <{'wx_ref',DcRef,DcT,_cor24},Options>
	      when %% Line 97
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 98
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (DcT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call DcT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 99
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'buffer',{'wx_ref',BufferRef,BufferT,_cor25}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (BufferT,
						       'wxBitmap') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call BufferT:'parent_class'
						    ('wxBitmap')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor9> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<BufferRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor9|Acc]
			      %% Line 100
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 101
			      <BadOpt,_cor26> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 102
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 102
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 104
				  #{#<DcRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 103
				  call 'wxe_util':'construct'
				      (748, _cor18)
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',DcRef,DcT,_cor21},{AreaW,AreaH},Options>
	      when %% Line 111
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (AreaW)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(AreaH)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 112
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (DcT,
				   'wxDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call DcT:'parent_class'
				('wxDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 113
		      ( fun (_cor11,_cor10) ->
			    case <_cor11,_cor10> of
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor9> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor9|Acc]
			      %% Line 114
			      <BadOpt,_cor22> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/3-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 115
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 115
			      call 'erlang':'list_to_binary'
				  (_cor15)
			  in  let <_cor17> =
				  %% Line 117
				  #{#<DcRef>(32,1,'integer',['unsigned'|['native']]),
				    #<AreaW>(32,1,'integer',['unsigned'|['native']]),
				    #<AreaH>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 116
				  call 'wxe_util':'construct'
				      (749, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'init'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Dc = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 125
	      apply 'init'/3
		  (This, Dc, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'init'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor26,_cor27,_cor28},Dc = {'wx_ref',_cor29,_cor30,_cor31},Area = {AreaW,AreaH}>
	      when let <_cor3> =
		    %% Line 142
		    call 'erlang':'is_integer'
			(AreaW)
		in  let <_cor4> =
			%% Line 142
			call 'erlang':'is_integer'
			    (AreaH)
		    in  %% Line 142
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 143
	      apply 'init'/4
		  (This, Dc, Area, [])
	  %% Line 144
	  <{'wx_ref',ThisRef,ThisT,_cor32},{'wx_ref',DcRef,DcT,_cor33},Options>
	      when %% Line 145
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 146
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBufferedDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBufferedDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 147
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DcT,
				       'wxDC') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DcT:'parent_class'
				    ('wxDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 148
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'buffer',{'wx_ref',BufferRef,BufferT,_cor34}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (BufferT,
							   'wxBitmap') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call BufferT:'parent_class'
							('wxBitmap')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor13> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<BufferRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor13|Acc]
				  %% Line 149
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor14> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor14|Acc]
				  %% Line 150
				  <BadOpt,_cor35> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-init/3-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 151
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 151
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor22> =
				      %% Line 153
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<DcRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 152
				      call 'wxe_util':'cast'
					  (751, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'init',3}}] )
	    -| ['compiler_generated'] )
	end
'init'/4 =
    %% Line 159
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor25},{'wx_ref',DcRef,DcT,_cor26},{AreaW,AreaH},Options>
	      when %% Line 160
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (AreaW)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(AreaH)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBufferedDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBufferedDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 162
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DcT,
				       'wxDC') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DcT:'parent_class'
				    ('wxDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 163
			  ( fun (_cor14,_cor13) ->
				case <_cor14,_cor13> of
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor12> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor12|Acc]
				  %% Line 164
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-init/4-fun-0-'}}] )
		      in  let <_cor18> =
			      %% Line 165
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 165
				  call 'erlang':'list_to_binary'
				      (_cor18)
			      in  let <_cor20> =
				      %% Line 167
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<DcRef>(32,1,'integer',['unsigned'|['native']]),
					#<AreaW>(32,1,'integer',['unsigned'|['native']]),
					#<AreaH>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 166
				      call 'wxe_util':'cast'
					  (752, _cor20)
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'init',4}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 171
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 172
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxBufferedDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxBufferedDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 173
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 174
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'selectObjectAsSource'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	call 'wxMemoryDC':'selectObjectAsSource'
	    (_cor1, _cor0)
'selectObject'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	call 'wxMemoryDC':'selectObject'
	    (_cor1, _cor0)
'startPage'/1 =
    %% Line 182
    fun (_cor0) ->
	call 'wxDC':'startPage'
	    (_cor0)
'startDoc'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	call 'wxDC':'startDoc'
	    (_cor1, _cor0)
'setUserScale'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setUserScale'
	    (_cor2, _cor1, _cor0)
'setTextForeground'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	call 'wxDC':'setTextForeground'
	    (_cor1, _cor0)
'setTextBackground'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	call 'wxDC':'setTextBackground'
	    (_cor1, _cor0)
'setPen'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	call 'wxDC':'setPen'
	    (_cor1, _cor0)
'setPalette'/2 =
    %% Line 194
    fun (_cor1,_cor0) ->
	call 'wxDC':'setPalette'
	    (_cor1, _cor0)
'setMapMode'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	call 'wxDC':'setMapMode'
	    (_cor1, _cor0)
'setLogicalFunction'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	call 'wxDC':'setLogicalFunction'
	    (_cor1, _cor0)
'setLayoutDirection'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	call 'wxDC':'setLayoutDirection'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	call 'wxDC':'setFont'
	    (_cor1, _cor0)
'setDeviceOrigin'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setDeviceOrigin'
	    (_cor2, _cor1, _cor0)
'setClippingRegion'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setClippingRegion'
	    (_cor2, _cor1, _cor0)
'setClippingRegion'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	call 'wxDC':'setClippingRegion'
	    (_cor1, _cor0)
'setBrush'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBrush'
	    (_cor1, _cor0)
'setBackgroundMode'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBackgroundMode'
	    (_cor1, _cor0)
'setBackground'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBackground'
	    (_cor1, _cor0)
'setAxisOrientation'/3 =
    %% Line 216
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setAxisOrientation'
	    (_cor2, _cor1, _cor0)
'resetBoundingBox'/1 =
    %% Line 218
    fun (_cor0) ->
	call 'wxDC':'resetBoundingBox'
	    (_cor0)
'isOk'/1 =
    %% Line 220
    fun (_cor0) ->
	call 'wxDC':'isOk'
	    (_cor0)
'minY'/1 =
    %% Line 222
    fun (_cor0) ->
	call 'wxDC':'minY'
	    (_cor0)
'minX'/1 =
    %% Line 224
    fun (_cor0) ->
	call 'wxDC':'minX'
	    (_cor0)
'maxY'/1 =
    %% Line 226
    fun (_cor0) ->
	call 'wxDC':'maxY'
	    (_cor0)
'maxX'/1 =
    %% Line 228
    fun (_cor0) ->
	call 'wxDC':'maxX'
	    (_cor0)
'logicalToDeviceYRel'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceYRel'
	    (_cor1, _cor0)
'logicalToDeviceY'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceY'
	    (_cor1, _cor0)
'logicalToDeviceXRel'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceXRel'
	    (_cor1, _cor0)
'logicalToDeviceX'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceX'
	    (_cor1, _cor0)
'gradientFillLinear'/5 =
    %% Line 238
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillLinear'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'gradientFillLinear'/4 =
    %% Line 240
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillLinear'
	    (_cor3, _cor2, _cor1, _cor0)
'gradientFillConcentric'/5 =
    %% Line 242
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillConcentric'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'gradientFillConcentric'/4 =
    %% Line 244
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillConcentric'
	    (_cor3, _cor2, _cor1, _cor0)
'getUserScale'/1 =
    %% Line 246
    fun (_cor0) ->
	call 'wxDC':'getUserScale'
	    (_cor0)
'getTextForeground'/1 =
    %% Line 248
    fun (_cor0) ->
	call 'wxDC':'getTextForeground'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	call 'wxDC':'getTextExtent'
	    (_cor1, _cor0)
'getTextBackground'/1 =
    %% Line 254
    fun (_cor0) ->
	call 'wxDC':'getTextBackground'
	    (_cor0)
'getSizeMM'/1 =
    %% Line 256
    fun (_cor0) ->
	call 'wxDC':'getSizeMM'
	    (_cor0)
'getSize'/1 =
    %% Line 258
    fun (_cor0) ->
	call 'wxDC':'getSize'
	    (_cor0)
'getPPI'/1 =
    %% Line 260
    fun (_cor0) ->
	call 'wxDC':'getPPI'
	    (_cor0)
'getPixel'/2 =
    %% Line 262
    fun (_cor1,_cor0) ->
	call 'wxDC':'getPixel'
	    (_cor1, _cor0)
'getPen'/1 =
    %% Line 264
    fun (_cor0) ->
	call 'wxDC':'getPen'
	    (_cor0)
'getPartialTextExtents'/2 =
    %% Line 266
    fun (_cor1,_cor0) ->
	call 'wxDC':'getPartialTextExtents'
	    (_cor1, _cor0)
'getMultiLineTextExtent'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'getMultiLineTextExtent'
	    (_cor2, _cor1, _cor0)
'getMultiLineTextExtent'/2 =
    %% Line 270
    fun (_cor1,_cor0) ->
	call 'wxDC':'getMultiLineTextExtent'
	    (_cor1, _cor0)
'getMapMode'/1 =
    %% Line 272
    fun (_cor0) ->
	call 'wxDC':'getMapMode'
	    (_cor0)
'getLogicalFunction'/1 =
    %% Line 274
    fun (_cor0) ->
	call 'wxDC':'getLogicalFunction'
	    (_cor0)
'getLayoutDirection'/1 =
    %% Line 276
    fun (_cor0) ->
	call 'wxDC':'getLayoutDirection'
	    (_cor0)
'getFont'/1 =
    %% Line 278
    fun (_cor0) ->
	call 'wxDC':'getFont'
	    (_cor0)
'getClippingBox'/1 =
    %% Line 280
    fun (_cor0) ->
	call 'wxDC':'getClippingBox'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 282
    fun (_cor0) ->
	call 'wxDC':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 284
    fun (_cor0) ->
	call 'wxDC':'getCharHeight'
	    (_cor0)
'getBrush'/1 =
    %% Line 286
    fun (_cor0) ->
	call 'wxDC':'getBrush'
	    (_cor0)
'getBackgroundMode'/1 =
    %% Line 288
    fun (_cor0) ->
	call 'wxDC':'getBackgroundMode'
	    (_cor0)
'getBackground'/1 =
    %% Line 290
    fun (_cor0) ->
	call 'wxDC':'getBackground'
	    (_cor0)
'floodFill'/4 =
    %% Line 292
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'floodFill'
	    (_cor3, _cor2, _cor1, _cor0)
'floodFill'/3 =
    %% Line 294
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'floodFill'
	    (_cor2, _cor1, _cor0)
'endPage'/1 =
    %% Line 296
    fun (_cor0) ->
	call 'wxDC':'endPage'
	    (_cor0)
'endDoc'/1 =
    %% Line 298
    fun (_cor0) ->
	call 'wxDC':'endDoc'
	    (_cor0)
'drawText'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawText'
	    (_cor2, _cor1, _cor0)
'drawRoundedRectangle'/4 =
    %% Line 302
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRoundedRectangle'
	    (_cor3, _cor2, _cor1, _cor0)
'drawRoundedRectangle'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRoundedRectangle'
	    (_cor2, _cor1, _cor0)
'drawRotatedText'/4 =
    %% Line 306
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRotatedText'
	    (_cor3, _cor2, _cor1, _cor0)
'drawRectangle'/3 =
    %% Line 308
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRectangle'
	    (_cor2, _cor1, _cor0)
'drawRectangle'/2 =
    %% Line 310
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawRectangle'
	    (_cor1, _cor0)
'drawPoint'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawPoint'
	    (_cor1, _cor0)
'drawPolygon'/3 =
    %% Line 314
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawPolygon'
	    (_cor2, _cor1, _cor0)
'drawPolygon'/2 =
    %% Line 316
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawPolygon'
	    (_cor1, _cor0)
'drawLines'/3 =
    %% Line 318
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLines'
	    (_cor2, _cor1, _cor0)
'drawLines'/2 =
    %% Line 320
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawLines'
	    (_cor1, _cor0)
'drawLine'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLine'
	    (_cor2, _cor1, _cor0)
'drawLabel'/4 =
    %% Line 324
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLabel'
	    (_cor3, _cor2, _cor1, _cor0)
'drawLabel'/3 =
    %% Line 326
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLabel'
	    (_cor2, _cor1, _cor0)
'drawIcon'/3 =
    %% Line 328
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawIcon'
	    (_cor2, _cor1, _cor0)
'drawEllipticArc'/5 =
    %% Line 330
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawEllipticArc'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'drawEllipse'/3 =
    %% Line 332
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawEllipse'
	    (_cor2, _cor1, _cor0)
'drawEllipse'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawEllipse'
	    (_cor1, _cor0)
'drawCircle'/3 =
    %% Line 336
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawCircle'
	    (_cor2, _cor1, _cor0)
'drawCheckMark'/2 =
    %% Line 338
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawCheckMark'
	    (_cor1, _cor0)
'drawBitmap'/4 =
    %% Line 340
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawBitmap'
	    (_cor3, _cor2, _cor1, _cor0)
'drawBitmap'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawBitmap'
	    (_cor2, _cor1, _cor0)
'drawArc'/4 =
    %% Line 344
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawArc'
	    (_cor3, _cor2, _cor1, _cor0)
'deviceToLogicalYRel'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalYRel'
	    (_cor1, _cor0)
'deviceToLogicalY'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalY'
	    (_cor1, _cor0)
'deviceToLogicalXRel'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalXRel'
	    (_cor1, _cor0)
'deviceToLogicalX'/2 =
    %% Line 352
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalX'
	    (_cor1, _cor0)
'destroyClippingRegion'/1 =
    %% Line 354
    fun (_cor0) ->
	call 'wxDC':'destroyClippingRegion'
	    (_cor0)
'crossHair'/2 =
    %% Line 356
    fun (_cor1,_cor0) ->
	call 'wxDC':'crossHair'
	    (_cor1, _cor0)
'computeScaleAndOrigin'/1 =
    %% Line 358
    fun (_cor0) ->
	call 'wxDC':'computeScaleAndOrigin'
	    (_cor0)
'clear'/1 =
    %% Line 360
    fun (_cor0) ->
	call 'wxDC':'clear'
	    (_cor0)
'calcBoundingBox'/3 =
    %% Line 362
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'calcBoundingBox'
	    (_cor2, _cor1, _cor0)
'blit'/6 =
    %% Line 364
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'blit'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'blit'/5 =
    %% Line 366
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'blit'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxBufferedDC')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxBufferedDC', _cor0)
end