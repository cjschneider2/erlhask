module 'wxCalendarDateAttr' ['destroy'/1,
			     'getBackgroundColour'/1,
			     'getBorder'/1,
			     'getBorderColour'/1,
			     'getFont'/1,
			     'getTextColour'/1,
			     'hasBackgroundColour'/1,
			     'hasBorder'/1,
			     'hasBorderColour'/1,
			     'hasFont'/1,
			     'hasTextColour'/1,
			     'isHoliday'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'new'/0,
			     'new'/1,
			     'new'/2,
			     'parent_class'/1,
			     'setBackgroundColour'/2,
			     'setBorder'/2,
			     'setBorderColour'/2,
			     'setFont'/2,
			     'setHoliday'/2,
			     'setTextColour'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxCalendarDateAttr',0}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxCalendarDateAttr',{'remote_type',39,[{'atom',39,'wx'}|[{'atom',39,'wx_object'}|[[]]]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'new',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'type',41,'wxCalendarDateAttr',[]}]]}]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'new',1},[{'type',52,'bounded_fun',[{'type',52,'fun',[{'type',52,'product',[{'var',52,'Border'}]}|[{'type',52,'wxCalendarDateAttr',[]}]]}|[[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'Border'}|[{'remote_type',53,[{'atom',53,'wx'}|[{'atom',53,'wx_enum'}|[[]]]]}]]]]}]]]}|[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'ColText'}]}|[{'type',54,'wxCalendarDateAttr',[]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'ColText'}|[{'remote_type',55,[{'atom',55,'wx'}|[{'atom',55,'wx_colour'}|[[]]]]}]]]]}]]]}]]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'new',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Border'}|[{'type',75,'list',[{'var',75,'Option'}]}]]}|[{'type',75,'wxCalendarDateAttr',[]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Border'}|[{'remote_type',76,[{'atom',76,'wx'}|[{'atom',76,'wx_enum'}|[[]]]]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Option'}|[{'type',77,'tuple',[{'atom',77,'colBorder'}|[{'remote_type',77,[{'atom',77,'wx'}|[{'atom',77,'wx_colour'}|[[]]]]}]]}]]]]}]]]]}|[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'ColText'}|[{'type',78,'list',[{'var',78,'Option'}]}]]}|[{'type',78,'wxCalendarDateAttr',[]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'ColText'}|[{'remote_type',79,[{'atom',79,'wx'}|[{'atom',79,'wx_colour'}|[[]]]]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Option'}|[{'type',80,'union',[{'type',80,'tuple',[{'atom',80,'colBack'}|[{'remote_type',80,[{'atom',80,'wx'}|[{'atom',80,'wx_colour'}|[[]]]]}]]}|[{'type',81,'tuple',[{'atom',81,'colBorder'}|[{'remote_type',81,[{'atom',81,'wx'}|[{'atom',81,'wx_colour'}|[[]]]]}]]}|[{'type',82,'tuple',[{'atom',82,'font'}|[{'remote_type',82,[{'atom',82,'wxFont'}|[{'atom',82,'wxFont'}|[[]]]]}]]}|[{'type',83,'tuple',[{'atom',83,'border'}|[{'remote_type',83,[{'atom',83,'wx'}|[{'atom',83,'wx_enum'}|[[]]]]}]]}]]]]}]]]]}]]]]}]]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'setTextColour',2},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'This'}|[{'var',103,'ColText'}]]}|[{'atom',103,'ok'}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'This'}|[{'type',104,'wxCalendarDateAttr',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'ColText'}|[{'remote_type',104,[{'atom',104,'wx'}|[{'atom',104,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'setBackgroundColour',2},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'This'}|[{'var',112,'ColBack'}]]}|[{'atom',112,'ok'}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'This'}|[{'type',113,'wxCalendarDateAttr',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'ColBack'}|[{'remote_type',113,[{'atom',113,'wx'}|[{'atom',113,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'setBorderColour',2},[{'type',121,'bounded_fun',[{'type',121,'fun',[{'type',121,'product',[{'var',121,'This'}|[{'var',121,'Col'}]]}|[{'atom',121,'ok'}]]}|[[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'This'}|[{'type',122,'wxCalendarDateAttr',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Col'}|[{'remote_type',122,[{'atom',122,'wx'}|[{'atom',122,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'setFont',2},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'This'}|[{'var',130,'Font'}]]}|[{'atom',130,'ok'}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'This'}|[{'type',131,'wxCalendarDateAttr',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Font'}|[{'remote_type',131,[{'atom',131,'wxFont'}|[{'atom',131,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'setBorder',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'This'}|[{'var',140,'Border'}]]}|[{'atom',140,'ok'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'This'}|[{'type',141,'wxCalendarDateAttr',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Border'}|[{'remote_type',141,[{'atom',141,'wx'}|[{'atom',141,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'setHoliday',2},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'This'}|[{'var',149,'Holiday'}]]}|[{'atom',149,'ok'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'This'}|[{'type',150,'wxCalendarDateAttr',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Holiday'}|[{'type',150,'boolean',[]}]]]]}]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'hasTextColour',1},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'This'}]}|[{'type',158,'boolean',[]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'This'}|[{'type',159,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'hasBackgroundColour',1},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'This'}]}|[{'type',166,'boolean',[]}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'This'}|[{'type',167,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'hasBorderColour',1},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'This'}]}|[{'type',174,'boolean',[]}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'This'}|[{'type',175,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'hasFont',1},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}]}|[{'type',182,'boolean',[]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'hasBorder',1},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'This'}]}|[{'type',190,'boolean',[]}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'This'}|[{'type',191,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'isHoliday',1},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'This'}]}|[{'type',198,'boolean',[]}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'This'}|[{'type',199,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 206
		'spec' =
		    %% Line 206
		    [{{'getTextColour',1},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'This'}]}|[{'remote_type',206,[{'atom',206,'wx'}|[{'atom',206,'wx_colour4'}|[[]]]]}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'This'}|[{'type',207,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'getBackgroundColour',1},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'This'}]}|[{'remote_type',214,[{'atom',214,'wx'}|[{'atom',214,'wx_colour4'}|[[]]]]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'This'}|[{'type',215,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'getBorderColour',1},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'This'}]}|[{'remote_type',222,[{'atom',222,'wx'}|[{'atom',222,'wx_colour4'}|[[]]]]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'This'}|[{'type',223,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'getFont',1},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'This'}]}|[{'remote_type',230,[{'atom',230,'wxFont'}|[{'atom',230,'wxFont'}|[[]]]]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'This'}|[{'type',231,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'getBorder',1},[{'type',239,'bounded_fun',[{'type',239,'fun',[{'type',239,'product',[{'var',239,'This'}]}|[{'remote_type',239,[{'atom',239,'wx'}|[{'atom',239,'wx_enum'}|[[]]]]}]]}|[[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'This'}|[{'type',240,'wxCalendarDateAttr',[]}]]]]}]]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'destroy',1},[{'type',247,'fun',[{'type',247,'product',[{'ann_type',247,[{'var',247,'This'}|[{'type',247,'wxCalendarDateAttr',[]}]]}]}|[{'atom',247,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxCalendarDateAttr'})
'new'/0 =
    %% Line 42
    fun () ->
	%% Line 43
	call 'wxe_util':'construct'
	    (1520, %% Line 44
		   #{}#)
'new'/1 =
    %% Line 57
    fun (_cor0) ->
	case _cor0 of
	  <Border>
	      when %% Line 58
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 59
	      apply 'new'/2
		  (Border, [])
	  %% Line 61
	  <ColText>
	      when let <_cor2> =
		    %% Line 62
		    try
			let <_cor1> =
			    call 'erlang':'tuple_size'
				(_cor0)
			in  call 'erlang':'=:='
				(_cor1, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor4> =
			%% Line 62
			try
			    let <_cor3> =
				call 'erlang':'tuple_size'
				    (_cor0)
			    in  call 'erlang':'=:='
				    (_cor3, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 62
			call 'erlang':'or'
			    (_cor2, _cor4) ->
	      %% Line 63
	      apply 'new'/2
		  (ColText, [])
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Border,Options>
	      when let <_cor2> =
		    %% Line 85
		    call 'erlang':'is_integer'
			(Border)
		in  let <_cor3> =
			%% Line 85
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 85
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 86
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{'colBorder',ColBorder},Acc> when 'true' ->
			      let <_cor4> =
				  call 'wxe_util':'colour_bin'
				      (ColBorder)
			      in  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor4>(16,8,'binary',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor5|Acc]
			  %% Line 87
			  <BadOpt,_cor39> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor11> =
		      %% Line 88
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 88
			  call 'erlang':'list_to_binary'
			      (_cor11)
		      in  let <_cor13> =
			      %% Line 90
			      #{#<Border>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 89
			      call 'wxe_util':'construct'
				  (1522, _cor13)
	  %% Line 91
	  <ColText,Options>
	      when let <_cor15> =
		    %% Line 92
		    try
			let <_cor14> =
			    call 'erlang':'tuple_size'
				(ColText)
			in  call 'erlang':'=:='
				(_cor14, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor19> =
			%% Line 92
			try
			    let <_cor16> =
				call 'erlang':'tuple_size'
				    (ColText)
			    in  let <_cor17> =
				    call 'erlang':'=:='
					(_cor16, 4)
				in  let <_cor18> =
					call 'erlang':'is_list'
					    (Options)
				    in  call 'erlang':'and'
					    (_cor17, _cor18)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 92
			call 'erlang':'or'
			    (_cor15, _cor19) ->
	      let <MOpts> =
		  %% Line 93
		  ( fun (_cor29,_cor28) ->
			case <_cor29,_cor28> of
			  <{'colBack',ColBack},Acc> when 'true' ->
			      let <_cor20> =
				  call 'wxe_util':'colour_bin'
				      (ColBack)
			      in  let <_cor21> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor20>(16,8,'binary',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor21|Acc]
			  %% Line 94
			  <{'colBorder',ColBorder},Acc> when 'true' ->
			      let <_cor22> =
				  call 'wxe_util':'colour_bin'
				      (ColBorder)
			      in  let <_cor23> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<_cor22>(16,8,'binary',['unsigned'|['big']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor23|Acc]
			  %% Line 95
			  <{'font',{'wx_ref',FontRef,FontT,_cor40}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (FontT,
						   'wxFont') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call FontT:'parent_class'
						('wxFont')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor26> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<FontRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor26|Acc]
			  %% Line 96
			  <{'border',Border},Acc> when 'true' ->
			      let <_cor27> =
				  #{#<4>(32,1,'integer',['unsigned'|['native']]),
				    #<Border>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor27|Acc]
			  %% Line 97
			  <BadOpt,_cor41> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-1-'}}] )
	      in  let <_cor33> =
		      %% Line 98
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 98
			  call 'erlang':'list_to_binary'
			      (_cor33)
		      in  let <_cor35> =
			      %% Line 100
			      call 'wxe_util':'colour_bin'
				  (ColText)
			  in  let <_cor36> =
				  %% Line 100
				  #{#<_cor35>(16,8,'binary',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 99
				  call 'wxe_util':'construct'
				      (1521, _cor36)
	  ( <_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'setTextColour'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColText>
	      when let <_cor3> =
		    %% Line 106
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColText)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 106
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColText)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 106
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 107
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 109
		      call 'wxe_util':'colour_bin'
			  (ColText)
		  in  let <_cor9> =
			  %% Line 109
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 108
			  call 'wxe_util':'cast'
			      (1523, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundColour'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColBack>
	      when let <_cor3> =
		    %% Line 115
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColBack)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 115
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColBack)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 115
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 116
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 118
		      call 'wxe_util':'colour_bin'
			  (ColBack)
		  in  let <_cor9> =
			  %% Line 118
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 117
			  call 'wxe_util':'cast'
			      (1524, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setBorderColour'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Col>
	      when let <_cor3> =
		    %% Line 124
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Col)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 124
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 124
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 125
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 127
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor9> =
			  %% Line 127
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 126
			  call 'wxe_util':'cast'
			      (1525, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBorderColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 133
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 134
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 136
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 135
			  call 'wxe_util':'cast'
			      (1526, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setBorder'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Border>
	      when %% Line 143
		call 'erlang':'is_integer'
		    (Border) ->
	      do  %% Line 144
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 146
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Border>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 145
		      call 'wxe_util':'cast'
			  (1527, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setBorder',2}}] )
	    -| ['compiler_generated'] )
	end
'setHoliday'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Holiday>
	      when %% Line 152
		call 'erlang':'is_boolean'
		    (Holiday) ->
	      do  %% Line 153
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 155
		      call 'wxe_util':'from_bool'
			  (Holiday)
		  in  let <_cor5> =
			  %% Line 155
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 154
			  call 'wxe_util':'cast'
			      (1528, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setHoliday',2}}] )
	    -| ['compiler_generated'] )
	end
'hasTextColour'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 163
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 162
		      call 'wxe_util':'call'
			  (1529, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasBackgroundColour'/1 =
    %% Line 168
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 169
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 171
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 170
		      call 'wxe_util':'call'
			  (1530, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasBorderColour'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 179
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 178
		      call 'wxe_util':'call'
			  (1531, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasBorderColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasFont'/1 =
    %% Line 184
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 185
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 187
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 186
		      call 'wxe_util':'call'
			  (1532, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasFont',1}}] )
	    -| ['compiler_generated'] )
	end
'hasBorder'/1 =
    %% Line 192
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 193
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 195
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 194
		      call 'wxe_util':'call'
			  (1533, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasBorder',1}}] )
	    -| ['compiler_generated'] )
	end
'isHoliday'/1 =
    %% Line 200
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 201
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 203
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 202
		      call 'wxe_util':'call'
			  (1534, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isHoliday',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextColour'/1 =
    %% Line 208
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 209
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 211
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 210
		      call 'wxe_util':'call'
			  (1535, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundColour'/1 =
    %% Line 216
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 217
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 219
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 218
		      call 'wxe_util':'call'
			  (1536, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getBorderColour'/1 =
    %% Line 224
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 225
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 227
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 226
		      call 'wxe_util':'call'
			  (1537, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBorderColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 232
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 233
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 235
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 234
		      call 'wxe_util':'call'
			  (1538, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getBorder'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 242
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 244
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 243
		      call 'wxe_util':'call'
			  (1539, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBorder',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 249
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxCalendarDateAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxCalendarDateAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 250
		      call 'wxe_util':'destroy'
			  (1540, Obj)
		      %% Line 251
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxCalendarDateAttr')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxCalendarDateAttr', _cor0)
end