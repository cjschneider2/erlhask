module 'wxGridCellChoiceEditor' ['beginEdit'/4,
				 'destroy'/1,
				 'endEdit'/4,
				 'handleReturn'/2,
				 'isCreated'/1,
				 'module_info'/0,
				 'module_info'/1,
				 'new'/1,
				 'new'/2,
				 'paintBackground'/3,
				 'parent_class'/1,
				 'reset'/1,
				 'setParameters'/2,
				 'setSize'/2,
				 'show'/2,
				 'show'/3,
				 'startingClick'/1,
				 'startingKey'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 36
		'export_type' =
		    %% Line 36
		    [{'wxGridCellChoiceEditor',0}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'wxGridCellChoiceEditor',{'remote_type',43,[{'atom',43,'wx'}|[{'atom',43,'wx_object'}|[[]]]]},[]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'Choices'}]}|[{'type',45,'wxGridCellChoiceEditor',[]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Choices'}|[{'type',46,'list',[{'remote_type',46,[{'atom',46,'unicode'}|[{'atom',46,'chardata'}|[[]]]]}]}]]]]}]]]}]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'new',2},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Choices'}|[{'type',53,'list',[{'var',53,'Option'}]}]]}|[{'type',53,'wxGridCellChoiceEditor',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Choices'}|[{'type',54,'list',[{'remote_type',54,[{'atom',54,'unicode'}|[{'atom',54,'chardata'}|[[]]]]}]}]]]]}|[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Option'}|[{'type',55,'tuple',[{'atom',55,'allowOthers'}|[{'type',55,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'setParameters',2},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'This'}|[{'var',67,'Params'}]]}|[{'atom',67,'ok'}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'This'}|[{'type',68,'wxGridCellChoiceEditor',[]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Params'}|[{'remote_type',68,[{'atom',68,'unicode'}|[{'atom',68,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'destroy',1},[{'type',77,'fun',[{'type',77,'product',[{'ann_type',77,[{'var',77,'This'}|[{'type',77,'wxGridCellChoiceEditor',[]}]]}]}|[{'atom',77,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 40
    fun (_cor0) ->
	case _cor0 of
	  <'wxGridCellEditor'> when 'true' ->
	      'true'
	  %% Line 41
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGridCellChoiceEditor'})
	end
'new'/1 =
    %% Line 48
    fun (_cor0) ->
	case _cor0 of
	  <Choices>
	      when %% Line 49
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 50
	      apply 'new'/2
		  (Choices, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Choices,Options>
	      when let <_cor2> =
		    %% Line 57
		    call 'erlang':'is_list'
			(Choices)
		in  let <_cor3> =
			%% Line 57
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 57
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor9> =
		  %% Line 58
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[%% Line 59
				    ChoicesTemp|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'unicode':'characters_to_binary'
					      ([ChoicesTemp|[0]])
				      in  let <_cor8> =
					      %% Line 59
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 59
			     Choices)
		    -| ['list_comprehension'] )
	      in  let <MOpts> =
		      %% Line 60
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'allowOthers',AllowOthers},Acc> when 'true' ->
				  let <_cor11> =
				      call 'wxe_util':'from_bool'
					  (AllowOthers)
				  in  let <_cor12> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor11>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor12|Acc]
			      %% Line 61
			      <BadOpt,_cor43> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 62
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 62
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor39> =
				  %% Line 64
				  call 'erlang':'length'
				      (_cor9)
			      in  let <_cor32> =
				      primop 'bs_init_writable'
					  (256)
				  in  let <_cor38> =
					  %% Line 64
					  ( letrec
						'lbc$^2'/2 =
						    fun (_cor36,_cor35) ->
							case <_cor36,_cor35> of
							  <[UC_Str|_cor34],_cor35> when 'true' ->
							      let <_cor37> =
								  call 'erlang':'byte_size'
								      (UC_Str)
							      in  let <_cor35> =
								      ( #{#<_cor35>('all',1,'binary',[]),
									  #<_cor37>(32,1,'integer',['unsigned'|['native']]),
									  #<UC_Str>('all',8,'binary',['unsigned'|['big']])}#
									-| ['compiler_generated','single_use'] )
								  in  apply 'lbc$^2'/2
									  (_cor34, _cor35)
							  <[],_cor35> when 'true' ->
							      _cor35
							  ( <_cor36,_cor35> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor36,_cor35})
								  -| [{'function_name',{'lbc$^2',2}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lbc$^2'/2
						    (_cor9, _cor32)
					    -| ['list_comprehension'] )
				      in  let <_cor26> =
					      %% Line 64
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor22) ->
							    case _cor22 of
							      <[S|_cor21]> when 'true' ->
								  let <_cor23> =
								      call 'erlang':'byte_size'
									  (S)
								  in  let <_cor24> =
									  call 'erlang':'+'
									      (_cor23, 4)
								      in  let <_cor25> =
									      apply 'lc$^1'/1
										  (_cor21)
									  in  ( [_cor24|_cor25]
										-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor22> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor22})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(_cor9)
						-| ['list_comprehension'] )
					  in  let <_cor27> =
						  %% Line 64
						  call 'lists':'sum'
						      (_cor26)
					      in  let <_cor28> =
						      %% Line 64
						      call 'erlang':'+'
							  (4, _cor27)
						  in  let <_cor29> =
							  %% Line 64
							  call 'erlang':'band'
							      (_cor28, 7)
						      in  let <_cor30> =
							      %% Line 64
							      call 'erlang':'-'
								  (8, _cor29)
							  in  let <_cor31> =
								  %% Line 64
								  call 'erlang':'band'
								      (_cor30, 7)
							      in  let <_cor40> =
								      %% Line 64
								      #{#<_cor39>(32,1,'integer',['unsigned'|['native']]),
									#<_cor38>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor31,8,'integer',['unsigned'|['big']]),
									#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
								  in  %% Line 63
								      call 'wxe_util':'construct'
									  (594, _cor40)
	  ( <_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'setParameters'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Params>
	      when %% Line 70
		call 'erlang':'is_list'
		    (Params) ->
	      do  %% Line 71
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellChoiceEditor') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellChoiceEditor')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Params_UC> =
		      %% Line 72
		      call 'unicode':'characters_to_binary'
			  ([Params|[0]])
		  in  let <_cor10> =
			  %% Line 74
			  call 'erlang':'byte_size'
			      (Params_UC)
		      in  let <_cor5> =
			      %% Line 74
			      call 'erlang':'byte_size'
				  (Params_UC)
			  in  let <_cor6> =
				  %% Line 74
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 74
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 74
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 74
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 74
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Params_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 73
						  call 'wxe_util':'cast'
						      (595, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setParameters',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 79
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGridCellChoiceEditor') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGridCellChoiceEditor')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 80
		      call 'wxe_util':'destroy'
			  (596, Obj)
		      %% Line 81
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'handleReturn'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'handleReturn'
	    (_cor1, _cor0)
'startingClick'/1 =
    %% Line 86
    fun (_cor0) ->
	call 'wxGridCellEditor':'startingClick'
	    (_cor0)
'startingKey'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'startingKey'
	    (_cor1, _cor0)
'reset'/1 =
    %% Line 90
    fun (_cor0) ->
	call 'wxGridCellEditor':'reset'
	    (_cor0)
'endEdit'/4 =
    %% Line 92
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'endEdit'
	    (_cor3, _cor2, _cor1, _cor0)
'beginEdit'/4 =
    %% Line 94
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'beginEdit'
	    (_cor3, _cor2, _cor1, _cor0)
'paintBackground'/3 =
    %% Line 96
    fun (_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'paintBackground'
	    (_cor2, _cor1, _cor0)
'show'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'show'
	    (_cor2, _cor1, _cor0)
'show'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'show'
	    (_cor1, _cor0)
'setSize'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'setSize'
	    (_cor1, _cor0)
'isCreated'/1 =
    %% Line 104
    fun (_cor0) ->
	call 'wxGridCellEditor':'isCreated'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridCellChoiceEditor')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridCellChoiceEditor', _cor0)
end