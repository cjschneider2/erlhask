module 'wxCloseEvent' ['canVeto'/1,
		       'getId'/1,
		       'getLoggingOff'/1,
		       'getSkipped'/1,
		       'getTimestamp'/1,
		       'isCommandEvent'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'parent_class'/1,
		       'resumePropagation'/2,
		       'setCanVeto'/2,
		       'setLoggingOff'/2,
		       'shouldPropagate'/1,
		       'skip'/1,
		       'skip'/2,
		       'stopPropagation'/1,
		       'veto'/1,
		       'veto'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 40
		'export_type' =
		    %% Line 40
		    [{'wxCloseEvent',0}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxCloseEvent',{'remote_type',45,[{'atom',45,'wx'}|[{'atom',45,'wx_object'}|[[]]]]},[]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'canVeto',1},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'var',47,'This'}]}|[{'type',47,'boolean',[]}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'This'}|[{'type',48,'wxCloseEvent',[]}]]]]}]]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'getLoggingOff',1},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[{'var',55,'This'}]}|[{'type',55,'boolean',[]}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'This'}|[{'type',56,'wxCloseEvent',[]}]]]]}]]]}]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'setCanVeto',2},[{'type',63,'bounded_fun',[{'type',63,'fun',[{'type',63,'product',[{'var',63,'This'}|[{'var',63,'CanVeto'}]]}|[{'atom',63,'ok'}]]}|[[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'This'}|[{'type',64,'wxCloseEvent',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'CanVeto'}|[{'type',64,'boolean',[]}]]]]}]]]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'setLoggingOff',2},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'This'}|[{'var',72,'LogOff'}]]}|[{'atom',72,'ok'}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'This'}|[{'type',73,'wxCloseEvent',[]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'LogOff'}|[{'type',73,'boolean',[]}]]]]}]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'veto',1},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'This'}]}|[{'atom',81,'ok'}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'This'}|[{'type',82,'wxCloseEvent',[]}]]]]}]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'veto',2},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}|[{'type',89,'list',[{'var',89,'Option'}]}]]}|[{'atom',89,'ok'}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxCloseEvent',[]}]]]]}|[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Option'}|[{'type',91,'tuple',[{'atom',91,'veto'}|[{'type',91,'boolean',[]}]]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 42
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 43
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxCloseEvent'})
	end
'canVeto'/1 =
    %% Line 49
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 50
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCloseEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCloseEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 52
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 51
		      call 'wxe_util':'call'
			  (2789, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canVeto',1}}] )
	    -| ['compiler_generated'] )
	end
'getLoggingOff'/1 =
    %% Line 57
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 58
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCloseEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCloseEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 60
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 59
		      call 'wxe_util':'call'
			  (2790, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLoggingOff',1}}] )
	    -| ['compiler_generated'] )
	end
'setCanVeto'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},CanVeto>
	      when %% Line 66
		call 'erlang':'is_boolean'
		    (CanVeto) ->
	      do  %% Line 67
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCloseEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCloseEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 69
		      call 'wxe_util':'from_bool'
			  (CanVeto)
		  in  let <_cor5> =
			  %% Line 69
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 68
			  call 'wxe_util':'cast'
			      (2791, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setCanVeto',2}}] )
	    -| ['compiler_generated'] )
	end
'setLoggingOff'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},LogOff>
	      when %% Line 75
		call 'erlang':'is_boolean'
		    (LogOff) ->
	      do  %% Line 76
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCloseEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCloseEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 78
		      call 'wxe_util':'from_bool'
			  (LogOff)
		  in  let <_cor5> =
			  %% Line 78
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 77
			  call 'wxe_util':'cast'
			      (2792, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setLoggingOff',2}}] )
	    -| ['compiler_generated'] )
	end
'veto'/1 =
    %% Line 84
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 85
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 86
	      apply 'veto'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'veto',1}}] )
	    -| ['compiler_generated'] )
	end
'veto'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 93
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 94
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxCloseEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxCloseEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 95
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'veto',Veto},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Veto)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 96
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-veto/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 97
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 97
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 99
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 98
				  call 'wxe_util':'cast'
				      (2793, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'veto',2}}] )
	    -| ['compiler_generated'] )
	end
'stopPropagation'/1 =
    %% Line 103
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 105
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 107
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 109
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 113
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 115
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 117
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 119
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxCloseEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxCloseEvent', _cor0)
end