module 'wxGraphicsRenderer' ['createBrush'/2,
			     'createContext'/2,
			     'createFont'/2,
			     'createFont'/3,
			     'createLinearGradientBrush'/7,
			     'createMatrix'/1,
			     'createMatrix'/2,
			     'createPath'/1,
			     'createPen'/2,
			     'createRadialGradientBrush'/8,
			     'getDefaultRenderer'/0,
			     'module_info'/0,
			     'module_info'/1,
			     'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 34
		'export_type' =
		    %% Line 34
		    [{'wxGraphicsRenderer',0}],
		%% Line 35
		'deprecated' =
		    %% Line 35
		    [{'createLinearGradientBrush',7}|[{'createRadialGradientBrush',8}]],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxGraphicsRenderer',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'getDefaultRenderer',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxGraphicsRenderer',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'createContext',2},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'This'}|[{'var',48,'Dc'}]]}|[{'remote_type',48,[{'atom',48,'wxGraphicsContext'}|[{'atom',48,'wxGraphicsContext'}|[[]]]]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'This'}|[{'type',49,'wxGraphicsRenderer',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Dc'}|[{'type',49,'union',[{'remote_type',49,[{'atom',49,'wxWindowDC'}|[{'atom',49,'wxWindowDC'}|[[]]]]}|[{'remote_type',49,[{'atom',49,'wxWindow'}|[{'atom',49,'wxWindow'}|[[]]]]}]]}]]]]}]]]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'createPen',2},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'This'}|[{'var',62,'Pen'}]]}|[{'remote_type',62,[{'atom',62,'wxGraphicsPen'}|[{'atom',62,'wxGraphicsPen'}|[[]]]]}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'This'}|[{'type',63,'wxGraphicsRenderer',[]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Pen'}|[{'remote_type',63,[{'atom',63,'wxPen'}|[{'atom',63,'wxPen'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'createBrush',2},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'This'}|[{'var',71,'Brush'}]]}|[{'remote_type',71,[{'atom',71,'wxGraphicsBrush'}|[{'atom',71,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'This'}|[{'type',72,'wxGraphicsRenderer',[]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Brush'}|[{'remote_type',72,[{'atom',72,'wxBrush'}|[{'atom',72,'wxBrush'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'createLinearGradientBrush',7},[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'This'}|[{'var',80,'X1'}|[{'var',80,'Y1'}|[{'var',80,'X2'}|[{'var',80,'Y2'}|[{'var',80,'C1'}|[{'var',80,'C2'}]]]]]]]}|[{'remote_type',80,[{'atom',80,'wxGraphicsBrush'}|[{'atom',80,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'This'}|[{'type',81,'wxGraphicsRenderer',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'X1'}|[{'type',81,'number',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Y1'}|[{'type',81,'number',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'X2'}|[{'type',81,'number',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Y2'}|[{'type',81,'number',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'C1'}|[{'remote_type',81,[{'atom',81,'wx'}|[{'atom',81,'wx_colour'}|[[]]]]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'C2'}|[{'remote_type',81,[{'atom',81,'wx'}|[{'atom',81,'wx_colour'}|[[]]]]}]]]]}]]]]]]]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'createRadialGradientBrush',8},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}|[{'var',89,'Xo'}|[{'var',89,'Yo'}|[{'var',89,'Xc'}|[{'var',89,'Yc'}|[{'var',89,'Radius'}|[{'var',89,'OColor'}|[{'var',89,'CColor'}]]]]]]]]}|[{'remote_type',89,[{'atom',89,'wxGraphicsBrush'}|[{'atom',89,'wxGraphicsBrush'}|[[]]]]}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxGraphicsRenderer',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Xo'}|[{'type',90,'number',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Yo'}|[{'type',90,'number',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Xc'}|[{'type',90,'number',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Yc'}|[{'type',90,'number',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Radius'}|[{'type',90,'number',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'OColor'}|[{'remote_type',90,[{'atom',90,'wx'}|[{'atom',90,'wx_colour'}|[[]]]]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'CColor'}|[{'remote_type',90,[{'atom',90,'wx'}|[{'atom',90,'wx_colour'}|[[]]]]}]]]]}]]]]]]]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'createFont',2},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[{'var',98,'This'}|[{'var',98,'Font'}]]}|[{'remote_type',98,[{'atom',98,'wxGraphicsFont'}|[{'atom',98,'wxGraphicsFont'}|[[]]]]}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'This'}|[{'type',99,'wxGraphicsRenderer',[]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Font'}|[{'remote_type',99,[{'atom',99,'wxFont'}|[{'atom',99,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'createFont',3},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'This'}|[{'var',106,'Font'}|[{'type',106,'list',[{'var',106,'Option'}]}]]]}|[{'remote_type',106,[{'atom',106,'wxGraphicsFont'}|[{'atom',106,'wxGraphicsFont'}|[[]]]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'This'}|[{'type',107,'wxGraphicsRenderer',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Font'}|[{'remote_type',107,[{'atom',107,'wxFont'}|[{'atom',107,'wxFont'}|[[]]]]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Option'}|[{'type',108,'tuple',[{'atom',108,'col'}|[{'remote_type',108,[{'atom',108,'wx'}|[{'atom',108,'wx_colour'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'createMatrix',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'This'}]}|[{'remote_type',120,[{'atom',120,'wxGraphicsMatrix'}|[{'atom',120,'wxGraphicsMatrix'}|[[]]]]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'This'}|[{'type',121,'wxGraphicsRenderer',[]}]]]]}]]]}]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'createMatrix',2},[{'type',128,'bounded_fun',[{'type',128,'fun',[{'type',128,'product',[{'var',128,'This'}|[{'type',128,'list',[{'var',128,'Option'}]}]]}|[{'remote_type',128,[{'atom',128,'wxGraphicsMatrix'}|[{'atom',128,'wxGraphicsMatrix'}|[[]]]]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'This'}|[{'type',129,'wxGraphicsRenderer',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Option'}|[{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'a'}|[{'type',130,'number',[]}]]}|[{'type',131,'tuple',[{'atom',131,'b'}|[{'type',131,'number',[]}]]}|[{'type',132,'tuple',[{'atom',132,'c'}|[{'type',132,'number',[]}]]}|[{'type',133,'tuple',[{'atom',133,'d'}|[{'type',133,'number',[]}]]}|[{'type',134,'tuple',[{'atom',134,'tx'}|[{'type',134,'number',[]}]]}|[{'type',135,'tuple',[{'atom',135,'ty'}|[{'type',135,'number',[]}]]}]]]]]]}]]]]}]]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'createPath',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'This'}]}|[{'remote_type',151,[{'atom',151,'wxGraphicsPath'}|[{'atom',151,'wxGraphicsPath'}|[[]]]]}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'This'}|[{'type',152,'wxGraphicsRenderer',[]}]]]]}]]]}]}]]
'parent_class'/1 =
    %% Line 38
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxGraphicsRenderer'})
'getDefaultRenderer'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'wxe_util':'call'
	    (839, %% Line 45
		  #{}#)
'createContext'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',DcRef,DcT,_cor20}> when 'true' ->
	      do  %% Line 51
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 52
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (DcT,
					   'wxWindowDC') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call DcT:'parent_class'
					('wxWindowDC')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <_cor6> ->
			  _cor6
		      catch <_cor9,_cor8,_cor7> ->
			  'false'
		  in  let <_cor14> =
			  %% Line 52
			  case _cor10 of
			    %% Line 53
			    <'true'> when 'true' ->
				%% Line 54
				840
			    %% Line 55
			    <_cor24> when 'true' ->
				do  ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (DcT,
						     'wxWindow') ->
					      'ok'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call DcT:'parent_class'
						  ('wxWindow')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				    %% Line 56
				    841
			  end
		      in  let <_cor16> =
			      %% Line 59
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<DcRef>(32,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 58
			      call 'wxe_util':'call'
				  (_cor14, _cor16)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'createContext',2}}] )
	    -| ['compiler_generated'] )
	end
'createPen'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PenRef,PenT,_cor10}> when 'true' ->
	      do  %% Line 65
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 66
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PenT,
				       'wxPen') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PenT:'parent_class'
				    ('wxPen')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 68
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PenRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 67
			  call 'wxe_util':'call'
			      (842, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'createPen',2}}] )
	    -| ['compiler_generated'] )
	end
'createBrush'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BrushRef,BrushT,_cor10}> when 'true' ->
	      do  %% Line 74
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 75
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BrushT,
				       'wxBrush') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BrushT:'parent_class'
				    ('wxBrush')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 77
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BrushRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 76
			  call 'wxe_util':'call'
			      (843, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'createBrush',2}}] )
	    -| ['compiler_generated'] )
	end
'createLinearGradientBrush'/7 =
    %% Line 82
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},X1,Y1,X2,Y2,C1,C2>
	      when let <_cor16> =
		    %% Line 83
		    try
			let <_cor7> =
			    call 'erlang':'is_number'
				(X1)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (Y1)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(X2)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (Y2)
				    in  let <_cor11> =
					    call 'erlang':'tuple_size'
						(C1)
					in  let <_cor12> =
						call 'erlang':'=:='
						    (_cor11, 3)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor10, _cor12)
						in  let <_cor14> =
							call 'erlang':'and'
							    (_cor9, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'and'
								(_cor8, _cor14)
							in  call 'erlang':'and'
								(_cor7, _cor15)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor21> =
			%% Line 83
			try
			    let <_cor17> =
				call 'erlang':'tuple_size'
				    (C1)
			    in  let <_cor18> =
				    call 'erlang':'=:='
					(_cor17, 4)
				in  let <_cor19> =
					call 'erlang':'tuple_size'
					    (C2)
				    in  let <_cor20> =
					    call 'erlang':'=:='
						(_cor19, 3)
					in  call 'erlang':'and'
						(_cor18, _cor20)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor23> =
			    %% Line 83
			    try
				let <_cor22> =
				    call 'erlang':'tuple_size'
					(C2)
				in  call 'erlang':'=:='
					(_cor22, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor24> =
				%% Line 83
				call 'erlang':'or'
				    (_cor21, _cor23)
			    in  %% Line 83
				call 'erlang':'or'
				    (_cor16, _cor24) ->
	      do  %% Line 84
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor28> =
		      %% Line 86
		      call 'wxe_util':'colour_bin'
			  (C1)
		  in  let <_cor27> =
			  %% Line 86
			  call 'wxe_util':'colour_bin'
			      (C2)
		      in  let <_cor29> =
			      %% Line 86
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<X1>(64,1,'float',['unsigned'|['native']]),
				#<Y1>(64,1,'float',['unsigned'|['native']]),
				#<X2>(64,1,'float',['unsigned'|['native']]),
				#<Y2>(64,1,'float',['unsigned'|['native']]),
				#<_cor28>(16,8,'binary',['unsigned'|['big']]),
				#<_cor27>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 85
			      call 'wxe_util':'call'
				  (844, _cor29)
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'createLinearGradientBrush',7}}] )
	    -| ['compiler_generated'] )
	end
'createRadialGradientBrush'/8 =
    %% Line 91
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor41},Xo,Yo,Xc,Yc,Radius,OColor,CColor>
	      when let <_cor19> =
		    %% Line 92
		    try
			let <_cor8> =
			    call 'erlang':'is_number'
				(Xo)
			in  let <_cor9> =
				call 'erlang':'is_number'
				    (Yo)
			    in  let <_cor10> =
				    call 'erlang':'is_number'
					(Xc)
				in  let <_cor11> =
					call 'erlang':'is_number'
					    (Yc)
				    in  let <_cor12> =
					    call 'erlang':'is_number'
						(Radius)
					in  let <_cor13> =
						call 'erlang':'tuple_size'
						    (OColor)
					    in  let <_cor14> =
						    call 'erlang':'=:='
							(_cor13, 3)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor12, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor11, _cor15)
							in  let <_cor17> =
								call 'erlang':'and'
								    (_cor10, _cor16)
							    in  let <_cor18> =
								    call 'erlang':'and'
									(_cor9, _cor17)
								in  call 'erlang':'and'
									(_cor8, _cor18)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor24> =
			%% Line 92
			try
			    let <_cor20> =
				call 'erlang':'tuple_size'
				    (OColor)
			    in  let <_cor21> =
				    call 'erlang':'=:='
					(_cor20, 4)
				in  let <_cor22> =
					call 'erlang':'tuple_size'
					    (CColor)
				    in  let <_cor23> =
					    call 'erlang':'=:='
						(_cor22, 3)
					in  call 'erlang':'and'
						(_cor21, _cor23)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  let <_cor26> =
			    %% Line 92
			    try
				let <_cor25> =
				    call 'erlang':'tuple_size'
					(CColor)
				in  call 'erlang':'=:='
					(_cor25, 4)
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			in  let <_cor27> =
				%% Line 92
				call 'erlang':'or'
				    (_cor24, _cor26)
			    in  %% Line 92
				call 'erlang':'or'
				    (_cor19, _cor27) ->
	      do  %% Line 93
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor31> =
		      %% Line 95
		      call 'wxe_util':'colour_bin'
			  (OColor)
		  in  let <_cor30> =
			  %% Line 95
			  call 'wxe_util':'colour_bin'
			      (CColor)
		      in  let <_cor32> =
			      %% Line 95
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<Xo>(64,1,'float',['unsigned'|['native']]),
				#<Yo>(64,1,'float',['unsigned'|['native']]),
				#<Xc>(64,1,'float',['unsigned'|['native']]),
				#<Yc>(64,1,'float',['unsigned'|['native']]),
				#<Radius>(64,1,'float',['unsigned'|['native']]),
				#<_cor31>(16,8,'binary',['unsigned'|['big']]),
				#<_cor30>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 94
			      call 'wxe_util':'call'
				  (845, _cor32)
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'createRadialGradientBrush',8}}] )
	    -| ['compiler_generated'] )
	end
'createFont'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Font = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 103
	      apply 'createFont'/3
		  (This, Font, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'createFont',2}}] )
	    -| ['compiler_generated'] )
	end
'createFont'/3 =
    %% Line 109
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{'wx_ref',FontRef,FontT,_cor21},Options>
	      when %% Line 110
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 111
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 112
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 113
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'col',Col},Acc> when 'true' ->
				      let <_cor7> =
					  call 'wxe_util':'colour_bin'
					      (Col)
				      in  let <_cor8> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<_cor7>(16,8,'binary',['unsigned'|['big']]),
						#<0>(32,1,'integer',['unsigned'|['big']])}#
					  in  [_cor8|Acc]
				  %% Line 114
				  <BadOpt,_cor22> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-createFont/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 115
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 115
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor16> =
				      %% Line 117
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FontRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 116
				      call 'wxe_util':'call'
					  (846, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'createFont',3}}] )
	    -| ['compiler_generated'] )
	end
'createMatrix'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 124
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 125
	      apply 'createMatrix'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'createMatrix',1}}] )
	    -| ['compiler_generated'] )
	end
'createMatrix'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Options>
	      when %% Line 137
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 138
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 139
		      ( fun (_cor11,_cor10) ->
			    case <_cor11,_cor10> of
			      <{'a',A},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<A>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 140
			      <{'b',B},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<B>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 141
			      <{'c',C},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<C>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor6|Acc]
			      %% Line 142
			      <{'d',D},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<D>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 143
			      <{'tx',Tx},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<5>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Tx>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 144
			      <{'ty',Ty},Acc> when 'true' ->
				  let <_cor9> =
				      #{#<6>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']]),
					#<Ty>(64,1,'float',['unsigned'|['native']])}#
				  in  [_cor9|Acc]
			      %% Line 145
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-createMatrix/2-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 146
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 146
			      call 'erlang':'list_to_binary'
				  (_cor15)
			  in  let <_cor17> =
				  %% Line 148
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 147
				  call 'wxe_util':'call'
				      (847, _cor17)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'createMatrix',2}}] )
	    -| ['compiler_generated'] )
	end
'createPath'/1 =
    %% Line 153
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 154
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsRenderer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsRenderer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 156
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 155
		      call 'wxe_util':'call'
			  (848, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'createPath',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsRenderer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsRenderer', _cor0)
end