module 'wxMemoryDC' ['blit'/5,
		     'blit'/6,
		     'calcBoundingBox'/3,
		     'clear'/1,
		     'computeScaleAndOrigin'/1,
		     'crossHair'/2,
		     'destroy'/1,
		     'destroyClippingRegion'/1,
		     'deviceToLogicalX'/2,
		     'deviceToLogicalXRel'/2,
		     'deviceToLogicalY'/2,
		     'deviceToLogicalYRel'/2,
		     'drawArc'/4,
		     'drawBitmap'/3,
		     'drawBitmap'/4,
		     'drawCheckMark'/2,
		     'drawCircle'/3,
		     'drawEllipse'/2,
		     'drawEllipse'/3,
		     'drawEllipticArc'/5,
		     'drawIcon'/3,
		     'drawLabel'/3,
		     'drawLabel'/4,
		     'drawLine'/3,
		     'drawLines'/2,
		     'drawLines'/3,
		     'drawPoint'/2,
		     'drawPolygon'/2,
		     'drawPolygon'/3,
		     'drawRectangle'/2,
		     'drawRectangle'/3,
		     'drawRotatedText'/4,
		     'drawRoundedRectangle'/3,
		     'drawRoundedRectangle'/4,
		     'drawText'/3,
		     'endDoc'/1,
		     'endPage'/1,
		     'floodFill'/3,
		     'floodFill'/4,
		     'getBackground'/1,
		     'getBackgroundMode'/1,
		     'getBrush'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getClippingBox'/1,
		     'getFont'/1,
		     'getLayoutDirection'/1,
		     'getLogicalFunction'/1,
		     'getMapMode'/1,
		     'getMultiLineTextExtent'/2,
		     'getMultiLineTextExtent'/3,
		     'getPPI'/1,
		     'getPartialTextExtents'/2,
		     'getPen'/1,
		     'getPixel'/2,
		     'getSize'/1,
		     'getSizeMM'/1,
		     'getTextBackground'/1,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getTextForeground'/1,
		     'getUserScale'/1,
		     'gradientFillConcentric'/4,
		     'gradientFillConcentric'/5,
		     'gradientFillLinear'/4,
		     'gradientFillLinear'/5,
		     'isOk'/1,
		     'logicalToDeviceX'/2,
		     'logicalToDeviceXRel'/2,
		     'logicalToDeviceY'/2,
		     'logicalToDeviceYRel'/2,
		     'maxX'/1,
		     'maxY'/1,
		     'minX'/1,
		     'minY'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'new'/0,
		     'new'/1,
		     'parent_class'/1,
		     'resetBoundingBox'/1,
		     'selectObject'/2,
		     'selectObjectAsSource'/2,
		     'setAxisOrientation'/3,
		     'setBackground'/2,
		     'setBackgroundMode'/2,
		     'setBrush'/2,
		     'setClippingRegion'/2,
		     'setClippingRegion'/3,
		     'setDeviceOrigin'/3,
		     'setFont'/2,
		     'setLayoutDirection'/2,
		     'setLogicalFunction'/2,
		     'setMapMode'/2,
		     'setPalette'/2,
		     'setPen'/2,
		     'setTextBackground'/2,
		     'setTextForeground'/2,
		     'setUserScale'/3,
		     'startDoc'/2,
		     'startPage'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 55
		'export_type' =
		    %% Line 55
		    [{'wxMemoryDC',0}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxMemoryDC',{'remote_type',62,[{'atom',62,'wx'}|[{'atom',62,'wx_object'}|[[]]]]},[]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'new',0},[{'type',64,'fun',[{'type',64,'product',[]}|[{'type',64,'wxMemoryDC',[]}]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'new',1},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'Dc'}]}|[{'type',70,'wxMemoryDC',[]}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Dc'}|[{'type',71,'union',[{'remote_type',71,[{'atom',71,'wxDC'}|[{'atom',71,'wxDC'}|[[]]]]}|[{'remote_type',71,[{'atom',71,'wxBitmap'}|[{'atom',71,'wxBitmap'}|[[]]]]}]]}]]]]}]]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'selectObject',2},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'This'}|[{'var',83,'Bmp'}]]}|[{'atom',83,'ok'}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'This'}|[{'type',84,'wxMemoryDC',[]}]]]]}|[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Bmp'}|[{'remote_type',84,[{'atom',84,'wxBitmap'}|[{'atom',84,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'selectObjectAsSource',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'This'}|[{'var',92,'Bmp'}]]}|[{'atom',92,'ok'}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'This'}|[{'type',93,'wxMemoryDC',[]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Bmp'}|[{'remote_type',93,[{'atom',93,'wxBitmap'}|[{'atom',93,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'destroy',1},[{'type',101,'fun',[{'type',101,'product',[{'ann_type',101,[{'var',101,'This'}|[{'type',101,'wxMemoryDC',[]}]]}]}|[{'atom',101,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <'wxDC'> when 'true' ->
	      'true'
	  %% Line 60
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxMemoryDC'})
	end
'new'/0 =
    %% Line 65
    fun () ->
	%% Line 66
	call 'wxe_util':'construct'
	    (742, %% Line 67
		  #{}#)
'new'/1 =
    %% Line 72
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',DcRef,DcT,_cor15}> when 'true' ->
	      let <_cor7> =
		  %% Line 73
		  try
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DcT,
				       'wxDC') ->
				'true'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DcT:'parent_class'
				    ('wxDC')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      'false'
	      in  let <_cor11> =
		      %% Line 73
		      case _cor7 of
			%% Line 74
			<'true'> when 'true' ->
			    %% Line 75
			    741
			%% Line 76
			<_cor19> when 'true' ->
			    do  ( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(DcT,
						 'wxBitmap') ->
					  'ok'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  call DcT:'parent_class'
					      ('wxBitmap')
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
				%% Line 77
				740
		      end
		  in  let <_cor13> =
			  %% Line 80
			  #{#<DcRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 79
			  call 'wxe_util':'construct'
			      (_cor11, _cor13)
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'selectObject'/2 =
    %% Line 85
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BmpRef,BmpT,_cor10}> when 'true' ->
	      do  %% Line 86
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMemoryDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMemoryDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 87
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 89
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BmpRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 88
			  call 'wxe_util':'cast'
			      (745, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'selectObject',2}}] )
	    -| ['compiler_generated'] )
	end
'selectObjectAsSource'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BmpRef,BmpT,_cor10}> when 'true' ->
	      do  %% Line 95
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMemoryDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMemoryDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 96
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BmpT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BmpT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 98
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BmpRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 97
			  call 'wxe_util':'cast'
			      (746, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'selectObjectAsSource',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 103
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxMemoryDC') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxMemoryDC')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 104
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 105
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'startPage'/1 =
    %% Line 108
    fun (_cor0) ->
	call 'wxDC':'startPage'
	    (_cor0)
'startDoc'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	call 'wxDC':'startDoc'
	    (_cor1, _cor0)
'setUserScale'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setUserScale'
	    (_cor2, _cor1, _cor0)
'setTextForeground'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	call 'wxDC':'setTextForeground'
	    (_cor1, _cor0)
'setTextBackground'/2 =
    %% Line 116
    fun (_cor1,_cor0) ->
	call 'wxDC':'setTextBackground'
	    (_cor1, _cor0)
'setPen'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	call 'wxDC':'setPen'
	    (_cor1, _cor0)
'setPalette'/2 =
    %% Line 120
    fun (_cor1,_cor0) ->
	call 'wxDC':'setPalette'
	    (_cor1, _cor0)
'setMapMode'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	call 'wxDC':'setMapMode'
	    (_cor1, _cor0)
'setLogicalFunction'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	call 'wxDC':'setLogicalFunction'
	    (_cor1, _cor0)
'setLayoutDirection'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	call 'wxDC':'setLayoutDirection'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 128
    fun (_cor1,_cor0) ->
	call 'wxDC':'setFont'
	    (_cor1, _cor0)
'setDeviceOrigin'/3 =
    %% Line 130
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setDeviceOrigin'
	    (_cor2, _cor1, _cor0)
'setClippingRegion'/3 =
    %% Line 132
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setClippingRegion'
	    (_cor2, _cor1, _cor0)
'setClippingRegion'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	call 'wxDC':'setClippingRegion'
	    (_cor1, _cor0)
'setBrush'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBrush'
	    (_cor1, _cor0)
'setBackgroundMode'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBackgroundMode'
	    (_cor1, _cor0)
'setBackground'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	call 'wxDC':'setBackground'
	    (_cor1, _cor0)
'setAxisOrientation'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'setAxisOrientation'
	    (_cor2, _cor1, _cor0)
'resetBoundingBox'/1 =
    %% Line 144
    fun (_cor0) ->
	call 'wxDC':'resetBoundingBox'
	    (_cor0)
'isOk'/1 =
    %% Line 146
    fun (_cor0) ->
	call 'wxDC':'isOk'
	    (_cor0)
'minY'/1 =
    %% Line 148
    fun (_cor0) ->
	call 'wxDC':'minY'
	    (_cor0)
'minX'/1 =
    %% Line 150
    fun (_cor0) ->
	call 'wxDC':'minX'
	    (_cor0)
'maxY'/1 =
    %% Line 152
    fun (_cor0) ->
	call 'wxDC':'maxY'
	    (_cor0)
'maxX'/1 =
    %% Line 154
    fun (_cor0) ->
	call 'wxDC':'maxX'
	    (_cor0)
'logicalToDeviceYRel'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceYRel'
	    (_cor1, _cor0)
'logicalToDeviceY'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceY'
	    (_cor1, _cor0)
'logicalToDeviceXRel'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceXRel'
	    (_cor1, _cor0)
'logicalToDeviceX'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	call 'wxDC':'logicalToDeviceX'
	    (_cor1, _cor0)
'gradientFillLinear'/5 =
    %% Line 164
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillLinear'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'gradientFillLinear'/4 =
    %% Line 166
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillLinear'
	    (_cor3, _cor2, _cor1, _cor0)
'gradientFillConcentric'/5 =
    %% Line 168
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillConcentric'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'gradientFillConcentric'/4 =
    %% Line 170
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'gradientFillConcentric'
	    (_cor3, _cor2, _cor1, _cor0)
'getUserScale'/1 =
    %% Line 172
    fun (_cor0) ->
	call 'wxDC':'getUserScale'
	    (_cor0)
'getTextForeground'/1 =
    %% Line 174
    fun (_cor0) ->
	call 'wxDC':'getTextForeground'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	call 'wxDC':'getTextExtent'
	    (_cor1, _cor0)
'getTextBackground'/1 =
    %% Line 180
    fun (_cor0) ->
	call 'wxDC':'getTextBackground'
	    (_cor0)
'getSizeMM'/1 =
    %% Line 182
    fun (_cor0) ->
	call 'wxDC':'getSizeMM'
	    (_cor0)
'getSize'/1 =
    %% Line 184
    fun (_cor0) ->
	call 'wxDC':'getSize'
	    (_cor0)
'getPPI'/1 =
    %% Line 186
    fun (_cor0) ->
	call 'wxDC':'getPPI'
	    (_cor0)
'getPixel'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	call 'wxDC':'getPixel'
	    (_cor1, _cor0)
'getPen'/1 =
    %% Line 190
    fun (_cor0) ->
	call 'wxDC':'getPen'
	    (_cor0)
'getPartialTextExtents'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	call 'wxDC':'getPartialTextExtents'
	    (_cor1, _cor0)
'getMultiLineTextExtent'/3 =
    %% Line 194
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'getMultiLineTextExtent'
	    (_cor2, _cor1, _cor0)
'getMultiLineTextExtent'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	call 'wxDC':'getMultiLineTextExtent'
	    (_cor1, _cor0)
'getMapMode'/1 =
    %% Line 198
    fun (_cor0) ->
	call 'wxDC':'getMapMode'
	    (_cor0)
'getLogicalFunction'/1 =
    %% Line 200
    fun (_cor0) ->
	call 'wxDC':'getLogicalFunction'
	    (_cor0)
'getLayoutDirection'/1 =
    %% Line 202
    fun (_cor0) ->
	call 'wxDC':'getLayoutDirection'
	    (_cor0)
'getFont'/1 =
    %% Line 204
    fun (_cor0) ->
	call 'wxDC':'getFont'
	    (_cor0)
'getClippingBox'/1 =
    %% Line 206
    fun (_cor0) ->
	call 'wxDC':'getClippingBox'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 208
    fun (_cor0) ->
	call 'wxDC':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 210
    fun (_cor0) ->
	call 'wxDC':'getCharHeight'
	    (_cor0)
'getBrush'/1 =
    %% Line 212
    fun (_cor0) ->
	call 'wxDC':'getBrush'
	    (_cor0)
'getBackgroundMode'/1 =
    %% Line 214
    fun (_cor0) ->
	call 'wxDC':'getBackgroundMode'
	    (_cor0)
'getBackground'/1 =
    %% Line 216
    fun (_cor0) ->
	call 'wxDC':'getBackground'
	    (_cor0)
'floodFill'/4 =
    %% Line 218
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'floodFill'
	    (_cor3, _cor2, _cor1, _cor0)
'floodFill'/3 =
    %% Line 220
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'floodFill'
	    (_cor2, _cor1, _cor0)
'endPage'/1 =
    %% Line 222
    fun (_cor0) ->
	call 'wxDC':'endPage'
	    (_cor0)
'endDoc'/1 =
    %% Line 224
    fun (_cor0) ->
	call 'wxDC':'endDoc'
	    (_cor0)
'drawText'/3 =
    %% Line 226
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawText'
	    (_cor2, _cor1, _cor0)
'drawRoundedRectangle'/4 =
    %% Line 228
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRoundedRectangle'
	    (_cor3, _cor2, _cor1, _cor0)
'drawRoundedRectangle'/3 =
    %% Line 230
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRoundedRectangle'
	    (_cor2, _cor1, _cor0)
'drawRotatedText'/4 =
    %% Line 232
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRotatedText'
	    (_cor3, _cor2, _cor1, _cor0)
'drawRectangle'/3 =
    %% Line 234
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawRectangle'
	    (_cor2, _cor1, _cor0)
'drawRectangle'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawRectangle'
	    (_cor1, _cor0)
'drawPoint'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawPoint'
	    (_cor1, _cor0)
'drawPolygon'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawPolygon'
	    (_cor2, _cor1, _cor0)
'drawPolygon'/2 =
    %% Line 242
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawPolygon'
	    (_cor1, _cor0)
'drawLines'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLines'
	    (_cor2, _cor1, _cor0)
'drawLines'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawLines'
	    (_cor1, _cor0)
'drawLine'/3 =
    %% Line 248
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLine'
	    (_cor2, _cor1, _cor0)
'drawLabel'/4 =
    %% Line 250
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLabel'
	    (_cor3, _cor2, _cor1, _cor0)
'drawLabel'/3 =
    %% Line 252
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawLabel'
	    (_cor2, _cor1, _cor0)
'drawIcon'/3 =
    %% Line 254
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawIcon'
	    (_cor2, _cor1, _cor0)
'drawEllipticArc'/5 =
    %% Line 256
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawEllipticArc'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'drawEllipse'/3 =
    %% Line 258
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawEllipse'
	    (_cor2, _cor1, _cor0)
'drawEllipse'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawEllipse'
	    (_cor1, _cor0)
'drawCircle'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawCircle'
	    (_cor2, _cor1, _cor0)
'drawCheckMark'/2 =
    %% Line 264
    fun (_cor1,_cor0) ->
	call 'wxDC':'drawCheckMark'
	    (_cor1, _cor0)
'drawBitmap'/4 =
    %% Line 266
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawBitmap'
	    (_cor3, _cor2, _cor1, _cor0)
'drawBitmap'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawBitmap'
	    (_cor2, _cor1, _cor0)
'drawArc'/4 =
    %% Line 270
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'drawArc'
	    (_cor3, _cor2, _cor1, _cor0)
'deviceToLogicalYRel'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalYRel'
	    (_cor1, _cor0)
'deviceToLogicalY'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalY'
	    (_cor1, _cor0)
'deviceToLogicalXRel'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalXRel'
	    (_cor1, _cor0)
'deviceToLogicalX'/2 =
    %% Line 278
    fun (_cor1,_cor0) ->
	call 'wxDC':'deviceToLogicalX'
	    (_cor1, _cor0)
'destroyClippingRegion'/1 =
    %% Line 280
    fun (_cor0) ->
	call 'wxDC':'destroyClippingRegion'
	    (_cor0)
'crossHair'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	call 'wxDC':'crossHair'
	    (_cor1, _cor0)
'computeScaleAndOrigin'/1 =
    %% Line 284
    fun (_cor0) ->
	call 'wxDC':'computeScaleAndOrigin'
	    (_cor0)
'clear'/1 =
    %% Line 286
    fun (_cor0) ->
	call 'wxDC':'clear'
	    (_cor0)
'calcBoundingBox'/3 =
    %% Line 288
    fun (_cor2,_cor1,_cor0) ->
	call 'wxDC':'calcBoundingBox'
	    (_cor2, _cor1, _cor0)
'blit'/6 =
    %% Line 290
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'blit'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'blit'/5 =
    %% Line 292
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxDC':'blit'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxMemoryDC')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxMemoryDC', _cor0)
end