module 'wxMask' ['create'/2,
		 'create'/3,
		 'destroy'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'new'/0,
		 'new'/1,
		 'new'/2,
		 'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxMask',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxMask',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'new',0},[{'type',38,'fun',[{'type',38,'product',[]}|[{'type',38,'wxMask',[]}]]}]}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'new',1},[{'type',44,'bounded_fun',[{'type',44,'fun',[{'type',44,'product',[{'var',44,'Bitmap'}]}|[{'type',44,'wxMask',[]}]]}|[[{'type',45,'constraint',[{'atom',45,'is_subtype'}|[[{'var',45,'Bitmap'}|[{'remote_type',45,[{'atom',45,'wxBitmap'}|[{'atom',45,'wxBitmap'}|[[]]]]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',2},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Bitmap'}|[{'var',56,'PaletteIndex'}]]}|[{'type',56,'wxMask',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Bitmap'}|[{'remote_type',57,[{'atom',57,'wxBitmap'}|[{'atom',57,'wxBitmap'}|[[]]]]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'PaletteIndex'}|[{'type',57,'integer',[]}]]]]}]]]]}|[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Bitmap'}|[{'var',58,'Colour'}]]}|[{'type',58,'wxMask',[]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Bitmap'}|[{'remote_type',59,[{'atom',59,'wxBitmap'}|[{'atom',59,'wxBitmap'}|[[]]]]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Colour'}|[{'remote_type',59,[{'atom',59,'wx'}|[{'atom',59,'wx_colour'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'create',2},[{'type',72,'bounded_fun',[{'type',72,'fun',[{'type',72,'product',[{'var',72,'This'}|[{'var',72,'Bitmap'}]]}|[{'type',72,'boolean',[]}]]}|[[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'This'}|[{'type',73,'wxMask',[]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Bitmap'}|[{'remote_type',73,[{'atom',73,'wxBitmap'}|[{'atom',73,'wxBitmap'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'create',3},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'This'}|[{'var',85,'Bitmap'}|[{'var',85,'PaletteIndex'}]]]}|[{'type',85,'boolean',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'This'}|[{'type',86,'wxMask',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Bitmap'}|[{'remote_type',86,[{'atom',86,'wxBitmap'}|[{'atom',86,'wxBitmap'}|[[]]]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'PaletteIndex'}|[{'type',86,'integer',[]}]]]]}]]]]]}|[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[{'var',87,'This'}|[{'var',87,'Bitmap'}|[{'var',87,'Colour'}]]]}|[{'type',87,'boolean',[]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'This'}|[{'type',88,'wxMask',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Bitmap'}|[{'remote_type',88,[{'atom',88,'wxBitmap'}|[{'atom',88,'wxBitmap'}|[[]]]]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Colour'}|[{'remote_type',88,[{'atom',88,'wx'}|[{'atom',88,'wx_colour'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'destroy',1},[{'type',103,'fun',[{'type',103,'product',[{'ann_type',103,[{'var',103,'This'}|[{'type',103,'wxMask',[]}]]}]}|[{'atom',103,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxMask'})
'new'/0 =
    %% Line 39
    fun () ->
	%% Line 40
	call 'wxe_util':'construct'
	    (1073, %% Line 41
		   #{}#)
'new'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',BitmapRef,BitmapT,_cor5}> when 'true' ->
	      do  %% Line 47
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (BitmapT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call BitmapT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 49
		      #{#<BitmapRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 48
		      call 'wxe_util':'construct'
			  (1076, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',BitmapRef,BitmapT,_cor15},PaletteIndex>
	      when %% Line 61
		call 'erlang':'is_integer'
		    (PaletteIndex) ->
	      do  %% Line 62
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (BitmapT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call BitmapT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 64
		      #{#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
			#<PaletteIndex>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 63
		      call 'wxe_util':'construct'
			  (1075, _cor4)
	  %% Line 65
	  <{'wx_ref',BitmapRef,BitmapT,_cor16},Colour>
	      when let <_cor6> =
		    %% Line 66
		    try
			let <_cor5> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor5, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 66
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 66
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 67
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (BitmapT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call BitmapT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 69
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor12> =
			  %% Line 69
			  #{#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 68
			  call 'wxe_util':'construct'
			      (1074, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',BitmapRef,BitmapT,_cor10}> when 'true' ->
	      do  %% Line 75
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMask') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMask')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 76
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 78
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BitmapRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 77
			  call 'wxe_util':'call'
			      (1080, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 89
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor21},{'wx_ref',BitmapRef,BitmapT,_cor22},PaletteIndex>
	      when %% Line 90
		call 'erlang':'is_integer'
		    (PaletteIndex) ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMask') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMask')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 92
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 94
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PaletteIndex>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 93
			  call 'wxe_util':'call'
			      (1079, _cor7)
	  %% Line 95
	  <{'wx_ref',ThisRef,ThisT,_cor23},{'wx_ref',BitmapRef,BitmapT,_cor24},Colour>
	      when let <_cor9> =
		    %% Line 96
		    try
			let <_cor8> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor8, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor11> =
			%% Line 96
			try
			    let <_cor10> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  call 'erlang':'=:='
				    (_cor10, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 96
			call 'erlang':'or'
			    (_cor9, _cor11) ->
	      do  %% Line 97
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMask') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMask')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 98
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (BitmapT,
				       'wxBitmap') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call BitmapT:'parent_class'
				    ('wxBitmap')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor16> =
			  %% Line 100
			  call 'wxe_util':'colour_bin'
			      (Colour)
		      in  let <_cor17> =
			      %% Line 100
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<BitmapRef>(32,1,'integer',['unsigned'|['native']]),
				#<_cor16>(16,8,'binary',['unsigned'|['big']])}#
			  in  %% Line 99
			      call 'wxe_util':'call'
				  (1078, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 104
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 105
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxMask') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxMask')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 106
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 107
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxMask')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxMask', _cor0)
end