module 'wxHelpEvent' ['getId'/1,
		      'getOrigin'/1,
		      'getPosition'/1,
		      'getSkipped'/1,
		      'getTimestamp'/1,
		      'isCommandEvent'/1,
		      'module_info'/0,
		      'module_info'/1,
		      'parent_class'/1,
		      'resumePropagation'/2,
		      'setOrigin'/2,
		      'setPosition'/2,
		      'shouldPropagate'/1,
		      'skip'/1,
		      'skip'/2,
		      'stopPropagation'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 40
		'export_type' =
		    %% Line 40
		    [{'wxHelpEvent',0}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxHelpEvent',{'remote_type',45,[{'atom',45,'wx'}|[{'atom',45,'wx_object'}|[[]]]]},[]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'getOrigin',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'This'}]}|[{'remote_type',48,[{'atom',48,'wx'}|[{'atom',48,'wx_enum'}|[[]]]]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'This'}|[{'type',49,'wxHelpEvent',[]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'getPosition',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'This'}]}|[{'type',56,'tuple',[{'ann_type',56,[{'var',56,'X'}|[{'type',56,'integer',[]}]]}|[{'ann_type',56,[{'var',56,'Y'}|[{'type',56,'integer',[]}]]}]]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'This'}|[{'type',57,'wxHelpEvent',[]}]]]]}]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'setOrigin',2},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'This'}|[{'var',65,'Origin'}]]}|[{'atom',65,'ok'}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'This'}|[{'type',66,'wxHelpEvent',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Origin'}|[{'remote_type',66,[{'atom',66,'wx'}|[{'atom',66,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'setPosition',2},[{'type',74,'bounded_fun',[{'type',74,'fun',[{'type',74,'product',[{'var',74,'This'}|[{'var',74,'Pos'}]]}|[{'atom',74,'ok'}]]}|[[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'This'}|[{'type',75,'wxHelpEvent',[]}]]]]}|[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Pos'}|[{'type',75,'tuple',[{'ann_type',75,[{'var',75,'X'}|[{'type',75,'integer',[]}]]}|[{'ann_type',75,[{'var',75,'Y'}|[{'type',75,'integer',[]}]]}]]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 42
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 43
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxHelpEvent'})
	end
'getOrigin'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 51
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHelpEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHelpEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 53
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 52
		      call 'wxe_util':'call'
			  (2839, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getOrigin',1}}] )
	    -| ['compiler_generated'] )
	end
'getPosition'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 59
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHelpEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHelpEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 61
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 60
		      call 'wxe_util':'call'
			  (2840, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'setOrigin'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Origin>
	      when %% Line 68
		call 'erlang':'is_integer'
		    (Origin) ->
	      do  %% Line 69
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHelpEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHelpEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 71
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Origin>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 70
		      call 'wxe_util':'cast'
			  (2841, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setOrigin',2}}] )
	    -| ['compiler_generated'] )
	end
'setPosition'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PosX,PosY}>
	      when let <_cor2> =
		    %% Line 77
		    call 'erlang':'is_integer'
			(PosX)
		in  let <_cor3> =
			%% Line 77
			call 'erlang':'is_integer'
			    (PosY)
		    in  %% Line 77
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 78
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHelpEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHelpEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 80
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PosX>(32,1,'integer',['unsigned'|['native']]),
			#<PosY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 79
		      call 'wxe_util':'cast'
			  (2842, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'stopPropagation'/1 =
    %% Line 84
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 88
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 90
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 94
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 96
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 98
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 100
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxHelpEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxHelpEvent', _cor0)
end