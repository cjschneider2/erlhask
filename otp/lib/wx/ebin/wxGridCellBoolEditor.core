module 'wxGridCellBoolEditor' ['beginEdit'/4,
			       'destroy'/1,
			       'endEdit'/4,
			       'handleReturn'/2,
			       'isCreated'/1,
			       'isTrueValue'/1,
			       'module_info'/0,
			       'module_info'/1,
			       'new'/0,
			       'paintBackground'/3,
			       'parent_class'/1,
			       'reset'/1,
			       'setSize'/2,
			       'show'/2,
			       'show'/3,
			       'startingClick'/1,
			       'startingKey'/2,
			       'useStringValues'/0,
			       'useStringValues'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 36
		'export_type' =
		    %% Line 36
		    [{'wxGridCellBoolEditor',0}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'wxGridCellBoolEditor',{'remote_type',43,[{'atom',43,'wx'}|[{'atom',43,'wx_object'}|[[]]]]},[]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',0},[{'type',45,'fun',[{'type',45,'product',[]}|[{'type',45,'wxGridCellBoolEditor',[]}]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'isTrueValue',1},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'Value'}]}|[{'type',51,'boolean',[]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Value'}|[{'remote_type',52,[{'atom',52,'unicode'}|[{'atom',52,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'useStringValues',0},[{'type',60,'fun',[{'type',60,'product',[]}|[{'atom',60,'ok'}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'useStringValues',1},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'type',66,'list',[{'var',66,'Option'}]}]}|[{'atom',66,'ok'}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Option'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'valueTrue'}|[{'remote_type',67,[{'atom',67,'unicode'}|[{'atom',67,'chardata'}|[[]]]]}]]}|[{'type',68,'tuple',[{'atom',68,'valueFalse'}|[{'remote_type',68,[{'atom',68,'unicode'}|[{'atom',68,'chardata'}|[[]]]]}]]}]]}]]]]}]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'destroy',1},[{'type',79,'fun',[{'type',79,'product',[{'ann_type',79,[{'var',79,'This'}|[{'type',79,'wxGridCellBoolEditor',[]}]]}]}|[{'atom',79,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 40
    fun (_cor0) ->
	case _cor0 of
	  <'wxGridCellEditor'> when 'true' ->
	      'true'
	  %% Line 41
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGridCellBoolEditor'})
	end
'new'/0 =
    %% Line 46
    fun () ->
	%% Line 47
	call 'wxe_util':'construct'
	    (574, %% Line 48
		  #{}#)
'isTrueValue'/1 =
    %% Line 53
    fun (_cor0) ->
	case _cor0 of
	  <Value>
	      when %% Line 54
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Value_UC> =
		  %% Line 55
		  call 'unicode':'characters_to_binary'
		      ([Value|[0]])
	      in  let <_cor7> =
		      %% Line 57
		      call 'erlang':'byte_size'
			  (Value_UC)
		  in  let <_cor2> =
			  %% Line 57
			  call 'erlang':'byte_size'
			      (Value_UC)
		      in  let <_cor3> =
			      %% Line 57
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 57
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 57
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 57
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 57
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Value_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 56
					      call 'wxe_util':'call'
						  (575, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'isTrueValue',1}}] )
	    -| ['compiler_generated'] )
	end
'useStringValues'/0 =
    %% Line 62
    fun () ->
	%% Line 63
	apply 'useStringValues'/1
	    ([])
'useStringValues'/1 =
    %% Line 69
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 70
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 71
		  ( fun (_cor18,_cor17) ->
			case <_cor18,_cor17> of
			  <{'valueTrue',ValueTrue},Acc> when 'true' ->
			      let <ValueTrue_UC> =
				  call 'unicode':'characters_to_binary'
				      ([ValueTrue|[0]])
			      in  let <_cor7> =
				      call 'erlang':'byte_size'
					  (ValueTrue_UC)
				  in  let <_cor2> =
					  call 'erlang':'byte_size'
					      (ValueTrue_UC)
				      in  let <_cor3> =
					      call 'erlang':'+'
						  (0, _cor2)
					  in  let <_cor4> =
						  call 'erlang':'band'
						      (_cor3, 7)
					      in  let <_cor5> =
						      call 'erlang':'-'
							  (8, _cor4)
						  in  let <_cor6> =
							  call 'erlang':'band'
							      (_cor5, 7)
						      in  let <_cor8> =
							      #{#<1>(32,1,'integer',['unsigned'|['native']]),
								#<_cor7>(32,1,'integer',['unsigned'|['native']]),
								#<ValueTrue_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
							  in  [_cor8|Acc]
			  %% Line 72
			  <{'valueFalse',ValueFalse},Acc> when 'true' ->
			      let <ValueFalse_UC> =
				  call 'unicode':'characters_to_binary'
				      ([ValueFalse|[0]])
			      in  let <_cor15> =
				      call 'erlang':'byte_size'
					  (ValueFalse_UC)
				  in  let <_cor10> =
					  call 'erlang':'byte_size'
					      (ValueFalse_UC)
				      in  let <_cor11> =
					      call 'erlang':'+'
						  (0, _cor10)
					  in  let <_cor12> =
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor13> =
						      call 'erlang':'-'
							  (8, _cor12)
						  in  let <_cor14> =
							  call 'erlang':'band'
							      (_cor13, 7)
						      in  let <_cor16> =
							      #{#<2>(32,1,'integer',['unsigned'|['native']]),
								#<_cor15>(32,1,'integer',['unsigned'|['native']]),
								#<ValueFalse_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor14,8,'integer',['unsigned'|['big']])}#
							  in  [_cor16|Acc]
			  %% Line 73
			  <BadOpt,_cor26> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-useStringValues/1-fun-0-'}}] )
	      in  let <_cor22> =
		      %% Line 74
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 74
			  call 'erlang':'list_to_binary'
			      (_cor22)
		      in  let <_cor24> =
			      %% Line 76
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 75
			      call 'wxe_util':'cast'
				  (576, _cor24)
	  ( <_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25})
		  -| [{'function_name',{'useStringValues',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 81
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGridCellBoolEditor') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGridCellBoolEditor')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 82
		      call 'wxe_util':'destroy'
			  (577, Obj)
		      %% Line 83
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'handleReturn'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'handleReturn'
	    (_cor1, _cor0)
'startingClick'/1 =
    %% Line 88
    fun (_cor0) ->
	call 'wxGridCellEditor':'startingClick'
	    (_cor0)
'startingKey'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'startingKey'
	    (_cor1, _cor0)
'reset'/1 =
    %% Line 92
    fun (_cor0) ->
	call 'wxGridCellEditor':'reset'
	    (_cor0)
'endEdit'/4 =
    %% Line 94
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'endEdit'
	    (_cor3, _cor2, _cor1, _cor0)
'beginEdit'/4 =
    %% Line 96
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'beginEdit'
	    (_cor3, _cor2, _cor1, _cor0)
'paintBackground'/3 =
    %% Line 98
    fun (_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'paintBackground'
	    (_cor2, _cor1, _cor0)
'show'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	call 'wxGridCellEditor':'show'
	    (_cor2, _cor1, _cor0)
'show'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'show'
	    (_cor1, _cor0)
'setSize'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	call 'wxGridCellEditor':'setSize'
	    (_cor1, _cor0)
'isCreated'/1 =
    %% Line 106
    fun (_cor0) ->
	call 'wxGridCellEditor':'isCreated'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridCellBoolEditor')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridCellBoolEditor', _cor0)
end