module 'wxGridCellAttr' ['getAlignment'/1,
			 'getBackgroundColour'/1,
			 'getEditor'/4,
			 'getFont'/1,
			 'getRenderer'/4,
			 'getTextColour'/1,
			 'hasAlignment'/1,
			 'hasBackgroundColour'/1,
			 'hasEditor'/1,
			 'hasFont'/1,
			 'hasRenderer'/1,
			 'hasTextColour'/1,
			 'isReadOnly'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'parent_class'/1,
			 'setAlignment'/3,
			 'setBackgroundColour'/2,
			 'setDefAttr'/2,
			 'setEditor'/2,
			 'setFont'/2,
			 'setReadOnly'/1,
			 'setReadOnly'/2,
			 'setRenderer'/2,
			 'setTextColour'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 36
		'export_type' =
		    %% Line 36
		    [{'wxGridCellAttr',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxGridCellAttr',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'setTextColour',2},[{'type',42,'bounded_fun',[{'type',42,'fun',[{'type',42,'product',[{'var',42,'This'}|[{'var',42,'ColText'}]]}|[{'atom',42,'ok'}]]}|[[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'This'}|[{'type',43,'wxGridCellAttr',[]}]]]]}|[{'type',43,'constraint',[{'atom',43,'is_subtype'}|[[{'var',43,'ColText'}|[{'remote_type',43,[{'atom',43,'wx'}|[{'atom',43,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'setBackgroundColour',2},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'This'}|[{'var',51,'ColBack'}]]}|[{'atom',51,'ok'}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'This'}|[{'type',52,'wxGridCellAttr',[]}]]]]}|[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'ColBack'}|[{'remote_type',52,[{'atom',52,'wx'}|[{'atom',52,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'setFont',2},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'var',60,'This'}|[{'var',60,'Font'}]]}|[{'atom',60,'ok'}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'This'}|[{'type',61,'wxGridCellAttr',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Font'}|[{'remote_type',61,[{'atom',61,'wxFont'}|[{'atom',61,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'setAlignment',3},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'This'}|[{'var',69,'HAlign'}|[{'var',69,'VAlign'}]]]}|[{'atom',69,'ok'}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'This'}|[{'type',70,'wxGridCellAttr',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'HAlign'}|[{'type',70,'integer',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'VAlign'}|[{'type',70,'integer',[]}]]]]}]]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'setReadOnly',1},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'This'}]}|[{'atom',78,'ok'}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'This'}|[{'type',79,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'setReadOnly',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'This'}|[{'type',86,'list',[{'var',86,'Option'}]}]]}|[{'atom',86,'ok'}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'This'}|[{'type',87,'wxGridCellAttr',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Option'}|[{'type',88,'tuple',[{'atom',88,'isReadOnly'}|[{'type',88,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'setRenderer',2},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'This'}|[{'var',99,'Renderer'}]]}|[{'atom',99,'ok'}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'This'}|[{'type',100,'wxGridCellAttr',[]}]]]]}|[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'Renderer'}|[{'remote_type',100,[{'atom',100,'wxGridCellRenderer'}|[{'atom',100,'wxGridCellRenderer'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'setEditor',2},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}|[{'var',108,'Editor'}]]}|[{'atom',108,'ok'}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxGridCellAttr',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Editor'}|[{'remote_type',109,[{'atom',109,'wxGridCellEditor'}|[{'atom',109,'wxGridCellEditor'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'hasTextColour',1},[{'type',117,'bounded_fun',[{'type',117,'fun',[{'type',117,'product',[{'var',117,'This'}]}|[{'type',117,'boolean',[]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'This'}|[{'type',118,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'hasBackgroundColour',1},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'This'}]}|[{'type',125,'boolean',[]}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'This'}|[{'type',126,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'hasFont',1},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'This'}]}|[{'type',133,'boolean',[]}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'This'}|[{'type',134,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'hasAlignment',1},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'This'}]}|[{'type',141,'boolean',[]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'This'}|[{'type',142,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'hasRenderer',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'This'}]}|[{'type',149,'boolean',[]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'This'}|[{'type',150,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'hasEditor',1},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'This'}]}|[{'type',157,'boolean',[]}]]}|[[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'This'}|[{'type',158,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'getTextColour',1},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'This'}]}|[{'remote_type',165,[{'atom',165,'wx'}|[{'atom',165,'wx_colour4'}|[[]]]]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'This'}|[{'type',166,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'getBackgroundColour',1},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}]}|[{'remote_type',173,[{'atom',173,'wx'}|[{'atom',173,'wx_colour4'}|[[]]]]}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'getFont',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'This'}]}|[{'remote_type',181,[{'atom',181,'wxFont'}|[{'atom',181,'wxFont'}|[[]]]]}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'This'}|[{'type',182,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'getAlignment',1},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'This'}]}|[{'type',189,'tuple',[{'ann_type',189,[{'var',189,'HAlign'}|[{'type',189,'integer',[]}]]}|[{'ann_type',189,[{'var',189,'VAlign'}|[{'type',189,'integer',[]}]]}]]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'This'}|[{'type',190,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'getRenderer',4},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'This'}|[{'var',197,'Grid'}|[{'var',197,'Row'}|[{'var',197,'Col'}]]]]}|[{'remote_type',197,[{'atom',197,'wxGridCellRenderer'}|[{'atom',197,'wxGridCellRenderer'}|[[]]]]}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'This'}|[{'type',198,'wxGridCellAttr',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Grid'}|[{'remote_type',198,[{'atom',198,'wxGrid'}|[{'atom',198,'wxGrid'}|[[]]]]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Row'}|[{'type',198,'integer',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Col'}|[{'type',198,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'getEditor',4},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}|[{'var',207,'Grid'}|[{'var',207,'Row'}|[{'var',207,'Col'}]]]]}|[{'remote_type',207,[{'atom',207,'wxGridCellEditor'}|[{'atom',207,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxGridCellAttr',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Grid'}|[{'remote_type',208,[{'atom',208,'wxGrid'}|[{'atom',208,'wxGrid'}|[[]]]]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Row'}|[{'type',208,'integer',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Col'}|[{'type',208,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 217
		'spec' =
		    %% Line 217
		    [{{'isReadOnly',1},[{'type',217,'bounded_fun',[{'type',217,'fun',[{'type',217,'product',[{'var',217,'This'}]}|[{'type',217,'boolean',[]}]]}|[[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'This'}|[{'type',218,'wxGridCellAttr',[]}]]]]}]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'setDefAttr',2},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'This'}|[{'var',225,'DefAttr'}]]}|[{'atom',225,'ok'}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'This'}|[{'type',226,'wxGridCellAttr',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'DefAttr'}|[{'type',226,'wxGridCellAttr',[]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 38
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxGridCellAttr'})
'setTextColour'/2 =
    %% Line 44
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColText>
	      when let <_cor3> =
		    %% Line 45
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColText)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 45
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColText)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 45
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 46
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 48
		      call 'wxe_util':'colour_bin'
			  (ColText)
		  in  let <_cor9> =
			  %% Line 48
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 47
			  call 'wxe_util':'cast'
			      (603, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setBackgroundColour'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},ColBack>
	      when let <_cor3> =
		    %% Line 54
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(ColBack)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 54
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (ColBack)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 54
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 55
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 57
		      call 'wxe_util':'colour_bin'
			  (ColBack)
		  in  let <_cor9> =
			  %% Line 57
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 56
			  call 'wxe_util':'cast'
			      (604, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setFont'/2 =
    %% Line 62
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',FontRef,FontT,_cor10}> when 'true' ->
	      do  %% Line 63
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 64
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 66
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 65
			  call 'wxe_util':'cast'
			      (605, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setAlignment'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},HAlign,VAlign>
	      when let <_cor3> =
		    %% Line 72
		    call 'erlang':'is_integer'
			(HAlign)
		in  let <_cor4> =
			%% Line 72
			call 'erlang':'is_integer'
			    (VAlign)
		    in  %% Line 72
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 73
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 75
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<HAlign>(32,1,'integer',['unsigned'|['native']]),
			#<VAlign>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 74
		      call 'wxe_util':'cast'
			  (606, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setAlignment',3}}] )
	    -| ['compiler_generated'] )
	end
'setReadOnly'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 82
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 83
	      apply 'setReadOnly'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'setReadOnly',1}}] )
	    -| ['compiler_generated'] )
	end
'setReadOnly'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 90
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 92
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'isReadOnly',IsReadOnly},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (IsReadOnly)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 93
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setReadOnly/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 94
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 94
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 96
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 95
				  call 'wxe_util':'cast'
				      (607, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'setReadOnly',2}}] )
	    -| ['compiler_generated'] )
	end
'setRenderer'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',RendererRef,RendererT,_cor10}> when 'true' ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 103
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RendererT,
				       'wxGridCellRenderer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RendererT:'parent_class'
				    ('wxGridCellRenderer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 105
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RendererRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 104
			  call 'wxe_util':'cast'
			      (608, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setRenderer',2}}] )
	    -| ['compiler_generated'] )
	end
'setEditor'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',EditorRef,EditorT,_cor10}> when 'true' ->
	      do  %% Line 111
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 112
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (EditorT,
				       'wxGridCellEditor') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call EditorT:'parent_class'
				    ('wxGridCellEditor')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 114
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<EditorRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 113
			  call 'wxe_util':'cast'
			      (609, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setEditor',2}}] )
	    -| ['compiler_generated'] )
	end
'hasTextColour'/1 =
    %% Line 119
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 120
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 122
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 121
		      call 'wxe_util':'call'
			  (610, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasBackgroundColour'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 128
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 130
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 129
		      call 'wxe_util':'call'
			  (611, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'hasFont'/1 =
    %% Line 135
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 136
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 138
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 137
		      call 'wxe_util':'call'
			  (612, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasFont',1}}] )
	    -| ['compiler_generated'] )
	end
'hasAlignment'/1 =
    %% Line 143
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 144
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 146
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 145
		      call 'wxe_util':'call'
			  (613, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'hasRenderer'/1 =
    %% Line 151
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 152
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 154
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 153
		      call 'wxe_util':'call'
			  (614, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasRenderer',1}}] )
	    -| ['compiler_generated'] )
	end
'hasEditor'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 162
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 161
		      call 'wxe_util':'call'
			  (615, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hasEditor',1}}] )
	    -| ['compiler_generated'] )
	end
'getTextColour'/1 =
    %% Line 167
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 168
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 170
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 169
		      call 'wxe_util':'call'
			  (616, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getBackgroundColour'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 176
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 178
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 177
		      call 'wxe_util':'call'
			  (617, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getFont'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 184
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 186
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 185
		      call 'wxe_util':'call'
			  (618, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getAlignment'/1 =
    %% Line 191
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 192
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 194
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 193
		      call 'wxe_util':'call'
			  (619, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'getRenderer'/4 =
    %% Line 199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{'wx_ref',GridRef,GridT,_cor16},Row,Col>
	      when let <_cor4> =
		    %% Line 200
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor5> =
			%% Line 200
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 200
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 201
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 202
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (GridT,
				       'wxGrid') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call GridT:'parent_class'
				    ('wxGrid')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 204
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<GridRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 203
			  call 'wxe_util':'call'
			      (620, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'getRenderer',4}}] )
	    -| ['compiler_generated'] )
	end
'getEditor'/4 =
    %% Line 209
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{'wx_ref',GridRef,GridT,_cor16},Row,Col>
	      when let <_cor4> =
		    %% Line 210
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor5> =
			%% Line 210
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 210
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 211
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 212
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (GridT,
				       'wxGrid') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call GridT:'parent_class'
				    ('wxGrid')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 214
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<GridRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 213
			  call 'wxe_util':'call'
			      (621, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'getEditor',4}}] )
	    -| ['compiler_generated'] )
	end
'isReadOnly'/1 =
    %% Line 219
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 220
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 222
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 221
		      call 'wxe_util':'call'
			  (622, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isReadOnly',1}}] )
	    -| ['compiler_generated'] )
	end
'setDefAttr'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',DefAttrRef,DefAttrT,_cor10}> when 'true' ->
	      do  %% Line 228
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridCellAttr') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridCellAttr')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 229
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DefAttrT,
				       'wxGridCellAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DefAttrT:'parent_class'
				    ('wxGridCellAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 231
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<DefAttrRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 230
			  call 'wxe_util':'cast'
			      (623, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDefAttr',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridCellAttr')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridCellAttr', _cor0)
end