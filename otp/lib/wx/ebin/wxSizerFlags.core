module 'wxSizerFlags' ['align'/2,
		       'border'/1,
		       'border'/2,
		       'border'/3,
		       'center'/1,
		       'centre'/1,
		       'destroy'/1,
		       'expand'/1,
		       'left'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/0,
		       'new'/1,
		       'parent_class'/1,
		       'proportion'/2,
		       'right'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 33
		'export_type' =
		    %% Line 33
		    [{'wxSizerFlags',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'wxSizerFlags',{'remote_type',37,[{'atom',37,'wx'}|[{'atom',37,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'type',39,'wxSizerFlags',[]}]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'new',1},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'type',45,'list',[{'var',45,'Option'}]}]}|[{'type',45,'wxSizerFlags',[]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Option'}|[{'type',46,'tuple',[{'atom',46,'proportion'}|[{'type',46,'integer',[]}]]}]]]]}]]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'align',2},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'This'}|[{'var',56,'Alignment'}]]}|[{'type',56,'wxSizerFlags',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'This'}|[{'type',57,'wxSizerFlags',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Alignment'}|[{'type',57,'integer',[]}]]]]}]]]]}]}],
		%% Line 65
		'spec' =
		    %% Line 65
		    [{{'border',1},[{'type',65,'bounded_fun',[{'type',65,'fun',[{'type',65,'product',[{'var',65,'This'}]}|[{'type',65,'wxSizerFlags',[]}]]}|[[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'This'}|[{'type',66,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'border',2},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'This'}|[{'type',73,'list',[{'var',73,'Option'}]}]]}|[{'type',73,'wxSizerFlags',[]}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'This'}|[{'type',74,'wxSizerFlags',[]}]]]]}|[{'type',75,'constraint',[{'atom',75,'is_subtype'}|[[{'var',75,'Option'}|[{'type',75,'tuple',[{'atom',75,'direction'}|[{'type',75,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'border',3},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'This'}|[{'var',86,'Direction'}|[{'var',86,'BorderInPixels'}]]]}|[{'type',86,'wxSizerFlags',[]}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'This'}|[{'type',87,'wxSizerFlags',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Direction'}|[{'type',87,'integer',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'BorderInPixels'}|[{'type',87,'integer',[]}]]]]}]]]]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'center',1},[{'type',95,'bounded_fun',[{'type',95,'fun',[{'type',95,'product',[{'var',95,'This'}]}|[{'type',95,'wxSizerFlags',[]}]]}|[[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'This'}|[{'type',96,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'centre',1},[{'type',103,'bounded_fun',[{'type',103,'fun',[{'type',103,'product',[{'var',103,'This'}]}|[{'type',103,'wxSizerFlags',[]}]]}|[[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'This'}|[{'type',104,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'expand',1},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'This'}]}|[{'type',111,'wxSizerFlags',[]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'This'}|[{'type',112,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'left',1},[{'type',119,'bounded_fun',[{'type',119,'fun',[{'type',119,'product',[{'var',119,'This'}]}|[{'type',119,'wxSizerFlags',[]}]]}|[[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'This'}|[{'type',120,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'proportion',2},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'This'}|[{'var',127,'Proportion'}]]}|[{'type',127,'wxSizerFlags',[]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'This'}|[{'type',128,'wxSizerFlags',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Proportion'}|[{'type',128,'integer',[]}]]]]}]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'right',1},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}]}|[{'type',136,'wxSizerFlags',[]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxSizerFlags',[]}]]]]}]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'destroy',1},[{'type',144,'fun',[{'type',144,'product',[{'ann_type',144,[{'var',144,'This'}|[{'type',144,'wxSizerFlags',[]}]]}]}|[{'atom',144,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 35
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxSizerFlags'})
'new'/0 =
    %% Line 41
    fun () ->
	%% Line 42
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 47
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 48
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 49
		  ( fun (_cor3,_cor2) ->
			case <_cor3,_cor2> of
			  <{'proportion',Proportion},Acc> when 'true' ->
			      let <_cor1> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Proportion>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor1|Acc]
			  %% Line 50
			  <BadOpt,_cor11> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 51
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 51
			  call 'erlang':'list_to_binary'
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 53
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 52
			      call 'wxe_util':'construct'
				  (1314, _cor9)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'align'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Alignment>
	      when %% Line 59
		call 'erlang':'is_integer'
		    (Alignment) ->
	      do  %% Line 60
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 62
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Alignment>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 61
		      call 'wxe_util':'call'
			  (1315, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'align',2}}] )
	    -| ['compiler_generated'] )
	end
'border'/1 =
    %% Line 68
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 69
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 70
	      apply 'border'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'border',1}}] )
	    -| ['compiler_generated'] )
	end
'border'/2 =
    %% Line 76
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Options>
	      when %% Line 77
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 78
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 79
		      ( fun (_cor6,_cor5) ->
			    case <_cor6,_cor5> of
			      <{'direction',Direction},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Direction>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 80
			      <BadOpt,_cor16> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-border/2-fun-0-'}}] )
		  in  let <_cor10> =
			  %% Line 81
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 81
			      call 'erlang':'list_to_binary'
				  (_cor10)
			  in  let <_cor12> =
				  %% Line 83
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 82
				  call 'wxe_util':'call'
				      (1317, _cor12)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'border',2}}] )
	    -| ['compiler_generated'] )
	end
'border'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Direction,BorderInPixels>
	      when let <_cor3> =
		    %% Line 89
		    call 'erlang':'is_integer'
			(Direction)
		in  let <_cor4> =
			%% Line 89
			call 'erlang':'is_integer'
			    (BorderInPixels)
		    in  %% Line 89
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 90
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 92
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Direction>(32,1,'integer',['unsigned'|['native']]),
			#<BorderInPixels>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 91
		      call 'wxe_util':'call'
			  (1316, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'border',3}}] )
	    -| ['compiler_generated'] )
	end
'center'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 98
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 100
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 99
		      call 'wxe_util':'call'
			  (1318, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'center',1}}] )
	    -| ['compiler_generated'] )
	end
'centre'/1 =
    %% Line 105
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 106
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 108
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 107
		      call 'wxe_util':'call'
			  (1319, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'centre',1}}] )
	    -| ['compiler_generated'] )
	end
'expand'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 114
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 116
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 115
		      call 'wxe_util':'call'
			  (1320, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'expand',1}}] )
	    -| ['compiler_generated'] )
	end
'left'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 122
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 124
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 123
		      call 'wxe_util':'call'
			  (1321, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'left',1}}] )
	    -| ['compiler_generated'] )
	end
'proportion'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Proportion>
	      when %% Line 130
		call 'erlang':'is_integer'
		    (Proportion) ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 133
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 132
		      call 'wxe_util':'call'
			  (1322, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'proportion',2}}] )
	    -| ['compiler_generated'] )
	end
'right'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 139
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 141
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 140
		      call 'wxe_util':'call'
			  (1323, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'right',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 146
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxSizerFlags') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxSizerFlags')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 147
		      call 'wxe_util':'destroy'
			  (1324, Obj)
		      %% Line 148
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSizerFlags')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSizerFlags', _cor0)
end