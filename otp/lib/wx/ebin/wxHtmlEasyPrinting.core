module 'wxHtmlEasyPrinting' ['destroy'/1,
			     'getPageSetupData'/1,
			     'getPrintData'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'new'/0,
			     'new'/1,
			     'pageSetup'/1,
			     'parent_class'/1,
			     'previewFile'/2,
			     'previewText'/2,
			     'previewText'/3,
			     'printFile'/2,
			     'printText'/2,
			     'printText'/3,
			     'setFonts'/3,
			     'setFonts'/4,
			     'setFooter'/2,
			     'setFooter'/3,
			     'setHeader'/2,
			     'setHeader'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxHtmlEasyPrinting',0}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxHtmlEasyPrinting',{'remote_type',39,[{'atom',39,'wx'}|[{'atom',39,'wx_object'}|[[]]]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'new',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'type',41,'wxHtmlEasyPrinting',[]}]]}]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'new',1},[{'type',47,'bounded_fun',[{'type',47,'fun',[{'type',47,'product',[{'type',47,'list',[{'var',47,'Option'}]}]}|[{'type',47,'wxHtmlEasyPrinting',[]}]]}|[[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Option'}|[{'type',48,'union',[{'type',48,'tuple',[{'atom',48,'name'}|[{'remote_type',48,[{'atom',48,'unicode'}|[{'atom',48,'chardata'}|[[]]]]}]]}|[{'type',49,'tuple',[{'atom',49,'parentWindow'}|[{'remote_type',49,[{'atom',49,'wxWindow'}|[{'atom',49,'wxWindow'}|[[]]]]}]]}]]}]]]]}]]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'getPrintData',1},[{'type',60,'bounded_fun',[{'type',60,'fun',[{'type',60,'product',[{'var',60,'This'}]}|[{'remote_type',60,[{'atom',60,'wxPrintData'}|[{'atom',60,'wxPrintData'}|[[]]]]}]]}|[[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'This'}|[{'type',61,'wxHtmlEasyPrinting',[]}]]]]}]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'getPageSetupData',1},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'This'}]}|[{'remote_type',68,[{'atom',68,'wxPageSetupDialogData'}|[{'atom',68,'wxPageSetupDialogData'}|[[]]]]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'This'}|[{'type',69,'wxHtmlEasyPrinting',[]}]]]]}]]]}]}],
		%% Line 76
		'spec' =
		    %% Line 76
		    [{{'previewFile',2},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'This'}|[{'var',76,'Htmlfile'}]]}|[{'type',76,'boolean',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'This'}|[{'type',77,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Htmlfile'}|[{'remote_type',77,[{'atom',77,'unicode'}|[{'atom',77,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'previewText',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'This'}|[{'var',86,'Htmltext'}]]}|[{'type',86,'boolean',[]}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'This'}|[{'type',87,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Htmltext'}|[{'remote_type',87,[{'atom',87,'unicode'}|[{'atom',87,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'previewText',3},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'This'}|[{'var',94,'Htmltext'}|[{'type',94,'list',[{'var',94,'Option'}]}]]]}|[{'type',94,'boolean',[]}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'This'}|[{'type',95,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Htmltext'}|[{'remote_type',95,[{'atom',95,'unicode'}|[{'atom',95,'chardata'}|[[]]]]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Option'}|[{'type',96,'tuple',[{'atom',96,'basepath'}|[{'remote_type',96,[{'atom',96,'unicode'}|[{'atom',96,'chardata'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'printFile',2},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}|[{'var',108,'Htmlfile'}]]}|[{'type',108,'boolean',[]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Htmlfile'}|[{'remote_type',109,[{'atom',109,'unicode'}|[{'atom',109,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'printText',2},[{'type',118,'bounded_fun',[{'type',118,'fun',[{'type',118,'product',[{'var',118,'This'}|[{'var',118,'Htmltext'}]]}|[{'type',118,'boolean',[]}]]}|[[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'This'}|[{'type',119,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Htmltext'}|[{'remote_type',119,[{'atom',119,'unicode'}|[{'atom',119,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'printText',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'This'}|[{'var',126,'Htmltext'}|[{'type',126,'list',[{'var',126,'Option'}]}]]]}|[{'type',126,'boolean',[]}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'This'}|[{'type',127,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Htmltext'}|[{'remote_type',127,[{'atom',127,'unicode'}|[{'atom',127,'chardata'}|[[]]]]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Option'}|[{'type',128,'tuple',[{'atom',128,'basepath'}|[{'remote_type',128,[{'atom',128,'unicode'}|[{'atom',128,'chardata'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'pageSetup',1},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'This'}]}|[{'atom',140,'ok'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'This'}|[{'type',141,'wxHtmlEasyPrinting',[]}]]]]}]]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'setFonts',3},[{'type',148,'bounded_fun',[{'type',148,'fun',[{'type',148,'product',[{'var',148,'This'}|[{'var',148,'Normal_face'}|[{'var',148,'Fixed_face'}]]]}|[{'atom',148,'ok'}]]}|[[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'This'}|[{'type',149,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Normal_face'}|[{'remote_type',149,[{'atom',149,'unicode'}|[{'atom',149,'chardata'}|[[]]]]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Fixed_face'}|[{'remote_type',149,[{'atom',149,'unicode'}|[{'atom',149,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'setFonts',4},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'This'}|[{'var',156,'Normal_face'}|[{'var',156,'Fixed_face'}|[{'type',156,'list',[{'var',156,'Option'}]}]]]]}|[{'atom',156,'ok'}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'This'}|[{'type',157,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Normal_face'}|[{'remote_type',157,[{'atom',157,'unicode'}|[{'atom',157,'chardata'}|[[]]]]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Fixed_face'}|[{'remote_type',157,[{'atom',157,'unicode'}|[{'atom',157,'chardata'}|[[]]]]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Option'}|[{'type',158,'tuple',[{'atom',158,'sizes'}|[{'type',158,'list',[{'type',158,'integer',[]}]}]]}]]]]}]]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'setHeader',2},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'This'}|[{'var',172,'Header'}]]}|[{'atom',172,'ok'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'This'}|[{'type',173,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Header'}|[{'remote_type',173,[{'atom',173,'unicode'}|[{'atom',173,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'setHeader',3},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'This'}|[{'var',180,'Header'}|[{'type',180,'list',[{'var',180,'Option'}]}]]]}|[{'atom',180,'ok'}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'This'}|[{'type',181,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Header'}|[{'remote_type',181,[{'atom',181,'unicode'}|[{'atom',181,'chardata'}|[[]]]]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Option'}|[{'type',182,'tuple',[{'atom',182,'pg'}|[{'type',182,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'setFooter',2},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'This'}|[{'var',194,'Footer'}]]}|[{'atom',194,'ok'}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'This'}|[{'type',195,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Footer'}|[{'remote_type',195,[{'atom',195,'unicode'}|[{'atom',195,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'setFooter',3},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'This'}|[{'var',202,'Footer'}|[{'type',202,'list',[{'var',202,'Option'}]}]]]}|[{'atom',202,'ok'}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'This'}|[{'type',203,'wxHtmlEasyPrinting',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'Footer'}|[{'remote_type',203,[{'atom',203,'unicode'}|[{'atom',203,'chardata'}|[[]]]]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Option'}|[{'type',204,'tuple',[{'atom',204,'pg'}|[{'type',204,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'destroy',1},[{'type',216,'fun',[{'type',216,'product',[{'ann_type',216,[{'var',216,'This'}|[{'type',216,'wxHtmlEasyPrinting',[]}]]}]}|[{'atom',216,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxHtmlEasyPrinting'})
'new'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 51
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 52
		  ( fun (_cor13,_cor12) ->
			case <_cor13,_cor12> of
			  <{'name',Name},Acc> when 'true' ->
			      let <Name_UC> =
				  call 'unicode':'characters_to_binary'
				      ([Name|[0]])
			      in  let <_cor7> =
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor2> =
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor3> =
					      call 'erlang':'+'
						  (0, _cor2)
					  in  let <_cor4> =
						  call 'erlang':'band'
						      (_cor3, 7)
					      in  let <_cor5> =
						      call 'erlang':'-'
							  (8, _cor4)
						  in  let <_cor6> =
							  call 'erlang':'band'
							      (_cor5, 7)
						      in  let <_cor8> =
							      #{#<1>(32,1,'integer',['unsigned'|['native']]),
								#<_cor7>(32,1,'integer',['unsigned'|['native']]),
								#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
							  in  [_cor8|Acc]
			  %% Line 53
			  <{'parentWindow',{'wx_ref',ParentWindowRef,ParentWindowT,_cor21}},Acc> when 'true' ->
			      do  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (ParentWindowT,
						   'wxWindow') ->
					    'ok'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    call ParentWindowT:'parent_class'
						('wxWindow')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<ParentWindowRef>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			  %% Line 54
			  <BadOpt,_cor22> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor17> =
		      %% Line 55
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 55
			  call 'erlang':'list_to_binary'
			      (_cor17)
		      in  let <_cor19> =
			      %% Line 57
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 56
			      call 'wxe_util':'construct'
				  (2531, _cor19)
	  ( <_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'getPrintData'/1 =
    %% Line 62
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 63
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 65
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 64
		      call 'wxe_util':'call'
			  (2533, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPrintData',1}}] )
	    -| ['compiler_generated'] )
	end
'getPageSetupData'/1 =
    %% Line 70
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 71
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 73
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 72
		      call 'wxe_util':'call'
			  (2534, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPageSetupData',1}}] )
	    -| ['compiler_generated'] )
	end
'previewFile'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Htmlfile>
	      when %% Line 79
		call 'erlang':'is_list'
		    (Htmlfile) ->
	      do  %% Line 80
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Htmlfile_UC> =
		      %% Line 81
		      call 'unicode':'characters_to_binary'
			  ([Htmlfile|[0]])
		  in  let <_cor10> =
			  %% Line 83
			  call 'erlang':'byte_size'
			      (Htmlfile_UC)
		      in  let <_cor5> =
			      %% Line 83
			      call 'erlang':'byte_size'
				  (Htmlfile_UC)
			  in  let <_cor6> =
				  %% Line 83
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 83
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 83
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 83
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 83
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Htmlfile_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 82
						  call 'wxe_util':'call'
						      (2535, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'previewFile',2}}] )
	    -| ['compiler_generated'] )
	end
'previewText'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Htmltext>
	      when %% Line 90
		call 'erlang':'is_list'
		    (Htmltext) ->
	      %% Line 91
	      apply 'previewText'/3
		  (This, Htmltext, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'previewText',2}}] )
	    -| ['compiler_generated'] )
	end
'previewText'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},Htmltext,Options>
	      when let <_cor3> =
		    %% Line 98
		    call 'erlang':'is_list'
			(Htmltext)
		in  let <_cor4> =
			%% Line 98
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 98
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Htmltext_UC> =
		      %% Line 100
		      call 'unicode':'characters_to_binary'
			  ([Htmltext|[0]])
		  in  let <MOpts> =
			  %% Line 101
			  ( fun (_cor17,_cor16) ->
				case <_cor17,_cor16> of
				  <{'basepath',Basepath},Acc> when 'true' ->
				      let <Basepath_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Basepath|[0]])
				      in  let <_cor14> =
					      call 'erlang':'byte_size'
						  (Basepath_UC)
					  in  let <_cor9> =
						  call 'erlang':'byte_size'
						      (Basepath_UC)
					      in  let <_cor10> =
						      call 'erlang':'+'
							  (0, _cor9)
						  in  let <_cor11> =
							  call 'erlang':'band'
							      (_cor10, 7)
						      in  let <_cor12> =
							      call 'erlang':'-'
								  (8, _cor11)
							  in  let <_cor13> =
								  call 'erlang':'band'
								      (_cor12, 7)
							      in  let <_cor15> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor14>(32,1,'integer',['unsigned'|['native']]),
									#<Basepath_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor13,8,'integer',['unsigned'|['big']])}#
								  in  [_cor15|Acc]
				  %% Line 102
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-previewText/3-fun-0-'}}] )
		      in  let <_cor21> =
			      %% Line 103
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 103
				  call 'erlang':'list_to_binary'
				      (_cor21)
			      in  let <_cor28> =
				      %% Line 105
				      call 'erlang':'byte_size'
					  (Htmltext_UC)
				  in  let <_cor23> =
					  %% Line 105
					  call 'erlang':'byte_size'
					      (Htmltext_UC)
				      in  let <_cor24> =
					      %% Line 105
					      call 'erlang':'+'
						  (0, _cor23)
					  in  let <_cor25> =
						  %% Line 105
						  call 'erlang':'band'
						      (_cor24, 7)
					      in  let <_cor26> =
						      %% Line 105
						      call 'erlang':'-'
							  (8, _cor25)
						  in  let <_cor27> =
							  %% Line 105
							  call 'erlang':'band'
							      (_cor26, 7)
						      in  let <_cor29> =
							      %% Line 105
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor28>(32,1,'integer',['unsigned'|['native']]),
								#<Htmltext_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor27,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 104
							      call 'wxe_util':'call'
								  (2536, _cor29)
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'previewText',3}}] )
	    -| ['compiler_generated'] )
	end
'printFile'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Htmlfile>
	      when %% Line 111
		call 'erlang':'is_list'
		    (Htmlfile) ->
	      do  %% Line 112
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Htmlfile_UC> =
		      %% Line 113
		      call 'unicode':'characters_to_binary'
			  ([Htmlfile|[0]])
		  in  let <_cor10> =
			  %% Line 115
			  call 'erlang':'byte_size'
			      (Htmlfile_UC)
		      in  let <_cor5> =
			      %% Line 115
			      call 'erlang':'byte_size'
				  (Htmlfile_UC)
			  in  let <_cor6> =
				  %% Line 115
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 115
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 115
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 115
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 115
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Htmlfile_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 114
						  call 'wxe_util':'call'
						      (2537, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'printFile',2}}] )
	    -| ['compiler_generated'] )
	end
'printText'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Htmltext>
	      when %% Line 122
		call 'erlang':'is_list'
		    (Htmltext) ->
	      %% Line 123
	      apply 'printText'/3
		  (This, Htmltext, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'printText',2}}] )
	    -| ['compiler_generated'] )
	end
'printText'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},Htmltext,Options>
	      when let <_cor3> =
		    %% Line 130
		    call 'erlang':'is_list'
			(Htmltext)
		in  let <_cor4> =
			%% Line 130
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 130
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Htmltext_UC> =
		      %% Line 132
		      call 'unicode':'characters_to_binary'
			  ([Htmltext|[0]])
		  in  let <MOpts> =
			  %% Line 133
			  ( fun (_cor17,_cor16) ->
				case <_cor17,_cor16> of
				  <{'basepath',Basepath},Acc> when 'true' ->
				      let <Basepath_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Basepath|[0]])
				      in  let <_cor14> =
					      call 'erlang':'byte_size'
						  (Basepath_UC)
					  in  let <_cor9> =
						  call 'erlang':'byte_size'
						      (Basepath_UC)
					      in  let <_cor10> =
						      call 'erlang':'+'
							  (0, _cor9)
						  in  let <_cor11> =
							  call 'erlang':'band'
							      (_cor10, 7)
						      in  let <_cor12> =
							      call 'erlang':'-'
								  (8, _cor11)
							  in  let <_cor13> =
								  call 'erlang':'band'
								      (_cor12, 7)
							      in  let <_cor15> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor14>(32,1,'integer',['unsigned'|['native']]),
									#<Basepath_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor13,8,'integer',['unsigned'|['big']])}#
								  in  [_cor15|Acc]
				  %% Line 134
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-printText/3-fun-0-'}}] )
		      in  let <_cor21> =
			      %% Line 135
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 135
				  call 'erlang':'list_to_binary'
				      (_cor21)
			      in  let <_cor28> =
				      %% Line 137
				      call 'erlang':'byte_size'
					  (Htmltext_UC)
				  in  let <_cor23> =
					  %% Line 137
					  call 'erlang':'byte_size'
					      (Htmltext_UC)
				      in  let <_cor24> =
					      %% Line 137
					      call 'erlang':'+'
						  (0, _cor23)
					  in  let <_cor25> =
						  %% Line 137
						  call 'erlang':'band'
						      (_cor24, 7)
					      in  let <_cor26> =
						      %% Line 137
						      call 'erlang':'-'
							  (8, _cor25)
						  in  let <_cor27> =
							  %% Line 137
							  call 'erlang':'band'
							      (_cor26, 7)
						      in  let <_cor29> =
							      %% Line 137
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor28>(32,1,'integer',['unsigned'|['native']]),
								#<Htmltext_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor27,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 136
							      call 'wxe_util':'call'
								  (2538, _cor29)
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'printText',3}}] )
	    -| ['compiler_generated'] )
	end
'pageSetup'/1 =
    %% Line 142
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 143
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 145
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 144
		      call 'wxe_util':'cast'
			  (2539, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'pageSetup',1}}] )
	    -| ['compiler_generated'] )
	end
'setFonts'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Normal_face,Fixed_face>
	      when let <_cor3> =
		    %% Line 152
		    call 'erlang':'is_list'
			(Normal_face)
		in  let <_cor4> =
			%% Line 152
			call 'erlang':'is_list'
			    (Fixed_face)
		    in  %% Line 152
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 153
	      apply 'setFonts'/4
		  (This, Normal_face, Fixed_face, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'setFonts',3}}] )
	    -| ['compiler_generated'] )
	end
'setFonts'/4 =
    %% Line 159
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor50},Normal_face,Fixed_face,Options>
	      when %% Line 160
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Normal_face)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Fixed_face)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 161
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Normal_face_UC> =
		      %% Line 162
		      call 'unicode':'characters_to_binary'
			  ([Normal_face|[0]])
		  in  let <Fixed_face_UC> =
			  %% Line 163
			  call 'unicode':'characters_to_binary'
			      ([Fixed_face|[0]])
		      in  let <MOpts> =
			      %% Line 164
			      ( fun (_cor27,_cor26) ->
				    case <_cor27,_cor26> of
				      <{'sizes',Sizes},Acc> when 'true' ->
					  let <_cor24> =
					      call 'erlang':'length'
						  (Sizes)
					  in  let <_cor18> =
						  %% Line 165
						  call 'erlang':'length'
						      (Sizes)
					      in  let <_cor17> =
						      call 'erlang':'*'
							  (_cor18, 4)
						  in  let <_cor16> =
							  primop 'bs_init_writable'
							      (_cor17)
						      in  let <_cor23> =
							      %% Line 165
							      ( letrec
								    'lbc$^0'/2 =
									fun (_cor22,_cor21) ->
									    case <_cor22,_cor21> of
									      <[C|_cor20],_cor21> when 'true' ->
										  let <_cor21> =
										      ( #{#<_cor21>('all',1,'binary',[]),
											  #<C>(32,1,'integer',['signed'|['native']])}#
											-| ['compiler_generated','single_use'] )
										  in  apply 'lbc$^0'/2
											  (_cor20, _cor21)
									      <[],_cor21> when 'true' ->
										  _cor21
									      ( <_cor22,_cor21> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor22,_cor21})
										      -| [{'function_name',{'lbc$^0',2}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lbc$^0'/2
									(Sizes, _cor16)
								-| ['list_comprehension'] )
							  in  let <_cor12> =
								  %% Line 165
								  call 'erlang':'length'
								      (Sizes)
							      in  let <_cor13> =
								      %% Line 165
								      call 'erlang':'+'
									  (0, _cor12)
								  in  let <_cor14> =
									  %% Line 165
									  call 'erlang':'rem'
									      (_cor13, 2)
								      in  let <_cor15> =
									      %% Line 165
									      call 'erlang':'*'
										  (_cor14, 32)
									  in  let <_cor25> =
										  #{#<1>(32,1,'integer',['unsigned'|['native']]),
										    #<_cor24>(32,1,'integer',['unsigned'|['native']]),
										    #<_cor23>(%% Line 165
											      'all',8,'binary',['unsigned'|['big']]),
										    #<%% Line 165
										      0>(_cor15,1,'integer',['unsigned'|['big']])}#
									      in  [_cor25|%% Line 165
											  Acc]
				      %% Line 166
				      <BadOpt,_cor51> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-setFonts/4-fun-0-'}}] )
			  in  let <_cor31> =
				  %% Line 167
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 167
				      call 'erlang':'list_to_binary'
					  (_cor31)
				  in  let <_cor44> =
					  %% Line 169
					  call 'erlang':'byte_size'
					      (Normal_face_UC)
				      in  let <_cor39> =
					      %% Line 169
					      call 'erlang':'byte_size'
						  (Normal_face_UC)
					  in  let <_cor40> =
						  %% Line 169
						  call 'erlang':'+'
						      (0, _cor39)
					      in  let <_cor41> =
						      %% Line 169
						      call 'erlang':'band'
							  (_cor40, 7)
						  in  let <_cor42> =
							  %% Line 169
							  call 'erlang':'-'
							      (8, _cor41)
						      in  let <_cor43> =
							      %% Line 169
							      call 'erlang':'band'
								  (_cor42, 7)
							  in  let <_cor38> =
								  %% Line 169
								  call 'erlang':'byte_size'
								      (Fixed_face_UC)
							      in  let <_cor33> =
								      %% Line 169
								      call 'erlang':'byte_size'
									  (Fixed_face_UC)
								  in  let <_cor34> =
									  %% Line 169
									  call 'erlang':'+'
									      (4, _cor33)
								      in  let <_cor35> =
									      %% Line 169
									      call 'erlang':'band'
										  (_cor34, 7)
									  in  let <_cor36> =
										  %% Line 169
										  call 'erlang':'-'
										      (8, _cor35)
									      in  let <_cor37> =
										      %% Line 169
										      call 'erlang':'band'
											  (_cor36, 7)
										  in  let <_cor45> =
											  %% Line 169
											  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
											    #<_cor44>(32,1,'integer',['unsigned'|['native']]),
											    #<Normal_face_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor43,8,'integer',['unsigned'|['big']]),
											    #<_cor38>(32,1,'integer',['unsigned'|['native']]),
											    #<Fixed_face_UC>('all',8,'binary',['unsigned'|['big']]),
											    #<0>(_cor37,8,'integer',['unsigned'|['big']]),
											    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
										      in  %% Line 168
											  call 'wxe_util':'cast'
											      (2540, _cor45)
	  ( <_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'setFonts',4}}] )
	    -| ['compiler_generated'] )
	end
'setHeader'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Header>
	      when %% Line 176
		call 'erlang':'is_list'
		    (Header) ->
	      %% Line 177
	      apply 'setHeader'/3
		  (This, Header, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setHeader',2}}] )
	    -| ['compiler_generated'] )
	end
'setHeader'/3 =
    %% Line 183
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Header,Options>
	      when let <_cor3> =
		    %% Line 184
		    call 'erlang':'is_list'
			(Header)
		in  let <_cor4> =
			%% Line 184
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 184
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 185
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Header_UC> =
		      %% Line 186
		      call 'unicode':'characters_to_binary'
			  ([Header|[0]])
		  in  let <MOpts> =
			  %% Line 187
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'pg',Pg},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Pg>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 188
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setHeader/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 189
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 189
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 191
				      call 'erlang':'byte_size'
					  (Header_UC)
				  in  let <_cor16> =
					  %% Line 191
					  call 'erlang':'byte_size'
					      (Header_UC)
				      in  let <_cor17> =
					      %% Line 191
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 191
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 191
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 191
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 191
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Header_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 190
							      call 'wxe_util':'cast'
								  (2541, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'setHeader',3}}] )
	    -| ['compiler_generated'] )
	end
'setFooter'/2 =
    %% Line 197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Footer>
	      when %% Line 198
		call 'erlang':'is_list'
		    (Footer) ->
	      %% Line 199
	      apply 'setFooter'/3
		  (This, Footer, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setFooter',2}}] )
	    -| ['compiler_generated'] )
	end
'setFooter'/3 =
    %% Line 205
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Footer,Options>
	      when let <_cor3> =
		    %% Line 206
		    call 'erlang':'is_list'
			(Footer)
		in  let <_cor4> =
			%% Line 206
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 206
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 207
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Footer_UC> =
		      %% Line 208
		      call 'unicode':'characters_to_binary'
			  ([Footer|[0]])
		  in  let <MOpts> =
			  %% Line 209
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'pg',Pg},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Pg>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 210
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-setFooter/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 211
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 211
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 213
				      call 'erlang':'byte_size'
					  (Footer_UC)
				  in  let <_cor16> =
					  %% Line 213
					  call 'erlang':'byte_size'
					      (Footer_UC)
				      in  let <_cor17> =
					      %% Line 213
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 213
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 213
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 213
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 213
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Footer_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 212
							      call 'wxe_util':'cast'
								  (2542, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'setFooter',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 218
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxHtmlEasyPrinting') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxHtmlEasyPrinting')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 219
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 220
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxHtmlEasyPrinting')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxHtmlEasyPrinting', _cor0)
end