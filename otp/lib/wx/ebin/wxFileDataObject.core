module 'wxFileDataObject' ['addFile'/2,
			   'destroy'/1,
			   'getFilenames'/1,
			   'module_info'/0,
			   'module_info'/1,
			   'new'/0,
			   'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxFileDataObject',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxFileDataObject',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'new',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxFileDataObject',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'addFile',2},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'This'}|[{'var',48,'Filename'}]]}|[{'atom',48,'ok'}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'This'}|[{'type',49,'wxFileDataObject',[]}]]]]}|[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Filename'}|[{'remote_type',49,[{'atom',49,'unicode'}|[{'atom',49,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'getFilenames',1},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'This'}]}|[{'type',58,'list',[{'remote_type',58,[{'atom',58,'unicode'}|[{'atom',58,'charlist'}|[[]]]]}]}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'This'}|[{'type',59,'wxFileDataObject',[]}]]]]}]]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'destroy',1},[{'type',66,'fun',[{'type',66,'product',[{'ann_type',66,[{'var',66,'This'}|[{'type',66,'wxFileDataObject',[]}]]}]}|[{'atom',66,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	case _cor0 of
	  <'wxDataObject'> when 'true' ->
	      'true'
	  %% Line 38
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxFileDataObject'})
	end
'new'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'wxe_util':'construct'
	    (3409, %% Line 45
		   #{}#)
'addFile'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Filename>
	      when %% Line 51
		call 'erlang':'is_list'
		    (Filename) ->
	      do  %% Line 52
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFileDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFileDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Filename_UC> =
		      %% Line 53
		      call 'unicode':'characters_to_binary'
			  ([Filename|[0]])
		  in  let <_cor10> =
			  %% Line 55
			  call 'erlang':'byte_size'
			      (Filename_UC)
		      in  let <_cor5> =
			      %% Line 55
			      call 'erlang':'byte_size'
				  (Filename_UC)
			  in  let <_cor6> =
				  %% Line 55
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 55
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 55
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 55
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 55
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Filename_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 54
						  call 'wxe_util':'cast'
						      (3410, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'addFile',2}}] )
	    -| ['compiler_generated'] )
	end
'getFilenames'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 61
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFileDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFileDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 63
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 62
		      call 'wxe_util':'call'
			  (3411, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFilenames',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 67
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 68
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxFileDataObject') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxFileDataObject')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 69
		      call 'wxe_util':'destroy'
			  (3412, Obj)
		      %% Line 70
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxFileDataObject')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxFileDataObject', _cor0)
end