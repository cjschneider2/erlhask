module 'wxLayoutAlgorithm' ['destroy'/1,
			    'layoutFrame'/2,
			    'layoutFrame'/3,
			    'layoutMDIFrame'/2,
			    'layoutMDIFrame'/3,
			    'layoutWindow'/2,
			    'layoutWindow'/3,
			    'module_info'/0,
			    'module_info'/1,
			    'new'/0,
			    'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 33
		'export_type' =
		    %% Line 33
		    [{'wxLayoutAlgorithm',0}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'wxLayoutAlgorithm',{'remote_type',37,[{'atom',37,'wx'}|[{'atom',37,'wx_object'}|[[]]]]},[]}],
		%% Line 39
		'spec' =
		    %% Line 39
		    [{{'new',0},[{'type',39,'fun',[{'type',39,'product',[]}|[{'type',39,'wxLayoutAlgorithm',[]}]]}]}],
		%% Line 45
		'spec' =
		    %% Line 45
		    [{{'layoutFrame',2},[{'type',45,'bounded_fun',[{'type',45,'fun',[{'type',45,'product',[{'var',45,'This'}|[{'var',45,'Frame'}]]}|[{'type',45,'boolean',[]}]]}|[[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'This'}|[{'type',46,'wxLayoutAlgorithm',[]}]]]]}|[{'type',46,'constraint',[{'atom',46,'is_subtype'}|[[{'var',46,'Frame'}|[{'remote_type',46,[{'atom',46,'wxFrame'}|[{'atom',46,'wxFrame'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'layoutFrame',3},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'This'}|[{'var',53,'Frame'}|[{'type',53,'list',[{'var',53,'Option'}]}]]]}|[{'type',53,'boolean',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'This'}|[{'type',54,'wxLayoutAlgorithm',[]}]]]]}|[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Frame'}|[{'remote_type',54,[{'atom',54,'wxFrame'}|[{'atom',54,'wxFrame'}|[[]]]]}]]]]}|[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Option'}|[{'type',55,'tuple',[{'atom',55,'mainWindow'}|[{'remote_type',55,[{'atom',55,'wxWindow'}|[{'atom',55,'wxWindow'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'layoutMDIFrame',2},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'This'}|[{'var',67,'Frame'}]]}|[{'type',67,'boolean',[]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'This'}|[{'type',68,'wxLayoutAlgorithm',[]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Frame'}|[{'remote_type',68,[{'atom',68,'wxMDIParentFrame'}|[{'atom',68,'wxMDIParentFrame'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'layoutMDIFrame',3},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'This'}|[{'var',75,'Frame'}|[{'type',75,'list',[{'var',75,'Option'}]}]]]}|[{'type',75,'boolean',[]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'This'}|[{'type',76,'wxLayoutAlgorithm',[]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Frame'}|[{'remote_type',76,[{'atom',76,'wxMDIParentFrame'}|[{'atom',76,'wxMDIParentFrame'}|[[]]]]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Option'}|[{'type',77,'tuple',[{'atom',77,'rect'}|[{'type',77,'tuple',[{'ann_type',77,[{'var',77,'X'}|[{'type',77,'integer',[]}]]}|[{'ann_type',77,[{'var',77,'Y'}|[{'type',77,'integer',[]}]]}|[{'ann_type',77,[{'var',77,'W'}|[{'type',77,'integer',[]}]]}|[{'ann_type',77,[{'var',77,'H'}|[{'type',77,'integer',[]}]]}]]]]}]]}]]]]}]]]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'layoutWindow',2},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}|[{'var',89,'Frame'}]]}|[{'type',89,'boolean',[]}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxLayoutAlgorithm',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Frame'}|[{'remote_type',90,[{'atom',90,'wxWindow'}|[{'atom',90,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'layoutWindow',3},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'This'}|[{'var',97,'Frame'}|[{'type',97,'list',[{'var',97,'Option'}]}]]]}|[{'type',97,'boolean',[]}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'This'}|[{'type',98,'wxLayoutAlgorithm',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Frame'}|[{'remote_type',98,[{'atom',98,'wxWindow'}|[{'atom',98,'wxWindow'}|[[]]]]}]]]]}|[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Option'}|[{'type',99,'tuple',[{'atom',99,'mainWindow'}|[{'remote_type',99,[{'atom',99,'wxWindow'}|[{'atom',99,'wxWindow'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'destroy',1},[{'type',111,'fun',[{'type',111,'product',[{'ann_type',111,[{'var',111,'This'}|[{'type',111,'wxLayoutAlgorithm',[]}]]}]}|[{'atom',111,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 35
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxLayoutAlgorithm'})
'new'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	call 'wxe_util':'construct'
	    (2697, %% Line 42
		   #{}#)
'layoutFrame'/2 =
    %% Line 48
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Frame = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 50
	      apply 'layoutFrame'/3
		  (This, Frame, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'layoutFrame',2}}] )
	    -| ['compiler_generated'] )
	end
'layoutFrame'/3 =
    %% Line 56
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor21},{'wx_ref',FrameRef,FrameT,_cor22},Options>
	      when %% Line 57
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 58
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLayoutAlgorithm') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLayoutAlgorithm')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 59
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FrameT,
				       'wxFrame') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FrameT:'parent_class'
				    ('wxFrame')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 60
			  ( fun (_cor11,_cor10) ->
				case <_cor11,_cor10> of
				  <{'mainWindow',{'wx_ref',MainWindowRef,MainWindowT,_cor23}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (MainWindowT,
							   'wxWindow') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call MainWindowT:'parent_class'
							('wxWindow')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor9> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<MainWindowRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor9|Acc]
				  %% Line 61
				  <BadOpt,_cor24> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-layoutFrame/3-fun-0-'}}] )
		      in  let <_cor15> =
			      %% Line 62
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 62
				  call 'erlang':'list_to_binary'
				      (_cor15)
			      in  let <_cor17> =
				      %% Line 64
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FrameRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 63
				      call 'wxe_util':'call'
					  (2698, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'layoutFrame',3}}] )
	    -| ['compiler_generated'] )
	end
'layoutMDIFrame'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Frame = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 72
	      apply 'layoutMDIFrame'/3
		  (This, Frame, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'layoutMDIFrame',2}}] )
	    -| ['compiler_generated'] )
	end
'layoutMDIFrame'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},{'wx_ref',FrameRef,FrameT,_cor20},Options>
	      when %% Line 79
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 80
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLayoutAlgorithm') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLayoutAlgorithm')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 81
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FrameT,
				       'wxMDIParentFrame') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FrameT:'parent_class'
				    ('wxMDIParentFrame')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 82
			  ( fun (_cor9,_cor8) ->
				case <_cor9,_cor8> of
				  <{'rect',{RectX,RectY,RectW,RectH}},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<RectX>(32,1,'integer',['unsigned'|['native']]),
					    #<RectY>(32,1,'integer',['unsigned'|['native']]),
					    #<RectW>(32,1,'integer',['unsigned'|['native']]),
					    #<RectH>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor7|Acc]
				  %% Line 83
				  <BadOpt,_cor21> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-layoutMDIFrame/3-fun-0-'}}] )
		      in  let <_cor13> =
			      %% Line 84
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 84
				  call 'erlang':'list_to_binary'
				      (_cor13)
			      in  let <_cor15> =
				      %% Line 86
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FrameRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 85
				      call 'wxe_util':'call'
					  (2699, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'layoutMDIFrame',3}}] )
	    -| ['compiler_generated'] )
	end
'layoutWindow'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Frame = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 94
	      apply 'layoutWindow'/3
		  (This, Frame, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'layoutWindow',2}}] )
	    -| ['compiler_generated'] )
	end
'layoutWindow'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor21},{'wx_ref',FrameRef,FrameT,_cor22},Options>
	      when %% Line 101
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxLayoutAlgorithm') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxLayoutAlgorithm')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 103
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FrameT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FrameT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 104
			  ( fun (_cor11,_cor10) ->
				case <_cor11,_cor10> of
				  <{'mainWindow',{'wx_ref',MainWindowRef,MainWindowT,_cor23}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (MainWindowT,
							   'wxWindow') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call MainWindowT:'parent_class'
							('wxWindow')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor9> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<MainWindowRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor9|Acc]
				  %% Line 105
				  <BadOpt,_cor24> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-layoutWindow/3-fun-0-'}}] )
		      in  let <_cor15> =
			      %% Line 106
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 106
				  call 'erlang':'list_to_binary'
				      (_cor15)
			      in  let <_cor17> =
				      %% Line 108
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<FrameRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 107
				      call 'wxe_util':'call'
					  (2700, _cor17)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'layoutWindow',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 112
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 113
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxLayoutAlgorithm') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxLayoutAlgorithm')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 114
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 115
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxLayoutAlgorithm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxLayoutAlgorithm', _cor0)
end