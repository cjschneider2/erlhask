module 'wxBitmap' ['convertToImage'/1,
		   'copyFromIcon'/2,
		   'create'/3,
		   'create'/4,
		   'destroy'/1,
		   'getDepth'/1,
		   'getHeight'/1,
		   'getMask'/1,
		   'getPalette'/1,
		   'getSubBitmap'/2,
		   'getWidth'/1,
		   'loadFile'/2,
		   'loadFile'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'new'/0,
		   'new'/1,
		   'new'/2,
		   'new'/3,
		   'new'/4,
		   'ok'/1,
		   'parent_class'/1,
		   'saveFile'/3,
		   'saveFile'/4,
		   'setDepth'/2,
		   'setHeight'/2,
		   'setMask'/2,
		   'setPalette'/2,
		   'setWidth'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 35
		'export_type' =
		    %% Line 35
		    [{'wxBitmap',0}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxBitmap',{'remote_type',39,[{'atom',39,'wx'}|[{'atom',39,'wx_object'}|[[]]]]},[]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'new',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'type',41,'wxBitmap',[]}]]}]}],
		%% Line 52
		'spec' =
		    %% Line 52
		    [{{'new',1},[{'type',52,'bounded_fun',[{'type',52,'fun',[{'type',52,'product',[{'var',52,'Filename'}]}|[{'type',52,'wxBitmap',[]}]]}|[[{'type',53,'constraint',[{'atom',53,'is_subtype'}|[[{'var',53,'Filename'}|[{'remote_type',53,[{'atom',53,'unicode'}|[{'atom',53,'chardata'}|[[]]]]}]]]]}]]]}|[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Image'}]}|[{'type',54,'wxBitmap',[]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'Image'}|[{'remote_type',55,[{'atom',55,'wxImage'}|[{'atom',55,'wxImage'}|[[]]]]}]]]]}]]]}]]}],
		%% Line 75
		'spec' =
		    %% Line 75
		    [{{'new',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Width'}|[{'var',75,'Height'}]]}|[{'type',75,'wxBitmap',[]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Width'}|[{'type',76,'integer',[]}]]]]}|[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Height'}|[{'type',76,'integer',[]}]]]]}]]]]}|[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'Filename'}|[{'type',77,'list',[{'var',77,'Option'}]}]]}|[{'type',77,'wxBitmap',[]}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Filename'}|[{'remote_type',78,[{'atom',78,'unicode'}|[{'atom',78,'chardata'}|[[]]]]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Option'}|[{'type',79,'tuple',[{'atom',79,'type'}|[{'remote_type',79,[{'atom',79,'wx'}|[{'atom',79,'wx_enum'}|[[]]]]}]]}]]]]}]]]]}|[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'Image'}|[{'type',80,'list',[{'var',80,'Option'}]}]]}|[{'type',80,'wxBitmap',[]}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Image'}|[{'remote_type',81,[{'atom',81,'wxImage'}|[{'atom',81,'wxImage'}|[[]]]]}]]]]}|[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'Option'}|[{'type',82,'tuple',[{'atom',82,'depth'}|[{'type',82,'integer',[]}]]}]]]]}]]]]}]]]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'new',3},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Bits'}|[{'var',110,'Width'}|[{'var',110,'Height'}]]]}|[{'type',110,'wxBitmap',[]}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Bits'}|[{'type',111,'binary',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Width'}|[{'type',111,'integer',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Height'}|[{'type',111,'integer',[]}]]]]}]]]]]}|[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'Width'}|[{'var',112,'Height'}|[{'type',112,'list',[{'var',112,'Option'}]}]]]}|[{'type',112,'wxBitmap',[]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Width'}|[{'type',113,'integer',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Height'}|[{'type',113,'integer',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Option'}|[{'type',114,'tuple',[{'atom',114,'depth'}|[{'type',114,'integer',[]}]]}]]]]}]]]]]}]]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'new',4},[{'type',128,'bounded_fun',[{'type',128,'fun',[{'type',128,'product',[{'var',128,'Bits'}|[{'var',128,'Width'}|[{'var',128,'Height'}|[{'type',128,'list',[{'var',128,'Option'}]}]]]]}|[{'type',128,'wxBitmap',[]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Bits'}|[{'type',129,'binary',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Width'}|[{'type',129,'integer',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Height'}|[{'type',129,'integer',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Option'}|[{'type',130,'tuple',[{'atom',130,'depth'}|[{'type',130,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'convertToImage',1},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'This'}]}|[{'remote_type',141,[{'atom',141,'wxImage'}|[{'atom',141,'wxImage'}|[[]]]]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'This'}|[{'type',142,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'copyFromIcon',2},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'This'}|[{'var',149,'Icon'}]]}|[{'type',149,'boolean',[]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'This'}|[{'type',150,'wxBitmap',[]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Icon'}|[{'remote_type',150,[{'atom',150,'wxIcon'}|[{'atom',150,'wxIcon'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 158
		'spec' =
		    %% Line 158
		    [{{'create',3},[{'type',158,'bounded_fun',[{'type',158,'fun',[{'type',158,'product',[{'var',158,'This'}|[{'var',158,'Width'}|[{'var',158,'Height'}]]]}|[{'type',158,'boolean',[]}]]}|[[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'This'}|[{'type',159,'wxBitmap',[]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Width'}|[{'type',159,'integer',[]}]]]]}|[{'type',159,'constraint',[{'atom',159,'is_subtype'}|[[{'var',159,'Height'}|[{'type',159,'integer',[]}]]]]}]]]]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'create',4},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'This'}|[{'var',166,'Width'}|[{'var',166,'Height'}|[{'type',166,'list',[{'var',166,'Option'}]}]]]]}|[{'type',166,'boolean',[]}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'This'}|[{'type',167,'wxBitmap',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Width'}|[{'type',167,'integer',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Height'}|[{'type',167,'integer',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Option'}|[{'type',168,'tuple',[{'atom',168,'depth'}|[{'type',168,'integer',[]}]]}]]]]}]]]]]]}]}],
		%% Line 179
		'spec' =
		    %% Line 179
		    [{{'getDepth',1},[{'type',179,'bounded_fun',[{'type',179,'fun',[{'type',179,'product',[{'var',179,'This'}]}|[{'type',179,'integer',[]}]]}|[[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'This'}|[{'type',180,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'getHeight',1},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'This'}]}|[{'type',187,'integer',[]}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'This'}|[{'type',188,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 195
		'spec' =
		    %% Line 195
		    [{{'getPalette',1},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'This'}]}|[{'remote_type',195,[{'atom',195,'wxPalette'}|[{'atom',195,'wxPalette'}|[[]]]]}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'This'}|[{'type',196,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'getMask',1},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}]}|[{'remote_type',203,[{'atom',203,'wxMask'}|[{'atom',203,'wxMask'}|[[]]]]}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'getWidth',1},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'This'}]}|[{'type',211,'integer',[]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'This'}|[{'type',212,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 219
		'spec' =
		    %% Line 219
		    [{{'getSubBitmap',2},[{'type',219,'bounded_fun',[{'type',219,'fun',[{'type',219,'product',[{'var',219,'This'}|[{'var',219,'Rect'}]]}|[{'type',219,'wxBitmap',[]}]]}|[[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'This'}|[{'type',220,'wxBitmap',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Rect'}|[{'type',220,'tuple',[{'ann_type',220,[{'var',220,'X'}|[{'type',220,'integer',[]}]]}|[{'ann_type',220,[{'var',220,'Y'}|[{'type',220,'integer',[]}]]}|[{'ann_type',220,[{'var',220,'W'}|[{'type',220,'integer',[]}]]}|[{'ann_type',220,[{'var',220,'H'}|[{'type',220,'integer',[]}]]}]]]]}]]]]}]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'loadFile',2},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'This'}|[{'var',228,'Name'}]]}|[{'type',228,'boolean',[]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'This'}|[{'type',229,'wxBitmap',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Name'}|[{'remote_type',229,[{'atom',229,'unicode'}|[{'atom',229,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'loadFile',3},[{'type',237,'bounded_fun',[{'type',237,'fun',[{'type',237,'product',[{'var',237,'This'}|[{'var',237,'Name'}|[{'type',237,'list',[{'var',237,'Option'}]}]]]}|[{'type',237,'boolean',[]}]]}|[[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'This'}|[{'type',238,'wxBitmap',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Name'}|[{'remote_type',238,[{'atom',238,'unicode'}|[{'atom',238,'chardata'}|[[]]]]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Option'}|[{'type',239,'tuple',[{'atom',239,'type'}|[{'remote_type',239,[{'atom',239,'wx'}|[{'atom',239,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'ok',1},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'This'}]}|[{'type',251,'boolean',[]}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'This'}|[{'type',252,'wxBitmap',[]}]]]]}]]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'saveFile',3},[{'type',259,'bounded_fun',[{'type',259,'fun',[{'type',259,'product',[{'var',259,'This'}|[{'var',259,'Name'}|[{'var',259,'Type'}]]]}|[{'type',259,'boolean',[]}]]}|[[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'This'}|[{'type',260,'wxBitmap',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Name'}|[{'remote_type',260,[{'atom',260,'unicode'}|[{'atom',260,'chardata'}|[[]]]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Type'}|[{'remote_type',260,[{'atom',260,'wx'}|[{'atom',260,'wx_enum'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'saveFile',4},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'This'}|[{'var',268,'Name'}|[{'var',268,'Type'}|[{'type',268,'list',[{'var',268,'Option'}]}]]]]}|[{'type',268,'boolean',[]}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'This'}|[{'type',269,'wxBitmap',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Name'}|[{'remote_type',269,[{'atom',269,'unicode'}|[{'atom',269,'chardata'}|[[]]]]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Type'}|[{'remote_type',269,[{'atom',269,'wx'}|[{'atom',269,'wx_enum'}|[[]]]]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Option'}|[{'type',270,'tuple',[{'atom',270,'palette'}|[{'remote_type',270,[{'atom',270,'wxPalette'}|[{'atom',270,'wxPalette'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 282
		'spec' =
		    %% Line 282
		    [{{'setDepth',2},[{'type',282,'bounded_fun',[{'type',282,'fun',[{'type',282,'product',[{'var',282,'This'}|[{'var',282,'Depth'}]]}|[{'atom',282,'ok'}]]}|[[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'This'}|[{'type',283,'wxBitmap',[]}]]]]}|[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'Depth'}|[{'type',283,'integer',[]}]]]]}]]]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'setHeight',2},[{'type',291,'bounded_fun',[{'type',291,'fun',[{'type',291,'product',[{'var',291,'This'}|[{'var',291,'Height'}]]}|[{'atom',291,'ok'}]]}|[[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'This'}|[{'type',292,'wxBitmap',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Height'}|[{'type',292,'integer',[]}]]]]}]]]]}]}],
		%% Line 300
		'spec' =
		    %% Line 300
		    [{{'setMask',2},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'This'}|[{'var',300,'Mask'}]]}|[{'atom',300,'ok'}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'This'}|[{'type',301,'wxBitmap',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Mask'}|[{'remote_type',301,[{'atom',301,'wxMask'}|[{'atom',301,'wxMask'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'setPalette',2},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'This'}|[{'var',309,'Palette'}]]}|[{'atom',309,'ok'}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'This'}|[{'type',310,'wxBitmap',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Palette'}|[{'remote_type',310,[{'atom',310,'wxPalette'}|[{'atom',310,'wxPalette'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 318
		'spec' =
		    %% Line 318
		    [{{'setWidth',2},[{'type',318,'bounded_fun',[{'type',318,'fun',[{'type',318,'product',[{'var',318,'This'}|[{'var',318,'Width'}]]}|[{'atom',318,'ok'}]]}|[[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'This'}|[{'type',319,'wxBitmap',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Width'}|[{'type',319,'integer',[]}]]]]}]]]]}]}],
		%% Line 327
		'spec' =
		    %% Line 327
		    [{{'destroy',1},[{'type',327,'fun',[{'type',327,'product',[{'ann_type',327,[{'var',327,'This'}|[{'type',327,'wxBitmap',[]}]]}]}|[{'atom',327,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 37
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxBitmap'})
'new'/0 =
    %% Line 42
    fun () ->
	%% Line 43
	call 'wxe_util':'construct'
	    (1030, %% Line 44
		   #{}#)
'new'/1 =
    %% Line 57
    fun (_cor0) ->
	case _cor0 of
	  <Filename>
	      when %% Line 58
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 59
	      apply 'new'/2
		  (Filename, [])
	  %% Line 61
	  <Image = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 62
						      ( 'true'
							-| ['compiler_generated'] ) ->
	      %% Line 63
	      apply 'new'/2
		  (Image, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 84
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Width,Height>
	      when let <_cor2> =
		    %% Line 85
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor3> =
			%% Line 85
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 85
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 86
	      apply 'new'/3
		  (Width, Height, [])
	  %% Line 87
	  <Filename,Options>
	      when let <_cor4> =
		    %% Line 88
		    call 'erlang':'is_list'
			(Filename)
		in  let <_cor5> =
			%% Line 88
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 88
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <Filename_UC> =
		  %% Line 89
		  call 'unicode':'characters_to_binary'
		      ([Filename|[0]])
	      in  let <MOpts> =
		      %% Line 90
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'type',Type},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Type>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 91
			      <BadOpt,_cor35> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 92
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 92
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor20> =
				  %% Line 94
				  call 'erlang':'byte_size'
				      (Filename_UC)
			      in  let <_cor15> =
				      %% Line 94
				      call 'erlang':'byte_size'
					  (Filename_UC)
				  in  let <_cor16> =
					  %% Line 94
					  call 'erlang':'+'
					      (4, _cor15)
				      in  let <_cor17> =
					      %% Line 94
					      call 'erlang':'band'
						  (_cor16, 7)
					  in  let <_cor18> =
						  %% Line 94
						  call 'erlang':'-'
						      (8, _cor17)
					      in  let <_cor19> =
						      %% Line 94
						      call 'erlang':'band'
							  (_cor18, 7)
						  in  let <_cor21> =
							  %% Line 94
							  #{#<_cor20>(32,1,'integer',['unsigned'|['native']]),
							    #<Filename_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor19,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 93
							  call 'wxe_util':'construct'
							      (1033, _cor21)
	  %% Line 95
	  <{'wx_ref',ImageRef,ImageT,_cor36},Options>
	      when %% Line 96
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 97
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ImageT,
				   'wxImage') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ImageT:'parent_class'
				('wxImage')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 98
		      ( fun (_cor26,_cor25) ->
			    case <_cor26,_cor25> of
			      <{'depth',Depth},Acc> when 'true' ->
				  let <_cor24> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Depth>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor24|Acc]
			      %% Line 99
			      <BadOpt,_cor37> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-1-'}}] )
		  in  let <_cor30> =
			  %% Line 100
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 100
			      call 'erlang':'list_to_binary'
				  (_cor30)
			  in  let <_cor32> =
				  %% Line 102
				  #{#<ImageRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 101
				  call 'wxe_util':'construct'
				      (1034, _cor32)
	  ( <_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 116
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bits,Width,Height>
	      when %% Line 117
		try
		    let <_cor3> =
			call 'erlang':'is_binary'
			    (Bits)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 118
	      apply 'new'/4
		  (Bits, Width, Height, [])
	  %% Line 119
	  <Width,Height,Options>
	      when %% Line 120
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor9> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <MOpts> =
		  %% Line 121
		  ( fun (_cor13,_cor12) ->
			case <_cor13,_cor12> of
			  <{'depth',Depth},Acc> when 'true' ->
			      let <_cor11> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Depth>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor11|Acc]
			  %% Line 122
			  <BadOpt,_cor23> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/3-fun-0-'}}] )
	      in  let <_cor17> =
		      %% Line 123
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 123
			  call 'erlang':'list_to_binary'
			      (_cor17)
		      in  let <_cor19> =
			      %% Line 125
			      #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				#<Height>(32,1,'integer',['unsigned'|['native']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 124
			      call 'wxe_util':'construct'
				  (1031, _cor19)
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 131
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bits,Width,Height,Options>
	      when %% Line 132
		try
		    let <_cor4> =
			call 'erlang':'is_binary'
			    (Bits)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Width)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Height)
			    in  let <_cor7> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 133
		  call 'wxe_util':'send_bin'
		      (Bits)
		  let <MOpts> =
		      %% Line 134
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'depth',Depth},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Depth>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 135
			      <BadOpt,_cor23> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 136
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 136
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 138
				  #{#<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 137
				  call 'wxe_util':'construct'
				      (1032, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'convertToImage'/1 =
    %% Line 143
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 144
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 146
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 145
		      call 'wxe_util':'call'
			  (1036, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'convertToImage',1}}] )
	    -| ['compiler_generated'] )
	end
'copyFromIcon'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',IconRef,IconT,_cor10}> when 'true' ->
	      do  %% Line 152
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 153
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (IconT,
				       'wxIcon') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call IconT:'parent_class'
				    ('wxIcon')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 155
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<IconRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 154
			  call 'wxe_util':'call'
			      (1037, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'copyFromIcon',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 161
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Width,Height>
	      when let <_cor3> =
		    %% Line 162
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 162
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 162
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 163
	      apply 'create'/4
		  (This, Width, Height, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'create'/4 =
    %% Line 169
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Width,Height,Options>
	      when %% Line 170
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Width)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Height)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 171
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 172
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'depth',Depth},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Depth>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 173
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-create/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 174
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 174
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 176
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 175
				  call 'wxe_util':'call'
				      (1038, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'create',4}}] )
	    -| ['compiler_generated'] )
	end
'getDepth'/1 =
    %% Line 181
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 182
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 184
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 183
		      call 'wxe_util':'call'
			  (1039, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDepth',1}}] )
	    -| ['compiler_generated'] )
	end
'getHeight'/1 =
    %% Line 189
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 190
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 192
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 191
		      call 'wxe_util':'call'
			  (1040, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getHeight',1}}] )
	    -| ['compiler_generated'] )
	end
'getPalette'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 198
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 200
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 199
		      call 'wxe_util':'call'
			  (1041, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPalette',1}}] )
	    -| ['compiler_generated'] )
	end
'getMask'/1 =
    %% Line 205
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 206
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 208
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 207
		      call 'wxe_util':'call'
			  (1042, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMask',1}}] )
	    -| ['compiler_generated'] )
	end
'getWidth'/1 =
    %% Line 213
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 216
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 215
		      call 'wxe_util':'call'
			  (1043, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getSubBitmap'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor13},{RectX,RectY,RectW,RectH}>
	      when %% Line 222
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (RectX)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(RectY)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (RectW)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(RectH)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 223
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 225
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<RectX>(32,1,'integer',['unsigned'|['native']]),
			#<RectY>(32,1,'integer',['unsigned'|['native']]),
			#<RectW>(32,1,'integer',['unsigned'|['native']]),
			#<RectH>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 224
		      call 'wxe_util':'call'
			  (1044, _cor10)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'getSubBitmap',2}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Name>
	      when %% Line 232
		call 'erlang':'is_list'
		    (Name) ->
	      %% Line 233
	      apply 'loadFile'/3
		  (This, Name, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'loadFile',2}}] )
	    -| ['compiler_generated'] )
	end
'loadFile'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},Name,Options>
	      when let <_cor3> =
		    %% Line 241
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			%% Line 241
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 241
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 242
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 243
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <MOpts> =
			  %% Line 244
			  ( fun (_cor10,_cor9) ->
				case <_cor10,_cor9> of
				  <{'type',Type},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Type>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 245
				  <BadOpt,_cor27> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-loadFile/3-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 246
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 246
				  call 'erlang':'list_to_binary'
				      (_cor14)
			      in  let <_cor21> =
				      %% Line 248
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor16> =
					  %% Line 248
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor17> =
					      %% Line 248
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  %% Line 248
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      %% Line 248
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  %% Line 248
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      %% Line 248
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 247
							      call 'wxe_util':'call'
								  (1045, _cor22)
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'loadFile',3}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 253
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 254
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 256
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 255
		      call 'wxe_util':'call'
			  (1046, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ok',1}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/3 =
    %% Line 262
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Name,Type>
	      when let <_cor3> =
		    %% Line 263
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			%% Line 263
			call 'erlang':'is_integer'
			    (Type)
		    in  %% Line 263
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 264
	      apply 'saveFile'/4
		  (This, Name, Type, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'saveFile',3}}] )
	    -| ['compiler_generated'] )
	end
'saveFile'/4 =
    %% Line 271
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Name,Type,Options>
	      when %% Line 272
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Name)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Type)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 273
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 274
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <MOpts> =
			  %% Line 275
			  ( fun (_cor15,_cor14) ->
				case <_cor15,_cor14> of
				  <{'palette',{'wx_ref',PaletteRef,PaletteT,_cor33}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (PaletteT,
							   'wxPalette') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call PaletteT:'parent_class'
							('wxPalette')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor13> =
					      #{#<1>(32,1,'integer',['unsigned'|['native']]),
						#<PaletteRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor13|Acc]
				  %% Line 276
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-saveFile/4-fun-0-'}}] )
		      in  let <_cor19> =
			      %% Line 277
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 277
				  call 'erlang':'list_to_binary'
				      (_cor19)
			      in  let <_cor26> =
				      %% Line 279
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor21> =
					  %% Line 279
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor22> =
					      %% Line 279
					      call 'erlang':'+'
						  (0, _cor21)
					  in  let <_cor23> =
						  %% Line 279
						  call 'erlang':'band'
						      (_cor22, 7)
					      in  let <_cor24> =
						      %% Line 279
						      call 'erlang':'-'
							  (8, _cor23)
						  in  let <_cor25> =
							  %% Line 279
							  call 'erlang':'band'
							      (_cor24, 7)
						      in  let <_cor27> =
							      %% Line 279
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor26>(32,1,'integer',['unsigned'|['native']]),
								#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor25,8,'integer',['unsigned'|['big']]),
								#<Type>(32,1,'integer',['unsigned'|['native']]),
								#<0>(32,1,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 278
							      call 'wxe_util':'call'
								  (1047, _cor27)
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'saveFile',4}}] )
	    -| ['compiler_generated'] )
	end
'setDepth'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Depth>
	      when %% Line 285
		call 'erlang':'is_integer'
		    (Depth) ->
	      do  %% Line 286
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 288
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Depth>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 287
		      call 'wxe_util':'cast'
			  (1048, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setDepth',2}}] )
	    -| ['compiler_generated'] )
	end
'setHeight'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Height>
	      when %% Line 294
		call 'erlang':'is_integer'
		    (Height) ->
	      do  %% Line 295
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 297
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 296
		      call 'wxe_util':'cast'
			  (1049, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setHeight',2}}] )
	    -| ['compiler_generated'] )
	end
'setMask'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',MaskRef,MaskT,_cor10}> when 'true' ->
	      do  %% Line 303
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 304
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MaskT,
				       'wxMask') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MaskT:'parent_class'
				    ('wxMask')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 306
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MaskRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 305
			  call 'wxe_util':'cast'
			      (1050, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setMask',2}}] )
	    -| ['compiler_generated'] )
	end
'setPalette'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PaletteRef,PaletteT,_cor10}> when 'true' ->
	      do  %% Line 312
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 313
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PaletteT,
				       'wxPalette') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PaletteT:'parent_class'
				    ('wxPalette')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 315
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PaletteRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 314
			  call 'wxe_util':'cast'
			      (1051, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setPalette',2}}] )
	    -| ['compiler_generated'] )
	end
'setWidth'/2 =
    %% Line 320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 321
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 322
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 324
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 323
		      call 'wxe_util':'cast'
			  (1052, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWidth',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 329
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxBitmap') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxBitmap')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 330
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 331
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxBitmap')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxBitmap', _cor0)
end