module 'wxTreeCtrl' ['addRoot'/2,
		     'addRoot'/3,
		     'appendItem'/3,
		     'appendItem'/4,
		     'assignImageList'/2,
		     'assignStateImageList'/2,
		     'cacheBestSize'/2,
		     'captureMouse'/1,
		     'center'/1,
		     'center'/2,
		     'centerOnParent'/1,
		     'centerOnParent'/2,
		     'centre'/1,
		     'centre'/2,
		     'centreOnParent'/1,
		     'centreOnParent'/2,
		     'clearBackground'/1,
		     'clientToScreen'/2,
		     'clientToScreen'/3,
		     'close'/1,
		     'close'/2,
		     'collapse'/2,
		     'collapseAndReset'/2,
		     'connect'/2,
		     'connect'/3,
		     'convertDialogToPixels'/2,
		     'convertPixelsToDialog'/2,
		     'create'/2,
		     'create'/3,
		     'delete'/2,
		     'deleteAllItems'/1,
		     'deleteChildren'/2,
		     'destroy'/1,
		     'destroyChildren'/1,
		     'disable'/1,
		     'disconnect'/1,
		     'disconnect'/2,
		     'disconnect'/3,
		     'editLabel'/2,
		     'enable'/1,
		     'enable'/2,
		     'ensureVisible'/2,
		     'expand'/2,
		     'findWindow'/2,
		     'fit'/1,
		     'fitInside'/1,
		     'freeze'/1,
		     'getAcceleratorTable'/1,
		     'getBackgroundColour'/1,
		     'getBackgroundStyle'/1,
		     'getBestSize'/1,
		     'getBoundingRect'/2,
		     'getBoundingRect'/3,
		     'getCaret'/1,
		     'getCharHeight'/1,
		     'getCharWidth'/1,
		     'getChildren'/1,
		     'getChildrenCount'/2,
		     'getChildrenCount'/3,
		     'getClientSize'/1,
		     'getContainingSizer'/1,
		     'getCount'/1,
		     'getCursor'/1,
		     'getDropTarget'/1,
		     'getEditControl'/1,
		     'getEventHandler'/1,
		     'getExtraStyle'/1,
		     'getFirstChild'/2,
		     'getFirstVisibleItem'/1,
		     'getFont'/1,
		     'getForegroundColour'/1,
		     'getGrandParent'/1,
		     'getHandle'/1,
		     'getHelpText'/1,
		     'getId'/1,
		     'getImageList'/1,
		     'getIndent'/1,
		     'getItemBackgroundColour'/2,
		     'getItemData'/2,
		     'getItemFont'/2,
		     'getItemImage'/2,
		     'getItemImage'/3,
		     'getItemParent'/2,
		     'getItemText'/2,
		     'getItemTextColour'/2,
		     'getLabel'/1,
		     'getLastChild'/2,
		     'getMaxSize'/1,
		     'getMinSize'/1,
		     'getName'/1,
		     'getNextChild'/3,
		     'getNextSibling'/2,
		     'getNextVisible'/2,
		     'getParent'/1,
		     'getPosition'/1,
		     'getPrevSibling'/2,
		     'getPrevVisible'/2,
		     'getRect'/1,
		     'getRootItem'/1,
		     'getScreenPosition'/1,
		     'getScreenRect'/1,
		     'getScrollPos'/2,
		     'getScrollRange'/2,
		     'getScrollThumb'/2,
		     'getSelection'/1,
		     'getSelections'/1,
		     'getSize'/1,
		     'getSizer'/1,
		     'getStateImageList'/1,
		     'getTextExtent'/2,
		     'getTextExtent'/3,
		     'getToolTip'/1,
		     'getUpdateRegion'/1,
		     'getVirtualSize'/1,
		     'getWindowStyleFlag'/1,
		     'getWindowVariant'/1,
		     'hasCapture'/1,
		     'hasScrollbar'/2,
		     'hasTransparentBackground'/1,
		     'hide'/1,
		     'hitTest'/2,
		     'inheritAttributes'/1,
		     'initDialog'/1,
		     'insertItem'/4,
		     'insertItem'/5,
		     'invalidateBestSize'/1,
		     'isBold'/2,
		     'isEnabled'/1,
		     'isExpanded'/2,
		     'isExposed'/2,
		     'isExposed'/3,
		     'isExposed'/5,
		     'isRetained'/1,
		     'isSelected'/2,
		     'isShown'/1,
		     'isTopLevel'/1,
		     'isTreeItemIdOk'/1,
		     'isVisible'/2,
		     'itemHasChildren'/2,
		     'layout'/1,
		     'lineDown'/1,
		     'lineUp'/1,
		     'lower'/1,
		     'makeModal'/1,
		     'makeModal'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'move'/2,
		     'move'/3,
		     'move'/4,
		     'moveAfterInTabOrder'/2,
		     'moveBeforeInTabOrder'/2,
		     'navigate'/1,
		     'navigate'/2,
		     'new'/0,
		     'new'/1,
		     'new'/2,
		     'pageDown'/1,
		     'pageUp'/1,
		     'parent_class'/1,
		     'popEventHandler'/1,
		     'popEventHandler'/2,
		     'popupMenu'/2,
		     'popupMenu'/3,
		     'popupMenu'/4,
		     'prependItem'/3,
		     'prependItem'/4,
		     'raise'/1,
		     'refresh'/1,
		     'refresh'/2,
		     'refreshRect'/2,
		     'refreshRect'/3,
		     'releaseMouse'/1,
		     'removeChild'/2,
		     'reparent'/2,
		     'screenToClient'/1,
		     'screenToClient'/2,
		     'scrollLines'/2,
		     'scrollPages'/2,
		     'scrollTo'/2,
		     'scrollWindow'/3,
		     'scrollWindow'/4,
		     'selectItem'/2,
		     'selectItem'/3,
		     'setAcceleratorTable'/2,
		     'setAutoLayout'/2,
		     'setBackgroundColour'/2,
		     'setBackgroundStyle'/2,
		     'setCaret'/2,
		     'setClientSize'/2,
		     'setClientSize'/3,
		     'setContainingSizer'/2,
		     'setCursor'/2,
		     'setDropTarget'/2,
		     'setExtraStyle'/2,
		     'setFocus'/1,
		     'setFocusFromKbd'/1,
		     'setFont'/2,
		     'setForegroundColour'/2,
		     'setHelpText'/2,
		     'setId'/2,
		     'setImageList'/2,
		     'setIndent'/2,
		     'setItemBackgroundColour'/3,
		     'setItemBold'/2,
		     'setItemBold'/3,
		     'setItemData'/3,
		     'setItemDropHighlight'/2,
		     'setItemDropHighlight'/3,
		     'setItemFont'/3,
		     'setItemHasChildren'/2,
		     'setItemHasChildren'/3,
		     'setItemImage'/3,
		     'setItemImage'/4,
		     'setItemText'/3,
		     'setItemTextColour'/3,
		     'setLabel'/2,
		     'setMaxSize'/2,
		     'setMinSize'/2,
		     'setName'/2,
		     'setOwnBackgroundColour'/2,
		     'setOwnFont'/2,
		     'setOwnForegroundColour'/2,
		     'setPalette'/2,
		     'setScrollPos'/3,
		     'setScrollPos'/4,
		     'setScrollbar'/5,
		     'setScrollbar'/6,
		     'setSize'/2,
		     'setSize'/3,
		     'setSize'/5,
		     'setSize'/6,
		     'setSizeHints'/2,
		     'setSizeHints'/3,
		     'setSizeHints'/4,
		     'setSizer'/2,
		     'setSizer'/3,
		     'setSizerAndFit'/2,
		     'setSizerAndFit'/3,
		     'setStateImageList'/2,
		     'setThemeEnabled'/2,
		     'setToolTip'/2,
		     'setVirtualSize'/2,
		     'setVirtualSize'/3,
		     'setVirtualSizeHints'/2,
		     'setVirtualSizeHints'/3,
		     'setVirtualSizeHints'/4,
		     'setWindowStyle'/2,
		     'setWindowStyleFlag'/2,
		     'setWindowVariant'/2,
		     'shouldInheritColours'/1,
		     'show'/1,
		     'show'/2,
		     'sortChildren'/2,
		     'thaw'/1,
		     'toggle'/2,
		     'toggleItemSelection'/2,
		     'transferDataFromWindow'/1,
		     'transferDataToWindow'/1,
		     'unselect'/1,
		     'unselectAll'/1,
		     'unselectItem'/2,
		     'update'/1,
		     'updateWindowUI'/1,
		     'updateWindowUI'/2,
		     'validate'/1,
		     'warpPointer'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 93
		'export_type' =
		    %% Line 93
		    [{'wxTreeCtrl',0}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxTreeCtrl',{'remote_type',100,[{'atom',100,'wx'}|[{'atom',100,'wx_object'}|[[]]]]},[]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'new',0},[{'type',102,'fun',[{'type',102,'product',[]}|[{'type',102,'wxTreeCtrl',[]}]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'new',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Parent'}]}|[{'type',108,'wxTreeCtrl',[]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Parent'}|[{'remote_type',109,[{'atom',109,'wxWindow'}|[{'atom',109,'wxWindow'}|[[]]]]}]]]]}]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'new',2},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'Parent'}|[{'type',116,'list',[{'var',116,'Option'}]}]]}|[{'type',116,'wxTreeCtrl',[]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Parent'}|[{'remote_type',117,[{'atom',117,'wxWindow'}|[{'atom',117,'wxWindow'}|[[]]]]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Option'}|[{'type',118,'union',[{'type',118,'tuple',[{'atom',118,'id'}|[{'type',118,'integer',[]}]]}|[{'type',119,'tuple',[{'atom',119,'pos'}|[{'type',119,'tuple',[{'ann_type',119,[{'var',119,'X'}|[{'type',119,'integer',[]}]]}|[{'ann_type',119,[{'var',119,'Y'}|[{'type',119,'integer',[]}]]}]]}]]}|[{'type',120,'tuple',[{'atom',120,'size'}|[{'type',120,'tuple',[{'ann_type',120,[{'var',120,'W'}|[{'type',120,'integer',[]}]]}|[{'ann_type',120,[{'var',120,'H'}|[{'type',120,'integer',[]}]]}]]}]]}|[{'type',121,'tuple',[{'atom',121,'style'}|[{'type',121,'integer',[]}]]}|[{'type',122,'tuple',[{'atom',122,'validator'}|[{'remote_type',122,[{'atom',122,'wx'}|[{'atom',122,'wx_object'}|[[]]]]}]]}]]]]]}]]]]}]]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'addRoot',2},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'This'}|[{'var',137,'Text'}]]}|[{'type',137,'integer',[]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'This'}|[{'type',138,'wxTreeCtrl',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Text'}|[{'remote_type',138,[{'atom',138,'unicode'}|[{'atom',138,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'addRoot',3},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}|[{'var',145,'Text'}|[{'type',145,'list',[{'var',145,'Option'}]}]]]}|[{'type',145,'integer',[]}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxTreeCtrl',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Text'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Option'}|[{'type',147,'union',[{'type',147,'tuple',[{'atom',147,'image'}|[{'type',147,'integer',[]}]]}|[{'type',148,'tuple',[{'atom',148,'selectedImage'}|[{'type',148,'integer',[]}]]}|[{'type',149,'tuple',[{'atom',149,'data'}|[{'type',149,'term',[]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'appendItem',3},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}|[{'var',163,'Parent'}|[{'var',163,'Text'}]]]}|[{'type',163,'integer',[]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxTreeCtrl',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Parent'}|[{'type',164,'integer',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Text'}|[{'remote_type',164,[{'atom',164,'unicode'}|[{'atom',164,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'appendItem',4},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'This'}|[{'var',171,'Parent'}|[{'var',171,'Text'}|[{'type',171,'list',[{'var',171,'Option'}]}]]]]}|[{'type',171,'integer',[]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'This'}|[{'type',172,'wxTreeCtrl',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Parent'}|[{'type',172,'integer',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Text'}|[{'remote_type',172,[{'atom',172,'unicode'}|[{'atom',172,'chardata'}|[[]]]]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Option'}|[{'type',173,'union',[{'type',173,'tuple',[{'atom',173,'image'}|[{'type',173,'integer',[]}]]}|[{'type',174,'tuple',[{'atom',174,'selectedImage'}|[{'type',174,'integer',[]}]]}|[{'type',175,'tuple',[{'atom',175,'data'}|[{'type',175,'term',[]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'assignImageList',2},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'This'}|[{'var',189,'ImageList'}]]}|[{'atom',189,'ok'}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'This'}|[{'type',190,'wxTreeCtrl',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'ImageList'}|[{'remote_type',190,[{'atom',190,'wxImageList'}|[{'atom',190,'wxImageList'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 198
		'spec' =
		    %% Line 198
		    [{{'assignStateImageList',2},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'This'}|[{'var',198,'ImageList'}]]}|[{'atom',198,'ok'}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'This'}|[{'type',199,'wxTreeCtrl',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'ImageList'}|[{'remote_type',199,[{'atom',199,'wxImageList'}|[{'atom',199,'wxImageList'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'collapse',2},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}|[{'var',207,'Item'}]]}|[{'atom',207,'ok'}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxTreeCtrl',[]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Item'}|[{'type',208,'integer',[]}]]]]}]]]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'collapseAndReset',2},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'This'}|[{'var',216,'Item'}]]}|[{'atom',216,'ok'}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'This'}|[{'type',217,'wxTreeCtrl',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Item'}|[{'type',217,'integer',[]}]]]]}]]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'create',2},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'This'}|[{'var',225,'Parent'}]]}|[{'type',225,'boolean',[]}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'This'}|[{'type',226,'wxTreeCtrl',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Parent'}|[{'remote_type',226,[{'atom',226,'wxWindow'}|[{'atom',226,'wxWindow'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'create',3},[{'type',233,'bounded_fun',[{'type',233,'fun',[{'type',233,'product',[{'var',233,'This'}|[{'var',233,'Parent'}|[{'type',233,'list',[{'var',233,'Option'}]}]]]}|[{'type',233,'boolean',[]}]]}|[[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'This'}|[{'type',234,'wxTreeCtrl',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Parent'}|[{'remote_type',234,[{'atom',234,'wxWindow'}|[{'atom',234,'wxWindow'}|[[]]]]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Option'}|[{'type',235,'union',[{'type',235,'tuple',[{'atom',235,'id'}|[{'type',235,'integer',[]}]]}|[{'type',236,'tuple',[{'atom',236,'pos'}|[{'type',236,'tuple',[{'ann_type',236,[{'var',236,'X'}|[{'type',236,'integer',[]}]]}|[{'ann_type',236,[{'var',236,'Y'}|[{'type',236,'integer',[]}]]}]]}]]}|[{'type',237,'tuple',[{'atom',237,'size'}|[{'type',237,'tuple',[{'ann_type',237,[{'var',237,'W'}|[{'type',237,'integer',[]}]]}|[{'ann_type',237,[{'var',237,'H'}|[{'type',237,'integer',[]}]]}]]}]]}|[{'type',238,'tuple',[{'atom',238,'style'}|[{'type',238,'integer',[]}]]}|[{'type',239,'tuple',[{'atom',239,'validator'}|[{'remote_type',239,[{'atom',239,'wx'}|[{'atom',239,'wx_object'}|[[]]]]}]]}]]]]]}]]]]}]]]]]}]}],
		%% Line 255
		'spec' =
		    %% Line 255
		    [{{'delete',2},[{'type',255,'bounded_fun',[{'type',255,'fun',[{'type',255,'product',[{'var',255,'This'}|[{'var',255,'Item'}]]}|[{'atom',255,'ok'}]]}|[[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'This'}|[{'type',256,'wxTreeCtrl',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Item'}|[{'type',256,'integer',[]}]]]]}]]]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'deleteAllItems',1},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'This'}]}|[{'atom',264,'ok'}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'This'}|[{'type',265,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 272
		'spec' =
		    %% Line 272
		    [{{'deleteChildren',2},[{'type',272,'bounded_fun',[{'type',272,'fun',[{'type',272,'product',[{'var',272,'This'}|[{'var',272,'Item'}]]}|[{'atom',272,'ok'}]]}|[[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'This'}|[{'type',273,'wxTreeCtrl',[]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Item'}|[{'type',273,'integer',[]}]]]]}]]]]}]}],
		%% Line 281
		'spec' =
		    %% Line 281
		    [{{'editLabel',2},[{'type',281,'bounded_fun',[{'type',281,'fun',[{'type',281,'product',[{'var',281,'This'}|[{'var',281,'Item'}]]}|[{'remote_type',281,[{'atom',281,'wxTextCtrl'}|[{'atom',281,'wxTextCtrl'}|[[]]]]}]]}|[[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'This'}|[{'type',282,'wxTreeCtrl',[]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'Item'}|[{'type',282,'integer',[]}]]]]}]]]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'ensureVisible',2},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'This'}|[{'var',290,'Item'}]]}|[{'atom',290,'ok'}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'This'}|[{'type',291,'wxTreeCtrl',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Item'}|[{'type',291,'integer',[]}]]]]}]]]]}]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'expand',2},[{'type',299,'bounded_fun',[{'type',299,'fun',[{'type',299,'product',[{'var',299,'This'}|[{'var',299,'Item'}]]}|[{'atom',299,'ok'}]]}|[[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'This'}|[{'type',300,'wxTreeCtrl',[]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Item'}|[{'type',300,'integer',[]}]]]]}]]]]}]}],
		%% Line 308
		'spec' =
		    %% Line 308
		    [{{'getBoundingRect',2},[{'type',308,'bounded_fun',[{'type',308,'fun',[{'type',308,'product',[{'var',308,'This'}|[{'var',308,'Item'}]]}|[{'var',308,'Result'}]]}|[[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Result'}|[{'type',309,'tuple',[{'ann_type',309,[{'var',309,'Res'}|[{'type',309,'boolean',[]}]]}|[{'ann_type',309,[{'var',309,'Rect'}|[{'type',309,'tuple',[{'ann_type',309,[{'var',309,'X'}|[{'type',309,'integer',[]}]]}|[{'ann_type',309,[{'var',309,'Y'}|[{'type',309,'integer',[]}]]}|[{'ann_type',309,[{'var',309,'W'}|[{'type',309,'integer',[]}]]}|[{'ann_type',309,[{'var',309,'H'}|[{'type',309,'integer',[]}]]}]]]]}]]}]]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'This'}|[{'type',310,'wxTreeCtrl',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Item'}|[{'type',310,'integer',[]}]]]]}]]]]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'getBoundingRect',3},[{'type',317,'bounded_fun',[{'type',317,'fun',[{'type',317,'product',[{'var',317,'This'}|[{'var',317,'Item'}|[{'type',317,'list',[{'var',317,'Option'}]}]]]}|[{'var',317,'Result'}]]}|[[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Result'}|[{'type',318,'tuple',[{'ann_type',318,[{'var',318,'Res'}|[{'type',318,'boolean',[]}]]}|[{'ann_type',318,[{'var',318,'Rect'}|[{'type',318,'tuple',[{'ann_type',318,[{'var',318,'X'}|[{'type',318,'integer',[]}]]}|[{'ann_type',318,[{'var',318,'Y'}|[{'type',318,'integer',[]}]]}|[{'ann_type',318,[{'var',318,'W'}|[{'type',318,'integer',[]}]]}|[{'ann_type',318,[{'var',318,'H'}|[{'type',318,'integer',[]}]]}]]]]}]]}]]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'This'}|[{'type',319,'wxTreeCtrl',[]}]]]]}|[{'type',319,'constraint',[{'atom',319,'is_subtype'}|[[{'var',319,'Item'}|[{'type',319,'integer',[]}]]]]}|[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Option'}|[{'type',320,'tuple',[{'atom',320,'textOnly'}|[{'type',320,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 331
		'spec' =
		    %% Line 331
		    [{{'getChildrenCount',2},[{'type',331,'bounded_fun',[{'type',331,'fun',[{'type',331,'product',[{'var',331,'This'}|[{'var',331,'Item'}]]}|[{'type',331,'integer',[]}]]}|[[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'This'}|[{'type',332,'wxTreeCtrl',[]}]]]]}|[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Item'}|[{'type',332,'integer',[]}]]]]}]]]]}]}],
		%% Line 339
		'spec' =
		    %% Line 339
		    [{{'getChildrenCount',3},[{'type',339,'bounded_fun',[{'type',339,'fun',[{'type',339,'product',[{'var',339,'This'}|[{'var',339,'Item'}|[{'type',339,'list',[{'var',339,'Option'}]}]]]}|[{'type',339,'integer',[]}]]}|[[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'This'}|[{'type',340,'wxTreeCtrl',[]}]]]]}|[{'type',340,'constraint',[{'atom',340,'is_subtype'}|[[{'var',340,'Item'}|[{'type',340,'integer',[]}]]]]}|[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Option'}|[{'type',341,'tuple',[{'atom',341,'recursively'}|[{'type',341,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 352
		'spec' =
		    %% Line 352
		    [{{'getCount',1},[{'type',352,'bounded_fun',[{'type',352,'fun',[{'type',352,'product',[{'var',352,'This'}]}|[{'type',352,'integer',[]}]]}|[[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'This'}|[{'type',353,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 360
		'spec' =
		    %% Line 360
		    [{{'getEditControl',1},[{'type',360,'bounded_fun',[{'type',360,'fun',[{'type',360,'product',[{'var',360,'This'}]}|[{'remote_type',360,[{'atom',360,'wxTextCtrl'}|[{'atom',360,'wxTextCtrl'}|[[]]]]}]]}|[[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'This'}|[{'type',361,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'getFirstChild',2},[{'type',368,'bounded_fun',[{'type',368,'fun',[{'type',368,'product',[{'var',368,'This'}|[{'var',368,'Item'}]]}|[{'var',368,'Result'}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Result'}|[{'type',369,'tuple',[{'ann_type',369,[{'var',369,'Res'}|[{'type',369,'integer',[]}]]}|[{'ann_type',369,[{'var',369,'Cookie'}|[{'type',369,'integer',[]}]]}]]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'This'}|[{'type',370,'wxTreeCtrl',[]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Item'}|[{'type',370,'integer',[]}]]]]}]]]]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'getNextChild',3},[{'type',378,'bounded_fun',[{'type',378,'fun',[{'type',378,'product',[{'var',378,'This'}|[{'var',378,'Item'}|[{'var',378,'Cookie'}]]]}|[{'var',378,'Result'}]]}|[[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'Result'}|[{'type',379,'tuple',[{'ann_type',379,[{'var',379,'Res'}|[{'type',379,'integer',[]}]]}|[{'ann_type',379,[{'var',379,'Cookie'}|[{'type',379,'integer',[]}]]}]]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'This'}|[{'type',380,'wxTreeCtrl',[]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'Item'}|[{'type',380,'integer',[]}]]]]}|[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'Cookie'}|[{'type',380,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'getFirstVisibleItem',1},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'This'}]}|[{'type',388,'integer',[]}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'This'}|[{'type',389,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 396
		'spec' =
		    %% Line 396
		    [{{'getImageList',1},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'This'}]}|[{'remote_type',396,[{'atom',396,'wxImageList'}|[{'atom',396,'wxImageList'}|[[]]]]}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'This'}|[{'type',397,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'getIndent',1},[{'type',404,'bounded_fun',[{'type',404,'fun',[{'type',404,'product',[{'var',404,'This'}]}|[{'type',404,'integer',[]}]]}|[[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'This'}|[{'type',405,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 412
		'spec' =
		    %% Line 412
		    [{{'getItemBackgroundColour',2},[{'type',412,'bounded_fun',[{'type',412,'fun',[{'type',412,'product',[{'var',412,'This'}|[{'var',412,'Item'}]]}|[{'remote_type',412,[{'atom',412,'wx'}|[{'atom',412,'wx_colour4'}|[[]]]]}]]}|[[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'This'}|[{'type',413,'wxTreeCtrl',[]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Item'}|[{'type',413,'integer',[]}]]]]}]]]]}]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'getItemData',2},[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'This'}|[{'var',421,'Item'}]]}|[{'type',421,'term',[]}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'This'}|[{'type',422,'wxTreeCtrl',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Item'}|[{'type',422,'integer',[]}]]]]}]]]]}]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'getItemFont',2},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'This'}|[{'var',430,'Item'}]]}|[{'remote_type',430,[{'atom',430,'wxFont'}|[{'atom',430,'wxFont'}|[[]]]]}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'This'}|[{'type',431,'wxTreeCtrl',[]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Item'}|[{'type',431,'integer',[]}]]]]}]]]]}]}],
		%% Line 439
		'spec' =
		    %% Line 439
		    [{{'getItemImage',2},[{'type',439,'bounded_fun',[{'type',439,'fun',[{'type',439,'product',[{'var',439,'This'}|[{'var',439,'Item'}]]}|[{'type',439,'integer',[]}]]}|[[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'This'}|[{'type',440,'wxTreeCtrl',[]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Item'}|[{'type',440,'integer',[]}]]]]}]]]]}]}],
		%% Line 449
		'spec' =
		    %% Line 449
		    [{{'getItemImage',3},[{'type',449,'bounded_fun',[{'type',449,'fun',[{'type',449,'product',[{'var',449,'This'}|[{'var',449,'Item'}|[{'type',449,'list',[{'var',449,'Option'}]}]]]}|[{'type',449,'integer',[]}]]}|[[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'This'}|[{'type',450,'wxTreeCtrl',[]}]]]]}|[{'type',450,'constraint',[{'atom',450,'is_subtype'}|[[{'var',450,'Item'}|[{'type',450,'integer',[]}]]]]}|[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Option'}|[{'type',451,'tuple',[{'atom',451,'which'}|[{'remote_type',451,[{'atom',451,'wx'}|[{'atom',451,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]}],
		%% Line 462
		'spec' =
		    %% Line 462
		    [{{'getItemText',2},[{'type',462,'bounded_fun',[{'type',462,'fun',[{'type',462,'product',[{'var',462,'This'}|[{'var',462,'Item'}]]}|[{'remote_type',462,[{'atom',462,'unicode'}|[{'atom',462,'charlist'}|[[]]]]}]]}|[[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'This'}|[{'type',463,'wxTreeCtrl',[]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'Item'}|[{'type',463,'integer',[]}]]]]}]]]]}]}],
		%% Line 471
		'spec' =
		    %% Line 471
		    [{{'getItemTextColour',2},[{'type',471,'bounded_fun',[{'type',471,'fun',[{'type',471,'product',[{'var',471,'This'}|[{'var',471,'Item'}]]}|[{'remote_type',471,[{'atom',471,'wx'}|[{'atom',471,'wx_colour4'}|[[]]]]}]]}|[[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'This'}|[{'type',472,'wxTreeCtrl',[]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Item'}|[{'type',472,'integer',[]}]]]]}]]]]}]}],
		%% Line 480
		'spec' =
		    %% Line 480
		    [{{'getLastChild',2},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'This'}|[{'var',480,'Item'}]]}|[{'type',480,'integer',[]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'This'}|[{'type',481,'wxTreeCtrl',[]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Item'}|[{'type',481,'integer',[]}]]]]}]]]]}]}],
		%% Line 489
		'spec' =
		    %% Line 489
		    [{{'getNextSibling',2},[{'type',489,'bounded_fun',[{'type',489,'fun',[{'type',489,'product',[{'var',489,'This'}|[{'var',489,'Item'}]]}|[{'type',489,'integer',[]}]]}|[[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'This'}|[{'type',490,'wxTreeCtrl',[]}]]]]}|[{'type',490,'constraint',[{'atom',490,'is_subtype'}|[[{'var',490,'Item'}|[{'type',490,'integer',[]}]]]]}]]]]}]}],
		%% Line 498
		'spec' =
		    %% Line 498
		    [{{'getNextVisible',2},[{'type',498,'bounded_fun',[{'type',498,'fun',[{'type',498,'product',[{'var',498,'This'}|[{'var',498,'Item'}]]}|[{'type',498,'integer',[]}]]}|[[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'This'}|[{'type',499,'wxTreeCtrl',[]}]]]]}|[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'Item'}|[{'type',499,'integer',[]}]]]]}]]]]}]}],
		%% Line 507
		'spec' =
		    %% Line 507
		    [{{'getItemParent',2},[{'type',507,'bounded_fun',[{'type',507,'fun',[{'type',507,'product',[{'var',507,'This'}|[{'var',507,'Item'}]]}|[{'type',507,'integer',[]}]]}|[[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'This'}|[{'type',508,'wxTreeCtrl',[]}]]]]}|[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'Item'}|[{'type',508,'integer',[]}]]]]}]]]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'getPrevSibling',2},[{'type',516,'bounded_fun',[{'type',516,'fun',[{'type',516,'product',[{'var',516,'This'}|[{'var',516,'Item'}]]}|[{'type',516,'integer',[]}]]}|[[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'This'}|[{'type',517,'wxTreeCtrl',[]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'Item'}|[{'type',517,'integer',[]}]]]]}]]]]}]}],
		%% Line 525
		'spec' =
		    %% Line 525
		    [{{'getPrevVisible',2},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'This'}|[{'var',525,'Item'}]]}|[{'type',525,'integer',[]}]]}|[[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'This'}|[{'type',526,'wxTreeCtrl',[]}]]]]}|[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Item'}|[{'type',526,'integer',[]}]]]]}]]]]}]}],
		%% Line 534
		'spec' =
		    %% Line 534
		    [{{'getRootItem',1},[{'type',534,'bounded_fun',[{'type',534,'fun',[{'type',534,'product',[{'var',534,'This'}]}|[{'type',534,'integer',[]}]]}|[[{'type',535,'constraint',[{'atom',535,'is_subtype'}|[[{'var',535,'This'}|[{'type',535,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 542
		'spec' =
		    %% Line 542
		    [{{'getSelection',1},[{'type',542,'bounded_fun',[{'type',542,'fun',[{'type',542,'product',[{'var',542,'This'}]}|[{'type',542,'integer',[]}]]}|[[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'This'}|[{'type',543,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 550
		'spec' =
		    %% Line 550
		    [{{'getSelections',1},[{'type',550,'bounded_fun',[{'type',550,'fun',[{'type',550,'product',[{'var',550,'This'}]}|[{'var',550,'Result'}]]}|[[{'type',551,'constraint',[{'atom',551,'is_subtype'}|[[{'var',551,'Result'}|[{'type',551,'tuple',[{'ann_type',551,[{'var',551,'Res'}|[{'type',551,'integer',[]}]]}|[{'ann_type',551,[{'var',551,'Val'}|[{'type',551,'list',[{'type',551,'integer',[]}]}]]}]]}]]]]}|[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'This'}|[{'type',552,'wxTreeCtrl',[]}]]]]}]]]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'getStateImageList',1},[{'type',559,'bounded_fun',[{'type',559,'fun',[{'type',559,'product',[{'var',559,'This'}]}|[{'remote_type',559,[{'atom',559,'wxImageList'}|[{'atom',559,'wxImageList'}|[[]]]]}]]}|[[{'type',560,'constraint',[{'atom',560,'is_subtype'}|[[{'var',560,'This'}|[{'type',560,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 567
		'spec' =
		    %% Line 567
		    [{{'hitTest',2},[{'type',567,'bounded_fun',[{'type',567,'fun',[{'type',567,'product',[{'var',567,'This'}|[{'var',567,'Point'}]]}|[{'var',567,'Result'}]]}|[[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'Result'}|[{'type',568,'tuple',[{'ann_type',568,[{'var',568,'Res'}|[{'type',568,'integer',[]}]]}|[{'ann_type',568,[{'var',568,'Flags'}|[{'type',568,'integer',[]}]]}]]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'This'}|[{'type',569,'wxTreeCtrl',[]}]]]]}|[{'type',569,'constraint',[{'atom',569,'is_subtype'}|[[{'var',569,'Point'}|[{'type',569,'tuple',[{'ann_type',569,[{'var',569,'X'}|[{'type',569,'integer',[]}]]}|[{'ann_type',569,[{'var',569,'Y'}|[{'type',569,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 577
		'spec' =
		    %% Line 577
		    [{{'insertItem',4},[{'type',577,'bounded_fun',[{'type',577,'fun',[{'type',577,'product',[{'var',577,'This'}|[{'var',577,'Parent'}|[{'var',577,'Pos'}|[{'var',577,'Text'}]]]]}|[{'type',577,'integer',[]}]]}|[[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'This'}|[{'type',578,'wxTreeCtrl',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Parent'}|[{'type',578,'integer',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Pos'}|[{'type',578,'integer',[]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Text'}|[{'remote_type',578,[{'atom',578,'unicode'}|[{'atom',578,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'insertItem',5},[{'type',585,'bounded_fun',[{'type',585,'fun',[{'type',585,'product',[{'var',585,'This'}|[{'var',585,'Parent'}|[{'var',585,'Pos'}|[{'var',585,'Text'}|[{'type',585,'list',[{'var',585,'Option'}]}]]]]]}|[{'type',585,'integer',[]}]]}|[[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'This'}|[{'type',586,'wxTreeCtrl',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Parent'}|[{'type',586,'integer',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Pos'}|[{'type',586,'integer',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Text'}|[{'remote_type',586,[{'atom',586,'unicode'}|[{'atom',586,'chardata'}|[[]]]]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'Option'}|[{'type',587,'union',[{'type',587,'tuple',[{'atom',587,'image'}|[{'type',587,'integer',[]}]]}|[{'type',588,'tuple',[{'atom',588,'selImage'}|[{'type',588,'integer',[]}]]}|[{'type',589,'tuple',[{'atom',589,'data'}|[{'type',589,'term',[]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 603
		'spec' =
		    %% Line 603
		    [{{'isBold',2},[{'type',603,'bounded_fun',[{'type',603,'fun',[{'type',603,'product',[{'var',603,'This'}|[{'var',603,'Item'}]]}|[{'type',603,'boolean',[]}]]}|[[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'This'}|[{'type',604,'wxTreeCtrl',[]}]]]]}|[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Item'}|[{'type',604,'integer',[]}]]]]}]]]]}]}],
		%% Line 612
		'spec' =
		    %% Line 612
		    [{{'isExpanded',2},[{'type',612,'bounded_fun',[{'type',612,'fun',[{'type',612,'product',[{'var',612,'This'}|[{'var',612,'Item'}]]}|[{'type',612,'boolean',[]}]]}|[[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'This'}|[{'type',613,'wxTreeCtrl',[]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Item'}|[{'type',613,'integer',[]}]]]]}]]]]}]}],
		%% Line 621
		'spec' =
		    %% Line 621
		    [{{'isSelected',2},[{'type',621,'bounded_fun',[{'type',621,'fun',[{'type',621,'product',[{'var',621,'This'}|[{'var',621,'Item'}]]}|[{'type',621,'boolean',[]}]]}|[[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'This'}|[{'type',622,'wxTreeCtrl',[]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'Item'}|[{'type',622,'integer',[]}]]]]}]]]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'isVisible',2},[{'type',630,'bounded_fun',[{'type',630,'fun',[{'type',630,'product',[{'var',630,'This'}|[{'var',630,'Item'}]]}|[{'type',630,'boolean',[]}]]}|[[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'This'}|[{'type',631,'wxTreeCtrl',[]}]]]]}|[{'type',631,'constraint',[{'atom',631,'is_subtype'}|[[{'var',631,'Item'}|[{'type',631,'integer',[]}]]]]}]]]]}]}],
		%% Line 639
		'spec' =
		    %% Line 639
		    [{{'itemHasChildren',2},[{'type',639,'bounded_fun',[{'type',639,'fun',[{'type',639,'product',[{'var',639,'This'}|[{'var',639,'Item'}]]}|[{'type',639,'boolean',[]}]]}|[[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'This'}|[{'type',640,'wxTreeCtrl',[]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Item'}|[{'type',640,'integer',[]}]]]]}]]]]}]}],
		%% Line 648
		'spec' =
		    %% Line 648
		    [{{'isTreeItemIdOk',1},[{'type',648,'bounded_fun',[{'type',648,'fun',[{'type',648,'product',[{'var',648,'Id'}]}|[{'type',648,'boolean',[]}]]}|[[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'Id'}|[{'type',649,'integer',[]}]]]]}]]]}]}],
		%% Line 656
		'spec' =
		    %% Line 656
		    [{{'prependItem',3},[{'type',656,'bounded_fun',[{'type',656,'fun',[{'type',656,'product',[{'var',656,'This'}|[{'var',656,'Parent'}|[{'var',656,'Text'}]]]}|[{'type',656,'integer',[]}]]}|[[{'type',657,'constraint',[{'atom',657,'is_subtype'}|[[{'var',657,'This'}|[{'type',657,'wxTreeCtrl',[]}]]]]}|[{'type',657,'constraint',[{'atom',657,'is_subtype'}|[[{'var',657,'Parent'}|[{'type',657,'integer',[]}]]]]}|[{'type',657,'constraint',[{'atom',657,'is_subtype'}|[[{'var',657,'Text'}|[{'remote_type',657,[{'atom',657,'unicode'}|[{'atom',657,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'prependItem',4},[{'type',664,'bounded_fun',[{'type',664,'fun',[{'type',664,'product',[{'var',664,'This'}|[{'var',664,'Parent'}|[{'var',664,'Text'}|[{'type',664,'list',[{'var',664,'Option'}]}]]]]}|[{'type',664,'integer',[]}]]}|[[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'This'}|[{'type',665,'wxTreeCtrl',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Parent'}|[{'type',665,'integer',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Text'}|[{'remote_type',665,[{'atom',665,'unicode'}|[{'atom',665,'chardata'}|[[]]]]}]]]]}|[{'type',666,'constraint',[{'atom',666,'is_subtype'}|[[{'var',666,'Option'}|[{'type',666,'union',[{'type',666,'tuple',[{'atom',666,'image'}|[{'type',666,'integer',[]}]]}|[{'type',667,'tuple',[{'atom',667,'selectedImage'}|[{'type',667,'integer',[]}]]}|[{'type',668,'tuple',[{'atom',668,'data'}|[{'type',668,'term',[]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 682
		'spec' =
		    %% Line 682
		    [{{'scrollTo',2},[{'type',682,'bounded_fun',[{'type',682,'fun',[{'type',682,'product',[{'var',682,'This'}|[{'var',682,'Item'}]]}|[{'atom',682,'ok'}]]}|[[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'This'}|[{'type',683,'wxTreeCtrl',[]}]]]]}|[{'type',683,'constraint',[{'atom',683,'is_subtype'}|[[{'var',683,'Item'}|[{'type',683,'integer',[]}]]]]}]]]]}]}],
		%% Line 691
		'spec' =
		    %% Line 691
		    [{{'selectItem',2},[{'type',691,'bounded_fun',[{'type',691,'fun',[{'type',691,'product',[{'var',691,'This'}|[{'var',691,'Item'}]]}|[{'atom',691,'ok'}]]}|[[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'This'}|[{'type',692,'wxTreeCtrl',[]}]]]]}|[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'Item'}|[{'type',692,'integer',[]}]]]]}]]]]}]}],
		%% Line 700
		'spec' =
		    %% Line 700
		    [{{'selectItem',3},[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'This'}|[{'var',700,'Item'}|[{'type',700,'list',[{'var',700,'Option'}]}]]]}|[{'atom',700,'ok'}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'This'}|[{'type',701,'wxTreeCtrl',[]}]]]]}|[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Item'}|[{'type',701,'integer',[]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'Option'}|[{'type',702,'tuple',[{'atom',702,'select'}|[{'type',702,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 713
		'spec' =
		    %% Line 713
		    [{{'setIndent',2},[{'type',713,'bounded_fun',[{'type',713,'fun',[{'type',713,'product',[{'var',713,'This'}|[{'var',713,'Indent'}]]}|[{'atom',713,'ok'}]]}|[[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'This'}|[{'type',714,'wxTreeCtrl',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Indent'}|[{'type',714,'integer',[]}]]]]}]]]]}]}],
		%% Line 722
		'spec' =
		    %% Line 722
		    [{{'setImageList',2},[{'type',722,'bounded_fun',[{'type',722,'fun',[{'type',722,'product',[{'var',722,'This'}|[{'var',722,'ImageList'}]]}|[{'atom',722,'ok'}]]}|[[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'This'}|[{'type',723,'wxTreeCtrl',[]}]]]]}|[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'ImageList'}|[{'remote_type',723,[{'atom',723,'wxImageList'}|[{'atom',723,'wxImageList'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 731
		'spec' =
		    %% Line 731
		    [{{'setItemBackgroundColour',3},[{'type',731,'bounded_fun',[{'type',731,'fun',[{'type',731,'product',[{'var',731,'This'}|[{'var',731,'Item'}|[{'var',731,'Col'}]]]}|[{'atom',731,'ok'}]]}|[[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'This'}|[{'type',732,'wxTreeCtrl',[]}]]]]}|[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'Item'}|[{'type',732,'integer',[]}]]]]}|[{'type',732,'constraint',[{'atom',732,'is_subtype'}|[[{'var',732,'Col'}|[{'remote_type',732,[{'atom',732,'wx'}|[{'atom',732,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 740
		'spec' =
		    %% Line 740
		    [{{'setItemBold',2},[{'type',740,'bounded_fun',[{'type',740,'fun',[{'type',740,'product',[{'var',740,'This'}|[{'var',740,'Item'}]]}|[{'atom',740,'ok'}]]}|[[{'type',741,'constraint',[{'atom',741,'is_subtype'}|[[{'var',741,'This'}|[{'type',741,'wxTreeCtrl',[]}]]]]}|[{'type',741,'constraint',[{'atom',741,'is_subtype'}|[[{'var',741,'Item'}|[{'type',741,'integer',[]}]]]]}]]]]}]}],
		%% Line 748
		'spec' =
		    %% Line 748
		    [{{'setItemBold',3},[{'type',748,'bounded_fun',[{'type',748,'fun',[{'type',748,'product',[{'var',748,'This'}|[{'var',748,'Item'}|[{'type',748,'list',[{'var',748,'Option'}]}]]]}|[{'atom',748,'ok'}]]}|[[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'This'}|[{'type',749,'wxTreeCtrl',[]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'Item'}|[{'type',749,'integer',[]}]]]]}|[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Option'}|[{'type',750,'tuple',[{'atom',750,'bold'}|[{'type',750,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 761
		'spec' =
		    %% Line 761
		    [{{'setItemData',3},[{'type',761,'bounded_fun',[{'type',761,'fun',[{'type',761,'product',[{'var',761,'This'}|[{'var',761,'Item'}|[{'var',761,'Data'}]]]}|[{'atom',761,'ok'}]]}|[[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'This'}|[{'type',762,'wxTreeCtrl',[]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Item'}|[{'type',762,'integer',[]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Data'}|[{'type',762,'term',[]}]]]]}]]]]]}]}],
		%% Line 771
		'spec' =
		    %% Line 771
		    [{{'setItemDropHighlight',2},[{'type',771,'bounded_fun',[{'type',771,'fun',[{'type',771,'product',[{'var',771,'This'}|[{'var',771,'Item'}]]}|[{'atom',771,'ok'}]]}|[[{'type',772,'constraint',[{'atom',772,'is_subtype'}|[[{'var',772,'This'}|[{'type',772,'wxTreeCtrl',[]}]]]]}|[{'type',772,'constraint',[{'atom',772,'is_subtype'}|[[{'var',772,'Item'}|[{'type',772,'integer',[]}]]]]}]]]]}]}],
		%% Line 779
		'spec' =
		    %% Line 779
		    [{{'setItemDropHighlight',3},[{'type',779,'bounded_fun',[{'type',779,'fun',[{'type',779,'product',[{'var',779,'This'}|[{'var',779,'Item'}|[{'type',779,'list',[{'var',779,'Option'}]}]]]}|[{'atom',779,'ok'}]]}|[[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'This'}|[{'type',780,'wxTreeCtrl',[]}]]]]}|[{'type',780,'constraint',[{'atom',780,'is_subtype'}|[[{'var',780,'Item'}|[{'type',780,'integer',[]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'Option'}|[{'type',781,'tuple',[{'atom',781,'highlight'}|[{'type',781,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 792
		'spec' =
		    %% Line 792
		    [{{'setItemFont',3},[{'type',792,'bounded_fun',[{'type',792,'fun',[{'type',792,'product',[{'var',792,'This'}|[{'var',792,'Item'}|[{'var',792,'Font'}]]]}|[{'atom',792,'ok'}]]}|[[{'type',793,'constraint',[{'atom',793,'is_subtype'}|[[{'var',793,'This'}|[{'type',793,'wxTreeCtrl',[]}]]]]}|[{'type',793,'constraint',[{'atom',793,'is_subtype'}|[[{'var',793,'Item'}|[{'type',793,'integer',[]}]]]]}|[{'type',793,'constraint',[{'atom',793,'is_subtype'}|[[{'var',793,'Font'}|[{'remote_type',793,[{'atom',793,'wxFont'}|[{'atom',793,'wxFont'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 802
		'spec' =
		    %% Line 802
		    [{{'setItemHasChildren',2},[{'type',802,'bounded_fun',[{'type',802,'fun',[{'type',802,'product',[{'var',802,'This'}|[{'var',802,'Item'}]]}|[{'atom',802,'ok'}]]}|[[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'This'}|[{'type',803,'wxTreeCtrl',[]}]]]]}|[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'Item'}|[{'type',803,'integer',[]}]]]]}]]]]}]}],
		%% Line 810
		'spec' =
		    %% Line 810
		    [{{'setItemHasChildren',3},[{'type',810,'bounded_fun',[{'type',810,'fun',[{'type',810,'product',[{'var',810,'This'}|[{'var',810,'Item'}|[{'type',810,'list',[{'var',810,'Option'}]}]]]}|[{'atom',810,'ok'}]]}|[[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'This'}|[{'type',811,'wxTreeCtrl',[]}]]]]}|[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'Item'}|[{'type',811,'integer',[]}]]]]}|[{'type',812,'constraint',[{'atom',812,'is_subtype'}|[[{'var',812,'Option'}|[{'type',812,'tuple',[{'atom',812,'has'}|[{'type',812,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 823
		'spec' =
		    %% Line 823
		    [{{'setItemImage',3},[{'type',823,'bounded_fun',[{'type',823,'fun',[{'type',823,'product',[{'var',823,'This'}|[{'var',823,'Item'}|[{'var',823,'Image'}]]]}|[{'atom',823,'ok'}]]}|[[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'This'}|[{'type',824,'wxTreeCtrl',[]}]]]]}|[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'Item'}|[{'type',824,'integer',[]}]]]]}|[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'Image'}|[{'type',824,'integer',[]}]]]]}]]]]]}]}],
		%% Line 833
		'spec' =
		    %% Line 833
		    [{{'setItemImage',4},[{'type',833,'bounded_fun',[{'type',833,'fun',[{'type',833,'product',[{'var',833,'This'}|[{'var',833,'Item'}|[{'var',833,'Image'}|[{'type',833,'list',[{'var',833,'Option'}]}]]]]}|[{'atom',833,'ok'}]]}|[[{'type',834,'constraint',[{'atom',834,'is_subtype'}|[[{'var',834,'This'}|[{'type',834,'wxTreeCtrl',[]}]]]]}|[{'type',834,'constraint',[{'atom',834,'is_subtype'}|[[{'var',834,'Item'}|[{'type',834,'integer',[]}]]]]}|[{'type',834,'constraint',[{'atom',834,'is_subtype'}|[[{'var',834,'Image'}|[{'type',834,'integer',[]}]]]]}|[{'type',835,'constraint',[{'atom',835,'is_subtype'}|[[{'var',835,'Option'}|[{'type',835,'tuple',[{'atom',835,'which'}|[{'remote_type',835,[{'atom',835,'wx'}|[{'atom',835,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 846
		'spec' =
		    %% Line 846
		    [{{'setItemText',3},[{'type',846,'bounded_fun',[{'type',846,'fun',[{'type',846,'product',[{'var',846,'This'}|[{'var',846,'Item'}|[{'var',846,'Text'}]]]}|[{'atom',846,'ok'}]]}|[[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'This'}|[{'type',847,'wxTreeCtrl',[]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Item'}|[{'type',847,'integer',[]}]]]]}|[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Text'}|[{'remote_type',847,[{'atom',847,'unicode'}|[{'atom',847,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 856
		'spec' =
		    %% Line 856
		    [{{'setItemTextColour',3},[{'type',856,'bounded_fun',[{'type',856,'fun',[{'type',856,'product',[{'var',856,'This'}|[{'var',856,'Item'}|[{'var',856,'Col'}]]]}|[{'atom',856,'ok'}]]}|[[{'type',857,'constraint',[{'atom',857,'is_subtype'}|[[{'var',857,'This'}|[{'type',857,'wxTreeCtrl',[]}]]]]}|[{'type',857,'constraint',[{'atom',857,'is_subtype'}|[[{'var',857,'Item'}|[{'type',857,'integer',[]}]]]]}|[{'type',857,'constraint',[{'atom',857,'is_subtype'}|[[{'var',857,'Col'}|[{'remote_type',857,[{'atom',857,'wx'}|[{'atom',857,'wx_colour'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 865
		'spec' =
		    %% Line 865
		    [{{'setStateImageList',2},[{'type',865,'bounded_fun',[{'type',865,'fun',[{'type',865,'product',[{'var',865,'This'}|[{'var',865,'ImageList'}]]}|[{'atom',865,'ok'}]]}|[[{'type',866,'constraint',[{'atom',866,'is_subtype'}|[[{'var',866,'This'}|[{'type',866,'wxTreeCtrl',[]}]]]]}|[{'type',866,'constraint',[{'atom',866,'is_subtype'}|[[{'var',866,'ImageList'}|[{'remote_type',866,[{'atom',866,'wxImageList'}|[{'atom',866,'wxImageList'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 874
		'spec' =
		    %% Line 874
		    [{{'setWindowStyle',2},[{'type',874,'bounded_fun',[{'type',874,'fun',[{'type',874,'product',[{'var',874,'This'}|[{'var',874,'Styles'}]]}|[{'atom',874,'ok'}]]}|[[{'type',875,'constraint',[{'atom',875,'is_subtype'}|[[{'var',875,'This'}|[{'type',875,'wxTreeCtrl',[]}]]]]}|[{'type',875,'constraint',[{'atom',875,'is_subtype'}|[[{'var',875,'Styles'}|[{'type',875,'integer',[]}]]]]}]]]]}]}],
		%% Line 883
		'spec' =
		    %% Line 883
		    [{{'sortChildren',2},[{'type',883,'bounded_fun',[{'type',883,'fun',[{'type',883,'product',[{'var',883,'This'}|[{'var',883,'Item'}]]}|[{'atom',883,'ok'}]]}|[[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'This'}|[{'type',884,'wxTreeCtrl',[]}]]]]}|[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'Item'}|[{'type',884,'integer',[]}]]]]}]]]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'toggle',2},[{'type',892,'bounded_fun',[{'type',892,'fun',[{'type',892,'product',[{'var',892,'This'}|[{'var',892,'Item'}]]}|[{'atom',892,'ok'}]]}|[[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'This'}|[{'type',893,'wxTreeCtrl',[]}]]]]}|[{'type',893,'constraint',[{'atom',893,'is_subtype'}|[[{'var',893,'Item'}|[{'type',893,'integer',[]}]]]]}]]]]}]}],
		%% Line 901
		'spec' =
		    %% Line 901
		    [{{'toggleItemSelection',2},[{'type',901,'bounded_fun',[{'type',901,'fun',[{'type',901,'product',[{'var',901,'This'}|[{'var',901,'Item'}]]}|[{'atom',901,'ok'}]]}|[[{'type',902,'constraint',[{'atom',902,'is_subtype'}|[[{'var',902,'This'}|[{'type',902,'wxTreeCtrl',[]}]]]]}|[{'type',902,'constraint',[{'atom',902,'is_subtype'}|[[{'var',902,'Item'}|[{'type',902,'integer',[]}]]]]}]]]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'unselect',1},[{'type',910,'bounded_fun',[{'type',910,'fun',[{'type',910,'product',[{'var',910,'This'}]}|[{'atom',910,'ok'}]]}|[[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'This'}|[{'type',911,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 918
		'spec' =
		    %% Line 918
		    [{{'unselectAll',1},[{'type',918,'bounded_fun',[{'type',918,'fun',[{'type',918,'product',[{'var',918,'This'}]}|[{'atom',918,'ok'}]]}|[[{'type',919,'constraint',[{'atom',919,'is_subtype'}|[[{'var',919,'This'}|[{'type',919,'wxTreeCtrl',[]}]]]]}]]]}]}],
		%% Line 926
		'spec' =
		    %% Line 926
		    [{{'unselectItem',2},[{'type',926,'bounded_fun',[{'type',926,'fun',[{'type',926,'product',[{'var',926,'This'}|[{'var',926,'Item'}]]}|[{'atom',926,'ok'}]]}|[[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'This'}|[{'type',927,'wxTreeCtrl',[]}]]]]}|[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'Item'}|[{'type',927,'integer',[]}]]]]}]]]]}]}],
		%% Line 935
		'spec' =
		    %% Line 935
		    [{{'destroy',1},[{'type',935,'fun',[{'type',935,'product',[{'ann_type',935,[{'var',935,'This'}|[{'type',935,'wxTreeCtrl',[]}]]}]}|[{'atom',935,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <'wxControl'> when 'true' ->
	      'true'
	  %% Line 96
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 97
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 98
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxTreeCtrl'})
	end
'new'/0 =
    %% Line 103
    fun () ->
	%% Line 104
	call 'wxe_util':'construct'
	    (2011, %% Line 105
		   #{}#)
'new'/1 =
    %% Line 111
    fun (_cor0) ->
	case _cor0 of
	  <Parent = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 112
						       ( 'true'
							 -| ['compiler_generated'] ) ->
	      %% Line 113
	      apply 'new'/2
		  (Parent, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor21},Options>
	      when %% Line 124
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 125
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 126
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'id',Id},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Id>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 127
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor5|Acc]
			      %% Line 128
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor6> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor6|Acc]
			      %% Line 129
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<4>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 130
			      <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor22}},Acc> when 'true' ->
				  do  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (ValidatorT,
						       'wx') ->
						'ok'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call ValidatorT:'parent_class'
						    ('wx')
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				      let <_cor10> =
					  #{#<5>(32,1,'integer',['unsigned'|['native']]),
					    #<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor10|Acc]
			      %% Line 131
			      <BadOpt,_cor23> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 132
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 132
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 134
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 133
				  call 'wxe_util':'construct'
				      (2010, _cor18)
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'addRoot'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Text>
	      when %% Line 141
		call 'erlang':'is_list'
		    (Text) ->
	      %% Line 142
	      apply 'addRoot'/3
		  (This, Text, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'addRoot',2}}] )
	    -| ['compiler_generated'] )
	end
'addRoot'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor29},Text,Options>
	      when let <_cor3> =
		    %% Line 151
		    call 'erlang':'is_list'
			(Text)
		in  let <_cor4> =
			%% Line 151
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 151
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 152
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 153
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 154
			  ( fun (_cor13,_cor12) ->
				case <_cor13,_cor12> of
				  <{'image',Image},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Image>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
				  %% Line 155
				  <{'selectedImage',SelectedImage},Acc> when 'true' ->
				      let <_cor9> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<SelectedImage>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor9|Acc]
				  %% Line 156
				  <{'data',Data},Acc> when 'true' ->
				      let <_cor10> =
					  call 'erlang':'term_to_binary'
					      (Data)
				      in  do  call 'wxe_util':'send_bin'
						  (_cor10)
					      let <_cor11> =
						  #{#<3>(32,1,'integer',['unsigned'|['native']]),
						    #<0>(32,1,'integer',['unsigned'|['big']])}#
					      in  [_cor11|Acc]
				  %% Line 157
				  <BadOpt,_cor30> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-addRoot/3-fun-0-'}}] )
		      in  let <_cor17> =
			      %% Line 158
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 158
				  call 'erlang':'list_to_binary'
				      (_cor17)
			      in  let <_cor24> =
				      %% Line 160
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor19> =
					  %% Line 160
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor20> =
					      %% Line 160
					      call 'erlang':'+'
						  (0, _cor19)
					  in  let <_cor21> =
						  %% Line 160
						  call 'erlang':'band'
						      (_cor20, 7)
					      in  let <_cor22> =
						      %% Line 160
						      call 'erlang':'-'
							  (8, _cor21)
						  in  let <_cor23> =
							  %% Line 160
							  call 'erlang':'band'
							      (_cor22, 7)
						      in  let <_cor25> =
							      %% Line 160
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<_cor24>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor23,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 159
							      call 'wxe_util':'call'
								  (2014, _cor25)
	  ( <_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26})
		  -| [{'function_name',{'addRoot',3}}] )
	    -| ['compiler_generated'] )
	end
'appendItem'/3 =
    %% Line 166
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Parent,Text>
	      when let <_cor3> =
		    %% Line 167
		    call 'erlang':'is_integer'
			(Parent)
		in  let <_cor4> =
			%% Line 167
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 167
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 168
	      apply 'appendItem'/4
		  (This, Parent, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'appendItem',3}}] )
	    -| ['compiler_generated'] )
	end
'appendItem'/4 =
    %% Line 176
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},Parent,Text,Options>
	      when %% Line 177
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Parent)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 178
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 179
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 180
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'image',Image},Acc> when 'true' ->
				      let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Image>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
				  %% Line 181
				  <{'selectedImage',SelectedImage},Acc> when 'true' ->
				      let <_cor12> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<SelectedImage>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor12|Acc]
				  %% Line 182
				  <{'data',Data},Acc> when 'true' ->
				      let <_cor13> =
					  call 'erlang':'term_to_binary'
					      (Data)
				      in  do  call 'wxe_util':'send_bin'
						  (_cor13)
					      let <_cor14> =
						  #{#<3>(32,1,'integer',['unsigned'|['native']]),
						    #<0>(32,1,'integer',['unsigned'|['big']])}#
					      in  [_cor14|Acc]
				  %% Line 183
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-appendItem/4-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 184
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 184
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor27> =
				      %% Line 186
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor22> =
					  %% Line 186
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor23> =
					      %% Line 186
					      call 'erlang':'+'
						  (4, _cor22)
					  in  let <_cor24> =
						  %% Line 186
						  call 'erlang':'band'
						      (_cor23, 7)
					      in  let <_cor25> =
						      %% Line 186
						      call 'erlang':'-'
							  (8, _cor24)
						  in  let <_cor26> =
							  %% Line 186
							  call 'erlang':'band'
							      (_cor25, 7)
						      in  let <_cor28> =
							      %% Line 186
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<0>(32,1,'integer',['unsigned'|['big']]),
								#<Parent>(64,1,'integer',['unsigned'|['native']]),
								#<_cor27>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor26,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 185
							      call 'wxe_util':'call'
								  (2015, _cor28)
	  ( <_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'appendItem',4}}] )
	    -| ['compiler_generated'] )
	end
'assignImageList'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ImageListRef,ImageListT,_cor10}> when 'true' ->
	      do  %% Line 192
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 193
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 195
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 194
			  call 'wxe_util':'cast'
			      (2016, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'assignImageList',2}}] )
	    -| ['compiler_generated'] )
	end
'assignStateImageList'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ImageListRef,ImageListT,_cor10}> when 'true' ->
	      do  %% Line 201
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 202
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 204
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 203
			  call 'wxe_util':'cast'
			      (2017, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'assignStateImageList',2}}] )
	    -| ['compiler_generated'] )
	end
'collapse'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 210
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 211
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 213
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 212
		      call 'wxe_util':'cast'
			  (2018, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'collapse',2}}] )
	    -| ['compiler_generated'] )
	end
'collapseAndReset'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 219
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 220
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 222
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 221
		      call 'wxe_util':'cast'
			  (2019, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'collapseAndReset',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor4,_cor5,_cor6},Parent = {'wx_ref',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 230
	      apply 'create'/3
		  (This, Parent, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'create',2}}] )
	    -| ['compiler_generated'] )
	end
'create'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor25},{'wx_ref',ParentRef,ParentT,_cor26},Options>
	      when %% Line 241
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 242
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 243
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <MOpts> =
			  %% Line 244
			  ( fun (_cor15,_cor14) ->
				case <_cor15,_cor14> of
				  <{'id',Id},Acc> when 'true' ->
				      let <_cor7> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Id>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
				  %% Line 245
				  <{'pos',{PosX,PosY}},Acc> when 'true' ->
				      let <_cor8> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<PosX>(32,1,'integer',['unsigned'|['native']]),
					    #<PosY>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor8|Acc]
				  %% Line 246
				  <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				      let <_cor9> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeW>(32,1,'integer',['unsigned'|['native']]),
					    #<SizeH>(32,1,'integer',['unsigned'|['native']]),
					    #<0>(32,1,'integer',['unsigned'|['big']])}#
				      in  [_cor9|Acc]
				  %% Line 247
				  <{'style',Style},Acc> when 'true' ->
				      let <_cor10> =
					  #{#<4>(32,1,'integer',['unsigned'|['native']]),
					    #<Style>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor10|Acc]
				  %% Line 248
				  <{'validator',{'wx_ref',ValidatorRef,ValidatorT,_cor27}},Acc> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (ValidatorT,
							   'wx') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call ValidatorT:'parent_class'
							('wx')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  let <_cor13> =
					      #{#<5>(32,1,'integer',['unsigned'|['native']]),
						#<ValidatorRef>(32,1,'integer',['unsigned'|['native']])}#
					  in  [_cor13|Acc]
				  %% Line 249
				  <BadOpt,_cor28> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-create/3-fun-0-'}}] )
		      in  let <_cor19> =
			      %% Line 250
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 250
				  call 'erlang':'list_to_binary'
				      (_cor19)
			      in  let <_cor21> =
				      %% Line 252
				      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
					#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
					#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
				  in  %% Line 251
				      call 'wxe_util':'call'
					  (2020, _cor21)
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'create',3}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 258
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 259
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 261
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 260
		      call 'wxe_util':'cast'
			  (2021, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'deleteAllItems'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 267
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 269
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 268
		      call 'wxe_util':'cast'
			  (2022, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'deleteAllItems',1}}] )
	    -| ['compiler_generated'] )
	end
'deleteChildren'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 275
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 276
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 278
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 277
		      call 'wxe_util':'cast'
			  (2023, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'deleteChildren',2}}] )
	    -| ['compiler_generated'] )
	end
'editLabel'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 284
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 285
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 287
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 286
		      call 'wxe_util':'call'
			  (2024, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'editLabel',2}}] )
	    -| ['compiler_generated'] )
	end
'ensureVisible'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 293
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 294
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 296
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 295
		      call 'wxe_util':'cast'
			  (2025, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ensureVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'expand'/2 =
    %% Line 301
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 302
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 303
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 305
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 304
		      call 'wxe_util':'cast'
			  (2026, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'expand',2}}] )
	    -| ['compiler_generated'] )
	end
'getBoundingRect'/2 =
    %% Line 312
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 313
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 314
	      apply 'getBoundingRect'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getBoundingRect',2}}] )
	    -| ['compiler_generated'] )
	end
'getBoundingRect'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 322
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 322
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 322
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 323
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 324
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'textOnly',TextOnly},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (TextOnly)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 325
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getBoundingRect/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 326
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 326
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 328
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 327
				  call 'wxe_util':'call'
				      (2027, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'getBoundingRect',3}}] )
	    -| ['compiler_generated'] )
	end
'getChildrenCount'/2 =
    %% Line 334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 335
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 336
	      apply 'getChildrenCount'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'getChildrenCount',2}}] )
	    -| ['compiler_generated'] )
	end
'getChildrenCount'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 343
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 343
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 343
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 344
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 345
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'recursively',Recursively},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Recursively)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 346
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getChildrenCount/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 347
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 347
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 349
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 348
				  call 'wxe_util':'call'
				      (2029, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'getChildrenCount',3}}] )
	    -| ['compiler_generated'] )
	end
'getCount'/1 =
    %% Line 354
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 355
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 357
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 356
		      call 'wxe_util':'call'
			  (2030, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getEditControl'/1 =
    %% Line 362
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 363
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 365
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 364
		      call 'wxe_util':'call'
			  (2031, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'getFirstChild'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 372
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 373
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 375
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 374
		      call 'wxe_util':'call'
			  (2032, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getFirstChild',2}}] )
	    -| ['compiler_generated'] )
	end
'getNextChild'/3 =
    %% Line 381
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,Cookie>
	      when let <_cor3> =
		    %% Line 382
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 382
			call 'erlang':'is_integer'
			    (Cookie)
		    in  %% Line 382
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 383
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 385
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']]),
			#<Cookie>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 384
		      call 'wxe_util':'call'
			  (2033, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getNextChild',3}}] )
	    -| ['compiler_generated'] )
	end
'getFirstVisibleItem'/1 =
    %% Line 390
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 391
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 393
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 392
		      call 'wxe_util':'call'
			  (2034, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFirstVisibleItem',1}}] )
	    -| ['compiler_generated'] )
	end
'getImageList'/1 =
    %% Line 398
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 399
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 401
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 400
		      call 'wxe_util':'call'
			  (2035, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getImageList',1}}] )
	    -| ['compiler_generated'] )
	end
'getIndent'/1 =
    %% Line 406
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 407
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 409
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 408
		      call 'wxe_util':'call'
			  (2036, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getIndent',1}}] )
	    -| ['compiler_generated'] )
	end
'getItemBackgroundColour'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 415
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 416
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 418
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 417
		      call 'wxe_util':'call'
			  (2037, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemData'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 424
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 425
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 427
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 426
		      call 'wxe_util':'call'
			  (2038, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemData',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemFont'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 433
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 434
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 436
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 435
		      call 'wxe_util':'call'
			  (2039, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemFont',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemImage'/2 =
    %% Line 441
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 442
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 443
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 445
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 444
		      call 'wxe_util':'call'
			  (2040, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemImage',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemImage'/3 =
    %% Line 452
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Item,Options>
	      when let <_cor3> =
		    %% Line 453
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 453
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 453
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 454
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 455
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'which',Which},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Which>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 456
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getItemImage/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 457
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 457
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 459
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 458
				  call 'wxe_util':'call'
				      (2041, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'getItemImage',3}}] )
	    -| ['compiler_generated'] )
	end
'getItemText'/2 =
    %% Line 464
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 465
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 466
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 468
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 467
		      call 'wxe_util':'call'
			  (2042, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemText',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemTextColour'/2 =
    %% Line 473
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 474
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 475
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 477
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 476
		      call 'wxe_util':'call'
			  (2043, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'getLastChild'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 483
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 484
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 486
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 485
		      call 'wxe_util':'call'
			  (2044, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getLastChild',2}}] )
	    -| ['compiler_generated'] )
	end
'getNextSibling'/2 =
    %% Line 491
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 492
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 493
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 495
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 494
		      call 'wxe_util':'call'
			  (2045, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getNextSibling',2}}] )
	    -| ['compiler_generated'] )
	end
'getNextVisible'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 501
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 502
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 504
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 503
		      call 'wxe_util':'call'
			  (2046, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getNextVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'getItemParent'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 510
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 511
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 513
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 512
		      call 'wxe_util':'call'
			  (2047, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getItemParent',2}}] )
	    -| ['compiler_generated'] )
	end
'getPrevSibling'/2 =
    %% Line 518
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 519
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 520
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 522
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 521
		      call 'wxe_util':'call'
			  (2048, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getPrevSibling',2}}] )
	    -| ['compiler_generated'] )
	end
'getPrevVisible'/2 =
    %% Line 527
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 528
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 529
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 531
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 530
		      call 'wxe_util':'call'
			  (2049, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getPrevVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'getRootItem'/1 =
    %% Line 536
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 537
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 539
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 538
		      call 'wxe_util':'call'
			  (2050, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRootItem',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelection'/1 =
    %% Line 544
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 545
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 547
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 546
		      call 'wxe_util':'call'
			  (2051, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelections'/1 =
    %% Line 553
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 554
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 556
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 555
		      call 'wxe_util':'call'
			  (2052, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelections',1}}] )
	    -| ['compiler_generated'] )
	end
'getStateImageList'/1 =
    %% Line 561
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 562
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 564
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 563
		      call 'wxe_util':'call'
			  (2053, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStateImageList',1}}] )
	    -| ['compiler_generated'] )
	end
'hitTest'/2 =
    %% Line 570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PointX,PointY}>
	      when let <_cor2> =
		    %% Line 571
		    call 'erlang':'is_integer'
			(PointX)
		in  let <_cor3> =
			%% Line 571
			call 'erlang':'is_integer'
			    (PointY)
		    in  %% Line 571
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 572
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 574
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PointX>(32,1,'integer',['unsigned'|['native']]),
			#<PointY>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 573
		      call 'wxe_util':'call'
			  (2054, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'hitTest',2}}] )
	    -| ['compiler_generated'] )
	end
'insertItem'/4 =
    %% Line 580
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Parent,Pos,Text>
	      when %% Line 581
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Parent)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Pos)
			  in  let <_cor6> =
				  call 'erlang':'is_list'
				      (Text)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 582
	      apply 'insertItem'/5
		  (This, Parent, Pos, Text, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'insertItem',4}}] )
	    -| ['compiler_generated'] )
	end
'insertItem'/5 =
    %% Line 590
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Parent,Pos,Text,Options>
	      when %% Line 591
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Parent)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Pos)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Text)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 592
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 593
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 594
			  ( fun (_cor19,_cor18) ->
				case <_cor19,_cor18> of
				  <{'image',Image},Acc> when 'true' ->
				      let <_cor14> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Image>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor14|Acc]
				  %% Line 595
				  <{'selImage',SelImage},Acc> when 'true' ->
				      let <_cor15> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<SelImage>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor15|Acc]
				  %% Line 596
				  <{'data',Data},Acc> when 'true' ->
				      let <_cor16> =
					  call 'erlang':'term_to_binary'
					      (Data)
				      in  do  call 'wxe_util':'send_bin'
						  (_cor16)
					      let <_cor17> =
						  #{#<3>(32,1,'integer',['unsigned'|['native']]),
						    #<0>(32,1,'integer',['unsigned'|['big']])}#
					      in  [_cor17|Acc]
				  %% Line 597
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-insertItem/5-fun-0-'}}] )
		      in  let <_cor23> =
			      %% Line 598
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 598
				  call 'erlang':'list_to_binary'
				      (_cor23)
			      in  let <_cor30> =
				      %% Line 600
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor25> =
					  %% Line 600
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor26> =
					      %% Line 600
					      call 'erlang':'+'
						  (0, _cor25)
					  in  let <_cor27> =
						  %% Line 600
						  call 'erlang':'band'
						      (_cor26, 7)
					      in  let <_cor28> =
						      %% Line 600
						      call 'erlang':'-'
							  (8, _cor27)
						  in  let <_cor29> =
							  %% Line 600
							  call 'erlang':'band'
							      (_cor28, 7)
						      in  let <_cor31> =
							      %% Line 600
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<0>(32,1,'integer',['unsigned'|['big']]),
								#<Parent>(64,1,'integer',['unsigned'|['native']]),
								#<Pos>(32,1,'integer',['unsigned'|['native']]),
								#<_cor30>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor29,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 599
							      call 'wxe_util':'call'
								  (2056, _cor31)
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'insertItem',5}}] )
	    -| ['compiler_generated'] )
	end
'isBold'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 606
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 607
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 609
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 608
		      call 'wxe_util':'call'
			  (2057, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isBold',2}}] )
	    -| ['compiler_generated'] )
	end
'isExpanded'/2 =
    %% Line 614
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 615
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 616
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 618
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 617
		      call 'wxe_util':'call'
			  (2058, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isExpanded',2}}] )
	    -| ['compiler_generated'] )
	end
'isSelected'/2 =
    %% Line 623
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 624
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 625
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 627
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 626
		      call 'wxe_util':'call'
			  (2059, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isSelected',2}}] )
	    -| ['compiler_generated'] )
	end
'isVisible'/2 =
    %% Line 632
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 633
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 634
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 636
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 635
		      call 'wxe_util':'call'
			  (2060, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'itemHasChildren'/2 =
    %% Line 641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 642
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 643
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 645
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 644
		      call 'wxe_util':'call'
			  (2061, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'itemHasChildren',2}}] )
	    -| ['compiler_generated'] )
	end
'isTreeItemIdOk'/1 =
    %% Line 650
    fun (_cor0) ->
	case _cor0 of
	  <Id>
	      when %% Line 651
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 653
		  #{#<Id>(64,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 652
		  call 'wxe_util':'call'
		      (2062, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'isTreeItemIdOk',1}}] )
	    -| ['compiler_generated'] )
	end
'prependItem'/3 =
    %% Line 659
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Parent,Text>
	      when let <_cor3> =
		    %% Line 660
		    call 'erlang':'is_integer'
			(Parent)
		in  let <_cor4> =
			%% Line 660
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 660
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 661
	      apply 'prependItem'/4
		  (This, Parent, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'prependItem',3}}] )
	    -| ['compiler_generated'] )
	end
'prependItem'/4 =
    %% Line 669
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor33},Parent,Text,Options>
	      when %% Line 670
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Parent)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 671
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 672
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 673
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{'image',Image},Acc> when 'true' ->
				      let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<Image>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
				  %% Line 674
				  <{'selectedImage',SelectedImage},Acc> when 'true' ->
				      let <_cor12> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<SelectedImage>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor12|Acc]
				  %% Line 675
				  <{'data',Data},Acc> when 'true' ->
				      let <_cor13> =
					  call 'erlang':'term_to_binary'
					      (Data)
				      in  do  call 'wxe_util':'send_bin'
						  (_cor13)
					      let <_cor14> =
						  #{#<3>(32,1,'integer',['unsigned'|['native']]),
						    #<0>(32,1,'integer',['unsigned'|['big']])}#
					      in  [_cor14|Acc]
				  %% Line 676
				  <BadOpt,_cor34> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-prependItem/4-fun-0-'}}] )
		      in  let <_cor20> =
			      %% Line 677
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 677
				  call 'erlang':'list_to_binary'
				      (_cor20)
			      in  let <_cor27> =
				      %% Line 679
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor22> =
					  %% Line 679
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor23> =
					      %% Line 679
					      call 'erlang':'+'
						  (4, _cor22)
					  in  let <_cor24> =
						  %% Line 679
						  call 'erlang':'band'
						      (_cor23, 7)
					      in  let <_cor25> =
						      %% Line 679
						      call 'erlang':'-'
							  (8, _cor24)
						  in  let <_cor26> =
							  %% Line 679
							  call 'erlang':'band'
							      (_cor25, 7)
						      in  let <_cor28> =
							      %% Line 679
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<0>(32,1,'integer',['unsigned'|['big']]),
								#<Parent>(64,1,'integer',['unsigned'|['native']]),
								#<_cor27>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor26,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 678
							      call 'wxe_util':'call'
								  (2063, _cor28)
	  ( <_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'prependItem',4}}] )
	    -| ['compiler_generated'] )
	end
'scrollTo'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 685
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 686
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 688
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 687
		      call 'wxe_util':'cast'
			  (2064, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'scrollTo',2}}] )
	    -| ['compiler_generated'] )
	end
'selectItem'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 694
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 695
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 697
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 696
		      call 'wxe_util':'cast'
			  (2065, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'selectItem',2}}] )
	    -| ['compiler_generated'] )
	end
'selectItem'/3 =
    %% Line 703
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 704
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 704
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 704
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 705
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 706
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'select',Select},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Select)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 707
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-selectItem/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 708
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 708
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 710
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 709
				  call 'wxe_util':'cast'
				      (2066, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'selectItem',3}}] )
	    -| ['compiler_generated'] )
	end
'setIndent'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Indent>
	      when %% Line 716
		call 'erlang':'is_integer'
		    (Indent) ->
	      do  %% Line 717
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 719
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Indent>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 718
		      call 'wxe_util':'cast'
			  (2067, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setIndent',2}}] )
	    -| ['compiler_generated'] )
	end
'setImageList'/2 =
    %% Line 724
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ImageListRef,ImageListT,_cor10}> when 'true' ->
	      do  %% Line 725
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 726
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 728
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 727
			  call 'wxe_util':'cast'
			      (2068, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setImageList',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemBackgroundColour'/3 =
    %% Line 733
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Item,Col>
	      when let <_cor6> =
		    %% Line 734
		    try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(Item)
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 734
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 734
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 735
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 737
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor12> =
			  %% Line 737
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<0>(32,1,'integer',['unsigned'|['big']]),
			    #<Item>(64,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 736
			  call 'wxe_util':'cast'
			      (2069, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setItemBackgroundColour',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemBold'/2 =
    %% Line 743
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 744
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 745
	      apply 'setItemBold'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setItemBold',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemBold'/3 =
    %% Line 751
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 752
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 752
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 752
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 753
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 754
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'bold',Bold},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Bold)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 755
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setItemBold/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 756
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 756
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 758
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 757
				  call 'wxe_util':'cast'
				      (2070, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setItemBold',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemData'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor10},Item,Data>
	      when %% Line 764
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 765
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor5> =
		      %% Line 766
		      call 'erlang':'term_to_binary'
			  (Data)
		  in  do  %% Line 766
			  call 'wxe_util':'send_bin'
			      (_cor5)
			  let <_cor6> =
			      %% Line 768
			      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<Item>(64,1,'integer',['unsigned'|['native']])}#
			  in  %% Line 767
			      call 'wxe_util':'cast'
				  (2071, _cor6)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'setItemData',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemDropHighlight'/2 =
    %% Line 774
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 775
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 776
	      apply 'setItemDropHighlight'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setItemDropHighlight',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemDropHighlight'/3 =
    %% Line 782
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 783
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 783
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 783
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 784
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 785
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'highlight',Highlight},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Highlight)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 786
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setItemDropHighlight/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 787
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 787
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 789
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 788
				  call 'wxe_util':'cast'
				      (2072, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setItemDropHighlight',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemFont'/3 =
    %% Line 794
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,{'wx_ref',FontRef,FontT,_cor12}>
	      when %% Line 795
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 796
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 797
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FontT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FontT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 799
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<0>(32,1,'integer',['unsigned'|['big']]),
			    #<Item>(64,1,'integer',['unsigned'|['native']]),
			    #<FontRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 798
			  call 'wxe_util':'cast'
			      (2073, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setItemFont',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemHasChildren'/2 =
    %% Line 805
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Item>
	      when %% Line 806
		call 'erlang':'is_integer'
		    (Item) ->
	      %% Line 807
	      apply 'setItemHasChildren'/3
		  (This, Item, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setItemHasChildren',2}}] )
	    -| ['compiler_generated'] )
	end
'setItemHasChildren'/3 =
    %% Line 813
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Item,Options>
	      when let <_cor3> =
		    %% Line 814
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 814
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 814
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 815
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 816
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'has',Has},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (Has)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 817
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setItemHasChildren/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 818
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 818
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 820
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 819
				  call 'wxe_util':'cast'
				      (2074, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setItemHasChildren',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemImage'/3 =
    %% Line 825
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Item,Image>
	      when let <_cor3> =
		    %% Line 826
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 826
			call 'erlang':'is_integer'
			    (Image)
		    in  %% Line 826
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 827
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 829
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']]),
			#<Image>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 828
		      call 'wxe_util':'cast'
			  (2075, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setItemImage',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemImage'/4 =
    %% Line 836
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},Item,Image,Options>
	      when %% Line 837
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Item)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Image)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 838
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 839
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'which',Which},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Which>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 840
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setItemImage/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 841
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 841
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 843
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<Item>(64,1,'integer',['unsigned'|['native']]),
				    #<Image>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 842
				  call 'wxe_util':'cast'
				      (2076, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'setItemImage',4}}] )
	    -| ['compiler_generated'] )
	end
'setItemText'/3 =
    %% Line 848
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Item,Text>
	      when let <_cor3> =
		    %% Line 849
		    call 'erlang':'is_integer'
			(Item)
		in  let <_cor4> =
			%% Line 849
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 849
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 850
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 851
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor13> =
			  %% Line 853
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor8> =
			      %% Line 853
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor9> =
				  %% Line 853
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 853
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 853
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 853
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 853
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<0>(32,1,'integer',['unsigned'|['big']]),
						    #<Item>(64,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 852
						  call 'wxe_util':'cast'
						      (2077, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setItemText',3}}] )
	    -| ['compiler_generated'] )
	end
'setItemTextColour'/3 =
    %% Line 858
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Item,Col>
	      when let <_cor6> =
		    %% Line 859
		    try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(Item)
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  let <_cor5> =
				    call 'erlang':'=:='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor8> =
			%% Line 859
			try
			    let <_cor7> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor7, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 859
			call 'erlang':'or'
			    (_cor6, _cor8) ->
	      do  %% Line 860
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 862
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor12> =
			  %% Line 862
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<0>(32,1,'integer',['unsigned'|['big']]),
			    #<Item>(64,1,'integer',['unsigned'|['native']]),
			    #<_cor11>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 861
			  call 'wxe_util':'cast'
			      (2078, _cor12)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'setItemTextColour',3}}] )
	    -| ['compiler_generated'] )
	end
'setStateImageList'/2 =
    %% Line 867
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ImageListRef,ImageListT,_cor10}> when 'true' ->
	      do  %% Line 868
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 869
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ImageListT,
				       'wxImageList') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ImageListT:'parent_class'
				    ('wxImageList')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 871
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ImageListRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 870
			  call 'wxe_util':'cast'
			      (2079, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setStateImageList',2}}] )
	    -| ['compiler_generated'] )
	end
'setWindowStyle'/2 =
    %% Line 876
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Styles>
	      when %% Line 877
		call 'erlang':'is_integer'
		    (Styles) ->
	      do  %% Line 878
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 880
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Styles>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 879
		      call 'wxe_util':'cast'
			  (2080, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWindowStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'sortChildren'/2 =
    %% Line 885
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 886
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 887
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 889
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 888
		      call 'wxe_util':'cast'
			  (2081, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'sortChildren',2}}] )
	    -| ['compiler_generated'] )
	end
'toggle'/2 =
    %% Line 894
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 895
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 896
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 898
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 897
		      call 'wxe_util':'cast'
			  (2082, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'toggle',2}}] )
	    -| ['compiler_generated'] )
	end
'toggleItemSelection'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 904
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 905
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 907
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 906
		      call 'wxe_util':'cast'
			  (2083, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'toggleItemSelection',2}}] )
	    -| ['compiler_generated'] )
	end
'unselect'/1 =
    %% Line 912
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 913
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 915
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 914
		      call 'wxe_util':'cast'
			  (2084, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'unselect',1}}] )
	    -| ['compiler_generated'] )
	end
'unselectAll'/1 =
    %% Line 920
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 921
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 923
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 922
		      call 'wxe_util':'cast'
			  (2085, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'unselectAll',1}}] )
	    -| ['compiler_generated'] )
	end
'unselectItem'/2 =
    %% Line 928
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Item>
	      when %% Line 929
		call 'erlang':'is_integer'
		    (Item) ->
	      do  %% Line 930
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 932
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Item>(64,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 931
		      call 'wxe_util':'cast'
			  (2086, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'unselectItem',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 936
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 937
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxTreeCtrl') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxTreeCtrl')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 938
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 939
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/2 =
    %% Line 942
    fun (_cor1,_cor0) ->
	call 'wxControl':'setLabel'
	    (_cor1, _cor0)
'getLabel'/1 =
    %% Line 944
    fun (_cor0) ->
	call 'wxControl':'getLabel'
	    (_cor0)
'warpPointer'/3 =
    %% Line 947
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 949
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 951
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 953
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 955
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 957
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 959
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 961
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 963
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 965
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 967
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 969
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 971
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 973
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 975
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 979
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 981
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 983
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 985
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 987
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 989
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 991
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 993
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 995
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 997
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 999
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 1001
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 1003
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 1005
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 1007
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 1009
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 1011
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 1013
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 1015
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 1017
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 1019
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 1021
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 1023
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 1025
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 1027
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 1029
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 1031
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 1033
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 1035
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 1037
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 1039
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 1041
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 1043
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 1045
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 1047
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 1049
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 1051
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 1053
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 1055
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 1057
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 1059
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 1061
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 1063
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 1065
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 1067
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 1069
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 1071
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 1073
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 1075
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 1077
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 1079
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 1081
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 1083
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 1085
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 1087
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 1089
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 1091
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 1093
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 1095
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 1097
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 1099
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 1101
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 1103
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 1105
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 1107
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 1109
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 1111
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 1113
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 1115
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 1117
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 1119
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 1121
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 1123
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 1125
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 1127
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 1129
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 1131
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 1133
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 1135
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 1137
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 1139
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 1141
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 1143
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 1145
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 1147
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'initDialog'/1 =
    %% Line 1149
    fun (_cor0) ->
	call 'wxWindow':'initDialog'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 1151
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 1153
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 1155
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 1157
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 1159
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 1161
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 1163
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 1165
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 1167
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 1169
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 1171
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 1173
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 1175
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 1177
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 1179
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 1183
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 1185
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 1187
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 1189
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 1191
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 1193
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 1195
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 1197
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 1199
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getId'/1 =
    %% Line 1201
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 1203
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 1205
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 1207
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 1209
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 1211
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 1213
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 1215
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 1217
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 1219
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 1221
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 1223
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 1225
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 1227
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 1229
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 1231
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 1233
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 1235
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 1237
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 1239
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 1241
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 1243
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'fit'/1 =
    %% Line 1245
    fun (_cor0) ->
	call 'wxWindow':'fit'
	    (_cor0)
'findWindow'/2 =
    %% Line 1247
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 1249
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 1251
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 1253
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 1255
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 1257
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 1259
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 1261
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 1263
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 1265
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 1267
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 1269
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 1271
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 1273
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 1275
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 1277
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 1279
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 1281
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 1283
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 1285
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 1287
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 1289
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 1292
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 1294
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 1296
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 1298
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 1300
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxTreeCtrl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxTreeCtrl', _cor0)
end