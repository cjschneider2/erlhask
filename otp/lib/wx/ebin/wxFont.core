module 'wxFont' ['destroy'/1,
		 'getDefaultEncoding'/0,
		 'getFaceName'/1,
		 'getFamily'/1,
		 'getNativeFontInfoDesc'/1,
		 'getNativeFontInfoUserDesc'/1,
		 'getPointSize'/1,
		 'getStyle'/1,
		 'getUnderlined'/1,
		 'getWeight'/1,
		 'isFixedWidth'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'new'/0,
		 'new'/1,
		 'new'/4,
		 'new'/5,
		 'ok'/1,
		 'parent_class'/1,
		 'setDefaultEncoding'/1,
		 'setFaceName'/2,
		 'setFamily'/2,
		 'setPointSize'/2,
		 'setStyle'/2,
		 'setUnderlined'/2,
		 'setWeight'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 36
		'export_type' =
		    %% Line 36
		    [{'wxFont',0}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'wxFont',{'remote_type',40,[{'atom',40,'wx'}|[{'atom',40,'wx_object'}|[[]]]]},[]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'new',0},[{'type',42,'fun',[{'type',42,'product',[]}|[{'type',42,'wxFont',[]}]]}]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'new',1},[{'type',48,'bounded_fun',[{'type',48,'fun',[{'type',48,'product',[{'var',48,'Fontname'}]}|[{'type',48,'wxFont',[]}]]}|[[{'type',49,'constraint',[{'atom',49,'is_subtype'}|[[{'var',49,'Fontname'}|[{'remote_type',49,[{'atom',49,'unicode'}|[{'atom',49,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'new',4},[{'type',57,'bounded_fun',[{'type',57,'fun',[{'type',57,'product',[{'var',57,'Size'}|[{'var',57,'Family'}|[{'var',57,'Style'}|[{'var',57,'Weight'}]]]]}|[{'type',57,'wxFont',[]}]]}|[[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Size'}|[{'type',58,'integer',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Family'}|[{'remote_type',58,[{'atom',58,'wx'}|[{'atom',58,'wx_enum'}|[[]]]]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Style'}|[{'remote_type',58,[{'atom',58,'wx'}|[{'atom',58,'wx_enum'}|[[]]]]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Weight'}|[{'type',58,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'new',5},[{'type',68,'bounded_fun',[{'type',68,'fun',[{'type',68,'product',[{'var',68,'Size'}|[{'var',68,'Family'}|[{'var',68,'Style'}|[{'var',68,'Weight'}|[{'type',68,'list',[{'var',68,'Option'}]}]]]]]}|[{'type',68,'wxFont',[]}]]}|[[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Size'}|[{'type',69,'integer',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Family'}|[{'remote_type',69,[{'atom',69,'wx'}|[{'atom',69,'wx_enum'}|[[]]]]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Style'}|[{'remote_type',69,[{'atom',69,'wx'}|[{'atom',69,'wx_enum'}|[[]]]]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Weight'}|[{'type',69,'integer',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Option'}|[{'type',70,'union',[{'type',70,'tuple',[{'atom',70,'underlined'}|[{'type',70,'boolean',[]}]]}|[{'type',71,'tuple',[{'atom',71,'face'}|[{'remote_type',71,[{'atom',71,'unicode'}|[{'atom',71,'chardata'}|[[]]]]}]]}|[{'type',72,'tuple',[{'atom',72,'encoding'}|[{'remote_type',72,[{'atom',72,'wx'}|[{'atom',72,'wx_enum'}|[[]]]]}]]}]]]}]]]]}]]]]]]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'isFixedWidth',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'This'}]}|[{'type',84,'boolean',[]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'This'}|[{'type',85,'wxFont',[]}]]]]}]]]}]}],
		%% Line 93
		'spec' =
		    %% Line 93
		    [{{'getDefaultEncoding',0},[{'type',93,'fun',[{'type',93,'product',[]}|[{'remote_type',93,[{'atom',93,'wx'}|[{'atom',93,'wx_enum'}|[[]]]]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'getFaceName',1},[{'type',99,'bounded_fun',[{'type',99,'fun',[{'type',99,'product',[{'var',99,'This'}]}|[{'remote_type',99,[{'atom',99,'unicode'}|[{'atom',99,'charlist'}|[[]]]]}]]}|[[{'type',100,'constraint',[{'atom',100,'is_subtype'}|[[{'var',100,'This'}|[{'type',100,'wxFont',[]}]]]]}]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'getFamily',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}]}|[{'remote_type',108,[{'atom',108,'wx'}|[{'atom',108,'wx_enum'}|[[]]]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxFont',[]}]]]]}]]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'getNativeFontInfoDesc',1},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'This'}]}|[{'remote_type',116,[{'atom',116,'unicode'}|[{'atom',116,'charlist'}|[[]]]]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'This'}|[{'type',117,'wxFont',[]}]]]]}]]]}]}],
		%% Line 124
		'spec' =
		    %% Line 124
		    [{{'getNativeFontInfoUserDesc',1},[{'type',124,'bounded_fun',[{'type',124,'fun',[{'type',124,'product',[{'var',124,'This'}]}|[{'remote_type',124,[{'atom',124,'unicode'}|[{'atom',124,'charlist'}|[[]]]]}]]}|[[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'This'}|[{'type',125,'wxFont',[]}]]]]}]]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'getPointSize',1},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'This'}]}|[{'type',132,'integer',[]}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'This'}|[{'type',133,'wxFont',[]}]]]]}]]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'getStyle',1},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'This'}]}|[{'remote_type',141,[{'atom',141,'wx'}|[{'atom',141,'wx_enum'}|[[]]]]}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'This'}|[{'type',142,'wxFont',[]}]]]]}]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'getUnderlined',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'This'}]}|[{'type',149,'boolean',[]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'This'}|[{'type',150,'wxFont',[]}]]]]}]]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'getWeight',1},[{'type',157,'bounded_fun',[{'type',157,'fun',[{'type',157,'product',[{'var',157,'This'}]}|[{'type',157,'integer',[]}]]}|[[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'This'}|[{'type',158,'wxFont',[]}]]]]}]]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'ok',1},[{'type',165,'bounded_fun',[{'type',165,'fun',[{'type',165,'product',[{'var',165,'This'}]}|[{'type',165,'boolean',[]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'This'}|[{'type',166,'wxFont',[]}]]]]}]]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'setDefaultEncoding',1},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Encoding'}]}|[{'atom',174,'ok'}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Encoding'}|[{'remote_type',175,[{'atom',175,'wx'}|[{'atom',175,'wx_enum'}|[[]]]]}]]]]}]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'setFaceName',2},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'This'}|[{'var',182,'FaceName'}]]}|[{'type',182,'boolean',[]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'This'}|[{'type',183,'wxFont',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'FaceName'}|[{'remote_type',183,[{'atom',183,'unicode'}|[{'atom',183,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'setFamily',2},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'This'}|[{'var',193,'Family'}]]}|[{'atom',193,'ok'}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'This'}|[{'type',194,'wxFont',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Family'}|[{'remote_type',194,[{'atom',194,'wx'}|[{'atom',194,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'setPointSize',2},[{'type',202,'bounded_fun',[{'type',202,'fun',[{'type',202,'product',[{'var',202,'This'}|[{'var',202,'PointSize'}]]}|[{'atom',202,'ok'}]]}|[[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'This'}|[{'type',203,'wxFont',[]}]]]]}|[{'type',203,'constraint',[{'atom',203,'is_subtype'}|[[{'var',203,'PointSize'}|[{'type',203,'integer',[]}]]]]}]]]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'setStyle',2},[{'type',212,'bounded_fun',[{'type',212,'fun',[{'type',212,'product',[{'var',212,'This'}|[{'var',212,'Style'}]]}|[{'atom',212,'ok'}]]}|[[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'This'}|[{'type',213,'wxFont',[]}]]]]}|[{'type',213,'constraint',[{'atom',213,'is_subtype'}|[[{'var',213,'Style'}|[{'remote_type',213,[{'atom',213,'wx'}|[{'atom',213,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'setUnderlined',2},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'This'}|[{'var',221,'Underlined'}]]}|[{'atom',221,'ok'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'This'}|[{'type',222,'wxFont',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Underlined'}|[{'type',222,'boolean',[]}]]]]}]]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'setWeight',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'This'}|[{'var',230,'Weight'}]]}|[{'atom',230,'ok'}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'This'}|[{'type',231,'wxFont',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Weight'}|[{'type',231,'integer',[]}]]]]}]]]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'destroy',1},[{'type',239,'fun',[{'type',239,'product',[{'ann_type',239,[{'var',239,'This'}|[{'type',239,'wxFont',[]}]]}]}|[{'atom',239,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 38
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxFont'})
'new'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'wxe_util':'construct'
	    (1436, %% Line 45
		   #{}#)
'new'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <Fontname>
	      when %% Line 51
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <Fontname_UC> =
		  %% Line 52
		  call 'unicode':'characters_to_binary'
		      ([Fontname|[0]])
	      in  let <_cor7> =
		      %% Line 54
		      call 'erlang':'byte_size'
			  (Fontname_UC)
		  in  let <_cor2> =
			  %% Line 54
			  call 'erlang':'byte_size'
			      (Fontname_UC)
		      in  let <_cor3> =
			      %% Line 54
			      call 'erlang':'+'
				  (4, _cor2)
			  in  let <_cor4> =
				  %% Line 54
				  call 'erlang':'band'
				      (_cor3, 7)
			      in  let <_cor5> =
				      %% Line 54
				      call 'erlang':'-'
					  (8, _cor4)
				  in  let <_cor6> =
					  %% Line 54
					  call 'erlang':'band'
					      (_cor5, 7)
				      in  let <_cor8> =
					      %% Line 54
					      #{#<_cor7>(32,1,'integer',['unsigned'|['native']]),
						#<Fontname_UC>('all',8,'binary',['unsigned'|['big']]),
						#<0>(_cor6,8,'integer',['unsigned'|['big']])}#
					  in  %% Line 53
					      call 'wxe_util':'construct'
						  (1437, _cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 60
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Size,Family,Style,Weight>
	      when %% Line 61
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Size)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Family)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Style)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(Weight)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 62
	      apply 'new'/5
		  (Size, Family, Style, Weight, [])
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'new'/5 =
    %% Line 73
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Size,Family,Style,Weight,Options>
	      when %% Line 74
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Size)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Family)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Style)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(Weight)
				in  let <_cor9> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor8, _cor9)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor7, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor6, _cor11)
						in  call 'erlang':'and'
							(_cor5, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <MOpts> =
		  %% Line 75
		  ( fun (_cor25,_cor24) ->
			case <_cor25,_cor24> of
			  <{'underlined',Underlined},Acc> when 'true' ->
			      let <_cor13> =
				  call 'wxe_util':'from_bool'
				      (Underlined)
			      in  let <_cor14> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<_cor13>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor14|Acc]
			  %% Line 76
			  <{'face',Face},Acc> when 'true' ->
			      let <Face_UC> =
				  call 'unicode':'characters_to_binary'
				      ([Face|[0]])
			      in  let <_cor21> =
				      call 'erlang':'byte_size'
					  (Face_UC)
				  in  let <_cor16> =
					  call 'erlang':'byte_size'
					      (Face_UC)
				      in  let <_cor17> =
					      call 'erlang':'+'
						  (0, _cor16)
					  in  let <_cor18> =
						  call 'erlang':'band'
						      (_cor17, 7)
					      in  let <_cor19> =
						      call 'erlang':'-'
							  (8, _cor18)
						  in  let <_cor20> =
							  call 'erlang':'band'
							      (_cor19, 7)
						      in  let <_cor22> =
							      #{#<2>(32,1,'integer',['unsigned'|['native']]),
								#<_cor21>(32,1,'integer',['unsigned'|['native']]),
								#<Face_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor20,8,'integer',['unsigned'|['big']])}#
							  in  [_cor22|Acc]
			  %% Line 77
			  <{'encoding',Encoding},Acc> when 'true' ->
			      let <_cor23> =
				  #{#<3>(32,1,'integer',['unsigned'|['native']]),
				    #<Encoding>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor23|Acc]
			  %% Line 78
			  <BadOpt,_cor37> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/5-fun-0-'}}] )
	      in  let <_cor29> =
		      %% Line 79
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 79
			  call 'erlang':'list_to_binary'
			      (_cor29)
		      in  let <_cor31> =
			      %% Line 81
			      #{#<Size>(32,1,'integer',['unsigned'|['native']]),
				#<Family>(32,1,'integer',['unsigned'|['native']]),
				#<Style>(32,1,'integer',['unsigned'|['native']]),
				#<Weight>(32,1,'integer',['unsigned'|['native']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 80
			      call 'wxe_util':'construct'
				  (1438, _cor31)
	  ( <_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'new',5}}] )
	    -| ['compiler_generated'] )
	end
'isFixedWidth'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 87
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 89
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 88
		      call 'wxe_util':'call'
			  (1441, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isFixedWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultEncoding'/0 =
    %% Line 94
    fun () ->
	%% Line 95
	call 'wxe_util':'call'
	    (1442, %% Line 96
		   #{}#)
'getFaceName'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 102
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 104
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 103
		      call 'wxe_util':'call'
			  (1443, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFaceName',1}}] )
	    -| ['compiler_generated'] )
	end
'getFamily'/1 =
    %% Line 110
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 111
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 113
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 112
		      call 'wxe_util':'call'
			  (1444, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFamily',1}}] )
	    -| ['compiler_generated'] )
	end
'getNativeFontInfoDesc'/1 =
    %% Line 118
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 119
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 121
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 120
		      call 'wxe_util':'call'
			  (1445, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNativeFontInfoDesc',1}}] )
	    -| ['compiler_generated'] )
	end
'getNativeFontInfoUserDesc'/1 =
    %% Line 126
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 127
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 129
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 128
		      call 'wxe_util':'call'
			  (1446, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNativeFontInfoUserDesc',1}}] )
	    -| ['compiler_generated'] )
	end
'getPointSize'/1 =
    %% Line 134
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 135
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 137
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 136
		      call 'wxe_util':'call'
			  (1447, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getPointSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getStyle'/1 =
    %% Line 143
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 144
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 146
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 145
		      call 'wxe_util':'call'
			  (1448, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getStyle',1}}] )
	    -| ['compiler_generated'] )
	end
'getUnderlined'/1 =
    %% Line 151
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 152
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 154
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 153
		      call 'wxe_util':'call'
			  (1449, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getUnderlined',1}}] )
	    -| ['compiler_generated'] )
	end
'getWeight'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 162
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 161
		      call 'wxe_util':'call'
			  (1450, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWeight',1}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 167
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 168
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 170
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 169
		      call 'wxe_util':'call'
			  (1451, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ok',1}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultEncoding'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <Encoding>
	      when %% Line 177
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 179
		  #{#<Encoding>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 178
		  call 'wxe_util':'cast'
		      (1452, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'setDefaultEncoding',1}}] )
	    -| ['compiler_generated'] )
	end
'setFaceName'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},FaceName>
	      when %% Line 185
		call 'erlang':'is_list'
		    (FaceName) ->
	      do  %% Line 186
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <FaceName_UC> =
		      %% Line 187
		      call 'unicode':'characters_to_binary'
			  ([FaceName|[0]])
		  in  let <_cor10> =
			  %% Line 189
			  call 'erlang':'byte_size'
			      (FaceName_UC)
		      in  let <_cor5> =
			      %% Line 189
			      call 'erlang':'byte_size'
				  (FaceName_UC)
			  in  let <_cor6> =
				  %% Line 189
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 189
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 189
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 189
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 189
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<FaceName_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 188
						  call 'wxe_util':'call'
						      (1453, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setFaceName',2}}] )
	    -| ['compiler_generated'] )
	end
'setFamily'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Family>
	      when %% Line 196
		call 'erlang':'is_integer'
		    (Family) ->
	      do  %% Line 197
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 199
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Family>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 198
		      call 'wxe_util':'cast'
			  (1454, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setFamily',2}}] )
	    -| ['compiler_generated'] )
	end
'setPointSize'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},PointSize>
	      when %% Line 205
		call 'erlang':'is_integer'
		    (PointSize) ->
	      do  %% Line 206
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 208
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<PointSize>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 207
		      call 'wxe_util':'cast'
			  (1455, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setPointSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setStyle'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Style>
	      when %% Line 215
		call 'erlang':'is_integer'
		    (Style) ->
	      do  %% Line 216
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 218
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Style>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 217
		      call 'wxe_util':'cast'
			  (1456, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setStyle',2}}] )
	    -| ['compiler_generated'] )
	end
'setUnderlined'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Underlined>
	      when %% Line 224
		call 'erlang':'is_boolean'
		    (Underlined) ->
	      do  %% Line 225
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 227
		      call 'wxe_util':'from_bool'
			  (Underlined)
		  in  let <_cor5> =
			  %% Line 227
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 226
			  call 'wxe_util':'cast'
			      (1457, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'setUnderlined',2}}] )
	    -| ['compiler_generated'] )
	end
'setWeight'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Weight>
	      when %% Line 233
		call 'erlang':'is_integer'
		    (Weight) ->
	      do  %% Line 234
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 236
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Weight>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 235
		      call 'wxe_util':'cast'
			  (1458, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setWeight',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 240
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 241
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxFont') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxFont')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 242
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 243
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxFont')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxFont', _cor0)
end