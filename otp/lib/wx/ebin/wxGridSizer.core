module 'wxGridSizer' ['add'/2,
		      'add'/3,
		      'add'/4,
		      'addSpacer'/2,
		      'addStretchSpacer'/1,
		      'addStretchSpacer'/2,
		      'calcMin'/1,
		      'clear'/1,
		      'clear'/2,
		      'destroy'/1,
		      'detach'/2,
		      'fit'/2,
		      'fitInside'/2,
		      'getChildren'/1,
		      'getCols'/1,
		      'getHGap'/1,
		      'getItem'/2,
		      'getItem'/3,
		      'getMinSize'/1,
		      'getPosition'/1,
		      'getRows'/1,
		      'getSize'/1,
		      'getVGap'/1,
		      'hide'/2,
		      'hide'/3,
		      'insert'/3,
		      'insert'/4,
		      'insert'/5,
		      'insertSpacer'/3,
		      'insertStretchSpacer'/2,
		      'insertStretchSpacer'/3,
		      'isShown'/2,
		      'layout'/1,
		      'module_info'/0,
		      'module_info'/1,
		      'new'/1,
		      'new'/2,
		      'new'/4,
		      'parent_class'/1,
		      'prepend'/2,
		      'prepend'/3,
		      'prepend'/4,
		      'prependSpacer'/2,
		      'prependStretchSpacer'/1,
		      'prependStretchSpacer'/2,
		      'recalcSizes'/1,
		      'remove'/2,
		      'replace'/3,
		      'replace'/4,
		      'setCols'/2,
		      'setDimension'/5,
		      'setHGap'/2,
		      'setItemMinSize'/3,
		      'setItemMinSize'/4,
		      'setMinSize'/2,
		      'setMinSize'/3,
		      'setRows'/2,
		      'setSizeHints'/2,
		      'setVGap'/2,
		      'setVirtualSizeHints'/2,
		      'show'/2,
		      'show'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 44
		'export_type' =
		    %% Line 44
		    [{'wxGridSizer',0}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'wxGridSizer',{'remote_type',49,[{'atom',49,'wx'}|[{'atom',49,'wx_object'}|[[]]]]},[]}],
		%% Line 51
		'spec' =
		    %% Line 51
		    [{{'new',1},[{'type',51,'bounded_fun',[{'type',51,'fun',[{'type',51,'product',[{'var',51,'Cols'}]}|[{'type',51,'wxGridSizer',[]}]]}|[[{'type',52,'constraint',[{'atom',52,'is_subtype'}|[[{'var',52,'Cols'}|[{'type',52,'integer',[]}]]]]}]]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'new',2},[{'type',59,'bounded_fun',[{'type',59,'fun',[{'type',59,'product',[{'var',59,'Cols'}|[{'type',59,'list',[{'var',59,'Option'}]}]]}|[{'type',59,'wxGridSizer',[]}]]}|[[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Cols'}|[{'type',60,'integer',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Option'}|[{'type',61,'union',[{'type',61,'tuple',[{'atom',61,'vgap'}|[{'type',61,'integer',[]}]]}|[{'type',62,'tuple',[{'atom',62,'hgap'}|[{'type',62,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'new',4},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'Rows'}|[{'var',73,'Cols'}|[{'var',73,'Vgap'}|[{'var',73,'Hgap'}]]]]}|[{'type',73,'wxGridSizer',[]}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Rows'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Cols'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Vgap'}|[{'type',74,'integer',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Hgap'}|[{'type',74,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 81
		'spec' =
		    %% Line 81
		    [{{'getCols',1},[{'type',81,'bounded_fun',[{'type',81,'fun',[{'type',81,'product',[{'var',81,'This'}]}|[{'type',81,'integer',[]}]]}|[[{'type',82,'constraint',[{'atom',82,'is_subtype'}|[[{'var',82,'This'}|[{'type',82,'wxGridSizer',[]}]]]]}]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'getHGap',1},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}]}|[{'type',89,'integer',[]}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxGridSizer',[]}]]]]}]]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'getRows',1},[{'type',97,'bounded_fun',[{'type',97,'fun',[{'type',97,'product',[{'var',97,'This'}]}|[{'type',97,'integer',[]}]]}|[[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'This'}|[{'type',98,'wxGridSizer',[]}]]]]}]]]}]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'getVGap',1},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'This'}]}|[{'type',105,'integer',[]}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'This'}|[{'type',106,'wxGridSizer',[]}]]]]}]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'setCols',2},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'This'}|[{'var',113,'Cols'}]]}|[{'atom',113,'ok'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'This'}|[{'type',114,'wxGridSizer',[]}]]]]}|[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Cols'}|[{'type',114,'integer',[]}]]]]}]]]]}]}],
		%% Line 122
		'spec' =
		    %% Line 122
		    [{{'setHGap',2},[{'type',122,'bounded_fun',[{'type',122,'fun',[{'type',122,'product',[{'var',122,'This'}|[{'var',122,'Gap'}]]}|[{'atom',122,'ok'}]]}|[[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'This'}|[{'type',123,'wxGridSizer',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Gap'}|[{'type',123,'integer',[]}]]]]}]]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'setRows',2},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'This'}|[{'var',131,'Rows'}]]}|[{'atom',131,'ok'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'This'}|[{'type',132,'wxGridSizer',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Rows'}|[{'type',132,'integer',[]}]]]]}]]]]}]}],
		%% Line 140
		'spec' =
		    %% Line 140
		    [{{'setVGap',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'This'}|[{'var',140,'Gap'}]]}|[{'atom',140,'ok'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'This'}|[{'type',141,'wxGridSizer',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Gap'}|[{'type',141,'integer',[]}]]]]}]]]]}]}],
		%% Line 149
		'spec' =
		    %% Line 149
		    [{{'destroy',1},[{'type',149,'fun',[{'type',149,'product',[{'ann_type',149,[{'var',149,'This'}|[{'type',149,'wxGridSizer',[]}]]}]}|[{'atom',149,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <'wxSizer'> when 'true' ->
	      'true'
	  %% Line 47
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGridSizer'})
	end
'new'/1 =
    %% Line 54
    fun (_cor0) ->
	case _cor0 of
	  <Cols>
	      when %% Line 55
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 56
	      apply 'new'/2
		  (Cols, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cols,Options>
	      when let <_cor2> =
		    %% Line 64
		    call 'erlang':'is_integer'
			(Cols)
		in  let <_cor3> =
			%% Line 64
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 64
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 65
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{'vgap',Vgap},Acc> when 'true' ->
			      let <_cor4> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Vgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor4|Acc]
			  %% Line 66
			  <{'hgap',Hgap},Acc> when 'true' ->
			      let <_cor5> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<Hgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor5|Acc]
			  %% Line 67
			  <BadOpt,_cor16> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor11> =
		      %% Line 68
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 68
			  call 'erlang':'list_to_binary'
			      (_cor11)
		      in  let <_cor13> =
			      %% Line 70
			      #{#<Cols>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 69
			      call 'wxe_util':'construct'
				  (1375, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 75
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Rows,Cols,Vgap,Hgap>
	      when %% Line 76
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Rows)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Cols)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Vgap)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(Hgap)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 78
		  #{#<Rows>(32,1,'integer',['unsigned'|['native']]),
		    #<Cols>(32,1,'integer',['unsigned'|['native']]),
		    #<Vgap>(32,1,'integer',['unsigned'|['native']]),
		    #<Hgap>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 77
		  call 'wxe_util':'construct'
		      (1374, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'getCols'/1 =
    %% Line 83
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 84
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 86
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 85
		      call 'wxe_util':'call'
			  (1376, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCols',1}}] )
	    -| ['compiler_generated'] )
	end
'getHGap'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 92
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 94
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 93
		      call 'wxe_util':'call'
			  (1377, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getHGap',1}}] )
	    -| ['compiler_generated'] )
	end
'getRows'/1 =
    %% Line 99
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 100
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 102
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 101
		      call 'wxe_util':'call'
			  (1378, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRows',1}}] )
	    -| ['compiler_generated'] )
	end
'getVGap'/1 =
    %% Line 107
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 108
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 110
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 109
		      call 'wxe_util':'call'
			  (1379, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getVGap',1}}] )
	    -| ['compiler_generated'] )
	end
'setCols'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Cols>
	      when %% Line 116
		call 'erlang':'is_integer'
		    (Cols) ->
	      do  %% Line 117
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 119
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Cols>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 118
		      call 'wxe_util':'cast'
			  (1380, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setCols',2}}] )
	    -| ['compiler_generated'] )
	end
'setHGap'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Gap>
	      when %% Line 125
		call 'erlang':'is_integer'
		    (Gap) ->
	      do  %% Line 126
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 128
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Gap>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 127
		      call 'wxe_util':'cast'
			  (1381, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setHGap',2}}] )
	    -| ['compiler_generated'] )
	end
'setRows'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Rows>
	      when %% Line 134
		call 'erlang':'is_integer'
		    (Rows) ->
	      do  %% Line 135
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 137
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Rows>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 136
		      call 'wxe_util':'cast'
			  (1382, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setRows',2}}] )
	    -| ['compiler_generated'] )
	end
'setVGap'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Gap>
	      when %% Line 143
		call 'erlang':'is_integer'
		    (Gap) ->
	      do  %% Line 144
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 146
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Gap>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 145
		      call 'wxe_util':'cast'
			  (1383, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setVGap',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 150
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 151
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 152
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 153
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'show'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor2, _cor1, _cor0)
'show'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setSizeHints'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setSizeHints'
	    (_cor1, _cor0)
'setItemMinSize'/4 =
    %% Line 164
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor3, _cor2, _cor1, _cor0)
'setItemMinSize'/3 =
    %% Line 166
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/3 =
    %% Line 168
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor1, _cor0)
'setDimension'/5 =
    %% Line 172
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setDimension'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'replace'/4 =
    %% Line 174
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor3, _cor2, _cor1, _cor0)
'replace'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor2, _cor1, _cor0)
'remove'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	call 'wxSizer':'remove'
	    (_cor1, _cor0)
'recalcSizes'/1 =
    %% Line 180
    fun (_cor0) ->
	call 'wxSizer':'recalcSizes'
	    (_cor0)
'prependStretchSpacer'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor1, _cor0)
'prependStretchSpacer'/1 =
    %% Line 184
    fun (_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor0)
'prependSpacer'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependSpacer'
	    (_cor1, _cor0)
'prepend'/4 =
    %% Line 188
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor3, _cor2, _cor1, _cor0)
'prepend'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor2, _cor1, _cor0)
'prepend'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor1, _cor0)
'layout'/1 =
    %% Line 194
    fun (_cor0) ->
	call 'wxSizer':'layout'
	    (_cor0)
'isShown'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	call 'wxSizer':'isShown'
	    (_cor1, _cor0)
'insertStretchSpacer'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor2, _cor1, _cor0)
'insertStretchSpacer'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor1, _cor0)
'insertSpacer'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertSpacer'
	    (_cor2, _cor1, _cor0)
'insert'/5 =
    %% Line 204
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'insert'/4 =
    %% Line 206
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor3, _cor2, _cor1, _cor0)
'insert'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor2, _cor1, _cor0)
'hide'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor2, _cor1, _cor0)
'hide'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor1, _cor0)
'getMinSize'/1 =
    %% Line 214
    fun (_cor0) ->
	call 'wxSizer':'getMinSize'
	    (_cor0)
'getPosition'/1 =
    %% Line 216
    fun (_cor0) ->
	call 'wxSizer':'getPosition'
	    (_cor0)
'getSize'/1 =
    %% Line 218
    fun (_cor0) ->
	call 'wxSizer':'getSize'
	    (_cor0)
'getItem'/3 =
    %% Line 220
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor2, _cor1, _cor0)
'getItem'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor1, _cor0)
'getChildren'/1 =
    %% Line 224
    fun (_cor0) ->
	call 'wxSizer':'getChildren'
	    (_cor0)
'fitInside'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fitInside'
	    (_cor1, _cor0)
'fit'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fit'
	    (_cor1, _cor0)
'detach'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	call 'wxSizer':'detach'
	    (_cor1, _cor0)
'clear'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	call 'wxSizer':'clear'
	    (_cor1, _cor0)
'clear'/1 =
    %% Line 234
    fun (_cor0) ->
	call 'wxSizer':'clear'
	    (_cor0)
'calcMin'/1 =
    %% Line 236
    fun (_cor0) ->
	call 'wxSizer':'calcMin'
	    (_cor0)
'addStretchSpacer'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor1, _cor0)
'addStretchSpacer'/1 =
    %% Line 240
    fun (_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor0)
'addSpacer'/2 =
    %% Line 242
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addSpacer'
	    (_cor1, _cor0)
'add'/4 =
    %% Line 244
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor3, _cor2, _cor1, _cor0)
'add'/3 =
    %% Line 246
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor2, _cor1, _cor0)
'add'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGridSizer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGridSizer', _cor0)
end