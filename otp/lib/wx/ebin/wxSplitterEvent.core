module 'wxSplitterEvent' ['allow'/1,
			  'getClientData'/1,
			  'getExtraLong'/1,
			  'getId'/1,
			  'getInt'/1,
			  'getSashPosition'/1,
			  'getSelection'/1,
			  'getSkipped'/1,
			  'getString'/1,
			  'getTimestamp'/1,
			  'getWindowBeingRemoved'/1,
			  'getX'/1,
			  'getY'/1,
			  'isAllowed'/1,
			  'isChecked'/1,
			  'isCommandEvent'/1,
			  'isSelection'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'parent_class'/1,
			  'resumePropagation'/2,
			  'setInt'/2,
			  'setSashPosition'/2,
			  'setString'/2,
			  'shouldPropagate'/1,
			  'skip'/1,
			  'skip'/2,
			  'stopPropagation'/1,
			  'veto'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 44
		'export_type' =
		    %% Line 44
		    [{'wxSplitterEvent',0}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'wxSplitterEvent',{'remote_type',51,[{'atom',51,'wx'}|[{'atom',51,'wx_object'}|[[]]]]},[]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'getSashPosition',1},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'This'}]}|[{'type',53,'integer',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'This'}|[{'type',54,'wxSplitterEvent',[]}]]]]}]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'getX',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'This'}]}|[{'type',61,'integer',[]}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'This'}|[{'type',62,'wxSplitterEvent',[]}]]]]}]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'getY',1},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'This'}]}|[{'type',69,'integer',[]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'This'}|[{'type',70,'wxSplitterEvent',[]}]]]]}]]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'getWindowBeingRemoved',1},[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'This'}]}|[{'remote_type',77,[{'atom',77,'wxWindow'}|[{'atom',77,'wxWindow'}|[[]]]]}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'This'}|[{'type',78,'wxSplitterEvent',[]}]]]]}]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'setSashPosition',2},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'This'}|[{'var',85,'Pos'}]]}|[{'atom',85,'ok'}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'This'}|[{'type',86,'wxSplitterEvent',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Pos'}|[{'type',86,'integer',[]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 46
    fun (_cor0) ->
	case _cor0 of
	  <'wxNotifyEvent'> when 'true' ->
	      'true'
	  %% Line 47
	  <'wxCommandEvent'> when 'true' ->
	      'true'
	  %% Line 48
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 49
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxSplitterEvent'})
	end
'getSashPosition'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 56
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 58
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 57
		      call 'wxe_util':'call'
			  (3462, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSashPosition',1}}] )
	    -| ['compiler_generated'] )
	end
'getX'/1 =
    %% Line 63
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 64
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 66
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 65
		      call 'wxe_util':'call'
			  (3463, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getX',1}}] )
	    -| ['compiler_generated'] )
	end
'getY'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 72
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 74
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 73
		      call 'wxe_util':'call'
			  (3464, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getY',1}}] )
	    -| ['compiler_generated'] )
	end
'getWindowBeingRemoved'/1 =
    %% Line 79
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 80
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 82
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 81
		      call 'wxe_util':'call'
			  (3465, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getWindowBeingRemoved',1}}] )
	    -| ['compiler_generated'] )
	end
'setSashPosition'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 88
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 89
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxSplitterEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxSplitterEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 91
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 90
		      call 'wxe_util':'cast'
			  (3466, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSashPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'veto'/1 =
    %% Line 95
    fun (_cor0) ->
	call 'wxNotifyEvent':'veto'
	    (_cor0)
'isAllowed'/1 =
    %% Line 97
    fun (_cor0) ->
	call 'wxNotifyEvent':'isAllowed'
	    (_cor0)
'allow'/1 =
    %% Line 99
    fun (_cor0) ->
	call 'wxNotifyEvent':'allow'
	    (_cor0)
'setString'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setString'
	    (_cor1, _cor0)
'setInt'/2 =
    %% Line 104
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setInt'
	    (_cor1, _cor0)
'isSelection'/1 =
    %% Line 106
    fun (_cor0) ->
	call 'wxCommandEvent':'isSelection'
	    (_cor0)
'isChecked'/1 =
    %% Line 108
    fun (_cor0) ->
	call 'wxCommandEvent':'isChecked'
	    (_cor0)
'getString'/1 =
    %% Line 110
    fun (_cor0) ->
	call 'wxCommandEvent':'getString'
	    (_cor0)
'getSelection'/1 =
    %% Line 112
    fun (_cor0) ->
	call 'wxCommandEvent':'getSelection'
	    (_cor0)
'getInt'/1 =
    %% Line 114
    fun (_cor0) ->
	call 'wxCommandEvent':'getInt'
	    (_cor0)
'getExtraLong'/1 =
    %% Line 116
    fun (_cor0) ->
	call 'wxCommandEvent':'getExtraLong'
	    (_cor0)
'getClientData'/1 =
    %% Line 118
    fun (_cor0) ->
	call 'wxCommandEvent':'getClientData'
	    (_cor0)
'stopPropagation'/1 =
    %% Line 121
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 125
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 127
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 131
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 133
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 135
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 137
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxSplitterEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxSplitterEvent', _cor0)
end