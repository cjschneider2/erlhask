module 'wxGraphicsPath' ['addArc'/6,
			 'addArc'/7,
			 'addArcToPoint'/6,
			 'addCircle'/4,
			 'addCurveToPoint'/4,
			 'addCurveToPoint'/7,
			 'addEllipse'/5,
			 'addLineToPoint'/2,
			 'addLineToPoint'/3,
			 'addPath'/2,
			 'addQuadCurveToPoint'/5,
			 'addRectangle'/5,
			 'addRoundedRectangle'/6,
			 'closeSubpath'/1,
			 'contains'/2,
			 'contains'/3,
			 'contains'/4,
			 'getBox'/1,
			 'getCurrentPoint'/1,
			 'getRenderer'/1,
			 'isNull'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'moveToPoint'/2,
			 'moveToPoint'/3,
			 'parent_class'/1,
			 'transform'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 39
		'export_type' =
		    %% Line 39
		    [{'wxGraphicsPath',0}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'wxGraphicsPath',{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_object'}|[[]]]]},[]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'moveToPoint',2},[{'type',46,'bounded_fun',[{'type',46,'fun',[{'type',46,'product',[{'var',46,'This'}|[{'var',46,'P'}]]}|[{'atom',46,'ok'}]]}|[[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'This'}|[{'type',47,'wxGraphicsPath',[]}]]]]}|[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'P'}|[{'type',47,'tuple',[{'ann_type',47,[{'var',47,'X'}|[{'type',47,'float',[]}]]}|[{'ann_type',47,[{'var',47,'Y'}|[{'type',47,'float',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 55
		'spec' =
		    %% Line 55
		    [{{'moveToPoint',3},[{'type',55,'bounded_fun',[{'type',55,'fun',[{'type',55,'product',[{'var',55,'This'}|[{'var',55,'X'}|[{'var',55,'Y'}]]]}|[{'atom',55,'ok'}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'This'}|[{'type',56,'wxGraphicsPath',[]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'X'}|[{'type',56,'number',[]}]]]]}|[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Y'}|[{'type',56,'number',[]}]]]]}]]]]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'addArc',6},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'This'}|[{'var',64,'C'}|[{'var',64,'R'}|[{'var',64,'StartAngle'}|[{'var',64,'EndAngle'}|[{'var',64,'Clockwise'}]]]]]]}|[{'atom',64,'ok'}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'This'}|[{'type',65,'wxGraphicsPath',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'C'}|[{'type',65,'tuple',[{'ann_type',65,[{'var',65,'X'}|[{'type',65,'float',[]}]]}|[{'ann_type',65,[{'var',65,'Y'}|[{'type',65,'float',[]}]]}]]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'R'}|[{'type',65,'number',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'StartAngle'}|[{'type',65,'number',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'EndAngle'}|[{'type',65,'number',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Clockwise'}|[{'type',65,'boolean',[]}]]]]}]]]]]]]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'addArc',7},[{'type',73,'bounded_fun',[{'type',73,'fun',[{'type',73,'product',[{'var',73,'This'}|[{'var',73,'X'}|[{'var',73,'Y'}|[{'var',73,'R'}|[{'var',73,'StartAngle'}|[{'var',73,'EndAngle'}|[{'var',73,'Clockwise'}]]]]]]]}|[{'atom',73,'ok'}]]}|[[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'This'}|[{'type',74,'wxGraphicsPath',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'X'}|[{'type',74,'number',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Y'}|[{'type',74,'number',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'R'}|[{'type',74,'number',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'StartAngle'}|[{'type',74,'number',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'EndAngle'}|[{'type',74,'number',[]}]]]]}|[{'type',74,'constraint',[{'atom',74,'is_subtype'}|[[{'var',74,'Clockwise'}|[{'type',74,'boolean',[]}]]]]}]]]]]]]]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'addArcToPoint',6},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[{'var',82,'This'}|[{'var',82,'X1'}|[{'var',82,'Y1'}|[{'var',82,'X2'}|[{'var',82,'Y2'}|[{'var',82,'R'}]]]]]]}|[{'atom',82,'ok'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'This'}|[{'type',83,'wxGraphicsPath',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'X1'}|[{'type',83,'number',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Y1'}|[{'type',83,'number',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'X2'}|[{'type',83,'number',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Y2'}|[{'type',83,'number',[]}]]]]}|[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'R'}|[{'type',83,'number',[]}]]]]}]]]]]]]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'addCircle',4},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'This'}|[{'var',91,'X'}|[{'var',91,'Y'}|[{'var',91,'R'}]]]]}|[{'atom',91,'ok'}]]}|[[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'This'}|[{'type',92,'wxGraphicsPath',[]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'X'}|[{'type',92,'number',[]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Y'}|[{'type',92,'number',[]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'R'}|[{'type',92,'number',[]}]]]]}]]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'addCurveToPoint',4},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'This'}|[{'var',100,'C1'}|[{'var',100,'C2'}|[{'var',100,'E'}]]]]}|[{'atom',100,'ok'}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'This'}|[{'type',101,'wxGraphicsPath',[]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'C1'}|[{'type',101,'tuple',[{'ann_type',101,[{'var',101,'X'}|[{'type',101,'float',[]}]]}|[{'ann_type',101,[{'var',101,'Y'}|[{'type',101,'float',[]}]]}]]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'C2'}|[{'type',101,'tuple',[{'ann_type',101,[{'var',101,'X'}|[{'type',101,'float',[]}]]}|[{'ann_type',101,[{'var',101,'Y'}|[{'type',101,'float',[]}]]}]]}]]]]}|[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'E'}|[{'type',101,'tuple',[{'ann_type',101,[{'var',101,'X'}|[{'type',101,'float',[]}]]}|[{'ann_type',101,[{'var',101,'Y'}|[{'type',101,'float',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 109
		'spec' =
		    %% Line 109
		    [{{'addCurveToPoint',7},[{'type',109,'bounded_fun',[{'type',109,'fun',[{'type',109,'product',[{'var',109,'This'}|[{'var',109,'Cx1'}|[{'var',109,'Cy1'}|[{'var',109,'Cx2'}|[{'var',109,'Cy2'}|[{'var',109,'X'}|[{'var',109,'Y'}]]]]]]]}|[{'atom',109,'ok'}]]}|[[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'This'}|[{'type',110,'wxGraphicsPath',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Cx1'}|[{'type',110,'number',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Cy1'}|[{'type',110,'number',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Cx2'}|[{'type',110,'number',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Cy2'}|[{'type',110,'number',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'X'}|[{'type',110,'number',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Y'}|[{'type',110,'number',[]}]]]]}]]]]]]]]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'addEllipse',5},[{'type',118,'bounded_fun',[{'type',118,'fun',[{'type',118,'product',[{'var',118,'This'}|[{'var',118,'X'}|[{'var',118,'Y'}|[{'var',118,'W'}|[{'var',118,'H'}]]]]]}|[{'atom',118,'ok'}]]}|[[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'This'}|[{'type',119,'wxGraphicsPath',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'X'}|[{'type',119,'number',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Y'}|[{'type',119,'number',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'W'}|[{'type',119,'number',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'H'}|[{'type',119,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 127
		'spec' =
		    %% Line 127
		    [{{'addLineToPoint',2},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'This'}|[{'var',127,'P'}]]}|[{'atom',127,'ok'}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'This'}|[{'type',128,'wxGraphicsPath',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'P'}|[{'type',128,'tuple',[{'ann_type',128,[{'var',128,'X'}|[{'type',128,'float',[]}]]}|[{'ann_type',128,[{'var',128,'Y'}|[{'type',128,'float',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'addLineToPoint',3},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}|[{'var',136,'X'}|[{'var',136,'Y'}]]]}|[{'atom',136,'ok'}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxGraphicsPath',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'X'}|[{'type',137,'number',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Y'}|[{'type',137,'number',[]}]]]]}]]]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'addPath',2},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}|[{'var',145,'Path'}]]}|[{'atom',145,'ok'}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxGraphicsPath',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Path'}|[{'type',146,'wxGraphicsPath',[]}]]]]}]]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'addQuadCurveToPoint',5},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}|[{'var',154,'Cx'}|[{'var',154,'Cy'}|[{'var',154,'X'}|[{'var',154,'Y'}]]]]]}|[{'atom',154,'ok'}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxGraphicsPath',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Cx'}|[{'type',155,'number',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Cy'}|[{'type',155,'number',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'X'}|[{'type',155,'number',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Y'}|[{'type',155,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'addRectangle',5},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}|[{'var',163,'X'}|[{'var',163,'Y'}|[{'var',163,'W'}|[{'var',163,'H'}]]]]]}|[{'atom',163,'ok'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxGraphicsPath',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'X'}|[{'type',164,'number',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Y'}|[{'type',164,'number',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'W'}|[{'type',164,'number',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'H'}|[{'type',164,'number',[]}]]]]}]]]]]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'addRoundedRectangle',6},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'This'}|[{'var',172,'X'}|[{'var',172,'Y'}|[{'var',172,'W'}|[{'var',172,'H'}|[{'var',172,'Radius'}]]]]]]}|[{'atom',172,'ok'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'This'}|[{'type',173,'wxGraphicsPath',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'X'}|[{'type',173,'number',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Y'}|[{'type',173,'number',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'W'}|[{'type',173,'number',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'H'}|[{'type',173,'number',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Radius'}|[{'type',173,'number',[]}]]]]}]]]]]]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'closeSubpath',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'This'}]}|[{'atom',181,'ok'}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'This'}|[{'type',182,'wxGraphicsPath',[]}]]]]}]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'contains',2},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'This'}|[{'var',189,'C'}]]}|[{'type',189,'boolean',[]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'This'}|[{'type',190,'wxGraphicsPath',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'C'}|[{'type',190,'tuple',[{'ann_type',190,[{'var',190,'X'}|[{'type',190,'float',[]}]]}|[{'ann_type',190,[{'var',190,'Y'}|[{'type',190,'float',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'contains',3},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'This'}|[{'var',203,'X'}|[{'var',203,'Y'}]]]}|[{'type',203,'boolean',[]}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'This'}|[{'type',204,'wxGraphicsPath',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'X'}|[{'type',204,'number',[]}]]]]}|[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Y'}|[{'type',204,'number',[]}]]]]}]]]]]}|[{'type',205,'bounded_fun',[{'type',205,'fun',[{'type',205,'product',[{'var',205,'This'}|[{'var',205,'C'}|[{'type',205,'list',[{'var',205,'Option'}]}]]]}|[{'type',205,'boolean',[]}]]}|[[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'This'}|[{'type',206,'wxGraphicsPath',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'C'}|[{'type',206,'tuple',[{'ann_type',206,[{'var',206,'X'}|[{'type',206,'float',[]}]]}|[{'ann_type',206,[{'var',206,'Y'}|[{'type',206,'float',[]}]]}]]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Option'}|[{'type',207,'tuple',[{'atom',207,'fillStyle'}|[{'remote_type',207,[{'atom',207,'wx'}|[{'atom',207,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]}]]}],
		%% Line 223
		'spec' =
		    %% Line 223
		    [{{'contains',4},[{'type',223,'bounded_fun',[{'type',223,'fun',[{'type',223,'product',[{'var',223,'This'}|[{'var',223,'X'}|[{'var',223,'Y'}|[{'type',223,'list',[{'var',223,'Option'}]}]]]]}|[{'type',223,'boolean',[]}]]}|[[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'This'}|[{'type',224,'wxGraphicsPath',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'X'}|[{'type',224,'number',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Y'}|[{'type',224,'number',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Option'}|[{'type',225,'tuple',[{'atom',225,'fillStyle'}|[{'remote_type',225,[{'atom',225,'wx'}|[{'atom',225,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'getBox',1},[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'This'}]}|[{'type',236,'tuple',[{'ann_type',236,[{'var',236,'X'}|[{'type',236,'float',[]}]]}|[{'ann_type',236,[{'var',236,'Y'}|[{'type',236,'float',[]}]]}|[{'ann_type',236,[{'var',236,'W'}|[{'type',236,'float',[]}]]}|[{'ann_type',236,[{'var',236,'H'}|[{'type',236,'float',[]}]]}]]]]}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'This'}|[{'type',237,'wxGraphicsPath',[]}]]]]}]]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'getCurrentPoint',1},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'This'}]}|[{'type',244,'tuple',[{'ann_type',244,[{'var',244,'X'}|[{'type',244,'float',[]}]]}|[{'ann_type',244,[{'var',244,'Y'}|[{'type',244,'float',[]}]]}]]}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'This'}|[{'type',245,'wxGraphicsPath',[]}]]]]}]]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'transform',2},[{'type',252,'bounded_fun',[{'type',252,'fun',[{'type',252,'product',[{'var',252,'This'}|[{'var',252,'Matrix'}]]}|[{'atom',252,'ok'}]]}|[[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'This'}|[{'type',253,'wxGraphicsPath',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Matrix'}|[{'remote_type',253,[{'atom',253,'wxGraphicsMatrix'}|[{'atom',253,'wxGraphicsMatrix'}|[[]]]]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 41
    fun (_cor0) ->
	case _cor0 of
	  <'wxGraphicsObject'> when 'true' ->
	      'true'
	  %% Line 42
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGraphicsPath'})
	end
'moveToPoint'/2 =
    %% Line 48
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PX,PY}>
	      when let <_cor2> =
		    %% Line 49
		    call 'erlang':'is_number'
			(PX)
		in  let <_cor3> =
			%% Line 49
			call 'erlang':'is_number'
			    (PY)
		    in  %% Line 49
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 50
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 52
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<PX>(64,1,'float',['unsigned'|['native']]),
			#<PY>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 51
		      call 'wxe_util':'cast'
			  (817, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'moveToPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'moveToPoint'/3 =
    %% Line 57
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 58
		    call 'erlang':'is_number'
			(X)
		in  let <_cor4> =
			%% Line 58
			call 'erlang':'is_number'
			    (Y)
		    in  %% Line 58
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 59
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 61
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 60
		      call 'wxe_util':'cast'
			  (816, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'moveToPoint',3}}] )
	    -| ['compiler_generated'] )
	end
'addArc'/6 =
    %% Line 66
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor26},{CX,CY},R,StartAngle,EndAngle,Clockwise>
	      when %% Line 67
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (CX)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(CY)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (R)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(StartAngle)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (EndAngle)
				    in  let <_cor11> =
					    call 'erlang':'is_boolean'
						(Clockwise)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor10, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor9, _cor12)
						in  let <_cor14> =
							call 'erlang':'and'
							    (_cor8, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'and'
								(_cor7, _cor14)
							in  call 'erlang':'and'
								(_cor6, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 68
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor18> =
		      %% Line 70
		      call 'wxe_util':'from_bool'
			  (Clockwise)
		  in  let <_cor19> =
			  %% Line 70
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<0>(32,1,'integer',['unsigned'|['big']]),
			    #<CX>(64,1,'float',['unsigned'|['native']]),
			    #<CY>(64,1,'float',['unsigned'|['native']]),
			    #<R>(64,1,'float',['unsigned'|['native']]),
			    #<StartAngle>(64,1,'float',['unsigned'|['native']]),
			    #<EndAngle>(64,1,'float',['unsigned'|['native']]),
			    #<_cor18>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 69
			  call 'wxe_util':'cast'
			      (819, _cor19)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'addArc',6}}] )
	    -| ['compiler_generated'] )
	end
'addArc'/7 =
    %% Line 75
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},X,Y,R,StartAngle,EndAngle,Clockwise>
	      when %% Line 76
		try
		    let <_cor7> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor8> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor9> =
				call 'erlang':'is_number'
				    (R)
			    in  let <_cor10> =
				    call 'erlang':'is_number'
					(StartAngle)
				in  let <_cor11> =
					call 'erlang':'is_number'
					    (EndAngle)
				    in  let <_cor12> =
					    call 'erlang':'is_boolean'
						(Clockwise)
					in  let <_cor13> =
						call 'erlang':'and'
						    (_cor11, _cor12)
					    in  let <_cor14> =
						    call 'erlang':'and'
							(_cor10, _cor13)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor9, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor8, _cor15)
							in  call 'erlang':'and'
								(_cor7, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 77
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor19> =
		      %% Line 79
		      call 'wxe_util':'from_bool'
			  (Clockwise)
		  in  let <_cor20> =
			  %% Line 79
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<0>(32,1,'integer',['unsigned'|['big']]),
			    #<X>(64,1,'float',['unsigned'|['native']]),
			    #<Y>(64,1,'float',['unsigned'|['native']]),
			    #<R>(64,1,'float',['unsigned'|['native']]),
			    #<StartAngle>(64,1,'float',['unsigned'|['native']]),
			    #<EndAngle>(64,1,'float',['unsigned'|['native']]),
			    #<_cor19>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 78
			  call 'wxe_util':'cast'
			      (818, _cor20)
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'addArc',7}}] )
	    -| ['compiler_generated'] )
	end
'addArcToPoint'/6 =
    %% Line 84
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X1,Y1,X2,Y2,R>
	      when %% Line 85
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (X1)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(Y1)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (X2)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(Y2)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (R)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 86
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 88
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X1>(64,1,'float',['unsigned'|['native']]),
			#<Y1>(64,1,'float',['unsigned'|['native']]),
			#<X2>(64,1,'float',['unsigned'|['native']]),
			#<Y2>(64,1,'float',['unsigned'|['native']]),
			#<R>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 87
		      call 'wxe_util':'cast'
			  (820, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'addArcToPoint',6}}] )
	    -| ['compiler_generated'] )
	end
'addCircle'/4 =
    %% Line 93
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},X,Y,R>
	      when %% Line 94
		try
		    let <_cor4> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_number'
				    (R)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 95
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 97
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<R>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 96
		      call 'wxe_util':'cast'
			  (821, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'addCircle',4}}] )
	    -| ['compiler_generated'] )
	end
'addCurveToPoint'/4 =
    %% Line 102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor21},{C1X,C1Y},{C2X,C2Y},{EX,EY}>
	      when %% Line 103
		try
		    let <_cor4> =
			call 'erlang':'is_number'
			    (C1X)
		    in  let <_cor5> =
			    call 'erlang':'is_number'
				(C1Y)
			in  let <_cor6> =
				call 'erlang':'is_number'
				    (C2X)
			    in  let <_cor7> =
				    call 'erlang':'is_number'
					(C2Y)
				in  let <_cor8> =
					call 'erlang':'is_number'
					    (EX)
				    in  let <_cor9> =
					    call 'erlang':'is_number'
						(EY)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor8, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor7, _cor10)
						in  let <_cor12> =
							call 'erlang':'and'
							    (_cor6, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'and'
								(_cor5, _cor12)
							in  call 'erlang':'and'
								(_cor4, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 104
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 106
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<C1X>(64,1,'float',['unsigned'|['native']]),
			#<C1Y>(64,1,'float',['unsigned'|['native']]),
			#<C2X>(64,1,'float',['unsigned'|['native']]),
			#<C2Y>(64,1,'float',['unsigned'|['native']]),
			#<EX>(64,1,'float',['unsigned'|['native']]),
			#<EY>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 105
		      call 'wxe_util':'cast'
			  (823, _cor16)
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'addCurveToPoint',4}}] )
	    -| ['compiler_generated'] )
	end
'addCurveToPoint'/7 =
    %% Line 111
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor27},Cx1,Cy1,Cx2,Cy2,X,Y>
	      when %% Line 112
		try
		    let <_cor7> =
			call 'erlang':'is_number'
			    (Cx1)
		    in  let <_cor8> =
			    call 'erlang':'is_number'
				(Cy1)
			in  let <_cor9> =
				call 'erlang':'is_number'
				    (Cx2)
			    in  let <_cor10> =
				    call 'erlang':'is_number'
					(Cy2)
				in  let <_cor11> =
					call 'erlang':'is_number'
					    (X)
				    in  let <_cor12> =
					    call 'erlang':'is_number'
						(Y)
					in  let <_cor13> =
						call 'erlang':'and'
						    (_cor11, _cor12)
					    in  let <_cor14> =
						    call 'erlang':'and'
							(_cor10, _cor13)
						in  let <_cor15> =
							call 'erlang':'and'
							    (_cor9, _cor14)
						    in  let <_cor16> =
							    call 'erlang':'and'
								(_cor8, _cor15)
							in  call 'erlang':'and'
								(_cor7, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 113
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor19> =
		      %% Line 115
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Cx1>(64,1,'float',['unsigned'|['native']]),
			#<Cy1>(64,1,'float',['unsigned'|['native']]),
			#<Cx2>(64,1,'float',['unsigned'|['native']]),
			#<Cy2>(64,1,'float',['unsigned'|['native']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 114
		      call 'wxe_util':'cast'
			  (822, _cor19)
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'addCurveToPoint',7}}] )
	    -| ['compiler_generated'] )
	end
'addEllipse'/5 =
    %% Line 120
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 121
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 122
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 124
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 123
		      call 'wxe_util':'cast'
			  (824, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'addEllipse',5}}] )
	    -| ['compiler_generated'] )
	end
'addLineToPoint'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{PX,PY}>
	      when let <_cor2> =
		    %% Line 130
		    call 'erlang':'is_number'
			(PX)
		in  let <_cor3> =
			%% Line 130
			call 'erlang':'is_number'
			    (PY)
		    in  %% Line 130
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 133
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<PX>(64,1,'float',['unsigned'|['native']]),
			#<PY>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 132
		      call 'wxe_util':'cast'
			  (826, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'addLineToPoint',2}}] )
	    -| ['compiler_generated'] )
	end
'addLineToPoint'/3 =
    %% Line 138
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},X,Y>
	      when let <_cor3> =
		    %% Line 139
		    call 'erlang':'is_number'
			(X)
		in  let <_cor4> =
			%% Line 139
			call 'erlang':'is_number'
			    (Y)
		    in  %% Line 139
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 142
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 141
		      call 'wxe_util':'cast'
			  (825, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'addLineToPoint',3}}] )
	    -| ['compiler_generated'] )
	end
'addPath'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',PathRef,PathT,_cor10}> when 'true' ->
	      do  %% Line 148
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 149
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PathT,
				       'wxGraphicsPath') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PathT:'parent_class'
				    ('wxGraphicsPath')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 151
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<PathRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 150
			  call 'wxe_util':'cast'
			      (827, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'addPath',2}}] )
	    -| ['compiler_generated'] )
	end
'addQuadCurveToPoint'/5 =
    %% Line 156
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Cx,Cy,X,Y>
	      when %% Line 157
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (Cx)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Cy)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (X)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(Y)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 158
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 160
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<Cx>(64,1,'float',['unsigned'|['native']]),
			#<Cy>(64,1,'float',['unsigned'|['native']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 159
		      call 'wxe_util':'cast'
			  (828, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'addQuadCurveToPoint',5}}] )
	    -| ['compiler_generated'] )
	end
'addRectangle'/5 =
    %% Line 165
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},X,Y,W,H>
	      when %% Line 166
		try
		    let <_cor5> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor6> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor7> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor8> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 167
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 169
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 168
		      call 'wxe_util':'cast'
			  (829, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'addRectangle',5}}] )
	    -| ['compiler_generated'] )
	end
'addRoundedRectangle'/6 =
    %% Line 174
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,W,H,Radius>
	      when %% Line 175
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor8> =
				call 'erlang':'is_number'
				    (W)
			    in  let <_cor9> =
				    call 'erlang':'is_number'
					(H)
				in  let <_cor10> =
					call 'erlang':'is_number'
					    (Radius)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 176
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor16> =
		      %% Line 178
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<0>(32,1,'integer',['unsigned'|['big']]),
			#<X>(64,1,'float',['unsigned'|['native']]),
			#<Y>(64,1,'float',['unsigned'|['native']]),
			#<W>(64,1,'float',['unsigned'|['native']]),
			#<H>(64,1,'float',['unsigned'|['native']]),
			#<Radius>(64,1,'float',['unsigned'|['native']])}#
		  in  %% Line 177
		      call 'wxe_util':'cast'
			  (830, _cor16)
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'addRoundedRectangle',6}}] )
	    -| ['compiler_generated'] )
	end
'closeSubpath'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 184
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 186
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 185
		      call 'wxe_util':'cast'
			  (831, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'closeSubpath',1}}] )
	    -| ['compiler_generated'] )
	end
'contains'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},C = {CX,CY}>
	      when let <_cor2> =
		    %% Line 193
		    call 'erlang':'is_number'
			(CX)
		in  let <_cor3> =
			%% Line 193
			call 'erlang':'is_number'
			    (CY)
		    in  %% Line 193
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 194
	      apply 'contains'/3
		  (This, C, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'contains',2}}] )
	    -| ['compiler_generated'] )
	end
'contains'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor24,_cor25,_cor26},X,Y>
	      when let <_cor3> =
		    %% Line 210
		    call 'erlang':'is_number'
			(X)
		in  let <_cor4> =
			%% Line 210
			call 'erlang':'is_number'
			    (Y)
		    in  %% Line 210
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 211
	      apply 'contains'/4
		  (This, X, Y, [])
	  %% Line 212
	  <{'wx_ref',ThisRef,ThisT,_cor27},{CX,CY},Options>
	      when %% Line 213
		try
		    let <_cor6> =
			call 'erlang':'is_number'
			    (CX)
		    in  let <_cor7> =
			    call 'erlang':'is_number'
				(CY)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 215
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'fillStyle',FillStyle},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 216
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-contains/3-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 217
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 217
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 219
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<CX>(64,1,'float',['unsigned'|['native']]),
				    #<CY>(64,1,'float',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 218
				  call 'wxe_util':'call'
				      (833, _cor20)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'contains',3}}] )
	    -| ['compiler_generated'] )
	end
'contains'/4 =
    %% Line 226
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},X,Y,Options>
	      when %% Line 227
		try
		    let <_cor4> =
			call 'erlang':'is_number'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_number'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 228
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 229
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'fillStyle',FillStyle},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<FillStyle>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 230
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-contains/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 231
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 231
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 233
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<X>(64,1,'float',['unsigned'|['native']]),
				    #<Y>(64,1,'float',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 232
				  call 'wxe_util':'call'
				      (832, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'contains',4}}] )
	    -| ['compiler_generated'] )
	end
'getBox'/1 =
    %% Line 238
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 239
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 241
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 240
		      call 'wxe_util':'call'
			  (835, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBox',1}}] )
	    -| ['compiler_generated'] )
	end
'getCurrentPoint'/1 =
    %% Line 246
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 247
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 249
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 248
		      call 'wxe_util':'call'
			  (837, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getCurrentPoint',1}}] )
	    -| ['compiler_generated'] )
	end
'transform'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',MatrixRef,MatrixT,_cor10}> when 'true' ->
	      do  %% Line 255
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGraphicsPath') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGraphicsPath')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 256
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (MatrixT,
				       'wxGraphicsMatrix') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call MatrixT:'parent_class'
				    ('wxGraphicsMatrix')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 258
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<MatrixRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 257
			  call 'wxe_util':'cast'
			      (838, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'transform',2}}] )
	    -| ['compiler_generated'] )
	end
'isNull'/1 =
    %% Line 262
    fun (_cor0) ->
	call 'wxGraphicsObject':'isNull'
	    (_cor0)
'getRenderer'/1 =
    %% Line 264
    fun (_cor0) ->
	call 'wxGraphicsObject':'getRenderer'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsPath')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGraphicsPath', _cor0)
end