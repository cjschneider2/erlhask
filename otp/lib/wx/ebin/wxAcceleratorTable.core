module 'wxAcceleratorTable' ['destroy'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'new'/0,
			     'new'/2,
			     'ok'/1,
			     'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxAcceleratorTable',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxAcceleratorTable',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'new',0},[{'type',38,'fun',[{'type',38,'product',[]}|[{'type',38,'wxAcceleratorTable',[]}]]}]}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'new',2},[{'type',44,'bounded_fun',[{'type',44,'fun',[{'type',44,'product',[{'var',44,'N'}|[{'var',44,'Entries'}]]}|[{'type',44,'wxAcceleratorTable',[]}]]}|[[{'type',45,'constraint',[{'atom',45,'is_subtype'}|[[{'var',45,'N'}|[{'type',45,'integer',[]}]]]]}|[{'type',45,'constraint',[{'atom',45,'is_subtype'}|[[{'var',45,'Entries'}|[{'type',45,'list',[{'remote_type',45,[{'atom',45,'wxAcceleratorEntry'}|[{'atom',45,'wxAcceleratorEntry'}|[[]]]]}]}]]]]}]]]]}]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'ok',1},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'This'}]}|[{'type',54,'boolean',[]}]]}|[[{'type',55,'constraint',[{'atom',55,'is_subtype'}|[[{'var',55,'This'}|[{'type',55,'wxAcceleratorTable',[]}]]]]}]]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'destroy',1},[{'type',62,'fun',[{'type',62,'product',[{'ann_type',62,[{'var',62,'This'}|[{'type',62,'wxAcceleratorTable',[]}]]}]}|[{'atom',62,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxAcceleratorTable'})
'new'/0 =
    %% Line 39
    fun () ->
	%% Line 40
	call 'wxe_util':'construct'
	    (1213, %% Line 41
		   #{}#)
'new'/2 =
    %% Line 46
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,Entries>
	      when let <_cor2> =
		    %% Line 47
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			%% Line 47
			call 'erlang':'is_list'
			    (Entries)
		    in  %% Line 47
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 48
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{'wx_ref',_cor29,EntriesT,_cor30}|_cor5]> when 'true' ->
				      do  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (EntriesT,
							   'wxAcceleratorEntry') ->
						    'ok'
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    call EntriesT:'parent_class'
							('wxAcceleratorEntry')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
					  apply 'lc$^0'/1
					      (_cor5)
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Entries)
		    -| ['list_comprehension'] )
		  let <_cor25> =
		      %% Line 50
		      call 'erlang':'length'
			  (Entries)
		  in  let <_cor17> =
			  %% Line 51
			  call 'erlang':'length'
			      (Entries)
		      in  let <_cor16> =
			      call 'erlang':'*'
				  (_cor17, 4)
			  in  let <_cor15> =
				  primop 'bs_init_writable'
				      (_cor16)
			      in  let <_cor24> =
				      %% Line 51
				      ( letrec
					    'lbc$^1'/2 =
						fun (_cor21,_cor20) ->
						    case <_cor21,_cor20> of
						      <[C|_cor19],_cor20> when 'true' ->
							  ( case C of
							      ( <( {'wx_ref',_rec0,_cor31,_cor32}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor20> =
									( #{#<_cor20>('all',1,'binary',[]),
									    #<_rec0>(32,1,'integer',['unsigned'|['native']])}#
									  -| ['compiler_generated','single_use'] )
								    in  apply 'lbc$^1'/2
									    (_cor19, _cor20)
								-| ['compiler_generated'] )
							      ( <_cor33> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','wx_ref'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <[],_cor20> when 'true' ->
							  _cor20
						      ( <_cor21,_cor20> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor21,_cor20})
							      -| [{'function_name',{'lbc$^1',2}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lbc$^1'/2
						(Entries, _cor15)
					-| ['list_comprehension'] )
				  in  let <_cor11> =
					  %% Line 51
					  call 'erlang':'length'
					      (Entries)
				      in  let <_cor12> =
					      %% Line 51
					      call 'erlang':'+'
						  (0, _cor11)
					  in  let <_cor13> =
						  %% Line 51
						  call 'erlang':'rem'
						      (_cor12, 2)
					      in  let <_cor14> =
						      %% Line 51
						      call 'erlang':'*'
							  (_cor13, 32)
						  in  let <_cor26> =
							  %% Line 50
							  #{#<N>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor25>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor24>(%% Line 51
								      'all',8,'binary',['unsigned'|['big']]),
							    #<%% Line 51
							      0>(_cor14,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 49
							  call 'wxe_util':'construct'
							      (1214, _cor26)
	  ( <_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 56
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 57
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxAcceleratorTable') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxAcceleratorTable')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 59
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 58
		      call 'wxe_util':'call'
			  (1216, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ok',1}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 63
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 64
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxAcceleratorTable') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxAcceleratorTable')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 65
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 66
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxAcceleratorTable')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxAcceleratorTable', _cor0)
end