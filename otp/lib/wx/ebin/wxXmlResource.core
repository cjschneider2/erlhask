module 'wxXmlResource' ['attachUnknownControl'/3,
			'attachUnknownControl'/4,
			'clearHandlers'/1,
			'compareVersion'/5,
			'destroy'/1,
			'get'/0,
			'getFlags'/1,
			'getVersion'/1,
			'getXRCID'/1,
			'getXRCID'/2,
			'initAllHandlers'/1,
			'load'/2,
			'loadBitmap'/2,
			'loadDialog'/3,
			'loadDialog'/4,
			'loadFrame'/3,
			'loadFrame'/4,
			'loadIcon'/2,
			'loadMenu'/2,
			'loadMenuBar'/2,
			'loadMenuBar'/3,
			'loadPanel'/3,
			'loadPanel'/4,
			'loadToolBar'/3,
			'module_info'/0,
			'module_info'/1,
			'new'/0,
			'new'/1,
			'new'/2,
			'parent_class'/1,
			'set'/1,
			'setFlags'/2,
			'unload'/2,
			'xrcctrl'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 37
		'export_type' =
		    %% Line 37
		    [{'wxXmlResource',0}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'wxXmlResource',{'remote_type',41,[{'atom',41,'wx'}|[{'atom',41,'wx_object'}|[[]]]]},[]}],
		%% Line 43
		'spec' =
		    %% Line 43
		    [{{'new',0},[{'type',43,'fun',[{'type',43,'product',[]}|[{'type',43,'wxXmlResource',[]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'new',1},[{'type',49,'bounded_fun',[{'type',49,'fun',[{'type',49,'product',[{'type',49,'list',[{'var',49,'Option'}]}]}|[{'type',49,'wxXmlResource',[]}]]}|[[{'type',50,'constraint',[{'atom',50,'is_subtype'}|[[{'var',50,'Option'}|[{'type',50,'union',[{'type',50,'tuple',[{'atom',50,'flags'}|[{'type',50,'integer',[]}]]}|[{'type',51,'tuple',[{'atom',51,'domain'}|[{'remote_type',51,[{'atom',51,'unicode'}|[{'atom',51,'chardata'}|[[]]]]}]]}]]}]]]]}]]]}]}],
		%% Line 62
		'spec' =
		    %% Line 62
		    [{{'new',2},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'Filemask'}|[{'type',62,'list',[{'var',62,'Option'}]}]]}|[{'type',62,'wxXmlResource',[]}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Filemask'}|[{'remote_type',63,[{'atom',63,'unicode'}|[{'atom',63,'chardata'}|[[]]]]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Option'}|[{'type',64,'union',[{'type',64,'tuple',[{'atom',64,'flags'}|[{'type',64,'integer',[]}]]}|[{'type',65,'tuple',[{'atom',65,'domain'}|[{'remote_type',65,[{'atom',65,'unicode'}|[{'atom',65,'chardata'}|[[]]]]}]]}]]}]]]]}]]]]}]}],
		%% Line 77
		'spec' =
		    %% Line 77
		    [{{'attachUnknownControl',3},[{'type',77,'bounded_fun',[{'type',77,'fun',[{'type',77,'product',[{'var',77,'This'}|[{'var',77,'Name'}|[{'var',77,'Control'}]]]}|[{'type',77,'boolean',[]}]]}|[[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'This'}|[{'type',78,'wxXmlResource',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Name'}|[{'remote_type',78,[{'atom',78,'unicode'}|[{'atom',78,'chardata'}|[[]]]]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'Control'}|[{'remote_type',78,[{'atom',78,'wxWindow'}|[{'atom',78,'wxWindow'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 85
		'spec' =
		    %% Line 85
		    [{{'attachUnknownControl',4},[{'type',85,'bounded_fun',[{'type',85,'fun',[{'type',85,'product',[{'var',85,'This'}|[{'var',85,'Name'}|[{'var',85,'Control'}|[{'type',85,'list',[{'var',85,'Option'}]}]]]]}|[{'type',85,'boolean',[]}]]}|[[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'This'}|[{'type',86,'wxXmlResource',[]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Name'}|[{'remote_type',86,[{'atom',86,'unicode'}|[{'atom',86,'chardata'}|[[]]]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'Control'}|[{'remote_type',86,[{'atom',86,'wxWindow'}|[{'atom',86,'wxWindow'}|[[]]]]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Option'}|[{'type',87,'tuple',[{'atom',87,'parent'}|[{'remote_type',87,[{'atom',87,'wxWindow'}|[{'atom',87,'wxWindow'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'clearHandlers',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'This'}]}|[{'atom',100,'ok'}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'This'}|[{'type',101,'wxXmlResource',[]}]]]]}]]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'compareVersion',5},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'This'}|[{'var',108,'Major'}|[{'var',108,'Minor'}|[{'var',108,'Release'}|[{'var',108,'Revision'}]]]]]}|[{'type',108,'integer',[]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'This'}|[{'type',109,'wxXmlResource',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Major'}|[{'type',109,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Minor'}|[{'type',109,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Release'}|[{'type',109,'integer',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Revision'}|[{'type',109,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'get',0},[{'type',117,'fun',[{'type',117,'product',[]}|[{'type',117,'wxXmlResource',[]}]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'getFlags',1},[{'type',123,'bounded_fun',[{'type',123,'fun',[{'type',123,'product',[{'var',123,'This'}]}|[{'type',123,'integer',[]}]]}|[[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'This'}|[{'type',124,'wxXmlResource',[]}]]]]}]]]}]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'getVersion',1},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'This'}]}|[{'type',131,'integer',[]}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'This'}|[{'type',132,'wxXmlResource',[]}]]]]}]]]}]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'getXRCID',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'Str_id'}]}|[{'type',139,'integer',[]}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Str_id'}|[{'type',140,'list',[{'remote_type',140,[{'atom',140,'unicode'}|[{'atom',140,'chardata'}|[[]]]]}]}]]]]}]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'getXRCID',2},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'Str_id'}|[{'type',147,'list',[{'var',147,'Option'}]}]]}|[{'type',147,'integer',[]}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Str_id'}|[{'type',148,'list',[{'remote_type',148,[{'atom',148,'unicode'}|[{'atom',148,'chardata'}|[[]]]]}]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'Option'}|[{'type',149,'tuple',[{'atom',149,'value_if_not_found'}|[{'type',149,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'initAllHandlers',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'This'}]}|[{'atom',160,'ok'}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'This'}|[{'type',161,'wxXmlResource',[]}]]]]}]]]}]}],
		%% Line 168
		'spec' =
		    %% Line 168
		    [{{'load',2},[{'type',168,'bounded_fun',[{'type',168,'fun',[{'type',168,'product',[{'var',168,'This'}|[{'var',168,'Filemask'}]]}|[{'type',168,'boolean',[]}]]}|[[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'This'}|[{'type',169,'wxXmlResource',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Filemask'}|[{'remote_type',169,[{'atom',169,'unicode'}|[{'atom',169,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'loadBitmap',2},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'This'}|[{'var',178,'Name'}]]}|[{'remote_type',178,[{'atom',178,'wxBitmap'}|[{'atom',178,'wxBitmap'}|[[]]]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'This'}|[{'type',179,'wxXmlResource',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Name'}|[{'remote_type',179,[{'atom',179,'unicode'}|[{'atom',179,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 188
		'spec' =
		    %% Line 188
		    [{{'loadDialog',3},[{'type',188,'bounded_fun',[{'type',188,'fun',[{'type',188,'product',[{'var',188,'This'}|[{'var',188,'Parent'}|[{'var',188,'Name'}]]]}|[{'remote_type',188,[{'atom',188,'wxDialog'}|[{'atom',188,'wxDialog'}|[[]]]]}]]}|[[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'This'}|[{'type',189,'wxXmlResource',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Parent'}|[{'remote_type',189,[{'atom',189,'wxWindow'}|[{'atom',189,'wxWindow'}|[[]]]]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'Name'}|[{'remote_type',189,[{'atom',189,'unicode'}|[{'atom',189,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'loadDialog',4},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'This'}|[{'var',199,'Dlg'}|[{'var',199,'Parent'}|[{'var',199,'Name'}]]]]}|[{'type',199,'boolean',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'This'}|[{'type',200,'wxXmlResource',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Dlg'}|[{'remote_type',200,[{'atom',200,'wxDialog'}|[{'atom',200,'wxDialog'}|[[]]]]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Parent'}|[{'remote_type',200,[{'atom',200,'wxWindow'}|[{'atom',200,'wxWindow'}|[[]]]]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Name'}|[{'remote_type',200,[{'atom',200,'unicode'}|[{'atom',200,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'loadFrame',3},[{'type',211,'bounded_fun',[{'type',211,'fun',[{'type',211,'product',[{'var',211,'This'}|[{'var',211,'Parent'}|[{'var',211,'Name'}]]]}|[{'remote_type',211,[{'atom',211,'wxFrame'}|[{'atom',211,'wxFrame'}|[[]]]]}]]}|[[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'This'}|[{'type',212,'wxXmlResource',[]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Parent'}|[{'remote_type',212,[{'atom',212,'wxWindow'}|[{'atom',212,'wxWindow'}|[[]]]]}]]]]}|[{'type',212,'constraint',[{'atom',212,'is_subtype'}|[[{'var',212,'Name'}|[{'remote_type',212,[{'atom',212,'unicode'}|[{'atom',212,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'loadFrame',4},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'This'}|[{'var',222,'Frame'}|[{'var',222,'Parent'}|[{'var',222,'Name'}]]]]}|[{'type',222,'boolean',[]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'This'}|[{'type',223,'wxXmlResource',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Frame'}|[{'remote_type',223,[{'atom',223,'wxFrame'}|[{'atom',223,'wxFrame'}|[[]]]]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Parent'}|[{'remote_type',223,[{'atom',223,'wxWindow'}|[{'atom',223,'wxWindow'}|[[]]]]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Name'}|[{'remote_type',223,[{'atom',223,'unicode'}|[{'atom',223,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'loadIcon',2},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'This'}|[{'var',234,'Name'}]]}|[{'remote_type',234,[{'atom',234,'wxIcon'}|[{'atom',234,'wxIcon'}|[[]]]]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'This'}|[{'type',235,'wxXmlResource',[]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'Name'}|[{'remote_type',235,[{'atom',235,'unicode'}|[{'atom',235,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'loadMenu',2},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'This'}|[{'var',244,'Name'}]]}|[{'remote_type',244,[{'atom',244,'wxMenu'}|[{'atom',244,'wxMenu'}|[[]]]]}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'This'}|[{'type',245,'wxXmlResource',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Name'}|[{'remote_type',245,[{'atom',245,'unicode'}|[{'atom',245,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'loadMenuBar',2},[{'type',254,'bounded_fun',[{'type',254,'fun',[{'type',254,'product',[{'var',254,'This'}|[{'var',254,'Name'}]]}|[{'remote_type',254,[{'atom',254,'wxMenuBar'}|[{'atom',254,'wxMenuBar'}|[[]]]]}]]}|[[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'This'}|[{'type',255,'wxXmlResource',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Name'}|[{'remote_type',255,[{'atom',255,'unicode'}|[{'atom',255,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'loadMenuBar',3},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'This'}|[{'var',264,'Parent'}|[{'var',264,'Name'}]]]}|[{'remote_type',264,[{'atom',264,'wxMenuBar'}|[{'atom',264,'wxMenuBar'}|[[]]]]}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'This'}|[{'type',265,'wxXmlResource',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Parent'}|[{'remote_type',265,[{'atom',265,'wxWindow'}|[{'atom',265,'wxWindow'}|[[]]]]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Name'}|[{'remote_type',265,[{'atom',265,'unicode'}|[{'atom',265,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'loadPanel',3},[{'type',275,'bounded_fun',[{'type',275,'fun',[{'type',275,'product',[{'var',275,'This'}|[{'var',275,'Parent'}|[{'var',275,'Name'}]]]}|[{'remote_type',275,[{'atom',275,'wxPanel'}|[{'atom',275,'wxPanel'}|[[]]]]}]]}|[[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'This'}|[{'type',276,'wxXmlResource',[]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Parent'}|[{'remote_type',276,[{'atom',276,'wxWindow'}|[{'atom',276,'wxWindow'}|[[]]]]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Name'}|[{'remote_type',276,[{'atom',276,'unicode'}|[{'atom',276,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'loadPanel',4},[{'type',286,'bounded_fun',[{'type',286,'fun',[{'type',286,'product',[{'var',286,'This'}|[{'var',286,'Panel'}|[{'var',286,'Parent'}|[{'var',286,'Name'}]]]]}|[{'type',286,'boolean',[]}]]}|[[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'This'}|[{'type',287,'wxXmlResource',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Panel'}|[{'remote_type',287,[{'atom',287,'wxPanel'}|[{'atom',287,'wxPanel'}|[[]]]]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Parent'}|[{'remote_type',287,[{'atom',287,'wxWindow'}|[{'atom',287,'wxWindow'}|[[]]]]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Name'}|[{'remote_type',287,[{'atom',287,'unicode'}|[{'atom',287,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'loadToolBar',3},[{'type',298,'bounded_fun',[{'type',298,'fun',[{'type',298,'product',[{'var',298,'This'}|[{'var',298,'Parent'}|[{'var',298,'Name'}]]]}|[{'remote_type',298,[{'atom',298,'wxToolBar'}|[{'atom',298,'wxToolBar'}|[[]]]]}]]}|[[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'This'}|[{'type',299,'wxXmlResource',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Parent'}|[{'remote_type',299,[{'atom',299,'wxWindow'}|[{'atom',299,'wxWindow'}|[[]]]]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Name'}|[{'remote_type',299,[{'atom',299,'unicode'}|[{'atom',299,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'set',1},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'Res'}]}|[{'type',309,'wxXmlResource',[]}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Res'}|[{'type',310,'wxXmlResource',[]}]]]]}]]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'setFlags',2},[{'type',317,'bounded_fun',[{'type',317,'fun',[{'type',317,'product',[{'var',317,'This'}|[{'var',317,'Flags'}]]}|[{'atom',317,'ok'}]]}|[[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'This'}|[{'type',318,'wxXmlResource',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'Flags'}|[{'type',318,'integer',[]}]]]]}]]]]}]}],
		%% Line 326
		'spec' =
		    %% Line 326
		    [{{'unload',2},[{'type',326,'bounded_fun',[{'type',326,'fun',[{'type',326,'product',[{'var',326,'This'}|[{'var',326,'Filename'}]]}|[{'type',326,'boolean',[]}]]}|[[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'This'}|[{'type',327,'wxXmlResource',[]}]]]]}|[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Filename'}|[{'remote_type',327,[{'atom',327,'unicode'}|[{'atom',327,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'destroy',1},[{'type',355,'fun',[{'type',355,'product',[{'ann_type',355,[{'var',355,'This'}|[{'type',355,'wxXmlResource',[]}]]}]}|[{'atom',355,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 39
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxXmlResource'})
'new'/0 =
    %% Line 45
    fun () ->
	%% Line 46
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 52
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 53
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 54
		  ( fun (_cor11,_cor10) ->
			case <_cor11,_cor10> of
			  <{'flags',Flags},Acc> when 'true' ->
			      let <_cor1> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Flags>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor1|Acc]
			  %% Line 55
			  <{'domain',Domain},Acc> when 'true' ->
			      let <Domain_UC> =
				  call 'unicode':'characters_to_binary'
				      ([Domain|[0]])
			      in  let <_cor8> =
				      call 'erlang':'byte_size'
					  (Domain_UC)
				  in  let <_cor3> =
					  call 'erlang':'byte_size'
					      (Domain_UC)
				      in  let <_cor4> =
					      call 'erlang':'+'
						  (0, _cor3)
					  in  let <_cor5> =
						  call 'erlang':'band'
						      (_cor4, 7)
					      in  let <_cor6> =
						      call 'erlang':'-'
							  (8, _cor5)
						  in  let <_cor7> =
							  call 'erlang':'band'
							      (_cor6, 7)
						      in  let <_cor9> =
							      #{#<2>(32,1,'integer',['unsigned'|['native']]),
								#<_cor8>(32,1,'integer',['unsigned'|['native']]),
								#<Domain_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor7,8,'integer',['unsigned'|['big']])}#
							  in  [_cor9|Acc]
			  %% Line 56
			  <BadOpt,_cor19> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor15> =
		      %% Line 57
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 57
			  call 'erlang':'list_to_binary'
			      (_cor15)
		      in  let <_cor17> =
			      %% Line 59
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 58
			      call 'wxe_util':'construct'
				  (2503, _cor17)
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Filemask,Options>
	      when let <_cor2> =
		    %% Line 67
		    call 'erlang':'is_list'
			(Filemask)
		in  let <_cor3> =
			%% Line 67
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 67
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Filemask_UC> =
		  %% Line 68
		  call 'unicode':'characters_to_binary'
		      ([Filemask|[0]])
	      in  let <MOpts> =
		      %% Line 69
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'flags',Flags},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Flags>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 70
			      <{'domain',Domain},Acc> when 'true' ->
				  let <Domain_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Domain|[0]])
				  in  let <_cor12> =
					  call 'erlang':'byte_size'
					      (Domain_UC)
				      in  let <_cor7> =
					      call 'erlang':'byte_size'
						  (Domain_UC)
					  in  let <_cor8> =
						  call 'erlang':'+'
						      (0, _cor7)
					      in  let <_cor9> =
						      call 'erlang':'band'
							  (_cor8, 7)
						  in  let <_cor10> =
							  call 'erlang':'-'
							      (8, _cor9)
						      in  let <_cor11> =
							      call 'erlang':'band'
								  (_cor10, 7)
							  in  let <_cor13> =
								  #{#<2>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor12>(32,1,'integer',['unsigned'|['native']]),
								    #<Domain_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor11,8,'integer',['unsigned'|['big']])}#
							      in  [_cor13|Acc]
			      %% Line 71
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 72
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 72
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor26> =
				  %% Line 74
				  call 'erlang':'byte_size'
				      (Filemask_UC)
			      in  let <_cor21> =
				      %% Line 74
				      call 'erlang':'byte_size'
					  (Filemask_UC)
				  in  let <_cor22> =
					  %% Line 74
					  call 'erlang':'+'
					      (4, _cor21)
				      in  let <_cor23> =
					      %% Line 74
					      call 'erlang':'band'
						  (_cor22, 7)
					  in  let <_cor24> =
						  %% Line 74
						  call 'erlang':'-'
						      (8, _cor23)
					      in  let <_cor25> =
						      %% Line 74
						      call 'erlang':'band'
							  (_cor24, 7)
						  in  let <_cor27> =
							  %% Line 74
							  #{#<_cor26>(32,1,'integer',['unsigned'|['native']]),
							    #<Filemask_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor25,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 73
							  call 'wxe_util':'construct'
							      (2504, _cor27)
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'attachUnknownControl'/3 =
    %% Line 80
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor8,_cor9,_cor10},Name,Control = {'wx_ref',_cor11,_cor12,_cor13}>
	      when %% Line 81
		call 'erlang':'is_list'
		    (Name) ->
	      %% Line 82
	      apply 'attachUnknownControl'/4
		  (This, Name, Control, [])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'attachUnknownControl',3}}] )
	    -| ['compiler_generated'] )
	end
'attachUnknownControl'/4 =
    %% Line 88
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Name,{'wx_ref',ControlRef,ControlT,_cor33},Options>
	      when let <_cor4> =
		    %% Line 89
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor5> =
			%% Line 89
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 89
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 90
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 91
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  do  %% Line 92
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (ControlT,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call ControlT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 93
			      ( fun (_cor15,_cor14) ->
				    case <_cor15,_cor14> of
				      <{'parent',{'wx_ref',ParentRef,ParentT,_cor34}},Acc> when 'true' ->
					  do  ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (ParentT,
							       'wxWindow') ->
							'ok'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call ParentT:'parent_class'
							    ('wxWindow')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					      let <_cor13> =
						  #{#<1>(32,1,'integer',['unsigned'|['native']]),
						    #<ParentRef>(32,1,'integer',['unsigned'|['native']])}#
					      in  [_cor13|Acc]
				      %% Line 94
				      <BadOpt,_cor35> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-attachUnknownControl/4-fun-0-'}}] )
			  in  let <_cor19> =
				  %% Line 95
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 95
				      call 'erlang':'list_to_binary'
					  (_cor19)
				  in  let <_cor26> =
					  %% Line 97
					  call 'erlang':'byte_size'
					      (Name_UC)
				      in  let <_cor21> =
					      %% Line 97
					      call 'erlang':'byte_size'
						  (Name_UC)
					  in  let <_cor22> =
						  %% Line 97
						  call 'erlang':'+'
						      (0, _cor21)
					      in  let <_cor23> =
						      %% Line 97
						      call 'erlang':'band'
							  (_cor22, 7)
						  in  let <_cor24> =
							  %% Line 97
							  call 'erlang':'-'
							      (8, _cor23)
						      in  let <_cor25> =
							      %% Line 97
							      call 'erlang':'band'
								  (_cor24, 7)
							  in  let <_cor27> =
								  %% Line 97
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor26>(32,1,'integer',['unsigned'|['native']]),
								    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor25,8,'integer',['unsigned'|['big']]),
								    #<ControlRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 96
								  call 'wxe_util':'call'
								      (2506, _cor27)
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'attachUnknownControl',4}}] )
	    -| ['compiler_generated'] )
	end
'clearHandlers'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 103
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 105
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 104
		      call 'wxe_util':'cast'
			  (2507, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clearHandlers',1}}] )
	    -| ['compiler_generated'] )
	end
'compareVersion'/5 =
    %% Line 110
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Major,Minor,Release,Revision>
	      when %% Line 111
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Major)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Minor)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Release)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(Revision)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 112
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 114
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Major>(32,1,'integer',['unsigned'|['native']]),
			#<Minor>(32,1,'integer',['unsigned'|['native']]),
			#<Release>(32,1,'integer',['unsigned'|['native']]),
			#<Revision>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 113
		      call 'wxe_util':'call'
			  (2508, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'compareVersion',5}}] )
	    -| ['compiler_generated'] )
	end
'get'/0 =
    %% Line 118
    fun () ->
	%% Line 119
	call 'wxe_util':'call'
	    (2509, %% Line 120
		   #{}#)
'getFlags'/1 =
    %% Line 125
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 126
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 128
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 127
		      call 'wxe_util':'call'
			  (2510, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFlags',1}}] )
	    -| ['compiler_generated'] )
	end
'getVersion'/1 =
    %% Line 133
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 134
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 136
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 135
		      call 'wxe_util':'call'
			  (2511, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getVersion',1}}] )
	    -| ['compiler_generated'] )
	end
'getXRCID'/1 =
    %% Line 142
    fun (_cor0) ->
	case _cor0 of
	  <Str_id>
	      when %% Line 143
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 144
	      apply 'getXRCID'/2
		  (Str_id, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getXRCID',1}}] )
	    -| ['compiler_generated'] )
	end
'getXRCID'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Str_id,Options>
	      when let <_cor2> =
		    %% Line 151
		    call 'erlang':'is_list'
			(Str_id)
		in  let <_cor3> =
			%% Line 151
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 151
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Str_id_UC> =
		  %% Line 152
		  call 'unicode':'characters_to_binary'
		      ([Str_id|[0]])
	      in  let <MOpts> =
		      %% Line 153
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'value_if_not_found',Value_if_not_found},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Value_if_not_found>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 154
			      <BadOpt,_cor22> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getXRCID/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 155
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 155
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor18> =
				  %% Line 157
				  call 'erlang':'byte_size'
				      (Str_id_UC)
			      in  let <_cor13> =
				      %% Line 157
				      call 'erlang':'byte_size'
					  (Str_id_UC)
				  in  let <_cor14> =
					  %% Line 157
					  call 'erlang':'+'
					      (4, _cor13)
				      in  let <_cor15> =
					      %% Line 157
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor16> =
						  %% Line 157
						  call 'erlang':'-'
						      (8, _cor15)
					      in  let <_cor17> =
						      %% Line 157
						      call 'erlang':'band'
							  (_cor16, 7)
						  in  let <_cor19> =
							  %% Line 157
							  #{#<_cor18>(32,1,'integer',['unsigned'|['native']]),
							    #<Str_id_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor17,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 156
							  call 'wxe_util':'call'
							      (2512, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'getXRCID',2}}] )
	    -| ['compiler_generated'] )
	end
'initAllHandlers'/1 =
    %% Line 162
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 163
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 165
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 164
		      call 'wxe_util':'cast'
			  (2513, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'initAllHandlers',1}}] )
	    -| ['compiler_generated'] )
	end
'load'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Filemask>
	      when %% Line 171
		call 'erlang':'is_list'
		    (Filemask) ->
	      do  %% Line 172
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Filemask_UC> =
		      %% Line 173
		      call 'unicode':'characters_to_binary'
			  ([Filemask|[0]])
		  in  let <_cor10> =
			  %% Line 175
			  call 'erlang':'byte_size'
			      (Filemask_UC)
		      in  let <_cor5> =
			      %% Line 175
			      call 'erlang':'byte_size'
				  (Filemask_UC)
			  in  let <_cor6> =
				  %% Line 175
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 175
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 175
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 175
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 175
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Filemask_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 174
						  call 'wxe_util':'call'
						      (2514, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'load',2}}] )
	    -| ['compiler_generated'] )
	end
'loadBitmap'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 181
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 182
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 183
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 185
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 185
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 185
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 185
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 185
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 185
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 185
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 184
						  call 'wxe_util':'call'
						      (2515, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'loadBitmap',2}}] )
	    -| ['compiler_generated'] )
	end
'loadDialog'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',ParentRef,ParentT,_cor19},Name>
	      when %% Line 191
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 192
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 193
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Name_UC> =
			  %% Line 194
			  call 'unicode':'characters_to_binary'
			      ([Name|[0]])
		      in  let <_cor13> =
			      %% Line 196
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor8> =
				  %% Line 196
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor9> =
				      %% Line 196
				      call 'erlang':'+'
					  (4, _cor8)
				  in  let <_cor10> =
					  %% Line 196
					  call 'erlang':'band'
					      (_cor9, 7)
				      in  let <_cor11> =
					      %% Line 196
					      call 'erlang':'-'
						  (8, _cor10)
					  in  let <_cor12> =
						  %% Line 196
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor14> =
						      %% Line 196
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor13>(32,1,'integer',['unsigned'|['native']]),
							#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
						  in  %% Line 195
						      call 'wxe_util':'call'
							  (2516, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'loadDialog',3}}] )
	    -| ['compiler_generated'] )
	end
'loadDialog'/4 =
    %% Line 201
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},{'wx_ref',DlgRef,DlgT,_cor23},{'wx_ref',ParentRef,ParentT,_cor24},Name>
	      when %% Line 202
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 203
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 204
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (DlgT,
				       'wxDialog') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call DlgT:'parent_class'
				    ('wxDialog')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 205
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (ParentT,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call ParentT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <Name_UC> =
			      %% Line 206
			      call 'unicode':'characters_to_binary'
				  ([Name|[0]])
			  in  let <_cor16> =
				  %% Line 208
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor11> =
				      %% Line 208
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor12> =
					  %% Line 208
					  call 'erlang':'+'
					      (0, _cor11)
				      in  let <_cor13> =
					      %% Line 208
					      call 'erlang':'band'
						  (_cor12, 7)
					  in  let <_cor14> =
						  %% Line 208
						  call 'erlang':'-'
						      (8, _cor13)
					      in  let <_cor15> =
						      %% Line 208
						      call 'erlang':'band'
							  (_cor14, 7)
						  in  let <_cor17> =
							  %% Line 208
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<DlgRef>(32,1,'integer',['unsigned'|['native']]),
							    #<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
						      in  %% Line 207
							  call 'wxe_util':'call'
							      (2517, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'loadDialog',4}}] )
	    -| ['compiler_generated'] )
	end
'loadFrame'/3 =
    %% Line 213
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',ParentRef,ParentT,_cor19},Name>
	      when %% Line 214
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 215
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 216
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Name_UC> =
			  %% Line 217
			  call 'unicode':'characters_to_binary'
			      ([Name|[0]])
		      in  let <_cor13> =
			      %% Line 219
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor8> =
				  %% Line 219
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor9> =
				      %% Line 219
				      call 'erlang':'+'
					  (4, _cor8)
				  in  let <_cor10> =
					  %% Line 219
					  call 'erlang':'band'
					      (_cor9, 7)
				      in  let <_cor11> =
					      %% Line 219
					      call 'erlang':'-'
						  (8, _cor10)
					  in  let <_cor12> =
						  %% Line 219
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor14> =
						      %% Line 219
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor13>(32,1,'integer',['unsigned'|['native']]),
							#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
						  in  %% Line 218
						      call 'wxe_util':'call'
							  (2518, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'loadFrame',3}}] )
	    -| ['compiler_generated'] )
	end
'loadFrame'/4 =
    %% Line 224
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},{'wx_ref',FrameRef,FrameT,_cor23},{'wx_ref',ParentRef,ParentT,_cor24},Name>
	      when %% Line 225
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 226
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 227
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (FrameT,
				       'wxFrame') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call FrameT:'parent_class'
				    ('wxFrame')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 228
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (ParentT,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call ParentT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <Name_UC> =
			      %% Line 229
			      call 'unicode':'characters_to_binary'
				  ([Name|[0]])
			  in  let <_cor16> =
				  %% Line 231
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor11> =
				      %% Line 231
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor12> =
					  %% Line 231
					  call 'erlang':'+'
					      (0, _cor11)
				      in  let <_cor13> =
					      %% Line 231
					      call 'erlang':'band'
						  (_cor12, 7)
					  in  let <_cor14> =
						  %% Line 231
						  call 'erlang':'-'
						      (8, _cor13)
					      in  let <_cor15> =
						      %% Line 231
						      call 'erlang':'band'
							  (_cor14, 7)
						  in  let <_cor17> =
							  %% Line 231
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<FrameRef>(32,1,'integer',['unsigned'|['native']]),
							    #<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
						      in  %% Line 230
							  call 'wxe_util':'call'
							      (2519, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'loadFrame',4}}] )
	    -| ['compiler_generated'] )
	end
'loadIcon'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 237
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 238
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 239
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 241
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 241
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 241
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 241
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 241
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 241
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 241
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 240
						  call 'wxe_util':'call'
						      (2520, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'loadIcon',2}}] )
	    -| ['compiler_generated'] )
	end
'loadMenu'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 247
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 248
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 249
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 251
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 251
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 251
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 251
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 251
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 251
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 251
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 250
						  call 'wxe_util':'call'
						      (2521, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'loadMenu',2}}] )
	    -| ['compiler_generated'] )
	end
'loadMenuBar'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Name>
	      when %% Line 257
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 258
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Name_UC> =
		      %% Line 259
		      call 'unicode':'characters_to_binary'
			  ([Name|[0]])
		  in  let <_cor10> =
			  %% Line 261
			  call 'erlang':'byte_size'
			      (Name_UC)
		      in  let <_cor5> =
			      %% Line 261
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor6> =
				  %% Line 261
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 261
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 261
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 261
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 261
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 260
						  call 'wxe_util':'call'
						      (2523, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'loadMenuBar',2}}] )
	    -| ['compiler_generated'] )
	end
'loadMenuBar'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',ParentRef,ParentT,_cor19},Name>
	      when %% Line 267
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 268
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 269
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Name_UC> =
			  %% Line 270
			  call 'unicode':'characters_to_binary'
			      ([Name|[0]])
		      in  let <_cor13> =
			      %% Line 272
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor8> =
				  %% Line 272
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor9> =
				      %% Line 272
				      call 'erlang':'+'
					  (4, _cor8)
				  in  let <_cor10> =
					  %% Line 272
					  call 'erlang':'band'
					      (_cor9, 7)
				      in  let <_cor11> =
					      %% Line 272
					      call 'erlang':'-'
						  (8, _cor10)
					  in  let <_cor12> =
						  %% Line 272
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor14> =
						      %% Line 272
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor13>(32,1,'integer',['unsigned'|['native']]),
							#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
						  in  %% Line 271
						      call 'wxe_util':'call'
							  (2522, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'loadMenuBar',3}}] )
	    -| ['compiler_generated'] )
	end
'loadPanel'/3 =
    %% Line 277
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',ParentRef,ParentT,_cor19},Name>
	      when %% Line 278
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 279
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 280
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Name_UC> =
			  %% Line 281
			  call 'unicode':'characters_to_binary'
			      ([Name|[0]])
		      in  let <_cor13> =
			      %% Line 283
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor8> =
				  %% Line 283
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor9> =
				      %% Line 283
				      call 'erlang':'+'
					  (4, _cor8)
				  in  let <_cor10> =
					  %% Line 283
					  call 'erlang':'band'
					      (_cor9, 7)
				      in  let <_cor11> =
					      %% Line 283
					      call 'erlang':'-'
						  (8, _cor10)
					  in  let <_cor12> =
						  %% Line 283
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor14> =
						      %% Line 283
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor13>(32,1,'integer',['unsigned'|['native']]),
							#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
						  in  %% Line 282
						      call 'wxe_util':'call'
							  (2524, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'loadPanel',3}}] )
	    -| ['compiler_generated'] )
	end
'loadPanel'/4 =
    %% Line 288
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},{'wx_ref',PanelRef,PanelT,_cor23},{'wx_ref',ParentRef,ParentT,_cor24},Name>
	      when %% Line 289
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 290
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 291
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (PanelT,
				       'wxPanel') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call PanelT:'parent_class'
				    ('wxPanel')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      do  %% Line 292
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (ParentT,
					   'wxWindow') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call ParentT:'parent_class'
					('wxWindow')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <Name_UC> =
			      %% Line 293
			      call 'unicode':'characters_to_binary'
				  ([Name|[0]])
			  in  let <_cor16> =
				  %% Line 295
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor11> =
				      %% Line 295
				      call 'erlang':'byte_size'
					  (Name_UC)
				  in  let <_cor12> =
					  %% Line 295
					  call 'erlang':'+'
					      (0, _cor11)
				      in  let <_cor13> =
					      %% Line 295
					      call 'erlang':'band'
						  (_cor12, 7)
					  in  let <_cor14> =
						  %% Line 295
						  call 'erlang':'-'
						      (8, _cor13)
					      in  let <_cor15> =
						      %% Line 295
						      call 'erlang':'band'
							  (_cor14, 7)
						  in  let <_cor17> =
							  %% Line 295
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<PanelRef>(32,1,'integer',['unsigned'|['native']]),
							    #<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
						      in  %% Line 294
							  call 'wxe_util':'call'
							      (2525, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'loadPanel',4}}] )
	    -| ['compiler_generated'] )
	end
'loadToolBar'/3 =
    %% Line 300
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},{'wx_ref',ParentRef,ParentT,_cor19},Name>
	      when %% Line 301
		call 'erlang':'is_list'
		    (Name) ->
	      do  %% Line 302
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 303
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ParentT,
				       'wxWindow') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ParentT:'parent_class'
				    ('wxWindow')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <Name_UC> =
			  %% Line 304
			  call 'unicode':'characters_to_binary'
			      ([Name|[0]])
		      in  let <_cor13> =
			      %% Line 306
			      call 'erlang':'byte_size'
				  (Name_UC)
			  in  let <_cor8> =
				  %% Line 306
				  call 'erlang':'byte_size'
				      (Name_UC)
			      in  let <_cor9> =
				      %% Line 306
				      call 'erlang':'+'
					  (4, _cor8)
				  in  let <_cor10> =
					  %% Line 306
					  call 'erlang':'band'
					      (_cor9, 7)
				      in  let <_cor11> =
					      %% Line 306
					      call 'erlang':'-'
						  (8, _cor10)
					  in  let <_cor12> =
						  %% Line 306
						  call 'erlang':'band'
						      (_cor11, 7)
					      in  let <_cor14> =
						      %% Line 306
						      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
							#<_cor13>(32,1,'integer',['unsigned'|['native']]),
							#<Name_UC>('all',8,'binary',['unsigned'|['big']]),
							#<0>(_cor12,8,'integer',['unsigned'|['big']])}#
						  in  %% Line 305
						      call 'wxe_util':'call'
							  (2526, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'loadToolBar',3}}] )
	    -| ['compiler_generated'] )
	end
'set'/1 =
    %% Line 311
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ResRef,ResT,_cor5}> when 'true' ->
	      do  %% Line 312
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ResT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ResT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 314
		      #{#<ResRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 313
		      call 'wxe_util':'call'
			  (2527, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'set',1}}] )
	    -| ['compiler_generated'] )
	end
'setFlags'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Flags>
	      when %% Line 320
		call 'erlang':'is_integer'
		    (Flags) ->
	      do  %% Line 321
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 323
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Flags>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 322
		      call 'wxe_util':'cast'
			  (2528, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setFlags',2}}] )
	    -| ['compiler_generated'] )
	end
'unload'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Filename>
	      when %% Line 329
		call 'erlang':'is_list'
		    (Filename) ->
	      do  %% Line 330
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Filename_UC> =
		      %% Line 331
		      call 'unicode':'characters_to_binary'
			  ([Filename|[0]])
		  in  let <_cor10> =
			  %% Line 333
			  call 'erlang':'byte_size'
			      (Filename_UC)
		      in  let <_cor5> =
			      %% Line 333
			      call 'erlang':'byte_size'
				  (Filename_UC)
			  in  let <_cor6> =
				  %% Line 333
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 333
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 333
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 333
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 333
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Filename_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 332
						  call 'wxe_util':'call'
						      (2529, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'unload',2}}] )
	    -| ['compiler_generated'] )
	end
'xrcctrl'/3 =
    %% Line 348
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Window = {'wx_ref',_cor10,_cor11,_cor12},Name,Type>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(Name)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Type)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <ID> =
		  %% Line 350
		  call 'wxXmlResource':'getXRCID'
		      (Name)
	      in  let <Res> =
		      %% Line 351
		      call 'wxWindow':'findWindow'
			  (Window, ID)
		  in  %% Line 352
		      call 'wx':'typeCast'
			  (Res, Type)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'xrcctrl',3}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 357
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxXmlResource') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxXmlResource')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 358
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 359
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxXmlResource')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxXmlResource', _cor0)
end