module 'wxGrid' ['appendCols'/1,
		 'appendCols'/2,
		 'appendRows'/1,
		 'appendRows'/2,
		 'autoSize'/1,
		 'autoSizeColumn'/2,
		 'autoSizeColumn'/3,
		 'autoSizeColumns'/1,
		 'autoSizeColumns'/2,
		 'autoSizeRow'/2,
		 'autoSizeRow'/3,
		 'autoSizeRows'/1,
		 'autoSizeRows'/2,
		 'beginBatch'/1,
		 'blockToDeviceRect'/3,
		 'cacheBestSize'/2,
		 'calcScrolledPosition'/2,
		 'calcScrolledPosition'/3,
		 'calcUnscrolledPosition'/2,
		 'calcUnscrolledPosition'/3,
		 'canDragColSize'/1,
		 'canDragGridSize'/1,
		 'canDragRowSize'/1,
		 'canEnableCellControl'/1,
		 'captureMouse'/1,
		 'cellToRect'/2,
		 'cellToRect'/3,
		 'center'/1,
		 'center'/2,
		 'centerOnParent'/1,
		 'centerOnParent'/2,
		 'centre'/1,
		 'centre'/2,
		 'centreOnParent'/1,
		 'centreOnParent'/2,
		 'clearBackground'/1,
		 'clearGrid'/1,
		 'clearSelection'/1,
		 'clientToScreen'/2,
		 'clientToScreen'/3,
		 'close'/1,
		 'close'/2,
		 'connect'/2,
		 'connect'/3,
		 'convertDialogToPixels'/2,
		 'convertPixelsToDialog'/2,
		 'createGrid'/3,
		 'createGrid'/4,
		 'deleteCols'/1,
		 'deleteCols'/2,
		 'deleteRows'/1,
		 'deleteRows'/2,
		 'destroy'/1,
		 'destroyChildren'/1,
		 'disable'/1,
		 'disableCellEditControl'/1,
		 'disableDragColSize'/1,
		 'disableDragGridSize'/1,
		 'disableDragRowSize'/1,
		 'disconnect'/1,
		 'disconnect'/2,
		 'disconnect'/3,
		 'doPrepareDC'/2,
		 'enable'/1,
		 'enable'/2,
		 'enableCellEditControl'/1,
		 'enableCellEditControl'/2,
		 'enableDragColSize'/1,
		 'enableDragColSize'/2,
		 'enableDragGridSize'/1,
		 'enableDragGridSize'/2,
		 'enableDragRowSize'/1,
		 'enableDragRowSize'/2,
		 'enableEditing'/2,
		 'enableGridLines'/1,
		 'enableGridLines'/2,
		 'enableScrolling'/3,
		 'endBatch'/1,
		 'findWindow'/2,
		 'fit'/1,
		 'fitInside'/1,
		 'forceRefresh'/1,
		 'freeze'/1,
		 'getAcceleratorTable'/1,
		 'getBackgroundColour'/1,
		 'getBackgroundStyle'/1,
		 'getBatchCount'/1,
		 'getBestSize'/1,
		 'getCaret'/1,
		 'getCellAlignment'/3,
		 'getCellBackgroundColour'/3,
		 'getCellEditor'/3,
		 'getCellFont'/3,
		 'getCellRenderer'/3,
		 'getCellTextColour'/3,
		 'getCellValue'/2,
		 'getCellValue'/3,
		 'getCharHeight'/1,
		 'getCharWidth'/1,
		 'getChildren'/1,
		 'getClientSize'/1,
		 'getColLabelAlignment'/1,
		 'getColLabelSize'/1,
		 'getColLabelValue'/2,
		 'getColMinimalAcceptableWidth'/1,
		 'getContainingSizer'/1,
		 'getCursor'/1,
		 'getDefaultCellAlignment'/1,
		 'getDefaultCellBackgroundColour'/1,
		 'getDefaultCellFont'/1,
		 'getDefaultCellTextColour'/1,
		 'getDefaultColLabelSize'/1,
		 'getDefaultColSize'/1,
		 'getDefaultEditor'/1,
		 'getDefaultEditorForCell'/2,
		 'getDefaultEditorForCell'/3,
		 'getDefaultEditorForType'/2,
		 'getDefaultRenderer'/1,
		 'getDefaultRendererForCell'/3,
		 'getDefaultRendererForType'/2,
		 'getDefaultRowLabelSize'/1,
		 'getDefaultRowSize'/1,
		 'getDropTarget'/1,
		 'getEventHandler'/1,
		 'getExtraStyle'/1,
		 'getFont'/1,
		 'getForegroundColour'/1,
		 'getGrandParent'/1,
		 'getGridColLabelWindow'/1,
		 'getGridCornerLabelWindow'/1,
		 'getGridCursorCol'/1,
		 'getGridCursorRow'/1,
		 'getGridLineColour'/1,
		 'getGridRowLabelWindow'/1,
		 'getGridWindow'/1,
		 'getHandle'/1,
		 'getHelpText'/1,
		 'getId'/1,
		 'getLabel'/1,
		 'getLabelBackgroundColour'/1,
		 'getLabelFont'/1,
		 'getLabelTextColour'/1,
		 'getMaxSize'/1,
		 'getMinSize'/1,
		 'getName'/1,
		 'getNumberCols'/1,
		 'getNumberRows'/1,
		 'getOrCreateCellAttr'/3,
		 'getParent'/1,
		 'getPosition'/1,
		 'getRect'/1,
		 'getRowLabelAlignment'/1,
		 'getRowLabelSize'/1,
		 'getRowLabelValue'/2,
		 'getRowMinimalAcceptableHeight'/1,
		 'getRowSize'/2,
		 'getScreenPosition'/1,
		 'getScreenRect'/1,
		 'getScrollLineX'/1,
		 'getScrollLineY'/1,
		 'getScrollPixelsPerUnit'/1,
		 'getScrollPos'/2,
		 'getScrollRange'/2,
		 'getScrollThumb'/2,
		 'getSelectedCells'/1,
		 'getSelectedCols'/1,
		 'getSelectedRows'/1,
		 'getSelectionBackground'/1,
		 'getSelectionBlockBottomRight'/1,
		 'getSelectionBlockTopLeft'/1,
		 'getSelectionForeground'/1,
		 'getSize'/1,
		 'getSizer'/1,
		 'getTextExtent'/2,
		 'getTextExtent'/3,
		 'getToolTip'/1,
		 'getUpdateRegion'/1,
		 'getViewStart'/1,
		 'getViewWidth'/1,
		 'getVirtualSize'/1,
		 'getWindowStyleFlag'/1,
		 'getWindowVariant'/1,
		 'gridLinesEnabled'/1,
		 'hasCapture'/1,
		 'hasScrollbar'/2,
		 'hasTransparentBackground'/1,
		 'hide'/1,
		 'hideCellEditControl'/1,
		 'inheritAttributes'/1,
		 'initDialog'/1,
		 'insertCols'/1,
		 'insertCols'/2,
		 'insertRows'/1,
		 'insertRows'/2,
		 'invalidateBestSize'/1,
		 'isCellEditControlEnabled'/1,
		 'isCurrentCellReadOnly'/1,
		 'isEditable'/1,
		 'isEnabled'/1,
		 'isExposed'/2,
		 'isExposed'/3,
		 'isExposed'/5,
		 'isInSelection'/2,
		 'isInSelection'/3,
		 'isReadOnly'/3,
		 'isRetained'/1,
		 'isSelection'/1,
		 'isShown'/1,
		 'isTopLevel'/1,
		 'isVisible'/2,
		 'isVisible'/3,
		 'isVisible'/4,
		 'layout'/1,
		 'lineDown'/1,
		 'lineUp'/1,
		 'lower'/1,
		 'makeCellVisible'/2,
		 'makeCellVisible'/3,
		 'makeModal'/1,
		 'makeModal'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'move'/2,
		 'move'/3,
		 'move'/4,
		 'moveAfterInTabOrder'/2,
		 'moveBeforeInTabOrder'/2,
		 'moveCursorDown'/2,
		 'moveCursorDownBlock'/2,
		 'moveCursorLeft'/2,
		 'moveCursorLeftBlock'/2,
		 'moveCursorRight'/2,
		 'moveCursorRightBlock'/2,
		 'moveCursorUp'/2,
		 'moveCursorUpBlock'/2,
		 'movePageDown'/1,
		 'movePageUp'/1,
		 'navigate'/1,
		 'navigate'/2,
		 'new'/0,
		 'new'/2,
		 'new'/3,
		 'new'/4,
		 'pageDown'/1,
		 'pageUp'/1,
		 'parent_class'/1,
		 'popEventHandler'/1,
		 'popEventHandler'/2,
		 'popupMenu'/2,
		 'popupMenu'/3,
		 'popupMenu'/4,
		 'prepareDC'/2,
		 'raise'/1,
		 'refresh'/1,
		 'refresh'/2,
		 'refreshRect'/2,
		 'refreshRect'/3,
		 'registerDataType'/4,
		 'releaseMouse'/1,
		 'removeChild'/2,
		 'reparent'/2,
		 'saveEditControlValue'/1,
		 'screenToClient'/1,
		 'screenToClient'/2,
		 'scroll'/3,
		 'scrollLines'/2,
		 'scrollPages'/2,
		 'scrollWindow'/3,
		 'scrollWindow'/4,
		 'selectAll'/1,
		 'selectBlock'/3,
		 'selectBlock'/4,
		 'selectBlock'/5,
		 'selectBlock'/6,
		 'selectCol'/2,
		 'selectCol'/3,
		 'selectRow'/2,
		 'selectRow'/3,
		 'setAcceleratorTable'/2,
		 'setAutoLayout'/2,
		 'setBackgroundColour'/2,
		 'setBackgroundStyle'/2,
		 'setCaret'/2,
		 'setCellAlignment'/2,
		 'setCellAlignment'/4,
		 'setCellAlignment'/5,
		 'setCellBackgroundColour'/2,
		 'setCellBackgroundColour'/4,
		 'setCellEditor'/4,
		 'setCellFont'/4,
		 'setCellRenderer'/4,
		 'setCellTextColour'/2,
		 'setCellTextColour'/4,
		 'setCellValue'/3,
		 'setCellValue'/4,
		 'setClientSize'/2,
		 'setClientSize'/3,
		 'setColAttr'/3,
		 'setColFormatBool'/2,
		 'setColFormatCustom'/3,
		 'setColFormatFloat'/2,
		 'setColFormatFloat'/3,
		 'setColFormatNumber'/2,
		 'setColLabelAlignment'/3,
		 'setColLabelSize'/2,
		 'setColLabelValue'/3,
		 'setColMinimalAcceptableWidth'/2,
		 'setColMinimalWidth'/3,
		 'setColSize'/3,
		 'setContainingSizer'/2,
		 'setCursor'/2,
		 'setDefaultCellAlignment'/3,
		 'setDefaultCellBackgroundColour'/2,
		 'setDefaultCellFont'/2,
		 'setDefaultCellTextColour'/2,
		 'setDefaultColSize'/2,
		 'setDefaultColSize'/3,
		 'setDefaultEditor'/2,
		 'setDefaultRenderer'/2,
		 'setDefaultRowSize'/2,
		 'setDefaultRowSize'/3,
		 'setDropTarget'/2,
		 'setExtraStyle'/2,
		 'setFocus'/1,
		 'setFocusFromKbd'/1,
		 'setFocusIgnoringChildren'/1,
		 'setFont'/2,
		 'setForegroundColour'/2,
		 'setGridCursor'/3,
		 'setGridLineColour'/2,
		 'setHelpText'/2,
		 'setId'/2,
		 'setLabel'/2,
		 'setLabelBackgroundColour'/2,
		 'setLabelFont'/2,
		 'setLabelTextColour'/2,
		 'setMargins'/3,
		 'setMaxSize'/2,
		 'setMinSize'/2,
		 'setName'/2,
		 'setOwnBackgroundColour'/2,
		 'setOwnFont'/2,
		 'setOwnForegroundColour'/2,
		 'setPalette'/2,
		 'setReadOnly'/3,
		 'setReadOnly'/4,
		 'setRowAttr'/3,
		 'setRowLabelAlignment'/3,
		 'setRowLabelSize'/2,
		 'setRowLabelValue'/3,
		 'setRowMinimalAcceptableHeight'/2,
		 'setRowMinimalHeight'/3,
		 'setRowSize'/3,
		 'setScrollLineX'/2,
		 'setScrollLineY'/2,
		 'setScrollPos'/3,
		 'setScrollPos'/4,
		 'setScrollRate'/3,
		 'setScrollbar'/5,
		 'setScrollbar'/6,
		 'setScrollbars'/5,
		 'setScrollbars'/6,
		 'setSelectionBackground'/2,
		 'setSelectionForeground'/2,
		 'setSelectionMode'/2,
		 'setSize'/2,
		 'setSize'/3,
		 'setSize'/5,
		 'setSize'/6,
		 'setSizeHints'/2,
		 'setSizeHints'/3,
		 'setSizeHints'/4,
		 'setSizer'/2,
		 'setSizer'/3,
		 'setSizerAndFit'/2,
		 'setSizerAndFit'/3,
		 'setTargetWindow'/2,
		 'setThemeEnabled'/2,
		 'setToolTip'/2,
		 'setVirtualSize'/2,
		 'setVirtualSize'/3,
		 'setVirtualSizeHints'/2,
		 'setVirtualSizeHints'/3,
		 'setVirtualSizeHints'/4,
		 'setWindowStyle'/2,
		 'setWindowStyleFlag'/2,
		 'setWindowVariant'/2,
		 'shouldInheritColours'/1,
		 'show'/1,
		 'show'/2,
		 'showCellEditControl'/1,
		 'thaw'/1,
		 'transferDataFromWindow'/1,
		 'transferDataToWindow'/1,
		 'update'/1,
		 'updateWindowUI'/1,
		 'updateWindowUI'/2,
		 'validate'/1,
		 'warpPointer'/3,
		 'xToCol'/2,
		 'xToCol'/3,
		 'xToEdgeOfCol'/2,
		 'yToEdgeOfRow'/2,
		 'yToRow'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 128
		'export_type' =
		    %% Line 128
		    [{'wxGrid',0}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{'wxGrid',{'remote_type',136,[{'atom',136,'wx'}|[{'atom',136,'wx_object'}|[[]]]]},[]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'new',0},[{'type',138,'fun',[{'type',138,'product',[]}|[{'type',138,'wxGrid',[]}]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'new',2},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'Parent'}|[{'var',144,'Id'}]]}|[{'type',144,'wxGrid',[]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Parent'}|[{'remote_type',145,[{'atom',145,'wxWindow'}|[{'atom',145,'wxWindow'}|[[]]]]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Id'}|[{'type',145,'integer',[]}]]]]}]]]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'new',3},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Parent'}|[{'var',159,'X'}|[{'var',159,'Y'}]]]}|[{'type',159,'wxGrid',[]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Parent'}|[{'remote_type',160,[{'atom',160,'wxWindow'}|[{'atom',160,'wxWindow'}|[[]]]]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'X'}|[{'type',160,'integer',[]}]]]]}|[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Y'}|[{'type',160,'integer',[]}]]]]}]]]]]}|[{'type',161,'bounded_fun',[{'type',161,'fun',[{'type',161,'product',[{'var',161,'Parent'}|[{'var',161,'Id'}|[{'type',161,'list',[{'var',161,'Option'}]}]]]}|[{'type',161,'wxGrid',[]}]]}|[[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Parent'}|[{'remote_type',162,[{'atom',162,'wxWindow'}|[{'atom',162,'wxWindow'}|[[]]]]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Id'}|[{'type',162,'integer',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Option'}|[{'type',163,'union',[{'type',163,'tuple',[{'atom',163,'pos'}|[{'type',163,'tuple',[{'ann_type',163,[{'var',163,'X'}|[{'type',163,'integer',[]}]]}|[{'ann_type',163,[{'var',163,'Y'}|[{'type',163,'integer',[]}]]}]]}]]}|[{'type',164,'tuple',[{'atom',164,'size'}|[{'type',164,'tuple',[{'ann_type',164,[{'var',164,'W'}|[{'type',164,'integer',[]}]]}|[{'ann_type',164,[{'var',164,'H'}|[{'type',164,'integer',[]}]]}]]}]]}|[{'type',165,'tuple',[{'atom',165,'style'}|[{'type',165,'integer',[]}]]}]]]}]]]]}]]]]]}]]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'new',4},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'Parent'}|[{'var',182,'X'}|[{'var',182,'Y'}|[{'type',182,'list',[{'var',182,'Option'}]}]]]]}|[{'type',182,'wxGrid',[]}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Parent'}|[{'remote_type',183,[{'atom',183,'wxWindow'}|[{'atom',183,'wxWindow'}|[[]]]]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'X'}|[{'type',183,'integer',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Y'}|[{'type',183,'integer',[]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'Option'}|[{'type',184,'union',[{'type',184,'tuple',[{'atom',184,'w'}|[{'type',184,'integer',[]}]]}|[{'type',185,'tuple',[{'atom',185,'h'}|[{'type',185,'integer',[]}]]}|[{'type',186,'tuple',[{'atom',186,'style'}|[{'type',186,'integer',[]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'appendCols',1},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'This'}]}|[{'type',199,'boolean',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'This'}|[{'type',200,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'appendCols',2},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}|[{'type',207,'list',[{'var',207,'Option'}]}]]}|[{'type',207,'boolean',[]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxGrid',[]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Option'}|[{'type',209,'union',[{'type',209,'tuple',[{'atom',209,'numCols'}|[{'type',209,'integer',[]}]]}|[{'type',210,'tuple',[{'atom',210,'updateLabels'}|[{'type',210,'boolean',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 222
		'spec' =
		    %% Line 222
		    [{{'appendRows',1},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'This'}]}|[{'type',222,'boolean',[]}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'This'}|[{'type',223,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'appendRows',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'This'}|[{'type',230,'list',[{'var',230,'Option'}]}]]}|[{'type',230,'boolean',[]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'This'}|[{'type',231,'wxGrid',[]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Option'}|[{'type',232,'union',[{'type',232,'tuple',[{'atom',232,'numRows'}|[{'type',232,'integer',[]}]]}|[{'type',233,'tuple',[{'atom',233,'updateLabels'}|[{'type',233,'boolean',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 245
		'spec' =
		    %% Line 245
		    [{{'autoSize',1},[{'type',245,'bounded_fun',[{'type',245,'fun',[{'type',245,'product',[{'var',245,'This'}]}|[{'atom',245,'ok'}]]}|[[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'This'}|[{'type',246,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 253
		'spec' =
		    %% Line 253
		    [{{'autoSizeColumn',2},[{'type',253,'bounded_fun',[{'type',253,'fun',[{'type',253,'product',[{'var',253,'This'}|[{'var',253,'Col'}]]}|[{'atom',253,'ok'}]]}|[[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'This'}|[{'type',254,'wxGrid',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Col'}|[{'type',254,'integer',[]}]]]]}]]]]}]}],
		%% Line 261
		'spec' =
		    %% Line 261
		    [{{'autoSizeColumn',3},[{'type',261,'bounded_fun',[{'type',261,'fun',[{'type',261,'product',[{'var',261,'This'}|[{'var',261,'Col'}|[{'type',261,'list',[{'var',261,'Option'}]}]]]}|[{'atom',261,'ok'}]]}|[[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'This'}|[{'type',262,'wxGrid',[]}]]]]}|[{'type',262,'constraint',[{'atom',262,'is_subtype'}|[[{'var',262,'Col'}|[{'type',262,'integer',[]}]]]]}|[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'Option'}|[{'type',263,'tuple',[{'atom',263,'setAsMin'}|[{'type',263,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'autoSizeColumns',1},[{'type',274,'bounded_fun',[{'type',274,'fun',[{'type',274,'product',[{'var',274,'This'}]}|[{'atom',274,'ok'}]]}|[[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'This'}|[{'type',275,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 282
		'spec' =
		    %% Line 282
		    [{{'autoSizeColumns',2},[{'type',282,'bounded_fun',[{'type',282,'fun',[{'type',282,'product',[{'var',282,'This'}|[{'type',282,'list',[{'var',282,'Option'}]}]]}|[{'atom',282,'ok'}]]}|[[{'type',283,'constraint',[{'atom',283,'is_subtype'}|[[{'var',283,'This'}|[{'type',283,'wxGrid',[]}]]]]}|[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Option'}|[{'type',284,'tuple',[{'atom',284,'setAsMin'}|[{'type',284,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'autoSizeRow',2},[{'type',295,'bounded_fun',[{'type',295,'fun',[{'type',295,'product',[{'var',295,'This'}|[{'var',295,'Row'}]]}|[{'atom',295,'ok'}]]}|[[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'This'}|[{'type',296,'wxGrid',[]}]]]]}|[{'type',296,'constraint',[{'atom',296,'is_subtype'}|[[{'var',296,'Row'}|[{'type',296,'integer',[]}]]]]}]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'autoSizeRow',3},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'This'}|[{'var',303,'Row'}|[{'type',303,'list',[{'var',303,'Option'}]}]]]}|[{'atom',303,'ok'}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'This'}|[{'type',304,'wxGrid',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Row'}|[{'type',304,'integer',[]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Option'}|[{'type',305,'tuple',[{'atom',305,'setAsMin'}|[{'type',305,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'autoSizeRows',1},[{'type',316,'bounded_fun',[{'type',316,'fun',[{'type',316,'product',[{'var',316,'This'}]}|[{'atom',316,'ok'}]]}|[[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'This'}|[{'type',317,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'autoSizeRows',2},[{'type',324,'bounded_fun',[{'type',324,'fun',[{'type',324,'product',[{'var',324,'This'}|[{'type',324,'list',[{'var',324,'Option'}]}]]}|[{'atom',324,'ok'}]]}|[[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'This'}|[{'type',325,'wxGrid',[]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Option'}|[{'type',326,'tuple',[{'atom',326,'setAsMin'}|[{'type',326,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'beginBatch',1},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'This'}]}|[{'atom',337,'ok'}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'This'}|[{'type',338,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'blockToDeviceRect',3},[{'type',345,'bounded_fun',[{'type',345,'fun',[{'type',345,'product',[{'var',345,'This'}|[{'var',345,'TopLeft'}|[{'var',345,'BottomRight'}]]]}|[{'type',345,'tuple',[{'ann_type',345,[{'var',345,'X'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'Y'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'W'}|[{'type',345,'integer',[]}]]}|[{'ann_type',345,[{'var',345,'H'}|[{'type',345,'integer',[]}]]}]]]]}]]}|[[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'This'}|[{'type',346,'wxGrid',[]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'TopLeft'}|[{'type',346,'tuple',[{'ann_type',346,[{'var',346,'R'}|[{'type',346,'integer',[]}]]}|[{'ann_type',346,[{'var',346,'C'}|[{'type',346,'integer',[]}]]}]]}]]]]}|[{'type',346,'constraint',[{'atom',346,'is_subtype'}|[[{'var',346,'BottomRight'}|[{'type',346,'tuple',[{'ann_type',346,[{'var',346,'R'}|[{'type',346,'integer',[]}]]}|[{'ann_type',346,[{'var',346,'C'}|[{'type',346,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 354
		'spec' =
		    %% Line 354
		    [{{'canDragColSize',1},[{'type',354,'bounded_fun',[{'type',354,'fun',[{'type',354,'product',[{'var',354,'This'}]}|[{'type',354,'boolean',[]}]]}|[[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'This'}|[{'type',355,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'canDragRowSize',1},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'This'}]}|[{'type',362,'boolean',[]}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'This'}|[{'type',363,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 370
		'spec' =
		    %% Line 370
		    [{{'canDragGridSize',1},[{'type',370,'bounded_fun',[{'type',370,'fun',[{'type',370,'product',[{'var',370,'This'}]}|[{'type',370,'boolean',[]}]]}|[[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'This'}|[{'type',371,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'canEnableCellControl',1},[{'type',378,'bounded_fun',[{'type',378,'fun',[{'type',378,'product',[{'var',378,'This'}]}|[{'type',378,'boolean',[]}]]}|[[{'type',379,'constraint',[{'atom',379,'is_subtype'}|[[{'var',379,'This'}|[{'type',379,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'cellToRect',2},[{'type',386,'bounded_fun',[{'type',386,'fun',[{'type',386,'product',[{'var',386,'This'}|[{'var',386,'Coords'}]]}|[{'type',386,'tuple',[{'ann_type',386,[{'var',386,'X'}|[{'type',386,'integer',[]}]]}|[{'ann_type',386,[{'var',386,'Y'}|[{'type',386,'integer',[]}]]}|[{'ann_type',386,[{'var',386,'W'}|[{'type',386,'integer',[]}]]}|[{'ann_type',386,[{'var',386,'H'}|[{'type',386,'integer',[]}]]}]]]]}]]}|[[{'type',387,'constraint',[{'atom',387,'is_subtype'}|[[{'var',387,'This'}|[{'type',387,'wxGrid',[]}]]]]}|[{'type',387,'constraint',[{'atom',387,'is_subtype'}|[[{'var',387,'Coords'}|[{'type',387,'tuple',[{'ann_type',387,[{'var',387,'R'}|[{'type',387,'integer',[]}]]}|[{'ann_type',387,[{'var',387,'C'}|[{'type',387,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 395
		'spec' =
		    %% Line 395
		    [{{'cellToRect',3},[{'type',395,'bounded_fun',[{'type',395,'fun',[{'type',395,'product',[{'var',395,'This'}|[{'var',395,'Row'}|[{'var',395,'Col'}]]]}|[{'type',395,'tuple',[{'ann_type',395,[{'var',395,'X'}|[{'type',395,'integer',[]}]]}|[{'ann_type',395,[{'var',395,'Y'}|[{'type',395,'integer',[]}]]}|[{'ann_type',395,[{'var',395,'W'}|[{'type',395,'integer',[]}]]}|[{'ann_type',395,[{'var',395,'H'}|[{'type',395,'integer',[]}]]}]]]]}]]}|[[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'This'}|[{'type',396,'wxGrid',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Row'}|[{'type',396,'integer',[]}]]]]}|[{'type',396,'constraint',[{'atom',396,'is_subtype'}|[[{'var',396,'Col'}|[{'type',396,'integer',[]}]]]]}]]]]]}]}],
		%% Line 404
		'spec' =
		    %% Line 404
		    [{{'clearGrid',1},[{'type',404,'bounded_fun',[{'type',404,'fun',[{'type',404,'product',[{'var',404,'This'}]}|[{'atom',404,'ok'}]]}|[[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'This'}|[{'type',405,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 412
		'spec' =
		    %% Line 412
		    [{{'clearSelection',1},[{'type',412,'bounded_fun',[{'type',412,'fun',[{'type',412,'product',[{'var',412,'This'}]}|[{'atom',412,'ok'}]]}|[[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'This'}|[{'type',413,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 420
		'spec' =
		    %% Line 420
		    [{{'createGrid',3},[{'type',420,'bounded_fun',[{'type',420,'fun',[{'type',420,'product',[{'var',420,'This'}|[{'var',420,'NumRows'}|[{'var',420,'NumCols'}]]]}|[{'type',420,'boolean',[]}]]}|[[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'This'}|[{'type',421,'wxGrid',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'NumRows'}|[{'type',421,'integer',[]}]]]]}|[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'NumCols'}|[{'type',421,'integer',[]}]]]]}]]]]]}]}],
		%% Line 429
		'spec' =
		    %% Line 429
		    [{{'createGrid',4},[{'type',429,'bounded_fun',[{'type',429,'fun',[{'type',429,'product',[{'var',429,'This'}|[{'var',429,'NumRows'}|[{'var',429,'NumCols'}|[{'type',429,'list',[{'var',429,'Option'}]}]]]]}|[{'type',429,'boolean',[]}]]}|[[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'This'}|[{'type',430,'wxGrid',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'NumRows'}|[{'type',430,'integer',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'NumCols'}|[{'type',430,'integer',[]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Option'}|[{'type',431,'tuple',[{'atom',431,'selmode'}|[{'remote_type',431,[{'atom',431,'wx'}|[{'atom',431,'wx_enum'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 442
		'spec' =
		    %% Line 442
		    [{{'deleteCols',1},[{'type',442,'bounded_fun',[{'type',442,'fun',[{'type',442,'product',[{'var',442,'This'}]}|[{'type',442,'boolean',[]}]]}|[[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'This'}|[{'type',443,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 450
		'spec' =
		    %% Line 450
		    [{{'deleteCols',2},[{'type',450,'bounded_fun',[{'type',450,'fun',[{'type',450,'product',[{'var',450,'This'}|[{'type',450,'list',[{'var',450,'Option'}]}]]}|[{'type',450,'boolean',[]}]]}|[[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'This'}|[{'type',451,'wxGrid',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Option'}|[{'type',452,'union',[{'type',452,'tuple',[{'atom',452,'pos'}|[{'type',452,'integer',[]}]]}|[{'type',453,'tuple',[{'atom',453,'numCols'}|[{'type',453,'integer',[]}]]}|[{'type',454,'tuple',[{'atom',454,'updateLabels'}|[{'type',454,'boolean',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 467
		'spec' =
		    %% Line 467
		    [{{'deleteRows',1},[{'type',467,'bounded_fun',[{'type',467,'fun',[{'type',467,'product',[{'var',467,'This'}]}|[{'type',467,'boolean',[]}]]}|[[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'This'}|[{'type',468,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 475
		'spec' =
		    %% Line 475
		    [{{'deleteRows',2},[{'type',475,'bounded_fun',[{'type',475,'fun',[{'type',475,'product',[{'var',475,'This'}|[{'type',475,'list',[{'var',475,'Option'}]}]]}|[{'type',475,'boolean',[]}]]}|[[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'This'}|[{'type',476,'wxGrid',[]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'Option'}|[{'type',477,'union',[{'type',477,'tuple',[{'atom',477,'pos'}|[{'type',477,'integer',[]}]]}|[{'type',478,'tuple',[{'atom',478,'numRows'}|[{'type',478,'integer',[]}]]}|[{'type',479,'tuple',[{'atom',479,'updateLabels'}|[{'type',479,'boolean',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 492
		'spec' =
		    %% Line 492
		    [{{'disableCellEditControl',1},[{'type',492,'bounded_fun',[{'type',492,'fun',[{'type',492,'product',[{'var',492,'This'}]}|[{'atom',492,'ok'}]]}|[[{'type',493,'constraint',[{'atom',493,'is_subtype'}|[[{'var',493,'This'}|[{'type',493,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 500
		'spec' =
		    %% Line 500
		    [{{'disableDragColSize',1},[{'type',500,'bounded_fun',[{'type',500,'fun',[{'type',500,'product',[{'var',500,'This'}]}|[{'atom',500,'ok'}]]}|[[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'This'}|[{'type',501,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 508
		'spec' =
		    %% Line 508
		    [{{'disableDragGridSize',1},[{'type',508,'bounded_fun',[{'type',508,'fun',[{'type',508,'product',[{'var',508,'This'}]}|[{'atom',508,'ok'}]]}|[[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'This'}|[{'type',509,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 516
		'spec' =
		    %% Line 516
		    [{{'disableDragRowSize',1},[{'type',516,'bounded_fun',[{'type',516,'fun',[{'type',516,'product',[{'var',516,'This'}]}|[{'atom',516,'ok'}]]}|[[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'This'}|[{'type',517,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 524
		'spec' =
		    %% Line 524
		    [{{'enableCellEditControl',1},[{'type',524,'bounded_fun',[{'type',524,'fun',[{'type',524,'product',[{'var',524,'This'}]}|[{'atom',524,'ok'}]]}|[[{'type',525,'constraint',[{'atom',525,'is_subtype'}|[[{'var',525,'This'}|[{'type',525,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 532
		'spec' =
		    %% Line 532
		    [{{'enableCellEditControl',2},[{'type',532,'bounded_fun',[{'type',532,'fun',[{'type',532,'product',[{'var',532,'This'}|[{'type',532,'list',[{'var',532,'Option'}]}]]}|[{'atom',532,'ok'}]]}|[[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'This'}|[{'type',533,'wxGrid',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Option'}|[{'type',534,'tuple',[{'atom',534,'enable'}|[{'type',534,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 545
		'spec' =
		    %% Line 545
		    [{{'enableDragColSize',1},[{'type',545,'bounded_fun',[{'type',545,'fun',[{'type',545,'product',[{'var',545,'This'}]}|[{'atom',545,'ok'}]]}|[[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'This'}|[{'type',546,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 553
		'spec' =
		    %% Line 553
		    [{{'enableDragColSize',2},[{'type',553,'bounded_fun',[{'type',553,'fun',[{'type',553,'product',[{'var',553,'This'}|[{'type',553,'list',[{'var',553,'Option'}]}]]}|[{'atom',553,'ok'}]]}|[[{'type',554,'constraint',[{'atom',554,'is_subtype'}|[[{'var',554,'This'}|[{'type',554,'wxGrid',[]}]]]]}|[{'type',555,'constraint',[{'atom',555,'is_subtype'}|[[{'var',555,'Option'}|[{'type',555,'tuple',[{'atom',555,'enable'}|[{'type',555,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 566
		'spec' =
		    %% Line 566
		    [{{'enableDragGridSize',1},[{'type',566,'bounded_fun',[{'type',566,'fun',[{'type',566,'product',[{'var',566,'This'}]}|[{'atom',566,'ok'}]]}|[[{'type',567,'constraint',[{'atom',567,'is_subtype'}|[[{'var',567,'This'}|[{'type',567,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 574
		'spec' =
		    %% Line 574
		    [{{'enableDragGridSize',2},[{'type',574,'bounded_fun',[{'type',574,'fun',[{'type',574,'product',[{'var',574,'This'}|[{'type',574,'list',[{'var',574,'Option'}]}]]}|[{'atom',574,'ok'}]]}|[[{'type',575,'constraint',[{'atom',575,'is_subtype'}|[[{'var',575,'This'}|[{'type',575,'wxGrid',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Option'}|[{'type',576,'tuple',[{'atom',576,'enable'}|[{'type',576,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 587
		'spec' =
		    %% Line 587
		    [{{'enableDragRowSize',1},[{'type',587,'bounded_fun',[{'type',587,'fun',[{'type',587,'product',[{'var',587,'This'}]}|[{'atom',587,'ok'}]]}|[[{'type',588,'constraint',[{'atom',588,'is_subtype'}|[[{'var',588,'This'}|[{'type',588,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 595
		'spec' =
		    %% Line 595
		    [{{'enableDragRowSize',2},[{'type',595,'bounded_fun',[{'type',595,'fun',[{'type',595,'product',[{'var',595,'This'}|[{'type',595,'list',[{'var',595,'Option'}]}]]}|[{'atom',595,'ok'}]]}|[[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'This'}|[{'type',596,'wxGrid',[]}]]]]}|[{'type',597,'constraint',[{'atom',597,'is_subtype'}|[[{'var',597,'Option'}|[{'type',597,'tuple',[{'atom',597,'enable'}|[{'type',597,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 608
		'spec' =
		    %% Line 608
		    [{{'enableEditing',2},[{'type',608,'bounded_fun',[{'type',608,'fun',[{'type',608,'product',[{'var',608,'This'}|[{'var',608,'Edit'}]]}|[{'atom',608,'ok'}]]}|[[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'This'}|[{'type',609,'wxGrid',[]}]]]]}|[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'Edit'}|[{'type',609,'boolean',[]}]]]]}]]]]}]}],
		%% Line 617
		'spec' =
		    %% Line 617
		    [{{'enableGridLines',1},[{'type',617,'bounded_fun',[{'type',617,'fun',[{'type',617,'product',[{'var',617,'This'}]}|[{'atom',617,'ok'}]]}|[[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'This'}|[{'type',618,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 625
		'spec' =
		    %% Line 625
		    [{{'enableGridLines',2},[{'type',625,'bounded_fun',[{'type',625,'fun',[{'type',625,'product',[{'var',625,'This'}|[{'type',625,'list',[{'var',625,'Option'}]}]]}|[{'atom',625,'ok'}]]}|[[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'This'}|[{'type',626,'wxGrid',[]}]]]]}|[{'type',627,'constraint',[{'atom',627,'is_subtype'}|[[{'var',627,'Option'}|[{'type',627,'tuple',[{'atom',627,'enable'}|[{'type',627,'boolean',[]}]]}]]]]}]]]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'endBatch',1},[{'type',638,'bounded_fun',[{'type',638,'fun',[{'type',638,'product',[{'var',638,'This'}]}|[{'atom',638,'ok'}]]}|[[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'This'}|[{'type',639,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 646
		'spec' =
		    %% Line 646
		    [{{'fit',1},[{'type',646,'bounded_fun',[{'type',646,'fun',[{'type',646,'product',[{'var',646,'This'}]}|[{'atom',646,'ok'}]]}|[[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'This'}|[{'type',647,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 654
		'spec' =
		    %% Line 654
		    [{{'forceRefresh',1},[{'type',654,'bounded_fun',[{'type',654,'fun',[{'type',654,'product',[{'var',654,'This'}]}|[{'atom',654,'ok'}]]}|[[{'type',655,'constraint',[{'atom',655,'is_subtype'}|[[{'var',655,'This'}|[{'type',655,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 662
		'spec' =
		    %% Line 662
		    [{{'getBatchCount',1},[{'type',662,'bounded_fun',[{'type',662,'fun',[{'type',662,'product',[{'var',662,'This'}]}|[{'type',662,'integer',[]}]]}|[[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'This'}|[{'type',663,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'getCellAlignment',3},[{'type',670,'bounded_fun',[{'type',670,'fun',[{'type',670,'product',[{'var',670,'This'}|[{'var',670,'Row'}|[{'var',670,'Col'}]]]}|[{'type',670,'tuple',[{'ann_type',670,[{'var',670,'Horiz'}|[{'type',670,'integer',[]}]]}|[{'ann_type',670,[{'var',670,'Vert'}|[{'type',670,'integer',[]}]]}]]}]]}|[[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'This'}|[{'type',671,'wxGrid',[]}]]]]}|[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'Row'}|[{'type',671,'integer',[]}]]]]}|[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'Col'}|[{'type',671,'integer',[]}]]]]}]]]]]}]}],
		%% Line 679
		'spec' =
		    %% Line 679
		    [{{'getCellBackgroundColour',3},[{'type',679,'bounded_fun',[{'type',679,'fun',[{'type',679,'product',[{'var',679,'This'}|[{'var',679,'Row'}|[{'var',679,'Col'}]]]}|[{'remote_type',679,[{'atom',679,'wx'}|[{'atom',679,'wx_colour4'}|[[]]]]}]]}|[[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'This'}|[{'type',680,'wxGrid',[]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'Row'}|[{'type',680,'integer',[]}]]]]}|[{'type',680,'constraint',[{'atom',680,'is_subtype'}|[[{'var',680,'Col'}|[{'type',680,'integer',[]}]]]]}]]]]]}]}],
		%% Line 688
		'spec' =
		    %% Line 688
		    [{{'getCellEditor',3},[{'type',688,'bounded_fun',[{'type',688,'fun',[{'type',688,'product',[{'var',688,'This'}|[{'var',688,'Row'}|[{'var',688,'Col'}]]]}|[{'remote_type',688,[{'atom',688,'wxGridCellEditor'}|[{'atom',688,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'This'}|[{'type',689,'wxGrid',[]}]]]]}|[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'Row'}|[{'type',689,'integer',[]}]]]]}|[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'Col'}|[{'type',689,'integer',[]}]]]]}]]]]]}]}],
		%% Line 697
		'spec' =
		    %% Line 697
		    [{{'getCellFont',3},[{'type',697,'bounded_fun',[{'type',697,'fun',[{'type',697,'product',[{'var',697,'This'}|[{'var',697,'Row'}|[{'var',697,'Col'}]]]}|[{'remote_type',697,[{'atom',697,'wxFont'}|[{'atom',697,'wxFont'}|[[]]]]}]]}|[[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'This'}|[{'type',698,'wxGrid',[]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'Row'}|[{'type',698,'integer',[]}]]]]}|[{'type',698,'constraint',[{'atom',698,'is_subtype'}|[[{'var',698,'Col'}|[{'type',698,'integer',[]}]]]]}]]]]]}]}],
		%% Line 706
		'spec' =
		    %% Line 706
		    [{{'getCellRenderer',3},[{'type',706,'bounded_fun',[{'type',706,'fun',[{'type',706,'product',[{'var',706,'This'}|[{'var',706,'Row'}|[{'var',706,'Col'}]]]}|[{'remote_type',706,[{'atom',706,'wxGridCellRenderer'}|[{'atom',706,'wxGridCellRenderer'}|[[]]]]}]]}|[[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'This'}|[{'type',707,'wxGrid',[]}]]]]}|[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'Row'}|[{'type',707,'integer',[]}]]]]}|[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'Col'}|[{'type',707,'integer',[]}]]]]}]]]]]}]}],
		%% Line 715
		'spec' =
		    %% Line 715
		    [{{'getCellTextColour',3},[{'type',715,'bounded_fun',[{'type',715,'fun',[{'type',715,'product',[{'var',715,'This'}|[{'var',715,'Row'}|[{'var',715,'Col'}]]]}|[{'remote_type',715,[{'atom',715,'wx'}|[{'atom',715,'wx_colour4'}|[[]]]]}]]}|[[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'This'}|[{'type',716,'wxGrid',[]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Row'}|[{'type',716,'integer',[]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Col'}|[{'type',716,'integer',[]}]]]]}]]]]]}]}],
		%% Line 724
		'spec' =
		    %% Line 724
		    [{{'getCellValue',2},[{'type',724,'bounded_fun',[{'type',724,'fun',[{'type',724,'product',[{'var',724,'This'}|[{'var',724,'Coords'}]]}|[{'remote_type',724,[{'atom',724,'unicode'}|[{'atom',724,'charlist'}|[[]]]]}]]}|[[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'This'}|[{'type',725,'wxGrid',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Coords'}|[{'type',725,'tuple',[{'ann_type',725,[{'var',725,'R'}|[{'type',725,'integer',[]}]]}|[{'ann_type',725,[{'var',725,'C'}|[{'type',725,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 733
		'spec' =
		    %% Line 733
		    [{{'getCellValue',3},[{'type',733,'bounded_fun',[{'type',733,'fun',[{'type',733,'product',[{'var',733,'This'}|[{'var',733,'Row'}|[{'var',733,'Col'}]]]}|[{'remote_type',733,[{'atom',733,'unicode'}|[{'atom',733,'charlist'}|[[]]]]}]]}|[[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'This'}|[{'type',734,'wxGrid',[]}]]]]}|[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Row'}|[{'type',734,'integer',[]}]]]]}|[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Col'}|[{'type',734,'integer',[]}]]]]}]]]]]}]}],
		%% Line 742
		'spec' =
		    %% Line 742
		    [{{'getColLabelAlignment',1},[{'type',742,'bounded_fun',[{'type',742,'fun',[{'type',742,'product',[{'var',742,'This'}]}|[{'type',742,'tuple',[{'ann_type',742,[{'var',742,'Horiz'}|[{'type',742,'integer',[]}]]}|[{'ann_type',742,[{'var',742,'Vert'}|[{'type',742,'integer',[]}]]}]]}]]}|[[{'type',743,'constraint',[{'atom',743,'is_subtype'}|[[{'var',743,'This'}|[{'type',743,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 750
		'spec' =
		    %% Line 750
		    [{{'getColLabelSize',1},[{'type',750,'bounded_fun',[{'type',750,'fun',[{'type',750,'product',[{'var',750,'This'}]}|[{'type',750,'integer',[]}]]}|[[{'type',751,'constraint',[{'atom',751,'is_subtype'}|[[{'var',751,'This'}|[{'type',751,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 758
		'spec' =
		    %% Line 758
		    [{{'getColLabelValue',2},[{'type',758,'bounded_fun',[{'type',758,'fun',[{'type',758,'product',[{'var',758,'This'}|[{'var',758,'Col'}]]}|[{'remote_type',758,[{'atom',758,'unicode'}|[{'atom',758,'charlist'}|[[]]]]}]]}|[[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'This'}|[{'type',759,'wxGrid',[]}]]]]}|[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'Col'}|[{'type',759,'integer',[]}]]]]}]]]]}]}],
		%% Line 767
		'spec' =
		    %% Line 767
		    [{{'getColMinimalAcceptableWidth',1},[{'type',767,'bounded_fun',[{'type',767,'fun',[{'type',767,'product',[{'var',767,'This'}]}|[{'type',767,'integer',[]}]]}|[[{'type',768,'constraint',[{'atom',768,'is_subtype'}|[[{'var',768,'This'}|[{'type',768,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 775
		'spec' =
		    %% Line 775
		    [{{'getDefaultCellAlignment',1},[{'type',775,'bounded_fun',[{'type',775,'fun',[{'type',775,'product',[{'var',775,'This'}]}|[{'type',775,'tuple',[{'ann_type',775,[{'var',775,'Horiz'}|[{'type',775,'integer',[]}]]}|[{'ann_type',775,[{'var',775,'Vert'}|[{'type',775,'integer',[]}]]}]]}]]}|[[{'type',776,'constraint',[{'atom',776,'is_subtype'}|[[{'var',776,'This'}|[{'type',776,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 783
		'spec' =
		    %% Line 783
		    [{{'getDefaultCellBackgroundColour',1},[{'type',783,'bounded_fun',[{'type',783,'fun',[{'type',783,'product',[{'var',783,'This'}]}|[{'remote_type',783,[{'atom',783,'wx'}|[{'atom',783,'wx_colour4'}|[[]]]]}]]}|[[{'type',784,'constraint',[{'atom',784,'is_subtype'}|[[{'var',784,'This'}|[{'type',784,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 791
		'spec' =
		    %% Line 791
		    [{{'getDefaultCellFont',1},[{'type',791,'bounded_fun',[{'type',791,'fun',[{'type',791,'product',[{'var',791,'This'}]}|[{'remote_type',791,[{'atom',791,'wxFont'}|[{'atom',791,'wxFont'}|[[]]]]}]]}|[[{'type',792,'constraint',[{'atom',792,'is_subtype'}|[[{'var',792,'This'}|[{'type',792,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 799
		'spec' =
		    %% Line 799
		    [{{'getDefaultCellTextColour',1},[{'type',799,'bounded_fun',[{'type',799,'fun',[{'type',799,'product',[{'var',799,'This'}]}|[{'remote_type',799,[{'atom',799,'wx'}|[{'atom',799,'wx_colour4'}|[[]]]]}]]}|[[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'This'}|[{'type',800,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 807
		'spec' =
		    %% Line 807
		    [{{'getDefaultColLabelSize',1},[{'type',807,'bounded_fun',[{'type',807,'fun',[{'type',807,'product',[{'var',807,'This'}]}|[{'type',807,'integer',[]}]]}|[[{'type',808,'constraint',[{'atom',808,'is_subtype'}|[[{'var',808,'This'}|[{'type',808,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 815
		'spec' =
		    %% Line 815
		    [{{'getDefaultColSize',1},[{'type',815,'bounded_fun',[{'type',815,'fun',[{'type',815,'product',[{'var',815,'This'}]}|[{'type',815,'integer',[]}]]}|[[{'type',816,'constraint',[{'atom',816,'is_subtype'}|[[{'var',816,'This'}|[{'type',816,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 823
		'spec' =
		    %% Line 823
		    [{{'getDefaultEditor',1},[{'type',823,'bounded_fun',[{'type',823,'fun',[{'type',823,'product',[{'var',823,'This'}]}|[{'remote_type',823,[{'atom',823,'wxGridCellEditor'}|[{'atom',823,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'This'}|[{'type',824,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 831
		'spec' =
		    %% Line 831
		    [{{'getDefaultEditorForCell',2},[{'type',831,'bounded_fun',[{'type',831,'fun',[{'type',831,'product',[{'var',831,'This'}|[{'var',831,'C'}]]}|[{'remote_type',831,[{'atom',831,'wxGridCellEditor'}|[{'atom',831,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',832,'constraint',[{'atom',832,'is_subtype'}|[[{'var',832,'This'}|[{'type',832,'wxGrid',[]}]]]]}|[{'type',832,'constraint',[{'atom',832,'is_subtype'}|[[{'var',832,'C'}|[{'type',832,'tuple',[{'ann_type',832,[{'var',832,'R'}|[{'type',832,'integer',[]}]]}|[{'ann_type',832,[{'var',832,'C'}|[{'type',832,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 840
		'spec' =
		    %% Line 840
		    [{{'getDefaultEditorForCell',3},[{'type',840,'bounded_fun',[{'type',840,'fun',[{'type',840,'product',[{'var',840,'This'}|[{'var',840,'Row'}|[{'var',840,'Col'}]]]}|[{'remote_type',840,[{'atom',840,'wxGridCellEditor'}|[{'atom',840,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',841,'constraint',[{'atom',841,'is_subtype'}|[[{'var',841,'This'}|[{'type',841,'wxGrid',[]}]]]]}|[{'type',841,'constraint',[{'atom',841,'is_subtype'}|[[{'var',841,'Row'}|[{'type',841,'integer',[]}]]]]}|[{'type',841,'constraint',[{'atom',841,'is_subtype'}|[[{'var',841,'Col'}|[{'type',841,'integer',[]}]]]]}]]]]]}]}],
		%% Line 849
		'spec' =
		    %% Line 849
		    [{{'getDefaultEditorForType',2},[{'type',849,'bounded_fun',[{'type',849,'fun',[{'type',849,'product',[{'var',849,'This'}|[{'var',849,'TypeName'}]]}|[{'remote_type',849,[{'atom',849,'wxGridCellEditor'}|[{'atom',849,'wxGridCellEditor'}|[[]]]]}]]}|[[{'type',850,'constraint',[{'atom',850,'is_subtype'}|[[{'var',850,'This'}|[{'type',850,'wxGrid',[]}]]]]}|[{'type',850,'constraint',[{'atom',850,'is_subtype'}|[[{'var',850,'TypeName'}|[{'remote_type',850,[{'atom',850,'unicode'}|[{'atom',850,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'getDefaultRenderer',1},[{'type',859,'bounded_fun',[{'type',859,'fun',[{'type',859,'product',[{'var',859,'This'}]}|[{'remote_type',859,[{'atom',859,'wxGridCellRenderer'}|[{'atom',859,'wxGridCellRenderer'}|[[]]]]}]]}|[[{'type',860,'constraint',[{'atom',860,'is_subtype'}|[[{'var',860,'This'}|[{'type',860,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 867
		'spec' =
		    %% Line 867
		    [{{'getDefaultRendererForCell',3},[{'type',867,'bounded_fun',[{'type',867,'fun',[{'type',867,'product',[{'var',867,'This'}|[{'var',867,'Row'}|[{'var',867,'Col'}]]]}|[{'remote_type',867,[{'atom',867,'wxGridCellRenderer'}|[{'atom',867,'wxGridCellRenderer'}|[[]]]]}]]}|[[{'type',868,'constraint',[{'atom',868,'is_subtype'}|[[{'var',868,'This'}|[{'type',868,'wxGrid',[]}]]]]}|[{'type',868,'constraint',[{'atom',868,'is_subtype'}|[[{'var',868,'Row'}|[{'type',868,'integer',[]}]]]]}|[{'type',868,'constraint',[{'atom',868,'is_subtype'}|[[{'var',868,'Col'}|[{'type',868,'integer',[]}]]]]}]]]]]}]}],
		%% Line 876
		'spec' =
		    %% Line 876
		    [{{'getDefaultRendererForType',2},[{'type',876,'bounded_fun',[{'type',876,'fun',[{'type',876,'product',[{'var',876,'This'}|[{'var',876,'TypeName'}]]}|[{'remote_type',876,[{'atom',876,'wxGridCellRenderer'}|[{'atom',876,'wxGridCellRenderer'}|[[]]]]}]]}|[[{'type',877,'constraint',[{'atom',877,'is_subtype'}|[[{'var',877,'This'}|[{'type',877,'wxGrid',[]}]]]]}|[{'type',877,'constraint',[{'atom',877,'is_subtype'}|[[{'var',877,'TypeName'}|[{'remote_type',877,[{'atom',877,'unicode'}|[{'atom',877,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 886
		'spec' =
		    %% Line 886
		    [{{'getDefaultRowLabelSize',1},[{'type',886,'bounded_fun',[{'type',886,'fun',[{'type',886,'product',[{'var',886,'This'}]}|[{'type',886,'integer',[]}]]}|[[{'type',887,'constraint',[{'atom',887,'is_subtype'}|[[{'var',887,'This'}|[{'type',887,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 894
		'spec' =
		    %% Line 894
		    [{{'getDefaultRowSize',1},[{'type',894,'bounded_fun',[{'type',894,'fun',[{'type',894,'product',[{'var',894,'This'}]}|[{'type',894,'integer',[]}]]}|[[{'type',895,'constraint',[{'atom',895,'is_subtype'}|[[{'var',895,'This'}|[{'type',895,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 902
		'spec' =
		    %% Line 902
		    [{{'getGridCursorCol',1},[{'type',902,'bounded_fun',[{'type',902,'fun',[{'type',902,'product',[{'var',902,'This'}]}|[{'type',902,'integer',[]}]]}|[[{'type',903,'constraint',[{'atom',903,'is_subtype'}|[[{'var',903,'This'}|[{'type',903,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'getGridCursorRow',1},[{'type',910,'bounded_fun',[{'type',910,'fun',[{'type',910,'product',[{'var',910,'This'}]}|[{'type',910,'integer',[]}]]}|[[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'This'}|[{'type',911,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 918
		'spec' =
		    %% Line 918
		    [{{'getGridLineColour',1},[{'type',918,'bounded_fun',[{'type',918,'fun',[{'type',918,'product',[{'var',918,'This'}]}|[{'remote_type',918,[{'atom',918,'wx'}|[{'atom',918,'wx_colour4'}|[[]]]]}]]}|[[{'type',919,'constraint',[{'atom',919,'is_subtype'}|[[{'var',919,'This'}|[{'type',919,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 926
		'spec' =
		    %% Line 926
		    [{{'gridLinesEnabled',1},[{'type',926,'bounded_fun',[{'type',926,'fun',[{'type',926,'product',[{'var',926,'This'}]}|[{'type',926,'boolean',[]}]]}|[[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'This'}|[{'type',927,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 934
		'spec' =
		    %% Line 934
		    [{{'getLabelBackgroundColour',1},[{'type',934,'bounded_fun',[{'type',934,'fun',[{'type',934,'product',[{'var',934,'This'}]}|[{'remote_type',934,[{'atom',934,'wx'}|[{'atom',934,'wx_colour4'}|[[]]]]}]]}|[[{'type',935,'constraint',[{'atom',935,'is_subtype'}|[[{'var',935,'This'}|[{'type',935,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 942
		'spec' =
		    %% Line 942
		    [{{'getLabelFont',1},[{'type',942,'bounded_fun',[{'type',942,'fun',[{'type',942,'product',[{'var',942,'This'}]}|[{'remote_type',942,[{'atom',942,'wxFont'}|[{'atom',942,'wxFont'}|[[]]]]}]]}|[[{'type',943,'constraint',[{'atom',943,'is_subtype'}|[[{'var',943,'This'}|[{'type',943,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 950
		'spec' =
		    %% Line 950
		    [{{'getLabelTextColour',1},[{'type',950,'bounded_fun',[{'type',950,'fun',[{'type',950,'product',[{'var',950,'This'}]}|[{'remote_type',950,[{'atom',950,'wx'}|[{'atom',950,'wx_colour4'}|[[]]]]}]]}|[[{'type',951,'constraint',[{'atom',951,'is_subtype'}|[[{'var',951,'This'}|[{'type',951,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 958
		'spec' =
		    %% Line 958
		    [{{'getNumberCols',1},[{'type',958,'bounded_fun',[{'type',958,'fun',[{'type',958,'product',[{'var',958,'This'}]}|[{'type',958,'integer',[]}]]}|[[{'type',959,'constraint',[{'atom',959,'is_subtype'}|[[{'var',959,'This'}|[{'type',959,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 966
		'spec' =
		    %% Line 966
		    [{{'getNumberRows',1},[{'type',966,'bounded_fun',[{'type',966,'fun',[{'type',966,'product',[{'var',966,'This'}]}|[{'type',966,'integer',[]}]]}|[[{'type',967,'constraint',[{'atom',967,'is_subtype'}|[[{'var',967,'This'}|[{'type',967,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 974
		'spec' =
		    %% Line 974
		    [{{'getOrCreateCellAttr',3},[{'type',974,'bounded_fun',[{'type',974,'fun',[{'type',974,'product',[{'var',974,'This'}|[{'var',974,'Row'}|[{'var',974,'Col'}]]]}|[{'remote_type',974,[{'atom',974,'wxGridCellAttr'}|[{'atom',974,'wxGridCellAttr'}|[[]]]]}]]}|[[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'This'}|[{'type',975,'wxGrid',[]}]]]]}|[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'Row'}|[{'type',975,'integer',[]}]]]]}|[{'type',975,'constraint',[{'atom',975,'is_subtype'}|[[{'var',975,'Col'}|[{'type',975,'integer',[]}]]]]}]]]]]}]}],
		%% Line 983
		'spec' =
		    %% Line 983
		    [{{'getRowMinimalAcceptableHeight',1},[{'type',983,'bounded_fun',[{'type',983,'fun',[{'type',983,'product',[{'var',983,'This'}]}|[{'type',983,'integer',[]}]]}|[[{'type',984,'constraint',[{'atom',984,'is_subtype'}|[[{'var',984,'This'}|[{'type',984,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 991
		'spec' =
		    %% Line 991
		    [{{'getRowLabelAlignment',1},[{'type',991,'bounded_fun',[{'type',991,'fun',[{'type',991,'product',[{'var',991,'This'}]}|[{'type',991,'tuple',[{'ann_type',991,[{'var',991,'Horiz'}|[{'type',991,'integer',[]}]]}|[{'ann_type',991,[{'var',991,'Vert'}|[{'type',991,'integer',[]}]]}]]}]]}|[[{'type',992,'constraint',[{'atom',992,'is_subtype'}|[[{'var',992,'This'}|[{'type',992,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 999
		'spec' =
		    %% Line 999
		    [{{'getRowLabelSize',1},[{'type',999,'bounded_fun',[{'type',999,'fun',[{'type',999,'product',[{'var',999,'This'}]}|[{'type',999,'integer',[]}]]}|[[{'type',1000,'constraint',[{'atom',1000,'is_subtype'}|[[{'var',1000,'This'}|[{'type',1000,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1007
		'spec' =
		    %% Line 1007
		    [{{'getRowLabelValue',2},[{'type',1007,'bounded_fun',[{'type',1007,'fun',[{'type',1007,'product',[{'var',1007,'This'}|[{'var',1007,'Row'}]]}|[{'remote_type',1007,[{'atom',1007,'unicode'}|[{'atom',1007,'charlist'}|[[]]]]}]]}|[[{'type',1008,'constraint',[{'atom',1008,'is_subtype'}|[[{'var',1008,'This'}|[{'type',1008,'wxGrid',[]}]]]]}|[{'type',1008,'constraint',[{'atom',1008,'is_subtype'}|[[{'var',1008,'Row'}|[{'type',1008,'integer',[]}]]]]}]]]]}]}],
		%% Line 1016
		'spec' =
		    %% Line 1016
		    [{{'getRowSize',2},[{'type',1016,'bounded_fun',[{'type',1016,'fun',[{'type',1016,'product',[{'var',1016,'This'}|[{'var',1016,'Row'}]]}|[{'type',1016,'integer',[]}]]}|[[{'type',1017,'constraint',[{'atom',1017,'is_subtype'}|[[{'var',1017,'This'}|[{'type',1017,'wxGrid',[]}]]]]}|[{'type',1017,'constraint',[{'atom',1017,'is_subtype'}|[[{'var',1017,'Row'}|[{'type',1017,'integer',[]}]]]]}]]]]}]}],
		%% Line 1025
		'spec' =
		    %% Line 1025
		    [{{'getScrollLineX',1},[{'type',1025,'bounded_fun',[{'type',1025,'fun',[{'type',1025,'product',[{'var',1025,'This'}]}|[{'type',1025,'integer',[]}]]}|[[{'type',1026,'constraint',[{'atom',1026,'is_subtype'}|[[{'var',1026,'This'}|[{'type',1026,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1033
		'spec' =
		    %% Line 1033
		    [{{'getScrollLineY',1},[{'type',1033,'bounded_fun',[{'type',1033,'fun',[{'type',1033,'product',[{'var',1033,'This'}]}|[{'type',1033,'integer',[]}]]}|[[{'type',1034,'constraint',[{'atom',1034,'is_subtype'}|[[{'var',1034,'This'}|[{'type',1034,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1041
		'spec' =
		    %% Line 1041
		    [{{'getSelectedCells',1},[{'type',1041,'bounded_fun',[{'type',1041,'fun',[{'type',1041,'product',[{'var',1041,'This'}]}|[{'type',1041,'list',[{'type',1041,'tuple',[{'ann_type',1041,[{'var',1041,'R'}|[{'type',1041,'integer',[]}]]}|[{'ann_type',1041,[{'var',1041,'C'}|[{'type',1041,'integer',[]}]]}]]}]}]]}|[[{'type',1042,'constraint',[{'atom',1042,'is_subtype'}|[[{'var',1042,'This'}|[{'type',1042,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1049
		'spec' =
		    %% Line 1049
		    [{{'getSelectedCols',1},[{'type',1049,'bounded_fun',[{'type',1049,'fun',[{'type',1049,'product',[{'var',1049,'This'}]}|[{'type',1049,'list',[{'type',1049,'integer',[]}]}]]}|[[{'type',1050,'constraint',[{'atom',1050,'is_subtype'}|[[{'var',1050,'This'}|[{'type',1050,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1057
		'spec' =
		    %% Line 1057
		    [{{'getSelectedRows',1},[{'type',1057,'bounded_fun',[{'type',1057,'fun',[{'type',1057,'product',[{'var',1057,'This'}]}|[{'type',1057,'list',[{'type',1057,'integer',[]}]}]]}|[[{'type',1058,'constraint',[{'atom',1058,'is_subtype'}|[[{'var',1058,'This'}|[{'type',1058,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1065
		'spec' =
		    %% Line 1065
		    [{{'getSelectionBackground',1},[{'type',1065,'bounded_fun',[{'type',1065,'fun',[{'type',1065,'product',[{'var',1065,'This'}]}|[{'remote_type',1065,[{'atom',1065,'wx'}|[{'atom',1065,'wx_colour4'}|[[]]]]}]]}|[[{'type',1066,'constraint',[{'atom',1066,'is_subtype'}|[[{'var',1066,'This'}|[{'type',1066,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1073
		'spec' =
		    %% Line 1073
		    [{{'getSelectionBlockTopLeft',1},[{'type',1073,'bounded_fun',[{'type',1073,'fun',[{'type',1073,'product',[{'var',1073,'This'}]}|[{'type',1073,'list',[{'type',1073,'tuple',[{'ann_type',1073,[{'var',1073,'R'}|[{'type',1073,'integer',[]}]]}|[{'ann_type',1073,[{'var',1073,'C'}|[{'type',1073,'integer',[]}]]}]]}]}]]}|[[{'type',1074,'constraint',[{'atom',1074,'is_subtype'}|[[{'var',1074,'This'}|[{'type',1074,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1081
		'spec' =
		    %% Line 1081
		    [{{'getSelectionBlockBottomRight',1},[{'type',1081,'bounded_fun',[{'type',1081,'fun',[{'type',1081,'product',[{'var',1081,'This'}]}|[{'type',1081,'list',[{'type',1081,'tuple',[{'ann_type',1081,[{'var',1081,'R'}|[{'type',1081,'integer',[]}]]}|[{'ann_type',1081,[{'var',1081,'C'}|[{'type',1081,'integer',[]}]]}]]}]}]]}|[[{'type',1082,'constraint',[{'atom',1082,'is_subtype'}|[[{'var',1082,'This'}|[{'type',1082,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1089
		'spec' =
		    %% Line 1089
		    [{{'getSelectionForeground',1},[{'type',1089,'bounded_fun',[{'type',1089,'fun',[{'type',1089,'product',[{'var',1089,'This'}]}|[{'remote_type',1089,[{'atom',1089,'wx'}|[{'atom',1089,'wx_colour4'}|[[]]]]}]]}|[[{'type',1090,'constraint',[{'atom',1090,'is_subtype'}|[[{'var',1090,'This'}|[{'type',1090,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1097
		'spec' =
		    %% Line 1097
		    [{{'getViewWidth',1},[{'type',1097,'bounded_fun',[{'type',1097,'fun',[{'type',1097,'product',[{'var',1097,'This'}]}|[{'type',1097,'integer',[]}]]}|[[{'type',1098,'constraint',[{'atom',1098,'is_subtype'}|[[{'var',1098,'This'}|[{'type',1098,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1105
		'spec' =
		    %% Line 1105
		    [{{'getGridWindow',1},[{'type',1105,'bounded_fun',[{'type',1105,'fun',[{'type',1105,'product',[{'var',1105,'This'}]}|[{'remote_type',1105,[{'atom',1105,'wxWindow'}|[{'atom',1105,'wxWindow'}|[[]]]]}]]}|[[{'type',1106,'constraint',[{'atom',1106,'is_subtype'}|[[{'var',1106,'This'}|[{'type',1106,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1113
		'spec' =
		    %% Line 1113
		    [{{'getGridRowLabelWindow',1},[{'type',1113,'bounded_fun',[{'type',1113,'fun',[{'type',1113,'product',[{'var',1113,'This'}]}|[{'remote_type',1113,[{'atom',1113,'wxWindow'}|[{'atom',1113,'wxWindow'}|[[]]]]}]]}|[[{'type',1114,'constraint',[{'atom',1114,'is_subtype'}|[[{'var',1114,'This'}|[{'type',1114,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1121
		'spec' =
		    %% Line 1121
		    [{{'getGridColLabelWindow',1},[{'type',1121,'bounded_fun',[{'type',1121,'fun',[{'type',1121,'product',[{'var',1121,'This'}]}|[{'remote_type',1121,[{'atom',1121,'wxWindow'}|[{'atom',1121,'wxWindow'}|[[]]]]}]]}|[[{'type',1122,'constraint',[{'atom',1122,'is_subtype'}|[[{'var',1122,'This'}|[{'type',1122,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1129
		'spec' =
		    %% Line 1129
		    [{{'getGridCornerLabelWindow',1},[{'type',1129,'bounded_fun',[{'type',1129,'fun',[{'type',1129,'product',[{'var',1129,'This'}]}|[{'remote_type',1129,[{'atom',1129,'wxWindow'}|[{'atom',1129,'wxWindow'}|[[]]]]}]]}|[[{'type',1130,'constraint',[{'atom',1130,'is_subtype'}|[[{'var',1130,'This'}|[{'type',1130,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1137
		'spec' =
		    %% Line 1137
		    [{{'hideCellEditControl',1},[{'type',1137,'bounded_fun',[{'type',1137,'fun',[{'type',1137,'product',[{'var',1137,'This'}]}|[{'atom',1137,'ok'}]]}|[[{'type',1138,'constraint',[{'atom',1138,'is_subtype'}|[[{'var',1138,'This'}|[{'type',1138,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1145
		'spec' =
		    %% Line 1145
		    [{{'insertCols',1},[{'type',1145,'bounded_fun',[{'type',1145,'fun',[{'type',1145,'product',[{'var',1145,'This'}]}|[{'type',1145,'boolean',[]}]]}|[[{'type',1146,'constraint',[{'atom',1146,'is_subtype'}|[[{'var',1146,'This'}|[{'type',1146,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1153
		'spec' =
		    %% Line 1153
		    [{{'insertCols',2},[{'type',1153,'bounded_fun',[{'type',1153,'fun',[{'type',1153,'product',[{'var',1153,'This'}|[{'type',1153,'list',[{'var',1153,'Option'}]}]]}|[{'type',1153,'boolean',[]}]]}|[[{'type',1154,'constraint',[{'atom',1154,'is_subtype'}|[[{'var',1154,'This'}|[{'type',1154,'wxGrid',[]}]]]]}|[{'type',1155,'constraint',[{'atom',1155,'is_subtype'}|[[{'var',1155,'Option'}|[{'type',1155,'union',[{'type',1155,'tuple',[{'atom',1155,'pos'}|[{'type',1155,'integer',[]}]]}|[{'type',1156,'tuple',[{'atom',1156,'numCols'}|[{'type',1156,'integer',[]}]]}|[{'type',1157,'tuple',[{'atom',1157,'updateLabels'}|[{'type',1157,'boolean',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 1170
		'spec' =
		    %% Line 1170
		    [{{'insertRows',1},[{'type',1170,'bounded_fun',[{'type',1170,'fun',[{'type',1170,'product',[{'var',1170,'This'}]}|[{'type',1170,'boolean',[]}]]}|[[{'type',1171,'constraint',[{'atom',1171,'is_subtype'}|[[{'var',1171,'This'}|[{'type',1171,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1178
		'spec' =
		    %% Line 1178
		    [{{'insertRows',2},[{'type',1178,'bounded_fun',[{'type',1178,'fun',[{'type',1178,'product',[{'var',1178,'This'}|[{'type',1178,'list',[{'var',1178,'Option'}]}]]}|[{'type',1178,'boolean',[]}]]}|[[{'type',1179,'constraint',[{'atom',1179,'is_subtype'}|[[{'var',1179,'This'}|[{'type',1179,'wxGrid',[]}]]]]}|[{'type',1180,'constraint',[{'atom',1180,'is_subtype'}|[[{'var',1180,'Option'}|[{'type',1180,'union',[{'type',1180,'tuple',[{'atom',1180,'pos'}|[{'type',1180,'integer',[]}]]}|[{'type',1181,'tuple',[{'atom',1181,'numRows'}|[{'type',1181,'integer',[]}]]}|[{'type',1182,'tuple',[{'atom',1182,'updateLabels'}|[{'type',1182,'boolean',[]}]]}]]]}]]]]}]]]]}]}],
		%% Line 1195
		'spec' =
		    %% Line 1195
		    [{{'isCellEditControlEnabled',1},[{'type',1195,'bounded_fun',[{'type',1195,'fun',[{'type',1195,'product',[{'var',1195,'This'}]}|[{'type',1195,'boolean',[]}]]}|[[{'type',1196,'constraint',[{'atom',1196,'is_subtype'}|[[{'var',1196,'This'}|[{'type',1196,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1203
		'spec' =
		    %% Line 1203
		    [{{'isCurrentCellReadOnly',1},[{'type',1203,'bounded_fun',[{'type',1203,'fun',[{'type',1203,'product',[{'var',1203,'This'}]}|[{'type',1203,'boolean',[]}]]}|[[{'type',1204,'constraint',[{'atom',1204,'is_subtype'}|[[{'var',1204,'This'}|[{'type',1204,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1211
		'spec' =
		    %% Line 1211
		    [{{'isEditable',1},[{'type',1211,'bounded_fun',[{'type',1211,'fun',[{'type',1211,'product',[{'var',1211,'This'}]}|[{'type',1211,'boolean',[]}]]}|[[{'type',1212,'constraint',[{'atom',1212,'is_subtype'}|[[{'var',1212,'This'}|[{'type',1212,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1219
		'spec' =
		    %% Line 1219
		    [{{'isInSelection',2},[{'type',1219,'bounded_fun',[{'type',1219,'fun',[{'type',1219,'product',[{'var',1219,'This'}|[{'var',1219,'Coords'}]]}|[{'type',1219,'boolean',[]}]]}|[[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'This'}|[{'type',1220,'wxGrid',[]}]]]]}|[{'type',1220,'constraint',[{'atom',1220,'is_subtype'}|[[{'var',1220,'Coords'}|[{'type',1220,'tuple',[{'ann_type',1220,[{'var',1220,'R'}|[{'type',1220,'integer',[]}]]}|[{'ann_type',1220,[{'var',1220,'C'}|[{'type',1220,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1228
		'spec' =
		    %% Line 1228
		    [{{'isInSelection',3},[{'type',1228,'bounded_fun',[{'type',1228,'fun',[{'type',1228,'product',[{'var',1228,'This'}|[{'var',1228,'Row'}|[{'var',1228,'Col'}]]]}|[{'type',1228,'boolean',[]}]]}|[[{'type',1229,'constraint',[{'atom',1229,'is_subtype'}|[[{'var',1229,'This'}|[{'type',1229,'wxGrid',[]}]]]]}|[{'type',1229,'constraint',[{'atom',1229,'is_subtype'}|[[{'var',1229,'Row'}|[{'type',1229,'integer',[]}]]]]}|[{'type',1229,'constraint',[{'atom',1229,'is_subtype'}|[[{'var',1229,'Col'}|[{'type',1229,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1237
		'spec' =
		    %% Line 1237
		    [{{'isReadOnly',3},[{'type',1237,'bounded_fun',[{'type',1237,'fun',[{'type',1237,'product',[{'var',1237,'This'}|[{'var',1237,'Row'}|[{'var',1237,'Col'}]]]}|[{'type',1237,'boolean',[]}]]}|[[{'type',1238,'constraint',[{'atom',1238,'is_subtype'}|[[{'var',1238,'This'}|[{'type',1238,'wxGrid',[]}]]]]}|[{'type',1238,'constraint',[{'atom',1238,'is_subtype'}|[[{'var',1238,'Row'}|[{'type',1238,'integer',[]}]]]]}|[{'type',1238,'constraint',[{'atom',1238,'is_subtype'}|[[{'var',1238,'Col'}|[{'type',1238,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1246
		'spec' =
		    %% Line 1246
		    [{{'isSelection',1},[{'type',1246,'bounded_fun',[{'type',1246,'fun',[{'type',1246,'product',[{'var',1246,'This'}]}|[{'type',1246,'boolean',[]}]]}|[[{'type',1247,'constraint',[{'atom',1247,'is_subtype'}|[[{'var',1247,'This'}|[{'type',1247,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1254
		'spec' =
		    %% Line 1254
		    [{{'isVisible',2},[{'type',1254,'bounded_fun',[{'type',1254,'fun',[{'type',1254,'product',[{'var',1254,'This'}|[{'var',1254,'Coords'}]]}|[{'type',1254,'boolean',[]}]]}|[[{'type',1255,'constraint',[{'atom',1255,'is_subtype'}|[[{'var',1255,'This'}|[{'type',1255,'wxGrid',[]}]]]]}|[{'type',1255,'constraint',[{'atom',1255,'is_subtype'}|[[{'var',1255,'Coords'}|[{'type',1255,'tuple',[{'ann_type',1255,[{'var',1255,'R'}|[{'type',1255,'integer',[]}]]}|[{'ann_type',1255,[{'var',1255,'C'}|[{'type',1255,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1267
		'spec' =
		    %% Line 1267
		    [{{'isVisible',3},[{'type',1267,'bounded_fun',[{'type',1267,'fun',[{'type',1267,'product',[{'var',1267,'This'}|[{'var',1267,'Row'}|[{'var',1267,'Col'}]]]}|[{'type',1267,'boolean',[]}]]}|[[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'This'}|[{'type',1268,'wxGrid',[]}]]]]}|[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'Row'}|[{'type',1268,'integer',[]}]]]]}|[{'type',1268,'constraint',[{'atom',1268,'is_subtype'}|[[{'var',1268,'Col'}|[{'type',1268,'integer',[]}]]]]}]]]]]}|[{'type',1269,'bounded_fun',[{'type',1269,'fun',[{'type',1269,'product',[{'var',1269,'This'}|[{'var',1269,'Coords'}|[{'type',1269,'list',[{'var',1269,'Option'}]}]]]}|[{'type',1269,'boolean',[]}]]}|[[{'type',1270,'constraint',[{'atom',1270,'is_subtype'}|[[{'var',1270,'This'}|[{'type',1270,'wxGrid',[]}]]]]}|[{'type',1270,'constraint',[{'atom',1270,'is_subtype'}|[[{'var',1270,'Coords'}|[{'type',1270,'tuple',[{'ann_type',1270,[{'var',1270,'R'}|[{'type',1270,'integer',[]}]]}|[{'ann_type',1270,[{'var',1270,'C'}|[{'type',1270,'integer',[]}]]}]]}]]]]}|[{'type',1271,'constraint',[{'atom',1271,'is_subtype'}|[[{'var',1271,'Option'}|[{'type',1271,'tuple',[{'atom',1271,'wholeCellVisible'}|[{'type',1271,'boolean',[]}]]}]]]]}]]]]]}]]}],
		%% Line 1286
		'spec' =
		    %% Line 1286
		    [{{'isVisible',4},[{'type',1286,'bounded_fun',[{'type',1286,'fun',[{'type',1286,'product',[{'var',1286,'This'}|[{'var',1286,'Row'}|[{'var',1286,'Col'}|[{'type',1286,'list',[{'var',1286,'Option'}]}]]]]}|[{'type',1286,'boolean',[]}]]}|[[{'type',1287,'constraint',[{'atom',1287,'is_subtype'}|[[{'var',1287,'This'}|[{'type',1287,'wxGrid',[]}]]]]}|[{'type',1287,'constraint',[{'atom',1287,'is_subtype'}|[[{'var',1287,'Row'}|[{'type',1287,'integer',[]}]]]]}|[{'type',1287,'constraint',[{'atom',1287,'is_subtype'}|[[{'var',1287,'Col'}|[{'type',1287,'integer',[]}]]]]}|[{'type',1288,'constraint',[{'atom',1288,'is_subtype'}|[[{'var',1288,'Option'}|[{'type',1288,'tuple',[{'atom',1288,'wholeCellVisible'}|[{'type',1288,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 1299
		'spec' =
		    %% Line 1299
		    [{{'makeCellVisible',2},[{'type',1299,'bounded_fun',[{'type',1299,'fun',[{'type',1299,'product',[{'var',1299,'This'}|[{'var',1299,'Coords'}]]}|[{'atom',1299,'ok'}]]}|[[{'type',1300,'constraint',[{'atom',1300,'is_subtype'}|[[{'var',1300,'This'}|[{'type',1300,'wxGrid',[]}]]]]}|[{'type',1300,'constraint',[{'atom',1300,'is_subtype'}|[[{'var',1300,'Coords'}|[{'type',1300,'tuple',[{'ann_type',1300,[{'var',1300,'R'}|[{'type',1300,'integer',[]}]]}|[{'ann_type',1300,[{'var',1300,'C'}|[{'type',1300,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 1308
		'spec' =
		    %% Line 1308
		    [{{'makeCellVisible',3},[{'type',1308,'bounded_fun',[{'type',1308,'fun',[{'type',1308,'product',[{'var',1308,'This'}|[{'var',1308,'Row'}|[{'var',1308,'Col'}]]]}|[{'atom',1308,'ok'}]]}|[[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'This'}|[{'type',1309,'wxGrid',[]}]]]]}|[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'Row'}|[{'type',1309,'integer',[]}]]]]}|[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'Col'}|[{'type',1309,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1317
		'spec' =
		    %% Line 1317
		    [{{'moveCursorDown',2},[{'type',1317,'bounded_fun',[{'type',1317,'fun',[{'type',1317,'product',[{'var',1317,'This'}|[{'var',1317,'ExpandSelection'}]]}|[{'type',1317,'boolean',[]}]]}|[[{'type',1318,'constraint',[{'atom',1318,'is_subtype'}|[[{'var',1318,'This'}|[{'type',1318,'wxGrid',[]}]]]]}|[{'type',1318,'constraint',[{'atom',1318,'is_subtype'}|[[{'var',1318,'ExpandSelection'}|[{'type',1318,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1326
		'spec' =
		    %% Line 1326
		    [{{'moveCursorLeft',2},[{'type',1326,'bounded_fun',[{'type',1326,'fun',[{'type',1326,'product',[{'var',1326,'This'}|[{'var',1326,'ExpandSelection'}]]}|[{'type',1326,'boolean',[]}]]}|[[{'type',1327,'constraint',[{'atom',1327,'is_subtype'}|[[{'var',1327,'This'}|[{'type',1327,'wxGrid',[]}]]]]}|[{'type',1327,'constraint',[{'atom',1327,'is_subtype'}|[[{'var',1327,'ExpandSelection'}|[{'type',1327,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1335
		'spec' =
		    %% Line 1335
		    [{{'moveCursorRight',2},[{'type',1335,'bounded_fun',[{'type',1335,'fun',[{'type',1335,'product',[{'var',1335,'This'}|[{'var',1335,'ExpandSelection'}]]}|[{'type',1335,'boolean',[]}]]}|[[{'type',1336,'constraint',[{'atom',1336,'is_subtype'}|[[{'var',1336,'This'}|[{'type',1336,'wxGrid',[]}]]]]}|[{'type',1336,'constraint',[{'atom',1336,'is_subtype'}|[[{'var',1336,'ExpandSelection'}|[{'type',1336,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1344
		'spec' =
		    %% Line 1344
		    [{{'moveCursorUp',2},[{'type',1344,'bounded_fun',[{'type',1344,'fun',[{'type',1344,'product',[{'var',1344,'This'}|[{'var',1344,'ExpandSelection'}]]}|[{'type',1344,'boolean',[]}]]}|[[{'type',1345,'constraint',[{'atom',1345,'is_subtype'}|[[{'var',1345,'This'}|[{'type',1345,'wxGrid',[]}]]]]}|[{'type',1345,'constraint',[{'atom',1345,'is_subtype'}|[[{'var',1345,'ExpandSelection'}|[{'type',1345,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1353
		'spec' =
		    %% Line 1353
		    [{{'moveCursorDownBlock',2},[{'type',1353,'bounded_fun',[{'type',1353,'fun',[{'type',1353,'product',[{'var',1353,'This'}|[{'var',1353,'ExpandSelection'}]]}|[{'type',1353,'boolean',[]}]]}|[[{'type',1354,'constraint',[{'atom',1354,'is_subtype'}|[[{'var',1354,'This'}|[{'type',1354,'wxGrid',[]}]]]]}|[{'type',1354,'constraint',[{'atom',1354,'is_subtype'}|[[{'var',1354,'ExpandSelection'}|[{'type',1354,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1362
		'spec' =
		    %% Line 1362
		    [{{'moveCursorLeftBlock',2},[{'type',1362,'bounded_fun',[{'type',1362,'fun',[{'type',1362,'product',[{'var',1362,'This'}|[{'var',1362,'ExpandSelection'}]]}|[{'type',1362,'boolean',[]}]]}|[[{'type',1363,'constraint',[{'atom',1363,'is_subtype'}|[[{'var',1363,'This'}|[{'type',1363,'wxGrid',[]}]]]]}|[{'type',1363,'constraint',[{'atom',1363,'is_subtype'}|[[{'var',1363,'ExpandSelection'}|[{'type',1363,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1371
		'spec' =
		    %% Line 1371
		    [{{'moveCursorRightBlock',2},[{'type',1371,'bounded_fun',[{'type',1371,'fun',[{'type',1371,'product',[{'var',1371,'This'}|[{'var',1371,'ExpandSelection'}]]}|[{'type',1371,'boolean',[]}]]}|[[{'type',1372,'constraint',[{'atom',1372,'is_subtype'}|[[{'var',1372,'This'}|[{'type',1372,'wxGrid',[]}]]]]}|[{'type',1372,'constraint',[{'atom',1372,'is_subtype'}|[[{'var',1372,'ExpandSelection'}|[{'type',1372,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1380
		'spec' =
		    %% Line 1380
		    [{{'moveCursorUpBlock',2},[{'type',1380,'bounded_fun',[{'type',1380,'fun',[{'type',1380,'product',[{'var',1380,'This'}|[{'var',1380,'ExpandSelection'}]]}|[{'type',1380,'boolean',[]}]]}|[[{'type',1381,'constraint',[{'atom',1381,'is_subtype'}|[[{'var',1381,'This'}|[{'type',1381,'wxGrid',[]}]]]]}|[{'type',1381,'constraint',[{'atom',1381,'is_subtype'}|[[{'var',1381,'ExpandSelection'}|[{'type',1381,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1389
		'spec' =
		    %% Line 1389
		    [{{'movePageDown',1},[{'type',1389,'bounded_fun',[{'type',1389,'fun',[{'type',1389,'product',[{'var',1389,'This'}]}|[{'type',1389,'boolean',[]}]]}|[[{'type',1390,'constraint',[{'atom',1390,'is_subtype'}|[[{'var',1390,'This'}|[{'type',1390,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1397
		'spec' =
		    %% Line 1397
		    [{{'movePageUp',1},[{'type',1397,'bounded_fun',[{'type',1397,'fun',[{'type',1397,'product',[{'var',1397,'This'}]}|[{'type',1397,'boolean',[]}]]}|[[{'type',1398,'constraint',[{'atom',1398,'is_subtype'}|[[{'var',1398,'This'}|[{'type',1398,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1405
		'spec' =
		    %% Line 1405
		    [{{'registerDataType',4},[{'type',1405,'bounded_fun',[{'type',1405,'fun',[{'type',1405,'product',[{'var',1405,'This'}|[{'var',1405,'TypeName'}|[{'var',1405,'Renderer'}|[{'var',1405,'Editor'}]]]]}|[{'atom',1405,'ok'}]]}|[[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'This'}|[{'type',1406,'wxGrid',[]}]]]]}|[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'TypeName'}|[{'remote_type',1406,[{'atom',1406,'unicode'}|[{'atom',1406,'chardata'}|[[]]]]}]]]]}|[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'Renderer'}|[{'remote_type',1406,[{'atom',1406,'wxGridCellRenderer'}|[{'atom',1406,'wxGridCellRenderer'}|[[]]]]}]]]]}|[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'Editor'}|[{'remote_type',1406,[{'atom',1406,'wxGridCellEditor'}|[{'atom',1406,'wxGridCellEditor'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 1417
		'spec' =
		    %% Line 1417
		    [{{'saveEditControlValue',1},[{'type',1417,'bounded_fun',[{'type',1417,'fun',[{'type',1417,'product',[{'var',1417,'This'}]}|[{'atom',1417,'ok'}]]}|[[{'type',1418,'constraint',[{'atom',1418,'is_subtype'}|[[{'var',1418,'This'}|[{'type',1418,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1425
		'spec' =
		    %% Line 1425
		    [{{'selectAll',1},[{'type',1425,'bounded_fun',[{'type',1425,'fun',[{'type',1425,'product',[{'var',1425,'This'}]}|[{'atom',1425,'ok'}]]}|[[{'type',1426,'constraint',[{'atom',1426,'is_subtype'}|[[{'var',1426,'This'}|[{'type',1426,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 1433
		'spec' =
		    %% Line 1433
		    [{{'selectBlock',3},[{'type',1433,'bounded_fun',[{'type',1433,'fun',[{'type',1433,'product',[{'var',1433,'This'}|[{'var',1433,'TopLeft'}|[{'var',1433,'BottomRight'}]]]}|[{'atom',1433,'ok'}]]}|[[{'type',1434,'constraint',[{'atom',1434,'is_subtype'}|[[{'var',1434,'This'}|[{'type',1434,'wxGrid',[]}]]]]}|[{'type',1434,'constraint',[{'atom',1434,'is_subtype'}|[[{'var',1434,'TopLeft'}|[{'type',1434,'tuple',[{'ann_type',1434,[{'var',1434,'R'}|[{'type',1434,'integer',[]}]]}|[{'ann_type',1434,[{'var',1434,'C'}|[{'type',1434,'integer',[]}]]}]]}]]]]}|[{'type',1434,'constraint',[{'atom',1434,'is_subtype'}|[[{'var',1434,'BottomRight'}|[{'type',1434,'tuple',[{'ann_type',1434,[{'var',1434,'R'}|[{'type',1434,'integer',[]}]]}|[{'ann_type',1434,[{'var',1434,'C'}|[{'type',1434,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 1441
		'spec' =
		    %% Line 1441
		    [{{'selectBlock',4},[{'type',1441,'bounded_fun',[{'type',1441,'fun',[{'type',1441,'product',[{'var',1441,'This'}|[{'var',1441,'TopLeft'}|[{'var',1441,'BottomRight'}|[{'type',1441,'list',[{'var',1441,'Option'}]}]]]]}|[{'atom',1441,'ok'}]]}|[[{'type',1442,'constraint',[{'atom',1442,'is_subtype'}|[[{'var',1442,'This'}|[{'type',1442,'wxGrid',[]}]]]]}|[{'type',1442,'constraint',[{'atom',1442,'is_subtype'}|[[{'var',1442,'TopLeft'}|[{'type',1442,'tuple',[{'ann_type',1442,[{'var',1442,'R'}|[{'type',1442,'integer',[]}]]}|[{'ann_type',1442,[{'var',1442,'C'}|[{'type',1442,'integer',[]}]]}]]}]]]]}|[{'type',1442,'constraint',[{'atom',1442,'is_subtype'}|[[{'var',1442,'BottomRight'}|[{'type',1442,'tuple',[{'ann_type',1442,[{'var',1442,'R'}|[{'type',1442,'integer',[]}]]}|[{'ann_type',1442,[{'var',1442,'C'}|[{'type',1442,'integer',[]}]]}]]}]]]]}|[{'type',1443,'constraint',[{'atom',1443,'is_subtype'}|[[{'var',1443,'Option'}|[{'type',1443,'tuple',[{'atom',1443,'addToSelected'}|[{'type',1443,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 1454
		'spec' =
		    %% Line 1454
		    [{{'selectBlock',5},[{'type',1454,'bounded_fun',[{'type',1454,'fun',[{'type',1454,'product',[{'var',1454,'This'}|[{'var',1454,'TopRow'}|[{'var',1454,'LeftCol'}|[{'var',1454,'BottomRow'}|[{'var',1454,'RightCol'}]]]]]}|[{'atom',1454,'ok'}]]}|[[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'This'}|[{'type',1455,'wxGrid',[]}]]]]}|[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'TopRow'}|[{'type',1455,'integer',[]}]]]]}|[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'LeftCol'}|[{'type',1455,'integer',[]}]]]]}|[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'BottomRow'}|[{'type',1455,'integer',[]}]]]]}|[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'RightCol'}|[{'type',1455,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1462
		'spec' =
		    %% Line 1462
		    [{{'selectBlock',6},[{'type',1462,'bounded_fun',[{'type',1462,'fun',[{'type',1462,'product',[{'var',1462,'This'}|[{'var',1462,'TopRow'}|[{'var',1462,'LeftCol'}|[{'var',1462,'BottomRow'}|[{'var',1462,'RightCol'}|[{'type',1462,'list',[{'var',1462,'Option'}]}]]]]]]}|[{'atom',1462,'ok'}]]}|[[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'This'}|[{'type',1463,'wxGrid',[]}]]]]}|[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'TopRow'}|[{'type',1463,'integer',[]}]]]]}|[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'LeftCol'}|[{'type',1463,'integer',[]}]]]]}|[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'BottomRow'}|[{'type',1463,'integer',[]}]]]]}|[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'RightCol'}|[{'type',1463,'integer',[]}]]]]}|[{'type',1464,'constraint',[{'atom',1464,'is_subtype'}|[[{'var',1464,'Option'}|[{'type',1464,'tuple',[{'atom',1464,'addToSelected'}|[{'type',1464,'boolean',[]}]]}]]]]}]]]]]]]]}]}],
		%% Line 1475
		'spec' =
		    %% Line 1475
		    [{{'selectCol',2},[{'type',1475,'bounded_fun',[{'type',1475,'fun',[{'type',1475,'product',[{'var',1475,'This'}|[{'var',1475,'Col'}]]}|[{'atom',1475,'ok'}]]}|[[{'type',1476,'constraint',[{'atom',1476,'is_subtype'}|[[{'var',1476,'This'}|[{'type',1476,'wxGrid',[]}]]]]}|[{'type',1476,'constraint',[{'atom',1476,'is_subtype'}|[[{'var',1476,'Col'}|[{'type',1476,'integer',[]}]]]]}]]]]}]}],
		%% Line 1483
		'spec' =
		    %% Line 1483
		    [{{'selectCol',3},[{'type',1483,'bounded_fun',[{'type',1483,'fun',[{'type',1483,'product',[{'var',1483,'This'}|[{'var',1483,'Col'}|[{'type',1483,'list',[{'var',1483,'Option'}]}]]]}|[{'atom',1483,'ok'}]]}|[[{'type',1484,'constraint',[{'atom',1484,'is_subtype'}|[[{'var',1484,'This'}|[{'type',1484,'wxGrid',[]}]]]]}|[{'type',1484,'constraint',[{'atom',1484,'is_subtype'}|[[{'var',1484,'Col'}|[{'type',1484,'integer',[]}]]]]}|[{'type',1485,'constraint',[{'atom',1485,'is_subtype'}|[[{'var',1485,'Option'}|[{'type',1485,'tuple',[{'atom',1485,'addToSelected'}|[{'type',1485,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1496
		'spec' =
		    %% Line 1496
		    [{{'selectRow',2},[{'type',1496,'bounded_fun',[{'type',1496,'fun',[{'type',1496,'product',[{'var',1496,'This'}|[{'var',1496,'Row'}]]}|[{'atom',1496,'ok'}]]}|[[{'type',1497,'constraint',[{'atom',1497,'is_subtype'}|[[{'var',1497,'This'}|[{'type',1497,'wxGrid',[]}]]]]}|[{'type',1497,'constraint',[{'atom',1497,'is_subtype'}|[[{'var',1497,'Row'}|[{'type',1497,'integer',[]}]]]]}]]]]}]}],
		%% Line 1504
		'spec' =
		    %% Line 1504
		    [{{'selectRow',3},[{'type',1504,'bounded_fun',[{'type',1504,'fun',[{'type',1504,'product',[{'var',1504,'This'}|[{'var',1504,'Row'}|[{'type',1504,'list',[{'var',1504,'Option'}]}]]]}|[{'atom',1504,'ok'}]]}|[[{'type',1505,'constraint',[{'atom',1505,'is_subtype'}|[[{'var',1505,'This'}|[{'type',1505,'wxGrid',[]}]]]]}|[{'type',1505,'constraint',[{'atom',1505,'is_subtype'}|[[{'var',1505,'Row'}|[{'type',1505,'integer',[]}]]]]}|[{'type',1506,'constraint',[{'atom',1506,'is_subtype'}|[[{'var',1506,'Option'}|[{'type',1506,'tuple',[{'atom',1506,'addToSelected'}|[{'type',1506,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1517
		'spec' =
		    %% Line 1517
		    [{{'setCellAlignment',2},[{'type',1517,'bounded_fun',[{'type',1517,'fun',[{'type',1517,'product',[{'var',1517,'This'}|[{'var',1517,'Align'}]]}|[{'atom',1517,'ok'}]]}|[[{'type',1518,'constraint',[{'atom',1518,'is_subtype'}|[[{'var',1518,'This'}|[{'type',1518,'wxGrid',[]}]]]]}|[{'type',1518,'constraint',[{'atom',1518,'is_subtype'}|[[{'var',1518,'Align'}|[{'type',1518,'integer',[]}]]]]}]]]]}]}],
		%% Line 1526
		'spec' =
		    %% Line 1526
		    [{{'setCellAlignment',4},[{'type',1526,'bounded_fun',[{'type',1526,'fun',[{'type',1526,'product',[{'var',1526,'This'}|[{'var',1526,'Align'}|[{'var',1526,'Row'}|[{'var',1526,'Col'}]]]]}|[{'atom',1526,'ok'}]]}|[[{'type',1527,'constraint',[{'atom',1527,'is_subtype'}|[[{'var',1527,'This'}|[{'type',1527,'wxGrid',[]}]]]]}|[{'type',1527,'constraint',[{'atom',1527,'is_subtype'}|[[{'var',1527,'Align'}|[{'type',1527,'integer',[]}]]]]}|[{'type',1527,'constraint',[{'atom',1527,'is_subtype'}|[[{'var',1527,'Row'}|[{'type',1527,'integer',[]}]]]]}|[{'type',1527,'constraint',[{'atom',1527,'is_subtype'}|[[{'var',1527,'Col'}|[{'type',1527,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 1535
		'spec' =
		    %% Line 1535
		    [{{'setCellAlignment',5},[{'type',1535,'bounded_fun',[{'type',1535,'fun',[{'type',1535,'product',[{'var',1535,'This'}|[{'var',1535,'Row'}|[{'var',1535,'Col'}|[{'var',1535,'Horiz'}|[{'var',1535,'Vert'}]]]]]}|[{'atom',1535,'ok'}]]}|[[{'type',1536,'constraint',[{'atom',1536,'is_subtype'}|[[{'var',1536,'This'}|[{'type',1536,'wxGrid',[]}]]]]}|[{'type',1536,'constraint',[{'atom',1536,'is_subtype'}|[[{'var',1536,'Row'}|[{'type',1536,'integer',[]}]]]]}|[{'type',1536,'constraint',[{'atom',1536,'is_subtype'}|[[{'var',1536,'Col'}|[{'type',1536,'integer',[]}]]]]}|[{'type',1536,'constraint',[{'atom',1536,'is_subtype'}|[[{'var',1536,'Horiz'}|[{'type',1536,'integer',[]}]]]]}|[{'type',1536,'constraint',[{'atom',1536,'is_subtype'}|[[{'var',1536,'Vert'}|[{'type',1536,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 1544
		'spec' =
		    %% Line 1544
		    [{{'setCellBackgroundColour',2},[{'type',1544,'bounded_fun',[{'type',1544,'fun',[{'type',1544,'product',[{'var',1544,'This'}|[{'var',1544,'Col'}]]}|[{'atom',1544,'ok'}]]}|[[{'type',1545,'constraint',[{'atom',1545,'is_subtype'}|[[{'var',1545,'This'}|[{'type',1545,'wxGrid',[]}]]]]}|[{'type',1545,'constraint',[{'atom',1545,'is_subtype'}|[[{'var',1545,'Col'}|[{'remote_type',1545,[{'atom',1545,'wx'}|[{'atom',1545,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1557
		'spec' =
		    %% Line 1557
		    [{{'setCellBackgroundColour',4},[{'type',1557,'bounded_fun',[{'type',1557,'fun',[{'type',1557,'product',[{'var',1557,'This'}|[{'var',1557,'Row'}|[{'var',1557,'Col'}|[{'var',1557,'Val'}]]]]}|[{'atom',1557,'ok'}]]}|[[{'type',1558,'constraint',[{'atom',1558,'is_subtype'}|[[{'var',1558,'This'}|[{'type',1558,'wxGrid',[]}]]]]}|[{'type',1558,'constraint',[{'atom',1558,'is_subtype'}|[[{'var',1558,'Row'}|[{'type',1558,'integer',[]}]]]]}|[{'type',1558,'constraint',[{'atom',1558,'is_subtype'}|[[{'var',1558,'Col'}|[{'type',1558,'integer',[]}]]]]}|[{'type',1558,'constraint',[{'atom',1558,'is_subtype'}|[[{'var',1558,'Val'}|[{'remote_type',1558,[{'atom',1558,'wx'}|[{'atom',1558,'wx_colour'}|[[]]]]}]]]]}]]]]]]}|[{'type',1559,'bounded_fun',[{'type',1559,'fun',[{'type',1559,'product',[{'var',1559,'This'}|[{'var',1559,'Colour'}|[{'var',1559,'Row'}|[{'var',1559,'Col'}]]]]}|[{'atom',1559,'ok'}]]}|[[{'type',1560,'constraint',[{'atom',1560,'is_subtype'}|[[{'var',1560,'This'}|[{'type',1560,'wxGrid',[]}]]]]}|[{'type',1560,'constraint',[{'atom',1560,'is_subtype'}|[[{'var',1560,'Colour'}|[{'remote_type',1560,[{'atom',1560,'wx'}|[{'atom',1560,'wx_colour'}|[[]]]]}]]]]}|[{'type',1560,'constraint',[{'atom',1560,'is_subtype'}|[[{'var',1560,'Row'}|[{'type',1560,'integer',[]}]]]]}|[{'type',1560,'constraint',[{'atom',1560,'is_subtype'}|[[{'var',1560,'Col'}|[{'type',1560,'integer',[]}]]]]}]]]]]]}]]}],
		%% Line 1573
		'spec' =
		    %% Line 1573
		    [{{'setCellEditor',4},[{'type',1573,'bounded_fun',[{'type',1573,'fun',[{'type',1573,'product',[{'var',1573,'This'}|[{'var',1573,'Row'}|[{'var',1573,'Col'}|[{'var',1573,'Editor'}]]]]}|[{'atom',1573,'ok'}]]}|[[{'type',1574,'constraint',[{'atom',1574,'is_subtype'}|[[{'var',1574,'This'}|[{'type',1574,'wxGrid',[]}]]]]}|[{'type',1574,'constraint',[{'atom',1574,'is_subtype'}|[[{'var',1574,'Row'}|[{'type',1574,'integer',[]}]]]]}|[{'type',1574,'constraint',[{'atom',1574,'is_subtype'}|[[{'var',1574,'Col'}|[{'type',1574,'integer',[]}]]]]}|[{'type',1574,'constraint',[{'atom',1574,'is_subtype'}|[[{'var',1574,'Editor'}|[{'remote_type',1574,[{'atom',1574,'wxGridCellEditor'}|[{'atom',1574,'wxGridCellEditor'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 1583
		'spec' =
		    %% Line 1583
		    [{{'setCellFont',4},[{'type',1583,'bounded_fun',[{'type',1583,'fun',[{'type',1583,'product',[{'var',1583,'This'}|[{'var',1583,'Row'}|[{'var',1583,'Col'}|[{'var',1583,'Val'}]]]]}|[{'atom',1583,'ok'}]]}|[[{'type',1584,'constraint',[{'atom',1584,'is_subtype'}|[[{'var',1584,'This'}|[{'type',1584,'wxGrid',[]}]]]]}|[{'type',1584,'constraint',[{'atom',1584,'is_subtype'}|[[{'var',1584,'Row'}|[{'type',1584,'integer',[]}]]]]}|[{'type',1584,'constraint',[{'atom',1584,'is_subtype'}|[[{'var',1584,'Col'}|[{'type',1584,'integer',[]}]]]]}|[{'type',1584,'constraint',[{'atom',1584,'is_subtype'}|[[{'var',1584,'Val'}|[{'remote_type',1584,[{'atom',1584,'wxFont'}|[{'atom',1584,'wxFont'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 1593
		'spec' =
		    %% Line 1593
		    [{{'setCellRenderer',4},[{'type',1593,'bounded_fun',[{'type',1593,'fun',[{'type',1593,'product',[{'var',1593,'This'}|[{'var',1593,'Row'}|[{'var',1593,'Col'}|[{'var',1593,'Renderer'}]]]]}|[{'atom',1593,'ok'}]]}|[[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'This'}|[{'type',1594,'wxGrid',[]}]]]]}|[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'Row'}|[{'type',1594,'integer',[]}]]]]}|[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'Col'}|[{'type',1594,'integer',[]}]]]]}|[{'type',1594,'constraint',[{'atom',1594,'is_subtype'}|[[{'var',1594,'Renderer'}|[{'remote_type',1594,[{'atom',1594,'wxGridCellRenderer'}|[{'atom',1594,'wxGridCellRenderer'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 1603
		'spec' =
		    %% Line 1603
		    [{{'setCellTextColour',2},[{'type',1603,'bounded_fun',[{'type',1603,'fun',[{'type',1603,'product',[{'var',1603,'This'}|[{'var',1603,'Col'}]]}|[{'atom',1603,'ok'}]]}|[[{'type',1604,'constraint',[{'atom',1604,'is_subtype'}|[[{'var',1604,'This'}|[{'type',1604,'wxGrid',[]}]]]]}|[{'type',1604,'constraint',[{'atom',1604,'is_subtype'}|[[{'var',1604,'Col'}|[{'remote_type',1604,[{'atom',1604,'wx'}|[{'atom',1604,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1616
		'spec' =
		    %% Line 1616
		    [{{'setCellTextColour',4},[{'type',1616,'bounded_fun',[{'type',1616,'fun',[{'type',1616,'product',[{'var',1616,'This'}|[{'var',1616,'Row'}|[{'var',1616,'Col'}|[{'var',1616,'Val'}]]]]}|[{'atom',1616,'ok'}]]}|[[{'type',1617,'constraint',[{'atom',1617,'is_subtype'}|[[{'var',1617,'This'}|[{'type',1617,'wxGrid',[]}]]]]}|[{'type',1617,'constraint',[{'atom',1617,'is_subtype'}|[[{'var',1617,'Row'}|[{'type',1617,'integer',[]}]]]]}|[{'type',1617,'constraint',[{'atom',1617,'is_subtype'}|[[{'var',1617,'Col'}|[{'type',1617,'integer',[]}]]]]}|[{'type',1617,'constraint',[{'atom',1617,'is_subtype'}|[[{'var',1617,'Val'}|[{'remote_type',1617,[{'atom',1617,'wx'}|[{'atom',1617,'wx_colour'}|[[]]]]}]]]]}]]]]]]}|[{'type',1618,'bounded_fun',[{'type',1618,'fun',[{'type',1618,'product',[{'var',1618,'This'}|[{'var',1618,'Val'}|[{'var',1618,'Row'}|[{'var',1618,'Col'}]]]]}|[{'atom',1618,'ok'}]]}|[[{'type',1619,'constraint',[{'atom',1619,'is_subtype'}|[[{'var',1619,'This'}|[{'type',1619,'wxGrid',[]}]]]]}|[{'type',1619,'constraint',[{'atom',1619,'is_subtype'}|[[{'var',1619,'Val'}|[{'remote_type',1619,[{'atom',1619,'wx'}|[{'atom',1619,'wx_colour'}|[[]]]]}]]]]}|[{'type',1619,'constraint',[{'atom',1619,'is_subtype'}|[[{'var',1619,'Row'}|[{'type',1619,'integer',[]}]]]]}|[{'type',1619,'constraint',[{'atom',1619,'is_subtype'}|[[{'var',1619,'Col'}|[{'type',1619,'integer',[]}]]]]}]]]]]]}]]}],
		%% Line 1632
		'spec' =
		    %% Line 1632
		    [{{'setCellValue',3},[{'type',1632,'bounded_fun',[{'type',1632,'fun',[{'type',1632,'product',[{'var',1632,'This'}|[{'var',1632,'Coords'}|[{'var',1632,'S'}]]]}|[{'atom',1632,'ok'}]]}|[[{'type',1633,'constraint',[{'atom',1633,'is_subtype'}|[[{'var',1633,'This'}|[{'type',1633,'wxGrid',[]}]]]]}|[{'type',1633,'constraint',[{'atom',1633,'is_subtype'}|[[{'var',1633,'Coords'}|[{'type',1633,'tuple',[{'ann_type',1633,[{'var',1633,'R'}|[{'type',1633,'integer',[]}]]}|[{'ann_type',1633,[{'var',1633,'C'}|[{'type',1633,'integer',[]}]]}]]}]]]]}|[{'type',1633,'constraint',[{'atom',1633,'is_subtype'}|[[{'var',1633,'S'}|[{'remote_type',1633,[{'atom',1633,'unicode'}|[{'atom',1633,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1646
		'spec' =
		    %% Line 1646
		    [{{'setCellValue',4},[{'type',1646,'bounded_fun',[{'type',1646,'fun',[{'type',1646,'product',[{'var',1646,'This'}|[{'var',1646,'Row'}|[{'var',1646,'Col'}|[{'var',1646,'S'}]]]]}|[{'atom',1646,'ok'}]]}|[[{'type',1647,'constraint',[{'atom',1647,'is_subtype'}|[[{'var',1647,'This'}|[{'type',1647,'wxGrid',[]}]]]]}|[{'type',1647,'constraint',[{'atom',1647,'is_subtype'}|[[{'var',1647,'Row'}|[{'type',1647,'integer',[]}]]]]}|[{'type',1647,'constraint',[{'atom',1647,'is_subtype'}|[[{'var',1647,'Col'}|[{'type',1647,'integer',[]}]]]]}|[{'type',1647,'constraint',[{'atom',1647,'is_subtype'}|[[{'var',1647,'S'}|[{'remote_type',1647,[{'atom',1647,'unicode'}|[{'atom',1647,'chardata'}|[[]]]]}]]]]}]]]]]]}|[{'type',1648,'bounded_fun',[{'type',1648,'fun',[{'type',1648,'product',[{'var',1648,'This'}|[{'var',1648,'Val'}|[{'var',1648,'Row'}|[{'var',1648,'Col'}]]]]}|[{'atom',1648,'ok'}]]}|[[{'type',1649,'constraint',[{'atom',1649,'is_subtype'}|[[{'var',1649,'This'}|[{'type',1649,'wxGrid',[]}]]]]}|[{'type',1649,'constraint',[{'atom',1649,'is_subtype'}|[[{'var',1649,'Val'}|[{'remote_type',1649,[{'atom',1649,'unicode'}|[{'atom',1649,'chardata'}|[[]]]]}]]]]}|[{'type',1649,'constraint',[{'atom',1649,'is_subtype'}|[[{'var',1649,'Row'}|[{'type',1649,'integer',[]}]]]]}|[{'type',1649,'constraint',[{'atom',1649,'is_subtype'}|[[{'var',1649,'Col'}|[{'type',1649,'integer',[]}]]]]}]]]]]]}]]}],
		%% Line 1664
		'spec' =
		    %% Line 1664
		    [{{'setColAttr',3},[{'type',1664,'bounded_fun',[{'type',1664,'fun',[{'type',1664,'product',[{'var',1664,'This'}|[{'var',1664,'Col'}|[{'var',1664,'Attr'}]]]}|[{'atom',1664,'ok'}]]}|[[{'type',1665,'constraint',[{'atom',1665,'is_subtype'}|[[{'var',1665,'This'}|[{'type',1665,'wxGrid',[]}]]]]}|[{'type',1665,'constraint',[{'atom',1665,'is_subtype'}|[[{'var',1665,'Col'}|[{'type',1665,'integer',[]}]]]]}|[{'type',1665,'constraint',[{'atom',1665,'is_subtype'}|[[{'var',1665,'Attr'}|[{'remote_type',1665,[{'atom',1665,'wxGridCellAttr'}|[{'atom',1665,'wxGridCellAttr'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1674
		'spec' =
		    %% Line 1674
		    [{{'setColFormatBool',2},[{'type',1674,'bounded_fun',[{'type',1674,'fun',[{'type',1674,'product',[{'var',1674,'This'}|[{'var',1674,'Col'}]]}|[{'atom',1674,'ok'}]]}|[[{'type',1675,'constraint',[{'atom',1675,'is_subtype'}|[[{'var',1675,'This'}|[{'type',1675,'wxGrid',[]}]]]]}|[{'type',1675,'constraint',[{'atom',1675,'is_subtype'}|[[{'var',1675,'Col'}|[{'type',1675,'integer',[]}]]]]}]]]]}]}],
		%% Line 1683
		'spec' =
		    %% Line 1683
		    [{{'setColFormatNumber',2},[{'type',1683,'bounded_fun',[{'type',1683,'fun',[{'type',1683,'product',[{'var',1683,'This'}|[{'var',1683,'Col'}]]}|[{'atom',1683,'ok'}]]}|[[{'type',1684,'constraint',[{'atom',1684,'is_subtype'}|[[{'var',1684,'This'}|[{'type',1684,'wxGrid',[]}]]]]}|[{'type',1684,'constraint',[{'atom',1684,'is_subtype'}|[[{'var',1684,'Col'}|[{'type',1684,'integer',[]}]]]]}]]]]}]}],
		%% Line 1692
		'spec' =
		    %% Line 1692
		    [{{'setColFormatFloat',2},[{'type',1692,'bounded_fun',[{'type',1692,'fun',[{'type',1692,'product',[{'var',1692,'This'}|[{'var',1692,'Col'}]]}|[{'atom',1692,'ok'}]]}|[[{'type',1693,'constraint',[{'atom',1693,'is_subtype'}|[[{'var',1693,'This'}|[{'type',1693,'wxGrid',[]}]]]]}|[{'type',1693,'constraint',[{'atom',1693,'is_subtype'}|[[{'var',1693,'Col'}|[{'type',1693,'integer',[]}]]]]}]]]]}]}],
		%% Line 1700
		'spec' =
		    %% Line 1700
		    [{{'setColFormatFloat',3},[{'type',1700,'bounded_fun',[{'type',1700,'fun',[{'type',1700,'product',[{'var',1700,'This'}|[{'var',1700,'Col'}|[{'type',1700,'list',[{'var',1700,'Option'}]}]]]}|[{'atom',1700,'ok'}]]}|[[{'type',1701,'constraint',[{'atom',1701,'is_subtype'}|[[{'var',1701,'This'}|[{'type',1701,'wxGrid',[]}]]]]}|[{'type',1701,'constraint',[{'atom',1701,'is_subtype'}|[[{'var',1701,'Col'}|[{'type',1701,'integer',[]}]]]]}|[{'type',1702,'constraint',[{'atom',1702,'is_subtype'}|[[{'var',1702,'Option'}|[{'type',1702,'union',[{'type',1702,'tuple',[{'atom',1702,'width'}|[{'type',1702,'integer',[]}]]}|[{'type',1703,'tuple',[{'atom',1703,'precision'}|[{'type',1703,'integer',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 1715
		'spec' =
		    %% Line 1715
		    [{{'setColFormatCustom',3},[{'type',1715,'bounded_fun',[{'type',1715,'fun',[{'type',1715,'product',[{'var',1715,'This'}|[{'var',1715,'Col'}|[{'var',1715,'TypeName'}]]]}|[{'atom',1715,'ok'}]]}|[[{'type',1716,'constraint',[{'atom',1716,'is_subtype'}|[[{'var',1716,'This'}|[{'type',1716,'wxGrid',[]}]]]]}|[{'type',1716,'constraint',[{'atom',1716,'is_subtype'}|[[{'var',1716,'Col'}|[{'type',1716,'integer',[]}]]]]}|[{'type',1716,'constraint',[{'atom',1716,'is_subtype'}|[[{'var',1716,'TypeName'}|[{'remote_type',1716,[{'atom',1716,'unicode'}|[{'atom',1716,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1725
		'spec' =
		    %% Line 1725
		    [{{'setColLabelAlignment',3},[{'type',1725,'bounded_fun',[{'type',1725,'fun',[{'type',1725,'product',[{'var',1725,'This'}|[{'var',1725,'Horiz'}|[{'var',1725,'Vert'}]]]}|[{'atom',1725,'ok'}]]}|[[{'type',1726,'constraint',[{'atom',1726,'is_subtype'}|[[{'var',1726,'This'}|[{'type',1726,'wxGrid',[]}]]]]}|[{'type',1726,'constraint',[{'atom',1726,'is_subtype'}|[[{'var',1726,'Horiz'}|[{'type',1726,'integer',[]}]]]]}|[{'type',1726,'constraint',[{'atom',1726,'is_subtype'}|[[{'var',1726,'Vert'}|[{'type',1726,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1734
		'spec' =
		    %% Line 1734
		    [{{'setColLabelSize',2},[{'type',1734,'bounded_fun',[{'type',1734,'fun',[{'type',1734,'product',[{'var',1734,'This'}|[{'var',1734,'Height'}]]}|[{'atom',1734,'ok'}]]}|[[{'type',1735,'constraint',[{'atom',1735,'is_subtype'}|[[{'var',1735,'This'}|[{'type',1735,'wxGrid',[]}]]]]}|[{'type',1735,'constraint',[{'atom',1735,'is_subtype'}|[[{'var',1735,'Height'}|[{'type',1735,'integer',[]}]]]]}]]]]}]}],
		%% Line 1743
		'spec' =
		    %% Line 1743
		    [{{'setColLabelValue',3},[{'type',1743,'bounded_fun',[{'type',1743,'fun',[{'type',1743,'product',[{'var',1743,'This'}|[{'var',1743,'Col'}|[{'var',1743,'Val'}]]]}|[{'atom',1743,'ok'}]]}|[[{'type',1744,'constraint',[{'atom',1744,'is_subtype'}|[[{'var',1744,'This'}|[{'type',1744,'wxGrid',[]}]]]]}|[{'type',1744,'constraint',[{'atom',1744,'is_subtype'}|[[{'var',1744,'Col'}|[{'type',1744,'integer',[]}]]]]}|[{'type',1744,'constraint',[{'atom',1744,'is_subtype'}|[[{'var',1744,'Val'}|[{'remote_type',1744,[{'atom',1744,'unicode'}|[{'atom',1744,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1753
		'spec' =
		    %% Line 1753
		    [{{'setColMinimalWidth',3},[{'type',1753,'bounded_fun',[{'type',1753,'fun',[{'type',1753,'product',[{'var',1753,'This'}|[{'var',1753,'Col'}|[{'var',1753,'Width'}]]]}|[{'atom',1753,'ok'}]]}|[[{'type',1754,'constraint',[{'atom',1754,'is_subtype'}|[[{'var',1754,'This'}|[{'type',1754,'wxGrid',[]}]]]]}|[{'type',1754,'constraint',[{'atom',1754,'is_subtype'}|[[{'var',1754,'Col'}|[{'type',1754,'integer',[]}]]]]}|[{'type',1754,'constraint',[{'atom',1754,'is_subtype'}|[[{'var',1754,'Width'}|[{'type',1754,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1762
		'spec' =
		    %% Line 1762
		    [{{'setColMinimalAcceptableWidth',2},[{'type',1762,'bounded_fun',[{'type',1762,'fun',[{'type',1762,'product',[{'var',1762,'This'}|[{'var',1762,'Width'}]]}|[{'atom',1762,'ok'}]]}|[[{'type',1763,'constraint',[{'atom',1763,'is_subtype'}|[[{'var',1763,'This'}|[{'type',1763,'wxGrid',[]}]]]]}|[{'type',1763,'constraint',[{'atom',1763,'is_subtype'}|[[{'var',1763,'Width'}|[{'type',1763,'integer',[]}]]]]}]]]]}]}],
		%% Line 1771
		'spec' =
		    %% Line 1771
		    [{{'setColSize',3},[{'type',1771,'bounded_fun',[{'type',1771,'fun',[{'type',1771,'product',[{'var',1771,'This'}|[{'var',1771,'Col'}|[{'var',1771,'Width'}]]]}|[{'atom',1771,'ok'}]]}|[[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'This'}|[{'type',1772,'wxGrid',[]}]]]]}|[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'Col'}|[{'type',1772,'integer',[]}]]]]}|[{'type',1772,'constraint',[{'atom',1772,'is_subtype'}|[[{'var',1772,'Width'}|[{'type',1772,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1780
		'spec' =
		    %% Line 1780
		    [{{'setDefaultCellAlignment',3},[{'type',1780,'bounded_fun',[{'type',1780,'fun',[{'type',1780,'product',[{'var',1780,'This'}|[{'var',1780,'Horiz'}|[{'var',1780,'Vert'}]]]}|[{'atom',1780,'ok'}]]}|[[{'type',1781,'constraint',[{'atom',1781,'is_subtype'}|[[{'var',1781,'This'}|[{'type',1781,'wxGrid',[]}]]]]}|[{'type',1781,'constraint',[{'atom',1781,'is_subtype'}|[[{'var',1781,'Horiz'}|[{'type',1781,'integer',[]}]]]]}|[{'type',1781,'constraint',[{'atom',1781,'is_subtype'}|[[{'var',1781,'Vert'}|[{'type',1781,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1789
		'spec' =
		    %% Line 1789
		    [{{'setDefaultCellBackgroundColour',2},[{'type',1789,'bounded_fun',[{'type',1789,'fun',[{'type',1789,'product',[{'var',1789,'This'}|[{'var',1789,'Val'}]]}|[{'atom',1789,'ok'}]]}|[[{'type',1790,'constraint',[{'atom',1790,'is_subtype'}|[[{'var',1790,'This'}|[{'type',1790,'wxGrid',[]}]]]]}|[{'type',1790,'constraint',[{'atom',1790,'is_subtype'}|[[{'var',1790,'Val'}|[{'remote_type',1790,[{'atom',1790,'wx'}|[{'atom',1790,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1798
		'spec' =
		    %% Line 1798
		    [{{'setDefaultCellFont',2},[{'type',1798,'bounded_fun',[{'type',1798,'fun',[{'type',1798,'product',[{'var',1798,'This'}|[{'var',1798,'Val'}]]}|[{'atom',1798,'ok'}]]}|[[{'type',1799,'constraint',[{'atom',1799,'is_subtype'}|[[{'var',1799,'This'}|[{'type',1799,'wxGrid',[]}]]]]}|[{'type',1799,'constraint',[{'atom',1799,'is_subtype'}|[[{'var',1799,'Val'}|[{'remote_type',1799,[{'atom',1799,'wxFont'}|[{'atom',1799,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1807
		'spec' =
		    %% Line 1807
		    [{{'setDefaultCellTextColour',2},[{'type',1807,'bounded_fun',[{'type',1807,'fun',[{'type',1807,'product',[{'var',1807,'This'}|[{'var',1807,'Val'}]]}|[{'atom',1807,'ok'}]]}|[[{'type',1808,'constraint',[{'atom',1808,'is_subtype'}|[[{'var',1808,'This'}|[{'type',1808,'wxGrid',[]}]]]]}|[{'type',1808,'constraint',[{'atom',1808,'is_subtype'}|[[{'var',1808,'Val'}|[{'remote_type',1808,[{'atom',1808,'wx'}|[{'atom',1808,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1816
		'spec' =
		    %% Line 1816
		    [{{'setDefaultEditor',2},[{'type',1816,'bounded_fun',[{'type',1816,'fun',[{'type',1816,'product',[{'var',1816,'This'}|[{'var',1816,'Editor'}]]}|[{'atom',1816,'ok'}]]}|[[{'type',1817,'constraint',[{'atom',1817,'is_subtype'}|[[{'var',1817,'This'}|[{'type',1817,'wxGrid',[]}]]]]}|[{'type',1817,'constraint',[{'atom',1817,'is_subtype'}|[[{'var',1817,'Editor'}|[{'remote_type',1817,[{'atom',1817,'wxGridCellEditor'}|[{'atom',1817,'wxGridCellEditor'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1825
		'spec' =
		    %% Line 1825
		    [{{'setDefaultRenderer',2},[{'type',1825,'bounded_fun',[{'type',1825,'fun',[{'type',1825,'product',[{'var',1825,'This'}|[{'var',1825,'Renderer'}]]}|[{'atom',1825,'ok'}]]}|[[{'type',1826,'constraint',[{'atom',1826,'is_subtype'}|[[{'var',1826,'This'}|[{'type',1826,'wxGrid',[]}]]]]}|[{'type',1826,'constraint',[{'atom',1826,'is_subtype'}|[[{'var',1826,'Renderer'}|[{'remote_type',1826,[{'atom',1826,'wxGridCellRenderer'}|[{'atom',1826,'wxGridCellRenderer'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1834
		'spec' =
		    %% Line 1834
		    [{{'setDefaultColSize',2},[{'type',1834,'bounded_fun',[{'type',1834,'fun',[{'type',1834,'product',[{'var',1834,'This'}|[{'var',1834,'Width'}]]}|[{'atom',1834,'ok'}]]}|[[{'type',1835,'constraint',[{'atom',1835,'is_subtype'}|[[{'var',1835,'This'}|[{'type',1835,'wxGrid',[]}]]]]}|[{'type',1835,'constraint',[{'atom',1835,'is_subtype'}|[[{'var',1835,'Width'}|[{'type',1835,'integer',[]}]]]]}]]]]}]}],
		%% Line 1842
		'spec' =
		    %% Line 1842
		    [{{'setDefaultColSize',3},[{'type',1842,'bounded_fun',[{'type',1842,'fun',[{'type',1842,'product',[{'var',1842,'This'}|[{'var',1842,'Width'}|[{'type',1842,'list',[{'var',1842,'Option'}]}]]]}|[{'atom',1842,'ok'}]]}|[[{'type',1843,'constraint',[{'atom',1843,'is_subtype'}|[[{'var',1843,'This'}|[{'type',1843,'wxGrid',[]}]]]]}|[{'type',1843,'constraint',[{'atom',1843,'is_subtype'}|[[{'var',1843,'Width'}|[{'type',1843,'integer',[]}]]]]}|[{'type',1844,'constraint',[{'atom',1844,'is_subtype'}|[[{'var',1844,'Option'}|[{'type',1844,'tuple',[{'atom',1844,'resizeExistingCols'}|[{'type',1844,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1855
		'spec' =
		    %% Line 1855
		    [{{'setDefaultRowSize',2},[{'type',1855,'bounded_fun',[{'type',1855,'fun',[{'type',1855,'product',[{'var',1855,'This'}|[{'var',1855,'Height'}]]}|[{'atom',1855,'ok'}]]}|[[{'type',1856,'constraint',[{'atom',1856,'is_subtype'}|[[{'var',1856,'This'}|[{'type',1856,'wxGrid',[]}]]]]}|[{'type',1856,'constraint',[{'atom',1856,'is_subtype'}|[[{'var',1856,'Height'}|[{'type',1856,'integer',[]}]]]]}]]]]}]}],
		%% Line 1863
		'spec' =
		    %% Line 1863
		    [{{'setDefaultRowSize',3},[{'type',1863,'bounded_fun',[{'type',1863,'fun',[{'type',1863,'product',[{'var',1863,'This'}|[{'var',1863,'Height'}|[{'type',1863,'list',[{'var',1863,'Option'}]}]]]}|[{'atom',1863,'ok'}]]}|[[{'type',1864,'constraint',[{'atom',1864,'is_subtype'}|[[{'var',1864,'This'}|[{'type',1864,'wxGrid',[]}]]]]}|[{'type',1864,'constraint',[{'atom',1864,'is_subtype'}|[[{'var',1864,'Height'}|[{'type',1864,'integer',[]}]]]]}|[{'type',1865,'constraint',[{'atom',1865,'is_subtype'}|[[{'var',1865,'Option'}|[{'type',1865,'tuple',[{'atom',1865,'resizeExistingRows'}|[{'type',1865,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 1876
		'spec' =
		    %% Line 1876
		    [{{'setGridCursor',3},[{'type',1876,'bounded_fun',[{'type',1876,'fun',[{'type',1876,'product',[{'var',1876,'This'}|[{'var',1876,'Row'}|[{'var',1876,'Col'}]]]}|[{'atom',1876,'ok'}]]}|[[{'type',1877,'constraint',[{'atom',1877,'is_subtype'}|[[{'var',1877,'This'}|[{'type',1877,'wxGrid',[]}]]]]}|[{'type',1877,'constraint',[{'atom',1877,'is_subtype'}|[[{'var',1877,'Row'}|[{'type',1877,'integer',[]}]]]]}|[{'type',1877,'constraint',[{'atom',1877,'is_subtype'}|[[{'var',1877,'Col'}|[{'type',1877,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1885
		'spec' =
		    %% Line 1885
		    [{{'setGridLineColour',2},[{'type',1885,'bounded_fun',[{'type',1885,'fun',[{'type',1885,'product',[{'var',1885,'This'}|[{'var',1885,'Val'}]]}|[{'atom',1885,'ok'}]]}|[[{'type',1886,'constraint',[{'atom',1886,'is_subtype'}|[[{'var',1886,'This'}|[{'type',1886,'wxGrid',[]}]]]]}|[{'type',1886,'constraint',[{'atom',1886,'is_subtype'}|[[{'var',1886,'Val'}|[{'remote_type',1886,[{'atom',1886,'wx'}|[{'atom',1886,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1894
		'spec' =
		    %% Line 1894
		    [{{'setLabelBackgroundColour',2},[{'type',1894,'bounded_fun',[{'type',1894,'fun',[{'type',1894,'product',[{'var',1894,'This'}|[{'var',1894,'Val'}]]}|[{'atom',1894,'ok'}]]}|[[{'type',1895,'constraint',[{'atom',1895,'is_subtype'}|[[{'var',1895,'This'}|[{'type',1895,'wxGrid',[]}]]]]}|[{'type',1895,'constraint',[{'atom',1895,'is_subtype'}|[[{'var',1895,'Val'}|[{'remote_type',1895,[{'atom',1895,'wx'}|[{'atom',1895,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1903
		'spec' =
		    %% Line 1903
		    [{{'setLabelFont',2},[{'type',1903,'bounded_fun',[{'type',1903,'fun',[{'type',1903,'product',[{'var',1903,'This'}|[{'var',1903,'Val'}]]}|[{'atom',1903,'ok'}]]}|[[{'type',1904,'constraint',[{'atom',1904,'is_subtype'}|[[{'var',1904,'This'}|[{'type',1904,'wxGrid',[]}]]]]}|[{'type',1904,'constraint',[{'atom',1904,'is_subtype'}|[[{'var',1904,'Val'}|[{'remote_type',1904,[{'atom',1904,'wxFont'}|[{'atom',1904,'wxFont'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1912
		'spec' =
		    %% Line 1912
		    [{{'setLabelTextColour',2},[{'type',1912,'bounded_fun',[{'type',1912,'fun',[{'type',1912,'product',[{'var',1912,'This'}|[{'var',1912,'Val'}]]}|[{'atom',1912,'ok'}]]}|[[{'type',1913,'constraint',[{'atom',1913,'is_subtype'}|[[{'var',1913,'This'}|[{'type',1913,'wxGrid',[]}]]]]}|[{'type',1913,'constraint',[{'atom',1913,'is_subtype'}|[[{'var',1913,'Val'}|[{'remote_type',1913,[{'atom',1913,'wx'}|[{'atom',1913,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 1921
		'spec' =
		    %% Line 1921
		    [{{'setMargins',3},[{'type',1921,'bounded_fun',[{'type',1921,'fun',[{'type',1921,'product',[{'var',1921,'This'}|[{'var',1921,'ExtraWidth'}|[{'var',1921,'ExtraHeight'}]]]}|[{'atom',1921,'ok'}]]}|[[{'type',1922,'constraint',[{'atom',1922,'is_subtype'}|[[{'var',1922,'This'}|[{'type',1922,'wxGrid',[]}]]]]}|[{'type',1922,'constraint',[{'atom',1922,'is_subtype'}|[[{'var',1922,'ExtraWidth'}|[{'type',1922,'integer',[]}]]]]}|[{'type',1922,'constraint',[{'atom',1922,'is_subtype'}|[[{'var',1922,'ExtraHeight'}|[{'type',1922,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1930
		'spec' =
		    %% Line 1930
		    [{{'setReadOnly',3},[{'type',1930,'bounded_fun',[{'type',1930,'fun',[{'type',1930,'product',[{'var',1930,'This'}|[{'var',1930,'Row'}|[{'var',1930,'Col'}]]]}|[{'atom',1930,'ok'}]]}|[[{'type',1931,'constraint',[{'atom',1931,'is_subtype'}|[[{'var',1931,'This'}|[{'type',1931,'wxGrid',[]}]]]]}|[{'type',1931,'constraint',[{'atom',1931,'is_subtype'}|[[{'var',1931,'Row'}|[{'type',1931,'integer',[]}]]]]}|[{'type',1931,'constraint',[{'atom',1931,'is_subtype'}|[[{'var',1931,'Col'}|[{'type',1931,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1938
		'spec' =
		    %% Line 1938
		    [{{'setReadOnly',4},[{'type',1938,'bounded_fun',[{'type',1938,'fun',[{'type',1938,'product',[{'var',1938,'This'}|[{'var',1938,'Row'}|[{'var',1938,'Col'}|[{'type',1938,'list',[{'var',1938,'Option'}]}]]]]}|[{'atom',1938,'ok'}]]}|[[{'type',1939,'constraint',[{'atom',1939,'is_subtype'}|[[{'var',1939,'This'}|[{'type',1939,'wxGrid',[]}]]]]}|[{'type',1939,'constraint',[{'atom',1939,'is_subtype'}|[[{'var',1939,'Row'}|[{'type',1939,'integer',[]}]]]]}|[{'type',1939,'constraint',[{'atom',1939,'is_subtype'}|[[{'var',1939,'Col'}|[{'type',1939,'integer',[]}]]]]}|[{'type',1940,'constraint',[{'atom',1940,'is_subtype'}|[[{'var',1940,'Option'}|[{'type',1940,'tuple',[{'atom',1940,'isReadOnly'}|[{'type',1940,'boolean',[]}]]}]]]]}]]]]]]}]}],
		%% Line 1951
		'spec' =
		    %% Line 1951
		    [{{'setRowAttr',3},[{'type',1951,'bounded_fun',[{'type',1951,'fun',[{'type',1951,'product',[{'var',1951,'This'}|[{'var',1951,'Row'}|[{'var',1951,'Attr'}]]]}|[{'atom',1951,'ok'}]]}|[[{'type',1952,'constraint',[{'atom',1952,'is_subtype'}|[[{'var',1952,'This'}|[{'type',1952,'wxGrid',[]}]]]]}|[{'type',1952,'constraint',[{'atom',1952,'is_subtype'}|[[{'var',1952,'Row'}|[{'type',1952,'integer',[]}]]]]}|[{'type',1952,'constraint',[{'atom',1952,'is_subtype'}|[[{'var',1952,'Attr'}|[{'remote_type',1952,[{'atom',1952,'wxGridCellAttr'}|[{'atom',1952,'wxGridCellAttr'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1961
		'spec' =
		    %% Line 1961
		    [{{'setRowLabelAlignment',3},[{'type',1961,'bounded_fun',[{'type',1961,'fun',[{'type',1961,'product',[{'var',1961,'This'}|[{'var',1961,'Horiz'}|[{'var',1961,'Vert'}]]]}|[{'atom',1961,'ok'}]]}|[[{'type',1962,'constraint',[{'atom',1962,'is_subtype'}|[[{'var',1962,'This'}|[{'type',1962,'wxGrid',[]}]]]]}|[{'type',1962,'constraint',[{'atom',1962,'is_subtype'}|[[{'var',1962,'Horiz'}|[{'type',1962,'integer',[]}]]]]}|[{'type',1962,'constraint',[{'atom',1962,'is_subtype'}|[[{'var',1962,'Vert'}|[{'type',1962,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1970
		'spec' =
		    %% Line 1970
		    [{{'setRowLabelSize',2},[{'type',1970,'bounded_fun',[{'type',1970,'fun',[{'type',1970,'product',[{'var',1970,'This'}|[{'var',1970,'Width'}]]}|[{'atom',1970,'ok'}]]}|[[{'type',1971,'constraint',[{'atom',1971,'is_subtype'}|[[{'var',1971,'This'}|[{'type',1971,'wxGrid',[]}]]]]}|[{'type',1971,'constraint',[{'atom',1971,'is_subtype'}|[[{'var',1971,'Width'}|[{'type',1971,'integer',[]}]]]]}]]]]}]}],
		%% Line 1979
		'spec' =
		    %% Line 1979
		    [{{'setRowLabelValue',3},[{'type',1979,'bounded_fun',[{'type',1979,'fun',[{'type',1979,'product',[{'var',1979,'This'}|[{'var',1979,'Row'}|[{'var',1979,'Val'}]]]}|[{'atom',1979,'ok'}]]}|[[{'type',1980,'constraint',[{'atom',1980,'is_subtype'}|[[{'var',1980,'This'}|[{'type',1980,'wxGrid',[]}]]]]}|[{'type',1980,'constraint',[{'atom',1980,'is_subtype'}|[[{'var',1980,'Row'}|[{'type',1980,'integer',[]}]]]]}|[{'type',1980,'constraint',[{'atom',1980,'is_subtype'}|[[{'var',1980,'Val'}|[{'remote_type',1980,[{'atom',1980,'unicode'}|[{'atom',1980,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 1989
		'spec' =
		    %% Line 1989
		    [{{'setRowMinimalHeight',3},[{'type',1989,'bounded_fun',[{'type',1989,'fun',[{'type',1989,'product',[{'var',1989,'This'}|[{'var',1989,'Row'}|[{'var',1989,'Width'}]]]}|[{'atom',1989,'ok'}]]}|[[{'type',1990,'constraint',[{'atom',1990,'is_subtype'}|[[{'var',1990,'This'}|[{'type',1990,'wxGrid',[]}]]]]}|[{'type',1990,'constraint',[{'atom',1990,'is_subtype'}|[[{'var',1990,'Row'}|[{'type',1990,'integer',[]}]]]]}|[{'type',1990,'constraint',[{'atom',1990,'is_subtype'}|[[{'var',1990,'Width'}|[{'type',1990,'integer',[]}]]]]}]]]]]}]}],
		%% Line 1998
		'spec' =
		    %% Line 1998
		    [{{'setRowMinimalAcceptableHeight',2},[{'type',1998,'bounded_fun',[{'type',1998,'fun',[{'type',1998,'product',[{'var',1998,'This'}|[{'var',1998,'Width'}]]}|[{'atom',1998,'ok'}]]}|[[{'type',1999,'constraint',[{'atom',1999,'is_subtype'}|[[{'var',1999,'This'}|[{'type',1999,'wxGrid',[]}]]]]}|[{'type',1999,'constraint',[{'atom',1999,'is_subtype'}|[[{'var',1999,'Width'}|[{'type',1999,'integer',[]}]]]]}]]]]}]}],
		%% Line 2007
		'spec' =
		    %% Line 2007
		    [{{'setRowSize',3},[{'type',2007,'bounded_fun',[{'type',2007,'fun',[{'type',2007,'product',[{'var',2007,'This'}|[{'var',2007,'Row'}|[{'var',2007,'Height'}]]]}|[{'atom',2007,'ok'}]]}|[[{'type',2008,'constraint',[{'atom',2008,'is_subtype'}|[[{'var',2008,'This'}|[{'type',2008,'wxGrid',[]}]]]]}|[{'type',2008,'constraint',[{'atom',2008,'is_subtype'}|[[{'var',2008,'Row'}|[{'type',2008,'integer',[]}]]]]}|[{'type',2008,'constraint',[{'atom',2008,'is_subtype'}|[[{'var',2008,'Height'}|[{'type',2008,'integer',[]}]]]]}]]]]]}]}],
		%% Line 2016
		'spec' =
		    %% Line 2016
		    [{{'setScrollLineX',2},[{'type',2016,'bounded_fun',[{'type',2016,'fun',[{'type',2016,'product',[{'var',2016,'This'}|[{'var',2016,'X'}]]}|[{'atom',2016,'ok'}]]}|[[{'type',2017,'constraint',[{'atom',2017,'is_subtype'}|[[{'var',2017,'This'}|[{'type',2017,'wxGrid',[]}]]]]}|[{'type',2017,'constraint',[{'atom',2017,'is_subtype'}|[[{'var',2017,'X'}|[{'type',2017,'integer',[]}]]]]}]]]]}]}],
		%% Line 2025
		'spec' =
		    %% Line 2025
		    [{{'setScrollLineY',2},[{'type',2025,'bounded_fun',[{'type',2025,'fun',[{'type',2025,'product',[{'var',2025,'This'}|[{'var',2025,'Y'}]]}|[{'atom',2025,'ok'}]]}|[[{'type',2026,'constraint',[{'atom',2026,'is_subtype'}|[[{'var',2026,'This'}|[{'type',2026,'wxGrid',[]}]]]]}|[{'type',2026,'constraint',[{'atom',2026,'is_subtype'}|[[{'var',2026,'Y'}|[{'type',2026,'integer',[]}]]]]}]]]]}]}],
		%% Line 2034
		'spec' =
		    %% Line 2034
		    [{{'setSelectionBackground',2},[{'type',2034,'bounded_fun',[{'type',2034,'fun',[{'type',2034,'product',[{'var',2034,'This'}|[{'var',2034,'C'}]]}|[{'atom',2034,'ok'}]]}|[[{'type',2035,'constraint',[{'atom',2035,'is_subtype'}|[[{'var',2035,'This'}|[{'type',2035,'wxGrid',[]}]]]]}|[{'type',2035,'constraint',[{'atom',2035,'is_subtype'}|[[{'var',2035,'C'}|[{'remote_type',2035,[{'atom',2035,'wx'}|[{'atom',2035,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 2043
		'spec' =
		    %% Line 2043
		    [{{'setSelectionForeground',2},[{'type',2043,'bounded_fun',[{'type',2043,'fun',[{'type',2043,'product',[{'var',2043,'This'}|[{'var',2043,'C'}]]}|[{'atom',2043,'ok'}]]}|[[{'type',2044,'constraint',[{'atom',2044,'is_subtype'}|[[{'var',2044,'This'}|[{'type',2044,'wxGrid',[]}]]]]}|[{'type',2044,'constraint',[{'atom',2044,'is_subtype'}|[[{'var',2044,'C'}|[{'remote_type',2044,[{'atom',2044,'wx'}|[{'atom',2044,'wx_colour'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 2053
		'spec' =
		    %% Line 2053
		    [{{'setSelectionMode',2},[{'type',2053,'bounded_fun',[{'type',2053,'fun',[{'type',2053,'product',[{'var',2053,'This'}|[{'var',2053,'Selmode'}]]}|[{'atom',2053,'ok'}]]}|[[{'type',2054,'constraint',[{'atom',2054,'is_subtype'}|[[{'var',2054,'This'}|[{'type',2054,'wxGrid',[]}]]]]}|[{'type',2054,'constraint',[{'atom',2054,'is_subtype'}|[[{'var',2054,'Selmode'}|[{'remote_type',2054,[{'atom',2054,'wx'}|[{'atom',2054,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 2062
		'spec' =
		    %% Line 2062
		    [{{'showCellEditControl',1},[{'type',2062,'bounded_fun',[{'type',2062,'fun',[{'type',2062,'product',[{'var',2062,'This'}]}|[{'atom',2062,'ok'}]]}|[[{'type',2063,'constraint',[{'atom',2063,'is_subtype'}|[[{'var',2063,'This'}|[{'type',2063,'wxGrid',[]}]]]]}]]]}]}],
		%% Line 2070
		'spec' =
		    %% Line 2070
		    [{{'xToCol',2},[{'type',2070,'bounded_fun',[{'type',2070,'fun',[{'type',2070,'product',[{'var',2070,'This'}|[{'var',2070,'X'}]]}|[{'type',2070,'integer',[]}]]}|[[{'type',2071,'constraint',[{'atom',2071,'is_subtype'}|[[{'var',2071,'This'}|[{'type',2071,'wxGrid',[]}]]]]}|[{'type',2071,'constraint',[{'atom',2071,'is_subtype'}|[[{'var',2071,'X'}|[{'type',2071,'integer',[]}]]]]}]]]]}]}],
		%% Line 2078
		'spec' =
		    %% Line 2078
		    [{{'xToCol',3},[{'type',2078,'bounded_fun',[{'type',2078,'fun',[{'type',2078,'product',[{'var',2078,'This'}|[{'var',2078,'X'}|[{'type',2078,'list',[{'var',2078,'Option'}]}]]]}|[{'type',2078,'integer',[]}]]}|[[{'type',2079,'constraint',[{'atom',2079,'is_subtype'}|[[{'var',2079,'This'}|[{'type',2079,'wxGrid',[]}]]]]}|[{'type',2079,'constraint',[{'atom',2079,'is_subtype'}|[[{'var',2079,'X'}|[{'type',2079,'integer',[]}]]]]}|[{'type',2080,'constraint',[{'atom',2080,'is_subtype'}|[[{'var',2080,'Option'}|[{'type',2080,'tuple',[{'atom',2080,'clipToMinMax'}|[{'type',2080,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 2091
		'spec' =
		    %% Line 2091
		    [{{'xToEdgeOfCol',2},[{'type',2091,'bounded_fun',[{'type',2091,'fun',[{'type',2091,'product',[{'var',2091,'This'}|[{'var',2091,'X'}]]}|[{'type',2091,'integer',[]}]]}|[[{'type',2092,'constraint',[{'atom',2092,'is_subtype'}|[[{'var',2092,'This'}|[{'type',2092,'wxGrid',[]}]]]]}|[{'type',2092,'constraint',[{'atom',2092,'is_subtype'}|[[{'var',2092,'X'}|[{'type',2092,'integer',[]}]]]]}]]]]}]}],
		%% Line 2100
		'spec' =
		    %% Line 2100
		    [{{'yToEdgeOfRow',2},[{'type',2100,'bounded_fun',[{'type',2100,'fun',[{'type',2100,'product',[{'var',2100,'This'}|[{'var',2100,'Y'}]]}|[{'type',2100,'integer',[]}]]}|[[{'type',2101,'constraint',[{'atom',2101,'is_subtype'}|[[{'var',2101,'This'}|[{'type',2101,'wxGrid',[]}]]]]}|[{'type',2101,'constraint',[{'atom',2101,'is_subtype'}|[[{'var',2101,'Y'}|[{'type',2101,'integer',[]}]]]]}]]]]}]}],
		%% Line 2109
		'spec' =
		    %% Line 2109
		    [{{'yToRow',2},[{'type',2109,'bounded_fun',[{'type',2109,'fun',[{'type',2109,'product',[{'var',2109,'This'}|[{'var',2109,'Y'}]]}|[{'type',2109,'integer',[]}]]}|[[{'type',2110,'constraint',[{'atom',2110,'is_subtype'}|[[{'var',2110,'This'}|[{'type',2110,'wxGrid',[]}]]]]}|[{'type',2110,'constraint',[{'atom',2110,'is_subtype'}|[[{'var',2110,'Y'}|[{'type',2110,'integer',[]}]]]]}]]]]}]}],
		%% Line 2118
		'spec' =
		    %% Line 2118
		    [{{'destroy',1},[{'type',2118,'fun',[{'type',2118,'product',[{'ann_type',2118,[{'var',2118,'This'}|[{'type',2118,'wxGrid',[]}]]}]}|[{'atom',2118,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 130
    fun (_cor0) ->
	case _cor0 of
	  <'wxScrolledWindow'> when 'true' ->
	      'true'
	  %% Line 131
	  <'wxPanel'> when 'true' ->
	      'true'
	  %% Line 132
	  <'wxWindow'> when 'true' ->
	      'true'
	  %% Line 133
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 134
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxGrid'})
	end
'new'/0 =
    %% Line 139
    fun () ->
	%% Line 140
	call 'wxe_util':'construct'
	    (376, %% Line 141
		  #{}#)
'new'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor5,_cor6,_cor7},Id>
	      when %% Line 148
		call 'erlang':'is_integer'
		    (Id) ->
	      %% Line 149
	      apply 'new'/3
		  (Parent, Id, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Parent = {'wx_ref',_cor24,_cor25,_cor26},X,Y>
	      when let <_cor3> =
		    %% Line 168
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 168
			call 'erlang':'is_integer'
			    (Y)
		    in  %% Line 168
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 169
	      apply 'new'/4
		  (Parent, X, Y, [])
	  %% Line 170
	  <{'wx_ref',ParentRef,ParentT,_cor27},Id,Options>
	      when let <_cor6> =
		    %% Line 171
		    call 'erlang':'is_integer'
			(Id)
		in  let <_cor7> =
			%% Line 171
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 171
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      do  %% Line 172
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 173
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'pos',{PosX,PosY}},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<PosX>(32,1,'integer',['unsigned'|['native']]),
					#<PosY>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor10|Acc]
			      %% Line 174
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor11|Acc]
			      %% Line 175
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 176
			      <BadOpt,_cor28> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/3-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 177
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 177
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 179
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Id>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 178
				  call 'wxe_util':'construct'
				      (377, _cor20)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'new',3}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 187
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ParentRef,ParentT,_cor25},X,Y,Options>
	      when %% Line 188
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 189
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ParentT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ParentT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 190
		      ( fun (_cor14,_cor13) ->
			    case <_cor14,_cor13> of
			      <{'w',W},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<W>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 191
			      <{'h',H},Acc> when 'true' ->
				  let <_cor11> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<H>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor11|Acc]
			      %% Line 192
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor12> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor12|Acc]
			      %% Line 193
			      <BadOpt,_cor26> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/4-fun-0-'}}] )
		  in  let <_cor18> =
			  %% Line 194
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 194
			      call 'erlang':'list_to_binary'
				  (_cor18)
			  in  let <_cor20> =
				  %% Line 196
				  #{#<ParentRef>(32,1,'integer',['unsigned'|['native']]),
				    #<X>(32,1,'integer',['unsigned'|['native']]),
				    #<Y>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 195
				  call 'wxe_util':'construct'
				      (378, _cor20)
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'appendCols'/1 =
    %% Line 202
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 203
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 204
	      apply 'appendCols'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'appendCols',1}}] )
	    -| ['compiler_generated'] )
	end
'appendCols'/2 =
    %% Line 211
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 212
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 213
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 214
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'numCols',NumCols},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<NumCols>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 215
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor5> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor6> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor5>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor6|Acc]
			      %% Line 216
			      <BadOpt,_cor18> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-appendCols/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 217
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 217
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 219
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 218
				  call 'wxe_util':'call'
				      (380, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'appendCols',2}}] )
	    -| ['compiler_generated'] )
	end
'appendRows'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 226
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 227
	      apply 'appendRows'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'appendRows',1}}] )
	    -| ['compiler_generated'] )
	end
'appendRows'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Options>
	      when %% Line 235
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 236
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 237
		      ( fun (_cor8,_cor7) ->
			    case <_cor8,_cor7> of
			      <{'numRows',NumRows},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<NumRows>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 238
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor5> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor6> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor5>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor6|Acc]
			      %% Line 239
			      <BadOpt,_cor18> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-appendRows/2-fun-0-'}}] )
		  in  let <_cor12> =
			  %% Line 240
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 240
			      call 'erlang':'list_to_binary'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 242
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 241
				  call 'wxe_util':'call'
				      (381, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'appendRows',2}}] )
	    -| ['compiler_generated'] )
	end
'autoSize'/1 =
    %% Line 247
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 248
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 250
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 249
		      call 'wxe_util':'cast'
			  (382, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'autoSize',1}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeColumn'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Col>
	      when %% Line 257
		call 'erlang':'is_integer'
		    (Col) ->
	      %% Line 258
	      apply 'autoSizeColumn'/3
		  (This, Col, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'autoSizeColumn',2}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeColumn'/3 =
    %% Line 264
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Col,Options>
	      when let <_cor3> =
		    %% Line 265
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 265
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 265
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 266
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 267
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'setAsMin',SetAsMin},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (SetAsMin)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 268
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-autoSizeColumn/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 269
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 269
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 271
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 270
				  call 'wxe_util':'cast'
				      (383, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'autoSizeColumn',3}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeColumns'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 278
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 279
	      apply 'autoSizeColumns'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'autoSizeColumns',1}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeColumns'/2 =
    %% Line 285
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 286
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 287
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 288
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'setAsMin',SetAsMin},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (SetAsMin)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 289
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-autoSizeColumns/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 290
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 290
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 292
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 291
				  call 'wxe_util':'cast'
				      (384, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'autoSizeColumns',2}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeRow'/2 =
    %% Line 298
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Row>
	      when %% Line 299
		call 'erlang':'is_integer'
		    (Row) ->
	      %% Line 300
	      apply 'autoSizeRow'/3
		  (This, Row, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'autoSizeRow',2}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeRow'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Row,Options>
	      when let <_cor3> =
		    %% Line 307
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 307
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 307
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 308
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 309
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'setAsMin',SetAsMin},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (SetAsMin)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 310
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-autoSizeRow/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 311
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 311
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 313
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Row>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 312
				  call 'wxe_util':'cast'
				      (385, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'autoSizeRow',3}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeRows'/1 =
    %% Line 319
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 320
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 321
	      apply 'autoSizeRows'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'autoSizeRows',1}}] )
	    -| ['compiler_generated'] )
	end
'autoSizeRows'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 328
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 329
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 330
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'setAsMin',SetAsMin},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (SetAsMin)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 331
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-autoSizeRows/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 332
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 332
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 334
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 333
				  call 'wxe_util':'cast'
				      (386, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'autoSizeRows',2}}] )
	    -| ['compiler_generated'] )
	end
'beginBatch'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 340
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 342
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 341
		      call 'wxe_util':'cast'
			  (387, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'beginBatch',1}}] )
	    -| ['compiler_generated'] )
	end
'blockToDeviceRect'/3 =
    %% Line 347
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},{TopLeftR,TopLeftC},{BottomRightR,BottomRightC}>
	      when %% Line 348
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (TopLeftR)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(TopLeftC)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (BottomRightR)
			    in  let <_cor6> =
				    call 'erlang':'is_integer'
					(BottomRightC)
				in  let <_cor7> =
					call 'erlang':'and'
					    (_cor5, _cor6)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor4, _cor7)
					in  call 'erlang':'and'
						(_cor3, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 349
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor11> =
		      %% Line 351
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<TopLeftR>(32,1,'integer',['unsigned'|['native']]),
			#<TopLeftC>(32,1,'integer',['unsigned'|['native']]),
			#<BottomRightR>(32,1,'integer',['unsigned'|['native']]),
			#<BottomRightC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 350
		      call 'wxe_util':'call'
			  (388, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'blockToDeviceRect',3}}] )
	    -| ['compiler_generated'] )
	end
'canDragColSize'/1 =
    %% Line 356
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 357
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 359
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 358
		      call 'wxe_util':'call'
			  (389, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canDragColSize',1}}] )
	    -| ['compiler_generated'] )
	end
'canDragRowSize'/1 =
    %% Line 364
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 365
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 367
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 366
		      call 'wxe_util':'call'
			  (390, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canDragRowSize',1}}] )
	    -| ['compiler_generated'] )
	end
'canDragGridSize'/1 =
    %% Line 372
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 373
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 375
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 374
		      call 'wxe_util':'call'
			  (391, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canDragGridSize',1}}] )
	    -| ['compiler_generated'] )
	end
'canEnableCellControl'/1 =
    %% Line 380
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 381
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 383
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 382
		      call 'wxe_util':'call'
			  (392, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canEnableCellControl',1}}] )
	    -| ['compiler_generated'] )
	end
'cellToRect'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{CoordsR,CoordsC}>
	      when let <_cor2> =
		    %% Line 389
		    call 'erlang':'is_integer'
			(CoordsR)
		in  let <_cor3> =
			%% Line 389
			call 'erlang':'is_integer'
			    (CoordsC)
		    in  %% Line 389
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 390
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 392
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsR>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 391
		      call 'wxe_util':'call'
			  (394, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'cellToRect',2}}] )
	    -| ['compiler_generated'] )
	end
'cellToRect'/3 =
    %% Line 397
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 398
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 398
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 398
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 399
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 401
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 400
		      call 'wxe_util':'call'
			  (393, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'cellToRect',3}}] )
	    -| ['compiler_generated'] )
	end
'clearGrid'/1 =
    %% Line 406
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 407
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 409
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 408
		      call 'wxe_util':'cast'
			  (395, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clearGrid',1}}] )
	    -| ['compiler_generated'] )
	end
'clearSelection'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 415
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 417
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 416
		      call 'wxe_util':'cast'
			  (396, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'clearSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'createGrid'/3 =
    %% Line 423
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},NumRows,NumCols>
	      when let <_cor3> =
		    %% Line 424
		    call 'erlang':'is_integer'
			(NumRows)
		in  let <_cor4> =
			%% Line 424
			call 'erlang':'is_integer'
			    (NumCols)
		    in  %% Line 424
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 425
	      apply 'createGrid'/4
		  (This, NumRows, NumCols, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'createGrid',3}}] )
	    -| ['compiler_generated'] )
	end
'createGrid'/4 =
    %% Line 432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor23},NumRows,NumCols,Options>
	      when %% Line 433
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (NumRows)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(NumCols)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 434
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 435
		      ( fun (_cor12,_cor11) ->
			    case <_cor12,_cor11> of
			      <{'selmode',Selmode},Acc> when 'true' ->
				  let <_cor10> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Selmode>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor10|Acc]
			      %% Line 436
			      <BadOpt,_cor24> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-createGrid/4-fun-0-'}}] )
		  in  let <_cor16> =
			  %% Line 437
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 437
			      call 'erlang':'list_to_binary'
				  (_cor16)
			  in  let <_cor18> =
				  %% Line 439
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<NumRows>(32,1,'integer',['unsigned'|['native']]),
				    #<NumCols>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 438
				  call 'wxe_util':'call'
				      (397, _cor18)
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'createGrid',4}}] )
	    -| ['compiler_generated'] )
	end
'deleteCols'/1 =
    %% Line 445
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 446
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 447
	      apply 'deleteCols'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'deleteCols',1}}] )
	    -| ['compiler_generated'] )
	end
'deleteCols'/2 =
    %% Line 455
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Options>
	      when %% Line 456
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 457
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 458
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'pos',Pos},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Pos>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 459
			      <{'numCols',NumCols},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<NumCols>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 460
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor6> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor7> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor6>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 461
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-deleteCols/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 462
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 462
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 464
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 463
				  call 'wxe_util':'call'
				      (398, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'deleteCols',2}}] )
	    -| ['compiler_generated'] )
	end
'deleteRows'/1 =
    %% Line 470
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 471
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 472
	      apply 'deleteRows'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'deleteRows',1}}] )
	    -| ['compiler_generated'] )
	end
'deleteRows'/2 =
    %% Line 480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Options>
	      when %% Line 481
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 482
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 483
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'pos',Pos},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Pos>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 484
			      <{'numRows',NumRows},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<NumRows>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 485
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor6> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor7> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor6>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 486
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-deleteRows/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 487
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 487
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 489
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 488
				  call 'wxe_util':'call'
				      (399, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'deleteRows',2}}] )
	    -| ['compiler_generated'] )
	end
'disableCellEditControl'/1 =
    %% Line 494
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 495
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 497
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 496
		      call 'wxe_util':'cast'
			  (400, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'disableCellEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'disableDragColSize'/1 =
    %% Line 502
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 503
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 505
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 504
		      call 'wxe_util':'cast'
			  (401, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'disableDragColSize',1}}] )
	    -| ['compiler_generated'] )
	end
'disableDragGridSize'/1 =
    %% Line 510
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 511
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 513
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 512
		      call 'wxe_util':'cast'
			  (402, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'disableDragGridSize',1}}] )
	    -| ['compiler_generated'] )
	end
'disableDragRowSize'/1 =
    %% Line 518
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 519
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 521
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 520
		      call 'wxe_util':'cast'
			  (403, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'disableDragRowSize',1}}] )
	    -| ['compiler_generated'] )
	end
'enableCellEditControl'/1 =
    %% Line 527
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 528
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 529
	      apply 'enableCellEditControl'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enableCellEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'enableCellEditControl'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 536
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 537
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 538
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 539
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enableCellEditControl/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 540
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 540
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 542
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 541
				  call 'wxe_util':'cast'
				      (404, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enableCellEditControl',2}}] )
	    -| ['compiler_generated'] )
	end
'enableDragColSize'/1 =
    %% Line 548
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 549
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 550
	      apply 'enableDragColSize'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enableDragColSize',1}}] )
	    -| ['compiler_generated'] )
	end
'enableDragColSize'/2 =
    %% Line 556
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 557
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 558
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 559
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 560
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enableDragColSize/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 561
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 561
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 563
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 562
				  call 'wxe_util':'cast'
				      (405, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enableDragColSize',2}}] )
	    -| ['compiler_generated'] )
	end
'enableDragGridSize'/1 =
    %% Line 569
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 570
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 571
	      apply 'enableDragGridSize'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enableDragGridSize',1}}] )
	    -| ['compiler_generated'] )
	end
'enableDragGridSize'/2 =
    %% Line 577
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 578
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 579
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 580
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 581
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enableDragGridSize/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 582
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 582
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 584
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 583
				  call 'wxe_util':'cast'
				      (406, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enableDragGridSize',2}}] )
	    -| ['compiler_generated'] )
	end
'enableDragRowSize'/1 =
    %% Line 590
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 591
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 592
	      apply 'enableDragRowSize'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enableDragRowSize',1}}] )
	    -| ['compiler_generated'] )
	end
'enableDragRowSize'/2 =
    %% Line 598
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 599
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 600
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 601
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 602
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enableDragRowSize/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 603
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 603
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 605
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 604
				  call 'wxe_util':'cast'
				      (407, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enableDragRowSize',2}}] )
	    -| ['compiler_generated'] )
	end
'enableEditing'/2 =
    %% Line 610
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Edit>
	      when %% Line 611
		call 'erlang':'is_boolean'
		    (Edit) ->
	      do  %% Line 612
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 614
		      call 'wxe_util':'from_bool'
			  (Edit)
		  in  let <_cor5> =
			  %% Line 614
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 613
			  call 'wxe_util':'cast'
			      (408, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'enableEditing',2}}] )
	    -| ['compiler_generated'] )
	end
'enableGridLines'/1 =
    %% Line 620
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 621
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 622
	      apply 'enableGridLines'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enableGridLines',1}}] )
	    -| ['compiler_generated'] )
	end
'enableGridLines'/2 =
    %% Line 628
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor16},Options>
	      when %% Line 629
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 630
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 631
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'enable',Enable},Acc> when 'true' ->
				  let <_cor4> =
				      call 'wxe_util':'from_bool'
					  (Enable)
				  in  let <_cor5> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor5|Acc]
			      %% Line 632
			      <BadOpt,_cor17> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-enableGridLines/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 633
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 633
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor13> =
				  %% Line 635
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 634
				  call 'wxe_util':'cast'
				      (409, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'enableGridLines',2}}] )
	    -| ['compiler_generated'] )
	end
'endBatch'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 641
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 643
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 642
		      call 'wxe_util':'cast'
			  (410, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'endBatch',1}}] )
	    -| ['compiler_generated'] )
	end
'fit'/1 =
    %% Line 648
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 649
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 651
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 650
		      call 'wxe_util':'cast'
			  (411, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fit',1}}] )
	    -| ['compiler_generated'] )
	end
'forceRefresh'/1 =
    %% Line 656
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 657
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 659
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 658
		      call 'wxe_util':'cast'
			  (412, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'forceRefresh',1}}] )
	    -| ['compiler_generated'] )
	end
'getBatchCount'/1 =
    %% Line 664
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 665
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 667
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 666
		      call 'wxe_util':'call'
			  (413, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getBatchCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getCellAlignment'/3 =
    %% Line 672
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 673
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 673
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 673
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 674
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 676
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 675
		      call 'wxe_util':'call'
			  (414, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellAlignment',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellBackgroundColour'/3 =
    %% Line 681
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 682
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 682
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 682
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 683
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 685
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 684
		      call 'wxe_util':'call'
			  (415, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellBackgroundColour',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellEditor'/3 =
    %% Line 690
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 691
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 691
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 691
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 692
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 694
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 693
		      call 'wxe_util':'call'
			  (416, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellEditor',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellFont'/3 =
    %% Line 699
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 700
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 700
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 700
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 701
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 703
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 702
		      call 'wxe_util':'call'
			  (417, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellFont',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellRenderer'/3 =
    %% Line 708
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 709
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 709
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 709
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 710
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 712
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 711
		      call 'wxe_util':'call'
			  (418, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellRenderer',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellTextColour'/3 =
    %% Line 717
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 718
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 718
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 718
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 719
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 721
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 720
		      call 'wxe_util':'call'
			  (419, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellTextColour',3}}] )
	    -| ['compiler_generated'] )
	end
'getCellValue'/2 =
    %% Line 726
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{CoordsR,CoordsC}>
	      when let <_cor2> =
		    %% Line 727
		    call 'erlang':'is_integer'
			(CoordsR)
		in  let <_cor3> =
			%% Line 727
			call 'erlang':'is_integer'
			    (CoordsC)
		    in  %% Line 727
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 728
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 730
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsR>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 729
		      call 'wxe_util':'call'
			  (421, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'getCellValue',2}}] )
	    -| ['compiler_generated'] )
	end
'getCellValue'/3 =
    %% Line 735
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 736
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 736
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 736
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 737
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 739
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 738
		      call 'wxe_util':'call'
			  (420, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getCellValue',3}}] )
	    -| ['compiler_generated'] )
	end
'getColLabelAlignment'/1 =
    %% Line 744
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 745
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 747
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 746
		      call 'wxe_util':'call'
			  (422, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColLabelAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'getColLabelSize'/1 =
    %% Line 752
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 753
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 755
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 754
		      call 'wxe_util':'call'
			  (423, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColLabelSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getColLabelValue'/2 =
    %% Line 760
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Col>
	      when %% Line 761
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 762
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 764
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 763
		      call 'wxe_util':'call'
			  (424, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getColLabelValue',2}}] )
	    -| ['compiler_generated'] )
	end
'getColMinimalAcceptableWidth'/1 =
    %% Line 769
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 770
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 772
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 771
		      call 'wxe_util':'call'
			  (425, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getColMinimalAcceptableWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultCellAlignment'/1 =
    %% Line 777
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 778
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 780
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 779
		      call 'wxe_util':'call'
			  (426, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultCellAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultCellBackgroundColour'/1 =
    %% Line 785
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 786
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 788
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 787
		      call 'wxe_util':'call'
			  (427, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultCellBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultCellFont'/1 =
    %% Line 793
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 794
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 796
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 795
		      call 'wxe_util':'call'
			  (428, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultCellFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultCellTextColour'/1 =
    %% Line 801
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 802
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 804
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 803
		      call 'wxe_util':'call'
			  (429, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultCellTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultColLabelSize'/1 =
    %% Line 809
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 810
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 812
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 811
		      call 'wxe_util':'call'
			  (430, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultColLabelSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultColSize'/1 =
    %% Line 817
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 818
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 820
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 819
		      call 'wxe_util':'call'
			  (431, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultColSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultEditor'/1 =
    %% Line 825
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 826
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 828
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 827
		      call 'wxe_util':'call'
			  (432, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultEditor',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultEditorForCell'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{CR,CC}>
	      when let <_cor2> =
		    %% Line 834
		    call 'erlang':'is_integer'
			(CR)
		in  let <_cor3> =
			%% Line 834
			call 'erlang':'is_integer'
			    (CC)
		    in  %% Line 834
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 835
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 837
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CR>(32,1,'integer',['unsigned'|['native']]),
			#<CC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 836
		      call 'wxe_util':'call'
			  (434, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'getDefaultEditorForCell',2}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultEditorForCell'/3 =
    %% Line 842
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 843
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 843
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 843
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 844
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 846
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 845
		      call 'wxe_util':'call'
			  (433, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getDefaultEditorForCell',3}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultEditorForType'/2 =
    %% Line 851
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},TypeName>
	      when %% Line 852
		call 'erlang':'is_list'
		    (TypeName) ->
	      do  %% Line 853
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <TypeName_UC> =
		      %% Line 854
		      call 'unicode':'characters_to_binary'
			  ([TypeName|[0]])
		  in  let <_cor10> =
			  %% Line 856
			  call 'erlang':'byte_size'
			      (TypeName_UC)
		      in  let <_cor5> =
			      %% Line 856
			      call 'erlang':'byte_size'
				  (TypeName_UC)
			  in  let <_cor6> =
				  %% Line 856
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 856
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 856
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 856
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 856
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<TypeName_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 855
						  call 'wxe_util':'call'
						      (435, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getDefaultEditorForType',2}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultRenderer'/1 =
    %% Line 861
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 862
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 864
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 863
		      call 'wxe_util':'call'
			  (436, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultRenderer',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultRendererForCell'/3 =
    %% Line 869
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 870
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 870
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 870
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 871
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 873
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 872
		      call 'wxe_util':'call'
			  (437, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getDefaultRendererForCell',3}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultRendererForType'/2 =
    %% Line 878
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},TypeName>
	      when %% Line 879
		call 'erlang':'is_list'
		    (TypeName) ->
	      do  %% Line 880
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <TypeName_UC> =
		      %% Line 881
		      call 'unicode':'characters_to_binary'
			  ([TypeName|[0]])
		  in  let <_cor10> =
			  %% Line 883
			  call 'erlang':'byte_size'
			      (TypeName_UC)
		      in  let <_cor5> =
			      %% Line 883
			      call 'erlang':'byte_size'
				  (TypeName_UC)
			  in  let <_cor6> =
				  %% Line 883
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 883
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 883
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 883
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 883
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<TypeName_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 882
						  call 'wxe_util':'call'
						      (438, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'getDefaultRendererForType',2}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultRowLabelSize'/1 =
    %% Line 888
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 889
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 891
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 890
		      call 'wxe_util':'call'
			  (439, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultRowLabelSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getDefaultRowSize'/1 =
    %% Line 896
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 897
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 899
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 898
		      call 'wxe_util':'call'
			  (440, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getDefaultRowSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridCursorCol'/1 =
    %% Line 904
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 905
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 907
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 906
		      call 'wxe_util':'call'
			  (441, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridCursorCol',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridCursorRow'/1 =
    %% Line 912
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 913
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 915
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 914
		      call 'wxe_util':'call'
			  (442, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridCursorRow',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridLineColour'/1 =
    %% Line 920
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 921
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 923
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 922
		      call 'wxe_util':'call'
			  (443, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridLineColour',1}}] )
	    -| ['compiler_generated'] )
	end
'gridLinesEnabled'/1 =
    %% Line 928
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 929
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 931
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 930
		      call 'wxe_util':'call'
			  (444, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'gridLinesEnabled',1}}] )
	    -| ['compiler_generated'] )
	end
'getLabelBackgroundColour'/1 =
    %% Line 936
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 937
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 939
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 938
		      call 'wxe_util':'call'
			  (445, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLabelBackgroundColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getLabelFont'/1 =
    %% Line 944
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 945
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 947
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 946
		      call 'wxe_util':'call'
			  (446, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLabelFont',1}}] )
	    -| ['compiler_generated'] )
	end
'getLabelTextColour'/1 =
    %% Line 952
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 953
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 955
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 954
		      call 'wxe_util':'call'
			  (447, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getLabelTextColour',1}}] )
	    -| ['compiler_generated'] )
	end
'getNumberCols'/1 =
    %% Line 960
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 961
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 963
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 962
		      call 'wxe_util':'call'
			  (448, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNumberCols',1}}] )
	    -| ['compiler_generated'] )
	end
'getNumberRows'/1 =
    %% Line 968
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 969
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 971
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 970
		      call 'wxe_util':'call'
			  (449, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNumberRows',1}}] )
	    -| ['compiler_generated'] )
	end
'getOrCreateCellAttr'/3 =
    %% Line 976
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 977
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 977
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 977
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 978
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 980
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 979
		      call 'wxe_util':'call'
			  (450, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'getOrCreateCellAttr',3}}] )
	    -| ['compiler_generated'] )
	end
'getRowMinimalAcceptableHeight'/1 =
    %% Line 985
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 986
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 988
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 987
		      call 'wxe_util':'call'
			  (451, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRowMinimalAcceptableHeight',1}}] )
	    -| ['compiler_generated'] )
	end
'getRowLabelAlignment'/1 =
    %% Line 993
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 994
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 996
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 995
		      call 'wxe_util':'call'
			  (452, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRowLabelAlignment',1}}] )
	    -| ['compiler_generated'] )
	end
'getRowLabelSize'/1 =
    %% Line 1001
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1002
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1004
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1003
		      call 'wxe_util':'call'
			  (453, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getRowLabelSize',1}}] )
	    -| ['compiler_generated'] )
	end
'getRowLabelValue'/2 =
    %% Line 1009
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Row>
	      when %% Line 1010
		call 'erlang':'is_integer'
		    (Row) ->
	      do  %% Line 1011
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1013
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1012
		      call 'wxe_util':'call'
			  (454, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getRowLabelValue',2}}] )
	    -| ['compiler_generated'] )
	end
'getRowSize'/2 =
    %% Line 1018
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Row>
	      when %% Line 1019
		call 'erlang':'is_integer'
		    (Row) ->
	      do  %% Line 1020
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1022
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1021
		      call 'wxe_util':'call'
			  (455, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getRowSize',2}}] )
	    -| ['compiler_generated'] )
	end
'getScrollLineX'/1 =
    %% Line 1027
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1028
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1030
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1029
		      call 'wxe_util':'call'
			  (456, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getScrollLineX',1}}] )
	    -| ['compiler_generated'] )
	end
'getScrollLineY'/1 =
    %% Line 1035
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1036
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1038
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1037
		      call 'wxe_util':'call'
			  (457, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getScrollLineY',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectedCells'/1 =
    %% Line 1043
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1044
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1046
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1045
		      call 'wxe_util':'call'
			  (458, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectedCells',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectedCols'/1 =
    %% Line 1051
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1052
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1054
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1053
		      call 'wxe_util':'call'
			  (459, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectedCols',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectedRows'/1 =
    %% Line 1059
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1060
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1062
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1061
		      call 'wxe_util':'call'
			  (460, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectedRows',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectionBackground'/1 =
    %% Line 1067
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1068
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1070
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1069
		      call 'wxe_util':'call'
			  (461, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectionBackground',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectionBlockTopLeft'/1 =
    %% Line 1075
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1076
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1078
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1077
		      call 'wxe_util':'call'
			  (462, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectionBlockTopLeft',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectionBlockBottomRight'/1 =
    %% Line 1083
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1084
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1086
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1085
		      call 'wxe_util':'call'
			  (463, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectionBlockBottomRight',1}}] )
	    -| ['compiler_generated'] )
	end
'getSelectionForeground'/1 =
    %% Line 1091
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1092
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1094
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1093
		      call 'wxe_util':'call'
			  (464, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSelectionForeground',1}}] )
	    -| ['compiler_generated'] )
	end
'getViewWidth'/1 =
    %% Line 1099
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1100
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1102
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1101
		      call 'wxe_util':'call'
			  (465, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getViewWidth',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridWindow'/1 =
    %% Line 1107
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1108
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1110
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1109
		      call 'wxe_util':'call'
			  (466, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridRowLabelWindow'/1 =
    %% Line 1115
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1116
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1118
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1117
		      call 'wxe_util':'call'
			  (467, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridRowLabelWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridColLabelWindow'/1 =
    %% Line 1123
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1124
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1126
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1125
		      call 'wxe_util':'call'
			  (468, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridColLabelWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'getGridCornerLabelWindow'/1 =
    %% Line 1131
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1132
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1134
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1133
		      call 'wxe_util':'call'
			  (469, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getGridCornerLabelWindow',1}}] )
	    -| ['compiler_generated'] )
	end
'hideCellEditControl'/1 =
    %% Line 1139
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1142
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1141
		      call 'wxe_util':'cast'
			  (470, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'hideCellEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'insertCols'/1 =
    %% Line 1148
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1149
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1150
	      apply 'insertCols'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'insertCols',1}}] )
	    -| ['compiler_generated'] )
	end
'insertCols'/2 =
    %% Line 1158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Options>
	      when %% Line 1159
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1160
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1161
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'pos',Pos},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Pos>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 1162
			      <{'numCols',NumCols},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<NumCols>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 1163
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor6> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor7> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor6>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 1164
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-insertCols/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 1165
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1165
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 1167
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1166
				  call 'wxe_util':'call'
				      (471, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'insertCols',2}}] )
	    -| ['compiler_generated'] )
	end
'insertRows'/1 =
    %% Line 1173
    fun (_cor0) ->
	case _cor0 of
	  <This = {'wx_ref',_cor2,_cor3,_cor4}> when %% Line 1174
						     ( 'true'
						       -| ['compiler_generated'] ) ->
	      %% Line 1175
	      apply 'insertRows'/2
		  (This, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'insertRows',1}}] )
	    -| ['compiler_generated'] )
	end
'insertRows'/2 =
    %% Line 1183
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Options>
	      when %% Line 1184
		call 'erlang':'is_list'
		    (Options) ->
	      do  %% Line 1185
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1186
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'pos',Pos},Acc> when 'true' ->
				  let <_cor4> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Pos>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor4|Acc]
			      %% Line 1187
			      <{'numRows',NumRows},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<NumRows>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 1188
			      <{'updateLabels',UpdateLabels},Acc> when 'true' ->
				  let <_cor6> =
				      call 'wxe_util':'from_bool'
					  (UpdateLabels)
				  in  let <_cor7> =
					  #{#<3>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor6>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor7|Acc]
			      %% Line 1189
			      <BadOpt,_cor19> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-insertRows/2-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 1190
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1190
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 1192
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1191
				  call 'wxe_util':'call'
				      (472, _cor15)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'insertRows',2}}] )
	    -| ['compiler_generated'] )
	end
'isCellEditControlEnabled'/1 =
    %% Line 1197
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1198
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1200
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1199
		      call 'wxe_util':'call'
			  (473, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isCellEditControlEnabled',1}}] )
	    -| ['compiler_generated'] )
	end
'isCurrentCellReadOnly'/1 =
    %% Line 1205
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1206
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1208
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1207
		      call 'wxe_util':'call'
			  (474, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isCurrentCellReadOnly',1}}] )
	    -| ['compiler_generated'] )
	end
'isEditable'/1 =
    %% Line 1213
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1214
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1216
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1215
		      call 'wxe_util':'call'
			  (475, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isEditable',1}}] )
	    -| ['compiler_generated'] )
	end
'isInSelection'/2 =
    %% Line 1221
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{CoordsR,CoordsC}>
	      when let <_cor2> =
		    %% Line 1222
		    call 'erlang':'is_integer'
			(CoordsR)
		in  let <_cor3> =
			%% Line 1222
			call 'erlang':'is_integer'
			    (CoordsC)
		    in  %% Line 1222
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1223
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1225
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsR>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1224
		      call 'wxe_util':'call'
			  (477, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'isInSelection',2}}] )
	    -| ['compiler_generated'] )
	end
'isInSelection'/3 =
    %% Line 1230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 1231
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1231
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1231
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1232
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1234
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1233
		      call 'wxe_util':'call'
			  (476, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'isInSelection',3}}] )
	    -| ['compiler_generated'] )
	end
'isReadOnly'/3 =
    %% Line 1239
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 1240
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1240
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1240
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1241
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1243
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1242
		      call 'wxe_util':'call'
			  (478, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'isReadOnly',3}}] )
	    -| ['compiler_generated'] )
	end
'isSelection'/1 =
    %% Line 1248
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1249
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1251
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1250
		      call 'wxe_util':'call'
			  (479, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'isSelection',1}}] )
	    -| ['compiler_generated'] )
	end
'isVisible'/2 =
    %% Line 1257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor7,_cor8,_cor9},Coords = {CoordsR,CoordsC}>
	      when let <_cor2> =
		    %% Line 1258
		    call 'erlang':'is_integer'
			(CoordsR)
		in  let <_cor3> =
			%% Line 1258
			call 'erlang':'is_integer'
			    (CoordsC)
		    in  %% Line 1258
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor2, _cor3)
			  -| ['compiler_generated'] ) ->
	      %% Line 1259
	      apply 'isVisible'/3
		  (This, Coords, [])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'isVisible'/3 =
    %% Line 1273
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor25,_cor26,_cor27},Row,Col>
	      when let <_cor3> =
		    %% Line 1274
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1274
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1274
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1275
	      apply 'isVisible'/4
		  (This, Row, Col, [])
	  %% Line 1276
	  <{'wx_ref',ThisRef,ThisT,_cor28},{CoordsR,CoordsC},Options>
	      when %% Line 1277
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (CoordsR)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(CoordsC)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1278
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1279
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'wholeCellVisible',WholeCellVisible},Acc> when 'true' ->
				  let <_cor12> =
				      call 'wxe_util':'from_bool'
					  (WholeCellVisible)
				  in  let <_cor13> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor12>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor13|Acc]
			      %% Line 1280
			      <BadOpt,_cor29> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-isVisible/3-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 1281
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1281
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor21> =
				  %% Line 1283
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<CoordsR>(32,1,'integer',['unsigned'|['native']]),
				    #<CoordsC>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1282
				  call 'wxe_util':'call'
				      (481, _cor21)
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'isVisible',3}}] )
	    -| ['compiler_generated'] )
	end
'isVisible'/4 =
    %% Line 1289
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor24},Row,Col,Options>
	      when %% Line 1290
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Row)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Col)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1291
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1292
		      ( fun (_cor13,_cor12) ->
			    case <_cor13,_cor12> of
			      <{'wholeCellVisible',WholeCellVisible},Acc> when 'true' ->
				  let <_cor10> =
				      call 'wxe_util':'from_bool'
					  (WholeCellVisible)
				  in  let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor10>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
			      %% Line 1293
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-isVisible/4-fun-0-'}}] )
		  in  let <_cor17> =
			  %% Line 1294
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1294
			      call 'erlang':'list_to_binary'
				  (_cor17)
			  in  let <_cor19> =
				  %% Line 1296
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Row>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1295
				  call 'wxe_util':'call'
				      (480, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'isVisible',4}}] )
	    -| ['compiler_generated'] )
	end
'makeCellVisible'/2 =
    %% Line 1301
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{CoordsR,CoordsC}>
	      when let <_cor2> =
		    %% Line 1302
		    call 'erlang':'is_integer'
			(CoordsR)
		in  let <_cor3> =
			%% Line 1302
			call 'erlang':'is_integer'
			    (CoordsC)
		    in  %% Line 1302
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1303
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor6> =
		      %% Line 1305
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsR>(32,1,'integer',['unsigned'|['native']]),
			#<CoordsC>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1304
		      call 'wxe_util':'cast'
			  (483, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'makeCellVisible',2}}] )
	    -| ['compiler_generated'] )
	end
'makeCellVisible'/3 =
    %% Line 1310
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 1311
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1311
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1311
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1312
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1314
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1313
		      call 'wxe_util':'cast'
			  (482, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'makeCellVisible',3}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorDown'/2 =
    %% Line 1319
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1320
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1321
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1323
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1323
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1322
			  call 'wxe_util':'call'
			      (484, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorDown',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorLeft'/2 =
    %% Line 1328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1329
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1330
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1332
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1332
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1331
			  call 'wxe_util':'call'
			      (485, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorLeft',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorRight'/2 =
    %% Line 1337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1338
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1339
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1341
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1341
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1340
			  call 'wxe_util':'call'
			      (486, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorRight',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorUp'/2 =
    %% Line 1346
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1347
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1348
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1350
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1350
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1349
			  call 'wxe_util':'call'
			      (487, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorUp',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorDownBlock'/2 =
    %% Line 1355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1356
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1357
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1359
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1359
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1358
			  call 'wxe_util':'call'
			      (488, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorDownBlock',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorLeftBlock'/2 =
    %% Line 1364
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1365
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1366
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1368
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1368
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1367
			  call 'wxe_util':'call'
			      (489, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorLeftBlock',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorRightBlock'/2 =
    %% Line 1373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1374
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1375
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1377
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1377
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1376
			  call 'wxe_util':'call'
			      (490, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorRightBlock',2}}] )
	    -| ['compiler_generated'] )
	end
'moveCursorUpBlock'/2 =
    %% Line 1382
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},ExpandSelection>
	      when %% Line 1383
		call 'erlang':'is_boolean'
		    (ExpandSelection) ->
	      do  %% Line 1384
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1386
		      call 'wxe_util':'from_bool'
			  (ExpandSelection)
		  in  let <_cor5> =
			  %% Line 1386
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1385
			  call 'wxe_util':'call'
			      (491, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'moveCursorUpBlock',2}}] )
	    -| ['compiler_generated'] )
	end
'movePageDown'/1 =
    %% Line 1391
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1392
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1394
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1393
		      call 'wxe_util':'call'
			  (492, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'movePageDown',1}}] )
	    -| ['compiler_generated'] )
	end
'movePageUp'/1 =
    %% Line 1399
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1400
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1402
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1401
		      call 'wxe_util':'call'
			  (493, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'movePageUp',1}}] )
	    -| ['compiler_generated'] )
	end
'registerDataType'/4 =
    %% Line 1407
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor22},TypeName,{'wx_ref',RendererRef,RendererT,_cor23},{'wx_ref',EditorRef,EditorT,_cor24}>
	      when %% Line 1408
		call 'erlang':'is_list'
		    (TypeName) ->
	      do  %% Line 1409
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <TypeName_UC> =
		      %% Line 1410
		      call 'unicode':'characters_to_binary'
			  ([TypeName|[0]])
		  in  do  %% Line 1411
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (RendererT,
					   'wxGridCellRenderer') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call RendererT:'parent_class'
					('wxGridCellRenderer')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  do  %% Line 1412
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (EditorT,
					       'wxGridCellEditor') ->
					'ok'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					call EditorT:'parent_class'
					    ('wxGridCellEditor')
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      let <_cor16> =
				  %% Line 1414
				  call 'erlang':'byte_size'
				      (TypeName_UC)
			      in  let <_cor11> =
				      %% Line 1414
				      call 'erlang':'byte_size'
					  (TypeName_UC)
				  in  let <_cor12> =
					  %% Line 1414
					  call 'erlang':'+'
					      (0, _cor11)
				      in  let <_cor13> =
					      %% Line 1414
					      call 'erlang':'band'
						  (_cor12, 7)
					  in  let <_cor14> =
						  %% Line 1414
						  call 'erlang':'-'
						      (8, _cor13)
					      in  let <_cor15> =
						      %% Line 1414
						      call 'erlang':'band'
							  (_cor14, 7)
						  in  let <_cor17> =
							  %% Line 1414
							  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
							    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
							    #<TypeName_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor15,8,'integer',['unsigned'|['big']]),
							    #<RendererRef>(32,1,'integer',['unsigned'|['native']]),
							    #<EditorRef>(32,1,'integer',['unsigned'|['native']])}#
						      in  %% Line 1413
							  call 'wxe_util':'cast'
							      (494, _cor17)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'registerDataType',4}}] )
	    -| ['compiler_generated'] )
	end
'saveEditControlValue'/1 =
    %% Line 1419
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1420
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1422
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1421
		      call 'wxe_util':'cast'
			  (495, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'saveEditControlValue',1}}] )
	    -| ['compiler_generated'] )
	end
'selectAll'/1 =
    %% Line 1427
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 1428
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 1430
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1429
		      call 'wxe_util':'cast'
			  (496, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'selectAll',1}}] )
	    -| ['compiler_generated'] )
	end
'selectBlock'/3 =
    %% Line 1436
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},TopLeft = {TopLeftR,TopLeftC},BottomRight = {BottomRightR,BottomRightC}>
	      when %% Line 1437
		( try
		      let <_cor3> =
			  call 'erlang':'is_integer'
			      (TopLeftR)
		      in  let <_cor4> =
			      call 'erlang':'is_integer'
				  (TopLeftC)
			  in  let <_cor5> =
				  call 'erlang':'is_integer'
				      (BottomRightR)
			      in  let <_cor6> =
				      call 'erlang':'is_integer'
					  (BottomRightC)
				  in  let <_cor7> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor5, _cor6)
					    -| ['compiler_generated'] )
				      in  let <_cor8> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor4, _cor7)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor3, _cor8)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1438
	      apply 'selectBlock'/4
		  (This, TopLeft, BottomRight, [])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'selectBlock',3}}] )
	    -| ['compiler_generated'] )
	end
'selectBlock'/4 =
    %% Line 1444
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor28},{TopLeftR,TopLeftC},{BottomRightR,BottomRightC},Options>
	      when %% Line 1445
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (TopLeftR)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(TopLeftC)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (BottomRightR)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(BottomRightC)
				in  let <_cor8> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1446
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1447
		      ( fun (_cor17,_cor16) ->
			    case <_cor17,_cor16> of
			      <{'addToSelected',AddToSelected},Acc> when 'true' ->
				  let <_cor14> =
				      call 'wxe_util':'from_bool'
					  (AddToSelected)
				  in  let <_cor15> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor14>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor15|Acc]
			      %% Line 1448
			      <BadOpt,_cor29> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-selectBlock/4-fun-0-'}}] )
		  in  let <_cor21> =
			  %% Line 1449
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1449
			      call 'erlang':'list_to_binary'
				  (_cor21)
			  in  let <_cor23> =
				  %% Line 1451
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<TopLeftR>(32,1,'integer',['unsigned'|['native']]),
				    #<TopLeftC>(32,1,'integer',['unsigned'|['native']]),
				    #<BottomRightR>(32,1,'integer',['unsigned'|['native']]),
				    #<BottomRightC>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1450
				  call 'wxe_util':'cast'
				      (498, _cor23)
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'selectBlock',4}}] )
	    -| ['compiler_generated'] )
	end
'selectBlock'/5 =
    %% Line 1457
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor17,_cor18,_cor19},TopRow,LeftCol,BottomRow,RightCol>
	      when %% Line 1458
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (TopRow)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (LeftCol)
			  in  let <_cor7> =
				  call 'erlang':'is_integer'
				      (BottomRow)
			      in  let <_cor8> =
				      call 'erlang':'is_integer'
					  (RightCol)
				  in  let <_cor9> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'and'
										 -| ['compiler_generated'] )
						(_cor7, _cor8)
					    -| ['compiler_generated'] )
				      in  let <_cor10> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor6, _cor9)
						-| ['compiler_generated'] )
					  in  ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'and'
										     -| ['compiler_generated'] )
						    (_cor5, _cor10)
						-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1459
	      apply 'selectBlock'/6
		  (This, TopRow, LeftCol, BottomRow, RightCol, [])
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'selectBlock',5}}] )
	    -| ['compiler_generated'] )
	end
'selectBlock'/6 =
    %% Line 1465
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},TopRow,LeftCol,BottomRow,RightCol,Options>
	      when %% Line 1466
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (TopRow)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(LeftCol)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (BottomRow)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(RightCol)
				in  let <_cor10> =
					call 'erlang':'is_list'
					    (Options)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1467
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1468
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{'addToSelected',AddToSelected},Acc> when 'true' ->
				  let <_cor16> =
				      call 'wxe_util':'from_bool'
					  (AddToSelected)
				  in  let <_cor17> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor16>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor17|Acc]
			      %% Line 1469
			      <BadOpt,_cor33> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-selectBlock/6-fun-0-'}}] )
		  in  let <_cor23> =
			  %% Line 1470
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1470
			      call 'erlang':'list_to_binary'
				  (_cor23)
			  in  let <_cor25> =
				  %% Line 1472
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<TopRow>(32,1,'integer',['unsigned'|['native']]),
				    #<LeftCol>(32,1,'integer',['unsigned'|['native']]),
				    #<BottomRow>(32,1,'integer',['unsigned'|['native']]),
				    #<RightCol>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1471
				  call 'wxe_util':'cast'
				      (497, _cor25)
	  ( <_cor31,_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'selectBlock',6}}] )
	    -| ['compiler_generated'] )
	end
'selectCol'/2 =
    %% Line 1478
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Col>
	      when %% Line 1479
		call 'erlang':'is_integer'
		    (Col) ->
	      %% Line 1480
	      apply 'selectCol'/3
		  (This, Col, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'selectCol',2}}] )
	    -| ['compiler_generated'] )
	end
'selectCol'/3 =
    %% Line 1486
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Col,Options>
	      when let <_cor3> =
		    %% Line 1487
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1487
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 1487
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1488
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1489
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'addToSelected',AddToSelected},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (AddToSelected)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 1490
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-selectCol/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 1491
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1491
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 1493
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1492
				  call 'wxe_util':'cast'
				      (499, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'selectCol',3}}] )
	    -| ['compiler_generated'] )
	end
'selectRow'/2 =
    %% Line 1499
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Row>
	      when %% Line 1500
		call 'erlang':'is_integer'
		    (Row) ->
	      %% Line 1501
	      apply 'selectRow'/3
		  (This, Row, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'selectRow',2}}] )
	    -| ['compiler_generated'] )
	end
'selectRow'/3 =
    %% Line 1507
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Row,Options>
	      when let <_cor3> =
		    %% Line 1508
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1508
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 1508
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1509
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1510
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'addToSelected',AddToSelected},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (AddToSelected)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 1511
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-selectRow/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 1512
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1512
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 1514
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Row>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1513
				  call 'wxe_util':'cast'
				      (500, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'selectRow',3}}] )
	    -| ['compiler_generated'] )
	end
'setCellAlignment'/2 =
    %% Line 1519
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Align>
	      when %% Line 1520
		call 'erlang':'is_integer'
		    (Align) ->
	      do  %% Line 1521
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1523
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Align>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1522
		      call 'wxe_util':'cast'
			  (503, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setCellAlignment',2}}] )
	    -| ['compiler_generated'] )
	end
'setCellAlignment'/4 =
    %% Line 1528
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Align,Row,Col>
	      when %% Line 1529
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Align)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Row)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Col)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1530
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor10> =
		      %% Line 1532
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Align>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1531
		      call 'wxe_util':'cast'
			  (502, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setCellAlignment',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellAlignment'/5 =
    %% Line 1537
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Row,Col,Horiz,Vert>
	      when %% Line 1538
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Row)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Col)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (Horiz)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(Vert)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1539
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor13> =
		      %% Line 1541
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']]),
			#<Horiz>(32,1,'integer',['unsigned'|['native']]),
			#<Vert>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1540
		      call 'wxe_util':'cast'
			  (501, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'setCellAlignment',5}}] )
	    -| ['compiler_generated'] )
	end
'setCellBackgroundColour'/2 =
    %% Line 1546
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Col>
	      when let <_cor3> =
		    %% Line 1547
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Col)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1547
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1547
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1548
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1550
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor9> =
			  %% Line 1550
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1549
			  call 'wxe_util':'cast'
			      (505, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setCellBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setCellBackgroundColour'/4 =
    %% Line 1561
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Row,Col,Val>
	      when let <_cor9> =
		    %% Line 1562
		    try
			let <_cor4> =
			    call 'erlang':'is_integer'
				(Row)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Col)
			    in  let <_cor6> =
				    call 'erlang':'tuple_size'
					(Val)
				in  let <_cor7> =
					call 'erlang':'=:='
					    (_cor6, 3)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor5, _cor7)
					in  call 'erlang':'and'
						(_cor4, _cor8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor11> =
			%% Line 1562
			try
			    let <_cor10> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor10, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1562
			call 'erlang':'or'
			    (_cor9, _cor11) ->
	      do  %% Line 1563
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor14> =
		      %% Line 1565
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor15> =
			  %% Line 1565
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor14>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1564
			  call 'wxe_util':'cast'
			      (504, _cor15)
	  %% Line 1566
	  <{'wx_ref',ThisRef,ThisT,_cor33},Colour,Row,Col>
	      when let <_cor17> =
		    %% Line 1567
		    try
			let <_cor16> =
			    call 'erlang':'tuple_size'
				(Colour)
			in  call 'erlang':'=:='
				(_cor16, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor23> =
			%% Line 1567
			try
			    let <_cor18> =
				call 'erlang':'tuple_size'
				    (Colour)
			    in  let <_cor19> =
				    call 'erlang':'=:='
					(_cor18, 4)
				in  let <_cor20> =
					call 'erlang':'is_integer'
					    (Row)
				    in  let <_cor21> =
					    call 'erlang':'is_integer'
						(Col)
					in  let <_cor22> =
						call 'erlang':'and'
						    (_cor20, _cor21)
					    in  call 'erlang':'and'
						    (_cor19, _cor22)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1567
			call 'erlang':'or'
			    (_cor17, _cor23) ->
	      do  %% Line 1568
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor26> =
		      %% Line 1570
		      call 'wxe_util':'colour_bin'
			  (Colour)
		  in  let <_cor27> =
			  %% Line 1570
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor26>(16,8,'binary',['unsigned'|['big']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1569
			  call 'wxe_util':'cast'
			      (506, _cor27)
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'setCellBackgroundColour',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellEditor'/4 =
    %% Line 1575
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Row,Col,{'wx_ref',EditorRef,EditorT,_cor16}>
	      when let <_cor4> =
		    %% Line 1576
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor5> =
			%% Line 1576
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1576
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 1577
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1578
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (EditorT,
				       'wxGridCellEditor') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call EditorT:'parent_class'
				    ('wxGridCellEditor')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 1580
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<EditorRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1579
			  call 'wxe_util':'cast'
			      (507, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setCellEditor',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellFont'/4 =
    %% Line 1585
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Row,Col,{'wx_ref',ValRef,ValT,_cor16}>
	      when let <_cor4> =
		    %% Line 1586
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor5> =
			%% Line 1586
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1586
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 1587
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1588
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ValT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ValT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 1590
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<ValRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1589
			  call 'wxe_util':'cast'
			      (508, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setCellFont',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellRenderer'/4 =
    %% Line 1595
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor15},Row,Col,{'wx_ref',RendererRef,RendererT,_cor16}>
	      when let <_cor4> =
		    %% Line 1596
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor5> =
			%% Line 1596
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1596
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      do  %% Line 1597
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1598
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RendererT,
				       'wxGridCellRenderer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RendererT:'parent_class'
				    ('wxGridCellRenderer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 1600
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<RendererRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1599
			  call 'wxe_util':'cast'
			      (509, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'setCellRenderer',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellTextColour'/2 =
    %% Line 1605
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Col>
	      when let <_cor3> =
		    %% Line 1606
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Col)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1606
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Col)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1606
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1607
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1609
		      call 'wxe_util':'colour_bin'
			  (Col)
		  in  let <_cor9> =
			  %% Line 1609
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1608
			  call 'wxe_util':'cast'
			      (512, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setCellTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setCellTextColour'/4 =
    %% Line 1620
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor32},Row,Col,Val>
	      when let <_cor9> =
		    %% Line 1621
		    try
			let <_cor4> =
			    call 'erlang':'is_integer'
				(Row)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Col)
			    in  let <_cor6> =
				    call 'erlang':'tuple_size'
					(Val)
				in  let <_cor7> =
					call 'erlang':'=:='
					    (_cor6, 3)
				    in  let <_cor8> =
					    call 'erlang':'and'
						(_cor5, _cor7)
					in  call 'erlang':'and'
						(_cor4, _cor8)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor11> =
			%% Line 1621
			try
			    let <_cor10> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor10, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1621
			call 'erlang':'or'
			    (_cor9, _cor11) ->
	      do  %% Line 1622
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor14> =
		      %% Line 1624
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor15> =
			  %% Line 1624
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor14>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1623
			  call 'wxe_util':'cast'
			      (510, _cor15)
	  %% Line 1625
	  <{'wx_ref',ThisRef,ThisT,_cor33},Val,Row,Col>
	      when let <_cor17> =
		    %% Line 1626
		    try
			let <_cor16> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor16, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor23> =
			%% Line 1626
			try
			    let <_cor18> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  let <_cor19> =
				    call 'erlang':'=:='
					(_cor18, 4)
				in  let <_cor20> =
					call 'erlang':'is_integer'
					    (Row)
				    in  let <_cor21> =
					    call 'erlang':'is_integer'
						(Col)
					in  let <_cor22> =
						call 'erlang':'and'
						    (_cor20, _cor21)
					    in  call 'erlang':'and'
						    (_cor19, _cor22)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1626
			call 'erlang':'or'
			    (_cor17, _cor23) ->
	      do  %% Line 1627
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor26> =
		      %% Line 1629
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor27> =
			  %% Line 1629
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor26>(16,8,'binary',['unsigned'|['big']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1628
			  call 'wxe_util':'cast'
			      (511, _cor27)
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'setCellTextColour',4}}] )
	    -| ['compiler_generated'] )
	end
'setCellValue'/3 =
    %% Line 1634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},{CoordsR,CoordsC},S>
	      when %% Line 1635
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (CoordsR)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(CoordsC)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (S)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1636
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <S_UC> =
		      %% Line 1637
		      call 'unicode':'characters_to_binary'
			  ([S|[0]])
		  in  let <_cor15> =
			  %% Line 1639
			  call 'erlang':'byte_size'
			      (S_UC)
		      in  let <_cor10> =
			      %% Line 1639
			      call 'erlang':'byte_size'
				  (S_UC)
			  in  let <_cor11> =
				  %% Line 1639
				  call 'erlang':'+'
				      (0, _cor10)
			      in  let <_cor12> =
				      %% Line 1639
				      call 'erlang':'band'
					  (_cor11, 7)
				  in  let <_cor13> =
					  %% Line 1639
					  call 'erlang':'-'
					      (8, _cor12)
				      in  let <_cor14> =
					      %% Line 1639
					      call 'erlang':'band'
						  (_cor13, 7)
					  in  let <_cor16> =
						  %% Line 1639
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<CoordsR>(32,1,'integer',['unsigned'|['native']]),
						    #<CoordsC>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor15>(32,1,'integer',['unsigned'|['native']]),
						    #<S_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor14,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1638
						  call 'wxe_util':'cast'
						      (514, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setCellValue',3}}] )
	    -| ['compiler_generated'] )
	end
'setCellValue'/4 =
    %% Line 1650
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor36},Row,Col,S>
	      when %% Line 1651
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Row)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Col)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (S)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1652
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <S_UC> =
		      %% Line 1653
		      call 'unicode':'characters_to_binary'
			  ([S|[0]])
		  in  let <_cor16> =
			  %% Line 1655
			  call 'erlang':'byte_size'
			      (S_UC)
		      in  let <_cor11> =
			      %% Line 1655
			      call 'erlang':'byte_size'
				  (S_UC)
			  in  let <_cor12> =
				  %% Line 1655
				  call 'erlang':'+'
				      (0, _cor11)
			      in  let <_cor13> =
				      %% Line 1655
				      call 'erlang':'band'
					  (_cor12, 7)
				  in  let <_cor14> =
					  %% Line 1655
					  call 'erlang':'-'
					      (8, _cor13)
				      in  let <_cor15> =
					      %% Line 1655
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor17> =
						  %% Line 1655
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Row>(32,1,'integer',['unsigned'|['native']]),
						    #<Col>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
						    #<S_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1654
						  call 'wxe_util':'cast'
						      (513, _cor17)
	  %% Line 1656
	  <{'wx_ref',ThisRef,ThisT,_cor37},Val,Row,Col>
	      when %% Line 1657
		try
		    let <_cor18> =
			call 'erlang':'is_list'
			    (Val)
		    in  let <_cor19> =
			    call 'erlang':'is_integer'
				(Row)
			in  let <_cor20> =
				call 'erlang':'is_integer'
				    (Col)
			    in  let <_cor21> =
				    call 'erlang':'and'
					(_cor19, _cor20)
				in  call 'erlang':'and'
					(_cor18, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1658
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Val_UC> =
		      %% Line 1659
		      call 'unicode':'characters_to_binary'
			  ([Val|[0]])
		  in  let <_cor30> =
			  %% Line 1661
			  call 'erlang':'byte_size'
			      (Val_UC)
		      in  let <_cor25> =
			      %% Line 1661
			      call 'erlang':'byte_size'
				  (Val_UC)
			  in  let <_cor26> =
				  %% Line 1661
				  call 'erlang':'+'
				      (0, _cor25)
			      in  let <_cor27> =
				      %% Line 1661
				      call 'erlang':'band'
					  (_cor26, 7)
				  in  let <_cor28> =
					  %% Line 1661
					  call 'erlang':'-'
					      (8, _cor27)
				      in  let <_cor29> =
					      %% Line 1661
					      call 'erlang':'band'
						  (_cor28, 7)
					  in  let <_cor31> =
						  %% Line 1661
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor30>(32,1,'integer',['unsigned'|['native']]),
						    #<Val_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor29,8,'integer',['unsigned'|['big']]),
						    #<Row>(32,1,'integer',['unsigned'|['native']]),
						    #<Col>(32,1,'integer',['unsigned'|['native']])}#
					      in  %% Line 1660
						  call 'wxe_util':'cast'
						      (515, _cor31)
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'setCellValue',4}}] )
	    -| ['compiler_generated'] )
	end
'setColAttr'/3 =
    %% Line 1666
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,{'wx_ref',AttrRef,AttrT,_cor12}>
	      when %% Line 1667
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 1668
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1669
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (AttrT,
				       'wxGridCellAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call AttrT:'parent_class'
				    ('wxGridCellAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 1671
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Col>(32,1,'integer',['unsigned'|['native']]),
			    #<AttrRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1670
			  call 'wxe_util':'cast'
			      (516, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColAttr',3}}] )
	    -| ['compiler_generated'] )
	end
'setColFormatBool'/2 =
    %% Line 1676
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Col>
	      when %% Line 1677
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 1678
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1680
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1679
		      call 'wxe_util':'cast'
			  (517, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setColFormatBool',2}}] )
	    -| ['compiler_generated'] )
	end
'setColFormatNumber'/2 =
    %% Line 1685
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Col>
	      when %% Line 1686
		call 'erlang':'is_integer'
		    (Col) ->
	      do  %% Line 1687
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1689
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1688
		      call 'wxe_util':'cast'
			  (518, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setColFormatNumber',2}}] )
	    -| ['compiler_generated'] )
	end
'setColFormatFloat'/2 =
    %% Line 1695
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Col>
	      when %% Line 1696
		call 'erlang':'is_integer'
		    (Col) ->
	      %% Line 1697
	      apply 'setColFormatFloat'/3
		  (This, Col, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setColFormatFloat',2}}] )
	    -| ['compiler_generated'] )
	end
'setColFormatFloat'/3 =
    %% Line 1704
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Col,Options>
	      when let <_cor3> =
		    %% Line 1705
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1705
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 1705
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1706
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1707
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'width',Width},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Width>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 1708
			      <{'precision',Precision},Acc> when 'true' ->
				  let <_cor8> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<Precision>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor8|Acc]
			      %% Line 1709
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setColFormatFloat/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 1710
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1710
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 1712
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1711
				  call 'wxe_util':'cast'
				      (519, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setColFormatFloat',3}}] )
	    -| ['compiler_generated'] )
	end
'setColFormatCustom'/3 =
    %% Line 1717
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Col,TypeName>
	      when let <_cor3> =
		    %% Line 1718
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1718
			call 'erlang':'is_list'
			    (TypeName)
		    in  %% Line 1718
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1719
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <TypeName_UC> =
		      %% Line 1720
		      call 'unicode':'characters_to_binary'
			  ([TypeName|[0]])
		  in  let <_cor13> =
			  %% Line 1722
			  call 'erlang':'byte_size'
			      (TypeName_UC)
		      in  let <_cor8> =
			      %% Line 1722
			      call 'erlang':'byte_size'
				  (TypeName_UC)
			  in  let <_cor9> =
				  %% Line 1722
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 1722
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 1722
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 1722
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 1722
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Col>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<TypeName_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1721
						  call 'wxe_util':'cast'
						      (520, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setColFormatCustom',3}}] )
	    -| ['compiler_generated'] )
	end
'setColLabelAlignment'/3 =
    %% Line 1727
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Horiz,Vert>
	      when let <_cor3> =
		    %% Line 1728
		    call 'erlang':'is_integer'
			(Horiz)
		in  let <_cor4> =
			%% Line 1728
			call 'erlang':'is_integer'
			    (Vert)
		    in  %% Line 1728
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1729
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1731
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Horiz>(32,1,'integer',['unsigned'|['native']]),
			#<Vert>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1730
		      call 'wxe_util':'cast'
			  (521, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColLabelAlignment',3}}] )
	    -| ['compiler_generated'] )
	end
'setColLabelSize'/2 =
    %% Line 1736
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Height>
	      when %% Line 1737
		call 'erlang':'is_integer'
		    (Height) ->
	      do  %% Line 1738
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1740
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1739
		      call 'wxe_util':'cast'
			  (522, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setColLabelSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setColLabelValue'/3 =
    %% Line 1745
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Col,Val>
	      when let <_cor3> =
		    %% Line 1746
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1746
			call 'erlang':'is_list'
			    (Val)
		    in  %% Line 1746
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1747
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Val_UC> =
		      %% Line 1748
		      call 'unicode':'characters_to_binary'
			  ([Val|[0]])
		  in  let <_cor13> =
			  %% Line 1750
			  call 'erlang':'byte_size'
			      (Val_UC)
		      in  let <_cor8> =
			      %% Line 1750
			      call 'erlang':'byte_size'
				  (Val_UC)
			  in  let <_cor9> =
				  %% Line 1750
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 1750
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 1750
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 1750
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 1750
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Col>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Val_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1749
						  call 'wxe_util':'cast'
						      (523, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setColLabelValue',3}}] )
	    -| ['compiler_generated'] )
	end
'setColMinimalWidth'/3 =
    %% Line 1755
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,Width>
	      when let <_cor3> =
		    %% Line 1756
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1756
			call 'erlang':'is_integer'
			    (Width)
		    in  %% Line 1756
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1757
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1759
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1758
		      call 'wxe_util':'cast'
			  (524, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColMinimalWidth',3}}] )
	    -| ['compiler_generated'] )
	end
'setColMinimalAcceptableWidth'/2 =
    %% Line 1764
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 1765
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 1766
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1768
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1767
		      call 'wxe_util':'cast'
			  (525, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setColMinimalAcceptableWidth',2}}] )
	    -| ['compiler_generated'] )
	end
'setColSize'/3 =
    %% Line 1773
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Col,Width>
	      when let <_cor3> =
		    %% Line 1774
		    call 'erlang':'is_integer'
			(Col)
		in  let <_cor4> =
			%% Line 1774
			call 'erlang':'is_integer'
			    (Width)
		    in  %% Line 1774
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1775
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1777
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1776
		      call 'wxe_util':'cast'
			  (526, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setColSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultCellAlignment'/3 =
    %% Line 1782
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Horiz,Vert>
	      when let <_cor3> =
		    %% Line 1783
		    call 'erlang':'is_integer'
			(Horiz)
		in  let <_cor4> =
			%% Line 1783
			call 'erlang':'is_integer'
			    (Vert)
		    in  %% Line 1783
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1784
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1786
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Horiz>(32,1,'integer',['unsigned'|['native']]),
			#<Vert>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1785
		      call 'wxe_util':'cast'
			  (527, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setDefaultCellAlignment',3}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultCellBackgroundColour'/2 =
    %% Line 1791
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Val>
	      when let <_cor3> =
		    %% Line 1792
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1792
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1792
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1793
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1795
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor9> =
			  %% Line 1795
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1794
			  call 'wxe_util':'cast'
			      (528, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setDefaultCellBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultCellFont'/2 =
    %% Line 1800
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ValRef,ValT,_cor10}> when 'true' ->
	      do  %% Line 1801
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1802
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ValT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ValT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1804
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ValRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1803
			  call 'wxe_util':'cast'
			      (529, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDefaultCellFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultCellTextColour'/2 =
    %% Line 1809
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Val>
	      when let <_cor3> =
		    %% Line 1810
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1810
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1810
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1811
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1813
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor9> =
			  %% Line 1813
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1812
			  call 'wxe_util':'cast'
			      (530, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setDefaultCellTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultEditor'/2 =
    %% Line 1818
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',EditorRef,EditorT,_cor10}> when 'true' ->
	      do  %% Line 1819
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1820
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (EditorT,
				       'wxGridCellEditor') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call EditorT:'parent_class'
				    ('wxGridCellEditor')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1822
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<EditorRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1821
			  call 'wxe_util':'cast'
			      (531, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDefaultEditor',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultRenderer'/2 =
    %% Line 1827
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',RendererRef,RendererT,_cor10}> when 'true' ->
	      do  %% Line 1828
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1829
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (RendererT,
				       'wxGridCellRenderer') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call RendererT:'parent_class'
				    ('wxGridCellRenderer')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1831
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<RendererRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1830
			  call 'wxe_util':'cast'
			      (532, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setDefaultRenderer',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultColSize'/2 =
    %% Line 1837
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Width>
	      when %% Line 1838
		call 'erlang':'is_integer'
		    (Width) ->
	      %% Line 1839
	      apply 'setDefaultColSize'/3
		  (This, Width, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setDefaultColSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultColSize'/3 =
    %% Line 1845
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Width,Options>
	      when let <_cor3> =
		    %% Line 1846
		    call 'erlang':'is_integer'
			(Width)
		in  let <_cor4> =
			%% Line 1846
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 1846
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1847
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1848
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'resizeExistingCols',ResizeExistingCols},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (ResizeExistingCols)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 1849
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setDefaultColSize/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 1850
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1850
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 1852
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Width>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1851
				  call 'wxe_util':'cast'
				      (533, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setDefaultColSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultRowSize'/2 =
    %% Line 1858
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Height>
	      when %% Line 1859
		call 'erlang':'is_integer'
		    (Height) ->
	      %% Line 1860
	      apply 'setDefaultRowSize'/3
		  (This, Height, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'setDefaultRowSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setDefaultRowSize'/3 =
    %% Line 1866
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},Height,Options>
	      when let <_cor3> =
		    %% Line 1867
		    call 'erlang':'is_integer'
			(Height)
		in  let <_cor4> =
			%% Line 1867
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 1867
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1868
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1869
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'resizeExistingRows',ResizeExistingRows},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (ResizeExistingRows)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 1870
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setDefaultRowSize/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 1871
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1871
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 1873
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Height>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1872
				  call 'wxe_util':'cast'
				      (534, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'setDefaultRowSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setGridCursor'/3 =
    %% Line 1878
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 1879
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1879
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1879
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1880
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1882
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Col>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1881
		      call 'wxe_util':'cast'
			  (535, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setGridCursor',3}}] )
	    -| ['compiler_generated'] )
	end
'setGridLineColour'/2 =
    %% Line 1887
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Val>
	      when let <_cor3> =
		    %% Line 1888
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1888
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1888
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1889
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1891
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor9> =
			  %% Line 1891
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1890
			  call 'wxe_util':'cast'
			      (536, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setGridLineColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setLabelBackgroundColour'/2 =
    %% Line 1896
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Val>
	      when let <_cor3> =
		    %% Line 1897
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1897
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1897
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1898
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1900
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor9> =
			  %% Line 1900
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1899
			  call 'wxe_util':'cast'
			      (537, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setLabelBackgroundColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setLabelFont'/2 =
    %% Line 1905
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ValRef,ValT,_cor10}> when 'true' ->
	      do  %% Line 1906
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1907
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ValT,
				       'wxFont') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ValT:'parent_class'
				    ('wxFont')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 1909
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ValRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1908
			  call 'wxe_util':'cast'
			      (538, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'setLabelFont',2}}] )
	    -| ['compiler_generated'] )
	end
'setLabelTextColour'/2 =
    %% Line 1914
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Val>
	      when let <_cor3> =
		    %% Line 1915
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(Val)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 1915
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (Val)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 1915
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 1916
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 1918
		      call 'wxe_util':'colour_bin'
			  (Val)
		  in  let <_cor9> =
			  %% Line 1918
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 1917
			  call 'wxe_util':'cast'
			      (539, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setLabelTextColour',2}}] )
	    -| ['compiler_generated'] )
	end
'setMargins'/3 =
    %% Line 1923
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},ExtraWidth,ExtraHeight>
	      when let <_cor3> =
		    %% Line 1924
		    call 'erlang':'is_integer'
			(ExtraWidth)
		in  let <_cor4> =
			%% Line 1924
			call 'erlang':'is_integer'
			    (ExtraHeight)
		    in  %% Line 1924
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1925
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1927
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<ExtraWidth>(32,1,'integer',['unsigned'|['native']]),
			#<ExtraHeight>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1926
		      call 'wxe_util':'cast'
			  (540, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setMargins',3}}] )
	    -| ['compiler_generated'] )
	end
'setReadOnly'/3 =
    %% Line 1933
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Row,Col>
	      when let <_cor3> =
		    %% Line 1934
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1934
			call 'erlang':'is_integer'
			    (Col)
		    in  %% Line 1934
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 1935
	      apply 'setReadOnly'/4
		  (This, Row, Col, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'setReadOnly',3}}] )
	    -| ['compiler_generated'] )
	end
'setReadOnly'/4 =
    %% Line 1941
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor24},Row,Col,Options>
	      when %% Line 1942
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Row)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Col)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1943
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 1944
		      ( fun (_cor13,_cor12) ->
			    case <_cor13,_cor12> of
			      <{'isReadOnly',IsReadOnly},Acc> when 'true' ->
				  let <_cor10> =
				      call 'wxe_util':'from_bool'
					  (IsReadOnly)
				  in  let <_cor11> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor10>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor11|Acc]
			      %% Line 1945
			      <BadOpt,_cor25> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-setReadOnly/4-fun-0-'}}] )
		  in  let <_cor17> =
			  %% Line 1946
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 1946
			      call 'erlang':'list_to_binary'
				  (_cor17)
			  in  let <_cor19> =
				  %% Line 1948
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Row>(32,1,'integer',['unsigned'|['native']]),
				    #<Col>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1947
				  call 'wxe_util':'cast'
				      (541, _cor19)
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'setReadOnly',4}}] )
	    -| ['compiler_generated'] )
	end
'setRowAttr'/3 =
    %% Line 1953
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,{'wx_ref',AttrRef,AttrT,_cor12}>
	      when %% Line 1954
		call 'erlang':'is_integer'
		    (Row) ->
	      do  %% Line 1955
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 1956
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (AttrT,
				       'wxGridCellAttr') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call AttrT:'parent_class'
				    ('wxGridCellAttr')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 1958
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Row>(32,1,'integer',['unsigned'|['native']]),
			    #<AttrRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 1957
			  call 'wxe_util':'cast'
			      (542, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setRowAttr',3}}] )
	    -| ['compiler_generated'] )
	end
'setRowLabelAlignment'/3 =
    %% Line 1963
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Horiz,Vert>
	      when let <_cor3> =
		    %% Line 1964
		    call 'erlang':'is_integer'
			(Horiz)
		in  let <_cor4> =
			%% Line 1964
			call 'erlang':'is_integer'
			    (Vert)
		    in  %% Line 1964
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1965
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1967
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Horiz>(32,1,'integer',['unsigned'|['native']]),
			#<Vert>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1966
		      call 'wxe_util':'cast'
			  (543, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setRowLabelAlignment',3}}] )
	    -| ['compiler_generated'] )
	end
'setRowLabelSize'/2 =
    %% Line 1972
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 1973
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 1974
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 1976
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1975
		      call 'wxe_util':'cast'
			  (544, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setRowLabelSize',2}}] )
	    -| ['compiler_generated'] )
	end
'setRowLabelValue'/3 =
    %% Line 1981
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Row,Val>
	      when let <_cor3> =
		    %% Line 1982
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1982
			call 'erlang':'is_list'
			    (Val)
		    in  %% Line 1982
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1983
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Val_UC> =
		      %% Line 1984
		      call 'unicode':'characters_to_binary'
			  ([Val|[0]])
		  in  let <_cor13> =
			  %% Line 1986
			  call 'erlang':'byte_size'
			      (Val_UC)
		      in  let <_cor8> =
			      %% Line 1986
			      call 'erlang':'byte_size'
				  (Val_UC)
			  in  let <_cor9> =
				  %% Line 1986
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 1986
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 1986
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 1986
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 1986
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Row>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Val_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 1985
						  call 'wxe_util':'cast'
						      (545, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setRowLabelValue',3}}] )
	    -| ['compiler_generated'] )
	end
'setRowMinimalHeight'/3 =
    %% Line 1991
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Width>
	      when let <_cor3> =
		    %% Line 1992
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 1992
			call 'erlang':'is_integer'
			    (Width)
		    in  %% Line 1992
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1993
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 1995
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 1994
		      call 'wxe_util':'cast'
			  (546, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setRowMinimalHeight',3}}] )
	    -| ['compiler_generated'] )
	end
'setRowMinimalAcceptableHeight'/2 =
    %% Line 2000
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Width>
	      when %% Line 2001
		call 'erlang':'is_integer'
		    (Width) ->
	      do  %% Line 2002
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2004
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Width>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2003
		      call 'wxe_util':'cast'
			  (547, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setRowMinimalAcceptableHeight',2}}] )
	    -| ['compiler_generated'] )
	end
'setRowSize'/3 =
    %% Line 2009
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor11},Row,Height>
	      when let <_cor3> =
		    %% Line 2010
		    call 'erlang':'is_integer'
			(Row)
		in  let <_cor4> =
			%% Line 2010
			call 'erlang':'is_integer'
			    (Height)
		    in  %% Line 2010
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 2011
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 2013
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Row>(32,1,'integer',['unsigned'|['native']]),
			#<Height>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2012
		      call 'wxe_util':'cast'
			  (548, _cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'setRowSize',3}}] )
	    -| ['compiler_generated'] )
	end
'setScrollLineX'/2 =
    %% Line 2018
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 2019
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 2020
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2022
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2021
		      call 'wxe_util':'cast'
			  (549, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setScrollLineX',2}}] )
	    -| ['compiler_generated'] )
	end
'setScrollLineY'/2 =
    %% Line 2027
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 2028
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 2029
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2031
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2030
		      call 'wxe_util':'cast'
			  (550, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setScrollLineY',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelectionBackground'/2 =
    %% Line 2036
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},C>
	      when let <_cor3> =
		    %% Line 2037
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(C)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 2037
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (C)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 2037
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 2038
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 2040
		      call 'wxe_util':'colour_bin'
			  (C)
		  in  let <_cor9> =
			  %% Line 2040
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 2039
			  call 'wxe_util':'cast'
			      (551, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setSelectionBackground',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelectionForeground'/2 =
    %% Line 2045
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},C>
	      when let <_cor3> =
		    %% Line 2046
		    try
			let <_cor2> =
			    call 'erlang':'tuple_size'
				(C)
			in  call 'erlang':'=:='
				(_cor2, 3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor5> =
			%% Line 2046
			try
			    let <_cor4> =
				call 'erlang':'tuple_size'
				    (C)
			    in  call 'erlang':'=:='
				    (_cor4, 4)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  %% Line 2046
			call 'erlang':'or'
			    (_cor3, _cor5) ->
	      do  %% Line 2047
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor8> =
		      %% Line 2049
		      call 'wxe_util':'colour_bin'
			  (C)
		  in  let <_cor9> =
			  %% Line 2049
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor8>(16,8,'binary',['unsigned'|['big']])}#
		      in  %% Line 2048
			  call 'wxe_util':'cast'
			      (552, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'setSelectionForeground',2}}] )
	    -| ['compiler_generated'] )
	end
'setSelectionMode'/2 =
    %% Line 2055
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Selmode>
	      when %% Line 2056
		call 'erlang':'is_integer'
		    (Selmode) ->
	      do  %% Line 2057
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2059
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Selmode>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2058
		      call 'wxe_util':'cast'
			  (553, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setSelectionMode',2}}] )
	    -| ['compiler_generated'] )
	end
'showCellEditControl'/1 =
    %% Line 2064
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 2065
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 2067
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2066
		      call 'wxe_util':'cast'
			  (554, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'showCellEditControl',1}}] )
	    -| ['compiler_generated'] )
	end
'xToCol'/2 =
    %% Line 2073
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},X>
	      when %% Line 2074
		call 'erlang':'is_integer'
		    (X) ->
	      %% Line 2075
	      apply 'xToCol'/3
		  (This, X, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'xToCol',2}}] )
	    -| ['compiler_generated'] )
	end
'xToCol'/3 =
    %% Line 2081
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor20},X,Options>
	      when let <_cor3> =
		    %% Line 2082
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 2082
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 2082
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 2083
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 2084
		      ( fun (_cor10,_cor9) ->
			    case <_cor10,_cor9> of
			      <{'clipToMinMax',ClipToMinMax},Acc> when 'true' ->
				  let <_cor7> =
				      call 'wxe_util':'from_bool'
					  (ClipToMinMax)
				  in  let <_cor8> =
					  #{#<1>(32,1,'integer',['unsigned'|['native']]),
					    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor8|Acc]
			      %% Line 2085
			      <BadOpt,_cor21> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-xToCol/3-fun-0-'}}] )
		  in  let <_cor14> =
			  %% Line 2086
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 2086
			      call 'erlang':'list_to_binary'
				  (_cor14)
			  in  let <_cor16> =
				  %% Line 2088
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<X>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 2087
				  call 'wxe_util':'call'
				      (555, _cor16)
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'xToCol',3}}] )
	    -| ['compiler_generated'] )
	end
'xToEdgeOfCol'/2 =
    %% Line 2093
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},X>
	      when %% Line 2094
		call 'erlang':'is_integer'
		    (X) ->
	      do  %% Line 2095
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2097
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<X>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2096
		      call 'wxe_util':'call'
			  (556, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'xToEdgeOfCol',2}}] )
	    -| ['compiler_generated'] )
	end
'yToEdgeOfRow'/2 =
    %% Line 2102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 2103
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 2104
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2106
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2105
		      call 'wxe_util':'call'
			  (557, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'yToEdgeOfRow',2}}] )
	    -| ['compiler_generated'] )
	end
'yToRow'/2 =
    %% Line 2111
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Y>
	      when %% Line 2112
		call 'erlang':'is_integer'
		    (Y) ->
	      do  %% Line 2113
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 2115
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Y>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 2114
		      call 'wxe_util':'call'
			  (558, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'yToRow',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 2119
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 2120
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxGrid') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxGrid')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 2121
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 2122
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setTargetWindow'/2 =
    %% Line 2125
    fun (_cor1,_cor0) ->
	call 'wxScrolledWindow':'setTargetWindow'
	    (_cor1, _cor0)
'setScrollRate'/3 =
    %% Line 2127
    fun (_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'setScrollRate'
	    (_cor2, _cor1, _cor0)
'setScrollbars'/6 =
    %% Line 2129
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'setScrollbars'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbars'/5 =
    %% Line 2131
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'setScrollbars'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'scroll'/3 =
    %% Line 2133
    fun (_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'scroll'
	    (_cor2, _cor1, _cor0)
'prepareDC'/2 =
    %% Line 2135
    fun (_cor1,_cor0) ->
	call 'wxScrolledWindow':'prepareDC'
	    (_cor1, _cor0)
'doPrepareDC'/2 =
    %% Line 2137
    fun (_cor1,_cor0) ->
	call 'wxScrolledWindow':'doPrepareDC'
	    (_cor1, _cor0)
'getViewStart'/1 =
    %% Line 2139
    fun (_cor0) ->
	call 'wxScrolledWindow':'getViewStart'
	    (_cor0)
'getScrollPixelsPerUnit'/1 =
    %% Line 2141
    fun (_cor0) ->
	call 'wxScrolledWindow':'getScrollPixelsPerUnit'
	    (_cor0)
'enableScrolling'/3 =
    %% Line 2143
    fun (_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'enableScrolling'
	    (_cor2, _cor1, _cor0)
'calcUnscrolledPosition'/3 =
    %% Line 2145
    fun (_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'calcUnscrolledPosition'
	    (_cor2, _cor1, _cor0)
'calcUnscrolledPosition'/2 =
    %% Line 2147
    fun (_cor1,_cor0) ->
	call 'wxScrolledWindow':'calcUnscrolledPosition'
	    (_cor1, _cor0)
'calcScrolledPosition'/3 =
    %% Line 2149
    fun (_cor2,_cor1,_cor0) ->
	call 'wxScrolledWindow':'calcScrolledPosition'
	    (_cor2, _cor1, _cor0)
'calcScrolledPosition'/2 =
    %% Line 2151
    fun (_cor1,_cor0) ->
	call 'wxScrolledWindow':'calcScrolledPosition'
	    (_cor1, _cor0)
'setFocusIgnoringChildren'/1 =
    %% Line 2154
    fun (_cor0) ->
	call 'wxPanel':'setFocusIgnoringChildren'
	    (_cor0)
'initDialog'/1 =
    %% Line 2156
    fun (_cor0) ->
	call 'wxPanel':'initDialog'
	    (_cor0)
'warpPointer'/3 =
    %% Line 2159
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'warpPointer'
	    (_cor2, _cor1, _cor0)
'validate'/1 =
    %% Line 2161
    fun (_cor0) ->
	call 'wxWindow':'validate'
	    (_cor0)
'updateWindowUI'/2 =
    %% Line 2163
    fun (_cor1,_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor1, _cor0)
'updateWindowUI'/1 =
    %% Line 2165
    fun (_cor0) ->
	call 'wxWindow':'updateWindowUI'
	    (_cor0)
'update'/1 =
    %% Line 2167
    fun (_cor0) ->
	call 'wxWindow':'update'
	    (_cor0)
'transferDataToWindow'/1 =
    %% Line 2169
    fun (_cor0) ->
	call 'wxWindow':'transferDataToWindow'
	    (_cor0)
'transferDataFromWindow'/1 =
    %% Line 2171
    fun (_cor0) ->
	call 'wxWindow':'transferDataFromWindow'
	    (_cor0)
'thaw'/1 =
    %% Line 2173
    fun (_cor0) ->
	call 'wxWindow':'thaw'
	    (_cor0)
'show'/2 =
    %% Line 2175
    fun (_cor1,_cor0) ->
	call 'wxWindow':'show'
	    (_cor1, _cor0)
'show'/1 =
    %% Line 2177
    fun (_cor0) ->
	call 'wxWindow':'show'
	    (_cor0)
'shouldInheritColours'/1 =
    %% Line 2179
    fun (_cor0) ->
	call 'wxWindow':'shouldInheritColours'
	    (_cor0)
'setWindowVariant'/2 =
    %% Line 2181
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowVariant'
	    (_cor1, _cor0)
'setWindowStyleFlag'/2 =
    %% Line 2183
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyleFlag'
	    (_cor1, _cor0)
'setWindowStyle'/2 =
    %% Line 2185
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setWindowStyle'
	    (_cor1, _cor0)
'setVirtualSizeHints'/4 =
    %% Line 2187
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setVirtualSizeHints'/3 =
    %% Line 2189
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor2, _cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 2191
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setVirtualSize'/3 =
    %% Line 2193
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor2, _cor1, _cor0)
'setVirtualSize'/2 =
    %% Line 2195
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setVirtualSize'
	    (_cor1, _cor0)
'setToolTip'/2 =
    %% Line 2197
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setToolTip'
	    (_cor1, _cor0)
'setThemeEnabled'/2 =
    %% Line 2199
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setThemeEnabled'
	    (_cor1, _cor0)
'setSizerAndFit'/3 =
    %% Line 2201
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor2, _cor1, _cor0)
'setSizerAndFit'/2 =
    %% Line 2203
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizerAndFit'
	    (_cor1, _cor0)
'setSizer'/3 =
    %% Line 2205
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor2, _cor1, _cor0)
'setSizer'/2 =
    %% Line 2207
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizer'
	    (_cor1, _cor0)
'setSizeHints'/4 =
    %% Line 2209
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor3, _cor2, _cor1, _cor0)
'setSizeHints'/3 =
    %% Line 2211
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor2, _cor1, _cor0)
'setSizeHints'/2 =
    %% Line 2213
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSizeHints'
	    (_cor1, _cor0)
'setSize'/6 =
    %% Line 2215
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/5 =
    %% Line 2217
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setSize'/3 =
    %% Line 2219
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor2, _cor1, _cor0)
'setSize'/2 =
    %% Line 2221
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setSize'
	    (_cor1, _cor0)
'setScrollPos'/4 =
    %% Line 2223
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor3, _cor2, _cor1, _cor0)
'setScrollPos'/3 =
    %% Line 2225
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollPos'
	    (_cor2, _cor1, _cor0)
'setScrollbar'/6 =
    %% Line 2227
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'setScrollbar'/5 =
    %% Line 2229
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setScrollbar'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'setPalette'/2 =
    %% Line 2231
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setPalette'
	    (_cor1, _cor0)
'setName'/2 =
    %% Line 2233
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setName'
	    (_cor1, _cor0)
'setLabel'/2 =
    %% Line 2235
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setLabel'
	    (_cor1, _cor0)
'setId'/2 =
    %% Line 2237
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setId'
	    (_cor1, _cor0)
'setHelpText'/2 =
    %% Line 2239
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setHelpText'
	    (_cor1, _cor0)
'setForegroundColour'/2 =
    %% Line 2241
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setForegroundColour'
	    (_cor1, _cor0)
'setFont'/2 =
    %% Line 2243
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setFont'
	    (_cor1, _cor0)
'setFocusFromKbd'/1 =
    %% Line 2245
    fun (_cor0) ->
	call 'wxWindow':'setFocusFromKbd'
	    (_cor0)
'setFocus'/1 =
    %% Line 2247
    fun (_cor0) ->
	call 'wxWindow':'setFocus'
	    (_cor0)
'setExtraStyle'/2 =
    %% Line 2249
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setExtraStyle'
	    (_cor1, _cor0)
'setDropTarget'/2 =
    %% Line 2251
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setDropTarget'
	    (_cor1, _cor0)
'setOwnForegroundColour'/2 =
    %% Line 2253
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnForegroundColour'
	    (_cor1, _cor0)
'setOwnFont'/2 =
    %% Line 2255
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnFont'
	    (_cor1, _cor0)
'setOwnBackgroundColour'/2 =
    %% Line 2257
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setOwnBackgroundColour'
	    (_cor1, _cor0)
'setMinSize'/2 =
    %% Line 2259
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMinSize'
	    (_cor1, _cor0)
'setMaxSize'/2 =
    %% Line 2261
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setMaxSize'
	    (_cor1, _cor0)
'setCursor'/2 =
    %% Line 2263
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCursor'
	    (_cor1, _cor0)
'setContainingSizer'/2 =
    %% Line 2265
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setContainingSizer'
	    (_cor1, _cor0)
'setClientSize'/3 =
    %% Line 2267
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor2, _cor1, _cor0)
'setClientSize'/2 =
    %% Line 2269
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setClientSize'
	    (_cor1, _cor0)
'setCaret'/2 =
    %% Line 2271
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setCaret'
	    (_cor1, _cor0)
'setBackgroundStyle'/2 =
    %% Line 2273
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundStyle'
	    (_cor1, _cor0)
'setBackgroundColour'/2 =
    %% Line 2275
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setBackgroundColour'
	    (_cor1, _cor0)
'setAutoLayout'/2 =
    %% Line 2277
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAutoLayout'
	    (_cor1, _cor0)
'setAcceleratorTable'/2 =
    %% Line 2279
    fun (_cor1,_cor0) ->
	call 'wxWindow':'setAcceleratorTable'
	    (_cor1, _cor0)
'scrollWindow'/4 =
    %% Line 2281
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor3, _cor2, _cor1, _cor0)
'scrollWindow'/3 =
    %% Line 2283
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'scrollWindow'
	    (_cor2, _cor1, _cor0)
'scrollPages'/2 =
    %% Line 2285
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollPages'
	    (_cor1, _cor0)
'scrollLines'/2 =
    %% Line 2287
    fun (_cor1,_cor0) ->
	call 'wxWindow':'scrollLines'
	    (_cor1, _cor0)
'screenToClient'/2 =
    %% Line 2289
    fun (_cor1,_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor1, _cor0)
'screenToClient'/1 =
    %% Line 2291
    fun (_cor0) ->
	call 'wxWindow':'screenToClient'
	    (_cor0)
'reparent'/2 =
    %% Line 2293
    fun (_cor1,_cor0) ->
	call 'wxWindow':'reparent'
	    (_cor1, _cor0)
'removeChild'/2 =
    %% Line 2295
    fun (_cor1,_cor0) ->
	call 'wxWindow':'removeChild'
	    (_cor1, _cor0)
'releaseMouse'/1 =
    %% Line 2297
    fun (_cor0) ->
	call 'wxWindow':'releaseMouse'
	    (_cor0)
'refreshRect'/3 =
    %% Line 2299
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor2, _cor1, _cor0)
'refreshRect'/2 =
    %% Line 2301
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refreshRect'
	    (_cor1, _cor0)
'refresh'/2 =
    %% Line 2303
    fun (_cor1,_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor1, _cor0)
'refresh'/1 =
    %% Line 2305
    fun (_cor0) ->
	call 'wxWindow':'refresh'
	    (_cor0)
'raise'/1 =
    %% Line 2307
    fun (_cor0) ->
	call 'wxWindow':'raise'
	    (_cor0)
'popupMenu'/4 =
    %% Line 2309
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor3, _cor2, _cor1, _cor0)
'popupMenu'/3 =
    %% Line 2311
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor2, _cor1, _cor0)
'popupMenu'/2 =
    %% Line 2313
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popupMenu'
	    (_cor1, _cor0)
'popEventHandler'/2 =
    %% Line 2315
    fun (_cor1,_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor1, _cor0)
'popEventHandler'/1 =
    %% Line 2317
    fun (_cor0) ->
	call 'wxWindow':'popEventHandler'
	    (_cor0)
'pageUp'/1 =
    %% Line 2319
    fun (_cor0) ->
	call 'wxWindow':'pageUp'
	    (_cor0)
'pageDown'/1 =
    %% Line 2321
    fun (_cor0) ->
	call 'wxWindow':'pageDown'
	    (_cor0)
'navigate'/2 =
    %% Line 2323
    fun (_cor1,_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor1, _cor0)
'navigate'/1 =
    %% Line 2325
    fun (_cor0) ->
	call 'wxWindow':'navigate'
	    (_cor0)
'moveBeforeInTabOrder'/2 =
    %% Line 2327
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveBeforeInTabOrder'
	    (_cor1, _cor0)
'moveAfterInTabOrder'/2 =
    %% Line 2329
    fun (_cor1,_cor0) ->
	call 'wxWindow':'moveAfterInTabOrder'
	    (_cor1, _cor0)
'move'/4 =
    %% Line 2331
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor3, _cor2, _cor1, _cor0)
'move'/3 =
    %% Line 2333
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor2, _cor1, _cor0)
'move'/2 =
    %% Line 2335
    fun (_cor1,_cor0) ->
	call 'wxWindow':'move'
	    (_cor1, _cor0)
'makeModal'/2 =
    %% Line 2337
    fun (_cor1,_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor1, _cor0)
'makeModal'/1 =
    %% Line 2339
    fun (_cor0) ->
	call 'wxWindow':'makeModal'
	    (_cor0)
'lower'/1 =
    %% Line 2341
    fun (_cor0) ->
	call 'wxWindow':'lower'
	    (_cor0)
'lineUp'/1 =
    %% Line 2343
    fun (_cor0) ->
	call 'wxWindow':'lineUp'
	    (_cor0)
'lineDown'/1 =
    %% Line 2345
    fun (_cor0) ->
	call 'wxWindow':'lineDown'
	    (_cor0)
'layout'/1 =
    %% Line 2347
    fun (_cor0) ->
	call 'wxWindow':'layout'
	    (_cor0)
'isTopLevel'/1 =
    %% Line 2349
    fun (_cor0) ->
	call 'wxWindow':'isTopLevel'
	    (_cor0)
'isShown'/1 =
    %% Line 2351
    fun (_cor0) ->
	call 'wxWindow':'isShown'
	    (_cor0)
'isRetained'/1 =
    %% Line 2353
    fun (_cor0) ->
	call 'wxWindow':'isRetained'
	    (_cor0)
'isExposed'/5 =
    %% Line 2355
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'isExposed'/3 =
    %% Line 2357
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor2, _cor1, _cor0)
'isExposed'/2 =
    %% Line 2359
    fun (_cor1,_cor0) ->
	call 'wxWindow':'isExposed'
	    (_cor1, _cor0)
'isEnabled'/1 =
    %% Line 2361
    fun (_cor0) ->
	call 'wxWindow':'isEnabled'
	    (_cor0)
'invalidateBestSize'/1 =
    %% Line 2363
    fun (_cor0) ->
	call 'wxWindow':'invalidateBestSize'
	    (_cor0)
'inheritAttributes'/1 =
    %% Line 2365
    fun (_cor0) ->
	call 'wxWindow':'inheritAttributes'
	    (_cor0)
'hide'/1 =
    %% Line 2367
    fun (_cor0) ->
	call 'wxWindow':'hide'
	    (_cor0)
'hasTransparentBackground'/1 =
    %% Line 2369
    fun (_cor0) ->
	call 'wxWindow':'hasTransparentBackground'
	    (_cor0)
'hasScrollbar'/2 =
    %% Line 2371
    fun (_cor1,_cor0) ->
	call 'wxWindow':'hasScrollbar'
	    (_cor1, _cor0)
'hasCapture'/1 =
    %% Line 2373
    fun (_cor0) ->
	call 'wxWindow':'hasCapture'
	    (_cor0)
'getWindowVariant'/1 =
    %% Line 2375
    fun (_cor0) ->
	call 'wxWindow':'getWindowVariant'
	    (_cor0)
'getWindowStyleFlag'/1 =
    %% Line 2377
    fun (_cor0) ->
	call 'wxWindow':'getWindowStyleFlag'
	    (_cor0)
'getVirtualSize'/1 =
    %% Line 2379
    fun (_cor0) ->
	call 'wxWindow':'getVirtualSize'
	    (_cor0)
'getUpdateRegion'/1 =
    %% Line 2381
    fun (_cor0) ->
	call 'wxWindow':'getUpdateRegion'
	    (_cor0)
'getToolTip'/1 =
    %% Line 2383
    fun (_cor0) ->
	call 'wxWindow':'getToolTip'
	    (_cor0)
'getTextExtent'/3 =
    %% Line 2385
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor2, _cor1, _cor0)
'getTextExtent'/2 =
    %% Line 2387
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getTextExtent'
	    (_cor1, _cor0)
'getSizer'/1 =
    %% Line 2389
    fun (_cor0) ->
	call 'wxWindow':'getSizer'
	    (_cor0)
'getSize'/1 =
    %% Line 2391
    fun (_cor0) ->
	call 'wxWindow':'getSize'
	    (_cor0)
'getScrollThumb'/2 =
    %% Line 2393
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollThumb'
	    (_cor1, _cor0)
'getScrollRange'/2 =
    %% Line 2395
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollRange'
	    (_cor1, _cor0)
'getScrollPos'/2 =
    %% Line 2397
    fun (_cor1,_cor0) ->
	call 'wxWindow':'getScrollPos'
	    (_cor1, _cor0)
'getScreenRect'/1 =
    %% Line 2399
    fun (_cor0) ->
	call 'wxWindow':'getScreenRect'
	    (_cor0)
'getScreenPosition'/1 =
    %% Line 2401
    fun (_cor0) ->
	call 'wxWindow':'getScreenPosition'
	    (_cor0)
'getRect'/1 =
    %% Line 2403
    fun (_cor0) ->
	call 'wxWindow':'getRect'
	    (_cor0)
'getPosition'/1 =
    %% Line 2405
    fun (_cor0) ->
	call 'wxWindow':'getPosition'
	    (_cor0)
'getParent'/1 =
    %% Line 2407
    fun (_cor0) ->
	call 'wxWindow':'getParent'
	    (_cor0)
'getName'/1 =
    %% Line 2409
    fun (_cor0) ->
	call 'wxWindow':'getName'
	    (_cor0)
'getMinSize'/1 =
    %% Line 2411
    fun (_cor0) ->
	call 'wxWindow':'getMinSize'
	    (_cor0)
'getMaxSize'/1 =
    %% Line 2413
    fun (_cor0) ->
	call 'wxWindow':'getMaxSize'
	    (_cor0)
'getLabel'/1 =
    %% Line 2415
    fun (_cor0) ->
	call 'wxWindow':'getLabel'
	    (_cor0)
'getId'/1 =
    %% Line 2417
    fun (_cor0) ->
	call 'wxWindow':'getId'
	    (_cor0)
'getHelpText'/1 =
    %% Line 2419
    fun (_cor0) ->
	call 'wxWindow':'getHelpText'
	    (_cor0)
'getHandle'/1 =
    %% Line 2421
    fun (_cor0) ->
	call 'wxWindow':'getHandle'
	    (_cor0)
'getGrandParent'/1 =
    %% Line 2423
    fun (_cor0) ->
	call 'wxWindow':'getGrandParent'
	    (_cor0)
'getForegroundColour'/1 =
    %% Line 2425
    fun (_cor0) ->
	call 'wxWindow':'getForegroundColour'
	    (_cor0)
'getFont'/1 =
    %% Line 2427
    fun (_cor0) ->
	call 'wxWindow':'getFont'
	    (_cor0)
'getExtraStyle'/1 =
    %% Line 2429
    fun (_cor0) ->
	call 'wxWindow':'getExtraStyle'
	    (_cor0)
'getEventHandler'/1 =
    %% Line 2431
    fun (_cor0) ->
	call 'wxWindow':'getEventHandler'
	    (_cor0)
'getDropTarget'/1 =
    %% Line 2433
    fun (_cor0) ->
	call 'wxWindow':'getDropTarget'
	    (_cor0)
'getCursor'/1 =
    %% Line 2435
    fun (_cor0) ->
	call 'wxWindow':'getCursor'
	    (_cor0)
'getContainingSizer'/1 =
    %% Line 2437
    fun (_cor0) ->
	call 'wxWindow':'getContainingSizer'
	    (_cor0)
'getClientSize'/1 =
    %% Line 2439
    fun (_cor0) ->
	call 'wxWindow':'getClientSize'
	    (_cor0)
'getChildren'/1 =
    %% Line 2441
    fun (_cor0) ->
	call 'wxWindow':'getChildren'
	    (_cor0)
'getCharWidth'/1 =
    %% Line 2443
    fun (_cor0) ->
	call 'wxWindow':'getCharWidth'
	    (_cor0)
'getCharHeight'/1 =
    %% Line 2445
    fun (_cor0) ->
	call 'wxWindow':'getCharHeight'
	    (_cor0)
'getCaret'/1 =
    %% Line 2447
    fun (_cor0) ->
	call 'wxWindow':'getCaret'
	    (_cor0)
'getBestSize'/1 =
    %% Line 2449
    fun (_cor0) ->
	call 'wxWindow':'getBestSize'
	    (_cor0)
'getBackgroundStyle'/1 =
    %% Line 2451
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundStyle'
	    (_cor0)
'getBackgroundColour'/1 =
    %% Line 2453
    fun (_cor0) ->
	call 'wxWindow':'getBackgroundColour'
	    (_cor0)
'getAcceleratorTable'/1 =
    %% Line 2455
    fun (_cor0) ->
	call 'wxWindow':'getAcceleratorTable'
	    (_cor0)
'freeze'/1 =
    %% Line 2457
    fun (_cor0) ->
	call 'wxWindow':'freeze'
	    (_cor0)
'fitInside'/1 =
    %% Line 2459
    fun (_cor0) ->
	call 'wxWindow':'fitInside'
	    (_cor0)
'findWindow'/2 =
    %% Line 2461
    fun (_cor1,_cor0) ->
	call 'wxWindow':'findWindow'
	    (_cor1, _cor0)
'enable'/2 =
    %% Line 2463
    fun (_cor1,_cor0) ->
	call 'wxWindow':'enable'
	    (_cor1, _cor0)
'enable'/1 =
    %% Line 2465
    fun (_cor0) ->
	call 'wxWindow':'enable'
	    (_cor0)
'disable'/1 =
    %% Line 2467
    fun (_cor0) ->
	call 'wxWindow':'disable'
	    (_cor0)
'destroyChildren'/1 =
    %% Line 2469
    fun (_cor0) ->
	call 'wxWindow':'destroyChildren'
	    (_cor0)
'convertPixelsToDialog'/2 =
    %% Line 2471
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertPixelsToDialog'
	    (_cor1, _cor0)
'convertDialogToPixels'/2 =
    %% Line 2473
    fun (_cor1,_cor0) ->
	call 'wxWindow':'convertDialogToPixels'
	    (_cor1, _cor0)
'close'/2 =
    %% Line 2475
    fun (_cor1,_cor0) ->
	call 'wxWindow':'close'
	    (_cor1, _cor0)
'close'/1 =
    %% Line 2477
    fun (_cor0) ->
	call 'wxWindow':'close'
	    (_cor0)
'clientToScreen'/3 =
    %% Line 2479
    fun (_cor2,_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor2, _cor1, _cor0)
'clientToScreen'/2 =
    %% Line 2481
    fun (_cor1,_cor0) ->
	call 'wxWindow':'clientToScreen'
	    (_cor1, _cor0)
'clearBackground'/1 =
    %% Line 2483
    fun (_cor0) ->
	call 'wxWindow':'clearBackground'
	    (_cor0)
'centreOnParent'/2 =
    %% Line 2485
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor1, _cor0)
'centreOnParent'/1 =
    %% Line 2487
    fun (_cor0) ->
	call 'wxWindow':'centreOnParent'
	    (_cor0)
'centre'/2 =
    %% Line 2489
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centre'
	    (_cor1, _cor0)
'centre'/1 =
    %% Line 2491
    fun (_cor0) ->
	call 'wxWindow':'centre'
	    (_cor0)
'centerOnParent'/2 =
    %% Line 2493
    fun (_cor1,_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor1, _cor0)
'centerOnParent'/1 =
    %% Line 2495
    fun (_cor0) ->
	call 'wxWindow':'centerOnParent'
	    (_cor0)
'center'/2 =
    %% Line 2497
    fun (_cor1,_cor0) ->
	call 'wxWindow':'center'
	    (_cor1, _cor0)
'center'/1 =
    %% Line 2499
    fun (_cor0) ->
	call 'wxWindow':'center'
	    (_cor0)
'captureMouse'/1 =
    %% Line 2501
    fun (_cor0) ->
	call 'wxWindow':'captureMouse'
	    (_cor0)
'cacheBestSize'/2 =
    %% Line 2503
    fun (_cor1,_cor0) ->
	call 'wxWindow':'cacheBestSize'
	    (_cor1, _cor0)
'disconnect'/3 =
    %% Line 2506
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 2508
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 2510
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 2512
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 2514
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxGrid')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxGrid', _cor0)
end