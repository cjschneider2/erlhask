module 'wxArtProvider' ['getBitmap'/1,
			'getBitmap'/2,
			'getIcon'/1,
			'getIcon'/2,
			'module_info'/0,
			'module_info'/1,
			'parent_class'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 32
		'export_type' =
		    %% Line 32
		    [{'wxArtProvider',0}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'wxArtProvider',{'remote_type',36,[{'atom',36,'wx'}|[{'atom',36,'wx_object'}|[[]]]]},[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'getBitmap',1},[{'type',38,'bounded_fun',[{'type',38,'fun',[{'type',38,'product',[{'var',38,'Id'}]}|[{'remote_type',38,[{'atom',38,'wxBitmap'}|[{'atom',38,'wxBitmap'}|[[]]]]}]]}|[[{'type',39,'constraint',[{'atom',39,'is_subtype'}|[[{'var',39,'Id'}|[{'remote_type',39,[{'atom',39,'unicode'}|[{'atom',39,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 46
		'spec' =
		    %% Line 46
		    [{{'getBitmap',2},[{'type',46,'bounded_fun',[{'type',46,'fun',[{'type',46,'product',[{'var',46,'Id'}|[{'type',46,'list',[{'var',46,'Option'}]}]]}|[{'remote_type',46,[{'atom',46,'wxBitmap'}|[{'atom',46,'wxBitmap'}|[[]]]]}]]}|[[{'type',47,'constraint',[{'atom',47,'is_subtype'}|[[{'var',47,'Id'}|[{'remote_type',47,[{'atom',47,'unicode'}|[{'atom',47,'chardata'}|[[]]]]}]]]]}|[{'type',48,'constraint',[{'atom',48,'is_subtype'}|[[{'var',48,'Option'}|[{'type',48,'union',[{'type',48,'tuple',[{'atom',48,'client'}|[{'remote_type',48,[{'atom',48,'unicode'}|[{'atom',48,'chardata'}|[[]]]]}]]}|[{'type',49,'tuple',[{'atom',49,'size'}|[{'type',49,'tuple',[{'ann_type',49,[{'var',49,'W'}|[{'type',49,'integer',[]}]]}|[{'ann_type',49,[{'var',49,'H'}|[{'type',49,'integer',[]}]]}]]}]]}]]}]]]]}]]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'getIcon',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'Id'}]}|[{'remote_type',61,[{'atom',61,'wxIcon'}|[{'atom',61,'wxIcon'}|[[]]]]}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'Id'}|[{'remote_type',62,[{'atom',62,'unicode'}|[{'atom',62,'chardata'}|[[]]]]}]]]]}]]]}]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'getIcon',2},[{'type',69,'bounded_fun',[{'type',69,'fun',[{'type',69,'product',[{'var',69,'Id'}|[{'type',69,'list',[{'var',69,'Option'}]}]]}|[{'remote_type',69,[{'atom',69,'wxIcon'}|[{'atom',69,'wxIcon'}|[[]]]]}]]}|[[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Id'}|[{'remote_type',70,[{'atom',70,'unicode'}|[{'atom',70,'chardata'}|[[]]]]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Option'}|[{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'client'}|[{'remote_type',71,[{'atom',71,'unicode'}|[{'atom',71,'chardata'}|[[]]]]}]]}|[{'type',72,'tuple',[{'atom',72,'size'}|[{'type',72,'tuple',[{'ann_type',72,[{'var',72,'W'}|[{'type',72,'integer',[]}]]}|[{'ann_type',72,[{'var',72,'H'}|[{'type',72,'integer',[]}]]}]]}]]}]]}]]]]}]]]]}]}]]
'parent_class'/1 =
    %% Line 34
    fun (_cor0) ->
	call 'erlang':'error'
	    ({'badtype','wxArtProvider'})
'getBitmap'/1 =
    %% Line 41
    fun (_cor0) ->
	case _cor0 of
	  <Id>
	      when %% Line 42
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 43
	      apply 'getBitmap'/2
		  (Id, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getBitmap',1}}] )
	    -| ['compiler_generated'] )
	end
'getBitmap'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Id,Options>
	      when let <_cor2> =
		    %% Line 51
		    call 'erlang':'is_list'
			(Id)
		in  let <_cor3> =
			%% Line 51
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 51
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Id_UC> =
		  %% Line 52
		  call 'unicode':'characters_to_binary'
		      ([Id|[0]])
	      in  let <MOpts> =
		      %% Line 53
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'client',Client},Acc> when 'true' ->
				  let <Client_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Client|[95|[67|[0]]]])
				  in  let <_cor11> =
					  call 'erlang':'byte_size'
					      (Client_UC)
				      in  let <_cor6> =
					      call 'erlang':'byte_size'
						  (Client_UC)
					  in  let <_cor7> =
						  call 'erlang':'+'
						      (0, _cor6)
					      in  let <_cor8> =
						      call 'erlang':'band'
							  (_cor7, 7)
						  in  let <_cor9> =
							  call 'erlang':'-'
							      (8, _cor8)
						      in  let <_cor10> =
							      call 'erlang':'band'
								  (_cor9, 7)
							  in  let <_cor12> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor11>(32,1,'integer',['unsigned'|['native']]),
								    #<Client_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor10,8,'integer',['unsigned'|['big']])}#
							      in  [_cor12|Acc]
			      %% Line 54
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor13> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor13|Acc]
			      %% Line 55
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getBitmap/2-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 56
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 56
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor26> =
				  %% Line 58
				  call 'erlang':'byte_size'
				      (Id_UC)
			      in  let <_cor21> =
				      %% Line 58
				      call 'erlang':'byte_size'
					  (Id_UC)
				  in  let <_cor22> =
					  %% Line 58
					  call 'erlang':'+'
					      (4, _cor21)
				      in  let <_cor23> =
					      %% Line 58
					      call 'erlang':'band'
						  (_cor22, 7)
					  in  let <_cor24> =
						  %% Line 58
						  call 'erlang':'-'
						      (8, _cor23)
					      in  let <_cor25> =
						      %% Line 58
						      call 'erlang':'band'
							  (_cor24, 7)
						  in  let <_cor27> =
							  %% Line 58
							  #{#<_cor26>(32,1,'integer',['unsigned'|['native']]),
							    #<Id_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor25,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 57
							  call 'wxe_util':'call'
							      (3395, _cor27)
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'getBitmap',2}}] )
	    -| ['compiler_generated'] )
	end
'getIcon'/1 =
    %% Line 64
    fun (_cor0) ->
	case _cor0 of
	  <Id>
	      when %% Line 65
		call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 66
	      apply 'getIcon'/2
		  (Id, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'getIcon',1}}] )
	    -| ['compiler_generated'] )
	end
'getIcon'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Id,Options>
	      when let <_cor2> =
		    %% Line 74
		    call 'erlang':'is_list'
			(Id)
		in  let <_cor3> =
			%% Line 74
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 74
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Id_UC> =
		  %% Line 75
		  call 'unicode':'characters_to_binary'
		      ([Id|[0]])
	      in  let <MOpts> =
		      %% Line 76
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{'client',Client},Acc> when 'true' ->
				  let <Client_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Client|[95|[67|[0]]]])
				  in  let <_cor11> =
					  call 'erlang':'byte_size'
					      (Client_UC)
				      in  let <_cor6> =
					      call 'erlang':'byte_size'
						  (Client_UC)
					  in  let <_cor7> =
						  call 'erlang':'+'
						      (0, _cor6)
					      in  let <_cor8> =
						      call 'erlang':'band'
							  (_cor7, 7)
						  in  let <_cor9> =
							  call 'erlang':'-'
							      (8, _cor8)
						      in  let <_cor10> =
							      call 'erlang':'band'
								  (_cor9, 7)
							  in  let <_cor12> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor11>(32,1,'integer',['unsigned'|['native']]),
								    #<Client_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor10,8,'integer',['unsigned'|['big']])}#
							      in  [_cor12|Acc]
			      %% Line 77
			      <{'size',{SizeW,SizeH}},Acc> when 'true' ->
				  let <_cor13> =
				      #{#<2>(32,1,'integer',['unsigned'|['native']]),
					#<SizeW>(32,1,'integer',['unsigned'|['native']]),
					#<SizeH>(32,1,'integer',['unsigned'|['native']]),
					#<0>(32,1,'integer',['unsigned'|['big']])}#
				  in  [_cor13|Acc]
			      %% Line 78
			      <BadOpt,_cor30> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-getIcon/2-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 79
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 79
			      call 'erlang':'list_to_binary'
				  (_cor19)
			  in  let <_cor26> =
				  %% Line 81
				  call 'erlang':'byte_size'
				      (Id_UC)
			      in  let <_cor21> =
				      %% Line 81
				      call 'erlang':'byte_size'
					  (Id_UC)
				  in  let <_cor22> =
					  %% Line 81
					  call 'erlang':'+'
					      (4, _cor21)
				      in  let <_cor23> =
					      %% Line 81
					      call 'erlang':'band'
						  (_cor22, 7)
					  in  let <_cor24> =
						  %% Line 81
						  call 'erlang':'-'
						      (8, _cor23)
					      in  let <_cor25> =
						      %% Line 81
						      call 'erlang':'band'
							  (_cor24, 7)
						  in  let <_cor27> =
							  %% Line 81
							  #{#<_cor26>(32,1,'integer',['unsigned'|['native']]),
							    #<Id_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor25,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 80
							  call 'wxe_util':'call'
							      (3396, _cor27)
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'getIcon',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxArtProvider')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxArtProvider', _cor0)
end