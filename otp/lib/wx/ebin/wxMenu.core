module 'wxMenu' ['Destroy'/2,
		 'append'/2,
		 'append'/3,
		 'append'/4,
		 'append'/5,
		 'appendCheckItem'/3,
		 'appendCheckItem'/4,
		 'appendRadioItem'/3,
		 'appendRadioItem'/4,
		 'appendSeparator'/1,
		 'break'/1,
		 'check'/3,
		 'connect'/2,
		 'connect'/3,
		 'delete'/2,
		 'destroy'/1,
		 'disconnect'/1,
		 'disconnect'/2,
		 'disconnect'/3,
		 'enable'/3,
		 'findItem'/2,
		 'findItemByPosition'/2,
		 'getHelpString'/2,
		 'getLabel'/2,
		 'getMenuItemCount'/1,
		 'getMenuItems'/1,
		 'getTitle'/1,
		 'insert'/3,
		 'insert'/4,
		 'insert'/5,
		 'insert'/6,
		 'insertCheckItem'/4,
		 'insertCheckItem'/5,
		 'insertRadioItem'/4,
		 'insertRadioItem'/5,
		 'insertSeparator'/2,
		 'isChecked'/2,
		 'isEnabled'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'new'/0,
		 'new'/1,
		 'new'/2,
		 'parent_class'/1,
		 'prepend'/2,
		 'prepend'/3,
		 'prepend'/4,
		 'prepend'/5,
		 'prependCheckItem'/3,
		 'prependCheckItem'/4,
		 'prependRadioItem'/3,
		 'prependRadioItem'/4,
		 'prependSeparator'/1,
		 'remove'/2,
		 'setHelpString'/3,
		 'setLabel'/3,
		 'setTitle'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 43
		'export_type' =
		    %% Line 43
		    [{'wxMenu',0}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'wxMenu',{'remote_type',48,[{'atom',48,'wx'}|[{'atom',48,'wx_object'}|[[]]]]},[]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'new',0},[{'type',50,'fun',[{'type',50,'product',[]}|[{'type',50,'wxMenu',[]}]]}]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'type',56,'list',[{'var',56,'Option'}]}]}|[{'type',56,'wxMenu',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Option'}|[{'type',57,'tuple',[{'atom',57,'style'}|[{'type',57,'integer',[]}]]}]]]]}]]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'new',2},[{'type',67,'bounded_fun',[{'type',67,'fun',[{'type',67,'product',[{'var',67,'Title'}|[{'type',67,'list',[{'var',67,'Option'}]}]]}|[{'type',67,'wxMenu',[]}]]}|[[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Title'}|[{'remote_type',68,[{'atom',68,'unicode'}|[{'atom',68,'chardata'}|[[]]]]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Option'}|[{'type',69,'tuple',[{'atom',69,'style'}|[{'type',69,'integer',[]}]]}]]]]}]]]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'append',2},[{'type',80,'bounded_fun',[{'type',80,'fun',[{'type',80,'product',[{'var',80,'This'}|[{'var',80,'Item'}]]}|[{'remote_type',80,[{'atom',80,'wxMenuItem'}|[{'atom',80,'wxMenuItem'}|[[]]]]}]]}|[[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'This'}|[{'type',81,'wxMenu',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'Item'}|[{'remote_type',81,[{'atom',81,'wxMenuItem'}|[{'atom',81,'wxMenuItem'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'append',3},[{'type',89,'bounded_fun',[{'type',89,'fun',[{'type',89,'product',[{'var',89,'This'}|[{'var',89,'Itemid'}|[{'var',89,'Text'}]]]}|[{'remote_type',89,[{'atom',89,'wxMenuItem'}|[{'atom',89,'wxMenuItem'}|[[]]]]}]]}|[[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'This'}|[{'type',90,'wxMenu',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Itemid'}|[{'type',90,'integer',[]}]]]]}|[{'type',90,'constraint',[{'atom',90,'is_subtype'}|[[{'var',90,'Text'}|[{'remote_type',90,[{'atom',90,'unicode'}|[{'atom',90,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'append',4},[{'type',104,'bounded_fun',[{'type',104,'fun',[{'type',104,'product',[{'var',104,'This'}|[{'var',104,'Itemid'}|[{'var',104,'Text'}|[{'var',104,'Submenu'}]]]]}|[{'remote_type',104,[{'atom',104,'wxMenuItem'}|[{'atom',104,'wxMenuItem'}|[[]]]]}]]}|[[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'This'}|[{'type',105,'wxMenu',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Itemid'}|[{'type',105,'integer',[]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Text'}|[{'remote_type',105,[{'atom',105,'unicode'}|[{'atom',105,'chardata'}|[[]]]]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'Submenu'}|[{'type',105,'wxMenu',[]}]]]]}]]]]]]}|[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'This'}|[{'var',106,'Itemid'}|[{'var',106,'Text'}|[{'type',106,'list',[{'var',106,'Option'}]}]]]]}|[{'remote_type',106,[{'atom',106,'wxMenuItem'}|[{'atom',106,'wxMenuItem'}|[[]]]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'This'}|[{'type',107,'wxMenu',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Itemid'}|[{'type',107,'integer',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Text'}|[{'remote_type',107,[{'atom',107,'unicode'}|[{'atom',107,'chardata'}|[[]]]]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Option'}|[{'type',108,'union',[{'type',108,'tuple',[{'atom',108,'help'}|[{'remote_type',108,[{'atom',108,'unicode'}|[{'atom',108,'chardata'}|[[]]]]}]]}|[{'type',109,'tuple',[{'atom',109,'kind'}|[{'remote_type',109,[{'atom',109,'wx'}|[{'atom',109,'wx_enum'}|[[]]]]}]]}]]}]]]]}]]]]]]}]]}],
		%% Line 131
		'spec' =
		    %% Line 131
		    [{{'append',5},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'This'}|[{'var',131,'Itemid'}|[{'var',131,'Text'}|[{'var',131,'Help'}|[{'var',131,'IsCheckable'}]]]]]}|[{'atom',131,'ok'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'This'}|[{'type',132,'wxMenu',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Itemid'}|[{'type',132,'integer',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Text'}|[{'remote_type',132,[{'atom',132,'unicode'}|[{'atom',132,'chardata'}|[[]]]]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Help'}|[{'remote_type',132,[{'atom',132,'unicode'}|[{'atom',132,'chardata'}|[[]]]]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'IsCheckable'}|[{'type',132,'boolean',[]}]]]]}]]]]]]]}|[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'This'}|[{'var',133,'Itemid'}|[{'var',133,'Text'}|[{'var',133,'Submenu'}|[{'type',133,'list',[{'var',133,'Option'}]}]]]]]}|[{'remote_type',133,[{'atom',133,'wxMenuItem'}|[{'atom',133,'wxMenuItem'}|[[]]]]}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'This'}|[{'type',134,'wxMenu',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Itemid'}|[{'type',134,'integer',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Text'}|[{'remote_type',134,[{'atom',134,'unicode'}|[{'atom',134,'chardata'}|[[]]]]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Submenu'}|[{'type',134,'wxMenu',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Option'}|[{'type',135,'tuple',[{'atom',135,'help'}|[{'remote_type',135,[{'atom',135,'unicode'}|[{'atom',135,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]}]]}],
		%% Line 155
		'spec' =
		    %% Line 155
		    [{{'appendCheckItem',3},[{'type',155,'bounded_fun',[{'type',155,'fun',[{'type',155,'product',[{'var',155,'This'}|[{'var',155,'Itemid'}|[{'var',155,'Text'}]]]}|[{'remote_type',155,[{'atom',155,'wxMenuItem'}|[{'atom',155,'wxMenuItem'}|[[]]]]}]]}|[[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'This'}|[{'type',156,'wxMenu',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Itemid'}|[{'type',156,'integer',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'Text'}|[{'remote_type',156,[{'atom',156,'unicode'}|[{'atom',156,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'appendCheckItem',4},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}|[{'var',163,'Itemid'}|[{'var',163,'Text'}|[{'type',163,'list',[{'var',163,'Option'}]}]]]]}|[{'remote_type',163,[{'atom',163,'wxMenuItem'}|[{'atom',163,'wxMenuItem'}|[[]]]]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxMenu',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Itemid'}|[{'type',164,'integer',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Text'}|[{'remote_type',164,[{'atom',164,'unicode'}|[{'atom',164,'chardata'}|[[]]]]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Option'}|[{'type',165,'tuple',[{'atom',165,'help'}|[{'remote_type',165,[{'atom',165,'unicode'}|[{'atom',165,'chardata'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'appendRadioItem',3},[{'type',177,'bounded_fun',[{'type',177,'fun',[{'type',177,'product',[{'var',177,'This'}|[{'var',177,'Itemid'}|[{'var',177,'Text'}]]]}|[{'remote_type',177,[{'atom',177,'wxMenuItem'}|[{'atom',177,'wxMenuItem'}|[[]]]]}]]}|[[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'This'}|[{'type',178,'wxMenu',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Itemid'}|[{'type',178,'integer',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Text'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'appendRadioItem',4},[{'type',185,'bounded_fun',[{'type',185,'fun',[{'type',185,'product',[{'var',185,'This'}|[{'var',185,'Itemid'}|[{'var',185,'Text'}|[{'type',185,'list',[{'var',185,'Option'}]}]]]]}|[{'remote_type',185,[{'atom',185,'wxMenuItem'}|[{'atom',185,'wxMenuItem'}|[[]]]]}]]}|[[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'This'}|[{'type',186,'wxMenu',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Itemid'}|[{'type',186,'integer',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Text'}|[{'remote_type',186,[{'atom',186,'unicode'}|[{'atom',186,'chardata'}|[[]]]]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Option'}|[{'type',187,'tuple',[{'atom',187,'help'}|[{'remote_type',187,[{'atom',187,'unicode'}|[{'atom',187,'chardata'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 199
		'spec' =
		    %% Line 199
		    [{{'appendSeparator',1},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'This'}]}|[{'remote_type',199,[{'atom',199,'wxMenuItem'}|[{'atom',199,'wxMenuItem'}|[[]]]]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'This'}|[{'type',200,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 207
		'spec' =
		    %% Line 207
		    [{{'break',1},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'This'}]}|[{'atom',207,'ok'}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'This'}|[{'type',208,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'check',3},[{'type',215,'bounded_fun',[{'type',215,'fun',[{'type',215,'product',[{'var',215,'This'}|[{'var',215,'Itemid'}|[{'var',215,'Check'}]]]}|[{'atom',215,'ok'}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'This'}|[{'type',216,'wxMenu',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Itemid'}|[{'type',216,'integer',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Check'}|[{'type',216,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 228
		'spec' =
		    %% Line 228
		    [{{'delete',2},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'This'}|[{'var',228,'Itemid'}]]}|[{'type',228,'boolean',[]}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'This'}|[{'type',229,'wxMenu',[]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Itemid'}|[{'type',229,'integer',[]}]]]]}]]]]}|[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'This'}|[{'var',230,'Item'}]]}|[{'type',230,'boolean',[]}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'This'}|[{'type',231,'wxMenu',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Item'}|[{'remote_type',231,[{'atom',231,'wxMenuItem'}|[{'atom',231,'wxMenuItem'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 248
		'spec' =
		    %% Line 248
		    [{{'Destroy',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'This'}|[{'var',248,'Itemid'}]]}|[{'type',248,'boolean',[]}]]}|[[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'This'}|[{'type',249,'wxMenu',[]}]]]]}|[{'type',249,'constraint',[{'atom',249,'is_subtype'}|[[{'var',249,'Itemid'}|[{'type',249,'integer',[]}]]]]}]]]]}|[{'type',250,'bounded_fun',[{'type',250,'fun',[{'type',250,'product',[{'var',250,'This'}|[{'var',250,'Item'}]]}|[{'type',250,'boolean',[]}]]}|[[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'This'}|[{'type',251,'wxMenu',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Item'}|[{'remote_type',251,[{'atom',251,'wxMenuItem'}|[{'atom',251,'wxMenuItem'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 264
		'spec' =
		    %% Line 264
		    [{{'enable',3},[{'type',264,'bounded_fun',[{'type',264,'fun',[{'type',264,'product',[{'var',264,'This'}|[{'var',264,'Itemid'}|[{'var',264,'Enable'}]]]}|[{'atom',264,'ok'}]]}|[[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'This'}|[{'type',265,'wxMenu',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Itemid'}|[{'type',265,'integer',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Enable'}|[{'type',265,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'findItem',2},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'This'}|[{'var',277,'Itemid'}]]}|[{'remote_type',277,[{'atom',277,'wxMenuItem'}|[{'atom',277,'wxMenuItem'}|[[]]]]}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'This'}|[{'type',278,'wxMenu',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Itemid'}|[{'type',278,'integer',[]}]]]]}]]]]}|[{'type',279,'bounded_fun',[{'type',279,'fun',[{'type',279,'product',[{'var',279,'This'}|[{'var',279,'Item'}]]}|[{'type',279,'integer',[]}]]}|[[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'This'}|[{'type',280,'wxMenu',[]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Item'}|[{'remote_type',280,[{'atom',280,'unicode'}|[{'atom',280,'chardata'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 294
		'spec' =
		    %% Line 294
		    [{{'findItemByPosition',2},[{'type',294,'bounded_fun',[{'type',294,'fun',[{'type',294,'product',[{'var',294,'This'}|[{'var',294,'Position'}]]}|[{'remote_type',294,[{'atom',294,'wxMenuItem'}|[{'atom',294,'wxMenuItem'}|[[]]]]}]]}|[[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'This'}|[{'type',295,'wxMenu',[]}]]]]}|[{'type',295,'constraint',[{'atom',295,'is_subtype'}|[[{'var',295,'Position'}|[{'type',295,'integer',[]}]]]]}]]]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'getHelpString',2},[{'type',303,'bounded_fun',[{'type',303,'fun',[{'type',303,'product',[{'var',303,'This'}|[{'var',303,'Itemid'}]]}|[{'remote_type',303,[{'atom',303,'unicode'}|[{'atom',303,'charlist'}|[[]]]]}]]}|[[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'This'}|[{'type',304,'wxMenu',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Itemid'}|[{'type',304,'integer',[]}]]]]}]]]]}]}],
		%% Line 312
		'spec' =
		    %% Line 312
		    [{{'getLabel',2},[{'type',312,'bounded_fun',[{'type',312,'fun',[{'type',312,'product',[{'var',312,'This'}|[{'var',312,'Itemid'}]]}|[{'remote_type',312,[{'atom',312,'unicode'}|[{'atom',312,'charlist'}|[[]]]]}]]}|[[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'This'}|[{'type',313,'wxMenu',[]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Itemid'}|[{'type',313,'integer',[]}]]]]}]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'getMenuItemCount',1},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'This'}]}|[{'type',321,'integer',[]}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'This'}|[{'type',322,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'getMenuItems',1},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'This'}]}|[{'type',329,'list',[{'remote_type',329,[{'atom',329,'wxMenuItem'}|[{'atom',329,'wxMenuItem'}|[[]]]]}]}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'This'}|[{'type',330,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 337
		'spec' =
		    %% Line 337
		    [{{'getTitle',1},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',337,'This'}]}|[{'remote_type',337,[{'atom',337,'unicode'}|[{'atom',337,'charlist'}|[[]]]]}]]}|[[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'This'}|[{'type',338,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'insert',3},[{'type',350,'bounded_fun',[{'type',350,'fun',[{'type',350,'product',[{'var',350,'This'}|[{'var',350,'Pos'}|[{'var',350,'Itemid'}]]]}|[{'remote_type',350,[{'atom',350,'wxMenuItem'}|[{'atom',350,'wxMenuItem'}|[[]]]]}]]}|[[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'This'}|[{'type',351,'wxMenu',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Pos'}|[{'type',351,'integer',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Itemid'}|[{'type',351,'integer',[]}]]]]}]]]]]}|[{'type',352,'bounded_fun',[{'type',352,'fun',[{'type',352,'product',[{'var',352,'This'}|[{'var',352,'Pos'}|[{'var',352,'Item'}]]]}|[{'remote_type',352,[{'atom',352,'wxMenuItem'}|[{'atom',352,'wxMenuItem'}|[[]]]]}]]}|[[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'This'}|[{'type',353,'wxMenu',[]}]]]]}|[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'Pos'}|[{'type',353,'integer',[]}]]]]}|[{'type',353,'constraint',[{'atom',353,'is_subtype'}|[[{'var',353,'Item'}|[{'remote_type',353,[{'atom',353,'wxMenuItem'}|[{'atom',353,'wxMenuItem'}|[[]]]]}]]]]}]]]]]}]]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'insert',4},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'This'}|[{'var',367,'Pos'}|[{'var',367,'Itemid'}|[{'type',367,'list',[{'var',367,'Option'}]}]]]]}|[{'remote_type',367,[{'atom',367,'wxMenuItem'}|[{'atom',367,'wxMenuItem'}|[[]]]]}]]}|[[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'This'}|[{'type',368,'wxMenu',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Pos'}|[{'type',368,'integer',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Itemid'}|[{'type',368,'integer',[]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Option'}|[{'type',369,'union',[{'type',369,'tuple',[{'atom',369,'text'}|[{'remote_type',369,[{'atom',369,'unicode'}|[{'atom',369,'chardata'}|[[]]]]}]]}|[{'type',370,'tuple',[{'atom',370,'help'}|[{'remote_type',370,[{'atom',370,'unicode'}|[{'atom',370,'chardata'}|[[]]]]}]]}|[{'type',371,'tuple',[{'atom',371,'kind'}|[{'remote_type',371,[{'atom',371,'wx'}|[{'atom',371,'wx_enum'}|[[]]]]}]]}]]]}]]]]}]]]]]]}]}],
		%% Line 384
		'spec' =
		    %% Line 384
		    [{{'insert',5},[{'type',384,'bounded_fun',[{'type',384,'fun',[{'type',384,'product',[{'var',384,'This'}|[{'var',384,'Pos'}|[{'var',384,'Itemid'}|[{'var',384,'Text'}|[{'var',384,'Submenu'}]]]]]}|[{'remote_type',384,[{'atom',384,'wxMenuItem'}|[{'atom',384,'wxMenuItem'}|[[]]]]}]]}|[[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'This'}|[{'type',385,'wxMenu',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Pos'}|[{'type',385,'integer',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Itemid'}|[{'type',385,'integer',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Text'}|[{'remote_type',385,[{'atom',385,'unicode'}|[{'atom',385,'chardata'}|[[]]]]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Submenu'}|[{'type',385,'wxMenu',[]}]]]]}]]]]]]]}]}],
		%% Line 397
		'spec' =
		    %% Line 397
		    [{{'insert',6},[{'type',397,'bounded_fun',[{'type',397,'fun',[{'type',397,'product',[{'var',397,'This'}|[{'var',397,'Pos'}|[{'var',397,'Itemid'}|[{'var',397,'Text'}|[{'var',397,'Help'}|[{'var',397,'IsCheckable'}]]]]]]}|[{'atom',397,'ok'}]]}|[[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'This'}|[{'type',398,'wxMenu',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Pos'}|[{'type',398,'integer',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Itemid'}|[{'type',398,'integer',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Text'}|[{'remote_type',398,[{'atom',398,'unicode'}|[{'atom',398,'chardata'}|[[]]]]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'Help'}|[{'remote_type',398,[{'atom',398,'unicode'}|[{'atom',398,'chardata'}|[[]]]]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'IsCheckable'}|[{'type',398,'boolean',[]}]]]]}]]]]]]]]}|[{'type',399,'bounded_fun',[{'type',399,'fun',[{'type',399,'product',[{'var',399,'This'}|[{'var',399,'Pos'}|[{'var',399,'Itemid'}|[{'var',399,'Text'}|[{'var',399,'Submenu'}|[{'type',399,'list',[{'var',399,'Option'}]}]]]]]]}|[{'remote_type',399,[{'atom',399,'wxMenuItem'}|[{'atom',399,'wxMenuItem'}|[[]]]]}]]}|[[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'This'}|[{'type',400,'wxMenu',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Pos'}|[{'type',400,'integer',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Itemid'}|[{'type',400,'integer',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Text'}|[{'remote_type',400,[{'atom',400,'unicode'}|[{'atom',400,'chardata'}|[[]]]]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Submenu'}|[{'type',400,'wxMenu',[]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Option'}|[{'type',401,'tuple',[{'atom',401,'help'}|[{'remote_type',401,[{'atom',401,'unicode'}|[{'atom',401,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]]}]]}],
		%% Line 421
		'spec' =
		    %% Line 421
		    [{{'insertCheckItem',4},[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'This'}|[{'var',421,'Pos'}|[{'var',421,'Itemid'}|[{'var',421,'Text'}]]]]}|[{'remote_type',421,[{'atom',421,'wxMenuItem'}|[{'atom',421,'wxMenuItem'}|[[]]]]}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'This'}|[{'type',422,'wxMenu',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Pos'}|[{'type',422,'integer',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Itemid'}|[{'type',422,'integer',[]}]]]]}|[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Text'}|[{'remote_type',422,[{'atom',422,'unicode'}|[{'atom',422,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 429
		'spec' =
		    %% Line 429
		    [{{'insertCheckItem',5},[{'type',429,'bounded_fun',[{'type',429,'fun',[{'type',429,'product',[{'var',429,'This'}|[{'var',429,'Pos'}|[{'var',429,'Itemid'}|[{'var',429,'Text'}|[{'type',429,'list',[{'var',429,'Option'}]}]]]]]}|[{'remote_type',429,[{'atom',429,'wxMenuItem'}|[{'atom',429,'wxMenuItem'}|[[]]]]}]]}|[[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'This'}|[{'type',430,'wxMenu',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Pos'}|[{'type',430,'integer',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Itemid'}|[{'type',430,'integer',[]}]]]]}|[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Text'}|[{'remote_type',430,[{'atom',430,'unicode'}|[{'atom',430,'chardata'}|[[]]]]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Option'}|[{'type',431,'tuple',[{'atom',431,'help'}|[{'remote_type',431,[{'atom',431,'unicode'}|[{'atom',431,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 443
		'spec' =
		    %% Line 443
		    [{{'insertRadioItem',4},[{'type',443,'bounded_fun',[{'type',443,'fun',[{'type',443,'product',[{'var',443,'This'}|[{'var',443,'Pos'}|[{'var',443,'Itemid'}|[{'var',443,'Text'}]]]]}|[{'remote_type',443,[{'atom',443,'wxMenuItem'}|[{'atom',443,'wxMenuItem'}|[[]]]]}]]}|[[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'This'}|[{'type',444,'wxMenu',[]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'Pos'}|[{'type',444,'integer',[]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'Itemid'}|[{'type',444,'integer',[]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'Text'}|[{'remote_type',444,[{'atom',444,'unicode'}|[{'atom',444,'chardata'}|[[]]]]}]]]]}]]]]]]}]}],
		%% Line 451
		'spec' =
		    %% Line 451
		    [{{'insertRadioItem',5},[{'type',451,'bounded_fun',[{'type',451,'fun',[{'type',451,'product',[{'var',451,'This'}|[{'var',451,'Pos'}|[{'var',451,'Itemid'}|[{'var',451,'Text'}|[{'type',451,'list',[{'var',451,'Option'}]}]]]]]}|[{'remote_type',451,[{'atom',451,'wxMenuItem'}|[{'atom',451,'wxMenuItem'}|[[]]]]}]]}|[[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'This'}|[{'type',452,'wxMenu',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Pos'}|[{'type',452,'integer',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Itemid'}|[{'type',452,'integer',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'Text'}|[{'remote_type',452,[{'atom',452,'unicode'}|[{'atom',452,'chardata'}|[[]]]]}]]]]}|[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'Option'}|[{'type',453,'tuple',[{'atom',453,'help'}|[{'remote_type',453,[{'atom',453,'unicode'}|[{'atom',453,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'insertSeparator',2},[{'type',465,'bounded_fun',[{'type',465,'fun',[{'type',465,'product',[{'var',465,'This'}|[{'var',465,'Pos'}]]}|[{'remote_type',465,[{'atom',465,'wxMenuItem'}|[{'atom',465,'wxMenuItem'}|[[]]]]}]]}|[[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'This'}|[{'type',466,'wxMenu',[]}]]]]}|[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'Pos'}|[{'type',466,'integer',[]}]]]]}]]]]}]}],
		%% Line 474
		'spec' =
		    %% Line 474
		    [{{'isChecked',2},[{'type',474,'bounded_fun',[{'type',474,'fun',[{'type',474,'product',[{'var',474,'This'}|[{'var',474,'Itemid'}]]}|[{'type',474,'boolean',[]}]]}|[[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'This'}|[{'type',475,'wxMenu',[]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'Itemid'}|[{'type',475,'integer',[]}]]]]}]]]]}]}],
		%% Line 483
		'spec' =
		    %% Line 483
		    [{{'isEnabled',2},[{'type',483,'bounded_fun',[{'type',483,'fun',[{'type',483,'product',[{'var',483,'This'}|[{'var',483,'Itemid'}]]}|[{'type',483,'boolean',[]}]]}|[[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'This'}|[{'type',484,'wxMenu',[]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Itemid'}|[{'type',484,'integer',[]}]]]]}]]]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'prepend',2},[{'type',497,'bounded_fun',[{'type',497,'fun',[{'type',497,'product',[{'var',497,'This'}|[{'var',497,'Itemid'}]]}|[{'remote_type',497,[{'atom',497,'wxMenuItem'}|[{'atom',497,'wxMenuItem'}|[[]]]]}]]}|[[{'type',498,'constraint',[{'atom',498,'is_subtype'}|[[{'var',498,'This'}|[{'type',498,'wxMenu',[]}]]]]}|[{'type',498,'constraint',[{'atom',498,'is_subtype'}|[[{'var',498,'Itemid'}|[{'type',498,'integer',[]}]]]]}]]]]}|[{'type',499,'bounded_fun',[{'type',499,'fun',[{'type',499,'product',[{'var',499,'This'}|[{'var',499,'Item'}]]}|[{'remote_type',499,[{'atom',499,'wxMenuItem'}|[{'atom',499,'wxMenuItem'}|[[]]]]}]]}|[[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'This'}|[{'type',500,'wxMenu',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Item'}|[{'remote_type',500,[{'atom',500,'wxMenuItem'}|[{'atom',500,'wxMenuItem'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 513
		'spec' =
		    %% Line 513
		    [{{'prepend',3},[{'type',513,'bounded_fun',[{'type',513,'fun',[{'type',513,'product',[{'var',513,'This'}|[{'var',513,'Itemid'}|[{'type',513,'list',[{'var',513,'Option'}]}]]]}|[{'remote_type',513,[{'atom',513,'wxMenuItem'}|[{'atom',513,'wxMenuItem'}|[[]]]]}]]}|[[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'This'}|[{'type',514,'wxMenu',[]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Itemid'}|[{'type',514,'integer',[]}]]]]}|[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Option'}|[{'type',515,'union',[{'type',515,'tuple',[{'atom',515,'text'}|[{'remote_type',515,[{'atom',515,'unicode'}|[{'atom',515,'chardata'}|[[]]]]}]]}|[{'type',516,'tuple',[{'atom',516,'help'}|[{'remote_type',516,[{'atom',516,'unicode'}|[{'atom',516,'chardata'}|[[]]]]}]]}|[{'type',517,'tuple',[{'atom',517,'kind'}|[{'remote_type',517,[{'atom',517,'wx'}|[{'atom',517,'wx_enum'}|[[]]]]}]]}]]]}]]]]}]]]]]}]}],
		%% Line 530
		'spec' =
		    %% Line 530
		    [{{'prepend',4},[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[{'var',530,'This'}|[{'var',530,'Itemid'}|[{'var',530,'Text'}|[{'var',530,'Submenu'}]]]]}|[{'remote_type',530,[{'atom',530,'wxMenuItem'}|[{'atom',530,'wxMenuItem'}|[[]]]]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'This'}|[{'type',531,'wxMenu',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Itemid'}|[{'type',531,'integer',[]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Text'}|[{'remote_type',531,[{'atom',531,'unicode'}|[{'atom',531,'chardata'}|[[]]]]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Submenu'}|[{'type',531,'wxMenu',[]}]]]]}]]]]]]}]}],
		%% Line 543
		'spec' =
		    %% Line 543
		    [{{'prepend',5},[{'type',543,'bounded_fun',[{'type',543,'fun',[{'type',543,'product',[{'var',543,'This'}|[{'var',543,'Itemid'}|[{'var',543,'Text'}|[{'var',543,'Help'}|[{'var',543,'IsCheckable'}]]]]]}|[{'atom',543,'ok'}]]}|[[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'This'}|[{'type',544,'wxMenu',[]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Itemid'}|[{'type',544,'integer',[]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Text'}|[{'remote_type',544,[{'atom',544,'unicode'}|[{'atom',544,'chardata'}|[[]]]]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Help'}|[{'remote_type',544,[{'atom',544,'unicode'}|[{'atom',544,'chardata'}|[[]]]]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'IsCheckable'}|[{'type',544,'boolean',[]}]]]]}]]]]]]]}|[{'type',545,'bounded_fun',[{'type',545,'fun',[{'type',545,'product',[{'var',545,'This'}|[{'var',545,'Itemid'}|[{'var',545,'Text'}|[{'var',545,'Submenu'}|[{'type',545,'list',[{'var',545,'Option'}]}]]]]]}|[{'remote_type',545,[{'atom',545,'wxMenuItem'}|[{'atom',545,'wxMenuItem'}|[[]]]]}]]}|[[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'This'}|[{'type',546,'wxMenu',[]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Itemid'}|[{'type',546,'integer',[]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Text'}|[{'remote_type',546,[{'atom',546,'unicode'}|[{'atom',546,'chardata'}|[[]]]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Submenu'}|[{'type',546,'wxMenu',[]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'Option'}|[{'type',547,'tuple',[{'atom',547,'help'}|[{'remote_type',547,[{'atom',547,'unicode'}|[{'atom',547,'chardata'}|[[]]]]}]]}]]]]}]]]]]]]}]]}],
		%% Line 567
		'spec' =
		    %% Line 567
		    [{{'prependCheckItem',3},[{'type',567,'bounded_fun',[{'type',567,'fun',[{'type',567,'product',[{'var',567,'This'}|[{'var',567,'Itemid'}|[{'var',567,'Text'}]]]}|[{'remote_type',567,[{'atom',567,'wxMenuItem'}|[{'atom',567,'wxMenuItem'}|[[]]]]}]]}|[[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'This'}|[{'type',568,'wxMenu',[]}]]]]}|[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'Itemid'}|[{'type',568,'integer',[]}]]]]}|[{'type',568,'constraint',[{'atom',568,'is_subtype'}|[[{'var',568,'Text'}|[{'remote_type',568,[{'atom',568,'unicode'}|[{'atom',568,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 575
		'spec' =
		    %% Line 575
		    [{{'prependCheckItem',4},[{'type',575,'bounded_fun',[{'type',575,'fun',[{'type',575,'product',[{'var',575,'This'}|[{'var',575,'Itemid'}|[{'var',575,'Text'}|[{'type',575,'list',[{'var',575,'Option'}]}]]]]}|[{'remote_type',575,[{'atom',575,'wxMenuItem'}|[{'atom',575,'wxMenuItem'}|[[]]]]}]]}|[[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'This'}|[{'type',576,'wxMenu',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Itemid'}|[{'type',576,'integer',[]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Text'}|[{'remote_type',576,[{'atom',576,'unicode'}|[{'atom',576,'chardata'}|[[]]]]}]]]]}|[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'Option'}|[{'type',577,'tuple',[{'atom',577,'help'}|[{'remote_type',577,[{'atom',577,'unicode'}|[{'atom',577,'chardata'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 589
		'spec' =
		    %% Line 589
		    [{{'prependRadioItem',3},[{'type',589,'bounded_fun',[{'type',589,'fun',[{'type',589,'product',[{'var',589,'This'}|[{'var',589,'Itemid'}|[{'var',589,'Text'}]]]}|[{'remote_type',589,[{'atom',589,'wxMenuItem'}|[{'atom',589,'wxMenuItem'}|[[]]]]}]]}|[[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'This'}|[{'type',590,'wxMenu',[]}]]]]}|[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'Itemid'}|[{'type',590,'integer',[]}]]]]}|[{'type',590,'constraint',[{'atom',590,'is_subtype'}|[[{'var',590,'Text'}|[{'remote_type',590,[{'atom',590,'unicode'}|[{'atom',590,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 597
		'spec' =
		    %% Line 597
		    [{{'prependRadioItem',4},[{'type',597,'bounded_fun',[{'type',597,'fun',[{'type',597,'product',[{'var',597,'This'}|[{'var',597,'Itemid'}|[{'var',597,'Text'}|[{'type',597,'list',[{'var',597,'Option'}]}]]]]}|[{'remote_type',597,[{'atom',597,'wxMenuItem'}|[{'atom',597,'wxMenuItem'}|[[]]]]}]]}|[[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'This'}|[{'type',598,'wxMenu',[]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Itemid'}|[{'type',598,'integer',[]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Text'}|[{'remote_type',598,[{'atom',598,'unicode'}|[{'atom',598,'chardata'}|[[]]]]}]]]]}|[{'type',599,'constraint',[{'atom',599,'is_subtype'}|[[{'var',599,'Option'}|[{'type',599,'tuple',[{'atom',599,'help'}|[{'remote_type',599,[{'atom',599,'unicode'}|[{'atom',599,'chardata'}|[[]]]]}]]}]]]]}]]]]]]}]}],
		%% Line 611
		'spec' =
		    %% Line 611
		    [{{'prependSeparator',1},[{'type',611,'bounded_fun',[{'type',611,'fun',[{'type',611,'product',[{'var',611,'This'}]}|[{'remote_type',611,[{'atom',611,'wxMenuItem'}|[{'atom',611,'wxMenuItem'}|[[]]]]}]]}|[[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'This'}|[{'type',612,'wxMenu',[]}]]]]}]]]}]}],
		%% Line 623
		'spec' =
		    %% Line 623
		    [{{'remove',2},[{'type',623,'bounded_fun',[{'type',623,'fun',[{'type',623,'product',[{'var',623,'This'}|[{'var',623,'Itemid'}]]}|[{'remote_type',623,[{'atom',623,'wxMenuItem'}|[{'atom',623,'wxMenuItem'}|[[]]]]}]]}|[[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'This'}|[{'type',624,'wxMenu',[]}]]]]}|[{'type',624,'constraint',[{'atom',624,'is_subtype'}|[[{'var',624,'Itemid'}|[{'type',624,'integer',[]}]]]]}]]]]}|[{'type',625,'bounded_fun',[{'type',625,'fun',[{'type',625,'product',[{'var',625,'This'}|[{'var',625,'Item'}]]}|[{'remote_type',625,[{'atom',625,'wxMenuItem'}|[{'atom',625,'wxMenuItem'}|[[]]]]}]]}|[[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'This'}|[{'type',626,'wxMenu',[]}]]]]}|[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'Item'}|[{'remote_type',626,[{'atom',626,'wxMenuItem'}|[{'atom',626,'wxMenuItem'}|[[]]]]}]]]]}]]]]}]]}],
		%% Line 639
		'spec' =
		    %% Line 639
		    [{{'setHelpString',3},[{'type',639,'bounded_fun',[{'type',639,'fun',[{'type',639,'product',[{'var',639,'This'}|[{'var',639,'Itemid'}|[{'var',639,'HelpString'}]]]}|[{'atom',639,'ok'}]]}|[[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'This'}|[{'type',640,'wxMenu',[]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Itemid'}|[{'type',640,'integer',[]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'HelpString'}|[{'remote_type',640,[{'atom',640,'unicode'}|[{'atom',640,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'setLabel',3},[{'type',649,'bounded_fun',[{'type',649,'fun',[{'type',649,'product',[{'var',649,'This'}|[{'var',649,'Itemid'}|[{'var',649,'Label'}]]]}|[{'atom',649,'ok'}]]}|[[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'This'}|[{'type',650,'wxMenu',[]}]]]]}|[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'Itemid'}|[{'type',650,'integer',[]}]]]]}|[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'Label'}|[{'remote_type',650,[{'atom',650,'unicode'}|[{'atom',650,'chardata'}|[[]]]]}]]]]}]]]]]}]}],
		%% Line 659
		'spec' =
		    %% Line 659
		    [{{'setTitle',2},[{'type',659,'bounded_fun',[{'type',659,'fun',[{'type',659,'product',[{'var',659,'This'}|[{'var',659,'Title'}]]}|[{'atom',659,'ok'}]]}|[[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'This'}|[{'type',660,'wxMenu',[]}]]]]}|[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'Title'}|[{'remote_type',660,[{'atom',660,'unicode'}|[{'atom',660,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 669
		'spec' =
		    %% Line 669
		    [{{'destroy',1},[{'type',669,'fun',[{'type',669,'product',[{'ann_type',669,[{'var',669,'This'}|[{'type',669,'wxMenu',[]}]]}]}|[{'atom',669,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 45
    fun (_cor0) ->
	case _cor0 of
	  <'wxEvtHandler'> when 'true' ->
	      'true'
	  %% Line 46
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxMenu'})
	end
'new'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	apply 'new'/1
	    ([])
'new'/1 =
    %% Line 58
    fun (_cor0) ->
	case _cor0 of
	  <Options>
	      when %% Line 59
		call 'erlang':'is_list'
		    (_cor0) ->
	      let <MOpts> =
		  %% Line 60
		  ( fun (_cor3,_cor2) ->
			case <_cor3,_cor2> of
			  <{'style',Style},Acc> when 'true' ->
			      let <_cor1> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Style>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor1|Acc]
			  %% Line 61
			  <BadOpt,_cor11> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/1-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 62
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 62
			  call 'erlang':'list_to_binary'
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 64
			      #{#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 63
			      call 'wxe_util':'construct'
				  (903, _cor9)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Title,Options>
	      when let <_cor2> =
		    %% Line 71
		    call 'erlang':'is_list'
			(Title)
		in  let <_cor3> =
			%% Line 71
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 71
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Title_UC> =
		  %% Line 72
		  call 'unicode':'characters_to_binary'
		      ([Title|[0]])
	      in  let <MOpts> =
		      %% Line 73
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'style',Style},Acc> when 'true' ->
				  let <_cor5> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Style>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor5|Acc]
			      %% Line 74
			      <BadOpt,_cor22> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-new/2-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 75
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 75
			      call 'erlang':'list_to_binary'
				  (_cor11)
			  in  let <_cor18> =
				  %% Line 77
				  call 'erlang':'byte_size'
				      (Title_UC)
			      in  let <_cor13> =
				      %% Line 77
				      call 'erlang':'byte_size'
					  (Title_UC)
				  in  let <_cor14> =
					  %% Line 77
					  call 'erlang':'+'
					      (4, _cor13)
				      in  let <_cor15> =
					      %% Line 77
					      call 'erlang':'band'
						  (_cor14, 7)
					  in  let <_cor16> =
						  %% Line 77
						  call 'erlang':'-'
						      (8, _cor15)
					      in  let <_cor17> =
						      %% Line 77
						      call 'erlang':'band'
							  (_cor16, 7)
						  in  let <_cor19> =
							  %% Line 77
							  #{#<_cor18>(32,1,'integer',['unsigned'|['native']]),
							    #<Title_UC>('all',8,'binary',['unsigned'|['big']]),
							    #<0>(_cor17,8,'integer',['unsigned'|['big']]),
							    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
						      in  %% Line 76
							  call 'wxe_util':'construct'
							      (902, _cor19)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'append'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor9},{'wx_ref',ItemRef,ItemT,_cor10}> when 'true' ->
	      do  %% Line 83
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 84
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor6> =
			  %% Line 86
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 85
			  call 'wxe_util':'call'
			      (907, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'append',2}}] )
	    -| ['compiler_generated'] )
	end
'append'/3 =
    %% Line 92
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Itemid,Text>
	      when let <_cor3> =
		    %% Line 93
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 93
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 93
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 94
	      apply 'append'/4
		  (This, Itemid, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'append',3}}] )
	    -| ['compiler_generated'] )
	end
'append'/4 =
    %% Line 111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor42,_cor43,_cor44},Itemid,Text,Submenu = {'wx_ref',_cor45,_cor46,_cor47}>
	      when let <_cor4> =
		    %% Line 112
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor5> =
			%% Line 112
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 112
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 113
	      apply 'append'/5
		  (This, Itemid, Text, Submenu, [])
	  %% Line 114
	  <{'wx_ref',ThisRef,ThisT,_cor48},Itemid,Text,Options>
	      when %% Line 115
		try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor9> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor10> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor11> =
				    call 'erlang':'and'
					(_cor9, _cor10)
				in  call 'erlang':'and'
					(_cor8, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 116
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 117
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 118
			  ( fun (_cor25,_cor24) ->
				case <_cor25,_cor24> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor21> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor16> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor17> =
						      call 'erlang':'+'
							  (0, _cor16)
						  in  let <_cor18> =
							  call 'erlang':'band'
							      (_cor17, 7)
						      in  let <_cor19> =
							      call 'erlang':'-'
								  (8, _cor18)
							  in  let <_cor20> =
								  call 'erlang':'band'
								      (_cor19, 7)
							      in  let <_cor22> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor21>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor20,8,'integer',['unsigned'|['big']])}#
								  in  [_cor22|Acc]
				  %% Line 119
				  <{'kind',Kind},Acc> when 'true' ->
				      let <_cor23> =
					  #{#<2>(32,1,'integer',['unsigned'|['native']]),
					    #<Kind>(32,1,'integer',['unsigned'|['native']])}#
				      in  [_cor23|Acc]
				  %% Line 120
				  <BadOpt,_cor49> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-append/4-fun-0-'}}] )
		      in  let <_cor29> =
			      %% Line 121
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 121
				  call 'erlang':'list_to_binary'
				      (_cor29)
			      in  let <_cor36> =
				      %% Line 123
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor31> =
					  %% Line 123
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor32> =
					      %% Line 123
					      call 'erlang':'+'
						  (4, _cor31)
					  in  let <_cor33> =
						  %% Line 123
						  call 'erlang':'band'
						      (_cor32, 7)
					      in  let <_cor34> =
						      %% Line 123
						      call 'erlang':'-'
							  (8, _cor33)
						  in  let <_cor35> =
							  %% Line 123
							  call 'erlang':'band'
							      (_cor34, 7)
						      in  let <_cor37> =
							      %% Line 123
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor36>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor35,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 122
							      call 'wxe_util':'call'
								  (906, _cor37)
	  ( <_cor41,_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39,_cor38})
		  -| [{'function_name',{'append',4}}] )
	    -| ['compiler_generated'] )
	end
'append'/5 =
    %% Line 136
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor65},Itemid,Text,Help,IsCheckable>
	      when %% Line 137
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Help)
			    in  let <_cor8> =
				    call 'erlang':'is_boolean'
					(IsCheckable)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 138
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 139
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <Help_UC> =
			  %% Line 140
			  call 'unicode':'characters_to_binary'
			      ([Help|[0]])
		      in  let <_cor27> =
			      %% Line 142
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor22> =
				  %% Line 142
				  call 'erlang':'byte_size'
				      (Text_UC)
			      in  let <_cor23> =
				      %% Line 142
				      call 'erlang':'+'
					  (4, _cor22)
				  in  let <_cor24> =
					  %% Line 142
					  call 'erlang':'band'
					      (_cor23, 7)
				      in  let <_cor25> =
					      %% Line 142
					      call 'erlang':'-'
						  (8, _cor24)
					  in  let <_cor26> =
						  %% Line 142
						  call 'erlang':'band'
						      (_cor25, 7)
					      in  let <_cor21> =
						      %% Line 142
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor16> =
							  %% Line 142
							  call 'erlang':'byte_size'
							      (Help_UC)
						      in  let <_cor17> =
							      %% Line 142
							      call 'erlang':'+'
								  (4, _cor16)
							  in  let <_cor18> =
								  %% Line 142
								  call 'erlang':'band'
								      (_cor17, 7)
							      in  let <_cor19> =
								      %% Line 142
								      call 'erlang':'-'
									  (8, _cor18)
								  in  let <_cor20> =
									  %% Line 142
									  call 'erlang':'band'
									      (_cor19, 7)
								      in  let <_cor15> =
									      %% Line 142
									      call 'wxe_util':'from_bool'
										  (IsCheckable)
									  in  let <_cor28> =
										  %% Line 142
										  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
										    #<_cor27>(32,1,'integer',['unsigned'|['native']]),
										    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor26,8,'integer',['unsigned'|['big']]),
										    #<_cor21>(32,1,'integer',['unsigned'|['native']]),
										    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor20,8,'integer',['unsigned'|['big']]),
										    #<_cor15>(32,1,'integer',['unsigned'|['native']])}#
									      in  %% Line 141
										  call 'wxe_util':'cast'
										      (908, _cor28)
	  %% Line 143
	  <{'wx_ref',ThisRef,ThisT,_cor66},Itemid,Text,{'wx_ref',SubmenuRef,SubmenuT,_cor67},Options>
	      when %% Line 144
		try
		    let <_cor29> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor30> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor31> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor32> =
				    call 'erlang':'and'
					(_cor30, _cor31)
				in  call 'erlang':'and'
					(_cor29, _cor32)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 145
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 146
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  do  %% Line 147
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (SubmenuT,
					   'wxMenu') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call SubmenuT:'parent_class'
					('wxMenu')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 148
			      ( fun (_cor47,_cor46) ->
				    case <_cor47,_cor46> of
				      <{'help',Help},Acc> when 'true' ->
					  let <Help_UC> =
					      call 'unicode':'characters_to_binary'
						  ([Help|[0]])
					  in  let <_cor44> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor39> =
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor40> =
							  call 'erlang':'+'
							      (0, _cor39)
						      in  let <_cor41> =
							      call 'erlang':'band'
								  (_cor40, 7)
							  in  let <_cor42> =
								  call 'erlang':'-'
								      (8, _cor41)
							      in  let <_cor43> =
								      call 'erlang':'band'
									  (_cor42, 7)
								  in  let <_cor45> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor44>(32,1,'integer',['unsigned'|['native']]),
									    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor43,8,'integer',['unsigned'|['big']])}#
								      in  [_cor45|Acc]
				      %% Line 149
				      <BadOpt,_cor68> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-append/5-fun-0-'}}] )
			  in  let <_cor51> =
				  %% Line 150
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 150
				      call 'erlang':'list_to_binary'
					  (_cor51)
				  in  let <_cor58> =
					  %% Line 152
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor53> =
					      %% Line 152
					      call 'erlang':'byte_size'
						  (Text_UC)
					  in  let <_cor54> =
						  %% Line 152
						  call 'erlang':'+'
						      (4, _cor53)
					      in  let <_cor55> =
						      %% Line 152
						      call 'erlang':'band'
							  (_cor54, 7)
						  in  let <_cor56> =
							  %% Line 152
							  call 'erlang':'-'
							      (8, _cor55)
						      in  let <_cor57> =
							      %% Line 152
							      call 'erlang':'band'
								  (_cor56, 7)
							  in  let <_cor59> =
								  %% Line 152
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor58>(32,1,'integer',['unsigned'|['native']]),
								    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor57,8,'integer',['unsigned'|['big']]),
								    #<SubmenuRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 151
								  call 'wxe_util':'call'
								      (909, _cor59)
	  ( <_cor64,_cor63,_cor62,_cor61,_cor60> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor64,_cor63,_cor62,_cor61,_cor60})
		  -| [{'function_name',{'append',5}}] )
	    -| ['compiler_generated'] )
	end
'appendCheckItem'/3 =
    %% Line 158
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Itemid,Text>
	      when let <_cor3> =
		    %% Line 159
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 159
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 159
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 160
	      apply 'appendCheckItem'/4
		  (This, Itemid, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'appendCheckItem',3}}] )
	    -| ['compiler_generated'] )
	end
'appendCheckItem'/4 =
    %% Line 166
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Itemid,Text,Options>
	      when %% Line 167
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 168
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 169
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 170
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor17> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor12> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor13> =
						      call 'erlang':'+'
							  (0, _cor12)
						  in  let <_cor14> =
							  call 'erlang':'band'
							      (_cor13, 7)
						      in  let <_cor15> =
							      call 'erlang':'-'
								  (8, _cor14)
							  in  let <_cor16> =
								  call 'erlang':'band'
								      (_cor15, 7)
							      in  let <_cor18> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor17>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor16,8,'integer',['unsigned'|['big']])}#
								  in  [_cor18|Acc]
				  %% Line 171
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-appendCheckItem/4-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 172
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 172
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor31> =
				      %% Line 174
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor26> =
					  %% Line 174
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor27> =
					      %% Line 174
					      call 'erlang':'+'
						  (4, _cor26)
					  in  let <_cor28> =
						  %% Line 174
						  call 'erlang':'band'
						      (_cor27, 7)
					      in  let <_cor29> =
						      %% Line 174
						      call 'erlang':'-'
							  (8, _cor28)
						  in  let <_cor30> =
							  %% Line 174
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor32> =
							      %% Line 174
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor31>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor30,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 173
							      call 'wxe_util':'call'
								  (910, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'appendCheckItem',4}}] )
	    -| ['compiler_generated'] )
	end
'appendRadioItem'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Itemid,Text>
	      when let <_cor3> =
		    %% Line 181
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 181
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 181
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 182
	      apply 'appendRadioItem'/4
		  (This, Itemid, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'appendRadioItem',3}}] )
	    -| ['compiler_generated'] )
	end
'appendRadioItem'/4 =
    %% Line 188
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Itemid,Text,Options>
	      when %% Line 189
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 190
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 191
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 192
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor17> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor12> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor13> =
						      call 'erlang':'+'
							  (0, _cor12)
						  in  let <_cor14> =
							  call 'erlang':'band'
							      (_cor13, 7)
						      in  let <_cor15> =
							      call 'erlang':'-'
								  (8, _cor14)
							  in  let <_cor16> =
								  call 'erlang':'band'
								      (_cor15, 7)
							      in  let <_cor18> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor17>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor16,8,'integer',['unsigned'|['big']])}#
								  in  [_cor18|Acc]
				  %% Line 193
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-appendRadioItem/4-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 194
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 194
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor31> =
				      %% Line 196
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor26> =
					  %% Line 196
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor27> =
					      %% Line 196
					      call 'erlang':'+'
						  (4, _cor26)
					  in  let <_cor28> =
						  %% Line 196
						  call 'erlang':'band'
						      (_cor27, 7)
					      in  let <_cor29> =
						      %% Line 196
						      call 'erlang':'-'
							  (8, _cor28)
						  in  let <_cor30> =
							  %% Line 196
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor32> =
							      %% Line 196
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor31>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor30,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 195
							      call 'wxe_util':'call'
								  (911, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'appendRadioItem',4}}] )
	    -| ['compiler_generated'] )
	end
'appendSeparator'/1 =
    %% Line 201
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 202
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 204
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 203
		      call 'wxe_util':'call'
			  (912, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'appendSeparator',1}}] )
	    -| ['compiler_generated'] )
	end
'break'/1 =
    %% Line 209
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 210
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 212
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 211
		      call 'wxe_util':'cast'
			  (913, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'break',1}}] )
	    -| ['compiler_generated'] )
	end
'check'/3 =
    %% Line 217
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Itemid,Check>
	      when let <_cor3> =
		    %% Line 218
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 218
			call 'erlang':'is_boolean'
			    (Check)
		    in  %% Line 218
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 219
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 221
		      call 'wxe_util':'from_bool'
			  (Check)
		  in  let <_cor8> =
			  %% Line 221
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 220
			  call 'wxe_util':'cast'
			      (914, _cor8)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'check',3}}] )
	    -| ['compiler_generated'] )
	end
'delete'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Itemid>
	      when %% Line 233
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 234
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 236
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 235
		      call 'wxe_util':'call'
			  (915, _cor4)
	  %% Line 237
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',ItemRef,ItemT,_cor14}> when 'true' ->
	      do  %% Line 238
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 239
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor9> =
			  %% Line 241
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 240
			  call 'wxe_util':'call'
			      (916, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'Destroy'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Itemid>
	      when %% Line 253
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 254
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 256
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 255
		      call 'wxe_util':'call'
			  (917, _cor4)
	  %% Line 257
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',ItemRef,ItemT,_cor14}> when 'true' ->
	      do  %% Line 258
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 259
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor9> =
			  %% Line 261
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 260
			  call 'wxe_util':'call'
			      (918, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'Destroy',2}}] )
	    -| ['compiler_generated'] )
	end
'enable'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Itemid,Enable>
	      when let <_cor3> =
		    %% Line 267
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 267
			call 'erlang':'is_boolean'
			    (Enable)
		    in  %% Line 267
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 268
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor7> =
		      %% Line 270
		      call 'wxe_util':'from_bool'
			  (Enable)
		  in  let <_cor8> =
			  %% Line 270
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor7>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 269
			  call 'wxe_util':'cast'
			      (919, _cor8)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'enable',3}}] )
	    -| ['compiler_generated'] )
	end
'findItem'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor17},Itemid>
	      when %% Line 282
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 283
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 285
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 284
		      call 'wxe_util':'call'
			  (921, _cor4)
	  %% Line 286
	  <{'wx_ref',ThisRef,ThisT,_cor18},Item>
	      when %% Line 287
		call 'erlang':'is_list'
		    (Item) ->
	      do  %% Line 288
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Item_UC> =
		      %% Line 289
		      call 'unicode':'characters_to_binary'
			  ([Item|[0]])
		  in  let <_cor13> =
			  %% Line 291
			  call 'erlang':'byte_size'
			      (Item_UC)
		      in  let <_cor8> =
			      %% Line 291
			      call 'erlang':'byte_size'
				  (Item_UC)
			  in  let <_cor9> =
				  %% Line 291
				  call 'erlang':'+'
				      (0, _cor8)
			      in  let <_cor10> =
				      %% Line 291
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 291
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 291
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 291
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Item_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 290
						  call 'wxe_util':'call'
						      (920, _cor14)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'findItem',2}}] )
	    -| ['compiler_generated'] )
	end
'findItemByPosition'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Position>
	      when %% Line 297
		call 'erlang':'is_integer'
		    (Position) ->
	      do  %% Line 298
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 300
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Position>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 299
		      call 'wxe_util':'call'
			  (922, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'findItemByPosition',2}}] )
	    -| ['compiler_generated'] )
	end
'getHelpString'/2 =
    %% Line 305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Itemid>
	      when %% Line 306
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 307
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 309
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 308
		      call 'wxe_util':'call'
			  (923, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getHelpString',2}}] )
	    -| ['compiler_generated'] )
	end
'getLabel'/2 =
    %% Line 314
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Itemid>
	      when %% Line 315
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 316
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 318
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 317
		      call 'wxe_util':'call'
			  (924, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'getLabel',2}}] )
	    -| ['compiler_generated'] )
	end
'getMenuItemCount'/1 =
    %% Line 323
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 324
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 326
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 325
		      call 'wxe_util':'call'
			  (925, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMenuItemCount',1}}] )
	    -| ['compiler_generated'] )
	end
'getMenuItems'/1 =
    %% Line 331
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 332
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 334
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 333
		      call 'wxe_util':'call'
			  (926, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getMenuItems',1}}] )
	    -| ['compiler_generated'] )
	end
'getTitle'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 340
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 342
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 341
		      call 'wxe_util':'call'
			  (928, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getTitle',1}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 355
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor14,_cor15,_cor16},Pos,Itemid>
	      when let <_cor3> =
		    %% Line 356
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor4> =
			%% Line 356
			call 'erlang':'is_integer'
			    (Itemid)
		    in  %% Line 356
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 357
	      apply 'insert'/4
		  (This, Pos, Itemid, [])
	  %% Line 358
	  <{'wx_ref',ThisRef,ThisT,_cor17},Pos,{'wx_ref',ItemRef,ItemT,_cor18}>
	      when %% Line 359
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 360
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 361
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor10> =
			  %% Line 363
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<Pos>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 362
			  call 'wxe_util':'call'
			      (929, _cor10)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'insert',3}}] )
	    -| ['compiler_generated'] )
	end
'insert'/4 =
    %% Line 372
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor39},Pos,Itemid,Options>
	      when %% Line 373
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Itemid)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 374
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 375
		      ( fun (_cor28,_cor27) ->
			    case <_cor28,_cor27> of
			      <{'text',Text},Acc> when 'true' ->
				  let <Text_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Text|[0]])
				  in  let <_cor16> =
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor11> =
					      call 'erlang':'byte_size'
						  (Text_UC)
					  in  let <_cor12> =
						  call 'erlang':'+'
						      (0, _cor11)
					      in  let <_cor13> =
						      call 'erlang':'band'
							  (_cor12, 7)
						  in  let <_cor14> =
							  call 'erlang':'-'
							      (8, _cor13)
						      in  let <_cor15> =
							      call 'erlang':'band'
								  (_cor14, 7)
							  in  let <_cor17> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor16>(32,1,'integer',['unsigned'|['native']]),
								    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor15,8,'integer',['unsigned'|['big']])}#
							      in  [_cor17|Acc]
			      %% Line 376
			      <{'help',Help},Acc> when 'true' ->
				  let <Help_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Help|[0]])
				  in  let <_cor24> =
					  call 'erlang':'byte_size'
					      (Help_UC)
				      in  let <_cor19> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor20> =
						  call 'erlang':'+'
						      (0, _cor19)
					      in  let <_cor21> =
						      call 'erlang':'band'
							  (_cor20, 7)
						  in  let <_cor22> =
							  call 'erlang':'-'
							      (8, _cor21)
						      in  let <_cor23> =
							      call 'erlang':'band'
								  (_cor22, 7)
							  in  let <_cor25> =
								  #{#<2>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor24>(32,1,'integer',['unsigned'|['native']]),
								    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor23,8,'integer',['unsigned'|['big']])}#
							      in  [_cor25|Acc]
			      %% Line 377
			      <{'kind',Kind},Acc> when 'true' ->
				  let <_cor26> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Kind>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor26|Acc]
			      %% Line 378
			      <BadOpt,_cor40> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-insert/4-fun-0-'}}] )
		  in  let <_cor32> =
			  %% Line 379
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 379
			      call 'erlang':'list_to_binary'
				  (_cor32)
			  in  let <_cor34> =
				  %% Line 381
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Pos>(32,1,'integer',['unsigned'|['native']]),
				    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
				    #<0>(32,1,'integer',['unsigned'|['big']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 380
				  call 'wxe_util':'call'
				      (930, _cor34)
	  ( <_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35})
		  -| [{'function_name',{'insert',4}}] )
	    -| ['compiler_generated'] )
	end
'insert'/5 =
    %% Line 387
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor16,_cor17,_cor18},Pos,Itemid,Text,Submenu = {'wx_ref',_cor19,_cor20,_cor21}>
	      when %% Line 388
		( try
		      let <_cor5> =
			  call 'erlang':'is_integer'
			      (Pos)
		      in  let <_cor6> =
			      call 'erlang':'is_integer'
				  (Itemid)
			  in  let <_cor7> =
				  call 'erlang':'is_list'
				      (Text)
			      in  let <_cor9> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor6, _cor7)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor9)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 389
	      apply 'insert'/6
		  (This, Pos, Itemid, Text, Submenu, [])
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'insert',5}}] )
	    -| ['compiler_generated'] )
	end
'insert'/6 =
    %% Line 402
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor71},Pos,Itemid,Text,Help,IsCheckable>
	      when %% Line 403
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(Itemid)
			in  let <_cor8> =
				call 'erlang':'is_list'
				    (Text)
			    in  let <_cor9> =
				    call 'erlang':'is_list'
					(Help)
				in  let <_cor10> =
					call 'erlang':'is_boolean'
					    (IsCheckable)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor9, _cor10)
					in  let <_cor12> =
						call 'erlang':'and'
						    (_cor8, _cor11)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor7, _cor12)
						in  call 'erlang':'and'
							(_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 404
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 405
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <Help_UC> =
			  %% Line 406
			  call 'unicode':'characters_to_binary'
			      ([Help|[0]])
		      in  let <_cor30> =
			      %% Line 408
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor25> =
				  %% Line 408
				  call 'erlang':'byte_size'
				      (Text_UC)
			      in  let <_cor26> =
				      %% Line 408
				      call 'erlang':'+'
					  (0, _cor25)
				  in  let <_cor27> =
					  %% Line 408
					  call 'erlang':'band'
					      (_cor26, 7)
				      in  let <_cor28> =
					      %% Line 408
					      call 'erlang':'-'
						  (8, _cor27)
					  in  let <_cor29> =
						  %% Line 408
						  call 'erlang':'band'
						      (_cor28, 7)
					      in  let <_cor24> =
						      %% Line 408
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor19> =
							  %% Line 408
							  call 'erlang':'byte_size'
							      (Help_UC)
						      in  let <_cor20> =
							      %% Line 408
							      call 'erlang':'+'
								  (4, _cor19)
							  in  let <_cor21> =
								  %% Line 408
								  call 'erlang':'band'
								      (_cor20, 7)
							      in  let <_cor22> =
								      %% Line 408
								      call 'erlang':'-'
									  (8, _cor21)
								  in  let <_cor23> =
									  %% Line 408
									  call 'erlang':'band'
									      (_cor22, 7)
								      in  let <_cor18> =
									      %% Line 408
									      call 'wxe_util':'from_bool'
										  (IsCheckable)
									  in  let <_cor31> =
										  %% Line 408
										  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										    #<Pos>(32,1,'integer',['unsigned'|['native']]),
										    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
										    #<_cor30>(32,1,'integer',['unsigned'|['native']]),
										    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor29,8,'integer',['unsigned'|['big']]),
										    #<_cor24>(32,1,'integer',['unsigned'|['native']]),
										    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor23,8,'integer',['unsigned'|['big']]),
										    #<_cor18>(32,1,'integer',['unsigned'|['native']])}#
									      in  %% Line 407
										  call 'wxe_util':'cast'
										      (932, _cor31)
	  %% Line 409
	  <{'wx_ref',ThisRef,ThisT,_cor72},Pos,Itemid,Text,{'wx_ref',SubmenuRef,SubmenuT,_cor73},Options>
	      when %% Line 410
		try
		    let <_cor32> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor33> =
			    call 'erlang':'is_integer'
				(Itemid)
			in  let <_cor34> =
				call 'erlang':'is_list'
				    (Text)
			    in  let <_cor35> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor36> =
					call 'erlang':'and'
					    (_cor34, _cor35)
				    in  let <_cor37> =
					    call 'erlang':'and'
						(_cor33, _cor36)
					in  call 'erlang':'and'
						(_cor32, _cor37)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 411
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 412
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  do  %% Line 413
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (SubmenuT,
					   'wxMenu') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call SubmenuT:'parent_class'
					('wxMenu')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 414
			      ( fun (_cor52,_cor51) ->
				    case <_cor52,_cor51> of
				      <{'help',Help},Acc> when 'true' ->
					  let <Help_UC> =
					      call 'unicode':'characters_to_binary'
						  ([Help|[0]])
					  in  let <_cor49> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor44> =
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor45> =
							  call 'erlang':'+'
							      (0, _cor44)
						      in  let <_cor46> =
							      call 'erlang':'band'
								  (_cor45, 7)
							  in  let <_cor47> =
								  call 'erlang':'-'
								      (8, _cor46)
							      in  let <_cor48> =
								      call 'erlang':'band'
									  (_cor47, 7)
								  in  let <_cor50> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor49>(32,1,'integer',['unsigned'|['native']]),
									    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor48,8,'integer',['unsigned'|['big']])}#
								      in  [_cor50|Acc]
				      %% Line 415
				      <BadOpt,_cor74> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-insert/6-fun-0-'}}] )
			  in  let <_cor56> =
				  %% Line 416
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 416
				      call 'erlang':'list_to_binary'
					  (_cor56)
				  in  let <_cor63> =
					  %% Line 418
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor58> =
					      %% Line 418
					      call 'erlang':'byte_size'
						  (Text_UC)
					  in  let <_cor59> =
						  %% Line 418
						  call 'erlang':'+'
						      (0, _cor58)
					      in  let <_cor60> =
						      %% Line 418
						      call 'erlang':'band'
							  (_cor59, 7)
						  in  let <_cor61> =
							  %% Line 418
							  call 'erlang':'-'
							      (8, _cor60)
						      in  let <_cor62> =
							      %% Line 418
							      call 'erlang':'band'
								  (_cor61, 7)
							  in  let <_cor64> =
								  %% Line 418
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Pos>(32,1,'integer',['unsigned'|['native']]),
								    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor63>(32,1,'integer',['unsigned'|['native']]),
								    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor62,8,'integer',['unsigned'|['big']]),
								    #<SubmenuRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 417
								  call 'wxe_util':'call'
								      (931, _cor64)
	  ( <_cor70,_cor69,_cor68,_cor67,_cor66,_cor65> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor70,_cor69,_cor68,_cor67,_cor66,_cor65})
		  -| [{'function_name',{'insert',6}}] )
	    -| ['compiler_generated'] )
	end
'insertCheckItem'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Pos,Itemid,Text>
	      when %% Line 425
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Pos)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Itemid)
			  in  let <_cor6> =
				  call 'erlang':'is_list'
				      (Text)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 426
	      apply 'insertCheckItem'/5
		  (This, Pos, Itemid, Text, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'insertCheckItem',4}}] )
	    -| ['compiler_generated'] )
	end
'insertCheckItem'/5 =
    %% Line 432
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor41},Pos,Itemid,Text,Options>
	      when %% Line 433
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Itemid)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Text)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 434
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 435
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 436
			  ( fun (_cor23,_cor22) ->
				case <_cor23,_cor22> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor20> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor15> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor16> =
						      call 'erlang':'+'
							  (0, _cor15)
						  in  let <_cor17> =
							  call 'erlang':'band'
							      (_cor16, 7)
						      in  let <_cor18> =
							      call 'erlang':'-'
								  (8, _cor17)
							  in  let <_cor19> =
								  call 'erlang':'band'
								      (_cor18, 7)
							      in  let <_cor21> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor20>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor19,8,'integer',['unsigned'|['big']])}#
								  in  [_cor21|Acc]
				  %% Line 437
				  <BadOpt,_cor42> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-insertCheckItem/5-fun-0-'}}] )
		      in  let <_cor27> =
			      %% Line 438
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 438
				  call 'erlang':'list_to_binary'
				      (_cor27)
			      in  let <_cor34> =
				      %% Line 440
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor29> =
					  %% Line 440
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor30> =
					      %% Line 440
					      call 'erlang':'+'
						  (0, _cor29)
					  in  let <_cor31> =
						  %% Line 440
						  call 'erlang':'band'
						      (_cor30, 7)
					      in  let <_cor32> =
						      %% Line 440
						      call 'erlang':'-'
							  (8, _cor31)
						  in  let <_cor33> =
							  %% Line 440
							  call 'erlang':'band'
							      (_cor32, 7)
						      in  let <_cor35> =
							      %% Line 440
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Pos>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor34>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor33,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 439
							      call 'wxe_util':'call'
								  (933, _cor35)
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'insertCheckItem',5}}] )
	    -| ['compiler_generated'] )
	end
'insertRadioItem'/4 =
    %% Line 446
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor13,_cor14,_cor15},Pos,Itemid,Text>
	      when %% Line 447
		( try
		      let <_cor4> =
			  call 'erlang':'is_integer'
			      (Pos)
		      in  let <_cor5> =
			      call 'erlang':'is_integer'
				  (Itemid)
			  in  let <_cor6> =
				  call 'erlang':'is_list'
				      (Text)
			      in  let <_cor7> =
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor5, _cor6)
					-| ['compiler_generated'] )
				  in  ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'and'
									     -| ['compiler_generated'] )
					    (_cor4, _cor7)
					-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 448
	      apply 'insertRadioItem'/5
		  (This, Pos, Itemid, Text, [])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'insertRadioItem',4}}] )
	    -| ['compiler_generated'] )
	end
'insertRadioItem'/5 =
    %% Line 454
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor41},Pos,Itemid,Text,Options>
	      when %% Line 455
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Pos)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(Itemid)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Text)
			    in  let <_cor8> =
				    call 'erlang':'is_list'
					(Options)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 456
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 457
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 458
			  ( fun (_cor23,_cor22) ->
				case <_cor23,_cor22> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor20> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor15> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor16> =
						      call 'erlang':'+'
							  (0, _cor15)
						  in  let <_cor17> =
							  call 'erlang':'band'
							      (_cor16, 7)
						      in  let <_cor18> =
							      call 'erlang':'-'
								  (8, _cor17)
							  in  let <_cor19> =
								  call 'erlang':'band'
								      (_cor18, 7)
							      in  let <_cor21> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor20>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor19,8,'integer',['unsigned'|['big']])}#
								  in  [_cor21|Acc]
				  %% Line 459
				  <BadOpt,_cor42> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-insertRadioItem/5-fun-0-'}}] )
		      in  let <_cor27> =
			      %% Line 460
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 460
				  call 'erlang':'list_to_binary'
				      (_cor27)
			      in  let <_cor34> =
				      %% Line 462
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor29> =
					  %% Line 462
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor30> =
					      %% Line 462
					      call 'erlang':'+'
						  (0, _cor29)
					  in  let <_cor31> =
						  %% Line 462
						  call 'erlang':'band'
						      (_cor30, 7)
					      in  let <_cor32> =
						      %% Line 462
						      call 'erlang':'-'
							  (8, _cor31)
						  in  let <_cor33> =
							  %% Line 462
							  call 'erlang':'band'
							      (_cor32, 7)
						      in  let <_cor35> =
							      %% Line 462
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Pos>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor34>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor33,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 461
							      call 'wxe_util':'call'
								  (934, _cor35)
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'insertRadioItem',5}}] )
	    -| ['compiler_generated'] )
	end
'insertSeparator'/2 =
    %% Line 467
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Pos>
	      when %% Line 468
		call 'erlang':'is_integer'
		    (Pos) ->
	      do  %% Line 469
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 471
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Pos>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 470
		      call 'wxe_util':'call'
			  (935, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'insertSeparator',2}}] )
	    -| ['compiler_generated'] )
	end
'isChecked'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Itemid>
	      when %% Line 477
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 478
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 480
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 479
		      call 'wxe_util':'call'
			  (936, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isChecked',2}}] )
	    -| ['compiler_generated'] )
	end
'isEnabled'/2 =
    %% Line 485
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Itemid>
	      when %% Line 486
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 487
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 489
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 488
		      call 'wxe_util':'call'
			  (937, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'isEnabled',2}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/2 =
    %% Line 502
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor10,_cor11,_cor12},Itemid>
	      when %% Line 503
		call 'erlang':'is_integer'
		    (Itemid) ->
	      %% Line 504
	      apply 'prepend'/3
		  (This, Itemid, [])
	  %% Line 505
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',ItemRef,ItemT,_cor14}> when 'true' ->
	      do  %% Line 506
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 507
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor7> =
			  %% Line 509
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 508
			  call 'wxe_util':'call'
			      (938, _cor7)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'prepend',2}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/3 =
    %% Line 518
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor35},Itemid,Options>
	      when let <_cor3> =
		    %% Line 519
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 519
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 519
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 520
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 521
		      ( fun (_cor25,_cor24) ->
			    case <_cor25,_cor24> of
			      <{'text',Text},Acc> when 'true' ->
				  let <Text_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Text|[0]])
				  in  let <_cor13> =
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor8> =
					      call 'erlang':'byte_size'
						  (Text_UC)
					  in  let <_cor9> =
						  call 'erlang':'+'
						      (0, _cor8)
					      in  let <_cor10> =
						      call 'erlang':'band'
							  (_cor9, 7)
						  in  let <_cor11> =
							  call 'erlang':'-'
							      (8, _cor10)
						      in  let <_cor12> =
							      call 'erlang':'band'
								  (_cor11, 7)
							  in  let <_cor14> =
								  #{#<1>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
								    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
							      in  [_cor14|Acc]
			      %% Line 522
			      <{'help',Help},Acc> when 'true' ->
				  let <Help_UC> =
				      call 'unicode':'characters_to_binary'
					  ([Help|[0]])
				  in  let <_cor21> =
					  call 'erlang':'byte_size'
					      (Help_UC)
				      in  let <_cor16> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor17> =
						  call 'erlang':'+'
						      (0, _cor16)
					      in  let <_cor18> =
						      call 'erlang':'band'
							  (_cor17, 7)
						  in  let <_cor19> =
							  call 'erlang':'-'
							      (8, _cor18)
						      in  let <_cor20> =
							      call 'erlang':'band'
								  (_cor19, 7)
							  in  let <_cor22> =
								  #{#<2>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor21>(32,1,'integer',['unsigned'|['native']]),
								    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor20,8,'integer',['unsigned'|['big']])}#
							      in  [_cor22|Acc]
			      %% Line 523
			      <{'kind',Kind},Acc> when 'true' ->
				  let <_cor23> =
				      #{#<3>(32,1,'integer',['unsigned'|['native']]),
					#<Kind>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor23|Acc]
			      %% Line 524
			      <BadOpt,_cor36> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-prepend/3-fun-0-'}}] )
		  in  let <_cor29> =
			  %% Line 525
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 525
			      call 'erlang':'list_to_binary'
				  (_cor29)
			  in  let <_cor31> =
				  %% Line 527
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 526
				  call 'wxe_util':'call'
				      (939, _cor31)
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'prepend',3}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/4 =
    %% Line 533
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor12,_cor13,_cor14},Itemid,Text,Submenu = {'wx_ref',_cor15,_cor16,_cor17}>
	      when let <_cor4> =
		    %% Line 534
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor5> =
			%% Line 534
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 534
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor4, _cor5)
			  -| ['compiler_generated'] ) ->
	      %% Line 535
	      apply 'prepend'/5
		  (This, Itemid, Text, Submenu, [])
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'prepend',4}}] )
	    -| ['compiler_generated'] )
	end
'prepend'/5 =
    %% Line 548
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor65},Itemid,Text,Help,IsCheckable>
	      when %% Line 549
		try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Help)
			    in  let <_cor8> =
				    call 'erlang':'is_boolean'
					(IsCheckable)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 550
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 551
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <Help_UC> =
			  %% Line 552
			  call 'unicode':'characters_to_binary'
			      ([Help|[0]])
		      in  let <_cor27> =
			      %% Line 554
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor22> =
				  %% Line 554
				  call 'erlang':'byte_size'
				      (Text_UC)
			      in  let <_cor23> =
				      %% Line 554
				      call 'erlang':'+'
					  (4, _cor22)
				  in  let <_cor24> =
					  %% Line 554
					  call 'erlang':'band'
					      (_cor23, 7)
				      in  let <_cor25> =
					      %% Line 554
					      call 'erlang':'-'
						  (8, _cor24)
					  in  let <_cor26> =
						  %% Line 554
						  call 'erlang':'band'
						      (_cor25, 7)
					      in  let <_cor21> =
						      %% Line 554
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor16> =
							  %% Line 554
							  call 'erlang':'byte_size'
							      (Help_UC)
						      in  let <_cor17> =
							      %% Line 554
							      call 'erlang':'+'
								  (4, _cor16)
							  in  let <_cor18> =
								  %% Line 554
								  call 'erlang':'band'
								      (_cor17, 7)
							      in  let <_cor19> =
								      %% Line 554
								      call 'erlang':'-'
									  (8, _cor18)
								  in  let <_cor20> =
									  %% Line 554
									  call 'erlang':'band'
									      (_cor19, 7)
								      in  let <_cor15> =
									      %% Line 554
									      call 'wxe_util':'from_bool'
										  (IsCheckable)
									  in  let <_cor28> =
										  %% Line 554
										  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
										    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
										    #<_cor27>(32,1,'integer',['unsigned'|['native']]),
										    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor26,8,'integer',['unsigned'|['big']]),
										    #<_cor21>(32,1,'integer',['unsigned'|['native']]),
										    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
										    #<0>(_cor20,8,'integer',['unsigned'|['big']]),
										    #<_cor15>(32,1,'integer',['unsigned'|['native']])}#
									      in  %% Line 553
										  call 'wxe_util':'cast'
										      (941, _cor28)
	  %% Line 555
	  <{'wx_ref',ThisRef,ThisT,_cor66},Itemid,Text,{'wx_ref',SubmenuRef,SubmenuT,_cor67},Options>
	      when %% Line 556
		try
		    let <_cor29> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor30> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor31> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor32> =
				    call 'erlang':'and'
					(_cor30, _cor31)
				in  call 'erlang':'and'
					(_cor29, _cor32)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 557
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 558
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  do  %% Line 559
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (SubmenuT,
					   'wxMenu') ->
				    'ok'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    call SubmenuT:'parent_class'
					('wxMenu')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
			  let <MOpts> =
			      %% Line 560
			      ( fun (_cor47,_cor46) ->
				    case <_cor47,_cor46> of
				      <{'help',Help},Acc> when 'true' ->
					  let <Help_UC> =
					      call 'unicode':'characters_to_binary'
						  ([Help|[0]])
					  in  let <_cor44> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor39> =
						      call 'erlang':'byte_size'
							  (Help_UC)
						  in  let <_cor40> =
							  call 'erlang':'+'
							      (0, _cor39)
						      in  let <_cor41> =
							      call 'erlang':'band'
								  (_cor40, 7)
							  in  let <_cor42> =
								  call 'erlang':'-'
								      (8, _cor41)
							      in  let <_cor43> =
								      call 'erlang':'band'
									  (_cor42, 7)
								  in  let <_cor45> =
									  #{#<1>(32,1,'integer',['unsigned'|['native']]),
									    #<_cor44>(32,1,'integer',['unsigned'|['native']]),
									    #<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									    #<0>(_cor43,8,'integer',['unsigned'|['big']])}#
								      in  [_cor45|Acc]
				      %% Line 561
				      <BadOpt,_cor68> when 'true' ->
					  call 'erlang':'error'
					      ({'badoption',BadOpt})
				    end
				-| [{'id',{0,0,'-prepend/5-fun-0-'}}] )
			  in  let <_cor51> =
				  %% Line 562
				  call 'lists':'foldl'
				      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			      in  let <BinOpt> =
				      %% Line 562
				      call 'erlang':'list_to_binary'
					  (_cor51)
				  in  let <_cor58> =
					  %% Line 564
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor53> =
					      %% Line 564
					      call 'erlang':'byte_size'
						  (Text_UC)
					  in  let <_cor54> =
						  %% Line 564
						  call 'erlang':'+'
						      (4, _cor53)
					      in  let <_cor55> =
						      %% Line 564
						      call 'erlang':'band'
							  (_cor54, 7)
						  in  let <_cor56> =
							  %% Line 564
							  call 'erlang':'-'
							      (8, _cor55)
						      in  let <_cor57> =
							      %% Line 564
							      call 'erlang':'band'
								  (_cor56, 7)
							  in  let <_cor59> =
								  %% Line 564
								  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
								    #<_cor58>(32,1,'integer',['unsigned'|['native']]),
								    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								    #<0>(_cor57,8,'integer',['unsigned'|['big']]),
								    #<SubmenuRef>(32,1,'integer',['unsigned'|['native']]),
								    #<0>(32,1,'integer',['unsigned'|['big']]),
								    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							      in  %% Line 563
								  call 'wxe_util':'call'
								      (940, _cor59)
	  ( <_cor64,_cor63,_cor62,_cor61,_cor60> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor64,_cor63,_cor62,_cor61,_cor60})
		  -| [{'function_name',{'prepend',5}}] )
	    -| ['compiler_generated'] )
	end
'prependCheckItem'/3 =
    %% Line 570
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Itemid,Text>
	      when let <_cor3> =
		    %% Line 571
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 571
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 571
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 572
	      apply 'prependCheckItem'/4
		  (This, Itemid, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'prependCheckItem',3}}] )
	    -| ['compiler_generated'] )
	end
'prependCheckItem'/4 =
    %% Line 578
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Itemid,Text,Options>
	      when %% Line 579
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 580
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 581
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 582
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor17> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor12> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor13> =
						      call 'erlang':'+'
							  (0, _cor12)
						  in  let <_cor14> =
							  call 'erlang':'band'
							      (_cor13, 7)
						      in  let <_cor15> =
							      call 'erlang':'-'
								  (8, _cor14)
							  in  let <_cor16> =
								  call 'erlang':'band'
								      (_cor15, 7)
							      in  let <_cor18> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor17>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor16,8,'integer',['unsigned'|['big']])}#
								  in  [_cor18|Acc]
				  %% Line 583
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-prependCheckItem/4-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 584
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 584
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor31> =
				      %% Line 586
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor26> =
					  %% Line 586
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor27> =
					      %% Line 586
					      call 'erlang':'+'
						  (4, _cor26)
					  in  let <_cor28> =
						  %% Line 586
						  call 'erlang':'band'
						      (_cor27, 7)
					      in  let <_cor29> =
						      %% Line 586
						      call 'erlang':'-'
							  (8, _cor28)
						  in  let <_cor30> =
							  %% Line 586
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor32> =
							      %% Line 586
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor31>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor30,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 585
							      call 'wxe_util':'call'
								  (942, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'prependCheckItem',4}}] )
	    -| ['compiler_generated'] )
	end
'prependRadioItem'/3 =
    %% Line 592
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <This = {'wx_ref',_cor9,_cor10,_cor11},Itemid,Text>
	      when let <_cor3> =
		    %% Line 593
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 593
			call 'erlang':'is_list'
			    (Text)
		    in  %% Line 593
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'and'
							       -| ['compiler_generated'] )
			      (_cor3, _cor4)
			  -| ['compiler_generated'] ) ->
	      %% Line 594
	      apply 'prependRadioItem'/4
		  (This, Itemid, Text, [])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'prependRadioItem',3}}] )
	    -| ['compiler_generated'] )
	end
'prependRadioItem'/4 =
    %% Line 600
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor37},Itemid,Text,Options>
	      when %% Line 601
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Itemid)
		    in  let <_cor5> =
			    call 'erlang':'is_list'
				(Text)
			in  let <_cor6> =
				call 'erlang':'is_list'
				    (Options)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 602
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 603
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <MOpts> =
			  %% Line 604
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{'help',Help},Acc> when 'true' ->
				      let <Help_UC> =
					  call 'unicode':'characters_to_binary'
					      ([Help|[0]])
				      in  let <_cor17> =
					      call 'erlang':'byte_size'
						  (Help_UC)
					  in  let <_cor12> =
						  call 'erlang':'byte_size'
						      (Help_UC)
					      in  let <_cor13> =
						      call 'erlang':'+'
							  (0, _cor12)
						  in  let <_cor14> =
							  call 'erlang':'band'
							      (_cor13, 7)
						      in  let <_cor15> =
							      call 'erlang':'-'
								  (8, _cor14)
							  in  let <_cor16> =
								  call 'erlang':'band'
								      (_cor15, 7)
							      in  let <_cor18> =
								      #{#<1>(32,1,'integer',['unsigned'|['native']]),
									#<_cor17>(32,1,'integer',['unsigned'|['native']]),
									#<Help_UC>('all',8,'binary',['unsigned'|['big']]),
									#<0>(_cor16,8,'integer',['unsigned'|['big']])}#
								  in  [_cor18|Acc]
				  %% Line 605
				  <BadOpt,_cor38> when 'true' ->
				      call 'erlang':'error'
					  ({'badoption',BadOpt})
				end
			    -| [{'id',{0,0,'-prependRadioItem/4-fun-0-'}}] )
		      in  let <_cor24> =
			      %% Line 606
			      call 'lists':'foldl'
				  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']]),
					     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
			  in  let <BinOpt> =
				  %% Line 606
				  call 'erlang':'list_to_binary'
				      (_cor24)
			      in  let <_cor31> =
				      %% Line 608
				      call 'erlang':'byte_size'
					  (Text_UC)
				  in  let <_cor26> =
					  %% Line 608
					  call 'erlang':'byte_size'
					      (Text_UC)
				      in  let <_cor27> =
					      %% Line 608
					      call 'erlang':'+'
						  (4, _cor26)
					  in  let <_cor28> =
						  %% Line 608
						  call 'erlang':'band'
						      (_cor27, 7)
					      in  let <_cor29> =
						      %% Line 608
						      call 'erlang':'-'
							  (8, _cor28)
						  in  let <_cor30> =
							  %% Line 608
							  call 'erlang':'band'
							      (_cor29, 7)
						      in  let <_cor32> =
							      %% Line 608
							      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
								#<Itemid>(32,1,'integer',['unsigned'|['native']]),
								#<_cor31>(32,1,'integer',['unsigned'|['native']]),
								#<Text_UC>('all',8,'binary',['unsigned'|['big']]),
								#<0>(_cor30,8,'integer',['unsigned'|['big']]),
								#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
							  in  %% Line 607
							      call 'wxe_util':'call'
								  (943, _cor32)
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'prependRadioItem',4}}] )
	    -| ['compiler_generated'] )
	end
'prependSeparator'/1 =
    %% Line 613
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 614
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 616
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 615
		      call 'wxe_util':'call'
			  (944, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'prependSeparator',1}}] )
	    -| ['compiler_generated'] )
	end
'remove'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor12},Itemid>
	      when %% Line 628
		call 'erlang':'is_integer'
		    (Itemid) ->
	      do  %% Line 629
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 631
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Itemid>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 630
		      call 'wxe_util':'call'
			  (945, _cor4)
	  %% Line 632
	  <{'wx_ref',ThisRef,ThisT,_cor13},{'wx_ref',ItemRef,ItemT,_cor14}> when 'true' ->
	      do  %% Line 633
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 634
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (ItemT,
				       'wxMenuItem') ->
				'ok'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call ItemT:'parent_class'
				    ('wxMenuItem')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		      let <_cor9> =
			  %% Line 636
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<ItemRef>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 635
			  call 'wxe_util':'call'
			      (946, _cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'remove',2}}] )
	    -| ['compiler_generated'] )
	end
'setHelpString'/3 =
    %% Line 641
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Itemid,HelpString>
	      when let <_cor3> =
		    %% Line 642
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 642
			call 'erlang':'is_list'
			    (HelpString)
		    in  %% Line 642
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 643
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <HelpString_UC> =
		      %% Line 644
		      call 'unicode':'characters_to_binary'
			  ([HelpString|[0]])
		  in  let <_cor13> =
			  %% Line 646
			  call 'erlang':'byte_size'
			      (HelpString_UC)
		      in  let <_cor8> =
			      %% Line 646
			      call 'erlang':'byte_size'
				  (HelpString_UC)
			  in  let <_cor9> =
				  %% Line 646
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 646
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 646
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 646
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 646
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<HelpString_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 645
						  call 'wxe_util':'cast'
						      (947, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setHelpString',3}}] )
	    -| ['compiler_generated'] )
	end
'setLabel'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor18},Itemid,Label>
	      when let <_cor3> =
		    %% Line 652
		    call 'erlang':'is_integer'
			(Itemid)
		in  let <_cor4> =
			%% Line 652
			call 'erlang':'is_list'
			    (Label)
		    in  %% Line 652
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 653
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Label_UC> =
		      %% Line 654
		      call 'unicode':'characters_to_binary'
			  ([Label|[0]])
		  in  let <_cor13> =
			  %% Line 656
			  call 'erlang':'byte_size'
			      (Label_UC)
		      in  let <_cor8> =
			      %% Line 656
			      call 'erlang':'byte_size'
				  (Label_UC)
			  in  let <_cor9> =
				  %% Line 656
				  call 'erlang':'+'
				      (4, _cor8)
			      in  let <_cor10> =
				      %% Line 656
				      call 'erlang':'band'
					  (_cor9, 7)
				  in  let <_cor11> =
					  %% Line 656
					  call 'erlang':'-'
					      (8, _cor10)
				      in  let <_cor12> =
					      %% Line 656
					      call 'erlang':'band'
						  (_cor11, 7)
					  in  let <_cor14> =
						  %% Line 656
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<Itemid>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor13>(32,1,'integer',['unsigned'|['native']]),
						    #<Label_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor12,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 655
						  call 'wxe_util':'cast'
						      (948, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'setLabel',3}}] )
	    -| ['compiler_generated'] )
	end
'setTitle'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Title>
	      when %% Line 662
		call 'erlang':'is_list'
		    (Title) ->
	      do  %% Line 663
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Title_UC> =
		      %% Line 664
		      call 'unicode':'characters_to_binary'
			  ([Title|[0]])
		  in  let <_cor10> =
			  %% Line 666
			  call 'erlang':'byte_size'
			      (Title_UC)
		      in  let <_cor5> =
			      %% Line 666
			      call 'erlang':'byte_size'
				  (Title_UC)
			  in  let <_cor6> =
				  %% Line 666
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 666
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 666
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 666
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 666
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Title_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 665
						  call 'wxe_util':'cast'
						      (949, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setTitle',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 670
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 671
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxMenu') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxMenu')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 672
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 673
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'disconnect'/3 =
    %% Line 676
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor2, _cor1, _cor0)
'disconnect'/2 =
    %% Line 678
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor1, _cor0)
'disconnect'/1 =
    %% Line 680
    fun (_cor0) ->
	call 'wxEvtHandler':'disconnect'
	    (_cor0)
'connect'/3 =
    %% Line 682
    fun (_cor2,_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor2, _cor1, _cor0)
'connect'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	call 'wxEvtHandler':'connect'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxMenu')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxMenu', _cor0)
end