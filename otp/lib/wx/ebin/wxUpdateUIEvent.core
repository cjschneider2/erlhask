module 'wxUpdateUIEvent' ['canUpdate'/1,
			  'check'/2,
			  'enable'/2,
			  'getChecked'/1,
			  'getClientData'/1,
			  'getEnabled'/1,
			  'getExtraLong'/1,
			  'getId'/1,
			  'getInt'/1,
			  'getMode'/0,
			  'getSelection'/1,
			  'getSetChecked'/1,
			  'getSetEnabled'/1,
			  'getSetShown'/1,
			  'getSetText'/1,
			  'getShown'/1,
			  'getSkipped'/1,
			  'getString'/1,
			  'getText'/1,
			  'getTimestamp'/1,
			  'getUpdateInterval'/0,
			  'isChecked'/1,
			  'isCommandEvent'/1,
			  'isSelection'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'parent_class'/1,
			  'resetUpdateTime'/0,
			  'resumePropagation'/2,
			  'setInt'/2,
			  'setMode'/1,
			  'setString'/2,
			  'setText'/2,
			  'setUpdateInterval'/1,
			  'shouldPropagate'/1,
			  'show'/2,
			  'skip'/1,
			  'skip'/2,
			  'stopPropagation'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 45
		'export_type' =
		    %% Line 45
		    [{'wxUpdateUIEvent',0}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'wxUpdateUIEvent',{'remote_type',51,[{'atom',51,'wx'}|[{'atom',51,'wx_object'}|[[]]]]},[]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'canUpdate',1},[{'type',53,'bounded_fun',[{'type',53,'fun',[{'type',53,'product',[{'var',53,'Win'}]}|[{'type',53,'boolean',[]}]]}|[[{'type',54,'constraint',[{'atom',54,'is_subtype'}|[[{'var',54,'Win'}|[{'remote_type',54,[{'atom',54,'wxWindow'}|[{'atom',54,'wxWindow'}|[[]]]]}]]]]}]]]}]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'check',2},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'This'}|[{'var',61,'Check'}]]}|[{'atom',61,'ok'}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'This'}|[{'type',62,'wxUpdateUIEvent',[]}]]]]}|[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'Check'}|[{'type',62,'boolean',[]}]]]]}]]]]}]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'enable',2},[{'type',70,'bounded_fun',[{'type',70,'fun',[{'type',70,'product',[{'var',70,'This'}|[{'var',70,'Enable'}]]}|[{'atom',70,'ok'}]]}|[[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'This'}|[{'type',71,'wxUpdateUIEvent',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Enable'}|[{'type',71,'boolean',[]}]]]]}]]]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'show',2},[{'type',79,'bounded_fun',[{'type',79,'fun',[{'type',79,'product',[{'var',79,'This'}|[{'var',79,'Show'}]]}|[{'atom',79,'ok'}]]}|[[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'This'}|[{'type',80,'wxUpdateUIEvent',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'Show'}|[{'type',80,'boolean',[]}]]]]}]]]]}]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'getChecked',1},[{'type',88,'bounded_fun',[{'type',88,'fun',[{'type',88,'product',[{'var',88,'This'}]}|[{'type',88,'boolean',[]}]]}|[[{'type',89,'constraint',[{'atom',89,'is_subtype'}|[[{'var',89,'This'}|[{'type',89,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'getEnabled',1},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'This'}]}|[{'type',96,'boolean',[]}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'This'}|[{'type',97,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'getShown',1},[{'type',104,'bounded_fun',[{'type',104,'fun',[{'type',104,'product',[{'var',104,'This'}]}|[{'type',104,'boolean',[]}]]}|[[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'This'}|[{'type',105,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'getSetChecked',1},[{'type',112,'bounded_fun',[{'type',112,'fun',[{'type',112,'product',[{'var',112,'This'}]}|[{'type',112,'boolean',[]}]]}|[[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'This'}|[{'type',113,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 120
		'spec' =
		    %% Line 120
		    [{{'getSetEnabled',1},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'This'}]}|[{'type',120,'boolean',[]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'This'}|[{'type',121,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'getSetShown',1},[{'type',128,'bounded_fun',[{'type',128,'fun',[{'type',128,'product',[{'var',128,'This'}]}|[{'type',128,'boolean',[]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'This'}|[{'type',129,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'getSetText',1},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'This'}]}|[{'type',136,'boolean',[]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'This'}|[{'type',137,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'getText',1},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'This'}]}|[{'remote_type',144,[{'atom',144,'unicode'}|[{'atom',144,'charlist'}|[[]]]]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'This'}|[{'type',145,'wxUpdateUIEvent',[]}]]]]}]]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'getMode',0},[{'type',153,'fun',[{'type',153,'product',[]}|[{'remote_type',153,[{'atom',153,'wx'}|[{'atom',153,'wx_enum'}|[[]]]]}]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'getUpdateInterval',0},[{'type',159,'fun',[{'type',159,'product',[]}|[{'type',159,'integer',[]}]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'resetUpdateTime',0},[{'type',165,'fun',[{'type',165,'product',[]}|[{'atom',165,'ok'}]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'setMode',1},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Mode'}]}|[{'atom',172,'ok'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Mode'}|[{'remote_type',173,[{'atom',173,'wx'}|[{'atom',173,'wx_enum'}|[[]]]]}]]]]}]]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'setText',2},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'This'}|[{'var',180,'Text'}]]}|[{'atom',180,'ok'}]]}|[[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'This'}|[{'type',181,'wxUpdateUIEvent',[]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Text'}|[{'remote_type',181,[{'atom',181,'unicode'}|[{'atom',181,'chardata'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'setUpdateInterval',1},[{'type',190,'bounded_fun',[{'type',190,'fun',[{'type',190,'product',[{'var',190,'UpdateInterval'}]}|[{'atom',190,'ok'}]]}|[[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'UpdateInterval'}|[{'type',191,'integer',[]}]]]]}]]]}]}]]
'parent_class'/1 =
    %% Line 47
    fun (_cor0) ->
	case _cor0 of
	  <'wxCommandEvent'> when 'true' ->
	      'true'
	  %% Line 48
	  <'wxEvent'> when 'true' ->
	      'true'
	  %% Line 49
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxUpdateUIEvent'})
	end
'canUpdate'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',WinRef,WinT,_cor5}> when 'true' ->
	      do  %% Line 56
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (WinT,
				   'wxWindow') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call WinT:'parent_class'
				('wxWindow')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 58
		      #{#<WinRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 57
		      call 'wxe_util':'call'
			  (2808, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'canUpdate',1}}] )
	    -| ['compiler_generated'] )
	end
'check'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Check>
	      when %% Line 64
		call 'erlang':'is_boolean'
		    (Check) ->
	      do  %% Line 65
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 67
		      call 'wxe_util':'from_bool'
			  (Check)
		  in  let <_cor5> =
			  %% Line 67
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 66
			  call 'wxe_util':'cast'
			      (2809, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'check',2}}] )
	    -| ['compiler_generated'] )
	end
'enable'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Enable>
	      when %% Line 73
		call 'erlang':'is_boolean'
		    (Enable) ->
	      do  %% Line 74
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 76
		      call 'wxe_util':'from_bool'
			  (Enable)
		  in  let <_cor5> =
			  %% Line 76
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 75
			  call 'wxe_util':'cast'
			      (2810, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'enable',2}}] )
	    -| ['compiler_generated'] )
	end
'show'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor8},Show>
	      when %% Line 82
		call 'erlang':'is_boolean'
		    (Show) ->
	      do  %% Line 83
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 85
		      call 'wxe_util':'from_bool'
			  (Show)
		  in  let <_cor5> =
			  %% Line 85
			  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			    #<_cor4>(32,1,'integer',['unsigned'|['native']])}#
		      in  %% Line 84
			  call 'wxe_util':'cast'
			      (2811, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'show',2}}] )
	    -| ['compiler_generated'] )
	end
'getChecked'/1 =
    %% Line 90
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 91
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 93
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 92
		      call 'wxe_util':'call'
			  (2812, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getChecked',1}}] )
	    -| ['compiler_generated'] )
	end
'getEnabled'/1 =
    %% Line 98
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 101
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 100
		      call 'wxe_util':'call'
			  (2813, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getEnabled',1}}] )
	    -| ['compiler_generated'] )
	end
'getShown'/1 =
    %% Line 106
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 107
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 109
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 108
		      call 'wxe_util':'call'
			  (2814, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getShown',1}}] )
	    -| ['compiler_generated'] )
	end
'getSetChecked'/1 =
    %% Line 114
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 115
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 117
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 116
		      call 'wxe_util':'call'
			  (2815, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSetChecked',1}}] )
	    -| ['compiler_generated'] )
	end
'getSetEnabled'/1 =
    %% Line 122
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 123
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 125
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 124
		      call 'wxe_util':'call'
			  (2816, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSetEnabled',1}}] )
	    -| ['compiler_generated'] )
	end
'getSetShown'/1 =
    %% Line 130
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 133
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 132
		      call 'wxe_util':'call'
			  (2817, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSetShown',1}}] )
	    -| ['compiler_generated'] )
	end
'getSetText'/1 =
    %% Line 138
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 139
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 141
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 140
		      call 'wxe_util':'call'
			  (2818, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getSetText',1}}] )
	    -| ['compiler_generated'] )
	end
'getText'/1 =
    %% Line 146
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 147
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 149
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 148
		      call 'wxe_util':'call'
			  (2819, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getText',1}}] )
	    -| ['compiler_generated'] )
	end
'getMode'/0 =
    %% Line 154
    fun () ->
	%% Line 155
	call 'wxe_util':'call'
	    (2820, %% Line 156
		   #{}#)
'getUpdateInterval'/0 =
    %% Line 160
    fun () ->
	%% Line 161
	call 'wxe_util':'call'
	    (2821, %% Line 162
		   #{}#)
'resetUpdateTime'/0 =
    %% Line 166
    fun () ->
	%% Line 167
	call 'wxe_util':'cast'
	    (2822, %% Line 168
		   #{}#)
'setMode'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <Mode>
	      when %% Line 175
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 177
		  #{#<Mode>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 176
		  call 'wxe_util':'cast'
		      (2823, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'setMode',1}}] )
	    -| ['compiler_generated'] )
	end
'setText'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor14},Text>
	      when %% Line 183
		call 'erlang':'is_list'
		    (Text) ->
	      do  %% Line 184
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxUpdateUIEvent') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxUpdateUIEvent')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <Text_UC> =
		      %% Line 185
		      call 'unicode':'characters_to_binary'
			  ([Text|[0]])
		  in  let <_cor10> =
			  %% Line 187
			  call 'erlang':'byte_size'
			      (Text_UC)
		      in  let <_cor5> =
			      %% Line 187
			      call 'erlang':'byte_size'
				  (Text_UC)
			  in  let <_cor6> =
				  %% Line 187
				  call 'erlang':'+'
				      (0, _cor5)
			      in  let <_cor7> =
				      %% Line 187
				      call 'erlang':'band'
					  (_cor6, 7)
				  in  let <_cor8> =
					  %% Line 187
					  call 'erlang':'-'
					      (8, _cor7)
				      in  let <_cor9> =
					      %% Line 187
					      call 'erlang':'band'
						  (_cor8, 7)
					  in  let <_cor11> =
						  %% Line 187
						  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
						    #<_cor10>(32,1,'integer',['unsigned'|['native']]),
						    #<Text_UC>('all',8,'binary',['unsigned'|['big']]),
						    #<0>(_cor9,8,'integer',['unsigned'|['big']])}#
					      in  %% Line 186
						  call 'wxe_util':'cast'
						      (2824, _cor11)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'setText',2}}] )
	    -| ['compiler_generated'] )
	end
'setUpdateInterval'/1 =
    %% Line 192
    fun (_cor0) ->
	case _cor0 of
	  <UpdateInterval>
	      when %% Line 193
		call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 195
		  #{#<UpdateInterval>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 194
		  call 'wxe_util':'cast'
		      (2825, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'setUpdateInterval',1}}] )
	    -| ['compiler_generated'] )
	end
'setString'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setString'
	    (_cor1, _cor0)
'setInt'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	call 'wxCommandEvent':'setInt'
	    (_cor1, _cor0)
'isSelection'/1 =
    %% Line 203
    fun (_cor0) ->
	call 'wxCommandEvent':'isSelection'
	    (_cor0)
'isChecked'/1 =
    %% Line 205
    fun (_cor0) ->
	call 'wxCommandEvent':'isChecked'
	    (_cor0)
'getString'/1 =
    %% Line 207
    fun (_cor0) ->
	call 'wxCommandEvent':'getString'
	    (_cor0)
'getSelection'/1 =
    %% Line 209
    fun (_cor0) ->
	call 'wxCommandEvent':'getSelection'
	    (_cor0)
'getInt'/1 =
    %% Line 211
    fun (_cor0) ->
	call 'wxCommandEvent':'getInt'
	    (_cor0)
'getExtraLong'/1 =
    %% Line 213
    fun (_cor0) ->
	call 'wxCommandEvent':'getExtraLong'
	    (_cor0)
'getClientData'/1 =
    %% Line 215
    fun (_cor0) ->
	call 'wxCommandEvent':'getClientData'
	    (_cor0)
'stopPropagation'/1 =
    %% Line 218
    fun (_cor0) ->
	call 'wxEvent':'stopPropagation'
	    (_cor0)
'skip'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	call 'wxEvent':'skip'
	    (_cor1, _cor0)
'skip'/1 =
    %% Line 222
    fun (_cor0) ->
	call 'wxEvent':'skip'
	    (_cor0)
'shouldPropagate'/1 =
    %% Line 224
    fun (_cor0) ->
	call 'wxEvent':'shouldPropagate'
	    (_cor0)
'resumePropagation'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	call 'wxEvent':'resumePropagation'
	    (_cor1, _cor0)
'isCommandEvent'/1 =
    %% Line 228
    fun (_cor0) ->
	call 'wxEvent':'isCommandEvent'
	    (_cor0)
'getTimestamp'/1 =
    %% Line 230
    fun (_cor0) ->
	call 'wxEvent':'getTimestamp'
	    (_cor0)
'getSkipped'/1 =
    %% Line 232
    fun (_cor0) ->
	call 'wxEvent':'getSkipped'
	    (_cor0)
'getId'/1 =
    %% Line 234
    fun (_cor0) ->
	call 'wxEvent':'getId'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxUpdateUIEvent')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxUpdateUIEvent', _cor0)
end