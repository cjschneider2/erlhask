module 'wxFlexGridSizer' ['add'/2,
			  'add'/3,
			  'add'/4,
			  'addGrowableCol'/2,
			  'addGrowableCol'/3,
			  'addGrowableRow'/2,
			  'addGrowableRow'/3,
			  'addSpacer'/2,
			  'addStretchSpacer'/1,
			  'addStretchSpacer'/2,
			  'calcMin'/1,
			  'clear'/1,
			  'clear'/2,
			  'destroy'/1,
			  'detach'/2,
			  'fit'/2,
			  'fitInside'/2,
			  'getChildren'/1,
			  'getCols'/1,
			  'getFlexibleDirection'/1,
			  'getHGap'/1,
			  'getItem'/2,
			  'getItem'/3,
			  'getMinSize'/1,
			  'getNonFlexibleGrowMode'/1,
			  'getPosition'/1,
			  'getRows'/1,
			  'getSize'/1,
			  'getVGap'/1,
			  'hide'/2,
			  'hide'/3,
			  'insert'/3,
			  'insert'/4,
			  'insert'/5,
			  'insertSpacer'/3,
			  'insertStretchSpacer'/2,
			  'insertStretchSpacer'/3,
			  'isShown'/2,
			  'layout'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'new'/1,
			  'new'/2,
			  'new'/4,
			  'parent_class'/1,
			  'prepend'/2,
			  'prepend'/3,
			  'prepend'/4,
			  'prependSpacer'/2,
			  'prependStretchSpacer'/1,
			  'prependStretchSpacer'/2,
			  'recalcSizes'/1,
			  'remove'/2,
			  'removeGrowableCol'/2,
			  'removeGrowableRow'/2,
			  'replace'/3,
			  'replace'/4,
			  'setCols'/2,
			  'setDimension'/5,
			  'setFlexibleDirection'/2,
			  'setHGap'/2,
			  'setItemMinSize'/3,
			  'setItemMinSize'/4,
			  'setMinSize'/2,
			  'setMinSize'/3,
			  'setNonFlexibleGrowMode'/2,
			  'setRows'/2,
			  'setSizeHints'/2,
			  'setVGap'/2,
			  'setVirtualSizeHints'/2,
			  'show'/2,
			  'show'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','wx_ref'},[{'record_field',26,{'atom',26,'ref'}}|[{'record_field',26,{'atom',26,'type'}}|[{'record_field',26,{'atom',26,'state'},{'nil',26}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','wx_env'},[{'record_field',28,{'atom',28,'port'}}|[{'record_field',28,{'atom',28,'sv'}}|[{'record_field',28,{'atom',28,'debug'},{'integer',28,0}}]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','wx_mem'},[{'record_field',30,{'atom',30,'bin'}}|[{'record_field',30,{'atom',30,'size'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','evh'},[{'record_field',32,{'atom',32,'et'},{'atom',32,'null'}}|[{'record_field',32,{'atom',32,'id'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'lastId'},{'op',32,'-',{'integer',32,1}}}|[{'record_field',32,{'atom',32,'cb'},{'integer',32,0}}|[{'record_field',33,{'atom',33,'skip'},{'atom',33,'undefined'}}|[{'record_field',33,{'atom',33,'userdata'},{'nil',33}}|[{'record_field',34,{'atom',34,'handler'},{'atom',34,'undefined'}}]]]]]]],[]}],
		%% Line 48
		'export_type' =
		    %% Line 48
		    [{'wxFlexGridSizer',0}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxFlexGridSizer',{'remote_type',54,[{'atom',54,'wx'}|[{'atom',54,'wx_object'}|[[]]]]},[]}],
		%% Line 56
		'spec' =
		    %% Line 56
		    [{{'new',1},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Cols'}]}|[{'type',56,'wxFlexGridSizer',[]}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Cols'}|[{'type',57,'integer',[]}]]]]}]]]}]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'new',2},[{'type',64,'bounded_fun',[{'type',64,'fun',[{'type',64,'product',[{'var',64,'Cols'}|[{'type',64,'list',[{'var',64,'Option'}]}]]}|[{'type',64,'wxFlexGridSizer',[]}]]}|[[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'Cols'}|[{'type',65,'integer',[]}]]]]}|[{'type',66,'constraint',[{'atom',66,'is_subtype'}|[[{'var',66,'Option'}|[{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'vgap'}|[{'type',66,'integer',[]}]]}|[{'type',67,'tuple',[{'atom',67,'hgap'}|[{'type',67,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'new',4},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'Rows'}|[{'var',78,'Cols'}|[{'var',78,'Vgap'}|[{'var',78,'Hgap'}]]]]}|[{'type',78,'wxFlexGridSizer',[]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Rows'}|[{'type',79,'integer',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Cols'}|[{'type',79,'integer',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Vgap'}|[{'type',79,'integer',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Hgap'}|[{'type',79,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'addGrowableCol',2},[{'type',86,'bounded_fun',[{'type',86,'fun',[{'type',86,'product',[{'var',86,'This'}|[{'var',86,'Idx'}]]}|[{'atom',86,'ok'}]]}|[[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'This'}|[{'type',87,'wxFlexGridSizer',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Idx'}|[{'type',87,'integer',[]}]]]]}]]]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'addGrowableCol',3},[{'type',94,'bounded_fun',[{'type',94,'fun',[{'type',94,'product',[{'var',94,'This'}|[{'var',94,'Idx'}|[{'type',94,'list',[{'var',94,'Option'}]}]]]}|[{'atom',94,'ok'}]]}|[[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'This'}|[{'type',95,'wxFlexGridSizer',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Idx'}|[{'type',95,'integer',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Option'}|[{'type',96,'tuple',[{'atom',96,'proportion'}|[{'type',96,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'addGrowableRow',2},[{'type',107,'bounded_fun',[{'type',107,'fun',[{'type',107,'product',[{'var',107,'This'}|[{'var',107,'Idx'}]]}|[{'atom',107,'ok'}]]}|[[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'This'}|[{'type',108,'wxFlexGridSizer',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Idx'}|[{'type',108,'integer',[]}]]]]}]]]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'addGrowableRow',3},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'This'}|[{'var',115,'Idx'}|[{'type',115,'list',[{'var',115,'Option'}]}]]]}|[{'atom',115,'ok'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'This'}|[{'type',116,'wxFlexGridSizer',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Idx'}|[{'type',116,'integer',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Option'}|[{'type',117,'tuple',[{'atom',117,'proportion'}|[{'type',117,'integer',[]}]]}]]]]}]]]]]}]}],
		%% Line 128
		'spec' =
		    %% Line 128
		    [{{'getFlexibleDirection',1},[{'type',128,'bounded_fun',[{'type',128,'fun',[{'type',128,'product',[{'var',128,'This'}]}|[{'type',128,'integer',[]}]]}|[[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'This'}|[{'type',129,'wxFlexGridSizer',[]}]]]]}]]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'getNonFlexibleGrowMode',1},[{'type',137,'bounded_fun',[{'type',137,'fun',[{'type',137,'product',[{'var',137,'This'}]}|[{'remote_type',137,[{'atom',137,'wx'}|[{'atom',137,'wx_enum'}|[[]]]]}]]}|[[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'This'}|[{'type',138,'wxFlexGridSizer',[]}]]]]}]]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'removeGrowableCol',2},[{'type',145,'bounded_fun',[{'type',145,'fun',[{'type',145,'product',[{'var',145,'This'}|[{'var',145,'Idx'}]]}|[{'atom',145,'ok'}]]}|[[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'This'}|[{'type',146,'wxFlexGridSizer',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Idx'}|[{'type',146,'integer',[]}]]]]}]]]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'removeGrowableRow',2},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'This'}|[{'var',154,'Idx'}]]}|[{'atom',154,'ok'}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'This'}|[{'type',155,'wxFlexGridSizer',[]}]]]]}|[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Idx'}|[{'type',155,'integer',[]}]]]]}]]]]}]}],
		%% Line 163
		'spec' =
		    %% Line 163
		    [{{'setFlexibleDirection',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'This'}|[{'var',163,'Direction'}]]}|[{'atom',163,'ok'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'This'}|[{'type',164,'wxFlexGridSizer',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Direction'}|[{'type',164,'integer',[]}]]]]}]]]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'setNonFlexibleGrowMode',2},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'This'}|[{'var',173,'Mode'}]]}|[{'atom',173,'ok'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'This'}|[{'type',174,'wxFlexGridSizer',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Mode'}|[{'remote_type',174,[{'atom',174,'wx'}|[{'atom',174,'wx_enum'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'destroy',1},[{'type',182,'fun',[{'type',182,'product',[{'ann_type',182,[{'var',182,'This'}|[{'type',182,'wxFlexGridSizer',[]}]]}]}|[{'atom',182,'ok'}]]}]}]]
'parent_class'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <'wxGridSizer'> when 'true' ->
	      'true'
	  %% Line 51
	  <'wxSizer'> when 'true' ->
	      'true'
	  %% Line 52
	  <_X_Class> when 'true' ->
	      call 'erlang':'error'
		  ({'badtype','wxFlexGridSizer'})
	end
'new'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <Cols>
	      when %% Line 60
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 61
	      apply 'new'/2
		  (Cols, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'new',1}}] )
	    -| ['compiler_generated'] )
	end
'new'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cols,Options>
	      when let <_cor2> =
		    %% Line 69
		    call 'erlang':'is_integer'
			(Cols)
		in  let <_cor3> =
			%% Line 69
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 69
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <MOpts> =
		  %% Line 70
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{'vgap',Vgap},Acc> when 'true' ->
			      let <_cor4> =
				  #{#<1>(32,1,'integer',['unsigned'|['native']]),
				    #<Vgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor4|Acc]
			  %% Line 71
			  <{'hgap',Hgap},Acc> when 'true' ->
			      let <_cor5> =
				  #{#<2>(32,1,'integer',['unsigned'|['native']]),
				    #<Hgap>(32,1,'integer',['unsigned'|['native']])}#
			      in  [_cor5|Acc]
			  %% Line 72
			  <BadOpt,_cor16> when 'true' ->
			      call 'erlang':'error'
				  ({'badoption',BadOpt})
			end
		    -| [{'id',{0,0,'-new/2-fun-0-'}}] )
	      in  let <_cor11> =
		      %% Line 73
		      call 'lists':'foldl'
			  (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']]),
				     #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		  in  let <BinOpt> =
			  %% Line 73
			  call 'erlang':'list_to_binary'
			      (_cor11)
		      in  let <_cor13> =
			      %% Line 75
			      #{#<Cols>(32,1,'integer',['unsigned'|['native']]),
				#<0>(32,1,'integer',['unsigned'|['big']]),
				#<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			  in  %% Line 74
			      call 'wxe_util':'construct'
				  (1386, _cor13)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'new'/4 =
    %% Line 80
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Rows,Cols,Vgap,Hgap>
	      when %% Line 81
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Rows)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Cols)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Vgap)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(Hgap)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 83
		  #{#<Rows>(32,1,'integer',['unsigned'|['native']]),
		    #<Cols>(32,1,'integer',['unsigned'|['native']]),
		    #<Vgap>(32,1,'integer',['unsigned'|['native']]),
		    #<Hgap>(32,1,'integer',['unsigned'|['native']])}#
	      in  %% Line 82
		  call 'wxe_util':'construct'
		      (1385, _cor10)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'new',4}}] )
	    -| ['compiler_generated'] )
	end
'addGrowableCol'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Idx>
	      when %% Line 90
		call 'erlang':'is_integer'
		    (Idx) ->
	      %% Line 91
	      apply 'addGrowableCol'/3
		  (This, Idx, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'addGrowableCol',2}}] )
	    -| ['compiler_generated'] )
	end
'addGrowableCol'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Idx,Options>
	      when let <_cor3> =
		    %% Line 98
		    call 'erlang':'is_integer'
			(Idx)
		in  let <_cor4> =
			%% Line 98
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 98
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 99
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 100
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 101
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-addGrowableCol/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 102
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 102
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 104
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Idx>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 103
				  call 'wxe_util':'cast'
				      (1387, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'addGrowableCol',3}}] )
	    -| ['compiler_generated'] )
	end
'addGrowableRow'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <This = {'wx_ref',_cor5,_cor6,_cor7},Idx>
	      when %% Line 111
		call 'erlang':'is_integer'
		    (Idx) ->
	      %% Line 112
	      apply 'addGrowableRow'/3
		  (This, Idx, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'addGrowableRow',2}}] )
	    -| ['compiler_generated'] )
	end
'addGrowableRow'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor19},Idx,Options>
	      when let <_cor3> =
		    %% Line 119
		    call 'erlang':'is_integer'
			(Idx)
		in  let <_cor4> =
			%% Line 119
			call 'erlang':'is_list'
			    (Options)
		    in  %% Line 119
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 120
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <MOpts> =
		      %% Line 121
		      ( fun (_cor9,_cor8) ->
			    case <_cor9,_cor8> of
			      <{'proportion',Proportion},Acc> when 'true' ->
				  let <_cor7> =
				      #{#<1>(32,1,'integer',['unsigned'|['native']]),
					#<Proportion>(32,1,'integer',['unsigned'|['native']])}#
				  in  [_cor7|Acc]
			      %% Line 122
			      <BadOpt,_cor20> when 'true' ->
				  call 'erlang':'error'
				      ({'badoption',BadOpt})
			    end
			-| [{'id',{0,0,'-addGrowableRow/3-fun-0-'}}] )
		  in  let <_cor13> =
			  %% Line 123
			  call 'lists':'foldl'
			      (MOpts, [#{#<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']]),
					 #<0>(8,1,'integer',['unsigned'|['big']])}#], Options)
		      in  let <BinOpt> =
			      %% Line 123
			      call 'erlang':'list_to_binary'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 125
				  #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
				    #<Idx>(32,1,'integer',['unsigned'|['native']]),
				    #<BinOpt>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 124
				  call 'wxe_util':'cast'
				      (1388, _cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'addGrowableRow',3}}] )
	    -| ['compiler_generated'] )
	end
'getFlexibleDirection'/1 =
    %% Line 130
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 131
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 133
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 132
		      call 'wxe_util':'call'
			  (1389, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getFlexibleDirection',1}}] )
	    -| ['compiler_generated'] )
	end
'getNonFlexibleGrowMode'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <{'wx_ref',ThisRef,ThisT,_cor5}> when 'true' ->
	      do  %% Line 140
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor3> =
		      %% Line 142
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 141
		      call 'wxe_util':'call'
			  (1390, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'getNonFlexibleGrowMode',1}}] )
	    -| ['compiler_generated'] )
	end
'removeGrowableCol'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Idx>
	      when %% Line 148
		call 'erlang':'is_integer'
		    (Idx) ->
	      do  %% Line 149
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 151
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Idx>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 150
		      call 'wxe_util':'cast'
			  (1391, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'removeGrowableCol',2}}] )
	    -| ['compiler_generated'] )
	end
'removeGrowableRow'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Idx>
	      when %% Line 157
		call 'erlang':'is_integer'
		    (Idx) ->
	      do  %% Line 158
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 160
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Idx>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 159
		      call 'wxe_util':'cast'
			  (1392, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'removeGrowableRow',2}}] )
	    -| ['compiler_generated'] )
	end
'setFlexibleDirection'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Direction>
	      when %% Line 166
		call 'erlang':'is_integer'
		    (Direction) ->
	      do  %% Line 167
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 169
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Direction>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 168
		      call 'wxe_util':'cast'
			  (1393, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setFlexibleDirection',2}}] )
	    -| ['compiler_generated'] )
	end
'setNonFlexibleGrowMode'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx_ref',ThisRef,ThisT,_cor7},Mode>
	      when %% Line 176
		call 'erlang':'is_integer'
		    (Mode) ->
	      do  %% Line 177
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (ThisT,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call ThisT:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_cor4> =
		      %% Line 179
		      #{#<ThisRef>(32,1,'integer',['unsigned'|['native']]),
			#<Mode>(32,1,'integer',['unsigned'|['native']])}#
		  in  %% Line 178
		      call 'wxe_util':'cast'
			  (1394, _cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setNonFlexibleGrowMode',2}}] )
	    -| ['compiler_generated'] )
	end
'destroy'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <Obj = {'wx_ref',_cor4,Type,_cor5}> when 'true' ->
	      do  %% Line 184
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Type,
				   'wxFlexGridSizer') ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    call Type:'parent_class'
				('wxFlexGridSizer')
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  do  %% Line 185
		      call 'wxe_util':'destroy'
			  (4, Obj)
		      %% Line 186
		      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'destroy',1}}] )
	    -| ['compiler_generated'] )
	end
'setVGap'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setVGap'
	    (_cor1, _cor0)
'setRows'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setRows'
	    (_cor1, _cor0)
'setHGap'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setHGap'
	    (_cor1, _cor0)
'setCols'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	call 'wxGridSizer':'setCols'
	    (_cor1, _cor0)
'getVGap'/1 =
    %% Line 197
    fun (_cor0) ->
	call 'wxGridSizer':'getVGap'
	    (_cor0)
'getRows'/1 =
    %% Line 199
    fun (_cor0) ->
	call 'wxGridSizer':'getRows'
	    (_cor0)
'getHGap'/1 =
    %% Line 201
    fun (_cor0) ->
	call 'wxGridSizer':'getHGap'
	    (_cor0)
'getCols'/1 =
    %% Line 203
    fun (_cor0) ->
	call 'wxGridSizer':'getCols'
	    (_cor0)
'show'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor2, _cor1, _cor0)
'show'/2 =
    %% Line 208
    fun (_cor1,_cor0) ->
	call 'wxSizer':'show'
	    (_cor1, _cor0)
'setVirtualSizeHints'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setVirtualSizeHints'
	    (_cor1, _cor0)
'setSizeHints'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setSizeHints'
	    (_cor1, _cor0)
'setItemMinSize'/4 =
    %% Line 214
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor3, _cor2, _cor1, _cor0)
'setItemMinSize'/3 =
    %% Line 216
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setItemMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor2, _cor1, _cor0)
'setMinSize'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	call 'wxSizer':'setMinSize'
	    (_cor1, _cor0)
'setDimension'/5 =
    %% Line 222
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'setDimension'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'replace'/4 =
    %% Line 224
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor3, _cor2, _cor1, _cor0)
'replace'/3 =
    %% Line 226
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'replace'
	    (_cor2, _cor1, _cor0)
'remove'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	call 'wxSizer':'remove'
	    (_cor1, _cor0)
'recalcSizes'/1 =
    %% Line 230
    fun (_cor0) ->
	call 'wxSizer':'recalcSizes'
	    (_cor0)
'prependStretchSpacer'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor1, _cor0)
'prependStretchSpacer'/1 =
    %% Line 234
    fun (_cor0) ->
	call 'wxSizer':'prependStretchSpacer'
	    (_cor0)
'prependSpacer'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prependSpacer'
	    (_cor1, _cor0)
'prepend'/4 =
    %% Line 238
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor3, _cor2, _cor1, _cor0)
'prepend'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor2, _cor1, _cor0)
'prepend'/2 =
    %% Line 242
    fun (_cor1,_cor0) ->
	call 'wxSizer':'prepend'
	    (_cor1, _cor0)
'layout'/1 =
    %% Line 244
    fun (_cor0) ->
	call 'wxSizer':'layout'
	    (_cor0)
'isShown'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	call 'wxSizer':'isShown'
	    (_cor1, _cor0)
'insertStretchSpacer'/3 =
    %% Line 248
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor2, _cor1, _cor0)
'insertStretchSpacer'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	call 'wxSizer':'insertStretchSpacer'
	    (_cor1, _cor0)
'insertSpacer'/3 =
    %% Line 252
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insertSpacer'
	    (_cor2, _cor1, _cor0)
'insert'/5 =
    %% Line 254
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'insert'/4 =
    %% Line 256
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor3, _cor2, _cor1, _cor0)
'insert'/3 =
    %% Line 258
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'insert'
	    (_cor2, _cor1, _cor0)
'hide'/3 =
    %% Line 260
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor2, _cor1, _cor0)
'hide'/2 =
    %% Line 262
    fun (_cor1,_cor0) ->
	call 'wxSizer':'hide'
	    (_cor1, _cor0)
'getMinSize'/1 =
    %% Line 264
    fun (_cor0) ->
	call 'wxSizer':'getMinSize'
	    (_cor0)
'getPosition'/1 =
    %% Line 266
    fun (_cor0) ->
	call 'wxSizer':'getPosition'
	    (_cor0)
'getSize'/1 =
    %% Line 268
    fun (_cor0) ->
	call 'wxSizer':'getSize'
	    (_cor0)
'getItem'/3 =
    %% Line 270
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor2, _cor1, _cor0)
'getItem'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	call 'wxSizer':'getItem'
	    (_cor1, _cor0)
'getChildren'/1 =
    %% Line 274
    fun (_cor0) ->
	call 'wxSizer':'getChildren'
	    (_cor0)
'fitInside'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fitInside'
	    (_cor1, _cor0)
'fit'/2 =
    %% Line 278
    fun (_cor1,_cor0) ->
	call 'wxSizer':'fit'
	    (_cor1, _cor0)
'detach'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	call 'wxSizer':'detach'
	    (_cor1, _cor0)
'clear'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	call 'wxSizer':'clear'
	    (_cor1, _cor0)
'clear'/1 =
    %% Line 284
    fun (_cor0) ->
	call 'wxSizer':'clear'
	    (_cor0)
'calcMin'/1 =
    %% Line 286
    fun (_cor0) ->
	call 'wxSizer':'calcMin'
	    (_cor0)
'addStretchSpacer'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor1, _cor0)
'addStretchSpacer'/1 =
    %% Line 290
    fun (_cor0) ->
	call 'wxSizer':'addStretchSpacer'
	    (_cor0)
'addSpacer'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	call 'wxSizer':'addSpacer'
	    (_cor1, _cor0)
'add'/4 =
    %% Line 294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor3, _cor2, _cor1, _cor0)
'add'/3 =
    %% Line 296
    fun (_cor2,_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor2, _cor1, _cor0)
'add'/2 =
    %% Line 298
    fun (_cor1,_cor0) ->
	call 'wxSizer':'add'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('wxFlexGridSizer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('wxFlexGridSizer', _cor0)
end